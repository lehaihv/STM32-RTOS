
RTOS V2 Task2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004498  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  08004628  08004628  00014628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046e0  080046e0  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080046e0  080046e0  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046e0  080046e0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046e0  080046e0  000146e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046e4  080046e4  000146e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080046e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000197c  20000010  080046f8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000198c  080046f8  0002198c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017be4  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d6b  00000000  00000000  00037c24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000012e8  00000000  00000000  0003a990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011c0  00000000  00000000  0003bc78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002ba5  00000000  00000000  0003ce38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012e9c  00000000  00000000  0003f9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f7be6  00000000  00000000  00052879  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014a45f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f18  00000000  00000000  0014a4b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000010 	.word	0x20000010
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004610 	.word	0x08004610

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000014 	.word	0x20000014
 80001cc:	08004610 	.word	0x08004610

080001d0 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80001d0:	b480      	push	{r7}
 80001d2:	b083      	sub	sp, #12
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001d8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001dc:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	2b00      	cmp	r3, #0
 80001e6:	d013      	beq.n	8000210 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80001e8:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80001ec:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80001f0:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80001f4:	2b00      	cmp	r3, #0
 80001f6:	d00b      	beq.n	8000210 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80001f8:	e000      	b.n	80001fc <ITM_SendChar+0x2c>
    {
      __NOP();
 80001fa:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80001fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000200:	681b      	ldr	r3, [r3, #0]
 8000202:	2b00      	cmp	r3, #0
 8000204:	d0f9      	beq.n	80001fa <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000206:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800020a:	687a      	ldr	r2, [r7, #4]
 800020c:	b2d2      	uxtb	r2, r2
 800020e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000210:	687b      	ldr	r3, [r7, #4]
}
 8000212:	4618      	mov	r0, r3
 8000214:	370c      	adds	r7, #12
 8000216:	46bd      	mov	sp, r7
 8000218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800021c:	4770      	bx	lr
	...

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 f9c9 	bl	80005ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f824 	bl	8000274 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 f868 	bl	8000300 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000230:	f001 fc60 	bl	8001af4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000234:	4a09      	ldr	r2, [pc, #36]	; (800025c <main+0x3c>)
 8000236:	2100      	movs	r1, #0
 8000238:	4809      	ldr	r0, [pc, #36]	; (8000260 <main+0x40>)
 800023a:	f001 fca5 	bl	8001b88 <osThreadNew>
 800023e:	4603      	mov	r3, r0
 8000240:	4a08      	ldr	r2, [pc, #32]	; (8000264 <main+0x44>)
 8000242:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000244:	4a08      	ldr	r2, [pc, #32]	; (8000268 <main+0x48>)
 8000246:	2100      	movs	r1, #0
 8000248:	4808      	ldr	r0, [pc, #32]	; (800026c <main+0x4c>)
 800024a:	f001 fc9d 	bl	8001b88 <osThreadNew>
 800024e:	4603      	mov	r3, r0
 8000250:	4a07      	ldr	r2, [pc, #28]	; (8000270 <main+0x50>)
 8000252:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000254:	f001 fc72 	bl	8001b3c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000258:	e7fe      	b.n	8000258 <main+0x38>
 800025a:	bf00      	nop
 800025c:	08004650 	.word	0x08004650
 8000260:	08000369 	.word	0x08000369
 8000264:	200018f4 	.word	0x200018f4
 8000268:	08004674 	.word	0x08004674
 800026c:	08000381 	.word	0x08000381
 8000270:	200018f8 	.word	0x200018f8

08000274 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000274:	b580      	push	{r7, lr}
 8000276:	b096      	sub	sp, #88	; 0x58
 8000278:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800027a:	f107 0314 	add.w	r3, r7, #20
 800027e:	2244      	movs	r2, #68	; 0x44
 8000280:	2100      	movs	r1, #0
 8000282:	4618      	mov	r0, r3
 8000284:	f004 f9bc 	bl	8004600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000288:	463b      	mov	r3, r7
 800028a:	2200      	movs	r2, #0
 800028c:	601a      	str	r2, [r3, #0]
 800028e:	605a      	str	r2, [r3, #4]
 8000290:	609a      	str	r2, [r3, #8]
 8000292:	60da      	str	r2, [r3, #12]
 8000294:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000296:	f44f 7000 	mov.w	r0, #512	; 0x200
 800029a:	f000 fab7 	bl	800080c <HAL_PWREx_ControlVoltageScaling>
 800029e:	4603      	mov	r3, r0
 80002a0:	2b00      	cmp	r3, #0
 80002a2:	d001      	beq.n	80002a8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80002a4:	f000 f88a 	bl	80003bc <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80002a8:	2310      	movs	r3, #16
 80002aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80002ac:	2301      	movs	r3, #1
 80002ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80002b0:	2300      	movs	r3, #0
 80002b2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80002b4:	2360      	movs	r3, #96	; 0x60
 80002b6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002b8:	2300      	movs	r3, #0
 80002ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002bc:	f107 0314 	add.w	r3, r7, #20
 80002c0:	4618      	mov	r0, r3
 80002c2:	f000 faf9 	bl	80008b8 <HAL_RCC_OscConfig>
 80002c6:	4603      	mov	r3, r0
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d001      	beq.n	80002d0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80002cc:	f000 f876 	bl	80003bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d0:	230f      	movs	r3, #15
 80002d2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80002d4:	2300      	movs	r3, #0
 80002d6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002d8:	2300      	movs	r3, #0
 80002da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002dc:	2300      	movs	r3, #0
 80002de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e0:	2300      	movs	r3, #0
 80002e2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e4:	463b      	mov	r3, r7
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 fecb 	bl	8001084 <HAL_RCC_ClockConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80002f4:	f000 f862 	bl	80003bc <Error_Handler>
  }
}
 80002f8:	bf00      	nop
 80002fa:	3758      	adds	r7, #88	; 0x58
 80002fc:	46bd      	mov	sp, r7
 80002fe:	bd80      	pop	{r7, pc}

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b480      	push	{r7}
 8000302:	b083      	sub	sp, #12
 8000304:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000306:	4b0f      	ldr	r3, [pc, #60]	; (8000344 <MX_GPIO_Init+0x44>)
 8000308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800030a:	4a0e      	ldr	r2, [pc, #56]	; (8000344 <MX_GPIO_Init+0x44>)
 800030c:	f043 0301 	orr.w	r3, r3, #1
 8000310:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000312:	4b0c      	ldr	r3, [pc, #48]	; (8000344 <MX_GPIO_Init+0x44>)
 8000314:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000316:	f003 0301 	and.w	r3, r3, #1
 800031a:	607b      	str	r3, [r7, #4]
 800031c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800031e:	4b09      	ldr	r3, [pc, #36]	; (8000344 <MX_GPIO_Init+0x44>)
 8000320:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000322:	4a08      	ldr	r2, [pc, #32]	; (8000344 <MX_GPIO_Init+0x44>)
 8000324:	f043 0302 	orr.w	r3, r3, #2
 8000328:	64d3      	str	r3, [r2, #76]	; 0x4c
 800032a:	4b06      	ldr	r3, [pc, #24]	; (8000344 <MX_GPIO_Init+0x44>)
 800032c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800032e:	f003 0302 	and.w	r3, r3, #2
 8000332:	603b      	str	r3, [r7, #0]
 8000334:	683b      	ldr	r3, [r7, #0]

}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40021000 	.word	0x40021000

08000348 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(char msg)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	b082      	sub	sp, #8
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	71fb      	strb	r3, [r7, #7]
   ITM_SendChar(msg);
 8000352:	79fb      	ldrb	r3, [r7, #7]
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff3b 	bl	80001d0 <ITM_SendChar>
   ITM_SendChar('\n');
 800035a:	200a      	movs	r0, #10
 800035c:	f7ff ff38 	bl	80001d0 <ITM_SendChar>
}
 8000360:	bf00      	nop
 8000362:	3708      	adds	r7, #8
 8000364:	46bd      	mov	sp, r7
 8000366:	bd80      	pop	{r7, pc}

08000368 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0
 800036e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Task_action('1');
 8000370:	2031      	movs	r0, #49	; 0x31
 8000372:	f7ff ffe9 	bl	8000348 <Task_action>
    osDelay(1000);
 8000376:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800037a:	f001 fc97 	bl	8001cac <osDelay>
	Task_action('1');
 800037e:	e7f7      	b.n	8000370 <StartTask1+0x8>

08000380 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	b082      	sub	sp, #8
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	Task_action('2');
 8000388:	2032      	movs	r0, #50	; 0x32
 800038a:	f7ff ffdd 	bl	8000348 <Task_action>
    osDelay(1000);
 800038e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000392:	f001 fc8b 	bl	8001cac <osDelay>
	Task_action('2');
 8000396:	e7f7      	b.n	8000388 <StartTask2+0x8>

08000398 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	b082      	sub	sp, #8
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a04      	ldr	r2, [pc, #16]	; (80003b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80003a6:	4293      	cmp	r3, r2
 80003a8:	d101      	bne.n	80003ae <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80003aa:	f000 f91f 	bl	80005ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80003ae:	bf00      	nop
 80003b0:	3708      	adds	r7, #8
 80003b2:	46bd      	mov	sp, r7
 80003b4:	bd80      	pop	{r7, pc}
 80003b6:	bf00      	nop
 80003b8:	40001000 	.word	0x40001000

080003bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003bc:	b480      	push	{r7}
 80003be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003c0:	b672      	cpsid	i
}
 80003c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003c4:	e7fe      	b.n	80003c4 <Error_Handler+0x8>
	...

080003c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ce:	4b11      	ldr	r3, [pc, #68]	; (8000414 <HAL_MspInit+0x4c>)
 80003d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003d2:	4a10      	ldr	r2, [pc, #64]	; (8000414 <HAL_MspInit+0x4c>)
 80003d4:	f043 0301 	orr.w	r3, r3, #1
 80003d8:	6613      	str	r3, [r2, #96]	; 0x60
 80003da:	4b0e      	ldr	r3, [pc, #56]	; (8000414 <HAL_MspInit+0x4c>)
 80003dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80003de:	f003 0301 	and.w	r3, r3, #1
 80003e2:	607b      	str	r3, [r7, #4]
 80003e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003e6:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <HAL_MspInit+0x4c>)
 80003e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003ea:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <HAL_MspInit+0x4c>)
 80003ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80003f0:	6593      	str	r3, [r2, #88]	; 0x58
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <HAL_MspInit+0x4c>)
 80003f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80003fa:	603b      	str	r3, [r7, #0]
 80003fc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80003fe:	2200      	movs	r2, #0
 8000400:	210f      	movs	r1, #15
 8000402:	f06f 0001 	mvn.w	r0, #1
 8000406:	f000 f9c9 	bl	800079c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800040a:	bf00      	nop
 800040c:	3708      	adds	r7, #8
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}
 8000412:	bf00      	nop
 8000414:	40021000 	.word	0x40021000

08000418 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	b08c      	sub	sp, #48	; 0x30
 800041c:	af00      	add	r7, sp, #0
 800041e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000420:	2300      	movs	r3, #0
 8000422:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000424:	2300      	movs	r3, #0
 8000426:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000428:	2200      	movs	r2, #0
 800042a:	6879      	ldr	r1, [r7, #4]
 800042c:	2036      	movs	r0, #54	; 0x36
 800042e:	f000 f9b5 	bl	800079c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000432:	2036      	movs	r0, #54	; 0x36
 8000434:	f000 f9ce 	bl	80007d4 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000438:	4b1e      	ldr	r3, [pc, #120]	; (80004b4 <HAL_InitTick+0x9c>)
 800043a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800043c:	4a1d      	ldr	r2, [pc, #116]	; (80004b4 <HAL_InitTick+0x9c>)
 800043e:	f043 0310 	orr.w	r3, r3, #16
 8000442:	6593      	str	r3, [r2, #88]	; 0x58
 8000444:	4b1b      	ldr	r3, [pc, #108]	; (80004b4 <HAL_InitTick+0x9c>)
 8000446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000448:	f003 0310 	and.w	r3, r3, #16
 800044c:	60fb      	str	r3, [r7, #12]
 800044e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000450:	f107 0210 	add.w	r2, r7, #16
 8000454:	f107 0314 	add.w	r3, r7, #20
 8000458:	4611      	mov	r1, r2
 800045a:	4618      	mov	r0, r3
 800045c:	f000 ffa2 	bl	80013a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000460:	f000 ff8a 	bl	8001378 <HAL_RCC_GetPCLK1Freq>
 8000464:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000468:	4a13      	ldr	r2, [pc, #76]	; (80004b8 <HAL_InitTick+0xa0>)
 800046a:	fba2 2303 	umull	r2, r3, r2, r3
 800046e:	0c9b      	lsrs	r3, r3, #18
 8000470:	3b01      	subs	r3, #1
 8000472:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000474:	4b11      	ldr	r3, [pc, #68]	; (80004bc <HAL_InitTick+0xa4>)
 8000476:	4a12      	ldr	r2, [pc, #72]	; (80004c0 <HAL_InitTick+0xa8>)
 8000478:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800047a:	4b10      	ldr	r3, [pc, #64]	; (80004bc <HAL_InitTick+0xa4>)
 800047c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000480:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000482:	4a0e      	ldr	r2, [pc, #56]	; (80004bc <HAL_InitTick+0xa4>)
 8000484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000486:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000488:	4b0c      	ldr	r3, [pc, #48]	; (80004bc <HAL_InitTick+0xa4>)
 800048a:	2200      	movs	r2, #0
 800048c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800048e:	4b0b      	ldr	r3, [pc, #44]	; (80004bc <HAL_InitTick+0xa4>)
 8000490:	2200      	movs	r2, #0
 8000492:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000494:	4809      	ldr	r0, [pc, #36]	; (80004bc <HAL_InitTick+0xa4>)
 8000496:	f001 f817 	bl	80014c8 <HAL_TIM_Base_Init>
 800049a:	4603      	mov	r3, r0
 800049c:	2b00      	cmp	r3, #0
 800049e:	d104      	bne.n	80004aa <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80004a0:	4806      	ldr	r0, [pc, #24]	; (80004bc <HAL_InitTick+0xa4>)
 80004a2:	f001 f873 	bl	800158c <HAL_TIM_Base_Start_IT>
 80004a6:	4603      	mov	r3, r0
 80004a8:	e000      	b.n	80004ac <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 80004aa:	2301      	movs	r3, #1
}
 80004ac:	4618      	mov	r0, r3
 80004ae:	3730      	adds	r7, #48	; 0x30
 80004b0:	46bd      	mov	sp, r7
 80004b2:	bd80      	pop	{r7, pc}
 80004b4:	40021000 	.word	0x40021000
 80004b8:	431bde83 	.word	0x431bde83
 80004bc:	200018fc 	.word	0x200018fc
 80004c0:	40001000 	.word	0x40001000

080004c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004c8:	e7fe      	b.n	80004c8 <NMI_Handler+0x4>

080004ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004ca:	b480      	push	{r7}
 80004cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004ce:	e7fe      	b.n	80004ce <HardFault_Handler+0x4>

080004d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004d4:	e7fe      	b.n	80004d4 <MemManage_Handler+0x4>

080004d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004d6:	b480      	push	{r7}
 80004d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004da:	e7fe      	b.n	80004da <BusFault_Handler+0x4>

080004dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004e0:	e7fe      	b.n	80004e0 <UsageFault_Handler+0x4>

080004e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80004e2:	b480      	push	{r7}
 80004e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr

080004f0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80004f4:	4802      	ldr	r0, [pc, #8]	; (8000500 <TIM6_DAC_IRQHandler+0x10>)
 80004f6:	f001 f8b9 	bl	800166c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80004fa:	bf00      	nop
 80004fc:	bd80      	pop	{r7, pc}
 80004fe:	bf00      	nop
 8000500:	200018fc 	.word	0x200018fc

08000504 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000504:	b480      	push	{r7}
 8000506:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000508:	4b15      	ldr	r3, [pc, #84]	; (8000560 <SystemInit+0x5c>)
 800050a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800050e:	4a14      	ldr	r2, [pc, #80]	; (8000560 <SystemInit+0x5c>)
 8000510:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000514:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000518:	4b12      	ldr	r3, [pc, #72]	; (8000564 <SystemInit+0x60>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	4a11      	ldr	r2, [pc, #68]	; (8000564 <SystemInit+0x60>)
 800051e:	f043 0301 	orr.w	r3, r3, #1
 8000522:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000524:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <SystemInit+0x60>)
 8000526:	2200      	movs	r2, #0
 8000528:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800052a:	4b0e      	ldr	r3, [pc, #56]	; (8000564 <SystemInit+0x60>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a0d      	ldr	r2, [pc, #52]	; (8000564 <SystemInit+0x60>)
 8000530:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000534:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000538:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800053a:	4b0a      	ldr	r3, [pc, #40]	; (8000564 <SystemInit+0x60>)
 800053c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000540:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000542:	4b08      	ldr	r3, [pc, #32]	; (8000564 <SystemInit+0x60>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	4a07      	ldr	r2, [pc, #28]	; (8000564 <SystemInit+0x60>)
 8000548:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800054c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800054e:	4b05      	ldr	r3, [pc, #20]	; (8000564 <SystemInit+0x60>)
 8000550:	2200      	movs	r2, #0
 8000552:	619a      	str	r2, [r3, #24]
}
 8000554:	bf00      	nop
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop
 8000560:	e000ed00 	.word	0xe000ed00
 8000564:	40021000 	.word	0x40021000

08000568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800056c:	f7ff ffca 	bl	8000504 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000570:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000572:	e003      	b.n	800057c <LoopCopyDataInit>

08000574 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000574:	4b0b      	ldr	r3, [pc, #44]	; (80005a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000576:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000578:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800057a:	3104      	adds	r1, #4

0800057c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800057c:	480a      	ldr	r0, [pc, #40]	; (80005a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800057e:	4b0b      	ldr	r3, [pc, #44]	; (80005ac <LoopForever+0xe>)
	adds	r2, r0, r1
 8000580:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000582:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000584:	d3f6      	bcc.n	8000574 <CopyDataInit>
	ldr	r2, =_sbss
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000588:	e002      	b.n	8000590 <LoopFillZerobss>

0800058a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800058a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800058c:	f842 3b04 	str.w	r3, [r2], #4

08000590 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000590:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <LoopForever+0x16>)
	cmp	r2, r3
 8000592:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000594:	d3f9      	bcc.n	800058a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000596:	f004 f801 	bl	800459c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059a:	f7ff fe41 	bl	8000220 <main>

0800059e <LoopForever>:

LoopForever:
    b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80005a4:	080046e8 	.word	0x080046e8
	ldr	r0, =_sdata
 80005a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80005ac:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 80005b0:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 80005b4:	2000198c 	.word	0x2000198c

080005b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_2_IRQHandler>

080005ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005c0:	2300      	movs	r3, #0
 80005c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f8de 	bl	8000786 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ca:	2000      	movs	r0, #0
 80005cc:	f7ff ff24 	bl	8000418 <HAL_InitTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	e001      	b.n	80005e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005dc:	f7ff fef4 	bl	80003c8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80005f0:	4b06      	ldr	r3, [pc, #24]	; (800060c <HAL_IncTick+0x20>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	461a      	mov	r2, r3
 80005f6:	4b06      	ldr	r3, [pc, #24]	; (8000610 <HAL_IncTick+0x24>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4413      	add	r3, r2
 80005fc:	4a04      	ldr	r2, [pc, #16]	; (8000610 <HAL_IncTick+0x24>)
 80005fe:	6013      	str	r3, [r2, #0]
}
 8000600:	bf00      	nop
 8000602:	46bd      	mov	sp, r7
 8000604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000608:	4770      	bx	lr
 800060a:	bf00      	nop
 800060c:	20000008 	.word	0x20000008
 8000610:	20001948 	.word	0x20001948

08000614 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000614:	b480      	push	{r7}
 8000616:	af00      	add	r7, sp, #0
  return uwTick;
 8000618:	4b03      	ldr	r3, [pc, #12]	; (8000628 <HAL_GetTick+0x14>)
 800061a:	681b      	ldr	r3, [r3, #0]
}
 800061c:	4618      	mov	r0, r3
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	20001948 	.word	0x20001948

0800062c <__NVIC_SetPriorityGrouping>:
{
 800062c:	b480      	push	{r7}
 800062e:	b085      	sub	sp, #20
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f003 0307 	and.w	r3, r3, #7
 800063a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800063c:	4b0c      	ldr	r3, [pc, #48]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 800063e:	68db      	ldr	r3, [r3, #12]
 8000640:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000642:	68ba      	ldr	r2, [r7, #8]
 8000644:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000648:	4013      	ands	r3, r2
 800064a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000650:	68bb      	ldr	r3, [r7, #8]
 8000652:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000654:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000658:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800065c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800065e:	4a04      	ldr	r2, [pc, #16]	; (8000670 <__NVIC_SetPriorityGrouping+0x44>)
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60d3      	str	r3, [r2, #12]
}
 8000664:	bf00      	nop
 8000666:	3714      	adds	r7, #20
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr
 8000670:	e000ed00 	.word	0xe000ed00

08000674 <__NVIC_GetPriorityGrouping>:
{
 8000674:	b480      	push	{r7}
 8000676:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000678:	4b04      	ldr	r3, [pc, #16]	; (800068c <__NVIC_GetPriorityGrouping+0x18>)
 800067a:	68db      	ldr	r3, [r3, #12]
 800067c:	0a1b      	lsrs	r3, r3, #8
 800067e:	f003 0307 	and.w	r3, r3, #7
}
 8000682:	4618      	mov	r0, r3
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	e000ed00 	.word	0xe000ed00

08000690 <__NVIC_EnableIRQ>:
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	db0b      	blt.n	80006ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	f003 021f 	and.w	r2, r3, #31
 80006a8:	4907      	ldr	r1, [pc, #28]	; (80006c8 <__NVIC_EnableIRQ+0x38>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	095b      	lsrs	r3, r3, #5
 80006b0:	2001      	movs	r0, #1
 80006b2:	fa00 f202 	lsl.w	r2, r0, r2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80006ba:	bf00      	nop
 80006bc:	370c      	adds	r7, #12
 80006be:	46bd      	mov	sp, r7
 80006c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c4:	4770      	bx	lr
 80006c6:	bf00      	nop
 80006c8:	e000e100 	.word	0xe000e100

080006cc <__NVIC_SetPriority>:
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	6039      	str	r1, [r7, #0]
 80006d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006dc:	2b00      	cmp	r3, #0
 80006de:	db0a      	blt.n	80006f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006e0:	683b      	ldr	r3, [r7, #0]
 80006e2:	b2da      	uxtb	r2, r3
 80006e4:	490c      	ldr	r1, [pc, #48]	; (8000718 <__NVIC_SetPriority+0x4c>)
 80006e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ea:	0112      	lsls	r2, r2, #4
 80006ec:	b2d2      	uxtb	r2, r2
 80006ee:	440b      	add	r3, r1
 80006f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80006f4:	e00a      	b.n	800070c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	b2da      	uxtb	r2, r3
 80006fa:	4908      	ldr	r1, [pc, #32]	; (800071c <__NVIC_SetPriority+0x50>)
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	f003 030f 	and.w	r3, r3, #15
 8000702:	3b04      	subs	r3, #4
 8000704:	0112      	lsls	r2, r2, #4
 8000706:	b2d2      	uxtb	r2, r2
 8000708:	440b      	add	r3, r1
 800070a:	761a      	strb	r2, [r3, #24]
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	e000e100 	.word	0xe000e100
 800071c:	e000ed00 	.word	0xe000ed00

08000720 <NVIC_EncodePriority>:
{
 8000720:	b480      	push	{r7}
 8000722:	b089      	sub	sp, #36	; 0x24
 8000724:	af00      	add	r7, sp, #0
 8000726:	60f8      	str	r0, [r7, #12]
 8000728:	60b9      	str	r1, [r7, #8]
 800072a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	f003 0307 	and.w	r3, r3, #7
 8000732:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	f1c3 0307 	rsb	r3, r3, #7
 800073a:	2b04      	cmp	r3, #4
 800073c:	bf28      	it	cs
 800073e:	2304      	movcs	r3, #4
 8000740:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	3304      	adds	r3, #4
 8000746:	2b06      	cmp	r3, #6
 8000748:	d902      	bls.n	8000750 <NVIC_EncodePriority+0x30>
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3b03      	subs	r3, #3
 800074e:	e000      	b.n	8000752 <NVIC_EncodePriority+0x32>
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000754:	f04f 32ff 	mov.w	r2, #4294967295
 8000758:	69bb      	ldr	r3, [r7, #24]
 800075a:	fa02 f303 	lsl.w	r3, r2, r3
 800075e:	43da      	mvns	r2, r3
 8000760:	68bb      	ldr	r3, [r7, #8]
 8000762:	401a      	ands	r2, r3
 8000764:	697b      	ldr	r3, [r7, #20]
 8000766:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000768:	f04f 31ff 	mov.w	r1, #4294967295
 800076c:	697b      	ldr	r3, [r7, #20]
 800076e:	fa01 f303 	lsl.w	r3, r1, r3
 8000772:	43d9      	mvns	r1, r3
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000778:	4313      	orrs	r3, r2
}
 800077a:	4618      	mov	r0, r3
 800077c:	3724      	adds	r7, #36	; 0x24
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr

08000786 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000786:	b580      	push	{r7, lr}
 8000788:	b082      	sub	sp, #8
 800078a:	af00      	add	r7, sp, #0
 800078c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800078e:	6878      	ldr	r0, [r7, #4]
 8000790:	f7ff ff4c 	bl	800062c <__NVIC_SetPriorityGrouping>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
 80007a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80007ae:	f7ff ff61 	bl	8000674 <__NVIC_GetPriorityGrouping>
 80007b2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007b4:	687a      	ldr	r2, [r7, #4]
 80007b6:	68b9      	ldr	r1, [r7, #8]
 80007b8:	6978      	ldr	r0, [r7, #20]
 80007ba:	f7ff ffb1 	bl	8000720 <NVIC_EncodePriority>
 80007be:	4602      	mov	r2, r0
 80007c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff80 	bl	80006cc <__NVIC_SetPriority>
}
 80007cc:	bf00      	nop
 80007ce:	3718      	adds	r7, #24
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd80      	pop	{r7, pc}

080007d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b082      	sub	sp, #8
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4603      	mov	r3, r0
 80007dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f7ff ff54 	bl	8000690 <__NVIC_EnableIRQ>
}
 80007e8:	bf00      	nop
 80007ea:	3708      	adds	r7, #8
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80007f4:	4b04      	ldr	r3, [pc, #16]	; (8000808 <HAL_PWREx_GetVoltageRange+0x18>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40007000 	.word	0x40007000

0800080c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800081a:	d130      	bne.n	800087e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800081c:	4b23      	ldr	r3, [pc, #140]	; (80008ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000828:	d038      	beq.n	800089c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800082a:	4b20      	ldr	r3, [pc, #128]	; (80008ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000832:	4a1e      	ldr	r2, [pc, #120]	; (80008ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000838:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800083a:	4b1d      	ldr	r3, [pc, #116]	; (80008b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800083c:	681b      	ldr	r3, [r3, #0]
 800083e:	2232      	movs	r2, #50	; 0x32
 8000840:	fb02 f303 	mul.w	r3, r2, r3
 8000844:	4a1b      	ldr	r2, [pc, #108]	; (80008b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000846:	fba2 2303 	umull	r2, r3, r2, r3
 800084a:	0c9b      	lsrs	r3, r3, #18
 800084c:	3301      	adds	r3, #1
 800084e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000850:	e002      	b.n	8000858 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	3b01      	subs	r3, #1
 8000856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000858:	4b14      	ldr	r3, [pc, #80]	; (80008ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800085a:	695b      	ldr	r3, [r3, #20]
 800085c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000864:	d102      	bne.n	800086c <HAL_PWREx_ControlVoltageScaling+0x60>
 8000866:	68fb      	ldr	r3, [r7, #12]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1f2      	bne.n	8000852 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800086c:	4b0f      	ldr	r3, [pc, #60]	; (80008ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800086e:	695b      	ldr	r3, [r3, #20]
 8000870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000878:	d110      	bne.n	800089c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	e00f      	b.n	800089e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800087e:	4b0b      	ldr	r3, [pc, #44]	; (80008ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800088a:	d007      	beq.n	800089c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800088c:	4b07      	ldr	r3, [pc, #28]	; (80008ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000894:	4a05      	ldr	r2, [pc, #20]	; (80008ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800089a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800089c:	2300      	movs	r3, #0
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3714      	adds	r7, #20
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
 80008aa:	bf00      	nop
 80008ac:	40007000 	.word	0x40007000
 80008b0:	20000000 	.word	0x20000000
 80008b4:	431bde83 	.word	0x431bde83

080008b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d101      	bne.n	80008ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80008c6:	2301      	movs	r3, #1
 80008c8:	e3d4      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80008ca:	4ba1      	ldr	r3, [pc, #644]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 80008cc:	689b      	ldr	r3, [r3, #8]
 80008ce:	f003 030c 	and.w	r3, r3, #12
 80008d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80008d4:	4b9e      	ldr	r3, [pc, #632]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 80008d6:	68db      	ldr	r3, [r3, #12]
 80008d8:	f003 0303 	and.w	r3, r3, #3
 80008dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f003 0310 	and.w	r3, r3, #16
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	f000 80e4 	beq.w	8000ab4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80008ec:	69bb      	ldr	r3, [r7, #24]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d007      	beq.n	8000902 <HAL_RCC_OscConfig+0x4a>
 80008f2:	69bb      	ldr	r3, [r7, #24]
 80008f4:	2b0c      	cmp	r3, #12
 80008f6:	f040 808b 	bne.w	8000a10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80008fa:	697b      	ldr	r3, [r7, #20]
 80008fc:	2b01      	cmp	r3, #1
 80008fe:	f040 8087 	bne.w	8000a10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000902:	4b93      	ldr	r3, [pc, #588]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	f003 0302 	and.w	r3, r3, #2
 800090a:	2b00      	cmp	r3, #0
 800090c:	d005      	beq.n	800091a <HAL_RCC_OscConfig+0x62>
 800090e:	687b      	ldr	r3, [r7, #4]
 8000910:	699b      	ldr	r3, [r3, #24]
 8000912:	2b00      	cmp	r3, #0
 8000914:	d101      	bne.n	800091a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	e3ac      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	6a1a      	ldr	r2, [r3, #32]
 800091e:	4b8c      	ldr	r3, [pc, #560]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f003 0308 	and.w	r3, r3, #8
 8000926:	2b00      	cmp	r3, #0
 8000928:	d004      	beq.n	8000934 <HAL_RCC_OscConfig+0x7c>
 800092a:	4b89      	ldr	r3, [pc, #548]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000932:	e005      	b.n	8000940 <HAL_RCC_OscConfig+0x88>
 8000934:	4b86      	ldr	r3, [pc, #536]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800093a:	091b      	lsrs	r3, r3, #4
 800093c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000940:	4293      	cmp	r3, r2
 8000942:	d223      	bcs.n	800098c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	6a1b      	ldr	r3, [r3, #32]
 8000948:	4618      	mov	r0, r3
 800094a:	f000 fd5d 	bl	8001408 <RCC_SetFlashLatencyFromMSIRange>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000954:	2301      	movs	r3, #1
 8000956:	e38d      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000958:	4b7d      	ldr	r3, [pc, #500]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a7c      	ldr	r2, [pc, #496]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 800095e:	f043 0308 	orr.w	r3, r3, #8
 8000962:	6013      	str	r3, [r2, #0]
 8000964:	4b7a      	ldr	r3, [pc, #488]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	6a1b      	ldr	r3, [r3, #32]
 8000970:	4977      	ldr	r1, [pc, #476]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000972:	4313      	orrs	r3, r2
 8000974:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000976:	4b76      	ldr	r3, [pc, #472]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	021b      	lsls	r3, r3, #8
 8000984:	4972      	ldr	r1, [pc, #456]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000986:	4313      	orrs	r3, r2
 8000988:	604b      	str	r3, [r1, #4]
 800098a:	e025      	b.n	80009d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800098c:	4b70      	ldr	r3, [pc, #448]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a6f      	ldr	r2, [pc, #444]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000992:	f043 0308 	orr.w	r3, r3, #8
 8000996:	6013      	str	r3, [r2, #0]
 8000998:	4b6d      	ldr	r3, [pc, #436]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6a1b      	ldr	r3, [r3, #32]
 80009a4:	496a      	ldr	r1, [pc, #424]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 80009a6:	4313      	orrs	r3, r2
 80009a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80009aa:	4b69      	ldr	r3, [pc, #420]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 80009ac:	685b      	ldr	r3, [r3, #4]
 80009ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	69db      	ldr	r3, [r3, #28]
 80009b6:	021b      	lsls	r3, r3, #8
 80009b8:	4965      	ldr	r1, [pc, #404]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 80009ba:	4313      	orrs	r3, r2
 80009bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d109      	bne.n	80009d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	6a1b      	ldr	r3, [r3, #32]
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 fd1d 	bl	8001408 <RCC_SetFlashLatencyFromMSIRange>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80009d4:	2301      	movs	r3, #1
 80009d6:	e34d      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80009d8:	f000 fc36 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 80009dc:	4602      	mov	r2, r0
 80009de:	4b5c      	ldr	r3, [pc, #368]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 80009e0:	689b      	ldr	r3, [r3, #8]
 80009e2:	091b      	lsrs	r3, r3, #4
 80009e4:	f003 030f 	and.w	r3, r3, #15
 80009e8:	495a      	ldr	r1, [pc, #360]	; (8000b54 <HAL_RCC_OscConfig+0x29c>)
 80009ea:	5ccb      	ldrb	r3, [r1, r3]
 80009ec:	f003 031f 	and.w	r3, r3, #31
 80009f0:	fa22 f303 	lsr.w	r3, r2, r3
 80009f4:	4a58      	ldr	r2, [pc, #352]	; (8000b58 <HAL_RCC_OscConfig+0x2a0>)
 80009f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80009f8:	4b58      	ldr	r3, [pc, #352]	; (8000b5c <HAL_RCC_OscConfig+0x2a4>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fd0b 	bl	8000418 <HAL_InitTick>
 8000a02:	4603      	mov	r3, r0
 8000a04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d052      	beq.n	8000ab2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8000a0c:	7bfb      	ldrb	r3, [r7, #15]
 8000a0e:	e331      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d032      	beq.n	8000a7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000a18:	4b4d      	ldr	r3, [pc, #308]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	4a4c      	ldr	r2, [pc, #304]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000a1e:	f043 0301 	orr.w	r3, r3, #1
 8000a22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000a24:	f7ff fdf6 	bl	8000614 <HAL_GetTick>
 8000a28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a2a:	e008      	b.n	8000a3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a2c:	f7ff fdf2 	bl	8000614 <HAL_GetTick>
 8000a30:	4602      	mov	r2, r0
 8000a32:	693b      	ldr	r3, [r7, #16]
 8000a34:	1ad3      	subs	r3, r2, r3
 8000a36:	2b02      	cmp	r3, #2
 8000a38:	d901      	bls.n	8000a3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000a3a:	2303      	movs	r3, #3
 8000a3c:	e31a      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000a3e:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d0f0      	beq.n	8000a2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000a4a:	4b41      	ldr	r3, [pc, #260]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a40      	ldr	r2, [pc, #256]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000a50:	f043 0308 	orr.w	r3, r3, #8
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	4b3e      	ldr	r3, [pc, #248]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	6a1b      	ldr	r3, [r3, #32]
 8000a62:	493b      	ldr	r1, [pc, #236]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000a64:	4313      	orrs	r3, r2
 8000a66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000a68:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	69db      	ldr	r3, [r3, #28]
 8000a74:	021b      	lsls	r3, r3, #8
 8000a76:	4936      	ldr	r1, [pc, #216]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	604b      	str	r3, [r1, #4]
 8000a7c:	e01a      	b.n	8000ab4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000a7e:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4a33      	ldr	r2, [pc, #204]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000a84:	f023 0301 	bic.w	r3, r3, #1
 8000a88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000a8a:	f7ff fdc3 	bl	8000614 <HAL_GetTick>
 8000a8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000a90:	e008      	b.n	8000aa4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000a92:	f7ff fdbf 	bl	8000614 <HAL_GetTick>
 8000a96:	4602      	mov	r2, r0
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	1ad3      	subs	r3, r2, r3
 8000a9c:	2b02      	cmp	r3, #2
 8000a9e:	d901      	bls.n	8000aa4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	e2e7      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000aa4:	4b2a      	ldr	r3, [pc, #168]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f003 0302 	and.w	r3, r3, #2
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d1f0      	bne.n	8000a92 <HAL_RCC_OscConfig+0x1da>
 8000ab0:	e000      	b.n	8000ab4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ab2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f003 0301 	and.w	r3, r3, #1
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d074      	beq.n	8000baa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8000ac0:	69bb      	ldr	r3, [r7, #24]
 8000ac2:	2b08      	cmp	r3, #8
 8000ac4:	d005      	beq.n	8000ad2 <HAL_RCC_OscConfig+0x21a>
 8000ac6:	69bb      	ldr	r3, [r7, #24]
 8000ac8:	2b0c      	cmp	r3, #12
 8000aca:	d10e      	bne.n	8000aea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	2b03      	cmp	r3, #3
 8000ad0:	d10b      	bne.n	8000aea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ad2:	4b1f      	ldr	r3, [pc, #124]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d064      	beq.n	8000ba8 <HAL_RCC_OscConfig+0x2f0>
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	685b      	ldr	r3, [r3, #4]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d160      	bne.n	8000ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	e2c4      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	685b      	ldr	r3, [r3, #4]
 8000aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000af2:	d106      	bne.n	8000b02 <HAL_RCC_OscConfig+0x24a>
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000af6:	681b      	ldr	r3, [r3, #0]
 8000af8:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	e01d      	b.n	8000b3e <HAL_RCC_OscConfig+0x286>
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000b0a:	d10c      	bne.n	8000b26 <HAL_RCC_OscConfig+0x26e>
 8000b0c:	4b10      	ldr	r3, [pc, #64]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b16:	6013      	str	r3, [r2, #0]
 8000b18:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0c      	ldr	r2, [pc, #48]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b22:	6013      	str	r3, [r2, #0]
 8000b24:	e00b      	b.n	8000b3e <HAL_RCC_OscConfig+0x286>
 8000b26:	4b0a      	ldr	r3, [pc, #40]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	4a09      	ldr	r2, [pc, #36]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000b2c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000b30:	6013      	str	r3, [r2, #0]
 8000b32:	4b07      	ldr	r3, [pc, #28]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a06      	ldr	r2, [pc, #24]	; (8000b50 <HAL_RCC_OscConfig+0x298>)
 8000b38:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b3c:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	685b      	ldr	r3, [r3, #4]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d01c      	beq.n	8000b80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b46:	f7ff fd65 	bl	8000614 <HAL_GetTick>
 8000b4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b4c:	e011      	b.n	8000b72 <HAL_RCC_OscConfig+0x2ba>
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000
 8000b54:	08004698 	.word	0x08004698
 8000b58:	20000000 	.word	0x20000000
 8000b5c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b60:	f7ff fd58 	bl	8000614 <HAL_GetTick>
 8000b64:	4602      	mov	r2, r0
 8000b66:	693b      	ldr	r3, [r7, #16]
 8000b68:	1ad3      	subs	r3, r2, r3
 8000b6a:	2b64      	cmp	r3, #100	; 0x64
 8000b6c:	d901      	bls.n	8000b72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8000b6e:	2303      	movs	r3, #3
 8000b70:	e280      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000b72:	4baf      	ldr	r3, [pc, #700]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d0f0      	beq.n	8000b60 <HAL_RCC_OscConfig+0x2a8>
 8000b7e:	e014      	b.n	8000baa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000b80:	f7ff fd48 	bl	8000614 <HAL_GetTick>
 8000b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b86:	e008      	b.n	8000b9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000b88:	f7ff fd44 	bl	8000614 <HAL_GetTick>
 8000b8c:	4602      	mov	r2, r0
 8000b8e:	693b      	ldr	r3, [r7, #16]
 8000b90:	1ad3      	subs	r3, r2, r3
 8000b92:	2b64      	cmp	r3, #100	; 0x64
 8000b94:	d901      	bls.n	8000b9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8000b96:	2303      	movs	r3, #3
 8000b98:	e26c      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000b9a:	4ba5      	ldr	r3, [pc, #660]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d1f0      	bne.n	8000b88 <HAL_RCC_OscConfig+0x2d0>
 8000ba6:	e000      	b.n	8000baa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	f003 0302 	and.w	r3, r3, #2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d060      	beq.n	8000c78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8000bb6:	69bb      	ldr	r3, [r7, #24]
 8000bb8:	2b04      	cmp	r3, #4
 8000bba:	d005      	beq.n	8000bc8 <HAL_RCC_OscConfig+0x310>
 8000bbc:	69bb      	ldr	r3, [r7, #24]
 8000bbe:	2b0c      	cmp	r3, #12
 8000bc0:	d119      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000bc2:	697b      	ldr	r3, [r7, #20]
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d116      	bne.n	8000bf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bc8:	4b99      	ldr	r3, [pc, #612]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d005      	beq.n	8000be0 <HAL_RCC_OscConfig+0x328>
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d101      	bne.n	8000be0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8000bdc:	2301      	movs	r3, #1
 8000bde:	e249      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000be0:	4b93      	ldr	r3, [pc, #588]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000be2:	685b      	ldr	r3, [r3, #4]
 8000be4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	691b      	ldr	r3, [r3, #16]
 8000bec:	061b      	lsls	r3, r3, #24
 8000bee:	4990      	ldr	r1, [pc, #576]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8000bf4:	e040      	b.n	8000c78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	68db      	ldr	r3, [r3, #12]
 8000bfa:	2b00      	cmp	r3, #0
 8000bfc:	d023      	beq.n	8000c46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000bfe:	4b8c      	ldr	r3, [pc, #560]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a8b      	ldr	r2, [pc, #556]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c0a:	f7ff fd03 	bl	8000614 <HAL_GetTick>
 8000c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c10:	e008      	b.n	8000c24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c12:	f7ff fcff 	bl	8000614 <HAL_GetTick>
 8000c16:	4602      	mov	r2, r0
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	1ad3      	subs	r3, r2, r3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d901      	bls.n	8000c24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8000c20:	2303      	movs	r3, #3
 8000c22:	e227      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000c24:	4b82      	ldr	r3, [pc, #520]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d0f0      	beq.n	8000c12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000c30:	4b7f      	ldr	r3, [pc, #508]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000c32:	685b      	ldr	r3, [r3, #4]
 8000c34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	691b      	ldr	r3, [r3, #16]
 8000c3c:	061b      	lsls	r3, r3, #24
 8000c3e:	497c      	ldr	r1, [pc, #496]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000c40:	4313      	orrs	r3, r2
 8000c42:	604b      	str	r3, [r1, #4]
 8000c44:	e018      	b.n	8000c78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000c46:	4b7a      	ldr	r3, [pc, #488]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	4a79      	ldr	r2, [pc, #484]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000c52:	f7ff fcdf 	bl	8000614 <HAL_GetTick>
 8000c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c58:	e008      	b.n	8000c6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000c5a:	f7ff fcdb 	bl	8000614 <HAL_GetTick>
 8000c5e:	4602      	mov	r2, r0
 8000c60:	693b      	ldr	r3, [r7, #16]
 8000c62:	1ad3      	subs	r3, r2, r3
 8000c64:	2b02      	cmp	r3, #2
 8000c66:	d901      	bls.n	8000c6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	e203      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000c6c:	4b70      	ldr	r3, [pc, #448]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d1f0      	bne.n	8000c5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0308 	and.w	r3, r3, #8
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d03c      	beq.n	8000cfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	695b      	ldr	r3, [r3, #20]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d01c      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000c8c:	4b68      	ldr	r3, [pc, #416]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000c92:	4a67      	ldr	r2, [pc, #412]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000c9c:	f7ff fcba 	bl	8000614 <HAL_GetTick>
 8000ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000ca2:	e008      	b.n	8000cb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ca4:	f7ff fcb6 	bl	8000614 <HAL_GetTick>
 8000ca8:	4602      	mov	r2, r0
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	1ad3      	subs	r3, r2, r3
 8000cae:	2b02      	cmp	r3, #2
 8000cb0:	d901      	bls.n	8000cb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8000cb2:	2303      	movs	r3, #3
 8000cb4:	e1de      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8000cb6:	4b5e      	ldr	r3, [pc, #376]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cbc:	f003 0302 	and.w	r3, r3, #2
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0ef      	beq.n	8000ca4 <HAL_RCC_OscConfig+0x3ec>
 8000cc4:	e01b      	b.n	8000cfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000cc6:	4b5a      	ldr	r3, [pc, #360]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000ccc:	4a58      	ldr	r2, [pc, #352]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000cce:	f023 0301 	bic.w	r3, r3, #1
 8000cd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000cd6:	f7ff fc9d 	bl	8000614 <HAL_GetTick>
 8000cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000cdc:	e008      	b.n	8000cf0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000cde:	f7ff fc99 	bl	8000614 <HAL_GetTick>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	693b      	ldr	r3, [r7, #16]
 8000ce6:	1ad3      	subs	r3, r2, r3
 8000ce8:	2b02      	cmp	r3, #2
 8000cea:	d901      	bls.n	8000cf0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8000cec:	2303      	movs	r3, #3
 8000cee:	e1c1      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8000cf0:	4b4f      	ldr	r3, [pc, #316]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000cf6:	f003 0302 	and.w	r3, r3, #2
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d1ef      	bne.n	8000cde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f003 0304 	and.w	r3, r3, #4
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 80a6 	beq.w	8000e58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8000d10:	4b47      	ldr	r3, [pc, #284]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d10d      	bne.n	8000d38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d1c:	4b44      	ldr	r3, [pc, #272]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d20:	4a43      	ldr	r2, [pc, #268]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d26:	6593      	str	r3, [r2, #88]	; 0x58
 8000d28:	4b41      	ldr	r3, [pc, #260]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d30:	60bb      	str	r3, [r7, #8]
 8000d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000d34:	2301      	movs	r3, #1
 8000d36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d38:	4b3e      	ldr	r3, [pc, #248]	; (8000e34 <HAL_RCC_OscConfig+0x57c>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d118      	bne.n	8000d76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000d44:	4b3b      	ldr	r3, [pc, #236]	; (8000e34 <HAL_RCC_OscConfig+0x57c>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a3a      	ldr	r2, [pc, #232]	; (8000e34 <HAL_RCC_OscConfig+0x57c>)
 8000d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000d50:	f7ff fc60 	bl	8000614 <HAL_GetTick>
 8000d54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d56:	e008      	b.n	8000d6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000d58:	f7ff fc5c 	bl	8000614 <HAL_GetTick>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	693b      	ldr	r3, [r7, #16]
 8000d60:	1ad3      	subs	r3, r2, r3
 8000d62:	2b02      	cmp	r3, #2
 8000d64:	d901      	bls.n	8000d6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8000d66:	2303      	movs	r3, #3
 8000d68:	e184      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8000d6a:	4b32      	ldr	r3, [pc, #200]	; (8000e34 <HAL_RCC_OscConfig+0x57c>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0f0      	beq.n	8000d58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	689b      	ldr	r3, [r3, #8]
 8000d7a:	2b01      	cmp	r3, #1
 8000d7c:	d108      	bne.n	8000d90 <HAL_RCC_OscConfig+0x4d8>
 8000d7e:	4b2c      	ldr	r3, [pc, #176]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d84:	4a2a      	ldr	r2, [pc, #168]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000d8e:	e024      	b.n	8000dda <HAL_RCC_OscConfig+0x522>
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	689b      	ldr	r3, [r3, #8]
 8000d94:	2b05      	cmp	r3, #5
 8000d96:	d110      	bne.n	8000dba <HAL_RCC_OscConfig+0x502>
 8000d98:	4b25      	ldr	r3, [pc, #148]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000d9e:	4a24      	ldr	r2, [pc, #144]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000da8:	4b21      	ldr	r3, [pc, #132]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dae:	4a20      	ldr	r2, [pc, #128]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000db8:	e00f      	b.n	8000dda <HAL_RCC_OscConfig+0x522>
 8000dba:	4b1d      	ldr	r3, [pc, #116]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000dc2:	f023 0301 	bic.w	r3, r3, #1
 8000dc6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8000dca:	4b19      	ldr	r3, [pc, #100]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000dd0:	4a17      	ldr	r2, [pc, #92]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000dd2:	f023 0304 	bic.w	r3, r3, #4
 8000dd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	689b      	ldr	r3, [r3, #8]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d016      	beq.n	8000e10 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000de2:	f7ff fc17 	bl	8000614 <HAL_GetTick>
 8000de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000de8:	e00a      	b.n	8000e00 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000dea:	f7ff fc13 	bl	8000614 <HAL_GetTick>
 8000dee:	4602      	mov	r2, r0
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	1ad3      	subs	r3, r2, r3
 8000df4:	f241 3288 	movw	r2, #5000	; 0x1388
 8000df8:	4293      	cmp	r3, r2
 8000dfa:	d901      	bls.n	8000e00 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	e139      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8000e00:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <HAL_RCC_OscConfig+0x578>)
 8000e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e06:	f003 0302 	and.w	r3, r3, #2
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d0ed      	beq.n	8000dea <HAL_RCC_OscConfig+0x532>
 8000e0e:	e01a      	b.n	8000e46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e10:	f7ff fc00 	bl	8000614 <HAL_GetTick>
 8000e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e16:	e00f      	b.n	8000e38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e18:	f7ff fbfc 	bl	8000614 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e26:	4293      	cmp	r3, r2
 8000e28:	d906      	bls.n	8000e38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e122      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
 8000e2e:	bf00      	nop
 8000e30:	40021000 	.word	0x40021000
 8000e34:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8000e38:	4b90      	ldr	r3, [pc, #576]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000e3e:	f003 0302 	and.w	r3, r3, #2
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d1e8      	bne.n	8000e18 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000e46:	7ffb      	ldrb	r3, [r7, #31]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d105      	bne.n	8000e58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e4c:	4b8b      	ldr	r3, [pc, #556]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e50:	4a8a      	ldr	r2, [pc, #552]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f000 8108 	beq.w	8001072 <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e66:	2b02      	cmp	r3, #2
 8000e68:	f040 80d0 	bne.w	800100c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8000e6c:	4b83      	ldr	r3, [pc, #524]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	f003 0203 	and.w	r2, r3, #3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e7c:	429a      	cmp	r2, r3
 8000e7e:	d130      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000e80:	697b      	ldr	r3, [r7, #20]
 8000e82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	3b01      	subs	r3, #1
 8000e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000e8e:	429a      	cmp	r2, r3
 8000e90:	d127      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d11f      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea8:	687a      	ldr	r2, [r7, #4]
 8000eaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000eac:	2a07      	cmp	r2, #7
 8000eae:	bf14      	ite	ne
 8000eb0:	2201      	movne	r2, #1
 8000eb2:	2200      	moveq	r2, #0
 8000eb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d113      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000eba:	697b      	ldr	r3, [r7, #20]
 8000ebc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ec4:	085b      	lsrs	r3, r3, #1
 8000ec6:	3b01      	subs	r3, #1
 8000ec8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d109      	bne.n	8000ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed8:	085b      	lsrs	r3, r3, #1
 8000eda:	3b01      	subs	r3, #1
 8000edc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d06e      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000ee2:	69bb      	ldr	r3, [r7, #24]
 8000ee4:	2b0c      	cmp	r3, #12
 8000ee6:	d069      	beq.n	8000fbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8000ee8:	4b64      	ldr	r3, [pc, #400]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d105      	bne.n	8000f00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8000ef4:	4b61      	ldr	r3, [pc, #388]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e0b7      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8000f04:	4b5d      	ldr	r3, [pc, #372]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a5c      	ldr	r2, [pc, #368]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000f0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000f10:	f7ff fb80 	bl	8000614 <HAL_GetTick>
 8000f14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f16:	e008      	b.n	8000f2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f18:	f7ff fb7c 	bl	8000614 <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d901      	bls.n	8000f2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8000f26:	2303      	movs	r3, #3
 8000f28:	e0a4      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8000f2a:	4b54      	ldr	r3, [pc, #336]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d1f0      	bne.n	8000f18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f36:	4b51      	ldr	r3, [pc, #324]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000f38:	68da      	ldr	r2, [r3, #12]
 8000f3a:	4b51      	ldr	r3, [pc, #324]	; (8001080 <HAL_RCC_OscConfig+0x7c8>)
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	687a      	ldr	r2, [r7, #4]
 8000f40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8000f42:	687a      	ldr	r2, [r7, #4]
 8000f44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8000f46:	3a01      	subs	r2, #1
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	4311      	orrs	r1, r2
 8000f4c:	687a      	ldr	r2, [r7, #4]
 8000f4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000f50:	0212      	lsls	r2, r2, #8
 8000f52:	4311      	orrs	r1, r2
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8000f58:	0852      	lsrs	r2, r2, #1
 8000f5a:	3a01      	subs	r2, #1
 8000f5c:	0552      	lsls	r2, r2, #21
 8000f5e:	4311      	orrs	r1, r2
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8000f64:	0852      	lsrs	r2, r2, #1
 8000f66:	3a01      	subs	r2, #1
 8000f68:	0652      	lsls	r2, r2, #25
 8000f6a:	4311      	orrs	r1, r2
 8000f6c:	687a      	ldr	r2, [r7, #4]
 8000f6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f70:	0912      	lsrs	r2, r2, #4
 8000f72:	0452      	lsls	r2, r2, #17
 8000f74:	430a      	orrs	r2, r1
 8000f76:	4941      	ldr	r1, [pc, #260]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8000f7c:	4b3f      	ldr	r3, [pc, #252]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a3e      	ldr	r2, [pc, #248]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000f88:	4b3c      	ldr	r3, [pc, #240]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000f8a:	68db      	ldr	r3, [r3, #12]
 8000f8c:	4a3b      	ldr	r2, [pc, #236]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000f92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8000f94:	f7ff fb3e 	bl	8000614 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000f9c:	f7ff fb3a 	bl	8000614 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b02      	cmp	r3, #2
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e062      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fae:	4b33      	ldr	r3, [pc, #204]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f0      	beq.n	8000f9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8000fba:	e05a      	b.n	8001072 <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e059      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fc0:	4b2e      	ldr	r3, [pc, #184]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d152      	bne.n	8001072 <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8000fcc:	4b2b      	ldr	r3, [pc, #172]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a2a      	ldr	r2, [pc, #168]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8000fd8:	4b28      	ldr	r3, [pc, #160]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000fda:	68db      	ldr	r3, [r3, #12]
 8000fdc:	4a27      	ldr	r2, [pc, #156]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8000fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000fe2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8000fe4:	f7ff fb16 	bl	8000614 <HAL_GetTick>
 8000fe8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000fea:	e008      	b.n	8000ffe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8000fec:	f7ff fb12 	bl	8000614 <HAL_GetTick>
 8000ff0:	4602      	mov	r2, r0
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	2b02      	cmp	r3, #2
 8000ff8:	d901      	bls.n	8000ffe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8000ffa:	2303      	movs	r3, #3
 8000ffc:	e03a      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8000ffe:	4b1f      	ldr	r3, [pc, #124]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001006:	2b00      	cmp	r3, #0
 8001008:	d0f0      	beq.n	8000fec <HAL_RCC_OscConfig+0x734>
 800100a:	e032      	b.n	8001072 <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800100c:	69bb      	ldr	r3, [r7, #24]
 800100e:	2b0c      	cmp	r3, #12
 8001010:	d02d      	beq.n	800106e <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001012:	4b1a      	ldr	r3, [pc, #104]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a19      	ldr	r2, [pc, #100]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8001018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800101c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 800101e:	4b17      	ldr	r3, [pc, #92]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001026:	2b00      	cmp	r3, #0
 8001028:	d105      	bne.n	8001036 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800102a:	4b14      	ldr	r3, [pc, #80]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 800102c:	68db      	ldr	r3, [r3, #12]
 800102e:	4a13      	ldr	r2, [pc, #76]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8001030:	f023 0303 	bic.w	r3, r3, #3
 8001034:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	4a10      	ldr	r2, [pc, #64]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 800103c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001040:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001044:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001046:	f7ff fae5 	bl	8000614 <HAL_GetTick>
 800104a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800104c:	e008      	b.n	8001060 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800104e:	f7ff fae1 	bl	8000614 <HAL_GetTick>
 8001052:	4602      	mov	r2, r0
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	1ad3      	subs	r3, r2, r3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d901      	bls.n	8001060 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 800105c:	2303      	movs	r3, #3
 800105e:	e009      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001060:	4b06      	ldr	r3, [pc, #24]	; (800107c <HAL_RCC_OscConfig+0x7c4>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d1f0      	bne.n	800104e <HAL_RCC_OscConfig+0x796>
 800106c:	e001      	b.n	8001072 <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	3720      	adds	r7, #32
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}
 800107c:	40021000 	.word	0x40021000
 8001080:	f99d808c 	.word	0xf99d808c

08001084 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d101      	bne.n	8001098 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001094:	2301      	movs	r3, #1
 8001096:	e0c8      	b.n	800122a <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001098:	4b66      	ldr	r3, [pc, #408]	; (8001234 <HAL_RCC_ClockConfig+0x1b0>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f003 0307 	and.w	r3, r3, #7
 80010a0:	683a      	ldr	r2, [r7, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d910      	bls.n	80010c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010a6:	4b63      	ldr	r3, [pc, #396]	; (8001234 <HAL_RCC_ClockConfig+0x1b0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 0207 	bic.w	r2, r3, #7
 80010ae:	4961      	ldr	r1, [pc, #388]	; (8001234 <HAL_RCC_ClockConfig+0x1b0>)
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b6:	4b5f      	ldr	r3, [pc, #380]	; (8001234 <HAL_RCC_ClockConfig+0x1b0>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	683a      	ldr	r2, [r7, #0]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d001      	beq.n	80010c8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e0b0      	b.n	800122a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d04c      	beq.n	800116e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d107      	bne.n	80010ec <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80010dc:	4b56      	ldr	r3, [pc, #344]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d121      	bne.n	800112c <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e09e      	b.n	800122a <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d107      	bne.n	8001104 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010f4:	4b50      	ldr	r3, [pc, #320]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d115      	bne.n	800112c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001100:	2301      	movs	r3, #1
 8001102:	e092      	b.n	800122a <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	685b      	ldr	r3, [r3, #4]
 8001108:	2b00      	cmp	r3, #0
 800110a:	d107      	bne.n	800111c <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800110c:	4b4a      	ldr	r3, [pc, #296]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d109      	bne.n	800112c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001118:	2301      	movs	r3, #1
 800111a:	e086      	b.n	800122a <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800111c:	4b46      	ldr	r3, [pc, #280]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001124:	2b00      	cmp	r3, #0
 8001126:	d101      	bne.n	800112c <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001128:	2301      	movs	r3, #1
 800112a:	e07e      	b.n	800122a <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800112c:	4b42      	ldr	r3, [pc, #264]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	f023 0203 	bic.w	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	493f      	ldr	r1, [pc, #252]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 800113a:	4313      	orrs	r3, r2
 800113c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800113e:	f7ff fa69 	bl	8000614 <HAL_GetTick>
 8001142:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001144:	e00a      	b.n	800115c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001146:	f7ff fa65 	bl	8000614 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	f241 3288 	movw	r2, #5000	; 0x1388
 8001154:	4293      	cmp	r3, r2
 8001156:	d901      	bls.n	800115c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001158:	2303      	movs	r3, #3
 800115a:	e066      	b.n	800122a <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115c:	4b36      	ldr	r3, [pc, #216]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 800115e:	689b      	ldr	r3, [r3, #8]
 8001160:	f003 020c 	and.w	r2, r3, #12
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	685b      	ldr	r3, [r3, #4]
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	429a      	cmp	r2, r3
 800116c:	d1eb      	bne.n	8001146 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f003 0302 	and.w	r3, r3, #2
 8001176:	2b00      	cmp	r3, #0
 8001178:	d008      	beq.n	800118c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800117a:	4b2f      	ldr	r3, [pc, #188]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	492c      	ldr	r1, [pc, #176]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 8001188:	4313      	orrs	r3, r2
 800118a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800118c:	4b29      	ldr	r3, [pc, #164]	; (8001234 <HAL_RCC_ClockConfig+0x1b0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f003 0307 	and.w	r3, r3, #7
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	429a      	cmp	r2, r3
 8001198:	d210      	bcs.n	80011bc <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119a:	4b26      	ldr	r3, [pc, #152]	; (8001234 <HAL_RCC_ClockConfig+0x1b0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f023 0207 	bic.w	r2, r3, #7
 80011a2:	4924      	ldr	r1, [pc, #144]	; (8001234 <HAL_RCC_ClockConfig+0x1b0>)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011aa:	4b22      	ldr	r3, [pc, #136]	; (8001234 <HAL_RCC_ClockConfig+0x1b0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0307 	and.w	r3, r3, #7
 80011b2:	683a      	ldr	r2, [r7, #0]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d001      	beq.n	80011bc <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 80011b8:	2301      	movs	r3, #1
 80011ba:	e036      	b.n	800122a <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d008      	beq.n	80011da <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011c8:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	4918      	ldr	r1, [pc, #96]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 80011d6:	4313      	orrs	r3, r2
 80011d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f003 0308 	and.w	r3, r3, #8
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d009      	beq.n	80011fa <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011e6:	4b14      	ldr	r3, [pc, #80]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	691b      	ldr	r3, [r3, #16]
 80011f2:	00db      	lsls	r3, r3, #3
 80011f4:	4910      	ldr	r1, [pc, #64]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80011fa:	f000 f825 	bl	8001248 <HAL_RCC_GetSysClockFreq>
 80011fe:	4602      	mov	r2, r0
 8001200:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <HAL_RCC_ClockConfig+0x1b4>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	091b      	lsrs	r3, r3, #4
 8001206:	f003 030f 	and.w	r3, r3, #15
 800120a:	490c      	ldr	r1, [pc, #48]	; (800123c <HAL_RCC_ClockConfig+0x1b8>)
 800120c:	5ccb      	ldrb	r3, [r1, r3]
 800120e:	f003 031f 	and.w	r3, r3, #31
 8001212:	fa22 f303 	lsr.w	r3, r2, r3
 8001216:	4a0a      	ldr	r2, [pc, #40]	; (8001240 <HAL_RCC_ClockConfig+0x1bc>)
 8001218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_RCC_ClockConfig+0x1c0>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4618      	mov	r0, r3
 8001220:	f7ff f8fa 	bl	8000418 <HAL_InitTick>
 8001224:	4603      	mov	r3, r0
 8001226:	72fb      	strb	r3, [r7, #11]

  return status;
 8001228:	7afb      	ldrb	r3, [r7, #11]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	40022000 	.word	0x40022000
 8001238:	40021000 	.word	0x40021000
 800123c:	08004698 	.word	0x08004698
 8001240:	20000000 	.word	0x20000000
 8001244:	20000004 	.word	0x20000004

08001248 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	; 0x24
 800124c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	2300      	movs	r3, #0
 8001254:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001256:	4b3e      	ldr	r3, [pc, #248]	; (8001350 <HAL_RCC_GetSysClockFreq+0x108>)
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f003 030c 	and.w	r3, r3, #12
 800125e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001260:	4b3b      	ldr	r3, [pc, #236]	; (8001350 <HAL_RCC_GetSysClockFreq+0x108>)
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	f003 0303 	and.w	r3, r3, #3
 8001268:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d005      	beq.n	800127c <HAL_RCC_GetSysClockFreq+0x34>
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	2b0c      	cmp	r3, #12
 8001274:	d121      	bne.n	80012ba <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	2b01      	cmp	r3, #1
 800127a:	d11e      	bne.n	80012ba <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800127c:	4b34      	ldr	r3, [pc, #208]	; (8001350 <HAL_RCC_GetSysClockFreq+0x108>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f003 0308 	and.w	r3, r3, #8
 8001284:	2b00      	cmp	r3, #0
 8001286:	d107      	bne.n	8001298 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001288:	4b31      	ldr	r3, [pc, #196]	; (8001350 <HAL_RCC_GetSysClockFreq+0x108>)
 800128a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800128e:	0a1b      	lsrs	r3, r3, #8
 8001290:	f003 030f 	and.w	r3, r3, #15
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	e005      	b.n	80012a4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001298:	4b2d      	ldr	r3, [pc, #180]	; (8001350 <HAL_RCC_GetSysClockFreq+0x108>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80012a4:	4a2b      	ldr	r2, [pc, #172]	; (8001354 <HAL_RCC_GetSysClockFreq+0x10c>)
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ac:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d10d      	bne.n	80012d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80012b8:	e00a      	b.n	80012d0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b04      	cmp	r3, #4
 80012be:	d102      	bne.n	80012c6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <HAL_RCC_GetSysClockFreq+0x110>)
 80012c2:	61bb      	str	r3, [r7, #24]
 80012c4:	e004      	b.n	80012d0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	2b08      	cmp	r3, #8
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80012cc:	4b23      	ldr	r3, [pc, #140]	; (800135c <HAL_RCC_GetSysClockFreq+0x114>)
 80012ce:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	d134      	bne.n	8001340 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80012d6:	4b1e      	ldr	r3, [pc, #120]	; (8001350 <HAL_RCC_GetSysClockFreq+0x108>)
 80012d8:	68db      	ldr	r3, [r3, #12]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	2b02      	cmp	r3, #2
 80012e4:	d003      	beq.n	80012ee <HAL_RCC_GetSysClockFreq+0xa6>
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d003      	beq.n	80012f4 <HAL_RCC_GetSysClockFreq+0xac>
 80012ec:	e005      	b.n	80012fa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80012ee:	4b1a      	ldr	r3, [pc, #104]	; (8001358 <HAL_RCC_GetSysClockFreq+0x110>)
 80012f0:	617b      	str	r3, [r7, #20]
      break;
 80012f2:	e005      	b.n	8001300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80012f4:	4b19      	ldr	r3, [pc, #100]	; (800135c <HAL_RCC_GetSysClockFreq+0x114>)
 80012f6:	617b      	str	r3, [r7, #20]
      break;
 80012f8:	e002      	b.n	8001300 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	617b      	str	r3, [r7, #20]
      break;
 80012fe:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001300:	4b13      	ldr	r3, [pc, #76]	; (8001350 <HAL_RCC_GetSysClockFreq+0x108>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	091b      	lsrs	r3, r3, #4
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	3301      	adds	r3, #1
 800130c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800130e:	4b10      	ldr	r3, [pc, #64]	; (8001350 <HAL_RCC_GetSysClockFreq+0x108>)
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	0a1b      	lsrs	r3, r3, #8
 8001314:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001318:	697a      	ldr	r2, [r7, #20]
 800131a:	fb02 f203 	mul.w	r2, r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	fbb2 f3f3 	udiv	r3, r2, r3
 8001324:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001326:	4b0a      	ldr	r3, [pc, #40]	; (8001350 <HAL_RCC_GetSysClockFreq+0x108>)
 8001328:	68db      	ldr	r3, [r3, #12]
 800132a:	0e5b      	lsrs	r3, r3, #25
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	3301      	adds	r3, #1
 8001332:	005b      	lsls	r3, r3, #1
 8001334:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	fbb2 f3f3 	udiv	r3, r2, r3
 800133e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001340:	69bb      	ldr	r3, [r7, #24]
}
 8001342:	4618      	mov	r0, r3
 8001344:	3724      	adds	r7, #36	; 0x24
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	080046b0 	.word	0x080046b0
 8001358:	00f42400 	.word	0x00f42400
 800135c:	007a1200 	.word	0x007a1200

08001360 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001364:	4b03      	ldr	r3, [pc, #12]	; (8001374 <HAL_RCC_GetHCLKFreq+0x14>)
 8001366:	681b      	ldr	r3, [r3, #0]
}
 8001368:	4618      	mov	r0, r3
 800136a:	46bd      	mov	sp, r7
 800136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001370:	4770      	bx	lr
 8001372:	bf00      	nop
 8001374:	20000000 	.word	0x20000000

08001378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800137c:	f7ff fff0 	bl	8001360 <HAL_RCC_GetHCLKFreq>
 8001380:	4602      	mov	r2, r0
 8001382:	4b06      	ldr	r3, [pc, #24]	; (800139c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	0a1b      	lsrs	r3, r3, #8
 8001388:	f003 0307 	and.w	r3, r3, #7
 800138c:	4904      	ldr	r1, [pc, #16]	; (80013a0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800138e:	5ccb      	ldrb	r3, [r1, r3]
 8001390:	f003 031f 	and.w	r3, r3, #31
 8001394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001398:	4618      	mov	r0, r3
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40021000 	.word	0x40021000
 80013a0:	080046a8 	.word	0x080046a8

080013a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	220f      	movs	r2, #15
 80013b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80013b4:	4b12      	ldr	r3, [pc, #72]	; (8001400 <HAL_RCC_GetClockConfig+0x5c>)
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	f003 0203 	and.w	r2, r3, #3
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80013c0:	4b0f      	ldr	r3, [pc, #60]	; (8001400 <HAL_RCC_GetClockConfig+0x5c>)
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80013cc:	4b0c      	ldr	r3, [pc, #48]	; (8001400 <HAL_RCC_GetClockConfig+0x5c>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80013d8:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_RCC_GetClockConfig+0x5c>)
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	08db      	lsrs	r3, r3, #3
 80013de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80013e6:	4b07      	ldr	r3, [pc, #28]	; (8001404 <HAL_RCC_GetClockConfig+0x60>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0207 	and.w	r2, r3, #7
 80013ee:	683b      	ldr	r3, [r7, #0]
 80013f0:	601a      	str	r2, [r3, #0]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	40021000 	.word	0x40021000
 8001404:	40022000 	.word	0x40022000

08001408 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001410:	2300      	movs	r3, #0
 8001412:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001414:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001416:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001418:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d003      	beq.n	8001428 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001420:	f7ff f9e6 	bl	80007f0 <HAL_PWREx_GetVoltageRange>
 8001424:	6178      	str	r0, [r7, #20]
 8001426:	e014      	b.n	8001452 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001428:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800142a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142c:	4a24      	ldr	r2, [pc, #144]	; (80014c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800142e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001432:	6593      	str	r3, [r2, #88]	; 0x58
 8001434:	4b22      	ldr	r3, [pc, #136]	; (80014c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001440:	f7ff f9d6 	bl	80007f0 <HAL_PWREx_GetVoltageRange>
 8001444:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001446:	4b1e      	ldr	r3, [pc, #120]	; (80014c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001448:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144a:	4a1d      	ldr	r2, [pc, #116]	; (80014c0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800144c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001450:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001458:	d10b      	bne.n	8001472 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b80      	cmp	r3, #128	; 0x80
 800145e:	d919      	bls.n	8001494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2ba0      	cmp	r3, #160	; 0xa0
 8001464:	d902      	bls.n	800146c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001466:	2302      	movs	r3, #2
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	e013      	b.n	8001494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800146c:	2301      	movs	r3, #1
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	e010      	b.n	8001494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2b80      	cmp	r3, #128	; 0x80
 8001476:	d902      	bls.n	800147e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001478:	2303      	movs	r3, #3
 800147a:	613b      	str	r3, [r7, #16]
 800147c:	e00a      	b.n	8001494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2b80      	cmp	r3, #128	; 0x80
 8001482:	d102      	bne.n	800148a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001484:	2302      	movs	r3, #2
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	e004      	b.n	8001494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	2b70      	cmp	r3, #112	; 0x70
 800148e:	d101      	bne.n	8001494 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001490:	2301      	movs	r3, #1
 8001492:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001494:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f023 0207 	bic.w	r2, r3, #7
 800149c:	4909      	ldr	r1, [pc, #36]	; (80014c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f003 0307 	and.w	r3, r3, #7
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d001      	beq.n	80014b6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80014b2:	2301      	movs	r3, #1
 80014b4:	e000      	b.n	80014b8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80014b6:	2300      	movs	r3, #0
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	40021000 	.word	0x40021000
 80014c4:	40022000 	.word	0x40022000

080014c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e049      	b.n	800156e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d106      	bne.n	80014f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2200      	movs	r2, #0
 80014ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f841 	bl	8001576 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3304      	adds	r3, #4
 8001504:	4619      	mov	r1, r3
 8001506:	4610      	mov	r0, r2
 8001508:	f000 f9f8 	bl	80018fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2201      	movs	r2, #1
 8001518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2201      	movs	r2, #1
 8001520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800156c:	2300      	movs	r3, #0
}
 800156e:	4618      	mov	r0, r3
 8001570:	3708      	adds	r7, #8
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}

08001576 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001576:	b480      	push	{r7}
 8001578:	b083      	sub	sp, #12
 800157a:	af00      	add	r7, sp, #0
 800157c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
	...

0800158c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800159a:	b2db      	uxtb	r3, r3
 800159c:	2b01      	cmp	r3, #1
 800159e:	d001      	beq.n	80015a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e04f      	b.n	8001644 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	68da      	ldr	r2, [r3, #12]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f042 0201 	orr.w	r2, r2, #1
 80015ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a23      	ldr	r2, [pc, #140]	; (8001650 <HAL_TIM_Base_Start_IT+0xc4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d01d      	beq.n	8001602 <HAL_TIM_Base_Start_IT+0x76>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015ce:	d018      	beq.n	8001602 <HAL_TIM_Base_Start_IT+0x76>
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a1f      	ldr	r2, [pc, #124]	; (8001654 <HAL_TIM_Base_Start_IT+0xc8>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d013      	beq.n	8001602 <HAL_TIM_Base_Start_IT+0x76>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a1e      	ldr	r2, [pc, #120]	; (8001658 <HAL_TIM_Base_Start_IT+0xcc>)
 80015e0:	4293      	cmp	r3, r2
 80015e2:	d00e      	beq.n	8001602 <HAL_TIM_Base_Start_IT+0x76>
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a1c      	ldr	r2, [pc, #112]	; (800165c <HAL_TIM_Base_Start_IT+0xd0>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d009      	beq.n	8001602 <HAL_TIM_Base_Start_IT+0x76>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4a1b      	ldr	r2, [pc, #108]	; (8001660 <HAL_TIM_Base_Start_IT+0xd4>)
 80015f4:	4293      	cmp	r3, r2
 80015f6:	d004      	beq.n	8001602 <HAL_TIM_Base_Start_IT+0x76>
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_TIM_Base_Start_IT+0xd8>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d115      	bne.n	800162e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	689a      	ldr	r2, [r3, #8]
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <HAL_TIM_Base_Start_IT+0xdc>)
 800160a:	4013      	ands	r3, r2
 800160c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	2b06      	cmp	r3, #6
 8001612:	d015      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0xb4>
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800161a:	d011      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0201 	orr.w	r2, r2, #1
 800162a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800162c:	e008      	b.n	8001640 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f042 0201 	orr.w	r2, r2, #1
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	e000      	b.n	8001642 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001640:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40012c00 	.word	0x40012c00
 8001654:	40000400 	.word	0x40000400
 8001658:	40000800 	.word	0x40000800
 800165c:	40000c00 	.word	0x40000c00
 8001660:	40013400 	.word	0x40013400
 8001664:	40014000 	.word	0x40014000
 8001668:	00010007 	.word	0x00010007

0800166c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	691b      	ldr	r3, [r3, #16]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b02      	cmp	r3, #2
 8001680:	d122      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0302 	and.w	r3, r3, #2
 800168c:	2b02      	cmp	r3, #2
 800168e:	d11b      	bne.n	80016c8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f06f 0202 	mvn.w	r2, #2
 8001698:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	699b      	ldr	r3, [r3, #24]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016ae:	6878      	ldr	r0, [r7, #4]
 80016b0:	f000 f905 	bl	80018be <HAL_TIM_IC_CaptureCallback>
 80016b4:	e005      	b.n	80016c2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f8f7 	bl	80018aa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016bc:	6878      	ldr	r0, [r7, #4]
 80016be:	f000 f908 	bl	80018d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	2200      	movs	r2, #0
 80016c6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	f003 0304 	and.w	r3, r3, #4
 80016d2:	2b04      	cmp	r3, #4
 80016d4:	d122      	bne.n	800171c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0304 	and.w	r3, r3, #4
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d11b      	bne.n	800171c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f06f 0204 	mvn.w	r2, #4
 80016ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	2202      	movs	r2, #2
 80016f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	699b      	ldr	r3, [r3, #24]
 80016fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f000 f8db 	bl	80018be <HAL_TIM_IC_CaptureCallback>
 8001708:	e005      	b.n	8001716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8cd 	bl	80018aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 f8de 	bl	80018d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b08      	cmp	r3, #8
 8001728:	d122      	bne.n	8001770 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b08      	cmp	r3, #8
 8001736:	d11b      	bne.n	8001770 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0208 	mvn.w	r2, #8
 8001740:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	2204      	movs	r2, #4
 8001746:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0303 	and.w	r3, r3, #3
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001756:	6878      	ldr	r0, [r7, #4]
 8001758:	f000 f8b1 	bl	80018be <HAL_TIM_IC_CaptureCallback>
 800175c:	e005      	b.n	800176a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f8a3 	bl	80018aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001764:	6878      	ldr	r0, [r7, #4]
 8001766:	f000 f8b4 	bl	80018d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	691b      	ldr	r3, [r3, #16]
 8001776:	f003 0310 	and.w	r3, r3, #16
 800177a:	2b10      	cmp	r3, #16
 800177c:	d122      	bne.n	80017c4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	68db      	ldr	r3, [r3, #12]
 8001784:	f003 0310 	and.w	r3, r3, #16
 8001788:	2b10      	cmp	r3, #16
 800178a:	d11b      	bne.n	80017c4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f06f 0210 	mvn.w	r2, #16
 8001794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2208      	movs	r2, #8
 800179a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	69db      	ldr	r3, [r3, #28]
 80017a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f000 f887 	bl	80018be <HAL_TIM_IC_CaptureCallback>
 80017b0:	e005      	b.n	80017be <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f879 	bl	80018aa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017b8:	6878      	ldr	r0, [r7, #4]
 80017ba:	f000 f88a 	bl	80018d2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	691b      	ldr	r3, [r3, #16]
 80017ca:	f003 0301 	and.w	r3, r3, #1
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d10e      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	68db      	ldr	r3, [r3, #12]
 80017d8:	f003 0301 	and.w	r3, r3, #1
 80017dc:	2b01      	cmp	r3, #1
 80017de:	d107      	bne.n	80017f0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f06f 0201 	mvn.w	r2, #1
 80017e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7fe fdd4 	bl	8000398 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017fa:	2b80      	cmp	r3, #128	; 0x80
 80017fc:	d10e      	bne.n	800181c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001808:	2b80      	cmp	r3, #128	; 0x80
 800180a:	d107      	bne.n	800181c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f914 	bl	8001a44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	691b      	ldr	r3, [r3, #16]
 8001822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800182a:	d10e      	bne.n	800184a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001836:	2b80      	cmp	r3, #128	; 0x80
 8001838:	d107      	bne.n	800184a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001842:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f000 f907 	bl	8001a58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001854:	2b40      	cmp	r3, #64	; 0x40
 8001856:	d10e      	bne.n	8001876 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	68db      	ldr	r3, [r3, #12]
 800185e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001862:	2b40      	cmp	r3, #64	; 0x40
 8001864:	d107      	bne.n	8001876 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800186e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001870:	6878      	ldr	r0, [r7, #4]
 8001872:	f000 f838 	bl	80018e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	2b20      	cmp	r3, #32
 8001882:	d10e      	bne.n	80018a2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	68db      	ldr	r3, [r3, #12]
 800188a:	f003 0320 	and.w	r3, r3, #32
 800188e:	2b20      	cmp	r3, #32
 8001890:	d107      	bne.n	80018a2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f06f 0220 	mvn.w	r2, #32
 800189a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 f8c7 	bl	8001a30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018a2:	bf00      	nop
 80018a4:	3708      	adds	r7, #8
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018aa:	b480      	push	{r7}
 80018ac:	b083      	sub	sp, #12
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018b2:	bf00      	nop
 80018b4:	370c      	adds	r7, #12
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr

080018be <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018c6:	bf00      	nop
 80018c8:	370c      	adds	r7, #12
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr

080018d2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018d2:	b480      	push	{r7}
 80018d4:	b083      	sub	sp, #12
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018da:	bf00      	nop
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a40      	ldr	r2, [pc, #256]	; (8001a10 <TIM_Base_SetConfig+0x114>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d013      	beq.n	800193c <TIM_Base_SetConfig+0x40>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191a:	d00f      	beq.n	800193c <TIM_Base_SetConfig+0x40>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	4a3d      	ldr	r2, [pc, #244]	; (8001a14 <TIM_Base_SetConfig+0x118>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d00b      	beq.n	800193c <TIM_Base_SetConfig+0x40>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	4a3c      	ldr	r2, [pc, #240]	; (8001a18 <TIM_Base_SetConfig+0x11c>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d007      	beq.n	800193c <TIM_Base_SetConfig+0x40>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	4a3b      	ldr	r2, [pc, #236]	; (8001a1c <TIM_Base_SetConfig+0x120>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d003      	beq.n	800193c <TIM_Base_SetConfig+0x40>
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	4a3a      	ldr	r2, [pc, #232]	; (8001a20 <TIM_Base_SetConfig+0x124>)
 8001938:	4293      	cmp	r3, r2
 800193a:	d108      	bne.n	800194e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001942:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	68fa      	ldr	r2, [r7, #12]
 800194a:	4313      	orrs	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a2f      	ldr	r2, [pc, #188]	; (8001a10 <TIM_Base_SetConfig+0x114>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d01f      	beq.n	8001996 <TIM_Base_SetConfig+0x9a>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800195c:	d01b      	beq.n	8001996 <TIM_Base_SetConfig+0x9a>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a2c      	ldr	r2, [pc, #176]	; (8001a14 <TIM_Base_SetConfig+0x118>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d017      	beq.n	8001996 <TIM_Base_SetConfig+0x9a>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a2b      	ldr	r2, [pc, #172]	; (8001a18 <TIM_Base_SetConfig+0x11c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d013      	beq.n	8001996 <TIM_Base_SetConfig+0x9a>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a2a      	ldr	r2, [pc, #168]	; (8001a1c <TIM_Base_SetConfig+0x120>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d00f      	beq.n	8001996 <TIM_Base_SetConfig+0x9a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a29      	ldr	r2, [pc, #164]	; (8001a20 <TIM_Base_SetConfig+0x124>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d00b      	beq.n	8001996 <TIM_Base_SetConfig+0x9a>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a28      	ldr	r2, [pc, #160]	; (8001a24 <TIM_Base_SetConfig+0x128>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d007      	beq.n	8001996 <TIM_Base_SetConfig+0x9a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a27      	ldr	r2, [pc, #156]	; (8001a28 <TIM_Base_SetConfig+0x12c>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d003      	beq.n	8001996 <TIM_Base_SetConfig+0x9a>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a26      	ldr	r2, [pc, #152]	; (8001a2c <TIM_Base_SetConfig+0x130>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d108      	bne.n	80019a8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800199c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	68fa      	ldr	r2, [r7, #12]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ae:	683b      	ldr	r3, [r7, #0]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	4313      	orrs	r3, r2
 80019b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019bc:	683b      	ldr	r3, [r7, #0]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	4a10      	ldr	r2, [pc, #64]	; (8001a10 <TIM_Base_SetConfig+0x114>)
 80019d0:	4293      	cmp	r3, r2
 80019d2:	d00f      	beq.n	80019f4 <TIM_Base_SetConfig+0xf8>
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4a12      	ldr	r2, [pc, #72]	; (8001a20 <TIM_Base_SetConfig+0x124>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d00b      	beq.n	80019f4 <TIM_Base_SetConfig+0xf8>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	4a11      	ldr	r2, [pc, #68]	; (8001a24 <TIM_Base_SetConfig+0x128>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d007      	beq.n	80019f4 <TIM_Base_SetConfig+0xf8>
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4a10      	ldr	r2, [pc, #64]	; (8001a28 <TIM_Base_SetConfig+0x12c>)
 80019e8:	4293      	cmp	r3, r2
 80019ea:	d003      	beq.n	80019f4 <TIM_Base_SetConfig+0xf8>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a0f      	ldr	r2, [pc, #60]	; (8001a2c <TIM_Base_SetConfig+0x130>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d103      	bne.n	80019fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	691a      	ldr	r2, [r3, #16]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	615a      	str	r2, [r3, #20]
}
 8001a02:	bf00      	nop
 8001a04:	3714      	adds	r7, #20
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	40012c00 	.word	0x40012c00
 8001a14:	40000400 	.word	0x40000400
 8001a18:	40000800 	.word	0x40000800
 8001a1c:	40000c00 	.word	0x40000c00
 8001a20:	40013400 	.word	0x40013400
 8001a24:	40014000 	.word	0x40014000
 8001a28:	40014400 	.word	0x40014400
 8001a2c:	40014800 	.word	0x40014800

08001a30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr

08001a44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b083      	sub	sp, #12
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr

08001a58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <__NVIC_SetPriority>:
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	; (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	; (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <SysTick_Handler+0x1c>)
 8001ac6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001ac8:	f001 fcfe 	bl	80034c8 <xTaskGetSchedulerState>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	d001      	beq.n	8001ad6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001ad2:	f002 fae9 	bl	80040a8 <xPortSysTickHandler>
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	f06f 0004 	mvn.w	r0, #4
 8001aea:	f7ff ffbf 	bl	8001a6c <__NVIC_SetPriority>
#endif
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
	...

08001af4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001afa:	f3ef 8305 	mrs	r3, IPSR
 8001afe:	603b      	str	r3, [r7, #0]
  return(result);
 8001b00:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001b06:	f06f 0305 	mvn.w	r3, #5
 8001b0a:	607b      	str	r3, [r7, #4]
 8001b0c:	e00c      	b.n	8001b28 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b0e:	4b0a      	ldr	r3, [pc, #40]	; (8001b38 <osKernelInitialize+0x44>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d105      	bne.n	8001b22 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001b16:	4b08      	ldr	r3, [pc, #32]	; (8001b38 <osKernelInitialize+0x44>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	607b      	str	r3, [r7, #4]
 8001b20:	e002      	b.n	8001b28 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
 8001b26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b28:	687b      	ldr	r3, [r7, #4]
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	370c      	adds	r7, #12
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b34:	4770      	bx	lr
 8001b36:	bf00      	nop
 8001b38:	2000002c 	.word	0x2000002c

08001b3c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b42:	f3ef 8305 	mrs	r3, IPSR
 8001b46:	603b      	str	r3, [r7, #0]
  return(result);
 8001b48:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001b4e:	f06f 0305 	mvn.w	r3, #5
 8001b52:	607b      	str	r3, [r7, #4]
 8001b54:	e010      	b.n	8001b78 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001b56:	4b0b      	ldr	r3, [pc, #44]	; (8001b84 <osKernelStart+0x48>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d109      	bne.n	8001b72 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001b5e:	f7ff ffbf 	bl	8001ae0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001b62:	4b08      	ldr	r3, [pc, #32]	; (8001b84 <osKernelStart+0x48>)
 8001b64:	2202      	movs	r2, #2
 8001b66:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001b68:	f001 f866 	bl	8002c38 <vTaskStartScheduler>
      stat = osOK;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	e002      	b.n	8001b78 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001b72:	f04f 33ff 	mov.w	r3, #4294967295
 8001b76:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b78:	687b      	ldr	r3, [r7, #4]
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	2000002c 	.word	0x2000002c

08001b88 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08e      	sub	sp, #56	; 0x38
 8001b8c:	af04      	add	r7, sp, #16
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b98:	f3ef 8305 	mrs	r3, IPSR
 8001b9c:	617b      	str	r3, [r7, #20]
  return(result);
 8001b9e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d17e      	bne.n	8001ca2 <osThreadNew+0x11a>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d07b      	beq.n	8001ca2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001baa:	2380      	movs	r3, #128	; 0x80
 8001bac:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001bae:	2318      	movs	r3, #24
 8001bb0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d045      	beq.n	8001c4e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d002      	beq.n	8001bd0 <osThreadNew+0x48>
        name = attr->name;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d002      	beq.n	8001bde <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	699b      	ldr	r3, [r3, #24]
 8001bdc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d008      	beq.n	8001bf6 <osThreadNew+0x6e>
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	2b38      	cmp	r3, #56	; 0x38
 8001be8:	d805      	bhi.n	8001bf6 <osThreadNew+0x6e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <osThreadNew+0x72>
        return (NULL);
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e054      	b.n	8001ca4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	695b      	ldr	r3, [r3, #20]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d003      	beq.n	8001c0a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	695b      	ldr	r3, [r3, #20]
 8001c06:	089b      	lsrs	r3, r3, #2
 8001c08:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d00e      	beq.n	8001c30 <osThreadNew+0xa8>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	68db      	ldr	r3, [r3, #12]
 8001c16:	2b5b      	cmp	r3, #91	; 0x5b
 8001c18:	d90a      	bls.n	8001c30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d006      	beq.n	8001c30 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	695b      	ldr	r3, [r3, #20]
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <osThreadNew+0xa8>
        mem = 1;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	61bb      	str	r3, [r7, #24]
 8001c2e:	e010      	b.n	8001c52 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10c      	bne.n	8001c52 <osThreadNew+0xca>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d108      	bne.n	8001c52 <osThreadNew+0xca>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	691b      	ldr	r3, [r3, #16]
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d104      	bne.n	8001c52 <osThreadNew+0xca>
          mem = 0;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	e001      	b.n	8001c52 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d110      	bne.n	8001c7a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001c5c:	687a      	ldr	r2, [r7, #4]
 8001c5e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c60:	9202      	str	r2, [sp, #8]
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	9300      	str	r3, [sp, #0]
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	6a3a      	ldr	r2, [r7, #32]
 8001c6c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c6e:	68f8      	ldr	r0, [r7, #12]
 8001c70:	f000 fe0c 	bl	800288c <xTaskCreateStatic>
 8001c74:	4603      	mov	r3, r0
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	e013      	b.n	8001ca2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d110      	bne.n	8001ca2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	f107 0310 	add.w	r3, r7, #16
 8001c88:	9301      	str	r3, [sp, #4]
 8001c8a:	69fb      	ldr	r3, [r7, #28]
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
 8001c90:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 fe57 	bl	8002946 <xTaskCreate>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d001      	beq.n	8001ca2 <osThreadNew+0x11a>
            hTask = NULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001ca2:	693b      	ldr	r3, [r7, #16]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	3728      	adds	r7, #40	; 0x28
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bd80      	pop	{r7, pc}

08001cac <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cb4:	f3ef 8305 	mrs	r3, IPSR
 8001cb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8001cba:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d003      	beq.n	8001cc8 <osDelay+0x1c>
    stat = osErrorISR;
 8001cc0:	f06f 0305 	mvn.w	r3, #5
 8001cc4:	60fb      	str	r3, [r7, #12]
 8001cc6:	e007      	b.n	8001cd8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 ff7c 	bl	8002bd0 <vTaskDelay>
    }
  }

  return (stat);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	3710      	adds	r7, #16
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
	...

08001ce4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4a07      	ldr	r2, [pc, #28]	; (8001d10 <vApplicationGetIdleTaskMemory+0x2c>)
 8001cf4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	4a06      	ldr	r2, [pc, #24]	; (8001d14 <vApplicationGetIdleTaskMemory+0x30>)
 8001cfa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2280      	movs	r2, #128	; 0x80
 8001d00:	601a      	str	r2, [r3, #0]
}
 8001d02:	bf00      	nop
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	20000030 	.word	0x20000030
 8001d14:	2000008c 	.word	0x2000008c

08001d18 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d18:	b480      	push	{r7}
 8001d1a:	b085      	sub	sp, #20
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	60f8      	str	r0, [r7, #12]
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4a07      	ldr	r2, [pc, #28]	; (8001d44 <vApplicationGetTimerTaskMemory+0x2c>)
 8001d28:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	4a06      	ldr	r2, [pc, #24]	; (8001d48 <vApplicationGetTimerTaskMemory+0x30>)
 8001d2e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d36:	601a      	str	r2, [r3, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	3714      	adds	r7, #20
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	2000028c 	.word	0x2000028c
 8001d48:	200002e8 	.word	0x200002e8

08001d4c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	f103 0208 	add.w	r2, r3, #8
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	f04f 32ff 	mov.w	r2, #4294967295
 8001d64:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f103 0208 	add.w	r2, r3, #8
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	f103 0208 	add.w	r2, r3, #8
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001d80:	bf00      	nop
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr

08001d8c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001d9a:	bf00      	nop
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	689a      	ldr	r2, [r3, #8]
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	683a      	ldr	r2, [r7, #0]
 8001dca:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	1c5a      	adds	r2, r3, #1
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	601a      	str	r2, [r3, #0]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr

08001dee <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dee:	b480      	push	{r7}
 8001df0:	b085      	sub	sp, #20
 8001df2:	af00      	add	r7, sp, #0
 8001df4:	6078      	str	r0, [r7, #4]
 8001df6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e04:	d103      	bne.n	8001e0e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	60fb      	str	r3, [r7, #12]
 8001e0c:	e00c      	b.n	8001e28 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	3308      	adds	r3, #8
 8001e12:	60fb      	str	r3, [r7, #12]
 8001e14:	e002      	b.n	8001e1c <vListInsert+0x2e>
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d2f6      	bcs.n	8001e16 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	68fa      	ldr	r2, [r7, #12]
 8001e3c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	683a      	ldr	r2, [r7, #0]
 8001e42:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	601a      	str	r2, [r3, #0]
}
 8001e54:	bf00      	nop
 8001e56:	3714      	adds	r7, #20
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	691b      	ldr	r3, [r3, #16]
 8001e6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6892      	ldr	r2, [r2, #8]
 8001e76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	687a      	ldr	r2, [r7, #4]
 8001e7e:	6852      	ldr	r2, [r2, #4]
 8001e80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d103      	bne.n	8001e94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689a      	ldr	r2, [r3, #8]
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	1e5a      	subs	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10a      	bne.n	8001ede <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ecc:	f383 8811 	msr	BASEPRI, r3
 8001ed0:	f3bf 8f6f 	isb	sy
 8001ed4:	f3bf 8f4f 	dsb	sy
 8001ed8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001eda:	bf00      	nop
 8001edc:	e7fe      	b.n	8001edc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001ede:	f002 f851 	bl	8003f84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eea:	68f9      	ldr	r1, [r7, #12]
 8001eec:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001eee:	fb01 f303 	mul.w	r3, r1, r3
 8001ef2:	441a      	add	r2, r3
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	2200      	movs	r2, #0
 8001efc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f0e:	3b01      	subs	r3, #1
 8001f10:	68f9      	ldr	r1, [r7, #12]
 8001f12:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f14:	fb01 f303 	mul.w	r3, r1, r3
 8001f18:	441a      	add	r2, r3
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	22ff      	movs	r2, #255	; 0xff
 8001f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	22ff      	movs	r2, #255	; 0xff
 8001f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d114      	bne.n	8001f5e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	691b      	ldr	r3, [r3, #16]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01a      	beq.n	8001f72 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	3310      	adds	r3, #16
 8001f40:	4618      	mov	r0, r3
 8001f42:	f001 f903 	bl	800314c <xTaskRemoveFromEventList>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d012      	beq.n	8001f72 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	; (8001f80 <xQueueGenericReset+0xcc>)
 8001f4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f52:	601a      	str	r2, [r3, #0]
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	f3bf 8f6f 	isb	sy
 8001f5c:	e009      	b.n	8001f72 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	3310      	adds	r3, #16
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7ff fef2 	bl	8001d4c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	3324      	adds	r3, #36	; 0x24
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7ff feed 	bl	8001d4c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001f72:	f002 f837 	bl	8003fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001f76:	2301      	movs	r3, #1
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	e000ed04 	.word	0xe000ed04

08001f84 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b08e      	sub	sp, #56	; 0x38
 8001f88:	af02      	add	r7, sp, #8
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	60b9      	str	r1, [r7, #8]
 8001f8e:	607a      	str	r2, [r7, #4]
 8001f90:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d10a      	bne.n	8001fae <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f9c:	f383 8811 	msr	BASEPRI, r3
 8001fa0:	f3bf 8f6f 	isb	sy
 8001fa4:	f3bf 8f4f 	dsb	sy
 8001fa8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001faa:	bf00      	nop
 8001fac:	e7fe      	b.n	8001fac <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d10a      	bne.n	8001fca <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8001fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fb8:	f383 8811 	msr	BASEPRI, r3
 8001fbc:	f3bf 8f6f 	isb	sy
 8001fc0:	f3bf 8f4f 	dsb	sy
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8001fc6:	bf00      	nop
 8001fc8:	e7fe      	b.n	8001fc8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <xQueueGenericCreateStatic+0x52>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <xQueueGenericCreateStatic+0x56>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <xQueueGenericCreateStatic+0x58>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10a      	bne.n	8001ff6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8001fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe4:	f383 8811 	msr	BASEPRI, r3
 8001fe8:	f3bf 8f6f 	isb	sy
 8001fec:	f3bf 8f4f 	dsb	sy
 8001ff0:	623b      	str	r3, [r7, #32]
}
 8001ff2:	bf00      	nop
 8001ff4:	e7fe      	b.n	8001ff4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d102      	bne.n	8002002 <xQueueGenericCreateStatic+0x7e>
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <xQueueGenericCreateStatic+0x82>
 8002002:	2301      	movs	r3, #1
 8002004:	e000      	b.n	8002008 <xQueueGenericCreateStatic+0x84>
 8002006:	2300      	movs	r3, #0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d10a      	bne.n	8002022 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800200c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002010:	f383 8811 	msr	BASEPRI, r3
 8002014:	f3bf 8f6f 	isb	sy
 8002018:	f3bf 8f4f 	dsb	sy
 800201c:	61fb      	str	r3, [r7, #28]
}
 800201e:	bf00      	nop
 8002020:	e7fe      	b.n	8002020 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002022:	2350      	movs	r3, #80	; 0x50
 8002024:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	2b50      	cmp	r3, #80	; 0x50
 800202a:	d00a      	beq.n	8002042 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	61bb      	str	r3, [r7, #24]
}
 800203e:	bf00      	nop
 8002040:	e7fe      	b.n	8002040 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002042:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002048:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00d      	beq.n	800206a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800204e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002050:	2201      	movs	r2, #1
 8002052:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002056:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800205a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800205c:	9300      	str	r3, [sp, #0]
 800205e:	4613      	mov	r3, r2
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	68b9      	ldr	r1, [r7, #8]
 8002064:	68f8      	ldr	r0, [r7, #12]
 8002066:	f000 f805 	bl	8002074 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800206a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800206c:	4618      	mov	r0, r3
 800206e:	3730      	adds	r7, #48	; 0x30
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b084      	sub	sp, #16
 8002078:	af00      	add	r7, sp, #0
 800207a:	60f8      	str	r0, [r7, #12]
 800207c:	60b9      	str	r1, [r7, #8]
 800207e:	607a      	str	r2, [r7, #4]
 8002080:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d103      	bne.n	8002090 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002088:	69bb      	ldr	r3, [r7, #24]
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	601a      	str	r2, [r3, #0]
 800208e:	e002      	b.n	8002096 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002096:	69bb      	ldr	r3, [r7, #24]
 8002098:	68fa      	ldr	r2, [r7, #12]
 800209a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	68ba      	ldr	r2, [r7, #8]
 80020a0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020a2:	2101      	movs	r1, #1
 80020a4:	69b8      	ldr	r0, [r7, #24]
 80020a6:	f7ff ff05 	bl	8001eb4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80020aa:	69bb      	ldr	r3, [r7, #24]
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80020b2:	bf00      	nop
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	b08e      	sub	sp, #56	; 0x38
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	60f8      	str	r0, [r7, #12]
 80020c4:	60b9      	str	r1, [r7, #8]
 80020c6:	607a      	str	r2, [r7, #4]
 80020c8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80020ca:	2300      	movs	r3, #0
 80020cc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80020d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d10a      	bne.n	80020ee <xQueueGenericSend+0x32>
	__asm volatile
 80020d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020dc:	f383 8811 	msr	BASEPRI, r3
 80020e0:	f3bf 8f6f 	isb	sy
 80020e4:	f3bf 8f4f 	dsb	sy
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80020ea:	bf00      	nop
 80020ec:	e7fe      	b.n	80020ec <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d103      	bne.n	80020fc <xQueueGenericSend+0x40>
 80020f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d101      	bne.n	8002100 <xQueueGenericSend+0x44>
 80020fc:	2301      	movs	r3, #1
 80020fe:	e000      	b.n	8002102 <xQueueGenericSend+0x46>
 8002100:	2300      	movs	r3, #0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d10a      	bne.n	800211c <xQueueGenericSend+0x60>
	__asm volatile
 8002106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800210a:	f383 8811 	msr	BASEPRI, r3
 800210e:	f3bf 8f6f 	isb	sy
 8002112:	f3bf 8f4f 	dsb	sy
 8002116:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002118:	bf00      	nop
 800211a:	e7fe      	b.n	800211a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	2b02      	cmp	r3, #2
 8002120:	d103      	bne.n	800212a <xQueueGenericSend+0x6e>
 8002122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002124:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002126:	2b01      	cmp	r3, #1
 8002128:	d101      	bne.n	800212e <xQueueGenericSend+0x72>
 800212a:	2301      	movs	r3, #1
 800212c:	e000      	b.n	8002130 <xQueueGenericSend+0x74>
 800212e:	2300      	movs	r3, #0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d10a      	bne.n	800214a <xQueueGenericSend+0x8e>
	__asm volatile
 8002134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002138:	f383 8811 	msr	BASEPRI, r3
 800213c:	f3bf 8f6f 	isb	sy
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	623b      	str	r3, [r7, #32]
}
 8002146:	bf00      	nop
 8002148:	e7fe      	b.n	8002148 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800214a:	f001 f9bd 	bl	80034c8 <xTaskGetSchedulerState>
 800214e:	4603      	mov	r3, r0
 8002150:	2b00      	cmp	r3, #0
 8002152:	d102      	bne.n	800215a <xQueueGenericSend+0x9e>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d101      	bne.n	800215e <xQueueGenericSend+0xa2>
 800215a:	2301      	movs	r3, #1
 800215c:	e000      	b.n	8002160 <xQueueGenericSend+0xa4>
 800215e:	2300      	movs	r3, #0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d10a      	bne.n	800217a <xQueueGenericSend+0xbe>
	__asm volatile
 8002164:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002168:	f383 8811 	msr	BASEPRI, r3
 800216c:	f3bf 8f6f 	isb	sy
 8002170:	f3bf 8f4f 	dsb	sy
 8002174:	61fb      	str	r3, [r7, #28]
}
 8002176:	bf00      	nop
 8002178:	e7fe      	b.n	8002178 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800217a:	f001 ff03 	bl	8003f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800217e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002186:	429a      	cmp	r2, r3
 8002188:	d302      	bcc.n	8002190 <xQueueGenericSend+0xd4>
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	2b02      	cmp	r3, #2
 800218e:	d129      	bne.n	80021e4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	68b9      	ldr	r1, [r7, #8]
 8002194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002196:	f000 fa0b 	bl	80025b0 <prvCopyDataToQueue>
 800219a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800219c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800219e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d010      	beq.n	80021c6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a6:	3324      	adds	r3, #36	; 0x24
 80021a8:	4618      	mov	r0, r3
 80021aa:	f000 ffcf 	bl	800314c <xTaskRemoveFromEventList>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d013      	beq.n	80021dc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80021b4:	4b3f      	ldr	r3, [pc, #252]	; (80022b4 <xQueueGenericSend+0x1f8>)
 80021b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	f3bf 8f4f 	dsb	sy
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	e00a      	b.n	80021dc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80021c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d007      	beq.n	80021dc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80021cc:	4b39      	ldr	r3, [pc, #228]	; (80022b4 <xQueueGenericSend+0x1f8>)
 80021ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	f3bf 8f4f 	dsb	sy
 80021d8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80021dc:	f001 ff02 	bl	8003fe4 <vPortExitCritical>
				return pdPASS;
 80021e0:	2301      	movs	r3, #1
 80021e2:	e063      	b.n	80022ac <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d103      	bne.n	80021f2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80021ea:	f001 fefb 	bl	8003fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	e05c      	b.n	80022ac <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80021f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d106      	bne.n	8002206 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 f809 	bl	8003214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002202:	2301      	movs	r3, #1
 8002204:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002206:	f001 feed 	bl	8003fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800220a:	f000 fd7b 	bl	8002d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800220e:	f001 feb9 	bl	8003f84 <vPortEnterCritical>
 8002212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002214:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002218:	b25b      	sxtb	r3, r3
 800221a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221e:	d103      	bne.n	8002228 <xQueueGenericSend+0x16c>
 8002220:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002222:	2200      	movs	r2, #0
 8002224:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800222a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800222e:	b25b      	sxtb	r3, r3
 8002230:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002234:	d103      	bne.n	800223e <xQueueGenericSend+0x182>
 8002236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002238:	2200      	movs	r2, #0
 800223a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800223e:	f001 fed1 	bl	8003fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002242:	1d3a      	adds	r2, r7, #4
 8002244:	f107 0314 	add.w	r3, r7, #20
 8002248:	4611      	mov	r1, r2
 800224a:	4618      	mov	r0, r3
 800224c:	f000 fff8 	bl	8003240 <xTaskCheckForTimeOut>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d124      	bne.n	80022a0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002256:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002258:	f000 faa2 	bl	80027a0 <prvIsQueueFull>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d018      	beq.n	8002294 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002264:	3310      	adds	r3, #16
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	4611      	mov	r1, r2
 800226a:	4618      	mov	r0, r3
 800226c:	f000 ff1e 	bl	80030ac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002270:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002272:	f000 fa2d 	bl	80026d0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002276:	f000 fd53 	bl	8002d20 <xTaskResumeAll>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	f47f af7c 	bne.w	800217a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002282:	4b0c      	ldr	r3, [pc, #48]	; (80022b4 <xQueueGenericSend+0x1f8>)
 8002284:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	f3bf 8f6f 	isb	sy
 8002292:	e772      	b.n	800217a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002294:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002296:	f000 fa1b 	bl	80026d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800229a:	f000 fd41 	bl	8002d20 <xTaskResumeAll>
 800229e:	e76c      	b.n	800217a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80022a0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022a2:	f000 fa15 	bl	80026d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022a6:	f000 fd3b 	bl	8002d20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80022aa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	3738      	adds	r7, #56	; 0x38
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	e000ed04 	.word	0xe000ed04

080022b8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b090      	sub	sp, #64	; 0x40
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
 80022c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80022ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10a      	bne.n	80022e6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80022d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022d4:	f383 8811 	msr	BASEPRI, r3
 80022d8:	f3bf 8f6f 	isb	sy
 80022dc:	f3bf 8f4f 	dsb	sy
 80022e0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80022e2:	bf00      	nop
 80022e4:	e7fe      	b.n	80022e4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d103      	bne.n	80022f4 <xQueueGenericSendFromISR+0x3c>
 80022ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <xQueueGenericSendFromISR+0x40>
 80022f4:	2301      	movs	r3, #1
 80022f6:	e000      	b.n	80022fa <xQueueGenericSendFromISR+0x42>
 80022f8:	2300      	movs	r3, #0
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d10a      	bne.n	8002314 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80022fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002302:	f383 8811 	msr	BASEPRI, r3
 8002306:	f3bf 8f6f 	isb	sy
 800230a:	f3bf 8f4f 	dsb	sy
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002310:	bf00      	nop
 8002312:	e7fe      	b.n	8002312 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	2b02      	cmp	r3, #2
 8002318:	d103      	bne.n	8002322 <xQueueGenericSendFromISR+0x6a>
 800231a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	2b01      	cmp	r3, #1
 8002320:	d101      	bne.n	8002326 <xQueueGenericSendFromISR+0x6e>
 8002322:	2301      	movs	r3, #1
 8002324:	e000      	b.n	8002328 <xQueueGenericSendFromISR+0x70>
 8002326:	2300      	movs	r3, #0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d10a      	bne.n	8002342 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800232c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002330:	f383 8811 	msr	BASEPRI, r3
 8002334:	f3bf 8f6f 	isb	sy
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	623b      	str	r3, [r7, #32]
}
 800233e:	bf00      	nop
 8002340:	e7fe      	b.n	8002340 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002342:	f001 ff01 	bl	8004148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002346:	f3ef 8211 	mrs	r2, BASEPRI
 800234a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800234e:	f383 8811 	msr	BASEPRI, r3
 8002352:	f3bf 8f6f 	isb	sy
 8002356:	f3bf 8f4f 	dsb	sy
 800235a:	61fa      	str	r2, [r7, #28]
 800235c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800235e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002360:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800236a:	429a      	cmp	r2, r3
 800236c:	d302      	bcc.n	8002374 <xQueueGenericSendFromISR+0xbc>
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b02      	cmp	r3, #2
 8002372:	d12f      	bne.n	80023d4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002374:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002376:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800237a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800237e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002380:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002382:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800238a:	f000 f911 	bl	80025b0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800238e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002392:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002396:	d112      	bne.n	80023be <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800239a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800239c:	2b00      	cmp	r3, #0
 800239e:	d016      	beq.n	80023ce <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023a2:	3324      	adds	r3, #36	; 0x24
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fed1 	bl	800314c <xTaskRemoveFromEventList>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d00e      	beq.n	80023ce <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d00b      	beq.n	80023ce <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	e007      	b.n	80023ce <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80023be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80023c2:	3301      	adds	r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	b25a      	sxtb	r2, r3
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80023ce:	2301      	movs	r3, #1
 80023d0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80023d2:	e001      	b.n	80023d8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80023d4:	2300      	movs	r3, #0
 80023d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80023d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023da:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80023dc:	697b      	ldr	r3, [r7, #20]
 80023de:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80023e2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80023e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3740      	adds	r7, #64	; 0x40
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
	...

080023f0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08c      	sub	sp, #48	; 0x30
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	60f8      	str	r0, [r7, #12]
 80023f8:	60b9      	str	r1, [r7, #8]
 80023fa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80023fc:	2300      	movs	r3, #0
 80023fe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002406:	2b00      	cmp	r3, #0
 8002408:	d10a      	bne.n	8002420 <xQueueReceive+0x30>
	__asm volatile
 800240a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800240e:	f383 8811 	msr	BASEPRI, r3
 8002412:	f3bf 8f6f 	isb	sy
 8002416:	f3bf 8f4f 	dsb	sy
 800241a:	623b      	str	r3, [r7, #32]
}
 800241c:	bf00      	nop
 800241e:	e7fe      	b.n	800241e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002420:	68bb      	ldr	r3, [r7, #8]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d103      	bne.n	800242e <xQueueReceive+0x3e>
 8002426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	2b00      	cmp	r3, #0
 800242c:	d101      	bne.n	8002432 <xQueueReceive+0x42>
 800242e:	2301      	movs	r3, #1
 8002430:	e000      	b.n	8002434 <xQueueReceive+0x44>
 8002432:	2300      	movs	r3, #0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d10a      	bne.n	800244e <xQueueReceive+0x5e>
	__asm volatile
 8002438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800243c:	f383 8811 	msr	BASEPRI, r3
 8002440:	f3bf 8f6f 	isb	sy
 8002444:	f3bf 8f4f 	dsb	sy
 8002448:	61fb      	str	r3, [r7, #28]
}
 800244a:	bf00      	nop
 800244c:	e7fe      	b.n	800244c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800244e:	f001 f83b 	bl	80034c8 <xTaskGetSchedulerState>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d102      	bne.n	800245e <xQueueReceive+0x6e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d101      	bne.n	8002462 <xQueueReceive+0x72>
 800245e:	2301      	movs	r3, #1
 8002460:	e000      	b.n	8002464 <xQueueReceive+0x74>
 8002462:	2300      	movs	r3, #0
 8002464:	2b00      	cmp	r3, #0
 8002466:	d10a      	bne.n	800247e <xQueueReceive+0x8e>
	__asm volatile
 8002468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246c:	f383 8811 	msr	BASEPRI, r3
 8002470:	f3bf 8f6f 	isb	sy
 8002474:	f3bf 8f4f 	dsb	sy
 8002478:	61bb      	str	r3, [r7, #24]
}
 800247a:	bf00      	nop
 800247c:	e7fe      	b.n	800247c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800247e:	f001 fd81 	bl	8003f84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002486:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	2b00      	cmp	r3, #0
 800248c:	d01f      	beq.n	80024ce <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002492:	f000 f8f7 	bl	8002684 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	1e5a      	subs	r2, r3, #1
 800249a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800249c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800249e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a0:	691b      	ldr	r3, [r3, #16]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d00f      	beq.n	80024c6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024a8:	3310      	adds	r3, #16
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 fe4e 	bl	800314c <xTaskRemoveFromEventList>
 80024b0:	4603      	mov	r3, r0
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d007      	beq.n	80024c6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <xQueueReceive+0x1bc>)
 80024b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	f3bf 8f4f 	dsb	sy
 80024c2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80024c6:	f001 fd8d 	bl	8003fe4 <vPortExitCritical>
				return pdPASS;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e069      	b.n	80025a2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d103      	bne.n	80024dc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80024d4:	f001 fd86 	bl	8003fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80024d8:	2300      	movs	r3, #0
 80024da:	e062      	b.n	80025a2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80024dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d106      	bne.n	80024f0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80024e2:	f107 0310 	add.w	r3, r7, #16
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fe94 	bl	8003214 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80024ec:	2301      	movs	r3, #1
 80024ee:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80024f0:	f001 fd78 	bl	8003fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80024f4:	f000 fc06 	bl	8002d04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80024f8:	f001 fd44 	bl	8003f84 <vPortEnterCritical>
 80024fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002502:	b25b      	sxtb	r3, r3
 8002504:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002508:	d103      	bne.n	8002512 <xQueueReceive+0x122>
 800250a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800250c:	2200      	movs	r2, #0
 800250e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002514:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002518:	b25b      	sxtb	r3, r3
 800251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251e:	d103      	bne.n	8002528 <xQueueReceive+0x138>
 8002520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002522:	2200      	movs	r2, #0
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002528:	f001 fd5c 	bl	8003fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800252c:	1d3a      	adds	r2, r7, #4
 800252e:	f107 0310 	add.w	r3, r7, #16
 8002532:	4611      	mov	r1, r2
 8002534:	4618      	mov	r0, r3
 8002536:	f000 fe83 	bl	8003240 <xTaskCheckForTimeOut>
 800253a:	4603      	mov	r3, r0
 800253c:	2b00      	cmp	r3, #0
 800253e:	d123      	bne.n	8002588 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002540:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002542:	f000 f917 	bl	8002774 <prvIsQueueEmpty>
 8002546:	4603      	mov	r3, r0
 8002548:	2b00      	cmp	r3, #0
 800254a:	d017      	beq.n	800257c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800254c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800254e:	3324      	adds	r3, #36	; 0x24
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	4611      	mov	r1, r2
 8002554:	4618      	mov	r0, r3
 8002556:	f000 fda9 	bl	80030ac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800255a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800255c:	f000 f8b8 	bl	80026d0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002560:	f000 fbde 	bl	8002d20 <xTaskResumeAll>
 8002564:	4603      	mov	r3, r0
 8002566:	2b00      	cmp	r3, #0
 8002568:	d189      	bne.n	800247e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800256a:	4b10      	ldr	r3, [pc, #64]	; (80025ac <xQueueReceive+0x1bc>)
 800256c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	e780      	b.n	800247e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800257c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800257e:	f000 f8a7 	bl	80026d0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002582:	f000 fbcd 	bl	8002d20 <xTaskResumeAll>
 8002586:	e77a      	b.n	800247e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002588:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800258a:	f000 f8a1 	bl	80026d0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800258e:	f000 fbc7 	bl	8002d20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002594:	f000 f8ee 	bl	8002774 <prvIsQueueEmpty>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	f43f af6f 	beq.w	800247e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80025a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3730      	adds	r7, #48	; 0x30
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	e000ed04 	.word	0xe000ed04

080025b0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80025bc:	2300      	movs	r3, #0
 80025be:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025c4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d10d      	bne.n	80025ea <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d14d      	bne.n	8002672 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	4618      	mov	r0, r3
 80025dc:	f000 ff92 	bl	8003504 <xTaskPriorityDisinherit>
 80025e0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	609a      	str	r2, [r3, #8]
 80025e8:	e043      	b.n	8002672 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d119      	bne.n	8002624 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6858      	ldr	r0, [r3, #4]
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f8:	461a      	mov	r2, r3
 80025fa:	68b9      	ldr	r1, [r7, #8]
 80025fc:	f001 fff2 	bl	80045e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002608:	441a      	add	r2, r3
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685a      	ldr	r2, [r3, #4]
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	429a      	cmp	r2, r3
 8002618:	d32b      	bcc.n	8002672 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	605a      	str	r2, [r3, #4]
 8002622:	e026      	b.n	8002672 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	68d8      	ldr	r0, [r3, #12]
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262c:	461a      	mov	r2, r3
 800262e:	68b9      	ldr	r1, [r7, #8]
 8002630:	f001 ffd8 	bl	80045e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	68da      	ldr	r2, [r3, #12]
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263c:	425b      	negs	r3, r3
 800263e:	441a      	add	r2, r3
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	429a      	cmp	r2, r3
 800264e:	d207      	bcs.n	8002660 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	689a      	ldr	r2, [r3, #8]
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002658:	425b      	negs	r3, r3
 800265a:	441a      	add	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b02      	cmp	r3, #2
 8002664:	d105      	bne.n	8002672 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d002      	beq.n	8002672 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	3b01      	subs	r3, #1
 8002670:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	1c5a      	adds	r2, r3, #1
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800267a:	697b      	ldr	r3, [r7, #20]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3718      	adds	r7, #24
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}

08002684 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d018      	beq.n	80026c8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	68da      	ldr	r2, [r3, #12]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269e:	441a      	add	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	68da      	ldr	r2, [r3, #12]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d303      	bcc.n	80026b8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	68d9      	ldr	r1, [r3, #12]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	461a      	mov	r2, r3
 80026c2:	6838      	ldr	r0, [r7, #0]
 80026c4:	f001 ff8e 	bl	80045e4 <memcpy>
	}
}
 80026c8:	bf00      	nop
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b084      	sub	sp, #16
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80026d8:	f001 fc54 	bl	8003f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80026e2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80026e4:	e011      	b.n	800270a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d012      	beq.n	8002714 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	3324      	adds	r3, #36	; 0x24
 80026f2:	4618      	mov	r0, r3
 80026f4:	f000 fd2a 	bl	800314c <xTaskRemoveFromEventList>
 80026f8:	4603      	mov	r3, r0
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d001      	beq.n	8002702 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80026fe:	f000 fe01 	bl	8003304 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002702:	7bfb      	ldrb	r3, [r7, #15]
 8002704:	3b01      	subs	r3, #1
 8002706:	b2db      	uxtb	r3, r3
 8002708:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800270a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800270e:	2b00      	cmp	r3, #0
 8002710:	dce9      	bgt.n	80026e6 <prvUnlockQueue+0x16>
 8002712:	e000      	b.n	8002716 <prvUnlockQueue+0x46>
					break;
 8002714:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	22ff      	movs	r2, #255	; 0xff
 800271a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800271e:	f001 fc61 	bl	8003fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002722:	f001 fc2f 	bl	8003f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800272c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800272e:	e011      	b.n	8002754 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d012      	beq.n	800275e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3310      	adds	r3, #16
 800273c:	4618      	mov	r0, r3
 800273e:	f000 fd05 	bl	800314c <xTaskRemoveFromEventList>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002748:	f000 fddc 	bl	8003304 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800274c:	7bbb      	ldrb	r3, [r7, #14]
 800274e:	3b01      	subs	r3, #1
 8002750:	b2db      	uxtb	r3, r3
 8002752:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002754:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002758:	2b00      	cmp	r3, #0
 800275a:	dce9      	bgt.n	8002730 <prvUnlockQueue+0x60>
 800275c:	e000      	b.n	8002760 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800275e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	22ff      	movs	r2, #255	; 0xff
 8002764:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002768:	f001 fc3c 	bl	8003fe4 <vPortExitCritical>
}
 800276c:	bf00      	nop
 800276e:	3710      	adds	r7, #16
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b084      	sub	sp, #16
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800277c:	f001 fc02 	bl	8003f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002784:	2b00      	cmp	r3, #0
 8002786:	d102      	bne.n	800278e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002788:	2301      	movs	r3, #1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	e001      	b.n	8002792 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002792:	f001 fc27 	bl	8003fe4 <vPortExitCritical>

	return xReturn;
 8002796:	68fb      	ldr	r3, [r7, #12]
}
 8002798:	4618      	mov	r0, r3
 800279a:	3710      	adds	r7, #16
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027a8:	f001 fbec 	bl	8003f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d102      	bne.n	80027be <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80027b8:	2301      	movs	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e001      	b.n	80027c2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80027be:	2300      	movs	r3, #0
 80027c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027c2:	f001 fc0f 	bl	8003fe4 <vPortExitCritical>

	return xReturn;
 80027c6:	68fb      	ldr	r3, [r7, #12]
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3710      	adds	r7, #16
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bd80      	pop	{r7, pc}

080027d0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80027d0:	b480      	push	{r7}
 80027d2:	b085      	sub	sp, #20
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
 80027d8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	e014      	b.n	800280a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80027e0:	4a0f      	ldr	r2, [pc, #60]	; (8002820 <vQueueAddToRegistry+0x50>)
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10b      	bne.n	8002804 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80027ec:	490c      	ldr	r1, [pc, #48]	; (8002820 <vQueueAddToRegistry+0x50>)
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80027f6:	4a0a      	ldr	r2, [pc, #40]	; (8002820 <vQueueAddToRegistry+0x50>)
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	00db      	lsls	r3, r3, #3
 80027fc:	4413      	add	r3, r2
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002802:	e006      	b.n	8002812 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3301      	adds	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b07      	cmp	r3, #7
 800280e:	d9e7      	bls.n	80027e0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002810:	bf00      	nop
 8002812:	bf00      	nop
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
 800281e:	bf00      	nop
 8002820:	2000194c 	.word	0x2000194c

08002824 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002824:	b580      	push	{r7, lr}
 8002826:	b086      	sub	sp, #24
 8002828:	af00      	add	r7, sp, #0
 800282a:	60f8      	str	r0, [r7, #12]
 800282c:	60b9      	str	r1, [r7, #8]
 800282e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002834:	f001 fba6 	bl	8003f84 <vPortEnterCritical>
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800283e:	b25b      	sxtb	r3, r3
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d103      	bne.n	800284e <vQueueWaitForMessageRestricted+0x2a>
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	2200      	movs	r2, #0
 800284a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002854:	b25b      	sxtb	r3, r3
 8002856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800285a:	d103      	bne.n	8002864 <vQueueWaitForMessageRestricted+0x40>
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002864:	f001 fbbe 	bl	8003fe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800286c:	2b00      	cmp	r3, #0
 800286e:	d106      	bne.n	800287e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	3324      	adds	r3, #36	; 0x24
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	68b9      	ldr	r1, [r7, #8]
 8002878:	4618      	mov	r0, r3
 800287a:	f000 fc3b 	bl	80030f4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800287e:	6978      	ldr	r0, [r7, #20]
 8002880:	f7ff ff26 	bl	80026d0 <prvUnlockQueue>
	}
 8002884:	bf00      	nop
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800288c:	b580      	push	{r7, lr}
 800288e:	b08e      	sub	sp, #56	; 0x38
 8002890:	af04      	add	r7, sp, #16
 8002892:	60f8      	str	r0, [r7, #12]
 8002894:	60b9      	str	r1, [r7, #8]
 8002896:	607a      	str	r2, [r7, #4]
 8002898:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800289a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800289c:	2b00      	cmp	r3, #0
 800289e:	d10a      	bne.n	80028b6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80028a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028a4:	f383 8811 	msr	BASEPRI, r3
 80028a8:	f3bf 8f6f 	isb	sy
 80028ac:	f3bf 8f4f 	dsb	sy
 80028b0:	623b      	str	r3, [r7, #32]
}
 80028b2:	bf00      	nop
 80028b4:	e7fe      	b.n	80028b4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80028b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d10a      	bne.n	80028d2 <xTaskCreateStatic+0x46>
	__asm volatile
 80028bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c0:	f383 8811 	msr	BASEPRI, r3
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	f3bf 8f4f 	dsb	sy
 80028cc:	61fb      	str	r3, [r7, #28]
}
 80028ce:	bf00      	nop
 80028d0:	e7fe      	b.n	80028d0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80028d2:	235c      	movs	r3, #92	; 0x5c
 80028d4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	2b5c      	cmp	r3, #92	; 0x5c
 80028da:	d00a      	beq.n	80028f2 <xTaskCreateStatic+0x66>
	__asm volatile
 80028dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028e0:	f383 8811 	msr	BASEPRI, r3
 80028e4:	f3bf 8f6f 	isb	sy
 80028e8:	f3bf 8f4f 	dsb	sy
 80028ec:	61bb      	str	r3, [r7, #24]
}
 80028ee:	bf00      	nop
 80028f0:	e7fe      	b.n	80028f0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80028f2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80028f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d01e      	beq.n	8002938 <xTaskCreateStatic+0xac>
 80028fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d01b      	beq.n	8002938 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002900:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002902:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002906:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002908:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800290a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800290c:	2202      	movs	r2, #2
 800290e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002912:	2300      	movs	r3, #0
 8002914:	9303      	str	r3, [sp, #12]
 8002916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002918:	9302      	str	r3, [sp, #8]
 800291a:	f107 0314 	add.w	r3, r7, #20
 800291e:	9301      	str	r3, [sp, #4]
 8002920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002922:	9300      	str	r3, [sp, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	68b9      	ldr	r1, [r7, #8]
 800292a:	68f8      	ldr	r0, [r7, #12]
 800292c:	f000 f850 	bl	80029d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002930:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002932:	f000 f8dd 	bl	8002af0 <prvAddNewTaskToReadyList>
 8002936:	e001      	b.n	800293c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800293c:	697b      	ldr	r3, [r7, #20]
	}
 800293e:	4618      	mov	r0, r3
 8002940:	3728      	adds	r7, #40	; 0x28
 8002942:	46bd      	mov	sp, r7
 8002944:	bd80      	pop	{r7, pc}

08002946 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002946:	b580      	push	{r7, lr}
 8002948:	b08c      	sub	sp, #48	; 0x30
 800294a:	af04      	add	r7, sp, #16
 800294c:	60f8      	str	r0, [r7, #12]
 800294e:	60b9      	str	r1, [r7, #8]
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	4613      	mov	r3, r2
 8002954:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002956:	88fb      	ldrh	r3, [r7, #6]
 8002958:	009b      	lsls	r3, r3, #2
 800295a:	4618      	mov	r0, r3
 800295c:	f001 fc34 	bl	80041c8 <pvPortMalloc>
 8002960:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d00e      	beq.n	8002986 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002968:	205c      	movs	r0, #92	; 0x5c
 800296a:	f001 fc2d 	bl	80041c8 <pvPortMalloc>
 800296e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002976:	69fb      	ldr	r3, [r7, #28]
 8002978:	697a      	ldr	r2, [r7, #20]
 800297a:	631a      	str	r2, [r3, #48]	; 0x30
 800297c:	e005      	b.n	800298a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800297e:	6978      	ldr	r0, [r7, #20]
 8002980:	f001 fcee 	bl	8004360 <vPortFree>
 8002984:	e001      	b.n	800298a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002986:	2300      	movs	r3, #0
 8002988:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d017      	beq.n	80029c0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002990:	69fb      	ldr	r3, [r7, #28]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002998:	88fa      	ldrh	r2, [r7, #6]
 800299a:	2300      	movs	r3, #0
 800299c:	9303      	str	r3, [sp, #12]
 800299e:	69fb      	ldr	r3, [r7, #28]
 80029a0:	9302      	str	r3, [sp, #8]
 80029a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029a4:	9301      	str	r3, [sp, #4]
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	68b9      	ldr	r1, [r7, #8]
 80029ae:	68f8      	ldr	r0, [r7, #12]
 80029b0:	f000 f80e 	bl	80029d0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80029b4:	69f8      	ldr	r0, [r7, #28]
 80029b6:	f000 f89b 	bl	8002af0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80029ba:	2301      	movs	r3, #1
 80029bc:	61bb      	str	r3, [r7, #24]
 80029be:	e002      	b.n	80029c6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80029c0:	f04f 33ff 	mov.w	r3, #4294967295
 80029c4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80029c6:	69bb      	ldr	r3, [r7, #24]
	}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3720      	adds	r7, #32
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd80      	pop	{r7, pc}

080029d0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b088      	sub	sp, #32
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	60f8      	str	r0, [r7, #12]
 80029d8:	60b9      	str	r1, [r7, #8]
 80029da:	607a      	str	r2, [r7, #4]
 80029dc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80029de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029e0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	461a      	mov	r2, r3
 80029e8:	21a5      	movs	r1, #165	; 0xa5
 80029ea:	f001 fe09 	bl	8004600 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80029ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80029f8:	3b01      	subs	r3, #1
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	4413      	add	r3, r2
 80029fe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f023 0307 	bic.w	r3, r3, #7
 8002a06:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d00a      	beq.n	8002a28 <prvInitialiseNewTask+0x58>
	__asm volatile
 8002a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a16:	f383 8811 	msr	BASEPRI, r3
 8002a1a:	f3bf 8f6f 	isb	sy
 8002a1e:	f3bf 8f4f 	dsb	sy
 8002a22:	617b      	str	r3, [r7, #20]
}
 8002a24:	bf00      	nop
 8002a26:	e7fe      	b.n	8002a26 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d01f      	beq.n	8002a6e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e012      	b.n	8002a5a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a34:	68ba      	ldr	r2, [r7, #8]
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	4413      	add	r3, r2
 8002a3a:	7819      	ldrb	r1, [r3, #0]
 8002a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	4413      	add	r3, r2
 8002a42:	3334      	adds	r3, #52	; 0x34
 8002a44:	460a      	mov	r2, r1
 8002a46:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a48:	68ba      	ldr	r2, [r7, #8]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	4413      	add	r3, r2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d006      	beq.n	8002a62 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	3301      	adds	r3, #1
 8002a58:	61fb      	str	r3, [r7, #28]
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	2b0f      	cmp	r3, #15
 8002a5e:	d9e9      	bls.n	8002a34 <prvInitialiseNewTask+0x64>
 8002a60:	e000      	b.n	8002a64 <prvInitialiseNewTask+0x94>
			{
				break;
 8002a62:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	2200      	movs	r2, #0
 8002a68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a6c:	e003      	b.n	8002a76 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002a76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a78:	2b37      	cmp	r3, #55	; 0x37
 8002a7a:	d901      	bls.n	8002a80 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002a7c:	2337      	movs	r3, #55	; 0x37
 8002a7e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002a80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a84:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a8a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a8e:	2200      	movs	r2, #0
 8002a90:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	3304      	adds	r3, #4
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7ff f978 	bl	8001d8c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a9e:	3318      	adds	r3, #24
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff f973 	bl	8001d8c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aaa:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aae:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ab8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002aba:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	2200      	movs	r2, #0
 8002ac0:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002aca:	683a      	ldr	r2, [r7, #0]
 8002acc:	68f9      	ldr	r1, [r7, #12]
 8002ace:	69b8      	ldr	r0, [r7, #24]
 8002ad0:	f001 f928 	bl	8003d24 <pxPortInitialiseStack>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d002      	beq.n	8002ae6 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002ae4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ae6:	bf00      	nop
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
	...

08002af0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002af8:	f001 fa44 	bl	8003f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <prvAddNewTaskToReadyList+0xc4>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	4a2c      	ldr	r2, [pc, #176]	; (8002bb4 <prvAddNewTaskToReadyList+0xc4>)
 8002b04:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b06:	4b2c      	ldr	r3, [pc, #176]	; (8002bb8 <prvAddNewTaskToReadyList+0xc8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d109      	bne.n	8002b22 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b0e:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <prvAddNewTaskToReadyList+0xc8>)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b14:	4b27      	ldr	r3, [pc, #156]	; (8002bb4 <prvAddNewTaskToReadyList+0xc4>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d110      	bne.n	8002b3e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b1c:	f000 fc16 	bl	800334c <prvInitialiseTaskLists>
 8002b20:	e00d      	b.n	8002b3e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002b22:	4b26      	ldr	r3, [pc, #152]	; (8002bbc <prvAddNewTaskToReadyList+0xcc>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d109      	bne.n	8002b3e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b2a:	4b23      	ldr	r3, [pc, #140]	; (8002bb8 <prvAddNewTaskToReadyList+0xc8>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d802      	bhi.n	8002b3e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002b38:	4a1f      	ldr	r2, [pc, #124]	; (8002bb8 <prvAddNewTaskToReadyList+0xc8>)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <prvAddNewTaskToReadyList+0xd0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	3301      	adds	r3, #1
 8002b44:	4a1e      	ldr	r2, [pc, #120]	; (8002bc0 <prvAddNewTaskToReadyList+0xd0>)
 8002b46:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <prvAddNewTaskToReadyList+0xd0>)
 8002b4a:	681a      	ldr	r2, [r3, #0]
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b54:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <prvAddNewTaskToReadyList+0xd4>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d903      	bls.n	8002b64 <prvAddNewTaskToReadyList+0x74>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b60:	4a18      	ldr	r2, [pc, #96]	; (8002bc4 <prvAddNewTaskToReadyList+0xd4>)
 8002b62:	6013      	str	r3, [r2, #0]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b68:	4613      	mov	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	4413      	add	r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <prvAddNewTaskToReadyList+0xd8>)
 8002b72:	441a      	add	r2, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3304      	adds	r3, #4
 8002b78:	4619      	mov	r1, r3
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f7ff f913 	bl	8001da6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002b80:	f001 fa30 	bl	8003fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002b84:	4b0d      	ldr	r3, [pc, #52]	; (8002bbc <prvAddNewTaskToReadyList+0xcc>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00e      	beq.n	8002baa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002b8c:	4b0a      	ldr	r3, [pc, #40]	; (8002bb8 <prvAddNewTaskToReadyList+0xc8>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b96:	429a      	cmp	r2, r3
 8002b98:	d207      	bcs.n	8002baa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <prvAddNewTaskToReadyList+0xdc>)
 8002b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	f3bf 8f4f 	dsb	sy
 8002ba6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002baa:	bf00      	nop
 8002bac:	3708      	adds	r7, #8
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000bbc 	.word	0x20000bbc
 8002bb8:	200006e8 	.word	0x200006e8
 8002bbc:	20000bc8 	.word	0x20000bc8
 8002bc0:	20000bd8 	.word	0x20000bd8
 8002bc4:	20000bc4 	.word	0x20000bc4
 8002bc8:	200006ec 	.word	0x200006ec
 8002bcc:	e000ed04 	.word	0xe000ed04

08002bd0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d017      	beq.n	8002c12 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8002be2:	4b13      	ldr	r3, [pc, #76]	; (8002c30 <vTaskDelay+0x60>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <vTaskDelay+0x30>
	__asm volatile
 8002bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bee:	f383 8811 	msr	BASEPRI, r3
 8002bf2:	f3bf 8f6f 	isb	sy
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	60bb      	str	r3, [r7, #8]
}
 8002bfc:	bf00      	nop
 8002bfe:	e7fe      	b.n	8002bfe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8002c00:	f000 f880 	bl	8002d04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002c04:	2100      	movs	r1, #0
 8002c06:	6878      	ldr	r0, [r7, #4]
 8002c08:	f000 fcea 	bl	80035e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8002c0c:	f000 f888 	bl	8002d20 <xTaskResumeAll>
 8002c10:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d107      	bne.n	8002c28 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <vTaskDelay+0x64>)
 8002c1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	f3bf 8f4f 	dsb	sy
 8002c24:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8002c28:	bf00      	nop
 8002c2a:	3710      	adds	r7, #16
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}
 8002c30:	20000be4 	.word	0x20000be4
 8002c34:	e000ed04 	.word	0xe000ed04

08002c38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b08a      	sub	sp, #40	; 0x28
 8002c3c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002c46:	463a      	mov	r2, r7
 8002c48:	1d39      	adds	r1, r7, #4
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7ff f848 	bl	8001ce4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002c54:	6839      	ldr	r1, [r7, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	68ba      	ldr	r2, [r7, #8]
 8002c5a:	9202      	str	r2, [sp, #8]
 8002c5c:	9301      	str	r3, [sp, #4]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	9300      	str	r3, [sp, #0]
 8002c62:	2300      	movs	r3, #0
 8002c64:	460a      	mov	r2, r1
 8002c66:	4921      	ldr	r1, [pc, #132]	; (8002cec <vTaskStartScheduler+0xb4>)
 8002c68:	4821      	ldr	r0, [pc, #132]	; (8002cf0 <vTaskStartScheduler+0xb8>)
 8002c6a:	f7ff fe0f 	bl	800288c <xTaskCreateStatic>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	4a20      	ldr	r2, [pc, #128]	; (8002cf4 <vTaskStartScheduler+0xbc>)
 8002c72:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002c74:	4b1f      	ldr	r3, [pc, #124]	; (8002cf4 <vTaskStartScheduler+0xbc>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e001      	b.n	8002c86 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002c82:	2300      	movs	r3, #0
 8002c84:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d102      	bne.n	8002c92 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002c8c:	f000 fcfc 	bl	8003688 <xTimerCreateTimerTask>
 8002c90:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d116      	bne.n	8002cc6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	613b      	str	r3, [r7, #16]
}
 8002caa:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002cac:	4b12      	ldr	r3, [pc, #72]	; (8002cf8 <vTaskStartScheduler+0xc0>)
 8002cae:	f04f 32ff 	mov.w	r2, #4294967295
 8002cb2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <vTaskStartScheduler+0xc4>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002cba:	4b11      	ldr	r3, [pc, #68]	; (8002d00 <vTaskStartScheduler+0xc8>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002cc0:	f001 f8be 	bl	8003e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002cc4:	e00e      	b.n	8002ce4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ccc:	d10a      	bne.n	8002ce4 <vTaskStartScheduler+0xac>
	__asm volatile
 8002cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cd2:	f383 8811 	msr	BASEPRI, r3
 8002cd6:	f3bf 8f6f 	isb	sy
 8002cda:	f3bf 8f4f 	dsb	sy
 8002cde:	60fb      	str	r3, [r7, #12]
}
 8002ce0:	bf00      	nop
 8002ce2:	e7fe      	b.n	8002ce2 <vTaskStartScheduler+0xaa>
}
 8002ce4:	bf00      	nop
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	08004638 	.word	0x08004638
 8002cf0:	0800331d 	.word	0x0800331d
 8002cf4:	20000be0 	.word	0x20000be0
 8002cf8:	20000bdc 	.word	0x20000bdc
 8002cfc:	20000bc8 	.word	0x20000bc8
 8002d00:	20000bc0 	.word	0x20000bc0

08002d04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002d04:	b480      	push	{r7}
 8002d06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002d08:	4b04      	ldr	r3, [pc, #16]	; (8002d1c <vTaskSuspendAll+0x18>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	4a03      	ldr	r2, [pc, #12]	; (8002d1c <vTaskSuspendAll+0x18>)
 8002d10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002d12:	bf00      	nop
 8002d14:	46bd      	mov	sp, r7
 8002d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1a:	4770      	bx	lr
 8002d1c:	20000be4 	.word	0x20000be4

08002d20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b084      	sub	sp, #16
 8002d24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002d26:	2300      	movs	r3, #0
 8002d28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002d2e:	4b42      	ldr	r3, [pc, #264]	; (8002e38 <xTaskResumeAll+0x118>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d10a      	bne.n	8002d4c <xTaskResumeAll+0x2c>
	__asm volatile
 8002d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d3a:	f383 8811 	msr	BASEPRI, r3
 8002d3e:	f3bf 8f6f 	isb	sy
 8002d42:	f3bf 8f4f 	dsb	sy
 8002d46:	603b      	str	r3, [r7, #0]
}
 8002d48:	bf00      	nop
 8002d4a:	e7fe      	b.n	8002d4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002d4c:	f001 f91a 	bl	8003f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002d50:	4b39      	ldr	r3, [pc, #228]	; (8002e38 <xTaskResumeAll+0x118>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3b01      	subs	r3, #1
 8002d56:	4a38      	ldr	r2, [pc, #224]	; (8002e38 <xTaskResumeAll+0x118>)
 8002d58:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002d5a:	4b37      	ldr	r3, [pc, #220]	; (8002e38 <xTaskResumeAll+0x118>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d162      	bne.n	8002e28 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002d62:	4b36      	ldr	r3, [pc, #216]	; (8002e3c <xTaskResumeAll+0x11c>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d05e      	beq.n	8002e28 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d6a:	e02f      	b.n	8002dcc <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002d6c:	4b34      	ldr	r3, [pc, #208]	; (8002e40 <xTaskResumeAll+0x120>)
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	68db      	ldr	r3, [r3, #12]
 8002d72:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	3318      	adds	r3, #24
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7ff f871 	bl	8001e60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	3304      	adds	r3, #4
 8002d82:	4618      	mov	r0, r3
 8002d84:	f7ff f86c 	bl	8001e60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d8c:	4b2d      	ldr	r3, [pc, #180]	; (8002e44 <xTaskResumeAll+0x124>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d903      	bls.n	8002d9c <xTaskResumeAll+0x7c>
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d98:	4a2a      	ldr	r2, [pc, #168]	; (8002e44 <xTaskResumeAll+0x124>)
 8002d9a:	6013      	str	r3, [r2, #0]
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da0:	4613      	mov	r3, r2
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4a27      	ldr	r2, [pc, #156]	; (8002e48 <xTaskResumeAll+0x128>)
 8002daa:	441a      	add	r2, r3
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	3304      	adds	r3, #4
 8002db0:	4619      	mov	r1, r3
 8002db2:	4610      	mov	r0, r2
 8002db4:	f7fe fff7 	bl	8001da6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dbc:	4b23      	ldr	r3, [pc, #140]	; (8002e4c <xTaskResumeAll+0x12c>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d302      	bcc.n	8002dcc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <xTaskResumeAll+0x130>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002dcc:	4b1c      	ldr	r3, [pc, #112]	; (8002e40 <xTaskResumeAll+0x120>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d1cb      	bne.n	8002d6c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d001      	beq.n	8002dde <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002dda:	f000 fb55 	bl	8003488 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <xTaskResumeAll+0x134>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d010      	beq.n	8002e0c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002dea:	f000 f847 	bl	8002e7c <xTaskIncrementTick>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d002      	beq.n	8002dfa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002df4:	4b16      	ldr	r3, [pc, #88]	; (8002e50 <xTaskResumeAll+0x130>)
 8002df6:	2201      	movs	r2, #1
 8002df8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f1      	bne.n	8002dea <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002e06:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <xTaskResumeAll+0x134>)
 8002e08:	2200      	movs	r2, #0
 8002e0a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002e0c:	4b10      	ldr	r3, [pc, #64]	; (8002e50 <xTaskResumeAll+0x130>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002e14:	2301      	movs	r3, #1
 8002e16:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002e18:	4b0f      	ldr	r3, [pc, #60]	; (8002e58 <xTaskResumeAll+0x138>)
 8002e1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e1e:	601a      	str	r2, [r3, #0]
 8002e20:	f3bf 8f4f 	dsb	sy
 8002e24:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002e28:	f001 f8dc 	bl	8003fe4 <vPortExitCritical>

	return xAlreadyYielded;
 8002e2c:	68bb      	ldr	r3, [r7, #8]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3710      	adds	r7, #16
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	20000be4 	.word	0x20000be4
 8002e3c:	20000bbc 	.word	0x20000bbc
 8002e40:	20000b7c 	.word	0x20000b7c
 8002e44:	20000bc4 	.word	0x20000bc4
 8002e48:	200006ec 	.word	0x200006ec
 8002e4c:	200006e8 	.word	0x200006e8
 8002e50:	20000bd0 	.word	0x20000bd0
 8002e54:	20000bcc 	.word	0x20000bcc
 8002e58:	e000ed04 	.word	0xe000ed04

08002e5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002e62:	4b05      	ldr	r3, [pc, #20]	; (8002e78 <xTaskGetTickCount+0x1c>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8002e68:	687b      	ldr	r3, [r7, #4]
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	370c      	adds	r7, #12
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	20000bc0 	.word	0x20000bc0

08002e7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8002e82:	2300      	movs	r3, #0
 8002e84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e86:	4b4f      	ldr	r3, [pc, #316]	; (8002fc4 <xTaskIncrementTick+0x148>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f040 808f 	bne.w	8002fae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e90:	4b4d      	ldr	r3, [pc, #308]	; (8002fc8 <xTaskIncrementTick+0x14c>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3301      	adds	r3, #1
 8002e96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002e98:	4a4b      	ldr	r2, [pc, #300]	; (8002fc8 <xTaskIncrementTick+0x14c>)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d120      	bne.n	8002ee6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8002ea4:	4b49      	ldr	r3, [pc, #292]	; (8002fcc <xTaskIncrementTick+0x150>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00a      	beq.n	8002ec4 <xTaskIncrementTick+0x48>
	__asm volatile
 8002eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb2:	f383 8811 	msr	BASEPRI, r3
 8002eb6:	f3bf 8f6f 	isb	sy
 8002eba:	f3bf 8f4f 	dsb	sy
 8002ebe:	603b      	str	r3, [r7, #0]
}
 8002ec0:	bf00      	nop
 8002ec2:	e7fe      	b.n	8002ec2 <xTaskIncrementTick+0x46>
 8002ec4:	4b41      	ldr	r3, [pc, #260]	; (8002fcc <xTaskIncrementTick+0x150>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	60fb      	str	r3, [r7, #12]
 8002eca:	4b41      	ldr	r3, [pc, #260]	; (8002fd0 <xTaskIncrementTick+0x154>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4a3f      	ldr	r2, [pc, #252]	; (8002fcc <xTaskIncrementTick+0x150>)
 8002ed0:	6013      	str	r3, [r2, #0]
 8002ed2:	4a3f      	ldr	r2, [pc, #252]	; (8002fd0 <xTaskIncrementTick+0x154>)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6013      	str	r3, [r2, #0]
 8002ed8:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <xTaskIncrementTick+0x158>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	3301      	adds	r3, #1
 8002ede:	4a3d      	ldr	r2, [pc, #244]	; (8002fd4 <xTaskIncrementTick+0x158>)
 8002ee0:	6013      	str	r3, [r2, #0]
 8002ee2:	f000 fad1 	bl	8003488 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8002ee6:	4b3c      	ldr	r3, [pc, #240]	; (8002fd8 <xTaskIncrementTick+0x15c>)
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	693a      	ldr	r2, [r7, #16]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d349      	bcc.n	8002f84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002ef0:	4b36      	ldr	r3, [pc, #216]	; (8002fcc <xTaskIncrementTick+0x150>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d104      	bne.n	8002f04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002efa:	4b37      	ldr	r3, [pc, #220]	; (8002fd8 <xTaskIncrementTick+0x15c>)
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	601a      	str	r2, [r3, #0]
					break;
 8002f02:	e03f      	b.n	8002f84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f04:	4b31      	ldr	r3, [pc, #196]	; (8002fcc <xTaskIncrementTick+0x150>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8002f14:	693a      	ldr	r2, [r7, #16]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d203      	bcs.n	8002f24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002f1c:	4a2e      	ldr	r2, [pc, #184]	; (8002fd8 <xTaskIncrementTick+0x15c>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8002f22:	e02f      	b.n	8002f84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	3304      	adds	r3, #4
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f7fe ff99 	bl	8001e60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d004      	beq.n	8002f40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3318      	adds	r3, #24
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f7fe ff90 	bl	8001e60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f44:	4b25      	ldr	r3, [pc, #148]	; (8002fdc <xTaskIncrementTick+0x160>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	429a      	cmp	r2, r3
 8002f4a:	d903      	bls.n	8002f54 <xTaskIncrementTick+0xd8>
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f50:	4a22      	ldr	r2, [pc, #136]	; (8002fdc <xTaskIncrementTick+0x160>)
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	4613      	mov	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	4413      	add	r3, r2
 8002f5e:	009b      	lsls	r3, r3, #2
 8002f60:	4a1f      	ldr	r2, [pc, #124]	; (8002fe0 <xTaskIncrementTick+0x164>)
 8002f62:	441a      	add	r2, r3
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	3304      	adds	r3, #4
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4610      	mov	r0, r2
 8002f6c:	f7fe ff1b 	bl	8001da6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f74:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <xTaskIncrementTick+0x168>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d3b8      	bcc.n	8002ef0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002f82:	e7b5      	b.n	8002ef0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002f84:	4b17      	ldr	r3, [pc, #92]	; (8002fe4 <xTaskIncrementTick+0x168>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f8a:	4915      	ldr	r1, [pc, #84]	; (8002fe0 <xTaskIncrementTick+0x164>)
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	009b      	lsls	r3, r3, #2
 8002f90:	4413      	add	r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d901      	bls.n	8002fa0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002fa0:	4b11      	ldr	r3, [pc, #68]	; (8002fe8 <xTaskIncrementTick+0x16c>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d007      	beq.n	8002fb8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	617b      	str	r3, [r7, #20]
 8002fac:	e004      	b.n	8002fb8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002fae:	4b0f      	ldr	r3, [pc, #60]	; (8002fec <xTaskIncrementTick+0x170>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	4a0d      	ldr	r2, [pc, #52]	; (8002fec <xTaskIncrementTick+0x170>)
 8002fb6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8002fb8:	697b      	ldr	r3, [r7, #20]
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	20000be4 	.word	0x20000be4
 8002fc8:	20000bc0 	.word	0x20000bc0
 8002fcc:	20000b74 	.word	0x20000b74
 8002fd0:	20000b78 	.word	0x20000b78
 8002fd4:	20000bd4 	.word	0x20000bd4
 8002fd8:	20000bdc 	.word	0x20000bdc
 8002fdc:	20000bc4 	.word	0x20000bc4
 8002fe0:	200006ec 	.word	0x200006ec
 8002fe4:	200006e8 	.word	0x200006e8
 8002fe8:	20000bd0 	.word	0x20000bd0
 8002fec:	20000bcc 	.word	0x20000bcc

08002ff0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002ff6:	4b28      	ldr	r3, [pc, #160]	; (8003098 <vTaskSwitchContext+0xa8>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002ffe:	4b27      	ldr	r3, [pc, #156]	; (800309c <vTaskSwitchContext+0xac>)
 8003000:	2201      	movs	r2, #1
 8003002:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003004:	e041      	b.n	800308a <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8003006:	4b25      	ldr	r3, [pc, #148]	; (800309c <vTaskSwitchContext+0xac>)
 8003008:	2200      	movs	r2, #0
 800300a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800300c:	4b24      	ldr	r3, [pc, #144]	; (80030a0 <vTaskSwitchContext+0xb0>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	60fb      	str	r3, [r7, #12]
 8003012:	e010      	b.n	8003036 <vTaskSwitchContext+0x46>
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <vTaskSwitchContext+0x40>
	__asm volatile
 800301a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800301e:	f383 8811 	msr	BASEPRI, r3
 8003022:	f3bf 8f6f 	isb	sy
 8003026:	f3bf 8f4f 	dsb	sy
 800302a:	607b      	str	r3, [r7, #4]
}
 800302c:	bf00      	nop
 800302e:	e7fe      	b.n	800302e <vTaskSwitchContext+0x3e>
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	3b01      	subs	r3, #1
 8003034:	60fb      	str	r3, [r7, #12]
 8003036:	491b      	ldr	r1, [pc, #108]	; (80030a4 <vTaskSwitchContext+0xb4>)
 8003038:	68fa      	ldr	r2, [r7, #12]
 800303a:	4613      	mov	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	4413      	add	r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d0e4      	beq.n	8003014 <vTaskSwitchContext+0x24>
 800304a:	68fa      	ldr	r2, [r7, #12]
 800304c:	4613      	mov	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	4413      	add	r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	4a13      	ldr	r2, [pc, #76]	; (80030a4 <vTaskSwitchContext+0xb4>)
 8003056:	4413      	add	r3, r2
 8003058:	60bb      	str	r3, [r7, #8]
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	685a      	ldr	r2, [r3, #4]
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	605a      	str	r2, [r3, #4]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	685a      	ldr	r2, [r3, #4]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	3308      	adds	r3, #8
 800306c:	429a      	cmp	r2, r3
 800306e:	d104      	bne.n	800307a <vTaskSwitchContext+0x8a>
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	68bb      	ldr	r3, [r7, #8]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	685b      	ldr	r3, [r3, #4]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	4a09      	ldr	r2, [pc, #36]	; (80030a8 <vTaskSwitchContext+0xb8>)
 8003082:	6013      	str	r3, [r2, #0]
 8003084:	4a06      	ldr	r2, [pc, #24]	; (80030a0 <vTaskSwitchContext+0xb0>)
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6013      	str	r3, [r2, #0]
}
 800308a:	bf00      	nop
 800308c:	3714      	adds	r7, #20
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr
 8003096:	bf00      	nop
 8003098:	20000be4 	.word	0x20000be4
 800309c:	20000bd0 	.word	0x20000bd0
 80030a0:	20000bc4 	.word	0x20000bc4
 80030a4:	200006ec 	.word	0x200006ec
 80030a8:	200006e8 	.word	0x200006e8

080030ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b084      	sub	sp, #16
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
 80030b4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d10a      	bne.n	80030d2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80030bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030c0:	f383 8811 	msr	BASEPRI, r3
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	f3bf 8f4f 	dsb	sy
 80030cc:	60fb      	str	r3, [r7, #12]
}
 80030ce:	bf00      	nop
 80030d0:	e7fe      	b.n	80030d0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80030d2:	4b07      	ldr	r3, [pc, #28]	; (80030f0 <vTaskPlaceOnEventList+0x44>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	3318      	adds	r3, #24
 80030d8:	4619      	mov	r1, r3
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f7fe fe87 	bl	8001dee <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80030e0:	2101      	movs	r1, #1
 80030e2:	6838      	ldr	r0, [r7, #0]
 80030e4:	f000 fa7c 	bl	80035e0 <prvAddCurrentTaskToDelayedList>
}
 80030e8:	bf00      	nop
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	200006e8 	.word	0x200006e8

080030f4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b086      	sub	sp, #24
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d10a      	bne.n	800311c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800310a:	f383 8811 	msr	BASEPRI, r3
 800310e:	f3bf 8f6f 	isb	sy
 8003112:	f3bf 8f4f 	dsb	sy
 8003116:	617b      	str	r3, [r7, #20]
}
 8003118:	bf00      	nop
 800311a:	e7fe      	b.n	800311a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800311c:	4b0a      	ldr	r3, [pc, #40]	; (8003148 <vTaskPlaceOnEventListRestricted+0x54>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	3318      	adds	r3, #24
 8003122:	4619      	mov	r1, r3
 8003124:	68f8      	ldr	r0, [r7, #12]
 8003126:	f7fe fe3e 	bl	8001da6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003130:	f04f 33ff 	mov.w	r3, #4294967295
 8003134:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	68b8      	ldr	r0, [r7, #8]
 800313a:	f000 fa51 	bl	80035e0 <prvAddCurrentTaskToDelayedList>
	}
 800313e:	bf00      	nop
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	200006e8 	.word	0x200006e8

0800314c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10a      	bne.n	8003178 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003162:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003166:	f383 8811 	msr	BASEPRI, r3
 800316a:	f3bf 8f6f 	isb	sy
 800316e:	f3bf 8f4f 	dsb	sy
 8003172:	60fb      	str	r3, [r7, #12]
}
 8003174:	bf00      	nop
 8003176:	e7fe      	b.n	8003176 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	3318      	adds	r3, #24
 800317c:	4618      	mov	r0, r3
 800317e:	f7fe fe6f 	bl	8001e60 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003182:	4b1e      	ldr	r3, [pc, #120]	; (80031fc <xTaskRemoveFromEventList+0xb0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d11d      	bne.n	80031c6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	3304      	adds	r3, #4
 800318e:	4618      	mov	r0, r3
 8003190:	f7fe fe66 	bl	8001e60 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003198:	4b19      	ldr	r3, [pc, #100]	; (8003200 <xTaskRemoveFromEventList+0xb4>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	429a      	cmp	r2, r3
 800319e:	d903      	bls.n	80031a8 <xTaskRemoveFromEventList+0x5c>
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a4:	4a16      	ldr	r2, [pc, #88]	; (8003200 <xTaskRemoveFromEventList+0xb4>)
 80031a6:	6013      	str	r3, [r2, #0]
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ac:	4613      	mov	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4413      	add	r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	4a13      	ldr	r2, [pc, #76]	; (8003204 <xTaskRemoveFromEventList+0xb8>)
 80031b6:	441a      	add	r2, r3
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	3304      	adds	r3, #4
 80031bc:	4619      	mov	r1, r3
 80031be:	4610      	mov	r0, r2
 80031c0:	f7fe fdf1 	bl	8001da6 <vListInsertEnd>
 80031c4:	e005      	b.n	80031d2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80031c6:	693b      	ldr	r3, [r7, #16]
 80031c8:	3318      	adds	r3, #24
 80031ca:	4619      	mov	r1, r3
 80031cc:	480e      	ldr	r0, [pc, #56]	; (8003208 <xTaskRemoveFromEventList+0xbc>)
 80031ce:	f7fe fdea 	bl	8001da6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d6:	4b0d      	ldr	r3, [pc, #52]	; (800320c <xTaskRemoveFromEventList+0xc0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	429a      	cmp	r2, r3
 80031de:	d905      	bls.n	80031ec <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80031e0:	2301      	movs	r3, #1
 80031e2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80031e4:	4b0a      	ldr	r3, [pc, #40]	; (8003210 <xTaskRemoveFromEventList+0xc4>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
 80031ea:	e001      	b.n	80031f0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80031ec:	2300      	movs	r3, #0
 80031ee:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80031f0:	697b      	ldr	r3, [r7, #20]
}
 80031f2:	4618      	mov	r0, r3
 80031f4:	3718      	adds	r7, #24
 80031f6:	46bd      	mov	sp, r7
 80031f8:	bd80      	pop	{r7, pc}
 80031fa:	bf00      	nop
 80031fc:	20000be4 	.word	0x20000be4
 8003200:	20000bc4 	.word	0x20000bc4
 8003204:	200006ec 	.word	0x200006ec
 8003208:	20000b7c 	.word	0x20000b7c
 800320c:	200006e8 	.word	0x200006e8
 8003210:	20000bd0 	.word	0x20000bd0

08003214 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003214:	b480      	push	{r7}
 8003216:	b083      	sub	sp, #12
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <vTaskInternalSetTimeOutState+0x24>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003224:	4b05      	ldr	r3, [pc, #20]	; (800323c <vTaskInternalSetTimeOutState+0x28>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	605a      	str	r2, [r3, #4]
}
 800322c:	bf00      	nop
 800322e:	370c      	adds	r7, #12
 8003230:	46bd      	mov	sp, r7
 8003232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003236:	4770      	bx	lr
 8003238:	20000bd4 	.word	0x20000bd4
 800323c:	20000bc0 	.word	0x20000bc0

08003240 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d10a      	bne.n	8003266 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003254:	f383 8811 	msr	BASEPRI, r3
 8003258:	f3bf 8f6f 	isb	sy
 800325c:	f3bf 8f4f 	dsb	sy
 8003260:	613b      	str	r3, [r7, #16]
}
 8003262:	bf00      	nop
 8003264:	e7fe      	b.n	8003264 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d10a      	bne.n	8003282 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800326c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003270:	f383 8811 	msr	BASEPRI, r3
 8003274:	f3bf 8f6f 	isb	sy
 8003278:	f3bf 8f4f 	dsb	sy
 800327c:	60fb      	str	r3, [r7, #12]
}
 800327e:	bf00      	nop
 8003280:	e7fe      	b.n	8003280 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003282:	f000 fe7f 	bl	8003f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003286:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <xTaskCheckForTimeOut+0xbc>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	69ba      	ldr	r2, [r7, #24]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800329e:	d102      	bne.n	80032a6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
 80032a4:	e023      	b.n	80032ee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b15      	ldr	r3, [pc, #84]	; (8003300 <xTaskCheckForTimeOut+0xc0>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d007      	beq.n	80032c2 <xTaskCheckForTimeOut+0x82>
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	69ba      	ldr	r2, [r7, #24]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d302      	bcc.n	80032c2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80032bc:	2301      	movs	r3, #1
 80032be:	61fb      	str	r3, [r7, #28]
 80032c0:	e015      	b.n	80032ee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d20b      	bcs.n	80032e4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	1ad2      	subs	r2, r2, r3
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80032d8:	6878      	ldr	r0, [r7, #4]
 80032da:	f7ff ff9b 	bl	8003214 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
 80032e2:	e004      	b.n	80032ee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80032e4:	683b      	ldr	r3, [r7, #0]
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80032ea:	2301      	movs	r3, #1
 80032ec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80032ee:	f000 fe79 	bl	8003fe4 <vPortExitCritical>

	return xReturn;
 80032f2:	69fb      	ldr	r3, [r7, #28]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3720      	adds	r7, #32
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20000bc0 	.word	0x20000bc0
 8003300:	20000bd4 	.word	0x20000bd4

08003304 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003304:	b480      	push	{r7}
 8003306:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003308:	4b03      	ldr	r3, [pc, #12]	; (8003318 <vTaskMissedYield+0x14>)
 800330a:	2201      	movs	r2, #1
 800330c:	601a      	str	r2, [r3, #0]
}
 800330e:	bf00      	nop
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	20000bd0 	.word	0x20000bd0

0800331c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b082      	sub	sp, #8
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003324:	f000 f852 	bl	80033cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003328:	4b06      	ldr	r3, [pc, #24]	; (8003344 <prvIdleTask+0x28>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d9f9      	bls.n	8003324 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003330:	4b05      	ldr	r3, [pc, #20]	; (8003348 <prvIdleTask+0x2c>)
 8003332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003336:	601a      	str	r2, [r3, #0]
 8003338:	f3bf 8f4f 	dsb	sy
 800333c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003340:	e7f0      	b.n	8003324 <prvIdleTask+0x8>
 8003342:	bf00      	nop
 8003344:	200006ec 	.word	0x200006ec
 8003348:	e000ed04 	.word	0xe000ed04

0800334c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003352:	2300      	movs	r3, #0
 8003354:	607b      	str	r3, [r7, #4]
 8003356:	e00c      	b.n	8003372 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	4613      	mov	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4413      	add	r3, r2
 8003360:	009b      	lsls	r3, r3, #2
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <prvInitialiseTaskLists+0x60>)
 8003364:	4413      	add	r3, r2
 8003366:	4618      	mov	r0, r3
 8003368:	f7fe fcf0 	bl	8001d4c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	3301      	adds	r3, #1
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2b37      	cmp	r3, #55	; 0x37
 8003376:	d9ef      	bls.n	8003358 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003378:	480d      	ldr	r0, [pc, #52]	; (80033b0 <prvInitialiseTaskLists+0x64>)
 800337a:	f7fe fce7 	bl	8001d4c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800337e:	480d      	ldr	r0, [pc, #52]	; (80033b4 <prvInitialiseTaskLists+0x68>)
 8003380:	f7fe fce4 	bl	8001d4c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003384:	480c      	ldr	r0, [pc, #48]	; (80033b8 <prvInitialiseTaskLists+0x6c>)
 8003386:	f7fe fce1 	bl	8001d4c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800338a:	480c      	ldr	r0, [pc, #48]	; (80033bc <prvInitialiseTaskLists+0x70>)
 800338c:	f7fe fcde 	bl	8001d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003390:	480b      	ldr	r0, [pc, #44]	; (80033c0 <prvInitialiseTaskLists+0x74>)
 8003392:	f7fe fcdb 	bl	8001d4c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003396:	4b0b      	ldr	r3, [pc, #44]	; (80033c4 <prvInitialiseTaskLists+0x78>)
 8003398:	4a05      	ldr	r2, [pc, #20]	; (80033b0 <prvInitialiseTaskLists+0x64>)
 800339a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800339c:	4b0a      	ldr	r3, [pc, #40]	; (80033c8 <prvInitialiseTaskLists+0x7c>)
 800339e:	4a05      	ldr	r2, [pc, #20]	; (80033b4 <prvInitialiseTaskLists+0x68>)
 80033a0:	601a      	str	r2, [r3, #0]
}
 80033a2:	bf00      	nop
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	200006ec 	.word	0x200006ec
 80033b0:	20000b4c 	.word	0x20000b4c
 80033b4:	20000b60 	.word	0x20000b60
 80033b8:	20000b7c 	.word	0x20000b7c
 80033bc:	20000b90 	.word	0x20000b90
 80033c0:	20000ba8 	.word	0x20000ba8
 80033c4:	20000b74 	.word	0x20000b74
 80033c8:	20000b78 	.word	0x20000b78

080033cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80033cc:	b580      	push	{r7, lr}
 80033ce:	b082      	sub	sp, #8
 80033d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80033d2:	e019      	b.n	8003408 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80033d4:	f000 fdd6 	bl	8003f84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033d8:	4b10      	ldr	r3, [pc, #64]	; (800341c <prvCheckTasksWaitingTermination+0x50>)
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3304      	adds	r3, #4
 80033e4:	4618      	mov	r0, r3
 80033e6:	f7fe fd3b 	bl	8001e60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80033ea:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <prvCheckTasksWaitingTermination+0x54>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	3b01      	subs	r3, #1
 80033f0:	4a0b      	ldr	r2, [pc, #44]	; (8003420 <prvCheckTasksWaitingTermination+0x54>)
 80033f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80033f4:	4b0b      	ldr	r3, [pc, #44]	; (8003424 <prvCheckTasksWaitingTermination+0x58>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <prvCheckTasksWaitingTermination+0x58>)
 80033fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80033fe:	f000 fdf1 	bl	8003fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f810 	bl	8003428 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003408:	4b06      	ldr	r3, [pc, #24]	; (8003424 <prvCheckTasksWaitingTermination+0x58>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e1      	bne.n	80033d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003410:	bf00      	nop
 8003412:	bf00      	nop
 8003414:	3708      	adds	r7, #8
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000b90 	.word	0x20000b90
 8003420:	20000bbc 	.word	0x20000bbc
 8003424:	20000ba4 	.word	0x20000ba4

08003428 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003436:	2b00      	cmp	r3, #0
 8003438:	d108      	bne.n	800344c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4618      	mov	r0, r3
 8003440:	f000 ff8e 	bl	8004360 <vPortFree>
				vPortFree( pxTCB );
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 ff8b 	bl	8004360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800344a:	e018      	b.n	800347e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003452:	2b01      	cmp	r3, #1
 8003454:	d103      	bne.n	800345e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 ff82 	bl	8004360 <vPortFree>
	}
 800345c:	e00f      	b.n	800347e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003464:	2b02      	cmp	r3, #2
 8003466:	d00a      	beq.n	800347e <prvDeleteTCB+0x56>
	__asm volatile
 8003468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800346c:	f383 8811 	msr	BASEPRI, r3
 8003470:	f3bf 8f6f 	isb	sy
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	60fb      	str	r3, [r7, #12]
}
 800347a:	bf00      	nop
 800347c:	e7fe      	b.n	800347c <prvDeleteTCB+0x54>
	}
 800347e:	bf00      	nop
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
	...

08003488 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003488:	b480      	push	{r7}
 800348a:	b083      	sub	sp, #12
 800348c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800348e:	4b0c      	ldr	r3, [pc, #48]	; (80034c0 <prvResetNextTaskUnblockTime+0x38>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d104      	bne.n	80034a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003498:	4b0a      	ldr	r3, [pc, #40]	; (80034c4 <prvResetNextTaskUnblockTime+0x3c>)
 800349a:	f04f 32ff 	mov.w	r2, #4294967295
 800349e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80034a0:	e008      	b.n	80034b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80034a2:	4b07      	ldr	r3, [pc, #28]	; (80034c0 <prvResetNextTaskUnblockTime+0x38>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68db      	ldr	r3, [r3, #12]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	685b      	ldr	r3, [r3, #4]
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <prvResetNextTaskUnblockTime+0x3c>)
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	370c      	adds	r7, #12
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	20000b74 	.word	0x20000b74
 80034c4:	20000bdc 	.word	0x20000bdc

080034c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80034c8:	b480      	push	{r7}
 80034ca:	b083      	sub	sp, #12
 80034cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80034ce:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <xTaskGetSchedulerState+0x34>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80034d6:	2301      	movs	r3, #1
 80034d8:	607b      	str	r3, [r7, #4]
 80034da:	e008      	b.n	80034ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034dc:	4b08      	ldr	r3, [pc, #32]	; (8003500 <xTaskGetSchedulerState+0x38>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d102      	bne.n	80034ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80034e4:	2302      	movs	r3, #2
 80034e6:	607b      	str	r3, [r7, #4]
 80034e8:	e001      	b.n	80034ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80034ea:	2300      	movs	r3, #0
 80034ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80034ee:	687b      	ldr	r3, [r7, #4]
	}
 80034f0:	4618      	mov	r0, r3
 80034f2:	370c      	adds	r7, #12
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr
 80034fc:	20000bc8 	.word	0x20000bc8
 8003500:	20000be4 	.word	0x20000be4

08003504 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003504:	b580      	push	{r7, lr}
 8003506:	b086      	sub	sp, #24
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003510:	2300      	movs	r3, #0
 8003512:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d056      	beq.n	80035c8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800351a:	4b2e      	ldr	r3, [pc, #184]	; (80035d4 <xTaskPriorityDisinherit+0xd0>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	429a      	cmp	r2, r3
 8003522:	d00a      	beq.n	800353a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003524:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003528:	f383 8811 	msr	BASEPRI, r3
 800352c:	f3bf 8f6f 	isb	sy
 8003530:	f3bf 8f4f 	dsb	sy
 8003534:	60fb      	str	r3, [r7, #12]
}
 8003536:	bf00      	nop
 8003538:	e7fe      	b.n	8003538 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800353a:	693b      	ldr	r3, [r7, #16]
 800353c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10a      	bne.n	8003558 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003546:	f383 8811 	msr	BASEPRI, r3
 800354a:	f3bf 8f6f 	isb	sy
 800354e:	f3bf 8f4f 	dsb	sy
 8003552:	60bb      	str	r3, [r7, #8]
}
 8003554:	bf00      	nop
 8003556:	e7fe      	b.n	8003556 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800355c:	1e5a      	subs	r2, r3, #1
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800356a:	429a      	cmp	r2, r3
 800356c:	d02c      	beq.n	80035c8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003572:	2b00      	cmp	r3, #0
 8003574:	d128      	bne.n	80035c8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	3304      	adds	r3, #4
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe fc70 	bl	8001e60 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800358c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	4b0f      	ldr	r3, [pc, #60]	; (80035d8 <xTaskPriorityDisinherit+0xd4>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d903      	bls.n	80035a8 <xTaskPriorityDisinherit+0xa4>
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	4a0c      	ldr	r2, [pc, #48]	; (80035d8 <xTaskPriorityDisinherit+0xd4>)
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4a09      	ldr	r2, [pc, #36]	; (80035dc <xTaskPriorityDisinherit+0xd8>)
 80035b6:	441a      	add	r2, r3
 80035b8:	693b      	ldr	r3, [r7, #16]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f7fe fbf1 	bl	8001da6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80035c4:	2301      	movs	r3, #1
 80035c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80035c8:	697b      	ldr	r3, [r7, #20]
	}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200006e8 	.word	0x200006e8
 80035d8:	20000bc4 	.word	0x20000bc4
 80035dc:	200006ec 	.word	0x200006ec

080035e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80035ea:	4b21      	ldr	r3, [pc, #132]	; (8003670 <prvAddCurrentTaskToDelayedList+0x90>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80035f0:	4b20      	ldr	r3, [pc, #128]	; (8003674 <prvAddCurrentTaskToDelayedList+0x94>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3304      	adds	r3, #4
 80035f6:	4618      	mov	r0, r3
 80035f8:	f7fe fc32 	bl	8001e60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003602:	d10a      	bne.n	800361a <prvAddCurrentTaskToDelayedList+0x3a>
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	2b00      	cmp	r3, #0
 8003608:	d007      	beq.n	800361a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800360a:	4b1a      	ldr	r3, [pc, #104]	; (8003674 <prvAddCurrentTaskToDelayedList+0x94>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	3304      	adds	r3, #4
 8003610:	4619      	mov	r1, r3
 8003612:	4819      	ldr	r0, [pc, #100]	; (8003678 <prvAddCurrentTaskToDelayedList+0x98>)
 8003614:	f7fe fbc7 	bl	8001da6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003618:	e026      	b.n	8003668 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800361a:	68fa      	ldr	r2, [r7, #12]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4413      	add	r3, r2
 8003620:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003622:	4b14      	ldr	r3, [pc, #80]	; (8003674 <prvAddCurrentTaskToDelayedList+0x94>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	68ba      	ldr	r2, [r7, #8]
 8003628:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	429a      	cmp	r2, r3
 8003630:	d209      	bcs.n	8003646 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003632:	4b12      	ldr	r3, [pc, #72]	; (800367c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	4b0f      	ldr	r3, [pc, #60]	; (8003674 <prvAddCurrentTaskToDelayedList+0x94>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	3304      	adds	r3, #4
 800363c:	4619      	mov	r1, r3
 800363e:	4610      	mov	r0, r2
 8003640:	f7fe fbd5 	bl	8001dee <vListInsert>
}
 8003644:	e010      	b.n	8003668 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003646:	4b0e      	ldr	r3, [pc, #56]	; (8003680 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <prvAddCurrentTaskToDelayedList+0x94>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	3304      	adds	r3, #4
 8003650:	4619      	mov	r1, r3
 8003652:	4610      	mov	r0, r2
 8003654:	f7fe fbcb 	bl	8001dee <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003658:	4b0a      	ldr	r3, [pc, #40]	; (8003684 <prvAddCurrentTaskToDelayedList+0xa4>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68ba      	ldr	r2, [r7, #8]
 800365e:	429a      	cmp	r2, r3
 8003660:	d202      	bcs.n	8003668 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003662:	4a08      	ldr	r2, [pc, #32]	; (8003684 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003664:	68bb      	ldr	r3, [r7, #8]
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	3710      	adds	r7, #16
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}
 8003670:	20000bc0 	.word	0x20000bc0
 8003674:	200006e8 	.word	0x200006e8
 8003678:	20000ba8 	.word	0x20000ba8
 800367c:	20000b78 	.word	0x20000b78
 8003680:	20000b74 	.word	0x20000b74
 8003684:	20000bdc 	.word	0x20000bdc

08003688 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003688:	b580      	push	{r7, lr}
 800368a:	b08a      	sub	sp, #40	; 0x28
 800368c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800368e:	2300      	movs	r3, #0
 8003690:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003692:	f000 fb07 	bl	8003ca4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003696:	4b1c      	ldr	r3, [pc, #112]	; (8003708 <xTimerCreateTimerTask+0x80>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d021      	beq.n	80036e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800369e:	2300      	movs	r3, #0
 80036a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80036a2:	2300      	movs	r3, #0
 80036a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80036a6:	1d3a      	adds	r2, r7, #4
 80036a8:	f107 0108 	add.w	r1, r7, #8
 80036ac:	f107 030c 	add.w	r3, r7, #12
 80036b0:	4618      	mov	r0, r3
 80036b2:	f7fe fb31 	bl	8001d18 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	9202      	str	r2, [sp, #8]
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	2302      	movs	r3, #2
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	2300      	movs	r3, #0
 80036c6:	460a      	mov	r2, r1
 80036c8:	4910      	ldr	r1, [pc, #64]	; (800370c <xTimerCreateTimerTask+0x84>)
 80036ca:	4811      	ldr	r0, [pc, #68]	; (8003710 <xTimerCreateTimerTask+0x88>)
 80036cc:	f7ff f8de 	bl	800288c <xTaskCreateStatic>
 80036d0:	4603      	mov	r3, r0
 80036d2:	4a10      	ldr	r2, [pc, #64]	; (8003714 <xTimerCreateTimerTask+0x8c>)
 80036d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80036d6:	4b0f      	ldr	r3, [pc, #60]	; (8003714 <xTimerCreateTimerTask+0x8c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d001      	beq.n	80036e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80036de:	2301      	movs	r3, #1
 80036e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d10a      	bne.n	80036fe <xTimerCreateTimerTask+0x76>
	__asm volatile
 80036e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ec:	f383 8811 	msr	BASEPRI, r3
 80036f0:	f3bf 8f6f 	isb	sy
 80036f4:	f3bf 8f4f 	dsb	sy
 80036f8:	613b      	str	r3, [r7, #16]
}
 80036fa:	bf00      	nop
 80036fc:	e7fe      	b.n	80036fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80036fe:	697b      	ldr	r3, [r7, #20]
}
 8003700:	4618      	mov	r0, r3
 8003702:	3718      	adds	r7, #24
 8003704:	46bd      	mov	sp, r7
 8003706:	bd80      	pop	{r7, pc}
 8003708:	20000c18 	.word	0x20000c18
 800370c:	08004640 	.word	0x08004640
 8003710:	0800384d 	.word	0x0800384d
 8003714:	20000c1c 	.word	0x20000c1c

08003718 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b08a      	sub	sp, #40	; 0x28
 800371c:	af00      	add	r7, sp, #0
 800371e:	60f8      	str	r0, [r7, #12]
 8003720:	60b9      	str	r1, [r7, #8]
 8003722:	607a      	str	r2, [r7, #4]
 8003724:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003726:	2300      	movs	r3, #0
 8003728:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d10a      	bne.n	8003746 <xTimerGenericCommand+0x2e>
	__asm volatile
 8003730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003734:	f383 8811 	msr	BASEPRI, r3
 8003738:	f3bf 8f6f 	isb	sy
 800373c:	f3bf 8f4f 	dsb	sy
 8003740:	623b      	str	r3, [r7, #32]
}
 8003742:	bf00      	nop
 8003744:	e7fe      	b.n	8003744 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003746:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <xTimerGenericCommand+0x98>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d02a      	beq.n	80037a4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	2b05      	cmp	r3, #5
 800375e:	dc18      	bgt.n	8003792 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003760:	f7ff feb2 	bl	80034c8 <xTaskGetSchedulerState>
 8003764:	4603      	mov	r3, r0
 8003766:	2b02      	cmp	r3, #2
 8003768:	d109      	bne.n	800377e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800376a:	4b11      	ldr	r3, [pc, #68]	; (80037b0 <xTimerGenericCommand+0x98>)
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	f107 0110 	add.w	r1, r7, #16
 8003772:	2300      	movs	r3, #0
 8003774:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003776:	f7fe fca1 	bl	80020bc <xQueueGenericSend>
 800377a:	6278      	str	r0, [r7, #36]	; 0x24
 800377c:	e012      	b.n	80037a4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800377e:	4b0c      	ldr	r3, [pc, #48]	; (80037b0 <xTimerGenericCommand+0x98>)
 8003780:	6818      	ldr	r0, [r3, #0]
 8003782:	f107 0110 	add.w	r1, r7, #16
 8003786:	2300      	movs	r3, #0
 8003788:	2200      	movs	r2, #0
 800378a:	f7fe fc97 	bl	80020bc <xQueueGenericSend>
 800378e:	6278      	str	r0, [r7, #36]	; 0x24
 8003790:	e008      	b.n	80037a4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003792:	4b07      	ldr	r3, [pc, #28]	; (80037b0 <xTimerGenericCommand+0x98>)
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	f107 0110 	add.w	r1, r7, #16
 800379a:	2300      	movs	r3, #0
 800379c:	683a      	ldr	r2, [r7, #0]
 800379e:	f7fe fd8b 	bl	80022b8 <xQueueGenericSendFromISR>
 80037a2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80037a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3728      	adds	r7, #40	; 0x28
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000c18 	.word	0x20000c18

080037b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b088      	sub	sp, #32
 80037b8:	af02      	add	r7, sp, #8
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037be:	4b22      	ldr	r3, [pc, #136]	; (8003848 <prvProcessExpiredTimer+0x94>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68db      	ldr	r3, [r3, #12]
 80037c4:	68db      	ldr	r3, [r3, #12]
 80037c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80037c8:	697b      	ldr	r3, [r7, #20]
 80037ca:	3304      	adds	r3, #4
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fe fb47 	bl	8001e60 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80037d8:	f003 0304 	and.w	r3, r3, #4
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d022      	beq.n	8003826 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	699a      	ldr	r2, [r3, #24]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	18d1      	adds	r1, r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	6978      	ldr	r0, [r7, #20]
 80037ee:	f000 f8d1 	bl	8003994 <prvInsertTimerInActiveList>
 80037f2:	4603      	mov	r3, r0
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01f      	beq.n	8003838 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80037f8:	2300      	movs	r3, #0
 80037fa:	9300      	str	r3, [sp, #0]
 80037fc:	2300      	movs	r3, #0
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	2100      	movs	r1, #0
 8003802:	6978      	ldr	r0, [r7, #20]
 8003804:	f7ff ff88 	bl	8003718 <xTimerGenericCommand>
 8003808:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d113      	bne.n	8003838 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8003810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003814:	f383 8811 	msr	BASEPRI, r3
 8003818:	f3bf 8f6f 	isb	sy
 800381c:	f3bf 8f4f 	dsb	sy
 8003820:	60fb      	str	r3, [r7, #12]
}
 8003822:	bf00      	nop
 8003824:	e7fe      	b.n	8003824 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800382c:	f023 0301 	bic.w	r3, r3, #1
 8003830:	b2da      	uxtb	r2, r3
 8003832:	697b      	ldr	r3, [r7, #20]
 8003834:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	6978      	ldr	r0, [r7, #20]
 800383e:	4798      	blx	r3
}
 8003840:	bf00      	nop
 8003842:	3718      	adds	r7, #24
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000c10 	.word	0x20000c10

0800384c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003854:	f107 0308 	add.w	r3, r7, #8
 8003858:	4618      	mov	r0, r3
 800385a:	f000 f857 	bl	800390c <prvGetNextExpireTime>
 800385e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4619      	mov	r1, r3
 8003864:	68f8      	ldr	r0, [r7, #12]
 8003866:	f000 f803 	bl	8003870 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800386a:	f000 f8d5 	bl	8003a18 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800386e:	e7f1      	b.n	8003854 <prvTimerTask+0x8>

08003870 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800387a:	f7ff fa43 	bl	8002d04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800387e:	f107 0308 	add.w	r3, r7, #8
 8003882:	4618      	mov	r0, r3
 8003884:	f000 f866 	bl	8003954 <prvSampleTimeNow>
 8003888:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d130      	bne.n	80038f2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d10a      	bne.n	80038ac <prvProcessTimerOrBlockTask+0x3c>
 8003896:	687a      	ldr	r2, [r7, #4]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	429a      	cmp	r2, r3
 800389c:	d806      	bhi.n	80038ac <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800389e:	f7ff fa3f 	bl	8002d20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80038a2:	68f9      	ldr	r1, [r7, #12]
 80038a4:	6878      	ldr	r0, [r7, #4]
 80038a6:	f7ff ff85 	bl	80037b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80038aa:	e024      	b.n	80038f6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d008      	beq.n	80038c4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038b2:	4b13      	ldr	r3, [pc, #76]	; (8003900 <prvProcessTimerOrBlockTask+0x90>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d101      	bne.n	80038c0 <prvProcessTimerOrBlockTask+0x50>
 80038bc:	2301      	movs	r3, #1
 80038be:	e000      	b.n	80038c2 <prvProcessTimerOrBlockTask+0x52>
 80038c0:	2300      	movs	r3, #0
 80038c2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80038c4:	4b0f      	ldr	r3, [pc, #60]	; (8003904 <prvProcessTimerOrBlockTask+0x94>)
 80038c6:	6818      	ldr	r0, [r3, #0]
 80038c8:	687a      	ldr	r2, [r7, #4]
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	1ad3      	subs	r3, r2, r3
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	4619      	mov	r1, r3
 80038d2:	f7fe ffa7 	bl	8002824 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80038d6:	f7ff fa23 	bl	8002d20 <xTaskResumeAll>
 80038da:	4603      	mov	r3, r0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80038e0:	4b09      	ldr	r3, [pc, #36]	; (8003908 <prvProcessTimerOrBlockTask+0x98>)
 80038e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038e6:	601a      	str	r2, [r3, #0]
 80038e8:	f3bf 8f4f 	dsb	sy
 80038ec:	f3bf 8f6f 	isb	sy
}
 80038f0:	e001      	b.n	80038f6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80038f2:	f7ff fa15 	bl	8002d20 <xTaskResumeAll>
}
 80038f6:	bf00      	nop
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	20000c14 	.word	0x20000c14
 8003904:	20000c18 	.word	0x20000c18
 8003908:	e000ed04 	.word	0xe000ed04

0800390c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003914:	4b0e      	ldr	r3, [pc, #56]	; (8003950 <prvGetNextExpireTime+0x44>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <prvGetNextExpireTime+0x16>
 800391e:	2201      	movs	r2, #1
 8003920:	e000      	b.n	8003924 <prvGetNextExpireTime+0x18>
 8003922:	2200      	movs	r2, #0
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d105      	bne.n	800393c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003930:	4b07      	ldr	r3, [pc, #28]	; (8003950 <prvGetNextExpireTime+0x44>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	60fb      	str	r3, [r7, #12]
 800393a:	e001      	b.n	8003940 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800393c:	2300      	movs	r3, #0
 800393e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003940:	68fb      	ldr	r3, [r7, #12]
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	20000c10 	.word	0x20000c10

08003954 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b084      	sub	sp, #16
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800395c:	f7ff fa7e 	bl	8002e5c <xTaskGetTickCount>
 8003960:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003962:	4b0b      	ldr	r3, [pc, #44]	; (8003990 <prvSampleTimeNow+0x3c>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	429a      	cmp	r2, r3
 800396a:	d205      	bcs.n	8003978 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800396c:	f000 f936 	bl	8003bdc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	601a      	str	r2, [r3, #0]
 8003976:	e002      	b.n	800397e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800397e:	4a04      	ldr	r2, [pc, #16]	; (8003990 <prvSampleTimeNow+0x3c>)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003984:	68fb      	ldr	r3, [r7, #12]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	20000c20 	.word	0x20000c20

08003994 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b086      	sub	sp, #24
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
 80039a0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80039a2:	2300      	movs	r3, #0
 80039a4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	68ba      	ldr	r2, [r7, #8]
 80039aa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	68fa      	ldr	r2, [r7, #12]
 80039b0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	429a      	cmp	r2, r3
 80039b8:	d812      	bhi.n	80039e0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ba:	687a      	ldr	r2, [r7, #4]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	1ad2      	subs	r2, r2, r3
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d302      	bcc.n	80039ce <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80039c8:	2301      	movs	r3, #1
 80039ca:	617b      	str	r3, [r7, #20]
 80039cc:	e01b      	b.n	8003a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <prvInsertTimerInActiveList+0x7c>)
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	3304      	adds	r3, #4
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f7fe fa08 	bl	8001dee <vListInsert>
 80039de:	e012      	b.n	8003a06 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d206      	bcs.n	80039f6 <prvInsertTimerInActiveList+0x62>
 80039e8:	68ba      	ldr	r2, [r7, #8]
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d302      	bcc.n	80039f6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80039f0:	2301      	movs	r3, #1
 80039f2:	617b      	str	r3, [r7, #20]
 80039f4:	e007      	b.n	8003a06 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80039f6:	4b07      	ldr	r3, [pc, #28]	; (8003a14 <prvInsertTimerInActiveList+0x80>)
 80039f8:	681a      	ldr	r2, [r3, #0]
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3304      	adds	r3, #4
 80039fe:	4619      	mov	r1, r3
 8003a00:	4610      	mov	r0, r2
 8003a02:	f7fe f9f4 	bl	8001dee <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003a06:	697b      	ldr	r3, [r7, #20]
}
 8003a08:	4618      	mov	r0, r3
 8003a0a:	3718      	adds	r7, #24
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	20000c14 	.word	0x20000c14
 8003a14:	20000c10 	.word	0x20000c10

08003a18 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b08e      	sub	sp, #56	; 0x38
 8003a1c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a1e:	e0ca      	b.n	8003bb6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	da18      	bge.n	8003a58 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003a26:	1d3b      	adds	r3, r7, #4
 8003a28:	3304      	adds	r3, #4
 8003a2a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003a2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10a      	bne.n	8003a48 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	61fb      	str	r3, [r7, #28]
}
 8003a44:	bf00      	nop
 8003a46:	e7fe      	b.n	8003a46 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4e:	6850      	ldr	r0, [r2, #4]
 8003a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a52:	6892      	ldr	r2, [r2, #8]
 8003a54:	4611      	mov	r1, r2
 8003a56:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	f2c0 80aa 	blt.w	8003bb4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a66:	695b      	ldr	r3, [r3, #20]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d004      	beq.n	8003a76 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a6e:	3304      	adds	r3, #4
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fe f9f5 	bl	8001e60 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a76:	463b      	mov	r3, r7
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff ff6b 	bl	8003954 <prvSampleTimeNow>
 8003a7e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2b09      	cmp	r3, #9
 8003a84:	f200 8097 	bhi.w	8003bb6 <prvProcessReceivedCommands+0x19e>
 8003a88:	a201      	add	r2, pc, #4	; (adr r2, 8003a90 <prvProcessReceivedCommands+0x78>)
 8003a8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a8e:	bf00      	nop
 8003a90:	08003ab9 	.word	0x08003ab9
 8003a94:	08003ab9 	.word	0x08003ab9
 8003a98:	08003ab9 	.word	0x08003ab9
 8003a9c:	08003b2d 	.word	0x08003b2d
 8003aa0:	08003b41 	.word	0x08003b41
 8003aa4:	08003b8b 	.word	0x08003b8b
 8003aa8:	08003ab9 	.word	0x08003ab9
 8003aac:	08003ab9 	.word	0x08003ab9
 8003ab0:	08003b2d 	.word	0x08003b2d
 8003ab4:	08003b41 	.word	0x08003b41
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003ab8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aba:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	b2da      	uxtb	r2, r3
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003aca:	68ba      	ldr	r2, [r7, #8]
 8003acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ace:	699b      	ldr	r3, [r3, #24]
 8003ad0:	18d1      	adds	r1, r2, r3
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ad6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ad8:	f7ff ff5c 	bl	8003994 <prvInsertTimerInActiveList>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d069      	beq.n	8003bb6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ae4:	6a1b      	ldr	r3, [r3, #32]
 8003ae6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d05e      	beq.n	8003bb6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003af8:	68ba      	ldr	r2, [r7, #8]
 8003afa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003afc:	699b      	ldr	r3, [r3, #24]
 8003afe:	441a      	add	r2, r3
 8003b00:	2300      	movs	r3, #0
 8003b02:	9300      	str	r3, [sp, #0]
 8003b04:	2300      	movs	r3, #0
 8003b06:	2100      	movs	r1, #0
 8003b08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b0a:	f7ff fe05 	bl	8003718 <xTimerGenericCommand>
 8003b0e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003b10:	6a3b      	ldr	r3, [r7, #32]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d14f      	bne.n	8003bb6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	61bb      	str	r3, [r7, #24]
}
 8003b28:	bf00      	nop
 8003b2a:	e7fe      	b.n	8003b2a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b32:	f023 0301 	bic.w	r3, r3, #1
 8003b36:	b2da      	uxtb	r2, r3
 8003b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003b3e:	e03a      	b.n	8003bb6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b46:	f043 0301 	orr.w	r3, r3, #1
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b4e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b52:	68ba      	ldr	r2, [r7, #8]
 8003b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b56:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b5a:	699b      	ldr	r3, [r3, #24]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10a      	bne.n	8003b76 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b64:	f383 8811 	msr	BASEPRI, r3
 8003b68:	f3bf 8f6f 	isb	sy
 8003b6c:	f3bf 8f4f 	dsb	sy
 8003b70:	617b      	str	r3, [r7, #20]
}
 8003b72:	bf00      	nop
 8003b74:	e7fe      	b.n	8003b74 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b78:	699a      	ldr	r2, [r3, #24]
 8003b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b7c:	18d1      	adds	r1, r2, r3
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b84:	f7ff ff06 	bl	8003994 <prvInsertTimerInActiveList>
					break;
 8003b88:	e015      	b.n	8003bb6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d103      	bne.n	8003ba0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003b98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b9a:	f000 fbe1 	bl	8004360 <vPortFree>
 8003b9e:	e00a      	b.n	8003bb6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003ba0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ba2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ba6:	f023 0301 	bic.w	r3, r3, #1
 8003baa:	b2da      	uxtb	r2, r3
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003bb2:	e000      	b.n	8003bb6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003bb4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bb6:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <prvProcessReceivedCommands+0x1c0>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	1d39      	adds	r1, r7, #4
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe fc16 	bl	80023f0 <xQueueReceive>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	f47f af2a 	bne.w	8003a20 <prvProcessReceivedCommands+0x8>
	}
}
 8003bcc:	bf00      	nop
 8003bce:	bf00      	nop
 8003bd0:	3730      	adds	r7, #48	; 0x30
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	bd80      	pop	{r7, pc}
 8003bd6:	bf00      	nop
 8003bd8:	20000c18 	.word	0x20000c18

08003bdc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b088      	sub	sp, #32
 8003be0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003be2:	e048      	b.n	8003c76 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003be4:	4b2d      	ldr	r3, [pc, #180]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003bee:	4b2b      	ldr	r3, [pc, #172]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	68db      	ldr	r3, [r3, #12]
 8003bf6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	3304      	adds	r3, #4
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	f7fe f92f 	bl	8001e60 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6a1b      	ldr	r3, [r3, #32]
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c10:	f003 0304 	and.w	r3, r3, #4
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d02e      	beq.n	8003c76 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4413      	add	r3, r2
 8003c20:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d90e      	bls.n	8003c48 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68ba      	ldr	r2, [r7, #8]
 8003c2e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003c36:	4b19      	ldr	r3, [pc, #100]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	4619      	mov	r1, r3
 8003c40:	4610      	mov	r0, r2
 8003c42:	f7fe f8d4 	bl	8001dee <vListInsert>
 8003c46:	e016      	b.n	8003c76 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003c48:	2300      	movs	r3, #0
 8003c4a:	9300      	str	r3, [sp, #0]
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	693a      	ldr	r2, [r7, #16]
 8003c50:	2100      	movs	r1, #0
 8003c52:	68f8      	ldr	r0, [r7, #12]
 8003c54:	f7ff fd60 	bl	8003718 <xTimerGenericCommand>
 8003c58:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d10a      	bne.n	8003c76 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c64:	f383 8811 	msr	BASEPRI, r3
 8003c68:	f3bf 8f6f 	isb	sy
 8003c6c:	f3bf 8f4f 	dsb	sy
 8003c70:	603b      	str	r3, [r7, #0]
}
 8003c72:	bf00      	nop
 8003c74:	e7fe      	b.n	8003c74 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c76:	4b09      	ldr	r3, [pc, #36]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d1b1      	bne.n	8003be4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003c80:	4b06      	ldr	r3, [pc, #24]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003c86:	4b06      	ldr	r3, [pc, #24]	; (8003ca0 <prvSwitchTimerLists+0xc4>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	4a04      	ldr	r2, [pc, #16]	; (8003c9c <prvSwitchTimerLists+0xc0>)
 8003c8c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003c8e:	4a04      	ldr	r2, [pc, #16]	; (8003ca0 <prvSwitchTimerLists+0xc4>)
 8003c90:	697b      	ldr	r3, [r7, #20]
 8003c92:	6013      	str	r3, [r2, #0]
}
 8003c94:	bf00      	nop
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	20000c10 	.word	0x20000c10
 8003ca0:	20000c14 	.word	0x20000c14

08003ca4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003caa:	f000 f96b 	bl	8003f84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003cae:	4b15      	ldr	r3, [pc, #84]	; (8003d04 <prvCheckForValidListAndQueue+0x60>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d120      	bne.n	8003cf8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003cb6:	4814      	ldr	r0, [pc, #80]	; (8003d08 <prvCheckForValidListAndQueue+0x64>)
 8003cb8:	f7fe f848 	bl	8001d4c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003cbc:	4813      	ldr	r0, [pc, #76]	; (8003d0c <prvCheckForValidListAndQueue+0x68>)
 8003cbe:	f7fe f845 	bl	8001d4c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003cc2:	4b13      	ldr	r3, [pc, #76]	; (8003d10 <prvCheckForValidListAndQueue+0x6c>)
 8003cc4:	4a10      	ldr	r2, [pc, #64]	; (8003d08 <prvCheckForValidListAndQueue+0x64>)
 8003cc6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003cc8:	4b12      	ldr	r3, [pc, #72]	; (8003d14 <prvCheckForValidListAndQueue+0x70>)
 8003cca:	4a10      	ldr	r2, [pc, #64]	; (8003d0c <prvCheckForValidListAndQueue+0x68>)
 8003ccc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003cce:	2300      	movs	r3, #0
 8003cd0:	9300      	str	r3, [sp, #0]
 8003cd2:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <prvCheckForValidListAndQueue+0x74>)
 8003cd4:	4a11      	ldr	r2, [pc, #68]	; (8003d1c <prvCheckForValidListAndQueue+0x78>)
 8003cd6:	2110      	movs	r1, #16
 8003cd8:	200a      	movs	r0, #10
 8003cda:	f7fe f953 	bl	8001f84 <xQueueGenericCreateStatic>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	4a08      	ldr	r2, [pc, #32]	; (8003d04 <prvCheckForValidListAndQueue+0x60>)
 8003ce2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003ce4:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <prvCheckForValidListAndQueue+0x60>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d005      	beq.n	8003cf8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003cec:	4b05      	ldr	r3, [pc, #20]	; (8003d04 <prvCheckForValidListAndQueue+0x60>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	490b      	ldr	r1, [pc, #44]	; (8003d20 <prvCheckForValidListAndQueue+0x7c>)
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fe fd6c 	bl	80027d0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003cf8:	f000 f974 	bl	8003fe4 <vPortExitCritical>
}
 8003cfc:	bf00      	nop
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	bd80      	pop	{r7, pc}
 8003d02:	bf00      	nop
 8003d04:	20000c18 	.word	0x20000c18
 8003d08:	20000be8 	.word	0x20000be8
 8003d0c:	20000bfc 	.word	0x20000bfc
 8003d10:	20000c10 	.word	0x20000c10
 8003d14:	20000c14 	.word	0x20000c14
 8003d18:	20000cc4 	.word	0x20000cc4
 8003d1c:	20000c24 	.word	0x20000c24
 8003d20:	08004648 	.word	0x08004648

08003d24 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003d24:	b480      	push	{r7}
 8003d26:	b085      	sub	sp, #20
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	60f8      	str	r0, [r7, #12]
 8003d2c:	60b9      	str	r1, [r7, #8]
 8003d2e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	3b04      	subs	r3, #4
 8003d34:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003d3c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	3b04      	subs	r3, #4
 8003d42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003d44:	68bb      	ldr	r3, [r7, #8]
 8003d46:	f023 0201 	bic.w	r2, r3, #1
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	3b04      	subs	r3, #4
 8003d52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003d54:	4a0c      	ldr	r2, [pc, #48]	; (8003d88 <pxPortInitialiseStack+0x64>)
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3b14      	subs	r3, #20
 8003d5e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003d60:	687a      	ldr	r2, [r7, #4]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	3b04      	subs	r3, #4
 8003d6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f06f 0202 	mvn.w	r2, #2
 8003d72:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	3b20      	subs	r3, #32
 8003d78:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3714      	adds	r7, #20
 8003d80:	46bd      	mov	sp, r7
 8003d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d86:	4770      	bx	lr
 8003d88:	08003d8d 	.word	0x08003d8d

08003d8c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	b085      	sub	sp, #20
 8003d90:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003d96:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <prvTaskExitError+0x54>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d9e:	d00a      	beq.n	8003db6 <prvTaskExitError+0x2a>
	__asm volatile
 8003da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da4:	f383 8811 	msr	BASEPRI, r3
 8003da8:	f3bf 8f6f 	isb	sy
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	60fb      	str	r3, [r7, #12]
}
 8003db2:	bf00      	nop
 8003db4:	e7fe      	b.n	8003db4 <prvTaskExitError+0x28>
	__asm volatile
 8003db6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dba:	f383 8811 	msr	BASEPRI, r3
 8003dbe:	f3bf 8f6f 	isb	sy
 8003dc2:	f3bf 8f4f 	dsb	sy
 8003dc6:	60bb      	str	r3, [r7, #8]
}
 8003dc8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003dca:	bf00      	nop
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d0fc      	beq.n	8003dcc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	3714      	adds	r7, #20
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr
 8003de0:	2000000c 	.word	0x2000000c
	...

08003df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003df0:	4b07      	ldr	r3, [pc, #28]	; (8003e10 <pxCurrentTCBConst2>)
 8003df2:	6819      	ldr	r1, [r3, #0]
 8003df4:	6808      	ldr	r0, [r1, #0]
 8003df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003dfa:	f380 8809 	msr	PSP, r0
 8003dfe:	f3bf 8f6f 	isb	sy
 8003e02:	f04f 0000 	mov.w	r0, #0
 8003e06:	f380 8811 	msr	BASEPRI, r0
 8003e0a:	4770      	bx	lr
 8003e0c:	f3af 8000 	nop.w

08003e10 <pxCurrentTCBConst2>:
 8003e10:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003e14:	bf00      	nop
 8003e16:	bf00      	nop

08003e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003e18:	4808      	ldr	r0, [pc, #32]	; (8003e3c <prvPortStartFirstTask+0x24>)
 8003e1a:	6800      	ldr	r0, [r0, #0]
 8003e1c:	6800      	ldr	r0, [r0, #0]
 8003e1e:	f380 8808 	msr	MSP, r0
 8003e22:	f04f 0000 	mov.w	r0, #0
 8003e26:	f380 8814 	msr	CONTROL, r0
 8003e2a:	b662      	cpsie	i
 8003e2c:	b661      	cpsie	f
 8003e2e:	f3bf 8f4f 	dsb	sy
 8003e32:	f3bf 8f6f 	isb	sy
 8003e36:	df00      	svc	0
 8003e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003e3a:	bf00      	nop
 8003e3c:	e000ed08 	.word	0xe000ed08

08003e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b086      	sub	sp, #24
 8003e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003e46:	4b46      	ldr	r3, [pc, #280]	; (8003f60 <xPortStartScheduler+0x120>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a46      	ldr	r2, [pc, #280]	; (8003f64 <xPortStartScheduler+0x124>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d10a      	bne.n	8003e66 <xPortStartScheduler+0x26>
	__asm volatile
 8003e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e54:	f383 8811 	msr	BASEPRI, r3
 8003e58:	f3bf 8f6f 	isb	sy
 8003e5c:	f3bf 8f4f 	dsb	sy
 8003e60:	613b      	str	r3, [r7, #16]
}
 8003e62:	bf00      	nop
 8003e64:	e7fe      	b.n	8003e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e66:	4b3e      	ldr	r3, [pc, #248]	; (8003f60 <xPortStartScheduler+0x120>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a3f      	ldr	r2, [pc, #252]	; (8003f68 <xPortStartScheduler+0x128>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d10a      	bne.n	8003e86 <xPortStartScheduler+0x46>
	__asm volatile
 8003e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e74:	f383 8811 	msr	BASEPRI, r3
 8003e78:	f3bf 8f6f 	isb	sy
 8003e7c:	f3bf 8f4f 	dsb	sy
 8003e80:	60fb      	str	r3, [r7, #12]
}
 8003e82:	bf00      	nop
 8003e84:	e7fe      	b.n	8003e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e86:	4b39      	ldr	r3, [pc, #228]	; (8003f6c <xPortStartScheduler+0x12c>)
 8003e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	781b      	ldrb	r3, [r3, #0]
 8003e8e:	b2db      	uxtb	r3, r3
 8003e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e92:	697b      	ldr	r3, [r7, #20]
 8003e94:	22ff      	movs	r2, #255	; 0xff
 8003e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003ea0:	78fb      	ldrb	r3, [r7, #3]
 8003ea2:	b2db      	uxtb	r3, r3
 8003ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4b31      	ldr	r3, [pc, #196]	; (8003f70 <xPortStartScheduler+0x130>)
 8003eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003eae:	4b31      	ldr	r3, [pc, #196]	; (8003f74 <xPortStartScheduler+0x134>)
 8003eb0:	2207      	movs	r2, #7
 8003eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eb4:	e009      	b.n	8003eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8003eb6:	4b2f      	ldr	r3, [pc, #188]	; (8003f74 <xPortStartScheduler+0x134>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	4a2d      	ldr	r2, [pc, #180]	; (8003f74 <xPortStartScheduler+0x134>)
 8003ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003ec0:	78fb      	ldrb	r3, [r7, #3]
 8003ec2:	b2db      	uxtb	r3, r3
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	b2db      	uxtb	r3, r3
 8003ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003eca:	78fb      	ldrb	r3, [r7, #3]
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b80      	cmp	r3, #128	; 0x80
 8003ed4:	d0ef      	beq.n	8003eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003ed6:	4b27      	ldr	r3, [pc, #156]	; (8003f74 <xPortStartScheduler+0x134>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1c3 0307 	rsb	r3, r3, #7
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d00a      	beq.n	8003ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8003ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ee6:	f383 8811 	msr	BASEPRI, r3
 8003eea:	f3bf 8f6f 	isb	sy
 8003eee:	f3bf 8f4f 	dsb	sy
 8003ef2:	60bb      	str	r3, [r7, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	e7fe      	b.n	8003ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ef8:	4b1e      	ldr	r3, [pc, #120]	; (8003f74 <xPortStartScheduler+0x134>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	021b      	lsls	r3, r3, #8
 8003efe:	4a1d      	ldr	r2, [pc, #116]	; (8003f74 <xPortStartScheduler+0x134>)
 8003f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003f02:	4b1c      	ldr	r3, [pc, #112]	; (8003f74 <xPortStartScheduler+0x134>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003f0a:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <xPortStartScheduler+0x134>)
 8003f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	b2da      	uxtb	r2, r3
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8003f16:	4b18      	ldr	r3, [pc, #96]	; (8003f78 <xPortStartScheduler+0x138>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <xPortStartScheduler+0x138>)
 8003f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8003f22:	4b15      	ldr	r3, [pc, #84]	; (8003f78 <xPortStartScheduler+0x138>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a14      	ldr	r2, [pc, #80]	; (8003f78 <xPortStartScheduler+0x138>)
 8003f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8003f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8003f2e:	f000 f8dd 	bl	80040ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8003f32:	4b12      	ldr	r3, [pc, #72]	; (8003f7c <xPortStartScheduler+0x13c>)
 8003f34:	2200      	movs	r2, #0
 8003f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8003f38:	f000 f8fc 	bl	8004134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003f3c:	4b10      	ldr	r3, [pc, #64]	; (8003f80 <xPortStartScheduler+0x140>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a0f      	ldr	r2, [pc, #60]	; (8003f80 <xPortStartScheduler+0x140>)
 8003f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8003f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8003f48:	f7ff ff66 	bl	8003e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8003f4c:	f7ff f850 	bl	8002ff0 <vTaskSwitchContext>
	prvTaskExitError();
 8003f50:	f7ff ff1c 	bl	8003d8c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3718      	adds	r7, #24
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	e000ed00 	.word	0xe000ed00
 8003f64:	410fc271 	.word	0x410fc271
 8003f68:	410fc270 	.word	0x410fc270
 8003f6c:	e000e400 	.word	0xe000e400
 8003f70:	20000d14 	.word	0x20000d14
 8003f74:	20000d18 	.word	0x20000d18
 8003f78:	e000ed20 	.word	0xe000ed20
 8003f7c:	2000000c 	.word	0x2000000c
 8003f80:	e000ef34 	.word	0xe000ef34

08003f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
	__asm volatile
 8003f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8e:	f383 8811 	msr	BASEPRI, r3
 8003f92:	f3bf 8f6f 	isb	sy
 8003f96:	f3bf 8f4f 	dsb	sy
 8003f9a:	607b      	str	r3, [r7, #4]
}
 8003f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8003f9e:	4b0f      	ldr	r3, [pc, #60]	; (8003fdc <vPortEnterCritical+0x58>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3301      	adds	r3, #1
 8003fa4:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <vPortEnterCritical+0x58>)
 8003fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8003fa8:	4b0c      	ldr	r3, [pc, #48]	; (8003fdc <vPortEnterCritical+0x58>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d10f      	bne.n	8003fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8003fb0:	4b0b      	ldr	r3, [pc, #44]	; (8003fe0 <vPortEnterCritical+0x5c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d00a      	beq.n	8003fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8003fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fbe:	f383 8811 	msr	BASEPRI, r3
 8003fc2:	f3bf 8f6f 	isb	sy
 8003fc6:	f3bf 8f4f 	dsb	sy
 8003fca:	603b      	str	r3, [r7, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	e7fe      	b.n	8003fce <vPortEnterCritical+0x4a>
	}
}
 8003fd0:	bf00      	nop
 8003fd2:	370c      	adds	r7, #12
 8003fd4:	46bd      	mov	sp, r7
 8003fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fda:	4770      	bx	lr
 8003fdc:	2000000c 	.word	0x2000000c
 8003fe0:	e000ed04 	.word	0xe000ed04

08003fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8003fea:	4b12      	ldr	r3, [pc, #72]	; (8004034 <vPortExitCritical+0x50>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d10a      	bne.n	8004008 <vPortExitCritical+0x24>
	__asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	607b      	str	r3, [r7, #4]
}
 8004004:	bf00      	nop
 8004006:	e7fe      	b.n	8004006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004008:	4b0a      	ldr	r3, [pc, #40]	; (8004034 <vPortExitCritical+0x50>)
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	3b01      	subs	r3, #1
 800400e:	4a09      	ldr	r2, [pc, #36]	; (8004034 <vPortExitCritical+0x50>)
 8004010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004012:	4b08      	ldr	r3, [pc, #32]	; (8004034 <vPortExitCritical+0x50>)
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d105      	bne.n	8004026 <vPortExitCritical+0x42>
 800401a:	2300      	movs	r3, #0
 800401c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	f383 8811 	msr	BASEPRI, r3
}
 8004024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004026:	bf00      	nop
 8004028:	370c      	adds	r7, #12
 800402a:	46bd      	mov	sp, r7
 800402c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004030:	4770      	bx	lr
 8004032:	bf00      	nop
 8004034:	2000000c 	.word	0x2000000c
	...

08004040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004040:	f3ef 8009 	mrs	r0, PSP
 8004044:	f3bf 8f6f 	isb	sy
 8004048:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <pxCurrentTCBConst>)
 800404a:	681a      	ldr	r2, [r3, #0]
 800404c:	f01e 0f10 	tst.w	lr, #16
 8004050:	bf08      	it	eq
 8004052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800405a:	6010      	str	r0, [r2, #0]
 800405c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004064:	f380 8811 	msr	BASEPRI, r0
 8004068:	f3bf 8f4f 	dsb	sy
 800406c:	f3bf 8f6f 	isb	sy
 8004070:	f7fe ffbe 	bl	8002ff0 <vTaskSwitchContext>
 8004074:	f04f 0000 	mov.w	r0, #0
 8004078:	f380 8811 	msr	BASEPRI, r0
 800407c:	bc09      	pop	{r0, r3}
 800407e:	6819      	ldr	r1, [r3, #0]
 8004080:	6808      	ldr	r0, [r1, #0]
 8004082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004086:	f01e 0f10 	tst.w	lr, #16
 800408a:	bf08      	it	eq
 800408c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004090:	f380 8809 	msr	PSP, r0
 8004094:	f3bf 8f6f 	isb	sy
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	f3af 8000 	nop.w

080040a0 <pxCurrentTCBConst>:
 80040a0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80040a4:	bf00      	nop
 80040a6:	bf00      	nop

080040a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
	__asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	607b      	str	r3, [r7, #4]
}
 80040c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80040c2:	f7fe fedb 	bl	8002e7c <xTaskIncrementTick>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d003      	beq.n	80040d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80040cc:	4b06      	ldr	r3, [pc, #24]	; (80040e8 <xPortSysTickHandler+0x40>)
 80040ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040d2:	601a      	str	r2, [r3, #0]
 80040d4:	2300      	movs	r3, #0
 80040d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	f383 8811 	msr	BASEPRI, r3
}
 80040de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80040e0:	bf00      	nop
 80040e2:	3708      	adds	r7, #8
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	e000ed04 	.word	0xe000ed04

080040ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80040f0:	4b0b      	ldr	r3, [pc, #44]	; (8004120 <vPortSetupTimerInterrupt+0x34>)
 80040f2:	2200      	movs	r2, #0
 80040f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80040f6:	4b0b      	ldr	r3, [pc, #44]	; (8004124 <vPortSetupTimerInterrupt+0x38>)
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80040fc:	4b0a      	ldr	r3, [pc, #40]	; (8004128 <vPortSetupTimerInterrupt+0x3c>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a0a      	ldr	r2, [pc, #40]	; (800412c <vPortSetupTimerInterrupt+0x40>)
 8004102:	fba2 2303 	umull	r2, r3, r2, r3
 8004106:	099b      	lsrs	r3, r3, #6
 8004108:	4a09      	ldr	r2, [pc, #36]	; (8004130 <vPortSetupTimerInterrupt+0x44>)
 800410a:	3b01      	subs	r3, #1
 800410c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800410e:	4b04      	ldr	r3, [pc, #16]	; (8004120 <vPortSetupTimerInterrupt+0x34>)
 8004110:	2207      	movs	r2, #7
 8004112:	601a      	str	r2, [r3, #0]
}
 8004114:	bf00      	nop
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
 800411e:	bf00      	nop
 8004120:	e000e010 	.word	0xe000e010
 8004124:	e000e018 	.word	0xe000e018
 8004128:	20000000 	.word	0x20000000
 800412c:	10624dd3 	.word	0x10624dd3
 8004130:	e000e014 	.word	0xe000e014

08004134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004144 <vPortEnableVFP+0x10>
 8004138:	6801      	ldr	r1, [r0, #0]
 800413a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800413e:	6001      	str	r1, [r0, #0]
 8004140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004142:	bf00      	nop
 8004144:	e000ed88 	.word	0xe000ed88

08004148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800414e:	f3ef 8305 	mrs	r3, IPSR
 8004152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	2b0f      	cmp	r3, #15
 8004158:	d914      	bls.n	8004184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800415a:	4a17      	ldr	r2, [pc, #92]	; (80041b8 <vPortValidateInterruptPriority+0x70>)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	4413      	add	r3, r2
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004164:	4b15      	ldr	r3, [pc, #84]	; (80041bc <vPortValidateInterruptPriority+0x74>)
 8004166:	781b      	ldrb	r3, [r3, #0]
 8004168:	7afa      	ldrb	r2, [r7, #11]
 800416a:	429a      	cmp	r2, r3
 800416c:	d20a      	bcs.n	8004184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	607b      	str	r3, [r7, #4]
}
 8004180:	bf00      	nop
 8004182:	e7fe      	b.n	8004182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004184:	4b0e      	ldr	r3, [pc, #56]	; (80041c0 <vPortValidateInterruptPriority+0x78>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800418c:	4b0d      	ldr	r3, [pc, #52]	; (80041c4 <vPortValidateInterruptPriority+0x7c>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d90a      	bls.n	80041aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	603b      	str	r3, [r7, #0]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <vPortValidateInterruptPriority+0x60>
	}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	e000e3f0 	.word	0xe000e3f0
 80041bc:	20000d14 	.word	0x20000d14
 80041c0:	e000ed0c 	.word	0xe000ed0c
 80041c4:	20000d18 	.word	0x20000d18

080041c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80041d0:	2300      	movs	r3, #0
 80041d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80041d4:	f7fe fd96 	bl	8002d04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80041d8:	4b5b      	ldr	r3, [pc, #364]	; (8004348 <pvPortMalloc+0x180>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80041e0:	f000 f920 	bl	8004424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80041e4:	4b59      	ldr	r3, [pc, #356]	; (800434c <pvPortMalloc+0x184>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	4013      	ands	r3, r2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	f040 8093 	bne.w	8004318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d01d      	beq.n	8004234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80041f8:	2208      	movs	r2, #8
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f003 0307 	and.w	r3, r3, #7
 8004206:	2b00      	cmp	r3, #0
 8004208:	d014      	beq.n	8004234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	f023 0307 	bic.w	r3, r3, #7
 8004210:	3308      	adds	r3, #8
 8004212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f003 0307 	and.w	r3, r3, #7
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00a      	beq.n	8004234 <pvPortMalloc+0x6c>
	__asm volatile
 800421e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004222:	f383 8811 	msr	BASEPRI, r3
 8004226:	f3bf 8f6f 	isb	sy
 800422a:	f3bf 8f4f 	dsb	sy
 800422e:	617b      	str	r3, [r7, #20]
}
 8004230:	bf00      	nop
 8004232:	e7fe      	b.n	8004232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d06e      	beq.n	8004318 <pvPortMalloc+0x150>
 800423a:	4b45      	ldr	r3, [pc, #276]	; (8004350 <pvPortMalloc+0x188>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	429a      	cmp	r2, r3
 8004242:	d869      	bhi.n	8004318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004244:	4b43      	ldr	r3, [pc, #268]	; (8004354 <pvPortMalloc+0x18c>)
 8004246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004248:	4b42      	ldr	r3, [pc, #264]	; (8004354 <pvPortMalloc+0x18c>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800424e:	e004      	b.n	800425a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800425a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d903      	bls.n	800426c <pvPortMalloc+0xa4>
 8004264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f1      	bne.n	8004250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800426c:	4b36      	ldr	r3, [pc, #216]	; (8004348 <pvPortMalloc+0x180>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004272:	429a      	cmp	r2, r3
 8004274:	d050      	beq.n	8004318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004276:	6a3b      	ldr	r3, [r7, #32]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2208      	movs	r2, #8
 800427c:	4413      	add	r3, r2
 800427e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	6a3b      	ldr	r3, [r7, #32]
 8004286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	1ad2      	subs	r2, r2, r3
 8004290:	2308      	movs	r3, #8
 8004292:	005b      	lsls	r3, r3, #1
 8004294:	429a      	cmp	r2, r3
 8004296:	d91f      	bls.n	80042d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4413      	add	r3, r2
 800429e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d00a      	beq.n	80042c0 <pvPortMalloc+0xf8>
	__asm volatile
 80042aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ae:	f383 8811 	msr	BASEPRI, r3
 80042b2:	f3bf 8f6f 	isb	sy
 80042b6:	f3bf 8f4f 	dsb	sy
 80042ba:	613b      	str	r3, [r7, #16]
}
 80042bc:	bf00      	nop
 80042be:	e7fe      	b.n	80042be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	685a      	ldr	r2, [r3, #4]
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	1ad2      	subs	r2, r2, r3
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80042cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ce:	687a      	ldr	r2, [r7, #4]
 80042d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042d2:	69b8      	ldr	r0, [r7, #24]
 80042d4:	f000 f908 	bl	80044e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042d8:	4b1d      	ldr	r3, [pc, #116]	; (8004350 <pvPortMalloc+0x188>)
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	1ad3      	subs	r3, r2, r3
 80042e2:	4a1b      	ldr	r2, [pc, #108]	; (8004350 <pvPortMalloc+0x188>)
 80042e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042e6:	4b1a      	ldr	r3, [pc, #104]	; (8004350 <pvPortMalloc+0x188>)
 80042e8:	681a      	ldr	r2, [r3, #0]
 80042ea:	4b1b      	ldr	r3, [pc, #108]	; (8004358 <pvPortMalloc+0x190>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	429a      	cmp	r2, r3
 80042f0:	d203      	bcs.n	80042fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042f2:	4b17      	ldr	r3, [pc, #92]	; (8004350 <pvPortMalloc+0x188>)
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a18      	ldr	r2, [pc, #96]	; (8004358 <pvPortMalloc+0x190>)
 80042f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80042fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	4b13      	ldr	r3, [pc, #76]	; (800434c <pvPortMalloc+0x184>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	431a      	orrs	r2, r3
 8004304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800430e:	4b13      	ldr	r3, [pc, #76]	; (800435c <pvPortMalloc+0x194>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	3301      	adds	r3, #1
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <pvPortMalloc+0x194>)
 8004316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004318:	f7fe fd02 	bl	8002d20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	f003 0307 	and.w	r3, r3, #7
 8004322:	2b00      	cmp	r3, #0
 8004324:	d00a      	beq.n	800433c <pvPortMalloc+0x174>
	__asm volatile
 8004326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800432a:	f383 8811 	msr	BASEPRI, r3
 800432e:	f3bf 8f6f 	isb	sy
 8004332:	f3bf 8f4f 	dsb	sy
 8004336:	60fb      	str	r3, [r7, #12]
}
 8004338:	bf00      	nop
 800433a:	e7fe      	b.n	800433a <pvPortMalloc+0x172>
	return pvReturn;
 800433c:	69fb      	ldr	r3, [r7, #28]
}
 800433e:	4618      	mov	r0, r3
 8004340:	3728      	adds	r7, #40	; 0x28
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	200018dc 	.word	0x200018dc
 800434c:	200018f0 	.word	0x200018f0
 8004350:	200018e0 	.word	0x200018e0
 8004354:	200018d4 	.word	0x200018d4
 8004358:	200018e4 	.word	0x200018e4
 800435c:	200018e8 	.word	0x200018e8

08004360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b086      	sub	sp, #24
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d04d      	beq.n	800440e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004372:	2308      	movs	r3, #8
 8004374:	425b      	negs	r3, r3
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4413      	add	r3, r2
 800437a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	4b24      	ldr	r3, [pc, #144]	; (8004418 <vPortFree+0xb8>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4013      	ands	r3, r2
 800438a:	2b00      	cmp	r3, #0
 800438c:	d10a      	bne.n	80043a4 <vPortFree+0x44>
	__asm volatile
 800438e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004392:	f383 8811 	msr	BASEPRI, r3
 8004396:	f3bf 8f6f 	isb	sy
 800439a:	f3bf 8f4f 	dsb	sy
 800439e:	60fb      	str	r3, [r7, #12]
}
 80043a0:	bf00      	nop
 80043a2:	e7fe      	b.n	80043a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d00a      	beq.n	80043c2 <vPortFree+0x62>
	__asm volatile
 80043ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043b0:	f383 8811 	msr	BASEPRI, r3
 80043b4:	f3bf 8f6f 	isb	sy
 80043b8:	f3bf 8f4f 	dsb	sy
 80043bc:	60bb      	str	r3, [r7, #8]
}
 80043be:	bf00      	nop
 80043c0:	e7fe      	b.n	80043c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	685a      	ldr	r2, [r3, #4]
 80043c6:	4b14      	ldr	r3, [pc, #80]	; (8004418 <vPortFree+0xb8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4013      	ands	r3, r2
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d01e      	beq.n	800440e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d11a      	bne.n	800440e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	4b0e      	ldr	r3, [pc, #56]	; (8004418 <vPortFree+0xb8>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	43db      	mvns	r3, r3
 80043e2:	401a      	ands	r2, r3
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80043e8:	f7fe fc8c 	bl	8002d04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	685a      	ldr	r2, [r3, #4]
 80043f0:	4b0a      	ldr	r3, [pc, #40]	; (800441c <vPortFree+0xbc>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4413      	add	r3, r2
 80043f6:	4a09      	ldr	r2, [pc, #36]	; (800441c <vPortFree+0xbc>)
 80043f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043fa:	6938      	ldr	r0, [r7, #16]
 80043fc:	f000 f874 	bl	80044e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004400:	4b07      	ldr	r3, [pc, #28]	; (8004420 <vPortFree+0xc0>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	3301      	adds	r3, #1
 8004406:	4a06      	ldr	r2, [pc, #24]	; (8004420 <vPortFree+0xc0>)
 8004408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800440a:	f7fe fc89 	bl	8002d20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800440e:	bf00      	nop
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	200018f0 	.word	0x200018f0
 800441c:	200018e0 	.word	0x200018e0
 8004420:	200018ec 	.word	0x200018ec

08004424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004424:	b480      	push	{r7}
 8004426:	b085      	sub	sp, #20
 8004428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800442a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800442e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004430:	4b27      	ldr	r3, [pc, #156]	; (80044d0 <prvHeapInit+0xac>)
 8004432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	2b00      	cmp	r3, #0
 800443c:	d00c      	beq.n	8004458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3307      	adds	r3, #7
 8004442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f023 0307 	bic.w	r3, r3, #7
 800444a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800444c:	68ba      	ldr	r2, [r7, #8]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1ad3      	subs	r3, r2, r3
 8004452:	4a1f      	ldr	r2, [pc, #124]	; (80044d0 <prvHeapInit+0xac>)
 8004454:	4413      	add	r3, r2
 8004456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800445c:	4a1d      	ldr	r2, [pc, #116]	; (80044d4 <prvHeapInit+0xb0>)
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004462:	4b1c      	ldr	r3, [pc, #112]	; (80044d4 <prvHeapInit+0xb0>)
 8004464:	2200      	movs	r2, #0
 8004466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68ba      	ldr	r2, [r7, #8]
 800446c:	4413      	add	r3, r2
 800446e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004470:	2208      	movs	r2, #8
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	1a9b      	subs	r3, r3, r2
 8004476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0307 	bic.w	r3, r3, #7
 800447e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	4a15      	ldr	r2, [pc, #84]	; (80044d8 <prvHeapInit+0xb4>)
 8004484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <prvHeapInit+0xb4>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	2200      	movs	r2, #0
 800448c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800448e:	4b12      	ldr	r3, [pc, #72]	; (80044d8 <prvHeapInit+0xb4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	68fa      	ldr	r2, [r7, #12]
 800449e:	1ad2      	subs	r2, r2, r3
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80044a4:	4b0c      	ldr	r3, [pc, #48]	; (80044d8 <prvHeapInit+0xb4>)
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	4a0a      	ldr	r2, [pc, #40]	; (80044dc <prvHeapInit+0xb8>)
 80044b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	4a09      	ldr	r2, [pc, #36]	; (80044e0 <prvHeapInit+0xbc>)
 80044ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80044bc:	4b09      	ldr	r3, [pc, #36]	; (80044e4 <prvHeapInit+0xc0>)
 80044be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80044c2:	601a      	str	r2, [r3, #0]
}
 80044c4:	bf00      	nop
 80044c6:	3714      	adds	r7, #20
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr
 80044d0:	20000d1c 	.word	0x20000d1c
 80044d4:	200018d4 	.word	0x200018d4
 80044d8:	200018dc 	.word	0x200018dc
 80044dc:	200018e4 	.word	0x200018e4
 80044e0:	200018e0 	.word	0x200018e0
 80044e4:	200018f0 	.word	0x200018f0

080044e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044f0:	4b28      	ldr	r3, [pc, #160]	; (8004594 <prvInsertBlockIntoFreeList+0xac>)
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	e002      	b.n	80044fc <prvInsertBlockIntoFreeList+0x14>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	429a      	cmp	r2, r3
 8004504:	d8f7      	bhi.n	80044f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	68ba      	ldr	r2, [r7, #8]
 8004510:	4413      	add	r3, r2
 8004512:	687a      	ldr	r2, [r7, #4]
 8004514:	429a      	cmp	r2, r3
 8004516:	d108      	bne.n	800452a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	441a      	add	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	441a      	add	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d118      	bne.n	8004570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	4b15      	ldr	r3, [pc, #84]	; (8004598 <prvInsertBlockIntoFreeList+0xb0>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	429a      	cmp	r2, r3
 8004548:	d00d      	beq.n	8004566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685a      	ldr	r2, [r3, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	441a      	add	r2, r3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	601a      	str	r2, [r3, #0]
 8004564:	e008      	b.n	8004578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004566:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <prvInsertBlockIntoFreeList+0xb0>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	601a      	str	r2, [r3, #0]
 800456e:	e003      	b.n	8004578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004578:	68fa      	ldr	r2, [r7, #12]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	429a      	cmp	r2, r3
 800457e:	d002      	beq.n	8004586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	687a      	ldr	r2, [r7, #4]
 8004584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004586:	bf00      	nop
 8004588:	3714      	adds	r7, #20
 800458a:	46bd      	mov	sp, r7
 800458c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004590:	4770      	bx	lr
 8004592:	bf00      	nop
 8004594:	200018d4 	.word	0x200018d4
 8004598:	200018dc 	.word	0x200018dc

0800459c <__libc_init_array>:
 800459c:	b570      	push	{r4, r5, r6, lr}
 800459e:	4d0d      	ldr	r5, [pc, #52]	; (80045d4 <__libc_init_array+0x38>)
 80045a0:	4c0d      	ldr	r4, [pc, #52]	; (80045d8 <__libc_init_array+0x3c>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	2600      	movs	r6, #0
 80045a8:	42a6      	cmp	r6, r4
 80045aa:	d109      	bne.n	80045c0 <__libc_init_array+0x24>
 80045ac:	4d0b      	ldr	r5, [pc, #44]	; (80045dc <__libc_init_array+0x40>)
 80045ae:	4c0c      	ldr	r4, [pc, #48]	; (80045e0 <__libc_init_array+0x44>)
 80045b0:	f000 f82e 	bl	8004610 <_init>
 80045b4:	1b64      	subs	r4, r4, r5
 80045b6:	10a4      	asrs	r4, r4, #2
 80045b8:	2600      	movs	r6, #0
 80045ba:	42a6      	cmp	r6, r4
 80045bc:	d105      	bne.n	80045ca <__libc_init_array+0x2e>
 80045be:	bd70      	pop	{r4, r5, r6, pc}
 80045c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045c4:	4798      	blx	r3
 80045c6:	3601      	adds	r6, #1
 80045c8:	e7ee      	b.n	80045a8 <__libc_init_array+0xc>
 80045ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ce:	4798      	blx	r3
 80045d0:	3601      	adds	r6, #1
 80045d2:	e7f2      	b.n	80045ba <__libc_init_array+0x1e>
 80045d4:	080046e0 	.word	0x080046e0
 80045d8:	080046e0 	.word	0x080046e0
 80045dc:	080046e0 	.word	0x080046e0
 80045e0:	080046e4 	.word	0x080046e4

080045e4 <memcpy>:
 80045e4:	440a      	add	r2, r1
 80045e6:	4291      	cmp	r1, r2
 80045e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80045ec:	d100      	bne.n	80045f0 <memcpy+0xc>
 80045ee:	4770      	bx	lr
 80045f0:	b510      	push	{r4, lr}
 80045f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80045f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80045fa:	4291      	cmp	r1, r2
 80045fc:	d1f9      	bne.n	80045f2 <memcpy+0xe>
 80045fe:	bd10      	pop	{r4, pc}

08004600 <memset>:
 8004600:	4402      	add	r2, r0
 8004602:	4603      	mov	r3, r0
 8004604:	4293      	cmp	r3, r2
 8004606:	d100      	bne.n	800460a <memset+0xa>
 8004608:	4770      	bx	lr
 800460a:	f803 1b01 	strb.w	r1, [r3], #1
 800460e:	e7f9      	b.n	8004604 <memset+0x4>

08004610 <_init>:
 8004610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004612:	bf00      	nop
 8004614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004616:	bc08      	pop	{r3}
 8004618:	469e      	mov	lr, r3
 800461a:	4770      	bx	lr

0800461c <_fini>:
 800461c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461e:	bf00      	nop
 8004620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004622:	bc08      	pop	{r3}
 8004624:	469e      	mov	lr, r3
 8004626:	4770      	bx	lr
