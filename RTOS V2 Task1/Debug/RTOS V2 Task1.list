
RTOS V2 Task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a388  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ecc  0800a518  0800a518  0001a518  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3e4  0800b3e4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3e4  0800b3e4  0001b3e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3ec  0800b3ec  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3ec  0800b3ec  0001b3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3f0  0800b3f0  0001b3f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800b3f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001fa0  2000007c  0800b470  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000201c  0800b470  0002201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024c97  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004381  00000000  00000000  00044d43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e70  00000000  00000000  000490c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001cd8  00000000  00000000  0004af38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b589  00000000  00000000  0004cc10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000220f3  00000000  00000000  00078199  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113a9b  00000000  00000000  0009a28c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001add27  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008908  00000000  00000000  001add78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000007c 	.word	0x2000007c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a500 	.word	0x0800a500

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000080 	.word	0x20000080
 80001cc:	0800a500 	.word	0x0800a500

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <ADC_Select_CH1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH1 (void)
  {
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
  	  ADC_ChannelConfTypeDef sConfig = {0};
 8000dc6:	463b      	mov	r3, r7
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
 8000dd4:	615a      	str	r2, [r3, #20]
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_1;
 8000dd6:	4b0a      	ldr	r3, [pc, #40]	; (8000e00 <ADC_Select_CH1+0x40>)
 8000dd8:	603b      	str	r3, [r7, #0]
  	  sConfig.Rank = 1;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	607b      	str	r3, [r7, #4]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;;
 8000dde:	2302      	movs	r3, #2
 8000de0:	60bb      	str	r3, [r7, #8]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de2:	463b      	mov	r3, r7
 8000de4:	4619      	mov	r1, r3
 8000de6:	4807      	ldr	r0, [pc, #28]	; (8000e04 <ADC_Select_CH1+0x44>)
 8000de8:	f001 ff58 	bl	8002c9c <HAL_ADC_ConfigChannel>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <ADC_Select_CH1+0x36>
  	  {
  	    Error_Handler();
 8000df2:	f000 fc9d 	bl	8001730 <Error_Handler>
  	  }
  }
 8000df6:	bf00      	nop
 8000df8:	3718      	adds	r7, #24
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	04300002 	.word	0x04300002
 8000e04:	20000098 	.word	0x20000098

08000e08 <ADC_Select_CH2>:

  void ADC_Select_CH2 (void)
  {
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b086      	sub	sp, #24
 8000e0c:	af00      	add	r7, sp, #0
  	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e0e:	463b      	mov	r3, r7
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
 8000e1c:	615a      	str	r2, [r3, #20]
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_2;
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <ADC_Select_CH2+0x40>)
 8000e20:	603b      	str	r3, [r7, #0]
  	  sConfig.Rank = 1;
 8000e22:	2301      	movs	r3, #1
 8000e24:	607b      	str	r3, [r7, #4]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;;
 8000e26:	2303      	movs	r3, #3
 8000e28:	60bb      	str	r3, [r7, #8]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <ADC_Select_CH2+0x44>)
 8000e30:	f001 ff34 	bl	8002c9c <HAL_ADC_ConfigChannel>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <ADC_Select_CH2+0x36>
  	  {
  	    Error_Handler();
 8000e3a:	f000 fc79 	bl	8001730 <Error_Handler>
  	  }
  }
 8000e3e:	bf00      	nop
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	08600004 	.word	0x08600004
 8000e4c:	20000098 	.word	0x20000098

08000e50 <ADC_Select_CHTemp>:

  void ADC_Select_CHTemp (void)
  {
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b086      	sub	sp, #24
 8000e54:	af00      	add	r7, sp, #0
  	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e56:	463b      	mov	r3, r7
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]
 8000e62:	611a      	str	r2, [r3, #16]
 8000e64:	615a      	str	r2, [r3, #20]
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <ADC_Select_CHTemp+0x40>)
 8000e68:	603b      	str	r3, [r7, #0]
  	  sConfig.Rank = 1;
 8000e6a:	2301      	movs	r3, #1
 8000e6c:	607b      	str	r3, [r7, #4]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;;
 8000e6e:	2304      	movs	r3, #4
 8000e70:	60bb      	str	r3, [r7, #8]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e72:	463b      	mov	r3, r7
 8000e74:	4619      	mov	r1, r3
 8000e76:	4807      	ldr	r0, [pc, #28]	; (8000e94 <ADC_Select_CHTemp+0x44>)
 8000e78:	f001 ff10 	bl	8002c9c <HAL_ADC_ConfigChannel>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <ADC_Select_CHTemp+0x36>
  	  {
  	    Error_Handler();
 8000e82:	f000 fc55 	bl	8001730 <Error_Handler>
  	  }
  }
 8000e86:	bf00      	nop
 8000e88:	3718      	adds	r7, #24
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	c7520000 	.word	0xc7520000
 8000e94:	20000098 	.word	0x20000098

08000e98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e9c:	f001 f962 	bl	8002164 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ea0:	f000 f852 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ea4:	f000 f9aa 	bl	80011fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ea8:	f000 f978 	bl	800119c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000eac:	f000 f936 	bl	800111c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000eb0:	f000 f89c 	bl	8000fec <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the diaply
 8000eb4:	f000 fc42 	bl	800173c <SSD1306_Init>
  SSD1306_GotoXY (0,0); // goto 10, 10
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2000      	movs	r0, #0
 8000ebc:	f000 fda8 	bl	8001a10 <SSD1306_GotoXY>
  SSD1306_Puts ("CH1:  ", &Font_11x18, 1); // print Voltmeter_Back to Intel Nuc
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	4917      	ldr	r1, [pc, #92]	; (8000f20 <main+0x88>)
 8000ec4:	4817      	ldr	r0, [pc, #92]	; (8000f24 <main+0x8c>)
 8000ec6:	f000 fe39 	bl	8001b3c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000eca:	f000 fcfb 	bl	80018c4 <SSD1306_UpdateScreen>
  //HAL_Delay(3000);
  SSD1306_GotoXY (0,20);
 8000ece:	2114      	movs	r1, #20
 8000ed0:	2000      	movs	r0, #0
 8000ed2:	f000 fd9d 	bl	8001a10 <SSD1306_GotoXY>
  SSD1306_Puts ("CH2:  ", &Font_11x18, 1);
 8000ed6:	2201      	movs	r2, #1
 8000ed8:	4911      	ldr	r1, [pc, #68]	; (8000f20 <main+0x88>)
 8000eda:	4813      	ldr	r0, [pc, #76]	; (8000f28 <main+0x90>)
 8000edc:	f000 fe2e 	bl	8001b3c <SSD1306_Puts>
  SSD1306_GotoXY (0,42);
 8000ee0:	212a      	movs	r1, #42	; 0x2a
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	f000 fd94 	bl	8001a10 <SSD1306_GotoXY>
  SSD1306_Puts ("Temp:  ", &Font_11x18, 1);
 8000ee8:	2201      	movs	r2, #1
 8000eea:	490d      	ldr	r1, [pc, #52]	; (8000f20 <main+0x88>)
 8000eec:	480f      	ldr	r0, [pc, #60]	; (8000f2c <main+0x94>)
 8000eee:	f000 fe25 	bl	8001b3c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000ef2:	f000 fce7 	bl	80018c4 <SSD1306_UpdateScreen>
  //value_adc1 = HAL_ADC_GetValue(&hadc1);
  //value_adc2 = HAL_ADC_GetValue(&hadc2);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ef6:	f006 f87b 	bl	8006ff0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000efa:	4a0d      	ldr	r2, [pc, #52]	; (8000f30 <main+0x98>)
 8000efc:	2100      	movs	r1, #0
 8000efe:	480d      	ldr	r0, [pc, #52]	; (8000f34 <main+0x9c>)
 8000f00:	f006 f8c0 	bl	8007084 <osThreadNew>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a0c      	ldr	r2, [pc, #48]	; (8000f38 <main+0xa0>)
 8000f08:	6013      	str	r3, [r2, #0]

  /* creation of Task2c */
  Task2cHandle = osThreadNew(StartTask2, NULL, &Task2c_attributes);
 8000f0a:	4a0c      	ldr	r2, [pc, #48]	; (8000f3c <main+0xa4>)
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	480c      	ldr	r0, [pc, #48]	; (8000f40 <main+0xa8>)
 8000f10:	f006 f8b8 	bl	8007084 <osThreadNew>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4a0b      	ldr	r2, [pc, #44]	; (8000f44 <main+0xac>)
 8000f18:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f1a:	f006 f88d 	bl	8007038 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f1e:	e7fe      	b.n	8000f1e <main+0x86>
 8000f20:	20000000 	.word	0x20000000
 8000f24:	0800a528 	.word	0x0800a528
 8000f28:	0800a530 	.word	0x0800a530
 8000f2c:	0800a538 	.word	0x0800a538
 8000f30:	0800b2c0 	.word	0x0800b2c0
 8000f34:	080016dd 	.word	0x080016dd
 8000f38:	200001cc 	.word	0x200001cc
 8000f3c:	0800b2e4 	.word	0x0800b2e4
 8000f40:	080016f5 	.word	0x080016f5
 8000f44:	200001d0 	.word	0x200001d0

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b096      	sub	sp, #88	; 0x58
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 0314 	add.w	r3, r7, #20
 8000f52:	2244      	movs	r2, #68	; 0x44
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f008 fe02 	bl	8009b60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	463b      	mov	r3, r7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	605a      	str	r2, [r3, #4]
 8000f64:	609a      	str	r2, [r3, #8]
 8000f66:	60da      	str	r2, [r3, #12]
 8000f68:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000f6e:	f003 fcad 	bl	80048cc <HAL_PWREx_ControlVoltageScaling>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f78:	f000 fbda 	bl	8001730 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f84:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f86:	2310      	movs	r3, #16
 8000f88:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8a:	2302      	movs	r3, #2
 8000f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f92:	2301      	movs	r3, #1
 8000f94:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f96:	230a      	movs	r3, #10
 8000f98:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f9a:	2307      	movs	r3, #7
 8000f9c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	4618      	mov	r0, r3
 8000fac:	f003 fce4 	bl	8004978 <HAL_RCC_OscConfig>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fb6:	f000 fbbb 	bl	8001730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fba:	230f      	movs	r3, #15
 8000fbc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fbe:	2303      	movs	r3, #3
 8000fc0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	2104      	movs	r1, #4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f004 f8b8 	bl	8005148 <HAL_RCC_ClockConfig>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fde:	f000 fba7 	bl	8001730 <Error_Handler>
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	3758      	adds	r7, #88	; 0x58
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
	...

08000fec <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b08a      	sub	sp, #40	; 0x28
 8000ff0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000ff2:	f107 031c 	add.w	r3, r7, #28
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	601a      	str	r2, [r3, #0]
 8000ffa:	605a      	str	r2, [r3, #4]
 8000ffc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2200      	movs	r2, #0
 8001002:	601a      	str	r2, [r3, #0]
 8001004:	605a      	str	r2, [r3, #4]
 8001006:	609a      	str	r2, [r3, #8]
 8001008:	60da      	str	r2, [r3, #12]
 800100a:	611a      	str	r2, [r3, #16]
 800100c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800100e:	4b3e      	ldr	r3, [pc, #248]	; (8001108 <MX_ADC1_Init+0x11c>)
 8001010:	4a3e      	ldr	r2, [pc, #248]	; (800110c <MX_ADC1_Init+0x120>)
 8001012:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001014:	4b3c      	ldr	r3, [pc, #240]	; (8001108 <MX_ADC1_Init+0x11c>)
 8001016:	2200      	movs	r2, #0
 8001018:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800101a:	4b3b      	ldr	r3, [pc, #236]	; (8001108 <MX_ADC1_Init+0x11c>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001020:	4b39      	ldr	r3, [pc, #228]	; (8001108 <MX_ADC1_Init+0x11c>)
 8001022:	2200      	movs	r2, #0
 8001024:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001026:	4b38      	ldr	r3, [pc, #224]	; (8001108 <MX_ADC1_Init+0x11c>)
 8001028:	2201      	movs	r2, #1
 800102a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <MX_ADC1_Init+0x11c>)
 800102e:	2204      	movs	r2, #4
 8001030:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001032:	4b35      	ldr	r3, [pc, #212]	; (8001108 <MX_ADC1_Init+0x11c>)
 8001034:	2200      	movs	r2, #0
 8001036:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001038:	4b33      	ldr	r3, [pc, #204]	; (8001108 <MX_ADC1_Init+0x11c>)
 800103a:	2200      	movs	r2, #0
 800103c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800103e:	4b32      	ldr	r3, [pc, #200]	; (8001108 <MX_ADC1_Init+0x11c>)
 8001040:	2203      	movs	r2, #3
 8001042:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001044:	4b30      	ldr	r3, [pc, #192]	; (8001108 <MX_ADC1_Init+0x11c>)
 8001046:	2200      	movs	r2, #0
 8001048:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b2e      	ldr	r3, [pc, #184]	; (8001108 <MX_ADC1_Init+0x11c>)
 800104e:	2200      	movs	r2, #0
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001052:	4b2d      	ldr	r3, [pc, #180]	; (8001108 <MX_ADC1_Init+0x11c>)
 8001054:	2200      	movs	r2, #0
 8001056:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001058:	4b2b      	ldr	r3, [pc, #172]	; (8001108 <MX_ADC1_Init+0x11c>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001060:	4b29      	ldr	r3, [pc, #164]	; (8001108 <MX_ADC1_Init+0x11c>)
 8001062:	2200      	movs	r2, #0
 8001064:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001066:	4b28      	ldr	r3, [pc, #160]	; (8001108 <MX_ADC1_Init+0x11c>)
 8001068:	2200      	movs	r2, #0
 800106a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106e:	4826      	ldr	r0, [pc, #152]	; (8001108 <MX_ADC1_Init+0x11c>)
 8001070:	f001 faea 	bl	8002648 <HAL_ADC_Init>
 8001074:	4603      	mov	r3, r0
 8001076:	2b00      	cmp	r3, #0
 8001078:	d001      	beq.n	800107e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800107a:	f000 fb59 	bl	8001730 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800107e:	2300      	movs	r3, #0
 8001080:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001082:	f107 031c 	add.w	r3, r7, #28
 8001086:	4619      	mov	r1, r3
 8001088:	481f      	ldr	r0, [pc, #124]	; (8001108 <MX_ADC1_Init+0x11c>)
 800108a:	f002 fb9b 	bl	80037c4 <HAL_ADCEx_MultiModeConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001094:	f000 fb4c 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001098:	4b1d      	ldr	r3, [pc, #116]	; (8001110 <MX_ADC1_Init+0x124>)
 800109a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109c:	2306      	movs	r3, #6
 800109e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 80010a0:	2303      	movs	r3, #3
 80010a2:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a4:	237f      	movs	r3, #127	; 0x7f
 80010a6:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a8:	2304      	movs	r3, #4
 80010aa:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80010ac:	2300      	movs	r3, #0
 80010ae:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	4619      	mov	r1, r3
 80010b4:	4814      	ldr	r0, [pc, #80]	; (8001108 <MX_ADC1_Init+0x11c>)
 80010b6:	f001 fdf1 	bl	8002c9c <HAL_ADC_ConfigChannel>
 80010ba:	4603      	mov	r3, r0
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d001      	beq.n	80010c4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010c0:	f000 fb36 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010c4:	4b13      	ldr	r3, [pc, #76]	; (8001114 <MX_ADC1_Init+0x128>)
 80010c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c8:	230c      	movs	r3, #12
 80010ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80010cc:	2304      	movs	r3, #4
 80010ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	480c      	ldr	r0, [pc, #48]	; (8001108 <MX_ADC1_Init+0x11c>)
 80010d6:	f001 fde1 	bl	8002c9c <HAL_ADC_ConfigChannel>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80010e0:	f000 fb26 	bl	8001730 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <MX_ADC1_Init+0x12c>)
 80010e6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010e8:	2312      	movs	r3, #18
 80010ea:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4805      	ldr	r0, [pc, #20]	; (8001108 <MX_ADC1_Init+0x11c>)
 80010f2:	f001 fdd3 	bl	8002c9c <HAL_ADC_ConfigChannel>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80010fc:	f000 fb18 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001100:	bf00      	nop
 8001102:	3728      	adds	r7, #40	; 0x28
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}
 8001108:	20000098 	.word	0x20000098
 800110c:	50040000 	.word	0x50040000
 8001110:	04300002 	.word	0x04300002
 8001114:	08600004 	.word	0x08600004
 8001118:	c7520000 	.word	0xc7520000

0800111c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001120:	4b1b      	ldr	r3, [pc, #108]	; (8001190 <MX_I2C1_Init+0x74>)
 8001122:	4a1c      	ldr	r2, [pc, #112]	; (8001194 <MX_I2C1_Init+0x78>)
 8001124:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001126:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_I2C1_Init+0x74>)
 8001128:	4a1b      	ldr	r2, [pc, #108]	; (8001198 <MX_I2C1_Init+0x7c>)
 800112a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_I2C1_Init+0x74>)
 800112e:	2200      	movs	r2, #0
 8001130:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_I2C1_Init+0x74>)
 8001134:	2201      	movs	r2, #1
 8001136:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_I2C1_Init+0x74>)
 800113a:	2200      	movs	r2, #0
 800113c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800113e:	4b14      	ldr	r3, [pc, #80]	; (8001190 <MX_I2C1_Init+0x74>)
 8001140:	2200      	movs	r2, #0
 8001142:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001144:	4b12      	ldr	r3, [pc, #72]	; (8001190 <MX_I2C1_Init+0x74>)
 8001146:	2200      	movs	r2, #0
 8001148:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800114a:	4b11      	ldr	r3, [pc, #68]	; (8001190 <MX_I2C1_Init+0x74>)
 800114c:	2200      	movs	r2, #0
 800114e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001150:	4b0f      	ldr	r3, [pc, #60]	; (8001190 <MX_I2C1_Init+0x74>)
 8001152:	2200      	movs	r2, #0
 8001154:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001156:	480e      	ldr	r0, [pc, #56]	; (8001190 <MX_I2C1_Init+0x74>)
 8001158:	f002 fe88 	bl	8003e6c <HAL_I2C_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001162:	f000 fae5 	bl	8001730 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001166:	2100      	movs	r1, #0
 8001168:	4809      	ldr	r0, [pc, #36]	; (8001190 <MX_I2C1_Init+0x74>)
 800116a:	f003 fb09 	bl	8004780 <HAL_I2CEx_ConfigAnalogFilter>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001174:	f000 fadc 	bl	8001730 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001178:	2100      	movs	r1, #0
 800117a:	4805      	ldr	r0, [pc, #20]	; (8001190 <MX_I2C1_Init+0x74>)
 800117c:	f003 fb4b 	bl	8004816 <HAL_I2CEx_ConfigDigitalFilter>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001186:	f000 fad3 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800118a:	bf00      	nop
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200000fc 	.word	0x200000fc
 8001194:	40005400 	.word	0x40005400
 8001198:	00702991 	.word	0x00702991

0800119c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a0:	4b14      	ldr	r3, [pc, #80]	; (80011f4 <MX_USART2_UART_Init+0x58>)
 80011a2:	4a15      	ldr	r2, [pc, #84]	; (80011f8 <MX_USART2_UART_Init+0x5c>)
 80011a4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011a6:	4b13      	ldr	r3, [pc, #76]	; (80011f4 <MX_USART2_UART_Init+0x58>)
 80011a8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011ac:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ae:	4b11      	ldr	r3, [pc, #68]	; (80011f4 <MX_USART2_UART_Init+0x58>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	; (80011f4 <MX_USART2_UART_Init+0x58>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	; (80011f4 <MX_USART2_UART_Init+0x58>)
 80011bc:	2200      	movs	r2, #0
 80011be:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	; (80011f4 <MX_USART2_UART_Init+0x58>)
 80011c2:	220c      	movs	r2, #12
 80011c4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	; (80011f4 <MX_USART2_UART_Init+0x58>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011cc:	4b09      	ldr	r3, [pc, #36]	; (80011f4 <MX_USART2_UART_Init+0x58>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011d2:	4b08      	ldr	r3, [pc, #32]	; (80011f4 <MX_USART2_UART_Init+0x58>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011d8:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <MX_USART2_UART_Init+0x58>)
 80011da:	2200      	movs	r2, #0
 80011dc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	; (80011f4 <MX_USART2_UART_Init+0x58>)
 80011e0:	f005 f978 	bl	80064d4 <HAL_UART_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ea:	f000 faa1 	bl	8001730 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	20000148 	.word	0x20000148
 80011f8:	40004400 	.word	0x40004400

080011fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	; 0x28
 8001200:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001202:	f107 0314 	add.w	r3, r7, #20
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001212:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <MX_GPIO_Init+0xc4>)
 8001214:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001216:	4a2a      	ldr	r2, [pc, #168]	; (80012c0 <MX_GPIO_Init+0xc4>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121e:	4b28      	ldr	r3, [pc, #160]	; (80012c0 <MX_GPIO_Init+0xc4>)
 8001220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800122a:	4b25      	ldr	r3, [pc, #148]	; (80012c0 <MX_GPIO_Init+0xc4>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a24      	ldr	r2, [pc, #144]	; (80012c0 <MX_GPIO_Init+0xc4>)
 8001230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <MX_GPIO_Init+0xc4>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <MX_GPIO_Init+0xc4>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a1e      	ldr	r2, [pc, #120]	; (80012c0 <MX_GPIO_Init+0xc4>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b1c      	ldr	r3, [pc, #112]	; (80012c0 <MX_GPIO_Init+0xc4>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125a:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_GPIO_Init+0xc4>)
 800125c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800125e:	4a18      	ldr	r2, [pc, #96]	; (80012c0 <MX_GPIO_Init+0xc4>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001266:	4b16      	ldr	r3, [pc, #88]	; (80012c0 <MX_GPIO_Init+0xc4>)
 8001268:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001272:	2200      	movs	r2, #0
 8001274:	2120      	movs	r1, #32
 8001276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127a:	f002 fddf 	bl	8003e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800127e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001282:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001284:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001288:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800128e:	f107 0314 	add.w	r3, r7, #20
 8001292:	4619      	mov	r1, r3
 8001294:	480b      	ldr	r0, [pc, #44]	; (80012c4 <MX_GPIO_Init+0xc8>)
 8001296:	f002 fc27 	bl	8003ae8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800129a:	2320      	movs	r3, #32
 800129c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800129e:	2301      	movs	r3, #1
 80012a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a2:	2300      	movs	r3, #0
 80012a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012aa:	f107 0314 	add.w	r3, r7, #20
 80012ae:	4619      	mov	r1, r3
 80012b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012b4:	f002 fc18 	bl	8003ae8 <HAL_GPIO_Init>

}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	40021000 	.word	0x40021000
 80012c4:	48000800 	.word	0x48000800

080012c8 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(int ADC_INPUT)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
				SSD1306_Putc ((char)((int)(Temp)%10+48), &Font_11x18, 1);
				SSD1306_UpdateScreen(); // update screen
				HAL_Delay(200);
	}*/
	//////////////////
	switch (ADC_INPUT)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2b01      	cmp	r3, #1
 80012d4:	d004      	beq.n	80012e0 <Task_action+0x18>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b02      	cmp	r3, #2
 80012da:	f000 8095 	beq.w	8001408 <Task_action+0x140>
		SSD1306_Puts (".", &Font_11x18, 1);
		SSD1306_Putc ((char)((int)(Temp)%10+48), &Font_11x18, 1);
		SSD1306_UpdateScreen(); // update screen
		break;
	default:
		break;
 80012de:	e1ce      	b.n	800167e <Task_action+0x3b6>
		ADC_Select_CH1();
 80012e0:	f7ff fd6e 	bl	8000dc0 <ADC_Select_CH1>
		HAL_ADC_Start(&hadc1);
 80012e4:	483f      	ldr	r0, [pc, #252]	; (80013e4 <Task_action+0x11c>)
 80012e6:	f001 fb05 	bl	80028f4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 80012ea:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80012ee:	483d      	ldr	r0, [pc, #244]	; (80013e4 <Task_action+0x11c>)
 80012f0:	f001 fbee 	bl	8002ad0 <HAL_ADC_PollForConversion>
		ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 80012f4:	483b      	ldr	r0, [pc, #236]	; (80013e4 <Task_action+0x11c>)
 80012f6:	f001 fcc3 	bl	8002c80 <HAL_ADC_GetValue>
 80012fa:	4603      	mov	r3, r0
 80012fc:	b29a      	uxth	r2, r3
 80012fe:	4b3a      	ldr	r3, [pc, #232]	; (80013e8 <Task_action+0x120>)
 8001300:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8001302:	4838      	ldr	r0, [pc, #224]	; (80013e4 <Task_action+0x11c>)
 8001304:	f001 fbb0 	bl	8002a68 <HAL_ADC_Stop>
		sprintf(msg,"%hu\r\n",ADC_VAL[0]);
 8001308:	4b37      	ldr	r3, [pc, #220]	; (80013e8 <Task_action+0x120>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4937      	ldr	r1, [pc, #220]	; (80013ec <Task_action+0x124>)
 8001310:	4837      	ldr	r0, [pc, #220]	; (80013f0 <Task_action+0x128>)
 8001312:	f008 fd3b 	bl	8009d8c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001316:	4836      	ldr	r0, [pc, #216]	; (80013f0 <Task_action+0x128>)
 8001318:	f7fe ff5a 	bl	80001d0 <strlen>
 800131c:	4603      	mov	r3, r0
 800131e:	b29a      	uxth	r2, r3
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
 8001324:	4932      	ldr	r1, [pc, #200]	; (80013f0 <Task_action+0x128>)
 8001326:	4833      	ldr	r0, [pc, #204]	; (80013f4 <Task_action+0x12c>)
 8001328:	f005 f922 	bl	8006570 <HAL_UART_Transmit>
		SSD1306_GotoXY (60,0); // goto 10, 10
 800132c:	2100      	movs	r1, #0
 800132e:	203c      	movs	r0, #60	; 0x3c
 8001330:	f000 fb6e 	bl	8001a10 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(ADC_VAL[0]/1000+48), &Font_11x18, 1);
 8001334:	4b2c      	ldr	r3, [pc, #176]	; (80013e8 <Task_action+0x120>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	4a2f      	ldr	r2, [pc, #188]	; (80013f8 <Task_action+0x130>)
 800133a:	fba2 2303 	umull	r2, r3, r2, r3
 800133e:	099b      	lsrs	r3, r3, #6
 8001340:	b29b      	uxth	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	3330      	adds	r3, #48	; 0x30
 8001346:	b2db      	uxtb	r3, r3
 8001348:	2201      	movs	r2, #1
 800134a:	492c      	ldr	r1, [pc, #176]	; (80013fc <Task_action+0x134>)
 800134c:	4618      	mov	r0, r3
 800134e:	f000 fb75 	bl	8001a3c <SSD1306_Putc>
		SSD1306_Putc ((char)((ADC_VAL[0]%1000)/100+48), &Font_11x18, 1);
 8001352:	4b25      	ldr	r3, [pc, #148]	; (80013e8 <Task_action+0x120>)
 8001354:	881b      	ldrh	r3, [r3, #0]
 8001356:	4a28      	ldr	r2, [pc, #160]	; (80013f8 <Task_action+0x130>)
 8001358:	fba2 1203 	umull	r1, r2, r2, r3
 800135c:	0992      	lsrs	r2, r2, #6
 800135e:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001362:	fb01 f202 	mul.w	r2, r1, r2
 8001366:	1a9b      	subs	r3, r3, r2
 8001368:	b29b      	uxth	r3, r3
 800136a:	4a25      	ldr	r2, [pc, #148]	; (8001400 <Task_action+0x138>)
 800136c:	fba2 2303 	umull	r2, r3, r2, r3
 8001370:	095b      	lsrs	r3, r3, #5
 8001372:	b29b      	uxth	r3, r3
 8001374:	b2db      	uxtb	r3, r3
 8001376:	3330      	adds	r3, #48	; 0x30
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2201      	movs	r2, #1
 800137c:	491f      	ldr	r1, [pc, #124]	; (80013fc <Task_action+0x134>)
 800137e:	4618      	mov	r0, r3
 8001380:	f000 fb5c 	bl	8001a3c <SSD1306_Putc>
		SSD1306_Putc ((char)((ADC_VAL[0]%100)/10+48), &Font_11x18, 1);
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <Task_action+0x120>)
 8001386:	881b      	ldrh	r3, [r3, #0]
 8001388:	4a1d      	ldr	r2, [pc, #116]	; (8001400 <Task_action+0x138>)
 800138a:	fba2 1203 	umull	r1, r2, r2, r3
 800138e:	0952      	lsrs	r2, r2, #5
 8001390:	2164      	movs	r1, #100	; 0x64
 8001392:	fb01 f202 	mul.w	r2, r1, r2
 8001396:	1a9b      	subs	r3, r3, r2
 8001398:	b29b      	uxth	r3, r3
 800139a:	4a1a      	ldr	r2, [pc, #104]	; (8001404 <Task_action+0x13c>)
 800139c:	fba2 2303 	umull	r2, r3, r2, r3
 80013a0:	08db      	lsrs	r3, r3, #3
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	3330      	adds	r3, #48	; 0x30
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2201      	movs	r2, #1
 80013ac:	4913      	ldr	r1, [pc, #76]	; (80013fc <Task_action+0x134>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fb44 	bl	8001a3c <SSD1306_Putc>
		SSD1306_Putc ((char)(ADC_VAL[0]%10+48), &Font_11x18, 1);
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <Task_action+0x120>)
 80013b6:	881a      	ldrh	r2, [r3, #0]
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <Task_action+0x13c>)
 80013ba:	fba3 1302 	umull	r1, r3, r3, r2
 80013be:	08d9      	lsrs	r1, r3, #3
 80013c0:	460b      	mov	r3, r1
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	440b      	add	r3, r1
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	3330      	adds	r3, #48	; 0x30
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2201      	movs	r2, #1
 80013d4:	4909      	ldr	r1, [pc, #36]	; (80013fc <Task_action+0x134>)
 80013d6:	4618      	mov	r0, r3
 80013d8:	f000 fb30 	bl	8001a3c <SSD1306_Putc>
		SSD1306_UpdateScreen(); // update screen
 80013dc:	f000 fa72 	bl	80018c4 <SSD1306_UpdateScreen>
		break;
 80013e0:	e14d      	b.n	800167e <Task_action+0x3b6>
 80013e2:	bf00      	nop
 80013e4:	20000098 	.word	0x20000098
 80013e8:	200001d4 	.word	0x200001d4
 80013ec:	0800a540 	.word	0x0800a540
 80013f0:	200001e0 	.word	0x200001e0
 80013f4:	20000148 	.word	0x20000148
 80013f8:	10624dd3 	.word	0x10624dd3
 80013fc:	20000000 	.word	0x20000000
 8001400:	51eb851f 	.word	0x51eb851f
 8001404:	cccccccd 	.word	0xcccccccd
		ADC_Select_CH2();
 8001408:	f7ff fcfe 	bl	8000e08 <ADC_Select_CH2>
		HAL_ADC_Start(&hadc1);
 800140c:	48a6      	ldr	r0, [pc, #664]	; (80016a8 <Task_action+0x3e0>)
 800140e:	f001 fa71 	bl	80028f4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8001412:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001416:	48a4      	ldr	r0, [pc, #656]	; (80016a8 <Task_action+0x3e0>)
 8001418:	f001 fb5a 	bl	8002ad0 <HAL_ADC_PollForConversion>
		ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 800141c:	48a2      	ldr	r0, [pc, #648]	; (80016a8 <Task_action+0x3e0>)
 800141e:	f001 fc2f 	bl	8002c80 <HAL_ADC_GetValue>
 8001422:	4603      	mov	r3, r0
 8001424:	b29a      	uxth	r2, r3
 8001426:	4ba1      	ldr	r3, [pc, #644]	; (80016ac <Task_action+0x3e4>)
 8001428:	805a      	strh	r2, [r3, #2]
		HAL_ADC_Stop(&hadc1);
 800142a:	489f      	ldr	r0, [pc, #636]	; (80016a8 <Task_action+0x3e0>)
 800142c:	f001 fb1c 	bl	8002a68 <HAL_ADC_Stop>
		ADC_Select_CHTemp();
 8001430:	f7ff fd0e 	bl	8000e50 <ADC_Select_CHTemp>
		HAL_ADC_Start(&hadc1);
 8001434:	489c      	ldr	r0, [pc, #624]	; (80016a8 <Task_action+0x3e0>)
 8001436:	f001 fa5d 	bl	80028f4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 800143a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800143e:	489a      	ldr	r0, [pc, #616]	; (80016a8 <Task_action+0x3e0>)
 8001440:	f001 fb46 	bl	8002ad0 <HAL_ADC_PollForConversion>
		ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8001444:	4898      	ldr	r0, [pc, #608]	; (80016a8 <Task_action+0x3e0>)
 8001446:	f001 fc1b 	bl	8002c80 <HAL_ADC_GetValue>
 800144a:	4603      	mov	r3, r0
 800144c:	b29a      	uxth	r2, r3
 800144e:	4b97      	ldr	r3, [pc, #604]	; (80016ac <Task_action+0x3e4>)
 8001450:	809a      	strh	r2, [r3, #4]
		HAL_ADC_Stop(&hadc1);
 8001452:	4895      	ldr	r0, [pc, #596]	; (80016a8 <Task_action+0x3e0>)
 8001454:	f001 fb08 	bl	8002a68 <HAL_ADC_Stop>
		Temp = ((3.3*ADC_VAL[2]/4095 - V25)/Avg_Slope)+25;
 8001458:	4b94      	ldr	r3, [pc, #592]	; (80016ac <Task_action+0x3e4>)
 800145a:	889b      	ldrh	r3, [r3, #4]
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff f861 	bl	8000524 <__aeabi_i2d>
 8001462:	a389      	add	r3, pc, #548	; (adr r3, 8001688 <Task_action+0x3c0>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f8c6 	bl	80005f8 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	4610      	mov	r0, r2
 8001472:	4619      	mov	r1, r3
 8001474:	a386      	add	r3, pc, #536	; (adr r3, 8001690 <Task_action+0x3c8>)
 8001476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147a:	f7ff f9e7 	bl	800084c <__aeabi_ddiv>
 800147e:	4602      	mov	r2, r0
 8001480:	460b      	mov	r3, r1
 8001482:	4610      	mov	r0, r2
 8001484:	4619      	mov	r1, r3
 8001486:	a384      	add	r3, pc, #528	; (adr r3, 8001698 <Task_action+0x3d0>)
 8001488:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148c:	f7fe fefc 	bl	8000288 <__aeabi_dsub>
 8001490:	4602      	mov	r2, r0
 8001492:	460b      	mov	r3, r1
 8001494:	4610      	mov	r0, r2
 8001496:	4619      	mov	r1, r3
 8001498:	a381      	add	r3, pc, #516	; (adr r3, 80016a0 <Task_action+0x3d8>)
 800149a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800149e:	f7ff f9d5 	bl	800084c <__aeabi_ddiv>
 80014a2:	4602      	mov	r2, r0
 80014a4:	460b      	mov	r3, r1
 80014a6:	4610      	mov	r0, r2
 80014a8:	4619      	mov	r1, r3
 80014aa:	f04f 0200 	mov.w	r2, #0
 80014ae:	4b80      	ldr	r3, [pc, #512]	; (80016b0 <Task_action+0x3e8>)
 80014b0:	f7fe feec 	bl	800028c <__adddf3>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4610      	mov	r0, r2
 80014ba:	4619      	mov	r1, r3
 80014bc:	f7ff faae 	bl	8000a1c <__aeabi_d2f>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a7c      	ldr	r2, [pc, #496]	; (80016b4 <Task_action+0x3ec>)
 80014c4:	6013      	str	r3, [r2, #0]
		sprintf(msg,"%hu\r\n",ADC_VAL[1]);
 80014c6:	4b79      	ldr	r3, [pc, #484]	; (80016ac <Task_action+0x3e4>)
 80014c8:	885b      	ldrh	r3, [r3, #2]
 80014ca:	461a      	mov	r2, r3
 80014cc:	497a      	ldr	r1, [pc, #488]	; (80016b8 <Task_action+0x3f0>)
 80014ce:	487b      	ldr	r0, [pc, #492]	; (80016bc <Task_action+0x3f4>)
 80014d0:	f008 fc5c 	bl	8009d8c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80014d4:	4879      	ldr	r0, [pc, #484]	; (80016bc <Task_action+0x3f4>)
 80014d6:	f7fe fe7b 	bl	80001d0 <strlen>
 80014da:	4603      	mov	r3, r0
 80014dc:	b29a      	uxth	r2, r3
 80014de:	f04f 33ff 	mov.w	r3, #4294967295
 80014e2:	4976      	ldr	r1, [pc, #472]	; (80016bc <Task_action+0x3f4>)
 80014e4:	4876      	ldr	r0, [pc, #472]	; (80016c0 <Task_action+0x3f8>)
 80014e6:	f005 f843 	bl	8006570 <HAL_UART_Transmit>
		sprintf(msg,"%hu\r\n",(uint16_t)Temp);
 80014ea:	4b72      	ldr	r3, [pc, #456]	; (80016b4 <Task_action+0x3ec>)
 80014ec:	edd3 7a00 	vldr	s15, [r3]
 80014f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014f4:	ee17 3a90 	vmov	r3, s15
 80014f8:	b29b      	uxth	r3, r3
 80014fa:	461a      	mov	r2, r3
 80014fc:	496e      	ldr	r1, [pc, #440]	; (80016b8 <Task_action+0x3f0>)
 80014fe:	486f      	ldr	r0, [pc, #444]	; (80016bc <Task_action+0x3f4>)
 8001500:	f008 fc44 	bl	8009d8c <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001504:	486d      	ldr	r0, [pc, #436]	; (80016bc <Task_action+0x3f4>)
 8001506:	f7fe fe63 	bl	80001d0 <strlen>
 800150a:	4603      	mov	r3, r0
 800150c:	b29a      	uxth	r2, r3
 800150e:	f04f 33ff 	mov.w	r3, #4294967295
 8001512:	496a      	ldr	r1, [pc, #424]	; (80016bc <Task_action+0x3f4>)
 8001514:	486a      	ldr	r0, [pc, #424]	; (80016c0 <Task_action+0x3f8>)
 8001516:	f005 f82b 	bl	8006570 <HAL_UART_Transmit>
		SSD1306_GotoXY (60,20); // goto 10, 10
 800151a:	2114      	movs	r1, #20
 800151c:	203c      	movs	r0, #60	; 0x3c
 800151e:	f000 fa77 	bl	8001a10 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(ADC_VAL[1]/1000+48), &Font_11x18, 1);
 8001522:	4b62      	ldr	r3, [pc, #392]	; (80016ac <Task_action+0x3e4>)
 8001524:	885b      	ldrh	r3, [r3, #2]
 8001526:	4a67      	ldr	r2, [pc, #412]	; (80016c4 <Task_action+0x3fc>)
 8001528:	fba2 2303 	umull	r2, r3, r2, r3
 800152c:	099b      	lsrs	r3, r3, #6
 800152e:	b29b      	uxth	r3, r3
 8001530:	b2db      	uxtb	r3, r3
 8001532:	3330      	adds	r3, #48	; 0x30
 8001534:	b2db      	uxtb	r3, r3
 8001536:	2201      	movs	r2, #1
 8001538:	4963      	ldr	r1, [pc, #396]	; (80016c8 <Task_action+0x400>)
 800153a:	4618      	mov	r0, r3
 800153c:	f000 fa7e 	bl	8001a3c <SSD1306_Putc>
		SSD1306_Putc ((char)((ADC_VAL[1]%1000)/100+48), &Font_11x18, 1);
 8001540:	4b5a      	ldr	r3, [pc, #360]	; (80016ac <Task_action+0x3e4>)
 8001542:	885b      	ldrh	r3, [r3, #2]
 8001544:	4a5f      	ldr	r2, [pc, #380]	; (80016c4 <Task_action+0x3fc>)
 8001546:	fba2 1203 	umull	r1, r2, r2, r3
 800154a:	0992      	lsrs	r2, r2, #6
 800154c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001550:	fb01 f202 	mul.w	r2, r1, r2
 8001554:	1a9b      	subs	r3, r3, r2
 8001556:	b29b      	uxth	r3, r3
 8001558:	4a5c      	ldr	r2, [pc, #368]	; (80016cc <Task_action+0x404>)
 800155a:	fba2 2303 	umull	r2, r3, r2, r3
 800155e:	095b      	lsrs	r3, r3, #5
 8001560:	b29b      	uxth	r3, r3
 8001562:	b2db      	uxtb	r3, r3
 8001564:	3330      	adds	r3, #48	; 0x30
 8001566:	b2db      	uxtb	r3, r3
 8001568:	2201      	movs	r2, #1
 800156a:	4957      	ldr	r1, [pc, #348]	; (80016c8 <Task_action+0x400>)
 800156c:	4618      	mov	r0, r3
 800156e:	f000 fa65 	bl	8001a3c <SSD1306_Putc>
		SSD1306_Putc ((char)((ADC_VAL[1]%100)/10+48), &Font_11x18, 1);
 8001572:	4b4e      	ldr	r3, [pc, #312]	; (80016ac <Task_action+0x3e4>)
 8001574:	885b      	ldrh	r3, [r3, #2]
 8001576:	4a55      	ldr	r2, [pc, #340]	; (80016cc <Task_action+0x404>)
 8001578:	fba2 1203 	umull	r1, r2, r2, r3
 800157c:	0952      	lsrs	r2, r2, #5
 800157e:	2164      	movs	r1, #100	; 0x64
 8001580:	fb01 f202 	mul.w	r2, r1, r2
 8001584:	1a9b      	subs	r3, r3, r2
 8001586:	b29b      	uxth	r3, r3
 8001588:	4a51      	ldr	r2, [pc, #324]	; (80016d0 <Task_action+0x408>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	08db      	lsrs	r3, r3, #3
 8001590:	b29b      	uxth	r3, r3
 8001592:	b2db      	uxtb	r3, r3
 8001594:	3330      	adds	r3, #48	; 0x30
 8001596:	b2db      	uxtb	r3, r3
 8001598:	2201      	movs	r2, #1
 800159a:	494b      	ldr	r1, [pc, #300]	; (80016c8 <Task_action+0x400>)
 800159c:	4618      	mov	r0, r3
 800159e:	f000 fa4d 	bl	8001a3c <SSD1306_Putc>
		SSD1306_Putc ((char)(ADC_VAL[1]%10+48), &Font_11x18, 1);
 80015a2:	4b42      	ldr	r3, [pc, #264]	; (80016ac <Task_action+0x3e4>)
 80015a4:	885a      	ldrh	r2, [r3, #2]
 80015a6:	4b4a      	ldr	r3, [pc, #296]	; (80016d0 <Task_action+0x408>)
 80015a8:	fba3 1302 	umull	r1, r3, r3, r2
 80015ac:	08d9      	lsrs	r1, r3, #3
 80015ae:	460b      	mov	r3, r1
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	440b      	add	r3, r1
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	1ad3      	subs	r3, r2, r3
 80015b8:	b29b      	uxth	r3, r3
 80015ba:	b2db      	uxtb	r3, r3
 80015bc:	3330      	adds	r3, #48	; 0x30
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	2201      	movs	r2, #1
 80015c2:	4941      	ldr	r1, [pc, #260]	; (80016c8 <Task_action+0x400>)
 80015c4:	4618      	mov	r0, r3
 80015c6:	f000 fa39 	bl	8001a3c <SSD1306_Putc>
		SSD1306_GotoXY (60,42); // goto 10, 10
 80015ca:	212a      	movs	r1, #42	; 0x2a
 80015cc:	203c      	movs	r0, #60	; 0x3c
 80015ce:	f000 fa1f 	bl	8001a10 <SSD1306_GotoXY>
		SSD1306_Putc ((char)((int)(Temp)/100+48), &Font_11x18, 1);
 80015d2:	4b38      	ldr	r3, [pc, #224]	; (80016b4 <Task_action+0x3ec>)
 80015d4:	edd3 7a00 	vldr	s15, [r3]
 80015d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015dc:	ee17 1a90 	vmov	r1, s15
 80015e0:	4b3a      	ldr	r3, [pc, #232]	; (80016cc <Task_action+0x404>)
 80015e2:	fb83 2301 	smull	r2, r3, r3, r1
 80015e6:	115a      	asrs	r2, r3, #5
 80015e8:	17cb      	asrs	r3, r1, #31
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	3330      	adds	r3, #48	; 0x30
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	2201      	movs	r2, #1
 80015f4:	4934      	ldr	r1, [pc, #208]	; (80016c8 <Task_action+0x400>)
 80015f6:	4618      	mov	r0, r3
 80015f8:	f000 fa20 	bl	8001a3c <SSD1306_Putc>
		SSD1306_Putc ((char)(((int)(Temp)%100)/10+48), &Font_11x18, 1);
 80015fc:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <Task_action+0x3ec>)
 80015fe:	edd3 7a00 	vldr	s15, [r3]
 8001602:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001606:	ee17 2a90 	vmov	r2, s15
 800160a:	4b30      	ldr	r3, [pc, #192]	; (80016cc <Task_action+0x404>)
 800160c:	fb83 1302 	smull	r1, r3, r3, r2
 8001610:	1159      	asrs	r1, r3, #5
 8001612:	17d3      	asrs	r3, r2, #31
 8001614:	1acb      	subs	r3, r1, r3
 8001616:	2164      	movs	r1, #100	; 0x64
 8001618:	fb01 f303 	mul.w	r3, r1, r3
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	4a2d      	ldr	r2, [pc, #180]	; (80016d4 <Task_action+0x40c>)
 8001620:	fb82 1203 	smull	r1, r2, r2, r3
 8001624:	1092      	asrs	r2, r2, #2
 8001626:	17db      	asrs	r3, r3, #31
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	b2db      	uxtb	r3, r3
 800162c:	3330      	adds	r3, #48	; 0x30
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2201      	movs	r2, #1
 8001632:	4925      	ldr	r1, [pc, #148]	; (80016c8 <Task_action+0x400>)
 8001634:	4618      	mov	r0, r3
 8001636:	f000 fa01 	bl	8001a3c <SSD1306_Putc>
		SSD1306_Puts (".", &Font_11x18, 1);
 800163a:	2201      	movs	r2, #1
 800163c:	4922      	ldr	r1, [pc, #136]	; (80016c8 <Task_action+0x400>)
 800163e:	4826      	ldr	r0, [pc, #152]	; (80016d8 <Task_action+0x410>)
 8001640:	f000 fa7c 	bl	8001b3c <SSD1306_Puts>
		SSD1306_Putc ((char)((int)(Temp)%10+48), &Font_11x18, 1);
 8001644:	4b1b      	ldr	r3, [pc, #108]	; (80016b4 <Task_action+0x3ec>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800164e:	ee17 1a90 	vmov	r1, s15
 8001652:	4b20      	ldr	r3, [pc, #128]	; (80016d4 <Task_action+0x40c>)
 8001654:	fb83 2301 	smull	r2, r3, r3, r1
 8001658:	109a      	asrs	r2, r3, #2
 800165a:	17cb      	asrs	r3, r1, #31
 800165c:	1ad2      	subs	r2, r2, r3
 800165e:	4613      	mov	r3, r2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	1aca      	subs	r2, r1, r3
 8001668:	b2d3      	uxtb	r3, r2
 800166a:	3330      	adds	r3, #48	; 0x30
 800166c:	b2db      	uxtb	r3, r3
 800166e:	2201      	movs	r2, #1
 8001670:	4915      	ldr	r1, [pc, #84]	; (80016c8 <Task_action+0x400>)
 8001672:	4618      	mov	r0, r3
 8001674:	f000 f9e2 	bl	8001a3c <SSD1306_Putc>
		SSD1306_UpdateScreen(); // update screen
 8001678:	f000 f924 	bl	80018c4 <SSD1306_UpdateScreen>
		break;
 800167c:	bf00      	nop
	}
	//SSD1306_UpdateScreen(); // update screen
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	66666666 	.word	0x66666666
 800168c:	400a6666 	.word	0x400a6666
 8001690:	00000000 	.word	0x00000000
 8001694:	40affe00 	.word	0x40affe00
 8001698:	851eb852 	.word	0x851eb852
 800169c:	3fe851eb 	.word	0x3fe851eb
 80016a0:	47ae147b 	.word	0x47ae147b
 80016a4:	3f647ae1 	.word	0x3f647ae1
 80016a8:	20000098 	.word	0x20000098
 80016ac:	200001d4 	.word	0x200001d4
 80016b0:	40390000 	.word	0x40390000
 80016b4:	200001dc 	.word	0x200001dc
 80016b8:	0800a540 	.word	0x0800a540
 80016bc:	200001e0 	.word	0x200001e0
 80016c0:	20000148 	.word	0x20000148
 80016c4:	10624dd3 	.word	0x10624dd3
 80016c8:	20000000 	.word	0x20000000
 80016cc:	51eb851f 	.word	0x51eb851f
 80016d0:	cccccccd 	.word	0xcccccccd
 80016d4:	66666667 	.word	0x66666667
 80016d8:	0800a548 	.word	0x0800a548

080016dc <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Task_action(1);
 80016e4:	2001      	movs	r0, #1
 80016e6:	f7ff fdef 	bl	80012c8 <Task_action>
    osDelay(1000);
 80016ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016ee:	f005 fd5b 	bl	80071a8 <osDelay>
	Task_action(1);
 80016f2:	e7f7      	b.n	80016e4 <StartTask1+0x8>

080016f4 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	Task_action(2);
 80016fc:	2002      	movs	r0, #2
 80016fe:	f7ff fde3 	bl	80012c8 <Task_action>
    osDelay(2000);
 8001702:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001706:	f005 fd4f 	bl	80071a8 <osDelay>
	Task_action(2);
 800170a:	e7f7      	b.n	80016fc <StartTask2+0x8>

0800170c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	4a04      	ldr	r2, [pc, #16]	; (800172c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800171a:	4293      	cmp	r3, r2
 800171c:	d101      	bne.n	8001722 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800171e:	f000 fd41 	bl	80021a4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40001000 	.word	0x40001000

08001730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001730:	b480      	push	{r7}
 8001732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001734:	b672      	cpsid	i
}
 8001736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001738:	e7fe      	b.n	8001738 <Error_Handler+0x8>
	...

0800173c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001742:	f000 fa21 	bl	8001b88 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8001746:	f644 6320 	movw	r3, #20000	; 0x4e20
 800174a:	2201      	movs	r2, #1
 800174c:	2178      	movs	r1, #120	; 0x78
 800174e:	485b      	ldr	r0, [pc, #364]	; (80018bc <SSD1306_Init+0x180>)
 8001750:	f002 fd10 	bl	8004174 <HAL_I2C_IsDeviceReady>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800175a:	2300      	movs	r3, #0
 800175c:	e0a9      	b.n	80018b2 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800175e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8001762:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001764:	e002      	b.n	800176c <SSD1306_Init+0x30>
		p--;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3b01      	subs	r3, #1
 800176a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d1f9      	bne.n	8001766 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001772:	22ae      	movs	r2, #174	; 0xae
 8001774:	2100      	movs	r1, #0
 8001776:	2078      	movs	r0, #120	; 0x78
 8001778:	f000 fa82 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800177c:	2220      	movs	r2, #32
 800177e:	2100      	movs	r1, #0
 8001780:	2078      	movs	r0, #120	; 0x78
 8001782:	f000 fa7d 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8001786:	2210      	movs	r2, #16
 8001788:	2100      	movs	r1, #0
 800178a:	2078      	movs	r0, #120	; 0x78
 800178c:	f000 fa78 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001790:	22b0      	movs	r2, #176	; 0xb0
 8001792:	2100      	movs	r1, #0
 8001794:	2078      	movs	r0, #120	; 0x78
 8001796:	f000 fa73 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800179a:	22c8      	movs	r2, #200	; 0xc8
 800179c:	2100      	movs	r1, #0
 800179e:	2078      	movs	r0, #120	; 0x78
 80017a0:	f000 fa6e 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80017a4:	2200      	movs	r2, #0
 80017a6:	2100      	movs	r1, #0
 80017a8:	2078      	movs	r0, #120	; 0x78
 80017aa:	f000 fa69 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80017ae:	2210      	movs	r2, #16
 80017b0:	2100      	movs	r1, #0
 80017b2:	2078      	movs	r0, #120	; 0x78
 80017b4:	f000 fa64 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80017b8:	2240      	movs	r2, #64	; 0x40
 80017ba:	2100      	movs	r1, #0
 80017bc:	2078      	movs	r0, #120	; 0x78
 80017be:	f000 fa5f 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80017c2:	2281      	movs	r2, #129	; 0x81
 80017c4:	2100      	movs	r1, #0
 80017c6:	2078      	movs	r0, #120	; 0x78
 80017c8:	f000 fa5a 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80017cc:	22ff      	movs	r2, #255	; 0xff
 80017ce:	2100      	movs	r1, #0
 80017d0:	2078      	movs	r0, #120	; 0x78
 80017d2:	f000 fa55 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80017d6:	22a1      	movs	r2, #161	; 0xa1
 80017d8:	2100      	movs	r1, #0
 80017da:	2078      	movs	r0, #120	; 0x78
 80017dc:	f000 fa50 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80017e0:	22a6      	movs	r2, #166	; 0xa6
 80017e2:	2100      	movs	r1, #0
 80017e4:	2078      	movs	r0, #120	; 0x78
 80017e6:	f000 fa4b 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80017ea:	22a8      	movs	r2, #168	; 0xa8
 80017ec:	2100      	movs	r1, #0
 80017ee:	2078      	movs	r0, #120	; 0x78
 80017f0:	f000 fa46 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80017f4:	223f      	movs	r2, #63	; 0x3f
 80017f6:	2100      	movs	r1, #0
 80017f8:	2078      	movs	r0, #120	; 0x78
 80017fa:	f000 fa41 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017fe:	22a4      	movs	r2, #164	; 0xa4
 8001800:	2100      	movs	r1, #0
 8001802:	2078      	movs	r0, #120	; 0x78
 8001804:	f000 fa3c 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001808:	22d3      	movs	r2, #211	; 0xd3
 800180a:	2100      	movs	r1, #0
 800180c:	2078      	movs	r0, #120	; 0x78
 800180e:	f000 fa37 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001812:	2200      	movs	r2, #0
 8001814:	2100      	movs	r1, #0
 8001816:	2078      	movs	r0, #120	; 0x78
 8001818:	f000 fa32 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800181c:	22d5      	movs	r2, #213	; 0xd5
 800181e:	2100      	movs	r1, #0
 8001820:	2078      	movs	r0, #120	; 0x78
 8001822:	f000 fa2d 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001826:	22f0      	movs	r2, #240	; 0xf0
 8001828:	2100      	movs	r1, #0
 800182a:	2078      	movs	r0, #120	; 0x78
 800182c:	f000 fa28 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001830:	22d9      	movs	r2, #217	; 0xd9
 8001832:	2100      	movs	r1, #0
 8001834:	2078      	movs	r0, #120	; 0x78
 8001836:	f000 fa23 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800183a:	2222      	movs	r2, #34	; 0x22
 800183c:	2100      	movs	r1, #0
 800183e:	2078      	movs	r0, #120	; 0x78
 8001840:	f000 fa1e 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001844:	22da      	movs	r2, #218	; 0xda
 8001846:	2100      	movs	r1, #0
 8001848:	2078      	movs	r0, #120	; 0x78
 800184a:	f000 fa19 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800184e:	2212      	movs	r2, #18
 8001850:	2100      	movs	r1, #0
 8001852:	2078      	movs	r0, #120	; 0x78
 8001854:	f000 fa14 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001858:	22db      	movs	r2, #219	; 0xdb
 800185a:	2100      	movs	r1, #0
 800185c:	2078      	movs	r0, #120	; 0x78
 800185e:	f000 fa0f 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001862:	2220      	movs	r2, #32
 8001864:	2100      	movs	r1, #0
 8001866:	2078      	movs	r0, #120	; 0x78
 8001868:	f000 fa0a 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800186c:	228d      	movs	r2, #141	; 0x8d
 800186e:	2100      	movs	r1, #0
 8001870:	2078      	movs	r0, #120	; 0x78
 8001872:	f000 fa05 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8001876:	2214      	movs	r2, #20
 8001878:	2100      	movs	r1, #0
 800187a:	2078      	movs	r0, #120	; 0x78
 800187c:	f000 fa00 	bl	8001c80 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001880:	22af      	movs	r2, #175	; 0xaf
 8001882:	2100      	movs	r1, #0
 8001884:	2078      	movs	r0, #120	; 0x78
 8001886:	f000 f9fb 	bl	8001c80 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800188a:	222e      	movs	r2, #46	; 0x2e
 800188c:	2100      	movs	r1, #0
 800188e:	2078      	movs	r0, #120	; 0x78
 8001890:	f000 f9f6 	bl	8001c80 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001894:	2000      	movs	r0, #0
 8001896:	f000 f843 	bl	8001920 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800189a:	f000 f813 	bl	80018c4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800189e:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <SSD1306_Init+0x184>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80018a4:	4b06      	ldr	r3, [pc, #24]	; (80018c0 <SSD1306_Init+0x184>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <SSD1306_Init+0x184>)
 80018ac:	2201      	movs	r2, #1
 80018ae:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80018b0:	2301      	movs	r3, #1
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	200000fc 	.word	0x200000fc
 80018c0:	200005e8 	.word	0x200005e8

080018c4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80018ca:	2300      	movs	r3, #0
 80018cc:	71fb      	strb	r3, [r7, #7]
 80018ce:	e01d      	b.n	800190c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018d0:	79fb      	ldrb	r3, [r7, #7]
 80018d2:	3b50      	subs	r3, #80	; 0x50
 80018d4:	b2db      	uxtb	r3, r3
 80018d6:	461a      	mov	r2, r3
 80018d8:	2100      	movs	r1, #0
 80018da:	2078      	movs	r0, #120	; 0x78
 80018dc:	f000 f9d0 	bl	8001c80 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018e0:	2200      	movs	r2, #0
 80018e2:	2100      	movs	r1, #0
 80018e4:	2078      	movs	r0, #120	; 0x78
 80018e6:	f000 f9cb 	bl	8001c80 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018ea:	2210      	movs	r2, #16
 80018ec:	2100      	movs	r1, #0
 80018ee:	2078      	movs	r0, #120	; 0x78
 80018f0:	f000 f9c6 	bl	8001c80 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80018f4:	79fb      	ldrb	r3, [r7, #7]
 80018f6:	01db      	lsls	r3, r3, #7
 80018f8:	4a08      	ldr	r2, [pc, #32]	; (800191c <SSD1306_UpdateScreen+0x58>)
 80018fa:	441a      	add	r2, r3
 80018fc:	2380      	movs	r3, #128	; 0x80
 80018fe:	2140      	movs	r1, #64	; 0x40
 8001900:	2078      	movs	r0, #120	; 0x78
 8001902:	f000 f957 	bl	8001bb4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	3301      	adds	r3, #1
 800190a:	71fb      	strb	r3, [r7, #7]
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	2b07      	cmp	r3, #7
 8001910:	d9de      	bls.n	80018d0 <SSD1306_UpdateScreen+0xc>
	}
}
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	200001e8 	.word	0x200001e8

08001920 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001920:	b580      	push	{r7, lr}
 8001922:	b082      	sub	sp, #8
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800192a:	79fb      	ldrb	r3, [r7, #7]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d101      	bne.n	8001934 <SSD1306_Fill+0x14>
 8001930:	2300      	movs	r3, #0
 8001932:	e000      	b.n	8001936 <SSD1306_Fill+0x16>
 8001934:	23ff      	movs	r3, #255	; 0xff
 8001936:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800193a:	4619      	mov	r1, r3
 800193c:	4803      	ldr	r0, [pc, #12]	; (800194c <SSD1306_Fill+0x2c>)
 800193e:	f008 f90f 	bl	8009b60 <memset>
}
 8001942:	bf00      	nop
 8001944:	3708      	adds	r7, #8
 8001946:	46bd      	mov	sp, r7
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	200001e8 	.word	0x200001e8

08001950 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	80fb      	strh	r3, [r7, #6]
 800195a:	460b      	mov	r3, r1
 800195c:	80bb      	strh	r3, [r7, #4]
 800195e:	4613      	mov	r3, r2
 8001960:	70fb      	strb	r3, [r7, #3]
	if (
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	2b7f      	cmp	r3, #127	; 0x7f
 8001966:	d848      	bhi.n	80019fa <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001968:	88bb      	ldrh	r3, [r7, #4]
 800196a:	2b3f      	cmp	r3, #63	; 0x3f
 800196c:	d845      	bhi.n	80019fa <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <SSD1306_DrawPixel+0xb8>)
 8001970:	791b      	ldrb	r3, [r3, #4]
 8001972:	2b00      	cmp	r3, #0
 8001974:	d006      	beq.n	8001984 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8001976:	78fb      	ldrb	r3, [r7, #3]
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf0c      	ite	eq
 800197c:	2301      	moveq	r3, #1
 800197e:	2300      	movne	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001984:	78fb      	ldrb	r3, [r7, #3]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d11a      	bne.n	80019c0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800198a:	88fa      	ldrh	r2, [r7, #6]
 800198c:	88bb      	ldrh	r3, [r7, #4]
 800198e:	08db      	lsrs	r3, r3, #3
 8001990:	b298      	uxth	r0, r3
 8001992:	4603      	mov	r3, r0
 8001994:	01db      	lsls	r3, r3, #7
 8001996:	4413      	add	r3, r2
 8001998:	4a1c      	ldr	r2, [pc, #112]	; (8001a0c <SSD1306_DrawPixel+0xbc>)
 800199a:	5cd3      	ldrb	r3, [r2, r3]
 800199c:	b25a      	sxtb	r2, r3
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	2101      	movs	r1, #1
 80019a6:	fa01 f303 	lsl.w	r3, r1, r3
 80019aa:	b25b      	sxtb	r3, r3
 80019ac:	4313      	orrs	r3, r2
 80019ae:	b259      	sxtb	r1, r3
 80019b0:	88fa      	ldrh	r2, [r7, #6]
 80019b2:	4603      	mov	r3, r0
 80019b4:	01db      	lsls	r3, r3, #7
 80019b6:	4413      	add	r3, r2
 80019b8:	b2c9      	uxtb	r1, r1
 80019ba:	4a14      	ldr	r2, [pc, #80]	; (8001a0c <SSD1306_DrawPixel+0xbc>)
 80019bc:	54d1      	strb	r1, [r2, r3]
 80019be:	e01d      	b.n	80019fc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019c0:	88fa      	ldrh	r2, [r7, #6]
 80019c2:	88bb      	ldrh	r3, [r7, #4]
 80019c4:	08db      	lsrs	r3, r3, #3
 80019c6:	b298      	uxth	r0, r3
 80019c8:	4603      	mov	r3, r0
 80019ca:	01db      	lsls	r3, r3, #7
 80019cc:	4413      	add	r3, r2
 80019ce:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <SSD1306_DrawPixel+0xbc>)
 80019d0:	5cd3      	ldrb	r3, [r2, r3]
 80019d2:	b25a      	sxtb	r2, r3
 80019d4:	88bb      	ldrh	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	2101      	movs	r1, #1
 80019dc:	fa01 f303 	lsl.w	r3, r1, r3
 80019e0:	b25b      	sxtb	r3, r3
 80019e2:	43db      	mvns	r3, r3
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	4013      	ands	r3, r2
 80019e8:	b259      	sxtb	r1, r3
 80019ea:	88fa      	ldrh	r2, [r7, #6]
 80019ec:	4603      	mov	r3, r0
 80019ee:	01db      	lsls	r3, r3, #7
 80019f0:	4413      	add	r3, r2
 80019f2:	b2c9      	uxtb	r1, r1
 80019f4:	4a05      	ldr	r2, [pc, #20]	; (8001a0c <SSD1306_DrawPixel+0xbc>)
 80019f6:	54d1      	strb	r1, [r2, r3]
 80019f8:	e000      	b.n	80019fc <SSD1306_DrawPixel+0xac>
		return;
 80019fa:	bf00      	nop
	}
}
 80019fc:	370c      	adds	r7, #12
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr
 8001a06:	bf00      	nop
 8001a08:	200005e8 	.word	0x200005e8
 8001a0c:	200001e8 	.word	0x200001e8

08001a10 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	460a      	mov	r2, r1
 8001a1a:	80fb      	strh	r3, [r7, #6]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a20:	4a05      	ldr	r2, [pc, #20]	; (8001a38 <SSD1306_GotoXY+0x28>)
 8001a22:	88fb      	ldrh	r3, [r7, #6]
 8001a24:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a26:	4a04      	ldr	r2, [pc, #16]	; (8001a38 <SSD1306_GotoXY+0x28>)
 8001a28:	88bb      	ldrh	r3, [r7, #4]
 8001a2a:	8053      	strh	r3, [r2, #2]
}
 8001a2c:	bf00      	nop
 8001a2e:	370c      	adds	r7, #12
 8001a30:	46bd      	mov	sp, r7
 8001a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a36:	4770      	bx	lr
 8001a38:	200005e8 	.word	0x200005e8

08001a3c <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a4c:	4b3a      	ldr	r3, [pc, #232]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001a4e:	881b      	ldrh	r3, [r3, #0]
 8001a50:	461a      	mov	r2, r3
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	781b      	ldrb	r3, [r3, #0]
 8001a56:	4413      	add	r3, r2
	if (
 8001a58:	2b7f      	cmp	r3, #127	; 0x7f
 8001a5a:	dc07      	bgt.n	8001a6c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001a5e:	885b      	ldrh	r3, [r3, #2]
 8001a60:	461a      	mov	r2, r3
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	785b      	ldrb	r3, [r3, #1]
 8001a66:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a68:	2b3f      	cmp	r3, #63	; 0x3f
 8001a6a:	dd01      	ble.n	8001a70 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	e05e      	b.n	8001b2e <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a70:	2300      	movs	r3, #0
 8001a72:	617b      	str	r3, [r7, #20]
 8001a74:	e04b      	b.n	8001b0e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685a      	ldr	r2, [r3, #4]
 8001a7a:	79fb      	ldrb	r3, [r7, #7]
 8001a7c:	3b20      	subs	r3, #32
 8001a7e:	6839      	ldr	r1, [r7, #0]
 8001a80:	7849      	ldrb	r1, [r1, #1]
 8001a82:	fb01 f303 	mul.w	r3, r1, r3
 8001a86:	4619      	mov	r1, r3
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	440b      	add	r3, r1
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	4413      	add	r3, r2
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	e030      	b.n	8001afc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a9a:	68fa      	ldr	r2, [r7, #12]
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d010      	beq.n	8001acc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001aaa:	4b23      	ldr	r3, [pc, #140]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001aac:	881a      	ldrh	r2, [r3, #0]
 8001aae:	693b      	ldr	r3, [r7, #16]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b298      	uxth	r0, r3
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001ab8:	885a      	ldrh	r2, [r3, #2]
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	b29b      	uxth	r3, r3
 8001abe:	4413      	add	r3, r2
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	79ba      	ldrb	r2, [r7, #6]
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	f7ff ff43 	bl	8001950 <SSD1306_DrawPixel>
 8001aca:	e014      	b.n	8001af6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001acc:	4b1a      	ldr	r3, [pc, #104]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001ace:	881a      	ldrh	r2, [r3, #0]
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b298      	uxth	r0, r3
 8001ad8:	4b17      	ldr	r3, [pc, #92]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001ada:	885a      	ldrh	r2, [r3, #2]
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	b29b      	uxth	r3, r3
 8001ae0:	4413      	add	r3, r2
 8001ae2:	b299      	uxth	r1, r3
 8001ae4:	79bb      	ldrb	r3, [r7, #6]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	bf0c      	ite	eq
 8001aea:	2301      	moveq	r3, #1
 8001aec:	2300      	movne	r3, #0
 8001aee:	b2db      	uxtb	r3, r3
 8001af0:	461a      	mov	r2, r3
 8001af2:	f7ff ff2d 	bl	8001950 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	3301      	adds	r3, #1
 8001afa:	613b      	str	r3, [r7, #16]
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	461a      	mov	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d3c8      	bcc.n	8001a9a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	3301      	adds	r3, #1
 8001b0c:	617b      	str	r3, [r7, #20]
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	785b      	ldrb	r3, [r3, #1]
 8001b12:	461a      	mov	r2, r3
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d3ad      	bcc.n	8001a76 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b1a:	4b07      	ldr	r3, [pc, #28]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001b1c:	881a      	ldrh	r2, [r3, #0]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	781b      	ldrb	r3, [r3, #0]
 8001b22:	b29b      	uxth	r3, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	b29a      	uxth	r2, r3
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <SSD1306_Putc+0xfc>)
 8001b2a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001b2c:	79fb      	ldrb	r3, [r7, #7]
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	200005e8 	.word	0x200005e8

08001b3c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b084      	sub	sp, #16
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	4613      	mov	r3, r2
 8001b48:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b4a:	e012      	b.n	8001b72 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	781b      	ldrb	r3, [r3, #0]
 8001b50:	79fa      	ldrb	r2, [r7, #7]
 8001b52:	68b9      	ldr	r1, [r7, #8]
 8001b54:	4618      	mov	r0, r3
 8001b56:	f7ff ff71 	bl	8001a3c <SSD1306_Putc>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d002      	beq.n	8001b6c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	e008      	b.n	8001b7e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	3301      	adds	r3, #1
 8001b70:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1e8      	bne.n	8001b4c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	781b      	ldrb	r3, [r3, #0]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b8e:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <ssd1306_I2C_Init+0x28>)
 8001b90:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b92:	e002      	b.n	8001b9a <ssd1306_I2C_Init+0x12>
		p--;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f9      	bne.n	8001b94 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001ba0:	bf00      	nop
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	0003d090 	.word	0x0003d090

08001bb4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b0c7      	sub	sp, #284	; 0x11c
 8001bb8:	af02      	add	r7, sp, #8
 8001bba:	4604      	mov	r4, r0
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8001bc2:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 8001bc6:	600a      	str	r2, [r1, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bce:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001bd2:	4622      	mov	r2, r4
 8001bd4:	701a      	strb	r2, [r3, #0]
 8001bd6:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bda:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8001bde:	4602      	mov	r2, r0
 8001be0:	701a      	strb	r2, [r3, #0]
 8001be2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001be6:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001bea:	460a      	mov	r2, r1
 8001bec:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001bee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001bf2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001bf6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001bfa:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 8001bfe:	7812      	ldrb	r2, [r2, #0]
 8001c00:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c02:	2300      	movs	r3, #0
 8001c04:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c08:	e015      	b.n	8001c36 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001c0a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c0e:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c12:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8001c16:	6812      	ldr	r2, [r2, #0]
 8001c18:	441a      	add	r2, r3
 8001c1a:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c1e:	3301      	adds	r3, #1
 8001c20:	7811      	ldrb	r1, [r2, #0]
 8001c22:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c26:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8001c2a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c2c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c30:	3301      	adds	r3, #1
 8001c32:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 8001c36:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8001c3a:	b29b      	uxth	r3, r3
 8001c3c:	f507 7288 	add.w	r2, r7, #272	; 0x110
 8001c40:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 8001c44:	8812      	ldrh	r2, [r2, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d8df      	bhi.n	8001c0a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c4a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c4e:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8001c52:	781b      	ldrb	r3, [r3, #0]
 8001c54:	b299      	uxth	r1, r3
 8001c56:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8001c5a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001c5e:	881b      	ldrh	r3, [r3, #0]
 8001c60:	3301      	adds	r3, #1
 8001c62:	b29b      	uxth	r3, r3
 8001c64:	f107 020c 	add.w	r2, r7, #12
 8001c68:	200a      	movs	r0, #10
 8001c6a:	9000      	str	r0, [sp, #0]
 8001c6c:	4803      	ldr	r0, [pc, #12]	; (8001c7c <ssd1306_I2C_WriteMulti+0xc8>)
 8001c6e:	f002 f98d 	bl	8003f8c <HAL_I2C_Master_Transmit>
}
 8001c72:	bf00      	nop
 8001c74:	f507 778a 	add.w	r7, r7, #276	; 0x114
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd90      	pop	{r4, r7, pc}
 8001c7c:	200000fc 	.word	0x200000fc

08001c80 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b086      	sub	sp, #24
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	71bb      	strb	r3, [r7, #6]
 8001c8e:	4613      	mov	r3, r2
 8001c90:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c92:	79bb      	ldrb	r3, [r7, #6]
 8001c94:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c96:	797b      	ldrb	r3, [r7, #5]
 8001c98:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c9a:	79fb      	ldrb	r3, [r7, #7]
 8001c9c:	b299      	uxth	r1, r3
 8001c9e:	f107 020c 	add.w	r2, r7, #12
 8001ca2:	230a      	movs	r3, #10
 8001ca4:	9300      	str	r3, [sp, #0]
 8001ca6:	2302      	movs	r3, #2
 8001ca8:	4803      	ldr	r0, [pc, #12]	; (8001cb8 <ssd1306_I2C_Write+0x38>)
 8001caa:	f002 f96f 	bl	8003f8c <HAL_I2C_Master_Transmit>
}
 8001cae:	bf00      	nop
 8001cb0:	3710      	adds	r7, #16
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200000fc 	.word	0x200000fc

08001cbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cc2:	4b11      	ldr	r3, [pc, #68]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc6:	4a10      	ldr	r2, [pc, #64]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cc8:	f043 0301 	orr.w	r3, r3, #1
 8001ccc:	6613      	str	r3, [r2, #96]	; 0x60
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cd0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cd2:	f003 0301 	and.w	r3, r3, #1
 8001cd6:	607b      	str	r3, [r7, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	4b0b      	ldr	r3, [pc, #44]	; (8001d08 <HAL_MspInit+0x4c>)
 8001cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cde:	4a0a      	ldr	r2, [pc, #40]	; (8001d08 <HAL_MspInit+0x4c>)
 8001ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce4:	6593      	str	r3, [r2, #88]	; 0x58
 8001ce6:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_MspInit+0x4c>)
 8001ce8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	210f      	movs	r1, #15
 8001cf6:	f06f 0001 	mvn.w	r0, #1
 8001cfa:	f001 fecb 	bl	8003a94 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b0ac      	sub	sp, #176	; 0xb0
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d18:	2200      	movs	r2, #0
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	609a      	str	r2, [r3, #8]
 8001d20:	60da      	str	r2, [r3, #12]
 8001d22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d24:	f107 0314 	add.w	r3, r7, #20
 8001d28:	2288      	movs	r2, #136	; 0x88
 8001d2a:	2100      	movs	r1, #0
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	f007 ff17 	bl	8009b60 <memset>
  if(hadc->Instance==ADC1)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a27      	ldr	r2, [pc, #156]	; (8001dd4 <HAL_ADC_MspInit+0xc8>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d146      	bne.n	8001dca <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001d40:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d42:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001d46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001d52:	2308      	movs	r3, #8
 8001d54:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d56:	2307      	movs	r3, #7
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d5a:	2302      	movs	r3, #2
 8001d5c:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d5e:	2302      	movs	r3, #2
 8001d60:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001d62:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001d66:	633b      	str	r3, [r7, #48]	; 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fc23 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001d78:	f7ff fcda 	bl	8001730 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d7c:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001d7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d80:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001d82:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001d86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001d88:	4b13      	ldr	r3, [pc, #76]	; (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d90:	613b      	str	r3, [r7, #16]
 8001d92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d94:	4b10      	ldr	r3, [pc, #64]	; (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001d96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d98:	4a0f      	ldr	r2, [pc, #60]	; (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001d9a:	f043 0304 	orr.w	r3, r3, #4
 8001d9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da0:	4b0d      	ldr	r3, [pc, #52]	; (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da4:	f003 0304 	and.w	r3, r3, #4
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001dac:	2303      	movs	r3, #3
 8001dae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001db2:	230b      	movs	r3, #11
 8001db4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001db8:	2300      	movs	r3, #0
 8001dba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dbe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4805      	ldr	r0, [pc, #20]	; (8001ddc <HAL_ADC_MspInit+0xd0>)
 8001dc6:	f001 fe8f 	bl	8003ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dca:	bf00      	nop
 8001dcc:	37b0      	adds	r7, #176	; 0xb0
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	50040000 	.word	0x50040000
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	48000800 	.word	0x48000800

08001de0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b0ac      	sub	sp, #176	; 0xb0
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001dec:	2200      	movs	r2, #0
 8001dee:	601a      	str	r2, [r3, #0]
 8001df0:	605a      	str	r2, [r3, #4]
 8001df2:	609a      	str	r2, [r3, #8]
 8001df4:	60da      	str	r2, [r3, #12]
 8001df6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df8:	f107 0314 	add.w	r3, r7, #20
 8001dfc:	2288      	movs	r2, #136	; 0x88
 8001dfe:	2100      	movs	r1, #0
 8001e00:	4618      	mov	r0, r3
 8001e02:	f007 fead 	bl	8009b60 <memset>
  if(hi2c->Instance==I2C1)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a21      	ldr	r2, [pc, #132]	; (8001e90 <HAL_I2C_MspInit+0xb0>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d13a      	bne.n	8001e86 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e10:	2340      	movs	r3, #64	; 0x40
 8001e12:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e14:	2300      	movs	r3, #0
 8001e16:	667b      	str	r3, [r7, #100]	; 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e18:	f107 0314 	add.w	r3, r7, #20
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f003 fbcb 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d001      	beq.n	8001e2c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e28:	f7ff fc82 	bl	8001730 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	4b19      	ldr	r3, [pc, #100]	; (8001e94 <HAL_I2C_MspInit+0xb4>)
 8001e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e30:	4a18      	ldr	r2, [pc, #96]	; (8001e94 <HAL_I2C_MspInit+0xb4>)
 8001e32:	f043 0302 	orr.w	r3, r3, #2
 8001e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e38:	4b16      	ldr	r3, [pc, #88]	; (8001e94 <HAL_I2C_MspInit+0xb4>)
 8001e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	613b      	str	r3, [r7, #16]
 8001e42:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e44:	23c0      	movs	r3, #192	; 0xc0
 8001e46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e4a:	2312      	movs	r3, #18
 8001e4c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e56:	2303      	movs	r3, #3
 8001e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e62:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001e66:	4619      	mov	r1, r3
 8001e68:	480b      	ldr	r0, [pc, #44]	; (8001e98 <HAL_I2C_MspInit+0xb8>)
 8001e6a:	f001 fe3d 	bl	8003ae8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e6e:	4b09      	ldr	r3, [pc, #36]	; (8001e94 <HAL_I2C_MspInit+0xb4>)
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	4a08      	ldr	r2, [pc, #32]	; (8001e94 <HAL_I2C_MspInit+0xb4>)
 8001e74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e78:	6593      	str	r3, [r2, #88]	; 0x58
 8001e7a:	4b06      	ldr	r3, [pc, #24]	; (8001e94 <HAL_I2C_MspInit+0xb4>)
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e82:	60fb      	str	r3, [r7, #12]
 8001e84:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e86:	bf00      	nop
 8001e88:	37b0      	adds	r7, #176	; 0xb0
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40005400 	.word	0x40005400
 8001e94:	40021000 	.word	0x40021000
 8001e98:	48000400 	.word	0x48000400

08001e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b0ac      	sub	sp, #176	; 0xb0
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	601a      	str	r2, [r3, #0]
 8001eac:	605a      	str	r2, [r3, #4]
 8001eae:	609a      	str	r2, [r3, #8]
 8001eb0:	60da      	str	r2, [r3, #12]
 8001eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	2288      	movs	r2, #136	; 0x88
 8001eba:	2100      	movs	r1, #0
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f007 fe4f 	bl	8009b60 <memset>
  if(huart->Instance==USART2)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a21      	ldr	r2, [pc, #132]	; (8001f4c <HAL_UART_MspInit+0xb0>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d13b      	bne.n	8001f44 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ecc:	2302      	movs	r3, #2
 8001ece:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ed4:	f107 0314 	add.w	r3, r7, #20
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f003 fb6d 	bl	80055b8 <HAL_RCCEx_PeriphCLKConfig>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ee4:	f7ff fc24 	bl	8001730 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ee8:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <HAL_UART_MspInit+0xb4>)
 8001eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eec:	4a18      	ldr	r2, [pc, #96]	; (8001f50 <HAL_UART_MspInit+0xb4>)
 8001eee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef4:	4b16      	ldr	r3, [pc, #88]	; (8001f50 <HAL_UART_MspInit+0xb4>)
 8001ef6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001efc:	613b      	str	r3, [r7, #16]
 8001efe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f00:	4b13      	ldr	r3, [pc, #76]	; (8001f50 <HAL_UART_MspInit+0xb4>)
 8001f02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f04:	4a12      	ldr	r2, [pc, #72]	; (8001f50 <HAL_UART_MspInit+0xb4>)
 8001f06:	f043 0301 	orr.w	r3, r3, #1
 8001f0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f0c:	4b10      	ldr	r3, [pc, #64]	; (8001f50 <HAL_UART_MspInit+0xb4>)
 8001f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	60fb      	str	r3, [r7, #12]
 8001f16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f18:	230c      	movs	r3, #12
 8001f1a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f24:	2300      	movs	r3, #0
 8001f26:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f30:	2307      	movs	r3, #7
 8001f32:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f36:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001f3a:	4619      	mov	r1, r3
 8001f3c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f40:	f001 fdd2 	bl	8003ae8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f44:	bf00      	nop
 8001f46:	37b0      	adds	r7, #176	; 0xb0
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	40004400 	.word	0x40004400
 8001f50:	40021000 	.word	0x40021000

08001f54 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b08c      	sub	sp, #48	; 0x30
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001f64:	2200      	movs	r2, #0
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	2036      	movs	r0, #54	; 0x36
 8001f6a:	f001 fd93 	bl	8003a94 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f6e:	2036      	movs	r0, #54	; 0x36
 8001f70:	f001 fdac 	bl	8003acc <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f74:	4b1e      	ldr	r3, [pc, #120]	; (8001ff0 <HAL_InitTick+0x9c>)
 8001f76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f78:	4a1d      	ldr	r2, [pc, #116]	; (8001ff0 <HAL_InitTick+0x9c>)
 8001f7a:	f043 0310 	orr.w	r3, r3, #16
 8001f7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001f80:	4b1b      	ldr	r3, [pc, #108]	; (8001ff0 <HAL_InitTick+0x9c>)
 8001f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f84:	f003 0310 	and.w	r3, r3, #16
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f8c:	f107 0210 	add.w	r2, r7, #16
 8001f90:	f107 0314 	add.w	r3, r7, #20
 8001f94:	4611      	mov	r1, r2
 8001f96:	4618      	mov	r0, r3
 8001f98:	f003 fa7c 	bl	8005494 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f9c:	f003 fa4e 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8001fa0:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fa4:	4a13      	ldr	r2, [pc, #76]	; (8001ff4 <HAL_InitTick+0xa0>)
 8001fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001faa:	0c9b      	lsrs	r3, r3, #18
 8001fac:	3b01      	subs	r3, #1
 8001fae:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	; (8001ff8 <HAL_InitTick+0xa4>)
 8001fb2:	4a12      	ldr	r2, [pc, #72]	; (8001ffc <HAL_InitTick+0xa8>)
 8001fb4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	; (8001ff8 <HAL_InitTick+0xa4>)
 8001fb8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001fbc:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fbe:	4a0e      	ldr	r2, [pc, #56]	; (8001ff8 <HAL_InitTick+0xa4>)
 8001fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fc2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_InitTick+0xa4>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	; (8001ff8 <HAL_InitTick+0xa4>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001fd0:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <HAL_InitTick+0xa4>)
 8001fd2:	f003 ffad 	bl	8005f30 <HAL_TIM_Base_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d104      	bne.n	8001fe6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001fdc:	4806      	ldr	r0, [pc, #24]	; (8001ff8 <HAL_InitTick+0xa4>)
 8001fde:	f004 f809 	bl	8005ff4 <HAL_TIM_Base_Start_IT>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	e000      	b.n	8001fe8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3730      	adds	r7, #48	; 0x30
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	431bde83 	.word	0x431bde83
 8001ff8:	200005f0 	.word	0x200005f0
 8001ffc:	40001000 	.word	0x40001000

08002000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <NMI_Handler+0x4>

08002006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800200a:	e7fe      	b.n	800200a <HardFault_Handler+0x4>

0800200c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002010:	e7fe      	b.n	8002010 <MemManage_Handler+0x4>

08002012 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002016:	e7fe      	b.n	8002016 <BusFault_Handler+0x4>

08002018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800201c:	e7fe      	b.n	800201c <UsageFault_Handler+0x4>

0800201e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002030:	4802      	ldr	r0, [pc, #8]	; (800203c <TIM6_DAC_IRQHandler+0x10>)
 8002032:	f004 f84f 	bl	80060d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002036:	bf00      	nop
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	200005f0 	.word	0x200005f0

08002040 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002048:	4a14      	ldr	r2, [pc, #80]	; (800209c <_sbrk+0x5c>)
 800204a:	4b15      	ldr	r3, [pc, #84]	; (80020a0 <_sbrk+0x60>)
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002054:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <_sbrk+0x64>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	2b00      	cmp	r3, #0
 800205a:	d102      	bne.n	8002062 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800205c:	4b11      	ldr	r3, [pc, #68]	; (80020a4 <_sbrk+0x64>)
 800205e:	4a12      	ldr	r2, [pc, #72]	; (80020a8 <_sbrk+0x68>)
 8002060:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002062:	4b10      	ldr	r3, [pc, #64]	; (80020a4 <_sbrk+0x64>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4413      	add	r3, r2
 800206a:	693a      	ldr	r2, [r7, #16]
 800206c:	429a      	cmp	r2, r3
 800206e:	d207      	bcs.n	8002080 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002070:	f007 fd3c 	bl	8009aec <__errno>
 8002074:	4603      	mov	r3, r0
 8002076:	220c      	movs	r2, #12
 8002078:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800207a:	f04f 33ff 	mov.w	r3, #4294967295
 800207e:	e009      	b.n	8002094 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002080:	4b08      	ldr	r3, [pc, #32]	; (80020a4 <_sbrk+0x64>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002086:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	4a05      	ldr	r2, [pc, #20]	; (80020a4 <_sbrk+0x64>)
 8002090:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002092:	68fb      	ldr	r3, [r7, #12]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	20018000 	.word	0x20018000
 80020a0:	00000400 	.word	0x00000400
 80020a4:	2000063c 	.word	0x2000063c
 80020a8:	20002020 	.word	0x20002020

080020ac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020b0:	4b15      	ldr	r3, [pc, #84]	; (8002108 <SystemInit+0x5c>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020b6:	4a14      	ldr	r2, [pc, #80]	; (8002108 <SystemInit+0x5c>)
 80020b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80020bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <SystemInit+0x60>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a11      	ldr	r2, [pc, #68]	; (800210c <SystemInit+0x60>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80020cc:	4b0f      	ldr	r3, [pc, #60]	; (800210c <SystemInit+0x60>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80020d2:	4b0e      	ldr	r3, [pc, #56]	; (800210c <SystemInit+0x60>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a0d      	ldr	r2, [pc, #52]	; (800210c <SystemInit+0x60>)
 80020d8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80020dc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80020e0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80020e2:	4b0a      	ldr	r3, [pc, #40]	; (800210c <SystemInit+0x60>)
 80020e4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80020e8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020ea:	4b08      	ldr	r3, [pc, #32]	; (800210c <SystemInit+0x60>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4a07      	ldr	r2, [pc, #28]	; (800210c <SystemInit+0x60>)
 80020f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020f4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80020f6:	4b05      	ldr	r3, [pc, #20]	; (800210c <SystemInit+0x60>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	619a      	str	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000ed00 	.word	0xe000ed00
 800210c:	40021000 	.word	0x40021000

08002110 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002110:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002148 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002114:	f7ff ffca 	bl	80020ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002118:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800211a:	e003      	b.n	8002124 <LoopCopyDataInit>

0800211c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800211c:	4b0b      	ldr	r3, [pc, #44]	; (800214c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800211e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002120:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002122:	3104      	adds	r1, #4

08002124 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002124:	480a      	ldr	r0, [pc, #40]	; (8002150 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002126:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002128:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800212a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800212c:	d3f6      	bcc.n	800211c <CopyDataInit>
	ldr	r2, =_sbss
 800212e:	4a0a      	ldr	r2, [pc, #40]	; (8002158 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002130:	e002      	b.n	8002138 <LoopFillZerobss>

08002132 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002132:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002134:	f842 3b04 	str.w	r3, [r2], #4

08002138 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002138:	4b08      	ldr	r3, [pc, #32]	; (800215c <LoopForever+0x16>)
	cmp	r2, r3
 800213a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800213c:	d3f9      	bcc.n	8002132 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800213e:	f007 fcdb 	bl	8009af8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002142:	f7fe fea9 	bl	8000e98 <main>

08002146 <LoopForever>:

LoopForever:
    b LoopForever
 8002146:	e7fe      	b.n	8002146 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002148:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 800214c:	0800b3f4 	.word	0x0800b3f4
	ldr	r0, =_sdata
 8002150:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002154:	2000007c 	.word	0x2000007c
	ldr	r2, =_sbss
 8002158:	2000007c 	.word	0x2000007c
	ldr	r3, = _ebss
 800215c:	2000201c 	.word	0x2000201c

08002160 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002160:	e7fe      	b.n	8002160 <ADC1_2_IRQHandler>
	...

08002164 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b082      	sub	sp, #8
 8002168:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800216a:	2300      	movs	r3, #0
 800216c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216e:	4b0c      	ldr	r3, [pc, #48]	; (80021a0 <HAL_Init+0x3c>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a0b      	ldr	r2, [pc, #44]	; (80021a0 <HAL_Init+0x3c>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002178:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800217a:	2003      	movs	r0, #3
 800217c:	f001 fc7f 	bl	8003a7e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002180:	2000      	movs	r0, #0
 8002182:	f7ff fee7 	bl	8001f54 <HAL_InitTick>
 8002186:	4603      	mov	r3, r0
 8002188:	2b00      	cmp	r3, #0
 800218a:	d002      	beq.n	8002192 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	71fb      	strb	r3, [r7, #7]
 8002190:	e001      	b.n	8002196 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002192:	f7ff fd93 	bl	8001cbc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002196:	79fb      	ldrb	r3, [r7, #7]
}
 8002198:	4618      	mov	r0, r3
 800219a:	3708      	adds	r7, #8
 800219c:	46bd      	mov	sp, r7
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40022000 	.word	0x40022000

080021a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a4:	b480      	push	{r7}
 80021a6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021a8:	4b06      	ldr	r3, [pc, #24]	; (80021c4 <HAL_IncTick+0x20>)
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	461a      	mov	r2, r3
 80021ae:	4b06      	ldr	r3, [pc, #24]	; (80021c8 <HAL_IncTick+0x24>)
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	4413      	add	r3, r2
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_IncTick+0x24>)
 80021b6:	6013      	str	r3, [r2, #0]
}
 80021b8:	bf00      	nop
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000010 	.word	0x20000010
 80021c8:	20000640 	.word	0x20000640

080021cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return uwTick;
 80021d0:	4b03      	ldr	r3, [pc, #12]	; (80021e0 <HAL_GetTick+0x14>)
 80021d2:	681b      	ldr	r3, [r3, #0]
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	20000640 	.word	0x20000640

080021e4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
 80021ec:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	431a      	orrs	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	609a      	str	r2, [r3, #8]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
 8002212:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	431a      	orrs	r2, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	609a      	str	r2, [r3, #8]
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002240:	4618      	mov	r0, r3
 8002242:	370c      	adds	r7, #12
 8002244:	46bd      	mov	sp, r7
 8002246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224a:	4770      	bx	lr

0800224c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	607a      	str	r2, [r7, #4]
 8002258:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	3360      	adds	r3, #96	; 0x60
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	4413      	add	r3, r2
 8002266:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	681a      	ldr	r2, [r3, #0]
 800226c:	4b08      	ldr	r3, [pc, #32]	; (8002290 <LL_ADC_SetOffset+0x44>)
 800226e:	4013      	ands	r3, r2
 8002270:	687a      	ldr	r2, [r7, #4]
 8002272:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	430a      	orrs	r2, r1
 800227a:	4313      	orrs	r3, r2
 800227c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002284:	bf00      	nop
 8002286:	371c      	adds	r7, #28
 8002288:	46bd      	mov	sp, r7
 800228a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228e:	4770      	bx	lr
 8002290:	03fff000 	.word	0x03fff000

08002294 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
 800229c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	3360      	adds	r3, #96	; 0x60
 80022a2:	461a      	mov	r2, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	4413      	add	r3, r2
 80022aa:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3714      	adds	r7, #20
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b087      	sub	sp, #28
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	60f8      	str	r0, [r7, #12]
 80022c8:	60b9      	str	r1, [r7, #8]
 80022ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	3360      	adds	r3, #96	; 0x60
 80022d0:	461a      	mov	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	4413      	add	r3, r2
 80022d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	431a      	orrs	r2, r3
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022ea:	bf00      	nop
 80022ec:	371c      	adds	r7, #28
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	370c      	adds	r7, #12
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800231c:	b480      	push	{r7}
 800231e:	b087      	sub	sp, #28
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	3330      	adds	r3, #48	; 0x30
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	0a1b      	lsrs	r3, r3, #8
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	f003 030c 	and.w	r3, r3, #12
 8002338:	4413      	add	r3, r2
 800233a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	68bb      	ldr	r3, [r7, #8]
 8002342:	f003 031f 	and.w	r3, r3, #31
 8002346:	211f      	movs	r1, #31
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	43db      	mvns	r3, r3
 800234e:	401a      	ands	r2, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	0e9b      	lsrs	r3, r3, #26
 8002354:	f003 011f 	and.w	r1, r3, #31
 8002358:	68bb      	ldr	r3, [r7, #8]
 800235a:	f003 031f 	and.w	r3, r3, #31
 800235e:	fa01 f303 	lsl.w	r3, r1, r3
 8002362:	431a      	orrs	r2, r3
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002368:	bf00      	nop
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002374:	b480      	push	{r7}
 8002376:	b087      	sub	sp, #28
 8002378:	af00      	add	r7, sp, #0
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	60b9      	str	r1, [r7, #8]
 800237e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	3314      	adds	r3, #20
 8002384:	461a      	mov	r2, r3
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	0e5b      	lsrs	r3, r3, #25
 800238a:	009b      	lsls	r3, r3, #2
 800238c:	f003 0304 	and.w	r3, r3, #4
 8002390:	4413      	add	r3, r2
 8002392:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002394:	697b      	ldr	r3, [r7, #20]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	68bb      	ldr	r3, [r7, #8]
 800239a:	0d1b      	lsrs	r3, r3, #20
 800239c:	f003 031f 	and.w	r3, r3, #31
 80023a0:	2107      	movs	r1, #7
 80023a2:	fa01 f303 	lsl.w	r3, r1, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	401a      	ands	r2, r3
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	0d1b      	lsrs	r3, r3, #20
 80023ae:	f003 031f 	and.w	r3, r3, #31
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	fa01 f303 	lsl.w	r3, r1, r3
 80023b8:	431a      	orrs	r2, r3
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023be:	bf00      	nop
 80023c0:	371c      	adds	r7, #28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
	...

080023cc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b085      	sub	sp, #20
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	60f8      	str	r0, [r7, #12]
 80023d4:	60b9      	str	r1, [r7, #8]
 80023d6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e4:	43db      	mvns	r3, r3
 80023e6:	401a      	ands	r2, r3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f003 0318 	and.w	r3, r3, #24
 80023ee:	4908      	ldr	r1, [pc, #32]	; (8002410 <LL_ADC_SetChannelSingleDiff+0x44>)
 80023f0:	40d9      	lsrs	r1, r3
 80023f2:	68bb      	ldr	r3, [r7, #8]
 80023f4:	400b      	ands	r3, r1
 80023f6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023fa:	431a      	orrs	r2, r3
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002402:	bf00      	nop
 8002404:	3714      	adds	r7, #20
 8002406:	46bd      	mov	sp, r7
 8002408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240c:	4770      	bx	lr
 800240e:	bf00      	nop
 8002410:	0007ffff 	.word	0x0007ffff

08002414 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	f003 031f 	and.w	r3, r3, #31
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002440:	4618      	mov	r0, r3
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800245c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002460:	687a      	ldr	r2, [r7, #4]
 8002462:	6093      	str	r3, [r2, #8]
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002470:	b480      	push	{r7}
 8002472:	b083      	sub	sp, #12
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002480:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002484:	d101      	bne.n	800248a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002486:	2301      	movs	r3, #1
 8002488:	e000      	b.n	800248c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800248a:	2300      	movs	r3, #0
}
 800248c:	4618      	mov	r0, r3
 800248e:	370c      	adds	r7, #12
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80024a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024b4:	bf00      	nop
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024be:	4770      	bx	lr

080024c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b083      	sub	sp, #12
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80024d4:	d101      	bne.n	80024da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024d6:	2301      	movs	r3, #1
 80024d8:	e000      	b.n	80024dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	370c      	adds	r7, #12
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80024f8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80024fc:	f043 0201 	orr.w	r2, r3, #1
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002504:	bf00      	nop
 8002506:	370c      	adds	r7, #12
 8002508:	46bd      	mov	sp, r7
 800250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250e:	4770      	bx	lr

08002510 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002520:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002524:	f043 0202 	orr.w	r2, r3, #2
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800252c:	bf00      	nop
 800252e:	370c      	adds	r7, #12
 8002530:	46bd      	mov	sp, r7
 8002532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002536:	4770      	bx	lr

08002538 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 0301 	and.w	r3, r3, #1
 8002548:	2b01      	cmp	r3, #1
 800254a:	d101      	bne.n	8002550 <LL_ADC_IsEnabled+0x18>
 800254c:	2301      	movs	r3, #1
 800254e:	e000      	b.n	8002552 <LL_ADC_IsEnabled+0x1a>
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b02      	cmp	r3, #2
 8002570:	d101      	bne.n	8002576 <LL_ADC_IsDisableOngoing+0x18>
 8002572:	2301      	movs	r3, #1
 8002574:	e000      	b.n	8002578 <LL_ADC_IsDisableOngoing+0x1a>
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002594:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002598:	f043 0204 	orr.w	r2, r3, #4
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80025a0:	bf00      	nop
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80025bc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80025c0:	f043 0210 	orr.w	r2, r3, #16
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80025c8:	bf00      	nop
 80025ca:	370c      	adds	r7, #12
 80025cc:	46bd      	mov	sp, r7
 80025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d2:	4770      	bx	lr

080025d4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	689b      	ldr	r3, [r3, #8]
 80025e0:	f003 0304 	and.w	r3, r3, #4
 80025e4:	2b04      	cmp	r3, #4
 80025e6:	d101      	bne.n	80025ec <LL_ADC_REG_IsConversionOngoing+0x18>
 80025e8:	2301      	movs	r3, #1
 80025ea:	e000      	b.n	80025ee <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	370c      	adds	r7, #12
 80025f2:	46bd      	mov	sp, r7
 80025f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f8:	4770      	bx	lr

080025fa <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80025fa:	b480      	push	{r7}
 80025fc:	b083      	sub	sp, #12
 80025fe:	af00      	add	r7, sp, #0
 8002600:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800260a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800260e:	f043 0220 	orr.w	r2, r3, #32
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002622:	b480      	push	{r7}
 8002624:	b083      	sub	sp, #12
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	f003 0308 	and.w	r3, r3, #8
 8002632:	2b08      	cmp	r3, #8
 8002634:	d101      	bne.n	800263a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002648:	b590      	push	{r4, r7, lr}
 800264a:	b089      	sub	sp, #36	; 0x24
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002650:	2300      	movs	r3, #0
 8002652:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002654:	2300      	movs	r3, #0
 8002656:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d101      	bne.n	8002662 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e136      	b.n	80028d0 <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800266c:	2b00      	cmp	r3, #0
 800266e:	d109      	bne.n	8002684 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff fb4b 	bl	8001d0c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2200      	movs	r2, #0
 8002680:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7ff fef1 	bl	8002470 <LL_ADC_IsDeepPowerDownEnabled>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d004      	beq.n	800269e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4618      	mov	r0, r3
 800269a:	f7ff fed7 	bl	800244c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7ff ff0c 	bl	80024c0 <LL_ADC_IsInternalRegulatorEnabled>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d115      	bne.n	80026da <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f7ff fef0 	bl	8002498 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b8:	4b87      	ldr	r3, [pc, #540]	; (80028d8 <HAL_ADC_Init+0x290>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	099b      	lsrs	r3, r3, #6
 80026be:	4a87      	ldr	r2, [pc, #540]	; (80028dc <HAL_ADC_Init+0x294>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	099b      	lsrs	r3, r3, #6
 80026c6:	3301      	adds	r3, #1
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026cc:	e002      	b.n	80026d4 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026ce:	68bb      	ldr	r3, [r7, #8]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f9      	bne.n	80026ce <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4618      	mov	r0, r3
 80026e0:	f7ff feee 	bl	80024c0 <LL_ADC_IsInternalRegulatorEnabled>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10d      	bne.n	8002706 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ee:	f043 0210 	orr.w	r2, r3, #16
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026fa:	f043 0201 	orr.w	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8002702:	2301      	movs	r3, #1
 8002704:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff62 	bl	80025d4 <LL_ADC_REG_IsConversionOngoing>
 8002710:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	f040 80cf 	bne.w	80028be <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	2b00      	cmp	r3, #0
 8002724:	f040 80cb 	bne.w	80028be <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800272c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002730:	f043 0202 	orr.w	r2, r3, #2
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f7ff fefb 	bl	8002538 <LL_ADC_IsEnabled>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d115      	bne.n	8002774 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002748:	4865      	ldr	r0, [pc, #404]	; (80028e0 <HAL_ADC_Init+0x298>)
 800274a:	f7ff fef5 	bl	8002538 <LL_ADC_IsEnabled>
 800274e:	4604      	mov	r4, r0
 8002750:	4864      	ldr	r0, [pc, #400]	; (80028e4 <HAL_ADC_Init+0x29c>)
 8002752:	f7ff fef1 	bl	8002538 <LL_ADC_IsEnabled>
 8002756:	4603      	mov	r3, r0
 8002758:	431c      	orrs	r4, r3
 800275a:	4863      	ldr	r0, [pc, #396]	; (80028e8 <HAL_ADC_Init+0x2a0>)
 800275c:	f7ff feec 	bl	8002538 <LL_ADC_IsEnabled>
 8002760:	4603      	mov	r3, r0
 8002762:	4323      	orrs	r3, r4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d105      	bne.n	8002774 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	4619      	mov	r1, r3
 800276e:	485f      	ldr	r0, [pc, #380]	; (80028ec <HAL_ADC_Init+0x2a4>)
 8002770:	f7ff fd38 	bl	80021e4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	7e5b      	ldrb	r3, [r3, #25]
 8002778:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800277e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002784:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 800278a:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002792:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002794:	4313      	orrs	r3, r2
 8002796:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d106      	bne.n	80027b0 <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a6:	3b01      	subs	r3, #1
 80027a8:	045b      	lsls	r3, r3, #17
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d009      	beq.n	80027cc <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027bc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027c4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68da      	ldr	r2, [r3, #12]
 80027d2:	4b47      	ldr	r3, [pc, #284]	; (80028f0 <HAL_ADC_Init+0x2a8>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	687a      	ldr	r2, [r7, #4]
 80027d8:	6812      	ldr	r2, [r2, #0]
 80027da:	69b9      	ldr	r1, [r7, #24]
 80027dc:	430b      	orrs	r3, r1
 80027de:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fef5 	bl	80025d4 <LL_ADC_REG_IsConversionOngoing>
 80027ea:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f7ff ff16 	bl	8002622 <LL_ADC_INJ_IsConversionOngoing>
 80027f6:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027f8:	693b      	ldr	r3, [r7, #16]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d13d      	bne.n	800287a <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d13a      	bne.n	800287a <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002808:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002810:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002812:	4313      	orrs	r3, r2
 8002814:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002820:	f023 0302 	bic.w	r3, r3, #2
 8002824:	687a      	ldr	r2, [r7, #4]
 8002826:	6812      	ldr	r2, [r2, #0]
 8002828:	69b9      	ldr	r1, [r7, #24]
 800282a:	430b      	orrs	r3, r1
 800282c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002834:	2b01      	cmp	r3, #1
 8002836:	d118      	bne.n	800286a <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002842:	f023 0304 	bic.w	r3, r3, #4
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800284e:	4311      	orrs	r1, r2
 8002850:	687a      	ldr	r2, [r7, #4]
 8002852:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002854:	4311      	orrs	r1, r2
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800285a:	430a      	orrs	r2, r1
 800285c:	431a      	orrs	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	611a      	str	r2, [r3, #16]
 8002868:	e007      	b.n	800287a <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	691a      	ldr	r2, [r3, #16]
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f022 0201 	bic.w	r2, r2, #1
 8002878:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	691b      	ldr	r3, [r3, #16]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d10c      	bne.n	800289c <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002888:	f023 010f 	bic.w	r1, r3, #15
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	1e5a      	subs	r2, r3, #1
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	430a      	orrs	r2, r1
 8002898:	631a      	str	r2, [r3, #48]	; 0x30
 800289a:	e007      	b.n	80028ac <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f022 020f 	bic.w	r2, r2, #15
 80028aa:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	f023 0303 	bic.w	r3, r3, #3
 80028b4:	f043 0201 	orr.w	r2, r3, #1
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	655a      	str	r2, [r3, #84]	; 0x54
 80028bc:	e007      	b.n	80028ce <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c2:	f043 0210 	orr.w	r2, r3, #16
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028ce:	7ffb      	ldrb	r3, [r7, #31]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3724      	adds	r7, #36	; 0x24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd90      	pop	{r4, r7, pc}
 80028d8:	20000008 	.word	0x20000008
 80028dc:	053e2d63 	.word	0x053e2d63
 80028e0:	50040000 	.word	0x50040000
 80028e4:	50040100 	.word	0x50040100
 80028e8:	50040200 	.word	0x50040200
 80028ec:	50040300 	.word	0x50040300
 80028f0:	fff0c007 	.word	0xfff0c007

080028f4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b086      	sub	sp, #24
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028fc:	4857      	ldr	r0, [pc, #348]	; (8002a5c <HAL_ADC_Start+0x168>)
 80028fe:	f7ff fd89 	bl	8002414 <LL_ADC_GetMultimode>
 8002902:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7ff fe63 	bl	80025d4 <LL_ADC_REG_IsConversionOngoing>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	f040 809c 	bne.w	8002a4e <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_ADC_Start+0x30>
 8002920:	2302      	movs	r3, #2
 8002922:	e097      	b.n	8002a54 <HAL_ADC_Start+0x160>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800292c:	6878      	ldr	r0, [r7, #4]
 800292e:	f000 fe61 	bl	80035f4 <ADC_Enable>
 8002932:	4603      	mov	r3, r0
 8002934:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002936:	7dfb      	ldrb	r3, [r7, #23]
 8002938:	2b00      	cmp	r3, #0
 800293a:	f040 8083 	bne.w	8002a44 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002942:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002946:	f023 0301 	bic.w	r3, r3, #1
 800294a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	655a      	str	r2, [r3, #84]	; 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a42      	ldr	r2, [pc, #264]	; (8002a60 <HAL_ADC_Start+0x16c>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d002      	beq.n	8002962 <HAL_ADC_Start+0x6e>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	e000      	b.n	8002964 <HAL_ADC_Start+0x70>
 8002962:	4b40      	ldr	r3, [pc, #256]	; (8002a64 <HAL_ADC_Start+0x170>)
 8002964:	687a      	ldr	r2, [r7, #4]
 8002966:	6812      	ldr	r2, [r2, #0]
 8002968:	4293      	cmp	r3, r2
 800296a:	d002      	beq.n	8002972 <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002976:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	655a      	str	r2, [r3, #84]	; 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800298a:	d106      	bne.n	800299a <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002990:	f023 0206 	bic.w	r2, r3, #6
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	659a      	str	r2, [r3, #88]	; 0x58
 8002998:	e002      	b.n	80029a0 <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2200      	movs	r2, #0
 800299e:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	221c      	movs	r2, #28
 80029a6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a2a      	ldr	r2, [pc, #168]	; (8002a60 <HAL_ADC_Start+0x16c>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d002      	beq.n	80029c0 <HAL_ADC_Start+0xcc>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	e000      	b.n	80029c2 <HAL_ADC_Start+0xce>
 80029c0:	4b28      	ldr	r3, [pc, #160]	; (8002a64 <HAL_ADC_Start+0x170>)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6812      	ldr	r2, [r2, #0]
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d008      	beq.n	80029dc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	2b05      	cmp	r3, #5
 80029d4:	d002      	beq.n	80029dc <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	2b09      	cmp	r3, #9
 80029da:	d114      	bne.n	8002a06 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	68db      	ldr	r3, [r3, #12]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d007      	beq.n	80029fa <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	655a      	str	r2, [r3, #84]	; 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4618      	mov	r0, r3
 8002a00:	f7ff fdc0 	bl	8002584 <LL_ADC_REG_StartConversion>
 8002a04:	e025      	b.n	8002a52 <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a12      	ldr	r2, [pc, #72]	; (8002a60 <HAL_ADC_Start+0x16c>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d002      	beq.n	8002a22 <HAL_ADC_Start+0x12e>
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	e000      	b.n	8002a24 <HAL_ADC_Start+0x130>
 8002a22:	4b10      	ldr	r3, [pc, #64]	; (8002a64 <HAL_ADC_Start+0x170>)
 8002a24:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	68db      	ldr	r3, [r3, #12]
 8002a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00f      	beq.n	8002a52 <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a36:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002a3a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	655a      	str	r2, [r3, #84]	; 0x54
 8002a42:	e006      	b.n	8002a52 <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8002a4c:	e001      	b.n	8002a52 <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a4e:	2302      	movs	r3, #2
 8002a50:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	3718      	adds	r7, #24
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	bd80      	pop	{r7, pc}
 8002a5c:	50040300 	.word	0x50040300
 8002a60:	50040100 	.word	0x50040100
 8002a64:	50040000 	.word	0x50040000

08002a68 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b084      	sub	sp, #16
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d101      	bne.n	8002a7e <HAL_ADC_Stop+0x16>
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	e023      	b.n	8002ac6 <HAL_ADC_Stop+0x5e>
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a86:	2103      	movs	r1, #3
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fcf7 	bl	800347c <ADC_ConversionStop>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a92:	7bfb      	ldrb	r3, [r7, #15]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d111      	bne.n	8002abc <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	f000 fe0d 	bl	80036b8 <ADC_Disable>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002aa2:	7bfb      	ldrb	r3, [r7, #15]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d109      	bne.n	8002abc <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002aac:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ab0:	f023 0301 	bic.w	r3, r3, #1
 8002ab4:	f043 0201 	orr.w	r2, r3, #1
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3710      	adds	r7, #16
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
	...

08002ad0 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b088      	sub	sp, #32
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ada:	4866      	ldr	r0, [pc, #408]	; (8002c74 <HAL_ADC_PollForConversion+0x1a4>)
 8002adc:	f7ff fc9a 	bl	8002414 <LL_ADC_GetMultimode>
 8002ae0:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	695b      	ldr	r3, [r3, #20]
 8002ae6:	2b08      	cmp	r3, #8
 8002ae8:	d102      	bne.n	8002af0 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002aea:	2308      	movs	r3, #8
 8002aec:	61fb      	str	r3, [r7, #28]
 8002aee:	e02a      	b.n	8002b46 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d005      	beq.n	8002b02 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	2b05      	cmp	r3, #5
 8002afa:	d002      	beq.n	8002b02 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	2b09      	cmp	r3, #9
 8002b00:	d111      	bne.n	8002b26 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	68db      	ldr	r3, [r3, #12]
 8002b08:	f003 0301 	and.w	r3, r3, #1
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d007      	beq.n	8002b20 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b14:	f043 0220 	orr.w	r2, r3, #32
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e0a4      	b.n	8002c6a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b20:	2304      	movs	r3, #4
 8002b22:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b24:	e00f      	b.n	8002b46 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b26:	4853      	ldr	r0, [pc, #332]	; (8002c74 <HAL_ADC_PollForConversion+0x1a4>)
 8002b28:	f7ff fc82 	bl	8002430 <LL_ADC_GetMultiDMATransfer>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d007      	beq.n	8002b42 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b36:	f043 0220 	orr.w	r2, r3, #32
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e093      	b.n	8002c6a <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b42:	2304      	movs	r3, #4
 8002b44:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b46:	f7ff fb41 	bl	80021cc <HAL_GetTick>
 8002b4a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b4c:	e021      	b.n	8002b92 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d01d      	beq.n	8002b92 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b56:	f7ff fb39 	bl	80021cc <HAL_GetTick>
 8002b5a:	4602      	mov	r2, r0
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	1ad3      	subs	r3, r2, r3
 8002b60:	683a      	ldr	r2, [r7, #0]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d302      	bcc.n	8002b6c <HAL_ADC_PollForConversion+0x9c>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d112      	bne.n	8002b92 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	4013      	ands	r3, r2
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10b      	bne.n	8002b92 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b7e:	f043 0204 	orr.w	r2, r3, #4
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	655a      	str	r2, [r3, #84]	; 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

          return HAL_TIMEOUT;
 8002b8e:	2303      	movs	r3, #3
 8002b90:	e06b      	b.n	8002c6a <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	681a      	ldr	r2, [r3, #0]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	4013      	ands	r3, r2
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d0d6      	beq.n	8002b4e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ba4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7ff fba0 	bl	80022f6 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01c      	beq.n	8002bf6 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	7e5b      	ldrb	r3, [r3, #25]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d118      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0308 	and.w	r3, r3, #8
 8002bce:	2b08      	cmp	r3, #8
 8002bd0:	d111      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	655a      	str	r2, [r3, #84]	; 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002be2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d105      	bne.n	8002bf6 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bee:	f043 0201 	orr.w	r2, r3, #1
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a1f      	ldr	r2, [pc, #124]	; (8002c78 <HAL_ADC_PollForConversion+0x1a8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d002      	beq.n	8002c06 <HAL_ADC_PollForConversion+0x136>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	e000      	b.n	8002c08 <HAL_ADC_PollForConversion+0x138>
 8002c06:	4b1d      	ldr	r3, [pc, #116]	; (8002c7c <HAL_ADC_PollForConversion+0x1ac>)
 8002c08:	687a      	ldr	r2, [r7, #4]
 8002c0a:	6812      	ldr	r2, [r2, #0]
 8002c0c:	4293      	cmp	r3, r2
 8002c0e:	d008      	beq.n	8002c22 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d005      	beq.n	8002c22 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c16:	697b      	ldr	r3, [r7, #20]
 8002c18:	2b05      	cmp	r3, #5
 8002c1a:	d002      	beq.n	8002c22 <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	2b09      	cmp	r3, #9
 8002c20:	d104      	bne.n	8002c2c <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	61bb      	str	r3, [r7, #24]
 8002c2a:	e00c      	b.n	8002c46 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a11      	ldr	r2, [pc, #68]	; (8002c78 <HAL_ADC_PollForConversion+0x1a8>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d002      	beq.n	8002c3c <HAL_ADC_PollForConversion+0x16c>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	e000      	b.n	8002c3e <HAL_ADC_PollForConversion+0x16e>
 8002c3c:	4b0f      	ldr	r3, [pc, #60]	; (8002c7c <HAL_ADC_PollForConversion+0x1ac>)
 8002c3e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	2b08      	cmp	r3, #8
 8002c4a:	d104      	bne.n	8002c56 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2208      	movs	r2, #8
 8002c52:	601a      	str	r2, [r3, #0]
 8002c54:	e008      	b.n	8002c68 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c56:	69bb      	ldr	r3, [r7, #24]
 8002c58:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d103      	bne.n	8002c68 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	220c      	movs	r2, #12
 8002c66:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c68:	2300      	movs	r3, #0
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3720      	adds	r7, #32
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	50040300 	.word	0x50040300
 8002c78:	50040100 	.word	0x50040100
 8002c7c:	50040000 	.word	0x50040000

08002c80 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b083      	sub	sp, #12
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b0b6      	sub	sp, #216	; 0xd8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cb6:	2b01      	cmp	r3, #1
 8002cb8:	d101      	bne.n	8002cbe <HAL_ADC_ConfigChannel+0x22>
 8002cba:	2302      	movs	r3, #2
 8002cbc:	e3c7      	b.n	800344e <HAL_ADC_ConfigChannel+0x7b2>
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fc82 	bl	80025d4 <LL_ADC_REG_IsConversionOngoing>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f040 83a8 	bne.w	8003428 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d824      	bhi.n	8002d2a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	3b02      	subs	r3, #2
 8002ce6:	2b03      	cmp	r3, #3
 8002ce8:	d81b      	bhi.n	8002d22 <HAL_ADC_ConfigChannel+0x86>
 8002cea:	a201      	add	r2, pc, #4	; (adr r2, 8002cf0 <HAL_ADC_ConfigChannel+0x54>)
 8002cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf0:	08002d01 	.word	0x08002d01
 8002cf4:	08002d09 	.word	0x08002d09
 8002cf8:	08002d11 	.word	0x08002d11
 8002cfc:	08002d19 	.word	0x08002d19
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	220c      	movs	r2, #12
 8002d04:	605a      	str	r2, [r3, #4]
          break;
 8002d06:	e011      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	2212      	movs	r2, #18
 8002d0c:	605a      	str	r2, [r3, #4]
          break;
 8002d0e:	e00d      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2218      	movs	r2, #24
 8002d14:	605a      	str	r2, [r3, #4]
          break;
 8002d16:	e009      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d1e:	605a      	str	r2, [r3, #4]
          break;
 8002d20:	e004      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	2206      	movs	r2, #6
 8002d26:	605a      	str	r2, [r3, #4]
          break;
 8002d28:	e000      	b.n	8002d2c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8002d2a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6818      	ldr	r0, [r3, #0]
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	6859      	ldr	r1, [r3, #4]
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f7ff faef 	bl	800231c <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fc46 	bl	80025d4 <LL_ADC_REG_IsConversionOngoing>
 8002d48:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7ff fc66 	bl	8002622 <LL_ADC_INJ_IsConversionOngoing>
 8002d56:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d5a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	f040 81a6 	bne.w	80030b0 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d64:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	f040 81a1 	bne.w	80030b0 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6819      	ldr	r1, [r3, #0]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	f7ff fafa 	bl	8002374 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	695a      	ldr	r2, [r3, #20]
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	68db      	ldr	r3, [r3, #12]
 8002d8a:	08db      	lsrs	r3, r3, #3
 8002d8c:	f003 0303 	and.w	r3, r3, #3
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	fa02 f303 	lsl.w	r3, r2, r3
 8002d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d9a:	683b      	ldr	r3, [r7, #0]
 8002d9c:	691b      	ldr	r3, [r3, #16]
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d00a      	beq.n	8002db8 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	6919      	ldr	r1, [r3, #16]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	681a      	ldr	r2, [r3, #0]
 8002dae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002db2:	f7ff fa4b 	bl	800224c <LL_ADC_SetOffset>
 8002db6:	e17b      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f7ff fa68 	bl	8002294 <LL_ADC_GetOffsetChannel>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d10a      	bne.n	8002de4 <HAL_ADC_ConfigChannel+0x148>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fa5d 	bl	8002294 <LL_ADC_GetOffsetChannel>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	0e9b      	lsrs	r3, r3, #26
 8002dde:	f003 021f 	and.w	r2, r3, #31
 8002de2:	e01e      	b.n	8002e22 <HAL_ADC_ConfigChannel+0x186>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2100      	movs	r1, #0
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fa52 	bl	8002294 <LL_ADC_GetOffsetChannel>
 8002df0:	4603      	mov	r3, r0
 8002df2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002dfa:	fa93 f3a3 	rbit	r3, r3
 8002dfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002e02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002e06:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e0a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d101      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8002e12:	2320      	movs	r3, #32
 8002e14:	e004      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8002e16:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002e1a:	fab3 f383 	clz	r3, r3
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d105      	bne.n	8002e3a <HAL_ADC_ConfigChannel+0x19e>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	0e9b      	lsrs	r3, r3, #26
 8002e34:	f003 031f 	and.w	r3, r3, #31
 8002e38:	e018      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x1d0>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002e46:	fa93 f3a3 	rbit	r3, r3
 8002e4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002e4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002e52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002e56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8002e5e:	2320      	movs	r3, #32
 8002e60:	e004      	b.n	8002e6c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8002e62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002e66:	fab3 f383 	clz	r3, r3
 8002e6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d106      	bne.n	8002e7e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2200      	movs	r2, #0
 8002e76:	2100      	movs	r1, #0
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7ff fa21 	bl	80022c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	2101      	movs	r1, #1
 8002e84:	4618      	mov	r0, r3
 8002e86:	f7ff fa05 	bl	8002294 <LL_ADC_GetOffsetChannel>
 8002e8a:	4603      	mov	r3, r0
 8002e8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d10a      	bne.n	8002eaa <HAL_ADC_ConfigChannel+0x20e>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	2101      	movs	r1, #1
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7ff f9fa 	bl	8002294 <LL_ADC_GetOffsetChannel>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	0e9b      	lsrs	r3, r3, #26
 8002ea4:	f003 021f 	and.w	r2, r3, #31
 8002ea8:	e01e      	b.n	8002ee8 <HAL_ADC_ConfigChannel+0x24c>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2101      	movs	r1, #1
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f7ff f9ef 	bl	8002294 <LL_ADC_GetOffsetChannel>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ebc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ec0:	fa93 f3a3 	rbit	r3, r3
 8002ec4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002ec8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8002ed0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d101      	bne.n	8002edc <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8002ed8:	2320      	movs	r3, #32
 8002eda:	e004      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8002edc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002ee0:	fab3 f383 	clz	r3, r3
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d105      	bne.n	8002f00 <HAL_ADC_ConfigChannel+0x264>
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	0e9b      	lsrs	r3, r3, #26
 8002efa:	f003 031f 	and.w	r3, r3, #31
 8002efe:	e018      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x296>
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f08:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002f0c:	fa93 f3a3 	rbit	r3, r3
 8002f10:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002f14:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002f18:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002f1c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d101      	bne.n	8002f28 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8002f24:	2320      	movs	r3, #32
 8002f26:	e004      	b.n	8002f32 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8002f28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002f2c:	fab3 f383 	clz	r3, r3
 8002f30:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d106      	bne.n	8002f44 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7ff f9be 	bl	80022c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2102      	movs	r1, #2
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff f9a2 	bl	8002294 <LL_ADC_GetOffsetChannel>
 8002f50:	4603      	mov	r3, r0
 8002f52:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d10a      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x2d4>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	2102      	movs	r1, #2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f7ff f997 	bl	8002294 <LL_ADC_GetOffsetChannel>
 8002f66:	4603      	mov	r3, r0
 8002f68:	0e9b      	lsrs	r3, r3, #26
 8002f6a:	f003 021f 	and.w	r2, r3, #31
 8002f6e:	e01e      	b.n	8002fae <HAL_ADC_ConfigChannel+0x312>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2102      	movs	r1, #2
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff f98c 	bl	8002294 <LL_ADC_GetOffsetChannel>
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f82:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002f86:	fa93 f3a3 	rbit	r3, r3
 8002f8a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002f8e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002f96:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d101      	bne.n	8002fa2 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8002f9e:	2320      	movs	r3, #32
 8002fa0:	e004      	b.n	8002fac <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8002fa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002fa6:	fab3 f383 	clz	r3, r3
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d105      	bne.n	8002fc6 <HAL_ADC_ConfigChannel+0x32a>
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	0e9b      	lsrs	r3, r3, #26
 8002fc0:	f003 031f 	and.w	r3, r3, #31
 8002fc4:	e016      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x358>
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fce:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002fd2:	fa93 f3a3 	rbit	r3, r3
 8002fd6:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002fd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002fda:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8002fde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d101      	bne.n	8002fea <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8002fe6:	2320      	movs	r3, #32
 8002fe8:	e004      	b.n	8002ff4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8002fea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002fee:	fab3 f383 	clz	r3, r3
 8002ff2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d106      	bne.n	8003006 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	2102      	movs	r1, #2
 8003000:	4618      	mov	r0, r3
 8003002:	f7ff f95d 	bl	80022c0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2103      	movs	r1, #3
 800300c:	4618      	mov	r0, r3
 800300e:	f7ff f941 	bl	8002294 <LL_ADC_GetOffsetChannel>
 8003012:	4603      	mov	r3, r0
 8003014:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003018:	2b00      	cmp	r3, #0
 800301a:	d10a      	bne.n	8003032 <HAL_ADC_ConfigChannel+0x396>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2103      	movs	r1, #3
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff f936 	bl	8002294 <LL_ADC_GetOffsetChannel>
 8003028:	4603      	mov	r3, r0
 800302a:	0e9b      	lsrs	r3, r3, #26
 800302c:	f003 021f 	and.w	r2, r3, #31
 8003030:	e017      	b.n	8003062 <HAL_ADC_ConfigChannel+0x3c6>
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2103      	movs	r1, #3
 8003038:	4618      	mov	r0, r3
 800303a:	f7ff f92b 	bl	8002294 <LL_ADC_GetOffsetChannel>
 800303e:	4603      	mov	r3, r0
 8003040:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003044:	fa93 f3a3 	rbit	r3, r3
 8003048:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800304a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800304c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800304e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003050:	2b00      	cmp	r3, #0
 8003052:	d101      	bne.n	8003058 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8003054:	2320      	movs	r3, #32
 8003056:	e003      	b.n	8003060 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8003058:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800305a:	fab3 f383 	clz	r3, r3
 800305e:	b2db      	uxtb	r3, r3
 8003060:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800306a:	2b00      	cmp	r3, #0
 800306c:	d105      	bne.n	800307a <HAL_ADC_ConfigChannel+0x3de>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	0e9b      	lsrs	r3, r3, #26
 8003074:	f003 031f 	and.w	r3, r3, #31
 8003078:	e011      	b.n	800309e <HAL_ADC_ConfigChannel+0x402>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003080:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003082:	fa93 f3a3 	rbit	r3, r3
 8003086:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003088:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800308a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800308c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8003092:	2320      	movs	r3, #32
 8003094:	e003      	b.n	800309e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8003096:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003098:	fab3 f383 	clz	r3, r3
 800309c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800309e:	429a      	cmp	r2, r3
 80030a0:	d106      	bne.n	80030b0 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2200      	movs	r2, #0
 80030a8:	2103      	movs	r1, #3
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7ff f908 	bl	80022c0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7ff fa3f 	bl	8002538 <LL_ADC_IsEnabled>
 80030ba:	4603      	mov	r3, r0
 80030bc:	2b00      	cmp	r3, #0
 80030be:	f040 813f 	bne.w	8003340 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6818      	ldr	r0, [r3, #0]
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	6819      	ldr	r1, [r3, #0]
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	461a      	mov	r2, r3
 80030d0:	f7ff f97c 	bl	80023cc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	4a8e      	ldr	r2, [pc, #568]	; (8003314 <HAL_ADC_ConfigChannel+0x678>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	f040 8130 	bne.w	8003340 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d10b      	bne.n	8003108 <HAL_ADC_ConfigChannel+0x46c>
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	0e9b      	lsrs	r3, r3, #26
 80030f6:	3301      	adds	r3, #1
 80030f8:	f003 031f 	and.w	r3, r3, #31
 80030fc:	2b09      	cmp	r3, #9
 80030fe:	bf94      	ite	ls
 8003100:	2301      	movls	r3, #1
 8003102:	2300      	movhi	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	e019      	b.n	800313c <HAL_ADC_ConfigChannel+0x4a0>
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003110:	fa93 f3a3 	rbit	r3, r3
 8003114:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003116:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003118:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800311a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800311c:	2b00      	cmp	r3, #0
 800311e:	d101      	bne.n	8003124 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8003120:	2320      	movs	r3, #32
 8003122:	e003      	b.n	800312c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8003124:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003126:	fab3 f383 	clz	r3, r3
 800312a:	b2db      	uxtb	r3, r3
 800312c:	3301      	adds	r3, #1
 800312e:	f003 031f 	and.w	r3, r3, #31
 8003132:	2b09      	cmp	r3, #9
 8003134:	bf94      	ite	ls
 8003136:	2301      	movls	r3, #1
 8003138:	2300      	movhi	r3, #0
 800313a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800313c:	2b00      	cmp	r3, #0
 800313e:	d079      	beq.n	8003234 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003148:	2b00      	cmp	r3, #0
 800314a:	d107      	bne.n	800315c <HAL_ADC_ConfigChannel+0x4c0>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	0e9b      	lsrs	r3, r3, #26
 8003152:	3301      	adds	r3, #1
 8003154:	069b      	lsls	r3, r3, #26
 8003156:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800315a:	e015      	b.n	8003188 <HAL_ADC_ConfigChannel+0x4ec>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003164:	fa93 f3a3 	rbit	r3, r3
 8003168:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800316a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800316c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800316e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003170:	2b00      	cmp	r3, #0
 8003172:	d101      	bne.n	8003178 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8003174:	2320      	movs	r3, #32
 8003176:	e003      	b.n	8003180 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8003178:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800317a:	fab3 f383 	clz	r3, r3
 800317e:	b2db      	uxtb	r3, r3
 8003180:	3301      	adds	r3, #1
 8003182:	069b      	lsls	r3, r3, #26
 8003184:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003190:	2b00      	cmp	r3, #0
 8003192:	d109      	bne.n	80031a8 <HAL_ADC_ConfigChannel+0x50c>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	0e9b      	lsrs	r3, r3, #26
 800319a:	3301      	adds	r3, #1
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2101      	movs	r1, #1
 80031a2:	fa01 f303 	lsl.w	r3, r1, r3
 80031a6:	e017      	b.n	80031d8 <HAL_ADC_ConfigChannel+0x53c>
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80031b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031b8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80031ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d101      	bne.n	80031c4 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 80031c0:	2320      	movs	r3, #32
 80031c2:	e003      	b.n	80031cc <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 80031c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031c6:	fab3 f383 	clz	r3, r3
 80031ca:	b2db      	uxtb	r3, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	f003 031f 	and.w	r3, r3, #31
 80031d2:	2101      	movs	r1, #1
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	ea42 0103 	orr.w	r1, r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d10a      	bne.n	80031fe <HAL_ADC_ConfigChannel+0x562>
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	0e9b      	lsrs	r3, r3, #26
 80031ee:	3301      	adds	r3, #1
 80031f0:	f003 021f 	and.w	r2, r3, #31
 80031f4:	4613      	mov	r3, r2
 80031f6:	005b      	lsls	r3, r3, #1
 80031f8:	4413      	add	r3, r2
 80031fa:	051b      	lsls	r3, r3, #20
 80031fc:	e018      	b.n	8003230 <HAL_ADC_ConfigChannel+0x594>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003204:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003206:	fa93 f3a3 	rbit	r3, r3
 800320a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800320c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003210:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003212:	2b00      	cmp	r3, #0
 8003214:	d101      	bne.n	800321a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8003216:	2320      	movs	r3, #32
 8003218:	e003      	b.n	8003222 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 800321a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800321c:	fab3 f383 	clz	r3, r3
 8003220:	b2db      	uxtb	r3, r3
 8003222:	3301      	adds	r3, #1
 8003224:	f003 021f 	and.w	r2, r3, #31
 8003228:	4613      	mov	r3, r2
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	4413      	add	r3, r2
 800322e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003230:	430b      	orrs	r3, r1
 8003232:	e080      	b.n	8003336 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800323c:	2b00      	cmp	r3, #0
 800323e:	d107      	bne.n	8003250 <HAL_ADC_ConfigChannel+0x5b4>
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	0e9b      	lsrs	r3, r3, #26
 8003246:	3301      	adds	r3, #1
 8003248:	069b      	lsls	r3, r3, #26
 800324a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800324e:	e015      	b.n	800327c <HAL_ADC_ConfigChannel+0x5e0>
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003258:	fa93 f3a3 	rbit	r3, r3
 800325c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003264:	2b00      	cmp	r3, #0
 8003266:	d101      	bne.n	800326c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8003268:	2320      	movs	r3, #32
 800326a:	e003      	b.n	8003274 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800326c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800326e:	fab3 f383 	clz	r3, r3
 8003272:	b2db      	uxtb	r3, r3
 8003274:	3301      	adds	r3, #1
 8003276:	069b      	lsls	r3, r3, #26
 8003278:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_ADC_ConfigChannel+0x600>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	0e9b      	lsrs	r3, r3, #26
 800328e:	3301      	adds	r3, #1
 8003290:	f003 031f 	and.w	r3, r3, #31
 8003294:	2101      	movs	r1, #1
 8003296:	fa01 f303 	lsl.w	r3, r1, r3
 800329a:	e017      	b.n	80032cc <HAL_ADC_ConfigChannel+0x630>
 800329c:	683b      	ldr	r3, [r7, #0]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a2:	6a3b      	ldr	r3, [r7, #32]
 80032a4:	fa93 f3a3 	rbit	r3, r3
 80032a8:	61fb      	str	r3, [r7, #28]
  return result;
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d101      	bne.n	80032b8 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 80032b4:	2320      	movs	r3, #32
 80032b6:	e003      	b.n	80032c0 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	fab3 f383 	clz	r3, r3
 80032be:	b2db      	uxtb	r3, r3
 80032c0:	3301      	adds	r3, #1
 80032c2:	f003 031f 	and.w	r3, r3, #31
 80032c6:	2101      	movs	r1, #1
 80032c8:	fa01 f303 	lsl.w	r3, r1, r3
 80032cc:	ea42 0103 	orr.w	r1, r2, r3
 80032d0:	683b      	ldr	r3, [r7, #0]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d10d      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x65c>
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	0e9b      	lsrs	r3, r3, #26
 80032e2:	3301      	adds	r3, #1
 80032e4:	f003 021f 	and.w	r2, r3, #31
 80032e8:	4613      	mov	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	4413      	add	r3, r2
 80032ee:	3b1e      	subs	r3, #30
 80032f0:	051b      	lsls	r3, r3, #20
 80032f2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80032f6:	e01d      	b.n	8003334 <HAL_ADC_ConfigChannel+0x698>
 80032f8:	683b      	ldr	r3, [r7, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	fa93 f3a3 	rbit	r3, r3
 8003304:	613b      	str	r3, [r7, #16]
  return result;
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d103      	bne.n	8003318 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8003310:	2320      	movs	r3, #32
 8003312:	e005      	b.n	8003320 <HAL_ADC_ConfigChannel+0x684>
 8003314:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	fab3 f383 	clz	r3, r3
 800331e:	b2db      	uxtb	r3, r3
 8003320:	3301      	adds	r3, #1
 8003322:	f003 021f 	and.w	r2, r3, #31
 8003326:	4613      	mov	r3, r2
 8003328:	005b      	lsls	r3, r3, #1
 800332a:	4413      	add	r3, r2
 800332c:	3b1e      	subs	r3, #30
 800332e:	051b      	lsls	r3, r3, #20
 8003330:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003334:	430b      	orrs	r3, r1
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	6892      	ldr	r2, [r2, #8]
 800333a:	4619      	mov	r1, r3
 800333c:	f7ff f81a 	bl	8002374 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	4b44      	ldr	r3, [pc, #272]	; (8003458 <HAL_ADC_ConfigChannel+0x7bc>)
 8003346:	4013      	ands	r3, r2
 8003348:	2b00      	cmp	r3, #0
 800334a:	d07a      	beq.n	8003442 <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800334c:	4843      	ldr	r0, [pc, #268]	; (800345c <HAL_ADC_ConfigChannel+0x7c0>)
 800334e:	f7fe ff6f 	bl	8002230 <LL_ADC_GetCommonPathInternalCh>
 8003352:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a41      	ldr	r2, [pc, #260]	; (8003460 <HAL_ADC_ConfigChannel+0x7c4>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d12c      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003360:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003364:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d126      	bne.n	80033ba <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a3c      	ldr	r2, [pc, #240]	; (8003464 <HAL_ADC_ConfigChannel+0x7c8>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d004      	beq.n	8003380 <HAL_ADC_ConfigChannel+0x6e4>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a3b      	ldr	r2, [pc, #236]	; (8003468 <HAL_ADC_ConfigChannel+0x7cc>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d15d      	bne.n	800343c <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003380:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003384:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003388:	4619      	mov	r1, r3
 800338a:	4834      	ldr	r0, [pc, #208]	; (800345c <HAL_ADC_ConfigChannel+0x7c0>)
 800338c:	f7fe ff3d 	bl	800220a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003390:	4b36      	ldr	r3, [pc, #216]	; (800346c <HAL_ADC_ConfigChannel+0x7d0>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	099b      	lsrs	r3, r3, #6
 8003396:	4a36      	ldr	r2, [pc, #216]	; (8003470 <HAL_ADC_ConfigChannel+0x7d4>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	099b      	lsrs	r3, r3, #6
 800339e:	1c5a      	adds	r2, r3, #1
 80033a0:	4613      	mov	r3, r2
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033aa:	e002      	b.n	80033b2 <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	3b01      	subs	r3, #1
 80033b0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1f9      	bne.n	80033ac <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033b8:	e040      	b.n	800343c <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a2d      	ldr	r2, [pc, #180]	; (8003474 <HAL_ADC_ConfigChannel+0x7d8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d118      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x75a>
 80033c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d112      	bne.n	80033f6 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a23      	ldr	r2, [pc, #140]	; (8003464 <HAL_ADC_ConfigChannel+0x7c8>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d004      	beq.n	80033e4 <HAL_ADC_ConfigChannel+0x748>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a22      	ldr	r2, [pc, #136]	; (8003468 <HAL_ADC_ConfigChannel+0x7cc>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d12d      	bne.n	8003440 <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033e4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80033e8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80033ec:	4619      	mov	r1, r3
 80033ee:	481b      	ldr	r0, [pc, #108]	; (800345c <HAL_ADC_ConfigChannel+0x7c0>)
 80033f0:	f7fe ff0b 	bl	800220a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033f4:	e024      	b.n	8003440 <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4a1f      	ldr	r2, [pc, #124]	; (8003478 <HAL_ADC_ConfigChannel+0x7dc>)
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d120      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003400:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003404:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003408:	2b00      	cmp	r3, #0
 800340a:	d11a      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a14      	ldr	r2, [pc, #80]	; (8003464 <HAL_ADC_ConfigChannel+0x7c8>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d115      	bne.n	8003442 <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003416:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800341a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800341e:	4619      	mov	r1, r3
 8003420:	480e      	ldr	r0, [pc, #56]	; (800345c <HAL_ADC_ConfigChannel+0x7c0>)
 8003422:	f7fe fef2 	bl	800220a <LL_ADC_SetCommonPathInternalCh>
 8003426:	e00c      	b.n	8003442 <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800342c:	f043 0220 	orr.w	r2, r3, #32
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800343a:	e002      	b.n	8003442 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800343c:	bf00      	nop
 800343e:	e000      	b.n	8003442 <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003440:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2200      	movs	r2, #0
 8003446:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800344a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800344e:	4618      	mov	r0, r3
 8003450:	37d8      	adds	r7, #216	; 0xd8
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	80080000 	.word	0x80080000
 800345c:	50040300 	.word	0x50040300
 8003460:	c7520000 	.word	0xc7520000
 8003464:	50040000 	.word	0x50040000
 8003468:	50040200 	.word	0x50040200
 800346c:	20000008 	.word	0x20000008
 8003470:	053e2d63 	.word	0x053e2d63
 8003474:	cb840000 	.word	0xcb840000
 8003478:	80000001 	.word	0x80000001

0800347c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b088      	sub	sp, #32
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4618      	mov	r0, r3
 8003494:	f7ff f89e 	bl	80025d4 <LL_ADC_REG_IsConversionOngoing>
 8003498:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f7ff f8bf 	bl	8002622 <LL_ADC_INJ_IsConversionOngoing>
 80034a4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d103      	bne.n	80034b4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	f000 8098 	beq.w	80035e4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68db      	ldr	r3, [r3, #12]
 80034ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d02a      	beq.n	8003518 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	7e5b      	ldrb	r3, [r3, #25]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d126      	bne.n	8003518 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	7e1b      	ldrb	r3, [r3, #24]
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d122      	bne.n	8003518 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80034d2:	2301      	movs	r3, #1
 80034d4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80034d6:	e014      	b.n	8003502 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80034d8:	69fb      	ldr	r3, [r7, #28]
 80034da:	4a45      	ldr	r2, [pc, #276]	; (80035f0 <ADC_ConversionStop+0x174>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d90d      	bls.n	80034fc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034e4:	f043 0210 	orr.w	r2, r3, #16
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034f0:	f043 0201 	orr.w	r2, r3, #1
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e074      	b.n	80035e6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	3301      	adds	r3, #1
 8003500:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b40      	cmp	r3, #64	; 0x40
 800350e:	d1e3      	bne.n	80034d8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2240      	movs	r2, #64	; 0x40
 8003516:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b02      	cmp	r3, #2
 800351c:	d014      	beq.n	8003548 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff f856 	bl	80025d4 <LL_ADC_REG_IsConversionOngoing>
 8003528:	4603      	mov	r3, r0
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00c      	beq.n	8003548 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4618      	mov	r0, r3
 8003534:	f7ff f813 	bl	800255e <LL_ADC_IsDisableOngoing>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d104      	bne.n	8003548 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4618      	mov	r0, r3
 8003544:	f7ff f832 	bl	80025ac <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003548:	69bb      	ldr	r3, [r7, #24]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d014      	beq.n	8003578 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4618      	mov	r0, r3
 8003554:	f7ff f865 	bl	8002622 <LL_ADC_INJ_IsConversionOngoing>
 8003558:	4603      	mov	r3, r0
 800355a:	2b00      	cmp	r3, #0
 800355c:	d00c      	beq.n	8003578 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fffb 	bl	800255e <LL_ADC_IsDisableOngoing>
 8003568:	4603      	mov	r3, r0
 800356a:	2b00      	cmp	r3, #0
 800356c:	d104      	bne.n	8003578 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4618      	mov	r0, r3
 8003574:	f7ff f841 	bl	80025fa <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	2b02      	cmp	r3, #2
 800357c:	d005      	beq.n	800358a <ADC_ConversionStop+0x10e>
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	2b03      	cmp	r3, #3
 8003582:	d105      	bne.n	8003590 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003584:	230c      	movs	r3, #12
 8003586:	617b      	str	r3, [r7, #20]
        break;
 8003588:	e005      	b.n	8003596 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 800358a:	2308      	movs	r3, #8
 800358c:	617b      	str	r3, [r7, #20]
        break;
 800358e:	e002      	b.n	8003596 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003590:	2304      	movs	r3, #4
 8003592:	617b      	str	r3, [r7, #20]
        break;
 8003594:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003596:	f7fe fe19 	bl	80021cc <HAL_GetTick>
 800359a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 800359c:	e01b      	b.n	80035d6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800359e:	f7fe fe15 	bl	80021cc <HAL_GetTick>
 80035a2:	4602      	mov	r2, r0
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	1ad3      	subs	r3, r2, r3
 80035a8:	2b05      	cmp	r3, #5
 80035aa:	d914      	bls.n	80035d6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	689a      	ldr	r2, [r3, #8]
 80035b2:	697b      	ldr	r3, [r7, #20]
 80035b4:	4013      	ands	r3, r2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00d      	beq.n	80035d6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035be:	f043 0210 	orr.w	r2, r3, #16
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ca:	f043 0201 	orr.w	r2, r3, #1
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 80035d2:	2301      	movs	r3, #1
 80035d4:	e007      	b.n	80035e6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	689a      	ldr	r2, [r3, #8]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	4013      	ands	r3, r2
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d1dc      	bne.n	800359e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80035e4:	2300      	movs	r3, #0
}
 80035e6:	4618      	mov	r0, r3
 80035e8:	3720      	adds	r7, #32
 80035ea:	46bd      	mov	sp, r7
 80035ec:	bd80      	pop	{r7, pc}
 80035ee:	bf00      	nop
 80035f0:	a33fffff 	.word	0xa33fffff

080035f4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	f7fe ff99 	bl	8002538 <LL_ADC_IsEnabled>
 8003606:	4603      	mov	r3, r0
 8003608:	2b00      	cmp	r3, #0
 800360a:	d14d      	bne.n	80036a8 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689a      	ldr	r2, [r3, #8]
 8003612:	4b28      	ldr	r3, [pc, #160]	; (80036b4 <ADC_Enable+0xc0>)
 8003614:	4013      	ands	r3, r2
 8003616:	2b00      	cmp	r3, #0
 8003618:	d00d      	beq.n	8003636 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800361e:	f043 0210 	orr.w	r2, r3, #16
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800362a:	f043 0201 	orr.w	r2, r3, #1
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e039      	b.n	80036aa <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7fe ff54 	bl	80024e8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003640:	f7fe fdc4 	bl	80021cc <HAL_GetTick>
 8003644:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003646:	e028      	b.n	800369a <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	4618      	mov	r0, r3
 800364e:	f7fe ff73 	bl	8002538 <LL_ADC_IsEnabled>
 8003652:	4603      	mov	r3, r0
 8003654:	2b00      	cmp	r3, #0
 8003656:	d104      	bne.n	8003662 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4618      	mov	r0, r3
 800365e:	f7fe ff43 	bl	80024e8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003662:	f7fe fdb3 	bl	80021cc <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d914      	bls.n	800369a <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0301 	and.w	r3, r3, #1
 800367a:	2b01      	cmp	r3, #1
 800367c:	d00d      	beq.n	800369a <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003682:	f043 0210 	orr.w	r2, r3, #16
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368e:	f043 0201 	orr.w	r2, r3, #1
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e007      	b.n	80036aa <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0301 	and.w	r3, r3, #1
 80036a4:	2b01      	cmp	r3, #1
 80036a6:	d1cf      	bne.n	8003648 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036a8:	2300      	movs	r3, #0
}
 80036aa:	4618      	mov	r0, r3
 80036ac:	3710      	adds	r7, #16
 80036ae:	46bd      	mov	sp, r7
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	8000003f 	.word	0x8000003f

080036b8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fe ff4a 	bl	800255e <LL_ADC_IsDisableOngoing>
 80036ca:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7fe ff31 	bl	8002538 <LL_ADC_IsEnabled>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d047      	beq.n	800376c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d144      	bne.n	800376c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	f003 030d 	and.w	r3, r3, #13
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d10c      	bne.n	800370a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4618      	mov	r0, r3
 80036f6:	f7fe ff0b 	bl	8002510 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2203      	movs	r2, #3
 8003700:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003702:	f7fe fd63 	bl	80021cc <HAL_GetTick>
 8003706:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003708:	e029      	b.n	800375e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800370e:	f043 0210 	orr.w	r2, r3, #16
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800371a:	f043 0201 	orr.w	r2, r3, #1
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8003722:	2301      	movs	r3, #1
 8003724:	e023      	b.n	800376e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003726:	f7fe fd51 	bl	80021cc <HAL_GetTick>
 800372a:	4602      	mov	r2, r0
 800372c:	68bb      	ldr	r3, [r7, #8]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b02      	cmp	r3, #2
 8003732:	d914      	bls.n	800375e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d00d      	beq.n	800375e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003746:	f043 0210 	orr.w	r2, r3, #16
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003752:	f043 0201 	orr.w	r2, r3, #1
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e007      	b.n	800376e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0301 	and.w	r3, r3, #1
 8003768:	2b00      	cmp	r3, #0
 800376a:	d1dc      	bne.n	8003726 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <LL_ADC_IsEnabled>:
{
 8003776:	b480      	push	{r7}
 8003778:	b083      	sub	sp, #12
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	f003 0301 	and.w	r3, r3, #1
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <LL_ADC_IsEnabled+0x18>
 800378a:	2301      	movs	r3, #1
 800378c:	e000      	b.n	8003790 <LL_ADC_IsEnabled+0x1a>
 800378e:	2300      	movs	r3, #0
}
 8003790:	4618      	mov	r0, r3
 8003792:	370c      	adds	r7, #12
 8003794:	46bd      	mov	sp, r7
 8003796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379a:	4770      	bx	lr

0800379c <LL_ADC_REG_IsConversionOngoing>:
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f003 0304 	and.w	r3, r3, #4
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d101      	bne.n	80037b4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037b0:	2301      	movs	r3, #1
 80037b2:	e000      	b.n	80037b6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c0:	4770      	bx	lr
	...

080037c4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b09f      	sub	sp, #124	; 0x7c
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ce:	2300      	movs	r3, #0
 80037d0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037de:	2302      	movs	r3, #2
 80037e0:	e093      	b.n	800390a <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80037ea:	2300      	movs	r3, #0
 80037ec:	65fb      	str	r3, [r7, #92]	; 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80037ee:	2300      	movs	r3, #0
 80037f0:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a47      	ldr	r2, [pc, #284]	; (8003914 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d102      	bne.n	8003802 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037fc:	4b46      	ldr	r3, [pc, #280]	; (8003918 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037fe:	60bb      	str	r3, [r7, #8]
 8003800:	e001      	b.n	8003806 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003802:	2300      	movs	r3, #0
 8003804:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d10b      	bne.n	8003824 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003810:	f043 0220 	orr.w	r2, r3, #32
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e072      	b.n	800390a <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003824:	68bb      	ldr	r3, [r7, #8]
 8003826:	4618      	mov	r0, r3
 8003828:	f7ff ffb8 	bl	800379c <LL_ADC_REG_IsConversionOngoing>
 800382c:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4618      	mov	r0, r3
 8003834:	f7ff ffb2 	bl	800379c <LL_ADC_REG_IsConversionOngoing>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d154      	bne.n	80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800383e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003840:	2b00      	cmp	r3, #0
 8003842:	d151      	bne.n	80038e8 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003844:	4b35      	ldr	r3, [pc, #212]	; (800391c <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003846:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d02c      	beq.n	80038aa <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	6859      	ldr	r1, [r3, #4]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003862:	035b      	lsls	r3, r3, #13
 8003864:	430b      	orrs	r3, r1
 8003866:	431a      	orrs	r2, r3
 8003868:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800386a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800386c:	4829      	ldr	r0, [pc, #164]	; (8003914 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800386e:	f7ff ff82 	bl	8003776 <LL_ADC_IsEnabled>
 8003872:	4604      	mov	r4, r0
 8003874:	4828      	ldr	r0, [pc, #160]	; (8003918 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003876:	f7ff ff7e 	bl	8003776 <LL_ADC_IsEnabled>
 800387a:	4603      	mov	r3, r0
 800387c:	431c      	orrs	r4, r3
 800387e:	4828      	ldr	r0, [pc, #160]	; (8003920 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 8003880:	f7ff ff79 	bl	8003776 <LL_ADC_IsEnabled>
 8003884:	4603      	mov	r3, r0
 8003886:	4323      	orrs	r3, r4
 8003888:	2b00      	cmp	r3, #0
 800388a:	d137      	bne.n	80038fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 800388c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800388e:	689b      	ldr	r3, [r3, #8]
 8003890:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003894:	f023 030f 	bic.w	r3, r3, #15
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	6811      	ldr	r1, [r2, #0]
 800389c:	683a      	ldr	r2, [r7, #0]
 800389e:	6892      	ldr	r2, [r2, #8]
 80038a0:	430a      	orrs	r2, r1
 80038a2:	431a      	orrs	r2, r3
 80038a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038a6:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038a8:	e028      	b.n	80038fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038ac:	689b      	ldr	r3, [r3, #8]
 80038ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038b4:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038b6:	4817      	ldr	r0, [pc, #92]	; (8003914 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038b8:	f7ff ff5d 	bl	8003776 <LL_ADC_IsEnabled>
 80038bc:	4604      	mov	r4, r0
 80038be:	4816      	ldr	r0, [pc, #88]	; (8003918 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80038c0:	f7ff ff59 	bl	8003776 <LL_ADC_IsEnabled>
 80038c4:	4603      	mov	r3, r0
 80038c6:	431c      	orrs	r4, r3
 80038c8:	4815      	ldr	r0, [pc, #84]	; (8003920 <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80038ca:	f7ff ff54 	bl	8003776 <LL_ADC_IsEnabled>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4323      	orrs	r3, r4
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d112      	bne.n	80038fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80038de:	f023 030f 	bic.w	r3, r3, #15
 80038e2:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038e4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038e6:	e009      	b.n	80038fc <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038ec:	f043 0220 	orr.w	r2, r3, #32
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 80038fa:	e000      	b.n	80038fe <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038fc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2200      	movs	r2, #0
 8003902:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8003906:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 800390a:	4618      	mov	r0, r3
 800390c:	377c      	adds	r7, #124	; 0x7c
 800390e:	46bd      	mov	sp, r7
 8003910:	bd90      	pop	{r4, r7, pc}
 8003912:	bf00      	nop
 8003914:	50040000 	.word	0x50040000
 8003918:	50040100 	.word	0x50040100
 800391c:	50040300 	.word	0x50040300
 8003920:	50040200 	.word	0x50040200

08003924 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003924:	b480      	push	{r7}
 8003926:	b085      	sub	sp, #20
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f003 0307 	and.w	r3, r3, #7
 8003932:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003934:	4b0c      	ldr	r3, [pc, #48]	; (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003936:	68db      	ldr	r3, [r3, #12]
 8003938:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800393a:	68ba      	ldr	r2, [r7, #8]
 800393c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003940:	4013      	ands	r3, r2
 8003942:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800394c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003950:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003954:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003956:	4a04      	ldr	r2, [pc, #16]	; (8003968 <__NVIC_SetPriorityGrouping+0x44>)
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	60d3      	str	r3, [r2, #12]
}
 800395c:	bf00      	nop
 800395e:	3714      	adds	r7, #20
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800396c:	b480      	push	{r7}
 800396e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003970:	4b04      	ldr	r3, [pc, #16]	; (8003984 <__NVIC_GetPriorityGrouping+0x18>)
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	0a1b      	lsrs	r3, r3, #8
 8003976:	f003 0307 	and.w	r3, r3, #7
}
 800397a:	4618      	mov	r0, r3
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	4603      	mov	r3, r0
 8003990:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003996:	2b00      	cmp	r3, #0
 8003998:	db0b      	blt.n	80039b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800399a:	79fb      	ldrb	r3, [r7, #7]
 800399c:	f003 021f 	and.w	r2, r3, #31
 80039a0:	4907      	ldr	r1, [pc, #28]	; (80039c0 <__NVIC_EnableIRQ+0x38>)
 80039a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a6:	095b      	lsrs	r3, r3, #5
 80039a8:	2001      	movs	r0, #1
 80039aa:	fa00 f202 	lsl.w	r2, r0, r2
 80039ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039b2:	bf00      	nop
 80039b4:	370c      	adds	r7, #12
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	e000e100 	.word	0xe000e100

080039c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	4603      	mov	r3, r0
 80039cc:	6039      	str	r1, [r7, #0]
 80039ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	db0a      	blt.n	80039ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	b2da      	uxtb	r2, r3
 80039dc:	490c      	ldr	r1, [pc, #48]	; (8003a10 <__NVIC_SetPriority+0x4c>)
 80039de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039e2:	0112      	lsls	r2, r2, #4
 80039e4:	b2d2      	uxtb	r2, r2
 80039e6:	440b      	add	r3, r1
 80039e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039ec:	e00a      	b.n	8003a04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	b2da      	uxtb	r2, r3
 80039f2:	4908      	ldr	r1, [pc, #32]	; (8003a14 <__NVIC_SetPriority+0x50>)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	f003 030f 	and.w	r3, r3, #15
 80039fa:	3b04      	subs	r3, #4
 80039fc:	0112      	lsls	r2, r2, #4
 80039fe:	b2d2      	uxtb	r2, r2
 8003a00:	440b      	add	r3, r1
 8003a02:	761a      	strb	r2, [r3, #24]
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr
 8003a10:	e000e100 	.word	0xe000e100
 8003a14:	e000ed00 	.word	0xe000ed00

08003a18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b089      	sub	sp, #36	; 0x24
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f003 0307 	and.w	r3, r3, #7
 8003a2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a2c:	69fb      	ldr	r3, [r7, #28]
 8003a2e:	f1c3 0307 	rsb	r3, r3, #7
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	bf28      	it	cs
 8003a36:	2304      	movcs	r3, #4
 8003a38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	3304      	adds	r3, #4
 8003a3e:	2b06      	cmp	r3, #6
 8003a40:	d902      	bls.n	8003a48 <NVIC_EncodePriority+0x30>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	3b03      	subs	r3, #3
 8003a46:	e000      	b.n	8003a4a <NVIC_EncodePriority+0x32>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a50:	69bb      	ldr	r3, [r7, #24]
 8003a52:	fa02 f303 	lsl.w	r3, r2, r3
 8003a56:	43da      	mvns	r2, r3
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	401a      	ands	r2, r3
 8003a5c:	697b      	ldr	r3, [r7, #20]
 8003a5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a60:	f04f 31ff 	mov.w	r1, #4294967295
 8003a64:	697b      	ldr	r3, [r7, #20]
 8003a66:	fa01 f303 	lsl.w	r3, r1, r3
 8003a6a:	43d9      	mvns	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a70:	4313      	orrs	r3, r2
         );
}
 8003a72:	4618      	mov	r0, r3
 8003a74:	3724      	adds	r7, #36	; 0x24
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr

08003a7e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7e:	b580      	push	{r7, lr}
 8003a80:	b082      	sub	sp, #8
 8003a82:	af00      	add	r7, sp, #0
 8003a84:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a86:	6878      	ldr	r0, [r7, #4]
 8003a88:	f7ff ff4c 	bl	8003924 <__NVIC_SetPriorityGrouping>
}
 8003a8c:	bf00      	nop
 8003a8e:	3708      	adds	r7, #8
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	60b9      	str	r1, [r7, #8]
 8003a9e:	607a      	str	r2, [r7, #4]
 8003aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa6:	f7ff ff61 	bl	800396c <__NVIC_GetPriorityGrouping>
 8003aaa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	6978      	ldr	r0, [r7, #20]
 8003ab2:	f7ff ffb1 	bl	8003a18 <NVIC_EncodePriority>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff80 	bl	80039c4 <__NVIC_SetPriority>
}
 8003ac4:	bf00      	nop
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	4603      	mov	r3, r0
 8003ad4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff ff54 	bl	8003988 <__NVIC_EnableIRQ>
}
 8003ae0:	bf00      	nop
 8003ae2:	3708      	adds	r7, #8
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bd80      	pop	{r7, pc}

08003ae8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b087      	sub	sp, #28
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003af2:	2300      	movs	r3, #0
 8003af4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af6:	e17f      	b.n	8003df8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	2101      	movs	r1, #1
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	fa01 f303 	lsl.w	r3, r1, r3
 8003b04:	4013      	ands	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	f000 8171 	beq.w	8003df2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f003 0303 	and.w	r3, r3, #3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	d005      	beq.n	8003b28 <HAL_GPIO_Init+0x40>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	f003 0303 	and.w	r3, r3, #3
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d130      	bne.n	8003b8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	2203      	movs	r2, #3
 8003b34:	fa02 f303 	lsl.w	r3, r2, r3
 8003b38:	43db      	mvns	r3, r3
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	005b      	lsls	r3, r3, #1
 8003b48:	fa02 f303 	lsl.w	r3, r2, r3
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	693a      	ldr	r2, [r7, #16]
 8003b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b5e:	2201      	movs	r2, #1
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43db      	mvns	r3, r3
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	091b      	lsrs	r3, r3, #4
 8003b74:	f003 0201 	and.w	r2, r3, #1
 8003b78:	697b      	ldr	r3, [r7, #20]
 8003b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	f003 0303 	and.w	r3, r3, #3
 8003b92:	2b03      	cmp	r3, #3
 8003b94:	d118      	bne.n	8003bc8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	697b      	ldr	r3, [r7, #20]
 8003ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba4:	43db      	mvns	r3, r3
 8003ba6:	693a      	ldr	r2, [r7, #16]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	08db      	lsrs	r3, r3, #3
 8003bb2:	f003 0201 	and.w	r2, r3, #1
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	693a      	ldr	r2, [r7, #16]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	693a      	ldr	r2, [r7, #16]
 8003bc6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	685b      	ldr	r3, [r3, #4]
 8003bcc:	f003 0303 	and.w	r3, r3, #3
 8003bd0:	2b03      	cmp	r3, #3
 8003bd2:	d017      	beq.n	8003c04 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	68db      	ldr	r3, [r3, #12]
 8003bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	005b      	lsls	r3, r3, #1
 8003bde:	2203      	movs	r2, #3
 8003be0:	fa02 f303 	lsl.w	r3, r2, r3
 8003be4:	43db      	mvns	r3, r3
 8003be6:	693a      	ldr	r2, [r7, #16]
 8003be8:	4013      	ands	r3, r2
 8003bea:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	689a      	ldr	r2, [r3, #8]
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	005b      	lsls	r3, r3, #1
 8003bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f003 0303 	and.w	r3, r3, #3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d123      	bne.n	8003c58 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	08da      	lsrs	r2, r3, #3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3208      	adds	r2, #8
 8003c18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0307 	and.w	r3, r3, #7
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	220f      	movs	r2, #15
 8003c28:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2c:	43db      	mvns	r3, r3
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	691a      	ldr	r2, [r3, #16]
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f003 0307 	and.w	r3, r3, #7
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	693a      	ldr	r2, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c4a:	697b      	ldr	r3, [r7, #20]
 8003c4c:	08da      	lsrs	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	3208      	adds	r2, #8
 8003c52:	6939      	ldr	r1, [r7, #16]
 8003c54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	2203      	movs	r2, #3
 8003c64:	fa02 f303 	lsl.w	r3, r2, r3
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	693a      	ldr	r2, [r7, #16]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f003 0203 	and.w	r2, r3, #3
 8003c78:	697b      	ldr	r3, [r7, #20]
 8003c7a:	005b      	lsls	r3, r3, #1
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	693a      	ldr	r2, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	693a      	ldr	r2, [r7, #16]
 8003c8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 80ac 	beq.w	8003df2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c9a:	4b5f      	ldr	r3, [pc, #380]	; (8003e18 <HAL_GPIO_Init+0x330>)
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9e:	4a5e      	ldr	r2, [pc, #376]	; (8003e18 <HAL_GPIO_Init+0x330>)
 8003ca0:	f043 0301 	orr.w	r3, r3, #1
 8003ca4:	6613      	str	r3, [r2, #96]	; 0x60
 8003ca6:	4b5c      	ldr	r3, [pc, #368]	; (8003e18 <HAL_GPIO_Init+0x330>)
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	f003 0301 	and.w	r3, r3, #1
 8003cae:	60bb      	str	r3, [r7, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cb2:	4a5a      	ldr	r2, [pc, #360]	; (8003e1c <HAL_GPIO_Init+0x334>)
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	089b      	lsrs	r3, r3, #2
 8003cb8:	3302      	adds	r3, #2
 8003cba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	220f      	movs	r2, #15
 8003cca:	fa02 f303 	lsl.w	r3, r2, r3
 8003cce:	43db      	mvns	r3, r3
 8003cd0:	693a      	ldr	r2, [r7, #16]
 8003cd2:	4013      	ands	r3, r2
 8003cd4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003cdc:	d025      	beq.n	8003d2a <HAL_GPIO_Init+0x242>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a4f      	ldr	r2, [pc, #316]	; (8003e20 <HAL_GPIO_Init+0x338>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d01f      	beq.n	8003d26 <HAL_GPIO_Init+0x23e>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a4e      	ldr	r2, [pc, #312]	; (8003e24 <HAL_GPIO_Init+0x33c>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d019      	beq.n	8003d22 <HAL_GPIO_Init+0x23a>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a4d      	ldr	r2, [pc, #308]	; (8003e28 <HAL_GPIO_Init+0x340>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d013      	beq.n	8003d1e <HAL_GPIO_Init+0x236>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a4c      	ldr	r2, [pc, #304]	; (8003e2c <HAL_GPIO_Init+0x344>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d00d      	beq.n	8003d1a <HAL_GPIO_Init+0x232>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a4b      	ldr	r2, [pc, #300]	; (8003e30 <HAL_GPIO_Init+0x348>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d007      	beq.n	8003d16 <HAL_GPIO_Init+0x22e>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	4a4a      	ldr	r2, [pc, #296]	; (8003e34 <HAL_GPIO_Init+0x34c>)
 8003d0a:	4293      	cmp	r3, r2
 8003d0c:	d101      	bne.n	8003d12 <HAL_GPIO_Init+0x22a>
 8003d0e:	2306      	movs	r3, #6
 8003d10:	e00c      	b.n	8003d2c <HAL_GPIO_Init+0x244>
 8003d12:	2307      	movs	r3, #7
 8003d14:	e00a      	b.n	8003d2c <HAL_GPIO_Init+0x244>
 8003d16:	2305      	movs	r3, #5
 8003d18:	e008      	b.n	8003d2c <HAL_GPIO_Init+0x244>
 8003d1a:	2304      	movs	r3, #4
 8003d1c:	e006      	b.n	8003d2c <HAL_GPIO_Init+0x244>
 8003d1e:	2303      	movs	r3, #3
 8003d20:	e004      	b.n	8003d2c <HAL_GPIO_Init+0x244>
 8003d22:	2302      	movs	r3, #2
 8003d24:	e002      	b.n	8003d2c <HAL_GPIO_Init+0x244>
 8003d26:	2301      	movs	r3, #1
 8003d28:	e000      	b.n	8003d2c <HAL_GPIO_Init+0x244>
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	697a      	ldr	r2, [r7, #20]
 8003d2e:	f002 0203 	and.w	r2, r2, #3
 8003d32:	0092      	lsls	r2, r2, #2
 8003d34:	4093      	lsls	r3, r2
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d3c:	4937      	ldr	r1, [pc, #220]	; (8003e1c <HAL_GPIO_Init+0x334>)
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	089b      	lsrs	r3, r3, #2
 8003d42:	3302      	adds	r3, #2
 8003d44:	693a      	ldr	r2, [r7, #16]
 8003d46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d4a:	4b3b      	ldr	r3, [pc, #236]	; (8003e38 <HAL_GPIO_Init+0x350>)
 8003d4c:	689b      	ldr	r3, [r3, #8]
 8003d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	43db      	mvns	r3, r3
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	4013      	ands	r3, r2
 8003d58:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d003      	beq.n	8003d6e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d6e:	4a32      	ldr	r2, [pc, #200]	; (8003e38 <HAL_GPIO_Init+0x350>)
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d74:	4b30      	ldr	r3, [pc, #192]	; (8003e38 <HAL_GPIO_Init+0x350>)
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	43db      	mvns	r3, r3
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d003      	beq.n	8003d98 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d98:	4a27      	ldr	r2, [pc, #156]	; (8003e38 <HAL_GPIO_Init+0x350>)
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d9e:	4b26      	ldr	r3, [pc, #152]	; (8003e38 <HAL_GPIO_Init+0x350>)
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	43db      	mvns	r3, r3
 8003da8:	693a      	ldr	r2, [r7, #16]
 8003daa:	4013      	ands	r3, r2
 8003dac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003dae:	683b      	ldr	r3, [r7, #0]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d003      	beq.n	8003dc2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dc2:	4a1d      	ldr	r2, [pc, #116]	; (8003e38 <HAL_GPIO_Init+0x350>)
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003dc8:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <HAL_GPIO_Init+0x350>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	693a      	ldr	r2, [r7, #16]
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	685b      	ldr	r3, [r3, #4]
 8003ddc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d003      	beq.n	8003dec <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003dec:	4a12      	ldr	r2, [pc, #72]	; (8003e38 <HAL_GPIO_Init+0x350>)
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	3301      	adds	r3, #1
 8003df6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	681a      	ldr	r2, [r3, #0]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	fa22 f303 	lsr.w	r3, r2, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f47f ae78 	bne.w	8003af8 <HAL_GPIO_Init+0x10>
  }
}
 8003e08:	bf00      	nop
 8003e0a:	bf00      	nop
 8003e0c:	371c      	adds	r7, #28
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr
 8003e16:	bf00      	nop
 8003e18:	40021000 	.word	0x40021000
 8003e1c:	40010000 	.word	0x40010000
 8003e20:	48000400 	.word	0x48000400
 8003e24:	48000800 	.word	0x48000800
 8003e28:	48000c00 	.word	0x48000c00
 8003e2c:	48001000 	.word	0x48001000
 8003e30:	48001400 	.word	0x48001400
 8003e34:	48001800 	.word	0x48001800
 8003e38:	40010400 	.word	0x40010400

08003e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
 8003e44:	460b      	mov	r3, r1
 8003e46:	807b      	strh	r3, [r7, #2]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e4c:	787b      	ldrb	r3, [r7, #1]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d003      	beq.n	8003e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e52:	887a      	ldrh	r2, [r7, #2]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e58:	e002      	b.n	8003e60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e5a:	887a      	ldrh	r2, [r7, #2]
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003e60:	bf00      	nop
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b082      	sub	sp, #8
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e081      	b.n	8003f82 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d106      	bne.n	8003e98 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f7fd ffa4 	bl	8001de0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2224      	movs	r2, #36	; 0x24
 8003e9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0201 	bic.w	r2, r2, #1
 8003eae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	685a      	ldr	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ebc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	689a      	ldr	r2, [r3, #8]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ecc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d107      	bne.n	8003ee6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689a      	ldr	r2, [r3, #8]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	e006      	b.n	8003ef4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003ef2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	2b02      	cmp	r3, #2
 8003efa:	d104      	bne.n	8003f06 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f04:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	6812      	ldr	r2, [r2, #0]
 8003f10:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003f14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f18:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	68da      	ldr	r2, [r3, #12]
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f28:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	699b      	ldr	r3, [r3, #24]
 8003f3a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	430a      	orrs	r2, r1
 8003f42:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	69d9      	ldr	r1, [r3, #28]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6a1a      	ldr	r2, [r3, #32]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	681a      	ldr	r2, [r3, #0]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f042 0201 	orr.w	r2, r2, #1
 8003f62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2220      	movs	r2, #32
 8003f6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003f80:	2300      	movs	r3, #0
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af02      	add	r7, sp, #8
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	607a      	str	r2, [r7, #4]
 8003f96:	461a      	mov	r2, r3
 8003f98:	460b      	mov	r3, r1
 8003f9a:	817b      	strh	r3, [r7, #10]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fa6:	b2db      	uxtb	r3, r3
 8003fa8:	2b20      	cmp	r3, #32
 8003faa:	f040 80da 	bne.w	8004162 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	d101      	bne.n	8003fbc <HAL_I2C_Master_Transmit+0x30>
 8003fb8:	2302      	movs	r3, #2
 8003fba:	e0d3      	b.n	8004164 <HAL_I2C_Master_Transmit+0x1d8>
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fc4:	f7fe f902 	bl	80021cc <HAL_GetTick>
 8003fc8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	2319      	movs	r3, #25
 8003fd0:	2201      	movs	r2, #1
 8003fd2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f9f7 	bl	80043ca <I2C_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d001      	beq.n	8003fe6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e0be      	b.n	8004164 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2221      	movs	r2, #33	; 0x21
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2210      	movs	r2, #16
 8003ff2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	893a      	ldrh	r2, [r7, #8]
 8004006:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	2bff      	cmp	r3, #255	; 0xff
 8004016:	d90e      	bls.n	8004036 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	22ff      	movs	r2, #255	; 0xff
 800401c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	b2da      	uxtb	r2, r3
 8004024:	8979      	ldrh	r1, [r7, #10]
 8004026:	4b51      	ldr	r3, [pc, #324]	; (800416c <HAL_I2C_Master_Transmit+0x1e0>)
 8004028:	9300      	str	r3, [sp, #0]
 800402a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800402e:	68f8      	ldr	r0, [r7, #12]
 8004030:	f000 fb74 	bl	800471c <I2C_TransferConfig>
 8004034:	e06c      	b.n	8004110 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403a:	b29a      	uxth	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004044:	b2da      	uxtb	r2, r3
 8004046:	8979      	ldrh	r1, [r7, #10]
 8004048:	4b48      	ldr	r3, [pc, #288]	; (800416c <HAL_I2C_Master_Transmit+0x1e0>)
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f000 fb63 	bl	800471c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004056:	e05b      	b.n	8004110 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	6a39      	ldr	r1, [r7, #32]
 800405c:	68f8      	ldr	r0, [r7, #12]
 800405e:	f000 f9f4 	bl	800444a <I2C_WaitOnTXISFlagUntilTimeout>
 8004062:	4603      	mov	r3, r0
 8004064:	2b00      	cmp	r3, #0
 8004066:	d001      	beq.n	800406c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004068:	2301      	movs	r3, #1
 800406a:	e07b      	b.n	8004164 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004070:	781a      	ldrb	r2, [r3, #0]
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	1c5a      	adds	r2, r3, #1
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004094:	3b01      	subs	r3, #1
 8004096:	b29a      	uxth	r2, r3
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a0:	b29b      	uxth	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d034      	beq.n	8004110 <HAL_I2C_Master_Transmit+0x184>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d130      	bne.n	8004110 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	9300      	str	r3, [sp, #0]
 80040b2:	6a3b      	ldr	r3, [r7, #32]
 80040b4:	2200      	movs	r2, #0
 80040b6:	2180      	movs	r1, #128	; 0x80
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f000 f986 	bl	80043ca <I2C_WaitOnFlagUntilTimeout>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e04d      	b.n	8004164 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	2bff      	cmp	r3, #255	; 0xff
 80040d0:	d90e      	bls.n	80040f0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	22ff      	movs	r2, #255	; 0xff
 80040d6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040dc:	b2da      	uxtb	r2, r3
 80040de:	8979      	ldrh	r1, [r7, #10]
 80040e0:	2300      	movs	r3, #0
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 fb17 	bl	800471c <I2C_TransferConfig>
 80040ee:	e00f      	b.n	8004110 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040fe:	b2da      	uxtb	r2, r3
 8004100:	8979      	ldrh	r1, [r7, #10]
 8004102:	2300      	movs	r3, #0
 8004104:	9300      	str	r3, [sp, #0]
 8004106:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800410a:	68f8      	ldr	r0, [r7, #12]
 800410c:	f000 fb06 	bl	800471c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004114:	b29b      	uxth	r3, r3
 8004116:	2b00      	cmp	r3, #0
 8004118:	d19e      	bne.n	8004058 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	6a39      	ldr	r1, [r7, #32]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f9d3 	bl	80044ca <I2C_WaitOnSTOPFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e01a      	b.n	8004164 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2220      	movs	r2, #32
 8004134:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	6859      	ldr	r1, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681a      	ldr	r2, [r3, #0]
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_I2C_Master_Transmit+0x1e4>)
 8004142:	400b      	ands	r3, r1
 8004144:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2220      	movs	r2, #32
 800414a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	e000      	b.n	8004164 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004162:	2302      	movs	r3, #2
  }
}
 8004164:	4618      	mov	r0, r3
 8004166:	3718      	adds	r7, #24
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}
 800416c:	80002000 	.word	0x80002000
 8004170:	fe00e800 	.word	0xfe00e800

08004174 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b08a      	sub	sp, #40	; 0x28
 8004178:	af02      	add	r7, sp, #8
 800417a:	60f8      	str	r0, [r7, #12]
 800417c:	607a      	str	r2, [r7, #4]
 800417e:	603b      	str	r3, [r7, #0]
 8004180:	460b      	mov	r3, r1
 8004182:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004184:	2300      	movs	r3, #0
 8004186:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800418e:	b2db      	uxtb	r3, r3
 8004190:	2b20      	cmp	r3, #32
 8004192:	f040 80f1 	bne.w	8004378 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	699b      	ldr	r3, [r3, #24]
 800419c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80041a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041a4:	d101      	bne.n	80041aa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80041a6:	2302      	movs	r3, #2
 80041a8:	e0e7      	b.n	800437a <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d101      	bne.n	80041b8 <HAL_I2C_IsDeviceReady+0x44>
 80041b4:	2302      	movs	r3, #2
 80041b6:	e0e0      	b.n	800437a <HAL_I2C_IsDeviceReady+0x206>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2224      	movs	r2, #36	; 0x24
 80041c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	68db      	ldr	r3, [r3, #12]
 80041d2:	2b01      	cmp	r3, #1
 80041d4:	d107      	bne.n	80041e6 <HAL_I2C_IsDeviceReady+0x72>
 80041d6:	897b      	ldrh	r3, [r7, #10]
 80041d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041dc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80041e4:	e004      	b.n	80041f0 <HAL_I2C_IsDeviceReady+0x7c>
 80041e6:	897b      	ldrh	r3, [r7, #10]
 80041e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041ec:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80041f0:	68fa      	ldr	r2, [r7, #12]
 80041f2:	6812      	ldr	r2, [r2, #0]
 80041f4:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80041f6:	f7fd ffe9 	bl	80021cc <HAL_GetTick>
 80041fa:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f003 0320 	and.w	r3, r3, #32
 8004206:	2b20      	cmp	r3, #32
 8004208:	bf0c      	ite	eq
 800420a:	2301      	moveq	r3, #1
 800420c:	2300      	movne	r3, #0
 800420e:	b2db      	uxtb	r3, r3
 8004210:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	f003 0310 	and.w	r3, r3, #16
 800421c:	2b10      	cmp	r3, #16
 800421e:	bf0c      	ite	eq
 8004220:	2301      	moveq	r3, #1
 8004222:	2300      	movne	r3, #0
 8004224:	b2db      	uxtb	r3, r3
 8004226:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004228:	e034      	b.n	8004294 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004230:	d01a      	beq.n	8004268 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004232:	f7fd ffcb 	bl	80021cc <HAL_GetTick>
 8004236:	4602      	mov	r2, r0
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	1ad3      	subs	r3, r2, r3
 800423c:	683a      	ldr	r2, [r7, #0]
 800423e:	429a      	cmp	r2, r3
 8004240:	d302      	bcc.n	8004248 <HAL_I2C_IsDeviceReady+0xd4>
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10f      	bne.n	8004268 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2220      	movs	r2, #32
 800424c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004254:	f043 0220 	orr.w	r2, r3, #32
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e088      	b.n	800437a <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	699b      	ldr	r3, [r3, #24]
 800426e:	f003 0320 	and.w	r3, r3, #32
 8004272:	2b20      	cmp	r3, #32
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	f003 0310 	and.w	r3, r3, #16
 8004288:	2b10      	cmp	r3, #16
 800428a:	bf0c      	ite	eq
 800428c:	2301      	moveq	r3, #1
 800428e:	2300      	movne	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004294:	7ffb      	ldrb	r3, [r7, #31]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d102      	bne.n	80042a0 <HAL_I2C_IsDeviceReady+0x12c>
 800429a:	7fbb      	ldrb	r3, [r7, #30]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d0c4      	beq.n	800422a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	f003 0310 	and.w	r3, r3, #16
 80042aa:	2b10      	cmp	r3, #16
 80042ac:	d01a      	beq.n	80042e4 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	9300      	str	r3, [sp, #0]
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2200      	movs	r2, #0
 80042b6:	2120      	movs	r1, #32
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f886 	bl	80043ca <I2C_WaitOnFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e058      	b.n	800437a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2220      	movs	r2, #32
 80042ce:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2220      	movs	r2, #32
 80042d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	2200      	movs	r2, #0
 80042dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80042e0:	2300      	movs	r3, #0
 80042e2:	e04a      	b.n	800437a <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	9300      	str	r3, [sp, #0]
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	2200      	movs	r2, #0
 80042ec:	2120      	movs	r1, #32
 80042ee:	68f8      	ldr	r0, [r7, #12]
 80042f0:	f000 f86b 	bl	80043ca <I2C_WaitOnFlagUntilTimeout>
 80042f4:	4603      	mov	r3, r0
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d001      	beq.n	80042fe <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e03d      	b.n	800437a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2210      	movs	r2, #16
 8004304:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2220      	movs	r2, #32
 800430c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	429a      	cmp	r2, r3
 8004314:	d118      	bne.n	8004348 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	685a      	ldr	r2, [r3, #4]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004324:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	2200      	movs	r2, #0
 800432e:	2120      	movs	r1, #32
 8004330:	68f8      	ldr	r0, [r7, #12]
 8004332:	f000 f84a 	bl	80043ca <I2C_WaitOnFlagUntilTimeout>
 8004336:	4603      	mov	r3, r0
 8004338:	2b00      	cmp	r3, #0
 800433a:	d001      	beq.n	8004340 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e01c      	b.n	800437a <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	2220      	movs	r2, #32
 8004346:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	3301      	adds	r3, #1
 800434c:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	687a      	ldr	r2, [r7, #4]
 8004352:	429a      	cmp	r2, r3
 8004354:	f63f af3b 	bhi.w	80041ce <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2220      	movs	r2, #32
 800435c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004364:	f043 0220 	orr.w	r2, r3, #32
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004378:	2302      	movs	r3, #2
  }
}
 800437a:	4618      	mov	r0, r3
 800437c:	3720      	adds	r7, #32
 800437e:	46bd      	mov	sp, r7
 8004380:	bd80      	pop	{r7, pc}

08004382 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004382:	b480      	push	{r7}
 8004384:	b083      	sub	sp, #12
 8004386:	af00      	add	r7, sp, #0
 8004388:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	699b      	ldr	r3, [r3, #24]
 8004390:	f003 0302 	and.w	r3, r3, #2
 8004394:	2b02      	cmp	r3, #2
 8004396:	d103      	bne.n	80043a0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2200      	movs	r2, #0
 800439e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d007      	beq.n	80043be <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	699a      	ldr	r2, [r3, #24]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f042 0201 	orr.w	r2, r2, #1
 80043bc:	619a      	str	r2, [r3, #24]
  }
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr

080043ca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	60f8      	str	r0, [r7, #12]
 80043d2:	60b9      	str	r1, [r7, #8]
 80043d4:	603b      	str	r3, [r7, #0]
 80043d6:	4613      	mov	r3, r2
 80043d8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043da:	e022      	b.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e2:	d01e      	beq.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e4:	f7fd fef2 	bl	80021cc <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	69bb      	ldr	r3, [r7, #24]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d302      	bcc.n	80043fa <I2C_WaitOnFlagUntilTimeout+0x30>
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d113      	bne.n	8004422 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043fe:	f043 0220 	orr.w	r2, r3, #32
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2220      	movs	r2, #32
 800440a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2200      	movs	r2, #0
 8004412:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2200      	movs	r2, #0
 800441a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e00f      	b.n	8004442 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	699a      	ldr	r2, [r3, #24]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	429a      	cmp	r2, r3
 800443e:	d0cd      	beq.n	80043dc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}

0800444a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800444a:	b580      	push	{r7, lr}
 800444c:	b084      	sub	sp, #16
 800444e:	af00      	add	r7, sp, #0
 8004450:	60f8      	str	r0, [r7, #12]
 8004452:	60b9      	str	r1, [r7, #8]
 8004454:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004456:	e02c      	b.n	80044b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	68b9      	ldr	r1, [r7, #8]
 800445c:	68f8      	ldr	r0, [r7, #12]
 800445e:	f000 f871 	bl	8004544 <I2C_IsErrorOccurred>
 8004462:	4603      	mov	r3, r0
 8004464:	2b00      	cmp	r3, #0
 8004466:	d001      	beq.n	800446c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e02a      	b.n	80044c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004472:	d01e      	beq.n	80044b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004474:	f7fd feaa 	bl	80021cc <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	68ba      	ldr	r2, [r7, #8]
 8004480:	429a      	cmp	r2, r3
 8004482:	d302      	bcc.n	800448a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d113      	bne.n	80044b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800448e:	f043 0220 	orr.w	r2, r3, #32
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2220      	movs	r2, #32
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2200      	movs	r2, #0
 80044aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80044ae:	2301      	movs	r3, #1
 80044b0:	e007      	b.n	80044c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d1cb      	bne.n	8004458 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044ca:	b580      	push	{r7, lr}
 80044cc:	b084      	sub	sp, #16
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	60f8      	str	r0, [r7, #12]
 80044d2:	60b9      	str	r1, [r7, #8]
 80044d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044d6:	e028      	b.n	800452a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d8:	687a      	ldr	r2, [r7, #4]
 80044da:	68b9      	ldr	r1, [r7, #8]
 80044dc:	68f8      	ldr	r0, [r7, #12]
 80044de:	f000 f831 	bl	8004544 <I2C_IsErrorOccurred>
 80044e2:	4603      	mov	r3, r0
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d001      	beq.n	80044ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e026      	b.n	800453a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044ec:	f7fd fe6e 	bl	80021cc <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	68ba      	ldr	r2, [r7, #8]
 80044f8:	429a      	cmp	r2, r3
 80044fa:	d302      	bcc.n	8004502 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d113      	bne.n	800452a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004526:	2301      	movs	r3, #1
 8004528:	e007      	b.n	800453a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	f003 0320 	and.w	r3, r3, #32
 8004534:	2b20      	cmp	r3, #32
 8004536:	d1cf      	bne.n	80044d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	3710      	adds	r7, #16
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}
	...

08004544 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08a      	sub	sp, #40	; 0x28
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800455e:	2300      	movs	r3, #0
 8004560:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	f003 0310 	and.w	r3, r3, #16
 800456c:	2b00      	cmp	r3, #0
 800456e:	d075      	beq.n	800465c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2210      	movs	r2, #16
 8004576:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004578:	e056      	b.n	8004628 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004580:	d052      	beq.n	8004628 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004582:	f7fd fe23 	bl	80021cc <HAL_GetTick>
 8004586:	4602      	mov	r2, r0
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	1ad3      	subs	r3, r2, r3
 800458c:	68ba      	ldr	r2, [r7, #8]
 800458e:	429a      	cmp	r2, r3
 8004590:	d302      	bcc.n	8004598 <I2C_IsErrorOccurred+0x54>
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d147      	bne.n	8004628 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ba:	d12e      	bne.n	800461a <I2C_IsErrorOccurred+0xd6>
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045c2:	d02a      	beq.n	800461a <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80045c4:	7cfb      	ldrb	r3, [r7, #19]
 80045c6:	2b20      	cmp	r3, #32
 80045c8:	d027      	beq.n	800461a <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	685a      	ldr	r2, [r3, #4]
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80045d8:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045da:	f7fd fdf7 	bl	80021cc <HAL_GetTick>
 80045de:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045e0:	e01b      	b.n	800461a <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045e2:	f7fd fdf3 	bl	80021cc <HAL_GetTick>
 80045e6:	4602      	mov	r2, r0
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	1ad3      	subs	r3, r2, r3
 80045ec:	2b19      	cmp	r3, #25
 80045ee:	d914      	bls.n	800461a <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f4:	f043 0220 	orr.w	r2, r3, #32
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2220      	movs	r2, #32
 8004600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8004614:	2301      	movs	r3, #1
 8004616:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b20      	cmp	r3, #32
 8004626:	d1dc      	bne.n	80045e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	f003 0320 	and.w	r3, r3, #32
 8004632:	2b20      	cmp	r3, #32
 8004634:	d003      	beq.n	800463e <I2C_IsErrorOccurred+0xfa>
 8004636:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800463a:	2b00      	cmp	r3, #0
 800463c:	d09d      	beq.n	800457a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800463e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004642:	2b00      	cmp	r3, #0
 8004644:	d103      	bne.n	800464e <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2220      	movs	r2, #32
 800464c:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	f043 0304 	orr.w	r3, r3, #4
 8004654:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	699b      	ldr	r3, [r3, #24]
 8004662:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004664:	69bb      	ldr	r3, [r7, #24]
 8004666:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800466e:	6a3b      	ldr	r3, [r7, #32]
 8004670:	f043 0301 	orr.w	r3, r3, #1
 8004674:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800467e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004680:	2301      	movs	r3, #1
 8004682:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800468c:	2b00      	cmp	r3, #0
 800468e:	d00b      	beq.n	80046a8 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	f043 0308 	orr.w	r3, r3, #8
 8004696:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80046a0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00b      	beq.n	80046ca <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046b2:	6a3b      	ldr	r3, [r7, #32]
 80046b4:	f043 0302 	orr.w	r3, r3, #2
 80046b8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	f44f 7200 	mov.w	r2, #512	; 0x200
 80046c2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046c4:	2301      	movs	r3, #1
 80046c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80046ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d01c      	beq.n	800470c <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046d2:	68f8      	ldr	r0, [r7, #12]
 80046d4:	f7ff fe55 	bl	8004382 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	6859      	ldr	r1, [r3, #4]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681a      	ldr	r2, [r3, #0]
 80046e2:	4b0d      	ldr	r3, [pc, #52]	; (8004718 <I2C_IsErrorOccurred+0x1d4>)
 80046e4:	400b      	ands	r3, r1
 80046e6:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046ec:	6a3b      	ldr	r3, [r7, #32]
 80046ee:	431a      	orrs	r2, r3
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2220      	movs	r2, #32
 80046f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	2200      	movs	r2, #0
 8004700:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2200      	movs	r2, #0
 8004708:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800470c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8004710:	4618      	mov	r0, r3
 8004712:	3728      	adds	r7, #40	; 0x28
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	fe00e800 	.word	0xfe00e800

0800471c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800471c:	b480      	push	{r7}
 800471e:	b087      	sub	sp, #28
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	607b      	str	r3, [r7, #4]
 8004726:	460b      	mov	r3, r1
 8004728:	817b      	strh	r3, [r7, #10]
 800472a:	4613      	mov	r3, r2
 800472c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800472e:	897b      	ldrh	r3, [r7, #10]
 8004730:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004734:	7a7b      	ldrb	r3, [r7, #9]
 8004736:	041b      	lsls	r3, r3, #16
 8004738:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800473c:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004742:	6a3b      	ldr	r3, [r7, #32]
 8004744:	4313      	orrs	r3, r2
 8004746:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800474a:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	685a      	ldr	r2, [r3, #4]
 8004752:	6a3b      	ldr	r3, [r7, #32]
 8004754:	0d5b      	lsrs	r3, r3, #21
 8004756:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800475a:	4b08      	ldr	r3, [pc, #32]	; (800477c <I2C_TransferConfig+0x60>)
 800475c:	430b      	orrs	r3, r1
 800475e:	43db      	mvns	r3, r3
 8004760:	ea02 0103 	and.w	r1, r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	697a      	ldr	r2, [r7, #20]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800476e:	bf00      	nop
 8004770:	371c      	adds	r7, #28
 8004772:	46bd      	mov	sp, r7
 8004774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	03ff63ff 	.word	0x03ff63ff

08004780 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b20      	cmp	r3, #32
 8004794:	d138      	bne.n	8004808 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e032      	b.n	800480a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2224      	movs	r2, #36	; 0x24
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0201 	bic.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80047d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6819      	ldr	r1, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	683a      	ldr	r2, [r7, #0]
 80047e0:	430a      	orrs	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0201 	orr.w	r2, r2, #1
 80047f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2220      	movs	r2, #32
 80047f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2200      	movs	r2, #0
 8004800:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004804:	2300      	movs	r3, #0
 8004806:	e000      	b.n	800480a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004808:	2302      	movs	r3, #2
  }
}
 800480a:	4618      	mov	r0, r3
 800480c:	370c      	adds	r7, #12
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b20      	cmp	r3, #32
 800482a:	d139      	bne.n	80048a0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004832:	2b01      	cmp	r3, #1
 8004834:	d101      	bne.n	800483a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004836:	2302      	movs	r3, #2
 8004838:	e033      	b.n	80048a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2224      	movs	r2, #36	; 0x24
 8004846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681a      	ldr	r2, [r3, #0]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0201 	bic.w	r2, r2, #1
 8004858:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004868:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	68fa      	ldr	r2, [r7, #12]
 800487a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f042 0201 	orr.w	r2, r2, #1
 800488a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2220      	movs	r2, #32
 8004890:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2200      	movs	r2, #0
 8004898:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800489c:	2300      	movs	r3, #0
 800489e:	e000      	b.n	80048a2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80048a0:	2302      	movs	r3, #2
  }
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
	...

080048b0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048b0:	b480      	push	{r7}
 80048b2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048b4:	4b04      	ldr	r3, [pc, #16]	; (80048c8 <HAL_PWREx_GetVoltageRange+0x18>)
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80048bc:	4618      	mov	r0, r3
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40007000 	.word	0x40007000

080048cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048da:	d130      	bne.n	800493e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048dc:	4b23      	ldr	r3, [pc, #140]	; (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80048e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048e8:	d038      	beq.n	800495c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048ea:	4b20      	ldr	r3, [pc, #128]	; (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80048f2:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80048f8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048fa:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	2232      	movs	r2, #50	; 0x32
 8004900:	fb02 f303 	mul.w	r3, r2, r3
 8004904:	4a1b      	ldr	r2, [pc, #108]	; (8004974 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004906:	fba2 2303 	umull	r2, r3, r2, r3
 800490a:	0c9b      	lsrs	r3, r3, #18
 800490c:	3301      	adds	r3, #1
 800490e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004910:	e002      	b.n	8004918 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3b01      	subs	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004918:	4b14      	ldr	r3, [pc, #80]	; (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800491a:	695b      	ldr	r3, [r3, #20]
 800491c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004924:	d102      	bne.n	800492c <HAL_PWREx_ControlVoltageScaling+0x60>
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d1f2      	bne.n	8004912 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800492c:	4b0f      	ldr	r3, [pc, #60]	; (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004934:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004938:	d110      	bne.n	800495c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e00f      	b.n	800495e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800493e:	4b0b      	ldr	r3, [pc, #44]	; (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004946:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800494a:	d007      	beq.n	800495c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800494c:	4b07      	ldr	r3, [pc, #28]	; (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004954:	4a05      	ldr	r2, [pc, #20]	; (800496c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004956:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800495a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3714      	adds	r7, #20
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	40007000 	.word	0x40007000
 8004970:	20000008 	.word	0x20000008
 8004974:	431bde83 	.word	0x431bde83

08004978 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b088      	sub	sp, #32
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e3d8      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800498a:	4b97      	ldr	r3, [pc, #604]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 800498c:	689b      	ldr	r3, [r3, #8]
 800498e:	f003 030c 	and.w	r3, r3, #12
 8004992:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004994:	4b94      	ldr	r3, [pc, #592]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	f003 0303 	and.w	r3, r3, #3
 800499c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f003 0310 	and.w	r3, r3, #16
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	f000 80e4 	beq.w	8004b74 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d007      	beq.n	80049c2 <HAL_RCC_OscConfig+0x4a>
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	2b0c      	cmp	r3, #12
 80049b6:	f040 808b 	bne.w	8004ad0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049ba:	697b      	ldr	r3, [r7, #20]
 80049bc:	2b01      	cmp	r3, #1
 80049be:	f040 8087 	bne.w	8004ad0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049c2:	4b89      	ldr	r3, [pc, #548]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f003 0302 	and.w	r3, r3, #2
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d005      	beq.n	80049da <HAL_RCC_OscConfig+0x62>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d101      	bne.n	80049da <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e3b0      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a1a      	ldr	r2, [r3, #32]
 80049de:	4b82      	ldr	r3, [pc, #520]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f003 0308 	and.w	r3, r3, #8
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d004      	beq.n	80049f4 <HAL_RCC_OscConfig+0x7c>
 80049ea:	4b7f      	ldr	r3, [pc, #508]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80049f2:	e005      	b.n	8004a00 <HAL_RCC_OscConfig+0x88>
 80049f4:	4b7c      	ldr	r3, [pc, #496]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 80049f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049fa:	091b      	lsrs	r3, r3, #4
 80049fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d223      	bcs.n	8004a4c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f000 fd75 	bl	80054f8 <RCC_SetFlashLatencyFromMSIRange>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d001      	beq.n	8004a18 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	e391      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a18:	4b73      	ldr	r3, [pc, #460]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a72      	ldr	r2, [pc, #456]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a1e:	f043 0308 	orr.w	r3, r3, #8
 8004a22:	6013      	str	r3, [r2, #0]
 8004a24:	4b70      	ldr	r3, [pc, #448]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a1b      	ldr	r3, [r3, #32]
 8004a30:	496d      	ldr	r1, [pc, #436]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a36:	4b6c      	ldr	r3, [pc, #432]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	021b      	lsls	r3, r3, #8
 8004a44:	4968      	ldr	r1, [pc, #416]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	604b      	str	r3, [r1, #4]
 8004a4a:	e025      	b.n	8004a98 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a4c:	4b66      	ldr	r3, [pc, #408]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	4a65      	ldr	r2, [pc, #404]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a52:	f043 0308 	orr.w	r3, r3, #8
 8004a56:	6013      	str	r3, [r2, #0]
 8004a58:	4b63      	ldr	r3, [pc, #396]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6a1b      	ldr	r3, [r3, #32]
 8004a64:	4960      	ldr	r1, [pc, #384]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a6a:	4b5f      	ldr	r3, [pc, #380]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	69db      	ldr	r3, [r3, #28]
 8004a76:	021b      	lsls	r3, r3, #8
 8004a78:	495b      	ldr	r1, [pc, #364]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a7e:	69bb      	ldr	r3, [r7, #24]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d109      	bne.n	8004a98 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6a1b      	ldr	r3, [r3, #32]
 8004a88:	4618      	mov	r0, r3
 8004a8a:	f000 fd35 	bl	80054f8 <RCC_SetFlashLatencyFromMSIRange>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a94:	2301      	movs	r3, #1
 8004a96:	e351      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a98:	f000 fc38 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8004a9c:	4602      	mov	r2, r0
 8004a9e:	4b52      	ldr	r3, [pc, #328]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	091b      	lsrs	r3, r3, #4
 8004aa4:	f003 030f 	and.w	r3, r3, #15
 8004aa8:	4950      	ldr	r1, [pc, #320]	; (8004bec <HAL_RCC_OscConfig+0x274>)
 8004aaa:	5ccb      	ldrb	r3, [r1, r3]
 8004aac:	f003 031f 	and.w	r3, r3, #31
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab4:	4a4e      	ldr	r2, [pc, #312]	; (8004bf0 <HAL_RCC_OscConfig+0x278>)
 8004ab6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ab8:	4b4e      	ldr	r3, [pc, #312]	; (8004bf4 <HAL_RCC_OscConfig+0x27c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f7fd fa49 	bl	8001f54 <HAL_InitTick>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ac6:	7bfb      	ldrb	r3, [r7, #15]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d052      	beq.n	8004b72 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004acc:	7bfb      	ldrb	r3, [r7, #15]
 8004ace:	e335      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	699b      	ldr	r3, [r3, #24]
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d032      	beq.n	8004b3e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ad8:	4b43      	ldr	r3, [pc, #268]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a42      	ldr	r2, [pc, #264]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ae4:	f7fd fb72 	bl	80021cc <HAL_GetTick>
 8004ae8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004aea:	e008      	b.n	8004afe <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004aec:	f7fd fb6e 	bl	80021cc <HAL_GetTick>
 8004af0:	4602      	mov	r2, r0
 8004af2:	693b      	ldr	r3, [r7, #16]
 8004af4:	1ad3      	subs	r3, r2, r3
 8004af6:	2b02      	cmp	r3, #2
 8004af8:	d901      	bls.n	8004afe <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004afa:	2303      	movs	r3, #3
 8004afc:	e31e      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004afe:	4b3a      	ldr	r3, [pc, #232]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f003 0302 	and.w	r3, r3, #2
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d0f0      	beq.n	8004aec <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b0a:	4b37      	ldr	r3, [pc, #220]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a36      	ldr	r2, [pc, #216]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b10:	f043 0308 	orr.w	r3, r3, #8
 8004b14:	6013      	str	r3, [r2, #0]
 8004b16:	4b34      	ldr	r3, [pc, #208]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	4931      	ldr	r1, [pc, #196]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b24:	4313      	orrs	r3, r2
 8004b26:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b28:	4b2f      	ldr	r3, [pc, #188]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	69db      	ldr	r3, [r3, #28]
 8004b34:	021b      	lsls	r3, r3, #8
 8004b36:	492c      	ldr	r1, [pc, #176]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	604b      	str	r3, [r1, #4]
 8004b3c:	e01a      	b.n	8004b74 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b3e:	4b2a      	ldr	r3, [pc, #168]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4a29      	ldr	r2, [pc, #164]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b44:	f023 0301 	bic.w	r3, r3, #1
 8004b48:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b4a:	f7fd fb3f 	bl	80021cc <HAL_GetTick>
 8004b4e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b50:	e008      	b.n	8004b64 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b52:	f7fd fb3b 	bl	80021cc <HAL_GetTick>
 8004b56:	4602      	mov	r2, r0
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	1ad3      	subs	r3, r2, r3
 8004b5c:	2b02      	cmp	r3, #2
 8004b5e:	d901      	bls.n	8004b64 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b60:	2303      	movs	r3, #3
 8004b62:	e2eb      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b64:	4b20      	ldr	r3, [pc, #128]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 0302 	and.w	r3, r3, #2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f0      	bne.n	8004b52 <HAL_RCC_OscConfig+0x1da>
 8004b70:	e000      	b.n	8004b74 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b72:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f003 0301 	and.w	r3, r3, #1
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d074      	beq.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d005      	beq.n	8004b92 <HAL_RCC_OscConfig+0x21a>
 8004b86:	69bb      	ldr	r3, [r7, #24]
 8004b88:	2b0c      	cmp	r3, #12
 8004b8a:	d10e      	bne.n	8004baa <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d10b      	bne.n	8004baa <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b92:	4b15      	ldr	r3, [pc, #84]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d064      	beq.n	8004c68 <HAL_RCC_OscConfig+0x2f0>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	685b      	ldr	r3, [r3, #4]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d160      	bne.n	8004c68 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ba6:	2301      	movs	r3, #1
 8004ba8:	e2c8      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb2:	d106      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x24a>
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a0b      	ldr	r2, [pc, #44]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	e026      	b.n	8004c10 <HAL_RCC_OscConfig+0x298>
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	685b      	ldr	r3, [r3, #4]
 8004bc6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bca:	d115      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x280>
 8004bcc:	4b06      	ldr	r3, [pc, #24]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4a05      	ldr	r2, [pc, #20]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bd2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd6:	6013      	str	r3, [r2, #0]
 8004bd8:	4b03      	ldr	r3, [pc, #12]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a02      	ldr	r2, [pc, #8]	; (8004be8 <HAL_RCC_OscConfig+0x270>)
 8004bde:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be2:	6013      	str	r3, [r2, #0]
 8004be4:	e014      	b.n	8004c10 <HAL_RCC_OscConfig+0x298>
 8004be6:	bf00      	nop
 8004be8:	40021000 	.word	0x40021000
 8004bec:	0800b308 	.word	0x0800b308
 8004bf0:	20000008 	.word	0x20000008
 8004bf4:	2000000c 	.word	0x2000000c
 8004bf8:	4ba0      	ldr	r3, [pc, #640]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	4a9f      	ldr	r2, [pc, #636]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004bfe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c02:	6013      	str	r3, [r2, #0]
 8004c04:	4b9d      	ldr	r3, [pc, #628]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4a9c      	ldr	r2, [pc, #624]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c0a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c0e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	685b      	ldr	r3, [r3, #4]
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d013      	beq.n	8004c40 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c18:	f7fd fad8 	bl	80021cc <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1e:	e008      	b.n	8004c32 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c20:	f7fd fad4 	bl	80021cc <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	2b64      	cmp	r3, #100	; 0x64
 8004c2c:	d901      	bls.n	8004c32 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e284      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c32:	4b92      	ldr	r3, [pc, #584]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d0f0      	beq.n	8004c20 <HAL_RCC_OscConfig+0x2a8>
 8004c3e:	e014      	b.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c40:	f7fd fac4 	bl	80021cc <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fd fac0 	bl	80021cc <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	; 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e270      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c5a:	4b88      	ldr	r3, [pc, #544]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f0      	bne.n	8004c48 <HAL_RCC_OscConfig+0x2d0>
 8004c66:	e000      	b.n	8004c6a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c68:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d060      	beq.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	2b04      	cmp	r3, #4
 8004c7a:	d005      	beq.n	8004c88 <HAL_RCC_OscConfig+0x310>
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b0c      	cmp	r3, #12
 8004c80:	d119      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c82:	697b      	ldr	r3, [r7, #20]
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d116      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c88:	4b7c      	ldr	r3, [pc, #496]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_OscConfig+0x328>
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d101      	bne.n	8004ca0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e24d      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca0:	4b76      	ldr	r3, [pc, #472]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004ca2:	685b      	ldr	r3, [r3, #4]
 8004ca4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	691b      	ldr	r3, [r3, #16]
 8004cac:	061b      	lsls	r3, r3, #24
 8004cae:	4973      	ldr	r1, [pc, #460]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb4:	e040      	b.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	68db      	ldr	r3, [r3, #12]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d023      	beq.n	8004d06 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cbe:	4b6f      	ldr	r3, [pc, #444]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a6e      	ldr	r2, [pc, #440]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cca:	f7fd fa7f 	bl	80021cc <HAL_GetTick>
 8004cce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004cd0:	e008      	b.n	8004ce4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cd2:	f7fd fa7b 	bl	80021cc <HAL_GetTick>
 8004cd6:	4602      	mov	r2, r0
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	2b02      	cmp	r3, #2
 8004cde:	d901      	bls.n	8004ce4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	e22b      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce4:	4b65      	ldr	r3, [pc, #404]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d0f0      	beq.n	8004cd2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cf0:	4b62      	ldr	r3, [pc, #392]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	691b      	ldr	r3, [r3, #16]
 8004cfc:	061b      	lsls	r3, r3, #24
 8004cfe:	495f      	ldr	r1, [pc, #380]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d00:	4313      	orrs	r3, r2
 8004d02:	604b      	str	r3, [r1, #4]
 8004d04:	e018      	b.n	8004d38 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d06:	4b5d      	ldr	r3, [pc, #372]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a5c      	ldr	r2, [pc, #368]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d12:	f7fd fa5b 	bl	80021cc <HAL_GetTick>
 8004d16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d18:	e008      	b.n	8004d2c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d1a:	f7fd fa57 	bl	80021cc <HAL_GetTick>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	1ad3      	subs	r3, r2, r3
 8004d24:	2b02      	cmp	r3, #2
 8004d26:	d901      	bls.n	8004d2c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d28:	2303      	movs	r3, #3
 8004d2a:	e207      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d2c:	4b53      	ldr	r3, [pc, #332]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d1f0      	bne.n	8004d1a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f003 0308 	and.w	r3, r3, #8
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d03c      	beq.n	8004dbe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	695b      	ldr	r3, [r3, #20]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d01c      	beq.n	8004d86 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d4c:	4b4b      	ldr	r3, [pc, #300]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d52:	4a4a      	ldr	r2, [pc, #296]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d54:	f043 0301 	orr.w	r3, r3, #1
 8004d58:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d5c:	f7fd fa36 	bl	80021cc <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d62:	e008      	b.n	8004d76 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d64:	f7fd fa32 	bl	80021cc <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b02      	cmp	r3, #2
 8004d70:	d901      	bls.n	8004d76 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e1e2      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d76:	4b41      	ldr	r3, [pc, #260]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0ef      	beq.n	8004d64 <HAL_RCC_OscConfig+0x3ec>
 8004d84:	e01b      	b.n	8004dbe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d86:	4b3d      	ldr	r3, [pc, #244]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004d8c:	4a3b      	ldr	r2, [pc, #236]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004d8e:	f023 0301 	bic.w	r3, r3, #1
 8004d92:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d96:	f7fd fa19 	bl	80021cc <HAL_GetTick>
 8004d9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d9c:	e008      	b.n	8004db0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9e:	f7fd fa15 	bl	80021cc <HAL_GetTick>
 8004da2:	4602      	mov	r2, r0
 8004da4:	693b      	ldr	r3, [r7, #16]
 8004da6:	1ad3      	subs	r3, r2, r3
 8004da8:	2b02      	cmp	r3, #2
 8004daa:	d901      	bls.n	8004db0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004dac:	2303      	movs	r3, #3
 8004dae:	e1c5      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004db0:	4b32      	ldr	r3, [pc, #200]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1ef      	bne.n	8004d9e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f003 0304 	and.w	r3, r3, #4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 80a6 	beq.w	8004f18 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dd0:	4b2a      	ldr	r3, [pc, #168]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004dd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d10d      	bne.n	8004df8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004ddc:	4b27      	ldr	r3, [pc, #156]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004de0:	4a26      	ldr	r2, [pc, #152]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de6:	6593      	str	r3, [r2, #88]	; 0x58
 8004de8:	4b24      	ldr	r3, [pc, #144]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004df0:	60bb      	str	r3, [r7, #8]
 8004df2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df4:	2301      	movs	r3, #1
 8004df6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df8:	4b21      	ldr	r3, [pc, #132]	; (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d118      	bne.n	8004e36 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e04:	4b1e      	ldr	r3, [pc, #120]	; (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a1d      	ldr	r2, [pc, #116]	; (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004e0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e0e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e10:	f7fd f9dc 	bl	80021cc <HAL_GetTick>
 8004e14:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e18:	f7fd f9d8 	bl	80021cc <HAL_GetTick>
 8004e1c:	4602      	mov	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e188      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e2a:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <HAL_RCC_OscConfig+0x508>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d0f0      	beq.n	8004e18 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	689b      	ldr	r3, [r3, #8]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d108      	bne.n	8004e50 <HAL_RCC_OscConfig+0x4d8>
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e46:	f043 0301 	orr.w	r3, r3, #1
 8004e4a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e4e:	e029      	b.n	8004ea4 <HAL_RCC_OscConfig+0x52c>
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	689b      	ldr	r3, [r3, #8]
 8004e54:	2b05      	cmp	r3, #5
 8004e56:	d115      	bne.n	8004e84 <HAL_RCC_OscConfig+0x50c>
 8004e58:	4b08      	ldr	r3, [pc, #32]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e5e:	4a07      	ldr	r2, [pc, #28]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e60:	f043 0304 	orr.w	r3, r3, #4
 8004e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e68:	4b04      	ldr	r3, [pc, #16]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e6e:	4a03      	ldr	r2, [pc, #12]	; (8004e7c <HAL_RCC_OscConfig+0x504>)
 8004e70:	f043 0301 	orr.w	r3, r3, #1
 8004e74:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e78:	e014      	b.n	8004ea4 <HAL_RCC_OscConfig+0x52c>
 8004e7a:	bf00      	nop
 8004e7c:	40021000 	.word	0x40021000
 8004e80:	40007000 	.word	0x40007000
 8004e84:	4b91      	ldr	r3, [pc, #580]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e8a:	4a90      	ldr	r2, [pc, #576]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004e8c:	f023 0301 	bic.w	r3, r3, #1
 8004e90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004e94:	4b8d      	ldr	r3, [pc, #564]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e9a:	4a8c      	ldr	r2, [pc, #560]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004e9c:	f023 0304 	bic.w	r3, r3, #4
 8004ea0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	689b      	ldr	r3, [r3, #8]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d016      	beq.n	8004eda <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eac:	f7fd f98e 	bl	80021cc <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eb2:	e00a      	b.n	8004eca <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb4:	f7fd f98a 	bl	80021cc <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e138      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eca:	4b80      	ldr	r3, [pc, #512]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004ecc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed0:	f003 0302 	and.w	r3, r3, #2
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d0ed      	beq.n	8004eb4 <HAL_RCC_OscConfig+0x53c>
 8004ed8:	e015      	b.n	8004f06 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eda:	f7fd f977 	bl	80021cc <HAL_GetTick>
 8004ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ee0:	e00a      	b.n	8004ef8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee2:	f7fd f973 	bl	80021cc <HAL_GetTick>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	693b      	ldr	r3, [r7, #16]
 8004eea:	1ad3      	subs	r3, r2, r3
 8004eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ef0:	4293      	cmp	r3, r2
 8004ef2:	d901      	bls.n	8004ef8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ef4:	2303      	movs	r3, #3
 8004ef6:	e121      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef8:	4b74      	ldr	r3, [pc, #464]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004efe:	f003 0302 	and.w	r3, r3, #2
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ed      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f06:	7ffb      	ldrb	r3, [r7, #31]
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d105      	bne.n	8004f18 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f0c:	4b6f      	ldr	r3, [pc, #444]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004f0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f10:	4a6e      	ldr	r2, [pc, #440]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004f12:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f16:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	f000 810c 	beq.w	800513a <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	f040 80d4 	bne.w	80050d4 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f2c:	4b67      	ldr	r3, [pc, #412]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f003 0203 	and.w	r2, r3, #3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d130      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4a:	3b01      	subs	r3, #1
 8004f4c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d127      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f5c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d11f      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f6c:	2a07      	cmp	r2, #7
 8004f6e:	bf14      	ite	ne
 8004f70:	2201      	movne	r2, #1
 8004f72:	2200      	moveq	r2, #0
 8004f74:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d113      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f84:	085b      	lsrs	r3, r3, #1
 8004f86:	3b01      	subs	r3, #1
 8004f88:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d109      	bne.n	8004fa2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f98:	085b      	lsrs	r3, r3, #1
 8004f9a:	3b01      	subs	r3, #1
 8004f9c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f9e:	429a      	cmp	r2, r3
 8004fa0:	d06e      	beq.n	8005080 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	2b0c      	cmp	r3, #12
 8004fa6:	d069      	beq.n	800507c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fa8:	4b48      	ldr	r3, [pc, #288]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d105      	bne.n	8004fc0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fb4:	4b45      	ldr	r3, [pc, #276]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d001      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e0bb      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fc4:	4b41      	ldr	r3, [pc, #260]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a40      	ldr	r2, [pc, #256]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004fca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004fce:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fd0:	f7fd f8fc 	bl	80021cc <HAL_GetTick>
 8004fd4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd6:	e008      	b.n	8004fea <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd8:	f7fd f8f8 	bl	80021cc <HAL_GetTick>
 8004fdc:	4602      	mov	r2, r0
 8004fde:	693b      	ldr	r3, [r7, #16]
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	2b02      	cmp	r3, #2
 8004fe4:	d901      	bls.n	8004fea <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004fe6:	2303      	movs	r3, #3
 8004fe8:	e0a8      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fea:	4b38      	ldr	r3, [pc, #224]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d1f0      	bne.n	8004fd8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff6:	4b35      	ldr	r3, [pc, #212]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8004ff8:	68da      	ldr	r2, [r3, #12]
 8004ffa:	4b35      	ldr	r3, [pc, #212]	; (80050d0 <HAL_RCC_OscConfig+0x758>)
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8005002:	687a      	ldr	r2, [r7, #4]
 8005004:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005006:	3a01      	subs	r2, #1
 8005008:	0112      	lsls	r2, r2, #4
 800500a:	4311      	orrs	r1, r2
 800500c:	687a      	ldr	r2, [r7, #4]
 800500e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005010:	0212      	lsls	r2, r2, #8
 8005012:	4311      	orrs	r1, r2
 8005014:	687a      	ldr	r2, [r7, #4]
 8005016:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005018:	0852      	lsrs	r2, r2, #1
 800501a:	3a01      	subs	r2, #1
 800501c:	0552      	lsls	r2, r2, #21
 800501e:	4311      	orrs	r1, r2
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005024:	0852      	lsrs	r2, r2, #1
 8005026:	3a01      	subs	r2, #1
 8005028:	0652      	lsls	r2, r2, #25
 800502a:	4311      	orrs	r1, r2
 800502c:	687a      	ldr	r2, [r7, #4]
 800502e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005030:	0912      	lsrs	r2, r2, #4
 8005032:	0452      	lsls	r2, r2, #17
 8005034:	430a      	orrs	r2, r1
 8005036:	4925      	ldr	r1, [pc, #148]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8005038:	4313      	orrs	r3, r2
 800503a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800503c:	4b23      	ldr	r3, [pc, #140]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8005042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005046:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005048:	4b20      	ldr	r3, [pc, #128]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 800504a:	68db      	ldr	r3, [r3, #12]
 800504c:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 800504e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005052:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005054:	f7fd f8ba 	bl	80021cc <HAL_GetTick>
 8005058:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800505a:	e008      	b.n	800506e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800505c:	f7fd f8b6 	bl	80021cc <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	2b02      	cmp	r3, #2
 8005068:	d901      	bls.n	800506e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800506a:	2303      	movs	r3, #3
 800506c:	e066      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506e:	4b17      	ldr	r3, [pc, #92]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d0f0      	beq.n	800505c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800507a:	e05e      	b.n	800513a <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	e05d      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005080:	4b12      	ldr	r3, [pc, #72]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005088:	2b00      	cmp	r3, #0
 800508a:	d156      	bne.n	800513a <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800508c:	4b0f      	ldr	r3, [pc, #60]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a0e      	ldr	r2, [pc, #56]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 8005092:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005096:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005098:	4b0c      	ldr	r3, [pc, #48]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	4a0b      	ldr	r2, [pc, #44]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 800509e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80050a2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050a4:	f7fd f892 	bl	80021cc <HAL_GetTick>
 80050a8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050aa:	e008      	b.n	80050be <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050ac:	f7fd f88e 	bl	80021cc <HAL_GetTick>
 80050b0:	4602      	mov	r2, r0
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	1ad3      	subs	r3, r2, r3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d901      	bls.n	80050be <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80050ba:	2303      	movs	r3, #3
 80050bc:	e03e      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050be:	4b03      	ldr	r3, [pc, #12]	; (80050cc <HAL_RCC_OscConfig+0x754>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0f0      	beq.n	80050ac <HAL_RCC_OscConfig+0x734>
 80050ca:	e036      	b.n	800513a <HAL_RCC_OscConfig+0x7c2>
 80050cc:	40021000 	.word	0x40021000
 80050d0:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	2b0c      	cmp	r3, #12
 80050d8:	d02d      	beq.n	8005136 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050da:	4b1a      	ldr	r3, [pc, #104]	; (8005144 <HAL_RCC_OscConfig+0x7cc>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a19      	ldr	r2, [pc, #100]	; (8005144 <HAL_RCC_OscConfig+0x7cc>)
 80050e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80050e4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80050e6:	4b17      	ldr	r3, [pc, #92]	; (8005144 <HAL_RCC_OscConfig+0x7cc>)
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d105      	bne.n	80050fe <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050f2:	4b14      	ldr	r3, [pc, #80]	; (8005144 <HAL_RCC_OscConfig+0x7cc>)
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	4a13      	ldr	r2, [pc, #76]	; (8005144 <HAL_RCC_OscConfig+0x7cc>)
 80050f8:	f023 0303 	bic.w	r3, r3, #3
 80050fc:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <HAL_RCC_OscConfig+0x7cc>)
 8005100:	68db      	ldr	r3, [r3, #12]
 8005102:	4a10      	ldr	r2, [pc, #64]	; (8005144 <HAL_RCC_OscConfig+0x7cc>)
 8005104:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005108:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800510c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510e:	f7fd f85d 	bl	80021cc <HAL_GetTick>
 8005112:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005114:	e008      	b.n	8005128 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005116:	f7fd f859 	bl	80021cc <HAL_GetTick>
 800511a:	4602      	mov	r2, r0
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	1ad3      	subs	r3, r2, r3
 8005120:	2b02      	cmp	r3, #2
 8005122:	d901      	bls.n	8005128 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005124:	2303      	movs	r3, #3
 8005126:	e009      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005128:	4b06      	ldr	r3, [pc, #24]	; (8005144 <HAL_RCC_OscConfig+0x7cc>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005130:	2b00      	cmp	r3, #0
 8005132:	d1f0      	bne.n	8005116 <HAL_RCC_OscConfig+0x79e>
 8005134:	e001      	b.n	800513a <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	3720      	adds	r7, #32
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}
 8005144:	40021000 	.word	0x40021000

08005148 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
 8005150:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d101      	bne.n	800515c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e0c8      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800515c:	4b66      	ldr	r3, [pc, #408]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0307 	and.w	r3, r3, #7
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	429a      	cmp	r2, r3
 8005168:	d910      	bls.n	800518c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516a:	4b63      	ldr	r3, [pc, #396]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f023 0207 	bic.w	r2, r3, #7
 8005172:	4961      	ldr	r1, [pc, #388]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	4313      	orrs	r3, r2
 8005178:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800517a:	4b5f      	ldr	r3, [pc, #380]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0307 	and.w	r3, r3, #7
 8005182:	683a      	ldr	r2, [r7, #0]
 8005184:	429a      	cmp	r2, r3
 8005186:	d001      	beq.n	800518c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e0b0      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f003 0301 	and.w	r3, r3, #1
 8005194:	2b00      	cmp	r3, #0
 8005196:	d04c      	beq.n	8005232 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d107      	bne.n	80051b0 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051a0:	4b56      	ldr	r3, [pc, #344]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d121      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e09e      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	2b02      	cmp	r3, #2
 80051b6:	d107      	bne.n	80051c8 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b8:	4b50      	ldr	r3, [pc, #320]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d115      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e092      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d107      	bne.n	80051e0 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051d0:	4b4a      	ldr	r3, [pc, #296]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f003 0302 	and.w	r3, r3, #2
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d109      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e086      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051e0:	4b46      	ldr	r3, [pc, #280]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d101      	bne.n	80051f0 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e07e      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051f0:	4b42      	ldr	r3, [pc, #264]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f023 0203 	bic.w	r2, r3, #3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	493f      	ldr	r1, [pc, #252]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005202:	f7fc ffe3 	bl	80021cc <HAL_GetTick>
 8005206:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005208:	e00a      	b.n	8005220 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800520a:	f7fc ffdf 	bl	80021cc <HAL_GetTick>
 800520e:	4602      	mov	r2, r0
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	1ad3      	subs	r3, r2, r3
 8005214:	f241 3288 	movw	r2, #5000	; 0x1388
 8005218:	4293      	cmp	r3, r2
 800521a:	d901      	bls.n	8005220 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 800521c:	2303      	movs	r3, #3
 800521e:	e066      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005220:	4b36      	ldr	r3, [pc, #216]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 8005222:	689b      	ldr	r3, [r3, #8]
 8005224:	f003 020c 	and.w	r2, r3, #12
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	685b      	ldr	r3, [r3, #4]
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	429a      	cmp	r2, r3
 8005230:	d1eb      	bne.n	800520a <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d008      	beq.n	8005250 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523e:	4b2f      	ldr	r3, [pc, #188]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	492c      	ldr	r1, [pc, #176]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 800524c:	4313      	orrs	r3, r2
 800524e:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005250:	4b29      	ldr	r3, [pc, #164]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0307 	and.w	r3, r3, #7
 8005258:	683a      	ldr	r2, [r7, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d210      	bcs.n	8005280 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525e:	4b26      	ldr	r3, [pc, #152]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f023 0207 	bic.w	r2, r3, #7
 8005266:	4924      	ldr	r1, [pc, #144]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	4313      	orrs	r3, r2
 800526c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526e:	4b22      	ldr	r3, [pc, #136]	; (80052f8 <HAL_RCC_ClockConfig+0x1b0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0307 	and.w	r3, r3, #7
 8005276:	683a      	ldr	r2, [r7, #0]
 8005278:	429a      	cmp	r2, r3
 800527a:	d001      	beq.n	8005280 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 800527c:	2301      	movs	r3, #1
 800527e:	e036      	b.n	80052ee <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	f003 0304 	and.w	r3, r3, #4
 8005288:	2b00      	cmp	r3, #0
 800528a:	d008      	beq.n	800529e <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800528c:	4b1b      	ldr	r3, [pc, #108]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68db      	ldr	r3, [r3, #12]
 8005298:	4918      	ldr	r1, [pc, #96]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 800529a:	4313      	orrs	r3, r2
 800529c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0308 	and.w	r3, r3, #8
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d009      	beq.n	80052be <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052aa:	4b14      	ldr	r3, [pc, #80]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80052ac:	689b      	ldr	r3, [r3, #8]
 80052ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	691b      	ldr	r3, [r3, #16]
 80052b6:	00db      	lsls	r3, r3, #3
 80052b8:	4910      	ldr	r1, [pc, #64]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80052ba:	4313      	orrs	r3, r2
 80052bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052be:	f000 f825 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80052c2:	4602      	mov	r2, r0
 80052c4:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <HAL_RCC_ClockConfig+0x1b4>)
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	091b      	lsrs	r3, r3, #4
 80052ca:	f003 030f 	and.w	r3, r3, #15
 80052ce:	490c      	ldr	r1, [pc, #48]	; (8005300 <HAL_RCC_ClockConfig+0x1b8>)
 80052d0:	5ccb      	ldrb	r3, [r1, r3]
 80052d2:	f003 031f 	and.w	r3, r3, #31
 80052d6:	fa22 f303 	lsr.w	r3, r2, r3
 80052da:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <HAL_RCC_ClockConfig+0x1bc>)
 80052dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052de:	4b0a      	ldr	r3, [pc, #40]	; (8005308 <HAL_RCC_ClockConfig+0x1c0>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4618      	mov	r0, r3
 80052e4:	f7fc fe36 	bl	8001f54 <HAL_InitTick>
 80052e8:	4603      	mov	r3, r0
 80052ea:	72fb      	strb	r3, [r7, #11]

  return status;
 80052ec:	7afb      	ldrb	r3, [r7, #11]
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	3710      	adds	r7, #16
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	40022000 	.word	0x40022000
 80052fc:	40021000 	.word	0x40021000
 8005300:	0800b308 	.word	0x0800b308
 8005304:	20000008 	.word	0x20000008
 8005308:	2000000c 	.word	0x2000000c

0800530c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800530c:	b480      	push	{r7}
 800530e:	b089      	sub	sp, #36	; 0x24
 8005310:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005312:	2300      	movs	r3, #0
 8005314:	61fb      	str	r3, [r7, #28]
 8005316:	2300      	movs	r3, #0
 8005318:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800531a:	4b3e      	ldr	r3, [pc, #248]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	f003 030c 	and.w	r3, r3, #12
 8005322:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005324:	4b3b      	ldr	r3, [pc, #236]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0303 	and.w	r3, r3, #3
 800532c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800532e:	693b      	ldr	r3, [r7, #16]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d005      	beq.n	8005340 <HAL_RCC_GetSysClockFreq+0x34>
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b0c      	cmp	r3, #12
 8005338:	d121      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2b01      	cmp	r3, #1
 800533e:	d11e      	bne.n	800537e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005340:	4b34      	ldr	r3, [pc, #208]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0308 	and.w	r3, r3, #8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d107      	bne.n	800535c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800534c:	4b31      	ldr	r3, [pc, #196]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800534e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005352:	0a1b      	lsrs	r3, r3, #8
 8005354:	f003 030f 	and.w	r3, r3, #15
 8005358:	61fb      	str	r3, [r7, #28]
 800535a:	e005      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800535c:	4b2d      	ldr	r3, [pc, #180]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	091b      	lsrs	r3, r3, #4
 8005362:	f003 030f 	and.w	r3, r3, #15
 8005366:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005368:	4a2b      	ldr	r2, [pc, #172]	; (8005418 <HAL_RCC_GetSysClockFreq+0x10c>)
 800536a:	69fb      	ldr	r3, [r7, #28]
 800536c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005370:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d10d      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800537c:	e00a      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	2b04      	cmp	r3, #4
 8005382:	d102      	bne.n	800538a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005384:	4b25      	ldr	r3, [pc, #148]	; (800541c <HAL_RCC_GetSysClockFreq+0x110>)
 8005386:	61bb      	str	r3, [r7, #24]
 8005388:	e004      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	2b08      	cmp	r3, #8
 800538e:	d101      	bne.n	8005394 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005390:	4b23      	ldr	r3, [pc, #140]	; (8005420 <HAL_RCC_GetSysClockFreq+0x114>)
 8005392:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	2b0c      	cmp	r3, #12
 8005398:	d134      	bne.n	8005404 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800539a:	4b1e      	ldr	r3, [pc, #120]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	f003 0303 	and.w	r3, r3, #3
 80053a2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	2b02      	cmp	r3, #2
 80053a8:	d003      	beq.n	80053b2 <HAL_RCC_GetSysClockFreq+0xa6>
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b03      	cmp	r3, #3
 80053ae:	d003      	beq.n	80053b8 <HAL_RCC_GetSysClockFreq+0xac>
 80053b0:	e005      	b.n	80053be <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053b2:	4b1a      	ldr	r3, [pc, #104]	; (800541c <HAL_RCC_GetSysClockFreq+0x110>)
 80053b4:	617b      	str	r3, [r7, #20]
      break;
 80053b6:	e005      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053b8:	4b19      	ldr	r3, [pc, #100]	; (8005420 <HAL_RCC_GetSysClockFreq+0x114>)
 80053ba:	617b      	str	r3, [r7, #20]
      break;
 80053bc:	e002      	b.n	80053c4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053be:	69fb      	ldr	r3, [r7, #28]
 80053c0:	617b      	str	r3, [r7, #20]
      break;
 80053c2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c4:	4b13      	ldr	r3, [pc, #76]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c6:	68db      	ldr	r3, [r3, #12]
 80053c8:	091b      	lsrs	r3, r3, #4
 80053ca:	f003 0307 	and.w	r3, r3, #7
 80053ce:	3301      	adds	r3, #1
 80053d0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d4:	68db      	ldr	r3, [r3, #12]
 80053d6:	0a1b      	lsrs	r3, r3, #8
 80053d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	fb03 f202 	mul.w	r2, r3, r2
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053ea:	4b0a      	ldr	r3, [pc, #40]	; (8005414 <HAL_RCC_GetSysClockFreq+0x108>)
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	0e5b      	lsrs	r3, r3, #25
 80053f0:	f003 0303 	and.w	r3, r3, #3
 80053f4:	3301      	adds	r3, #1
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053fa:	697a      	ldr	r2, [r7, #20]
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005402:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005404:	69bb      	ldr	r3, [r7, #24]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3724      	adds	r7, #36	; 0x24
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
 8005412:	bf00      	nop
 8005414:	40021000 	.word	0x40021000
 8005418:	0800b320 	.word	0x0800b320
 800541c:	00f42400 	.word	0x00f42400
 8005420:	007a1200 	.word	0x007a1200

08005424 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005424:	b480      	push	{r7}
 8005426:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005428:	4b03      	ldr	r3, [pc, #12]	; (8005438 <HAL_RCC_GetHCLKFreq+0x14>)
 800542a:	681b      	ldr	r3, [r3, #0]
}
 800542c:	4618      	mov	r0, r3
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20000008 	.word	0x20000008

0800543c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005440:	f7ff fff0 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005444:	4602      	mov	r2, r0
 8005446:	4b06      	ldr	r3, [pc, #24]	; (8005460 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	0a1b      	lsrs	r3, r3, #8
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	4904      	ldr	r1, [pc, #16]	; (8005464 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005452:	5ccb      	ldrb	r3, [r1, r3]
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800545c:	4618      	mov	r0, r3
 800545e:	bd80      	pop	{r7, pc}
 8005460:	40021000 	.word	0x40021000
 8005464:	0800b318 	.word	0x0800b318

08005468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800546c:	f7ff ffda 	bl	8005424 <HAL_RCC_GetHCLKFreq>
 8005470:	4602      	mov	r2, r0
 8005472:	4b06      	ldr	r3, [pc, #24]	; (800548c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	0adb      	lsrs	r3, r3, #11
 8005478:	f003 0307 	and.w	r3, r3, #7
 800547c:	4904      	ldr	r1, [pc, #16]	; (8005490 <HAL_RCC_GetPCLK2Freq+0x28>)
 800547e:	5ccb      	ldrb	r3, [r1, r3]
 8005480:	f003 031f 	and.w	r3, r3, #31
 8005484:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005488:	4618      	mov	r0, r3
 800548a:	bd80      	pop	{r7, pc}
 800548c:	40021000 	.word	0x40021000
 8005490:	0800b318 	.word	0x0800b318

08005494 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005494:	b480      	push	{r7}
 8005496:	b083      	sub	sp, #12
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
 800549c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	220f      	movs	r2, #15
 80054a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80054a4:	4b12      	ldr	r3, [pc, #72]	; (80054f0 <HAL_RCC_GetClockConfig+0x5c>)
 80054a6:	689b      	ldr	r3, [r3, #8]
 80054a8:	f003 0203 	and.w	r2, r3, #3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80054b0:	4b0f      	ldr	r3, [pc, #60]	; (80054f0 <HAL_RCC_GetClockConfig+0x5c>)
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80054bc:	4b0c      	ldr	r3, [pc, #48]	; (80054f0 <HAL_RCC_GetClockConfig+0x5c>)
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80054c8:	4b09      	ldr	r3, [pc, #36]	; (80054f0 <HAL_RCC_GetClockConfig+0x5c>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	08db      	lsrs	r3, r3, #3
 80054ce:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80054d6:	4b07      	ldr	r3, [pc, #28]	; (80054f4 <HAL_RCC_GetClockConfig+0x60>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0207 	and.w	r2, r3, #7
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	601a      	str	r2, [r3, #0]
}
 80054e2:	bf00      	nop
 80054e4:	370c      	adds	r7, #12
 80054e6:	46bd      	mov	sp, r7
 80054e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ec:	4770      	bx	lr
 80054ee:	bf00      	nop
 80054f0:	40021000 	.word	0x40021000
 80054f4:	40022000 	.word	0x40022000

080054f8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b086      	sub	sp, #24
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005500:	2300      	movs	r3, #0
 8005502:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005504:	4b2a      	ldr	r3, [pc, #168]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005506:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d003      	beq.n	8005518 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005510:	f7ff f9ce 	bl	80048b0 <HAL_PWREx_GetVoltageRange>
 8005514:	6178      	str	r0, [r7, #20]
 8005516:	e014      	b.n	8005542 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005518:	4b25      	ldr	r3, [pc, #148]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800551c:	4a24      	ldr	r2, [pc, #144]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005522:	6593      	str	r3, [r2, #88]	; 0x58
 8005524:	4b22      	ldr	r3, [pc, #136]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552c:	60fb      	str	r3, [r7, #12]
 800552e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8005530:	f7ff f9be 	bl	80048b0 <HAL_PWREx_GetVoltageRange>
 8005534:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005536:	4b1e      	ldr	r3, [pc, #120]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005538:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800553a:	4a1d      	ldr	r2, [pc, #116]	; (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800553c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005540:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005548:	d10b      	bne.n	8005562 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b80      	cmp	r3, #128	; 0x80
 800554e:	d919      	bls.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2ba0      	cmp	r3, #160	; 0xa0
 8005554:	d902      	bls.n	800555c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005556:	2302      	movs	r3, #2
 8005558:	613b      	str	r3, [r7, #16]
 800555a:	e013      	b.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800555c:	2301      	movs	r3, #1
 800555e:	613b      	str	r3, [r7, #16]
 8005560:	e010      	b.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2b80      	cmp	r3, #128	; 0x80
 8005566:	d902      	bls.n	800556e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005568:	2303      	movs	r3, #3
 800556a:	613b      	str	r3, [r7, #16]
 800556c:	e00a      	b.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2b80      	cmp	r3, #128	; 0x80
 8005572:	d102      	bne.n	800557a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005574:	2302      	movs	r3, #2
 8005576:	613b      	str	r3, [r7, #16]
 8005578:	e004      	b.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2b70      	cmp	r3, #112	; 0x70
 800557e:	d101      	bne.n	8005584 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005580:	2301      	movs	r3, #1
 8005582:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005584:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	f023 0207 	bic.w	r2, r3, #7
 800558c:	4909      	ldr	r1, [pc, #36]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	4313      	orrs	r3, r2
 8005592:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f003 0307 	and.w	r3, r3, #7
 800559c:	693a      	ldr	r2, [r7, #16]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d001      	beq.n	80055a6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80055a2:	2301      	movs	r3, #1
 80055a4:	e000      	b.n	80055a8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40021000 	.word	0x40021000
 80055b4:	40022000 	.word	0x40022000

080055b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055c0:	2300      	movs	r3, #0
 80055c2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055c4:	2300      	movs	r3, #0
 80055c6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d041      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055d8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055dc:	d02a      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055de:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80055e2:	d824      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055e8:	d008      	beq.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055ea:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80055ee:	d81e      	bhi.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d00a      	beq.n	800560a <HAL_RCCEx_PeriphCLKConfig+0x52>
 80055f4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80055f8:	d010      	beq.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055fa:	e018      	b.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055fc:	4b86      	ldr	r3, [pc, #536]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fe:	68db      	ldr	r3, [r3, #12]
 8005600:	4a85      	ldr	r2, [pc, #532]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005602:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005606:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005608:	e015      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	3304      	adds	r3, #4
 800560e:	2100      	movs	r1, #0
 8005610:	4618      	mov	r0, r3
 8005612:	f000 fabb 	bl	8005b8c <RCCEx_PLLSAI1_Config>
 8005616:	4603      	mov	r3, r0
 8005618:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800561a:	e00c      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	3320      	adds	r3, #32
 8005620:	2100      	movs	r1, #0
 8005622:	4618      	mov	r0, r3
 8005624:	f000 fba6 	bl	8005d74 <RCCEx_PLLSAI2_Config>
 8005628:	4603      	mov	r3, r0
 800562a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800562c:	e003      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	74fb      	strb	r3, [r7, #19]
      break;
 8005632:	e000      	b.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005634:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005636:	7cfb      	ldrb	r3, [r7, #19]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d10b      	bne.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800563c:	4b76      	ldr	r3, [pc, #472]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800564a:	4973      	ldr	r1, [pc, #460]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800564c:	4313      	orrs	r3, r2
 800564e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8005652:	e001      	b.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005654:	7cfb      	ldrb	r3, [r7, #19]
 8005656:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d041      	beq.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005668:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800566c:	d02a      	beq.n	80056c4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800566e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005672:	d824      	bhi.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005674:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005678:	d008      	beq.n	800568c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800567a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800567e:	d81e      	bhi.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005680:	2b00      	cmp	r3, #0
 8005682:	d00a      	beq.n	800569a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005684:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005688:	d010      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800568a:	e018      	b.n	80056be <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800568c:	4b62      	ldr	r3, [pc, #392]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800568e:	68db      	ldr	r3, [r3, #12]
 8005690:	4a61      	ldr	r2, [pc, #388]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005692:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005696:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005698:	e015      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	3304      	adds	r3, #4
 800569e:	2100      	movs	r1, #0
 80056a0:	4618      	mov	r0, r3
 80056a2:	f000 fa73 	bl	8005b8c <RCCEx_PLLSAI1_Config>
 80056a6:	4603      	mov	r3, r0
 80056a8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056aa:	e00c      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	3320      	adds	r3, #32
 80056b0:	2100      	movs	r1, #0
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fb5e 	bl	8005d74 <RCCEx_PLLSAI2_Config>
 80056b8:	4603      	mov	r3, r0
 80056ba:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056bc:	e003      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056be:	2301      	movs	r3, #1
 80056c0:	74fb      	strb	r3, [r7, #19]
      break;
 80056c2:	e000      	b.n	80056c6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80056c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c6:	7cfb      	ldrb	r3, [r7, #19]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d10b      	bne.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056cc:	4b52      	ldr	r3, [pc, #328]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056d2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80056da:	494f      	ldr	r1, [pc, #316]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056dc:	4313      	orrs	r3, r2
 80056de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80056e2:	e001      	b.n	80056e8 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e4:	7cfb      	ldrb	r3, [r7, #19]
 80056e6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 80a0 	beq.w	8005836 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f6:	2300      	movs	r3, #0
 80056f8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056fa:	4b47      	ldr	r3, [pc, #284]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80056fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005706:	2301      	movs	r3, #1
 8005708:	e000      	b.n	800570c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800570a:	2300      	movs	r3, #0
 800570c:	2b00      	cmp	r3, #0
 800570e:	d00d      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005710:	4b41      	ldr	r3, [pc, #260]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005712:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005714:	4a40      	ldr	r2, [pc, #256]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800571a:	6593      	str	r3, [r2, #88]	; 0x58
 800571c:	4b3e      	ldr	r3, [pc, #248]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800571e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005724:	60bb      	str	r3, [r7, #8]
 8005726:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005728:	2301      	movs	r3, #1
 800572a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800572c:	4b3b      	ldr	r3, [pc, #236]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a3a      	ldr	r2, [pc, #232]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005732:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005736:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005738:	f7fc fd48 	bl	80021cc <HAL_GetTick>
 800573c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800573e:	e009      	b.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005740:	f7fc fd44 	bl	80021cc <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d902      	bls.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	74fb      	strb	r3, [r7, #19]
        break;
 8005752:	e005      	b.n	8005760 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005754:	4b31      	ldr	r3, [pc, #196]	; (800581c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800575c:	2b00      	cmp	r3, #0
 800575e:	d0ef      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8005760:	7cfb      	ldrb	r3, [r7, #19]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d15c      	bne.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005766:	4b2c      	ldr	r3, [pc, #176]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800576c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005770:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01f      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	429a      	cmp	r2, r3
 8005782:	d019      	beq.n	80057b8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005784:	4b24      	ldr	r3, [pc, #144]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800578a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800578e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005790:	4b21      	ldr	r3, [pc, #132]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005796:	4a20      	ldr	r2, [pc, #128]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005798:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800579c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80057a0:	4b1d      	ldr	r3, [pc, #116]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a6:	4a1c      	ldr	r2, [pc, #112]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80057ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057b0:	4a19      	ldr	r2, [pc, #100]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057b2:	697b      	ldr	r3, [r7, #20]
 80057b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	f003 0301 	and.w	r3, r3, #1
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d016      	beq.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057c2:	f7fc fd03 	bl	80021cc <HAL_GetTick>
 80057c6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057c8:	e00b      	b.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ca:	f7fc fcff 	bl	80021cc <HAL_GetTick>
 80057ce:	4602      	mov	r2, r0
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	1ad3      	subs	r3, r2, r3
 80057d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80057d8:	4293      	cmp	r3, r2
 80057da:	d902      	bls.n	80057e2 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	74fb      	strb	r3, [r7, #19]
            break;
 80057e0:	e006      	b.n	80057f0 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057e2:	4b0d      	ldr	r3, [pc, #52]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d0ec      	beq.n	80057ca <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80057f0:	7cfb      	ldrb	r3, [r7, #19]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d10c      	bne.n	8005810 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057f6:	4b08      	ldr	r3, [pc, #32]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005806:	4904      	ldr	r1, [pc, #16]	; (8005818 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005808:	4313      	orrs	r3, r2
 800580a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800580e:	e009      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005810:	7cfb      	ldrb	r3, [r7, #19]
 8005812:	74bb      	strb	r3, [r7, #18]
 8005814:	e006      	b.n	8005824 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005816:	bf00      	nop
 8005818:	40021000 	.word	0x40021000
 800581c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005820:	7cfb      	ldrb	r3, [r7, #19]
 8005822:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005824:	7c7b      	ldrb	r3, [r7, #17]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d105      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800582a:	4b9e      	ldr	r3, [pc, #632]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800582e:	4a9d      	ldr	r2, [pc, #628]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005830:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005834:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	2b00      	cmp	r3, #0
 8005840:	d00a      	beq.n	8005858 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005842:	4b98      	ldr	r3, [pc, #608]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005848:	f023 0203 	bic.w	r2, r3, #3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	4994      	ldr	r1, [pc, #592]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005852:	4313      	orrs	r3, r2
 8005854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f003 0302 	and.w	r3, r3, #2
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00a      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005864:	4b8f      	ldr	r3, [pc, #572]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800586a:	f023 020c 	bic.w	r2, r3, #12
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005872:	498c      	ldr	r1, [pc, #560]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005874:	4313      	orrs	r3, r2
 8005876:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f003 0304 	and.w	r3, r3, #4
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00a      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005886:	4b87      	ldr	r3, [pc, #540]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800588c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005894:	4983      	ldr	r1, [pc, #524]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	f003 0308 	and.w	r3, r3, #8
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00a      	beq.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058a8:	4b7e      	ldr	r3, [pc, #504]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058ae:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058b6:	497b      	ldr	r1, [pc, #492]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	f003 0310 	and.w	r3, r3, #16
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058ca:	4b76      	ldr	r3, [pc, #472]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80058d8:	4972      	ldr	r1, [pc, #456]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058da:	4313      	orrs	r3, r2
 80058dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0320 	and.w	r3, r3, #32
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d00a      	beq.n	8005902 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058ec:	4b6d      	ldr	r3, [pc, #436]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80058fa:	496a      	ldr	r1, [pc, #424]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058fc:	4313      	orrs	r3, r2
 80058fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800590a:	2b00      	cmp	r3, #0
 800590c:	d00a      	beq.n	8005924 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800590e:	4b65      	ldr	r3, [pc, #404]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005910:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005914:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800591c:	4961      	ldr	r1, [pc, #388]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591e:	4313      	orrs	r3, r2
 8005920:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800592c:	2b00      	cmp	r3, #0
 800592e:	d00a      	beq.n	8005946 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005930:	4b5c      	ldr	r3, [pc, #368]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005932:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005936:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800593e:	4959      	ldr	r1, [pc, #356]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005940:	4313      	orrs	r3, r2
 8005942:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800594e:	2b00      	cmp	r3, #0
 8005950:	d00a      	beq.n	8005968 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005952:	4b54      	ldr	r3, [pc, #336]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005958:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005960:	4950      	ldr	r1, [pc, #320]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005962:	4313      	orrs	r3, r2
 8005964:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005974:	4b4b      	ldr	r3, [pc, #300]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005982:	4948      	ldr	r1, [pc, #288]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005984:	4313      	orrs	r3, r2
 8005986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005992:	2b00      	cmp	r3, #0
 8005994:	d00a      	beq.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005996:	4b43      	ldr	r3, [pc, #268]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005998:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a4:	493f      	ldr	r1, [pc, #252]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a6:	4313      	orrs	r3, r2
 80059a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d028      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059b8:	4b3a      	ldr	r3, [pc, #232]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059be:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059c6:	4937      	ldr	r1, [pc, #220]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c8:	4313      	orrs	r3, r2
 80059ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059d6:	d106      	bne.n	80059e6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d8:	4b32      	ldr	r3, [pc, #200]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	4a31      	ldr	r2, [pc, #196]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059e2:	60d3      	str	r3, [r2, #12]
 80059e4:	e011      	b.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80059ea:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80059ee:	d10c      	bne.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3304      	adds	r3, #4
 80059f4:	2101      	movs	r1, #1
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 f8c8 	bl	8005b8c <RCCEx_PLLSAI1_Config>
 80059fc:	4603      	mov	r3, r0
 80059fe:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005a00:	7cfb      	ldrb	r3, [r7, #19]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d001      	beq.n	8005a0a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005a06:	7cfb      	ldrb	r3, [r7, #19]
 8005a08:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d028      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a16:	4b23      	ldr	r3, [pc, #140]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a1c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a24:	491f      	ldr	r1, [pc, #124]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a34:	d106      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a36:	4b1b      	ldr	r3, [pc, #108]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a38:	68db      	ldr	r3, [r3, #12]
 8005a3a:	4a1a      	ldr	r2, [pc, #104]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a40:	60d3      	str	r3, [r2, #12]
 8005a42:	e011      	b.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a48:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a4c:	d10c      	bne.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	3304      	adds	r3, #4
 8005a52:	2101      	movs	r1, #1
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 f899 	bl	8005b8c <RCCEx_PLLSAI1_Config>
 8005a5a:	4603      	mov	r3, r0
 8005a5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a5e:	7cfb      	ldrb	r3, [r7, #19]
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d001      	beq.n	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a64:	7cfb      	ldrb	r3, [r7, #19]
 8005a66:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d02b      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a74:	4b0b      	ldr	r3, [pc, #44]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a7a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a82:	4908      	ldr	r1, [pc, #32]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a84:	4313      	orrs	r3, r2
 8005a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a8e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a92:	d109      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a94:	4b03      	ldr	r3, [pc, #12]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	4a02      	ldr	r2, [pc, #8]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a9a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a9e:	60d3      	str	r3, [r2, #12]
 8005aa0:	e014      	b.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005aa2:	bf00      	nop
 8005aa4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005aac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005ab0:	d10c      	bne.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3304      	adds	r3, #4
 8005ab6:	2101      	movs	r1, #1
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 f867 	bl	8005b8c <RCCEx_PLLSAI1_Config>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005ac2:	7cfb      	ldrb	r3, [r7, #19]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d001      	beq.n	8005acc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005ac8:	7cfb      	ldrb	r3, [r7, #19]
 8005aca:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d02f      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ad8:	4b2b      	ldr	r3, [pc, #172]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ae6:	4928      	ldr	r1, [pc, #160]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005af2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005af6:	d10d      	bne.n	8005b14 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	3304      	adds	r3, #4
 8005afc:	2102      	movs	r1, #2
 8005afe:	4618      	mov	r0, r3
 8005b00:	f000 f844 	bl	8005b8c <RCCEx_PLLSAI1_Config>
 8005b04:	4603      	mov	r3, r0
 8005b06:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b08:	7cfb      	ldrb	r3, [r7, #19]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d014      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b0e:	7cfb      	ldrb	r3, [r7, #19]
 8005b10:	74bb      	strb	r3, [r7, #18]
 8005b12:	e011      	b.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b1c:	d10c      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3320      	adds	r3, #32
 8005b22:	2102      	movs	r1, #2
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 f925 	bl	8005d74 <RCCEx_PLLSAI2_Config>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b2e:	7cfb      	ldrb	r3, [r7, #19]
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d001      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b34:	7cfb      	ldrb	r3, [r7, #19]
 8005b36:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d00a      	beq.n	8005b5a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b44:	4b10      	ldr	r3, [pc, #64]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b52:	490d      	ldr	r1, [pc, #52]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00b      	beq.n	8005b7e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b66:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b76:	4904      	ldr	r1, [pc, #16]	; (8005b88 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b78:	4313      	orrs	r3, r2
 8005b7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b7e:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3718      	adds	r7, #24
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}
 8005b88:	40021000 	.word	0x40021000

08005b8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b084      	sub	sp, #16
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	6078      	str	r0, [r7, #4]
 8005b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b96:	2300      	movs	r3, #0
 8005b98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b9a:	4b75      	ldr	r3, [pc, #468]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	f003 0303 	and.w	r3, r3, #3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d018      	beq.n	8005bd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ba6:	4b72      	ldr	r3, [pc, #456]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba8:	68db      	ldr	r3, [r3, #12]
 8005baa:	f003 0203 	and.w	r2, r3, #3
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d10d      	bne.n	8005bd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
       ||
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d009      	beq.n	8005bd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005bbe:	4b6c      	ldr	r3, [pc, #432]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	091b      	lsrs	r3, r3, #4
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	1c5a      	adds	r2, r3, #1
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	685b      	ldr	r3, [r3, #4]
       ||
 8005bce:	429a      	cmp	r2, r3
 8005bd0:	d047      	beq.n	8005c62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	73fb      	strb	r3, [r7, #15]
 8005bd6:	e044      	b.n	8005c62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d018      	beq.n	8005c12 <RCCEx_PLLSAI1_Config+0x86>
 8005be0:	2b03      	cmp	r3, #3
 8005be2:	d825      	bhi.n	8005c30 <RCCEx_PLLSAI1_Config+0xa4>
 8005be4:	2b01      	cmp	r3, #1
 8005be6:	d002      	beq.n	8005bee <RCCEx_PLLSAI1_Config+0x62>
 8005be8:	2b02      	cmp	r3, #2
 8005bea:	d009      	beq.n	8005c00 <RCCEx_PLLSAI1_Config+0x74>
 8005bec:	e020      	b.n	8005c30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bee:	4b60      	ldr	r3, [pc, #384]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	f003 0302 	and.w	r3, r3, #2
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d11d      	bne.n	8005c36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bfa:	2301      	movs	r3, #1
 8005bfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bfe:	e01a      	b.n	8005c36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005c00:	4b5b      	ldr	r3, [pc, #364]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d116      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c0c:	2301      	movs	r3, #1
 8005c0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c10:	e013      	b.n	8005c3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c12:	4b57      	ldr	r3, [pc, #348]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d10f      	bne.n	8005c3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c1e:	4b54      	ldr	r3, [pc, #336]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d109      	bne.n	8005c3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c2e:	e006      	b.n	8005c3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c30:	2301      	movs	r3, #1
 8005c32:	73fb      	strb	r3, [r7, #15]
      break;
 8005c34:	e004      	b.n	8005c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c36:	bf00      	nop
 8005c38:	e002      	b.n	8005c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c3a:	bf00      	nop
 8005c3c:	e000      	b.n	8005c40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c40:	7bfb      	ldrb	r3, [r7, #15]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d10d      	bne.n	8005c62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c46:	4b4a      	ldr	r3, [pc, #296]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c48:	68db      	ldr	r3, [r3, #12]
 8005c4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6819      	ldr	r1, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	3b01      	subs	r3, #1
 8005c58:	011b      	lsls	r3, r3, #4
 8005c5a:	430b      	orrs	r3, r1
 8005c5c:	4944      	ldr	r1, [pc, #272]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c5e:	4313      	orrs	r3, r2
 8005c60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c62:	7bfb      	ldrb	r3, [r7, #15]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d17d      	bne.n	8005d64 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c68:	4b41      	ldr	r3, [pc, #260]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a40      	ldr	r2, [pc, #256]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005c72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c74:	f7fc faaa 	bl	80021cc <HAL_GetTick>
 8005c78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c7a:	e009      	b.n	8005c90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c7c:	f7fc faa6 	bl	80021cc <HAL_GetTick>
 8005c80:	4602      	mov	r2, r0
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	1ad3      	subs	r3, r2, r3
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d902      	bls.n	8005c90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c8a:	2303      	movs	r3, #3
 8005c8c:	73fb      	strb	r3, [r7, #15]
        break;
 8005c8e:	e005      	b.n	8005c9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c90:	4b37      	ldr	r3, [pc, #220]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d1ef      	bne.n	8005c7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c9c:	7bfb      	ldrb	r3, [r7, #15]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d160      	bne.n	8005d64 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d111      	bne.n	8005ccc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ca8:	4b31      	ldr	r3, [pc, #196]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005caa:	691b      	ldr	r3, [r3, #16]
 8005cac:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005cb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005cb4:	687a      	ldr	r2, [r7, #4]
 8005cb6:	6892      	ldr	r2, [r2, #8]
 8005cb8:	0211      	lsls	r1, r2, #8
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	68d2      	ldr	r2, [r2, #12]
 8005cbe:	0912      	lsrs	r2, r2, #4
 8005cc0:	0452      	lsls	r2, r2, #17
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	492a      	ldr	r1, [pc, #168]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	610b      	str	r3, [r1, #16]
 8005cca:	e027      	b.n	8005d1c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d112      	bne.n	8005cf8 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cd2:	4b27      	ldr	r3, [pc, #156]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd4:	691b      	ldr	r3, [r3, #16]
 8005cd6:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8005cda:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	6892      	ldr	r2, [r2, #8]
 8005ce2:	0211      	lsls	r1, r2, #8
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6912      	ldr	r2, [r2, #16]
 8005ce8:	0852      	lsrs	r2, r2, #1
 8005cea:	3a01      	subs	r2, #1
 8005cec:	0552      	lsls	r2, r2, #21
 8005cee:	430a      	orrs	r2, r1
 8005cf0:	491f      	ldr	r1, [pc, #124]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	610b      	str	r3, [r1, #16]
 8005cf6:	e011      	b.n	8005d1c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cf8:	4b1d      	ldr	r3, [pc, #116]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cfa:	691b      	ldr	r3, [r3, #16]
 8005cfc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005d00:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6892      	ldr	r2, [r2, #8]
 8005d08:	0211      	lsls	r1, r2, #8
 8005d0a:	687a      	ldr	r2, [r7, #4]
 8005d0c:	6952      	ldr	r2, [r2, #20]
 8005d0e:	0852      	lsrs	r2, r2, #1
 8005d10:	3a01      	subs	r2, #1
 8005d12:	0652      	lsls	r2, r2, #25
 8005d14:	430a      	orrs	r2, r1
 8005d16:	4916      	ldr	r1, [pc, #88]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d18:	4313      	orrs	r3, r2
 8005d1a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d1c:	4b14      	ldr	r3, [pc, #80]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a13      	ldr	r2, [pc, #76]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005d26:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d28:	f7fc fa50 	bl	80021cc <HAL_GetTick>
 8005d2c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d2e:	e009      	b.n	8005d44 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d30:	f7fc fa4c 	bl	80021cc <HAL_GetTick>
 8005d34:	4602      	mov	r2, r0
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	1ad3      	subs	r3, r2, r3
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d902      	bls.n	8005d44 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	73fb      	strb	r3, [r7, #15]
          break;
 8005d42:	e005      	b.n	8005d50 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d44:	4b0a      	ldr	r3, [pc, #40]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d0ef      	beq.n	8005d30 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005d50:	7bfb      	ldrb	r3, [r7, #15]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d106      	bne.n	8005d64 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d56:	4b06      	ldr	r3, [pc, #24]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d58:	691a      	ldr	r2, [r3, #16]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	4904      	ldr	r1, [pc, #16]	; (8005d70 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d60:	4313      	orrs	r3, r2
 8005d62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3710      	adds	r7, #16
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	bd80      	pop	{r7, pc}
 8005d6e:	bf00      	nop
 8005d70:	40021000 	.word	0x40021000

08005d74 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
 8005d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d82:	4b6a      	ldr	r3, [pc, #424]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d84:	68db      	ldr	r3, [r3, #12]
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d018      	beq.n	8005dc0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d8e:	4b67      	ldr	r3, [pc, #412]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d90:	68db      	ldr	r3, [r3, #12]
 8005d92:	f003 0203 	and.w	r2, r3, #3
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	429a      	cmp	r2, r3
 8005d9c:	d10d      	bne.n	8005dba <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
       ||
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d009      	beq.n	8005dba <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005da6:	4b61      	ldr	r3, [pc, #388]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	091b      	lsrs	r3, r3, #4
 8005dac:	f003 0307 	and.w	r3, r3, #7
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	685b      	ldr	r3, [r3, #4]
       ||
 8005db6:	429a      	cmp	r2, r3
 8005db8:	d047      	beq.n	8005e4a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	73fb      	strb	r3, [r7, #15]
 8005dbe:	e044      	b.n	8005e4a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d018      	beq.n	8005dfa <RCCEx_PLLSAI2_Config+0x86>
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	d825      	bhi.n	8005e18 <RCCEx_PLLSAI2_Config+0xa4>
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d002      	beq.n	8005dd6 <RCCEx_PLLSAI2_Config+0x62>
 8005dd0:	2b02      	cmp	r3, #2
 8005dd2:	d009      	beq.n	8005de8 <RCCEx_PLLSAI2_Config+0x74>
 8005dd4:	e020      	b.n	8005e18 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dd6:	4b55      	ldr	r3, [pc, #340]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f003 0302 	and.w	r3, r3, #2
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d11d      	bne.n	8005e1e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005de2:	2301      	movs	r3, #1
 8005de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de6:	e01a      	b.n	8005e1e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005de8:	4b50      	ldr	r3, [pc, #320]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d116      	bne.n	8005e22 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005df4:	2301      	movs	r3, #1
 8005df6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df8:	e013      	b.n	8005e22 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005dfa:	4b4c      	ldr	r3, [pc, #304]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d10f      	bne.n	8005e26 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e06:	4b49      	ldr	r3, [pc, #292]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d109      	bne.n	8005e26 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e12:	2301      	movs	r3, #1
 8005e14:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e16:	e006      	b.n	8005e26 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8005e1c:	e004      	b.n	8005e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e1e:	bf00      	nop
 8005e20:	e002      	b.n	8005e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e22:	bf00      	nop
 8005e24:	e000      	b.n	8005e28 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e26:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10d      	bne.n	8005e4a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e2e:	4b3f      	ldr	r3, [pc, #252]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e30:	68db      	ldr	r3, [r3, #12]
 8005e32:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6819      	ldr	r1, [r3, #0]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	685b      	ldr	r3, [r3, #4]
 8005e3e:	3b01      	subs	r3, #1
 8005e40:	011b      	lsls	r3, r3, #4
 8005e42:	430b      	orrs	r3, r1
 8005e44:	4939      	ldr	r1, [pc, #228]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e46:	4313      	orrs	r3, r2
 8005e48:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d167      	bne.n	8005f20 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e50:	4b36      	ldr	r3, [pc, #216]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a35      	ldr	r2, [pc, #212]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e5c:	f7fc f9b6 	bl	80021cc <HAL_GetTick>
 8005e60:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e62:	e009      	b.n	8005e78 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e64:	f7fc f9b2 	bl	80021cc <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68bb      	ldr	r3, [r7, #8]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	2b02      	cmp	r3, #2
 8005e70:	d902      	bls.n	8005e78 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e72:	2303      	movs	r3, #3
 8005e74:	73fb      	strb	r3, [r7, #15]
        break;
 8005e76:	e005      	b.n	8005e84 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e78:	4b2c      	ldr	r3, [pc, #176]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d1ef      	bne.n	8005e64 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e84:	7bfb      	ldrb	r3, [r7, #15]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d14a      	bne.n	8005f20 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d111      	bne.n	8005eb4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e90:	4b26      	ldr	r3, [pc, #152]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e92:	695b      	ldr	r3, [r3, #20]
 8005e94:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005e98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	6892      	ldr	r2, [r2, #8]
 8005ea0:	0211      	lsls	r1, r2, #8
 8005ea2:	687a      	ldr	r2, [r7, #4]
 8005ea4:	68d2      	ldr	r2, [r2, #12]
 8005ea6:	0912      	lsrs	r2, r2, #4
 8005ea8:	0452      	lsls	r2, r2, #17
 8005eaa:	430a      	orrs	r2, r1
 8005eac:	491f      	ldr	r1, [pc, #124]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	614b      	str	r3, [r1, #20]
 8005eb2:	e011      	b.n	8005ed8 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005eb4:	4b1d      	ldr	r3, [pc, #116]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb6:	695b      	ldr	r3, [r3, #20]
 8005eb8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005ebc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005ec0:	687a      	ldr	r2, [r7, #4]
 8005ec2:	6892      	ldr	r2, [r2, #8]
 8005ec4:	0211      	lsls	r1, r2, #8
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6912      	ldr	r2, [r2, #16]
 8005eca:	0852      	lsrs	r2, r2, #1
 8005ecc:	3a01      	subs	r2, #1
 8005ece:	0652      	lsls	r2, r2, #25
 8005ed0:	430a      	orrs	r2, r1
 8005ed2:	4916      	ldr	r1, [pc, #88]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed4:	4313      	orrs	r3, r2
 8005ed6:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ed8:	4b14      	ldr	r3, [pc, #80]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	4a13      	ldr	r2, [pc, #76]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ede:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ee2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee4:	f7fc f972 	bl	80021cc <HAL_GetTick>
 8005ee8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005eea:	e009      	b.n	8005f00 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005eec:	f7fc f96e 	bl	80021cc <HAL_GetTick>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	68bb      	ldr	r3, [r7, #8]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b02      	cmp	r3, #2
 8005ef8:	d902      	bls.n	8005f00 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005efa:	2303      	movs	r3, #3
 8005efc:	73fb      	strb	r3, [r7, #15]
          break;
 8005efe:	e005      	b.n	8005f0c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005f00:	4b0a      	ldr	r3, [pc, #40]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d0ef      	beq.n	8005eec <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d106      	bne.n	8005f20 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f12:	4b06      	ldr	r3, [pc, #24]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f14:	695a      	ldr	r2, [r3, #20]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	695b      	ldr	r3, [r3, #20]
 8005f1a:	4904      	ldr	r1, [pc, #16]	; (8005f2c <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f1c:	4313      	orrs	r3, r2
 8005f1e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
 8005f2a:	bf00      	nop
 8005f2c:	40021000 	.word	0x40021000

08005f30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e049      	b.n	8005fd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f48:	b2db      	uxtb	r3, r3
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d106      	bne.n	8005f5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f841 	bl	8005fde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2202      	movs	r2, #2
 8005f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681a      	ldr	r2, [r3, #0]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	3304      	adds	r3, #4
 8005f6c:	4619      	mov	r1, r3
 8005f6e:	4610      	mov	r0, r2
 8005f70:	f000 f9f8 	bl	8006364 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2201      	movs	r2, #1
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fd4:	2300      	movs	r3, #0
}
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
	...

08005ff4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b085      	sub	sp, #20
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006002:	b2db      	uxtb	r3, r3
 8006004:	2b01      	cmp	r3, #1
 8006006:	d001      	beq.n	800600c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006008:	2301      	movs	r3, #1
 800600a:	e04f      	b.n	80060ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2202      	movs	r2, #2
 8006010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	68da      	ldr	r2, [r3, #12]
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f042 0201 	orr.w	r2, r2, #1
 8006022:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	4a23      	ldr	r2, [pc, #140]	; (80060b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800602a:	4293      	cmp	r3, r2
 800602c:	d01d      	beq.n	800606a <HAL_TIM_Base_Start_IT+0x76>
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006036:	d018      	beq.n	800606a <HAL_TIM_Base_Start_IT+0x76>
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	4a1f      	ldr	r2, [pc, #124]	; (80060bc <HAL_TIM_Base_Start_IT+0xc8>)
 800603e:	4293      	cmp	r3, r2
 8006040:	d013      	beq.n	800606a <HAL_TIM_Base_Start_IT+0x76>
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a1e      	ldr	r2, [pc, #120]	; (80060c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006048:	4293      	cmp	r3, r2
 800604a:	d00e      	beq.n	800606a <HAL_TIM_Base_Start_IT+0x76>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	4a1c      	ldr	r2, [pc, #112]	; (80060c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006052:	4293      	cmp	r3, r2
 8006054:	d009      	beq.n	800606a <HAL_TIM_Base_Start_IT+0x76>
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	4a1b      	ldr	r2, [pc, #108]	; (80060c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d004      	beq.n	800606a <HAL_TIM_Base_Start_IT+0x76>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	4a19      	ldr	r2, [pc, #100]	; (80060cc <HAL_TIM_Base_Start_IT+0xd8>)
 8006066:	4293      	cmp	r3, r2
 8006068:	d115      	bne.n	8006096 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	689a      	ldr	r2, [r3, #8]
 8006070:	4b17      	ldr	r3, [pc, #92]	; (80060d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006072:	4013      	ands	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2b06      	cmp	r3, #6
 800607a:	d015      	beq.n	80060a8 <HAL_TIM_Base_Start_IT+0xb4>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006082:	d011      	beq.n	80060a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f042 0201 	orr.w	r2, r2, #1
 8006092:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006094:	e008      	b.n	80060a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	681a      	ldr	r2, [r3, #0]
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f042 0201 	orr.w	r2, r2, #1
 80060a4:	601a      	str	r2, [r3, #0]
 80060a6:	e000      	b.n	80060aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060aa:	2300      	movs	r3, #0
}
 80060ac:	4618      	mov	r0, r3
 80060ae:	3714      	adds	r7, #20
 80060b0:	46bd      	mov	sp, r7
 80060b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b6:	4770      	bx	lr
 80060b8:	40012c00 	.word	0x40012c00
 80060bc:	40000400 	.word	0x40000400
 80060c0:	40000800 	.word	0x40000800
 80060c4:	40000c00 	.word	0x40000c00
 80060c8:	40013400 	.word	0x40013400
 80060cc:	40014000 	.word	0x40014000
 80060d0:	00010007 	.word	0x00010007

080060d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b082      	sub	sp, #8
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	f003 0302 	and.w	r3, r3, #2
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d122      	bne.n	8006130 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	f003 0302 	and.w	r3, r3, #2
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d11b      	bne.n	8006130 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f06f 0202 	mvn.w	r2, #2
 8006100:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2201      	movs	r2, #1
 8006106:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	699b      	ldr	r3, [r3, #24]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	2b00      	cmp	r3, #0
 8006114:	d003      	beq.n	800611e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006116:	6878      	ldr	r0, [r7, #4]
 8006118:	f000 f905 	bl	8006326 <HAL_TIM_IC_CaptureCallback>
 800611c:	e005      	b.n	800612a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f000 f8f7 	bl	8006312 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006124:	6878      	ldr	r0, [r7, #4]
 8006126:	f000 f908 	bl	800633a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2200      	movs	r2, #0
 800612e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	691b      	ldr	r3, [r3, #16]
 8006136:	f003 0304 	and.w	r3, r3, #4
 800613a:	2b04      	cmp	r3, #4
 800613c:	d122      	bne.n	8006184 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	68db      	ldr	r3, [r3, #12]
 8006144:	f003 0304 	and.w	r3, r3, #4
 8006148:	2b04      	cmp	r3, #4
 800614a:	d11b      	bne.n	8006184 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	f06f 0204 	mvn.w	r2, #4
 8006154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2202      	movs	r2, #2
 800615a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699b      	ldr	r3, [r3, #24]
 8006162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006166:	2b00      	cmp	r3, #0
 8006168:	d003      	beq.n	8006172 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f8db 	bl	8006326 <HAL_TIM_IC_CaptureCallback>
 8006170:	e005      	b.n	800617e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006172:	6878      	ldr	r0, [r7, #4]
 8006174:	f000 f8cd 	bl	8006312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	f000 f8de 	bl	800633a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2200      	movs	r2, #0
 8006182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	691b      	ldr	r3, [r3, #16]
 800618a:	f003 0308 	and.w	r3, r3, #8
 800618e:	2b08      	cmp	r3, #8
 8006190:	d122      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	f003 0308 	and.w	r3, r3, #8
 800619c:	2b08      	cmp	r3, #8
 800619e:	d11b      	bne.n	80061d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f06f 0208 	mvn.w	r2, #8
 80061a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2204      	movs	r2, #4
 80061ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	69db      	ldr	r3, [r3, #28]
 80061b6:	f003 0303 	and.w	r3, r3, #3
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d003      	beq.n	80061c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 f8b1 	bl	8006326 <HAL_TIM_IC_CaptureCallback>
 80061c4:	e005      	b.n	80061d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f8a3 	bl	8006312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061cc:	6878      	ldr	r0, [r7, #4]
 80061ce:	f000 f8b4 	bl	800633a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	f003 0310 	and.w	r3, r3, #16
 80061e2:	2b10      	cmp	r3, #16
 80061e4:	d122      	bne.n	800622c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	68db      	ldr	r3, [r3, #12]
 80061ec:	f003 0310 	and.w	r3, r3, #16
 80061f0:	2b10      	cmp	r3, #16
 80061f2:	d11b      	bne.n	800622c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f06f 0210 	mvn.w	r2, #16
 80061fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2208      	movs	r2, #8
 8006202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	69db      	ldr	r3, [r3, #28]
 800620a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800620e:	2b00      	cmp	r3, #0
 8006210:	d003      	beq.n	800621a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006212:	6878      	ldr	r0, [r7, #4]
 8006214:	f000 f887 	bl	8006326 <HAL_TIM_IC_CaptureCallback>
 8006218:	e005      	b.n	8006226 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f000 f879 	bl	8006312 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006220:	6878      	ldr	r0, [r7, #4]
 8006222:	f000 f88a 	bl	800633a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0301 	and.w	r3, r3, #1
 8006236:	2b01      	cmp	r3, #1
 8006238:	d10e      	bne.n	8006258 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68db      	ldr	r3, [r3, #12]
 8006240:	f003 0301 	and.w	r3, r3, #1
 8006244:	2b01      	cmp	r3, #1
 8006246:	d107      	bne.n	8006258 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f06f 0201 	mvn.w	r2, #1
 8006250:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7fb fa5a 	bl	800170c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006262:	2b80      	cmp	r3, #128	; 0x80
 8006264:	d10e      	bne.n	8006284 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006270:	2b80      	cmp	r3, #128	; 0x80
 8006272:	d107      	bne.n	8006284 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800627c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f000 f914 	bl	80064ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	691b      	ldr	r3, [r3, #16]
 800628a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800628e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006292:	d10e      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	68db      	ldr	r3, [r3, #12]
 800629a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800629e:	2b80      	cmp	r3, #128	; 0x80
 80062a0:	d107      	bne.n	80062b2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80062aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062ac:	6878      	ldr	r0, [r7, #4]
 80062ae:	f000 f907 	bl	80064c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d10e      	bne.n	80062de <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062ca:	2b40      	cmp	r3, #64	; 0x40
 80062cc:	d107      	bne.n	80062de <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80062d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d8:	6878      	ldr	r0, [r7, #4]
 80062da:	f000 f838 	bl	800634e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f003 0320 	and.w	r3, r3, #32
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d10e      	bne.n	800630a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	f003 0320 	and.w	r3, r3, #32
 80062f6:	2b20      	cmp	r3, #32
 80062f8:	d107      	bne.n	800630a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f06f 0220 	mvn.w	r2, #32
 8006302:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f8c7 	bl	8006498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800630a:	bf00      	nop
 800630c:	3708      	adds	r7, #8
 800630e:	46bd      	mov	sp, r7
 8006310:	bd80      	pop	{r7, pc}

08006312 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006312:	b480      	push	{r7}
 8006314:	b083      	sub	sp, #12
 8006316:	af00      	add	r7, sp, #0
 8006318:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800631a:	bf00      	nop
 800631c:	370c      	adds	r7, #12
 800631e:	46bd      	mov	sp, r7
 8006320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006324:	4770      	bx	lr

08006326 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006326:	b480      	push	{r7}
 8006328:	b083      	sub	sp, #12
 800632a:	af00      	add	r7, sp, #0
 800632c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800632e:	bf00      	nop
 8006330:	370c      	adds	r7, #12
 8006332:	46bd      	mov	sp, r7
 8006334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006338:	4770      	bx	lr

0800633a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800633a:	b480      	push	{r7}
 800633c:	b083      	sub	sp, #12
 800633e:	af00      	add	r7, sp, #0
 8006340:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006342:	bf00      	nop
 8006344:	370c      	adds	r7, #12
 8006346:	46bd      	mov	sp, r7
 8006348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634c:	4770      	bx	lr

0800634e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800634e:	b480      	push	{r7}
 8006350:	b083      	sub	sp, #12
 8006352:	af00      	add	r7, sp, #0
 8006354:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006356:	bf00      	nop
 8006358:	370c      	adds	r7, #12
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
	...

08006364 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	4a40      	ldr	r2, [pc, #256]	; (8006478 <TIM_Base_SetConfig+0x114>)
 8006378:	4293      	cmp	r3, r2
 800637a:	d013      	beq.n	80063a4 <TIM_Base_SetConfig+0x40>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006382:	d00f      	beq.n	80063a4 <TIM_Base_SetConfig+0x40>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a3d      	ldr	r2, [pc, #244]	; (800647c <TIM_Base_SetConfig+0x118>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d00b      	beq.n	80063a4 <TIM_Base_SetConfig+0x40>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	4a3c      	ldr	r2, [pc, #240]	; (8006480 <TIM_Base_SetConfig+0x11c>)
 8006390:	4293      	cmp	r3, r2
 8006392:	d007      	beq.n	80063a4 <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3b      	ldr	r2, [pc, #236]	; (8006484 <TIM_Base_SetConfig+0x120>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d003      	beq.n	80063a4 <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a3a      	ldr	r2, [pc, #232]	; (8006488 <TIM_Base_SetConfig+0x124>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d108      	bne.n	80063b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	68fa      	ldr	r2, [r7, #12]
 80063b2:	4313      	orrs	r3, r2
 80063b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	4a2f      	ldr	r2, [pc, #188]	; (8006478 <TIM_Base_SetConfig+0x114>)
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d01f      	beq.n	80063fe <TIM_Base_SetConfig+0x9a>
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063c4:	d01b      	beq.n	80063fe <TIM_Base_SetConfig+0x9a>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a2c      	ldr	r2, [pc, #176]	; (800647c <TIM_Base_SetConfig+0x118>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d017      	beq.n	80063fe <TIM_Base_SetConfig+0x9a>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	4a2b      	ldr	r2, [pc, #172]	; (8006480 <TIM_Base_SetConfig+0x11c>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d013      	beq.n	80063fe <TIM_Base_SetConfig+0x9a>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2a      	ldr	r2, [pc, #168]	; (8006484 <TIM_Base_SetConfig+0x120>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d00f      	beq.n	80063fe <TIM_Base_SetConfig+0x9a>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a29      	ldr	r2, [pc, #164]	; (8006488 <TIM_Base_SetConfig+0x124>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d00b      	beq.n	80063fe <TIM_Base_SetConfig+0x9a>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a28      	ldr	r2, [pc, #160]	; (800648c <TIM_Base_SetConfig+0x128>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d007      	beq.n	80063fe <TIM_Base_SetConfig+0x9a>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a27      	ldr	r2, [pc, #156]	; (8006490 <TIM_Base_SetConfig+0x12c>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d003      	beq.n	80063fe <TIM_Base_SetConfig+0x9a>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a26      	ldr	r2, [pc, #152]	; (8006494 <TIM_Base_SetConfig+0x130>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d108      	bne.n	8006410 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006404:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	68fa      	ldr	r2, [r7, #12]
 800640c:	4313      	orrs	r3, r2
 800640e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	695b      	ldr	r3, [r3, #20]
 800641a:	4313      	orrs	r3, r2
 800641c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68fa      	ldr	r2, [r7, #12]
 8006422:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	689a      	ldr	r2, [r3, #8]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	4a10      	ldr	r2, [pc, #64]	; (8006478 <TIM_Base_SetConfig+0x114>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d00f      	beq.n	800645c <TIM_Base_SetConfig+0xf8>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	4a12      	ldr	r2, [pc, #72]	; (8006488 <TIM_Base_SetConfig+0x124>)
 8006440:	4293      	cmp	r3, r2
 8006442:	d00b      	beq.n	800645c <TIM_Base_SetConfig+0xf8>
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	4a11      	ldr	r2, [pc, #68]	; (800648c <TIM_Base_SetConfig+0x128>)
 8006448:	4293      	cmp	r3, r2
 800644a:	d007      	beq.n	800645c <TIM_Base_SetConfig+0xf8>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	4a10      	ldr	r2, [pc, #64]	; (8006490 <TIM_Base_SetConfig+0x12c>)
 8006450:	4293      	cmp	r3, r2
 8006452:	d003      	beq.n	800645c <TIM_Base_SetConfig+0xf8>
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	4a0f      	ldr	r2, [pc, #60]	; (8006494 <TIM_Base_SetConfig+0x130>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d103      	bne.n	8006464 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	691a      	ldr	r2, [r3, #16]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2201      	movs	r2, #1
 8006468:	615a      	str	r2, [r3, #20]
}
 800646a:	bf00      	nop
 800646c:	3714      	adds	r7, #20
 800646e:	46bd      	mov	sp, r7
 8006470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006474:	4770      	bx	lr
 8006476:	bf00      	nop
 8006478:	40012c00 	.word	0x40012c00
 800647c:	40000400 	.word	0x40000400
 8006480:	40000800 	.word	0x40000800
 8006484:	40000c00 	.word	0x40000c00
 8006488:	40013400 	.word	0x40013400
 800648c:	40014000 	.word	0x40014000
 8006490:	40014400 	.word	0x40014400
 8006494:	40014800 	.word	0x40014800

08006498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b083      	sub	sp, #12
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064c8:	bf00      	nop
 80064ca:	370c      	adds	r7, #12
 80064cc:	46bd      	mov	sp, r7
 80064ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d2:	4770      	bx	lr

080064d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
 80064da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d101      	bne.n	80064e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e040      	b.n	8006568 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d106      	bne.n	80064fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7fb fcd0 	bl	8001e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2224      	movs	r2, #36	; 0x24
 8006500:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f022 0201 	bic.w	r2, r2, #1
 8006510:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f8c0 	bl	8006698 <UART_SetConfig>
 8006518:	4603      	mov	r3, r0
 800651a:	2b01      	cmp	r3, #1
 800651c:	d101      	bne.n	8006522 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800651e:	2301      	movs	r3, #1
 8006520:	e022      	b.n	8006568 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006526:	2b00      	cmp	r3, #0
 8006528:	d002      	beq.n	8006530 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f000 fb6c 	bl	8006c08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	685a      	ldr	r2, [r3, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800653e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	689a      	ldr	r2, [r3, #8]
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800654e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	f000 fbf3 	bl	8006d4c <UART_CheckIdleState>
 8006566:	4603      	mov	r3, r0
}
 8006568:	4618      	mov	r0, r3
 800656a:	3708      	adds	r7, #8
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	b08a      	sub	sp, #40	; 0x28
 8006574:	af02      	add	r7, sp, #8
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	60b9      	str	r1, [r7, #8]
 800657a:	603b      	str	r3, [r7, #0]
 800657c:	4613      	mov	r3, r2
 800657e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006584:	2b20      	cmp	r3, #32
 8006586:	f040 8082 	bne.w	800668e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800658a:	68bb      	ldr	r3, [r7, #8]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d002      	beq.n	8006596 <HAL_UART_Transmit+0x26>
 8006590:	88fb      	ldrh	r3, [r7, #6]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d101      	bne.n	800659a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e07a      	b.n	8006690 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_UART_Transmit+0x38>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e073      	b.n	8006690 <HAL_UART_Transmit+0x120>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2200      	movs	r2, #0
 80065b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2221      	movs	r2, #33	; 0x21
 80065bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065be:	f7fb fe05 	bl	80021cc <HAL_GetTick>
 80065c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	88fa      	ldrh	r2, [r7, #6]
 80065c8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	88fa      	ldrh	r2, [r7, #6]
 80065d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065dc:	d108      	bne.n	80065f0 <HAL_UART_Transmit+0x80>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	691b      	ldr	r3, [r3, #16]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d104      	bne.n	80065f0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80065e6:	2300      	movs	r3, #0
 80065e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	61bb      	str	r3, [r7, #24]
 80065ee:	e003      	b.n	80065f8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80065f0:	68bb      	ldr	r3, [r7, #8]
 80065f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006600:	e02d      	b.n	800665e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	9300      	str	r3, [sp, #0]
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	2200      	movs	r2, #0
 800660a:	2180      	movs	r1, #128	; 0x80
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 fbe6 	bl	8006dde <UART_WaitOnFlagUntilTimeout>
 8006612:	4603      	mov	r3, r0
 8006614:	2b00      	cmp	r3, #0
 8006616:	d001      	beq.n	800661c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006618:	2303      	movs	r3, #3
 800661a:	e039      	b.n	8006690 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10b      	bne.n	800663a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006622:	69bb      	ldr	r3, [r7, #24]
 8006624:	881a      	ldrh	r2, [r3, #0]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800662e:	b292      	uxth	r2, r2
 8006630:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006632:	69bb      	ldr	r3, [r7, #24]
 8006634:	3302      	adds	r3, #2
 8006636:	61bb      	str	r3, [r7, #24]
 8006638:	e008      	b.n	800664c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	781a      	ldrb	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	b292      	uxth	r2, r2
 8006644:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	3301      	adds	r3, #1
 800664a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006652:	b29b      	uxth	r3, r3
 8006654:	3b01      	subs	r3, #1
 8006656:	b29a      	uxth	r2, r3
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006664:	b29b      	uxth	r3, r3
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1cb      	bne.n	8006602 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	9300      	str	r3, [sp, #0]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	2200      	movs	r2, #0
 8006672:	2140      	movs	r1, #64	; 0x40
 8006674:	68f8      	ldr	r0, [r7, #12]
 8006676:	f000 fbb2 	bl	8006dde <UART_WaitOnFlagUntilTimeout>
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	e005      	b.n	8006690 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2220      	movs	r2, #32
 8006688:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	e000      	b.n	8006690 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800668e:	2302      	movs	r3, #2
  }
}
 8006690:	4618      	mov	r0, r3
 8006692:	3720      	adds	r7, #32
 8006694:	46bd      	mov	sp, r7
 8006696:	bd80      	pop	{r7, pc}

08006698 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800669c:	b08a      	sub	sp, #40	; 0x28
 800669e:	af00      	add	r7, sp, #0
 80066a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80066a2:	2300      	movs	r3, #0
 80066a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	689a      	ldr	r2, [r3, #8]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	431a      	orrs	r2, r3
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	695b      	ldr	r3, [r3, #20]
 80066b6:	431a      	orrs	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	69db      	ldr	r3, [r3, #28]
 80066bc:	4313      	orrs	r3, r2
 80066be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	4ba4      	ldr	r3, [pc, #656]	; (8006958 <UART_SetConfig+0x2c0>)
 80066c8:	4013      	ands	r3, r2
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	6812      	ldr	r2, [r2, #0]
 80066ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80066d0:	430b      	orrs	r3, r1
 80066d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	685b      	ldr	r3, [r3, #4]
 80066da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	68da      	ldr	r2, [r3, #12]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	699b      	ldr	r3, [r3, #24]
 80066ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a99      	ldr	r2, [pc, #612]	; (800695c <UART_SetConfig+0x2c4>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d004      	beq.n	8006704 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006700:	4313      	orrs	r3, r2
 8006702:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006714:	430a      	orrs	r2, r1
 8006716:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a90      	ldr	r2, [pc, #576]	; (8006960 <UART_SetConfig+0x2c8>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d126      	bne.n	8006770 <UART_SetConfig+0xd8>
 8006722:	4b90      	ldr	r3, [pc, #576]	; (8006964 <UART_SetConfig+0x2cc>)
 8006724:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006728:	f003 0303 	and.w	r3, r3, #3
 800672c:	2b03      	cmp	r3, #3
 800672e:	d81b      	bhi.n	8006768 <UART_SetConfig+0xd0>
 8006730:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <UART_SetConfig+0xa0>)
 8006732:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006736:	bf00      	nop
 8006738:	08006749 	.word	0x08006749
 800673c:	08006759 	.word	0x08006759
 8006740:	08006751 	.word	0x08006751
 8006744:	08006761 	.word	0x08006761
 8006748:	2301      	movs	r3, #1
 800674a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800674e:	e116      	b.n	800697e <UART_SetConfig+0x2e6>
 8006750:	2302      	movs	r3, #2
 8006752:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006756:	e112      	b.n	800697e <UART_SetConfig+0x2e6>
 8006758:	2304      	movs	r3, #4
 800675a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800675e:	e10e      	b.n	800697e <UART_SetConfig+0x2e6>
 8006760:	2308      	movs	r3, #8
 8006762:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006766:	e10a      	b.n	800697e <UART_SetConfig+0x2e6>
 8006768:	2310      	movs	r3, #16
 800676a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800676e:	e106      	b.n	800697e <UART_SetConfig+0x2e6>
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	4a7c      	ldr	r2, [pc, #496]	; (8006968 <UART_SetConfig+0x2d0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d138      	bne.n	80067ec <UART_SetConfig+0x154>
 800677a:	4b7a      	ldr	r3, [pc, #488]	; (8006964 <UART_SetConfig+0x2cc>)
 800677c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006780:	f003 030c 	and.w	r3, r3, #12
 8006784:	2b0c      	cmp	r3, #12
 8006786:	d82d      	bhi.n	80067e4 <UART_SetConfig+0x14c>
 8006788:	a201      	add	r2, pc, #4	; (adr r2, 8006790 <UART_SetConfig+0xf8>)
 800678a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678e:	bf00      	nop
 8006790:	080067c5 	.word	0x080067c5
 8006794:	080067e5 	.word	0x080067e5
 8006798:	080067e5 	.word	0x080067e5
 800679c:	080067e5 	.word	0x080067e5
 80067a0:	080067d5 	.word	0x080067d5
 80067a4:	080067e5 	.word	0x080067e5
 80067a8:	080067e5 	.word	0x080067e5
 80067ac:	080067e5 	.word	0x080067e5
 80067b0:	080067cd 	.word	0x080067cd
 80067b4:	080067e5 	.word	0x080067e5
 80067b8:	080067e5 	.word	0x080067e5
 80067bc:	080067e5 	.word	0x080067e5
 80067c0:	080067dd 	.word	0x080067dd
 80067c4:	2300      	movs	r3, #0
 80067c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ca:	e0d8      	b.n	800697e <UART_SetConfig+0x2e6>
 80067cc:	2302      	movs	r3, #2
 80067ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067d2:	e0d4      	b.n	800697e <UART_SetConfig+0x2e6>
 80067d4:	2304      	movs	r3, #4
 80067d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067da:	e0d0      	b.n	800697e <UART_SetConfig+0x2e6>
 80067dc:	2308      	movs	r3, #8
 80067de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067e2:	e0cc      	b.n	800697e <UART_SetConfig+0x2e6>
 80067e4:	2310      	movs	r3, #16
 80067e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80067ea:	e0c8      	b.n	800697e <UART_SetConfig+0x2e6>
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a5e      	ldr	r2, [pc, #376]	; (800696c <UART_SetConfig+0x2d4>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d125      	bne.n	8006842 <UART_SetConfig+0x1aa>
 80067f6:	4b5b      	ldr	r3, [pc, #364]	; (8006964 <UART_SetConfig+0x2cc>)
 80067f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006800:	2b30      	cmp	r3, #48	; 0x30
 8006802:	d016      	beq.n	8006832 <UART_SetConfig+0x19a>
 8006804:	2b30      	cmp	r3, #48	; 0x30
 8006806:	d818      	bhi.n	800683a <UART_SetConfig+0x1a2>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d00a      	beq.n	8006822 <UART_SetConfig+0x18a>
 800680c:	2b20      	cmp	r3, #32
 800680e:	d814      	bhi.n	800683a <UART_SetConfig+0x1a2>
 8006810:	2b00      	cmp	r3, #0
 8006812:	d002      	beq.n	800681a <UART_SetConfig+0x182>
 8006814:	2b10      	cmp	r3, #16
 8006816:	d008      	beq.n	800682a <UART_SetConfig+0x192>
 8006818:	e00f      	b.n	800683a <UART_SetConfig+0x1a2>
 800681a:	2300      	movs	r3, #0
 800681c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006820:	e0ad      	b.n	800697e <UART_SetConfig+0x2e6>
 8006822:	2302      	movs	r3, #2
 8006824:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006828:	e0a9      	b.n	800697e <UART_SetConfig+0x2e6>
 800682a:	2304      	movs	r3, #4
 800682c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006830:	e0a5      	b.n	800697e <UART_SetConfig+0x2e6>
 8006832:	2308      	movs	r3, #8
 8006834:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006838:	e0a1      	b.n	800697e <UART_SetConfig+0x2e6>
 800683a:	2310      	movs	r3, #16
 800683c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006840:	e09d      	b.n	800697e <UART_SetConfig+0x2e6>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a4a      	ldr	r2, [pc, #296]	; (8006970 <UART_SetConfig+0x2d8>)
 8006848:	4293      	cmp	r3, r2
 800684a:	d125      	bne.n	8006898 <UART_SetConfig+0x200>
 800684c:	4b45      	ldr	r3, [pc, #276]	; (8006964 <UART_SetConfig+0x2cc>)
 800684e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006852:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006856:	2bc0      	cmp	r3, #192	; 0xc0
 8006858:	d016      	beq.n	8006888 <UART_SetConfig+0x1f0>
 800685a:	2bc0      	cmp	r3, #192	; 0xc0
 800685c:	d818      	bhi.n	8006890 <UART_SetConfig+0x1f8>
 800685e:	2b80      	cmp	r3, #128	; 0x80
 8006860:	d00a      	beq.n	8006878 <UART_SetConfig+0x1e0>
 8006862:	2b80      	cmp	r3, #128	; 0x80
 8006864:	d814      	bhi.n	8006890 <UART_SetConfig+0x1f8>
 8006866:	2b00      	cmp	r3, #0
 8006868:	d002      	beq.n	8006870 <UART_SetConfig+0x1d8>
 800686a:	2b40      	cmp	r3, #64	; 0x40
 800686c:	d008      	beq.n	8006880 <UART_SetConfig+0x1e8>
 800686e:	e00f      	b.n	8006890 <UART_SetConfig+0x1f8>
 8006870:	2300      	movs	r3, #0
 8006872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006876:	e082      	b.n	800697e <UART_SetConfig+0x2e6>
 8006878:	2302      	movs	r3, #2
 800687a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800687e:	e07e      	b.n	800697e <UART_SetConfig+0x2e6>
 8006880:	2304      	movs	r3, #4
 8006882:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006886:	e07a      	b.n	800697e <UART_SetConfig+0x2e6>
 8006888:	2308      	movs	r3, #8
 800688a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800688e:	e076      	b.n	800697e <UART_SetConfig+0x2e6>
 8006890:	2310      	movs	r3, #16
 8006892:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006896:	e072      	b.n	800697e <UART_SetConfig+0x2e6>
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	4a35      	ldr	r2, [pc, #212]	; (8006974 <UART_SetConfig+0x2dc>)
 800689e:	4293      	cmp	r3, r2
 80068a0:	d12a      	bne.n	80068f8 <UART_SetConfig+0x260>
 80068a2:	4b30      	ldr	r3, [pc, #192]	; (8006964 <UART_SetConfig+0x2cc>)
 80068a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068b0:	d01a      	beq.n	80068e8 <UART_SetConfig+0x250>
 80068b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068b6:	d81b      	bhi.n	80068f0 <UART_SetConfig+0x258>
 80068b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068bc:	d00c      	beq.n	80068d8 <UART_SetConfig+0x240>
 80068be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068c2:	d815      	bhi.n	80068f0 <UART_SetConfig+0x258>
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d003      	beq.n	80068d0 <UART_SetConfig+0x238>
 80068c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80068cc:	d008      	beq.n	80068e0 <UART_SetConfig+0x248>
 80068ce:	e00f      	b.n	80068f0 <UART_SetConfig+0x258>
 80068d0:	2300      	movs	r3, #0
 80068d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068d6:	e052      	b.n	800697e <UART_SetConfig+0x2e6>
 80068d8:	2302      	movs	r3, #2
 80068da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068de:	e04e      	b.n	800697e <UART_SetConfig+0x2e6>
 80068e0:	2304      	movs	r3, #4
 80068e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068e6:	e04a      	b.n	800697e <UART_SetConfig+0x2e6>
 80068e8:	2308      	movs	r3, #8
 80068ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068ee:	e046      	b.n	800697e <UART_SetConfig+0x2e6>
 80068f0:	2310      	movs	r3, #16
 80068f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80068f6:	e042      	b.n	800697e <UART_SetConfig+0x2e6>
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	4a17      	ldr	r2, [pc, #92]	; (800695c <UART_SetConfig+0x2c4>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d13a      	bne.n	8006978 <UART_SetConfig+0x2e0>
 8006902:	4b18      	ldr	r3, [pc, #96]	; (8006964 <UART_SetConfig+0x2cc>)
 8006904:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006908:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800690c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006910:	d01a      	beq.n	8006948 <UART_SetConfig+0x2b0>
 8006912:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006916:	d81b      	bhi.n	8006950 <UART_SetConfig+0x2b8>
 8006918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800691c:	d00c      	beq.n	8006938 <UART_SetConfig+0x2a0>
 800691e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006922:	d815      	bhi.n	8006950 <UART_SetConfig+0x2b8>
 8006924:	2b00      	cmp	r3, #0
 8006926:	d003      	beq.n	8006930 <UART_SetConfig+0x298>
 8006928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800692c:	d008      	beq.n	8006940 <UART_SetConfig+0x2a8>
 800692e:	e00f      	b.n	8006950 <UART_SetConfig+0x2b8>
 8006930:	2300      	movs	r3, #0
 8006932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006936:	e022      	b.n	800697e <UART_SetConfig+0x2e6>
 8006938:	2302      	movs	r3, #2
 800693a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800693e:	e01e      	b.n	800697e <UART_SetConfig+0x2e6>
 8006940:	2304      	movs	r3, #4
 8006942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006946:	e01a      	b.n	800697e <UART_SetConfig+0x2e6>
 8006948:	2308      	movs	r3, #8
 800694a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800694e:	e016      	b.n	800697e <UART_SetConfig+0x2e6>
 8006950:	2310      	movs	r3, #16
 8006952:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8006956:	e012      	b.n	800697e <UART_SetConfig+0x2e6>
 8006958:	efff69f3 	.word	0xefff69f3
 800695c:	40008000 	.word	0x40008000
 8006960:	40013800 	.word	0x40013800
 8006964:	40021000 	.word	0x40021000
 8006968:	40004400 	.word	0x40004400
 800696c:	40004800 	.word	0x40004800
 8006970:	40004c00 	.word	0x40004c00
 8006974:	40005000 	.word	0x40005000
 8006978:	2310      	movs	r3, #16
 800697a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	4a9f      	ldr	r2, [pc, #636]	; (8006c00 <UART_SetConfig+0x568>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d17a      	bne.n	8006a7e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800698c:	2b08      	cmp	r3, #8
 800698e:	d824      	bhi.n	80069da <UART_SetConfig+0x342>
 8006990:	a201      	add	r2, pc, #4	; (adr r2, 8006998 <UART_SetConfig+0x300>)
 8006992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006996:	bf00      	nop
 8006998:	080069bd 	.word	0x080069bd
 800699c:	080069db 	.word	0x080069db
 80069a0:	080069c5 	.word	0x080069c5
 80069a4:	080069db 	.word	0x080069db
 80069a8:	080069cb 	.word	0x080069cb
 80069ac:	080069db 	.word	0x080069db
 80069b0:	080069db 	.word	0x080069db
 80069b4:	080069db 	.word	0x080069db
 80069b8:	080069d3 	.word	0x080069d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069bc:	f7fe fd3e 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 80069c0:	61f8      	str	r0, [r7, #28]
        break;
 80069c2:	e010      	b.n	80069e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c4:	4b8f      	ldr	r3, [pc, #572]	; (8006c04 <UART_SetConfig+0x56c>)
 80069c6:	61fb      	str	r3, [r7, #28]
        break;
 80069c8:	e00d      	b.n	80069e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069ca:	f7fe fc9f 	bl	800530c <HAL_RCC_GetSysClockFreq>
 80069ce:	61f8      	str	r0, [r7, #28]
        break;
 80069d0:	e009      	b.n	80069e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80069d6:	61fb      	str	r3, [r7, #28]
        break;
 80069d8:	e005      	b.n	80069e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80069e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f000 80fb 	beq.w	8006be4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	4613      	mov	r3, r2
 80069f4:	005b      	lsls	r3, r3, #1
 80069f6:	4413      	add	r3, r2
 80069f8:	69fa      	ldr	r2, [r7, #28]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d305      	bcc.n	8006a0a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a04:	69fa      	ldr	r2, [r7, #28]
 8006a06:	429a      	cmp	r2, r3
 8006a08:	d903      	bls.n	8006a12 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006a0a:	2301      	movs	r3, #1
 8006a0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a10:	e0e8      	b.n	8006be4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	2200      	movs	r2, #0
 8006a16:	461c      	mov	r4, r3
 8006a18:	4615      	mov	r5, r2
 8006a1a:	f04f 0200 	mov.w	r2, #0
 8006a1e:	f04f 0300 	mov.w	r3, #0
 8006a22:	022b      	lsls	r3, r5, #8
 8006a24:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a28:	0222      	lsls	r2, r4, #8
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	6849      	ldr	r1, [r1, #4]
 8006a2e:	0849      	lsrs	r1, r1, #1
 8006a30:	2000      	movs	r0, #0
 8006a32:	4688      	mov	r8, r1
 8006a34:	4681      	mov	r9, r0
 8006a36:	eb12 0a08 	adds.w	sl, r2, r8
 8006a3a:	eb43 0b09 	adc.w	fp, r3, r9
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	603b      	str	r3, [r7, #0]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a4c:	4650      	mov	r0, sl
 8006a4e:	4659      	mov	r1, fp
 8006a50:	f7fa f834 	bl	8000abc <__aeabi_uldivmod>
 8006a54:	4602      	mov	r2, r0
 8006a56:	460b      	mov	r3, r1
 8006a58:	4613      	mov	r3, r2
 8006a5a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a5c:	69bb      	ldr	r3, [r7, #24]
 8006a5e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006a62:	d308      	bcc.n	8006a76 <UART_SetConfig+0x3de>
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a6a:	d204      	bcs.n	8006a76 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	69ba      	ldr	r2, [r7, #24]
 8006a72:	60da      	str	r2, [r3, #12]
 8006a74:	e0b6      	b.n	8006be4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006a7c:	e0b2      	b.n	8006be4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	69db      	ldr	r3, [r3, #28]
 8006a82:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a86:	d15e      	bne.n	8006b46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006a8c:	2b08      	cmp	r3, #8
 8006a8e:	d828      	bhi.n	8006ae2 <UART_SetConfig+0x44a>
 8006a90:	a201      	add	r2, pc, #4	; (adr r2, 8006a98 <UART_SetConfig+0x400>)
 8006a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a96:	bf00      	nop
 8006a98:	08006abd 	.word	0x08006abd
 8006a9c:	08006ac5 	.word	0x08006ac5
 8006aa0:	08006acd 	.word	0x08006acd
 8006aa4:	08006ae3 	.word	0x08006ae3
 8006aa8:	08006ad3 	.word	0x08006ad3
 8006aac:	08006ae3 	.word	0x08006ae3
 8006ab0:	08006ae3 	.word	0x08006ae3
 8006ab4:	08006ae3 	.word	0x08006ae3
 8006ab8:	08006adb 	.word	0x08006adb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006abc:	f7fe fcbe 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006ac0:	61f8      	str	r0, [r7, #28]
        break;
 8006ac2:	e014      	b.n	8006aee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ac4:	f7fe fcd0 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8006ac8:	61f8      	str	r0, [r7, #28]
        break;
 8006aca:	e010      	b.n	8006aee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006acc:	4b4d      	ldr	r3, [pc, #308]	; (8006c04 <UART_SetConfig+0x56c>)
 8006ace:	61fb      	str	r3, [r7, #28]
        break;
 8006ad0:	e00d      	b.n	8006aee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ad2:	f7fe fc1b 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8006ad6:	61f8      	str	r0, [r7, #28]
        break;
 8006ad8:	e009      	b.n	8006aee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ada:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ade:	61fb      	str	r3, [r7, #28]
        break;
 8006ae0:	e005      	b.n	8006aee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006ae2:	2300      	movs	r3, #0
 8006ae4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
 8006ae8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006aec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aee:	69fb      	ldr	r3, [r7, #28]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d077      	beq.n	8006be4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	005a      	lsls	r2, r3, #1
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	685b      	ldr	r3, [r3, #4]
 8006afc:	085b      	lsrs	r3, r3, #1
 8006afe:	441a      	add	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	685b      	ldr	r3, [r3, #4]
 8006b04:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b0a:	69bb      	ldr	r3, [r7, #24]
 8006b0c:	2b0f      	cmp	r3, #15
 8006b0e:	d916      	bls.n	8006b3e <UART_SetConfig+0x4a6>
 8006b10:	69bb      	ldr	r3, [r7, #24]
 8006b12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b16:	d212      	bcs.n	8006b3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b18:	69bb      	ldr	r3, [r7, #24]
 8006b1a:	b29b      	uxth	r3, r3
 8006b1c:	f023 030f 	bic.w	r3, r3, #15
 8006b20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	085b      	lsrs	r3, r3, #1
 8006b26:	b29b      	uxth	r3, r3
 8006b28:	f003 0307 	and.w	r3, r3, #7
 8006b2c:	b29a      	uxth	r2, r3
 8006b2e:	8afb      	ldrh	r3, [r7, #22]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	8afa      	ldrh	r2, [r7, #22]
 8006b3a:	60da      	str	r2, [r3, #12]
 8006b3c:	e052      	b.n	8006be4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8006b44:	e04e      	b.n	8006be4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8006b4a:	2b08      	cmp	r3, #8
 8006b4c:	d827      	bhi.n	8006b9e <UART_SetConfig+0x506>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <UART_SetConfig+0x4bc>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006b79 	.word	0x08006b79
 8006b58:	08006b81 	.word	0x08006b81
 8006b5c:	08006b89 	.word	0x08006b89
 8006b60:	08006b9f 	.word	0x08006b9f
 8006b64:	08006b8f 	.word	0x08006b8f
 8006b68:	08006b9f 	.word	0x08006b9f
 8006b6c:	08006b9f 	.word	0x08006b9f
 8006b70:	08006b9f 	.word	0x08006b9f
 8006b74:	08006b97 	.word	0x08006b97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b78:	f7fe fc60 	bl	800543c <HAL_RCC_GetPCLK1Freq>
 8006b7c:	61f8      	str	r0, [r7, #28]
        break;
 8006b7e:	e014      	b.n	8006baa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b80:	f7fe fc72 	bl	8005468 <HAL_RCC_GetPCLK2Freq>
 8006b84:	61f8      	str	r0, [r7, #28]
        break;
 8006b86:	e010      	b.n	8006baa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b88:	4b1e      	ldr	r3, [pc, #120]	; (8006c04 <UART_SetConfig+0x56c>)
 8006b8a:	61fb      	str	r3, [r7, #28]
        break;
 8006b8c:	e00d      	b.n	8006baa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b8e:	f7fe fbbd 	bl	800530c <HAL_RCC_GetSysClockFreq>
 8006b92:	61f8      	str	r0, [r7, #28]
        break;
 8006b94:	e009      	b.n	8006baa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b9a:	61fb      	str	r3, [r7, #28]
        break;
 8006b9c:	e005      	b.n	8006baa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b9e:	2300      	movs	r3, #0
 8006ba0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8006ba8:	bf00      	nop
    }

    if (pclk != 0U)
 8006baa:	69fb      	ldr	r3, [r7, #28]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d019      	beq.n	8006be4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	685b      	ldr	r3, [r3, #4]
 8006bb4:	085a      	lsrs	r2, r3, #1
 8006bb6:	69fb      	ldr	r3, [r7, #28]
 8006bb8:	441a      	add	r2, r3
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	2b0f      	cmp	r3, #15
 8006bc8:	d909      	bls.n	8006bde <UART_SetConfig+0x546>
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bd0:	d205      	bcs.n	8006bde <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bd2:	69bb      	ldr	r3, [r7, #24]
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	60da      	str	r2, [r3, #12]
 8006bdc:	e002      	b.n	8006be4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bde:	2301      	movs	r3, #1
 8006be0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2200      	movs	r2, #0
 8006be8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	2200      	movs	r2, #0
 8006bee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006bf0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	3728      	adds	r7, #40	; 0x28
 8006bf8:	46bd      	mov	sp, r7
 8006bfa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bfe:	bf00      	nop
 8006c00:	40008000 	.word	0x40008000
 8006c04:	00f42400 	.word	0x00f42400

08006c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c14:	f003 0301 	and.w	r3, r3, #1
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00a      	beq.n	8006c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	685b      	ldr	r3, [r3, #4]
 8006c22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	430a      	orrs	r2, r1
 8006c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c36:	f003 0302 	and.w	r3, r3, #2
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d00a      	beq.n	8006c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	685b      	ldr	r3, [r3, #4]
 8006c44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	430a      	orrs	r2, r1
 8006c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d00a      	beq.n	8006c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	430a      	orrs	r2, r1
 8006c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c7a:	f003 0308 	and.w	r3, r3, #8
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d00a      	beq.n	8006c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	430a      	orrs	r2, r1
 8006c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9c:	f003 0310 	and.w	r3, r3, #16
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d00a      	beq.n	8006cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	430a      	orrs	r2, r1
 8006cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbe:	f003 0320 	and.w	r3, r3, #32
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d00a      	beq.n	8006cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	689b      	ldr	r3, [r3, #8]
 8006ccc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	430a      	orrs	r2, r1
 8006cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ce0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d01a      	beq.n	8006d1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	430a      	orrs	r2, r1
 8006cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006d06:	d10a      	bne.n	8006d1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	430a      	orrs	r2, r1
 8006d1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d00a      	beq.n	8006d40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	430a      	orrs	r2, r1
 8006d3e:	605a      	str	r2, [r3, #4]
  }
}
 8006d40:	bf00      	nop
 8006d42:	370c      	adds	r7, #12
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b086      	sub	sp, #24
 8006d50:	af02      	add	r7, sp, #8
 8006d52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d5c:	f7fb fa36 	bl	80021cc <HAL_GetTick>
 8006d60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0308 	and.w	r3, r3, #8
 8006d6c:	2b08      	cmp	r3, #8
 8006d6e:	d10e      	bne.n	8006d8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d74:	9300      	str	r3, [sp, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f82d 	bl	8006dde <UART_WaitOnFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e023      	b.n	8006dd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b04      	cmp	r3, #4
 8006d9a:	d10e      	bne.n	8006dba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006da0:	9300      	str	r3, [sp, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f817 	bl	8006dde <UART_WaitOnFlagUntilTimeout>
 8006db0:	4603      	mov	r3, r0
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d001      	beq.n	8006dba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006db6:	2303      	movs	r3, #3
 8006db8:	e00d      	b.n	8006dd6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2220      	movs	r2, #32
 8006dbe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	2220      	movs	r2, #32
 8006dc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2200      	movs	r2, #0
 8006dca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}

08006dde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dde:	b580      	push	{r7, lr}
 8006de0:	b09c      	sub	sp, #112	; 0x70
 8006de2:	af00      	add	r7, sp, #0
 8006de4:	60f8      	str	r0, [r7, #12]
 8006de6:	60b9      	str	r1, [r7, #8]
 8006de8:	603b      	str	r3, [r7, #0]
 8006dea:	4613      	mov	r3, r2
 8006dec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dee:	e0a5      	b.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006df2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006df6:	f000 80a1 	beq.w	8006f3c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dfa:	f7fb f9e7 	bl	80021cc <HAL_GetTick>
 8006dfe:	4602      	mov	r2, r0
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	1ad3      	subs	r3, r2, r3
 8006e04:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006e06:	429a      	cmp	r2, r3
 8006e08:	d302      	bcc.n	8006e10 <UART_WaitOnFlagUntilTimeout+0x32>
 8006e0a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d13e      	bne.n	8006e8e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e18:	e853 3f00 	ldrex	r3, [r3]
 8006e1c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006e1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e20:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e24:	667b      	str	r3, [r7, #100]	; 0x64
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	461a      	mov	r2, r3
 8006e2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e2e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e30:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e32:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e34:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e6      	bne.n	8006e10 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3308      	adds	r3, #8
 8006e48:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e54:	f023 0301 	bic.w	r3, r3, #1
 8006e58:	663b      	str	r3, [r7, #96]	; 0x60
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	3308      	adds	r3, #8
 8006e60:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e62:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e66:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e6a:	e841 2300 	strex	r3, r2, [r1]
 8006e6e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1e5      	bne.n	8006e42 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	2220      	movs	r2, #32
 8006e80:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	2200      	movs	r2, #0
 8006e86:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e8a:	2303      	movs	r3, #3
 8006e8c:	e067      	b.n	8006f5e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f003 0304 	and.w	r3, r3, #4
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d04f      	beq.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	69db      	ldr	r3, [r3, #28]
 8006ea2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eaa:	d147      	bne.n	8006f3c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006eb4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebe:	e853 3f00 	ldrex	r3, [r3]
 8006ec2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ec6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006eca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8006ed6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006edc:	e841 2300 	strex	r3, r2, [r1]
 8006ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1e6      	bne.n	8006eb6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	3308      	adds	r3, #8
 8006eee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	e853 3f00 	ldrex	r3, [r3]
 8006ef6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef8:	693b      	ldr	r3, [r7, #16]
 8006efa:	f023 0301 	bic.w	r3, r3, #1
 8006efe:	66bb      	str	r3, [r7, #104]	; 0x68
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	3308      	adds	r3, #8
 8006f06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006f08:	623a      	str	r2, [r7, #32]
 8006f0a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f0c:	69f9      	ldr	r1, [r7, #28]
 8006f0e:	6a3a      	ldr	r2, [r7, #32]
 8006f10:	e841 2300 	strex	r3, r2, [r1]
 8006f14:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f16:	69bb      	ldr	r3, [r7, #24]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e5      	bne.n	8006ee8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	2220      	movs	r2, #32
 8006f20:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	2220      	movs	r2, #32
 8006f26:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	2220      	movs	r2, #32
 8006f2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f38:	2303      	movs	r3, #3
 8006f3a:	e010      	b.n	8006f5e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	69da      	ldr	r2, [r3, #28]
 8006f42:	68bb      	ldr	r3, [r7, #8]
 8006f44:	4013      	ands	r3, r2
 8006f46:	68ba      	ldr	r2, [r7, #8]
 8006f48:	429a      	cmp	r2, r3
 8006f4a:	bf0c      	ite	eq
 8006f4c:	2301      	moveq	r3, #1
 8006f4e:	2300      	movne	r3, #0
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	461a      	mov	r2, r3
 8006f54:	79fb      	ldrb	r3, [r7, #7]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	f43f af4a 	beq.w	8006df0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3770      	adds	r7, #112	; 0x70
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
	...

08006f68 <__NVIC_SetPriority>:
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	4603      	mov	r3, r0
 8006f70:	6039      	str	r1, [r7, #0]
 8006f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	db0a      	blt.n	8006f92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	b2da      	uxtb	r2, r3
 8006f80:	490c      	ldr	r1, [pc, #48]	; (8006fb4 <__NVIC_SetPriority+0x4c>)
 8006f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f86:	0112      	lsls	r2, r2, #4
 8006f88:	b2d2      	uxtb	r2, r2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006f90:	e00a      	b.n	8006fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	b2da      	uxtb	r2, r3
 8006f96:	4908      	ldr	r1, [pc, #32]	; (8006fb8 <__NVIC_SetPriority+0x50>)
 8006f98:	79fb      	ldrb	r3, [r7, #7]
 8006f9a:	f003 030f 	and.w	r3, r3, #15
 8006f9e:	3b04      	subs	r3, #4
 8006fa0:	0112      	lsls	r2, r2, #4
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	440b      	add	r3, r1
 8006fa6:	761a      	strb	r2, [r3, #24]
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	e000e100 	.word	0xe000e100
 8006fb8:	e000ed00 	.word	0xe000ed00

08006fbc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006fc0:	4b05      	ldr	r3, [pc, #20]	; (8006fd8 <SysTick_Handler+0x1c>)
 8006fc2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006fc4:	f001 fd28 	bl	8008a18 <xTaskGetSchedulerState>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b01      	cmp	r3, #1
 8006fcc:	d001      	beq.n	8006fd2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006fce:	f002 fb13 	bl	80095f8 <xPortSysTickHandler>
  }
}
 8006fd2:	bf00      	nop
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop
 8006fd8:	e000e010 	.word	0xe000e010

08006fdc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	f06f 0004 	mvn.w	r0, #4
 8006fe6:	f7ff ffbf 	bl	8006f68 <__NVIC_SetPriority>
#endif
}
 8006fea:	bf00      	nop
 8006fec:	bd80      	pop	{r7, pc}
	...

08006ff0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006ff0:	b480      	push	{r7}
 8006ff2:	b083      	sub	sp, #12
 8006ff4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ff6:	f3ef 8305 	mrs	r3, IPSR
 8006ffa:	603b      	str	r3, [r7, #0]
  return(result);
 8006ffc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d003      	beq.n	800700a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007002:	f06f 0305 	mvn.w	r3, #5
 8007006:	607b      	str	r3, [r7, #4]
 8007008:	e00c      	b.n	8007024 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800700a:	4b0a      	ldr	r3, [pc, #40]	; (8007034 <osKernelInitialize+0x44>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d105      	bne.n	800701e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007012:	4b08      	ldr	r3, [pc, #32]	; (8007034 <osKernelInitialize+0x44>)
 8007014:	2201      	movs	r2, #1
 8007016:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007018:	2300      	movs	r3, #0
 800701a:	607b      	str	r3, [r7, #4]
 800701c:	e002      	b.n	8007024 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800701e:	f04f 33ff 	mov.w	r3, #4294967295
 8007022:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007024:	687b      	ldr	r3, [r7, #4]
}
 8007026:	4618      	mov	r0, r3
 8007028:	370c      	adds	r7, #12
 800702a:	46bd      	mov	sp, r7
 800702c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20000644 	.word	0x20000644

08007038 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007038:	b580      	push	{r7, lr}
 800703a:	b082      	sub	sp, #8
 800703c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800703e:	f3ef 8305 	mrs	r3, IPSR
 8007042:	603b      	str	r3, [r7, #0]
  return(result);
 8007044:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007046:	2b00      	cmp	r3, #0
 8007048:	d003      	beq.n	8007052 <osKernelStart+0x1a>
    stat = osErrorISR;
 800704a:	f06f 0305 	mvn.w	r3, #5
 800704e:	607b      	str	r3, [r7, #4]
 8007050:	e010      	b.n	8007074 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007052:	4b0b      	ldr	r3, [pc, #44]	; (8007080 <osKernelStart+0x48>)
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	2b01      	cmp	r3, #1
 8007058:	d109      	bne.n	800706e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800705a:	f7ff ffbf 	bl	8006fdc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800705e:	4b08      	ldr	r3, [pc, #32]	; (8007080 <osKernelStart+0x48>)
 8007060:	2202      	movs	r2, #2
 8007062:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007064:	f001 f87c 	bl	8008160 <vTaskStartScheduler>
      stat = osOK;
 8007068:	2300      	movs	r3, #0
 800706a:	607b      	str	r3, [r7, #4]
 800706c:	e002      	b.n	8007074 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800706e:	f04f 33ff 	mov.w	r3, #4294967295
 8007072:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007074:	687b      	ldr	r3, [r7, #4]
}
 8007076:	4618      	mov	r0, r3
 8007078:	3708      	adds	r7, #8
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
 800707e:	bf00      	nop
 8007080:	20000644 	.word	0x20000644

08007084 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007084:	b580      	push	{r7, lr}
 8007086:	b08e      	sub	sp, #56	; 0x38
 8007088:	af04      	add	r7, sp, #16
 800708a:	60f8      	str	r0, [r7, #12]
 800708c:	60b9      	str	r1, [r7, #8]
 800708e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007090:	2300      	movs	r3, #0
 8007092:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007094:	f3ef 8305 	mrs	r3, IPSR
 8007098:	617b      	str	r3, [r7, #20]
  return(result);
 800709a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800709c:	2b00      	cmp	r3, #0
 800709e:	d17e      	bne.n	800719e <osThreadNew+0x11a>
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d07b      	beq.n	800719e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80070a6:	2380      	movs	r3, #128	; 0x80
 80070a8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80070aa:	2318      	movs	r3, #24
 80070ac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80070ae:	2300      	movs	r3, #0
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80070b2:	f04f 33ff 	mov.w	r3, #4294967295
 80070b6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d045      	beq.n	800714a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d002      	beq.n	80070cc <osThreadNew+0x48>
        name = attr->name;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	699b      	ldr	r3, [r3, #24]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d002      	beq.n	80070da <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	699b      	ldr	r3, [r3, #24]
 80070d8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070da:	69fb      	ldr	r3, [r7, #28]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d008      	beq.n	80070f2 <osThreadNew+0x6e>
 80070e0:	69fb      	ldr	r3, [r7, #28]
 80070e2:	2b38      	cmp	r3, #56	; 0x38
 80070e4:	d805      	bhi.n	80070f2 <osThreadNew+0x6e>
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	685b      	ldr	r3, [r3, #4]
 80070ea:	f003 0301 	and.w	r3, r3, #1
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d001      	beq.n	80070f6 <osThreadNew+0x72>
        return (NULL);
 80070f2:	2300      	movs	r3, #0
 80070f4:	e054      	b.n	80071a0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	695b      	ldr	r3, [r3, #20]
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d003      	beq.n	8007106 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	089b      	lsrs	r3, r3, #2
 8007104:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	689b      	ldr	r3, [r3, #8]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d00e      	beq.n	800712c <osThreadNew+0xa8>
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	68db      	ldr	r3, [r3, #12]
 8007112:	2bbb      	cmp	r3, #187	; 0xbb
 8007114:	d90a      	bls.n	800712c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800711a:	2b00      	cmp	r3, #0
 800711c:	d006      	beq.n	800712c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	695b      	ldr	r3, [r3, #20]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <osThreadNew+0xa8>
        mem = 1;
 8007126:	2301      	movs	r3, #1
 8007128:	61bb      	str	r3, [r7, #24]
 800712a:	e010      	b.n	800714e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	689b      	ldr	r3, [r3, #8]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d10c      	bne.n	800714e <osThreadNew+0xca>
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	2b00      	cmp	r3, #0
 800713a:	d108      	bne.n	800714e <osThreadNew+0xca>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	691b      	ldr	r3, [r3, #16]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d104      	bne.n	800714e <osThreadNew+0xca>
          mem = 0;
 8007144:	2300      	movs	r3, #0
 8007146:	61bb      	str	r3, [r7, #24]
 8007148:	e001      	b.n	800714e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800714a:	2300      	movs	r3, #0
 800714c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800714e:	69bb      	ldr	r3, [r7, #24]
 8007150:	2b01      	cmp	r3, #1
 8007152:	d110      	bne.n	8007176 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800715c:	9202      	str	r2, [sp, #8]
 800715e:	9301      	str	r3, [sp, #4]
 8007160:	69fb      	ldr	r3, [r7, #28]
 8007162:	9300      	str	r3, [sp, #0]
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	6a3a      	ldr	r2, [r7, #32]
 8007168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f000 fe0c 	bl	8007d88 <xTaskCreateStatic>
 8007170:	4603      	mov	r3, r0
 8007172:	613b      	str	r3, [r7, #16]
 8007174:	e013      	b.n	800719e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007176:	69bb      	ldr	r3, [r7, #24]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d110      	bne.n	800719e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800717c:	6a3b      	ldr	r3, [r7, #32]
 800717e:	b29a      	uxth	r2, r3
 8007180:	f107 0310 	add.w	r3, r7, #16
 8007184:	9301      	str	r3, [sp, #4]
 8007186:	69fb      	ldr	r3, [r7, #28]
 8007188:	9300      	str	r3, [sp, #0]
 800718a:	68bb      	ldr	r3, [r7, #8]
 800718c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f000 fe57 	bl	8007e42 <xTaskCreate>
 8007194:	4603      	mov	r3, r0
 8007196:	2b01      	cmp	r3, #1
 8007198:	d001      	beq.n	800719e <osThreadNew+0x11a>
            hTask = NULL;
 800719a:	2300      	movs	r3, #0
 800719c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800719e:	693b      	ldr	r3, [r7, #16]
}
 80071a0:	4618      	mov	r0, r3
 80071a2:	3728      	adds	r7, #40	; 0x28
 80071a4:	46bd      	mov	sp, r7
 80071a6:	bd80      	pop	{r7, pc}

080071a8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b084      	sub	sp, #16
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071b0:	f3ef 8305 	mrs	r3, IPSR
 80071b4:	60bb      	str	r3, [r7, #8]
  return(result);
 80071b6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <osDelay+0x1c>
    stat = osErrorISR;
 80071bc:	f06f 0305 	mvn.w	r3, #5
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	e007      	b.n	80071d4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80071c4:	2300      	movs	r3, #0
 80071c6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d002      	beq.n	80071d4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 ff92 	bl	80080f8 <vTaskDelay>
    }
  }

  return (stat);
 80071d4:	68fb      	ldr	r3, [r7, #12]
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3710      	adds	r7, #16
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
	...

080071e0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80071e0:	b480      	push	{r7}
 80071e2:	b085      	sub	sp, #20
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	4a07      	ldr	r2, [pc, #28]	; (800720c <vApplicationGetIdleTaskMemory+0x2c>)
 80071f0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4a06      	ldr	r2, [pc, #24]	; (8007210 <vApplicationGetIdleTaskMemory+0x30>)
 80071f6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2280      	movs	r2, #128	; 0x80
 80071fc:	601a      	str	r2, [r3, #0]
}
 80071fe:	bf00      	nop
 8007200:	3714      	adds	r7, #20
 8007202:	46bd      	mov	sp, r7
 8007204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007208:	4770      	bx	lr
 800720a:	bf00      	nop
 800720c:	20000648 	.word	0x20000648
 8007210:	20000704 	.word	0x20000704

08007214 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007214:	b480      	push	{r7}
 8007216:	b085      	sub	sp, #20
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	60b9      	str	r1, [r7, #8]
 800721e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	4a07      	ldr	r2, [pc, #28]	; (8007240 <vApplicationGetTimerTaskMemory+0x2c>)
 8007224:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	4a06      	ldr	r2, [pc, #24]	; (8007244 <vApplicationGetTimerTaskMemory+0x30>)
 800722a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007232:	601a      	str	r2, [r3, #0]
}
 8007234:	bf00      	nop
 8007236:	3714      	adds	r7, #20
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr
 8007240:	20000904 	.word	0x20000904
 8007244:	200009c0 	.word	0x200009c0

08007248 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007248:	b480      	push	{r7}
 800724a:	b083      	sub	sp, #12
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f103 0208 	add.w	r2, r3, #8
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f04f 32ff 	mov.w	r2, #4294967295
 8007260:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	f103 0208 	add.w	r2, r3, #8
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f103 0208 	add.w	r2, r3, #8
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007288:	b480      	push	{r7}
 800728a:	b083      	sub	sp, #12
 800728c:	af00      	add	r7, sp, #0
 800728e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	2200      	movs	r2, #0
 8007294:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007296:	bf00      	nop
 8007298:	370c      	adds	r7, #12
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr

080072a2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072a2:	b480      	push	{r7}
 80072a4:	b085      	sub	sp, #20
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	6078      	str	r0, [r7, #4]
 80072aa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072b2:	683b      	ldr	r3, [r7, #0]
 80072b4:	68fa      	ldr	r2, [r7, #12]
 80072b6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	689a      	ldr	r2, [r3, #8]
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	689b      	ldr	r3, [r3, #8]
 80072c4:	683a      	ldr	r2, [r7, #0]
 80072c6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	683a      	ldr	r2, [r7, #0]
 80072cc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	1c5a      	adds	r2, r3, #1
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	601a      	str	r2, [r3, #0]
}
 80072de:	bf00      	nop
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072ea:	b480      	push	{r7}
 80072ec:	b085      	sub	sp, #20
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007300:	d103      	bne.n	800730a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	60fb      	str	r3, [r7, #12]
 8007308:	e00c      	b.n	8007324 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	3308      	adds	r3, #8
 800730e:	60fb      	str	r3, [r7, #12]
 8007310:	e002      	b.n	8007318 <vListInsert+0x2e>
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	685b      	ldr	r3, [r3, #4]
 8007316:	60fb      	str	r3, [r7, #12]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	685b      	ldr	r3, [r3, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	68ba      	ldr	r2, [r7, #8]
 8007320:	429a      	cmp	r2, r3
 8007322:	d2f6      	bcs.n	8007312 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	685a      	ldr	r2, [r3, #4]
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800732c:	683b      	ldr	r3, [r7, #0]
 800732e:	685b      	ldr	r3, [r3, #4]
 8007330:	683a      	ldr	r2, [r7, #0]
 8007332:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007334:	683b      	ldr	r3, [r7, #0]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007340:	683b      	ldr	r3, [r7, #0]
 8007342:	687a      	ldr	r2, [r7, #4]
 8007344:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	1c5a      	adds	r2, r3, #1
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	601a      	str	r2, [r3, #0]
}
 8007350:	bf00      	nop
 8007352:	3714      	adds	r7, #20
 8007354:	46bd      	mov	sp, r7
 8007356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735a:	4770      	bx	lr

0800735c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800735c:	b480      	push	{r7}
 800735e:	b085      	sub	sp, #20
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	691b      	ldr	r3, [r3, #16]
 8007368:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	685b      	ldr	r3, [r3, #4]
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	6892      	ldr	r2, [r2, #8]
 8007372:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	687a      	ldr	r2, [r7, #4]
 800737a:	6852      	ldr	r2, [r2, #4]
 800737c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	687a      	ldr	r2, [r7, #4]
 8007384:	429a      	cmp	r2, r3
 8007386:	d103      	bne.n	8007390 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	689a      	ldr	r2, [r3, #8]
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2200      	movs	r2, #0
 8007394:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	1e5a      	subs	r2, r3, #1
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	681b      	ldr	r3, [r3, #0]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3714      	adds	r7, #20
 80073a8:	46bd      	mov	sp, r7
 80073aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ae:	4770      	bx	lr

080073b0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	6078      	str	r0, [r7, #4]
 80073b8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d10a      	bne.n	80073da <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80073da:	f002 f87b 	bl	80094d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073e6:	68f9      	ldr	r1, [r7, #12]
 80073e8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80073ea:	fb01 f303 	mul.w	r3, r1, r3
 80073ee:	441a      	add	r2, r3
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800740a:	3b01      	subs	r3, #1
 800740c:	68f9      	ldr	r1, [r7, #12]
 800740e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007410:	fb01 f303 	mul.w	r3, r1, r3
 8007414:	441a      	add	r2, r3
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	22ff      	movs	r2, #255	; 0xff
 800741e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	22ff      	movs	r2, #255	; 0xff
 8007426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	2b00      	cmp	r3, #0
 800742e:	d114      	bne.n	800745a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d01a      	beq.n	800746e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	3310      	adds	r3, #16
 800743c:	4618      	mov	r0, r3
 800743e:	f001 f929 	bl	8008694 <xTaskRemoveFromEventList>
 8007442:	4603      	mov	r3, r0
 8007444:	2b00      	cmp	r3, #0
 8007446:	d012      	beq.n	800746e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007448:	4b0c      	ldr	r3, [pc, #48]	; (800747c <xQueueGenericReset+0xcc>)
 800744a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800744e:	601a      	str	r2, [r3, #0]
 8007450:	f3bf 8f4f 	dsb	sy
 8007454:	f3bf 8f6f 	isb	sy
 8007458:	e009      	b.n	800746e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	3310      	adds	r3, #16
 800745e:	4618      	mov	r0, r3
 8007460:	f7ff fef2 	bl	8007248 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	3324      	adds	r3, #36	; 0x24
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff feed 	bl	8007248 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800746e:	f002 f861 	bl	8009534 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007472:	2301      	movs	r3, #1
}
 8007474:	4618      	mov	r0, r3
 8007476:	3710      	adds	r7, #16
 8007478:	46bd      	mov	sp, r7
 800747a:	bd80      	pop	{r7, pc}
 800747c:	e000ed04 	.word	0xe000ed04

08007480 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08e      	sub	sp, #56	; 0x38
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10a      	bne.n	80074aa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80074a6:	bf00      	nop
 80074a8:	e7fe      	b.n	80074a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10a      	bne.n	80074c6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80074c2:	bf00      	nop
 80074c4:	e7fe      	b.n	80074c4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d002      	beq.n	80074d2 <xQueueGenericCreateStatic+0x52>
 80074cc:	68bb      	ldr	r3, [r7, #8]
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d001      	beq.n	80074d6 <xQueueGenericCreateStatic+0x56>
 80074d2:	2301      	movs	r3, #1
 80074d4:	e000      	b.n	80074d8 <xQueueGenericCreateStatic+0x58>
 80074d6:	2300      	movs	r3, #0
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d10a      	bne.n	80074f2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80074dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e0:	f383 8811 	msr	BASEPRI, r3
 80074e4:	f3bf 8f6f 	isb	sy
 80074e8:	f3bf 8f4f 	dsb	sy
 80074ec:	623b      	str	r3, [r7, #32]
}
 80074ee:	bf00      	nop
 80074f0:	e7fe      	b.n	80074f0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d102      	bne.n	80074fe <xQueueGenericCreateStatic+0x7e>
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d101      	bne.n	8007502 <xQueueGenericCreateStatic+0x82>
 80074fe:	2301      	movs	r3, #1
 8007500:	e000      	b.n	8007504 <xQueueGenericCreateStatic+0x84>
 8007502:	2300      	movs	r3, #0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d10a      	bne.n	800751e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007508:	f04f 0350 	mov.w	r3, #80	; 0x50
 800750c:	f383 8811 	msr	BASEPRI, r3
 8007510:	f3bf 8f6f 	isb	sy
 8007514:	f3bf 8f4f 	dsb	sy
 8007518:	61fb      	str	r3, [r7, #28]
}
 800751a:	bf00      	nop
 800751c:	e7fe      	b.n	800751c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800751e:	2350      	movs	r3, #80	; 0x50
 8007520:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007522:	697b      	ldr	r3, [r7, #20]
 8007524:	2b50      	cmp	r3, #80	; 0x50
 8007526:	d00a      	beq.n	800753e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800752c:	f383 8811 	msr	BASEPRI, r3
 8007530:	f3bf 8f6f 	isb	sy
 8007534:	f3bf 8f4f 	dsb	sy
 8007538:	61bb      	str	r3, [r7, #24]
}
 800753a:	bf00      	nop
 800753c:	e7fe      	b.n	800753c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800753e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00d      	beq.n	8007566 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800754a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800754c:	2201      	movs	r2, #1
 800754e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007552:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007556:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007558:	9300      	str	r3, [sp, #0]
 800755a:	4613      	mov	r3, r2
 800755c:	687a      	ldr	r2, [r7, #4]
 800755e:	68b9      	ldr	r1, [r7, #8]
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f805 	bl	8007570 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007568:	4618      	mov	r0, r3
 800756a:	3730      	adds	r7, #48	; 0x30
 800756c:	46bd      	mov	sp, r7
 800756e:	bd80      	pop	{r7, pc}

08007570 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b084      	sub	sp, #16
 8007574:	af00      	add	r7, sp, #0
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	60b9      	str	r1, [r7, #8]
 800757a:	607a      	str	r2, [r7, #4]
 800757c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d103      	bne.n	800758c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007584:	69bb      	ldr	r3, [r7, #24]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	e002      	b.n	8007592 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800758c:	69bb      	ldr	r3, [r7, #24]
 800758e:	687a      	ldr	r2, [r7, #4]
 8007590:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007592:	69bb      	ldr	r3, [r7, #24]
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	68ba      	ldr	r2, [r7, #8]
 800759c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800759e:	2101      	movs	r1, #1
 80075a0:	69b8      	ldr	r0, [r7, #24]
 80075a2:	f7ff ff05 	bl	80073b0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	78fa      	ldrb	r2, [r7, #3]
 80075aa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075ae:	bf00      	nop
 80075b0:	3710      	adds	r7, #16
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
	...

080075b8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b08e      	sub	sp, #56	; 0x38
 80075bc:	af00      	add	r7, sp, #0
 80075be:	60f8      	str	r0, [r7, #12]
 80075c0:	60b9      	str	r1, [r7, #8]
 80075c2:	607a      	str	r2, [r7, #4]
 80075c4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075c6:	2300      	movs	r3, #0
 80075c8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	2b00      	cmp	r3, #0
 80075d2:	d10a      	bne.n	80075ea <xQueueGenericSend+0x32>
	__asm volatile
 80075d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075d8:	f383 8811 	msr	BASEPRI, r3
 80075dc:	f3bf 8f6f 	isb	sy
 80075e0:	f3bf 8f4f 	dsb	sy
 80075e4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80075e6:	bf00      	nop
 80075e8:	e7fe      	b.n	80075e8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075ea:	68bb      	ldr	r3, [r7, #8]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d103      	bne.n	80075f8 <xQueueGenericSend+0x40>
 80075f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d101      	bne.n	80075fc <xQueueGenericSend+0x44>
 80075f8:	2301      	movs	r3, #1
 80075fa:	e000      	b.n	80075fe <xQueueGenericSend+0x46>
 80075fc:	2300      	movs	r3, #0
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d10a      	bne.n	8007618 <xQueueGenericSend+0x60>
	__asm volatile
 8007602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007606:	f383 8811 	msr	BASEPRI, r3
 800760a:	f3bf 8f6f 	isb	sy
 800760e:	f3bf 8f4f 	dsb	sy
 8007612:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007614:	bf00      	nop
 8007616:	e7fe      	b.n	8007616 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	2b02      	cmp	r3, #2
 800761c:	d103      	bne.n	8007626 <xQueueGenericSend+0x6e>
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007622:	2b01      	cmp	r3, #1
 8007624:	d101      	bne.n	800762a <xQueueGenericSend+0x72>
 8007626:	2301      	movs	r3, #1
 8007628:	e000      	b.n	800762c <xQueueGenericSend+0x74>
 800762a:	2300      	movs	r3, #0
 800762c:	2b00      	cmp	r3, #0
 800762e:	d10a      	bne.n	8007646 <xQueueGenericSend+0x8e>
	__asm volatile
 8007630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007634:	f383 8811 	msr	BASEPRI, r3
 8007638:	f3bf 8f6f 	isb	sy
 800763c:	f3bf 8f4f 	dsb	sy
 8007640:	623b      	str	r3, [r7, #32]
}
 8007642:	bf00      	nop
 8007644:	e7fe      	b.n	8007644 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007646:	f001 f9e7 	bl	8008a18 <xTaskGetSchedulerState>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d102      	bne.n	8007656 <xQueueGenericSend+0x9e>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <xQueueGenericSend+0xa2>
 8007656:	2301      	movs	r3, #1
 8007658:	e000      	b.n	800765c <xQueueGenericSend+0xa4>
 800765a:	2300      	movs	r3, #0
 800765c:	2b00      	cmp	r3, #0
 800765e:	d10a      	bne.n	8007676 <xQueueGenericSend+0xbe>
	__asm volatile
 8007660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007664:	f383 8811 	msr	BASEPRI, r3
 8007668:	f3bf 8f6f 	isb	sy
 800766c:	f3bf 8f4f 	dsb	sy
 8007670:	61fb      	str	r3, [r7, #28]
}
 8007672:	bf00      	nop
 8007674:	e7fe      	b.n	8007674 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007676:	f001 ff2d 	bl	80094d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800767a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800767c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800767e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007682:	429a      	cmp	r2, r3
 8007684:	d302      	bcc.n	800768c <xQueueGenericSend+0xd4>
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	2b02      	cmp	r3, #2
 800768a:	d129      	bne.n	80076e0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800768c:	683a      	ldr	r2, [r7, #0]
 800768e:	68b9      	ldr	r1, [r7, #8]
 8007690:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007692:	f000 fa0b 	bl	8007aac <prvCopyDataToQueue>
 8007696:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800769a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769c:	2b00      	cmp	r3, #0
 800769e:	d010      	beq.n	80076c2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a2:	3324      	adds	r3, #36	; 0x24
 80076a4:	4618      	mov	r0, r3
 80076a6:	f000 fff5 	bl	8008694 <xTaskRemoveFromEventList>
 80076aa:	4603      	mov	r3, r0
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d013      	beq.n	80076d8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076b0:	4b3f      	ldr	r3, [pc, #252]	; (80077b0 <xQueueGenericSend+0x1f8>)
 80076b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b6:	601a      	str	r2, [r3, #0]
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	e00a      	b.n	80076d8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d007      	beq.n	80076d8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076c8:	4b39      	ldr	r3, [pc, #228]	; (80077b0 <xQueueGenericSend+0x1f8>)
 80076ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	f3bf 8f4f 	dsb	sy
 80076d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076d8:	f001 ff2c 	bl	8009534 <vPortExitCritical>
				return pdPASS;
 80076dc:	2301      	movs	r3, #1
 80076de:	e063      	b.n	80077a8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	2b00      	cmp	r3, #0
 80076e4:	d103      	bne.n	80076ee <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076e6:	f001 ff25 	bl	8009534 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076ea:	2300      	movs	r3, #0
 80076ec:	e05c      	b.n	80077a8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d106      	bne.n	8007702 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80076f4:	f107 0314 	add.w	r3, r7, #20
 80076f8:	4618      	mov	r0, r3
 80076fa:	f001 f82f 	bl	800875c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80076fe:	2301      	movs	r3, #1
 8007700:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007702:	f001 ff17 	bl	8009534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007706:	f000 fd9b 	bl	8008240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800770a:	f001 fee3 	bl	80094d4 <vPortEnterCritical>
 800770e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007710:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007714:	b25b      	sxtb	r3, r3
 8007716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800771a:	d103      	bne.n	8007724 <xQueueGenericSend+0x16c>
 800771c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800771e:	2200      	movs	r2, #0
 8007720:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007726:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800772a:	b25b      	sxtb	r3, r3
 800772c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007730:	d103      	bne.n	800773a <xQueueGenericSend+0x182>
 8007732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800773a:	f001 fefb 	bl	8009534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800773e:	1d3a      	adds	r2, r7, #4
 8007740:	f107 0314 	add.w	r3, r7, #20
 8007744:	4611      	mov	r1, r2
 8007746:	4618      	mov	r0, r3
 8007748:	f001 f81e 	bl	8008788 <xTaskCheckForTimeOut>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d124      	bne.n	800779c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007752:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007754:	f000 faa2 	bl	8007c9c <prvIsQueueFull>
 8007758:	4603      	mov	r3, r0
 800775a:	2b00      	cmp	r3, #0
 800775c:	d018      	beq.n	8007790 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800775e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007760:	3310      	adds	r3, #16
 8007762:	687a      	ldr	r2, [r7, #4]
 8007764:	4611      	mov	r1, r2
 8007766:	4618      	mov	r0, r3
 8007768:	f000 ff44 	bl	80085f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800776c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800776e:	f000 fa2d 	bl	8007bcc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007772:	f000 fd73 	bl	800825c <xTaskResumeAll>
 8007776:	4603      	mov	r3, r0
 8007778:	2b00      	cmp	r3, #0
 800777a:	f47f af7c 	bne.w	8007676 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800777e:	4b0c      	ldr	r3, [pc, #48]	; (80077b0 <xQueueGenericSend+0x1f8>)
 8007780:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007784:	601a      	str	r2, [r3, #0]
 8007786:	f3bf 8f4f 	dsb	sy
 800778a:	f3bf 8f6f 	isb	sy
 800778e:	e772      	b.n	8007676 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007790:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007792:	f000 fa1b 	bl	8007bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007796:	f000 fd61 	bl	800825c <xTaskResumeAll>
 800779a:	e76c      	b.n	8007676 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800779c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800779e:	f000 fa15 	bl	8007bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077a2:	f000 fd5b 	bl	800825c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3738      	adds	r7, #56	; 0x38
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	e000ed04 	.word	0xe000ed04

080077b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b090      	sub	sp, #64	; 0x40
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	60f8      	str	r0, [r7, #12]
 80077bc:	60b9      	str	r1, [r7, #8]
 80077be:	607a      	str	r2, [r7, #4]
 80077c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80077c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d10a      	bne.n	80077e2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80077cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d0:	f383 8811 	msr	BASEPRI, r3
 80077d4:	f3bf 8f6f 	isb	sy
 80077d8:	f3bf 8f4f 	dsb	sy
 80077dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80077de:	bf00      	nop
 80077e0:	e7fe      	b.n	80077e0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077e2:	68bb      	ldr	r3, [r7, #8]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d103      	bne.n	80077f0 <xQueueGenericSendFromISR+0x3c>
 80077e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d101      	bne.n	80077f4 <xQueueGenericSendFromISR+0x40>
 80077f0:	2301      	movs	r3, #1
 80077f2:	e000      	b.n	80077f6 <xQueueGenericSendFromISR+0x42>
 80077f4:	2300      	movs	r3, #0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d10a      	bne.n	8007810 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80077fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fe:	f383 8811 	msr	BASEPRI, r3
 8007802:	f3bf 8f6f 	isb	sy
 8007806:	f3bf 8f4f 	dsb	sy
 800780a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800780c:	bf00      	nop
 800780e:	e7fe      	b.n	800780e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007810:	683b      	ldr	r3, [r7, #0]
 8007812:	2b02      	cmp	r3, #2
 8007814:	d103      	bne.n	800781e <xQueueGenericSendFromISR+0x6a>
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781a:	2b01      	cmp	r3, #1
 800781c:	d101      	bne.n	8007822 <xQueueGenericSendFromISR+0x6e>
 800781e:	2301      	movs	r3, #1
 8007820:	e000      	b.n	8007824 <xQueueGenericSendFromISR+0x70>
 8007822:	2300      	movs	r3, #0
 8007824:	2b00      	cmp	r3, #0
 8007826:	d10a      	bne.n	800783e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782c:	f383 8811 	msr	BASEPRI, r3
 8007830:	f3bf 8f6f 	isb	sy
 8007834:	f3bf 8f4f 	dsb	sy
 8007838:	623b      	str	r3, [r7, #32]
}
 800783a:	bf00      	nop
 800783c:	e7fe      	b.n	800783c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800783e:	f001 ff2b 	bl	8009698 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007842:	f3ef 8211 	mrs	r2, BASEPRI
 8007846:	f04f 0350 	mov.w	r3, #80	; 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	61fa      	str	r2, [r7, #28]
 8007858:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800785a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800785c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007862:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007866:	429a      	cmp	r2, r3
 8007868:	d302      	bcc.n	8007870 <xQueueGenericSendFromISR+0xbc>
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	2b02      	cmp	r3, #2
 800786e:	d12f      	bne.n	80078d0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007876:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800787a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800787e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007880:	683a      	ldr	r2, [r7, #0]
 8007882:	68b9      	ldr	r1, [r7, #8]
 8007884:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007886:	f000 f911 	bl	8007aac <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800788a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800788e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007892:	d112      	bne.n	80078ba <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007898:	2b00      	cmp	r3, #0
 800789a:	d016      	beq.n	80078ca <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800789c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800789e:	3324      	adds	r3, #36	; 0x24
 80078a0:	4618      	mov	r0, r3
 80078a2:	f000 fef7 	bl	8008694 <xTaskRemoveFromEventList>
 80078a6:	4603      	mov	r3, r0
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d00e      	beq.n	80078ca <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d00b      	beq.n	80078ca <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2201      	movs	r2, #1
 80078b6:	601a      	str	r2, [r3, #0]
 80078b8:	e007      	b.n	80078ca <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80078be:	3301      	adds	r3, #1
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	b25a      	sxtb	r2, r3
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80078ca:	2301      	movs	r3, #1
 80078cc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80078ce:	e001      	b.n	80078d4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078d0:	2300      	movs	r3, #0
 80078d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80078d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078d6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078d8:	697b      	ldr	r3, [r7, #20]
 80078da:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078de:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80078e2:	4618      	mov	r0, r3
 80078e4:	3740      	adds	r7, #64	; 0x40
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80078ec:	b580      	push	{r7, lr}
 80078ee:	b08c      	sub	sp, #48	; 0x30
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	60f8      	str	r0, [r7, #12]
 80078f4:	60b9      	str	r1, [r7, #8]
 80078f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80078f8:	2300      	movs	r3, #0
 80078fa:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007902:	2b00      	cmp	r3, #0
 8007904:	d10a      	bne.n	800791c <xQueueReceive+0x30>
	__asm volatile
 8007906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800790a:	f383 8811 	msr	BASEPRI, r3
 800790e:	f3bf 8f6f 	isb	sy
 8007912:	f3bf 8f4f 	dsb	sy
 8007916:	623b      	str	r3, [r7, #32]
}
 8007918:	bf00      	nop
 800791a:	e7fe      	b.n	800791a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800791c:	68bb      	ldr	r3, [r7, #8]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d103      	bne.n	800792a <xQueueReceive+0x3e>
 8007922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <xQueueReceive+0x42>
 800792a:	2301      	movs	r3, #1
 800792c:	e000      	b.n	8007930 <xQueueReceive+0x44>
 800792e:	2300      	movs	r3, #0
 8007930:	2b00      	cmp	r3, #0
 8007932:	d10a      	bne.n	800794a <xQueueReceive+0x5e>
	__asm volatile
 8007934:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007938:	f383 8811 	msr	BASEPRI, r3
 800793c:	f3bf 8f6f 	isb	sy
 8007940:	f3bf 8f4f 	dsb	sy
 8007944:	61fb      	str	r3, [r7, #28]
}
 8007946:	bf00      	nop
 8007948:	e7fe      	b.n	8007948 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800794a:	f001 f865 	bl	8008a18 <xTaskGetSchedulerState>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d102      	bne.n	800795a <xQueueReceive+0x6e>
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	2b00      	cmp	r3, #0
 8007958:	d101      	bne.n	800795e <xQueueReceive+0x72>
 800795a:	2301      	movs	r3, #1
 800795c:	e000      	b.n	8007960 <xQueueReceive+0x74>
 800795e:	2300      	movs	r3, #0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10a      	bne.n	800797a <xQueueReceive+0x8e>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	f383 8811 	msr	BASEPRI, r3
 800796c:	f3bf 8f6f 	isb	sy
 8007970:	f3bf 8f4f 	dsb	sy
 8007974:	61bb      	str	r3, [r7, #24]
}
 8007976:	bf00      	nop
 8007978:	e7fe      	b.n	8007978 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800797a:	f001 fdab 	bl	80094d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800797e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007980:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007982:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007986:	2b00      	cmp	r3, #0
 8007988:	d01f      	beq.n	80079ca <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800798a:	68b9      	ldr	r1, [r7, #8]
 800798c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800798e:	f000 f8f7 	bl	8007b80 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007994:	1e5a      	subs	r2, r3, #1
 8007996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007998:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800799a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00f      	beq.n	80079c2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a4:	3310      	adds	r3, #16
 80079a6:	4618      	mov	r0, r3
 80079a8:	f000 fe74 	bl	8008694 <xTaskRemoveFromEventList>
 80079ac:	4603      	mov	r3, r0
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d007      	beq.n	80079c2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079b2:	4b3d      	ldr	r3, [pc, #244]	; (8007aa8 <xQueueReceive+0x1bc>)
 80079b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079b8:	601a      	str	r2, [r3, #0]
 80079ba:	f3bf 8f4f 	dsb	sy
 80079be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079c2:	f001 fdb7 	bl	8009534 <vPortExitCritical>
				return pdPASS;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e069      	b.n	8007a9e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079d0:	f001 fdb0 	bl	8009534 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079d4:	2300      	movs	r3, #0
 80079d6:	e062      	b.n	8007a9e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d106      	bne.n	80079ec <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079de:	f107 0310 	add.w	r3, r7, #16
 80079e2:	4618      	mov	r0, r3
 80079e4:	f000 feba 	bl	800875c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80079e8:	2301      	movs	r3, #1
 80079ea:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80079ec:	f001 fda2 	bl	8009534 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80079f0:	f000 fc26 	bl	8008240 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80079f4:	f001 fd6e 	bl	80094d4 <vPortEnterCritical>
 80079f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80079fe:	b25b      	sxtb	r3, r3
 8007a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a04:	d103      	bne.n	8007a0e <xQueueReceive+0x122>
 8007a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a08:	2200      	movs	r2, #0
 8007a0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007a14:	b25b      	sxtb	r3, r3
 8007a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a1a:	d103      	bne.n	8007a24 <xQueueReceive+0x138>
 8007a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007a24:	f001 fd86 	bl	8009534 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a28:	1d3a      	adds	r2, r7, #4
 8007a2a:	f107 0310 	add.w	r3, r7, #16
 8007a2e:	4611      	mov	r1, r2
 8007a30:	4618      	mov	r0, r3
 8007a32:	f000 fea9 	bl	8008788 <xTaskCheckForTimeOut>
 8007a36:	4603      	mov	r3, r0
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d123      	bne.n	8007a84 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a3e:	f000 f917 	bl	8007c70 <prvIsQueueEmpty>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d017      	beq.n	8007a78 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a4a:	3324      	adds	r3, #36	; 0x24
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f000 fdcf 	bl	80085f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a56:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a58:	f000 f8b8 	bl	8007bcc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a5c:	f000 fbfe 	bl	800825c <xTaskResumeAll>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d189      	bne.n	800797a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007a66:	4b10      	ldr	r3, [pc, #64]	; (8007aa8 <xQueueReceive+0x1bc>)
 8007a68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a6c:	601a      	str	r2, [r3, #0]
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	e780      	b.n	800797a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a7a:	f000 f8a7 	bl	8007bcc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a7e:	f000 fbed 	bl	800825c <xTaskResumeAll>
 8007a82:	e77a      	b.n	800797a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a86:	f000 f8a1 	bl	8007bcc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007a8a:	f000 fbe7 	bl	800825c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007a90:	f000 f8ee 	bl	8007c70 <prvIsQueueEmpty>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f43f af6f 	beq.w	800797a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007a9c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007a9e:	4618      	mov	r0, r3
 8007aa0:	3730      	adds	r7, #48	; 0x30
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	e000ed04 	.word	0xe000ed04

08007aac <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007aac:	b580      	push	{r7, lr}
 8007aae:	b086      	sub	sp, #24
 8007ab0:	af00      	add	r7, sp, #0
 8007ab2:	60f8      	str	r0, [r7, #12]
 8007ab4:	60b9      	str	r1, [r7, #8]
 8007ab6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10d      	bne.n	8007ae6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d14d      	bne.n	8007b6e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	689b      	ldr	r3, [r3, #8]
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	f000 ffbc 	bl	8008a54 <xTaskPriorityDisinherit>
 8007adc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	609a      	str	r2, [r3, #8]
 8007ae4:	e043      	b.n	8007b6e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d119      	bne.n	8007b20 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	6858      	ldr	r0, [r3, #4]
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af4:	461a      	mov	r2, r3
 8007af6:	68b9      	ldr	r1, [r7, #8]
 8007af8:	f002 f824 	bl	8009b44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	685a      	ldr	r2, [r3, #4]
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b04:	441a      	add	r2, r3
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	685a      	ldr	r2, [r3, #4]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	689b      	ldr	r3, [r3, #8]
 8007b12:	429a      	cmp	r2, r3
 8007b14:	d32b      	bcc.n	8007b6e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b16:	68fb      	ldr	r3, [r7, #12]
 8007b18:	681a      	ldr	r2, [r3, #0]
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	605a      	str	r2, [r3, #4]
 8007b1e:	e026      	b.n	8007b6e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	68d8      	ldr	r0, [r3, #12]
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b28:	461a      	mov	r2, r3
 8007b2a:	68b9      	ldr	r1, [r7, #8]
 8007b2c:	f002 f80a 	bl	8009b44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	68da      	ldr	r2, [r3, #12]
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	425b      	negs	r3, r3
 8007b3a:	441a      	add	r2, r3
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	68da      	ldr	r2, [r3, #12]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	429a      	cmp	r2, r3
 8007b4a:	d207      	bcs.n	8007b5c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	689a      	ldr	r2, [r3, #8]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b54:	425b      	negs	r3, r3
 8007b56:	441a      	add	r2, r3
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	d105      	bne.n	8007b6e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b62:	693b      	ldr	r3, [r7, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d002      	beq.n	8007b6e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b68:	693b      	ldr	r3, [r7, #16]
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b6e:	693b      	ldr	r3, [r7, #16]
 8007b70:	1c5a      	adds	r2, r3, #1
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8007b76:	697b      	ldr	r3, [r7, #20]
}
 8007b78:	4618      	mov	r0, r3
 8007b7a:	3718      	adds	r7, #24
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b082      	sub	sp, #8
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d018      	beq.n	8007bc4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b9a:	441a      	add	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	68da      	ldr	r2, [r3, #12]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	689b      	ldr	r3, [r3, #8]
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d303      	bcc.n	8007bb4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68d9      	ldr	r1, [r3, #12]
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	6838      	ldr	r0, [r7, #0]
 8007bc0:	f001 ffc0 	bl	8009b44 <memcpy>
	}
}
 8007bc4:	bf00      	nop
 8007bc6:	3708      	adds	r7, #8
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	bd80      	pop	{r7, pc}

08007bcc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007bcc:	b580      	push	{r7, lr}
 8007bce:	b084      	sub	sp, #16
 8007bd0:	af00      	add	r7, sp, #0
 8007bd2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007bd4:	f001 fc7e 	bl	80094d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007bde:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007be0:	e011      	b.n	8007c06 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d012      	beq.n	8007c10 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	3324      	adds	r3, #36	; 0x24
 8007bee:	4618      	mov	r0, r3
 8007bf0:	f000 fd50 	bl	8008694 <xTaskRemoveFromEventList>
 8007bf4:	4603      	mov	r3, r0
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d001      	beq.n	8007bfe <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007bfa:	f000 fe27 	bl	800884c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007bfe:	7bfb      	ldrb	r3, [r7, #15]
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b2db      	uxtb	r3, r3
 8007c04:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	dce9      	bgt.n	8007be2 <prvUnlockQueue+0x16>
 8007c0e:	e000      	b.n	8007c12 <prvUnlockQueue+0x46>
					break;
 8007c10:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	22ff      	movs	r2, #255	; 0xff
 8007c16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007c1a:	f001 fc8b 	bl	8009534 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c1e:	f001 fc59 	bl	80094d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c28:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c2a:	e011      	b.n	8007c50 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d012      	beq.n	8007c5a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3310      	adds	r3, #16
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f000 fd2b 	bl	8008694 <xTaskRemoveFromEventList>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d001      	beq.n	8007c48 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c44:	f000 fe02 	bl	800884c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c48:	7bbb      	ldrb	r3, [r7, #14]
 8007c4a:	3b01      	subs	r3, #1
 8007c4c:	b2db      	uxtb	r3, r3
 8007c4e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c50:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	dce9      	bgt.n	8007c2c <prvUnlockQueue+0x60>
 8007c58:	e000      	b.n	8007c5c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c5a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	22ff      	movs	r2, #255	; 0xff
 8007c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8007c64:	f001 fc66 	bl	8009534 <vPortExitCritical>
}
 8007c68:	bf00      	nop
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	bd80      	pop	{r7, pc}

08007c70 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c70:	b580      	push	{r7, lr}
 8007c72:	b084      	sub	sp, #16
 8007c74:	af00      	add	r7, sp, #0
 8007c76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c78:	f001 fc2c 	bl	80094d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d102      	bne.n	8007c8a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c84:	2301      	movs	r3, #1
 8007c86:	60fb      	str	r3, [r7, #12]
 8007c88:	e001      	b.n	8007c8e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007c8a:	2300      	movs	r3, #0
 8007c8c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007c8e:	f001 fc51 	bl	8009534 <vPortExitCritical>

	return xReturn;
 8007c92:	68fb      	ldr	r3, [r7, #12]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3710      	adds	r7, #16
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	bd80      	pop	{r7, pc}

08007c9c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007c9c:	b580      	push	{r7, lr}
 8007c9e:	b084      	sub	sp, #16
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007ca4:	f001 fc16 	bl	80094d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d102      	bne.n	8007cba <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	60fb      	str	r3, [r7, #12]
 8007cb8:	e001      	b.n	8007cbe <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007cba:	2300      	movs	r3, #0
 8007cbc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cbe:	f001 fc39 	bl	8009534 <vPortExitCritical>

	return xReturn;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
}
 8007cc4:	4618      	mov	r0, r3
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ccc:	b480      	push	{r7}
 8007cce:	b085      	sub	sp, #20
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
 8007cd4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	e014      	b.n	8007d06 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007cdc:	4a0f      	ldr	r2, [pc, #60]	; (8007d1c <vQueueAddToRegistry+0x50>)
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d10b      	bne.n	8007d00 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007ce8:	490c      	ldr	r1, [pc, #48]	; (8007d1c <vQueueAddToRegistry+0x50>)
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	683a      	ldr	r2, [r7, #0]
 8007cee:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007cf2:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <vQueueAddToRegistry+0x50>)
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	00db      	lsls	r3, r3, #3
 8007cf8:	4413      	add	r3, r2
 8007cfa:	687a      	ldr	r2, [r7, #4]
 8007cfc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007cfe:	e006      	b.n	8007d0e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3301      	adds	r3, #1
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	2b07      	cmp	r3, #7
 8007d0a:	d9e7      	bls.n	8007cdc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d0c:	bf00      	nop
 8007d0e:	bf00      	nop
 8007d10:	3714      	adds	r7, #20
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	20000dc0 	.word	0x20000dc0

08007d20 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d20:	b580      	push	{r7, lr}
 8007d22:	b086      	sub	sp, #24
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	60f8      	str	r0, [r7, #12]
 8007d28:	60b9      	str	r1, [r7, #8]
 8007d2a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d30:	f001 fbd0 	bl	80094d4 <vPortEnterCritical>
 8007d34:	697b      	ldr	r3, [r7, #20]
 8007d36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007d3a:	b25b      	sxtb	r3, r3
 8007d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d40:	d103      	bne.n	8007d4a <vQueueWaitForMessageRestricted+0x2a>
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	2200      	movs	r2, #0
 8007d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007d4a:	697b      	ldr	r3, [r7, #20]
 8007d4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007d50:	b25b      	sxtb	r3, r3
 8007d52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d56:	d103      	bne.n	8007d60 <vQueueWaitForMessageRestricted+0x40>
 8007d58:	697b      	ldr	r3, [r7, #20]
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007d60:	f001 fbe8 	bl	8009534 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d106      	bne.n	8007d7a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d6c:	697b      	ldr	r3, [r7, #20]
 8007d6e:	3324      	adds	r3, #36	; 0x24
 8007d70:	687a      	ldr	r2, [r7, #4]
 8007d72:	68b9      	ldr	r1, [r7, #8]
 8007d74:	4618      	mov	r0, r3
 8007d76:	f000 fc61 	bl	800863c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d7a:	6978      	ldr	r0, [r7, #20]
 8007d7c:	f7ff ff26 	bl	8007bcc <prvUnlockQueue>
	}
 8007d80:	bf00      	nop
 8007d82:	3718      	adds	r7, #24
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007d88:	b580      	push	{r7, lr}
 8007d8a:	b08e      	sub	sp, #56	; 0x38
 8007d8c:	af04      	add	r7, sp, #16
 8007d8e:	60f8      	str	r0, [r7, #12]
 8007d90:	60b9      	str	r1, [r7, #8]
 8007d92:	607a      	str	r2, [r7, #4]
 8007d94:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d10a      	bne.n	8007db2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8007d9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da0:	f383 8811 	msr	BASEPRI, r3
 8007da4:	f3bf 8f6f 	isb	sy
 8007da8:	f3bf 8f4f 	dsb	sy
 8007dac:	623b      	str	r3, [r7, #32]
}
 8007dae:	bf00      	nop
 8007db0:	e7fe      	b.n	8007db0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d10a      	bne.n	8007dce <xTaskCreateStatic+0x46>
	__asm volatile
 8007db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dbc:	f383 8811 	msr	BASEPRI, r3
 8007dc0:	f3bf 8f6f 	isb	sy
 8007dc4:	f3bf 8f4f 	dsb	sy
 8007dc8:	61fb      	str	r3, [r7, #28]
}
 8007dca:	bf00      	nop
 8007dcc:	e7fe      	b.n	8007dcc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dce:	23bc      	movs	r3, #188	; 0xbc
 8007dd0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	2bbc      	cmp	r3, #188	; 0xbc
 8007dd6:	d00a      	beq.n	8007dee <xTaskCreateStatic+0x66>
	__asm volatile
 8007dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ddc:	f383 8811 	msr	BASEPRI, r3
 8007de0:	f3bf 8f6f 	isb	sy
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	61bb      	str	r3, [r7, #24]
}
 8007dea:	bf00      	nop
 8007dec:	e7fe      	b.n	8007dec <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007dee:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d01e      	beq.n	8007e34 <xTaskCreateStatic+0xac>
 8007df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d01b      	beq.n	8007e34 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dfe:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007e04:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e08:	2202      	movs	r2, #2
 8007e0a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e0e:	2300      	movs	r3, #0
 8007e10:	9303      	str	r3, [sp, #12]
 8007e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e14:	9302      	str	r3, [sp, #8]
 8007e16:	f107 0314 	add.w	r3, r7, #20
 8007e1a:	9301      	str	r3, [sp, #4]
 8007e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	68b9      	ldr	r1, [r7, #8]
 8007e26:	68f8      	ldr	r0, [r7, #12]
 8007e28:	f000 f850 	bl	8007ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007e2e:	f000 f8f3 	bl	8008018 <prvAddNewTaskToReadyList>
 8007e32:	e001      	b.n	8007e38 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8007e34:	2300      	movs	r3, #0
 8007e36:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e38:	697b      	ldr	r3, [r7, #20]
	}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3728      	adds	r7, #40	; 0x28
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b08c      	sub	sp, #48	; 0x30
 8007e46:	af04      	add	r7, sp, #16
 8007e48:	60f8      	str	r0, [r7, #12]
 8007e4a:	60b9      	str	r1, [r7, #8]
 8007e4c:	603b      	str	r3, [r7, #0]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e52:	88fb      	ldrh	r3, [r7, #6]
 8007e54:	009b      	lsls	r3, r3, #2
 8007e56:	4618      	mov	r0, r3
 8007e58:	f001 fc5e 	bl	8009718 <pvPortMalloc>
 8007e5c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e5e:	697b      	ldr	r3, [r7, #20]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d00e      	beq.n	8007e82 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e64:	20bc      	movs	r0, #188	; 0xbc
 8007e66:	f001 fc57 	bl	8009718 <pvPortMalloc>
 8007e6a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e6c:	69fb      	ldr	r3, [r7, #28]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d003      	beq.n	8007e7a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e72:	69fb      	ldr	r3, [r7, #28]
 8007e74:	697a      	ldr	r2, [r7, #20]
 8007e76:	631a      	str	r2, [r3, #48]	; 0x30
 8007e78:	e005      	b.n	8007e86 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e7a:	6978      	ldr	r0, [r7, #20]
 8007e7c:	f001 fd18 	bl	80098b0 <vPortFree>
 8007e80:	e001      	b.n	8007e86 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007e82:	2300      	movs	r3, #0
 8007e84:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007e86:	69fb      	ldr	r3, [r7, #28]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d017      	beq.n	8007ebc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007e8c:	69fb      	ldr	r3, [r7, #28]
 8007e8e:	2200      	movs	r2, #0
 8007e90:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007e94:	88fa      	ldrh	r2, [r7, #6]
 8007e96:	2300      	movs	r3, #0
 8007e98:	9303      	str	r3, [sp, #12]
 8007e9a:	69fb      	ldr	r3, [r7, #28]
 8007e9c:	9302      	str	r3, [sp, #8]
 8007e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ea0:	9301      	str	r3, [sp, #4]
 8007ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea4:	9300      	str	r3, [sp, #0]
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	68f8      	ldr	r0, [r7, #12]
 8007eac:	f000 f80e 	bl	8007ecc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007eb0:	69f8      	ldr	r0, [r7, #28]
 8007eb2:	f000 f8b1 	bl	8008018 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	61bb      	str	r3, [r7, #24]
 8007eba:	e002      	b.n	8007ec2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007ebc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ec0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ec2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	3720      	adds	r7, #32
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	bd80      	pop	{r7, pc}

08007ecc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b088      	sub	sp, #32
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	60f8      	str	r0, [r7, #12]
 8007ed4:	60b9      	str	r1, [r7, #8]
 8007ed6:	607a      	str	r2, [r7, #4]
 8007ed8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007edc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	009b      	lsls	r3, r3, #2
 8007ee2:	461a      	mov	r2, r3
 8007ee4:	21a5      	movs	r1, #165	; 0xa5
 8007ee6:	f001 fe3b 	bl	8009b60 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007eea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007eec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007ef4:	3b01      	subs	r3, #1
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007efc:	69bb      	ldr	r3, [r7, #24]
 8007efe:	f023 0307 	bic.w	r3, r3, #7
 8007f02:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	f003 0307 	and.w	r3, r3, #7
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d00a      	beq.n	8007f24 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f12:	f383 8811 	msr	BASEPRI, r3
 8007f16:	f3bf 8f6f 	isb	sy
 8007f1a:	f3bf 8f4f 	dsb	sy
 8007f1e:	617b      	str	r3, [r7, #20]
}
 8007f20:	bf00      	nop
 8007f22:	e7fe      	b.n	8007f22 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f24:	68bb      	ldr	r3, [r7, #8]
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d01f      	beq.n	8007f6a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f2a:	2300      	movs	r3, #0
 8007f2c:	61fb      	str	r3, [r7, #28]
 8007f2e:	e012      	b.n	8007f56 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	69fb      	ldr	r3, [r7, #28]
 8007f34:	4413      	add	r3, r2
 8007f36:	7819      	ldrb	r1, [r3, #0]
 8007f38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	4413      	add	r3, r2
 8007f3e:	3334      	adds	r3, #52	; 0x34
 8007f40:	460a      	mov	r2, r1
 8007f42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f44:	68ba      	ldr	r2, [r7, #8]
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	4413      	add	r3, r2
 8007f4a:	781b      	ldrb	r3, [r3, #0]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d006      	beq.n	8007f5e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	3301      	adds	r3, #1
 8007f54:	61fb      	str	r3, [r7, #28]
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	2b0f      	cmp	r3, #15
 8007f5a:	d9e9      	bls.n	8007f30 <prvInitialiseNewTask+0x64>
 8007f5c:	e000      	b.n	8007f60 <prvInitialiseNewTask+0x94>
			{
				break;
 8007f5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f62:	2200      	movs	r2, #0
 8007f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007f68:	e003      	b.n	8007f72 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f74:	2b37      	cmp	r3, #55	; 0x37
 8007f76:	d901      	bls.n	8007f7c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f78:	2337      	movs	r3, #55	; 0x37
 8007f7a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f80:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f86:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f90:	3304      	adds	r3, #4
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7ff f978 	bl	8007288 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9a:	3318      	adds	r3, #24
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f7ff f973 	bl	8007288 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fa4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fa6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007faa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8007fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007fb6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007fc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fca:	3354      	adds	r3, #84	; 0x54
 8007fcc:	2260      	movs	r2, #96	; 0x60
 8007fce:	2100      	movs	r1, #0
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f001 fdc5 	bl	8009b60 <memset>
 8007fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd8:	4a0c      	ldr	r2, [pc, #48]	; (800800c <prvInitialiseNewTask+0x140>)
 8007fda:	659a      	str	r2, [r3, #88]	; 0x58
 8007fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fde:	4a0c      	ldr	r2, [pc, #48]	; (8008010 <prvInitialiseNewTask+0x144>)
 8007fe0:	65da      	str	r2, [r3, #92]	; 0x5c
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fe4:	4a0b      	ldr	r2, [pc, #44]	; (8008014 <prvInitialiseNewTask+0x148>)
 8007fe6:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	68f9      	ldr	r1, [r7, #12]
 8007fec:	69b8      	ldr	r0, [r7, #24]
 8007fee:	f001 f941 	bl	8009274 <pxPortInitialiseStack>
 8007ff2:	4602      	mov	r2, r0
 8007ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007ff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d002      	beq.n	8008004 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008002:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008004:	bf00      	nop
 8008006:	3720      	adds	r7, #32
 8008008:	46bd      	mov	sp, r7
 800800a:	bd80      	pop	{r7, pc}
 800800c:	0800b370 	.word	0x0800b370
 8008010:	0800b390 	.word	0x0800b390
 8008014:	0800b350 	.word	0x0800b350

08008018 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b082      	sub	sp, #8
 800801c:	af00      	add	r7, sp, #0
 800801e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008020:	f001 fa58 	bl	80094d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008024:	4b2d      	ldr	r3, [pc, #180]	; (80080dc <prvAddNewTaskToReadyList+0xc4>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	3301      	adds	r3, #1
 800802a:	4a2c      	ldr	r2, [pc, #176]	; (80080dc <prvAddNewTaskToReadyList+0xc4>)
 800802c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800802e:	4b2c      	ldr	r3, [pc, #176]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008036:	4a2a      	ldr	r2, [pc, #168]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800803c:	4b27      	ldr	r3, [pc, #156]	; (80080dc <prvAddNewTaskToReadyList+0xc4>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2b01      	cmp	r3, #1
 8008042:	d110      	bne.n	8008066 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008044:	f000 fc26 	bl	8008894 <prvInitialiseTaskLists>
 8008048:	e00d      	b.n	8008066 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800804a:	4b26      	ldr	r3, [pc, #152]	; (80080e4 <prvAddNewTaskToReadyList+0xcc>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	2b00      	cmp	r3, #0
 8008050:	d109      	bne.n	8008066 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008052:	4b23      	ldr	r3, [pc, #140]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	429a      	cmp	r2, r3
 800805e:	d802      	bhi.n	8008066 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008060:	4a1f      	ldr	r2, [pc, #124]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008066:	4b20      	ldr	r3, [pc, #128]	; (80080e8 <prvAddNewTaskToReadyList+0xd0>)
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	3301      	adds	r3, #1
 800806c:	4a1e      	ldr	r2, [pc, #120]	; (80080e8 <prvAddNewTaskToReadyList+0xd0>)
 800806e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008070:	4b1d      	ldr	r3, [pc, #116]	; (80080e8 <prvAddNewTaskToReadyList+0xd0>)
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800807c:	4b1b      	ldr	r3, [pc, #108]	; (80080ec <prvAddNewTaskToReadyList+0xd4>)
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	429a      	cmp	r2, r3
 8008082:	d903      	bls.n	800808c <prvAddNewTaskToReadyList+0x74>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008088:	4a18      	ldr	r2, [pc, #96]	; (80080ec <prvAddNewTaskToReadyList+0xd4>)
 800808a:	6013      	str	r3, [r2, #0]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008090:	4613      	mov	r3, r2
 8008092:	009b      	lsls	r3, r3, #2
 8008094:	4413      	add	r3, r2
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	4a15      	ldr	r2, [pc, #84]	; (80080f0 <prvAddNewTaskToReadyList+0xd8>)
 800809a:	441a      	add	r2, r3
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	3304      	adds	r3, #4
 80080a0:	4619      	mov	r1, r3
 80080a2:	4610      	mov	r0, r2
 80080a4:	f7ff f8fd 	bl	80072a2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080a8:	f001 fa44 	bl	8009534 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080ac:	4b0d      	ldr	r3, [pc, #52]	; (80080e4 <prvAddNewTaskToReadyList+0xcc>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00e      	beq.n	80080d2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080b4:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <prvAddNewTaskToReadyList+0xc8>)
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080be:	429a      	cmp	r2, r3
 80080c0:	d207      	bcs.n	80080d2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080c2:	4b0c      	ldr	r3, [pc, #48]	; (80080f4 <prvAddNewTaskToReadyList+0xdc>)
 80080c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80080c8:	601a      	str	r2, [r3, #0]
 80080ca:	f3bf 8f4f 	dsb	sy
 80080ce:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080d2:	bf00      	nop
 80080d4:	3708      	adds	r7, #8
 80080d6:	46bd      	mov	sp, r7
 80080d8:	bd80      	pop	{r7, pc}
 80080da:	bf00      	nop
 80080dc:	200012d4 	.word	0x200012d4
 80080e0:	20000e00 	.word	0x20000e00
 80080e4:	200012e0 	.word	0x200012e0
 80080e8:	200012f0 	.word	0x200012f0
 80080ec:	200012dc 	.word	0x200012dc
 80080f0:	20000e04 	.word	0x20000e04
 80080f4:	e000ed04 	.word	0xe000ed04

080080f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b084      	sub	sp, #16
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008100:	2300      	movs	r3, #0
 8008102:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2b00      	cmp	r3, #0
 8008108:	d017      	beq.n	800813a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800810a:	4b13      	ldr	r3, [pc, #76]	; (8008158 <vTaskDelay+0x60>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d00a      	beq.n	8008128 <vTaskDelay+0x30>
	__asm volatile
 8008112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008116:	f383 8811 	msr	BASEPRI, r3
 800811a:	f3bf 8f6f 	isb	sy
 800811e:	f3bf 8f4f 	dsb	sy
 8008122:	60bb      	str	r3, [r7, #8]
}
 8008124:	bf00      	nop
 8008126:	e7fe      	b.n	8008126 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008128:	f000 f88a 	bl	8008240 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800812c:	2100      	movs	r1, #0
 800812e:	6878      	ldr	r0, [r7, #4]
 8008130:	f000 fcfe 	bl	8008b30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008134:	f000 f892 	bl	800825c <xTaskResumeAll>
 8008138:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d107      	bne.n	8008150 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008140:	4b06      	ldr	r3, [pc, #24]	; (800815c <vTaskDelay+0x64>)
 8008142:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008146:	601a      	str	r2, [r3, #0]
 8008148:	f3bf 8f4f 	dsb	sy
 800814c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008150:	bf00      	nop
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}
 8008158:	200012fc 	.word	0x200012fc
 800815c:	e000ed04 	.word	0xe000ed04

08008160 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b08a      	sub	sp, #40	; 0x28
 8008164:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008166:	2300      	movs	r3, #0
 8008168:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800816a:	2300      	movs	r3, #0
 800816c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800816e:	463a      	mov	r2, r7
 8008170:	1d39      	adds	r1, r7, #4
 8008172:	f107 0308 	add.w	r3, r7, #8
 8008176:	4618      	mov	r0, r3
 8008178:	f7ff f832 	bl	80071e0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800817c:	6839      	ldr	r1, [r7, #0]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	68ba      	ldr	r2, [r7, #8]
 8008182:	9202      	str	r2, [sp, #8]
 8008184:	9301      	str	r3, [sp, #4]
 8008186:	2300      	movs	r3, #0
 8008188:	9300      	str	r3, [sp, #0]
 800818a:	2300      	movs	r3, #0
 800818c:	460a      	mov	r2, r1
 800818e:	4924      	ldr	r1, [pc, #144]	; (8008220 <vTaskStartScheduler+0xc0>)
 8008190:	4824      	ldr	r0, [pc, #144]	; (8008224 <vTaskStartScheduler+0xc4>)
 8008192:	f7ff fdf9 	bl	8007d88 <xTaskCreateStatic>
 8008196:	4603      	mov	r3, r0
 8008198:	4a23      	ldr	r2, [pc, #140]	; (8008228 <vTaskStartScheduler+0xc8>)
 800819a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800819c:	4b22      	ldr	r3, [pc, #136]	; (8008228 <vTaskStartScheduler+0xc8>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d002      	beq.n	80081aa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081a4:	2301      	movs	r3, #1
 80081a6:	617b      	str	r3, [r7, #20]
 80081a8:	e001      	b.n	80081ae <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d102      	bne.n	80081ba <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081b4:	f000 fd10 	bl	8008bd8 <xTimerCreateTimerTask>
 80081b8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	2b01      	cmp	r3, #1
 80081be:	d11b      	bne.n	80081f8 <vTaskStartScheduler+0x98>
	__asm volatile
 80081c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081c4:	f383 8811 	msr	BASEPRI, r3
 80081c8:	f3bf 8f6f 	isb	sy
 80081cc:	f3bf 8f4f 	dsb	sy
 80081d0:	613b      	str	r3, [r7, #16]
}
 80081d2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081d4:	4b15      	ldr	r3, [pc, #84]	; (800822c <vTaskStartScheduler+0xcc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3354      	adds	r3, #84	; 0x54
 80081da:	4a15      	ldr	r2, [pc, #84]	; (8008230 <vTaskStartScheduler+0xd0>)
 80081dc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80081de:	4b15      	ldr	r3, [pc, #84]	; (8008234 <vTaskStartScheduler+0xd4>)
 80081e0:	f04f 32ff 	mov.w	r2, #4294967295
 80081e4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80081e6:	4b14      	ldr	r3, [pc, #80]	; (8008238 <vTaskStartScheduler+0xd8>)
 80081e8:	2201      	movs	r2, #1
 80081ea:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80081ec:	4b13      	ldr	r3, [pc, #76]	; (800823c <vTaskStartScheduler+0xdc>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80081f2:	f001 f8cd 	bl	8009390 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80081f6:	e00e      	b.n	8008216 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80081fe:	d10a      	bne.n	8008216 <vTaskStartScheduler+0xb6>
	__asm volatile
 8008200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008204:	f383 8811 	msr	BASEPRI, r3
 8008208:	f3bf 8f6f 	isb	sy
 800820c:	f3bf 8f4f 	dsb	sy
 8008210:	60fb      	str	r3, [r7, #12]
}
 8008212:	bf00      	nop
 8008214:	e7fe      	b.n	8008214 <vTaskStartScheduler+0xb4>
}
 8008216:	bf00      	nop
 8008218:	3718      	adds	r7, #24
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
 800821e:	bf00      	nop
 8008220:	0800a54c 	.word	0x0800a54c
 8008224:	08008865 	.word	0x08008865
 8008228:	200012f8 	.word	0x200012f8
 800822c:	20000e00 	.word	0x20000e00
 8008230:	20000018 	.word	0x20000018
 8008234:	200012f4 	.word	0x200012f4
 8008238:	200012e0 	.word	0x200012e0
 800823c:	200012d8 	.word	0x200012d8

08008240 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008240:	b480      	push	{r7}
 8008242:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008244:	4b04      	ldr	r3, [pc, #16]	; (8008258 <vTaskSuspendAll+0x18>)
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	3301      	adds	r3, #1
 800824a:	4a03      	ldr	r2, [pc, #12]	; (8008258 <vTaskSuspendAll+0x18>)
 800824c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800824e:	bf00      	nop
 8008250:	46bd      	mov	sp, r7
 8008252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008256:	4770      	bx	lr
 8008258:	200012fc 	.word	0x200012fc

0800825c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800825c:	b580      	push	{r7, lr}
 800825e:	b084      	sub	sp, #16
 8008260:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008262:	2300      	movs	r3, #0
 8008264:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008266:	2300      	movs	r3, #0
 8008268:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800826a:	4b42      	ldr	r3, [pc, #264]	; (8008374 <xTaskResumeAll+0x118>)
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d10a      	bne.n	8008288 <xTaskResumeAll+0x2c>
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	f383 8811 	msr	BASEPRI, r3
 800827a:	f3bf 8f6f 	isb	sy
 800827e:	f3bf 8f4f 	dsb	sy
 8008282:	603b      	str	r3, [r7, #0]
}
 8008284:	bf00      	nop
 8008286:	e7fe      	b.n	8008286 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008288:	f001 f924 	bl	80094d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800828c:	4b39      	ldr	r3, [pc, #228]	; (8008374 <xTaskResumeAll+0x118>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	3b01      	subs	r3, #1
 8008292:	4a38      	ldr	r2, [pc, #224]	; (8008374 <xTaskResumeAll+0x118>)
 8008294:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008296:	4b37      	ldr	r3, [pc, #220]	; (8008374 <xTaskResumeAll+0x118>)
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d162      	bne.n	8008364 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800829e:	4b36      	ldr	r3, [pc, #216]	; (8008378 <xTaskResumeAll+0x11c>)
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d05e      	beq.n	8008364 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082a6:	e02f      	b.n	8008308 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082a8:	4b34      	ldr	r3, [pc, #208]	; (800837c <xTaskResumeAll+0x120>)
 80082aa:	68db      	ldr	r3, [r3, #12]
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	3318      	adds	r3, #24
 80082b4:	4618      	mov	r0, r3
 80082b6:	f7ff f851 	bl	800735c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	3304      	adds	r3, #4
 80082be:	4618      	mov	r0, r3
 80082c0:	f7ff f84c 	bl	800735c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082c8:	4b2d      	ldr	r3, [pc, #180]	; (8008380 <xTaskResumeAll+0x124>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d903      	bls.n	80082d8 <xTaskResumeAll+0x7c>
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082d4:	4a2a      	ldr	r2, [pc, #168]	; (8008380 <xTaskResumeAll+0x124>)
 80082d6:	6013      	str	r3, [r2, #0]
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082dc:	4613      	mov	r3, r2
 80082de:	009b      	lsls	r3, r3, #2
 80082e0:	4413      	add	r3, r2
 80082e2:	009b      	lsls	r3, r3, #2
 80082e4:	4a27      	ldr	r2, [pc, #156]	; (8008384 <xTaskResumeAll+0x128>)
 80082e6:	441a      	add	r2, r3
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	3304      	adds	r3, #4
 80082ec:	4619      	mov	r1, r3
 80082ee:	4610      	mov	r0, r2
 80082f0:	f7fe ffd7 	bl	80072a2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80082f4:	68fb      	ldr	r3, [r7, #12]
 80082f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80082f8:	4b23      	ldr	r3, [pc, #140]	; (8008388 <xTaskResumeAll+0x12c>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80082fe:	429a      	cmp	r2, r3
 8008300:	d302      	bcc.n	8008308 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008302:	4b22      	ldr	r3, [pc, #136]	; (800838c <xTaskResumeAll+0x130>)
 8008304:	2201      	movs	r2, #1
 8008306:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008308:	4b1c      	ldr	r3, [pc, #112]	; (800837c <xTaskResumeAll+0x120>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d1cb      	bne.n	80082a8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008316:	f000 fb5f 	bl	80089d8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800831a:	4b1d      	ldr	r3, [pc, #116]	; (8008390 <xTaskResumeAll+0x134>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2b00      	cmp	r3, #0
 8008324:	d010      	beq.n	8008348 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008326:	f000 f847 	bl	80083b8 <xTaskIncrementTick>
 800832a:	4603      	mov	r3, r0
 800832c:	2b00      	cmp	r3, #0
 800832e:	d002      	beq.n	8008336 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008330:	4b16      	ldr	r3, [pc, #88]	; (800838c <xTaskResumeAll+0x130>)
 8008332:	2201      	movs	r2, #1
 8008334:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	3b01      	subs	r3, #1
 800833a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d1f1      	bne.n	8008326 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008342:	4b13      	ldr	r3, [pc, #76]	; (8008390 <xTaskResumeAll+0x134>)
 8008344:	2200      	movs	r2, #0
 8008346:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008348:	4b10      	ldr	r3, [pc, #64]	; (800838c <xTaskResumeAll+0x130>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d009      	beq.n	8008364 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008350:	2301      	movs	r3, #1
 8008352:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008354:	4b0f      	ldr	r3, [pc, #60]	; (8008394 <xTaskResumeAll+0x138>)
 8008356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835a:	601a      	str	r2, [r3, #0]
 800835c:	f3bf 8f4f 	dsb	sy
 8008360:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008364:	f001 f8e6 	bl	8009534 <vPortExitCritical>

	return xAlreadyYielded;
 8008368:	68bb      	ldr	r3, [r7, #8]
}
 800836a:	4618      	mov	r0, r3
 800836c:	3710      	adds	r7, #16
 800836e:	46bd      	mov	sp, r7
 8008370:	bd80      	pop	{r7, pc}
 8008372:	bf00      	nop
 8008374:	200012fc 	.word	0x200012fc
 8008378:	200012d4 	.word	0x200012d4
 800837c:	20001294 	.word	0x20001294
 8008380:	200012dc 	.word	0x200012dc
 8008384:	20000e04 	.word	0x20000e04
 8008388:	20000e00 	.word	0x20000e00
 800838c:	200012e8 	.word	0x200012e8
 8008390:	200012e4 	.word	0x200012e4
 8008394:	e000ed04 	.word	0xe000ed04

08008398 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008398:	b480      	push	{r7}
 800839a:	b083      	sub	sp, #12
 800839c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800839e:	4b05      	ldr	r3, [pc, #20]	; (80083b4 <xTaskGetTickCount+0x1c>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083a4:	687b      	ldr	r3, [r7, #4]
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr
 80083b2:	bf00      	nop
 80083b4:	200012d8 	.word	0x200012d8

080083b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b086      	sub	sp, #24
 80083bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083be:	2300      	movs	r3, #0
 80083c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083c2:	4b4f      	ldr	r3, [pc, #316]	; (8008500 <xTaskIncrementTick+0x148>)
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	f040 808f 	bne.w	80084ea <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083cc:	4b4d      	ldr	r3, [pc, #308]	; (8008504 <xTaskIncrementTick+0x14c>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	3301      	adds	r3, #1
 80083d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083d4:	4a4b      	ldr	r2, [pc, #300]	; (8008504 <xTaskIncrementTick+0x14c>)
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80083da:	693b      	ldr	r3, [r7, #16]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d120      	bne.n	8008422 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80083e0:	4b49      	ldr	r3, [pc, #292]	; (8008508 <xTaskIncrementTick+0x150>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	d00a      	beq.n	8008400 <xTaskIncrementTick+0x48>
	__asm volatile
 80083ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083ee:	f383 8811 	msr	BASEPRI, r3
 80083f2:	f3bf 8f6f 	isb	sy
 80083f6:	f3bf 8f4f 	dsb	sy
 80083fa:	603b      	str	r3, [r7, #0]
}
 80083fc:	bf00      	nop
 80083fe:	e7fe      	b.n	80083fe <xTaskIncrementTick+0x46>
 8008400:	4b41      	ldr	r3, [pc, #260]	; (8008508 <xTaskIncrementTick+0x150>)
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	60fb      	str	r3, [r7, #12]
 8008406:	4b41      	ldr	r3, [pc, #260]	; (800850c <xTaskIncrementTick+0x154>)
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	4a3f      	ldr	r2, [pc, #252]	; (8008508 <xTaskIncrementTick+0x150>)
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	4a3f      	ldr	r2, [pc, #252]	; (800850c <xTaskIncrementTick+0x154>)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	6013      	str	r3, [r2, #0]
 8008414:	4b3e      	ldr	r3, [pc, #248]	; (8008510 <xTaskIncrementTick+0x158>)
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	3301      	adds	r3, #1
 800841a:	4a3d      	ldr	r2, [pc, #244]	; (8008510 <xTaskIncrementTick+0x158>)
 800841c:	6013      	str	r3, [r2, #0]
 800841e:	f000 fadb 	bl	80089d8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008422:	4b3c      	ldr	r3, [pc, #240]	; (8008514 <xTaskIncrementTick+0x15c>)
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	429a      	cmp	r2, r3
 800842a:	d349      	bcc.n	80084c0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800842c:	4b36      	ldr	r3, [pc, #216]	; (8008508 <xTaskIncrementTick+0x150>)
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	2b00      	cmp	r3, #0
 8008434:	d104      	bne.n	8008440 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008436:	4b37      	ldr	r3, [pc, #220]	; (8008514 <xTaskIncrementTick+0x15c>)
 8008438:	f04f 32ff 	mov.w	r2, #4294967295
 800843c:	601a      	str	r2, [r3, #0]
					break;
 800843e:	e03f      	b.n	80084c0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008440:	4b31      	ldr	r3, [pc, #196]	; (8008508 <xTaskIncrementTick+0x150>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	68db      	ldr	r3, [r3, #12]
 8008446:	68db      	ldr	r3, [r3, #12]
 8008448:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	685b      	ldr	r3, [r3, #4]
 800844e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	429a      	cmp	r2, r3
 8008456:	d203      	bcs.n	8008460 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008458:	4a2e      	ldr	r2, [pc, #184]	; (8008514 <xTaskIncrementTick+0x15c>)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800845e:	e02f      	b.n	80084c0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	3304      	adds	r3, #4
 8008464:	4618      	mov	r0, r3
 8008466:	f7fe ff79 	bl	800735c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800846e:	2b00      	cmp	r3, #0
 8008470:	d004      	beq.n	800847c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008472:	68bb      	ldr	r3, [r7, #8]
 8008474:	3318      	adds	r3, #24
 8008476:	4618      	mov	r0, r3
 8008478:	f7fe ff70 	bl	800735c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008480:	4b25      	ldr	r3, [pc, #148]	; (8008518 <xTaskIncrementTick+0x160>)
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	429a      	cmp	r2, r3
 8008486:	d903      	bls.n	8008490 <xTaskIncrementTick+0xd8>
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800848c:	4a22      	ldr	r2, [pc, #136]	; (8008518 <xTaskIncrementTick+0x160>)
 800848e:	6013      	str	r3, [r2, #0]
 8008490:	68bb      	ldr	r3, [r7, #8]
 8008492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008494:	4613      	mov	r3, r2
 8008496:	009b      	lsls	r3, r3, #2
 8008498:	4413      	add	r3, r2
 800849a:	009b      	lsls	r3, r3, #2
 800849c:	4a1f      	ldr	r2, [pc, #124]	; (800851c <xTaskIncrementTick+0x164>)
 800849e:	441a      	add	r2, r3
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	3304      	adds	r3, #4
 80084a4:	4619      	mov	r1, r3
 80084a6:	4610      	mov	r0, r2
 80084a8:	f7fe fefb 	bl	80072a2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b0:	4b1b      	ldr	r3, [pc, #108]	; (8008520 <xTaskIncrementTick+0x168>)
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084b6:	429a      	cmp	r2, r3
 80084b8:	d3b8      	bcc.n	800842c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80084ba:	2301      	movs	r3, #1
 80084bc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084be:	e7b5      	b.n	800842c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084c0:	4b17      	ldr	r3, [pc, #92]	; (8008520 <xTaskIncrementTick+0x168>)
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c6:	4915      	ldr	r1, [pc, #84]	; (800851c <xTaskIncrementTick+0x164>)
 80084c8:	4613      	mov	r3, r2
 80084ca:	009b      	lsls	r3, r3, #2
 80084cc:	4413      	add	r3, r2
 80084ce:	009b      	lsls	r3, r3, #2
 80084d0:	440b      	add	r3, r1
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	2b01      	cmp	r3, #1
 80084d6:	d901      	bls.n	80084dc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80084d8:	2301      	movs	r3, #1
 80084da:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084dc:	4b11      	ldr	r3, [pc, #68]	; (8008524 <xTaskIncrementTick+0x16c>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d007      	beq.n	80084f4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80084e4:	2301      	movs	r3, #1
 80084e6:	617b      	str	r3, [r7, #20]
 80084e8:	e004      	b.n	80084f4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80084ea:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <xTaskIncrementTick+0x170>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	3301      	adds	r3, #1
 80084f0:	4a0d      	ldr	r2, [pc, #52]	; (8008528 <xTaskIncrementTick+0x170>)
 80084f2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80084f4:	697b      	ldr	r3, [r7, #20]
}
 80084f6:	4618      	mov	r0, r3
 80084f8:	3718      	adds	r7, #24
 80084fa:	46bd      	mov	sp, r7
 80084fc:	bd80      	pop	{r7, pc}
 80084fe:	bf00      	nop
 8008500:	200012fc 	.word	0x200012fc
 8008504:	200012d8 	.word	0x200012d8
 8008508:	2000128c 	.word	0x2000128c
 800850c:	20001290 	.word	0x20001290
 8008510:	200012ec 	.word	0x200012ec
 8008514:	200012f4 	.word	0x200012f4
 8008518:	200012dc 	.word	0x200012dc
 800851c:	20000e04 	.word	0x20000e04
 8008520:	20000e00 	.word	0x20000e00
 8008524:	200012e8 	.word	0x200012e8
 8008528:	200012e4 	.word	0x200012e4

0800852c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800852c:	b480      	push	{r7}
 800852e:	b085      	sub	sp, #20
 8008530:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008532:	4b2a      	ldr	r3, [pc, #168]	; (80085dc <vTaskSwitchContext+0xb0>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d003      	beq.n	8008542 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800853a:	4b29      	ldr	r3, [pc, #164]	; (80085e0 <vTaskSwitchContext+0xb4>)
 800853c:	2201      	movs	r2, #1
 800853e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008540:	e046      	b.n	80085d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8008542:	4b27      	ldr	r3, [pc, #156]	; (80085e0 <vTaskSwitchContext+0xb4>)
 8008544:	2200      	movs	r2, #0
 8008546:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008548:	4b26      	ldr	r3, [pc, #152]	; (80085e4 <vTaskSwitchContext+0xb8>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	60fb      	str	r3, [r7, #12]
 800854e:	e010      	b.n	8008572 <vTaskSwitchContext+0x46>
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d10a      	bne.n	800856c <vTaskSwitchContext+0x40>
	__asm volatile
 8008556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800855a:	f383 8811 	msr	BASEPRI, r3
 800855e:	f3bf 8f6f 	isb	sy
 8008562:	f3bf 8f4f 	dsb	sy
 8008566:	607b      	str	r3, [r7, #4]
}
 8008568:	bf00      	nop
 800856a:	e7fe      	b.n	800856a <vTaskSwitchContext+0x3e>
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	3b01      	subs	r3, #1
 8008570:	60fb      	str	r3, [r7, #12]
 8008572:	491d      	ldr	r1, [pc, #116]	; (80085e8 <vTaskSwitchContext+0xbc>)
 8008574:	68fa      	ldr	r2, [r7, #12]
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	009b      	lsls	r3, r3, #2
 800857e:	440b      	add	r3, r1
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0e4      	beq.n	8008550 <vTaskSwitchContext+0x24>
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	4613      	mov	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	4413      	add	r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4a15      	ldr	r2, [pc, #84]	; (80085e8 <vTaskSwitchContext+0xbc>)
 8008592:	4413      	add	r3, r2
 8008594:	60bb      	str	r3, [r7, #8]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	605a      	str	r2, [r3, #4]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	68bb      	ldr	r3, [r7, #8]
 80085a6:	3308      	adds	r3, #8
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d104      	bne.n	80085b6 <vTaskSwitchContext+0x8a>
 80085ac:	68bb      	ldr	r3, [r7, #8]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	68bb      	ldr	r3, [r7, #8]
 80085b4:	605a      	str	r2, [r3, #4]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	68db      	ldr	r3, [r3, #12]
 80085bc:	4a0b      	ldr	r2, [pc, #44]	; (80085ec <vTaskSwitchContext+0xc0>)
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	4a08      	ldr	r2, [pc, #32]	; (80085e4 <vTaskSwitchContext+0xb8>)
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085c6:	4b09      	ldr	r3, [pc, #36]	; (80085ec <vTaskSwitchContext+0xc0>)
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	3354      	adds	r3, #84	; 0x54
 80085cc:	4a08      	ldr	r2, [pc, #32]	; (80085f0 <vTaskSwitchContext+0xc4>)
 80085ce:	6013      	str	r3, [r2, #0]
}
 80085d0:	bf00      	nop
 80085d2:	3714      	adds	r7, #20
 80085d4:	46bd      	mov	sp, r7
 80085d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085da:	4770      	bx	lr
 80085dc:	200012fc 	.word	0x200012fc
 80085e0:	200012e8 	.word	0x200012e8
 80085e4:	200012dc 	.word	0x200012dc
 80085e8:	20000e04 	.word	0x20000e04
 80085ec:	20000e00 	.word	0x20000e00
 80085f0:	20000018 	.word	0x20000018

080085f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80085f4:	b580      	push	{r7, lr}
 80085f6:	b084      	sub	sp, #16
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d10a      	bne.n	800861a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008608:	f383 8811 	msr	BASEPRI, r3
 800860c:	f3bf 8f6f 	isb	sy
 8008610:	f3bf 8f4f 	dsb	sy
 8008614:	60fb      	str	r3, [r7, #12]
}
 8008616:	bf00      	nop
 8008618:	e7fe      	b.n	8008618 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800861a:	4b07      	ldr	r3, [pc, #28]	; (8008638 <vTaskPlaceOnEventList+0x44>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	3318      	adds	r3, #24
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fe fe61 	bl	80072ea <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008628:	2101      	movs	r1, #1
 800862a:	6838      	ldr	r0, [r7, #0]
 800862c:	f000 fa80 	bl	8008b30 <prvAddCurrentTaskToDelayedList>
}
 8008630:	bf00      	nop
 8008632:	3710      	adds	r7, #16
 8008634:	46bd      	mov	sp, r7
 8008636:	bd80      	pop	{r7, pc}
 8008638:	20000e00 	.word	0x20000e00

0800863c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800863c:	b580      	push	{r7, lr}
 800863e:	b086      	sub	sp, #24
 8008640:	af00      	add	r7, sp, #0
 8008642:	60f8      	str	r0, [r7, #12]
 8008644:	60b9      	str	r1, [r7, #8]
 8008646:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d10a      	bne.n	8008664 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800864e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008652:	f383 8811 	msr	BASEPRI, r3
 8008656:	f3bf 8f6f 	isb	sy
 800865a:	f3bf 8f4f 	dsb	sy
 800865e:	617b      	str	r3, [r7, #20]
}
 8008660:	bf00      	nop
 8008662:	e7fe      	b.n	8008662 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008664:	4b0a      	ldr	r3, [pc, #40]	; (8008690 <vTaskPlaceOnEventListRestricted+0x54>)
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	3318      	adds	r3, #24
 800866a:	4619      	mov	r1, r3
 800866c:	68f8      	ldr	r0, [r7, #12]
 800866e:	f7fe fe18 	bl	80072a2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	2b00      	cmp	r3, #0
 8008676:	d002      	beq.n	800867e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008678:	f04f 33ff 	mov.w	r3, #4294967295
 800867c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800867e:	6879      	ldr	r1, [r7, #4]
 8008680:	68b8      	ldr	r0, [r7, #8]
 8008682:	f000 fa55 	bl	8008b30 <prvAddCurrentTaskToDelayedList>
	}
 8008686:	bf00      	nop
 8008688:	3718      	adds	r7, #24
 800868a:	46bd      	mov	sp, r7
 800868c:	bd80      	pop	{r7, pc}
 800868e:	bf00      	nop
 8008690:	20000e00 	.word	0x20000e00

08008694 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	68db      	ldr	r3, [r3, #12]
 80086a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d10a      	bne.n	80086c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80086aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	60fb      	str	r3, [r7, #12]
}
 80086bc:	bf00      	nop
 80086be:	e7fe      	b.n	80086be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086c0:	693b      	ldr	r3, [r7, #16]
 80086c2:	3318      	adds	r3, #24
 80086c4:	4618      	mov	r0, r3
 80086c6:	f7fe fe49 	bl	800735c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086ca:	4b1e      	ldr	r3, [pc, #120]	; (8008744 <xTaskRemoveFromEventList+0xb0>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d11d      	bne.n	800870e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	3304      	adds	r3, #4
 80086d6:	4618      	mov	r0, r3
 80086d8:	f7fe fe40 	bl	800735c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086e0:	4b19      	ldr	r3, [pc, #100]	; (8008748 <xTaskRemoveFromEventList+0xb4>)
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	429a      	cmp	r2, r3
 80086e6:	d903      	bls.n	80086f0 <xTaskRemoveFromEventList+0x5c>
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086ec:	4a16      	ldr	r2, [pc, #88]	; (8008748 <xTaskRemoveFromEventList+0xb4>)
 80086ee:	6013      	str	r3, [r2, #0]
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	4a13      	ldr	r2, [pc, #76]	; (800874c <xTaskRemoveFromEventList+0xb8>)
 80086fe:	441a      	add	r2, r3
 8008700:	693b      	ldr	r3, [r7, #16]
 8008702:	3304      	adds	r3, #4
 8008704:	4619      	mov	r1, r3
 8008706:	4610      	mov	r0, r2
 8008708:	f7fe fdcb 	bl	80072a2 <vListInsertEnd>
 800870c:	e005      	b.n	800871a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	3318      	adds	r3, #24
 8008712:	4619      	mov	r1, r3
 8008714:	480e      	ldr	r0, [pc, #56]	; (8008750 <xTaskRemoveFromEventList+0xbc>)
 8008716:	f7fe fdc4 	bl	80072a2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800871e:	4b0d      	ldr	r3, [pc, #52]	; (8008754 <xTaskRemoveFromEventList+0xc0>)
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008724:	429a      	cmp	r2, r3
 8008726:	d905      	bls.n	8008734 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008728:	2301      	movs	r3, #1
 800872a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800872c:	4b0a      	ldr	r3, [pc, #40]	; (8008758 <xTaskRemoveFromEventList+0xc4>)
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	e001      	b.n	8008738 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008734:	2300      	movs	r3, #0
 8008736:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008738:	697b      	ldr	r3, [r7, #20]
}
 800873a:	4618      	mov	r0, r3
 800873c:	3718      	adds	r7, #24
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
 8008742:	bf00      	nop
 8008744:	200012fc 	.word	0x200012fc
 8008748:	200012dc 	.word	0x200012dc
 800874c:	20000e04 	.word	0x20000e04
 8008750:	20001294 	.word	0x20001294
 8008754:	20000e00 	.word	0x20000e00
 8008758:	200012e8 	.word	0x200012e8

0800875c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008764:	4b06      	ldr	r3, [pc, #24]	; (8008780 <vTaskInternalSetTimeOutState+0x24>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800876c:	4b05      	ldr	r3, [pc, #20]	; (8008784 <vTaskInternalSetTimeOutState+0x28>)
 800876e:	681a      	ldr	r2, [r3, #0]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	605a      	str	r2, [r3, #4]
}
 8008774:	bf00      	nop
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr
 8008780:	200012ec 	.word	0x200012ec
 8008784:	200012d8 	.word	0x200012d8

08008788 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b088      	sub	sp, #32
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	2b00      	cmp	r3, #0
 8008796:	d10a      	bne.n	80087ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800879c:	f383 8811 	msr	BASEPRI, r3
 80087a0:	f3bf 8f6f 	isb	sy
 80087a4:	f3bf 8f4f 	dsb	sy
 80087a8:	613b      	str	r3, [r7, #16]
}
 80087aa:	bf00      	nop
 80087ac:	e7fe      	b.n	80087ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087ae:	683b      	ldr	r3, [r7, #0]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d10a      	bne.n	80087ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80087b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b8:	f383 8811 	msr	BASEPRI, r3
 80087bc:	f3bf 8f6f 	isb	sy
 80087c0:	f3bf 8f4f 	dsb	sy
 80087c4:	60fb      	str	r3, [r7, #12]
}
 80087c6:	bf00      	nop
 80087c8:	e7fe      	b.n	80087c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80087ca:	f000 fe83 	bl	80094d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80087ce:	4b1d      	ldr	r3, [pc, #116]	; (8008844 <xTaskCheckForTimeOut+0xbc>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	685b      	ldr	r3, [r3, #4]
 80087d8:	69ba      	ldr	r2, [r7, #24]
 80087da:	1ad3      	subs	r3, r2, r3
 80087dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e6:	d102      	bne.n	80087ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80087e8:	2300      	movs	r3, #0
 80087ea:	61fb      	str	r3, [r7, #28]
 80087ec:	e023      	b.n	8008836 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681a      	ldr	r2, [r3, #0]
 80087f2:	4b15      	ldr	r3, [pc, #84]	; (8008848 <xTaskCheckForTimeOut+0xc0>)
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d007      	beq.n	800880a <xTaskCheckForTimeOut+0x82>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	69ba      	ldr	r2, [r7, #24]
 8008800:	429a      	cmp	r2, r3
 8008802:	d302      	bcc.n	800880a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008804:	2301      	movs	r3, #1
 8008806:	61fb      	str	r3, [r7, #28]
 8008808:	e015      	b.n	8008836 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	429a      	cmp	r2, r3
 8008812:	d20b      	bcs.n	800882c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008814:	683b      	ldr	r3, [r7, #0]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	697b      	ldr	r3, [r7, #20]
 800881a:	1ad2      	subs	r2, r2, r3
 800881c:	683b      	ldr	r3, [r7, #0]
 800881e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff ff9b 	bl	800875c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008826:	2300      	movs	r3, #0
 8008828:	61fb      	str	r3, [r7, #28]
 800882a:	e004      	b.n	8008836 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800882c:	683b      	ldr	r3, [r7, #0]
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008832:	2301      	movs	r3, #1
 8008834:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008836:	f000 fe7d 	bl	8009534 <vPortExitCritical>

	return xReturn;
 800883a:	69fb      	ldr	r3, [r7, #28]
}
 800883c:	4618      	mov	r0, r3
 800883e:	3720      	adds	r7, #32
 8008840:	46bd      	mov	sp, r7
 8008842:	bd80      	pop	{r7, pc}
 8008844:	200012d8 	.word	0x200012d8
 8008848:	200012ec 	.word	0x200012ec

0800884c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800884c:	b480      	push	{r7}
 800884e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008850:	4b03      	ldr	r3, [pc, #12]	; (8008860 <vTaskMissedYield+0x14>)
 8008852:	2201      	movs	r2, #1
 8008854:	601a      	str	r2, [r3, #0]
}
 8008856:	bf00      	nop
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr
 8008860:	200012e8 	.word	0x200012e8

08008864 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b082      	sub	sp, #8
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800886c:	f000 f852 	bl	8008914 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008870:	4b06      	ldr	r3, [pc, #24]	; (800888c <prvIdleTask+0x28>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	2b01      	cmp	r3, #1
 8008876:	d9f9      	bls.n	800886c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008878:	4b05      	ldr	r3, [pc, #20]	; (8008890 <prvIdleTask+0x2c>)
 800887a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800887e:	601a      	str	r2, [r3, #0]
 8008880:	f3bf 8f4f 	dsb	sy
 8008884:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008888:	e7f0      	b.n	800886c <prvIdleTask+0x8>
 800888a:	bf00      	nop
 800888c:	20000e04 	.word	0x20000e04
 8008890:	e000ed04 	.word	0xe000ed04

08008894 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008894:	b580      	push	{r7, lr}
 8008896:	b082      	sub	sp, #8
 8008898:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800889a:	2300      	movs	r3, #0
 800889c:	607b      	str	r3, [r7, #4]
 800889e:	e00c      	b.n	80088ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088a0:	687a      	ldr	r2, [r7, #4]
 80088a2:	4613      	mov	r3, r2
 80088a4:	009b      	lsls	r3, r3, #2
 80088a6:	4413      	add	r3, r2
 80088a8:	009b      	lsls	r3, r3, #2
 80088aa:	4a12      	ldr	r2, [pc, #72]	; (80088f4 <prvInitialiseTaskLists+0x60>)
 80088ac:	4413      	add	r3, r2
 80088ae:	4618      	mov	r0, r3
 80088b0:	f7fe fcca 	bl	8007248 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	3301      	adds	r3, #1
 80088b8:	607b      	str	r3, [r7, #4]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	2b37      	cmp	r3, #55	; 0x37
 80088be:	d9ef      	bls.n	80088a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088c0:	480d      	ldr	r0, [pc, #52]	; (80088f8 <prvInitialiseTaskLists+0x64>)
 80088c2:	f7fe fcc1 	bl	8007248 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088c6:	480d      	ldr	r0, [pc, #52]	; (80088fc <prvInitialiseTaskLists+0x68>)
 80088c8:	f7fe fcbe 	bl	8007248 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80088cc:	480c      	ldr	r0, [pc, #48]	; (8008900 <prvInitialiseTaskLists+0x6c>)
 80088ce:	f7fe fcbb 	bl	8007248 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80088d2:	480c      	ldr	r0, [pc, #48]	; (8008904 <prvInitialiseTaskLists+0x70>)
 80088d4:	f7fe fcb8 	bl	8007248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80088d8:	480b      	ldr	r0, [pc, #44]	; (8008908 <prvInitialiseTaskLists+0x74>)
 80088da:	f7fe fcb5 	bl	8007248 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80088de:	4b0b      	ldr	r3, [pc, #44]	; (800890c <prvInitialiseTaskLists+0x78>)
 80088e0:	4a05      	ldr	r2, [pc, #20]	; (80088f8 <prvInitialiseTaskLists+0x64>)
 80088e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80088e4:	4b0a      	ldr	r3, [pc, #40]	; (8008910 <prvInitialiseTaskLists+0x7c>)
 80088e6:	4a05      	ldr	r2, [pc, #20]	; (80088fc <prvInitialiseTaskLists+0x68>)
 80088e8:	601a      	str	r2, [r3, #0]
}
 80088ea:	bf00      	nop
 80088ec:	3708      	adds	r7, #8
 80088ee:	46bd      	mov	sp, r7
 80088f0:	bd80      	pop	{r7, pc}
 80088f2:	bf00      	nop
 80088f4:	20000e04 	.word	0x20000e04
 80088f8:	20001264 	.word	0x20001264
 80088fc:	20001278 	.word	0x20001278
 8008900:	20001294 	.word	0x20001294
 8008904:	200012a8 	.word	0x200012a8
 8008908:	200012c0 	.word	0x200012c0
 800890c:	2000128c 	.word	0x2000128c
 8008910:	20001290 	.word	0x20001290

08008914 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800891a:	e019      	b.n	8008950 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800891c:	f000 fdda 	bl	80094d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008920:	4b10      	ldr	r3, [pc, #64]	; (8008964 <prvCheckTasksWaitingTermination+0x50>)
 8008922:	68db      	ldr	r3, [r3, #12]
 8008924:	68db      	ldr	r3, [r3, #12]
 8008926:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	3304      	adds	r3, #4
 800892c:	4618      	mov	r0, r3
 800892e:	f7fe fd15 	bl	800735c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008932:	4b0d      	ldr	r3, [pc, #52]	; (8008968 <prvCheckTasksWaitingTermination+0x54>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	3b01      	subs	r3, #1
 8008938:	4a0b      	ldr	r2, [pc, #44]	; (8008968 <prvCheckTasksWaitingTermination+0x54>)
 800893a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800893c:	4b0b      	ldr	r3, [pc, #44]	; (800896c <prvCheckTasksWaitingTermination+0x58>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	3b01      	subs	r3, #1
 8008942:	4a0a      	ldr	r2, [pc, #40]	; (800896c <prvCheckTasksWaitingTermination+0x58>)
 8008944:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008946:	f000 fdf5 	bl	8009534 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 f810 	bl	8008970 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008950:	4b06      	ldr	r3, [pc, #24]	; (800896c <prvCheckTasksWaitingTermination+0x58>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1e1      	bne.n	800891c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008958:	bf00      	nop
 800895a:	bf00      	nop
 800895c:	3708      	adds	r7, #8
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	200012a8 	.word	0x200012a8
 8008968:	200012d4 	.word	0x200012d4
 800896c:	200012bc 	.word	0x200012bc

08008970 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008970:	b580      	push	{r7, lr}
 8008972:	b084      	sub	sp, #16
 8008974:	af00      	add	r7, sp, #0
 8008976:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	3354      	adds	r3, #84	; 0x54
 800897c:	4618      	mov	r0, r3
 800897e:	f001 f999 	bl	8009cb4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8008988:	2b00      	cmp	r3, #0
 800898a:	d108      	bne.n	800899e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008990:	4618      	mov	r0, r3
 8008992:	f000 ff8d 	bl	80098b0 <vPortFree>
				vPortFree( pxTCB );
 8008996:	6878      	ldr	r0, [r7, #4]
 8008998:	f000 ff8a 	bl	80098b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800899c:	e018      	b.n	80089d0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80089a4:	2b01      	cmp	r3, #1
 80089a6:	d103      	bne.n	80089b0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 ff81 	bl	80098b0 <vPortFree>
	}
 80089ae:	e00f      	b.n	80089d0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80089b6:	2b02      	cmp	r3, #2
 80089b8:	d00a      	beq.n	80089d0 <prvDeleteTCB+0x60>
	__asm volatile
 80089ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089be:	f383 8811 	msr	BASEPRI, r3
 80089c2:	f3bf 8f6f 	isb	sy
 80089c6:	f3bf 8f4f 	dsb	sy
 80089ca:	60fb      	str	r3, [r7, #12]
}
 80089cc:	bf00      	nop
 80089ce:	e7fe      	b.n	80089ce <prvDeleteTCB+0x5e>
	}
 80089d0:	bf00      	nop
 80089d2:	3710      	adds	r7, #16
 80089d4:	46bd      	mov	sp, r7
 80089d6:	bd80      	pop	{r7, pc}

080089d8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80089d8:	b480      	push	{r7}
 80089da:	b083      	sub	sp, #12
 80089dc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089de:	4b0c      	ldr	r3, [pc, #48]	; (8008a10 <prvResetNextTaskUnblockTime+0x38>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d104      	bne.n	80089f2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80089e8:	4b0a      	ldr	r3, [pc, #40]	; (8008a14 <prvResetNextTaskUnblockTime+0x3c>)
 80089ea:	f04f 32ff 	mov.w	r2, #4294967295
 80089ee:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80089f0:	e008      	b.n	8008a04 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089f2:	4b07      	ldr	r3, [pc, #28]	; (8008a10 <prvResetNextTaskUnblockTime+0x38>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	68db      	ldr	r3, [r3, #12]
 80089fa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	4a04      	ldr	r2, [pc, #16]	; (8008a14 <prvResetNextTaskUnblockTime+0x3c>)
 8008a02:	6013      	str	r3, [r2, #0]
}
 8008a04:	bf00      	nop
 8008a06:	370c      	adds	r7, #12
 8008a08:	46bd      	mov	sp, r7
 8008a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a0e:	4770      	bx	lr
 8008a10:	2000128c 	.word	0x2000128c
 8008a14:	200012f4 	.word	0x200012f4

08008a18 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a18:	b480      	push	{r7}
 8008a1a:	b083      	sub	sp, #12
 8008a1c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a1e:	4b0b      	ldr	r3, [pc, #44]	; (8008a4c <xTaskGetSchedulerState+0x34>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d102      	bne.n	8008a2c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a26:	2301      	movs	r3, #1
 8008a28:	607b      	str	r3, [r7, #4]
 8008a2a:	e008      	b.n	8008a3e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a2c:	4b08      	ldr	r3, [pc, #32]	; (8008a50 <xTaskGetSchedulerState+0x38>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d102      	bne.n	8008a3a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a34:	2302      	movs	r3, #2
 8008a36:	607b      	str	r3, [r7, #4]
 8008a38:	e001      	b.n	8008a3e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a3e:	687b      	ldr	r3, [r7, #4]
	}
 8008a40:	4618      	mov	r0, r3
 8008a42:	370c      	adds	r7, #12
 8008a44:	46bd      	mov	sp, r7
 8008a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a4a:	4770      	bx	lr
 8008a4c:	200012e0 	.word	0x200012e0
 8008a50:	200012fc 	.word	0x200012fc

08008a54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b086      	sub	sp, #24
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d056      	beq.n	8008b18 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008a6a:	4b2e      	ldr	r3, [pc, #184]	; (8008b24 <xTaskPriorityDisinherit+0xd0>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	693a      	ldr	r2, [r7, #16]
 8008a70:	429a      	cmp	r2, r3
 8008a72:	d00a      	beq.n	8008a8a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a78:	f383 8811 	msr	BASEPRI, r3
 8008a7c:	f3bf 8f6f 	isb	sy
 8008a80:	f3bf 8f4f 	dsb	sy
 8008a84:	60fb      	str	r3, [r7, #12]
}
 8008a86:	bf00      	nop
 8008a88:	e7fe      	b.n	8008a88 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	60bb      	str	r3, [r7, #8]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008aac:	1e5a      	subs	r2, r3, #1
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008ab2:	693b      	ldr	r3, [r7, #16]
 8008ab4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ab6:	693b      	ldr	r3, [r7, #16]
 8008ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008aba:	429a      	cmp	r2, r3
 8008abc:	d02c      	beq.n	8008b18 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008abe:	693b      	ldr	r3, [r7, #16]
 8008ac0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d128      	bne.n	8008b18 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	3304      	adds	r3, #4
 8008aca:	4618      	mov	r0, r3
 8008acc:	f7fe fc46 	bl	800735c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ad4:	693b      	ldr	r3, [r7, #16]
 8008ad6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ad8:	693b      	ldr	r3, [r7, #16]
 8008ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008adc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8008ae0:	693b      	ldr	r3, [r7, #16]
 8008ae2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ae8:	4b0f      	ldr	r3, [pc, #60]	; (8008b28 <xTaskPriorityDisinherit+0xd4>)
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	429a      	cmp	r2, r3
 8008aee:	d903      	bls.n	8008af8 <xTaskPriorityDisinherit+0xa4>
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008af4:	4a0c      	ldr	r2, [pc, #48]	; (8008b28 <xTaskPriorityDisinherit+0xd4>)
 8008af6:	6013      	str	r3, [r2, #0]
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008afc:	4613      	mov	r3, r2
 8008afe:	009b      	lsls	r3, r3, #2
 8008b00:	4413      	add	r3, r2
 8008b02:	009b      	lsls	r3, r3, #2
 8008b04:	4a09      	ldr	r2, [pc, #36]	; (8008b2c <xTaskPriorityDisinherit+0xd8>)
 8008b06:	441a      	add	r2, r3
 8008b08:	693b      	ldr	r3, [r7, #16]
 8008b0a:	3304      	adds	r3, #4
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	4610      	mov	r0, r2
 8008b10:	f7fe fbc7 	bl	80072a2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b14:	2301      	movs	r3, #1
 8008b16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b18:	697b      	ldr	r3, [r7, #20]
	}
 8008b1a:	4618      	mov	r0, r3
 8008b1c:	3718      	adds	r7, #24
 8008b1e:	46bd      	mov	sp, r7
 8008b20:	bd80      	pop	{r7, pc}
 8008b22:	bf00      	nop
 8008b24:	20000e00 	.word	0x20000e00
 8008b28:	200012dc 	.word	0x200012dc
 8008b2c:	20000e04 	.word	0x20000e04

08008b30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b084      	sub	sp, #16
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
 8008b38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b3a:	4b21      	ldr	r3, [pc, #132]	; (8008bc0 <prvAddCurrentTaskToDelayedList+0x90>)
 8008b3c:	681b      	ldr	r3, [r3, #0]
 8008b3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b40:	4b20      	ldr	r3, [pc, #128]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	3304      	adds	r3, #4
 8008b46:	4618      	mov	r0, r3
 8008b48:	f7fe fc08 	bl	800735c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b52:	d10a      	bne.n	8008b6a <prvAddCurrentTaskToDelayedList+0x3a>
 8008b54:	683b      	ldr	r3, [r7, #0]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d007      	beq.n	8008b6a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b5a:	4b1a      	ldr	r3, [pc, #104]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	3304      	adds	r3, #4
 8008b60:	4619      	mov	r1, r3
 8008b62:	4819      	ldr	r0, [pc, #100]	; (8008bc8 <prvAddCurrentTaskToDelayedList+0x98>)
 8008b64:	f7fe fb9d 	bl	80072a2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008b68:	e026      	b.n	8008bb8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008b6a:	68fa      	ldr	r2, [r7, #12]
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	4413      	add	r3, r2
 8008b70:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008b72:	4b14      	ldr	r3, [pc, #80]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68ba      	ldr	r2, [r7, #8]
 8008b78:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	68fb      	ldr	r3, [r7, #12]
 8008b7e:	429a      	cmp	r2, r3
 8008b80:	d209      	bcs.n	8008b96 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b82:	4b12      	ldr	r3, [pc, #72]	; (8008bcc <prvAddCurrentTaskToDelayedList+0x9c>)
 8008b84:	681a      	ldr	r2, [r3, #0]
 8008b86:	4b0f      	ldr	r3, [pc, #60]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	4610      	mov	r0, r2
 8008b90:	f7fe fbab 	bl	80072ea <vListInsert>
}
 8008b94:	e010      	b.n	8008bb8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b96:	4b0e      	ldr	r3, [pc, #56]	; (8008bd0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008b98:	681a      	ldr	r2, [r3, #0]
 8008b9a:	4b0a      	ldr	r3, [pc, #40]	; (8008bc4 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3304      	adds	r3, #4
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	4610      	mov	r0, r2
 8008ba4:	f7fe fba1 	bl	80072ea <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008ba8:	4b0a      	ldr	r3, [pc, #40]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	68ba      	ldr	r2, [r7, #8]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d202      	bcs.n	8008bb8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bb2:	4a08      	ldr	r2, [pc, #32]	; (8008bd4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	6013      	str	r3, [r2, #0]
}
 8008bb8:	bf00      	nop
 8008bba:	3710      	adds	r7, #16
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	200012d8 	.word	0x200012d8
 8008bc4:	20000e00 	.word	0x20000e00
 8008bc8:	200012c0 	.word	0x200012c0
 8008bcc:	20001290 	.word	0x20001290
 8008bd0:	2000128c 	.word	0x2000128c
 8008bd4:	200012f4 	.word	0x200012f4

08008bd8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b08a      	sub	sp, #40	; 0x28
 8008bdc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008bde:	2300      	movs	r3, #0
 8008be0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008be2:	f000 fb07 	bl	80091f4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008be6:	4b1c      	ldr	r3, [pc, #112]	; (8008c58 <xTimerCreateTimerTask+0x80>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d021      	beq.n	8008c32 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008bf6:	1d3a      	adds	r2, r7, #4
 8008bf8:	f107 0108 	add.w	r1, r7, #8
 8008bfc:	f107 030c 	add.w	r3, r7, #12
 8008c00:	4618      	mov	r0, r3
 8008c02:	f7fe fb07 	bl	8007214 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c06:	6879      	ldr	r1, [r7, #4]
 8008c08:	68bb      	ldr	r3, [r7, #8]
 8008c0a:	68fa      	ldr	r2, [r7, #12]
 8008c0c:	9202      	str	r2, [sp, #8]
 8008c0e:	9301      	str	r3, [sp, #4]
 8008c10:	2302      	movs	r3, #2
 8008c12:	9300      	str	r3, [sp, #0]
 8008c14:	2300      	movs	r3, #0
 8008c16:	460a      	mov	r2, r1
 8008c18:	4910      	ldr	r1, [pc, #64]	; (8008c5c <xTimerCreateTimerTask+0x84>)
 8008c1a:	4811      	ldr	r0, [pc, #68]	; (8008c60 <xTimerCreateTimerTask+0x88>)
 8008c1c:	f7ff f8b4 	bl	8007d88 <xTaskCreateStatic>
 8008c20:	4603      	mov	r3, r0
 8008c22:	4a10      	ldr	r2, [pc, #64]	; (8008c64 <xTimerCreateTimerTask+0x8c>)
 8008c24:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c26:	4b0f      	ldr	r3, [pc, #60]	; (8008c64 <xTimerCreateTimerTask+0x8c>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d001      	beq.n	8008c32 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c2e:	2301      	movs	r3, #1
 8008c30:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c32:	697b      	ldr	r3, [r7, #20]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d10a      	bne.n	8008c4e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c3c:	f383 8811 	msr	BASEPRI, r3
 8008c40:	f3bf 8f6f 	isb	sy
 8008c44:	f3bf 8f4f 	dsb	sy
 8008c48:	613b      	str	r3, [r7, #16]
}
 8008c4a:	bf00      	nop
 8008c4c:	e7fe      	b.n	8008c4c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c4e:	697b      	ldr	r3, [r7, #20]
}
 8008c50:	4618      	mov	r0, r3
 8008c52:	3718      	adds	r7, #24
 8008c54:	46bd      	mov	sp, r7
 8008c56:	bd80      	pop	{r7, pc}
 8008c58:	20001330 	.word	0x20001330
 8008c5c:	0800a554 	.word	0x0800a554
 8008c60:	08008d9d 	.word	0x08008d9d
 8008c64:	20001334 	.word	0x20001334

08008c68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b08a      	sub	sp, #40	; 0x28
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	60f8      	str	r0, [r7, #12]
 8008c70:	60b9      	str	r1, [r7, #8]
 8008c72:	607a      	str	r2, [r7, #4]
 8008c74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008c76:	2300      	movs	r3, #0
 8008c78:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	d10a      	bne.n	8008c96 <xTimerGenericCommand+0x2e>
	__asm volatile
 8008c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c84:	f383 8811 	msr	BASEPRI, r3
 8008c88:	f3bf 8f6f 	isb	sy
 8008c8c:	f3bf 8f4f 	dsb	sy
 8008c90:	623b      	str	r3, [r7, #32]
}
 8008c92:	bf00      	nop
 8008c94:	e7fe      	b.n	8008c94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008c96:	4b1a      	ldr	r3, [pc, #104]	; (8008d00 <xTimerGenericCommand+0x98>)
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d02a      	beq.n	8008cf4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008c9e:	68bb      	ldr	r3, [r7, #8]
 8008ca0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008caa:	68bb      	ldr	r3, [r7, #8]
 8008cac:	2b05      	cmp	r3, #5
 8008cae:	dc18      	bgt.n	8008ce2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cb0:	f7ff feb2 	bl	8008a18 <xTaskGetSchedulerState>
 8008cb4:	4603      	mov	r3, r0
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d109      	bne.n	8008cce <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cba:	4b11      	ldr	r3, [pc, #68]	; (8008d00 <xTimerGenericCommand+0x98>)
 8008cbc:	6818      	ldr	r0, [r3, #0]
 8008cbe:	f107 0110 	add.w	r1, r7, #16
 8008cc2:	2300      	movs	r3, #0
 8008cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc6:	f7fe fc77 	bl	80075b8 <xQueueGenericSend>
 8008cca:	6278      	str	r0, [r7, #36]	; 0x24
 8008ccc:	e012      	b.n	8008cf4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008cce:	4b0c      	ldr	r3, [pc, #48]	; (8008d00 <xTimerGenericCommand+0x98>)
 8008cd0:	6818      	ldr	r0, [r3, #0]
 8008cd2:	f107 0110 	add.w	r1, r7, #16
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	2200      	movs	r2, #0
 8008cda:	f7fe fc6d 	bl	80075b8 <xQueueGenericSend>
 8008cde:	6278      	str	r0, [r7, #36]	; 0x24
 8008ce0:	e008      	b.n	8008cf4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008ce2:	4b07      	ldr	r3, [pc, #28]	; (8008d00 <xTimerGenericCommand+0x98>)
 8008ce4:	6818      	ldr	r0, [r3, #0]
 8008ce6:	f107 0110 	add.w	r1, r7, #16
 8008cea:	2300      	movs	r3, #0
 8008cec:	683a      	ldr	r2, [r7, #0]
 8008cee:	f7fe fd61 	bl	80077b4 <xQueueGenericSendFromISR>
 8008cf2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	3728      	adds	r7, #40	; 0x28
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	bd80      	pop	{r7, pc}
 8008cfe:	bf00      	nop
 8008d00:	20001330 	.word	0x20001330

08008d04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af02      	add	r7, sp, #8
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d0e:	4b22      	ldr	r3, [pc, #136]	; (8008d98 <prvProcessExpiredTimer+0x94>)
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	68db      	ldr	r3, [r3, #12]
 8008d14:	68db      	ldr	r3, [r3, #12]
 8008d16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d18:	697b      	ldr	r3, [r7, #20]
 8008d1a:	3304      	adds	r3, #4
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	f7fe fb1d 	bl	800735c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d22:	697b      	ldr	r3, [r7, #20]
 8008d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d28:	f003 0304 	and.w	r3, r3, #4
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d022      	beq.n	8008d76 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d30:	697b      	ldr	r3, [r7, #20]
 8008d32:	699a      	ldr	r2, [r3, #24]
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	18d1      	adds	r1, r2, r3
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	683a      	ldr	r2, [r7, #0]
 8008d3c:	6978      	ldr	r0, [r7, #20]
 8008d3e:	f000 f8d1 	bl	8008ee4 <prvInsertTimerInActiveList>
 8008d42:	4603      	mov	r3, r0
 8008d44:	2b00      	cmp	r3, #0
 8008d46:	d01f      	beq.n	8008d88 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d48:	2300      	movs	r3, #0
 8008d4a:	9300      	str	r3, [sp, #0]
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	687a      	ldr	r2, [r7, #4]
 8008d50:	2100      	movs	r1, #0
 8008d52:	6978      	ldr	r0, [r7, #20]
 8008d54:	f7ff ff88 	bl	8008c68 <xTimerGenericCommand>
 8008d58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d113      	bne.n	8008d88 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8008d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d64:	f383 8811 	msr	BASEPRI, r3
 8008d68:	f3bf 8f6f 	isb	sy
 8008d6c:	f3bf 8f4f 	dsb	sy
 8008d70:	60fb      	str	r3, [r7, #12]
}
 8008d72:	bf00      	nop
 8008d74:	e7fe      	b.n	8008d74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008d76:	697b      	ldr	r3, [r7, #20]
 8008d78:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008d7c:	f023 0301 	bic.w	r3, r3, #1
 8008d80:	b2da      	uxtb	r2, r3
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	6a1b      	ldr	r3, [r3, #32]
 8008d8c:	6978      	ldr	r0, [r7, #20]
 8008d8e:	4798      	blx	r3
}
 8008d90:	bf00      	nop
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	20001328 	.word	0x20001328

08008d9c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	b084      	sub	sp, #16
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008da4:	f107 0308 	add.w	r3, r7, #8
 8008da8:	4618      	mov	r0, r3
 8008daa:	f000 f857 	bl	8008e5c <prvGetNextExpireTime>
 8008dae:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008db0:	68bb      	ldr	r3, [r7, #8]
 8008db2:	4619      	mov	r1, r3
 8008db4:	68f8      	ldr	r0, [r7, #12]
 8008db6:	f000 f803 	bl	8008dc0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dba:	f000 f8d5 	bl	8008f68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008dbe:	e7f1      	b.n	8008da4 <prvTimerTask+0x8>

08008dc0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b084      	sub	sp, #16
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	6078      	str	r0, [r7, #4]
 8008dc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008dca:	f7ff fa39 	bl	8008240 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008dce:	f107 0308 	add.w	r3, r7, #8
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 f866 	bl	8008ea4 <prvSampleTimeNow>
 8008dd8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d130      	bne.n	8008e42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008de0:	683b      	ldr	r3, [r7, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d10a      	bne.n	8008dfc <prvProcessTimerOrBlockTask+0x3c>
 8008de6:	687a      	ldr	r2, [r7, #4]
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d806      	bhi.n	8008dfc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008dee:	f7ff fa35 	bl	800825c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008df2:	68f9      	ldr	r1, [r7, #12]
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f7ff ff85 	bl	8008d04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008dfa:	e024      	b.n	8008e46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008dfc:	683b      	ldr	r3, [r7, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d008      	beq.n	8008e14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e02:	4b13      	ldr	r3, [pc, #76]	; (8008e50 <prvProcessTimerOrBlockTask+0x90>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d101      	bne.n	8008e10 <prvProcessTimerOrBlockTask+0x50>
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e000      	b.n	8008e12 <prvProcessTimerOrBlockTask+0x52>
 8008e10:	2300      	movs	r3, #0
 8008e12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e14:	4b0f      	ldr	r3, [pc, #60]	; (8008e54 <prvProcessTimerOrBlockTask+0x94>)
 8008e16:	6818      	ldr	r0, [r3, #0]
 8008e18:	687a      	ldr	r2, [r7, #4]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	1ad3      	subs	r3, r2, r3
 8008e1e:	683a      	ldr	r2, [r7, #0]
 8008e20:	4619      	mov	r1, r3
 8008e22:	f7fe ff7d 	bl	8007d20 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e26:	f7ff fa19 	bl	800825c <xTaskResumeAll>
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	d10a      	bne.n	8008e46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e30:	4b09      	ldr	r3, [pc, #36]	; (8008e58 <prvProcessTimerOrBlockTask+0x98>)
 8008e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e36:	601a      	str	r2, [r3, #0]
 8008e38:	f3bf 8f4f 	dsb	sy
 8008e3c:	f3bf 8f6f 	isb	sy
}
 8008e40:	e001      	b.n	8008e46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e42:	f7ff fa0b 	bl	800825c <xTaskResumeAll>
}
 8008e46:	bf00      	nop
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}
 8008e4e:	bf00      	nop
 8008e50:	2000132c 	.word	0x2000132c
 8008e54:	20001330 	.word	0x20001330
 8008e58:	e000ed04 	.word	0xe000ed04

08008e5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b085      	sub	sp, #20
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008e64:	4b0e      	ldr	r3, [pc, #56]	; (8008ea0 <prvGetNextExpireTime+0x44>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d101      	bne.n	8008e72 <prvGetNextExpireTime+0x16>
 8008e6e:	2201      	movs	r2, #1
 8008e70:	e000      	b.n	8008e74 <prvGetNextExpireTime+0x18>
 8008e72:	2200      	movs	r2, #0
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d105      	bne.n	8008e8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008e80:	4b07      	ldr	r3, [pc, #28]	; (8008ea0 <prvGetNextExpireTime+0x44>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	68db      	ldr	r3, [r3, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	60fb      	str	r3, [r7, #12]
 8008e8a:	e001      	b.n	8008e90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008e8c:	2300      	movs	r3, #0
 8008e8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008e90:	68fb      	ldr	r3, [r7, #12]
}
 8008e92:	4618      	mov	r0, r3
 8008e94:	3714      	adds	r7, #20
 8008e96:	46bd      	mov	sp, r7
 8008e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	20001328 	.word	0x20001328

08008ea4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b084      	sub	sp, #16
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008eac:	f7ff fa74 	bl	8008398 <xTaskGetTickCount>
 8008eb0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008eb2:	4b0b      	ldr	r3, [pc, #44]	; (8008ee0 <prvSampleTimeNow+0x3c>)
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	68fa      	ldr	r2, [r7, #12]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d205      	bcs.n	8008ec8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008ebc:	f000 f936 	bl	800912c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2201      	movs	r2, #1
 8008ec4:	601a      	str	r2, [r3, #0]
 8008ec6:	e002      	b.n	8008ece <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008ece:	4a04      	ldr	r2, [pc, #16]	; (8008ee0 <prvSampleTimeNow+0x3c>)
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008ed4:	68fb      	ldr	r3, [r7, #12]
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3710      	adds	r7, #16
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	20001338 	.word	0x20001338

08008ee4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	60f8      	str	r0, [r7, #12]
 8008eec:	60b9      	str	r1, [r7, #8]
 8008eee:	607a      	str	r2, [r7, #4]
 8008ef0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008ef2:	2300      	movs	r3, #0
 8008ef4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	68ba      	ldr	r2, [r7, #8]
 8008efa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f02:	68ba      	ldr	r2, [r7, #8]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	429a      	cmp	r2, r3
 8008f08:	d812      	bhi.n	8008f30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f0a:	687a      	ldr	r2, [r7, #4]
 8008f0c:	683b      	ldr	r3, [r7, #0]
 8008f0e:	1ad2      	subs	r2, r2, r3
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	699b      	ldr	r3, [r3, #24]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d302      	bcc.n	8008f1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	617b      	str	r3, [r7, #20]
 8008f1c:	e01b      	b.n	8008f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f1e:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <prvInsertTimerInActiveList+0x7c>)
 8008f20:	681a      	ldr	r2, [r3, #0]
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	3304      	adds	r3, #4
 8008f26:	4619      	mov	r1, r3
 8008f28:	4610      	mov	r0, r2
 8008f2a:	f7fe f9de 	bl	80072ea <vListInsert>
 8008f2e:	e012      	b.n	8008f56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f30:	687a      	ldr	r2, [r7, #4]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	d206      	bcs.n	8008f46 <prvInsertTimerInActiveList+0x62>
 8008f38:	68ba      	ldr	r2, [r7, #8]
 8008f3a:	683b      	ldr	r3, [r7, #0]
 8008f3c:	429a      	cmp	r2, r3
 8008f3e:	d302      	bcc.n	8008f46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f40:	2301      	movs	r3, #1
 8008f42:	617b      	str	r3, [r7, #20]
 8008f44:	e007      	b.n	8008f56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f46:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <prvInsertTimerInActiveList+0x80>)
 8008f48:	681a      	ldr	r2, [r3, #0]
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	3304      	adds	r3, #4
 8008f4e:	4619      	mov	r1, r3
 8008f50:	4610      	mov	r0, r2
 8008f52:	f7fe f9ca 	bl	80072ea <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f56:	697b      	ldr	r3, [r7, #20]
}
 8008f58:	4618      	mov	r0, r3
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	2000132c 	.word	0x2000132c
 8008f64:	20001328 	.word	0x20001328

08008f68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	b08e      	sub	sp, #56	; 0x38
 8008f6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008f6e:	e0ca      	b.n	8009106 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	da18      	bge.n	8008fa8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008f76:	1d3b      	adds	r3, r7, #4
 8008f78:	3304      	adds	r3, #4
 8008f7a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10a      	bne.n	8008f98 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	61fb      	str	r3, [r7, #28]
}
 8008f94:	bf00      	nop
 8008f96:	e7fe      	b.n	8008f96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f9e:	6850      	ldr	r0, [r2, #4]
 8008fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008fa2:	6892      	ldr	r2, [r2, #8]
 8008fa4:	4611      	mov	r1, r2
 8008fa6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	f2c0 80aa 	blt.w	8009104 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008fb0:	68fb      	ldr	r3, [r7, #12]
 8008fb2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fb6:	695b      	ldr	r3, [r3, #20]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d004      	beq.n	8008fc6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008fbe:	3304      	adds	r3, #4
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	f7fe f9cb 	bl	800735c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008fc6:	463b      	mov	r3, r7
 8008fc8:	4618      	mov	r0, r3
 8008fca:	f7ff ff6b 	bl	8008ea4 <prvSampleTimeNow>
 8008fce:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b09      	cmp	r3, #9
 8008fd4:	f200 8097 	bhi.w	8009106 <prvProcessReceivedCommands+0x19e>
 8008fd8:	a201      	add	r2, pc, #4	; (adr r2, 8008fe0 <prvProcessReceivedCommands+0x78>)
 8008fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008fde:	bf00      	nop
 8008fe0:	08009009 	.word	0x08009009
 8008fe4:	08009009 	.word	0x08009009
 8008fe8:	08009009 	.word	0x08009009
 8008fec:	0800907d 	.word	0x0800907d
 8008ff0:	08009091 	.word	0x08009091
 8008ff4:	080090db 	.word	0x080090db
 8008ff8:	08009009 	.word	0x08009009
 8008ffc:	08009009 	.word	0x08009009
 8009000:	0800907d 	.word	0x0800907d
 8009004:	08009091 	.word	0x08009091
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800900a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800900e:	f043 0301 	orr.w	r3, r3, #1
 8009012:	b2da      	uxtb	r2, r3
 8009014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009016:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800901a:	68ba      	ldr	r2, [r7, #8]
 800901c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901e:	699b      	ldr	r3, [r3, #24]
 8009020:	18d1      	adds	r1, r2, r3
 8009022:	68bb      	ldr	r3, [r7, #8]
 8009024:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009026:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009028:	f7ff ff5c 	bl	8008ee4 <prvInsertTimerInActiveList>
 800902c:	4603      	mov	r3, r0
 800902e:	2b00      	cmp	r3, #0
 8009030:	d069      	beq.n	8009106 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009032:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009034:	6a1b      	ldr	r3, [r3, #32]
 8009036:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009038:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800903a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800903c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009040:	f003 0304 	and.w	r3, r3, #4
 8009044:	2b00      	cmp	r3, #0
 8009046:	d05e      	beq.n	8009106 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009048:	68ba      	ldr	r2, [r7, #8]
 800904a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800904c:	699b      	ldr	r3, [r3, #24]
 800904e:	441a      	add	r2, r3
 8009050:	2300      	movs	r3, #0
 8009052:	9300      	str	r3, [sp, #0]
 8009054:	2300      	movs	r3, #0
 8009056:	2100      	movs	r1, #0
 8009058:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800905a:	f7ff fe05 	bl	8008c68 <xTimerGenericCommand>
 800905e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009060:	6a3b      	ldr	r3, [r7, #32]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d14f      	bne.n	8009106 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8009066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800906a:	f383 8811 	msr	BASEPRI, r3
 800906e:	f3bf 8f6f 	isb	sy
 8009072:	f3bf 8f4f 	dsb	sy
 8009076:	61bb      	str	r3, [r7, #24]
}
 8009078:	bf00      	nop
 800907a:	e7fe      	b.n	800907a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800907c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800907e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009082:	f023 0301 	bic.w	r3, r3, #1
 8009086:	b2da      	uxtb	r2, r3
 8009088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800908a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800908e:	e03a      	b.n	8009106 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009092:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009096:	f043 0301 	orr.w	r3, r3, #1
 800909a:	b2da      	uxtb	r2, r3
 800909c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800909e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090a2:	68ba      	ldr	r2, [r7, #8]
 80090a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d10a      	bne.n	80090c6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80090b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090b4:	f383 8811 	msr	BASEPRI, r3
 80090b8:	f3bf 8f6f 	isb	sy
 80090bc:	f3bf 8f4f 	dsb	sy
 80090c0:	617b      	str	r3, [r7, #20]
}
 80090c2:	bf00      	nop
 80090c4:	e7fe      	b.n	80090c4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80090c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090c8:	699a      	ldr	r2, [r3, #24]
 80090ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090cc:	18d1      	adds	r1, r2, r3
 80090ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80090d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090d4:	f7ff ff06 	bl	8008ee4 <prvInsertTimerInActiveList>
					break;
 80090d8:	e015      	b.n	8009106 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80090da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090e0:	f003 0302 	and.w	r3, r3, #2
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d103      	bne.n	80090f0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80090e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80090ea:	f000 fbe1 	bl	80098b0 <vPortFree>
 80090ee:	e00a      	b.n	8009106 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80090f6:	f023 0301 	bic.w	r3, r3, #1
 80090fa:	b2da      	uxtb	r2, r3
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009102:	e000      	b.n	8009106 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009104:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009106:	4b08      	ldr	r3, [pc, #32]	; (8009128 <prvProcessReceivedCommands+0x1c0>)
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	1d39      	adds	r1, r7, #4
 800910c:	2200      	movs	r2, #0
 800910e:	4618      	mov	r0, r3
 8009110:	f7fe fbec 	bl	80078ec <xQueueReceive>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	f47f af2a 	bne.w	8008f70 <prvProcessReceivedCommands+0x8>
	}
}
 800911c:	bf00      	nop
 800911e:	bf00      	nop
 8009120:	3730      	adds	r7, #48	; 0x30
 8009122:	46bd      	mov	sp, r7
 8009124:	bd80      	pop	{r7, pc}
 8009126:	bf00      	nop
 8009128:	20001330 	.word	0x20001330

0800912c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800912c:	b580      	push	{r7, lr}
 800912e:	b088      	sub	sp, #32
 8009130:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009132:	e048      	b.n	80091c6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009134:	4b2d      	ldr	r3, [pc, #180]	; (80091ec <prvSwitchTimerLists+0xc0>)
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800913e:	4b2b      	ldr	r3, [pc, #172]	; (80091ec <prvSwitchTimerLists+0xc0>)
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	68db      	ldr	r3, [r3, #12]
 8009146:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	3304      	adds	r3, #4
 800914c:	4618      	mov	r0, r3
 800914e:	f7fe f905 	bl	800735c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	6a1b      	ldr	r3, [r3, #32]
 8009156:	68f8      	ldr	r0, [r7, #12]
 8009158:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009160:	f003 0304 	and.w	r3, r3, #4
 8009164:	2b00      	cmp	r3, #0
 8009166:	d02e      	beq.n	80091c6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	699b      	ldr	r3, [r3, #24]
 800916c:	693a      	ldr	r2, [r7, #16]
 800916e:	4413      	add	r3, r2
 8009170:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009172:	68ba      	ldr	r2, [r7, #8]
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	429a      	cmp	r2, r3
 8009178:	d90e      	bls.n	8009198 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	68ba      	ldr	r2, [r7, #8]
 800917e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	68fa      	ldr	r2, [r7, #12]
 8009184:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009186:	4b19      	ldr	r3, [pc, #100]	; (80091ec <prvSwitchTimerLists+0xc0>)
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	3304      	adds	r3, #4
 800918e:	4619      	mov	r1, r3
 8009190:	4610      	mov	r0, r2
 8009192:	f7fe f8aa 	bl	80072ea <vListInsert>
 8009196:	e016      	b.n	80091c6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009198:	2300      	movs	r3, #0
 800919a:	9300      	str	r3, [sp, #0]
 800919c:	2300      	movs	r3, #0
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	2100      	movs	r1, #0
 80091a2:	68f8      	ldr	r0, [r7, #12]
 80091a4:	f7ff fd60 	bl	8008c68 <xTimerGenericCommand>
 80091a8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d10a      	bne.n	80091c6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80091b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b4:	f383 8811 	msr	BASEPRI, r3
 80091b8:	f3bf 8f6f 	isb	sy
 80091bc:	f3bf 8f4f 	dsb	sy
 80091c0:	603b      	str	r3, [r7, #0]
}
 80091c2:	bf00      	nop
 80091c4:	e7fe      	b.n	80091c4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80091c6:	4b09      	ldr	r3, [pc, #36]	; (80091ec <prvSwitchTimerLists+0xc0>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d1b1      	bne.n	8009134 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80091d0:	4b06      	ldr	r3, [pc, #24]	; (80091ec <prvSwitchTimerLists+0xc0>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80091d6:	4b06      	ldr	r3, [pc, #24]	; (80091f0 <prvSwitchTimerLists+0xc4>)
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	4a04      	ldr	r2, [pc, #16]	; (80091ec <prvSwitchTimerLists+0xc0>)
 80091dc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80091de:	4a04      	ldr	r2, [pc, #16]	; (80091f0 <prvSwitchTimerLists+0xc4>)
 80091e0:	697b      	ldr	r3, [r7, #20]
 80091e2:	6013      	str	r3, [r2, #0]
}
 80091e4:	bf00      	nop
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}
 80091ec:	20001328 	.word	0x20001328
 80091f0:	2000132c 	.word	0x2000132c

080091f4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b082      	sub	sp, #8
 80091f8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80091fa:	f000 f96b 	bl	80094d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80091fe:	4b15      	ldr	r3, [pc, #84]	; (8009254 <prvCheckForValidListAndQueue+0x60>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d120      	bne.n	8009248 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009206:	4814      	ldr	r0, [pc, #80]	; (8009258 <prvCheckForValidListAndQueue+0x64>)
 8009208:	f7fe f81e 	bl	8007248 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800920c:	4813      	ldr	r0, [pc, #76]	; (800925c <prvCheckForValidListAndQueue+0x68>)
 800920e:	f7fe f81b 	bl	8007248 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009212:	4b13      	ldr	r3, [pc, #76]	; (8009260 <prvCheckForValidListAndQueue+0x6c>)
 8009214:	4a10      	ldr	r2, [pc, #64]	; (8009258 <prvCheckForValidListAndQueue+0x64>)
 8009216:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009218:	4b12      	ldr	r3, [pc, #72]	; (8009264 <prvCheckForValidListAndQueue+0x70>)
 800921a:	4a10      	ldr	r2, [pc, #64]	; (800925c <prvCheckForValidListAndQueue+0x68>)
 800921c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800921e:	2300      	movs	r3, #0
 8009220:	9300      	str	r3, [sp, #0]
 8009222:	4b11      	ldr	r3, [pc, #68]	; (8009268 <prvCheckForValidListAndQueue+0x74>)
 8009224:	4a11      	ldr	r2, [pc, #68]	; (800926c <prvCheckForValidListAndQueue+0x78>)
 8009226:	2110      	movs	r1, #16
 8009228:	200a      	movs	r0, #10
 800922a:	f7fe f929 	bl	8007480 <xQueueGenericCreateStatic>
 800922e:	4603      	mov	r3, r0
 8009230:	4a08      	ldr	r2, [pc, #32]	; (8009254 <prvCheckForValidListAndQueue+0x60>)
 8009232:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009234:	4b07      	ldr	r3, [pc, #28]	; (8009254 <prvCheckForValidListAndQueue+0x60>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d005      	beq.n	8009248 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800923c:	4b05      	ldr	r3, [pc, #20]	; (8009254 <prvCheckForValidListAndQueue+0x60>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	490b      	ldr	r1, [pc, #44]	; (8009270 <prvCheckForValidListAndQueue+0x7c>)
 8009242:	4618      	mov	r0, r3
 8009244:	f7fe fd42 	bl	8007ccc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009248:	f000 f974 	bl	8009534 <vPortExitCritical>
}
 800924c:	bf00      	nop
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}
 8009252:	bf00      	nop
 8009254:	20001330 	.word	0x20001330
 8009258:	20001300 	.word	0x20001300
 800925c:	20001314 	.word	0x20001314
 8009260:	20001328 	.word	0x20001328
 8009264:	2000132c 	.word	0x2000132c
 8009268:	200013dc 	.word	0x200013dc
 800926c:	2000133c 	.word	0x2000133c
 8009270:	0800a55c 	.word	0x0800a55c

08009274 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009274:	b480      	push	{r7}
 8009276:	b085      	sub	sp, #20
 8009278:	af00      	add	r7, sp, #0
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	3b04      	subs	r3, #4
 8009284:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800928c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	3b04      	subs	r3, #4
 8009292:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	f023 0201 	bic.w	r2, r3, #1
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	3b04      	subs	r3, #4
 80092a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092a4:	4a0c      	ldr	r2, [pc, #48]	; (80092d8 <pxPortInitialiseStack+0x64>)
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	3b14      	subs	r3, #20
 80092ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80092b0:	687a      	ldr	r2, [r7, #4]
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80092b6:	68fb      	ldr	r3, [r7, #12]
 80092b8:	3b04      	subs	r3, #4
 80092ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	f06f 0202 	mvn.w	r2, #2
 80092c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	3b20      	subs	r3, #32
 80092c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80092ca:	68fb      	ldr	r3, [r7, #12]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr
 80092d8:	080092dd 	.word	0x080092dd

080092dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80092e2:	2300      	movs	r3, #0
 80092e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80092e6:	4b12      	ldr	r3, [pc, #72]	; (8009330 <prvTaskExitError+0x54>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092ee:	d00a      	beq.n	8009306 <prvTaskExitError+0x2a>
	__asm volatile
 80092f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092f4:	f383 8811 	msr	BASEPRI, r3
 80092f8:	f3bf 8f6f 	isb	sy
 80092fc:	f3bf 8f4f 	dsb	sy
 8009300:	60fb      	str	r3, [r7, #12]
}
 8009302:	bf00      	nop
 8009304:	e7fe      	b.n	8009304 <prvTaskExitError+0x28>
	__asm volatile
 8009306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800930a:	f383 8811 	msr	BASEPRI, r3
 800930e:	f3bf 8f6f 	isb	sy
 8009312:	f3bf 8f4f 	dsb	sy
 8009316:	60bb      	str	r3, [r7, #8]
}
 8009318:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800931a:	bf00      	nop
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d0fc      	beq.n	800931c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009322:	bf00      	nop
 8009324:	bf00      	nop
 8009326:	3714      	adds	r7, #20
 8009328:	46bd      	mov	sp, r7
 800932a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932e:	4770      	bx	lr
 8009330:	20000014 	.word	0x20000014
	...

08009340 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009340:	4b07      	ldr	r3, [pc, #28]	; (8009360 <pxCurrentTCBConst2>)
 8009342:	6819      	ldr	r1, [r3, #0]
 8009344:	6808      	ldr	r0, [r1, #0]
 8009346:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800934a:	f380 8809 	msr	PSP, r0
 800934e:	f3bf 8f6f 	isb	sy
 8009352:	f04f 0000 	mov.w	r0, #0
 8009356:	f380 8811 	msr	BASEPRI, r0
 800935a:	4770      	bx	lr
 800935c:	f3af 8000 	nop.w

08009360 <pxCurrentTCBConst2>:
 8009360:	20000e00 	.word	0x20000e00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009364:	bf00      	nop
 8009366:	bf00      	nop

08009368 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009368:	4808      	ldr	r0, [pc, #32]	; (800938c <prvPortStartFirstTask+0x24>)
 800936a:	6800      	ldr	r0, [r0, #0]
 800936c:	6800      	ldr	r0, [r0, #0]
 800936e:	f380 8808 	msr	MSP, r0
 8009372:	f04f 0000 	mov.w	r0, #0
 8009376:	f380 8814 	msr	CONTROL, r0
 800937a:	b662      	cpsie	i
 800937c:	b661      	cpsie	f
 800937e:	f3bf 8f4f 	dsb	sy
 8009382:	f3bf 8f6f 	isb	sy
 8009386:	df00      	svc	0
 8009388:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800938a:	bf00      	nop
 800938c:	e000ed08 	.word	0xe000ed08

08009390 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009390:	b580      	push	{r7, lr}
 8009392:	b086      	sub	sp, #24
 8009394:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009396:	4b46      	ldr	r3, [pc, #280]	; (80094b0 <xPortStartScheduler+0x120>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	4a46      	ldr	r2, [pc, #280]	; (80094b4 <xPortStartScheduler+0x124>)
 800939c:	4293      	cmp	r3, r2
 800939e:	d10a      	bne.n	80093b6 <xPortStartScheduler+0x26>
	__asm volatile
 80093a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093a4:	f383 8811 	msr	BASEPRI, r3
 80093a8:	f3bf 8f6f 	isb	sy
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	613b      	str	r3, [r7, #16]
}
 80093b2:	bf00      	nop
 80093b4:	e7fe      	b.n	80093b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80093b6:	4b3e      	ldr	r3, [pc, #248]	; (80094b0 <xPortStartScheduler+0x120>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	4a3f      	ldr	r2, [pc, #252]	; (80094b8 <xPortStartScheduler+0x128>)
 80093bc:	4293      	cmp	r3, r2
 80093be:	d10a      	bne.n	80093d6 <xPortStartScheduler+0x46>
	__asm volatile
 80093c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80093c4:	f383 8811 	msr	BASEPRI, r3
 80093c8:	f3bf 8f6f 	isb	sy
 80093cc:	f3bf 8f4f 	dsb	sy
 80093d0:	60fb      	str	r3, [r7, #12]
}
 80093d2:	bf00      	nop
 80093d4:	e7fe      	b.n	80093d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80093d6:	4b39      	ldr	r3, [pc, #228]	; (80094bc <xPortStartScheduler+0x12c>)
 80093d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80093da:	697b      	ldr	r3, [r7, #20]
 80093dc:	781b      	ldrb	r3, [r3, #0]
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80093e2:	697b      	ldr	r3, [r7, #20]
 80093e4:	22ff      	movs	r2, #255	; 0xff
 80093e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80093e8:	697b      	ldr	r3, [r7, #20]
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	b2db      	uxtb	r3, r3
 80093ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80093f0:	78fb      	ldrb	r3, [r7, #3]
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80093f8:	b2da      	uxtb	r2, r3
 80093fa:	4b31      	ldr	r3, [pc, #196]	; (80094c0 <xPortStartScheduler+0x130>)
 80093fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80093fe:	4b31      	ldr	r3, [pc, #196]	; (80094c4 <xPortStartScheduler+0x134>)
 8009400:	2207      	movs	r2, #7
 8009402:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009404:	e009      	b.n	800941a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009406:	4b2f      	ldr	r3, [pc, #188]	; (80094c4 <xPortStartScheduler+0x134>)
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	3b01      	subs	r3, #1
 800940c:	4a2d      	ldr	r2, [pc, #180]	; (80094c4 <xPortStartScheduler+0x134>)
 800940e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009410:	78fb      	ldrb	r3, [r7, #3]
 8009412:	b2db      	uxtb	r3, r3
 8009414:	005b      	lsls	r3, r3, #1
 8009416:	b2db      	uxtb	r3, r3
 8009418:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800941a:	78fb      	ldrb	r3, [r7, #3]
 800941c:	b2db      	uxtb	r3, r3
 800941e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009422:	2b80      	cmp	r3, #128	; 0x80
 8009424:	d0ef      	beq.n	8009406 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009426:	4b27      	ldr	r3, [pc, #156]	; (80094c4 <xPortStartScheduler+0x134>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	f1c3 0307 	rsb	r3, r3, #7
 800942e:	2b04      	cmp	r3, #4
 8009430:	d00a      	beq.n	8009448 <xPortStartScheduler+0xb8>
	__asm volatile
 8009432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009436:	f383 8811 	msr	BASEPRI, r3
 800943a:	f3bf 8f6f 	isb	sy
 800943e:	f3bf 8f4f 	dsb	sy
 8009442:	60bb      	str	r3, [r7, #8]
}
 8009444:	bf00      	nop
 8009446:	e7fe      	b.n	8009446 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009448:	4b1e      	ldr	r3, [pc, #120]	; (80094c4 <xPortStartScheduler+0x134>)
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	021b      	lsls	r3, r3, #8
 800944e:	4a1d      	ldr	r2, [pc, #116]	; (80094c4 <xPortStartScheduler+0x134>)
 8009450:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009452:	4b1c      	ldr	r3, [pc, #112]	; (80094c4 <xPortStartScheduler+0x134>)
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800945a:	4a1a      	ldr	r2, [pc, #104]	; (80094c4 <xPortStartScheduler+0x134>)
 800945c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	b2da      	uxtb	r2, r3
 8009462:	697b      	ldr	r3, [r7, #20]
 8009464:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009466:	4b18      	ldr	r3, [pc, #96]	; (80094c8 <xPortStartScheduler+0x138>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	4a17      	ldr	r2, [pc, #92]	; (80094c8 <xPortStartScheduler+0x138>)
 800946c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009470:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009472:	4b15      	ldr	r3, [pc, #84]	; (80094c8 <xPortStartScheduler+0x138>)
 8009474:	681b      	ldr	r3, [r3, #0]
 8009476:	4a14      	ldr	r2, [pc, #80]	; (80094c8 <xPortStartScheduler+0x138>)
 8009478:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800947c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800947e:	f000 f8dd 	bl	800963c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009482:	4b12      	ldr	r3, [pc, #72]	; (80094cc <xPortStartScheduler+0x13c>)
 8009484:	2200      	movs	r2, #0
 8009486:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009488:	f000 f8fc 	bl	8009684 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800948c:	4b10      	ldr	r3, [pc, #64]	; (80094d0 <xPortStartScheduler+0x140>)
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	4a0f      	ldr	r2, [pc, #60]	; (80094d0 <xPortStartScheduler+0x140>)
 8009492:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009496:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009498:	f7ff ff66 	bl	8009368 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800949c:	f7ff f846 	bl	800852c <vTaskSwitchContext>
	prvTaskExitError();
 80094a0:	f7ff ff1c 	bl	80092dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094a4:	2300      	movs	r3, #0
}
 80094a6:	4618      	mov	r0, r3
 80094a8:	3718      	adds	r7, #24
 80094aa:	46bd      	mov	sp, r7
 80094ac:	bd80      	pop	{r7, pc}
 80094ae:	bf00      	nop
 80094b0:	e000ed00 	.word	0xe000ed00
 80094b4:	410fc271 	.word	0x410fc271
 80094b8:	410fc270 	.word	0x410fc270
 80094bc:	e000e400 	.word	0xe000e400
 80094c0:	2000142c 	.word	0x2000142c
 80094c4:	20001430 	.word	0x20001430
 80094c8:	e000ed20 	.word	0xe000ed20
 80094cc:	20000014 	.word	0x20000014
 80094d0:	e000ef34 	.word	0xe000ef34

080094d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
	__asm volatile
 80094da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094de:	f383 8811 	msr	BASEPRI, r3
 80094e2:	f3bf 8f6f 	isb	sy
 80094e6:	f3bf 8f4f 	dsb	sy
 80094ea:	607b      	str	r3, [r7, #4]
}
 80094ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80094ee:	4b0f      	ldr	r3, [pc, #60]	; (800952c <vPortEnterCritical+0x58>)
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	3301      	adds	r3, #1
 80094f4:	4a0d      	ldr	r2, [pc, #52]	; (800952c <vPortEnterCritical+0x58>)
 80094f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80094f8:	4b0c      	ldr	r3, [pc, #48]	; (800952c <vPortEnterCritical+0x58>)
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	2b01      	cmp	r3, #1
 80094fe:	d10f      	bne.n	8009520 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009500:	4b0b      	ldr	r3, [pc, #44]	; (8009530 <vPortEnterCritical+0x5c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	b2db      	uxtb	r3, r3
 8009506:	2b00      	cmp	r3, #0
 8009508:	d00a      	beq.n	8009520 <vPortEnterCritical+0x4c>
	__asm volatile
 800950a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800950e:	f383 8811 	msr	BASEPRI, r3
 8009512:	f3bf 8f6f 	isb	sy
 8009516:	f3bf 8f4f 	dsb	sy
 800951a:	603b      	str	r3, [r7, #0]
}
 800951c:	bf00      	nop
 800951e:	e7fe      	b.n	800951e <vPortEnterCritical+0x4a>
	}
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	20000014 	.word	0x20000014
 8009530:	e000ed04 	.word	0xe000ed04

08009534 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009534:	b480      	push	{r7}
 8009536:	b083      	sub	sp, #12
 8009538:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800953a:	4b12      	ldr	r3, [pc, #72]	; (8009584 <vPortExitCritical+0x50>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	2b00      	cmp	r3, #0
 8009540:	d10a      	bne.n	8009558 <vPortExitCritical+0x24>
	__asm volatile
 8009542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009546:	f383 8811 	msr	BASEPRI, r3
 800954a:	f3bf 8f6f 	isb	sy
 800954e:	f3bf 8f4f 	dsb	sy
 8009552:	607b      	str	r3, [r7, #4]
}
 8009554:	bf00      	nop
 8009556:	e7fe      	b.n	8009556 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009558:	4b0a      	ldr	r3, [pc, #40]	; (8009584 <vPortExitCritical+0x50>)
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	3b01      	subs	r3, #1
 800955e:	4a09      	ldr	r2, [pc, #36]	; (8009584 <vPortExitCritical+0x50>)
 8009560:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009562:	4b08      	ldr	r3, [pc, #32]	; (8009584 <vPortExitCritical+0x50>)
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d105      	bne.n	8009576 <vPortExitCritical+0x42>
 800956a:	2300      	movs	r3, #0
 800956c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	f383 8811 	msr	BASEPRI, r3
}
 8009574:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20000014 	.word	0x20000014
	...

08009590 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009590:	f3ef 8009 	mrs	r0, PSP
 8009594:	f3bf 8f6f 	isb	sy
 8009598:	4b15      	ldr	r3, [pc, #84]	; (80095f0 <pxCurrentTCBConst>)
 800959a:	681a      	ldr	r2, [r3, #0]
 800959c:	f01e 0f10 	tst.w	lr, #16
 80095a0:	bf08      	it	eq
 80095a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095aa:	6010      	str	r0, [r2, #0]
 80095ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80095b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80095b4:	f380 8811 	msr	BASEPRI, r0
 80095b8:	f3bf 8f4f 	dsb	sy
 80095bc:	f3bf 8f6f 	isb	sy
 80095c0:	f7fe ffb4 	bl	800852c <vTaskSwitchContext>
 80095c4:	f04f 0000 	mov.w	r0, #0
 80095c8:	f380 8811 	msr	BASEPRI, r0
 80095cc:	bc09      	pop	{r0, r3}
 80095ce:	6819      	ldr	r1, [r3, #0]
 80095d0:	6808      	ldr	r0, [r1, #0]
 80095d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d6:	f01e 0f10 	tst.w	lr, #16
 80095da:	bf08      	it	eq
 80095dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80095e0:	f380 8809 	msr	PSP, r0
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	4770      	bx	lr
 80095ea:	bf00      	nop
 80095ec:	f3af 8000 	nop.w

080095f0 <pxCurrentTCBConst>:
 80095f0:	20000e00 	.word	0x20000e00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80095f4:	bf00      	nop
 80095f6:	bf00      	nop

080095f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80095f8:	b580      	push	{r7, lr}
 80095fa:	b082      	sub	sp, #8
 80095fc:	af00      	add	r7, sp, #0
	__asm volatile
 80095fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009602:	f383 8811 	msr	BASEPRI, r3
 8009606:	f3bf 8f6f 	isb	sy
 800960a:	f3bf 8f4f 	dsb	sy
 800960e:	607b      	str	r3, [r7, #4]
}
 8009610:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009612:	f7fe fed1 	bl	80083b8 <xTaskIncrementTick>
 8009616:	4603      	mov	r3, r0
 8009618:	2b00      	cmp	r3, #0
 800961a:	d003      	beq.n	8009624 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800961c:	4b06      	ldr	r3, [pc, #24]	; (8009638 <xPortSysTickHandler+0x40>)
 800961e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009622:	601a      	str	r2, [r3, #0]
 8009624:	2300      	movs	r3, #0
 8009626:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	f383 8811 	msr	BASEPRI, r3
}
 800962e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	e000ed04 	.word	0xe000ed04

0800963c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800963c:	b480      	push	{r7}
 800963e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009640:	4b0b      	ldr	r3, [pc, #44]	; (8009670 <vPortSetupTimerInterrupt+0x34>)
 8009642:	2200      	movs	r2, #0
 8009644:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009646:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <vPortSetupTimerInterrupt+0x38>)
 8009648:	2200      	movs	r2, #0
 800964a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800964c:	4b0a      	ldr	r3, [pc, #40]	; (8009678 <vPortSetupTimerInterrupt+0x3c>)
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a0a      	ldr	r2, [pc, #40]	; (800967c <vPortSetupTimerInterrupt+0x40>)
 8009652:	fba2 2303 	umull	r2, r3, r2, r3
 8009656:	099b      	lsrs	r3, r3, #6
 8009658:	4a09      	ldr	r2, [pc, #36]	; (8009680 <vPortSetupTimerInterrupt+0x44>)
 800965a:	3b01      	subs	r3, #1
 800965c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800965e:	4b04      	ldr	r3, [pc, #16]	; (8009670 <vPortSetupTimerInterrupt+0x34>)
 8009660:	2207      	movs	r2, #7
 8009662:	601a      	str	r2, [r3, #0]
}
 8009664:	bf00      	nop
 8009666:	46bd      	mov	sp, r7
 8009668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800966c:	4770      	bx	lr
 800966e:	bf00      	nop
 8009670:	e000e010 	.word	0xe000e010
 8009674:	e000e018 	.word	0xe000e018
 8009678:	20000008 	.word	0x20000008
 800967c:	10624dd3 	.word	0x10624dd3
 8009680:	e000e014 	.word	0xe000e014

08009684 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009684:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009694 <vPortEnableVFP+0x10>
 8009688:	6801      	ldr	r1, [r0, #0]
 800968a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800968e:	6001      	str	r1, [r0, #0]
 8009690:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009692:	bf00      	nop
 8009694:	e000ed88 	.word	0xe000ed88

08009698 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009698:	b480      	push	{r7}
 800969a:	b085      	sub	sp, #20
 800969c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800969e:	f3ef 8305 	mrs	r3, IPSR
 80096a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	2b0f      	cmp	r3, #15
 80096a8:	d914      	bls.n	80096d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096aa:	4a17      	ldr	r2, [pc, #92]	; (8009708 <vPortValidateInterruptPriority+0x70>)
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	4413      	add	r3, r2
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80096b4:	4b15      	ldr	r3, [pc, #84]	; (800970c <vPortValidateInterruptPriority+0x74>)
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	7afa      	ldrb	r2, [r7, #11]
 80096ba:	429a      	cmp	r2, r3
 80096bc:	d20a      	bcs.n	80096d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80096be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096c2:	f383 8811 	msr	BASEPRI, r3
 80096c6:	f3bf 8f6f 	isb	sy
 80096ca:	f3bf 8f4f 	dsb	sy
 80096ce:	607b      	str	r3, [r7, #4]
}
 80096d0:	bf00      	nop
 80096d2:	e7fe      	b.n	80096d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80096d4:	4b0e      	ldr	r3, [pc, #56]	; (8009710 <vPortValidateInterruptPriority+0x78>)
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80096dc:	4b0d      	ldr	r3, [pc, #52]	; (8009714 <vPortValidateInterruptPriority+0x7c>)
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	429a      	cmp	r2, r3
 80096e2:	d90a      	bls.n	80096fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80096e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096e8:	f383 8811 	msr	BASEPRI, r3
 80096ec:	f3bf 8f6f 	isb	sy
 80096f0:	f3bf 8f4f 	dsb	sy
 80096f4:	603b      	str	r3, [r7, #0]
}
 80096f6:	bf00      	nop
 80096f8:	e7fe      	b.n	80096f8 <vPortValidateInterruptPriority+0x60>
	}
 80096fa:	bf00      	nop
 80096fc:	3714      	adds	r7, #20
 80096fe:	46bd      	mov	sp, r7
 8009700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009704:	4770      	bx	lr
 8009706:	bf00      	nop
 8009708:	e000e3f0 	.word	0xe000e3f0
 800970c:	2000142c 	.word	0x2000142c
 8009710:	e000ed0c 	.word	0xe000ed0c
 8009714:	20001430 	.word	0x20001430

08009718 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b08a      	sub	sp, #40	; 0x28
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009720:	2300      	movs	r3, #0
 8009722:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009724:	f7fe fd8c 	bl	8008240 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009728:	4b5b      	ldr	r3, [pc, #364]	; (8009898 <pvPortMalloc+0x180>)
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d101      	bne.n	8009734 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009730:	f000 f920 	bl	8009974 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009734:	4b59      	ldr	r3, [pc, #356]	; (800989c <pvPortMalloc+0x184>)
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	4013      	ands	r3, r2
 800973c:	2b00      	cmp	r3, #0
 800973e:	f040 8093 	bne.w	8009868 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d01d      	beq.n	8009784 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009748:	2208      	movs	r2, #8
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	4413      	add	r3, r2
 800974e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	f003 0307 	and.w	r3, r3, #7
 8009756:	2b00      	cmp	r3, #0
 8009758:	d014      	beq.n	8009784 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f023 0307 	bic.w	r3, r3, #7
 8009760:	3308      	adds	r3, #8
 8009762:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f003 0307 	and.w	r3, r3, #7
 800976a:	2b00      	cmp	r3, #0
 800976c:	d00a      	beq.n	8009784 <pvPortMalloc+0x6c>
	__asm volatile
 800976e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009772:	f383 8811 	msr	BASEPRI, r3
 8009776:	f3bf 8f6f 	isb	sy
 800977a:	f3bf 8f4f 	dsb	sy
 800977e:	617b      	str	r3, [r7, #20]
}
 8009780:	bf00      	nop
 8009782:	e7fe      	b.n	8009782 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d06e      	beq.n	8009868 <pvPortMalloc+0x150>
 800978a:	4b45      	ldr	r3, [pc, #276]	; (80098a0 <pvPortMalloc+0x188>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	687a      	ldr	r2, [r7, #4]
 8009790:	429a      	cmp	r2, r3
 8009792:	d869      	bhi.n	8009868 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009794:	4b43      	ldr	r3, [pc, #268]	; (80098a4 <pvPortMalloc+0x18c>)
 8009796:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009798:	4b42      	ldr	r3, [pc, #264]	; (80098a4 <pvPortMalloc+0x18c>)
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800979e:	e004      	b.n	80097aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80097a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097ac:	685b      	ldr	r3, [r3, #4]
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	429a      	cmp	r2, r3
 80097b2:	d903      	bls.n	80097bc <pvPortMalloc+0xa4>
 80097b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097b6:	681b      	ldr	r3, [r3, #0]
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d1f1      	bne.n	80097a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80097bc:	4b36      	ldr	r3, [pc, #216]	; (8009898 <pvPortMalloc+0x180>)
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d050      	beq.n	8009868 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	2208      	movs	r2, #8
 80097cc:	4413      	add	r3, r2
 80097ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80097d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097d2:	681a      	ldr	r2, [r3, #0]
 80097d4:	6a3b      	ldr	r3, [r7, #32]
 80097d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80097d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097da:	685a      	ldr	r2, [r3, #4]
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	1ad2      	subs	r2, r2, r3
 80097e0:	2308      	movs	r3, #8
 80097e2:	005b      	lsls	r3, r3, #1
 80097e4:	429a      	cmp	r2, r3
 80097e6:	d91f      	bls.n	8009828 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80097e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	4413      	add	r3, r2
 80097ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097f0:	69bb      	ldr	r3, [r7, #24]
 80097f2:	f003 0307 	and.w	r3, r3, #7
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d00a      	beq.n	8009810 <pvPortMalloc+0xf8>
	__asm volatile
 80097fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097fe:	f383 8811 	msr	BASEPRI, r3
 8009802:	f3bf 8f6f 	isb	sy
 8009806:	f3bf 8f4f 	dsb	sy
 800980a:	613b      	str	r3, [r7, #16]
}
 800980c:	bf00      	nop
 800980e:	e7fe      	b.n	800980e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009812:	685a      	ldr	r2, [r3, #4]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	1ad2      	subs	r2, r2, r3
 8009818:	69bb      	ldr	r3, [r7, #24]
 800981a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800981c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800981e:	687a      	ldr	r2, [r7, #4]
 8009820:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009822:	69b8      	ldr	r0, [r7, #24]
 8009824:	f000 f908 	bl	8009a38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009828:	4b1d      	ldr	r3, [pc, #116]	; (80098a0 <pvPortMalloc+0x188>)
 800982a:	681a      	ldr	r2, [r3, #0]
 800982c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	1ad3      	subs	r3, r2, r3
 8009832:	4a1b      	ldr	r2, [pc, #108]	; (80098a0 <pvPortMalloc+0x188>)
 8009834:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009836:	4b1a      	ldr	r3, [pc, #104]	; (80098a0 <pvPortMalloc+0x188>)
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	4b1b      	ldr	r3, [pc, #108]	; (80098a8 <pvPortMalloc+0x190>)
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	429a      	cmp	r2, r3
 8009840:	d203      	bcs.n	800984a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009842:	4b17      	ldr	r3, [pc, #92]	; (80098a0 <pvPortMalloc+0x188>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	4a18      	ldr	r2, [pc, #96]	; (80098a8 <pvPortMalloc+0x190>)
 8009848:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800984a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800984c:	685a      	ldr	r2, [r3, #4]
 800984e:	4b13      	ldr	r3, [pc, #76]	; (800989c <pvPortMalloc+0x184>)
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	431a      	orrs	r2, r3
 8009854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009856:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800985a:	2200      	movs	r2, #0
 800985c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800985e:	4b13      	ldr	r3, [pc, #76]	; (80098ac <pvPortMalloc+0x194>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	3301      	adds	r3, #1
 8009864:	4a11      	ldr	r2, [pc, #68]	; (80098ac <pvPortMalloc+0x194>)
 8009866:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009868:	f7fe fcf8 	bl	800825c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800986c:	69fb      	ldr	r3, [r7, #28]
 800986e:	f003 0307 	and.w	r3, r3, #7
 8009872:	2b00      	cmp	r3, #0
 8009874:	d00a      	beq.n	800988c <pvPortMalloc+0x174>
	__asm volatile
 8009876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987a:	f383 8811 	msr	BASEPRI, r3
 800987e:	f3bf 8f6f 	isb	sy
 8009882:	f3bf 8f4f 	dsb	sy
 8009886:	60fb      	str	r3, [r7, #12]
}
 8009888:	bf00      	nop
 800988a:	e7fe      	b.n	800988a <pvPortMalloc+0x172>
	return pvReturn;
 800988c:	69fb      	ldr	r3, [r7, #28]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3728      	adds	r7, #40	; 0x28
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}
 8009896:	bf00      	nop
 8009898:	20001ff4 	.word	0x20001ff4
 800989c:	20002008 	.word	0x20002008
 80098a0:	20001ff8 	.word	0x20001ff8
 80098a4:	20001fec 	.word	0x20001fec
 80098a8:	20001ffc 	.word	0x20001ffc
 80098ac:	20002000 	.word	0x20002000

080098b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	b086      	sub	sp, #24
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d04d      	beq.n	800995e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80098c2:	2308      	movs	r3, #8
 80098c4:	425b      	negs	r3, r3
 80098c6:	697a      	ldr	r2, [r7, #20]
 80098c8:	4413      	add	r3, r2
 80098ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	685a      	ldr	r2, [r3, #4]
 80098d4:	4b24      	ldr	r3, [pc, #144]	; (8009968 <vPortFree+0xb8>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4013      	ands	r3, r2
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d10a      	bne.n	80098f4 <vPortFree+0x44>
	__asm volatile
 80098de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098e2:	f383 8811 	msr	BASEPRI, r3
 80098e6:	f3bf 8f6f 	isb	sy
 80098ea:	f3bf 8f4f 	dsb	sy
 80098ee:	60fb      	str	r3, [r7, #12]
}
 80098f0:	bf00      	nop
 80098f2:	e7fe      	b.n	80098f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80098f4:	693b      	ldr	r3, [r7, #16]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d00a      	beq.n	8009912 <vPortFree+0x62>
	__asm volatile
 80098fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009900:	f383 8811 	msr	BASEPRI, r3
 8009904:	f3bf 8f6f 	isb	sy
 8009908:	f3bf 8f4f 	dsb	sy
 800990c:	60bb      	str	r3, [r7, #8]
}
 800990e:	bf00      	nop
 8009910:	e7fe      	b.n	8009910 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009912:	693b      	ldr	r3, [r7, #16]
 8009914:	685a      	ldr	r2, [r3, #4]
 8009916:	4b14      	ldr	r3, [pc, #80]	; (8009968 <vPortFree+0xb8>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	4013      	ands	r3, r2
 800991c:	2b00      	cmp	r3, #0
 800991e:	d01e      	beq.n	800995e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009920:	693b      	ldr	r3, [r7, #16]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d11a      	bne.n	800995e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	4b0e      	ldr	r3, [pc, #56]	; (8009968 <vPortFree+0xb8>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	43db      	mvns	r3, r3
 8009932:	401a      	ands	r2, r3
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009938:	f7fe fc82 	bl	8008240 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800993c:	693b      	ldr	r3, [r7, #16]
 800993e:	685a      	ldr	r2, [r3, #4]
 8009940:	4b0a      	ldr	r3, [pc, #40]	; (800996c <vPortFree+0xbc>)
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	4413      	add	r3, r2
 8009946:	4a09      	ldr	r2, [pc, #36]	; (800996c <vPortFree+0xbc>)
 8009948:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800994a:	6938      	ldr	r0, [r7, #16]
 800994c:	f000 f874 	bl	8009a38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009950:	4b07      	ldr	r3, [pc, #28]	; (8009970 <vPortFree+0xc0>)
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	3301      	adds	r3, #1
 8009956:	4a06      	ldr	r2, [pc, #24]	; (8009970 <vPortFree+0xc0>)
 8009958:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800995a:	f7fe fc7f 	bl	800825c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800995e:	bf00      	nop
 8009960:	3718      	adds	r7, #24
 8009962:	46bd      	mov	sp, r7
 8009964:	bd80      	pop	{r7, pc}
 8009966:	bf00      	nop
 8009968:	20002008 	.word	0x20002008
 800996c:	20001ff8 	.word	0x20001ff8
 8009970:	20002004 	.word	0x20002004

08009974 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009974:	b480      	push	{r7}
 8009976:	b085      	sub	sp, #20
 8009978:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800997a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800997e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009980:	4b27      	ldr	r3, [pc, #156]	; (8009a20 <prvHeapInit+0xac>)
 8009982:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	f003 0307 	and.w	r3, r3, #7
 800998a:	2b00      	cmp	r3, #0
 800998c:	d00c      	beq.n	80099a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	3307      	adds	r3, #7
 8009992:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	f023 0307 	bic.w	r3, r3, #7
 800999a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800999c:	68ba      	ldr	r2, [r7, #8]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	1ad3      	subs	r3, r2, r3
 80099a2:	4a1f      	ldr	r2, [pc, #124]	; (8009a20 <prvHeapInit+0xac>)
 80099a4:	4413      	add	r3, r2
 80099a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80099ac:	4a1d      	ldr	r2, [pc, #116]	; (8009a24 <prvHeapInit+0xb0>)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80099b2:	4b1c      	ldr	r3, [pc, #112]	; (8009a24 <prvHeapInit+0xb0>)
 80099b4:	2200      	movs	r2, #0
 80099b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	68ba      	ldr	r2, [r7, #8]
 80099bc:	4413      	add	r3, r2
 80099be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80099c0:	2208      	movs	r2, #8
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	1a9b      	subs	r3, r3, r2
 80099c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	f023 0307 	bic.w	r3, r3, #7
 80099ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	4a15      	ldr	r2, [pc, #84]	; (8009a28 <prvHeapInit+0xb4>)
 80099d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80099d6:	4b14      	ldr	r3, [pc, #80]	; (8009a28 <prvHeapInit+0xb4>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	2200      	movs	r2, #0
 80099dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80099de:	4b12      	ldr	r3, [pc, #72]	; (8009a28 <prvHeapInit+0xb4>)
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	2200      	movs	r2, #0
 80099e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80099ea:	683b      	ldr	r3, [r7, #0]
 80099ec:	68fa      	ldr	r2, [r7, #12]
 80099ee:	1ad2      	subs	r2, r2, r3
 80099f0:	683b      	ldr	r3, [r7, #0]
 80099f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80099f4:	4b0c      	ldr	r3, [pc, #48]	; (8009a28 <prvHeapInit+0xb4>)
 80099f6:	681a      	ldr	r2, [r3, #0]
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80099fc:	683b      	ldr	r3, [r7, #0]
 80099fe:	685b      	ldr	r3, [r3, #4]
 8009a00:	4a0a      	ldr	r2, [pc, #40]	; (8009a2c <prvHeapInit+0xb8>)
 8009a02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a04:	683b      	ldr	r3, [r7, #0]
 8009a06:	685b      	ldr	r3, [r3, #4]
 8009a08:	4a09      	ldr	r2, [pc, #36]	; (8009a30 <prvHeapInit+0xbc>)
 8009a0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a0c:	4b09      	ldr	r3, [pc, #36]	; (8009a34 <prvHeapInit+0xc0>)
 8009a0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009a12:	601a      	str	r2, [r3, #0]
}
 8009a14:	bf00      	nop
 8009a16:	3714      	adds	r7, #20
 8009a18:	46bd      	mov	sp, r7
 8009a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1e:	4770      	bx	lr
 8009a20:	20001434 	.word	0x20001434
 8009a24:	20001fec 	.word	0x20001fec
 8009a28:	20001ff4 	.word	0x20001ff4
 8009a2c:	20001ffc 	.word	0x20001ffc
 8009a30:	20001ff8 	.word	0x20001ff8
 8009a34:	20002008 	.word	0x20002008

08009a38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a38:	b480      	push	{r7}
 8009a3a:	b085      	sub	sp, #20
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a40:	4b28      	ldr	r3, [pc, #160]	; (8009ae4 <prvInsertBlockIntoFreeList+0xac>)
 8009a42:	60fb      	str	r3, [r7, #12]
 8009a44:	e002      	b.n	8009a4c <prvInsertBlockIntoFreeList+0x14>
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	60fb      	str	r3, [r7, #12]
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	687a      	ldr	r2, [r7, #4]
 8009a52:	429a      	cmp	r2, r3
 8009a54:	d8f7      	bhi.n	8009a46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	68ba      	ldr	r2, [r7, #8]
 8009a60:	4413      	add	r3, r2
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	429a      	cmp	r2, r3
 8009a66:	d108      	bne.n	8009a7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	685a      	ldr	r2, [r3, #4]
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	685b      	ldr	r3, [r3, #4]
 8009a70:	441a      	add	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	685b      	ldr	r3, [r3, #4]
 8009a82:	68ba      	ldr	r2, [r7, #8]
 8009a84:	441a      	add	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	429a      	cmp	r2, r3
 8009a8c:	d118      	bne.n	8009ac0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681a      	ldr	r2, [r3, #0]
 8009a92:	4b15      	ldr	r3, [pc, #84]	; (8009ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	429a      	cmp	r2, r3
 8009a98:	d00d      	beq.n	8009ab6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	685a      	ldr	r2, [r3, #4]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	685b      	ldr	r3, [r3, #4]
 8009aa4:	441a      	add	r2, r3
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009aaa:	68fb      	ldr	r3, [r7, #12]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	681a      	ldr	r2, [r3, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	601a      	str	r2, [r3, #0]
 8009ab4:	e008      	b.n	8009ac8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009ab6:	4b0c      	ldr	r3, [pc, #48]	; (8009ae8 <prvInsertBlockIntoFreeList+0xb0>)
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	601a      	str	r2, [r3, #0]
 8009abe:	e003      	b.n	8009ac8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681a      	ldr	r2, [r3, #0]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009ac8:	68fa      	ldr	r2, [r7, #12]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	429a      	cmp	r2, r3
 8009ace:	d002      	beq.n	8009ad6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ad6:	bf00      	nop
 8009ad8:	3714      	adds	r7, #20
 8009ada:	46bd      	mov	sp, r7
 8009adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ae0:	4770      	bx	lr
 8009ae2:	bf00      	nop
 8009ae4:	20001fec 	.word	0x20001fec
 8009ae8:	20001ff4 	.word	0x20001ff4

08009aec <__errno>:
 8009aec:	4b01      	ldr	r3, [pc, #4]	; (8009af4 <__errno+0x8>)
 8009aee:	6818      	ldr	r0, [r3, #0]
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	20000018 	.word	0x20000018

08009af8 <__libc_init_array>:
 8009af8:	b570      	push	{r4, r5, r6, lr}
 8009afa:	4d0d      	ldr	r5, [pc, #52]	; (8009b30 <__libc_init_array+0x38>)
 8009afc:	4c0d      	ldr	r4, [pc, #52]	; (8009b34 <__libc_init_array+0x3c>)
 8009afe:	1b64      	subs	r4, r4, r5
 8009b00:	10a4      	asrs	r4, r4, #2
 8009b02:	2600      	movs	r6, #0
 8009b04:	42a6      	cmp	r6, r4
 8009b06:	d109      	bne.n	8009b1c <__libc_init_array+0x24>
 8009b08:	4d0b      	ldr	r5, [pc, #44]	; (8009b38 <__libc_init_array+0x40>)
 8009b0a:	4c0c      	ldr	r4, [pc, #48]	; (8009b3c <__libc_init_array+0x44>)
 8009b0c:	f000 fcf8 	bl	800a500 <_init>
 8009b10:	1b64      	subs	r4, r4, r5
 8009b12:	10a4      	asrs	r4, r4, #2
 8009b14:	2600      	movs	r6, #0
 8009b16:	42a6      	cmp	r6, r4
 8009b18:	d105      	bne.n	8009b26 <__libc_init_array+0x2e>
 8009b1a:	bd70      	pop	{r4, r5, r6, pc}
 8009b1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b20:	4798      	blx	r3
 8009b22:	3601      	adds	r6, #1
 8009b24:	e7ee      	b.n	8009b04 <__libc_init_array+0xc>
 8009b26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b2a:	4798      	blx	r3
 8009b2c:	3601      	adds	r6, #1
 8009b2e:	e7f2      	b.n	8009b16 <__libc_init_array+0x1e>
 8009b30:	0800b3ec 	.word	0x0800b3ec
 8009b34:	0800b3ec 	.word	0x0800b3ec
 8009b38:	0800b3ec 	.word	0x0800b3ec
 8009b3c:	0800b3f0 	.word	0x0800b3f0

08009b40 <__retarget_lock_acquire_recursive>:
 8009b40:	4770      	bx	lr

08009b42 <__retarget_lock_release_recursive>:
 8009b42:	4770      	bx	lr

08009b44 <memcpy>:
 8009b44:	440a      	add	r2, r1
 8009b46:	4291      	cmp	r1, r2
 8009b48:	f100 33ff 	add.w	r3, r0, #4294967295
 8009b4c:	d100      	bne.n	8009b50 <memcpy+0xc>
 8009b4e:	4770      	bx	lr
 8009b50:	b510      	push	{r4, lr}
 8009b52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009b56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009b5a:	4291      	cmp	r1, r2
 8009b5c:	d1f9      	bne.n	8009b52 <memcpy+0xe>
 8009b5e:	bd10      	pop	{r4, pc}

08009b60 <memset>:
 8009b60:	4402      	add	r2, r0
 8009b62:	4603      	mov	r3, r0
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d100      	bne.n	8009b6a <memset+0xa>
 8009b68:	4770      	bx	lr
 8009b6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009b6e:	e7f9      	b.n	8009b64 <memset+0x4>

08009b70 <sbrk_aligned>:
 8009b70:	b570      	push	{r4, r5, r6, lr}
 8009b72:	4e0e      	ldr	r6, [pc, #56]	; (8009bac <sbrk_aligned+0x3c>)
 8009b74:	460c      	mov	r4, r1
 8009b76:	6831      	ldr	r1, [r6, #0]
 8009b78:	4605      	mov	r5, r0
 8009b7a:	b911      	cbnz	r1, 8009b82 <sbrk_aligned+0x12>
 8009b7c:	f000 f8f6 	bl	8009d6c <_sbrk_r>
 8009b80:	6030      	str	r0, [r6, #0]
 8009b82:	4621      	mov	r1, r4
 8009b84:	4628      	mov	r0, r5
 8009b86:	f000 f8f1 	bl	8009d6c <_sbrk_r>
 8009b8a:	1c43      	adds	r3, r0, #1
 8009b8c:	d00a      	beq.n	8009ba4 <sbrk_aligned+0x34>
 8009b8e:	1cc4      	adds	r4, r0, #3
 8009b90:	f024 0403 	bic.w	r4, r4, #3
 8009b94:	42a0      	cmp	r0, r4
 8009b96:	d007      	beq.n	8009ba8 <sbrk_aligned+0x38>
 8009b98:	1a21      	subs	r1, r4, r0
 8009b9a:	4628      	mov	r0, r5
 8009b9c:	f000 f8e6 	bl	8009d6c <_sbrk_r>
 8009ba0:	3001      	adds	r0, #1
 8009ba2:	d101      	bne.n	8009ba8 <sbrk_aligned+0x38>
 8009ba4:	f04f 34ff 	mov.w	r4, #4294967295
 8009ba8:	4620      	mov	r0, r4
 8009baa:	bd70      	pop	{r4, r5, r6, pc}
 8009bac:	20002014 	.word	0x20002014

08009bb0 <_malloc_r>:
 8009bb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb4:	1ccd      	adds	r5, r1, #3
 8009bb6:	f025 0503 	bic.w	r5, r5, #3
 8009bba:	3508      	adds	r5, #8
 8009bbc:	2d0c      	cmp	r5, #12
 8009bbe:	bf38      	it	cc
 8009bc0:	250c      	movcc	r5, #12
 8009bc2:	2d00      	cmp	r5, #0
 8009bc4:	4607      	mov	r7, r0
 8009bc6:	db01      	blt.n	8009bcc <_malloc_r+0x1c>
 8009bc8:	42a9      	cmp	r1, r5
 8009bca:	d905      	bls.n	8009bd8 <_malloc_r+0x28>
 8009bcc:	230c      	movs	r3, #12
 8009bce:	603b      	str	r3, [r7, #0]
 8009bd0:	2600      	movs	r6, #0
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009bd8:	4e2e      	ldr	r6, [pc, #184]	; (8009c94 <_malloc_r+0xe4>)
 8009bda:	f000 f8f7 	bl	8009dcc <__malloc_lock>
 8009bde:	6833      	ldr	r3, [r6, #0]
 8009be0:	461c      	mov	r4, r3
 8009be2:	bb34      	cbnz	r4, 8009c32 <_malloc_r+0x82>
 8009be4:	4629      	mov	r1, r5
 8009be6:	4638      	mov	r0, r7
 8009be8:	f7ff ffc2 	bl	8009b70 <sbrk_aligned>
 8009bec:	1c43      	adds	r3, r0, #1
 8009bee:	4604      	mov	r4, r0
 8009bf0:	d14d      	bne.n	8009c8e <_malloc_r+0xde>
 8009bf2:	6834      	ldr	r4, [r6, #0]
 8009bf4:	4626      	mov	r6, r4
 8009bf6:	2e00      	cmp	r6, #0
 8009bf8:	d140      	bne.n	8009c7c <_malloc_r+0xcc>
 8009bfa:	6823      	ldr	r3, [r4, #0]
 8009bfc:	4631      	mov	r1, r6
 8009bfe:	4638      	mov	r0, r7
 8009c00:	eb04 0803 	add.w	r8, r4, r3
 8009c04:	f000 f8b2 	bl	8009d6c <_sbrk_r>
 8009c08:	4580      	cmp	r8, r0
 8009c0a:	d13a      	bne.n	8009c82 <_malloc_r+0xd2>
 8009c0c:	6821      	ldr	r1, [r4, #0]
 8009c0e:	3503      	adds	r5, #3
 8009c10:	1a6d      	subs	r5, r5, r1
 8009c12:	f025 0503 	bic.w	r5, r5, #3
 8009c16:	3508      	adds	r5, #8
 8009c18:	2d0c      	cmp	r5, #12
 8009c1a:	bf38      	it	cc
 8009c1c:	250c      	movcc	r5, #12
 8009c1e:	4629      	mov	r1, r5
 8009c20:	4638      	mov	r0, r7
 8009c22:	f7ff ffa5 	bl	8009b70 <sbrk_aligned>
 8009c26:	3001      	adds	r0, #1
 8009c28:	d02b      	beq.n	8009c82 <_malloc_r+0xd2>
 8009c2a:	6823      	ldr	r3, [r4, #0]
 8009c2c:	442b      	add	r3, r5
 8009c2e:	6023      	str	r3, [r4, #0]
 8009c30:	e00e      	b.n	8009c50 <_malloc_r+0xa0>
 8009c32:	6822      	ldr	r2, [r4, #0]
 8009c34:	1b52      	subs	r2, r2, r5
 8009c36:	d41e      	bmi.n	8009c76 <_malloc_r+0xc6>
 8009c38:	2a0b      	cmp	r2, #11
 8009c3a:	d916      	bls.n	8009c6a <_malloc_r+0xba>
 8009c3c:	1961      	adds	r1, r4, r5
 8009c3e:	42a3      	cmp	r3, r4
 8009c40:	6025      	str	r5, [r4, #0]
 8009c42:	bf18      	it	ne
 8009c44:	6059      	strne	r1, [r3, #4]
 8009c46:	6863      	ldr	r3, [r4, #4]
 8009c48:	bf08      	it	eq
 8009c4a:	6031      	streq	r1, [r6, #0]
 8009c4c:	5162      	str	r2, [r4, r5]
 8009c4e:	604b      	str	r3, [r1, #4]
 8009c50:	4638      	mov	r0, r7
 8009c52:	f104 060b 	add.w	r6, r4, #11
 8009c56:	f000 f8bf 	bl	8009dd8 <__malloc_unlock>
 8009c5a:	f026 0607 	bic.w	r6, r6, #7
 8009c5e:	1d23      	adds	r3, r4, #4
 8009c60:	1af2      	subs	r2, r6, r3
 8009c62:	d0b6      	beq.n	8009bd2 <_malloc_r+0x22>
 8009c64:	1b9b      	subs	r3, r3, r6
 8009c66:	50a3      	str	r3, [r4, r2]
 8009c68:	e7b3      	b.n	8009bd2 <_malloc_r+0x22>
 8009c6a:	6862      	ldr	r2, [r4, #4]
 8009c6c:	42a3      	cmp	r3, r4
 8009c6e:	bf0c      	ite	eq
 8009c70:	6032      	streq	r2, [r6, #0]
 8009c72:	605a      	strne	r2, [r3, #4]
 8009c74:	e7ec      	b.n	8009c50 <_malloc_r+0xa0>
 8009c76:	4623      	mov	r3, r4
 8009c78:	6864      	ldr	r4, [r4, #4]
 8009c7a:	e7b2      	b.n	8009be2 <_malloc_r+0x32>
 8009c7c:	4634      	mov	r4, r6
 8009c7e:	6876      	ldr	r6, [r6, #4]
 8009c80:	e7b9      	b.n	8009bf6 <_malloc_r+0x46>
 8009c82:	230c      	movs	r3, #12
 8009c84:	603b      	str	r3, [r7, #0]
 8009c86:	4638      	mov	r0, r7
 8009c88:	f000 f8a6 	bl	8009dd8 <__malloc_unlock>
 8009c8c:	e7a1      	b.n	8009bd2 <_malloc_r+0x22>
 8009c8e:	6025      	str	r5, [r4, #0]
 8009c90:	e7de      	b.n	8009c50 <_malloc_r+0xa0>
 8009c92:	bf00      	nop
 8009c94:	20002010 	.word	0x20002010

08009c98 <cleanup_glue>:
 8009c98:	b538      	push	{r3, r4, r5, lr}
 8009c9a:	460c      	mov	r4, r1
 8009c9c:	6809      	ldr	r1, [r1, #0]
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	b109      	cbz	r1, 8009ca6 <cleanup_glue+0xe>
 8009ca2:	f7ff fff9 	bl	8009c98 <cleanup_glue>
 8009ca6:	4621      	mov	r1, r4
 8009ca8:	4628      	mov	r0, r5
 8009caa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009cae:	f000 b899 	b.w	8009de4 <_free_r>
	...

08009cb4 <_reclaim_reent>:
 8009cb4:	4b2c      	ldr	r3, [pc, #176]	; (8009d68 <_reclaim_reent+0xb4>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	4283      	cmp	r3, r0
 8009cba:	b570      	push	{r4, r5, r6, lr}
 8009cbc:	4604      	mov	r4, r0
 8009cbe:	d051      	beq.n	8009d64 <_reclaim_reent+0xb0>
 8009cc0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8009cc2:	b143      	cbz	r3, 8009cd6 <_reclaim_reent+0x22>
 8009cc4:	68db      	ldr	r3, [r3, #12]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d14a      	bne.n	8009d60 <_reclaim_reent+0xac>
 8009cca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009ccc:	6819      	ldr	r1, [r3, #0]
 8009cce:	b111      	cbz	r1, 8009cd6 <_reclaim_reent+0x22>
 8009cd0:	4620      	mov	r0, r4
 8009cd2:	f000 f887 	bl	8009de4 <_free_r>
 8009cd6:	6961      	ldr	r1, [r4, #20]
 8009cd8:	b111      	cbz	r1, 8009ce0 <_reclaim_reent+0x2c>
 8009cda:	4620      	mov	r0, r4
 8009cdc:	f000 f882 	bl	8009de4 <_free_r>
 8009ce0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8009ce2:	b111      	cbz	r1, 8009cea <_reclaim_reent+0x36>
 8009ce4:	4620      	mov	r0, r4
 8009ce6:	f000 f87d 	bl	8009de4 <_free_r>
 8009cea:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8009cec:	b111      	cbz	r1, 8009cf4 <_reclaim_reent+0x40>
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f000 f878 	bl	8009de4 <_free_r>
 8009cf4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8009cf6:	b111      	cbz	r1, 8009cfe <_reclaim_reent+0x4a>
 8009cf8:	4620      	mov	r0, r4
 8009cfa:	f000 f873 	bl	8009de4 <_free_r>
 8009cfe:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8009d00:	b111      	cbz	r1, 8009d08 <_reclaim_reent+0x54>
 8009d02:	4620      	mov	r0, r4
 8009d04:	f000 f86e 	bl	8009de4 <_free_r>
 8009d08:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8009d0a:	b111      	cbz	r1, 8009d12 <_reclaim_reent+0x5e>
 8009d0c:	4620      	mov	r0, r4
 8009d0e:	f000 f869 	bl	8009de4 <_free_r>
 8009d12:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8009d14:	b111      	cbz	r1, 8009d1c <_reclaim_reent+0x68>
 8009d16:	4620      	mov	r0, r4
 8009d18:	f000 f864 	bl	8009de4 <_free_r>
 8009d1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009d1e:	b111      	cbz	r1, 8009d26 <_reclaim_reent+0x72>
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 f85f 	bl	8009de4 <_free_r>
 8009d26:	69a3      	ldr	r3, [r4, #24]
 8009d28:	b1e3      	cbz	r3, 8009d64 <_reclaim_reent+0xb0>
 8009d2a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	4798      	blx	r3
 8009d30:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8009d32:	b1b9      	cbz	r1, 8009d64 <_reclaim_reent+0xb0>
 8009d34:	4620      	mov	r0, r4
 8009d36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009d3a:	f7ff bfad 	b.w	8009c98 <cleanup_glue>
 8009d3e:	5949      	ldr	r1, [r1, r5]
 8009d40:	b941      	cbnz	r1, 8009d54 <_reclaim_reent+0xa0>
 8009d42:	3504      	adds	r5, #4
 8009d44:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009d46:	2d80      	cmp	r5, #128	; 0x80
 8009d48:	68d9      	ldr	r1, [r3, #12]
 8009d4a:	d1f8      	bne.n	8009d3e <_reclaim_reent+0x8a>
 8009d4c:	4620      	mov	r0, r4
 8009d4e:	f000 f849 	bl	8009de4 <_free_r>
 8009d52:	e7ba      	b.n	8009cca <_reclaim_reent+0x16>
 8009d54:	680e      	ldr	r6, [r1, #0]
 8009d56:	4620      	mov	r0, r4
 8009d58:	f000 f844 	bl	8009de4 <_free_r>
 8009d5c:	4631      	mov	r1, r6
 8009d5e:	e7ef      	b.n	8009d40 <_reclaim_reent+0x8c>
 8009d60:	2500      	movs	r5, #0
 8009d62:	e7ef      	b.n	8009d44 <_reclaim_reent+0x90>
 8009d64:	bd70      	pop	{r4, r5, r6, pc}
 8009d66:	bf00      	nop
 8009d68:	20000018 	.word	0x20000018

08009d6c <_sbrk_r>:
 8009d6c:	b538      	push	{r3, r4, r5, lr}
 8009d6e:	4d06      	ldr	r5, [pc, #24]	; (8009d88 <_sbrk_r+0x1c>)
 8009d70:	2300      	movs	r3, #0
 8009d72:	4604      	mov	r4, r0
 8009d74:	4608      	mov	r0, r1
 8009d76:	602b      	str	r3, [r5, #0]
 8009d78:	f7f8 f962 	bl	8002040 <_sbrk>
 8009d7c:	1c43      	adds	r3, r0, #1
 8009d7e:	d102      	bne.n	8009d86 <_sbrk_r+0x1a>
 8009d80:	682b      	ldr	r3, [r5, #0]
 8009d82:	b103      	cbz	r3, 8009d86 <_sbrk_r+0x1a>
 8009d84:	6023      	str	r3, [r4, #0]
 8009d86:	bd38      	pop	{r3, r4, r5, pc}
 8009d88:	20002018 	.word	0x20002018

08009d8c <siprintf>:
 8009d8c:	b40e      	push	{r1, r2, r3}
 8009d8e:	b500      	push	{lr}
 8009d90:	b09c      	sub	sp, #112	; 0x70
 8009d92:	ab1d      	add	r3, sp, #116	; 0x74
 8009d94:	9002      	str	r0, [sp, #8]
 8009d96:	9006      	str	r0, [sp, #24]
 8009d98:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d9c:	4809      	ldr	r0, [pc, #36]	; (8009dc4 <siprintf+0x38>)
 8009d9e:	9107      	str	r1, [sp, #28]
 8009da0:	9104      	str	r1, [sp, #16]
 8009da2:	4909      	ldr	r1, [pc, #36]	; (8009dc8 <siprintf+0x3c>)
 8009da4:	f853 2b04 	ldr.w	r2, [r3], #4
 8009da8:	9105      	str	r1, [sp, #20]
 8009daa:	6800      	ldr	r0, [r0, #0]
 8009dac:	9301      	str	r3, [sp, #4]
 8009dae:	a902      	add	r1, sp, #8
 8009db0:	f000 f8c0 	bl	8009f34 <_svfiprintf_r>
 8009db4:	9b02      	ldr	r3, [sp, #8]
 8009db6:	2200      	movs	r2, #0
 8009db8:	701a      	strb	r2, [r3, #0]
 8009dba:	b01c      	add	sp, #112	; 0x70
 8009dbc:	f85d eb04 	ldr.w	lr, [sp], #4
 8009dc0:	b003      	add	sp, #12
 8009dc2:	4770      	bx	lr
 8009dc4:	20000018 	.word	0x20000018
 8009dc8:	ffff0208 	.word	0xffff0208

08009dcc <__malloc_lock>:
 8009dcc:	4801      	ldr	r0, [pc, #4]	; (8009dd4 <__malloc_lock+0x8>)
 8009dce:	f7ff beb7 	b.w	8009b40 <__retarget_lock_acquire_recursive>
 8009dd2:	bf00      	nop
 8009dd4:	2000200c 	.word	0x2000200c

08009dd8 <__malloc_unlock>:
 8009dd8:	4801      	ldr	r0, [pc, #4]	; (8009de0 <__malloc_unlock+0x8>)
 8009dda:	f7ff beb2 	b.w	8009b42 <__retarget_lock_release_recursive>
 8009dde:	bf00      	nop
 8009de0:	2000200c 	.word	0x2000200c

08009de4 <_free_r>:
 8009de4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009de6:	2900      	cmp	r1, #0
 8009de8:	d044      	beq.n	8009e74 <_free_r+0x90>
 8009dea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009dee:	9001      	str	r0, [sp, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	f1a1 0404 	sub.w	r4, r1, #4
 8009df6:	bfb8      	it	lt
 8009df8:	18e4      	addlt	r4, r4, r3
 8009dfa:	f7ff ffe7 	bl	8009dcc <__malloc_lock>
 8009dfe:	4a1e      	ldr	r2, [pc, #120]	; (8009e78 <_free_r+0x94>)
 8009e00:	9801      	ldr	r0, [sp, #4]
 8009e02:	6813      	ldr	r3, [r2, #0]
 8009e04:	b933      	cbnz	r3, 8009e14 <_free_r+0x30>
 8009e06:	6063      	str	r3, [r4, #4]
 8009e08:	6014      	str	r4, [r2, #0]
 8009e0a:	b003      	add	sp, #12
 8009e0c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009e10:	f7ff bfe2 	b.w	8009dd8 <__malloc_unlock>
 8009e14:	42a3      	cmp	r3, r4
 8009e16:	d908      	bls.n	8009e2a <_free_r+0x46>
 8009e18:	6825      	ldr	r5, [r4, #0]
 8009e1a:	1961      	adds	r1, r4, r5
 8009e1c:	428b      	cmp	r3, r1
 8009e1e:	bf01      	itttt	eq
 8009e20:	6819      	ldreq	r1, [r3, #0]
 8009e22:	685b      	ldreq	r3, [r3, #4]
 8009e24:	1949      	addeq	r1, r1, r5
 8009e26:	6021      	streq	r1, [r4, #0]
 8009e28:	e7ed      	b.n	8009e06 <_free_r+0x22>
 8009e2a:	461a      	mov	r2, r3
 8009e2c:	685b      	ldr	r3, [r3, #4]
 8009e2e:	b10b      	cbz	r3, 8009e34 <_free_r+0x50>
 8009e30:	42a3      	cmp	r3, r4
 8009e32:	d9fa      	bls.n	8009e2a <_free_r+0x46>
 8009e34:	6811      	ldr	r1, [r2, #0]
 8009e36:	1855      	adds	r5, r2, r1
 8009e38:	42a5      	cmp	r5, r4
 8009e3a:	d10b      	bne.n	8009e54 <_free_r+0x70>
 8009e3c:	6824      	ldr	r4, [r4, #0]
 8009e3e:	4421      	add	r1, r4
 8009e40:	1854      	adds	r4, r2, r1
 8009e42:	42a3      	cmp	r3, r4
 8009e44:	6011      	str	r1, [r2, #0]
 8009e46:	d1e0      	bne.n	8009e0a <_free_r+0x26>
 8009e48:	681c      	ldr	r4, [r3, #0]
 8009e4a:	685b      	ldr	r3, [r3, #4]
 8009e4c:	6053      	str	r3, [r2, #4]
 8009e4e:	4421      	add	r1, r4
 8009e50:	6011      	str	r1, [r2, #0]
 8009e52:	e7da      	b.n	8009e0a <_free_r+0x26>
 8009e54:	d902      	bls.n	8009e5c <_free_r+0x78>
 8009e56:	230c      	movs	r3, #12
 8009e58:	6003      	str	r3, [r0, #0]
 8009e5a:	e7d6      	b.n	8009e0a <_free_r+0x26>
 8009e5c:	6825      	ldr	r5, [r4, #0]
 8009e5e:	1961      	adds	r1, r4, r5
 8009e60:	428b      	cmp	r3, r1
 8009e62:	bf04      	itt	eq
 8009e64:	6819      	ldreq	r1, [r3, #0]
 8009e66:	685b      	ldreq	r3, [r3, #4]
 8009e68:	6063      	str	r3, [r4, #4]
 8009e6a:	bf04      	itt	eq
 8009e6c:	1949      	addeq	r1, r1, r5
 8009e6e:	6021      	streq	r1, [r4, #0]
 8009e70:	6054      	str	r4, [r2, #4]
 8009e72:	e7ca      	b.n	8009e0a <_free_r+0x26>
 8009e74:	b003      	add	sp, #12
 8009e76:	bd30      	pop	{r4, r5, pc}
 8009e78:	20002010 	.word	0x20002010

08009e7c <__ssputs_r>:
 8009e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e80:	688e      	ldr	r6, [r1, #8]
 8009e82:	429e      	cmp	r6, r3
 8009e84:	4682      	mov	sl, r0
 8009e86:	460c      	mov	r4, r1
 8009e88:	4690      	mov	r8, r2
 8009e8a:	461f      	mov	r7, r3
 8009e8c:	d838      	bhi.n	8009f00 <__ssputs_r+0x84>
 8009e8e:	898a      	ldrh	r2, [r1, #12]
 8009e90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009e94:	d032      	beq.n	8009efc <__ssputs_r+0x80>
 8009e96:	6825      	ldr	r5, [r4, #0]
 8009e98:	6909      	ldr	r1, [r1, #16]
 8009e9a:	eba5 0901 	sub.w	r9, r5, r1
 8009e9e:	6965      	ldr	r5, [r4, #20]
 8009ea0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009ea4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009ea8:	3301      	adds	r3, #1
 8009eaa:	444b      	add	r3, r9
 8009eac:	106d      	asrs	r5, r5, #1
 8009eae:	429d      	cmp	r5, r3
 8009eb0:	bf38      	it	cc
 8009eb2:	461d      	movcc	r5, r3
 8009eb4:	0553      	lsls	r3, r2, #21
 8009eb6:	d531      	bpl.n	8009f1c <__ssputs_r+0xa0>
 8009eb8:	4629      	mov	r1, r5
 8009eba:	f7ff fe79 	bl	8009bb0 <_malloc_r>
 8009ebe:	4606      	mov	r6, r0
 8009ec0:	b950      	cbnz	r0, 8009ed8 <__ssputs_r+0x5c>
 8009ec2:	230c      	movs	r3, #12
 8009ec4:	f8ca 3000 	str.w	r3, [sl]
 8009ec8:	89a3      	ldrh	r3, [r4, #12]
 8009eca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ece:	81a3      	strh	r3, [r4, #12]
 8009ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8009ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ed8:	6921      	ldr	r1, [r4, #16]
 8009eda:	464a      	mov	r2, r9
 8009edc:	f7ff fe32 	bl	8009b44 <memcpy>
 8009ee0:	89a3      	ldrh	r3, [r4, #12]
 8009ee2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009ee6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eea:	81a3      	strh	r3, [r4, #12]
 8009eec:	6126      	str	r6, [r4, #16]
 8009eee:	6165      	str	r5, [r4, #20]
 8009ef0:	444e      	add	r6, r9
 8009ef2:	eba5 0509 	sub.w	r5, r5, r9
 8009ef6:	6026      	str	r6, [r4, #0]
 8009ef8:	60a5      	str	r5, [r4, #8]
 8009efa:	463e      	mov	r6, r7
 8009efc:	42be      	cmp	r6, r7
 8009efe:	d900      	bls.n	8009f02 <__ssputs_r+0x86>
 8009f00:	463e      	mov	r6, r7
 8009f02:	6820      	ldr	r0, [r4, #0]
 8009f04:	4632      	mov	r2, r6
 8009f06:	4641      	mov	r1, r8
 8009f08:	f000 faa8 	bl	800a45c <memmove>
 8009f0c:	68a3      	ldr	r3, [r4, #8]
 8009f0e:	1b9b      	subs	r3, r3, r6
 8009f10:	60a3      	str	r3, [r4, #8]
 8009f12:	6823      	ldr	r3, [r4, #0]
 8009f14:	4433      	add	r3, r6
 8009f16:	6023      	str	r3, [r4, #0]
 8009f18:	2000      	movs	r0, #0
 8009f1a:	e7db      	b.n	8009ed4 <__ssputs_r+0x58>
 8009f1c:	462a      	mov	r2, r5
 8009f1e:	f000 fab7 	bl	800a490 <_realloc_r>
 8009f22:	4606      	mov	r6, r0
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d1e1      	bne.n	8009eec <__ssputs_r+0x70>
 8009f28:	6921      	ldr	r1, [r4, #16]
 8009f2a:	4650      	mov	r0, sl
 8009f2c:	f7ff ff5a 	bl	8009de4 <_free_r>
 8009f30:	e7c7      	b.n	8009ec2 <__ssputs_r+0x46>
	...

08009f34 <_svfiprintf_r>:
 8009f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f38:	4698      	mov	r8, r3
 8009f3a:	898b      	ldrh	r3, [r1, #12]
 8009f3c:	061b      	lsls	r3, r3, #24
 8009f3e:	b09d      	sub	sp, #116	; 0x74
 8009f40:	4607      	mov	r7, r0
 8009f42:	460d      	mov	r5, r1
 8009f44:	4614      	mov	r4, r2
 8009f46:	d50e      	bpl.n	8009f66 <_svfiprintf_r+0x32>
 8009f48:	690b      	ldr	r3, [r1, #16]
 8009f4a:	b963      	cbnz	r3, 8009f66 <_svfiprintf_r+0x32>
 8009f4c:	2140      	movs	r1, #64	; 0x40
 8009f4e:	f7ff fe2f 	bl	8009bb0 <_malloc_r>
 8009f52:	6028      	str	r0, [r5, #0]
 8009f54:	6128      	str	r0, [r5, #16]
 8009f56:	b920      	cbnz	r0, 8009f62 <_svfiprintf_r+0x2e>
 8009f58:	230c      	movs	r3, #12
 8009f5a:	603b      	str	r3, [r7, #0]
 8009f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8009f60:	e0d1      	b.n	800a106 <_svfiprintf_r+0x1d2>
 8009f62:	2340      	movs	r3, #64	; 0x40
 8009f64:	616b      	str	r3, [r5, #20]
 8009f66:	2300      	movs	r3, #0
 8009f68:	9309      	str	r3, [sp, #36]	; 0x24
 8009f6a:	2320      	movs	r3, #32
 8009f6c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009f70:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f74:	2330      	movs	r3, #48	; 0x30
 8009f76:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a120 <_svfiprintf_r+0x1ec>
 8009f7a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009f7e:	f04f 0901 	mov.w	r9, #1
 8009f82:	4623      	mov	r3, r4
 8009f84:	469a      	mov	sl, r3
 8009f86:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f8a:	b10a      	cbz	r2, 8009f90 <_svfiprintf_r+0x5c>
 8009f8c:	2a25      	cmp	r2, #37	; 0x25
 8009f8e:	d1f9      	bne.n	8009f84 <_svfiprintf_r+0x50>
 8009f90:	ebba 0b04 	subs.w	fp, sl, r4
 8009f94:	d00b      	beq.n	8009fae <_svfiprintf_r+0x7a>
 8009f96:	465b      	mov	r3, fp
 8009f98:	4622      	mov	r2, r4
 8009f9a:	4629      	mov	r1, r5
 8009f9c:	4638      	mov	r0, r7
 8009f9e:	f7ff ff6d 	bl	8009e7c <__ssputs_r>
 8009fa2:	3001      	adds	r0, #1
 8009fa4:	f000 80aa 	beq.w	800a0fc <_svfiprintf_r+0x1c8>
 8009fa8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009faa:	445a      	add	r2, fp
 8009fac:	9209      	str	r2, [sp, #36]	; 0x24
 8009fae:	f89a 3000 	ldrb.w	r3, [sl]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	f000 80a2 	beq.w	800a0fc <_svfiprintf_r+0x1c8>
 8009fb8:	2300      	movs	r3, #0
 8009fba:	f04f 32ff 	mov.w	r2, #4294967295
 8009fbe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009fc2:	f10a 0a01 	add.w	sl, sl, #1
 8009fc6:	9304      	str	r3, [sp, #16]
 8009fc8:	9307      	str	r3, [sp, #28]
 8009fca:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009fce:	931a      	str	r3, [sp, #104]	; 0x68
 8009fd0:	4654      	mov	r4, sl
 8009fd2:	2205      	movs	r2, #5
 8009fd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fd8:	4851      	ldr	r0, [pc, #324]	; (800a120 <_svfiprintf_r+0x1ec>)
 8009fda:	f7f6 f901 	bl	80001e0 <memchr>
 8009fde:	9a04      	ldr	r2, [sp, #16]
 8009fe0:	b9d8      	cbnz	r0, 800a01a <_svfiprintf_r+0xe6>
 8009fe2:	06d0      	lsls	r0, r2, #27
 8009fe4:	bf44      	itt	mi
 8009fe6:	2320      	movmi	r3, #32
 8009fe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009fec:	0711      	lsls	r1, r2, #28
 8009fee:	bf44      	itt	mi
 8009ff0:	232b      	movmi	r3, #43	; 0x2b
 8009ff2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009ff6:	f89a 3000 	ldrb.w	r3, [sl]
 8009ffa:	2b2a      	cmp	r3, #42	; 0x2a
 8009ffc:	d015      	beq.n	800a02a <_svfiprintf_r+0xf6>
 8009ffe:	9a07      	ldr	r2, [sp, #28]
 800a000:	4654      	mov	r4, sl
 800a002:	2000      	movs	r0, #0
 800a004:	f04f 0c0a 	mov.w	ip, #10
 800a008:	4621      	mov	r1, r4
 800a00a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a00e:	3b30      	subs	r3, #48	; 0x30
 800a010:	2b09      	cmp	r3, #9
 800a012:	d94e      	bls.n	800a0b2 <_svfiprintf_r+0x17e>
 800a014:	b1b0      	cbz	r0, 800a044 <_svfiprintf_r+0x110>
 800a016:	9207      	str	r2, [sp, #28]
 800a018:	e014      	b.n	800a044 <_svfiprintf_r+0x110>
 800a01a:	eba0 0308 	sub.w	r3, r0, r8
 800a01e:	fa09 f303 	lsl.w	r3, r9, r3
 800a022:	4313      	orrs	r3, r2
 800a024:	9304      	str	r3, [sp, #16]
 800a026:	46a2      	mov	sl, r4
 800a028:	e7d2      	b.n	8009fd0 <_svfiprintf_r+0x9c>
 800a02a:	9b03      	ldr	r3, [sp, #12]
 800a02c:	1d19      	adds	r1, r3, #4
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	9103      	str	r1, [sp, #12]
 800a032:	2b00      	cmp	r3, #0
 800a034:	bfbb      	ittet	lt
 800a036:	425b      	neglt	r3, r3
 800a038:	f042 0202 	orrlt.w	r2, r2, #2
 800a03c:	9307      	strge	r3, [sp, #28]
 800a03e:	9307      	strlt	r3, [sp, #28]
 800a040:	bfb8      	it	lt
 800a042:	9204      	strlt	r2, [sp, #16]
 800a044:	7823      	ldrb	r3, [r4, #0]
 800a046:	2b2e      	cmp	r3, #46	; 0x2e
 800a048:	d10c      	bne.n	800a064 <_svfiprintf_r+0x130>
 800a04a:	7863      	ldrb	r3, [r4, #1]
 800a04c:	2b2a      	cmp	r3, #42	; 0x2a
 800a04e:	d135      	bne.n	800a0bc <_svfiprintf_r+0x188>
 800a050:	9b03      	ldr	r3, [sp, #12]
 800a052:	1d1a      	adds	r2, r3, #4
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	9203      	str	r2, [sp, #12]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	bfb8      	it	lt
 800a05c:	f04f 33ff 	movlt.w	r3, #4294967295
 800a060:	3402      	adds	r4, #2
 800a062:	9305      	str	r3, [sp, #20]
 800a064:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a130 <_svfiprintf_r+0x1fc>
 800a068:	7821      	ldrb	r1, [r4, #0]
 800a06a:	2203      	movs	r2, #3
 800a06c:	4650      	mov	r0, sl
 800a06e:	f7f6 f8b7 	bl	80001e0 <memchr>
 800a072:	b140      	cbz	r0, 800a086 <_svfiprintf_r+0x152>
 800a074:	2340      	movs	r3, #64	; 0x40
 800a076:	eba0 000a 	sub.w	r0, r0, sl
 800a07a:	fa03 f000 	lsl.w	r0, r3, r0
 800a07e:	9b04      	ldr	r3, [sp, #16]
 800a080:	4303      	orrs	r3, r0
 800a082:	3401      	adds	r4, #1
 800a084:	9304      	str	r3, [sp, #16]
 800a086:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a08a:	4826      	ldr	r0, [pc, #152]	; (800a124 <_svfiprintf_r+0x1f0>)
 800a08c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a090:	2206      	movs	r2, #6
 800a092:	f7f6 f8a5 	bl	80001e0 <memchr>
 800a096:	2800      	cmp	r0, #0
 800a098:	d038      	beq.n	800a10c <_svfiprintf_r+0x1d8>
 800a09a:	4b23      	ldr	r3, [pc, #140]	; (800a128 <_svfiprintf_r+0x1f4>)
 800a09c:	bb1b      	cbnz	r3, 800a0e6 <_svfiprintf_r+0x1b2>
 800a09e:	9b03      	ldr	r3, [sp, #12]
 800a0a0:	3307      	adds	r3, #7
 800a0a2:	f023 0307 	bic.w	r3, r3, #7
 800a0a6:	3308      	adds	r3, #8
 800a0a8:	9303      	str	r3, [sp, #12]
 800a0aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a0ac:	4433      	add	r3, r6
 800a0ae:	9309      	str	r3, [sp, #36]	; 0x24
 800a0b0:	e767      	b.n	8009f82 <_svfiprintf_r+0x4e>
 800a0b2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a0b6:	460c      	mov	r4, r1
 800a0b8:	2001      	movs	r0, #1
 800a0ba:	e7a5      	b.n	800a008 <_svfiprintf_r+0xd4>
 800a0bc:	2300      	movs	r3, #0
 800a0be:	3401      	adds	r4, #1
 800a0c0:	9305      	str	r3, [sp, #20]
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	f04f 0c0a 	mov.w	ip, #10
 800a0c8:	4620      	mov	r0, r4
 800a0ca:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a0ce:	3a30      	subs	r2, #48	; 0x30
 800a0d0:	2a09      	cmp	r2, #9
 800a0d2:	d903      	bls.n	800a0dc <_svfiprintf_r+0x1a8>
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d0c5      	beq.n	800a064 <_svfiprintf_r+0x130>
 800a0d8:	9105      	str	r1, [sp, #20]
 800a0da:	e7c3      	b.n	800a064 <_svfiprintf_r+0x130>
 800a0dc:	fb0c 2101 	mla	r1, ip, r1, r2
 800a0e0:	4604      	mov	r4, r0
 800a0e2:	2301      	movs	r3, #1
 800a0e4:	e7f0      	b.n	800a0c8 <_svfiprintf_r+0x194>
 800a0e6:	ab03      	add	r3, sp, #12
 800a0e8:	9300      	str	r3, [sp, #0]
 800a0ea:	462a      	mov	r2, r5
 800a0ec:	4b0f      	ldr	r3, [pc, #60]	; (800a12c <_svfiprintf_r+0x1f8>)
 800a0ee:	a904      	add	r1, sp, #16
 800a0f0:	4638      	mov	r0, r7
 800a0f2:	f3af 8000 	nop.w
 800a0f6:	1c42      	adds	r2, r0, #1
 800a0f8:	4606      	mov	r6, r0
 800a0fa:	d1d6      	bne.n	800a0aa <_svfiprintf_r+0x176>
 800a0fc:	89ab      	ldrh	r3, [r5, #12]
 800a0fe:	065b      	lsls	r3, r3, #25
 800a100:	f53f af2c 	bmi.w	8009f5c <_svfiprintf_r+0x28>
 800a104:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a106:	b01d      	add	sp, #116	; 0x74
 800a108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a10c:	ab03      	add	r3, sp, #12
 800a10e:	9300      	str	r3, [sp, #0]
 800a110:	462a      	mov	r2, r5
 800a112:	4b06      	ldr	r3, [pc, #24]	; (800a12c <_svfiprintf_r+0x1f8>)
 800a114:	a904      	add	r1, sp, #16
 800a116:	4638      	mov	r0, r7
 800a118:	f000 f87a 	bl	800a210 <_printf_i>
 800a11c:	e7eb      	b.n	800a0f6 <_svfiprintf_r+0x1c2>
 800a11e:	bf00      	nop
 800a120:	0800b3b0 	.word	0x0800b3b0
 800a124:	0800b3ba 	.word	0x0800b3ba
 800a128:	00000000 	.word	0x00000000
 800a12c:	08009e7d 	.word	0x08009e7d
 800a130:	0800b3b6 	.word	0x0800b3b6

0800a134 <_printf_common>:
 800a134:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a138:	4616      	mov	r6, r2
 800a13a:	4699      	mov	r9, r3
 800a13c:	688a      	ldr	r2, [r1, #8]
 800a13e:	690b      	ldr	r3, [r1, #16]
 800a140:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a144:	4293      	cmp	r3, r2
 800a146:	bfb8      	it	lt
 800a148:	4613      	movlt	r3, r2
 800a14a:	6033      	str	r3, [r6, #0]
 800a14c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a150:	4607      	mov	r7, r0
 800a152:	460c      	mov	r4, r1
 800a154:	b10a      	cbz	r2, 800a15a <_printf_common+0x26>
 800a156:	3301      	adds	r3, #1
 800a158:	6033      	str	r3, [r6, #0]
 800a15a:	6823      	ldr	r3, [r4, #0]
 800a15c:	0699      	lsls	r1, r3, #26
 800a15e:	bf42      	ittt	mi
 800a160:	6833      	ldrmi	r3, [r6, #0]
 800a162:	3302      	addmi	r3, #2
 800a164:	6033      	strmi	r3, [r6, #0]
 800a166:	6825      	ldr	r5, [r4, #0]
 800a168:	f015 0506 	ands.w	r5, r5, #6
 800a16c:	d106      	bne.n	800a17c <_printf_common+0x48>
 800a16e:	f104 0a19 	add.w	sl, r4, #25
 800a172:	68e3      	ldr	r3, [r4, #12]
 800a174:	6832      	ldr	r2, [r6, #0]
 800a176:	1a9b      	subs	r3, r3, r2
 800a178:	42ab      	cmp	r3, r5
 800a17a:	dc26      	bgt.n	800a1ca <_printf_common+0x96>
 800a17c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a180:	1e13      	subs	r3, r2, #0
 800a182:	6822      	ldr	r2, [r4, #0]
 800a184:	bf18      	it	ne
 800a186:	2301      	movne	r3, #1
 800a188:	0692      	lsls	r2, r2, #26
 800a18a:	d42b      	bmi.n	800a1e4 <_printf_common+0xb0>
 800a18c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a190:	4649      	mov	r1, r9
 800a192:	4638      	mov	r0, r7
 800a194:	47c0      	blx	r8
 800a196:	3001      	adds	r0, #1
 800a198:	d01e      	beq.n	800a1d8 <_printf_common+0xa4>
 800a19a:	6823      	ldr	r3, [r4, #0]
 800a19c:	68e5      	ldr	r5, [r4, #12]
 800a19e:	6832      	ldr	r2, [r6, #0]
 800a1a0:	f003 0306 	and.w	r3, r3, #6
 800a1a4:	2b04      	cmp	r3, #4
 800a1a6:	bf08      	it	eq
 800a1a8:	1aad      	subeq	r5, r5, r2
 800a1aa:	68a3      	ldr	r3, [r4, #8]
 800a1ac:	6922      	ldr	r2, [r4, #16]
 800a1ae:	bf0c      	ite	eq
 800a1b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1b4:	2500      	movne	r5, #0
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	bfc4      	itt	gt
 800a1ba:	1a9b      	subgt	r3, r3, r2
 800a1bc:	18ed      	addgt	r5, r5, r3
 800a1be:	2600      	movs	r6, #0
 800a1c0:	341a      	adds	r4, #26
 800a1c2:	42b5      	cmp	r5, r6
 800a1c4:	d11a      	bne.n	800a1fc <_printf_common+0xc8>
 800a1c6:	2000      	movs	r0, #0
 800a1c8:	e008      	b.n	800a1dc <_printf_common+0xa8>
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	4652      	mov	r2, sl
 800a1ce:	4649      	mov	r1, r9
 800a1d0:	4638      	mov	r0, r7
 800a1d2:	47c0      	blx	r8
 800a1d4:	3001      	adds	r0, #1
 800a1d6:	d103      	bne.n	800a1e0 <_printf_common+0xac>
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1e0:	3501      	adds	r5, #1
 800a1e2:	e7c6      	b.n	800a172 <_printf_common+0x3e>
 800a1e4:	18e1      	adds	r1, r4, r3
 800a1e6:	1c5a      	adds	r2, r3, #1
 800a1e8:	2030      	movs	r0, #48	; 0x30
 800a1ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a1ee:	4422      	add	r2, r4
 800a1f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a1f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a1f8:	3302      	adds	r3, #2
 800a1fa:	e7c7      	b.n	800a18c <_printf_common+0x58>
 800a1fc:	2301      	movs	r3, #1
 800a1fe:	4622      	mov	r2, r4
 800a200:	4649      	mov	r1, r9
 800a202:	4638      	mov	r0, r7
 800a204:	47c0      	blx	r8
 800a206:	3001      	adds	r0, #1
 800a208:	d0e6      	beq.n	800a1d8 <_printf_common+0xa4>
 800a20a:	3601      	adds	r6, #1
 800a20c:	e7d9      	b.n	800a1c2 <_printf_common+0x8e>
	...

0800a210 <_printf_i>:
 800a210:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a214:	7e0f      	ldrb	r7, [r1, #24]
 800a216:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a218:	2f78      	cmp	r7, #120	; 0x78
 800a21a:	4691      	mov	r9, r2
 800a21c:	4680      	mov	r8, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	469a      	mov	sl, r3
 800a222:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a226:	d807      	bhi.n	800a238 <_printf_i+0x28>
 800a228:	2f62      	cmp	r7, #98	; 0x62
 800a22a:	d80a      	bhi.n	800a242 <_printf_i+0x32>
 800a22c:	2f00      	cmp	r7, #0
 800a22e:	f000 80d8 	beq.w	800a3e2 <_printf_i+0x1d2>
 800a232:	2f58      	cmp	r7, #88	; 0x58
 800a234:	f000 80a3 	beq.w	800a37e <_printf_i+0x16e>
 800a238:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a23c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a240:	e03a      	b.n	800a2b8 <_printf_i+0xa8>
 800a242:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a246:	2b15      	cmp	r3, #21
 800a248:	d8f6      	bhi.n	800a238 <_printf_i+0x28>
 800a24a:	a101      	add	r1, pc, #4	; (adr r1, 800a250 <_printf_i+0x40>)
 800a24c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a250:	0800a2a9 	.word	0x0800a2a9
 800a254:	0800a2bd 	.word	0x0800a2bd
 800a258:	0800a239 	.word	0x0800a239
 800a25c:	0800a239 	.word	0x0800a239
 800a260:	0800a239 	.word	0x0800a239
 800a264:	0800a239 	.word	0x0800a239
 800a268:	0800a2bd 	.word	0x0800a2bd
 800a26c:	0800a239 	.word	0x0800a239
 800a270:	0800a239 	.word	0x0800a239
 800a274:	0800a239 	.word	0x0800a239
 800a278:	0800a239 	.word	0x0800a239
 800a27c:	0800a3c9 	.word	0x0800a3c9
 800a280:	0800a2ed 	.word	0x0800a2ed
 800a284:	0800a3ab 	.word	0x0800a3ab
 800a288:	0800a239 	.word	0x0800a239
 800a28c:	0800a239 	.word	0x0800a239
 800a290:	0800a3eb 	.word	0x0800a3eb
 800a294:	0800a239 	.word	0x0800a239
 800a298:	0800a2ed 	.word	0x0800a2ed
 800a29c:	0800a239 	.word	0x0800a239
 800a2a0:	0800a239 	.word	0x0800a239
 800a2a4:	0800a3b3 	.word	0x0800a3b3
 800a2a8:	682b      	ldr	r3, [r5, #0]
 800a2aa:	1d1a      	adds	r2, r3, #4
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	602a      	str	r2, [r5, #0]
 800a2b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a2b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a2b8:	2301      	movs	r3, #1
 800a2ba:	e0a3      	b.n	800a404 <_printf_i+0x1f4>
 800a2bc:	6820      	ldr	r0, [r4, #0]
 800a2be:	6829      	ldr	r1, [r5, #0]
 800a2c0:	0606      	lsls	r6, r0, #24
 800a2c2:	f101 0304 	add.w	r3, r1, #4
 800a2c6:	d50a      	bpl.n	800a2de <_printf_i+0xce>
 800a2c8:	680e      	ldr	r6, [r1, #0]
 800a2ca:	602b      	str	r3, [r5, #0]
 800a2cc:	2e00      	cmp	r6, #0
 800a2ce:	da03      	bge.n	800a2d8 <_printf_i+0xc8>
 800a2d0:	232d      	movs	r3, #45	; 0x2d
 800a2d2:	4276      	negs	r6, r6
 800a2d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a2d8:	485e      	ldr	r0, [pc, #376]	; (800a454 <_printf_i+0x244>)
 800a2da:	230a      	movs	r3, #10
 800a2dc:	e019      	b.n	800a312 <_printf_i+0x102>
 800a2de:	680e      	ldr	r6, [r1, #0]
 800a2e0:	602b      	str	r3, [r5, #0]
 800a2e2:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a2e6:	bf18      	it	ne
 800a2e8:	b236      	sxthne	r6, r6
 800a2ea:	e7ef      	b.n	800a2cc <_printf_i+0xbc>
 800a2ec:	682b      	ldr	r3, [r5, #0]
 800a2ee:	6820      	ldr	r0, [r4, #0]
 800a2f0:	1d19      	adds	r1, r3, #4
 800a2f2:	6029      	str	r1, [r5, #0]
 800a2f4:	0601      	lsls	r1, r0, #24
 800a2f6:	d501      	bpl.n	800a2fc <_printf_i+0xec>
 800a2f8:	681e      	ldr	r6, [r3, #0]
 800a2fa:	e002      	b.n	800a302 <_printf_i+0xf2>
 800a2fc:	0646      	lsls	r6, r0, #25
 800a2fe:	d5fb      	bpl.n	800a2f8 <_printf_i+0xe8>
 800a300:	881e      	ldrh	r6, [r3, #0]
 800a302:	4854      	ldr	r0, [pc, #336]	; (800a454 <_printf_i+0x244>)
 800a304:	2f6f      	cmp	r7, #111	; 0x6f
 800a306:	bf0c      	ite	eq
 800a308:	2308      	moveq	r3, #8
 800a30a:	230a      	movne	r3, #10
 800a30c:	2100      	movs	r1, #0
 800a30e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a312:	6865      	ldr	r5, [r4, #4]
 800a314:	60a5      	str	r5, [r4, #8]
 800a316:	2d00      	cmp	r5, #0
 800a318:	bfa2      	ittt	ge
 800a31a:	6821      	ldrge	r1, [r4, #0]
 800a31c:	f021 0104 	bicge.w	r1, r1, #4
 800a320:	6021      	strge	r1, [r4, #0]
 800a322:	b90e      	cbnz	r6, 800a328 <_printf_i+0x118>
 800a324:	2d00      	cmp	r5, #0
 800a326:	d04d      	beq.n	800a3c4 <_printf_i+0x1b4>
 800a328:	4615      	mov	r5, r2
 800a32a:	fbb6 f1f3 	udiv	r1, r6, r3
 800a32e:	fb03 6711 	mls	r7, r3, r1, r6
 800a332:	5dc7      	ldrb	r7, [r0, r7]
 800a334:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a338:	4637      	mov	r7, r6
 800a33a:	42bb      	cmp	r3, r7
 800a33c:	460e      	mov	r6, r1
 800a33e:	d9f4      	bls.n	800a32a <_printf_i+0x11a>
 800a340:	2b08      	cmp	r3, #8
 800a342:	d10b      	bne.n	800a35c <_printf_i+0x14c>
 800a344:	6823      	ldr	r3, [r4, #0]
 800a346:	07de      	lsls	r6, r3, #31
 800a348:	d508      	bpl.n	800a35c <_printf_i+0x14c>
 800a34a:	6923      	ldr	r3, [r4, #16]
 800a34c:	6861      	ldr	r1, [r4, #4]
 800a34e:	4299      	cmp	r1, r3
 800a350:	bfde      	ittt	le
 800a352:	2330      	movle	r3, #48	; 0x30
 800a354:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a358:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a35c:	1b52      	subs	r2, r2, r5
 800a35e:	6122      	str	r2, [r4, #16]
 800a360:	f8cd a000 	str.w	sl, [sp]
 800a364:	464b      	mov	r3, r9
 800a366:	aa03      	add	r2, sp, #12
 800a368:	4621      	mov	r1, r4
 800a36a:	4640      	mov	r0, r8
 800a36c:	f7ff fee2 	bl	800a134 <_printf_common>
 800a370:	3001      	adds	r0, #1
 800a372:	d14c      	bne.n	800a40e <_printf_i+0x1fe>
 800a374:	f04f 30ff 	mov.w	r0, #4294967295
 800a378:	b004      	add	sp, #16
 800a37a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a37e:	4835      	ldr	r0, [pc, #212]	; (800a454 <_printf_i+0x244>)
 800a380:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a384:	6829      	ldr	r1, [r5, #0]
 800a386:	6823      	ldr	r3, [r4, #0]
 800a388:	f851 6b04 	ldr.w	r6, [r1], #4
 800a38c:	6029      	str	r1, [r5, #0]
 800a38e:	061d      	lsls	r5, r3, #24
 800a390:	d514      	bpl.n	800a3bc <_printf_i+0x1ac>
 800a392:	07df      	lsls	r7, r3, #31
 800a394:	bf44      	itt	mi
 800a396:	f043 0320 	orrmi.w	r3, r3, #32
 800a39a:	6023      	strmi	r3, [r4, #0]
 800a39c:	b91e      	cbnz	r6, 800a3a6 <_printf_i+0x196>
 800a39e:	6823      	ldr	r3, [r4, #0]
 800a3a0:	f023 0320 	bic.w	r3, r3, #32
 800a3a4:	6023      	str	r3, [r4, #0]
 800a3a6:	2310      	movs	r3, #16
 800a3a8:	e7b0      	b.n	800a30c <_printf_i+0xfc>
 800a3aa:	6823      	ldr	r3, [r4, #0]
 800a3ac:	f043 0320 	orr.w	r3, r3, #32
 800a3b0:	6023      	str	r3, [r4, #0]
 800a3b2:	2378      	movs	r3, #120	; 0x78
 800a3b4:	4828      	ldr	r0, [pc, #160]	; (800a458 <_printf_i+0x248>)
 800a3b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a3ba:	e7e3      	b.n	800a384 <_printf_i+0x174>
 800a3bc:	0659      	lsls	r1, r3, #25
 800a3be:	bf48      	it	mi
 800a3c0:	b2b6      	uxthmi	r6, r6
 800a3c2:	e7e6      	b.n	800a392 <_printf_i+0x182>
 800a3c4:	4615      	mov	r5, r2
 800a3c6:	e7bb      	b.n	800a340 <_printf_i+0x130>
 800a3c8:	682b      	ldr	r3, [r5, #0]
 800a3ca:	6826      	ldr	r6, [r4, #0]
 800a3cc:	6961      	ldr	r1, [r4, #20]
 800a3ce:	1d18      	adds	r0, r3, #4
 800a3d0:	6028      	str	r0, [r5, #0]
 800a3d2:	0635      	lsls	r5, r6, #24
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	d501      	bpl.n	800a3dc <_printf_i+0x1cc>
 800a3d8:	6019      	str	r1, [r3, #0]
 800a3da:	e002      	b.n	800a3e2 <_printf_i+0x1d2>
 800a3dc:	0670      	lsls	r0, r6, #25
 800a3de:	d5fb      	bpl.n	800a3d8 <_printf_i+0x1c8>
 800a3e0:	8019      	strh	r1, [r3, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	6123      	str	r3, [r4, #16]
 800a3e6:	4615      	mov	r5, r2
 800a3e8:	e7ba      	b.n	800a360 <_printf_i+0x150>
 800a3ea:	682b      	ldr	r3, [r5, #0]
 800a3ec:	1d1a      	adds	r2, r3, #4
 800a3ee:	602a      	str	r2, [r5, #0]
 800a3f0:	681d      	ldr	r5, [r3, #0]
 800a3f2:	6862      	ldr	r2, [r4, #4]
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	4628      	mov	r0, r5
 800a3f8:	f7f5 fef2 	bl	80001e0 <memchr>
 800a3fc:	b108      	cbz	r0, 800a402 <_printf_i+0x1f2>
 800a3fe:	1b40      	subs	r0, r0, r5
 800a400:	6060      	str	r0, [r4, #4]
 800a402:	6863      	ldr	r3, [r4, #4]
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	2300      	movs	r3, #0
 800a408:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a40c:	e7a8      	b.n	800a360 <_printf_i+0x150>
 800a40e:	6923      	ldr	r3, [r4, #16]
 800a410:	462a      	mov	r2, r5
 800a412:	4649      	mov	r1, r9
 800a414:	4640      	mov	r0, r8
 800a416:	47d0      	blx	sl
 800a418:	3001      	adds	r0, #1
 800a41a:	d0ab      	beq.n	800a374 <_printf_i+0x164>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	079b      	lsls	r3, r3, #30
 800a420:	d413      	bmi.n	800a44a <_printf_i+0x23a>
 800a422:	68e0      	ldr	r0, [r4, #12]
 800a424:	9b03      	ldr	r3, [sp, #12]
 800a426:	4298      	cmp	r0, r3
 800a428:	bfb8      	it	lt
 800a42a:	4618      	movlt	r0, r3
 800a42c:	e7a4      	b.n	800a378 <_printf_i+0x168>
 800a42e:	2301      	movs	r3, #1
 800a430:	4632      	mov	r2, r6
 800a432:	4649      	mov	r1, r9
 800a434:	4640      	mov	r0, r8
 800a436:	47d0      	blx	sl
 800a438:	3001      	adds	r0, #1
 800a43a:	d09b      	beq.n	800a374 <_printf_i+0x164>
 800a43c:	3501      	adds	r5, #1
 800a43e:	68e3      	ldr	r3, [r4, #12]
 800a440:	9903      	ldr	r1, [sp, #12]
 800a442:	1a5b      	subs	r3, r3, r1
 800a444:	42ab      	cmp	r3, r5
 800a446:	dcf2      	bgt.n	800a42e <_printf_i+0x21e>
 800a448:	e7eb      	b.n	800a422 <_printf_i+0x212>
 800a44a:	2500      	movs	r5, #0
 800a44c:	f104 0619 	add.w	r6, r4, #25
 800a450:	e7f5      	b.n	800a43e <_printf_i+0x22e>
 800a452:	bf00      	nop
 800a454:	0800b3c1 	.word	0x0800b3c1
 800a458:	0800b3d2 	.word	0x0800b3d2

0800a45c <memmove>:
 800a45c:	4288      	cmp	r0, r1
 800a45e:	b510      	push	{r4, lr}
 800a460:	eb01 0402 	add.w	r4, r1, r2
 800a464:	d902      	bls.n	800a46c <memmove+0x10>
 800a466:	4284      	cmp	r4, r0
 800a468:	4623      	mov	r3, r4
 800a46a:	d807      	bhi.n	800a47c <memmove+0x20>
 800a46c:	1e43      	subs	r3, r0, #1
 800a46e:	42a1      	cmp	r1, r4
 800a470:	d008      	beq.n	800a484 <memmove+0x28>
 800a472:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a476:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a47a:	e7f8      	b.n	800a46e <memmove+0x12>
 800a47c:	4402      	add	r2, r0
 800a47e:	4601      	mov	r1, r0
 800a480:	428a      	cmp	r2, r1
 800a482:	d100      	bne.n	800a486 <memmove+0x2a>
 800a484:	bd10      	pop	{r4, pc}
 800a486:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a48a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a48e:	e7f7      	b.n	800a480 <memmove+0x24>

0800a490 <_realloc_r>:
 800a490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a494:	4680      	mov	r8, r0
 800a496:	4614      	mov	r4, r2
 800a498:	460e      	mov	r6, r1
 800a49a:	b921      	cbnz	r1, 800a4a6 <_realloc_r+0x16>
 800a49c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a0:	4611      	mov	r1, r2
 800a4a2:	f7ff bb85 	b.w	8009bb0 <_malloc_r>
 800a4a6:	b92a      	cbnz	r2, 800a4b4 <_realloc_r+0x24>
 800a4a8:	f7ff fc9c 	bl	8009de4 <_free_r>
 800a4ac:	4625      	mov	r5, r4
 800a4ae:	4628      	mov	r0, r5
 800a4b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b4:	f000 f81b 	bl	800a4ee <_malloc_usable_size_r>
 800a4b8:	4284      	cmp	r4, r0
 800a4ba:	4607      	mov	r7, r0
 800a4bc:	d802      	bhi.n	800a4c4 <_realloc_r+0x34>
 800a4be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a4c2:	d812      	bhi.n	800a4ea <_realloc_r+0x5a>
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	4640      	mov	r0, r8
 800a4c8:	f7ff fb72 	bl	8009bb0 <_malloc_r>
 800a4cc:	4605      	mov	r5, r0
 800a4ce:	2800      	cmp	r0, #0
 800a4d0:	d0ed      	beq.n	800a4ae <_realloc_r+0x1e>
 800a4d2:	42bc      	cmp	r4, r7
 800a4d4:	4622      	mov	r2, r4
 800a4d6:	4631      	mov	r1, r6
 800a4d8:	bf28      	it	cs
 800a4da:	463a      	movcs	r2, r7
 800a4dc:	f7ff fb32 	bl	8009b44 <memcpy>
 800a4e0:	4631      	mov	r1, r6
 800a4e2:	4640      	mov	r0, r8
 800a4e4:	f7ff fc7e 	bl	8009de4 <_free_r>
 800a4e8:	e7e1      	b.n	800a4ae <_realloc_r+0x1e>
 800a4ea:	4635      	mov	r5, r6
 800a4ec:	e7df      	b.n	800a4ae <_realloc_r+0x1e>

0800a4ee <_malloc_usable_size_r>:
 800a4ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a4f2:	1f18      	subs	r0, r3, #4
 800a4f4:	2b00      	cmp	r3, #0
 800a4f6:	bfbc      	itt	lt
 800a4f8:	580b      	ldrlt	r3, [r1, r0]
 800a4fa:	18c0      	addlt	r0, r0, r3
 800a4fc:	4770      	bx	lr
	...

0800a500 <_init>:
 800a500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a502:	bf00      	nop
 800a504:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a506:	bc08      	pop	{r3}
 800a508:	469e      	mov	lr, r3
 800a50a:	4770      	bx	lr

0800a50c <_fini>:
 800a50c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a50e:	bf00      	nop
 800a510:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a512:	bc08      	pop	{r3}
 800a514:	469e      	mov	lr, r3
 800a516:	4770      	bx	lr
