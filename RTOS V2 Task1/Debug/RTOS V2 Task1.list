
RTOS V2 Task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a3bc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e6c  0800a54c  0800a54c  0000b54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b3b8  0800b3b8  0000d068  2**0
                  CONTENTS
  4 .ARM          00000008  0800b3b8  0800b3b8  0000c3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b3c0  0800b3c0  0000d068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b3c0  0800b3c0  0000c3c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800b3c4  0800b3c4  0000c3c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800b3c8  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000020b0  20000068  0800b430  0000d068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002118  0800b430  0000d118  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023344  00000000  00000000  0000d098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004531  00000000  00000000  000303dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e70  00000000  00000000  00034910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017ba  00000000  00000000  00036780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002b3ef  00000000  00000000  00037f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00022661  00000000  00000000  00063329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011354e  00000000  00000000  0008598a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00198ed8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000088dc  00000000  00000000  00198f1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001a17f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a534 	.word	0x0800a534

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	0800a534 	.word	0x0800a534

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <ADC_Select_CH1>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void ADC_Select_CH1 (void)
  {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af00      	add	r7, sp, #0
  	  ADC_ChannelConfTypeDef sConfig = {0};
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
 8000dba:	609a      	str	r2, [r3, #8]
 8000dbc:	60da      	str	r2, [r3, #12]
 8000dbe:	611a      	str	r2, [r3, #16]
 8000dc0:	615a      	str	r2, [r3, #20]
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_1;
 8000dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8000dec <ADC_Select_CH1+0x40>)
 8000dc4:	603b      	str	r3, [r7, #0]
  	  sConfig.Rank = 1;
 8000dc6:	2301      	movs	r3, #1
 8000dc8:	607b      	str	r3, [r7, #4]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;;
 8000dca:	2302      	movs	r3, #2
 8000dcc:	60bb      	str	r3, [r7, #8]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000dce:	463b      	mov	r3, r7
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4807      	ldr	r0, [pc, #28]	@ (8000df0 <ADC_Select_CH1+0x44>)
 8000dd4:	f001 ff60 	bl	8002c98 <HAL_ADC_ConfigChannel>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d001      	beq.n	8000de2 <ADC_Select_CH1+0x36>
  	  {
  	    Error_Handler();
 8000dde:	f000 fca1 	bl	8001724 <Error_Handler>
  	  }
  }
 8000de2:	bf00      	nop
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}
 8000dea:	bf00      	nop
 8000dec:	04300002 	.word	0x04300002
 8000df0:	20000084 	.word	0x20000084

08000df4 <ADC_Select_CH2>:

  void ADC_Select_CH2 (void)
  {
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af00      	add	r7, sp, #0
  	  ADC_ChannelConfTypeDef sConfig = {0};
 8000dfa:	463b      	mov	r3, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
 8000e08:	615a      	str	r2, [r3, #20]
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_2;
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <ADC_Select_CH2+0x40>)
 8000e0c:	603b      	str	r3, [r7, #0]
  	  sConfig.Rank = 1;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	607b      	str	r3, [r7, #4]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;;
 8000e12:	2303      	movs	r3, #3
 8000e14:	60bb      	str	r3, [r7, #8]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e16:	463b      	mov	r3, r7
 8000e18:	4619      	mov	r1, r3
 8000e1a:	4807      	ldr	r0, [pc, #28]	@ (8000e38 <ADC_Select_CH2+0x44>)
 8000e1c:	f001 ff3c 	bl	8002c98 <HAL_ADC_ConfigChannel>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <ADC_Select_CH2+0x36>
  	  {
  	    Error_Handler();
 8000e26:	f000 fc7d 	bl	8001724 <Error_Handler>
  	  }
  }
 8000e2a:	bf00      	nop
 8000e2c:	3718      	adds	r7, #24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	08600004 	.word	0x08600004
 8000e38:	20000084 	.word	0x20000084

08000e3c <ADC_Select_CHTemp>:

  void ADC_Select_CHTemp (void)
  {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
  	  ADC_ChannelConfTypeDef sConfig = {0};
 8000e42:	463b      	mov	r3, r7
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
 8000e4e:	611a      	str	r2, [r3, #16]
 8000e50:	615a      	str	r2, [r3, #20]
  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  	  */
  	  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <ADC_Select_CHTemp+0x40>)
 8000e54:	603b      	str	r3, [r7, #0]
  	  sConfig.Rank = 1;
 8000e56:	2301      	movs	r3, #1
 8000e58:	607b      	str	r3, [r7, #4]
  	  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;;
 8000e5a:	2304      	movs	r3, #4
 8000e5c:	60bb      	str	r3, [r7, #8]
  	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e5e:	463b      	mov	r3, r7
 8000e60:	4619      	mov	r1, r3
 8000e62:	4807      	ldr	r0, [pc, #28]	@ (8000e80 <ADC_Select_CHTemp+0x44>)
 8000e64:	f001 ff18 	bl	8002c98 <HAL_ADC_ConfigChannel>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <ADC_Select_CHTemp+0x36>
  	  {
  	    Error_Handler();
 8000e6e:	f000 fc59 	bl	8001724 <Error_Handler>
  	  }
  }
 8000e72:	bf00      	nop
 8000e74:	3718      	adds	r7, #24
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	c7520000 	.word	0xc7520000
 8000e80:	20000084 	.word	0x20000084

08000e84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e88:	f001 f96a 	bl	8002160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e8c:	f000 f854 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e90:	f000 f9ac 	bl	80011ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e94:	f000 f97a 	bl	800118c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000e98:	f000 f938 	bl	800110c <MX_I2C1_Init>
  MX_ADC1_Init();
 8000e9c:	f000 f89e 	bl	8000fdc <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the diaply
 8000ea0:	f000 fc46 	bl	8001730 <SSD1306_Init>
  SSD1306_GotoXY (0,0); // goto 10, 10
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	f000 fdac 	bl	8001a04 <SSD1306_GotoXY>
  SSD1306_Puts ("CH1:  ", &Font_11x18, 1); // print Voltmeter_Back to Intel Nuc
 8000eac:	2201      	movs	r2, #1
 8000eae:	4918      	ldr	r1, [pc, #96]	@ (8000f10 <main+0x8c>)
 8000eb0:	4818      	ldr	r0, [pc, #96]	@ (8000f14 <main+0x90>)
 8000eb2:	f000 fe3b 	bl	8001b2c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000eb6:	f000 fcff 	bl	80018b8 <SSD1306_UpdateScreen>
  //HAL_Delay(3000);
  SSD1306_GotoXY (0,20);
 8000eba:	2114      	movs	r1, #20
 8000ebc:	2000      	movs	r0, #0
 8000ebe:	f000 fda1 	bl	8001a04 <SSD1306_GotoXY>
  SSD1306_Puts ("CH2:  ", &Font_11x18, 1);
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	4912      	ldr	r1, [pc, #72]	@ (8000f10 <main+0x8c>)
 8000ec6:	4814      	ldr	r0, [pc, #80]	@ (8000f18 <main+0x94>)
 8000ec8:	f000 fe30 	bl	8001b2c <SSD1306_Puts>
  SSD1306_GotoXY (0,40);
 8000ecc:	2128      	movs	r1, #40	@ 0x28
 8000ece:	2000      	movs	r0, #0
 8000ed0:	f000 fd98 	bl	8001a04 <SSD1306_GotoXY>
  SSD1306_Puts ("Temp:  ", &Font_11x18, 1);
 8000ed4:	2201      	movs	r2, #1
 8000ed6:	490e      	ldr	r1, [pc, #56]	@ (8000f10 <main+0x8c>)
 8000ed8:	4810      	ldr	r0, [pc, #64]	@ (8000f1c <main+0x98>)
 8000eda:	f000 fe27 	bl	8001b2c <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 8000ede:	f000 fceb 	bl	80018b8 <SSD1306_UpdateScreen>
  //value_adc1 = HAL_ADC_GetValue(&hadc1);
  //value_adc2 = HAL_ADC_GetValue(&hadc2);
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000ee2:	f006 f883 	bl	8006fec <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000ee6:	4a0e      	ldr	r2, [pc, #56]	@ (8000f20 <main+0x9c>)
 8000ee8:	2100      	movs	r1, #0
 8000eea:	480e      	ldr	r0, [pc, #56]	@ (8000f24 <main+0xa0>)
 8000eec:	f006 f8c8 	bl	8007080 <osThreadNew>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	4a0d      	ldr	r2, [pc, #52]	@ (8000f28 <main+0xa4>)
 8000ef4:	6013      	str	r3, [r2, #0]

  /* creation of Task2c */
  Task2cHandle = osThreadNew(StartTask2, NULL, &Task2c_attributes);
 8000ef6:	4a0d      	ldr	r2, [pc, #52]	@ (8000f2c <main+0xa8>)
 8000ef8:	2100      	movs	r1, #0
 8000efa:	480d      	ldr	r0, [pc, #52]	@ (8000f30 <main+0xac>)
 8000efc:	f006 f8c0 	bl	8007080 <osThreadNew>
 8000f00:	4603      	mov	r3, r0
 8000f02:	4a0c      	ldr	r2, [pc, #48]	@ (8000f34 <main+0xb0>)
 8000f04:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f06:	f006 f895 	bl	8007034 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f0a:	bf00      	nop
 8000f0c:	e7fd      	b.n	8000f0a <main+0x86>
 8000f0e:	bf00      	nop
 8000f10:	20000000 	.word	0x20000000
 8000f14:	0800a55c 	.word	0x0800a55c
 8000f18:	0800a564 	.word	0x0800a564
 8000f1c:	0800a56c 	.word	0x0800a56c
 8000f20:	0800b2f4 	.word	0x0800b2f4
 8000f24:	080016cd 	.word	0x080016cd
 8000f28:	200001b8 	.word	0x200001b8
 8000f2c:	0800b318 	.word	0x0800b318
 8000f30:	080016e7 	.word	0x080016e7
 8000f34:	200001bc 	.word	0x200001bc

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b096      	sub	sp, #88	@ 0x58
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	2244      	movs	r2, #68	@ 0x44
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f008 fe1e 	bl	8009b88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000f5a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000f5e:	f003 fcb3 	bl	80048c8 <HAL_PWREx_ControlVoltageScaling>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000f68:	f000 fbdc 	bl	8001724 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f70:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f74:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f76:	2310      	movs	r3, #16
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f82:	2301      	movs	r3, #1
 8000f84:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000f86:	230a      	movs	r3, #10
 8000f88:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000f8a:	2307      	movs	r3, #7
 8000f8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f96:	f107 0314 	add.w	r3, r7, #20
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f003 fcea 	bl	8004974 <HAL_RCC_OscConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fa6:	f000 fbbd 	bl	8001724 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000faa:	230f      	movs	r3, #15
 8000fac:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000fbe:	463b      	mov	r3, r7
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f004 f8be 	bl	8005144 <HAL_RCC_ClockConfig>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fce:	f000 fba9 	bl	8001724 <Error_Handler>
  }
}
 8000fd2:	bf00      	nop
 8000fd4:	3758      	adds	r7, #88	@ 0x58
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08a      	sub	sp, #40	@ 0x28
 8000fe0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fe2:	f107 031c 	add.w	r3, r7, #28
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	601a      	str	r2, [r3, #0]
 8000fea:	605a      	str	r2, [r3, #4]
 8000fec:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fee:	1d3b      	adds	r3, r7, #4
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]
 8000ffc:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000ffe:	4b3e      	ldr	r3, [pc, #248]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 8001000:	4a3e      	ldr	r2, [pc, #248]	@ (80010fc <MX_ADC1_Init+0x120>)
 8001002:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001004:	4b3c      	ldr	r3, [pc, #240]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 8001006:	2200      	movs	r2, #0
 8001008:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800100a:	4b3b      	ldr	r3, [pc, #236]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 800100c:	2200      	movs	r2, #0
 800100e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001010:	4b39      	ldr	r3, [pc, #228]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 8001012:	2200      	movs	r2, #0
 8001014:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001016:	4b38      	ldr	r3, [pc, #224]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 8001018:	2201      	movs	r2, #1
 800101a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800101c:	4b36      	ldr	r3, [pc, #216]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 800101e:	2204      	movs	r2, #4
 8001020:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001022:	4b35      	ldr	r3, [pc, #212]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 8001024:	2200      	movs	r2, #0
 8001026:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001028:	4b33      	ldr	r3, [pc, #204]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 800102a:	2200      	movs	r2, #0
 800102c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 3;
 800102e:	4b32      	ldr	r3, [pc, #200]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 8001030:	2203      	movs	r2, #3
 8001032:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001034:	4b30      	ldr	r3, [pc, #192]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 8001036:	2200      	movs	r2, #0
 8001038:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800103c:	4b2e      	ldr	r3, [pc, #184]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 800103e:	2200      	movs	r2, #0
 8001040:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001042:	4b2d      	ldr	r3, [pc, #180]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 8001044:	2200      	movs	r2, #0
 8001046:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b2b      	ldr	r3, [pc, #172]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001050:	4b29      	ldr	r3, [pc, #164]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 8001052:	2200      	movs	r2, #0
 8001054:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001056:	4b28      	ldr	r3, [pc, #160]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 8001058:	2200      	movs	r2, #0
 800105a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800105e:	4826      	ldr	r0, [pc, #152]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 8001060:	f001 faf0 	bl	8002644 <HAL_ADC_Init>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800106a:	f000 fb5b 	bl	8001724 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 800106e:	2300      	movs	r3, #0
 8001070:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001072:	f107 031c 	add.w	r3, r7, #28
 8001076:	4619      	mov	r1, r3
 8001078:	481f      	ldr	r0, [pc, #124]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 800107a:	f002 fba1 	bl	80037c0 <HAL_ADCEx_MultiModeConfigChannel>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001084:	f000 fb4e 	bl	8001724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001088:	4b1d      	ldr	r3, [pc, #116]	@ (8001100 <MX_ADC1_Init+0x124>)
 800108a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800108c:	2306      	movs	r3, #6
 800108e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_24CYCLES_5;
 8001090:	2303      	movs	r3, #3
 8001092:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001094:	237f      	movs	r3, #127	@ 0x7f
 8001096:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001098:	2304      	movs	r3, #4
 800109a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800109c:	2300      	movs	r3, #0
 800109e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010a0:	1d3b      	adds	r3, r7, #4
 80010a2:	4619      	mov	r1, r3
 80010a4:	4814      	ldr	r0, [pc, #80]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 80010a6:	f001 fdf7 	bl	8002c98 <HAL_ADC_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_ADC1_Init+0xd8>
  {
    Error_Handler();
 80010b0:	f000 fb38 	bl	8001724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80010b4:	4b13      	ldr	r3, [pc, #76]	@ (8001104 <MX_ADC1_Init+0x128>)
 80010b6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010b8:	230c      	movs	r3, #12
 80010ba:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_47CYCLES_5;
 80010bc:	2304      	movs	r3, #4
 80010be:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	480c      	ldr	r0, [pc, #48]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 80010c6:	f001 fde7 	bl	8002c98 <HAL_ADC_ConfigChannel>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_ADC1_Init+0xf8>
  {
    Error_Handler();
 80010d0:	f000 fb28 	bl	8001724 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 80010d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001108 <MX_ADC1_Init+0x12c>)
 80010d6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 80010d8:	2312      	movs	r3, #18
 80010da:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	4619      	mov	r1, r3
 80010e0:	4805      	ldr	r0, [pc, #20]	@ (80010f8 <MX_ADC1_Init+0x11c>)
 80010e2:	f001 fdd9 	bl	8002c98 <HAL_ADC_ConfigChannel>
 80010e6:	4603      	mov	r3, r0
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d001      	beq.n	80010f0 <MX_ADC1_Init+0x114>
  {
    Error_Handler();
 80010ec:	f000 fb1a 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010f0:	bf00      	nop
 80010f2:	3728      	adds	r7, #40	@ 0x28
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	20000084 	.word	0x20000084
 80010fc:	50040000 	.word	0x50040000
 8001100:	04300002 	.word	0x04300002
 8001104:	08600004 	.word	0x08600004
 8001108:	c7520000 	.word	0xc7520000

0800110c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001110:	4b1b      	ldr	r3, [pc, #108]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001112:	4a1c      	ldr	r2, [pc, #112]	@ (8001184 <MX_I2C1_Init+0x78>)
 8001114:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8001116:	4b1a      	ldr	r3, [pc, #104]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001118:	4a1b      	ldr	r2, [pc, #108]	@ (8001188 <MX_I2C1_Init+0x7c>)
 800111a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800111c:	4b18      	ldr	r3, [pc, #96]	@ (8001180 <MX_I2C1_Init+0x74>)
 800111e:	2200      	movs	r2, #0
 8001120:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001122:	4b17      	ldr	r3, [pc, #92]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001124:	2201      	movs	r2, #1
 8001126:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001128:	4b15      	ldr	r3, [pc, #84]	@ (8001180 <MX_I2C1_Init+0x74>)
 800112a:	2200      	movs	r2, #0
 800112c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001130:	2200      	movs	r2, #0
 8001132:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001134:	4b12      	ldr	r3, [pc, #72]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800113a:	4b11      	ldr	r3, [pc, #68]	@ (8001180 <MX_I2C1_Init+0x74>)
 800113c:	2200      	movs	r2, #0
 800113e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001140:	4b0f      	ldr	r3, [pc, #60]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001142:	2200      	movs	r2, #0
 8001144:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001146:	480e      	ldr	r0, [pc, #56]	@ (8001180 <MX_I2C1_Init+0x74>)
 8001148:	f002 fe8e 	bl	8003e68 <HAL_I2C_Init>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001152:	f000 fae7 	bl	8001724 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001156:	2100      	movs	r1, #0
 8001158:	4809      	ldr	r0, [pc, #36]	@ (8001180 <MX_I2C1_Init+0x74>)
 800115a:	f003 fb0f 	bl	800477c <HAL_I2CEx_ConfigAnalogFilter>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001164:	f000 fade 	bl	8001724 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001168:	2100      	movs	r1, #0
 800116a:	4805      	ldr	r0, [pc, #20]	@ (8001180 <MX_I2C1_Init+0x74>)
 800116c:	f003 fb51 	bl	8004812 <HAL_I2CEx_ConfigDigitalFilter>
 8001170:	4603      	mov	r3, r0
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001176:	f000 fad5 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800117a:	bf00      	nop
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200000e8 	.word	0x200000e8
 8001184:	40005400 	.word	0x40005400
 8001188:	00702991 	.word	0x00702991

0800118c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001190:	4b14      	ldr	r3, [pc, #80]	@ (80011e4 <MX_USART2_UART_Init+0x58>)
 8001192:	4a15      	ldr	r2, [pc, #84]	@ (80011e8 <MX_USART2_UART_Init+0x5c>)
 8001194:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001196:	4b13      	ldr	r3, [pc, #76]	@ (80011e4 <MX_USART2_UART_Init+0x58>)
 8001198:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800119c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800119e:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011a4:	4b0f      	ldr	r3, [pc, #60]	@ (80011e4 <MX_USART2_UART_Init+0x58>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_USART2_UART_Init+0x58>)
 80011b2:	220c      	movs	r2, #12
 80011b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_USART2_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_USART2_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_USART2_UART_Init+0x58>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_USART2_UART_Init+0x58>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <MX_USART2_UART_Init+0x58>)
 80011d0:	f005 f97e 	bl	80064d0 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011da:	f000 faa3 	bl	8001724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000134 	.word	0x20000134
 80011e8:	40004400 	.word	0x40004400

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	4b2b      	ldr	r3, [pc, #172]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001206:	4a2a      	ldr	r2, [pc, #168]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 8001208:	f043 0304 	orr.w	r3, r3, #4
 800120c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800120e:	4b28      	ldr	r3, [pc, #160]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001212:	f003 0304 	and.w	r3, r3, #4
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121a:	4b25      	ldr	r3, [pc, #148]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800121e:	4a24      	ldr	r2, [pc, #144]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 8001220:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001224:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001226:	4b22      	ldr	r3, [pc, #136]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 8001228:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800122a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800122e:	60fb      	str	r3, [r7, #12]
 8001230:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	4b1f      	ldr	r3, [pc, #124]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 8001234:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001236:	4a1e      	ldr	r2, [pc, #120]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 8001238:	f043 0301 	orr.w	r3, r3, #1
 800123c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800123e:	4b1c      	ldr	r3, [pc, #112]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 8001240:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	60bb      	str	r3, [r7, #8]
 8001248:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800124a:	4b19      	ldr	r3, [pc, #100]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 800124c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800124e:	4a18      	ldr	r2, [pc, #96]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001256:	4b16      	ldr	r3, [pc, #88]	@ (80012b0 <MX_GPIO_Init+0xc4>)
 8001258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001262:	2200      	movs	r2, #0
 8001264:	2120      	movs	r1, #32
 8001266:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126a:	f002 fde5 	bl	8003e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800126e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001272:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001274:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127a:	2300      	movs	r3, #0
 800127c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800127e:	f107 0314 	add.w	r3, r7, #20
 8001282:	4619      	mov	r1, r3
 8001284:	480b      	ldr	r0, [pc, #44]	@ (80012b4 <MX_GPIO_Init+0xc8>)
 8001286:	f002 fc2d 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800128a:	2320      	movs	r3, #32
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800129a:	f107 0314 	add.w	r3, r7, #20
 800129e:	4619      	mov	r1, r3
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012a4:	f002 fc1e 	bl	8003ae4 <HAL_GPIO_Init>

}
 80012a8:	bf00      	nop
 80012aa:	3728      	adds	r7, #40	@ 0x28
 80012ac:	46bd      	mov	sp, r7
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40021000 	.word	0x40021000
 80012b4:	48000800 	.word	0x48000800

080012b8 <Task_action>:

/* USER CODE BEGIN 4 */
void Task_action(int ADC_INPUT)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
				SSD1306_Putc ((char)((int)(Temp)%10+48), &Font_11x18, 1);
				SSD1306_UpdateScreen(); // update screen
				HAL_Delay(200);
	}*/
	//////////////////
	switch (ADC_INPUT)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d004      	beq.n	80012d0 <Task_action+0x18>
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	f000 8095 	beq.w	80013f8 <Task_action+0x140>
		SSD1306_Puts (".", &Font_11x18, 1);
		SSD1306_Putc ((char)((int)(Temp)%10+48), &Font_11x18, 1);
		SSD1306_UpdateScreen(); // update screen
		break;
	default:
		break;
 80012ce:	e1ce      	b.n	800166e <Task_action+0x3b6>
		ADC_Select_CH1();
 80012d0:	f7ff fd6c 	bl	8000dac <ADC_Select_CH1>
		HAL_ADC_Start(&hadc1);
 80012d4:	483f      	ldr	r0, [pc, #252]	@ (80013d4 <Task_action+0x11c>)
 80012d6:	f001 fb0b 	bl	80028f0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 80012da:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80012de:	483d      	ldr	r0, [pc, #244]	@ (80013d4 <Task_action+0x11c>)
 80012e0:	f001 fbf4 	bl	8002acc <HAL_ADC_PollForConversion>
		ADC_VAL[0] = HAL_ADC_GetValue(&hadc1);
 80012e4:	483b      	ldr	r0, [pc, #236]	@ (80013d4 <Task_action+0x11c>)
 80012e6:	f001 fcc9 	bl	8002c7c <HAL_ADC_GetValue>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	4b3a      	ldr	r3, [pc, #232]	@ (80013d8 <Task_action+0x120>)
 80012f0:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80012f2:	4838      	ldr	r0, [pc, #224]	@ (80013d4 <Task_action+0x11c>)
 80012f4:	f001 fbb6 	bl	8002a64 <HAL_ADC_Stop>
		sprintf(msg,"%hu\r\n",ADC_VAL[0]);
 80012f8:	4b37      	ldr	r3, [pc, #220]	@ (80013d8 <Task_action+0x120>)
 80012fa:	881b      	ldrh	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4937      	ldr	r1, [pc, #220]	@ (80013dc <Task_action+0x124>)
 8001300:	4837      	ldr	r0, [pc, #220]	@ (80013e0 <Task_action+0x128>)
 8001302:	f008 fc21 	bl	8009b48 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8001306:	4836      	ldr	r0, [pc, #216]	@ (80013e0 <Task_action+0x128>)
 8001308:	f7fe ff62 	bl	80001d0 <strlen>
 800130c:	4603      	mov	r3, r0
 800130e:	b29a      	uxth	r2, r3
 8001310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001314:	4932      	ldr	r1, [pc, #200]	@ (80013e0 <Task_action+0x128>)
 8001316:	4833      	ldr	r0, [pc, #204]	@ (80013e4 <Task_action+0x12c>)
 8001318:	f005 f928 	bl	800656c <HAL_UART_Transmit>
		SSD1306_GotoXY (60,0); // goto 10, 10
 800131c:	2100      	movs	r1, #0
 800131e:	203c      	movs	r0, #60	@ 0x3c
 8001320:	f000 fb70 	bl	8001a04 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(ADC_VAL[0]/1000+48), &Font_11x18, 1);
 8001324:	4b2c      	ldr	r3, [pc, #176]	@ (80013d8 <Task_action+0x120>)
 8001326:	881b      	ldrh	r3, [r3, #0]
 8001328:	4a2f      	ldr	r2, [pc, #188]	@ (80013e8 <Task_action+0x130>)
 800132a:	fba2 2303 	umull	r2, r3, r2, r3
 800132e:	099b      	lsrs	r3, r3, #6
 8001330:	b29b      	uxth	r3, r3
 8001332:	b2db      	uxtb	r3, r3
 8001334:	3330      	adds	r3, #48	@ 0x30
 8001336:	b2db      	uxtb	r3, r3
 8001338:	2201      	movs	r2, #1
 800133a:	492c      	ldr	r1, [pc, #176]	@ (80013ec <Task_action+0x134>)
 800133c:	4618      	mov	r0, r3
 800133e:	f000 fb77 	bl	8001a30 <SSD1306_Putc>
		SSD1306_Putc ((char)((ADC_VAL[0]%1000)/100+48), &Font_11x18, 1);
 8001342:	4b25      	ldr	r3, [pc, #148]	@ (80013d8 <Task_action+0x120>)
 8001344:	881b      	ldrh	r3, [r3, #0]
 8001346:	4a28      	ldr	r2, [pc, #160]	@ (80013e8 <Task_action+0x130>)
 8001348:	fba2 1203 	umull	r1, r2, r2, r3
 800134c:	0992      	lsrs	r2, r2, #6
 800134e:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001352:	fb01 f202 	mul.w	r2, r1, r2
 8001356:	1a9b      	subs	r3, r3, r2
 8001358:	b29b      	uxth	r3, r3
 800135a:	4a25      	ldr	r2, [pc, #148]	@ (80013f0 <Task_action+0x138>)
 800135c:	fba2 2303 	umull	r2, r3, r2, r3
 8001360:	095b      	lsrs	r3, r3, #5
 8001362:	b29b      	uxth	r3, r3
 8001364:	b2db      	uxtb	r3, r3
 8001366:	3330      	adds	r3, #48	@ 0x30
 8001368:	b2db      	uxtb	r3, r3
 800136a:	2201      	movs	r2, #1
 800136c:	491f      	ldr	r1, [pc, #124]	@ (80013ec <Task_action+0x134>)
 800136e:	4618      	mov	r0, r3
 8001370:	f000 fb5e 	bl	8001a30 <SSD1306_Putc>
		SSD1306_Putc ((char)((ADC_VAL[0]%100)/10+48), &Font_11x18, 1);
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <Task_action+0x120>)
 8001376:	881b      	ldrh	r3, [r3, #0]
 8001378:	4a1d      	ldr	r2, [pc, #116]	@ (80013f0 <Task_action+0x138>)
 800137a:	fba2 1203 	umull	r1, r2, r2, r3
 800137e:	0952      	lsrs	r2, r2, #5
 8001380:	2164      	movs	r1, #100	@ 0x64
 8001382:	fb01 f202 	mul.w	r2, r1, r2
 8001386:	1a9b      	subs	r3, r3, r2
 8001388:	b29b      	uxth	r3, r3
 800138a:	4a1a      	ldr	r2, [pc, #104]	@ (80013f4 <Task_action+0x13c>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	08db      	lsrs	r3, r3, #3
 8001392:	b29b      	uxth	r3, r3
 8001394:	b2db      	uxtb	r3, r3
 8001396:	3330      	adds	r3, #48	@ 0x30
 8001398:	b2db      	uxtb	r3, r3
 800139a:	2201      	movs	r2, #1
 800139c:	4913      	ldr	r1, [pc, #76]	@ (80013ec <Task_action+0x134>)
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fb46 	bl	8001a30 <SSD1306_Putc>
		SSD1306_Putc ((char)(ADC_VAL[0]%10+48), &Font_11x18, 1);
 80013a4:	4b0c      	ldr	r3, [pc, #48]	@ (80013d8 <Task_action+0x120>)
 80013a6:	881a      	ldrh	r2, [r3, #0]
 80013a8:	4b12      	ldr	r3, [pc, #72]	@ (80013f4 <Task_action+0x13c>)
 80013aa:	fba3 1302 	umull	r1, r3, r3, r2
 80013ae:	08d9      	lsrs	r1, r3, #3
 80013b0:	460b      	mov	r3, r1
 80013b2:	009b      	lsls	r3, r3, #2
 80013b4:	440b      	add	r3, r1
 80013b6:	005b      	lsls	r3, r3, #1
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	b29b      	uxth	r3, r3
 80013bc:	b2db      	uxtb	r3, r3
 80013be:	3330      	adds	r3, #48	@ 0x30
 80013c0:	b2db      	uxtb	r3, r3
 80013c2:	2201      	movs	r2, #1
 80013c4:	4909      	ldr	r1, [pc, #36]	@ (80013ec <Task_action+0x134>)
 80013c6:	4618      	mov	r0, r3
 80013c8:	f000 fb32 	bl	8001a30 <SSD1306_Putc>
		SSD1306_UpdateScreen(); // update screen
 80013cc:	f000 fa74 	bl	80018b8 <SSD1306_UpdateScreen>
		break;
 80013d0:	e14d      	b.n	800166e <Task_action+0x3b6>
 80013d2:	bf00      	nop
 80013d4:	20000084 	.word	0x20000084
 80013d8:	200001c0 	.word	0x200001c0
 80013dc:	0800a574 	.word	0x0800a574
 80013e0:	200001cc 	.word	0x200001cc
 80013e4:	20000134 	.word	0x20000134
 80013e8:	10624dd3 	.word	0x10624dd3
 80013ec:	20000000 	.word	0x20000000
 80013f0:	51eb851f 	.word	0x51eb851f
 80013f4:	cccccccd 	.word	0xcccccccd
		ADC_Select_CH2();
 80013f8:	f7ff fcfc 	bl	8000df4 <ADC_Select_CH2>
		HAL_ADC_Start(&hadc1);
 80013fc:	48a6      	ldr	r0, [pc, #664]	@ (8001698 <Task_action+0x3e0>)
 80013fe:	f001 fa77 	bl	80028f0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 8001402:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001406:	48a4      	ldr	r0, [pc, #656]	@ (8001698 <Task_action+0x3e0>)
 8001408:	f001 fb60 	bl	8002acc <HAL_ADC_PollForConversion>
		ADC_VAL[1] = HAL_ADC_GetValue(&hadc1);
 800140c:	48a2      	ldr	r0, [pc, #648]	@ (8001698 <Task_action+0x3e0>)
 800140e:	f001 fc35 	bl	8002c7c <HAL_ADC_GetValue>
 8001412:	4603      	mov	r3, r0
 8001414:	b29a      	uxth	r2, r3
 8001416:	4ba1      	ldr	r3, [pc, #644]	@ (800169c <Task_action+0x3e4>)
 8001418:	805a      	strh	r2, [r3, #2]
		HAL_ADC_Stop(&hadc1);
 800141a:	489f      	ldr	r0, [pc, #636]	@ (8001698 <Task_action+0x3e0>)
 800141c:	f001 fb22 	bl	8002a64 <HAL_ADC_Stop>
		ADC_Select_CHTemp();
 8001420:	f7ff fd0c 	bl	8000e3c <ADC_Select_CHTemp>
		HAL_ADC_Start(&hadc1);
 8001424:	489c      	ldr	r0, [pc, #624]	@ (8001698 <Task_action+0x3e0>)
 8001426:	f001 fa63 	bl	80028f0 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 800142a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800142e:	489a      	ldr	r0, [pc, #616]	@ (8001698 <Task_action+0x3e0>)
 8001430:	f001 fb4c 	bl	8002acc <HAL_ADC_PollForConversion>
		ADC_VAL[2] = HAL_ADC_GetValue(&hadc1);
 8001434:	4898      	ldr	r0, [pc, #608]	@ (8001698 <Task_action+0x3e0>)
 8001436:	f001 fc21 	bl	8002c7c <HAL_ADC_GetValue>
 800143a:	4603      	mov	r3, r0
 800143c:	b29a      	uxth	r2, r3
 800143e:	4b97      	ldr	r3, [pc, #604]	@ (800169c <Task_action+0x3e4>)
 8001440:	809a      	strh	r2, [r3, #4]
		HAL_ADC_Stop(&hadc1);
 8001442:	4895      	ldr	r0, [pc, #596]	@ (8001698 <Task_action+0x3e0>)
 8001444:	f001 fb0e 	bl	8002a64 <HAL_ADC_Stop>
		Temp = ((3.3*ADC_VAL[2]/4095 - V25)/Avg_Slope)+25;
 8001448:	4b94      	ldr	r3, [pc, #592]	@ (800169c <Task_action+0x3e4>)
 800144a:	889b      	ldrh	r3, [r3, #4]
 800144c:	4618      	mov	r0, r3
 800144e:	f7ff f869 	bl	8000524 <__aeabi_i2d>
 8001452:	a389      	add	r3, pc, #548	@ (adr r3, 8001678 <Task_action+0x3c0>)
 8001454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001458:	f7ff f8ce 	bl	80005f8 <__aeabi_dmul>
 800145c:	4602      	mov	r2, r0
 800145e:	460b      	mov	r3, r1
 8001460:	4610      	mov	r0, r2
 8001462:	4619      	mov	r1, r3
 8001464:	a386      	add	r3, pc, #536	@ (adr r3, 8001680 <Task_action+0x3c8>)
 8001466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800146a:	f7ff f9ef 	bl	800084c <__aeabi_ddiv>
 800146e:	4602      	mov	r2, r0
 8001470:	460b      	mov	r3, r1
 8001472:	4610      	mov	r0, r2
 8001474:	4619      	mov	r1, r3
 8001476:	a384      	add	r3, pc, #528	@ (adr r3, 8001688 <Task_action+0x3d0>)
 8001478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800147c:	f7fe ff04 	bl	8000288 <__aeabi_dsub>
 8001480:	4602      	mov	r2, r0
 8001482:	460b      	mov	r3, r1
 8001484:	4610      	mov	r0, r2
 8001486:	4619      	mov	r1, r3
 8001488:	a381      	add	r3, pc, #516	@ (adr r3, 8001690 <Task_action+0x3d8>)
 800148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800148e:	f7ff f9dd 	bl	800084c <__aeabi_ddiv>
 8001492:	4602      	mov	r2, r0
 8001494:	460b      	mov	r3, r1
 8001496:	4610      	mov	r0, r2
 8001498:	4619      	mov	r1, r3
 800149a:	f04f 0200 	mov.w	r2, #0
 800149e:	4b80      	ldr	r3, [pc, #512]	@ (80016a0 <Task_action+0x3e8>)
 80014a0:	f7fe fef4 	bl	800028c <__adddf3>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4610      	mov	r0, r2
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff fab6 	bl	8000a1c <__aeabi_d2f>
 80014b0:	4603      	mov	r3, r0
 80014b2:	4a7c      	ldr	r2, [pc, #496]	@ (80016a4 <Task_action+0x3ec>)
 80014b4:	6013      	str	r3, [r2, #0]
		sprintf(msg,"%hu\r\n",ADC_VAL[1]);
 80014b6:	4b79      	ldr	r3, [pc, #484]	@ (800169c <Task_action+0x3e4>)
 80014b8:	885b      	ldrh	r3, [r3, #2]
 80014ba:	461a      	mov	r2, r3
 80014bc:	497a      	ldr	r1, [pc, #488]	@ (80016a8 <Task_action+0x3f0>)
 80014be:	487b      	ldr	r0, [pc, #492]	@ (80016ac <Task_action+0x3f4>)
 80014c0:	f008 fb42 	bl	8009b48 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80014c4:	4879      	ldr	r0, [pc, #484]	@ (80016ac <Task_action+0x3f4>)
 80014c6:	f7fe fe83 	bl	80001d0 <strlen>
 80014ca:	4603      	mov	r3, r0
 80014cc:	b29a      	uxth	r2, r3
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014d2:	4976      	ldr	r1, [pc, #472]	@ (80016ac <Task_action+0x3f4>)
 80014d4:	4876      	ldr	r0, [pc, #472]	@ (80016b0 <Task_action+0x3f8>)
 80014d6:	f005 f849 	bl	800656c <HAL_UART_Transmit>
		sprintf(msg,"%hu\r\n",(uint16_t)Temp);
 80014da:	4b72      	ldr	r3, [pc, #456]	@ (80016a4 <Task_action+0x3ec>)
 80014dc:	edd3 7a00 	vldr	s15, [r3]
 80014e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014e4:	ee17 3a90 	vmov	r3, s15
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	461a      	mov	r2, r3
 80014ec:	496e      	ldr	r1, [pc, #440]	@ (80016a8 <Task_action+0x3f0>)
 80014ee:	486f      	ldr	r0, [pc, #444]	@ (80016ac <Task_action+0x3f4>)
 80014f0:	f008 fb2a 	bl	8009b48 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 80014f4:	486d      	ldr	r0, [pc, #436]	@ (80016ac <Task_action+0x3f4>)
 80014f6:	f7fe fe6b 	bl	80001d0 <strlen>
 80014fa:	4603      	mov	r3, r0
 80014fc:	b29a      	uxth	r2, r3
 80014fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001502:	496a      	ldr	r1, [pc, #424]	@ (80016ac <Task_action+0x3f4>)
 8001504:	486a      	ldr	r0, [pc, #424]	@ (80016b0 <Task_action+0x3f8>)
 8001506:	f005 f831 	bl	800656c <HAL_UART_Transmit>
		SSD1306_GotoXY (60,20); // goto 10, 10
 800150a:	2114      	movs	r1, #20
 800150c:	203c      	movs	r0, #60	@ 0x3c
 800150e:	f000 fa79 	bl	8001a04 <SSD1306_GotoXY>
		SSD1306_Putc ((char)(ADC_VAL[1]/1000+48), &Font_11x18, 1);
 8001512:	4b62      	ldr	r3, [pc, #392]	@ (800169c <Task_action+0x3e4>)
 8001514:	885b      	ldrh	r3, [r3, #2]
 8001516:	4a67      	ldr	r2, [pc, #412]	@ (80016b4 <Task_action+0x3fc>)
 8001518:	fba2 2303 	umull	r2, r3, r2, r3
 800151c:	099b      	lsrs	r3, r3, #6
 800151e:	b29b      	uxth	r3, r3
 8001520:	b2db      	uxtb	r3, r3
 8001522:	3330      	adds	r3, #48	@ 0x30
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2201      	movs	r2, #1
 8001528:	4963      	ldr	r1, [pc, #396]	@ (80016b8 <Task_action+0x400>)
 800152a:	4618      	mov	r0, r3
 800152c:	f000 fa80 	bl	8001a30 <SSD1306_Putc>
		SSD1306_Putc ((char)((ADC_VAL[1]%1000)/100+48), &Font_11x18, 1);
 8001530:	4b5a      	ldr	r3, [pc, #360]	@ (800169c <Task_action+0x3e4>)
 8001532:	885b      	ldrh	r3, [r3, #2]
 8001534:	4a5f      	ldr	r2, [pc, #380]	@ (80016b4 <Task_action+0x3fc>)
 8001536:	fba2 1203 	umull	r1, r2, r2, r3
 800153a:	0992      	lsrs	r2, r2, #6
 800153c:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001540:	fb01 f202 	mul.w	r2, r1, r2
 8001544:	1a9b      	subs	r3, r3, r2
 8001546:	b29b      	uxth	r3, r3
 8001548:	4a5c      	ldr	r2, [pc, #368]	@ (80016bc <Task_action+0x404>)
 800154a:	fba2 2303 	umull	r2, r3, r2, r3
 800154e:	095b      	lsrs	r3, r3, #5
 8001550:	b29b      	uxth	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	3330      	adds	r3, #48	@ 0x30
 8001556:	b2db      	uxtb	r3, r3
 8001558:	2201      	movs	r2, #1
 800155a:	4957      	ldr	r1, [pc, #348]	@ (80016b8 <Task_action+0x400>)
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fa67 	bl	8001a30 <SSD1306_Putc>
		SSD1306_Putc ((char)((ADC_VAL[1]%100)/10+48), &Font_11x18, 1);
 8001562:	4b4e      	ldr	r3, [pc, #312]	@ (800169c <Task_action+0x3e4>)
 8001564:	885b      	ldrh	r3, [r3, #2]
 8001566:	4a55      	ldr	r2, [pc, #340]	@ (80016bc <Task_action+0x404>)
 8001568:	fba2 1203 	umull	r1, r2, r2, r3
 800156c:	0952      	lsrs	r2, r2, #5
 800156e:	2164      	movs	r1, #100	@ 0x64
 8001570:	fb01 f202 	mul.w	r2, r1, r2
 8001574:	1a9b      	subs	r3, r3, r2
 8001576:	b29b      	uxth	r3, r3
 8001578:	4a51      	ldr	r2, [pc, #324]	@ (80016c0 <Task_action+0x408>)
 800157a:	fba2 2303 	umull	r2, r3, r2, r3
 800157e:	08db      	lsrs	r3, r3, #3
 8001580:	b29b      	uxth	r3, r3
 8001582:	b2db      	uxtb	r3, r3
 8001584:	3330      	adds	r3, #48	@ 0x30
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2201      	movs	r2, #1
 800158a:	494b      	ldr	r1, [pc, #300]	@ (80016b8 <Task_action+0x400>)
 800158c:	4618      	mov	r0, r3
 800158e:	f000 fa4f 	bl	8001a30 <SSD1306_Putc>
		SSD1306_Putc ((char)(ADC_VAL[1]%10+48), &Font_11x18, 1);
 8001592:	4b42      	ldr	r3, [pc, #264]	@ (800169c <Task_action+0x3e4>)
 8001594:	885a      	ldrh	r2, [r3, #2]
 8001596:	4b4a      	ldr	r3, [pc, #296]	@ (80016c0 <Task_action+0x408>)
 8001598:	fba3 1302 	umull	r1, r3, r3, r2
 800159c:	08d9      	lsrs	r1, r3, #3
 800159e:	460b      	mov	r3, r1
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	440b      	add	r3, r1
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	b29b      	uxth	r3, r3
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	3330      	adds	r3, #48	@ 0x30
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2201      	movs	r2, #1
 80015b2:	4941      	ldr	r1, [pc, #260]	@ (80016b8 <Task_action+0x400>)
 80015b4:	4618      	mov	r0, r3
 80015b6:	f000 fa3b 	bl	8001a30 <SSD1306_Putc>
		SSD1306_GotoXY (60,40); // goto 10, 10
 80015ba:	2128      	movs	r1, #40	@ 0x28
 80015bc:	203c      	movs	r0, #60	@ 0x3c
 80015be:	f000 fa21 	bl	8001a04 <SSD1306_GotoXY>
		SSD1306_Putc ((char)((int)(Temp)/100+48), &Font_11x18, 1);
 80015c2:	4b38      	ldr	r3, [pc, #224]	@ (80016a4 <Task_action+0x3ec>)
 80015c4:	edd3 7a00 	vldr	s15, [r3]
 80015c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015cc:	ee17 1a90 	vmov	r1, s15
 80015d0:	4b3a      	ldr	r3, [pc, #232]	@ (80016bc <Task_action+0x404>)
 80015d2:	fb83 2301 	smull	r2, r3, r3, r1
 80015d6:	115a      	asrs	r2, r3, #5
 80015d8:	17cb      	asrs	r3, r1, #31
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	3330      	adds	r3, #48	@ 0x30
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2201      	movs	r2, #1
 80015e4:	4934      	ldr	r1, [pc, #208]	@ (80016b8 <Task_action+0x400>)
 80015e6:	4618      	mov	r0, r3
 80015e8:	f000 fa22 	bl	8001a30 <SSD1306_Putc>
		SSD1306_Putc ((char)(((int)(Temp)%100)/10+48), &Font_11x18, 1);
 80015ec:	4b2d      	ldr	r3, [pc, #180]	@ (80016a4 <Task_action+0x3ec>)
 80015ee:	edd3 7a00 	vldr	s15, [r3]
 80015f2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015f6:	ee17 2a90 	vmov	r2, s15
 80015fa:	4b30      	ldr	r3, [pc, #192]	@ (80016bc <Task_action+0x404>)
 80015fc:	fb83 1302 	smull	r1, r3, r3, r2
 8001600:	1159      	asrs	r1, r3, #5
 8001602:	17d3      	asrs	r3, r2, #31
 8001604:	1acb      	subs	r3, r1, r3
 8001606:	2164      	movs	r1, #100	@ 0x64
 8001608:	fb01 f303 	mul.w	r3, r1, r3
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	4a2d      	ldr	r2, [pc, #180]	@ (80016c4 <Task_action+0x40c>)
 8001610:	fb82 1203 	smull	r1, r2, r2, r3
 8001614:	1092      	asrs	r2, r2, #2
 8001616:	17db      	asrs	r3, r3, #31
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	b2db      	uxtb	r3, r3
 800161c:	3330      	adds	r3, #48	@ 0x30
 800161e:	b2db      	uxtb	r3, r3
 8001620:	2201      	movs	r2, #1
 8001622:	4925      	ldr	r1, [pc, #148]	@ (80016b8 <Task_action+0x400>)
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fa03 	bl	8001a30 <SSD1306_Putc>
		SSD1306_Puts (".", &Font_11x18, 1);
 800162a:	2201      	movs	r2, #1
 800162c:	4922      	ldr	r1, [pc, #136]	@ (80016b8 <Task_action+0x400>)
 800162e:	4826      	ldr	r0, [pc, #152]	@ (80016c8 <Task_action+0x410>)
 8001630:	f000 fa7c 	bl	8001b2c <SSD1306_Puts>
		SSD1306_Putc ((char)((int)(Temp)%10+48), &Font_11x18, 1);
 8001634:	4b1b      	ldr	r3, [pc, #108]	@ (80016a4 <Task_action+0x3ec>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800163e:	ee17 1a90 	vmov	r1, s15
 8001642:	4b20      	ldr	r3, [pc, #128]	@ (80016c4 <Task_action+0x40c>)
 8001644:	fb83 2301 	smull	r2, r3, r3, r1
 8001648:	109a      	asrs	r2, r3, #2
 800164a:	17cb      	asrs	r3, r1, #31
 800164c:	1ad2      	subs	r2, r2, r3
 800164e:	4613      	mov	r3, r2
 8001650:	009b      	lsls	r3, r3, #2
 8001652:	4413      	add	r3, r2
 8001654:	005b      	lsls	r3, r3, #1
 8001656:	1aca      	subs	r2, r1, r3
 8001658:	b2d3      	uxtb	r3, r2
 800165a:	3330      	adds	r3, #48	@ 0x30
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2201      	movs	r2, #1
 8001660:	4915      	ldr	r1, [pc, #84]	@ (80016b8 <Task_action+0x400>)
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f9e4 	bl	8001a30 <SSD1306_Putc>
		SSD1306_UpdateScreen(); // update screen
 8001668:	f000 f926 	bl	80018b8 <SSD1306_UpdateScreen>
		break;
 800166c:	bf00      	nop
	}
	//SSD1306_UpdateScreen(); // update screen
}
 800166e:	bf00      	nop
 8001670:	3708      	adds	r7, #8
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	66666666 	.word	0x66666666
 800167c:	400a6666 	.word	0x400a6666
 8001680:	00000000 	.word	0x00000000
 8001684:	40affe00 	.word	0x40affe00
 8001688:	851eb852 	.word	0x851eb852
 800168c:	3fe851eb 	.word	0x3fe851eb
 8001690:	47ae147b 	.word	0x47ae147b
 8001694:	3f647ae1 	.word	0x3f647ae1
 8001698:	20000084 	.word	0x20000084
 800169c:	200001c0 	.word	0x200001c0
 80016a0:	40390000 	.word	0x40390000
 80016a4:	200001c8 	.word	0x200001c8
 80016a8:	0800a574 	.word	0x0800a574
 80016ac:	200001cc 	.word	0x200001cc
 80016b0:	20000134 	.word	0x20000134
 80016b4:	10624dd3 	.word	0x10624dd3
 80016b8:	20000000 	.word	0x20000000
 80016bc:	51eb851f 	.word	0x51eb851f
 80016c0:	cccccccd 	.word	0xcccccccd
 80016c4:	66666667 	.word	0x66666667
 80016c8:	0800a57c 	.word	0x0800a57c

080016cc <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	Task_action(1);
 80016d4:	2001      	movs	r0, #1
 80016d6:	f7ff fdef 	bl	80012b8 <Task_action>
    osDelay(1000);
 80016da:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80016de:	f005 fd61 	bl	80071a4 <osDelay>
	Task_action(1);
 80016e2:	bf00      	nop
 80016e4:	e7f6      	b.n	80016d4 <StartTask1+0x8>

080016e6 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	Task_action(2);
 80016ee:	2002      	movs	r0, #2
 80016f0:	f7ff fde2 	bl	80012b8 <Task_action>
    osDelay(2000);
 80016f4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80016f8:	f005 fd54 	bl	80071a4 <osDelay>
	Task_action(2);
 80016fc:	bf00      	nop
 80016fe:	e7f6      	b.n	80016ee <StartTask2+0x8>

08001700 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a04      	ldr	r2, [pc, #16]	@ (8001720 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800170e:	4293      	cmp	r3, r2
 8001710:	d101      	bne.n	8001716 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001712:	f000 fd45 	bl	80021a0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001716:	bf00      	nop
 8001718:	3708      	adds	r7, #8
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	40001000 	.word	0x40001000

08001724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001728:	b672      	cpsid	i
}
 800172a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800172c:	bf00      	nop
 800172e:	e7fd      	b.n	800172c <Error_Handler+0x8>

08001730 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8001736:	f000 fa1f 	bl	8001b78 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800173a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 800173e:	2201      	movs	r2, #1
 8001740:	2178      	movs	r1, #120	@ 0x78
 8001742:	485b      	ldr	r0, [pc, #364]	@ (80018b0 <SSD1306_Init+0x180>)
 8001744:	f002 fd14 	bl	8004170 <HAL_I2C_IsDeviceReady>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800174e:	2300      	movs	r3, #0
 8001750:	e0a9      	b.n	80018a6 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001752:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8001756:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001758:	e002      	b.n	8001760 <SSD1306_Init+0x30>
		p--;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	3b01      	subs	r3, #1
 800175e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d1f9      	bne.n	800175a <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8001766:	22ae      	movs	r2, #174	@ 0xae
 8001768:	2100      	movs	r1, #0
 800176a:	2078      	movs	r0, #120	@ 0x78
 800176c:	f000 fa80 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001770:	2220      	movs	r2, #32
 8001772:	2100      	movs	r1, #0
 8001774:	2078      	movs	r0, #120	@ 0x78
 8001776:	f000 fa7b 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800177a:	2210      	movs	r2, #16
 800177c:	2100      	movs	r1, #0
 800177e:	2078      	movs	r0, #120	@ 0x78
 8001780:	f000 fa76 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001784:	22b0      	movs	r2, #176	@ 0xb0
 8001786:	2100      	movs	r1, #0
 8001788:	2078      	movs	r0, #120	@ 0x78
 800178a:	f000 fa71 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800178e:	22c8      	movs	r2, #200	@ 0xc8
 8001790:	2100      	movs	r1, #0
 8001792:	2078      	movs	r0, #120	@ 0x78
 8001794:	f000 fa6c 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8001798:	2200      	movs	r2, #0
 800179a:	2100      	movs	r1, #0
 800179c:	2078      	movs	r0, #120	@ 0x78
 800179e:	f000 fa67 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80017a2:	2210      	movs	r2, #16
 80017a4:	2100      	movs	r1, #0
 80017a6:	2078      	movs	r0, #120	@ 0x78
 80017a8:	f000 fa62 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80017ac:	2240      	movs	r2, #64	@ 0x40
 80017ae:	2100      	movs	r1, #0
 80017b0:	2078      	movs	r0, #120	@ 0x78
 80017b2:	f000 fa5d 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80017b6:	2281      	movs	r2, #129	@ 0x81
 80017b8:	2100      	movs	r1, #0
 80017ba:	2078      	movs	r0, #120	@ 0x78
 80017bc:	f000 fa58 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80017c0:	22ff      	movs	r2, #255	@ 0xff
 80017c2:	2100      	movs	r1, #0
 80017c4:	2078      	movs	r0, #120	@ 0x78
 80017c6:	f000 fa53 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80017ca:	22a1      	movs	r2, #161	@ 0xa1
 80017cc:	2100      	movs	r1, #0
 80017ce:	2078      	movs	r0, #120	@ 0x78
 80017d0:	f000 fa4e 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80017d4:	22a6      	movs	r2, #166	@ 0xa6
 80017d6:	2100      	movs	r1, #0
 80017d8:	2078      	movs	r0, #120	@ 0x78
 80017da:	f000 fa49 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80017de:	22a8      	movs	r2, #168	@ 0xa8
 80017e0:	2100      	movs	r1, #0
 80017e2:	2078      	movs	r0, #120	@ 0x78
 80017e4:	f000 fa44 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80017e8:	223f      	movs	r2, #63	@ 0x3f
 80017ea:	2100      	movs	r1, #0
 80017ec:	2078      	movs	r0, #120	@ 0x78
 80017ee:	f000 fa3f 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80017f2:	22a4      	movs	r2, #164	@ 0xa4
 80017f4:	2100      	movs	r1, #0
 80017f6:	2078      	movs	r0, #120	@ 0x78
 80017f8:	f000 fa3a 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80017fc:	22d3      	movs	r2, #211	@ 0xd3
 80017fe:	2100      	movs	r1, #0
 8001800:	2078      	movs	r0, #120	@ 0x78
 8001802:	f000 fa35 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001806:	2200      	movs	r2, #0
 8001808:	2100      	movs	r1, #0
 800180a:	2078      	movs	r0, #120	@ 0x78
 800180c:	f000 fa30 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8001810:	22d5      	movs	r2, #213	@ 0xd5
 8001812:	2100      	movs	r1, #0
 8001814:	2078      	movs	r0, #120	@ 0x78
 8001816:	f000 fa2b 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 800181a:	22f0      	movs	r2, #240	@ 0xf0
 800181c:	2100      	movs	r1, #0
 800181e:	2078      	movs	r0, #120	@ 0x78
 8001820:	f000 fa26 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001824:	22d9      	movs	r2, #217	@ 0xd9
 8001826:	2100      	movs	r1, #0
 8001828:	2078      	movs	r0, #120	@ 0x78
 800182a:	f000 fa21 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800182e:	2222      	movs	r2, #34	@ 0x22
 8001830:	2100      	movs	r1, #0
 8001832:	2078      	movs	r0, #120	@ 0x78
 8001834:	f000 fa1c 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001838:	22da      	movs	r2, #218	@ 0xda
 800183a:	2100      	movs	r1, #0
 800183c:	2078      	movs	r0, #120	@ 0x78
 800183e:	f000 fa17 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001842:	2212      	movs	r2, #18
 8001844:	2100      	movs	r1, #0
 8001846:	2078      	movs	r0, #120	@ 0x78
 8001848:	f000 fa12 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 800184c:	22db      	movs	r2, #219	@ 0xdb
 800184e:	2100      	movs	r1, #0
 8001850:	2078      	movs	r0, #120	@ 0x78
 8001852:	f000 fa0d 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8001856:	2220      	movs	r2, #32
 8001858:	2100      	movs	r1, #0
 800185a:	2078      	movs	r0, #120	@ 0x78
 800185c:	f000 fa08 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001860:	228d      	movs	r2, #141	@ 0x8d
 8001862:	2100      	movs	r1, #0
 8001864:	2078      	movs	r0, #120	@ 0x78
 8001866:	f000 fa03 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800186a:	2214      	movs	r2, #20
 800186c:	2100      	movs	r1, #0
 800186e:	2078      	movs	r0, #120	@ 0x78
 8001870:	f000 f9fe 	bl	8001c70 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001874:	22af      	movs	r2, #175	@ 0xaf
 8001876:	2100      	movs	r1, #0
 8001878:	2078      	movs	r0, #120	@ 0x78
 800187a:	f000 f9f9 	bl	8001c70 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800187e:	222e      	movs	r2, #46	@ 0x2e
 8001880:	2100      	movs	r1, #0
 8001882:	2078      	movs	r0, #120	@ 0x78
 8001884:	f000 f9f4 	bl	8001c70 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8001888:	2000      	movs	r0, #0
 800188a:	f000 f843 	bl	8001914 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 800188e:	f000 f813 	bl	80018b8 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001892:	4b08      	ldr	r3, [pc, #32]	@ (80018b4 <SSD1306_Init+0x184>)
 8001894:	2200      	movs	r2, #0
 8001896:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8001898:	4b06      	ldr	r3, [pc, #24]	@ (80018b4 <SSD1306_Init+0x184>)
 800189a:	2200      	movs	r2, #0
 800189c:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 800189e:	4b05      	ldr	r3, [pc, #20]	@ (80018b4 <SSD1306_Init+0x184>)
 80018a0:	2201      	movs	r2, #1
 80018a2:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80018a4:	2301      	movs	r3, #1
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	200000e8 	.word	0x200000e8
 80018b4:	200005d4 	.word	0x200005d4

080018b8 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80018be:	2300      	movs	r3, #0
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	e01d      	b.n	8001900 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80018c4:	79fb      	ldrb	r3, [r7, #7]
 80018c6:	3b50      	subs	r3, #80	@ 0x50
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	2100      	movs	r1, #0
 80018ce:	2078      	movs	r0, #120	@ 0x78
 80018d0:	f000 f9ce 	bl	8001c70 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	2078      	movs	r0, #120	@ 0x78
 80018da:	f000 f9c9 	bl	8001c70 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80018de:	2210      	movs	r2, #16
 80018e0:	2100      	movs	r1, #0
 80018e2:	2078      	movs	r0, #120	@ 0x78
 80018e4:	f000 f9c4 	bl	8001c70 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	01db      	lsls	r3, r3, #7
 80018ec:	4a08      	ldr	r2, [pc, #32]	@ (8001910 <SSD1306_UpdateScreen+0x58>)
 80018ee:	441a      	add	r2, r3
 80018f0:	2380      	movs	r3, #128	@ 0x80
 80018f2:	2140      	movs	r1, #64	@ 0x40
 80018f4:	2078      	movs	r0, #120	@ 0x78
 80018f6:	f000 f955 	bl	8001ba4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	3301      	adds	r3, #1
 80018fe:	71fb      	strb	r3, [r7, #7]
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	2b07      	cmp	r3, #7
 8001904:	d9de      	bls.n	80018c4 <SSD1306_UpdateScreen+0xc>
	}
}
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	200001d4 	.word	0x200001d4

08001914 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <SSD1306_Fill+0x14>
 8001924:	2300      	movs	r3, #0
 8001926:	e000      	b.n	800192a <SSD1306_Fill+0x16>
 8001928:	23ff      	movs	r3, #255	@ 0xff
 800192a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800192e:	4619      	mov	r1, r3
 8001930:	4803      	ldr	r0, [pc, #12]	@ (8001940 <SSD1306_Fill+0x2c>)
 8001932:	f008 f929 	bl	8009b88 <memset>
}
 8001936:	bf00      	nop
 8001938:	3708      	adds	r7, #8
 800193a:	46bd      	mov	sp, r7
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	200001d4 	.word	0x200001d4

08001944 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	4603      	mov	r3, r0
 800194c:	80fb      	strh	r3, [r7, #6]
 800194e:	460b      	mov	r3, r1
 8001950:	80bb      	strh	r3, [r7, #4]
 8001952:	4613      	mov	r3, r2
 8001954:	70fb      	strb	r3, [r7, #3]
	if (
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	2b7f      	cmp	r3, #127	@ 0x7f
 800195a:	d848      	bhi.n	80019ee <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 800195c:	88bb      	ldrh	r3, [r7, #4]
 800195e:	2b3f      	cmp	r3, #63	@ 0x3f
 8001960:	d845      	bhi.n	80019ee <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001962:	4b26      	ldr	r3, [pc, #152]	@ (80019fc <SSD1306_DrawPixel+0xb8>)
 8001964:	791b      	ldrb	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d006      	beq.n	8001978 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	2b00      	cmp	r3, #0
 800196e:	bf0c      	ite	eq
 8001970:	2301      	moveq	r3, #1
 8001972:	2300      	movne	r3, #0
 8001974:	b2db      	uxtb	r3, r3
 8001976:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8001978:	78fb      	ldrb	r3, [r7, #3]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d11a      	bne.n	80019b4 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800197e:	88fa      	ldrh	r2, [r7, #6]
 8001980:	88bb      	ldrh	r3, [r7, #4]
 8001982:	08db      	lsrs	r3, r3, #3
 8001984:	b298      	uxth	r0, r3
 8001986:	4603      	mov	r3, r0
 8001988:	01db      	lsls	r3, r3, #7
 800198a:	4413      	add	r3, r2
 800198c:	4a1c      	ldr	r2, [pc, #112]	@ (8001a00 <SSD1306_DrawPixel+0xbc>)
 800198e:	5cd3      	ldrb	r3, [r2, r3]
 8001990:	b25a      	sxtb	r2, r3
 8001992:	88bb      	ldrh	r3, [r7, #4]
 8001994:	f003 0307 	and.w	r3, r3, #7
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	b25b      	sxtb	r3, r3
 80019a0:	4313      	orrs	r3, r2
 80019a2:	b259      	sxtb	r1, r3
 80019a4:	88fa      	ldrh	r2, [r7, #6]
 80019a6:	4603      	mov	r3, r0
 80019a8:	01db      	lsls	r3, r3, #7
 80019aa:	4413      	add	r3, r2
 80019ac:	b2c9      	uxtb	r1, r1
 80019ae:	4a14      	ldr	r2, [pc, #80]	@ (8001a00 <SSD1306_DrawPixel+0xbc>)
 80019b0:	54d1      	strb	r1, [r2, r3]
 80019b2:	e01d      	b.n	80019f0 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80019b4:	88fa      	ldrh	r2, [r7, #6]
 80019b6:	88bb      	ldrh	r3, [r7, #4]
 80019b8:	08db      	lsrs	r3, r3, #3
 80019ba:	b298      	uxth	r0, r3
 80019bc:	4603      	mov	r3, r0
 80019be:	01db      	lsls	r3, r3, #7
 80019c0:	4413      	add	r3, r2
 80019c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001a00 <SSD1306_DrawPixel+0xbc>)
 80019c4:	5cd3      	ldrb	r3, [r2, r3]
 80019c6:	b25a      	sxtb	r2, r3
 80019c8:	88bb      	ldrh	r3, [r7, #4]
 80019ca:	f003 0307 	and.w	r3, r3, #7
 80019ce:	2101      	movs	r1, #1
 80019d0:	fa01 f303 	lsl.w	r3, r1, r3
 80019d4:	b25b      	sxtb	r3, r3
 80019d6:	43db      	mvns	r3, r3
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	4013      	ands	r3, r2
 80019dc:	b259      	sxtb	r1, r3
 80019de:	88fa      	ldrh	r2, [r7, #6]
 80019e0:	4603      	mov	r3, r0
 80019e2:	01db      	lsls	r3, r3, #7
 80019e4:	4413      	add	r3, r2
 80019e6:	b2c9      	uxtb	r1, r1
 80019e8:	4a05      	ldr	r2, [pc, #20]	@ (8001a00 <SSD1306_DrawPixel+0xbc>)
 80019ea:	54d1      	strb	r1, [r2, r3]
 80019ec:	e000      	b.n	80019f0 <SSD1306_DrawPixel+0xac>
		return;
 80019ee:	bf00      	nop
	}
}
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	200005d4 	.word	0x200005d4
 8001a00:	200001d4 	.word	0x200001d4

08001a04 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	460a      	mov	r2, r1
 8001a0e:	80fb      	strh	r3, [r7, #6]
 8001a10:	4613      	mov	r3, r2
 8001a12:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8001a14:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <SSD1306_GotoXY+0x28>)
 8001a16:	88fb      	ldrh	r3, [r7, #6]
 8001a18:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	@ (8001a2c <SSD1306_GotoXY+0x28>)
 8001a1c:	88bb      	ldrh	r3, [r7, #4]
 8001a1e:	8053      	strh	r3, [r2, #2]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	200005d4 	.word	0x200005d4

08001a30 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b086      	sub	sp, #24
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	6039      	str	r1, [r7, #0]
 8001a3a:	71fb      	strb	r3, [r7, #7]
 8001a3c:	4613      	mov	r3, r2
 8001a3e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a40:	4b39      	ldr	r3, [pc, #228]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	4413      	add	r3, r2
	if (
 8001a4c:	2b7f      	cmp	r3, #127	@ 0x7f
 8001a4e:	dc07      	bgt.n	8001a60 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001a50:	4b35      	ldr	r3, [pc, #212]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001a52:	885b      	ldrh	r3, [r3, #2]
 8001a54:	461a      	mov	r2, r3
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	785b      	ldrb	r3, [r3, #1]
 8001a5a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001a5c:	2b3f      	cmp	r3, #63	@ 0x3f
 8001a5e:	dd01      	ble.n	8001a64 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001a60:	2300      	movs	r3, #0
 8001a62:	e05d      	b.n	8001b20 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e04b      	b.n	8001b02 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	685a      	ldr	r2, [r3, #4]
 8001a6e:	79fb      	ldrb	r3, [r7, #7]
 8001a70:	3b20      	subs	r3, #32
 8001a72:	6839      	ldr	r1, [r7, #0]
 8001a74:	7849      	ldrb	r1, [r1, #1]
 8001a76:	fb01 f303 	mul.w	r3, r1, r3
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	440b      	add	r3, r1
 8001a80:	005b      	lsls	r3, r3, #1
 8001a82:	4413      	add	r3, r2
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001a88:	2300      	movs	r3, #0
 8001a8a:	613b      	str	r3, [r7, #16]
 8001a8c:	e030      	b.n	8001af0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001a8e:	68fa      	ldr	r2, [r7, #12]
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d010      	beq.n	8001ac0 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001a9e:	4b22      	ldr	r3, [pc, #136]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001aa0:	881a      	ldrh	r2, [r3, #0]
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	b29b      	uxth	r3, r3
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b298      	uxth	r0, r3
 8001aaa:	4b1f      	ldr	r3, [pc, #124]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001aac:	885a      	ldrh	r2, [r3, #2]
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	b29b      	uxth	r3, r3
 8001ab2:	4413      	add	r3, r2
 8001ab4:	b29b      	uxth	r3, r3
 8001ab6:	79ba      	ldrb	r2, [r7, #6]
 8001ab8:	4619      	mov	r1, r3
 8001aba:	f7ff ff43 	bl	8001944 <SSD1306_DrawPixel>
 8001abe:	e014      	b.n	8001aea <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001ac2:	881a      	ldrh	r2, [r3, #0]
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	4413      	add	r3, r2
 8001aca:	b298      	uxth	r0, r3
 8001acc:	4b16      	ldr	r3, [pc, #88]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001ace:	885a      	ldrh	r2, [r3, #2]
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	b29b      	uxth	r3, r3
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b299      	uxth	r1, r3
 8001ad8:	79bb      	ldrb	r3, [r7, #6]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf0c      	ite	eq
 8001ade:	2301      	moveq	r3, #1
 8001ae0:	2300      	movne	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	461a      	mov	r2, r3
 8001ae6:	f7ff ff2d 	bl	8001944 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	3301      	adds	r3, #1
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	461a      	mov	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d3c8      	bcc.n	8001a8e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	785b      	ldrb	r3, [r3, #1]
 8001b06:	461a      	mov	r2, r3
 8001b08:	697b      	ldr	r3, [r7, #20]
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d3ad      	bcc.n	8001a6a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	7812      	ldrb	r2, [r2, #0]
 8001b16:	4413      	add	r3, r2
 8001b18:	b29a      	uxth	r2, r3
 8001b1a:	4b03      	ldr	r3, [pc, #12]	@ (8001b28 <SSD1306_Putc+0xf8>)
 8001b1c:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001b1e:	79fb      	ldrb	r3, [r7, #7]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	3718      	adds	r7, #24
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	200005d4 	.word	0x200005d4

08001b2c <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	4613      	mov	r3, r2
 8001b38:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001b3a:	e012      	b.n	8001b62 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	79fa      	ldrb	r2, [r7, #7]
 8001b42:	68b9      	ldr	r1, [r7, #8]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff73 	bl	8001a30 <SSD1306_Putc>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	461a      	mov	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d002      	beq.n	8001b5c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	e008      	b.n	8001b6e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d1e8      	bne.n	8001b3c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	781b      	ldrb	r3, [r3, #0]
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3710      	adds	r7, #16
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
	...

08001b78 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	@ (8001ba0 <ssd1306_I2C_Init+0x28>)
 8001b80:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b82:	e002      	b.n	8001b8a <ssd1306_I2C_Init+0x12>
		p--;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d1f9      	bne.n	8001b84 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9c:	4770      	bx	lr
 8001b9e:	bf00      	nop
 8001ba0:	0003d090 	.word	0x0003d090

08001ba4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b0c7      	sub	sp, #284	@ 0x11c
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	4604      	mov	r4, r0
 8001bac:	4608      	mov	r0, r1
 8001bae:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001bb2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001bb6:	600a      	str	r2, [r1, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bbe:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001bc2:	4622      	mov	r2, r4
 8001bc4:	701a      	strb	r2, [r3, #0]
 8001bc6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bca:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001bce:	4602      	mov	r2, r0
 8001bd0:	701a      	strb	r2, [r3, #0]
 8001bd2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001bd6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001bda:	460a      	mov	r2, r1
 8001bdc:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001bde:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001be2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001be6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001bea:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001bee:	7812      	ldrb	r2, [r2, #0]
 8001bf0:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001bf8:	e015      	b.n	8001c26 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001bfa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001bfe:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c02:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001c06:	6812      	ldr	r2, [r2, #0]
 8001c08:	441a      	add	r2, r3
 8001c0a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c0e:	3301      	adds	r3, #1
 8001c10:	7811      	ldrb	r1, [r2, #0]
 8001c12:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c16:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001c1a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001c1c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c20:	3301      	adds	r3, #1
 8001c22:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c26:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c30:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001c34:	8812      	ldrh	r2, [r2, #0]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d8df      	bhi.n	8001bfa <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001c3a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c3e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001c42:	781b      	ldrb	r3, [r3, #0]
 8001c44:	b299      	uxth	r1, r3
 8001c46:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c4a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	b29b      	uxth	r3, r3
 8001c54:	f107 020c 	add.w	r2, r7, #12
 8001c58:	200a      	movs	r0, #10
 8001c5a:	9000      	str	r0, [sp, #0]
 8001c5c:	4803      	ldr	r0, [pc, #12]	@ (8001c6c <ssd1306_I2C_WriteMulti+0xc8>)
 8001c5e:	f002 f993 	bl	8003f88 <HAL_I2C_Master_Transmit>
}
 8001c62:	bf00      	nop
 8001c64:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd90      	pop	{r4, r7, pc}
 8001c6c:	200000e8 	.word	0x200000e8

08001c70 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af02      	add	r7, sp, #8
 8001c76:	4603      	mov	r3, r0
 8001c78:	71fb      	strb	r3, [r7, #7]
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	71bb      	strb	r3, [r7, #6]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001c82:	79bb      	ldrb	r3, [r7, #6]
 8001c84:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001c86:	797b      	ldrb	r3, [r7, #5]
 8001c88:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	b299      	uxth	r1, r3
 8001c8e:	f107 020c 	add.w	r2, r7, #12
 8001c92:	230a      	movs	r3, #10
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	2302      	movs	r3, #2
 8001c98:	4803      	ldr	r0, [pc, #12]	@ (8001ca8 <ssd1306_I2C_Write+0x38>)
 8001c9a:	f002 f975 	bl	8003f88 <HAL_I2C_Master_Transmit>
}
 8001c9e:	bf00      	nop
 8001ca0:	3710      	adds	r7, #16
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	200000e8 	.word	0x200000e8

08001cac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb2:	4b11      	ldr	r3, [pc, #68]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001cb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cb6:	4a10      	ldr	r2, [pc, #64]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8001cbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001cc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	4b0b      	ldr	r3, [pc, #44]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cce:	4a0a      	ldr	r2, [pc, #40]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001cd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001cd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001cd6:	4b08      	ldr	r3, [pc, #32]	@ (8001cf8 <HAL_MspInit+0x4c>)
 8001cd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001cda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cde:	603b      	str	r3, [r7, #0]
 8001ce0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	210f      	movs	r1, #15
 8001ce6:	f06f 0001 	mvn.w	r0, #1
 8001cea:	f001 fed1 	bl	8003a90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cee:	bf00      	nop
 8001cf0:	3708      	adds	r7, #8
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000

08001cfc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0ac      	sub	sp, #176	@ 0xb0
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d04:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001d08:	2200      	movs	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
 8001d0c:	605a      	str	r2, [r3, #4]
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d14:	f107 0314 	add.w	r3, r7, #20
 8001d18:	2288      	movs	r2, #136	@ 0x88
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f007 ff33 	bl	8009b88 <memset>
  if(hadc->Instance==ADC1)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4a27      	ldr	r2, [pc, #156]	@ (8001dc4 <HAL_ADC_MspInit+0xc8>)
 8001d28:	4293      	cmp	r3, r2
 8001d2a:	d146      	bne.n	8001dba <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001d2c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001d30:	617b      	str	r3, [r7, #20]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001d32:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001d36:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8001d3a:	2302      	movs	r3, #2
 8001d3c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 8;
 8001d42:	2308      	movs	r3, #8
 8001d44:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8001d46:	2307      	movs	r3, #7
 8001d48:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001d52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d56:	633b      	str	r3, [r7, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d58:	f107 0314 	add.w	r3, r7, #20
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	f003 fc29 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d001      	beq.n	8001d6c <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8001d68:	f7ff fcdc 	bl	8001724 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001d6c:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <HAL_ADC_MspInit+0xcc>)
 8001d6e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d70:	4a15      	ldr	r2, [pc, #84]	@ (8001dc8 <HAL_ADC_MspInit+0xcc>)
 8001d72:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001d76:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d78:	4b13      	ldr	r3, [pc, #76]	@ (8001dc8 <HAL_ADC_MspInit+0xcc>)
 8001d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d7c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d80:	613b      	str	r3, [r7, #16]
 8001d82:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d84:	4b10      	ldr	r3, [pc, #64]	@ (8001dc8 <HAL_ADC_MspInit+0xcc>)
 8001d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d88:	4a0f      	ldr	r2, [pc, #60]	@ (8001dc8 <HAL_ADC_MspInit+0xcc>)
 8001d8a:	f043 0304 	orr.w	r3, r3, #4
 8001d8e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d90:	4b0d      	ldr	r3, [pc, #52]	@ (8001dc8 <HAL_ADC_MspInit+0xcc>)
 8001d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d94:	f003 0304 	and.w	r3, r3, #4
 8001d98:	60fb      	str	r3, [r7, #12]
 8001d9a:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN1
    PC1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001d9c:	2303      	movs	r3, #3
 8001d9e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001da2:	230b      	movs	r3, #11
 8001da4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dae:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001db2:	4619      	mov	r1, r3
 8001db4:	4805      	ldr	r0, [pc, #20]	@ (8001dcc <HAL_ADC_MspInit+0xd0>)
 8001db6:	f001 fe95 	bl	8003ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dba:	bf00      	nop
 8001dbc:	37b0      	adds	r7, #176	@ 0xb0
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}
 8001dc2:	bf00      	nop
 8001dc4:	50040000 	.word	0x50040000
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	48000800 	.word	0x48000800

08001dd0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b0ac      	sub	sp, #176	@ 0xb0
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dd8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001ddc:	2200      	movs	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	605a      	str	r2, [r3, #4]
 8001de2:	609a      	str	r2, [r3, #8]
 8001de4:	60da      	str	r2, [r3, #12]
 8001de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001de8:	f107 0314 	add.w	r3, r7, #20
 8001dec:	2288      	movs	r2, #136	@ 0x88
 8001dee:	2100      	movs	r1, #0
 8001df0:	4618      	mov	r0, r3
 8001df2:	f007 fec9 	bl	8009b88 <memset>
  if(hi2c->Instance==I2C1)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <HAL_I2C_MspInit+0xb0>)
 8001dfc:	4293      	cmp	r3, r2
 8001dfe:	d13a      	bne.n	8001e76 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001e00:	2340      	movs	r3, #64	@ 0x40
 8001e02:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e08:	f107 0314 	add.w	r3, r7, #20
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 fbd1 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001e18:	f7ff fc84 	bl	8001724 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e1c:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <HAL_I2C_MspInit+0xb4>)
 8001e1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e20:	4a18      	ldr	r2, [pc, #96]	@ (8001e84 <HAL_I2C_MspInit+0xb4>)
 8001e22:	f043 0302 	orr.w	r3, r3, #2
 8001e26:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e28:	4b16      	ldr	r3, [pc, #88]	@ (8001e84 <HAL_I2C_MspInit+0xb4>)
 8001e2a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e2c:	f003 0302 	and.w	r3, r3, #2
 8001e30:	613b      	str	r3, [r7, #16]
 8001e32:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e34:	23c0      	movs	r3, #192	@ 0xc0
 8001e36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001e3a:	2312      	movs	r3, #18
 8001e3c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e46:	2303      	movs	r3, #3
 8001e48:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e4c:	2304      	movs	r3, #4
 8001e4e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e52:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e56:	4619      	mov	r1, r3
 8001e58:	480b      	ldr	r0, [pc, #44]	@ (8001e88 <HAL_I2C_MspInit+0xb8>)
 8001e5a:	f001 fe43 	bl	8003ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <HAL_I2C_MspInit+0xb4>)
 8001e60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e62:	4a08      	ldr	r2, [pc, #32]	@ (8001e84 <HAL_I2C_MspInit+0xb4>)
 8001e64:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001e68:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e6a:	4b06      	ldr	r3, [pc, #24]	@ (8001e84 <HAL_I2C_MspInit+0xb4>)
 8001e6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e6e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e76:	bf00      	nop
 8001e78:	37b0      	adds	r7, #176	@ 0xb0
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40005400 	.word	0x40005400
 8001e84:	40021000 	.word	0x40021000
 8001e88:	48000400 	.word	0x48000400

08001e8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b0ac      	sub	sp, #176	@ 0xb0
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e94:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001e98:	2200      	movs	r2, #0
 8001e9a:	601a      	str	r2, [r3, #0]
 8001e9c:	605a      	str	r2, [r3, #4]
 8001e9e:	609a      	str	r2, [r3, #8]
 8001ea0:	60da      	str	r2, [r3, #12]
 8001ea2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	2288      	movs	r2, #136	@ 0x88
 8001eaa:	2100      	movs	r1, #0
 8001eac:	4618      	mov	r0, r3
 8001eae:	f007 fe6b 	bl	8009b88 <memset>
  if(huart->Instance==USART2)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	4a21      	ldr	r2, [pc, #132]	@ (8001f3c <HAL_UART_MspInit+0xb0>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	d13b      	bne.n	8001f34 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec4:	f107 0314 	add.w	r3, r7, #20
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f003 fb73 	bl	80055b4 <HAL_RCCEx_PeriphCLKConfig>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d001      	beq.n	8001ed8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001ed4:	f7ff fc26 	bl	8001724 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ed8:	4b19      	ldr	r3, [pc, #100]	@ (8001f40 <HAL_UART_MspInit+0xb4>)
 8001eda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001edc:	4a18      	ldr	r2, [pc, #96]	@ (8001f40 <HAL_UART_MspInit+0xb4>)
 8001ede:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ee2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ee4:	4b16      	ldr	r3, [pc, #88]	@ (8001f40 <HAL_UART_MspInit+0xb4>)
 8001ee6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eec:	613b      	str	r3, [r7, #16]
 8001eee:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ef0:	4b13      	ldr	r3, [pc, #76]	@ (8001f40 <HAL_UART_MspInit+0xb4>)
 8001ef2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ef4:	4a12      	ldr	r2, [pc, #72]	@ (8001f40 <HAL_UART_MspInit+0xb4>)
 8001ef6:	f043 0301 	orr.w	r3, r3, #1
 8001efa:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001efc:	4b10      	ldr	r3, [pc, #64]	@ (8001f40 <HAL_UART_MspInit+0xb4>)
 8001efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f00:	f003 0301 	and.w	r3, r3, #1
 8001f04:	60fb      	str	r3, [r7, #12]
 8001f06:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f08:	230c      	movs	r3, #12
 8001f0a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f0e:	2302      	movs	r3, #2
 8001f10:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f14:	2300      	movs	r3, #0
 8001f16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f20:	2307      	movs	r3, #7
 8001f22:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f30:	f001 fdd8 	bl	8003ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f34:	bf00      	nop
 8001f36:	37b0      	adds	r7, #176	@ 0xb0
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}
 8001f3c:	40004400 	.word	0x40004400
 8001f40:	40021000 	.word	0x40021000

08001f44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b08c      	sub	sp, #48	@ 0x30
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t              uwPrescalerValue = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	2036      	movs	r0, #54	@ 0x36
 8001f5a:	f001 fd99 	bl	8003a90 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001f5e:	2036      	movs	r0, #54	@ 0x36
 8001f60:	f001 fdb2 	bl	8003ac8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001f64:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe0 <HAL_InitTick+0x9c>)
 8001f66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f68:	4a1d      	ldr	r2, [pc, #116]	@ (8001fe0 <HAL_InitTick+0x9c>)
 8001f6a:	f043 0310 	orr.w	r3, r3, #16
 8001f6e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f70:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe0 <HAL_InitTick+0x9c>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f74:	f003 0310 	and.w	r3, r3, #16
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f7c:	f107 0210 	add.w	r2, r7, #16
 8001f80:	f107 0314 	add.w	r3, r7, #20
 8001f84:	4611      	mov	r1, r2
 8001f86:	4618      	mov	r0, r3
 8001f88:	f003 fa82 	bl	8005490 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001f8c:	f003 fa54 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8001f90:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001f92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001f94:	4a13      	ldr	r2, [pc, #76]	@ (8001fe4 <HAL_InitTick+0xa0>)
 8001f96:	fba2 2303 	umull	r2, r3, r2, r3
 8001f9a:	0c9b      	lsrs	r3, r3, #18
 8001f9c:	3b01      	subs	r3, #1
 8001f9e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	@ (8001fe8 <HAL_InitTick+0xa4>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	@ (8001fec <HAL_InitTick+0xa8>)
 8001fa4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <HAL_InitTick+0xa4>)
 8001fa8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fac:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001fae:	4a0e      	ldr	r2, [pc, #56]	@ (8001fe8 <HAL_InitTick+0xa4>)
 8001fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fb2:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8001fe8 <HAL_InitTick+0xa4>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <HAL_InitTick+0xa4>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001fc0:	4809      	ldr	r0, [pc, #36]	@ (8001fe8 <HAL_InitTick+0xa4>)
 8001fc2:	f003 ffb3 	bl	8005f2c <HAL_TIM_Base_Init>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d104      	bne.n	8001fd6 <HAL_InitTick+0x92>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8001fcc:	4806      	ldr	r0, [pc, #24]	@ (8001fe8 <HAL_InitTick+0xa4>)
 8001fce:	f004 f80f 	bl	8005ff0 <HAL_TIM_Base_Start_IT>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	e000      	b.n	8001fd8 <HAL_InitTick+0x94>
  }

  /* Return function status */
  return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3730      	adds	r7, #48	@ 0x30
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	431bde83 	.word	0x431bde83
 8001fe8:	200005dc 	.word	0x200005dc
 8001fec:	40001000 	.word	0x40001000

08001ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ff4:	bf00      	nop
 8001ff6:	e7fd      	b.n	8001ff4 <NMI_Handler+0x4>

08001ff8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ffc:	bf00      	nop
 8001ffe:	e7fd      	b.n	8001ffc <HardFault_Handler+0x4>

08002000 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002004:	bf00      	nop
 8002006:	e7fd      	b.n	8002004 <MemManage_Handler+0x4>

08002008 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002008:	b480      	push	{r7}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800200c:	bf00      	nop
 800200e:	e7fd      	b.n	800200c <BusFault_Handler+0x4>

08002010 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002014:	bf00      	nop
 8002016:	e7fd      	b.n	8002014 <UsageFault_Handler+0x4>

08002018 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800201c:	bf00      	nop
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
	...

08002028 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800202c:	4802      	ldr	r0, [pc, #8]	@ (8002038 <TIM6_DAC_IRQHandler+0x10>)
 800202e:	f004 f84f 	bl	80060d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200005dc 	.word	0x200005dc

0800203c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b086      	sub	sp, #24
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002044:	4a14      	ldr	r2, [pc, #80]	@ (8002098 <_sbrk+0x5c>)
 8002046:	4b15      	ldr	r3, [pc, #84]	@ (800209c <_sbrk+0x60>)
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002050:	4b13      	ldr	r3, [pc, #76]	@ (80020a0 <_sbrk+0x64>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d102      	bne.n	800205e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <_sbrk+0x64>)
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <_sbrk+0x68>)
 800205c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <_sbrk+0x64>)
 8002060:	681a      	ldr	r2, [r3, #0]
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4413      	add	r3, r2
 8002066:	693a      	ldr	r2, [r7, #16]
 8002068:	429a      	cmp	r2, r3
 800206a:	d207      	bcs.n	800207c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800206c:	f007 fdea 	bl	8009c44 <__errno>
 8002070:	4603      	mov	r3, r0
 8002072:	220c      	movs	r2, #12
 8002074:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800207a:	e009      	b.n	8002090 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800207c:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <_sbrk+0x64>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002082:	4b07      	ldr	r3, [pc, #28]	@ (80020a0 <_sbrk+0x64>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	4413      	add	r3, r2
 800208a:	4a05      	ldr	r2, [pc, #20]	@ (80020a0 <_sbrk+0x64>)
 800208c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800208e:	68fb      	ldr	r3, [r7, #12]
}
 8002090:	4618      	mov	r0, r3
 8002092:	3718      	adds	r7, #24
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20018000 	.word	0x20018000
 800209c:	00000400 	.word	0x00000400
 80020a0:	20000628 	.word	0x20000628
 80020a4:	20002118 	.word	0x20002118

080020a8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80020a8:	b480      	push	{r7}
 80020aa:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80020ac:	4b15      	ldr	r3, [pc, #84]	@ (8002104 <SystemInit+0x5c>)
 80020ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b2:	4a14      	ldr	r2, [pc, #80]	@ (8002104 <SystemInit+0x5c>)
 80020b4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80020b8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80020bc:	4b12      	ldr	r3, [pc, #72]	@ (8002108 <SystemInit+0x60>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a11      	ldr	r2, [pc, #68]	@ (8002108 <SystemInit+0x60>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80020c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002108 <SystemInit+0x60>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80020ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002108 <SystemInit+0x60>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a0d      	ldr	r2, [pc, #52]	@ (8002108 <SystemInit+0x60>)
 80020d4:	f023 53a8 	bic.w	r3, r3, #352321536	@ 0x15000000
 80020d8:	f423 2310 	bic.w	r3, r3, #589824	@ 0x90000
 80020dc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80020de:	4b0a      	ldr	r3, [pc, #40]	@ (8002108 <SystemInit+0x60>)
 80020e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80020e4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80020e6:	4b08      	ldr	r3, [pc, #32]	@ (8002108 <SystemInit+0x60>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	4a07      	ldr	r2, [pc, #28]	@ (8002108 <SystemInit+0x60>)
 80020ec:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020f0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80020f2:	4b05      	ldr	r3, [pc, #20]	@ (8002108 <SystemInit+0x60>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	619a      	str	r2, [r3, #24]
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr
 8002102:	bf00      	nop
 8002104:	e000ed00 	.word	0xe000ed00
 8002108:	40021000 	.word	0x40021000

0800210c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800210c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002144 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002110:	f7ff ffca 	bl	80020a8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002114:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002116:	e003      	b.n	8002120 <LoopCopyDataInit>

08002118 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002118:	4b0b      	ldr	r3, [pc, #44]	@ (8002148 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800211a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800211c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800211e:	3104      	adds	r1, #4

08002120 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002120:	480a      	ldr	r0, [pc, #40]	@ (800214c <LoopForever+0xa>)
	ldr	r3, =_edata
 8002122:	4b0b      	ldr	r3, [pc, #44]	@ (8002150 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002124:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002126:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002128:	d3f6      	bcc.n	8002118 <CopyDataInit>
	ldr	r2, =_sbss
 800212a:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <LoopForever+0x12>)
	b	LoopFillZerobss
 800212c:	e002      	b.n	8002134 <LoopFillZerobss>

0800212e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800212e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002130:	f842 3b04 	str.w	r3, [r2], #4

08002134 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002134:	4b08      	ldr	r3, [pc, #32]	@ (8002158 <LoopForever+0x16>)
	cmp	r2, r3
 8002136:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002138:	d3f9      	bcc.n	800212e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800213a:	f007 fd89 	bl	8009c50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800213e:	f7fe fea1 	bl	8000e84 <main>

08002142 <LoopForever>:

LoopForever:
    b LoopForever
 8002142:	e7fe      	b.n	8002142 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002144:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002148:	0800b3c8 	.word	0x0800b3c8
	ldr	r0, =_sdata
 800214c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002150:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8002154:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8002158:	20002118 	.word	0x20002118

0800215c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800215c:	e7fe      	b.n	800215c <ADC1_2_IRQHandler>
	...

08002160 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b082      	sub	sp, #8
 8002164:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216a:	4b0c      	ldr	r3, [pc, #48]	@ (800219c <HAL_Init+0x3c>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a0b      	ldr	r2, [pc, #44]	@ (800219c <HAL_Init+0x3c>)
 8002170:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002174:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002176:	2003      	movs	r0, #3
 8002178:	f001 fc7f 	bl	8003a7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800217c:	2000      	movs	r0, #0
 800217e:	f7ff fee1 	bl	8001f44 <HAL_InitTick>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d002      	beq.n	800218e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	71fb      	strb	r3, [r7, #7]
 800218c:	e001      	b.n	8002192 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800218e:	f7ff fd8d 	bl	8001cac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002192:	79fb      	ldrb	r3, [r7, #7]
}
 8002194:	4618      	mov	r0, r3
 8002196:	3708      	adds	r7, #8
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}
 800219c:	40022000 	.word	0x40022000

080021a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80021a4:	4b06      	ldr	r3, [pc, #24]	@ (80021c0 <HAL_IncTick+0x20>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	461a      	mov	r2, r3
 80021aa:	4b06      	ldr	r3, [pc, #24]	@ (80021c4 <HAL_IncTick+0x24>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4413      	add	r3, r2
 80021b0:	4a04      	ldr	r2, [pc, #16]	@ (80021c4 <HAL_IncTick+0x24>)
 80021b2:	6013      	str	r3, [r2, #0]
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
 80021be:	bf00      	nop
 80021c0:	20000010 	.word	0x20000010
 80021c4:	2000062c 	.word	0x2000062c

080021c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  return uwTick;
 80021cc:	4b03      	ldr	r3, [pc, #12]	@ (80021dc <HAL_GetTick+0x14>)
 80021ce:	681b      	ldr	r3, [r3, #0]
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop
 80021dc:	2000062c 	.word	0x2000062c

080021e0 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	431a      	orrs	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	609a      	str	r2, [r3, #8]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr

08002206 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002206:	b480      	push	{r7}
 8002208:	b083      	sub	sp, #12
 800220a:	af00      	add	r7, sp, #0
 800220c:	6078      	str	r0, [r7, #4]
 800220e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	431a      	orrs	r2, r3
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	609a      	str	r2, [r3, #8]
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002248:	b480      	push	{r7}
 800224a:	b087      	sub	sp, #28
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	607a      	str	r2, [r7, #4]
 8002254:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	3360      	adds	r3, #96	@ 0x60
 800225a:	461a      	mov	r2, r3
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	4413      	add	r3, r2
 8002262:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002264:	697b      	ldr	r3, [r7, #20]
 8002266:	681a      	ldr	r2, [r3, #0]
 8002268:	4b08      	ldr	r3, [pc, #32]	@ (800228c <LL_ADC_SetOffset+0x44>)
 800226a:	4013      	ands	r3, r2
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8002272:	683a      	ldr	r2, [r7, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	4313      	orrs	r3, r2
 8002278:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002280:	bf00      	nop
 8002282:	371c      	adds	r7, #28
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	03fff000 	.word	0x03fff000

08002290 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002290:	b480      	push	{r7}
 8002292:	b085      	sub	sp, #20
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
 8002298:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	3360      	adds	r3, #96	@ 0x60
 800229e:	461a      	mov	r2, r3
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3714      	adds	r7, #20
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80022bc:	b480      	push	{r7}
 80022be:	b087      	sub	sp, #28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	60f8      	str	r0, [r7, #12]
 80022c4:	60b9      	str	r1, [r7, #8]
 80022c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3360      	adds	r3, #96	@ 0x60
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	4413      	add	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80022d6:	697b      	ldr	r3, [r7, #20]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80022e6:	bf00      	nop
 80022e8:	371c      	adds	r7, #28
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b083      	sub	sp, #12
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	68db      	ldr	r3, [r3, #12]
 80022fe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002302:	2b00      	cmp	r3, #0
 8002304:	d101      	bne.n	800230a <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002306:	2301      	movs	r3, #1
 8002308:	e000      	b.n	800230c <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800230a:	2300      	movs	r3, #0
}
 800230c:	4618      	mov	r0, r3
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002318:	b480      	push	{r7}
 800231a:	b087      	sub	sp, #28
 800231c:	af00      	add	r7, sp, #0
 800231e:	60f8      	str	r0, [r7, #12]
 8002320:	60b9      	str	r1, [r7, #8]
 8002322:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	3330      	adds	r3, #48	@ 0x30
 8002328:	461a      	mov	r2, r3
 800232a:	68bb      	ldr	r3, [r7, #8]
 800232c:	0a1b      	lsrs	r3, r3, #8
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	f003 030c 	and.w	r3, r3, #12
 8002334:	4413      	add	r3, r2
 8002336:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	681a      	ldr	r2, [r3, #0]
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	f003 031f 	and.w	r3, r3, #31
 8002342:	211f      	movs	r1, #31
 8002344:	fa01 f303 	lsl.w	r3, r1, r3
 8002348:	43db      	mvns	r3, r3
 800234a:	401a      	ands	r2, r3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	0e9b      	lsrs	r3, r3, #26
 8002350:	f003 011f 	and.w	r1, r3, #31
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	f003 031f 	and.w	r3, r3, #31
 800235a:	fa01 f303 	lsl.w	r3, r1, r3
 800235e:	431a      	orrs	r2, r3
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002364:	bf00      	nop
 8002366:	371c      	adds	r7, #28
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002370:	b480      	push	{r7}
 8002372:	b087      	sub	sp, #28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	3314      	adds	r3, #20
 8002380:	461a      	mov	r2, r3
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	0e5b      	lsrs	r3, r3, #25
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	4413      	add	r3, r2
 800238e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002390:	697b      	ldr	r3, [r7, #20]
 8002392:	681a      	ldr	r2, [r3, #0]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	0d1b      	lsrs	r3, r3, #20
 8002398:	f003 031f 	and.w	r3, r3, #31
 800239c:	2107      	movs	r1, #7
 800239e:	fa01 f303 	lsl.w	r3, r1, r3
 80023a2:	43db      	mvns	r3, r3
 80023a4:	401a      	ands	r2, r3
 80023a6:	68bb      	ldr	r3, [r7, #8]
 80023a8:	0d1b      	lsrs	r3, r3, #20
 80023aa:	f003 031f 	and.w	r3, r3, #31
 80023ae:	6879      	ldr	r1, [r7, #4]
 80023b0:	fa01 f303 	lsl.w	r3, r1, r3
 80023b4:	431a      	orrs	r2, r3
 80023b6:	697b      	ldr	r3, [r7, #20]
 80023b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80023ba:	bf00      	nop
 80023bc:	371c      	adds	r7, #28
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
	...

080023c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023e0:	43db      	mvns	r3, r3
 80023e2:	401a      	ands	r2, r3
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0318 	and.w	r3, r3, #24
 80023ea:	4908      	ldr	r1, [pc, #32]	@ (800240c <LL_ADC_SetChannelSingleDiff+0x44>)
 80023ec:	40d9      	lsrs	r1, r3
 80023ee:	68bb      	ldr	r3, [r7, #8]
 80023f0:	400b      	ands	r3, r1
 80023f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023f6:	431a      	orrs	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80023fe:	bf00      	nop
 8002400:	3714      	adds	r7, #20
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
 800240a:	bf00      	nop
 800240c:	0007ffff 	.word	0x0007ffff

08002410 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f003 031f 	and.w	r3, r3, #31
}
 8002420:	4618      	mov	r0, r3
 8002422:	370c      	adds	r7, #12
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr

0800242c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800242c:	b480      	push	{r7}
 800242e:	b083      	sub	sp, #12
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 800243c:	4618      	mov	r0, r3
 800243e:	370c      	adds	r7, #12
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002448:	b480      	push	{r7}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002458:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	6093      	str	r3, [r2, #8]
}
 8002460:	bf00      	nop
 8002462:	370c      	adds	r7, #12
 8002464:	46bd      	mov	sp, r7
 8002466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246a:	4770      	bx	lr

0800246c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800247c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002480:	d101      	bne.n	8002486 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	370c      	adds	r7, #12
 800248c:	46bd      	mov	sp, r7
 800248e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002492:	4770      	bx	lr

08002494 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 80024a4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80024b0:	bf00      	nop
 80024b2:	370c      	adds	r7, #12
 80024b4:	46bd      	mov	sp, r7
 80024b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ba:	4770      	bx	lr

080024bc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80024cc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80024d0:	d101      	bne.n	80024d6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80024d2:	2301      	movs	r3, #1
 80024d4:	e000      	b.n	80024d8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b083      	sub	sp, #12
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80024f4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80024f8:	f043 0201 	orr.w	r2, r3, #1
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800251c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002520:	f043 0202 	orr.w	r2, r3, #2
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002528:	bf00      	nop
 800252a:	370c      	adds	r7, #12
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b01      	cmp	r3, #1
 8002546:	d101      	bne.n	800254c <LL_ADC_IsEnabled+0x18>
 8002548:	2301      	movs	r3, #1
 800254a:	e000      	b.n	800254e <LL_ADC_IsEnabled+0x1a>
 800254c:	2300      	movs	r3, #0
}
 800254e:	4618      	mov	r0, r3
 8002550:	370c      	adds	r7, #12
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800255a:	b480      	push	{r7}
 800255c:	b083      	sub	sp, #12
 800255e:	af00      	add	r7, sp, #0
 8002560:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	2b02      	cmp	r3, #2
 800256c:	d101      	bne.n	8002572 <LL_ADC_IsDisableOngoing+0x18>
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <LL_ADC_IsDisableOngoing+0x1a>
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002590:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002594:	f043 0204 	orr.w	r2, r3, #4
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80025b8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025bc:	f043 0210 	orr.w	r2, r3, #16
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b04      	cmp	r3, #4
 80025e2:	d101      	bne.n	80025e8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80025e4:	2301      	movs	r3, #1
 80025e6:	e000      	b.n	80025ea <LL_ADC_REG_IsConversionOngoing+0x1a>
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	370c      	adds	r7, #12
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 80025f6:	b480      	push	{r7}
 80025f8:	b083      	sub	sp, #12
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002606:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800260a:	f043 0220 	orr.w	r2, r3, #32
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002612:	bf00      	nop
 8002614:	370c      	adds	r7, #12
 8002616:	46bd      	mov	sp, r7
 8002618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261c:	4770      	bx	lr

0800261e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800261e:	b480      	push	{r7}
 8002620:	b083      	sub	sp, #12
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	689b      	ldr	r3, [r3, #8]
 800262a:	f003 0308 	and.w	r3, r3, #8
 800262e:	2b08      	cmp	r3, #8
 8002630:	d101      	bne.n	8002636 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002644:	b590      	push	{r4, r7, lr}
 8002646:	b089      	sub	sp, #36	@ 0x24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800264c:	2300      	movs	r3, #0
 800264e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002650:	2300      	movs	r3, #0
 8002652:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d101      	bne.n	800265e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e136      	b.n	80028cc <HAL_ADC_Init+0x288>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002668:	2b00      	cmp	r3, #0
 800266a:	d109      	bne.n	8002680 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fb45 	bl	8001cfc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff fef1 	bl	800246c <LL_ADC_IsDeepPowerDownEnabled>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d004      	beq.n	800269a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4618      	mov	r0, r3
 8002696:	f7ff fed7 	bl	8002448 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4618      	mov	r0, r3
 80026a0:	f7ff ff0c 	bl	80024bc <LL_ADC_IsInternalRegulatorEnabled>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d115      	bne.n	80026d6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4618      	mov	r0, r3
 80026b0:	f7ff fef0 	bl	8002494 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80026b4:	4b87      	ldr	r3, [pc, #540]	@ (80028d4 <HAL_ADC_Init+0x290>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	099b      	lsrs	r3, r3, #6
 80026ba:	4a87      	ldr	r2, [pc, #540]	@ (80028d8 <HAL_ADC_Init+0x294>)
 80026bc:	fba2 2303 	umull	r2, r3, r2, r3
 80026c0:	099b      	lsrs	r3, r3, #6
 80026c2:	3301      	adds	r3, #1
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026c8:	e002      	b.n	80026d0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3b01      	subs	r3, #1
 80026ce:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d1f9      	bne.n	80026ca <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7ff feee 	bl	80024bc <LL_ADC_IsInternalRegulatorEnabled>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d10d      	bne.n	8002702 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ea:	f043 0210 	orr.w	r2, r3, #16
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f6:	f043 0201 	orr.w	r2, r3, #1
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7ff ff62 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 800270c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b00      	cmp	r3, #0
 8002718:	f040 80cf 	bne.w	80028ba <HAL_ADC_Init+0x276>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	2b00      	cmp	r3, #0
 8002720:	f040 80cb 	bne.w	80028ba <HAL_ADC_Init+0x276>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002728:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800272c:	f043 0202 	orr.w	r2, r3, #2
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4618      	mov	r0, r3
 800273a:	f7ff fefb 	bl	8002534 <LL_ADC_IsEnabled>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d115      	bne.n	8002770 <HAL_ADC_Init+0x12c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002744:	4865      	ldr	r0, [pc, #404]	@ (80028dc <HAL_ADC_Init+0x298>)
 8002746:	f7ff fef5 	bl	8002534 <LL_ADC_IsEnabled>
 800274a:	4604      	mov	r4, r0
 800274c:	4864      	ldr	r0, [pc, #400]	@ (80028e0 <HAL_ADC_Init+0x29c>)
 800274e:	f7ff fef1 	bl	8002534 <LL_ADC_IsEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	431c      	orrs	r4, r3
 8002756:	4863      	ldr	r0, [pc, #396]	@ (80028e4 <HAL_ADC_Init+0x2a0>)
 8002758:	f7ff feec 	bl	8002534 <LL_ADC_IsEnabled>
 800275c:	4603      	mov	r3, r0
 800275e:	4323      	orrs	r3, r4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d105      	bne.n	8002770 <HAL_ADC_Init+0x12c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	4619      	mov	r1, r3
 800276a:	485f      	ldr	r0, [pc, #380]	@ (80028e8 <HAL_ADC_Init+0x2a4>)
 800276c:	f7ff fd38 	bl	80021e0 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	7e5b      	ldrb	r3, [r3, #25]
 8002774:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800277a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002780:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002786:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800278e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002790:	4313      	orrs	r3, r2
 8002792:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279a:	2b01      	cmp	r3, #1
 800279c:	d106      	bne.n	80027ac <HAL_ADC_Init+0x168>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a2:	3b01      	subs	r3, #1
 80027a4:	045b      	lsls	r3, r3, #17
 80027a6:	69ba      	ldr	r2, [r7, #24]
 80027a8:	4313      	orrs	r3, r2
 80027aa:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d009      	beq.n	80027c8 <HAL_ADC_Init+0x184>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027b8:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4313      	orrs	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68da      	ldr	r2, [r3, #12]
 80027ce:	4b47      	ldr	r3, [pc, #284]	@ (80028ec <HAL_ADC_Init+0x2a8>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	687a      	ldr	r2, [r7, #4]
 80027d4:	6812      	ldr	r2, [r2, #0]
 80027d6:	69b9      	ldr	r1, [r7, #24]
 80027d8:	430b      	orrs	r3, r1
 80027da:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fef5 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 80027e6:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff16 	bl	800261e <LL_ADC_INJ_IsConversionOngoing>
 80027f2:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027f4:	693b      	ldr	r3, [r7, #16]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d13d      	bne.n	8002876 <HAL_ADC_Init+0x232>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d13a      	bne.n	8002876 <HAL_ADC_Init+0x232>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002804:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800280c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800280e:	4313      	orrs	r3, r2
 8002810:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	68db      	ldr	r3, [r3, #12]
 8002818:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800281c:	f023 0302 	bic.w	r3, r3, #2
 8002820:	687a      	ldr	r2, [r7, #4]
 8002822:	6812      	ldr	r2, [r2, #0]
 8002824:	69b9      	ldr	r1, [r7, #24]
 8002826:	430b      	orrs	r3, r1
 8002828:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002830:	2b01      	cmp	r3, #1
 8002832:	d118      	bne.n	8002866 <HAL_ADC_Init+0x222>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800283e:	f023 0304 	bic.w	r3, r3, #4
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800284a:	4311      	orrs	r1, r2
 800284c:	687a      	ldr	r2, [r7, #4]
 800284e:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002850:	4311      	orrs	r1, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002856:	430a      	orrs	r2, r1
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 0201 	orr.w	r2, r2, #1
 8002862:	611a      	str	r2, [r3, #16]
 8002864:	e007      	b.n	8002876 <HAL_ADC_Init+0x232>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	691a      	ldr	r2, [r3, #16]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0201 	bic.w	r2, r2, #1
 8002874:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	2b01      	cmp	r3, #1
 800287c:	d10c      	bne.n	8002898 <HAL_ADC_Init+0x254>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002884:	f023 010f 	bic.w	r1, r3, #15
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
 800288c:	1e5a      	subs	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	430a      	orrs	r2, r1
 8002894:	631a      	str	r2, [r3, #48]	@ 0x30
 8002896:	e007      	b.n	80028a8 <HAL_ADC_Init+0x264>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f022 020f 	bic.w	r2, r2, #15
 80028a6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028ac:	f023 0303 	bic.w	r3, r3, #3
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	655a      	str	r2, [r3, #84]	@ 0x54
 80028b8:	e007      	b.n	80028ca <HAL_ADC_Init+0x286>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80028be:	f043 0210 	orr.w	r2, r3, #16
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80028ca:	7ffb      	ldrb	r3, [r7, #31]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3724      	adds	r7, #36	@ 0x24
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd90      	pop	{r4, r7, pc}
 80028d4:	20000008 	.word	0x20000008
 80028d8:	053e2d63 	.word	0x053e2d63
 80028dc:	50040000 	.word	0x50040000
 80028e0:	50040100 	.word	0x50040100
 80028e4:	50040200 	.word	0x50040200
 80028e8:	50040300 	.word	0x50040300
 80028ec:	fff0c007 	.word	0xfff0c007

080028f0 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80028f8:	4857      	ldr	r0, [pc, #348]	@ (8002a58 <HAL_ADC_Start+0x168>)
 80028fa:	f7ff fd89 	bl	8002410 <LL_ADC_GetMultimode>
 80028fe:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f7ff fe63 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	f040 809c 	bne.w	8002a4a <HAL_ADC_Start+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002918:	2b01      	cmp	r3, #1
 800291a:	d101      	bne.n	8002920 <HAL_ADC_Start+0x30>
 800291c:	2302      	movs	r3, #2
 800291e:	e097      	b.n	8002a50 <HAL_ADC_Start+0x160>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 fe61 	bl	80035f0 <ADC_Enable>
 800292e:	4603      	mov	r3, r0
 8002930:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b00      	cmp	r3, #0
 8002936:	f040 8083 	bne.w	8002a40 <HAL_ADC_Start+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800293e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002942:	f023 0301 	bic.w	r3, r3, #1
 8002946:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	655a      	str	r2, [r3, #84]	@ 0x54

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	4a42      	ldr	r2, [pc, #264]	@ (8002a5c <HAL_ADC_Start+0x16c>)
 8002954:	4293      	cmp	r3, r2
 8002956:	d002      	beq.n	800295e <HAL_ADC_Start+0x6e>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	e000      	b.n	8002960 <HAL_ADC_Start+0x70>
 800295e:	4b40      	ldr	r3, [pc, #256]	@ (8002a60 <HAL_ADC_Start+0x170>)
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6812      	ldr	r2, [r2, #0]
 8002964:	4293      	cmp	r3, r2
 8002966:	d002      	beq.n	800296e <HAL_ADC_Start+0x7e>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d105      	bne.n	800297a <HAL_ADC_Start+0x8a>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002972:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	655a      	str	r2, [r3, #84]	@ 0x54
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800297e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002982:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002986:	d106      	bne.n	8002996 <HAL_ADC_Start+0xa6>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800298c:	f023 0206 	bic.w	r2, r3, #6
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	659a      	str	r2, [r3, #88]	@ 0x58
 8002994:	e002      	b.n	800299c <HAL_ADC_Start+0xac>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	659a      	str	r2, [r3, #88]	@ 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	221c      	movs	r2, #28
 80029a2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a2a      	ldr	r2, [pc, #168]	@ (8002a5c <HAL_ADC_Start+0x16c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d002      	beq.n	80029bc <HAL_ADC_Start+0xcc>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	e000      	b.n	80029be <HAL_ADC_Start+0xce>
 80029bc:	4b28      	ldr	r3, [pc, #160]	@ (8002a60 <HAL_ADC_Start+0x170>)
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	6812      	ldr	r2, [r2, #0]
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d008      	beq.n	80029d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d005      	beq.n	80029d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80029cc:	693b      	ldr	r3, [r7, #16]
 80029ce:	2b05      	cmp	r3, #5
 80029d0:	d002      	beq.n	80029d8 <HAL_ADC_Start+0xe8>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80029d2:	693b      	ldr	r3, [r7, #16]
 80029d4:	2b09      	cmp	r3, #9
 80029d6:	d114      	bne.n	8002a02 <HAL_ADC_Start+0x112>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	68db      	ldr	r3, [r3, #12]
 80029de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d007      	beq.n	80029f6 <HAL_ADC_Start+0x106>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80029ee:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f7ff fdc0 	bl	8002580 <LL_ADC_REG_StartConversion>
 8002a00:	e025      	b.n	8002a4e <HAL_ADC_Start+0x15e>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a06:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	655a      	str	r2, [r3, #84]	@ 0x54
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a12      	ldr	r2, [pc, #72]	@ (8002a5c <HAL_ADC_Start+0x16c>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d002      	beq.n	8002a1e <HAL_ADC_Start+0x12e>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	e000      	b.n	8002a20 <HAL_ADC_Start+0x130>
 8002a1e:	4b10      	ldr	r3, [pc, #64]	@ (8002a60 <HAL_ADC_Start+0x170>)
 8002a20:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	68db      	ldr	r3, [r3, #12]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00f      	beq.n	8002a4e <HAL_ADC_Start+0x15e>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a32:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a36:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	655a      	str	r2, [r3, #84]	@ 0x54
 8002a3e:	e006      	b.n	8002a4e <HAL_ADC_Start+0x15e>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8002a48:	e001      	b.n	8002a4e <HAL_ADC_Start+0x15e>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8002a4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	3718      	adds	r7, #24
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	50040300 	.word	0x50040300
 8002a5c:	50040100 	.word	0x50040100
 8002a60:	50040000 	.word	0x50040000

08002a64 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d101      	bne.n	8002a7a <HAL_ADC_Stop+0x16>
 8002a76:	2302      	movs	r3, #2
 8002a78:	e023      	b.n	8002ac2 <HAL_ADC_Stop+0x5e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8002a82:	2103      	movs	r1, #3
 8002a84:	6878      	ldr	r0, [r7, #4]
 8002a86:	f000 fcf7 	bl	8003478 <ADC_ConversionStop>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8002a8e:	7bfb      	ldrb	r3, [r7, #15]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d111      	bne.n	8002ab8 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 fe0d 	bl	80036b4 <ADC_Disable>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d109      	bne.n	8002ab8 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aa8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002aac:	f023 0301 	bic.w	r3, r3, #1
 8002ab0:	f043 0201 	orr.w	r2, r3, #1
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b088      	sub	sp, #32
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ad6:	4866      	ldr	r0, [pc, #408]	@ (8002c70 <HAL_ADC_PollForConversion+0x1a4>)
 8002ad8:	f7ff fc9a 	bl	8002410 <LL_ADC_GetMultimode>
 8002adc:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	695b      	ldr	r3, [r3, #20]
 8002ae2:	2b08      	cmp	r3, #8
 8002ae4:	d102      	bne.n	8002aec <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002ae6:	2308      	movs	r3, #8
 8002ae8:	61fb      	str	r3, [r7, #28]
 8002aea:	e02a      	b.n	8002b42 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002aec:	697b      	ldr	r3, [r7, #20]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d005      	beq.n	8002afe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002af2:	697b      	ldr	r3, [r7, #20]
 8002af4:	2b05      	cmp	r3, #5
 8002af6:	d002      	beq.n	8002afe <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	2b09      	cmp	r3, #9
 8002afc:	d111      	bne.n	8002b22 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0301 	and.w	r3, r3, #1
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d007      	beq.n	8002b1c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b10:	f043 0220 	orr.w	r2, r3, #32
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e0a4      	b.n	8002c66 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b1c:	2304      	movs	r3, #4
 8002b1e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002b20:	e00f      	b.n	8002b42 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002b22:	4853      	ldr	r0, [pc, #332]	@ (8002c70 <HAL_ADC_PollForConversion+0x1a4>)
 8002b24:	f7ff fc82 	bl	800242c <LL_ADC_GetMultiDMATransfer>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d007      	beq.n	8002b3e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b32:	f043 0220 	orr.w	r2, r3, #32
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e093      	b.n	8002c66 <HAL_ADC_PollForConversion+0x19a>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8002b3e:	2304      	movs	r3, #4
 8002b40:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002b42:	f7ff fb41 	bl	80021c8 <HAL_GetTick>
 8002b46:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b48:	e021      	b.n	8002b8e <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002b50:	d01d      	beq.n	8002b8e <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002b52:	f7ff fb39 	bl	80021c8 <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d302      	bcc.n	8002b68 <HAL_ADC_PollForConversion+0x9c>
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d112      	bne.n	8002b8e <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	69fb      	ldr	r3, [r7, #28]
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d10b      	bne.n	8002b8e <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b7a:	f043 0204 	orr.w	r2, r3, #4
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

          return HAL_TIMEOUT;
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e06b      	b.n	8002c66 <HAL_ADC_PollForConversion+0x19a>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	4013      	ands	r3, r2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d0d6      	beq.n	8002b4a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ba0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f7ff fba0 	bl	80022f2 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d01c      	beq.n	8002bf2 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	7e5b      	ldrb	r3, [r3, #25]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d118      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0308 	and.w	r3, r3, #8
 8002bca:	2b08      	cmp	r3, #8
 8002bcc:	d111      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bd2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	655a      	str	r2, [r3, #84]	@ 0x54

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bde:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d105      	bne.n	8002bf2 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bea:	f043 0201 	orr.w	r2, r3, #1
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4a1f      	ldr	r2, [pc, #124]	@ (8002c74 <HAL_ADC_PollForConversion+0x1a8>)
 8002bf8:	4293      	cmp	r3, r2
 8002bfa:	d002      	beq.n	8002c02 <HAL_ADC_PollForConversion+0x136>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	e000      	b.n	8002c04 <HAL_ADC_PollForConversion+0x138>
 8002c02:	4b1d      	ldr	r3, [pc, #116]	@ (8002c78 <HAL_ADC_PollForConversion+0x1ac>)
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	6812      	ldr	r2, [r2, #0]
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d008      	beq.n	8002c1e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d005      	beq.n	8002c1e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	2b05      	cmp	r3, #5
 8002c16:	d002      	beq.n	8002c1e <HAL_ADC_PollForConversion+0x152>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2b09      	cmp	r3, #9
 8002c1c:	d104      	bne.n	8002c28 <HAL_ADC_PollForConversion+0x15c>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e00c      	b.n	8002c42 <HAL_ADC_PollForConversion+0x176>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a11      	ldr	r2, [pc, #68]	@ (8002c74 <HAL_ADC_PollForConversion+0x1a8>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d002      	beq.n	8002c38 <HAL_ADC_PollForConversion+0x16c>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	e000      	b.n	8002c3a <HAL_ADC_PollForConversion+0x16e>
 8002c38:	4b0f      	ldr	r3, [pc, #60]	@ (8002c78 <HAL_ADC_PollForConversion+0x1ac>)
 8002c3a:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d104      	bne.n	8002c52 <HAL_ADC_PollForConversion+0x186>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	2208      	movs	r2, #8
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	e008      	b.n	8002c64 <HAL_ADC_PollForConversion+0x198>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d103      	bne.n	8002c64 <HAL_ADC_PollForConversion+0x198>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	220c      	movs	r2, #12
 8002c62:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3720      	adds	r7, #32
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}
 8002c6e:	bf00      	nop
 8002c70:	50040300 	.word	0x50040300
 8002c74:	50040100 	.word	0x50040100
 8002c78:	50040000 	.word	0x50040000

08002c7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr
	...

08002c98 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b0b6      	sub	sp, #216	@ 0xd8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002cb2:	2b01      	cmp	r3, #1
 8002cb4:	d101      	bne.n	8002cba <HAL_ADC_ConfigChannel+0x22>
 8002cb6:	2302      	movs	r3, #2
 8002cb8:	e3c7      	b.n	800344a <HAL_ADC_ConfigChannel+0x7b2>
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff fc82 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	f040 83a8 	bne.w	8003424 <HAL_ADC_ConfigChannel+0x78c>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	2b05      	cmp	r3, #5
 8002cda:	d824      	bhi.n	8002d26 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	3b02      	subs	r3, #2
 8002ce2:	2b03      	cmp	r3, #3
 8002ce4:	d81b      	bhi.n	8002d1e <HAL_ADC_ConfigChannel+0x86>
 8002ce6:	a201      	add	r2, pc, #4	@ (adr r2, 8002cec <HAL_ADC_ConfigChannel+0x54>)
 8002ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cec:	08002cfd 	.word	0x08002cfd
 8002cf0:	08002d05 	.word	0x08002d05
 8002cf4:	08002d0d 	.word	0x08002d0d
 8002cf8:	08002d15 	.word	0x08002d15
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	220c      	movs	r2, #12
 8002d00:	605a      	str	r2, [r3, #4]
          break;
 8002d02:	e010      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x8e>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2212      	movs	r2, #18
 8002d08:	605a      	str	r2, [r3, #4]
          break;
 8002d0a:	e00c      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x8e>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	2218      	movs	r2, #24
 8002d10:	605a      	str	r2, [r3, #4]
          break;
 8002d12:	e008      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x8e>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002d1a:	605a      	str	r2, [r3, #4]
          break;
 8002d1c:	e003      	b.n	8002d26 <HAL_ADC_ConfigChannel+0x8e>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2206      	movs	r2, #6
 8002d22:	605a      	str	r2, [r3, #4]
          break;
 8002d24:	bf00      	nop
      }
    }
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6818      	ldr	r0, [r3, #0]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	6859      	ldr	r1, [r3, #4]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	f7ff faf0 	bl	8002318 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f7ff fc47 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8002d42:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7ff fc67 	bl	800261e <LL_ADC_INJ_IsConversionOngoing>
 8002d50:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d54:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f040 81a6 	bne.w	80030aa <HAL_ADC_ConfigChannel+0x412>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002d5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f040 81a1 	bne.w	80030aa <HAL_ADC_ConfigChannel+0x412>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6818      	ldr	r0, [r3, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	6819      	ldr	r1, [r3, #0]
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	461a      	mov	r2, r3
 8002d76:	f7ff fafb 	bl	8002370 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	695a      	ldr	r2, [r3, #20]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	08db      	lsrs	r3, r3, #3
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	005b      	lsls	r3, r3, #1
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	691b      	ldr	r3, [r3, #16]
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d00a      	beq.n	8002db2 <HAL_ADC_ConfigChannel+0x11a>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6919      	ldr	r1, [r3, #16]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002dac:	f7ff fa4c 	bl	8002248 <LL_ADC_SetOffset>
 8002db0:	e17b      	b.n	80030aa <HAL_ADC_ConfigChannel+0x412>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	2100      	movs	r1, #0
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff fa69 	bl	8002290 <LL_ADC_GetOffsetChannel>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d10a      	bne.n	8002dde <HAL_ADC_ConfigChannel+0x146>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2100      	movs	r1, #0
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff fa5e 	bl	8002290 <LL_ADC_GetOffsetChannel>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	0e9b      	lsrs	r3, r3, #26
 8002dd8:	f003 021f 	and.w	r2, r3, #31
 8002ddc:	e01e      	b.n	8002e1c <HAL_ADC_ConfigChannel+0x184>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2100      	movs	r1, #0
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff fa53 	bl	8002290 <LL_ADC_GetOffsetChannel>
 8002dea:	4603      	mov	r3, r0
 8002dec:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002df0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002df4:	fa93 f3a3 	rbit	r3, r3
 8002df8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002dfc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002e00:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002e04:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d101      	bne.n	8002e10 <HAL_ADC_ConfigChannel+0x178>
  {
    return 32U;
 8002e0c:	2320      	movs	r3, #32
 8002e0e:	e004      	b.n	8002e1a <HAL_ADC_ConfigChannel+0x182>
  }
  return __builtin_clz(value);
 8002e10:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002e14:	fab3 f383 	clz	r3, r3
 8002e18:	b2db      	uxtb	r3, r3
 8002e1a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d105      	bne.n	8002e34 <HAL_ADC_ConfigChannel+0x19c>
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0e9b      	lsrs	r3, r3, #26
 8002e2e:	f003 031f 	and.w	r3, r3, #31
 8002e32:	e018      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x1ce>
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002e40:	fa93 f3a3 	rbit	r3, r3
 8002e44:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002e48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e4c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002e50:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1c4>
    return 32U;
 8002e58:	2320      	movs	r3, #32
 8002e5a:	e004      	b.n	8002e66 <HAL_ADC_ConfigChannel+0x1ce>
  return __builtin_clz(value);
 8002e5c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002e60:	fab3 f383 	clz	r3, r3
 8002e64:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d106      	bne.n	8002e78 <HAL_ADC_ConfigChannel+0x1e0>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2100      	movs	r1, #0
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fa22 	bl	80022bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2101      	movs	r1, #1
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff fa06 	bl	8002290 <LL_ADC_GetOffsetChannel>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <HAL_ADC_ConfigChannel+0x20c>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	4618      	mov	r0, r3
 8002e96:	f7ff f9fb 	bl	8002290 <LL_ADC_GetOffsetChannel>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	0e9b      	lsrs	r3, r3, #26
 8002e9e:	f003 021f 	and.w	r2, r3, #31
 8002ea2:	e01e      	b.n	8002ee2 <HAL_ADC_ConfigChannel+0x24a>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7ff f9f0 	bl	8002290 <LL_ADC_GetOffsetChannel>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eba:	fa93 f3a3 	rbit	r3, r3
 8002ebe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8002ec2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002ec6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8002eca:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d101      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x23e>
    return 32U;
 8002ed2:	2320      	movs	r3, #32
 8002ed4:	e004      	b.n	8002ee0 <HAL_ADC_ConfigChannel+0x248>
  return __builtin_clz(value);
 8002ed6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002eda:	fab3 f383 	clz	r3, r3
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d105      	bne.n	8002efa <HAL_ADC_ConfigChannel+0x262>
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	0e9b      	lsrs	r3, r3, #26
 8002ef4:	f003 031f 	and.w	r3, r3, #31
 8002ef8:	e018      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x294>
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f02:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002f06:	fa93 f3a3 	rbit	r3, r3
 8002f0a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8002f0e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8002f12:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8002f16:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d101      	bne.n	8002f22 <HAL_ADC_ConfigChannel+0x28a>
    return 32U;
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e004      	b.n	8002f2c <HAL_ADC_ConfigChannel+0x294>
  return __builtin_clz(value);
 8002f22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d106      	bne.n	8002f3e <HAL_ADC_ConfigChannel+0x2a6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2200      	movs	r2, #0
 8002f36:	2101      	movs	r1, #1
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7ff f9bf 	bl	80022bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	2102      	movs	r1, #2
 8002f44:	4618      	mov	r0, r3
 8002f46:	f7ff f9a3 	bl	8002290 <LL_ADC_GetOffsetChannel>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d10a      	bne.n	8002f6a <HAL_ADC_ConfigChannel+0x2d2>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	2102      	movs	r1, #2
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f7ff f998 	bl	8002290 <LL_ADC_GetOffsetChannel>
 8002f60:	4603      	mov	r3, r0
 8002f62:	0e9b      	lsrs	r3, r3, #26
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	e01e      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x310>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2102      	movs	r1, #2
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7ff f98d 	bl	8002290 <LL_ADC_GetOffsetChannel>
 8002f76:	4603      	mov	r3, r0
 8002f78:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002f80:	fa93 f3a3 	rbit	r3, r3
 8002f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002f88:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002f8c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002f90:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d101      	bne.n	8002f9c <HAL_ADC_ConfigChannel+0x304>
    return 32U;
 8002f98:	2320      	movs	r3, #32
 8002f9a:	e004      	b.n	8002fa6 <HAL_ADC_ConfigChannel+0x30e>
  return __builtin_clz(value);
 8002f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d105      	bne.n	8002fc0 <HAL_ADC_ConfigChannel+0x328>
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	0e9b      	lsrs	r3, r3, #26
 8002fba:	f003 031f 	and.w	r3, r3, #31
 8002fbe:	e016      	b.n	8002fee <HAL_ADC_ConfigChannel+0x356>
 8002fc0:	683b      	ldr	r3, [r7, #0]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fc8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002fcc:	fa93 f3a3 	rbit	r3, r3
 8002fd0:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002fd2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002fd4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002fd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d101      	bne.n	8002fe4 <HAL_ADC_ConfigChannel+0x34c>
    return 32U;
 8002fe0:	2320      	movs	r3, #32
 8002fe2:	e004      	b.n	8002fee <HAL_ADC_ConfigChannel+0x356>
  return __builtin_clz(value);
 8002fe4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002fe8:	fab3 f383 	clz	r3, r3
 8002fec:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d106      	bne.n	8003000 <HAL_ADC_ConfigChannel+0x368>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	2102      	movs	r1, #2
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f7ff f95e 	bl	80022bc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2103      	movs	r1, #3
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff f942 	bl	8002290 <LL_ADC_GetOffsetChannel>
 800300c:	4603      	mov	r3, r0
 800300e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003012:	2b00      	cmp	r3, #0
 8003014:	d10a      	bne.n	800302c <HAL_ADC_ConfigChannel+0x394>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	2103      	movs	r1, #3
 800301c:	4618      	mov	r0, r3
 800301e:	f7ff f937 	bl	8002290 <LL_ADC_GetOffsetChannel>
 8003022:	4603      	mov	r3, r0
 8003024:	0e9b      	lsrs	r3, r3, #26
 8003026:	f003 021f 	and.w	r2, r3, #31
 800302a:	e017      	b.n	800305c <HAL_ADC_ConfigChannel+0x3c4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	2103      	movs	r1, #3
 8003032:	4618      	mov	r0, r3
 8003034:	f7ff f92c 	bl	8002290 <LL_ADC_GetOffsetChannel>
 8003038:	4603      	mov	r3, r0
 800303a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800303e:	fa93 f3a3 	rbit	r3, r3
 8003042:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003044:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003046:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003048:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_ADC_ConfigChannel+0x3ba>
    return 32U;
 800304e:	2320      	movs	r3, #32
 8003050:	e003      	b.n	800305a <HAL_ADC_ConfigChannel+0x3c2>
  return __builtin_clz(value);
 8003052:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_ADC_ConfigChannel+0x3dc>
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	0e9b      	lsrs	r3, r3, #26
 800306e:	f003 031f 	and.w	r3, r3, #31
 8003072:	e011      	b.n	8003098 <HAL_ADC_ConfigChannel+0x400>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800307c:	fa93 f3a3 	rbit	r3, r3
 8003080:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003082:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003084:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003086:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003088:	2b00      	cmp	r3, #0
 800308a:	d101      	bne.n	8003090 <HAL_ADC_ConfigChannel+0x3f8>
    return 32U;
 800308c:	2320      	movs	r3, #32
 800308e:	e003      	b.n	8003098 <HAL_ADC_ConfigChannel+0x400>
  return __builtin_clz(value);
 8003090:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003092:	fab3 f383 	clz	r3, r3
 8003096:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003098:	429a      	cmp	r2, r3
 800309a:	d106      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x412>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2103      	movs	r1, #3
 80030a4:	4618      	mov	r0, r3
 80030a6:	f7ff f909 	bl	80022bc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4618      	mov	r0, r3
 80030b0:	f7ff fa40 	bl	8002534 <LL_ADC_IsEnabled>
 80030b4:	4603      	mov	r3, r0
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f040 8140 	bne.w	800333c <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6818      	ldr	r0, [r3, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	6819      	ldr	r1, [r3, #0]
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	461a      	mov	r2, r3
 80030ca:	f7ff f97d 	bl	80023c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	4a8f      	ldr	r2, [pc, #572]	@ (8003310 <HAL_ADC_ConfigChannel+0x678>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	f040 8131 	bne.w	800333c <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d10b      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x46a>
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	0e9b      	lsrs	r3, r3, #26
 80030f0:	3301      	adds	r3, #1
 80030f2:	f003 031f 	and.w	r3, r3, #31
 80030f6:	2b09      	cmp	r3, #9
 80030f8:	bf94      	ite	ls
 80030fa:	2301      	movls	r3, #1
 80030fc:	2300      	movhi	r3, #0
 80030fe:	b2db      	uxtb	r3, r3
 8003100:	e019      	b.n	8003136 <HAL_ADC_ConfigChannel+0x49e>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800310a:	fa93 f3a3 	rbit	r3, r3
 800310e:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003110:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003112:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8003114:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_ConfigChannel+0x486>
    return 32U;
 800311a:	2320      	movs	r3, #32
 800311c:	e003      	b.n	8003126 <HAL_ADC_ConfigChannel+0x48e>
  return __builtin_clz(value);
 800311e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003120:	fab3 f383 	clz	r3, r3
 8003124:	b2db      	uxtb	r3, r3
 8003126:	3301      	adds	r3, #1
 8003128:	f003 031f 	and.w	r3, r3, #31
 800312c:	2b09      	cmp	r3, #9
 800312e:	bf94      	ite	ls
 8003130:	2301      	movls	r3, #1
 8003132:	2300      	movhi	r3, #0
 8003134:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003136:	2b00      	cmp	r3, #0
 8003138:	d079      	beq.n	800322e <HAL_ADC_ConfigChannel+0x596>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003142:	2b00      	cmp	r3, #0
 8003144:	d107      	bne.n	8003156 <HAL_ADC_ConfigChannel+0x4be>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	0e9b      	lsrs	r3, r3, #26
 800314c:	3301      	adds	r3, #1
 800314e:	069b      	lsls	r3, r3, #26
 8003150:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003154:	e015      	b.n	8003182 <HAL_ADC_ConfigChannel+0x4ea>
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800315c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800315e:	fa93 f3a3 	rbit	r3, r3
 8003162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8003164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003166:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8003168:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800316a:	2b00      	cmp	r3, #0
 800316c:	d101      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x4da>
    return 32U;
 800316e:	2320      	movs	r3, #32
 8003170:	e003      	b.n	800317a <HAL_ADC_ConfigChannel+0x4e2>
  return __builtin_clz(value);
 8003172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003174:	fab3 f383 	clz	r3, r3
 8003178:	b2db      	uxtb	r3, r3
 800317a:	3301      	adds	r3, #1
 800317c:	069b      	lsls	r3, r3, #26
 800317e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003182:	683b      	ldr	r3, [r7, #0]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800318a:	2b00      	cmp	r3, #0
 800318c:	d109      	bne.n	80031a2 <HAL_ADC_ConfigChannel+0x50a>
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	0e9b      	lsrs	r3, r3, #26
 8003194:	3301      	adds	r3, #1
 8003196:	f003 031f 	and.w	r3, r3, #31
 800319a:	2101      	movs	r1, #1
 800319c:	fa01 f303 	lsl.w	r3, r1, r3
 80031a0:	e017      	b.n	80031d2 <HAL_ADC_ConfigChannel+0x53a>
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80031aa:	fa93 f3a3 	rbit	r3, r3
 80031ae:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80031b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80031b2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80031b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_ADC_ConfigChannel+0x526>
    return 32U;
 80031ba:	2320      	movs	r3, #32
 80031bc:	e003      	b.n	80031c6 <HAL_ADC_ConfigChannel+0x52e>
  return __builtin_clz(value);
 80031be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80031c0:	fab3 f383 	clz	r3, r3
 80031c4:	b2db      	uxtb	r3, r3
 80031c6:	3301      	adds	r3, #1
 80031c8:	f003 031f 	and.w	r3, r3, #31
 80031cc:	2101      	movs	r1, #1
 80031ce:	fa01 f303 	lsl.w	r3, r1, r3
 80031d2:	ea42 0103 	orr.w	r1, r2, r3
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d10a      	bne.n	80031f8 <HAL_ADC_ConfigChannel+0x560>
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	0e9b      	lsrs	r3, r3, #26
 80031e8:	3301      	adds	r3, #1
 80031ea:	f003 021f 	and.w	r2, r3, #31
 80031ee:	4613      	mov	r3, r2
 80031f0:	005b      	lsls	r3, r3, #1
 80031f2:	4413      	add	r3, r2
 80031f4:	051b      	lsls	r3, r3, #20
 80031f6:	e018      	b.n	800322a <HAL_ADC_ConfigChannel+0x592>
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003200:	fa93 f3a3 	rbit	r3, r3
 8003204:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003206:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003208:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800320a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800320c:	2b00      	cmp	r3, #0
 800320e:	d101      	bne.n	8003214 <HAL_ADC_ConfigChannel+0x57c>
    return 32U;
 8003210:	2320      	movs	r3, #32
 8003212:	e003      	b.n	800321c <HAL_ADC_ConfigChannel+0x584>
  return __builtin_clz(value);
 8003214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003216:	fab3 f383 	clz	r3, r3
 800321a:	b2db      	uxtb	r3, r3
 800321c:	3301      	adds	r3, #1
 800321e:	f003 021f 	and.w	r2, r3, #31
 8003222:	4613      	mov	r3, r2
 8003224:	005b      	lsls	r3, r3, #1
 8003226:	4413      	add	r3, r2
 8003228:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800322a:	430b      	orrs	r3, r1
 800322c:	e081      	b.n	8003332 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003236:	2b00      	cmp	r3, #0
 8003238:	d107      	bne.n	800324a <HAL_ADC_ConfigChannel+0x5b2>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	0e9b      	lsrs	r3, r3, #26
 8003240:	3301      	adds	r3, #1
 8003242:	069b      	lsls	r3, r3, #26
 8003244:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003248:	e015      	b.n	8003276 <HAL_ADC_ConfigChannel+0x5de>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8003258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800325a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 800325c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x5ce>
    return 32U;
 8003262:	2320      	movs	r3, #32
 8003264:	e003      	b.n	800326e <HAL_ADC_ConfigChannel+0x5d6>
  return __builtin_clz(value);
 8003266:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	3301      	adds	r3, #1
 8003270:	069b      	lsls	r3, r3, #26
 8003272:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800327e:	2b00      	cmp	r3, #0
 8003280:	d109      	bne.n	8003296 <HAL_ADC_ConfigChannel+0x5fe>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	0e9b      	lsrs	r3, r3, #26
 8003288:	3301      	adds	r3, #1
 800328a:	f003 031f 	and.w	r3, r3, #31
 800328e:	2101      	movs	r1, #1
 8003290:	fa01 f303 	lsl.w	r3, r1, r3
 8003294:	e017      	b.n	80032c6 <HAL_ADC_ConfigChannel+0x62e>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	61fb      	str	r3, [r7, #28]
  return result;
 80032a4:	69fb      	ldr	r3, [r7, #28]
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80032a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d101      	bne.n	80032b2 <HAL_ADC_ConfigChannel+0x61a>
    return 32U;
 80032ae:	2320      	movs	r3, #32
 80032b0:	e003      	b.n	80032ba <HAL_ADC_ConfigChannel+0x622>
  return __builtin_clz(value);
 80032b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b4:	fab3 f383 	clz	r3, r3
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	3301      	adds	r3, #1
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	2101      	movs	r1, #1
 80032c2:	fa01 f303 	lsl.w	r3, r1, r3
 80032c6:	ea42 0103 	orr.w	r1, r2, r3
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d10d      	bne.n	80032f2 <HAL_ADC_ConfigChannel+0x65a>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	3301      	adds	r3, #1
 80032de:	f003 021f 	and.w	r2, r3, #31
 80032e2:	4613      	mov	r3, r2
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	4413      	add	r3, r2
 80032e8:	3b1e      	subs	r3, #30
 80032ea:	051b      	lsls	r3, r3, #20
 80032ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80032f0:	e01e      	b.n	8003330 <HAL_ADC_ConfigChannel+0x698>
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	fa93 f3a3 	rbit	r3, r3
 80032fe:	613b      	str	r3, [r7, #16]
  return result;
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003304:	69bb      	ldr	r3, [r7, #24]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d104      	bne.n	8003314 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 800330a:	2320      	movs	r3, #32
 800330c:	e006      	b.n	800331c <HAL_ADC_ConfigChannel+0x684>
 800330e:	bf00      	nop
 8003310:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003314:	69bb      	ldr	r3, [r7, #24]
 8003316:	fab3 f383 	clz	r3, r3
 800331a:	b2db      	uxtb	r3, r3
 800331c:	3301      	adds	r3, #1
 800331e:	f003 021f 	and.w	r2, r3, #31
 8003322:	4613      	mov	r3, r2
 8003324:	005b      	lsls	r3, r3, #1
 8003326:	4413      	add	r3, r2
 8003328:	3b1e      	subs	r3, #30
 800332a:	051b      	lsls	r3, r3, #20
 800332c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003330:	430b      	orrs	r3, r1
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	6892      	ldr	r2, [r2, #8]
 8003336:	4619      	mov	r1, r3
 8003338:	f7ff f81a 	bl	8002370 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800333c:	683b      	ldr	r3, [r7, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	4b44      	ldr	r3, [pc, #272]	@ (8003454 <HAL_ADC_ConfigChannel+0x7bc>)
 8003342:	4013      	ands	r3, r2
 8003344:	2b00      	cmp	r3, #0
 8003346:	d07a      	beq.n	800343e <HAL_ADC_ConfigChannel+0x7a6>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003348:	4843      	ldr	r0, [pc, #268]	@ (8003458 <HAL_ADC_ConfigChannel+0x7c0>)
 800334a:	f7fe ff6f 	bl	800222c <LL_ADC_GetCommonPathInternalCh>
 800334e:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a41      	ldr	r2, [pc, #260]	@ (800345c <HAL_ADC_ConfigChannel+0x7c4>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d12c      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x71e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800335c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003360:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d126      	bne.n	80033b6 <HAL_ADC_ConfigChannel+0x71e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a3c      	ldr	r2, [pc, #240]	@ (8003460 <HAL_ADC_ConfigChannel+0x7c8>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d004      	beq.n	800337c <HAL_ADC_ConfigChannel+0x6e4>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a3b      	ldr	r2, [pc, #236]	@ (8003464 <HAL_ADC_ConfigChannel+0x7cc>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d15d      	bne.n	8003438 <HAL_ADC_ConfigChannel+0x7a0>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800337c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003380:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003384:	4619      	mov	r1, r3
 8003386:	4834      	ldr	r0, [pc, #208]	@ (8003458 <HAL_ADC_ConfigChannel+0x7c0>)
 8003388:	f7fe ff3d 	bl	8002206 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800338c:	4b36      	ldr	r3, [pc, #216]	@ (8003468 <HAL_ADC_ConfigChannel+0x7d0>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	099b      	lsrs	r3, r3, #6
 8003392:	4a36      	ldr	r2, [pc, #216]	@ (800346c <HAL_ADC_ConfigChannel+0x7d4>)
 8003394:	fba2 2303 	umull	r2, r3, r2, r3
 8003398:	099b      	lsrs	r3, r3, #6
 800339a:	1c5a      	adds	r2, r3, #1
 800339c:	4613      	mov	r3, r2
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033a6:	e002      	b.n	80033ae <HAL_ADC_ConfigChannel+0x716>
          {
            wait_loop_index--;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	3b01      	subs	r3, #1
 80033ac:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d1f9      	bne.n	80033a8 <HAL_ADC_ConfigChannel+0x710>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80033b4:	e040      	b.n	8003438 <HAL_ADC_ConfigChannel+0x7a0>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a2d      	ldr	r2, [pc, #180]	@ (8003470 <HAL_ADC_ConfigChannel+0x7d8>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d118      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x75a>
 80033c0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033c4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d112      	bne.n	80033f2 <HAL_ADC_ConfigChannel+0x75a>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a23      	ldr	r2, [pc, #140]	@ (8003460 <HAL_ADC_ConfigChannel+0x7c8>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d004      	beq.n	80033e0 <HAL_ADC_ConfigChannel+0x748>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a22      	ldr	r2, [pc, #136]	@ (8003464 <HAL_ADC_ConfigChannel+0x7cc>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d12d      	bne.n	800343c <HAL_ADC_ConfigChannel+0x7a4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80033e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80033e4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80033e8:	4619      	mov	r1, r3
 80033ea:	481b      	ldr	r0, [pc, #108]	@ (8003458 <HAL_ADC_ConfigChannel+0x7c0>)
 80033ec:	f7fe ff0b 	bl	8002206 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80033f0:	e024      	b.n	800343c <HAL_ADC_ConfigChannel+0x7a4>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a1f      	ldr	r2, [pc, #124]	@ (8003474 <HAL_ADC_ConfigChannel+0x7dc>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d120      	bne.n	800343e <HAL_ADC_ConfigChannel+0x7a6>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80033fc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003400:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d11a      	bne.n	800343e <HAL_ADC_ConfigChannel+0x7a6>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a14      	ldr	r2, [pc, #80]	@ (8003460 <HAL_ADC_ConfigChannel+0x7c8>)
 800340e:	4293      	cmp	r3, r2
 8003410:	d115      	bne.n	800343e <HAL_ADC_ConfigChannel+0x7a6>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003412:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003416:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800341a:	4619      	mov	r1, r3
 800341c:	480e      	ldr	r0, [pc, #56]	@ (8003458 <HAL_ADC_ConfigChannel+0x7c0>)
 800341e:	f7fe fef2 	bl	8002206 <LL_ADC_SetCommonPathInternalCh>
 8003422:	e00c      	b.n	800343e <HAL_ADC_ConfigChannel+0x7a6>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003428:	f043 0220 	orr.w	r2, r3, #32
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003430:	2301      	movs	r3, #1
 8003432:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 8003436:	e002      	b.n	800343e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003438:	bf00      	nop
 800343a:	e000      	b.n	800343e <HAL_ADC_ConfigChannel+0x7a6>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800343c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	2200      	movs	r2, #0
 8003442:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003446:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800344a:	4618      	mov	r0, r3
 800344c:	37d8      	adds	r7, #216	@ 0xd8
 800344e:	46bd      	mov	sp, r7
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	80080000 	.word	0x80080000
 8003458:	50040300 	.word	0x50040300
 800345c:	c7520000 	.word	0xc7520000
 8003460:	50040000 	.word	0x50040000
 8003464:	50040200 	.word	0x50040200
 8003468:	20000008 	.word	0x20000008
 800346c:	053e2d63 	.word	0x053e2d63
 8003470:	cb840000 	.word	0xcb840000
 8003474:	80000001 	.word	0x80000001

08003478 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b088      	sub	sp, #32
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003482:	2300      	movs	r3, #0
 8003484:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4618      	mov	r0, r3
 8003490:	f7ff f89e 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8003494:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f7ff f8bf 	bl	800261e <LL_ADC_INJ_IsConversionOngoing>
 80034a0:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d103      	bne.n	80034b0 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	f000 8098 	beq.w	80035e0 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d02a      	beq.n	8003514 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	7e5b      	ldrb	r3, [r3, #25]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d126      	bne.n	8003514 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	7e1b      	ldrb	r3, [r3, #24]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d122      	bne.n	8003514 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80034ce:	2301      	movs	r3, #1
 80034d0:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80034d2:	e014      	b.n	80034fe <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	4a45      	ldr	r2, [pc, #276]	@ (80035ec <ADC_ConversionStop+0x174>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d90d      	bls.n	80034f8 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034e0:	f043 0210 	orr.w	r2, r3, #16
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034ec:	f043 0201 	orr.w	r2, r3, #1
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e074      	b.n	80035e2 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	3301      	adds	r3, #1
 80034fc:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003508:	2b40      	cmp	r3, #64	@ 0x40
 800350a:	d1e3      	bne.n	80034d4 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2240      	movs	r2, #64	@ 0x40
 8003512:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2b02      	cmp	r3, #2
 8003518:	d014      	beq.n	8003544 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4618      	mov	r0, r3
 8003520:	f7ff f856 	bl	80025d0 <LL_ADC_REG_IsConversionOngoing>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d00c      	beq.n	8003544 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	4618      	mov	r0, r3
 8003530:	f7ff f813 	bl	800255a <LL_ADC_IsDisableOngoing>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d104      	bne.n	8003544 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff f832 	bl	80025a8 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003544:	69bb      	ldr	r3, [r7, #24]
 8003546:	2b01      	cmp	r3, #1
 8003548:	d014      	beq.n	8003574 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff f865 	bl	800261e <LL_ADC_INJ_IsConversionOngoing>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00c      	beq.n	8003574 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4618      	mov	r0, r3
 8003560:	f7fe fffb 	bl	800255a <LL_ADC_IsDisableOngoing>
 8003564:	4603      	mov	r3, r0
 8003566:	2b00      	cmp	r3, #0
 8003568:	d104      	bne.n	8003574 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4618      	mov	r0, r3
 8003570:	f7ff f841 	bl	80025f6 <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003574:	69bb      	ldr	r3, [r7, #24]
 8003576:	2b02      	cmp	r3, #2
 8003578:	d005      	beq.n	8003586 <ADC_ConversionStop+0x10e>
 800357a:	69bb      	ldr	r3, [r7, #24]
 800357c:	2b03      	cmp	r3, #3
 800357e:	d105      	bne.n	800358c <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003580:	230c      	movs	r3, #12
 8003582:	617b      	str	r3, [r7, #20]
        break;
 8003584:	e005      	b.n	8003592 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003586:	2308      	movs	r3, #8
 8003588:	617b      	str	r3, [r7, #20]
        break;
 800358a:	e002      	b.n	8003592 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 800358c:	2304      	movs	r3, #4
 800358e:	617b      	str	r3, [r7, #20]
        break;
 8003590:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003592:	f7fe fe19 	bl	80021c8 <HAL_GetTick>
 8003596:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003598:	e01b      	b.n	80035d2 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 800359a:	f7fe fe15 	bl	80021c8 <HAL_GetTick>
 800359e:	4602      	mov	r2, r0
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	1ad3      	subs	r3, r2, r3
 80035a4:	2b05      	cmp	r3, #5
 80035a6:	d914      	bls.n	80035d2 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689a      	ldr	r2, [r3, #8]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	4013      	ands	r3, r2
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035ba:	f043 0210 	orr.w	r2, r3, #16
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035c6:	f043 0201 	orr.w	r2, r3, #1
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e007      	b.n	80035e2 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	689a      	ldr	r2, [r3, #8]
 80035d8:	697b      	ldr	r3, [r7, #20]
 80035da:	4013      	ands	r3, r2
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1dc      	bne.n	800359a <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3720      	adds	r7, #32
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
 80035ea:	bf00      	nop
 80035ec:	a33fffff 	.word	0xa33fffff

080035f0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4618      	mov	r0, r3
 80035fe:	f7fe ff99 	bl	8002534 <LL_ADC_IsEnabled>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d14d      	bne.n	80036a4 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	689a      	ldr	r2, [r3, #8]
 800360e:	4b28      	ldr	r3, [pc, #160]	@ (80036b0 <ADC_Enable+0xc0>)
 8003610:	4013      	ands	r3, r2
 8003612:	2b00      	cmp	r3, #0
 8003614:	d00d      	beq.n	8003632 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800361a:	f043 0210 	orr.w	r2, r3, #16
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003626:	f043 0201 	orr.w	r2, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e039      	b.n	80036a6 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe ff54 	bl	80024e4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800363c:	f7fe fdc4 	bl	80021c8 <HAL_GetTick>
 8003640:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003642:	e028      	b.n	8003696 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4618      	mov	r0, r3
 800364a:	f7fe ff73 	bl	8002534 <LL_ADC_IsEnabled>
 800364e:	4603      	mov	r3, r0
 8003650:	2b00      	cmp	r3, #0
 8003652:	d104      	bne.n	800365e <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4618      	mov	r0, r3
 800365a:	f7fe ff43 	bl	80024e4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800365e:	f7fe fdb3 	bl	80021c8 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d914      	bls.n	8003696 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b01      	cmp	r3, #1
 8003678:	d00d      	beq.n	8003696 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367e:	f043 0210 	orr.w	r2, r3, #16
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003692:	2301      	movs	r3, #1
 8003694:	e007      	b.n	80036a6 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d1cf      	bne.n	8003644 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3710      	adds	r7, #16
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	8000003f 	.word	0x8000003f

080036b4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b084      	sub	sp, #16
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4618      	mov	r0, r3
 80036c2:	f7fe ff4a 	bl	800255a <LL_ADC_IsDisableOngoing>
 80036c6:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fe ff31 	bl	8002534 <LL_ADC_IsEnabled>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d047      	beq.n	8003768 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d144      	bne.n	8003768 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	f003 030d 	and.w	r3, r3, #13
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d10c      	bne.n	8003706 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4618      	mov	r0, r3
 80036f2:	f7fe ff0b 	bl	800250c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	2203      	movs	r2, #3
 80036fc:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 80036fe:	f7fe fd63 	bl	80021c8 <HAL_GetTick>
 8003702:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003704:	e029      	b.n	800375a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800370a:	f043 0210 	orr.w	r2, r3, #16
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003716:	f043 0201 	orr.w	r2, r3, #1
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e023      	b.n	800376a <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003722:	f7fe fd51 	bl	80021c8 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d914      	bls.n	800375a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00d      	beq.n	800375a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003742:	f043 0210 	orr.w	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e007      	b.n	800376a <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	689b      	ldr	r3, [r3, #8]
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1dc      	bne.n	8003722 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}

08003772 <LL_ADC_IsEnabled>:
{
 8003772:	b480      	push	{r7}
 8003774:	b083      	sub	sp, #12
 8003776:	af00      	add	r7, sp, #0
 8003778:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f003 0301 	and.w	r3, r3, #1
 8003782:	2b01      	cmp	r3, #1
 8003784:	d101      	bne.n	800378a <LL_ADC_IsEnabled+0x18>
 8003786:	2301      	movs	r3, #1
 8003788:	e000      	b.n	800378c <LL_ADC_IsEnabled+0x1a>
 800378a:	2300      	movs	r3, #0
}
 800378c:	4618      	mov	r0, r3
 800378e:	370c      	adds	r7, #12
 8003790:	46bd      	mov	sp, r7
 8003792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003796:	4770      	bx	lr

08003798 <LL_ADC_REG_IsConversionOngoing>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b04      	cmp	r3, #4
 80037aa:	d101      	bne.n	80037b0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80037ac:	2301      	movs	r3, #1
 80037ae:	e000      	b.n	80037b2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037bc:	4770      	bx	lr
	...

080037c0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80037c0:	b590      	push	{r4, r7, lr}
 80037c2:	b09f      	sub	sp, #124	@ 0x7c
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80037ca:	2300      	movs	r3, #0
 80037cc:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d101      	bne.n	80037de <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80037da:	2302      	movs	r3, #2
 80037dc:	e093      	b.n	8003906 <HAL_ADCEx_MultiModeConfigChannel+0x146>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80037e6:	2300      	movs	r3, #0
 80037e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80037ea:	2300      	movs	r3, #0
 80037ec:	663b      	str	r3, [r7, #96]	@ 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a47      	ldr	r2, [pc, #284]	@ (8003910 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d102      	bne.n	80037fe <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80037f8:	4b46      	ldr	r3, [pc, #280]	@ (8003914 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80037fa:	60bb      	str	r3, [r7, #8]
 80037fc:	e001      	b.n	8003802 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d10b      	bne.n	8003820 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800380c:	f043 0220 	orr.w	r2, r3, #32
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e072      	b.n	8003906 <HAL_ADCEx_MultiModeConfigChannel+0x146>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	4618      	mov	r0, r3
 8003824:	f7ff ffb8 	bl	8003798 <LL_ADC_REG_IsConversionOngoing>
 8003828:	6738      	str	r0, [r7, #112]	@ 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff ffb2 	bl	8003798 <LL_ADC_REG_IsConversionOngoing>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d154      	bne.n	80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800383a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800383c:	2b00      	cmp	r3, #0
 800383e:	d151      	bne.n	80038e4 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003840:	4b35      	ldr	r3, [pc, #212]	@ (8003918 <HAL_ADCEx_MultiModeConfigChannel+0x158>)
 8003842:	66fb      	str	r3, [r7, #108]	@ 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d02c      	beq.n	80038a6 <HAL_ADCEx_MultiModeConfigChannel+0xe6>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 800384c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800385e:	035b      	lsls	r3, r3, #13
 8003860:	430b      	orrs	r3, r1
 8003862:	431a      	orrs	r2, r3
 8003864:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003866:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003868:	4829      	ldr	r0, [pc, #164]	@ (8003910 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 800386a:	f7ff ff82 	bl	8003772 <LL_ADC_IsEnabled>
 800386e:	4604      	mov	r4, r0
 8003870:	4828      	ldr	r0, [pc, #160]	@ (8003914 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 8003872:	f7ff ff7e 	bl	8003772 <LL_ADC_IsEnabled>
 8003876:	4603      	mov	r3, r0
 8003878:	431c      	orrs	r4, r3
 800387a:	4828      	ldr	r0, [pc, #160]	@ (800391c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 800387c:	f7ff ff79 	bl	8003772 <LL_ADC_IsEnabled>
 8003880:	4603      	mov	r3, r0
 8003882:	4323      	orrs	r3, r4
 8003884:	2b00      	cmp	r3, #0
 8003886:	d137      	bne.n	80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003888:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003890:	f023 030f 	bic.w	r3, r3, #15
 8003894:	683a      	ldr	r2, [r7, #0]
 8003896:	6811      	ldr	r1, [r2, #0]
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	6892      	ldr	r2, [r2, #8]
 800389c:	430a      	orrs	r2, r1
 800389e:	431a      	orrs	r2, r3
 80038a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038a4:	e028      	b.n	80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80038a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80038ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80038b2:	4817      	ldr	r0, [pc, #92]	@ (8003910 <HAL_ADCEx_MultiModeConfigChannel+0x150>)
 80038b4:	f7ff ff5d 	bl	8003772 <LL_ADC_IsEnabled>
 80038b8:	4604      	mov	r4, r0
 80038ba:	4816      	ldr	r0, [pc, #88]	@ (8003914 <HAL_ADCEx_MultiModeConfigChannel+0x154>)
 80038bc:	f7ff ff59 	bl	8003772 <LL_ADC_IsEnabled>
 80038c0:	4603      	mov	r3, r0
 80038c2:	431c      	orrs	r4, r3
 80038c4:	4815      	ldr	r0, [pc, #84]	@ (800391c <HAL_ADCEx_MultiModeConfigChannel+0x15c>)
 80038c6:	f7ff ff54 	bl	8003772 <LL_ADC_IsEnabled>
 80038ca:	4603      	mov	r3, r0
 80038cc:	4323      	orrs	r3, r4
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d112      	bne.n	80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80038d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80038d4:	689b      	ldr	r3, [r3, #8]
 80038d6:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80038da:	f023 030f 	bic.w	r3, r3, #15
 80038de:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80038e0:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038e2:	e009      	b.n	80038f8 <HAL_ADCEx_MultiModeConfigChannel+0x138>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038e8:	f043 0220 	orr.w	r2, r3, #32
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
 80038f6:	e000      	b.n	80038fa <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80038f8:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003902:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
}
 8003906:	4618      	mov	r0, r3
 8003908:	377c      	adds	r7, #124	@ 0x7c
 800390a:	46bd      	mov	sp, r7
 800390c:	bd90      	pop	{r4, r7, pc}
 800390e:	bf00      	nop
 8003910:	50040000 	.word	0x50040000
 8003914:	50040100 	.word	0x50040100
 8003918:	50040300 	.word	0x50040300
 800391c:	50040200 	.word	0x50040200

08003920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003920:	b480      	push	{r7}
 8003922:	b085      	sub	sp, #20
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f003 0307 	and.w	r3, r3, #7
 800392e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003930:	4b0c      	ldr	r3, [pc, #48]	@ (8003964 <__NVIC_SetPriorityGrouping+0x44>)
 8003932:	68db      	ldr	r3, [r3, #12]
 8003934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800393c:	4013      	ands	r3, r2
 800393e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800394c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003952:	4a04      	ldr	r2, [pc, #16]	@ (8003964 <__NVIC_SetPriorityGrouping+0x44>)
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	60d3      	str	r3, [r2, #12]
}
 8003958:	bf00      	nop
 800395a:	3714      	adds	r7, #20
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr
 8003964:	e000ed00 	.word	0xe000ed00

08003968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800396c:	4b04      	ldr	r3, [pc, #16]	@ (8003980 <__NVIC_GetPriorityGrouping+0x18>)
 800396e:	68db      	ldr	r3, [r3, #12]
 8003970:	0a1b      	lsrs	r3, r3, #8
 8003972:	f003 0307 	and.w	r3, r3, #7
}
 8003976:	4618      	mov	r0, r3
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000ed00 	.word	0xe000ed00

08003984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	4603      	mov	r3, r0
 800398c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800398e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003992:	2b00      	cmp	r3, #0
 8003994:	db0b      	blt.n	80039ae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003996:	79fb      	ldrb	r3, [r7, #7]
 8003998:	f003 021f 	and.w	r2, r3, #31
 800399c:	4907      	ldr	r1, [pc, #28]	@ (80039bc <__NVIC_EnableIRQ+0x38>)
 800399e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039a2:	095b      	lsrs	r3, r3, #5
 80039a4:	2001      	movs	r0, #1
 80039a6:	fa00 f202 	lsl.w	r2, r0, r2
 80039aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80039ae:	bf00      	nop
 80039b0:	370c      	adds	r7, #12
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	e000e100 	.word	0xe000e100

080039c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b083      	sub	sp, #12
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4603      	mov	r3, r0
 80039c8:	6039      	str	r1, [r7, #0]
 80039ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	db0a      	blt.n	80039ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	490c      	ldr	r1, [pc, #48]	@ (8003a0c <__NVIC_SetPriority+0x4c>)
 80039da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039de:	0112      	lsls	r2, r2, #4
 80039e0:	b2d2      	uxtb	r2, r2
 80039e2:	440b      	add	r3, r1
 80039e4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039e8:	e00a      	b.n	8003a00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	4908      	ldr	r1, [pc, #32]	@ (8003a10 <__NVIC_SetPriority+0x50>)
 80039f0:	79fb      	ldrb	r3, [r7, #7]
 80039f2:	f003 030f 	and.w	r3, r3, #15
 80039f6:	3b04      	subs	r3, #4
 80039f8:	0112      	lsls	r2, r2, #4
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	440b      	add	r3, r1
 80039fe:	761a      	strb	r2, [r3, #24]
}
 8003a00:	bf00      	nop
 8003a02:	370c      	adds	r7, #12
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr
 8003a0c:	e000e100 	.word	0xe000e100
 8003a10:	e000ed00 	.word	0xe000ed00

08003a14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b089      	sub	sp, #36	@ 0x24
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f003 0307 	and.w	r3, r3, #7
 8003a26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	f1c3 0307 	rsb	r3, r3, #7
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	bf28      	it	cs
 8003a32:	2304      	movcs	r3, #4
 8003a34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	3304      	adds	r3, #4
 8003a3a:	2b06      	cmp	r3, #6
 8003a3c:	d902      	bls.n	8003a44 <NVIC_EncodePriority+0x30>
 8003a3e:	69fb      	ldr	r3, [r7, #28]
 8003a40:	3b03      	subs	r3, #3
 8003a42:	e000      	b.n	8003a46 <NVIC_EncodePriority+0x32>
 8003a44:	2300      	movs	r3, #0
 8003a46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a48:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a52:	43da      	mvns	r2, r3
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	401a      	ands	r2, r3
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a5c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003a60:	697b      	ldr	r3, [r7, #20]
 8003a62:	fa01 f303 	lsl.w	r3, r1, r3
 8003a66:	43d9      	mvns	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a6c:	4313      	orrs	r3, r2
         );
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3724      	adds	r7, #36	@ 0x24
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a7a:	b580      	push	{r7, lr}
 8003a7c:	b082      	sub	sp, #8
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a82:	6878      	ldr	r0, [r7, #4]
 8003a84:	f7ff ff4c 	bl	8003920 <__NVIC_SetPriorityGrouping>
}
 8003a88:	bf00      	nop
 8003a8a:	3708      	adds	r7, #8
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	bd80      	pop	{r7, pc}

08003a90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b086      	sub	sp, #24
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	4603      	mov	r3, r0
 8003a98:	60b9      	str	r1, [r7, #8]
 8003a9a:	607a      	str	r2, [r7, #4]
 8003a9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa2:	f7ff ff61 	bl	8003968 <__NVIC_GetPriorityGrouping>
 8003aa6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	68b9      	ldr	r1, [r7, #8]
 8003aac:	6978      	ldr	r0, [r7, #20]
 8003aae:	f7ff ffb1 	bl	8003a14 <NVIC_EncodePriority>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ab8:	4611      	mov	r1, r2
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7ff ff80 	bl	80039c0 <__NVIC_SetPriority>
}
 8003ac0:	bf00      	nop
 8003ac2:	3718      	adds	r7, #24
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	bd80      	pop	{r7, pc}

08003ac8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	4603      	mov	r3, r0
 8003ad0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ff54 	bl	8003984 <__NVIC_EnableIRQ>
}
 8003adc:	bf00      	nop
 8003ade:	3708      	adds	r7, #8
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b087      	sub	sp, #28
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003af2:	e17f      	b.n	8003df4 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	2101      	movs	r1, #1
 8003afa:	697b      	ldr	r3, [r7, #20]
 8003afc:	fa01 f303 	lsl.w	r3, r1, r3
 8003b00:	4013      	ands	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	f000 8171 	beq.w	8003dee <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0303 	and.w	r3, r3, #3
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d005      	beq.n	8003b24 <HAL_GPIO_Init+0x40>
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f003 0303 	and.w	r3, r3, #3
 8003b20:	2b02      	cmp	r3, #2
 8003b22:	d130      	bne.n	8003b86 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003b2a:	697b      	ldr	r3, [r7, #20]
 8003b2c:	005b      	lsls	r3, r3, #1
 8003b2e:	2203      	movs	r2, #3
 8003b30:	fa02 f303 	lsl.w	r3, r2, r3
 8003b34:	43db      	mvns	r3, r3
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4013      	ands	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	68da      	ldr	r2, [r3, #12]
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	005b      	lsls	r3, r3, #1
 8003b44:	fa02 f303 	lsl.w	r3, r2, r3
 8003b48:	693a      	ldr	r2, [r7, #16]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	693a      	ldr	r2, [r7, #16]
 8003b52:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003b5a:	2201      	movs	r2, #1
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b62:	43db      	mvns	r3, r3
 8003b64:	693a      	ldr	r2, [r7, #16]
 8003b66:	4013      	ands	r3, r2
 8003b68:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	091b      	lsrs	r3, r3, #4
 8003b70:	f003 0201 	and.w	r2, r3, #1
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	fa02 f303 	lsl.w	r3, r2, r3
 8003b7a:	693a      	ldr	r2, [r7, #16]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f003 0303 	and.w	r3, r3, #3
 8003b8e:	2b03      	cmp	r3, #3
 8003b90:	d118      	bne.n	8003bc4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b96:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8003b98:	2201      	movs	r2, #1
 8003b9a:	697b      	ldr	r3, [r7, #20]
 8003b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba0:	43db      	mvns	r3, r3
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	08db      	lsrs	r3, r3, #3
 8003bae:	f003 0201 	and.w	r2, r3, #1
 8003bb2:	697b      	ldr	r3, [r7, #20]
 8003bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bb8:	693a      	ldr	r2, [r7, #16]
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	693a      	ldr	r2, [r7, #16]
 8003bc2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	f003 0303 	and.w	r3, r3, #3
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d017      	beq.n	8003c00 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	68db      	ldr	r3, [r3, #12]
 8003bd4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003bd6:	697b      	ldr	r3, [r7, #20]
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	2203      	movs	r2, #3
 8003bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8003be0:	43db      	mvns	r3, r3
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4013      	ands	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689a      	ldr	r2, [r3, #8]
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	005b      	lsls	r3, r3, #1
 8003bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	685b      	ldr	r3, [r3, #4]
 8003c04:	f003 0303 	and.w	r3, r3, #3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d123      	bne.n	8003c54 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	08da      	lsrs	r2, r3, #3
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	3208      	adds	r2, #8
 8003c14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c18:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f003 0307 	and.w	r3, r3, #7
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	220f      	movs	r2, #15
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	43db      	mvns	r3, r3
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	4013      	ands	r3, r2
 8003c2e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	691a      	ldr	r2, [r3, #16]
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	f003 0307 	and.w	r3, r3, #7
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	08da      	lsrs	r2, r3, #3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3208      	adds	r2, #8
 8003c4e:	6939      	ldr	r1, [r7, #16]
 8003c50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	005b      	lsls	r3, r3, #1
 8003c5e:	2203      	movs	r2, #3
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	43db      	mvns	r3, r3
 8003c66:	693a      	ldr	r2, [r7, #16]
 8003c68:	4013      	ands	r3, r2
 8003c6a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f003 0203 	and.w	r2, r3, #3
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	005b      	lsls	r3, r3, #1
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	693a      	ldr	r2, [r7, #16]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	693a      	ldr	r2, [r7, #16]
 8003c86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	f000 80ac 	beq.w	8003dee <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c96:	4b5f      	ldr	r3, [pc, #380]	@ (8003e14 <HAL_GPIO_Init+0x330>)
 8003c98:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003c9a:	4a5e      	ldr	r2, [pc, #376]	@ (8003e14 <HAL_GPIO_Init+0x330>)
 8003c9c:	f043 0301 	orr.w	r3, r3, #1
 8003ca0:	6613      	str	r3, [r2, #96]	@ 0x60
 8003ca2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e14 <HAL_GPIO_Init+0x330>)
 8003ca4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ca6:	f003 0301 	and.w	r3, r3, #1
 8003caa:	60bb      	str	r3, [r7, #8]
 8003cac:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003cae:	4a5a      	ldr	r2, [pc, #360]	@ (8003e18 <HAL_GPIO_Init+0x334>)
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	089b      	lsrs	r3, r3, #2
 8003cb4:	3302      	adds	r3, #2
 8003cb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f003 0303 	and.w	r3, r3, #3
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	220f      	movs	r2, #15
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	43db      	mvns	r3, r3
 8003ccc:	693a      	ldr	r2, [r7, #16]
 8003cce:	4013      	ands	r3, r2
 8003cd0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003cd8:	d025      	beq.n	8003d26 <HAL_GPIO_Init+0x242>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a4f      	ldr	r2, [pc, #316]	@ (8003e1c <HAL_GPIO_Init+0x338>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d01f      	beq.n	8003d22 <HAL_GPIO_Init+0x23e>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a4e      	ldr	r2, [pc, #312]	@ (8003e20 <HAL_GPIO_Init+0x33c>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d019      	beq.n	8003d1e <HAL_GPIO_Init+0x23a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a4d      	ldr	r2, [pc, #308]	@ (8003e24 <HAL_GPIO_Init+0x340>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d013      	beq.n	8003d1a <HAL_GPIO_Init+0x236>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a4c      	ldr	r2, [pc, #304]	@ (8003e28 <HAL_GPIO_Init+0x344>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d00d      	beq.n	8003d16 <HAL_GPIO_Init+0x232>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a4b      	ldr	r2, [pc, #300]	@ (8003e2c <HAL_GPIO_Init+0x348>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d007      	beq.n	8003d12 <HAL_GPIO_Init+0x22e>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a4a      	ldr	r2, [pc, #296]	@ (8003e30 <HAL_GPIO_Init+0x34c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d101      	bne.n	8003d0e <HAL_GPIO_Init+0x22a>
 8003d0a:	2306      	movs	r3, #6
 8003d0c:	e00c      	b.n	8003d28 <HAL_GPIO_Init+0x244>
 8003d0e:	2307      	movs	r3, #7
 8003d10:	e00a      	b.n	8003d28 <HAL_GPIO_Init+0x244>
 8003d12:	2305      	movs	r3, #5
 8003d14:	e008      	b.n	8003d28 <HAL_GPIO_Init+0x244>
 8003d16:	2304      	movs	r3, #4
 8003d18:	e006      	b.n	8003d28 <HAL_GPIO_Init+0x244>
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e004      	b.n	8003d28 <HAL_GPIO_Init+0x244>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e002      	b.n	8003d28 <HAL_GPIO_Init+0x244>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <HAL_GPIO_Init+0x244>
 8003d26:	2300      	movs	r3, #0
 8003d28:	697a      	ldr	r2, [r7, #20]
 8003d2a:	f002 0203 	and.w	r2, r2, #3
 8003d2e:	0092      	lsls	r2, r2, #2
 8003d30:	4093      	lsls	r3, r2
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	4313      	orrs	r3, r2
 8003d36:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003d38:	4937      	ldr	r1, [pc, #220]	@ (8003e18 <HAL_GPIO_Init+0x334>)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	693a      	ldr	r2, [r7, #16]
 8003d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003d46:	4b3b      	ldr	r3, [pc, #236]	@ (8003e34 <HAL_GPIO_Init+0x350>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	43db      	mvns	r3, r3
 8003d50:	693a      	ldr	r2, [r7, #16]
 8003d52:	4013      	ands	r3, r2
 8003d54:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	685b      	ldr	r3, [r3, #4]
 8003d5a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8003d62:	693a      	ldr	r2, [r7, #16]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003d6a:	4a32      	ldr	r2, [pc, #200]	@ (8003e34 <HAL_GPIO_Init+0x350>)
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003d70:	4b30      	ldr	r3, [pc, #192]	@ (8003e34 <HAL_GPIO_Init+0x350>)
 8003d72:	68db      	ldr	r3, [r3, #12]
 8003d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	43db      	mvns	r3, r3
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d003      	beq.n	8003d94 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8003d8c:	693a      	ldr	r2, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003d94:	4a27      	ldr	r2, [pc, #156]	@ (8003e34 <HAL_GPIO_Init+0x350>)
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003d9a:	4b26      	ldr	r3, [pc, #152]	@ (8003e34 <HAL_GPIO_Init+0x350>)
 8003d9c:	685b      	ldr	r3, [r3, #4]
 8003d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	43db      	mvns	r3, r3
 8003da4:	693a      	ldr	r2, [r7, #16]
 8003da6:	4013      	ands	r3, r2
 8003da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003dbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003e34 <HAL_GPIO_Init+0x350>)
 8003dc0:	693b      	ldr	r3, [r7, #16]
 8003dc2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003dc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003e34 <HAL_GPIO_Init+0x350>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	693a      	ldr	r2, [r7, #16]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d003      	beq.n	8003de8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8003de0:	693a      	ldr	r2, [r7, #16]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003de8:	4a12      	ldr	r2, [pc, #72]	@ (8003e34 <HAL_GPIO_Init+0x350>)
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	3301      	adds	r3, #1
 8003df2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f47f ae78 	bne.w	8003af4 <HAL_GPIO_Init+0x10>
  }
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	371c      	adds	r7, #28
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e10:	4770      	bx	lr
 8003e12:	bf00      	nop
 8003e14:	40021000 	.word	0x40021000
 8003e18:	40010000 	.word	0x40010000
 8003e1c:	48000400 	.word	0x48000400
 8003e20:	48000800 	.word	0x48000800
 8003e24:	48000c00 	.word	0x48000c00
 8003e28:	48001000 	.word	0x48001000
 8003e2c:	48001400 	.word	0x48001400
 8003e30:	48001800 	.word	0x48001800
 8003e34:	40010400 	.word	0x40010400

08003e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
 8003e40:	460b      	mov	r3, r1
 8003e42:	807b      	strh	r3, [r7, #2]
 8003e44:	4613      	mov	r3, r2
 8003e46:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e48:	787b      	ldrb	r3, [r7, #1]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d003      	beq.n	8003e56 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003e4e:	887a      	ldrh	r2, [r7, #2]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003e54:	e002      	b.n	8003e5c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003e56:	887a      	ldrh	r2, [r7, #2]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003e5c:	bf00      	nop
 8003e5e:	370c      	adds	r7, #12
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b082      	sub	sp, #8
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d101      	bne.n	8003e7a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e081      	b.n	8003f7e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e80:	b2db      	uxtb	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d106      	bne.n	8003e94 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f7fd ff9e 	bl	8001dd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2224      	movs	r2, #36	@ 0x24
 8003e98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f022 0201 	bic.w	r2, r2, #1
 8003eaa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003eb8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689a      	ldr	r2, [r3, #8]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ec8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	d107      	bne.n	8003ee2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ede:	609a      	str	r2, [r3, #8]
 8003ee0:	e006      	b.n	8003ef0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003eee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d104      	bne.n	8003f02 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003f00:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	6812      	ldr	r2, [r2, #0]
 8003f0c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f10:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f14:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	68da      	ldr	r2, [r3, #12]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f24:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	699b      	ldr	r3, [r3, #24]
 8003f36:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	430a      	orrs	r2, r1
 8003f3e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	69d9      	ldr	r1, [r3, #28]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1a      	ldr	r2, [r3, #32]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f042 0201 	orr.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3708      	adds	r7, #8
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b088      	sub	sp, #32
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	461a      	mov	r2, r3
 8003f94:	460b      	mov	r3, r1
 8003f96:	817b      	strh	r3, [r7, #10]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	2b20      	cmp	r3, #32
 8003fa6:	f040 80da 	bne.w	800415e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d101      	bne.n	8003fb8 <HAL_I2C_Master_Transmit+0x30>
 8003fb4:	2302      	movs	r3, #2
 8003fb6:	e0d3      	b.n	8004160 <HAL_I2C_Master_Transmit+0x1d8>
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	2201      	movs	r2, #1
 8003fbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003fc0:	f7fe f902 	bl	80021c8 <HAL_GetTick>
 8003fc4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	2319      	movs	r3, #25
 8003fcc:	2201      	movs	r2, #1
 8003fce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f000 f9f7 	bl	80043c6 <I2C_WaitOnFlagUntilTimeout>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d001      	beq.n	8003fe2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e0be      	b.n	8004160 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2221      	movs	r2, #33	@ 0x21
 8003fe6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2210      	movs	r2, #16
 8003fee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	893a      	ldrh	r2, [r7, #8]
 8004002:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800400e:	b29b      	uxth	r3, r3
 8004010:	2bff      	cmp	r3, #255	@ 0xff
 8004012:	d90e      	bls.n	8004032 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	22ff      	movs	r2, #255	@ 0xff
 8004018:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800401e:	b2da      	uxtb	r2, r3
 8004020:	8979      	ldrh	r1, [r7, #10]
 8004022:	4b51      	ldr	r3, [pc, #324]	@ (8004168 <HAL_I2C_Master_Transmit+0x1e0>)
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800402a:	68f8      	ldr	r0, [r7, #12]
 800402c:	f000 fb74 	bl	8004718 <I2C_TransferConfig>
 8004030:	e06c      	b.n	800410c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004036:	b29a      	uxth	r2, r3
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004040:	b2da      	uxtb	r2, r3
 8004042:	8979      	ldrh	r1, [r7, #10]
 8004044:	4b48      	ldr	r3, [pc, #288]	@ (8004168 <HAL_I2C_Master_Transmit+0x1e0>)
 8004046:	9300      	str	r3, [sp, #0]
 8004048:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 fb63 	bl	8004718 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004052:	e05b      	b.n	800410c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	6a39      	ldr	r1, [r7, #32]
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 f9f4 	bl	8004446 <I2C_WaitOnTXISFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d001      	beq.n	8004068 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e07b      	b.n	8004160 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800406c:	781a      	ldrb	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004078:	1c5a      	adds	r2, r3, #1
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004082:	b29b      	uxth	r3, r3
 8004084:	3b01      	subs	r3, #1
 8004086:	b29a      	uxth	r2, r3
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004090:	3b01      	subs	r3, #1
 8004092:	b29a      	uxth	r2, r3
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800409c:	b29b      	uxth	r3, r3
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d034      	beq.n	800410c <HAL_I2C_Master_Transmit+0x184>
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d130      	bne.n	800410c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	9300      	str	r3, [sp, #0]
 80040ae:	6a3b      	ldr	r3, [r7, #32]
 80040b0:	2200      	movs	r2, #0
 80040b2:	2180      	movs	r1, #128	@ 0x80
 80040b4:	68f8      	ldr	r0, [r7, #12]
 80040b6:	f000 f986 	bl	80043c6 <I2C_WaitOnFlagUntilTimeout>
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d001      	beq.n	80040c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e04d      	b.n	8004160 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040c8:	b29b      	uxth	r3, r3
 80040ca:	2bff      	cmp	r3, #255	@ 0xff
 80040cc:	d90e      	bls.n	80040ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	22ff      	movs	r2, #255	@ 0xff
 80040d2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	8979      	ldrh	r1, [r7, #10]
 80040dc:	2300      	movs	r3, #0
 80040de:	9300      	str	r3, [sp, #0]
 80040e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80040e4:	68f8      	ldr	r0, [r7, #12]
 80040e6:	f000 fb17 	bl	8004718 <I2C_TransferConfig>
 80040ea:	e00f      	b.n	800410c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040f0:	b29a      	uxth	r2, r3
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040fa:	b2da      	uxtb	r2, r3
 80040fc:	8979      	ldrh	r1, [r7, #10]
 80040fe:	2300      	movs	r3, #0
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f000 fb06 	bl	8004718 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004110:	b29b      	uxth	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d19e      	bne.n	8004054 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004116:	697a      	ldr	r2, [r7, #20]
 8004118:	6a39      	ldr	r1, [r7, #32]
 800411a:	68f8      	ldr	r0, [r7, #12]
 800411c:	f000 f9d3 	bl	80044c6 <I2C_WaitOnSTOPFlagUntilTimeout>
 8004120:	4603      	mov	r3, r0
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8004126:	2301      	movs	r3, #1
 8004128:	e01a      	b.n	8004160 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2220      	movs	r2, #32
 8004130:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	6859      	ldr	r1, [r3, #4]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4b0b      	ldr	r3, [pc, #44]	@ (800416c <HAL_I2C_Master_Transmit+0x1e4>)
 800413e:	400b      	ands	r3, r1
 8004140:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2220      	movs	r2, #32
 8004146:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800415a:	2300      	movs	r3, #0
 800415c:	e000      	b.n	8004160 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800415e:	2302      	movs	r3, #2
  }
}
 8004160:	4618      	mov	r0, r3
 8004162:	3718      	adds	r7, #24
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	80002000 	.word	0x80002000
 800416c:	fe00e800 	.word	0xfe00e800

08004170 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b08a      	sub	sp, #40	@ 0x28
 8004174:	af02      	add	r7, sp, #8
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	607a      	str	r2, [r7, #4]
 800417a:	603b      	str	r3, [r7, #0]
 800417c:	460b      	mov	r3, r1
 800417e:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8004180:	2300      	movs	r3, #0
 8004182:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b20      	cmp	r3, #32
 800418e:	f040 80f1 	bne.w	8004374 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800419c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041a0:	d101      	bne.n	80041a6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80041a2:	2302      	movs	r3, #2
 80041a4:	e0e7      	b.n	8004376 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d101      	bne.n	80041b4 <HAL_I2C_IsDeviceReady+0x44>
 80041b0:	2302      	movs	r3, #2
 80041b2:	e0e0      	b.n	8004376 <HAL_I2C_IsDeviceReady+0x206>
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2224      	movs	r2, #36	@ 0x24
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2200      	movs	r2, #0
 80041c8:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	68db      	ldr	r3, [r3, #12]
 80041ce:	2b01      	cmp	r3, #1
 80041d0:	d107      	bne.n	80041e2 <HAL_I2C_IsDeviceReady+0x72>
 80041d2:	897b      	ldrh	r3, [r7, #10]
 80041d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80041dc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80041e0:	e004      	b.n	80041ec <HAL_I2C_IsDeviceReady+0x7c>
 80041e2:	897b      	ldrh	r3, [r7, #10]
 80041e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80041e8:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 80041ec:	68fa      	ldr	r2, [r7, #12]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80041f2:	f7fd ffe9 	bl	80021c8 <HAL_GetTick>
 80041f6:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	699b      	ldr	r3, [r3, #24]
 80041fe:	f003 0320 	and.w	r3, r3, #32
 8004202:	2b20      	cmp	r3, #32
 8004204:	bf0c      	ite	eq
 8004206:	2301      	moveq	r3, #1
 8004208:	2300      	movne	r3, #0
 800420a:	b2db      	uxtb	r3, r3
 800420c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	699b      	ldr	r3, [r3, #24]
 8004214:	f003 0310 	and.w	r3, r3, #16
 8004218:	2b10      	cmp	r3, #16
 800421a:	bf0c      	ite	eq
 800421c:	2301      	moveq	r3, #1
 800421e:	2300      	movne	r3, #0
 8004220:	b2db      	uxtb	r3, r3
 8004222:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004224:	e034      	b.n	8004290 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800422c:	d01a      	beq.n	8004264 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800422e:	f7fd ffcb 	bl	80021c8 <HAL_GetTick>
 8004232:	4602      	mov	r2, r0
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	1ad3      	subs	r3, r2, r3
 8004238:	683a      	ldr	r2, [r7, #0]
 800423a:	429a      	cmp	r2, r3
 800423c:	d302      	bcc.n	8004244 <HAL_I2C_IsDeviceReady+0xd4>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d10f      	bne.n	8004264 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2220      	movs	r2, #32
 8004248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004250:	f043 0220 	orr.w	r2, r3, #32
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	2200      	movs	r2, #0
 800425c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8004260:	2301      	movs	r3, #1
 8004262:	e088      	b.n	8004376 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b20      	cmp	r3, #32
 8004270:	bf0c      	ite	eq
 8004272:	2301      	moveq	r3, #1
 8004274:	2300      	movne	r3, #0
 8004276:	b2db      	uxtb	r3, r3
 8004278:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	699b      	ldr	r3, [r3, #24]
 8004280:	f003 0310 	and.w	r3, r3, #16
 8004284:	2b10      	cmp	r3, #16
 8004286:	bf0c      	ite	eq
 8004288:	2301      	moveq	r3, #1
 800428a:	2300      	movne	r3, #0
 800428c:	b2db      	uxtb	r3, r3
 800428e:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8004290:	7ffb      	ldrb	r3, [r7, #31]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d102      	bne.n	800429c <HAL_I2C_IsDeviceReady+0x12c>
 8004296:	7fbb      	ldrb	r3, [r7, #30]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0c4      	beq.n	8004226 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	699b      	ldr	r3, [r3, #24]
 80042a2:	f003 0310 	and.w	r3, r3, #16
 80042a6:	2b10      	cmp	r3, #16
 80042a8:	d01a      	beq.n	80042e0 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	2200      	movs	r2, #0
 80042b2:	2120      	movs	r1, #32
 80042b4:	68f8      	ldr	r0, [r7, #12]
 80042b6:	f000 f886 	bl	80043c6 <I2C_WaitOnFlagUntilTimeout>
 80042ba:	4603      	mov	r3, r0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d001      	beq.n	80042c4 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e058      	b.n	8004376 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2220      	movs	r2, #32
 80042ca:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2220      	movs	r2, #32
 80042d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e04a      	b.n	8004376 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	9300      	str	r3, [sp, #0]
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	2200      	movs	r2, #0
 80042e8:	2120      	movs	r1, #32
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f86b 	bl	80043c6 <I2C_WaitOnFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e03d      	b.n	8004376 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	2210      	movs	r2, #16
 8004300:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	2220      	movs	r2, #32
 8004308:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	687a      	ldr	r2, [r7, #4]
 800430e:	429a      	cmp	r2, r3
 8004310:	d118      	bne.n	8004344 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	685a      	ldr	r2, [r3, #4]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004320:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	9300      	str	r3, [sp, #0]
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	2200      	movs	r2, #0
 800432a:	2120      	movs	r1, #32
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f84a 	bl	80043c6 <I2C_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d001      	beq.n	800433c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e01c      	b.n	8004376 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2220      	movs	r2, #32
 8004342:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	3301      	adds	r3, #1
 8004348:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	429a      	cmp	r2, r3
 8004350:	f63f af3b 	bhi.w	80041ca <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2220      	movs	r2, #32
 8004358:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004360:	f043 0220 	orr.w	r2, r3, #32
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8004374:	2302      	movs	r3, #2
  }
}
 8004376:	4618      	mov	r0, r3
 8004378:	3720      	adds	r7, #32
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800437e:	b480      	push	{r7}
 8004380:	b083      	sub	sp, #12
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b02      	cmp	r3, #2
 8004392:	d103      	bne.n	800439c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2200      	movs	r2, #0
 800439a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d007      	beq.n	80043ba <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	699a      	ldr	r2, [r3, #24]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f042 0201 	orr.w	r2, r2, #1
 80043b8:	619a      	str	r2, [r3, #24]
  }
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr

080043c6 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b084      	sub	sp, #16
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	60f8      	str	r0, [r7, #12]
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	603b      	str	r3, [r7, #0]
 80043d2:	4613      	mov	r3, r2
 80043d4:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043d6:	e022      	b.n	800441e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80043de:	d01e      	beq.n	800441e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043e0:	f7fd fef2 	bl	80021c8 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	683a      	ldr	r2, [r7, #0]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d113      	bne.n	800441e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fa:	f043 0220 	orr.w	r2, r3, #32
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2220      	movs	r2, #32
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2200      	movs	r2, #0
 800440e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e00f      	b.n	800443e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	699a      	ldr	r2, [r3, #24]
 8004424:	68bb      	ldr	r3, [r7, #8]
 8004426:	4013      	ands	r3, r2
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	429a      	cmp	r2, r3
 800442c:	bf0c      	ite	eq
 800442e:	2301      	moveq	r3, #1
 8004430:	2300      	movne	r3, #0
 8004432:	b2db      	uxtb	r3, r3
 8004434:	461a      	mov	r2, r3
 8004436:	79fb      	ldrb	r3, [r7, #7]
 8004438:	429a      	cmp	r2, r3
 800443a:	d0cd      	beq.n	80043d8 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3710      	adds	r7, #16
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004446:	b580      	push	{r7, lr}
 8004448:	b084      	sub	sp, #16
 800444a:	af00      	add	r7, sp, #0
 800444c:	60f8      	str	r0, [r7, #12]
 800444e:	60b9      	str	r1, [r7, #8]
 8004450:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004452:	e02c      	b.n	80044ae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	68f8      	ldr	r0, [r7, #12]
 800445a:	f000 f871 	bl	8004540 <I2C_IsErrorOccurred>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d001      	beq.n	8004468 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e02a      	b.n	80044be <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004468:	68bb      	ldr	r3, [r7, #8]
 800446a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800446e:	d01e      	beq.n	80044ae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004470:	f7fd feaa 	bl	80021c8 <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	429a      	cmp	r2, r3
 800447e:	d302      	bcc.n	8004486 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004480:	68bb      	ldr	r3, [r7, #8]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d113      	bne.n	80044ae <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800448a:	f043 0220 	orr.w	r2, r3, #32
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2220      	movs	r2, #32
 8004496:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e007      	b.n	80044be <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	699b      	ldr	r3, [r3, #24]
 80044b4:	f003 0302 	and.w	r3, r3, #2
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d1cb      	bne.n	8004454 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044bc:	2300      	movs	r3, #0
}
 80044be:	4618      	mov	r0, r3
 80044c0:	3710      	adds	r7, #16
 80044c2:	46bd      	mov	sp, r7
 80044c4:	bd80      	pop	{r7, pc}

080044c6 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80044c6:	b580      	push	{r7, lr}
 80044c8:	b084      	sub	sp, #16
 80044ca:	af00      	add	r7, sp, #0
 80044cc:	60f8      	str	r0, [r7, #12]
 80044ce:	60b9      	str	r1, [r7, #8]
 80044d0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044d2:	e028      	b.n	8004526 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	68b9      	ldr	r1, [r7, #8]
 80044d8:	68f8      	ldr	r0, [r7, #12]
 80044da:	f000 f831 	bl	8004540 <I2C_IsErrorOccurred>
 80044de:	4603      	mov	r3, r0
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d001      	beq.n	80044e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e026      	b.n	8004536 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e8:	f7fd fe6e 	bl	80021c8 <HAL_GetTick>
 80044ec:	4602      	mov	r2, r0
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	1ad3      	subs	r3, r2, r3
 80044f2:	68ba      	ldr	r2, [r7, #8]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d302      	bcc.n	80044fe <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d113      	bne.n	8004526 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004502:	f043 0220 	orr.w	r2, r3, #32
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	645a      	str	r2, [r3, #68]	@ 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2220      	movs	r2, #32
 800450e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e007      	b.n	8004536 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	699b      	ldr	r3, [r3, #24]
 800452c:	f003 0320 	and.w	r3, r3, #32
 8004530:	2b20      	cmp	r3, #32
 8004532:	d1cf      	bne.n	80044d4 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
	...

08004540 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b08a      	sub	sp, #40	@ 0x28
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800454c:	2300      	movs	r3, #0
 800454e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	699b      	ldr	r3, [r3, #24]
 8004558:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800455a:	2300      	movs	r3, #0
 800455c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004562:	69bb      	ldr	r3, [r7, #24]
 8004564:	f003 0310 	and.w	r3, r3, #16
 8004568:	2b00      	cmp	r3, #0
 800456a:	d075      	beq.n	8004658 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2210      	movs	r2, #16
 8004572:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004574:	e056      	b.n	8004624 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800457c:	d052      	beq.n	8004624 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800457e:	f7fd fe23 	bl	80021c8 <HAL_GetTick>
 8004582:	4602      	mov	r2, r0
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	1ad3      	subs	r3, r2, r3
 8004588:	68ba      	ldr	r2, [r7, #8]
 800458a:	429a      	cmp	r2, r3
 800458c:	d302      	bcc.n	8004594 <I2C_IsErrorOccurred+0x54>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d147      	bne.n	8004624 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	685b      	ldr	r3, [r3, #4]
 800459a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800459e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045a6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	699b      	ldr	r3, [r3, #24]
 80045ae:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80045b2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80045b6:	d12e      	bne.n	8004616 <I2C_IsErrorOccurred+0xd6>
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80045be:	d02a      	beq.n	8004616 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80045c0:	7cfb      	ldrb	r3, [r7, #19]
 80045c2:	2b20      	cmp	r3, #32
 80045c4:	d027      	beq.n	8004616 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80045d4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80045d6:	f7fd fdf7 	bl	80021c8 <HAL_GetTick>
 80045da:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045dc:	e01b      	b.n	8004616 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80045de:	f7fd fdf3 	bl	80021c8 <HAL_GetTick>
 80045e2:	4602      	mov	r2, r0
 80045e4:	69fb      	ldr	r3, [r7, #28]
 80045e6:	1ad3      	subs	r3, r2, r3
 80045e8:	2b19      	cmp	r3, #25
 80045ea:	d914      	bls.n	8004616 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f0:	f043 0220 	orr.w	r2, r3, #32
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	645a      	str	r2, [r3, #68]	@ 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
              
              status = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	f003 0320 	and.w	r3, r3, #32
 8004620:	2b20      	cmp	r3, #32
 8004622:	d1dc      	bne.n	80045de <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	f003 0320 	and.w	r3, r3, #32
 800462e:	2b20      	cmp	r3, #32
 8004630:	d003      	beq.n	800463a <I2C_IsErrorOccurred+0xfa>
 8004632:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004636:	2b00      	cmp	r3, #0
 8004638:	d09d      	beq.n	8004576 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800463a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800463e:	2b00      	cmp	r3, #0
 8004640:	d103      	bne.n	800464a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	2220      	movs	r2, #32
 8004648:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800464a:	6a3b      	ldr	r3, [r7, #32]
 800464c:	f043 0304 	orr.w	r3, r3, #4
 8004650:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00b      	beq.n	8004682 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800466a:	6a3b      	ldr	r3, [r7, #32]
 800466c:	f043 0301 	orr.w	r3, r3, #1
 8004670:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800467a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800467c:	2301      	movs	r3, #1
 800467e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004682:	69bb      	ldr	r3, [r7, #24]
 8004684:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00b      	beq.n	80046a4 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800468c:	6a3b      	ldr	r3, [r7, #32]
 800468e:	f043 0308 	orr.w	r3, r3, #8
 8004692:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800469c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00b      	beq.n	80046c6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80046ae:	6a3b      	ldr	r3, [r7, #32]
 80046b0:	f043 0302 	orr.w	r3, r3, #2
 80046b4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046be:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80046c0:	2301      	movs	r3, #1
 80046c2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80046c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d01c      	beq.n	8004708 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80046ce:	68f8      	ldr	r0, [r7, #12]
 80046d0:	f7ff fe55 	bl	800437e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	6859      	ldr	r1, [r3, #4]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b0d      	ldr	r3, [pc, #52]	@ (8004714 <I2C_IsErrorOccurred+0x1d4>)
 80046e0:	400b      	ands	r3, r1
 80046e2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80046e8:	6a3b      	ldr	r3, [r7, #32]
 80046ea:	431a      	orrs	r2, r3
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8004708:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800470c:	4618      	mov	r0, r3
 800470e:	3728      	adds	r7, #40	@ 0x28
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	fe00e800 	.word	0xfe00e800

08004718 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004718:	b480      	push	{r7}
 800471a:	b087      	sub	sp, #28
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	607b      	str	r3, [r7, #4]
 8004722:	460b      	mov	r3, r1
 8004724:	817b      	strh	r3, [r7, #10]
 8004726:	4613      	mov	r3, r2
 8004728:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800472a:	897b      	ldrh	r3, [r7, #10]
 800472c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004730:	7a7b      	ldrb	r3, [r7, #9]
 8004732:	041b      	lsls	r3, r3, #16
 8004734:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004738:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800473e:	6a3b      	ldr	r3, [r7, #32]
 8004740:	4313      	orrs	r3, r2
 8004742:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004746:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	0d5b      	lsrs	r3, r3, #21
 8004752:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8004756:	4b08      	ldr	r3, [pc, #32]	@ (8004778 <I2C_TransferConfig+0x60>)
 8004758:	430b      	orrs	r3, r1
 800475a:	43db      	mvns	r3, r3
 800475c:	ea02 0103 	and.w	r1, r2, r3
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	697a      	ldr	r2, [r7, #20]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	03ff63ff 	.word	0x03ff63ff

0800477c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
 8004784:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800478c:	b2db      	uxtb	r3, r3
 800478e:	2b20      	cmp	r3, #32
 8004790:	d138      	bne.n	8004804 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004798:	2b01      	cmp	r3, #1
 800479a:	d101      	bne.n	80047a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800479c:	2302      	movs	r3, #2
 800479e:	e032      	b.n	8004806 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2224      	movs	r2, #36	@ 0x24
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 0201 	bic.w	r2, r2, #1
 80047be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80047ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	6819      	ldr	r1, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	683a      	ldr	r2, [r7, #0]
 80047dc:	430a      	orrs	r2, r1
 80047de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004800:	2300      	movs	r3, #0
 8004802:	e000      	b.n	8004806 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004804:	2302      	movs	r3, #2
  }
}
 8004806:	4618      	mov	r0, r3
 8004808:	370c      	adds	r7, #12
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr

08004812 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004812:	b480      	push	{r7}
 8004814:	b085      	sub	sp, #20
 8004816:	af00      	add	r7, sp, #0
 8004818:	6078      	str	r0, [r7, #4]
 800481a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004822:	b2db      	uxtb	r3, r3
 8004824:	2b20      	cmp	r3, #32
 8004826:	d139      	bne.n	800489c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800482e:	2b01      	cmp	r3, #1
 8004830:	d101      	bne.n	8004836 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004832:	2302      	movs	r3, #2
 8004834:	e033      	b.n	800489e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2201      	movs	r2, #1
 800483a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2224      	movs	r2, #36	@ 0x24
 8004842:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f022 0201 	bic.w	r2, r2, #1
 8004854:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004864:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	021b      	lsls	r3, r3, #8
 800486a:	68fa      	ldr	r2, [r7, #12]
 800486c:	4313      	orrs	r3, r2
 800486e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2220      	movs	r2, #32
 800488c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004898:	2300      	movs	r3, #0
 800489a:	e000      	b.n	800489e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800489c:	2302      	movs	r3, #2
  }
}
 800489e:	4618      	mov	r0, r3
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
	...

080048ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80048ac:	b480      	push	{r7}
 80048ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80048b0:	4b04      	ldr	r3, [pc, #16]	@ (80048c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	40007000 	.word	0x40007000

080048c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048d6:	d130      	bne.n	800493a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80048d8:	4b23      	ldr	r3, [pc, #140]	@ (8004968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80048e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80048e4:	d038      	beq.n	8004958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80048e6:	4b20      	ldr	r3, [pc, #128]	@ (8004968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80048ee:	4a1e      	ldr	r2, [pc, #120]	@ (8004968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80048f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80048f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80048f6:	4b1d      	ldr	r3, [pc, #116]	@ (800496c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2232      	movs	r2, #50	@ 0x32
 80048fc:	fb02 f303 	mul.w	r3, r2, r3
 8004900:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8004902:	fba2 2303 	umull	r2, r3, r2, r3
 8004906:	0c9b      	lsrs	r3, r3, #18
 8004908:	3301      	adds	r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800490c:	e002      	b.n	8004914 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	3b01      	subs	r3, #1
 8004912:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004914:	4b14      	ldr	r3, [pc, #80]	@ (8004968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800491c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004920:	d102      	bne.n	8004928 <HAL_PWREx_ControlVoltageScaling+0x60>
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d1f2      	bne.n	800490e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004928:	4b0f      	ldr	r3, [pc, #60]	@ (8004968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800492a:	695b      	ldr	r3, [r3, #20]
 800492c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004930:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004934:	d110      	bne.n	8004958 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8004936:	2303      	movs	r3, #3
 8004938:	e00f      	b.n	800495a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800493a:	4b0b      	ldr	r3, [pc, #44]	@ (8004968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004942:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004946:	d007      	beq.n	8004958 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004948:	4b07      	ldr	r3, [pc, #28]	@ (8004968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004950:	4a05      	ldr	r2, [pc, #20]	@ (8004968 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8004952:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004956:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40007000 	.word	0x40007000
 800496c:	20000008 	.word	0x20000008
 8004970:	431bde83 	.word	0x431bde83

08004974 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b088      	sub	sp, #32
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e3d8      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004986:	4b97      	ldr	r3, [pc, #604]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 030c 	and.w	r3, r3, #12
 800498e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004990:	4b94      	ldr	r3, [pc, #592]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	f003 0303 	and.w	r3, r3, #3
 8004998:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80e4 	beq.w	8004b70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80049a8:	69bb      	ldr	r3, [r7, #24]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d007      	beq.n	80049be <HAL_RCC_OscConfig+0x4a>
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	2b0c      	cmp	r3, #12
 80049b2:	f040 808b 	bne.w	8004acc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	f040 8087 	bne.w	8004acc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80049be:	4b89      	ldr	r3, [pc, #548]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0302 	and.w	r3, r3, #2
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d005      	beq.n	80049d6 <HAL_RCC_OscConfig+0x62>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	699b      	ldr	r3, [r3, #24]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e3b0      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1a      	ldr	r2, [r3, #32]
 80049da:	4b82      	ldr	r3, [pc, #520]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0308 	and.w	r3, r3, #8
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d004      	beq.n	80049f0 <HAL_RCC_OscConfig+0x7c>
 80049e6:	4b7f      	ldr	r3, [pc, #508]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049ee:	e005      	b.n	80049fc <HAL_RCC_OscConfig+0x88>
 80049f0:	4b7c      	ldr	r3, [pc, #496]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 80049f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80049f6:	091b      	lsrs	r3, r3, #4
 80049f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d223      	bcs.n	8004a48 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 fd75 	bl	80054f4 <RCC_SetFlashLatencyFromMSIRange>
 8004a0a:	4603      	mov	r3, r0
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d001      	beq.n	8004a14 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8004a10:	2301      	movs	r3, #1
 8004a12:	e391      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a14:	4b73      	ldr	r3, [pc, #460]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a72      	ldr	r2, [pc, #456]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a1a:	f043 0308 	orr.w	r3, r3, #8
 8004a1e:	6013      	str	r3, [r2, #0]
 8004a20:	4b70      	ldr	r3, [pc, #448]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	496d      	ldr	r1, [pc, #436]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a2e:	4313      	orrs	r3, r2
 8004a30:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a32:	4b6c      	ldr	r3, [pc, #432]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69db      	ldr	r3, [r3, #28]
 8004a3e:	021b      	lsls	r3, r3, #8
 8004a40:	4968      	ldr	r1, [pc, #416]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	604b      	str	r3, [r1, #4]
 8004a46:	e025      	b.n	8004a94 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004a48:	4b66      	ldr	r3, [pc, #408]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a65      	ldr	r2, [pc, #404]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a4e:	f043 0308 	orr.w	r3, r3, #8
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	4b63      	ldr	r3, [pc, #396]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6a1b      	ldr	r3, [r3, #32]
 8004a60:	4960      	ldr	r1, [pc, #384]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a62:	4313      	orrs	r3, r2
 8004a64:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004a66:	4b5f      	ldr	r3, [pc, #380]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	69db      	ldr	r3, [r3, #28]
 8004a72:	021b      	lsls	r3, r3, #8
 8004a74:	495b      	ldr	r1, [pc, #364]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d109      	bne.n	8004a94 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6a1b      	ldr	r3, [r3, #32]
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fd35 	bl	80054f4 <RCC_SetFlashLatencyFromMSIRange>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d001      	beq.n	8004a94 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e351      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004a94:	f000 fc38 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	4b52      	ldr	r3, [pc, #328]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004a9c:	689b      	ldr	r3, [r3, #8]
 8004a9e:	091b      	lsrs	r3, r3, #4
 8004aa0:	f003 030f 	and.w	r3, r3, #15
 8004aa4:	4950      	ldr	r1, [pc, #320]	@ (8004be8 <HAL_RCC_OscConfig+0x274>)
 8004aa6:	5ccb      	ldrb	r3, [r1, r3]
 8004aa8:	f003 031f 	and.w	r3, r3, #31
 8004aac:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab0:	4a4e      	ldr	r2, [pc, #312]	@ (8004bec <HAL_RCC_OscConfig+0x278>)
 8004ab2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004ab4:	4b4e      	ldr	r3, [pc, #312]	@ (8004bf0 <HAL_RCC_OscConfig+0x27c>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7fd fa43 	bl	8001f44 <HAL_InitTick>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004ac2:	7bfb      	ldrb	r3, [r7, #15]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d052      	beq.n	8004b6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8004ac8:	7bfb      	ldrb	r3, [r7, #15]
 8004aca:	e335      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d032      	beq.n	8004b3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004ad4:	4b43      	ldr	r3, [pc, #268]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4a42      	ldr	r2, [pc, #264]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004ada:	f043 0301 	orr.w	r3, r3, #1
 8004ade:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004ae0:	f7fd fb72 	bl	80021c8 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004ae8:	f7fd fb6e 	bl	80021c8 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e31e      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004afa:	4b3a      	ldr	r3, [pc, #232]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 0302 	and.w	r3, r3, #2
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d0f0      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004b06:	4b37      	ldr	r3, [pc, #220]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	4a36      	ldr	r2, [pc, #216]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004b0c:	f043 0308 	orr.w	r3, r3, #8
 8004b10:	6013      	str	r3, [r2, #0]
 8004b12:	4b34      	ldr	r3, [pc, #208]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a1b      	ldr	r3, [r3, #32]
 8004b1e:	4931      	ldr	r1, [pc, #196]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004b20:	4313      	orrs	r3, r2
 8004b22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004b24:	4b2f      	ldr	r3, [pc, #188]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	69db      	ldr	r3, [r3, #28]
 8004b30:	021b      	lsls	r3, r3, #8
 8004b32:	492c      	ldr	r1, [pc, #176]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004b34:	4313      	orrs	r3, r2
 8004b36:	604b      	str	r3, [r1, #4]
 8004b38:	e01a      	b.n	8004b70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004b3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a29      	ldr	r2, [pc, #164]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004b40:	f023 0301 	bic.w	r3, r3, #1
 8004b44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004b46:	f7fd fb3f 	bl	80021c8 <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004b4e:	f7fd fb3b 	bl	80021c8 <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b02      	cmp	r3, #2
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e2eb      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004b60:	4b20      	ldr	r3, [pc, #128]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0302 	and.w	r3, r3, #2
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d1f0      	bne.n	8004b4e <HAL_RCC_OscConfig+0x1da>
 8004b6c:	e000      	b.n	8004b70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004b6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d074      	beq.n	8004c66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004b7c:	69bb      	ldr	r3, [r7, #24]
 8004b7e:	2b08      	cmp	r3, #8
 8004b80:	d005      	beq.n	8004b8e <HAL_RCC_OscConfig+0x21a>
 8004b82:	69bb      	ldr	r3, [r7, #24]
 8004b84:	2b0c      	cmp	r3, #12
 8004b86:	d10e      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004b88:	697b      	ldr	r3, [r7, #20]
 8004b8a:	2b03      	cmp	r3, #3
 8004b8c:	d10b      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b8e:	4b15      	ldr	r3, [pc, #84]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d064      	beq.n	8004c64 <HAL_RCC_OscConfig+0x2f0>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d160      	bne.n	8004c64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e2c8      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bae:	d106      	bne.n	8004bbe <HAL_RCC_OscConfig+0x24a>
 8004bb0:	4b0c      	ldr	r3, [pc, #48]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4a0b      	ldr	r2, [pc, #44]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004bb6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bba:	6013      	str	r3, [r2, #0]
 8004bbc:	e026      	b.n	8004c0c <HAL_RCC_OscConfig+0x298>
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004bc6:	d115      	bne.n	8004bf4 <HAL_RCC_OscConfig+0x280>
 8004bc8:	4b06      	ldr	r3, [pc, #24]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a05      	ldr	r2, [pc, #20]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004bce:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004bd2:	6013      	str	r3, [r2, #0]
 8004bd4:	4b03      	ldr	r3, [pc, #12]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a02      	ldr	r2, [pc, #8]	@ (8004be4 <HAL_RCC_OscConfig+0x270>)
 8004bda:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	e014      	b.n	8004c0c <HAL_RCC_OscConfig+0x298>
 8004be2:	bf00      	nop
 8004be4:	40021000 	.word	0x40021000
 8004be8:	0800b33c 	.word	0x0800b33c
 8004bec:	20000008 	.word	0x20000008
 8004bf0:	2000000c 	.word	0x2000000c
 8004bf4:	4ba0      	ldr	r3, [pc, #640]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a9f      	ldr	r2, [pc, #636]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004bfa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004bfe:	6013      	str	r3, [r2, #0]
 8004c00:	4b9d      	ldr	r3, [pc, #628]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	4a9c      	ldr	r2, [pc, #624]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004c06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d013      	beq.n	8004c3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c14:	f7fd fad8 	bl	80021c8 <HAL_GetTick>
 8004c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c1a:	e008      	b.n	8004c2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c1c:	f7fd fad4 	bl	80021c8 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	@ 0x64
 8004c28:	d901      	bls.n	8004c2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e284      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004c2e:	4b92      	ldr	r3, [pc, #584]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0f0      	beq.n	8004c1c <HAL_RCC_OscConfig+0x2a8>
 8004c3a:	e014      	b.n	8004c66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c3c:	f7fd fac4 	bl	80021c8 <HAL_GetTick>
 8004c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c42:	e008      	b.n	8004c56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c44:	f7fd fac0 	bl	80021c8 <HAL_GetTick>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	1ad3      	subs	r3, r2, r3
 8004c4e:	2b64      	cmp	r3, #100	@ 0x64
 8004c50:	d901      	bls.n	8004c56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004c52:	2303      	movs	r3, #3
 8004c54:	e270      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004c56:	4b88      	ldr	r3, [pc, #544]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d1f0      	bne.n	8004c44 <HAL_RCC_OscConfig+0x2d0>
 8004c62:	e000      	b.n	8004c66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f003 0302 	and.w	r3, r3, #2
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d060      	beq.n	8004d34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004c72:	69bb      	ldr	r3, [r7, #24]
 8004c74:	2b04      	cmp	r3, #4
 8004c76:	d005      	beq.n	8004c84 <HAL_RCC_OscConfig+0x310>
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2b0c      	cmp	r3, #12
 8004c7c:	d119      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2b02      	cmp	r3, #2
 8004c82:	d116      	bne.n	8004cb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004c84:	4b7c      	ldr	r3, [pc, #496]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d005      	beq.n	8004c9c <HAL_RCC_OscConfig+0x328>
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68db      	ldr	r3, [r3, #12]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d101      	bne.n	8004c9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e24d      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c9c:	4b76      	ldr	r3, [pc, #472]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	691b      	ldr	r3, [r3, #16]
 8004ca8:	061b      	lsls	r3, r3, #24
 8004caa:	4973      	ldr	r1, [pc, #460]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004cac:	4313      	orrs	r3, r2
 8004cae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004cb0:	e040      	b.n	8004d34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d023      	beq.n	8004d02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cba:	4b6f      	ldr	r3, [pc, #444]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a6e      	ldr	r2, [pc, #440]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004cc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fd fa7f 	bl	80021c8 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004cce:	f7fd fa7b 	bl	80021c8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e22b      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004ce0:	4b65      	ldr	r3, [pc, #404]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cec:	4b62      	ldr	r3, [pc, #392]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	061b      	lsls	r3, r3, #24
 8004cfa:	495f      	ldr	r1, [pc, #380]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	604b      	str	r3, [r1, #4]
 8004d00:	e018      	b.n	8004d34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d02:	4b5d      	ldr	r3, [pc, #372]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a5c      	ldr	r2, [pc, #368]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004d08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0e:	f7fd fa5b 	bl	80021c8 <HAL_GetTick>
 8004d12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d14:	e008      	b.n	8004d28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d16:	f7fd fa57 	bl	80021c8 <HAL_GetTick>
 8004d1a:	4602      	mov	r2, r0
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1ad3      	subs	r3, r2, r3
 8004d20:	2b02      	cmp	r3, #2
 8004d22:	d901      	bls.n	8004d28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004d24:	2303      	movs	r3, #3
 8004d26:	e207      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004d28:	4b53      	ldr	r3, [pc, #332]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1f0      	bne.n	8004d16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d03c      	beq.n	8004dba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	695b      	ldr	r3, [r3, #20]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d01c      	beq.n	8004d82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d48:	4b4b      	ldr	r3, [pc, #300]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d4e:	4a4a      	ldr	r2, [pc, #296]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004d50:	f043 0301 	orr.w	r3, r3, #1
 8004d54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d58:	f7fd fa36 	bl	80021c8 <HAL_GetTick>
 8004d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d5e:	e008      	b.n	8004d72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d60:	f7fd fa32 	bl	80021c8 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d901      	bls.n	8004d72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	e1e2      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004d72:	4b41      	ldr	r3, [pc, #260]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004d74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d78:	f003 0302 	and.w	r3, r3, #2
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ef      	beq.n	8004d60 <HAL_RCC_OscConfig+0x3ec>
 8004d80:	e01b      	b.n	8004dba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d82:	4b3d      	ldr	r3, [pc, #244]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004d84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004d88:	4a3b      	ldr	r2, [pc, #236]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004d8a:	f023 0301 	bic.w	r3, r3, #1
 8004d8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d92:	f7fd fa19 	bl	80021c8 <HAL_GetTick>
 8004d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004d98:	e008      	b.n	8004dac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d9a:	f7fd fa15 	bl	80021c8 <HAL_GetTick>
 8004d9e:	4602      	mov	r2, r0
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	1ad3      	subs	r3, r2, r3
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	d901      	bls.n	8004dac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e1c5      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004dac:	4b32      	ldr	r3, [pc, #200]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004dae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004db2:	f003 0302 	and.w	r3, r3, #2
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1ef      	bne.n	8004d9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f003 0304 	and.w	r3, r3, #4
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	f000 80a6 	beq.w	8004f14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004dcc:	4b2a      	ldr	r3, [pc, #168]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004dce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004dd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10d      	bne.n	8004df4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dd8:	4b27      	ldr	r3, [pc, #156]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004dda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004ddc:	4a26      	ldr	r2, [pc, #152]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004dde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004de2:	6593      	str	r3, [r2, #88]	@ 0x58
 8004de4:	4b24      	ldr	r3, [pc, #144]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004de6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004de8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dec:	60bb      	str	r3, [r7, #8]
 8004dee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004df0:	2301      	movs	r3, #1
 8004df2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004df4:	4b21      	ldr	r3, [pc, #132]	@ (8004e7c <HAL_RCC_OscConfig+0x508>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d118      	bne.n	8004e32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004e00:	4b1e      	ldr	r3, [pc, #120]	@ (8004e7c <HAL_RCC_OscConfig+0x508>)
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	4a1d      	ldr	r2, [pc, #116]	@ (8004e7c <HAL_RCC_OscConfig+0x508>)
 8004e06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e0c:	f7fd f9dc 	bl	80021c8 <HAL_GetTick>
 8004e10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e12:	e008      	b.n	8004e26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e14:	f7fd f9d8 	bl	80021c8 <HAL_GetTick>
 8004e18:	4602      	mov	r2, r0
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	1ad3      	subs	r3, r2, r3
 8004e1e:	2b02      	cmp	r3, #2
 8004e20:	d901      	bls.n	8004e26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004e22:	2303      	movs	r3, #3
 8004e24:	e188      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004e26:	4b15      	ldr	r3, [pc, #84]	@ (8004e7c <HAL_RCC_OscConfig+0x508>)
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d0f0      	beq.n	8004e14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	2b01      	cmp	r3, #1
 8004e38:	d108      	bne.n	8004e4c <HAL_RCC_OscConfig+0x4d8>
 8004e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004e3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e40:	4a0d      	ldr	r2, [pc, #52]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004e42:	f043 0301 	orr.w	r3, r3, #1
 8004e46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e4a:	e029      	b.n	8004ea0 <HAL_RCC_OscConfig+0x52c>
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	689b      	ldr	r3, [r3, #8]
 8004e50:	2b05      	cmp	r3, #5
 8004e52:	d115      	bne.n	8004e80 <HAL_RCC_OscConfig+0x50c>
 8004e54:	4b08      	ldr	r3, [pc, #32]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e5a:	4a07      	ldr	r2, [pc, #28]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004e5c:	f043 0304 	orr.w	r3, r3, #4
 8004e60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e64:	4b04      	ldr	r3, [pc, #16]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	4a03      	ldr	r2, [pc, #12]	@ (8004e78 <HAL_RCC_OscConfig+0x504>)
 8004e6c:	f043 0301 	orr.w	r3, r3, #1
 8004e70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e74:	e014      	b.n	8004ea0 <HAL_RCC_OscConfig+0x52c>
 8004e76:	bf00      	nop
 8004e78:	40021000 	.word	0x40021000
 8004e7c:	40007000 	.word	0x40007000
 8004e80:	4b91      	ldr	r3, [pc, #580]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004e82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e86:	4a90      	ldr	r2, [pc, #576]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004e88:	f023 0301 	bic.w	r3, r3, #1
 8004e8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004e90:	4b8d      	ldr	r3, [pc, #564]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e96:	4a8c      	ldr	r2, [pc, #560]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004e98:	f023 0304 	bic.w	r3, r3, #4
 8004e9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d016      	beq.n	8004ed6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ea8:	f7fd f98e 	bl	80021c8 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004eb0:	f7fd f98a 	bl	80021c8 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e138      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ec6:	4b80      	ldr	r3, [pc, #512]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ecc:	f003 0302 	and.w	r3, r3, #2
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d0ed      	beq.n	8004eb0 <HAL_RCC_OscConfig+0x53c>
 8004ed4:	e015      	b.n	8004f02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ed6:	f7fd f977 	bl	80021c8 <HAL_GetTick>
 8004eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004edc:	e00a      	b.n	8004ef4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ede:	f7fd f973 	bl	80021c8 <HAL_GetTick>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	1ad3      	subs	r3, r2, r3
 8004ee8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d901      	bls.n	8004ef4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e121      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004ef4:	4b74      	ldr	r3, [pc, #464]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004efa:	f003 0302 	and.w	r3, r3, #2
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d1ed      	bne.n	8004ede <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f02:	7ffb      	ldrb	r3, [r7, #31]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d105      	bne.n	8004f14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f08:	4b6f      	ldr	r3, [pc, #444]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004f0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004f0c:	4a6e      	ldr	r2, [pc, #440]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004f0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f12:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	f000 810c 	beq.w	8005136 <HAL_RCC_OscConfig+0x7c2>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	f040 80d4 	bne.w	80050d0 <HAL_RCC_OscConfig+0x75c>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8004f28:	4b67      	ldr	r3, [pc, #412]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f003 0203 	and.w	r2, r3, #3
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d130      	bne.n	8004f9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f46:	3b01      	subs	r3, #1
 8004f48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d127      	bne.n	8004f9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f4e:	697b      	ldr	r3, [r7, #20]
 8004f50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004f5a:	429a      	cmp	r2, r3
 8004f5c:	d11f      	bne.n	8004f9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004f68:	2a07      	cmp	r2, #7
 8004f6a:	bf14      	ite	ne
 8004f6c:	2201      	movne	r2, #1
 8004f6e:	2200      	moveq	r2, #0
 8004f70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d113      	bne.n	8004f9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f80:	085b      	lsrs	r3, r3, #1
 8004f82:	3b01      	subs	r3, #1
 8004f84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8004f86:	429a      	cmp	r2, r3
 8004f88:	d109      	bne.n	8004f9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	085b      	lsrs	r3, r3, #1
 8004f96:	3b01      	subs	r3, #1
 8004f98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d06e      	beq.n	800507c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	2b0c      	cmp	r3, #12
 8004fa2:	d069      	beq.n	8005078 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004fa4:	4b48      	ldr	r3, [pc, #288]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d105      	bne.n	8004fbc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004fb0:	4b45      	ldr	r3, [pc, #276]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d001      	beq.n	8004fc0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e0bb      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004fc0:	4b41      	ldr	r3, [pc, #260]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a40      	ldr	r2, [pc, #256]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004fc6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004fca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004fcc:	f7fd f8fc 	bl	80021c8 <HAL_GetTick>
 8004fd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fd2:	e008      	b.n	8004fe6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fd4:	f7fd f8f8 	bl	80021c8 <HAL_GetTick>
 8004fd8:	4602      	mov	r2, r0
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	1ad3      	subs	r3, r2, r3
 8004fde:	2b02      	cmp	r3, #2
 8004fe0:	d901      	bls.n	8004fe6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e0a8      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004fe6:	4b38      	ldr	r3, [pc, #224]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d1f0      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ff2:	4b35      	ldr	r3, [pc, #212]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8004ff4:	68da      	ldr	r2, [r3, #12]
 8004ff6:	4b35      	ldr	r3, [pc, #212]	@ (80050cc <HAL_RCC_OscConfig+0x758>)
 8004ff8:	4013      	ands	r3, r2
 8004ffa:	687a      	ldr	r2, [r7, #4]
 8004ffc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005002:	3a01      	subs	r2, #1
 8005004:	0112      	lsls	r2, r2, #4
 8005006:	4311      	orrs	r1, r2
 8005008:	687a      	ldr	r2, [r7, #4]
 800500a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800500c:	0212      	lsls	r2, r2, #8
 800500e:	4311      	orrs	r1, r2
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005014:	0852      	lsrs	r2, r2, #1
 8005016:	3a01      	subs	r2, #1
 8005018:	0552      	lsls	r2, r2, #21
 800501a:	4311      	orrs	r1, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005020:	0852      	lsrs	r2, r2, #1
 8005022:	3a01      	subs	r2, #1
 8005024:	0652      	lsls	r2, r2, #25
 8005026:	4311      	orrs	r1, r2
 8005028:	687a      	ldr	r2, [r7, #4]
 800502a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800502c:	0912      	lsrs	r2, r2, #4
 800502e:	0452      	lsls	r2, r2, #17
 8005030:	430a      	orrs	r2, r1
 8005032:	4925      	ldr	r1, [pc, #148]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8005034:	4313      	orrs	r3, r2
 8005036:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005038:	4b23      	ldr	r3, [pc, #140]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a22      	ldr	r2, [pc, #136]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 800503e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005042:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005044:	4b20      	ldr	r3, [pc, #128]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8005046:	68db      	ldr	r3, [r3, #12]
 8005048:	4a1f      	ldr	r2, [pc, #124]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 800504a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800504e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8005050:	f7fd f8ba 	bl	80021c8 <HAL_GetTick>
 8005054:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005056:	e008      	b.n	800506a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005058:	f7fd f8b6 	bl	80021c8 <HAL_GetTick>
 800505c:	4602      	mov	r2, r0
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	1ad3      	subs	r3, r2, r3
 8005062:	2b02      	cmp	r3, #2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e066      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800506a:	4b17      	ldr	r3, [pc, #92]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d0f0      	beq.n	8005058 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005076:	e05e      	b.n	8005136 <HAL_RCC_OscConfig+0x7c2>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e05d      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800507c:	4b12      	ldr	r3, [pc, #72]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005084:	2b00      	cmp	r3, #0
 8005086:	d156      	bne.n	8005136 <HAL_RCC_OscConfig+0x7c2>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8005088:	4b0f      	ldr	r3, [pc, #60]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a0e      	ldr	r2, [pc, #56]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 800508e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005092:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005094:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	4a0b      	ldr	r2, [pc, #44]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 800509a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800509e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80050a0:	f7fd f892 	bl	80021c8 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050a8:	f7fd f88e 	bl	80021c8 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e03e      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80050ba:	4b03      	ldr	r3, [pc, #12]	@ (80050c8 <HAL_RCC_OscConfig+0x754>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x734>
 80050c6:	e036      	b.n	8005136 <HAL_RCC_OscConfig+0x7c2>
 80050c8:	40021000 	.word	0x40021000
 80050cc:	f99d808c 	.word	0xf99d808c
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	2b0c      	cmp	r3, #12
 80050d4:	d02d      	beq.n	8005132 <HAL_RCC_OscConfig+0x7be>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005140 <HAL_RCC_OscConfig+0x7cc>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4a19      	ldr	r2, [pc, #100]	@ (8005140 <HAL_RCC_OscConfig+0x7cc>)
 80050dc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80050e0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 80050e2:	4b17      	ldr	r3, [pc, #92]	@ (8005140 <HAL_RCC_OscConfig+0x7cc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 5320 	and.w	r3, r3, #671088640	@ 0x28000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d105      	bne.n	80050fa <HAL_RCC_OscConfig+0x786>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80050ee:	4b14      	ldr	r3, [pc, #80]	@ (8005140 <HAL_RCC_OscConfig+0x7cc>)
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	4a13      	ldr	r2, [pc, #76]	@ (8005140 <HAL_RCC_OscConfig+0x7cc>)
 80050f4:	f023 0303 	bic.w	r3, r3, #3
 80050f8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80050fa:	4b11      	ldr	r3, [pc, #68]	@ (8005140 <HAL_RCC_OscConfig+0x7cc>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	4a10      	ldr	r2, [pc, #64]	@ (8005140 <HAL_RCC_OscConfig+0x7cc>)
 8005100:	f023 7388 	bic.w	r3, r3, #17825792	@ 0x1100000
 8005104:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005108:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800510a:	f7fd f85d 	bl	80021c8 <HAL_GetTick>
 800510e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005110:	e008      	b.n	8005124 <HAL_RCC_OscConfig+0x7b0>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005112:	f7fd f859 	bl	80021c8 <HAL_GetTick>
 8005116:	4602      	mov	r2, r0
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	2b02      	cmp	r3, #2
 800511e:	d901      	bls.n	8005124 <HAL_RCC_OscConfig+0x7b0>
          {
            return HAL_TIMEOUT;
 8005120:	2303      	movs	r3, #3
 8005122:	e009      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005124:	4b06      	ldr	r3, [pc, #24]	@ (8005140 <HAL_RCC_OscConfig+0x7cc>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1f0      	bne.n	8005112 <HAL_RCC_OscConfig+0x79e>
 8005130:	e001      	b.n	8005136 <HAL_RCC_OscConfig+0x7c2>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005132:	2301      	movs	r3, #1
 8005134:	e000      	b.n	8005138 <HAL_RCC_OscConfig+0x7c4>
      }
    }
  }
  return HAL_OK;
 8005136:	2300      	movs	r3, #0
}
 8005138:	4618      	mov	r0, r3
 800513a:	3720      	adds	r7, #32
 800513c:	46bd      	mov	sp, r7
 800513e:	bd80      	pop	{r7, pc}
 8005140:	40021000 	.word	0x40021000

08005144 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b084      	sub	sp, #16
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005154:	2301      	movs	r3, #1
 8005156:	e0c8      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005158:	4b66      	ldr	r3, [pc, #408]	@ (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 0307 	and.w	r3, r3, #7
 8005160:	683a      	ldr	r2, [r7, #0]
 8005162:	429a      	cmp	r2, r3
 8005164:	d910      	bls.n	8005188 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005166:	4b63      	ldr	r3, [pc, #396]	@ (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f023 0207 	bic.w	r2, r3, #7
 800516e:	4961      	ldr	r1, [pc, #388]	@ (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	4313      	orrs	r3, r2
 8005174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b5f      	ldr	r3, [pc, #380]	@ (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0b0      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0301 	and.w	r3, r3, #1
 8005190:	2b00      	cmp	r3, #0
 8005192:	d04c      	beq.n	800522e <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	2b03      	cmp	r3, #3
 800519a:	d107      	bne.n	80051ac <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800519c:	4b56      	ldr	r3, [pc, #344]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d121      	bne.n	80051ec <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80051a8:	2301      	movs	r3, #1
 80051aa:	e09e      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	2b02      	cmp	r3, #2
 80051b2:	d107      	bne.n	80051c4 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80051b4:	4b50      	ldr	r3, [pc, #320]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d115      	bne.n	80051ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051c0:	2301      	movs	r3, #1
 80051c2:	e092      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d107      	bne.n	80051dc <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80051cc:	4b4a      	ldr	r3, [pc, #296]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d109      	bne.n	80051ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051d8:	2301      	movs	r3, #1
 80051da:	e086      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80051dc:	4b46      	ldr	r3, [pc, #280]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e07e      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80051ec:	4b42      	ldr	r3, [pc, #264]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051ee:	689b      	ldr	r3, [r3, #8]
 80051f0:	f023 0203 	bic.w	r2, r3, #3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	493f      	ldr	r1, [pc, #252]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80051fe:	f7fc ffe3 	bl	80021c8 <HAL_GetTick>
 8005202:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005204:	e00a      	b.n	800521c <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005206:	f7fc ffdf 	bl	80021c8 <HAL_GetTick>
 800520a:	4602      	mov	r2, r0
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	1ad3      	subs	r3, r2, r3
 8005210:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005214:	4293      	cmp	r3, r2
 8005216:	d901      	bls.n	800521c <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8005218:	2303      	movs	r3, #3
 800521a:	e066      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800521c:	4b36      	ldr	r3, [pc, #216]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f003 020c 	and.w	r2, r3, #12
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	429a      	cmp	r2, r3
 800522c:	d1eb      	bne.n	8005206 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0302 	and.w	r3, r3, #2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d008      	beq.n	800524c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800523a:	4b2f      	ldr	r3, [pc, #188]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 800523c:	689b      	ldr	r3, [r3, #8]
 800523e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	492c      	ldr	r1, [pc, #176]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 8005248:	4313      	orrs	r3, r2
 800524a:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800524c:	4b29      	ldr	r3, [pc, #164]	@ (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	429a      	cmp	r2, r3
 8005258:	d210      	bcs.n	800527c <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800525a:	4b26      	ldr	r3, [pc, #152]	@ (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f023 0207 	bic.w	r2, r3, #7
 8005262:	4924      	ldr	r1, [pc, #144]	@ (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	4313      	orrs	r3, r2
 8005268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800526a:	4b22      	ldr	r3, [pc, #136]	@ (80052f4 <HAL_RCC_ClockConfig+0x1b0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0307 	and.w	r3, r3, #7
 8005272:	683a      	ldr	r2, [r7, #0]
 8005274:	429a      	cmp	r2, r3
 8005276:	d001      	beq.n	800527c <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8005278:	2301      	movs	r3, #1
 800527a:	e036      	b.n	80052ea <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f003 0304 	and.w	r3, r3, #4
 8005284:	2b00      	cmp	r3, #0
 8005286:	d008      	beq.n	800529a <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005288:	4b1b      	ldr	r3, [pc, #108]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 800528a:	689b      	ldr	r3, [r3, #8]
 800528c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	4918      	ldr	r1, [pc, #96]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 8005296:	4313      	orrs	r3, r2
 8005298:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f003 0308 	and.w	r3, r3, #8
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d009      	beq.n	80052ba <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80052a6:	4b14      	ldr	r3, [pc, #80]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80052a8:	689b      	ldr	r3, [r3, #8]
 80052aa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4910      	ldr	r1, [pc, #64]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80052ba:	f000 f825 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 80052be:	4602      	mov	r2, r0
 80052c0:	4b0d      	ldr	r3, [pc, #52]	@ (80052f8 <HAL_RCC_ClockConfig+0x1b4>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	490c      	ldr	r1, [pc, #48]	@ (80052fc <HAL_RCC_ClockConfig+0x1b8>)
 80052cc:	5ccb      	ldrb	r3, [r1, r3]
 80052ce:	f003 031f 	and.w	r3, r3, #31
 80052d2:	fa22 f303 	lsr.w	r3, r2, r3
 80052d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005300 <HAL_RCC_ClockConfig+0x1bc>)
 80052d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80052da:	4b0a      	ldr	r3, [pc, #40]	@ (8005304 <HAL_RCC_ClockConfig+0x1c0>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7fc fe30 	bl	8001f44 <HAL_InitTick>
 80052e4:	4603      	mov	r3, r0
 80052e6:	72fb      	strb	r3, [r7, #11]

  return status;
 80052e8:	7afb      	ldrb	r3, [r7, #11]
}
 80052ea:	4618      	mov	r0, r3
 80052ec:	3710      	adds	r7, #16
 80052ee:	46bd      	mov	sp, r7
 80052f0:	bd80      	pop	{r7, pc}
 80052f2:	bf00      	nop
 80052f4:	40022000 	.word	0x40022000
 80052f8:	40021000 	.word	0x40021000
 80052fc:	0800b33c 	.word	0x0800b33c
 8005300:	20000008 	.word	0x20000008
 8005304:	2000000c 	.word	0x2000000c

08005308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005308:	b480      	push	{r7}
 800530a:	b089      	sub	sp, #36	@ 0x24
 800530c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800530e:	2300      	movs	r3, #0
 8005310:	61fb      	str	r3, [r7, #28]
 8005312:	2300      	movs	r3, #0
 8005314:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005316:	4b3e      	ldr	r3, [pc, #248]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005320:	4b3b      	ldr	r3, [pc, #236]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0303 	and.w	r3, r3, #3
 8005328:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d005      	beq.n	800533c <HAL_RCC_GetSysClockFreq+0x34>
 8005330:	693b      	ldr	r3, [r7, #16]
 8005332:	2b0c      	cmp	r3, #12
 8005334:	d121      	bne.n	800537a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2b01      	cmp	r3, #1
 800533a:	d11e      	bne.n	800537a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800533c:	4b34      	ldr	r3, [pc, #208]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f003 0308 	and.w	r3, r3, #8
 8005344:	2b00      	cmp	r3, #0
 8005346:	d107      	bne.n	8005358 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005348:	4b31      	ldr	r3, [pc, #196]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800534a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800534e:	0a1b      	lsrs	r3, r3, #8
 8005350:	f003 030f 	and.w	r3, r3, #15
 8005354:	61fb      	str	r3, [r7, #28]
 8005356:	e005      	b.n	8005364 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005358:	4b2d      	ldr	r3, [pc, #180]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	091b      	lsrs	r3, r3, #4
 800535e:	f003 030f 	and.w	r3, r3, #15
 8005362:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8005364:	4a2b      	ldr	r2, [pc, #172]	@ (8005414 <HAL_RCC_GetSysClockFreq+0x10c>)
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800536c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10d      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8005374:	69fb      	ldr	r3, [r7, #28]
 8005376:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005378:	e00a      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800537a:	693b      	ldr	r3, [r7, #16]
 800537c:	2b04      	cmp	r3, #4
 800537e:	d102      	bne.n	8005386 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005380:	4b25      	ldr	r3, [pc, #148]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x110>)
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	e004      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8005386:	693b      	ldr	r3, [r7, #16]
 8005388:	2b08      	cmp	r3, #8
 800538a:	d101      	bne.n	8005390 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800538c:	4b23      	ldr	r3, [pc, #140]	@ (800541c <HAL_RCC_GetSysClockFreq+0x114>)
 800538e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	2b0c      	cmp	r3, #12
 8005394:	d134      	bne.n	8005400 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005396:	4b1e      	ldr	r3, [pc, #120]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 8005398:	68db      	ldr	r3, [r3, #12]
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80053a0:	68bb      	ldr	r3, [r7, #8]
 80053a2:	2b02      	cmp	r3, #2
 80053a4:	d003      	beq.n	80053ae <HAL_RCC_GetSysClockFreq+0xa6>
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	2b03      	cmp	r3, #3
 80053aa:	d003      	beq.n	80053b4 <HAL_RCC_GetSysClockFreq+0xac>
 80053ac:	e005      	b.n	80053ba <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80053ae:	4b1a      	ldr	r3, [pc, #104]	@ (8005418 <HAL_RCC_GetSysClockFreq+0x110>)
 80053b0:	617b      	str	r3, [r7, #20]
      break;
 80053b2:	e005      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80053b4:	4b19      	ldr	r3, [pc, #100]	@ (800541c <HAL_RCC_GetSysClockFreq+0x114>)
 80053b6:	617b      	str	r3, [r7, #20]
      break;
 80053b8:	e002      	b.n	80053c0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80053ba:	69fb      	ldr	r3, [r7, #28]
 80053bc:	617b      	str	r3, [r7, #20]
      break;
 80053be:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80053c0:	4b13      	ldr	r3, [pc, #76]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	091b      	lsrs	r3, r3, #4
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	3301      	adds	r3, #1
 80053cc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80053ce:	4b10      	ldr	r3, [pc, #64]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	0a1b      	lsrs	r3, r3, #8
 80053d4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80053d8:	697a      	ldr	r2, [r7, #20]
 80053da:	fb03 f202 	mul.w	r2, r3, r2
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80053e6:	4b0a      	ldr	r3, [pc, #40]	@ (8005410 <HAL_RCC_GetSysClockFreq+0x108>)
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	0e5b      	lsrs	r3, r3, #25
 80053ec:	f003 0303 	and.w	r3, r3, #3
 80053f0:	3301      	adds	r3, #1
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80053f6:	697a      	ldr	r2, [r7, #20]
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80053fe:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8005400:	69bb      	ldr	r3, [r7, #24]
}
 8005402:	4618      	mov	r0, r3
 8005404:	3724      	adds	r7, #36	@ 0x24
 8005406:	46bd      	mov	sp, r7
 8005408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540c:	4770      	bx	lr
 800540e:	bf00      	nop
 8005410:	40021000 	.word	0x40021000
 8005414:	0800b354 	.word	0x0800b354
 8005418:	00f42400 	.word	0x00f42400
 800541c:	007a1200 	.word	0x007a1200

08005420 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005420:	b480      	push	{r7}
 8005422:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005424:	4b03      	ldr	r3, [pc, #12]	@ (8005434 <HAL_RCC_GetHCLKFreq+0x14>)
 8005426:	681b      	ldr	r3, [r3, #0]
}
 8005428:	4618      	mov	r0, r3
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20000008 	.word	0x20000008

08005438 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800543c:	f7ff fff0 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 8005440:	4602      	mov	r2, r0
 8005442:	4b06      	ldr	r3, [pc, #24]	@ (800545c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	0a1b      	lsrs	r3, r3, #8
 8005448:	f003 0307 	and.w	r3, r3, #7
 800544c:	4904      	ldr	r1, [pc, #16]	@ (8005460 <HAL_RCC_GetPCLK1Freq+0x28>)
 800544e:	5ccb      	ldrb	r3, [r1, r3]
 8005450:	f003 031f 	and.w	r3, r3, #31
 8005454:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005458:	4618      	mov	r0, r3
 800545a:	bd80      	pop	{r7, pc}
 800545c:	40021000 	.word	0x40021000
 8005460:	0800b34c 	.word	0x0800b34c

08005464 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005468:	f7ff ffda 	bl	8005420 <HAL_RCC_GetHCLKFreq>
 800546c:	4602      	mov	r2, r0
 800546e:	4b06      	ldr	r3, [pc, #24]	@ (8005488 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	0adb      	lsrs	r3, r3, #11
 8005474:	f003 0307 	and.w	r3, r3, #7
 8005478:	4904      	ldr	r1, [pc, #16]	@ (800548c <HAL_RCC_GetPCLK2Freq+0x28>)
 800547a:	5ccb      	ldrb	r3, [r1, r3]
 800547c:	f003 031f 	and.w	r3, r3, #31
 8005480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005484:	4618      	mov	r0, r3
 8005486:	bd80      	pop	{r7, pc}
 8005488:	40021000 	.word	0x40021000
 800548c:	0800b34c 	.word	0x0800b34c

08005490 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005490:	b480      	push	{r7}
 8005492:	b083      	sub	sp, #12
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	220f      	movs	r2, #15
 800549e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80054a0:	4b12      	ldr	r3, [pc, #72]	@ (80054ec <HAL_RCC_GetClockConfig+0x5c>)
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	f003 0203 	and.w	r2, r3, #3
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80054ac:	4b0f      	ldr	r3, [pc, #60]	@ (80054ec <HAL_RCC_GetClockConfig+0x5c>)
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80054b8:	4b0c      	ldr	r3, [pc, #48]	@ (80054ec <HAL_RCC_GetClockConfig+0x5c>)
 80054ba:	689b      	ldr	r3, [r3, #8]
 80054bc:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80054c4:	4b09      	ldr	r3, [pc, #36]	@ (80054ec <HAL_RCC_GetClockConfig+0x5c>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	08db      	lsrs	r3, r3, #3
 80054ca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80054d2:	4b07      	ldr	r3, [pc, #28]	@ (80054f0 <HAL_RCC_GetClockConfig+0x60>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f003 0207 	and.w	r2, r3, #7
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	601a      	str	r2, [r3, #0]
}
 80054de:	bf00      	nop
 80054e0:	370c      	adds	r7, #12
 80054e2:	46bd      	mov	sp, r7
 80054e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e8:	4770      	bx	lr
 80054ea:	bf00      	nop
 80054ec:	40021000 	.word	0x40021000
 80054f0:	40022000 	.word	0x40022000

080054f4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b086      	sub	sp, #24
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80054fc:	2300      	movs	r3, #0
 80054fe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005500:	4b2a      	ldr	r3, [pc, #168]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005502:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005504:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800550c:	f7ff f9ce 	bl	80048ac <HAL_PWREx_GetVoltageRange>
 8005510:	6178      	str	r0, [r7, #20]
 8005512:	e014      	b.n	800553e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005514:	4b25      	ldr	r3, [pc, #148]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005518:	4a24      	ldr	r2, [pc, #144]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800551a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800551e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005520:	4b22      	ldr	r3, [pc, #136]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005522:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005524:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800552c:	f7ff f9be 	bl	80048ac <HAL_PWREx_GetVoltageRange>
 8005530:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8005532:	4b1e      	ldr	r3, [pc, #120]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005536:	4a1d      	ldr	r2, [pc, #116]	@ (80055ac <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8005538:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800553c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005544:	d10b      	bne.n	800555e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b80      	cmp	r3, #128	@ 0x80
 800554a:	d919      	bls.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2ba0      	cmp	r3, #160	@ 0xa0
 8005550:	d902      	bls.n	8005558 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005552:	2302      	movs	r3, #2
 8005554:	613b      	str	r3, [r7, #16]
 8005556:	e013      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8005558:	2301      	movs	r3, #1
 800555a:	613b      	str	r3, [r7, #16]
 800555c:	e010      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2b80      	cmp	r3, #128	@ 0x80
 8005562:	d902      	bls.n	800556a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8005564:	2303      	movs	r3, #3
 8005566:	613b      	str	r3, [r7, #16]
 8005568:	e00a      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b80      	cmp	r3, #128	@ 0x80
 800556e:	d102      	bne.n	8005576 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8005570:	2302      	movs	r3, #2
 8005572:	613b      	str	r3, [r7, #16]
 8005574:	e004      	b.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b70      	cmp	r3, #112	@ 0x70
 800557a:	d101      	bne.n	8005580 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800557c:	2301      	movs	r3, #1
 800557e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f023 0207 	bic.w	r2, r3, #7
 8005588:	4909      	ldr	r1, [pc, #36]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	4313      	orrs	r3, r2
 800558e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005590:	4b07      	ldr	r3, [pc, #28]	@ (80055b0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	429a      	cmp	r2, r3
 800559c:	d001      	beq.n	80055a2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e000      	b.n	80055a4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80055a2:	2300      	movs	r3, #0
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40022000 	.word	0x40022000

080055b4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b086      	sub	sp, #24
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80055bc:	2300      	movs	r3, #0
 80055be:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80055c0:	2300      	movs	r3, #0
 80055c2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d041      	beq.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80055d4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055d8:	d02a      	beq.n	8005630 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80055da:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80055de:	d824      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055e0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055e4:	d008      	beq.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80055e6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80055ea:	d81e      	bhi.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00a      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80055f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80055f4:	d010      	beq.n	8005618 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80055f6:	e018      	b.n	800562a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80055f8:	4b86      	ldr	r3, [pc, #536]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	4a85      	ldr	r2, [pc, #532]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80055fe:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005602:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005604:	e015      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3304      	adds	r3, #4
 800560a:	2100      	movs	r1, #0
 800560c:	4618      	mov	r0, r3
 800560e:	f000 fabb 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005612:	4603      	mov	r3, r0
 8005614:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005616:	e00c      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	3320      	adds	r3, #32
 800561c:	2100      	movs	r1, #0
 800561e:	4618      	mov	r0, r3
 8005620:	f000 fba6 	bl	8005d70 <RCCEx_PLLSAI2_Config>
 8005624:	4603      	mov	r3, r0
 8005626:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005628:	e003      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800562a:	2301      	movs	r3, #1
 800562c:	74fb      	strb	r3, [r7, #19]
      break;
 800562e:	e000      	b.n	8005632 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8005630:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005632:	7cfb      	ldrb	r3, [r7, #19]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d10b      	bne.n	8005650 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005638:	4b76      	ldr	r3, [pc, #472]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800563a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800563e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005646:	4973      	ldr	r1, [pc, #460]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005648:	4313      	orrs	r3, r2
 800564a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800564e:	e001      	b.n	8005654 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005650:	7cfb      	ldrb	r3, [r7, #19]
 8005652:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800565c:	2b00      	cmp	r3, #0
 800565e:	d041      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005664:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8005668:	d02a      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800566a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800566e:	d824      	bhi.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 8005670:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8005674:	d008      	beq.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005676:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800567a:	d81e      	bhi.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x106>
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00a      	beq.n	8005696 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8005680:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005684:	d010      	beq.n	80056a8 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005686:	e018      	b.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005688:	4b62      	ldr	r3, [pc, #392]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800568a:	68db      	ldr	r3, [r3, #12]
 800568c:	4a61      	ldr	r2, [pc, #388]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800568e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005692:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005694:	e015      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	3304      	adds	r3, #4
 800569a:	2100      	movs	r1, #0
 800569c:	4618      	mov	r0, r3
 800569e:	f000 fa73 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 80056a2:	4603      	mov	r3, r0
 80056a4:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056a6:	e00c      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	3320      	adds	r3, #32
 80056ac:	2100      	movs	r1, #0
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 fb5e 	bl	8005d70 <RCCEx_PLLSAI2_Config>
 80056b4:	4603      	mov	r3, r0
 80056b6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80056b8:	e003      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	74fb      	strb	r3, [r7, #19]
      break;
 80056be:	e000      	b.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80056c0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80056c2:	7cfb      	ldrb	r3, [r7, #19]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d10b      	bne.n	80056e0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80056c8:	4b52      	ldr	r3, [pc, #328]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80056ce:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80056d6:	494f      	ldr	r1, [pc, #316]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056d8:	4313      	orrs	r3, r2
 80056da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80056de:	e001      	b.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80056e0:	7cfb      	ldrb	r3, [r7, #19]
 80056e2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	f000 80a0 	beq.w	8005832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80056f2:	2300      	movs	r3, #0
 80056f4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80056f6:	4b47      	ldr	r3, [pc, #284]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80056f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d101      	bne.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8005702:	2301      	movs	r3, #1
 8005704:	e000      	b.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8005706:	2300      	movs	r3, #0
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00d      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800570c:	4b41      	ldr	r3, [pc, #260]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800570e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005710:	4a40      	ldr	r2, [pc, #256]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005712:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005716:	6593      	str	r3, [r2, #88]	@ 0x58
 8005718:	4b3e      	ldr	r3, [pc, #248]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800571a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800571c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005720:	60bb      	str	r3, [r7, #8]
 8005722:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005724:	2301      	movs	r3, #1
 8005726:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005728:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a3a      	ldr	r2, [pc, #232]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800572e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005732:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005734:	f7fc fd48 	bl	80021c8 <HAL_GetTick>
 8005738:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800573a:	e009      	b.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800573c:	f7fc fd44 	bl	80021c8 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d902      	bls.n	8005750 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	74fb      	strb	r3, [r7, #19]
        break;
 800574e:	e005      	b.n	800575c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005750:	4b31      	ldr	r3, [pc, #196]	@ (8005818 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005758:	2b00      	cmp	r3, #0
 800575a:	d0ef      	beq.n	800573c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800575c:	7cfb      	ldrb	r3, [r7, #19]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d15c      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005762:	4b2c      	ldr	r3, [pc, #176]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005764:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005768:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800576c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800576e:	697b      	ldr	r3, [r7, #20]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d01f      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800577a:	697a      	ldr	r2, [r7, #20]
 800577c:	429a      	cmp	r2, r3
 800577e:	d019      	beq.n	80057b4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005780:	4b24      	ldr	r3, [pc, #144]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005782:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800578a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800578c:	4b21      	ldr	r3, [pc, #132]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800578e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005792:	4a20      	ldr	r2, [pc, #128]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005794:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005798:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800579c:	4b1d      	ldr	r3, [pc, #116]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800579e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057a2:	4a1c      	ldr	r2, [pc, #112]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057a4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80057a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80057ac:	4a19      	ldr	r2, [pc, #100]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	f003 0301 	and.w	r3, r3, #1
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d016      	beq.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057be:	f7fc fd03 	bl	80021c8 <HAL_GetTick>
 80057c2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057c4:	e00b      	b.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057c6:	f7fc fcff 	bl	80021c8 <HAL_GetTick>
 80057ca:	4602      	mov	r2, r0
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	1ad3      	subs	r3, r2, r3
 80057d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057d4:	4293      	cmp	r3, r2
 80057d6:	d902      	bls.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	74fb      	strb	r3, [r7, #19]
            break;
 80057dc:	e006      	b.n	80057ec <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80057de:	4b0d      	ldr	r3, [pc, #52]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057e4:	f003 0302 	and.w	r3, r3, #2
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d0ec      	beq.n	80057c6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80057ec:	7cfb      	ldrb	r3, [r7, #19]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d10c      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80057f2:	4b08      	ldr	r3, [pc, #32]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80057f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80057f8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005802:	4904      	ldr	r1, [pc, #16]	@ (8005814 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8005804:	4313      	orrs	r3, r2
 8005806:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800580a:	e009      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800580c:	7cfb      	ldrb	r3, [r7, #19]
 800580e:	74bb      	strb	r3, [r7, #18]
 8005810:	e006      	b.n	8005820 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8005812:	bf00      	nop
 8005814:	40021000 	.word	0x40021000
 8005818:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800581c:	7cfb      	ldrb	r3, [r7, #19]
 800581e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005820:	7c7b      	ldrb	r3, [r7, #17]
 8005822:	2b01      	cmp	r3, #1
 8005824:	d105      	bne.n	8005832 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005826:	4b9e      	ldr	r3, [pc, #632]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800582a:	4a9d      	ldr	r2, [pc, #628]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800582c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005830:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f003 0301 	and.w	r3, r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800583e:	4b98      	ldr	r3, [pc, #608]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005840:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005844:	f023 0203 	bic.w	r2, r3, #3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800584c:	4994      	ldr	r1, [pc, #592]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800584e:	4313      	orrs	r3, r2
 8005850:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d00a      	beq.n	8005876 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005860:	4b8f      	ldr	r3, [pc, #572]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005862:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005866:	f023 020c 	bic.w	r2, r3, #12
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800586e:	498c      	ldr	r1, [pc, #560]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005870:	4313      	orrs	r3, r2
 8005872:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f003 0304 	and.w	r3, r3, #4
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00a      	beq.n	8005898 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005882:	4b87      	ldr	r3, [pc, #540]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005888:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	4983      	ldr	r1, [pc, #524]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005892:	4313      	orrs	r3, r2
 8005894:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0308 	and.w	r3, r3, #8
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d00a      	beq.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80058a4:	4b7e      	ldr	r3, [pc, #504]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058b2:	497b      	ldr	r1, [pc, #492]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 0310 	and.w	r3, r3, #16
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d00a      	beq.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80058c6:	4b76      	ldr	r3, [pc, #472]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058cc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80058d4:	4972      	ldr	r1, [pc, #456]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058d6:	4313      	orrs	r3, r2
 80058d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 0320 	and.w	r3, r3, #32
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d00a      	beq.n	80058fe <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80058e8:	4b6d      	ldr	r3, [pc, #436]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80058ee:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80058f6:	496a      	ldr	r1, [pc, #424]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80058f8:	4313      	orrs	r3, r2
 80058fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00a      	beq.n	8005920 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800590a:	4b65      	ldr	r3, [pc, #404]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800590c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005910:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005918:	4961      	ldr	r1, [pc, #388]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800591a:	4313      	orrs	r3, r2
 800591c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00a      	beq.n	8005942 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800592c:	4b5c      	ldr	r3, [pc, #368]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800592e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005932:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800593a:	4959      	ldr	r1, [pc, #356]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800593c:	4313      	orrs	r3, r2
 800593e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800594a:	2b00      	cmp	r3, #0
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800594e:	4b54      	ldr	r3, [pc, #336]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005950:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005954:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595c:	4950      	ldr	r1, [pc, #320]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800595e:	4313      	orrs	r3, r2
 8005960:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800596c:	2b00      	cmp	r3, #0
 800596e:	d00a      	beq.n	8005986 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005970:	4b4b      	ldr	r3, [pc, #300]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005976:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800597e:	4948      	ldr	r1, [pc, #288]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005980:	4313      	orrs	r3, r2
 8005982:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598e:	2b00      	cmp	r3, #0
 8005990:	d00a      	beq.n	80059a8 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005992:	4b43      	ldr	r3, [pc, #268]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005994:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005998:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059a0:	493f      	ldr	r1, [pc, #252]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059a2:	4313      	orrs	r3, r2
 80059a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d028      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80059b4:	4b3a      	ldr	r3, [pc, #232]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059ba:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059c2:	4937      	ldr	r1, [pc, #220]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059c4:	4313      	orrs	r3, r2
 80059c6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80059d2:	d106      	bne.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80059d4:	4b32      	ldr	r3, [pc, #200]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	4a31      	ldr	r2, [pc, #196]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80059da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80059de:	60d3      	str	r3, [r2, #12]
 80059e0:	e011      	b.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059e6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80059ea:	d10c      	bne.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	3304      	adds	r3, #4
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f000 f8c8 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 80059f8:	4603      	mov	r3, r0
 80059fa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80059fc:	7cfb      	ldrb	r3, [r7, #19]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d001      	beq.n	8005a06 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8005a02:	7cfb      	ldrb	r3, [r7, #19]
 8005a04:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d028      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005a12:	4b23      	ldr	r3, [pc, #140]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a18:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a20:	491f      	ldr	r1, [pc, #124]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a22:	4313      	orrs	r3, r2
 8005a24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a2c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a30:	d106      	bne.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a32:	4b1b      	ldr	r3, [pc, #108]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a34:	68db      	ldr	r3, [r3, #12]
 8005a36:	4a1a      	ldr	r2, [pc, #104]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a38:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a3c:	60d3      	str	r3, [r2, #12]
 8005a3e:	e011      	b.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005a44:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005a48:	d10c      	bne.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	2101      	movs	r1, #1
 8005a50:	4618      	mov	r0, r3
 8005a52:	f000 f899 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005a56:	4603      	mov	r3, r0
 8005a58:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005a5a:	7cfb      	ldrb	r3, [r7, #19]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d001      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8005a60:	7cfb      	ldrb	r3, [r7, #19]
 8005a62:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d02b      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005a70:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005a76:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a7e:	4908      	ldr	r1, [pc, #32]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005a8a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005a8e:	d109      	bne.n	8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a90:	4b03      	ldr	r3, [pc, #12]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	4a02      	ldr	r2, [pc, #8]	@ (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8005a96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005a9a:	60d3      	str	r3, [r2, #12]
 8005a9c:	e014      	b.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8005a9e:	bf00      	nop
 8005aa0:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005aa8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005aac:	d10c      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	2101      	movs	r1, #1
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f000 f867 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005aba:	4603      	mov	r3, r0
 8005abc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005abe:	7cfb      	ldrb	r3, [r7, #19]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8005ac4:	7cfb      	ldrb	r3, [r7, #19]
 8005ac6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d02f      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ada:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ae2:	4928      	ldr	r1, [pc, #160]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005aee:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005af2:	d10d      	bne.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	3304      	adds	r3, #4
 8005af8:	2102      	movs	r1, #2
 8005afa:	4618      	mov	r0, r3
 8005afc:	f000 f844 	bl	8005b88 <RCCEx_PLLSAI1_Config>
 8005b00:	4603      	mov	r3, r0
 8005b02:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b04:	7cfb      	ldrb	r3, [r7, #19]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d014      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b0a:	7cfb      	ldrb	r3, [r7, #19]
 8005b0c:	74bb      	strb	r3, [r7, #18]
 8005b0e:	e011      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005b14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005b18:	d10c      	bne.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	3320      	adds	r3, #32
 8005b1e:	2102      	movs	r1, #2
 8005b20:	4618      	mov	r0, r3
 8005b22:	f000 f925 	bl	8005d70 <RCCEx_PLLSAI2_Config>
 8005b26:	4603      	mov	r3, r0
 8005b28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005b2a:	7cfb      	ldrb	r3, [r7, #19]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8005b30:	7cfb      	ldrb	r3, [r7, #19]
 8005b32:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d00a      	beq.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005b40:	4b10      	ldr	r3, [pc, #64]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b46:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b4e:	490d      	ldr	r1, [pc, #52]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b50:	4313      	orrs	r3, r2
 8005b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d00b      	beq.n	8005b7a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005b62:	4b08      	ldr	r3, [pc, #32]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b68:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b72:	4904      	ldr	r1, [pc, #16]	@ (8005b84 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8005b74:	4313      	orrs	r3, r2
 8005b76:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8005b7a:	7cbb      	ldrb	r3, [r7, #18]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3718      	adds	r7, #24
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	40021000 	.word	0x40021000

08005b88 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b084      	sub	sp, #16
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
 8005b90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005b92:	2300      	movs	r3, #0
 8005b94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005b96:	4b75      	ldr	r3, [pc, #468]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d018      	beq.n	8005bd4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8005ba2:	4b72      	ldr	r3, [pc, #456]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 0203 	and.w	r2, r3, #3
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	429a      	cmp	r2, r3
 8005bb0:	d10d      	bne.n	8005bce <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
       ||
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d009      	beq.n	8005bce <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005bba:	4b6c      	ldr	r3, [pc, #432]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bbc:	68db      	ldr	r3, [r3, #12]
 8005bbe:	091b      	lsrs	r3, r3, #4
 8005bc0:	f003 0307 	and.w	r3, r3, #7
 8005bc4:	1c5a      	adds	r2, r3, #1
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685b      	ldr	r3, [r3, #4]
       ||
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d047      	beq.n	8005c5e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	73fb      	strb	r3, [r7, #15]
 8005bd2:	e044      	b.n	8005c5e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	2b03      	cmp	r3, #3
 8005bda:	d018      	beq.n	8005c0e <RCCEx_PLLSAI1_Config+0x86>
 8005bdc:	2b03      	cmp	r3, #3
 8005bde:	d825      	bhi.n	8005c2c <RCCEx_PLLSAI1_Config+0xa4>
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d002      	beq.n	8005bea <RCCEx_PLLSAI1_Config+0x62>
 8005be4:	2b02      	cmp	r3, #2
 8005be6:	d009      	beq.n	8005bfc <RCCEx_PLLSAI1_Config+0x74>
 8005be8:	e020      	b.n	8005c2c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005bea:	4b60      	ldr	r3, [pc, #384]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0302 	and.w	r3, r3, #2
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d11d      	bne.n	8005c32 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bfa:	e01a      	b.n	8005c32 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005bfc:	4b5b      	ldr	r3, [pc, #364]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d116      	bne.n	8005c36 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005c0c:	e013      	b.n	8005c36 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005c0e:	4b57      	ldr	r3, [pc, #348]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10f      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005c1a:	4b54      	ldr	r3, [pc, #336]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d109      	bne.n	8005c3a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005c2a:	e006      	b.n	8005c3a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005c2c:	2301      	movs	r3, #1
 8005c2e:	73fb      	strb	r3, [r7, #15]
      break;
 8005c30:	e004      	b.n	8005c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c32:	bf00      	nop
 8005c34:	e002      	b.n	8005c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c36:	bf00      	nop
 8005c38:	e000      	b.n	8005c3c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005c3a:	bf00      	nop
    }

    if(status == HAL_OK)
 8005c3c:	7bfb      	ldrb	r3, [r7, #15]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d10d      	bne.n	8005c5e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005c42:	4b4a      	ldr	r3, [pc, #296]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c44:	68db      	ldr	r3, [r3, #12]
 8005c46:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6819      	ldr	r1, [r3, #0]
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	685b      	ldr	r3, [r3, #4]
 8005c52:	3b01      	subs	r3, #1
 8005c54:	011b      	lsls	r3, r3, #4
 8005c56:	430b      	orrs	r3, r1
 8005c58:	4944      	ldr	r1, [pc, #272]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d17d      	bne.n	8005d60 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005c64:	4b41      	ldr	r3, [pc, #260]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a40      	ldr	r2, [pc, #256]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c6a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c70:	f7fc faaa 	bl	80021c8 <HAL_GetTick>
 8005c74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c76:	e009      	b.n	8005c8c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005c78:	f7fc faa6 	bl	80021c8 <HAL_GetTick>
 8005c7c:	4602      	mov	r2, r0
 8005c7e:	68bb      	ldr	r3, [r7, #8]
 8005c80:	1ad3      	subs	r3, r2, r3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d902      	bls.n	8005c8c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005c86:	2303      	movs	r3, #3
 8005c88:	73fb      	strb	r3, [r7, #15]
        break;
 8005c8a:	e005      	b.n	8005c98 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005c8c:	4b37      	ldr	r3, [pc, #220]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d1ef      	bne.n	8005c78 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d160      	bne.n	8005d60 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d111      	bne.n	8005cc8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005ca4:	4b31      	ldr	r3, [pc, #196]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005ca6:	691b      	ldr	r3, [r3, #16]
 8005ca8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005cac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005cb0:	687a      	ldr	r2, [r7, #4]
 8005cb2:	6892      	ldr	r2, [r2, #8]
 8005cb4:	0211      	lsls	r1, r2, #8
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	68d2      	ldr	r2, [r2, #12]
 8005cba:	0912      	lsrs	r2, r2, #4
 8005cbc:	0452      	lsls	r2, r2, #17
 8005cbe:	430a      	orrs	r2, r1
 8005cc0:	492a      	ldr	r1, [pc, #168]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cc2:	4313      	orrs	r3, r2
 8005cc4:	610b      	str	r3, [r1, #16]
 8005cc6:	e027      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b01      	cmp	r3, #1
 8005ccc:	d112      	bne.n	8005cf4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cce:	4b27      	ldr	r3, [pc, #156]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cd0:	691b      	ldr	r3, [r3, #16]
 8005cd2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8005cd6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6892      	ldr	r2, [r2, #8]
 8005cde:	0211      	lsls	r1, r2, #8
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	6912      	ldr	r2, [r2, #16]
 8005ce4:	0852      	lsrs	r2, r2, #1
 8005ce6:	3a01      	subs	r2, #1
 8005ce8:	0552      	lsls	r2, r2, #21
 8005cea:	430a      	orrs	r2, r1
 8005cec:	491f      	ldr	r1, [pc, #124]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	610b      	str	r3, [r1, #16]
 8005cf2:	e011      	b.n	8005d18 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005cf4:	4b1d      	ldr	r3, [pc, #116]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005cfc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005d00:	687a      	ldr	r2, [r7, #4]
 8005d02:	6892      	ldr	r2, [r2, #8]
 8005d04:	0211      	lsls	r1, r2, #8
 8005d06:	687a      	ldr	r2, [r7, #4]
 8005d08:	6952      	ldr	r2, [r2, #20]
 8005d0a:	0852      	lsrs	r2, r2, #1
 8005d0c:	3a01      	subs	r2, #1
 8005d0e:	0652      	lsls	r2, r2, #25
 8005d10:	430a      	orrs	r2, r1
 8005d12:	4916      	ldr	r1, [pc, #88]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8005d18:	4b14      	ldr	r3, [pc, #80]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a13      	ldr	r2, [pc, #76]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d1e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005d22:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d24:	f7fc fa50 	bl	80021c8 <HAL_GetTick>
 8005d28:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d2a:	e009      	b.n	8005d40 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005d2c:	f7fc fa4c 	bl	80021c8 <HAL_GetTick>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	1ad3      	subs	r3, r2, r3
 8005d36:	2b02      	cmp	r3, #2
 8005d38:	d902      	bls.n	8005d40 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005d3a:	2303      	movs	r3, #3
 8005d3c:	73fb      	strb	r3, [r7, #15]
          break;
 8005d3e:	e005      	b.n	8005d4c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005d40:	4b0a      	ldr	r3, [pc, #40]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d0ef      	beq.n	8005d2c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005d4c:	7bfb      	ldrb	r3, [r7, #15]
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d106      	bne.n	8005d60 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8005d52:	4b06      	ldr	r3, [pc, #24]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	4904      	ldr	r1, [pc, #16]	@ (8005d6c <RCCEx_PLLSAI1_Config+0x1e4>)
 8005d5c:	4313      	orrs	r3, r2
 8005d5e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3710      	adds	r7, #16
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40021000 	.word	0x40021000

08005d70 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b084      	sub	sp, #16
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005d7e:	4b6a      	ldr	r3, [pc, #424]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	f003 0303 	and.w	r3, r3, #3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d018      	beq.n	8005dbc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005d8a:	4b67      	ldr	r3, [pc, #412]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005d8c:	68db      	ldr	r3, [r3, #12]
 8005d8e:	f003 0203 	and.w	r2, r3, #3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d10d      	bne.n	8005db6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
       ||
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d009      	beq.n	8005db6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8005da2:	4b61      	ldr	r3, [pc, #388]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005da4:	68db      	ldr	r3, [r3, #12]
 8005da6:	091b      	lsrs	r3, r3, #4
 8005da8:	f003 0307 	and.w	r3, r3, #7
 8005dac:	1c5a      	adds	r2, r3, #1
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	685b      	ldr	r3, [r3, #4]
       ||
 8005db2:	429a      	cmp	r2, r3
 8005db4:	d047      	beq.n	8005e46 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	73fb      	strb	r3, [r7, #15]
 8005dba:	e044      	b.n	8005e46 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b03      	cmp	r3, #3
 8005dc2:	d018      	beq.n	8005df6 <RCCEx_PLLSAI2_Config+0x86>
 8005dc4:	2b03      	cmp	r3, #3
 8005dc6:	d825      	bhi.n	8005e14 <RCCEx_PLLSAI2_Config+0xa4>
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d002      	beq.n	8005dd2 <RCCEx_PLLSAI2_Config+0x62>
 8005dcc:	2b02      	cmp	r3, #2
 8005dce:	d009      	beq.n	8005de4 <RCCEx_PLLSAI2_Config+0x74>
 8005dd0:	e020      	b.n	8005e14 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8005dd2:	4b55      	ldr	r3, [pc, #340]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d11d      	bne.n	8005e1a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005dde:	2301      	movs	r3, #1
 8005de0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005de2:	e01a      	b.n	8005e1a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8005de4:	4b50      	ldr	r3, [pc, #320]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d116      	bne.n	8005e1e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005df0:	2301      	movs	r3, #1
 8005df2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005df4:	e013      	b.n	8005e1e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8005df6:	4b4c      	ldr	r3, [pc, #304]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10f      	bne.n	8005e22 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8005e02:	4b49      	ldr	r3, [pc, #292]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d109      	bne.n	8005e22 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005e0e:	2301      	movs	r3, #1
 8005e10:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005e12:	e006      	b.n	8005e22 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	73fb      	strb	r3, [r7, #15]
      break;
 8005e18:	e004      	b.n	8005e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e1a:	bf00      	nop
 8005e1c:	e002      	b.n	8005e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e1e:	bf00      	nop
 8005e20:	e000      	b.n	8005e24 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005e22:	bf00      	nop
    }

    if(status == HAL_OK)
 8005e24:	7bfb      	ldrb	r3, [r7, #15]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10d      	bne.n	8005e46 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005e2a:	4b3f      	ldr	r3, [pc, #252]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e2c:	68db      	ldr	r3, [r3, #12]
 8005e2e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6819      	ldr	r1, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	3b01      	subs	r3, #1
 8005e3c:	011b      	lsls	r3, r3, #4
 8005e3e:	430b      	orrs	r3, r1
 8005e40:	4939      	ldr	r1, [pc, #228]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005e46:	7bfb      	ldrb	r3, [r7, #15]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d167      	bne.n	8005f1c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005e4c:	4b36      	ldr	r3, [pc, #216]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a35      	ldr	r2, [pc, #212]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e56:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e58:	f7fc f9b6 	bl	80021c8 <HAL_GetTick>
 8005e5c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e5e:	e009      	b.n	8005e74 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005e60:	f7fc f9b2 	bl	80021c8 <HAL_GetTick>
 8005e64:	4602      	mov	r2, r0
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	1ad3      	subs	r3, r2, r3
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d902      	bls.n	8005e74 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	73fb      	strb	r3, [r7, #15]
        break;
 8005e72:	e005      	b.n	8005e80 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005e74:	4b2c      	ldr	r3, [pc, #176]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d1ef      	bne.n	8005e60 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005e80:	7bfb      	ldrb	r3, [r7, #15]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d14a      	bne.n	8005f1c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	2b00      	cmp	r3, #0
 8005e8a:	d111      	bne.n	8005eb0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005e8c:	4b26      	ldr	r3, [pc, #152]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8005e94:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	6892      	ldr	r2, [r2, #8]
 8005e9c:	0211      	lsls	r1, r2, #8
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	68d2      	ldr	r2, [r2, #12]
 8005ea2:	0912      	lsrs	r2, r2, #4
 8005ea4:	0452      	lsls	r2, r2, #17
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	491f      	ldr	r1, [pc, #124]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	614b      	str	r3, [r1, #20]
 8005eae:	e011      	b.n	8005ed4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eb2:	695b      	ldr	r3, [r3, #20]
 8005eb4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005eb8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005ebc:	687a      	ldr	r2, [r7, #4]
 8005ebe:	6892      	ldr	r2, [r2, #8]
 8005ec0:	0211      	lsls	r1, r2, #8
 8005ec2:	687a      	ldr	r2, [r7, #4]
 8005ec4:	6912      	ldr	r2, [r2, #16]
 8005ec6:	0852      	lsrs	r2, r2, #1
 8005ec8:	3a01      	subs	r2, #1
 8005eca:	0652      	lsls	r2, r2, #25
 8005ecc:	430a      	orrs	r2, r1
 8005ece:	4916      	ldr	r1, [pc, #88]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8005ed4:	4b14      	ldr	r3, [pc, #80]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a13      	ldr	r2, [pc, #76]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005eda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ede:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ee0:	f7fc f972 	bl	80021c8 <HAL_GetTick>
 8005ee4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005ee6:	e009      	b.n	8005efc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005ee8:	f7fc f96e 	bl	80021c8 <HAL_GetTick>
 8005eec:	4602      	mov	r2, r0
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	1ad3      	subs	r3, r2, r3
 8005ef2:	2b02      	cmp	r3, #2
 8005ef4:	d902      	bls.n	8005efc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8005ef6:	2303      	movs	r3, #3
 8005ef8:	73fb      	strb	r3, [r7, #15]
          break;
 8005efa:	e005      	b.n	8005f08 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005efc:	4b0a      	ldr	r3, [pc, #40]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d0ef      	beq.n	8005ee8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005f08:	7bfb      	ldrb	r3, [r7, #15]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d106      	bne.n	8005f1c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005f0e:	4b06      	ldr	r3, [pc, #24]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f10:	695a      	ldr	r2, [r3, #20]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	4904      	ldr	r1, [pc, #16]	@ (8005f28 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005f1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f1e:	4618      	mov	r0, r3
 8005f20:	3710      	adds	r7, #16
 8005f22:	46bd      	mov	sp, r7
 8005f24:	bd80      	pop	{r7, pc}
 8005f26:	bf00      	nop
 8005f28:	40021000 	.word	0x40021000

08005f2c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d101      	bne.n	8005f3e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	e049      	b.n	8005fd2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005f44:	b2db      	uxtb	r3, r3
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d106      	bne.n	8005f58 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f000 f841 	bl	8005fda <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2202      	movs	r2, #2
 8005f5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681a      	ldr	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f000 f9f8 	bl	8006360 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2201      	movs	r2, #1
 8005f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2201      	movs	r2, #1
 8005f8c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	2201      	movs	r2, #1
 8005f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2201      	movs	r2, #1
 8005fac:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2201      	movs	r2, #1
 8005fbc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2201      	movs	r2, #1
 8005fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005fd0:	2300      	movs	r3, #0
}
 8005fd2:	4618      	mov	r0, r3
 8005fd4:	3708      	adds	r7, #8
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	bd80      	pop	{r7, pc}

08005fda <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005fda:	b480      	push	{r7}
 8005fdc:	b083      	sub	sp, #12
 8005fde:	af00      	add	r7, sp, #0
 8005fe0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005fe2:	bf00      	nop
 8005fe4:	370c      	adds	r7, #12
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
	...

08005ff0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b085      	sub	sp, #20
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ffe:	b2db      	uxtb	r3, r3
 8006000:	2b01      	cmp	r3, #1
 8006002:	d001      	beq.n	8006008 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006004:	2301      	movs	r3, #1
 8006006:	e04f      	b.n	80060a8 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2202      	movs	r2, #2
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	68da      	ldr	r2, [r3, #12]
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f042 0201 	orr.w	r2, r2, #1
 800601e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	4a23      	ldr	r2, [pc, #140]	@ (80060b4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006026:	4293      	cmp	r3, r2
 8006028:	d01d      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006032:	d018      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	4a1f      	ldr	r2, [pc, #124]	@ (80060b8 <HAL_TIM_Base_Start_IT+0xc8>)
 800603a:	4293      	cmp	r3, r2
 800603c:	d013      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1e      	ldr	r2, [pc, #120]	@ (80060bc <HAL_TIM_Base_Start_IT+0xcc>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00e      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4a1c      	ldr	r2, [pc, #112]	@ (80060c0 <HAL_TIM_Base_Start_IT+0xd0>)
 800604e:	4293      	cmp	r3, r2
 8006050:	d009      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4a1b      	ldr	r2, [pc, #108]	@ (80060c4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d004      	beq.n	8006066 <HAL_TIM_Base_Start_IT+0x76>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4a19      	ldr	r2, [pc, #100]	@ (80060c8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006062:	4293      	cmp	r3, r2
 8006064:	d115      	bne.n	8006092 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	689a      	ldr	r2, [r3, #8]
 800606c:	4b17      	ldr	r3, [pc, #92]	@ (80060cc <HAL_TIM_Base_Start_IT+0xdc>)
 800606e:	4013      	ands	r3, r2
 8006070:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2b06      	cmp	r3, #6
 8006076:	d015      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0xb4>
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800607e:	d011      	beq.n	80060a4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f042 0201 	orr.w	r2, r2, #1
 800608e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006090:	e008      	b.n	80060a4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f042 0201 	orr.w	r2, r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e000      	b.n	80060a6 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80060a6:	2300      	movs	r3, #0
}
 80060a8:	4618      	mov	r0, r3
 80060aa:	3714      	adds	r7, #20
 80060ac:	46bd      	mov	sp, r7
 80060ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b2:	4770      	bx	lr
 80060b4:	40012c00 	.word	0x40012c00
 80060b8:	40000400 	.word	0x40000400
 80060bc:	40000800 	.word	0x40000800
 80060c0:	40000c00 	.word	0x40000c00
 80060c4:	40013400 	.word	0x40013400
 80060c8:	40014000 	.word	0x40014000
 80060cc:	00010007 	.word	0x00010007

080060d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	691b      	ldr	r3, [r3, #16]
 80060de:	f003 0302 	and.w	r3, r3, #2
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d122      	bne.n	800612c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68db      	ldr	r3, [r3, #12]
 80060ec:	f003 0302 	and.w	r3, r3, #2
 80060f0:	2b02      	cmp	r3, #2
 80060f2:	d11b      	bne.n	800612c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f06f 0202 	mvn.w	r2, #2
 80060fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	699b      	ldr	r3, [r3, #24]
 800610a:	f003 0303 	and.w	r3, r3, #3
 800610e:	2b00      	cmp	r3, #0
 8006110:	d003      	beq.n	800611a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f905 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8006118:	e005      	b.n	8006126 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f8f7 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006120:	6878      	ldr	r0, [r7, #4]
 8006122:	f000 f908 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	2200      	movs	r2, #0
 800612a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	691b      	ldr	r3, [r3, #16]
 8006132:	f003 0304 	and.w	r3, r3, #4
 8006136:	2b04      	cmp	r3, #4
 8006138:	d122      	bne.n	8006180 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f003 0304 	and.w	r3, r3, #4
 8006144:	2b04      	cmp	r3, #4
 8006146:	d11b      	bne.n	8006180 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f06f 0204 	mvn.w	r2, #4
 8006150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699b      	ldr	r3, [r3, #24]
 800615e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006162:	2b00      	cmp	r3, #0
 8006164:	d003      	beq.n	800616e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006166:	6878      	ldr	r0, [r7, #4]
 8006168:	f000 f8db 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 800616c:	e005      	b.n	800617a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 f8cd 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 f8de 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	2200      	movs	r2, #0
 800617e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	f003 0308 	and.w	r3, r3, #8
 800618a:	2b08      	cmp	r3, #8
 800618c:	d122      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	f003 0308 	and.w	r3, r3, #8
 8006198:	2b08      	cmp	r3, #8
 800619a:	d11b      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f06f 0208 	mvn.w	r2, #8
 80061a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2204      	movs	r2, #4
 80061aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	69db      	ldr	r3, [r3, #28]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d003      	beq.n	80061c2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 f8b1 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 80061c0:	e005      	b.n	80061ce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f8a3 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 f8b4 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2200      	movs	r2, #0
 80061d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	691b      	ldr	r3, [r3, #16]
 80061da:	f003 0310 	and.w	r3, r3, #16
 80061de:	2b10      	cmp	r3, #16
 80061e0:	d122      	bne.n	8006228 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	68db      	ldr	r3, [r3, #12]
 80061e8:	f003 0310 	and.w	r3, r3, #16
 80061ec:	2b10      	cmp	r3, #16
 80061ee:	d11b      	bne.n	8006228 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f06f 0210 	mvn.w	r2, #16
 80061f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	2208      	movs	r2, #8
 80061fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	69db      	ldr	r3, [r3, #28]
 8006206:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f887 	bl	8006322 <HAL_TIM_IC_CaptureCallback>
 8006214:	e005      	b.n	8006222 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f879 	bl	800630e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800621c:	6878      	ldr	r0, [r7, #4]
 800621e:	f000 f88a 	bl	8006336 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b01      	cmp	r3, #1
 8006234:	d10e      	bne.n	8006254 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	2b01      	cmp	r3, #1
 8006242:	d107      	bne.n	8006254 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0201 	mvn.w	r2, #1
 800624c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fb fa56 	bl	8001700 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800625e:	2b80      	cmp	r3, #128	@ 0x80
 8006260:	d10e      	bne.n	8006280 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800626c:	2b80      	cmp	r3, #128	@ 0x80
 800626e:	d107      	bne.n	8006280 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f914 	bl	80064a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	691b      	ldr	r3, [r3, #16]
 8006286:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800628a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800628e:	d10e      	bne.n	80062ae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800629a:	2b80      	cmp	r3, #128	@ 0x80
 800629c:	d107      	bne.n	80062ae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80062a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 f907 	bl	80064bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	691b      	ldr	r3, [r3, #16]
 80062b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b8:	2b40      	cmp	r3, #64	@ 0x40
 80062ba:	d10e      	bne.n	80062da <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68db      	ldr	r3, [r3, #12]
 80062c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c6:	2b40      	cmp	r3, #64	@ 0x40
 80062c8:	d107      	bne.n	80062da <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80062d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80062d4:	6878      	ldr	r0, [r7, #4]
 80062d6:	f000 f838 	bl	800634a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	691b      	ldr	r3, [r3, #16]
 80062e0:	f003 0320 	and.w	r3, r3, #32
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d10e      	bne.n	8006306 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	68db      	ldr	r3, [r3, #12]
 80062ee:	f003 0320 	and.w	r3, r3, #32
 80062f2:	2b20      	cmp	r3, #32
 80062f4:	d107      	bne.n	8006306 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f06f 0220 	mvn.w	r2, #32
 80062fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006300:	6878      	ldr	r0, [r7, #4]
 8006302:	f000 f8c7 	bl	8006494 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006306:	bf00      	nop
 8006308:	3708      	adds	r7, #8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800630e:	b480      	push	{r7}
 8006310:	b083      	sub	sp, #12
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800632a:	bf00      	nop
 800632c:	370c      	adds	r7, #12
 800632e:	46bd      	mov	sp, r7
 8006330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006334:	4770      	bx	lr

08006336 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006336:	b480      	push	{r7}
 8006338:	b083      	sub	sp, #12
 800633a:	af00      	add	r7, sp, #0
 800633c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800633e:	bf00      	nop
 8006340:	370c      	adds	r7, #12
 8006342:	46bd      	mov	sp, r7
 8006344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006348:	4770      	bx	lr

0800634a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800634a:	b480      	push	{r7}
 800634c:	b083      	sub	sp, #12
 800634e:	af00      	add	r7, sp, #0
 8006350:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006352:	bf00      	nop
 8006354:	370c      	adds	r7, #12
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr
	...

08006360 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006360:	b480      	push	{r7}
 8006362:	b085      	sub	sp, #20
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a40      	ldr	r2, [pc, #256]	@ (8006474 <TIM_Base_SetConfig+0x114>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d013      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800637e:	d00f      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a3d      	ldr	r2, [pc, #244]	@ (8006478 <TIM_Base_SetConfig+0x118>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d00b      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	4a3c      	ldr	r2, [pc, #240]	@ (800647c <TIM_Base_SetConfig+0x11c>)
 800638c:	4293      	cmp	r3, r2
 800638e:	d007      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	4a3b      	ldr	r2, [pc, #236]	@ (8006480 <TIM_Base_SetConfig+0x120>)
 8006394:	4293      	cmp	r3, r2
 8006396:	d003      	beq.n	80063a0 <TIM_Base_SetConfig+0x40>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	4a3a      	ldr	r2, [pc, #232]	@ (8006484 <TIM_Base_SetConfig+0x124>)
 800639c:	4293      	cmp	r3, r2
 800639e:	d108      	bne.n	80063b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80063a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	68fa      	ldr	r2, [r7, #12]
 80063ae:	4313      	orrs	r3, r2
 80063b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a2f      	ldr	r2, [pc, #188]	@ (8006474 <TIM_Base_SetConfig+0x114>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d01f      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063c0:	d01b      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2c      	ldr	r2, [pc, #176]	@ (8006478 <TIM_Base_SetConfig+0x118>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d017      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a2b      	ldr	r2, [pc, #172]	@ (800647c <TIM_Base_SetConfig+0x11c>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d013      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2a      	ldr	r2, [pc, #168]	@ (8006480 <TIM_Base_SetConfig+0x120>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00f      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a29      	ldr	r2, [pc, #164]	@ (8006484 <TIM_Base_SetConfig+0x124>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00b      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a28      	ldr	r2, [pc, #160]	@ (8006488 <TIM_Base_SetConfig+0x128>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d007      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a27      	ldr	r2, [pc, #156]	@ (800648c <TIM_Base_SetConfig+0x12c>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <TIM_Base_SetConfig+0x9a>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a26      	ldr	r2, [pc, #152]	@ (8006490 <TIM_Base_SetConfig+0x130>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d108      	bne.n	800640c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a10      	ldr	r2, [pc, #64]	@ (8006474 <TIM_Base_SetConfig+0x114>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d00f      	beq.n	8006458 <TIM_Base_SetConfig+0xf8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a12      	ldr	r2, [pc, #72]	@ (8006484 <TIM_Base_SetConfig+0x124>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d00b      	beq.n	8006458 <TIM_Base_SetConfig+0xf8>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	4a11      	ldr	r2, [pc, #68]	@ (8006488 <TIM_Base_SetConfig+0x128>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d007      	beq.n	8006458 <TIM_Base_SetConfig+0xf8>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	4a10      	ldr	r2, [pc, #64]	@ (800648c <TIM_Base_SetConfig+0x12c>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d003      	beq.n	8006458 <TIM_Base_SetConfig+0xf8>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	4a0f      	ldr	r2, [pc, #60]	@ (8006490 <TIM_Base_SetConfig+0x130>)
 8006454:	4293      	cmp	r3, r2
 8006456:	d103      	bne.n	8006460 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	691a      	ldr	r2, [r3, #16]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2201      	movs	r2, #1
 8006464:	615a      	str	r2, [r3, #20]
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40012c00 	.word	0x40012c00
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40000c00 	.word	0x40000c00
 8006484:	40013400 	.word	0x40013400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800

08006494 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006494:	b480      	push	{r7}
 8006496:	b083      	sub	sp, #12
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800649c:	bf00      	nop
 800649e:	370c      	adds	r7, #12
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b083      	sub	sp, #12
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064b0:	bf00      	nop
 80064b2:	370c      	adds	r7, #12
 80064b4:	46bd      	mov	sp, r7
 80064b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ba:	4770      	bx	lr

080064bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80064bc:	b480      	push	{r7}
 80064be:	b083      	sub	sp, #12
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80064c4:	bf00      	nop
 80064c6:	370c      	adds	r7, #12
 80064c8:	46bd      	mov	sp, r7
 80064ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ce:	4770      	bx	lr

080064d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d101      	bne.n	80064e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e040      	b.n	8006564 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d106      	bne.n	80064f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80064f2:	6878      	ldr	r0, [r7, #4]
 80064f4:	f7fb fcca 	bl	8001e8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	2224      	movs	r2, #36	@ 0x24
 80064fc:	679a      	str	r2, [r3, #120]	@ 0x78

  __HAL_UART_DISABLE(huart);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681a      	ldr	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f022 0201 	bic.w	r2, r2, #1
 800650c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f8c0 	bl	8006694 <UART_SetConfig>
 8006514:	4603      	mov	r3, r0
 8006516:	2b01      	cmp	r3, #1
 8006518:	d101      	bne.n	800651e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800651a:	2301      	movs	r3, #1
 800651c:	e022      	b.n	8006564 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006522:	2b00      	cmp	r3, #0
 8006524:	d002      	beq.n	800652c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006526:	6878      	ldr	r0, [r7, #4]
 8006528:	f000 fb6c 	bl	8006c04 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685a      	ldr	r2, [r3, #4]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800653a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800654a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	681a      	ldr	r2, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 fbf3 	bl	8006d48 <UART_CheckIdleState>
 8006562:	4603      	mov	r3, r0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b08a      	sub	sp, #40	@ 0x28
 8006570:	af02      	add	r7, sp, #8
 8006572:	60f8      	str	r0, [r7, #12]
 8006574:	60b9      	str	r1, [r7, #8]
 8006576:	603b      	str	r3, [r7, #0]
 8006578:	4613      	mov	r3, r2
 800657a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006580:	2b20      	cmp	r3, #32
 8006582:	f040 8081 	bne.w	8006688 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <HAL_UART_Transmit+0x26>
 800658c:	88fb      	ldrh	r3, [r7, #6]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d101      	bne.n	8006596 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e079      	b.n	800668a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 3074 	ldrb.w	r3, [r3, #116]	@ 0x74
 800659c:	2b01      	cmp	r3, #1
 800659e:	d101      	bne.n	80065a4 <HAL_UART_Transmit+0x38>
 80065a0:	2302      	movs	r3, #2
 80065a2:	e072      	b.n	800668a <HAL_UART_Transmit+0x11e>
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2201      	movs	r2, #1
 80065a8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2221      	movs	r2, #33	@ 0x21
 80065b8:	679a      	str	r2, [r3, #120]	@ 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ba:	f7fb fe05 	bl	80021c8 <HAL_GetTick>
 80065be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	88fa      	ldrh	r2, [r7, #6]
 80065c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	88fa      	ldrh	r2, [r7, #6]
 80065cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065d8:	d108      	bne.n	80065ec <HAL_UART_Transmit+0x80>
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	691b      	ldr	r3, [r3, #16]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d104      	bne.n	80065ec <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80065e2:	2300      	movs	r3, #0
 80065e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	61bb      	str	r3, [r7, #24]
 80065ea:	e003      	b.n	80065f4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80065f0:	2300      	movs	r3, #0
 80065f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	2200      	movs	r2, #0
 80065f8:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

    while (huart->TxXferCount > 0U)
 80065fc:	e02c      	b.n	8006658 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80065fe:	683b      	ldr	r3, [r7, #0]
 8006600:	9300      	str	r3, [sp, #0]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	2200      	movs	r2, #0
 8006606:	2180      	movs	r1, #128	@ 0x80
 8006608:	68f8      	ldr	r0, [r7, #12]
 800660a:	f000 fbe6 	bl	8006dda <UART_WaitOnFlagUntilTimeout>
 800660e:	4603      	mov	r3, r0
 8006610:	2b00      	cmp	r3, #0
 8006612:	d001      	beq.n	8006618 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	e038      	b.n	800668a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006618:	69fb      	ldr	r3, [r7, #28]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d10b      	bne.n	8006636 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	881a      	ldrh	r2, [r3, #0]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800662a:	b292      	uxth	r2, r2
 800662c:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	3302      	adds	r3, #2
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	e007      	b.n	8006646 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	781a      	ldrb	r2, [r3, #0]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	3301      	adds	r3, #1
 8006644:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800664c:	b29b      	uxth	r3, r3
 800664e:	3b01      	subs	r3, #1
 8006650:	b29a      	uxth	r2, r3
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800665e:	b29b      	uxth	r3, r3
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1cc      	bne.n	80065fe <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	9300      	str	r3, [sp, #0]
 8006668:	697b      	ldr	r3, [r7, #20]
 800666a:	2200      	movs	r2, #0
 800666c:	2140      	movs	r1, #64	@ 0x40
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f000 fbb3 	bl	8006dda <UART_WaitOnFlagUntilTimeout>
 8006674:	4603      	mov	r3, r0
 8006676:	2b00      	cmp	r3, #0
 8006678:	d001      	beq.n	800667e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e005      	b.n	800668a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	2220      	movs	r2, #32
 8006682:	679a      	str	r2, [r3, #120]	@ 0x78

    return HAL_OK;
 8006684:	2300      	movs	r3, #0
 8006686:	e000      	b.n	800668a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006688:	2302      	movs	r3, #2
  }
}
 800668a:	4618      	mov	r0, r3
 800668c:	3720      	adds	r7, #32
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006694:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006698:	b08a      	sub	sp, #40	@ 0x28
 800669a:	af00      	add	r7, sp, #0
 800669c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800669e:	2300      	movs	r3, #0
 80066a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	681a      	ldr	r2, [r3, #0]
 80066c2:	4ba4      	ldr	r3, [pc, #656]	@ (8006954 <UART_SetConfig+0x2c0>)
 80066c4:	4013      	ands	r3, r2
 80066c6:	68fa      	ldr	r2, [r7, #12]
 80066c8:	6812      	ldr	r2, [r2, #0]
 80066ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80066cc:	430b      	orrs	r3, r1
 80066ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	68da      	ldr	r2, [r3, #12]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	430a      	orrs	r2, r1
 80066e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	699b      	ldr	r3, [r3, #24]
 80066ea:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a99      	ldr	r2, [pc, #612]	@ (8006958 <UART_SetConfig+0x2c4>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d004      	beq.n	8006700 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6a1b      	ldr	r3, [r3, #32]
 80066fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066fc:	4313      	orrs	r3, r2
 80066fe:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006710:	430a      	orrs	r2, r1
 8006712:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	4a90      	ldr	r2, [pc, #576]	@ (800695c <UART_SetConfig+0x2c8>)
 800671a:	4293      	cmp	r3, r2
 800671c:	d126      	bne.n	800676c <UART_SetConfig+0xd8>
 800671e:	4b90      	ldr	r3, [pc, #576]	@ (8006960 <UART_SetConfig+0x2cc>)
 8006720:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006724:	f003 0303 	and.w	r3, r3, #3
 8006728:	2b03      	cmp	r3, #3
 800672a:	d81b      	bhi.n	8006764 <UART_SetConfig+0xd0>
 800672c:	a201      	add	r2, pc, #4	@ (adr r2, 8006734 <UART_SetConfig+0xa0>)
 800672e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006732:	bf00      	nop
 8006734:	08006745 	.word	0x08006745
 8006738:	08006755 	.word	0x08006755
 800673c:	0800674d 	.word	0x0800674d
 8006740:	0800675d 	.word	0x0800675d
 8006744:	2301      	movs	r3, #1
 8006746:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800674a:	e116      	b.n	800697a <UART_SetConfig+0x2e6>
 800674c:	2302      	movs	r3, #2
 800674e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006752:	e112      	b.n	800697a <UART_SetConfig+0x2e6>
 8006754:	2304      	movs	r3, #4
 8006756:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800675a:	e10e      	b.n	800697a <UART_SetConfig+0x2e6>
 800675c:	2308      	movs	r3, #8
 800675e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006762:	e10a      	b.n	800697a <UART_SetConfig+0x2e6>
 8006764:	2310      	movs	r3, #16
 8006766:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800676a:	e106      	b.n	800697a <UART_SetConfig+0x2e6>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4a7c      	ldr	r2, [pc, #496]	@ (8006964 <UART_SetConfig+0x2d0>)
 8006772:	4293      	cmp	r3, r2
 8006774:	d138      	bne.n	80067e8 <UART_SetConfig+0x154>
 8006776:	4b7a      	ldr	r3, [pc, #488]	@ (8006960 <UART_SetConfig+0x2cc>)
 8006778:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800677c:	f003 030c 	and.w	r3, r3, #12
 8006780:	2b0c      	cmp	r3, #12
 8006782:	d82d      	bhi.n	80067e0 <UART_SetConfig+0x14c>
 8006784:	a201      	add	r2, pc, #4	@ (adr r2, 800678c <UART_SetConfig+0xf8>)
 8006786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800678a:	bf00      	nop
 800678c:	080067c1 	.word	0x080067c1
 8006790:	080067e1 	.word	0x080067e1
 8006794:	080067e1 	.word	0x080067e1
 8006798:	080067e1 	.word	0x080067e1
 800679c:	080067d1 	.word	0x080067d1
 80067a0:	080067e1 	.word	0x080067e1
 80067a4:	080067e1 	.word	0x080067e1
 80067a8:	080067e1 	.word	0x080067e1
 80067ac:	080067c9 	.word	0x080067c9
 80067b0:	080067e1 	.word	0x080067e1
 80067b4:	080067e1 	.word	0x080067e1
 80067b8:	080067e1 	.word	0x080067e1
 80067bc:	080067d9 	.word	0x080067d9
 80067c0:	2300      	movs	r3, #0
 80067c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067c6:	e0d8      	b.n	800697a <UART_SetConfig+0x2e6>
 80067c8:	2302      	movs	r3, #2
 80067ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067ce:	e0d4      	b.n	800697a <UART_SetConfig+0x2e6>
 80067d0:	2304      	movs	r3, #4
 80067d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067d6:	e0d0      	b.n	800697a <UART_SetConfig+0x2e6>
 80067d8:	2308      	movs	r3, #8
 80067da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067de:	e0cc      	b.n	800697a <UART_SetConfig+0x2e6>
 80067e0:	2310      	movs	r3, #16
 80067e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80067e6:	e0c8      	b.n	800697a <UART_SetConfig+0x2e6>
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	4a5e      	ldr	r2, [pc, #376]	@ (8006968 <UART_SetConfig+0x2d4>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d125      	bne.n	800683e <UART_SetConfig+0x1aa>
 80067f2:	4b5b      	ldr	r3, [pc, #364]	@ (8006960 <UART_SetConfig+0x2cc>)
 80067f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067f8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80067fc:	2b30      	cmp	r3, #48	@ 0x30
 80067fe:	d016      	beq.n	800682e <UART_SetConfig+0x19a>
 8006800:	2b30      	cmp	r3, #48	@ 0x30
 8006802:	d818      	bhi.n	8006836 <UART_SetConfig+0x1a2>
 8006804:	2b20      	cmp	r3, #32
 8006806:	d00a      	beq.n	800681e <UART_SetConfig+0x18a>
 8006808:	2b20      	cmp	r3, #32
 800680a:	d814      	bhi.n	8006836 <UART_SetConfig+0x1a2>
 800680c:	2b00      	cmp	r3, #0
 800680e:	d002      	beq.n	8006816 <UART_SetConfig+0x182>
 8006810:	2b10      	cmp	r3, #16
 8006812:	d008      	beq.n	8006826 <UART_SetConfig+0x192>
 8006814:	e00f      	b.n	8006836 <UART_SetConfig+0x1a2>
 8006816:	2300      	movs	r3, #0
 8006818:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800681c:	e0ad      	b.n	800697a <UART_SetConfig+0x2e6>
 800681e:	2302      	movs	r3, #2
 8006820:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006824:	e0a9      	b.n	800697a <UART_SetConfig+0x2e6>
 8006826:	2304      	movs	r3, #4
 8006828:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800682c:	e0a5      	b.n	800697a <UART_SetConfig+0x2e6>
 800682e:	2308      	movs	r3, #8
 8006830:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006834:	e0a1      	b.n	800697a <UART_SetConfig+0x2e6>
 8006836:	2310      	movs	r3, #16
 8006838:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800683c:	e09d      	b.n	800697a <UART_SetConfig+0x2e6>
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a4a      	ldr	r2, [pc, #296]	@ (800696c <UART_SetConfig+0x2d8>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d125      	bne.n	8006894 <UART_SetConfig+0x200>
 8006848:	4b45      	ldr	r3, [pc, #276]	@ (8006960 <UART_SetConfig+0x2cc>)
 800684a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800684e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006852:	2bc0      	cmp	r3, #192	@ 0xc0
 8006854:	d016      	beq.n	8006884 <UART_SetConfig+0x1f0>
 8006856:	2bc0      	cmp	r3, #192	@ 0xc0
 8006858:	d818      	bhi.n	800688c <UART_SetConfig+0x1f8>
 800685a:	2b80      	cmp	r3, #128	@ 0x80
 800685c:	d00a      	beq.n	8006874 <UART_SetConfig+0x1e0>
 800685e:	2b80      	cmp	r3, #128	@ 0x80
 8006860:	d814      	bhi.n	800688c <UART_SetConfig+0x1f8>
 8006862:	2b00      	cmp	r3, #0
 8006864:	d002      	beq.n	800686c <UART_SetConfig+0x1d8>
 8006866:	2b40      	cmp	r3, #64	@ 0x40
 8006868:	d008      	beq.n	800687c <UART_SetConfig+0x1e8>
 800686a:	e00f      	b.n	800688c <UART_SetConfig+0x1f8>
 800686c:	2300      	movs	r3, #0
 800686e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006872:	e082      	b.n	800697a <UART_SetConfig+0x2e6>
 8006874:	2302      	movs	r3, #2
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800687a:	e07e      	b.n	800697a <UART_SetConfig+0x2e6>
 800687c:	2304      	movs	r3, #4
 800687e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006882:	e07a      	b.n	800697a <UART_SetConfig+0x2e6>
 8006884:	2308      	movs	r3, #8
 8006886:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800688a:	e076      	b.n	800697a <UART_SetConfig+0x2e6>
 800688c:	2310      	movs	r3, #16
 800688e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006892:	e072      	b.n	800697a <UART_SetConfig+0x2e6>
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a35      	ldr	r2, [pc, #212]	@ (8006970 <UART_SetConfig+0x2dc>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d12a      	bne.n	80068f4 <UART_SetConfig+0x260>
 800689e:	4b30      	ldr	r3, [pc, #192]	@ (8006960 <UART_SetConfig+0x2cc>)
 80068a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80068a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80068a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068ac:	d01a      	beq.n	80068e4 <UART_SetConfig+0x250>
 80068ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80068b2:	d81b      	bhi.n	80068ec <UART_SetConfig+0x258>
 80068b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068b8:	d00c      	beq.n	80068d4 <UART_SetConfig+0x240>
 80068ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068be:	d815      	bhi.n	80068ec <UART_SetConfig+0x258>
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d003      	beq.n	80068cc <UART_SetConfig+0x238>
 80068c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80068c8:	d008      	beq.n	80068dc <UART_SetConfig+0x248>
 80068ca:	e00f      	b.n	80068ec <UART_SetConfig+0x258>
 80068cc:	2300      	movs	r3, #0
 80068ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068d2:	e052      	b.n	800697a <UART_SetConfig+0x2e6>
 80068d4:	2302      	movs	r3, #2
 80068d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068da:	e04e      	b.n	800697a <UART_SetConfig+0x2e6>
 80068dc:	2304      	movs	r3, #4
 80068de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068e2:	e04a      	b.n	800697a <UART_SetConfig+0x2e6>
 80068e4:	2308      	movs	r3, #8
 80068e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068ea:	e046      	b.n	800697a <UART_SetConfig+0x2e6>
 80068ec:	2310      	movs	r3, #16
 80068ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80068f2:	e042      	b.n	800697a <UART_SetConfig+0x2e6>
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	4a17      	ldr	r2, [pc, #92]	@ (8006958 <UART_SetConfig+0x2c4>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d13a      	bne.n	8006974 <UART_SetConfig+0x2e0>
 80068fe:	4b18      	ldr	r3, [pc, #96]	@ (8006960 <UART_SetConfig+0x2cc>)
 8006900:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006904:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006908:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800690c:	d01a      	beq.n	8006944 <UART_SetConfig+0x2b0>
 800690e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006912:	d81b      	bhi.n	800694c <UART_SetConfig+0x2b8>
 8006914:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006918:	d00c      	beq.n	8006934 <UART_SetConfig+0x2a0>
 800691a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800691e:	d815      	bhi.n	800694c <UART_SetConfig+0x2b8>
 8006920:	2b00      	cmp	r3, #0
 8006922:	d003      	beq.n	800692c <UART_SetConfig+0x298>
 8006924:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006928:	d008      	beq.n	800693c <UART_SetConfig+0x2a8>
 800692a:	e00f      	b.n	800694c <UART_SetConfig+0x2b8>
 800692c:	2300      	movs	r3, #0
 800692e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006932:	e022      	b.n	800697a <UART_SetConfig+0x2e6>
 8006934:	2302      	movs	r3, #2
 8006936:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800693a:	e01e      	b.n	800697a <UART_SetConfig+0x2e6>
 800693c:	2304      	movs	r3, #4
 800693e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006942:	e01a      	b.n	800697a <UART_SetConfig+0x2e6>
 8006944:	2308      	movs	r3, #8
 8006946:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800694a:	e016      	b.n	800697a <UART_SetConfig+0x2e6>
 800694c:	2310      	movs	r3, #16
 800694e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006952:	e012      	b.n	800697a <UART_SetConfig+0x2e6>
 8006954:	efff69f3 	.word	0xefff69f3
 8006958:	40008000 	.word	0x40008000
 800695c:	40013800 	.word	0x40013800
 8006960:	40021000 	.word	0x40021000
 8006964:	40004400 	.word	0x40004400
 8006968:	40004800 	.word	0x40004800
 800696c:	40004c00 	.word	0x40004c00
 8006970:	40005000 	.word	0x40005000
 8006974:	2310      	movs	r3, #16
 8006976:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4a9f      	ldr	r2, [pc, #636]	@ (8006bfc <UART_SetConfig+0x568>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d17a      	bne.n	8006a7a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006984:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006988:	2b08      	cmp	r3, #8
 800698a:	d824      	bhi.n	80069d6 <UART_SetConfig+0x342>
 800698c:	a201      	add	r2, pc, #4	@ (adr r2, 8006994 <UART_SetConfig+0x300>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069b9 	.word	0x080069b9
 8006998:	080069d7 	.word	0x080069d7
 800699c:	080069c1 	.word	0x080069c1
 80069a0:	080069d7 	.word	0x080069d7
 80069a4:	080069c7 	.word	0x080069c7
 80069a8:	080069d7 	.word	0x080069d7
 80069ac:	080069d7 	.word	0x080069d7
 80069b0:	080069d7 	.word	0x080069d7
 80069b4:	080069cf 	.word	0x080069cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80069b8:	f7fe fd3e 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 80069bc:	61f8      	str	r0, [r7, #28]
        break;
 80069be:	e010      	b.n	80069e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80069c0:	4b8f      	ldr	r3, [pc, #572]	@ (8006c00 <UART_SetConfig+0x56c>)
 80069c2:	61fb      	str	r3, [r7, #28]
        break;
 80069c4:	e00d      	b.n	80069e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80069c6:	f7fe fc9f 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 80069ca:	61f8      	str	r0, [r7, #28]
        break;
 80069cc:	e009      	b.n	80069e2 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80069ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80069d2:	61fb      	str	r3, [r7, #28]
        break;
 80069d4:	e005      	b.n	80069e2 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80069d6:	2300      	movs	r3, #0
 80069d8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80069e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80fb 	beq.w	8006be0 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	685a      	ldr	r2, [r3, #4]
 80069ee:	4613      	mov	r3, r2
 80069f0:	005b      	lsls	r3, r3, #1
 80069f2:	4413      	add	r3, r2
 80069f4:	69fa      	ldr	r2, [r7, #28]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d305      	bcc.n	8006a06 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	429a      	cmp	r2, r3
 8006a04:	d903      	bls.n	8006a0e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a0c:	e0e8      	b.n	8006be0 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006a0e:	69fb      	ldr	r3, [r7, #28]
 8006a10:	2200      	movs	r2, #0
 8006a12:	461c      	mov	r4, r3
 8006a14:	4615      	mov	r5, r2
 8006a16:	f04f 0200 	mov.w	r2, #0
 8006a1a:	f04f 0300 	mov.w	r3, #0
 8006a1e:	022b      	lsls	r3, r5, #8
 8006a20:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006a24:	0222      	lsls	r2, r4, #8
 8006a26:	68f9      	ldr	r1, [r7, #12]
 8006a28:	6849      	ldr	r1, [r1, #4]
 8006a2a:	0849      	lsrs	r1, r1, #1
 8006a2c:	2000      	movs	r0, #0
 8006a2e:	4688      	mov	r8, r1
 8006a30:	4681      	mov	r9, r0
 8006a32:	eb12 0a08 	adds.w	sl, r2, r8
 8006a36:	eb43 0b09 	adc.w	fp, r3, r9
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	2200      	movs	r2, #0
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	607a      	str	r2, [r7, #4]
 8006a44:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006a48:	4650      	mov	r0, sl
 8006a4a:	4659      	mov	r1, fp
 8006a4c:	f7fa f836 	bl	8000abc <__aeabi_uldivmod>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	4613      	mov	r3, r2
 8006a56:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006a5e:	d308      	bcc.n	8006a72 <UART_SetConfig+0x3de>
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006a66:	d204      	bcs.n	8006a72 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	60da      	str	r2, [r3, #12]
 8006a70:	e0b6      	b.n	8006be0 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006a72:	2301      	movs	r3, #1
 8006a74:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006a78:	e0b2      	b.n	8006be0 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006a82:	d15e      	bne.n	8006b42 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006a84:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006a88:	2b08      	cmp	r3, #8
 8006a8a:	d828      	bhi.n	8006ade <UART_SetConfig+0x44a>
 8006a8c:	a201      	add	r2, pc, #4	@ (adr r2, 8006a94 <UART_SetConfig+0x400>)
 8006a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006ab9 	.word	0x08006ab9
 8006a98:	08006ac1 	.word	0x08006ac1
 8006a9c:	08006ac9 	.word	0x08006ac9
 8006aa0:	08006adf 	.word	0x08006adf
 8006aa4:	08006acf 	.word	0x08006acf
 8006aa8:	08006adf 	.word	0x08006adf
 8006aac:	08006adf 	.word	0x08006adf
 8006ab0:	08006adf 	.word	0x08006adf
 8006ab4:	08006ad7 	.word	0x08006ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ab8:	f7fe fcbe 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8006abc:	61f8      	str	r0, [r7, #28]
        break;
 8006abe:	e014      	b.n	8006aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ac0:	f7fe fcd0 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8006ac4:	61f8      	str	r0, [r7, #28]
        break;
 8006ac6:	e010      	b.n	8006aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ac8:	4b4d      	ldr	r3, [pc, #308]	@ (8006c00 <UART_SetConfig+0x56c>)
 8006aca:	61fb      	str	r3, [r7, #28]
        break;
 8006acc:	e00d      	b.n	8006aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ace:	f7fe fc1b 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8006ad2:	61f8      	str	r0, [r7, #28]
        break;
 8006ad4:	e009      	b.n	8006aea <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ad6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ada:	61fb      	str	r3, [r7, #28]
        break;
 8006adc:	e005      	b.n	8006aea <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006ade:	2300      	movs	r3, #0
 8006ae0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ae2:	2301      	movs	r3, #1
 8006ae4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ae8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006aea:	69fb      	ldr	r3, [r7, #28]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d077      	beq.n	8006be0 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006af0:	69fb      	ldr	r3, [r7, #28]
 8006af2:	005a      	lsls	r2, r3, #1
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	085b      	lsrs	r3, r3, #1
 8006afa:	441a      	add	r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b04:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006b06:	69bb      	ldr	r3, [r7, #24]
 8006b08:	2b0f      	cmp	r3, #15
 8006b0a:	d916      	bls.n	8006b3a <UART_SetConfig+0x4a6>
 8006b0c:	69bb      	ldr	r3, [r7, #24]
 8006b0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006b12:	d212      	bcs.n	8006b3a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006b14:	69bb      	ldr	r3, [r7, #24]
 8006b16:	b29b      	uxth	r3, r3
 8006b18:	f023 030f 	bic.w	r3, r3, #15
 8006b1c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b1e:	69bb      	ldr	r3, [r7, #24]
 8006b20:	085b      	lsrs	r3, r3, #1
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f003 0307 	and.w	r3, r3, #7
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	8afb      	ldrh	r3, [r7, #22]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	8afa      	ldrh	r2, [r7, #22]
 8006b36:	60da      	str	r2, [r3, #12]
 8006b38:	e052      	b.n	8006be0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006b40:	e04e      	b.n	8006be0 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006b46:	2b08      	cmp	r3, #8
 8006b48:	d827      	bhi.n	8006b9a <UART_SetConfig+0x506>
 8006b4a:	a201      	add	r2, pc, #4	@ (adr r2, 8006b50 <UART_SetConfig+0x4bc>)
 8006b4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b50:	08006b75 	.word	0x08006b75
 8006b54:	08006b7d 	.word	0x08006b7d
 8006b58:	08006b85 	.word	0x08006b85
 8006b5c:	08006b9b 	.word	0x08006b9b
 8006b60:	08006b8b 	.word	0x08006b8b
 8006b64:	08006b9b 	.word	0x08006b9b
 8006b68:	08006b9b 	.word	0x08006b9b
 8006b6c:	08006b9b 	.word	0x08006b9b
 8006b70:	08006b93 	.word	0x08006b93
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b74:	f7fe fc60 	bl	8005438 <HAL_RCC_GetPCLK1Freq>
 8006b78:	61f8      	str	r0, [r7, #28]
        break;
 8006b7a:	e014      	b.n	8006ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b7c:	f7fe fc72 	bl	8005464 <HAL_RCC_GetPCLK2Freq>
 8006b80:	61f8      	str	r0, [r7, #28]
        break;
 8006b82:	e010      	b.n	8006ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b84:	4b1e      	ldr	r3, [pc, #120]	@ (8006c00 <UART_SetConfig+0x56c>)
 8006b86:	61fb      	str	r3, [r7, #28]
        break;
 8006b88:	e00d      	b.n	8006ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b8a:	f7fe fbbd 	bl	8005308 <HAL_RCC_GetSysClockFreq>
 8006b8e:	61f8      	str	r0, [r7, #28]
        break;
 8006b90:	e009      	b.n	8006ba6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b92:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006b96:	61fb      	str	r3, [r7, #28]
        break;
 8006b98:	e005      	b.n	8006ba6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ba4:	bf00      	nop
    }

    if (pclk != 0U)
 8006ba6:	69fb      	ldr	r3, [r7, #28]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d019      	beq.n	8006be0 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	085a      	lsrs	r2, r3, #1
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	441a      	add	r2, r3
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bbe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006bc0:	69bb      	ldr	r3, [r7, #24]
 8006bc2:	2b0f      	cmp	r3, #15
 8006bc4:	d909      	bls.n	8006bda <UART_SetConfig+0x546>
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bcc:	d205      	bcs.n	8006bda <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	60da      	str	r2, [r3, #12]
 8006bd8:	e002      	b.n	8006be0 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	665a      	str	r2, [r3, #100]	@ 0x64
  huart->TxISR = NULL;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	2200      	movs	r2, #0
 8006bea:	669a      	str	r2, [r3, #104]	@ 0x68

  return ret;
 8006bec:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	3728      	adds	r7, #40	@ 0x28
 8006bf4:	46bd      	mov	sp, r7
 8006bf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006bfa:	bf00      	nop
 8006bfc:	40008000 	.word	0x40008000
 8006c00:	00f42400 	.word	0x00f42400

08006c04 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d00a      	beq.n	8006c2e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	430a      	orrs	r2, r1
 8006c2c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d00a      	beq.n	8006c50 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	430a      	orrs	r2, r1
 8006c4e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c54:	f003 0304 	and.w	r3, r3, #4
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d00a      	beq.n	8006c72 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	430a      	orrs	r2, r1
 8006c70:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d00a      	beq.n	8006c94 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	430a      	orrs	r2, r1
 8006c92:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c98:	f003 0310 	and.w	r3, r3, #16
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d00a      	beq.n	8006cb6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	689b      	ldr	r3, [r3, #8]
 8006ca6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	430a      	orrs	r2, r1
 8006cb4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cba:	f003 0320 	and.w	r3, r3, #32
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d00a      	beq.n	8006cd8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	689b      	ldr	r3, [r3, #8]
 8006cc8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	430a      	orrs	r2, r1
 8006cd6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d01a      	beq.n	8006d1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cfe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d02:	d10a      	bne.n	8006d1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	685b      	ldr	r3, [r3, #4]
 8006d0a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	430a      	orrs	r2, r1
 8006d18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	430a      	orrs	r2, r1
 8006d3a:	605a      	str	r2, [r3, #4]
  }
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b086      	sub	sp, #24
 8006d4c:	af02      	add	r7, sp, #8
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2200      	movs	r2, #0
 8006d54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d58:	f7fb fa36 	bl	80021c8 <HAL_GetTick>
 8006d5c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b08      	cmp	r3, #8
 8006d6a:	d10e      	bne.n	8006d8a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d6c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d70:	9300      	str	r3, [sp, #0]
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2200      	movs	r2, #0
 8006d76:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	f000 f82d 	bl	8006dda <UART_WaitOnFlagUntilTimeout>
 8006d80:	4603      	mov	r3, r0
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d001      	beq.n	8006d8a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e023      	b.n	8006dd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f003 0304 	and.w	r3, r3, #4
 8006d94:	2b04      	cmp	r3, #4
 8006d96:	d10e      	bne.n	8006db6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d98:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006da6:	6878      	ldr	r0, [r7, #4]
 8006da8:	f000 f817 	bl	8006dda <UART_WaitOnFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e00d      	b.n	8006dd2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2220      	movs	r2, #32
 8006dba:	679a      	str	r2, [r3, #120]	@ 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	2220      	movs	r2, #32
 8006dc0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	661a      	str	r2, [r3, #96]	@ 0x60

  __HAL_UNLOCK(huart);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	2200      	movs	r2, #0
 8006dcc:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

  return HAL_OK;
 8006dd0:	2300      	movs	r3, #0
}
 8006dd2:	4618      	mov	r0, r3
 8006dd4:	3710      	adds	r7, #16
 8006dd6:	46bd      	mov	sp, r7
 8006dd8:	bd80      	pop	{r7, pc}

08006dda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dda:	b580      	push	{r7, lr}
 8006ddc:	b09c      	sub	sp, #112	@ 0x70
 8006dde:	af00      	add	r7, sp, #0
 8006de0:	60f8      	str	r0, [r7, #12]
 8006de2:	60b9      	str	r1, [r7, #8]
 8006de4:	603b      	str	r3, [r7, #0]
 8006de6:	4613      	mov	r3, r2
 8006de8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dea:	e0a5      	b.n	8006f38 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dee:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006df2:	f000 80a1 	beq.w	8006f38 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df6:	f7fb f9e7 	bl	80021c8 <HAL_GetTick>
 8006dfa:	4602      	mov	r2, r0
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	1ad3      	subs	r3, r2, r3
 8006e00:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006e02:	429a      	cmp	r2, r3
 8006e04:	d302      	bcc.n	8006e0c <UART_WaitOnFlagUntilTimeout+0x32>
 8006e06:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d13e      	bne.n	8006e8a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	653b      	str	r3, [r7, #80]	@ 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e12:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e14:	e853 3f00 	ldrex	r3, [r3]
 8006e18:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8006e1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e1c:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006e20:	667b      	str	r3, [r7, #100]	@ 0x64
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	461a      	mov	r2, r3
 8006e28:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e2a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e2c:	65ba      	str	r2, [r7, #88]	@ 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2e:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006e30:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006e32:	e841 2300 	strex	r3, r2, [r1]
 8006e36:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8006e38:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d1e6      	bne.n	8006e0c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	3308      	adds	r3, #8
 8006e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e46:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e48:	e853 3f00 	ldrex	r3, [r3]
 8006e4c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006e4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e50:	f023 0301 	bic.w	r3, r3, #1
 8006e54:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	3308      	adds	r3, #8
 8006e5c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e5e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8006e60:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e62:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006e64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006e66:	e841 2300 	strex	r3, r2, [r1]
 8006e6a:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006e6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d1e5      	bne.n	8006e3e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	2220      	movs	r2, #32
 8006e76:	679a      	str	r2, [r3, #120]	@ 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        __HAL_UNLOCK(huart);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

        return HAL_TIMEOUT;
 8006e86:	2303      	movs	r3, #3
 8006e88:	e067      	b.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	f003 0304 	and.w	r3, r3, #4
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d04f      	beq.n	8006f38 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	69db      	ldr	r3, [r3, #28]
 8006e9e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006ea2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006ea6:	d147      	bne.n	8006f38 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006eb0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eba:	e853 3f00 	ldrex	r3, [r3]
 8006ebe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec2:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 8006ec6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	461a      	mov	r2, r3
 8006ece:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006ed0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ed2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006ed6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006ed8:	e841 2300 	strex	r3, r2, [r1]
 8006edc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d1e6      	bne.n	8006eb2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	3308      	adds	r3, #8
 8006eea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eec:	697b      	ldr	r3, [r7, #20]
 8006eee:	e853 3f00 	ldrex	r3, [r3]
 8006ef2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ef4:	693b      	ldr	r3, [r7, #16]
 8006ef6:	f023 0301 	bic.w	r3, r3, #1
 8006efa:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	3308      	adds	r3, #8
 8006f02:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006f04:	623a      	str	r2, [r7, #32]
 8006f06:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f08:	69f9      	ldr	r1, [r7, #28]
 8006f0a:	6a3a      	ldr	r2, [r7, #32]
 8006f0c:	e841 2300 	strex	r3, r2, [r1]
 8006f10:	61bb      	str	r3, [r7, #24]
   return(result);
 8006f12:	69bb      	ldr	r3, [r7, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d1e5      	bne.n	8006ee4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	2220      	movs	r2, #32
 8006f1c:	679a      	str	r2, [r3, #120]	@ 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2220      	movs	r2, #32
 8006f22:	67da      	str	r2, [r3, #124]	@ 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	2220      	movs	r2, #32
 8006f28:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2200      	movs	r2, #0
 8006f30:	f883 2074 	strb.w	r2, [r3, #116]	@ 0x74

          return HAL_TIMEOUT;
 8006f34:	2303      	movs	r3, #3
 8006f36:	e010      	b.n	8006f5a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	69da      	ldr	r2, [r3, #28]
 8006f3e:	68bb      	ldr	r3, [r7, #8]
 8006f40:	4013      	ands	r3, r2
 8006f42:	68ba      	ldr	r2, [r7, #8]
 8006f44:	429a      	cmp	r2, r3
 8006f46:	bf0c      	ite	eq
 8006f48:	2301      	moveq	r3, #1
 8006f4a:	2300      	movne	r3, #0
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	461a      	mov	r2, r3
 8006f50:	79fb      	ldrb	r3, [r7, #7]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	f43f af4a 	beq.w	8006dec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3770      	adds	r7, #112	@ 0x70
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
	...

08006f64 <__NVIC_SetPriority>:
{
 8006f64:	b480      	push	{r7}
 8006f66:	b083      	sub	sp, #12
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	6039      	str	r1, [r7, #0]
 8006f6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006f70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	db0a      	blt.n	8006f8e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	490c      	ldr	r1, [pc, #48]	@ (8006fb0 <__NVIC_SetPriority+0x4c>)
 8006f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006f82:	0112      	lsls	r2, r2, #4
 8006f84:	b2d2      	uxtb	r2, r2
 8006f86:	440b      	add	r3, r1
 8006f88:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8006f8c:	e00a      	b.n	8006fa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	4908      	ldr	r1, [pc, #32]	@ (8006fb4 <__NVIC_SetPriority+0x50>)
 8006f94:	79fb      	ldrb	r3, [r7, #7]
 8006f96:	f003 030f 	and.w	r3, r3, #15
 8006f9a:	3b04      	subs	r3, #4
 8006f9c:	0112      	lsls	r2, r2, #4
 8006f9e:	b2d2      	uxtb	r2, r2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	761a      	strb	r2, [r3, #24]
}
 8006fa4:	bf00      	nop
 8006fa6:	370c      	adds	r7, #12
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fae:	4770      	bx	lr
 8006fb0:	e000e100 	.word	0xe000e100
 8006fb4:	e000ed00 	.word	0xe000ed00

08006fb8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8006fbc:	4b05      	ldr	r3, [pc, #20]	@ (8006fd4 <SysTick_Handler+0x1c>)
 8006fbe:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8006fc0:	f001 fd46 	bl	8008a50 <xTaskGetSchedulerState>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	2b01      	cmp	r3, #1
 8006fc8:	d001      	beq.n	8006fce <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8006fca:	f002 fb3d 	bl	8009648 <xPortSysTickHandler>
  }
}
 8006fce:	bf00      	nop
 8006fd0:	bd80      	pop	{r7, pc}
 8006fd2:	bf00      	nop
 8006fd4:	e000e010 	.word	0xe000e010

08006fd8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8006fdc:	2100      	movs	r1, #0
 8006fde:	f06f 0004 	mvn.w	r0, #4
 8006fe2:	f7ff ffbf 	bl	8006f64 <__NVIC_SetPriority>
#endif
}
 8006fe6:	bf00      	nop
 8006fe8:	bd80      	pop	{r7, pc}
	...

08006fec <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8006fec:	b480      	push	{r7}
 8006fee:	b083      	sub	sp, #12
 8006ff0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006ff2:	f3ef 8305 	mrs	r3, IPSR
 8006ff6:	603b      	str	r3, [r7, #0]
  return(result);
 8006ff8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d003      	beq.n	8007006 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8006ffe:	f06f 0305 	mvn.w	r3, #5
 8007002:	607b      	str	r3, [r7, #4]
 8007004:	e00c      	b.n	8007020 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007006:	4b0a      	ldr	r3, [pc, #40]	@ (8007030 <osKernelInitialize+0x44>)
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	2b00      	cmp	r3, #0
 800700c:	d105      	bne.n	800701a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800700e:	4b08      	ldr	r3, [pc, #32]	@ (8007030 <osKernelInitialize+0x44>)
 8007010:	2201      	movs	r2, #1
 8007012:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007014:	2300      	movs	r3, #0
 8007016:	607b      	str	r3, [r7, #4]
 8007018:	e002      	b.n	8007020 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800701a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800701e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007020:	687b      	ldr	r3, [r7, #4]
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
 800702e:	bf00      	nop
 8007030:	20000630 	.word	0x20000630

08007034 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007034:	b580      	push	{r7, lr}
 8007036:	b082      	sub	sp, #8
 8007038:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800703a:	f3ef 8305 	mrs	r3, IPSR
 800703e:	603b      	str	r3, [r7, #0]
  return(result);
 8007040:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007042:	2b00      	cmp	r3, #0
 8007044:	d003      	beq.n	800704e <osKernelStart+0x1a>
    stat = osErrorISR;
 8007046:	f06f 0305 	mvn.w	r3, #5
 800704a:	607b      	str	r3, [r7, #4]
 800704c:	e010      	b.n	8007070 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800704e:	4b0b      	ldr	r3, [pc, #44]	@ (800707c <osKernelStart+0x48>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	2b01      	cmp	r3, #1
 8007054:	d109      	bne.n	800706a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007056:	f7ff ffbf 	bl	8006fd8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800705a:	4b08      	ldr	r3, [pc, #32]	@ (800707c <osKernelStart+0x48>)
 800705c:	2202      	movs	r2, #2
 800705e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007060:	f001 f892 	bl	8008188 <vTaskStartScheduler>
      stat = osOK;
 8007064:	2300      	movs	r3, #0
 8007066:	607b      	str	r3, [r7, #4]
 8007068:	e002      	b.n	8007070 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800706a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800706e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007070:	687b      	ldr	r3, [r7, #4]
}
 8007072:	4618      	mov	r0, r3
 8007074:	3708      	adds	r7, #8
 8007076:	46bd      	mov	sp, r7
 8007078:	bd80      	pop	{r7, pc}
 800707a:	bf00      	nop
 800707c:	20000630 	.word	0x20000630

08007080 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007080:	b580      	push	{r7, lr}
 8007082:	b08e      	sub	sp, #56	@ 0x38
 8007084:	af04      	add	r7, sp, #16
 8007086:	60f8      	str	r0, [r7, #12]
 8007088:	60b9      	str	r1, [r7, #8]
 800708a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800708c:	2300      	movs	r3, #0
 800708e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007090:	f3ef 8305 	mrs	r3, IPSR
 8007094:	617b      	str	r3, [r7, #20]
  return(result);
 8007096:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007098:	2b00      	cmp	r3, #0
 800709a:	d17e      	bne.n	800719a <osThreadNew+0x11a>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d07b      	beq.n	800719a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80070a2:	2380      	movs	r3, #128	@ 0x80
 80070a4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80070a6:	2318      	movs	r3, #24
 80070a8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80070aa:	2300      	movs	r3, #0
 80070ac:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80070ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80070b2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d045      	beq.n	8007146 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d002      	beq.n	80070c8 <osThreadNew+0x48>
        name = attr->name;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	699b      	ldr	r3, [r3, #24]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d002      	beq.n	80070d6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	699b      	ldr	r3, [r3, #24]
 80070d4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d008      	beq.n	80070ee <osThreadNew+0x6e>
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	2b38      	cmp	r3, #56	@ 0x38
 80070e0:	d805      	bhi.n	80070ee <osThreadNew+0x6e>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f003 0301 	and.w	r3, r3, #1
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d001      	beq.n	80070f2 <osThreadNew+0x72>
        return (NULL);
 80070ee:	2300      	movs	r3, #0
 80070f0:	e054      	b.n	800719c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	695b      	ldr	r3, [r3, #20]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d003      	beq.n	8007102 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	695b      	ldr	r3, [r3, #20]
 80070fe:	089b      	lsrs	r3, r3, #2
 8007100:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00e      	beq.n	8007128 <osThreadNew+0xa8>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	68db      	ldr	r3, [r3, #12]
 800710e:	2ba7      	cmp	r3, #167	@ 0xa7
 8007110:	d90a      	bls.n	8007128 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007116:	2b00      	cmp	r3, #0
 8007118:	d006      	beq.n	8007128 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	695b      	ldr	r3, [r3, #20]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d002      	beq.n	8007128 <osThreadNew+0xa8>
        mem = 1;
 8007122:	2301      	movs	r3, #1
 8007124:	61bb      	str	r3, [r7, #24]
 8007126:	e010      	b.n	800714a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	689b      	ldr	r3, [r3, #8]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d10c      	bne.n	800714a <osThreadNew+0xca>
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d108      	bne.n	800714a <osThreadNew+0xca>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	691b      	ldr	r3, [r3, #16]
 800713c:	2b00      	cmp	r3, #0
 800713e:	d104      	bne.n	800714a <osThreadNew+0xca>
          mem = 0;
 8007140:	2300      	movs	r3, #0
 8007142:	61bb      	str	r3, [r7, #24]
 8007144:	e001      	b.n	800714a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800714a:	69bb      	ldr	r3, [r7, #24]
 800714c:	2b01      	cmp	r3, #1
 800714e:	d110      	bne.n	8007172 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007158:	9202      	str	r2, [sp, #8]
 800715a:	9301      	str	r3, [sp, #4]
 800715c:	69fb      	ldr	r3, [r7, #28]
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	68bb      	ldr	r3, [r7, #8]
 8007162:	6a3a      	ldr	r2, [r7, #32]
 8007164:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007166:	68f8      	ldr	r0, [r7, #12]
 8007168:	f000 fe1a 	bl	8007da0 <xTaskCreateStatic>
 800716c:	4603      	mov	r3, r0
 800716e:	613b      	str	r3, [r7, #16]
 8007170:	e013      	b.n	800719a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007172:	69bb      	ldr	r3, [r7, #24]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d110      	bne.n	800719a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007178:	6a3b      	ldr	r3, [r7, #32]
 800717a:	b29a      	uxth	r2, r3
 800717c:	f107 0310 	add.w	r3, r7, #16
 8007180:	9301      	str	r3, [sp, #4]
 8007182:	69fb      	ldr	r3, [r7, #28]
 8007184:	9300      	str	r3, [sp, #0]
 8007186:	68bb      	ldr	r3, [r7, #8]
 8007188:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f000 fe68 	bl	8007e60 <xTaskCreate>
 8007190:	4603      	mov	r3, r0
 8007192:	2b01      	cmp	r3, #1
 8007194:	d001      	beq.n	800719a <osThreadNew+0x11a>
            hTask = NULL;
 8007196:	2300      	movs	r3, #0
 8007198:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800719a:	693b      	ldr	r3, [r7, #16]
}
 800719c:	4618      	mov	r0, r3
 800719e:	3728      	adds	r7, #40	@ 0x28
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}

080071a4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b084      	sub	sp, #16
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80071ac:	f3ef 8305 	mrs	r3, IPSR
 80071b0:	60bb      	str	r3, [r7, #8]
  return(result);
 80071b2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d003      	beq.n	80071c0 <osDelay+0x1c>
    stat = osErrorISR;
 80071b8:	f06f 0305 	mvn.w	r3, #5
 80071bc:	60fb      	str	r3, [r7, #12]
 80071be:	e007      	b.n	80071d0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80071c0:	2300      	movs	r3, #0
 80071c2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80071ca:	6878      	ldr	r0, [r7, #4]
 80071cc:	f000 ffa6 	bl	800811c <vTaskDelay>
    }
  }

  return (stat);
 80071d0:	68fb      	ldr	r3, [r7, #12]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	3710      	adds	r7, #16
 80071d6:	46bd      	mov	sp, r7
 80071d8:	bd80      	pop	{r7, pc}
	...

080071dc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	60f8      	str	r0, [r7, #12]
 80071e4:	60b9      	str	r1, [r7, #8]
 80071e6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	4a07      	ldr	r2, [pc, #28]	@ (8007208 <vApplicationGetIdleTaskMemory+0x2c>)
 80071ec:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	4a06      	ldr	r2, [pc, #24]	@ (800720c <vApplicationGetIdleTaskMemory+0x30>)
 80071f2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2280      	movs	r2, #128	@ 0x80
 80071f8:	601a      	str	r2, [r3, #0]
}
 80071fa:	bf00      	nop
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	20000634 	.word	0x20000634
 800720c:	200006dc 	.word	0x200006dc

08007210 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007210:	b480      	push	{r7}
 8007212:	b085      	sub	sp, #20
 8007214:	af00      	add	r7, sp, #0
 8007216:	60f8      	str	r0, [r7, #12]
 8007218:	60b9      	str	r1, [r7, #8]
 800721a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	4a07      	ldr	r2, [pc, #28]	@ (800723c <vApplicationGetTimerTaskMemory+0x2c>)
 8007220:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	4a06      	ldr	r2, [pc, #24]	@ (8007240 <vApplicationGetTimerTaskMemory+0x30>)
 8007226:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800722e:	601a      	str	r2, [r3, #0]
}
 8007230:	bf00      	nop
 8007232:	3714      	adds	r7, #20
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr
 800723c:	200008dc 	.word	0x200008dc
 8007240:	20000984 	.word	0x20000984

08007244 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007244:	b480      	push	{r7}
 8007246:	b083      	sub	sp, #12
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f103 0208 	add.w	r2, r3, #8
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800725c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f103 0208 	add.w	r2, r3, #8
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f103 0208 	add.w	r2, r3, #8
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2200      	movs	r2, #0
 8007276:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2200      	movs	r2, #0
 8007290:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007292:	bf00      	nop
 8007294:	370c      	adds	r7, #12
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr

0800729e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800729e:	b480      	push	{r7}
 80072a0:	b085      	sub	sp, #20
 80072a2:	af00      	add	r7, sp, #0
 80072a4:	6078      	str	r0, [r7, #4]
 80072a6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	68fa      	ldr	r2, [r7, #12]
 80072b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	689a      	ldr	r2, [r3, #8]
 80072b8:	683b      	ldr	r3, [r7, #0]
 80072ba:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	683a      	ldr	r2, [r7, #0]
 80072c2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	683a      	ldr	r2, [r7, #0]
 80072c8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	687a      	ldr	r2, [r7, #4]
 80072ce:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	1c5a      	adds	r2, r3, #1
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	601a      	str	r2, [r3, #0]
}
 80072da:	bf00      	nop
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr

080072e6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80072e6:	b480      	push	{r7}
 80072e8:	b085      	sub	sp, #20
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
 80072ee:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072fc:	d103      	bne.n	8007306 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	691b      	ldr	r3, [r3, #16]
 8007302:	60fb      	str	r3, [r7, #12]
 8007304:	e00c      	b.n	8007320 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	3308      	adds	r3, #8
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e002      	b.n	8007314 <vListInsert+0x2e>
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	685b      	ldr	r3, [r3, #4]
 8007312:	60fb      	str	r3, [r7, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	685b      	ldr	r3, [r3, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68ba      	ldr	r2, [r7, #8]
 800731c:	429a      	cmp	r2, r3
 800731e:	d2f6      	bcs.n	800730e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	685a      	ldr	r2, [r3, #4]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	683a      	ldr	r2, [r7, #0]
 800732e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	68fa      	ldr	r2, [r7, #12]
 8007334:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	683a      	ldr	r2, [r7, #0]
 800733a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800733c:	683b      	ldr	r3, [r7, #0]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	1c5a      	adds	r2, r3, #1
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	601a      	str	r2, [r3, #0]
}
 800734c:	bf00      	nop
 800734e:	3714      	adds	r7, #20
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	691b      	ldr	r3, [r3, #16]
 8007364:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6892      	ldr	r2, [r2, #8]
 800736e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	689b      	ldr	r3, [r3, #8]
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	6852      	ldr	r2, [r2, #4]
 8007378:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	685b      	ldr	r3, [r3, #4]
 800737e:	687a      	ldr	r2, [r7, #4]
 8007380:	429a      	cmp	r2, r3
 8007382:	d103      	bne.n	800738c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	689a      	ldr	r2, [r3, #8]
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	1e5a      	subs	r2, r3, #1
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
}
 80073a0:	4618      	mov	r0, r3
 80073a2:	3714      	adds	r7, #20
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80073ac:	b580      	push	{r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	6078      	str	r0, [r7, #4]
 80073b4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d10b      	bne.n	80073d8 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80073c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073c4:	f383 8811 	msr	BASEPRI, r3
 80073c8:	f3bf 8f6f 	isb	sy
 80073cc:	f3bf 8f4f 	dsb	sy
 80073d0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80073d2:	bf00      	nop
 80073d4:	bf00      	nop
 80073d6:	e7fd      	b.n	80073d4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80073d8:	f002 f8a6 	bl	8009528 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681a      	ldr	r2, [r3, #0]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80073e4:	68f9      	ldr	r1, [r7, #12]
 80073e6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80073e8:	fb01 f303 	mul.w	r3, r1, r3
 80073ec:	441a      	add	r2, r3
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	2200      	movs	r2, #0
 80073f6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007408:	3b01      	subs	r3, #1
 800740a:	68f9      	ldr	r1, [r7, #12]
 800740c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800740e:	fb01 f303 	mul.w	r3, r1, r3
 8007412:	441a      	add	r2, r3
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	22ff      	movs	r2, #255	@ 0xff
 800741c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	22ff      	movs	r2, #255	@ 0xff
 8007424:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d114      	bne.n	8007458 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	691b      	ldr	r3, [r3, #16]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d01a      	beq.n	800746c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007436:	68fb      	ldr	r3, [r7, #12]
 8007438:	3310      	adds	r3, #16
 800743a:	4618      	mov	r0, r3
 800743c:	f001 f942 	bl	80086c4 <xTaskRemoveFromEventList>
 8007440:	4603      	mov	r3, r0
 8007442:	2b00      	cmp	r3, #0
 8007444:	d012      	beq.n	800746c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007446:	4b0d      	ldr	r3, [pc, #52]	@ (800747c <xQueueGenericReset+0xd0>)
 8007448:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800744c:	601a      	str	r2, [r3, #0]
 800744e:	f3bf 8f4f 	dsb	sy
 8007452:	f3bf 8f6f 	isb	sy
 8007456:	e009      	b.n	800746c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	3310      	adds	r3, #16
 800745c:	4618      	mov	r0, r3
 800745e:	f7ff fef1 	bl	8007244 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3324      	adds	r3, #36	@ 0x24
 8007466:	4618      	mov	r0, r3
 8007468:	f7ff feec 	bl	8007244 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800746c:	f002 f88e 	bl	800958c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007470:	2301      	movs	r3, #1
}
 8007472:	4618      	mov	r0, r3
 8007474:	3710      	adds	r7, #16
 8007476:	46bd      	mov	sp, r7
 8007478:	bd80      	pop	{r7, pc}
 800747a:	bf00      	nop
 800747c:	e000ed04 	.word	0xe000ed04

08007480 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08e      	sub	sp, #56	@ 0x38
 8007484:	af02      	add	r7, sp, #8
 8007486:	60f8      	str	r0, [r7, #12]
 8007488:	60b9      	str	r1, [r7, #8]
 800748a:	607a      	str	r2, [r7, #4]
 800748c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d10b      	bne.n	80074ac <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8007494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007498:	f383 8811 	msr	BASEPRI, r3
 800749c:	f3bf 8f6f 	isb	sy
 80074a0:	f3bf 8f4f 	dsb	sy
 80074a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80074a6:	bf00      	nop
 80074a8:	bf00      	nop
 80074aa:	e7fd      	b.n	80074a8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10b      	bne.n	80074ca <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	e7fd      	b.n	80074c6 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d002      	beq.n	80074d6 <xQueueGenericCreateStatic+0x56>
 80074d0:	68bb      	ldr	r3, [r7, #8]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d001      	beq.n	80074da <xQueueGenericCreateStatic+0x5a>
 80074d6:	2301      	movs	r3, #1
 80074d8:	e000      	b.n	80074dc <xQueueGenericCreateStatic+0x5c>
 80074da:	2300      	movs	r3, #0
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d10b      	bne.n	80074f8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	623b      	str	r3, [r7, #32]
}
 80074f2:	bf00      	nop
 80074f4:	bf00      	nop
 80074f6:	e7fd      	b.n	80074f4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d102      	bne.n	8007504 <xQueueGenericCreateStatic+0x84>
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d101      	bne.n	8007508 <xQueueGenericCreateStatic+0x88>
 8007504:	2301      	movs	r3, #1
 8007506:	e000      	b.n	800750a <xQueueGenericCreateStatic+0x8a>
 8007508:	2300      	movs	r3, #0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10b      	bne.n	8007526 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	61fb      	str	r3, [r7, #28]
}
 8007520:	bf00      	nop
 8007522:	bf00      	nop
 8007524:	e7fd      	b.n	8007522 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007526:	2350      	movs	r3, #80	@ 0x50
 8007528:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800752a:	697b      	ldr	r3, [r7, #20]
 800752c:	2b50      	cmp	r3, #80	@ 0x50
 800752e:	d00b      	beq.n	8007548 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8007530:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007534:	f383 8811 	msr	BASEPRI, r3
 8007538:	f3bf 8f6f 	isb	sy
 800753c:	f3bf 8f4f 	dsb	sy
 8007540:	61bb      	str	r3, [r7, #24]
}
 8007542:	bf00      	nop
 8007544:	bf00      	nop
 8007546:	e7fd      	b.n	8007544 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007548:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800754a:	683b      	ldr	r3, [r7, #0]
 800754c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800754e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007550:	2b00      	cmp	r3, #0
 8007552:	d00d      	beq.n	8007570 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007554:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007556:	2201      	movs	r2, #1
 8007558:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800755c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8007560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007562:	9300      	str	r3, [sp, #0]
 8007564:	4613      	mov	r3, r2
 8007566:	687a      	ldr	r2, [r7, #4]
 8007568:	68b9      	ldr	r1, [r7, #8]
 800756a:	68f8      	ldr	r0, [r7, #12]
 800756c:	f000 f805 	bl	800757a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8007572:	4618      	mov	r0, r3
 8007574:	3730      	adds	r7, #48	@ 0x30
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800757a:	b580      	push	{r7, lr}
 800757c:	b084      	sub	sp, #16
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d103      	bne.n	8007596 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800758e:	69bb      	ldr	r3, [r7, #24]
 8007590:	69ba      	ldr	r2, [r7, #24]
 8007592:	601a      	str	r2, [r3, #0]
 8007594:	e002      	b.n	800759c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800759c:	69bb      	ldr	r3, [r7, #24]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80075a2:	69bb      	ldr	r3, [r7, #24]
 80075a4:	68ba      	ldr	r2, [r7, #8]
 80075a6:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80075a8:	2101      	movs	r1, #1
 80075aa:	69b8      	ldr	r0, [r7, #24]
 80075ac:	f7ff fefe 	bl	80073ac <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80075b0:	69bb      	ldr	r3, [r7, #24]
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80075b8:	bf00      	nop
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}

080075c0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b08e      	sub	sp, #56	@ 0x38
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
 80075cc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80075ce:	2300      	movs	r3, #0
 80075d0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d10b      	bne.n	80075f4 <xQueueGenericSend+0x34>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80075ee:	bf00      	nop
 80075f0:	bf00      	nop
 80075f2:	e7fd      	b.n	80075f0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d103      	bne.n	8007602 <xQueueGenericSend+0x42>
 80075fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d101      	bne.n	8007606 <xQueueGenericSend+0x46>
 8007602:	2301      	movs	r3, #1
 8007604:	e000      	b.n	8007608 <xQueueGenericSend+0x48>
 8007606:	2300      	movs	r3, #0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d10b      	bne.n	8007624 <xQueueGenericSend+0x64>
	__asm volatile
 800760c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007610:	f383 8811 	msr	BASEPRI, r3
 8007614:	f3bf 8f6f 	isb	sy
 8007618:	f3bf 8f4f 	dsb	sy
 800761c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800761e:	bf00      	nop
 8007620:	bf00      	nop
 8007622:	e7fd      	b.n	8007620 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	2b02      	cmp	r3, #2
 8007628:	d103      	bne.n	8007632 <xQueueGenericSend+0x72>
 800762a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800762c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800762e:	2b01      	cmp	r3, #1
 8007630:	d101      	bne.n	8007636 <xQueueGenericSend+0x76>
 8007632:	2301      	movs	r3, #1
 8007634:	e000      	b.n	8007638 <xQueueGenericSend+0x78>
 8007636:	2300      	movs	r3, #0
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10b      	bne.n	8007654 <xQueueGenericSend+0x94>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	623b      	str	r3, [r7, #32]
}
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	e7fd      	b.n	8007650 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007654:	f001 f9fc 	bl	8008a50 <xTaskGetSchedulerState>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d102      	bne.n	8007664 <xQueueGenericSend+0xa4>
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d101      	bne.n	8007668 <xQueueGenericSend+0xa8>
 8007664:	2301      	movs	r3, #1
 8007666:	e000      	b.n	800766a <xQueueGenericSend+0xaa>
 8007668:	2300      	movs	r3, #0
 800766a:	2b00      	cmp	r3, #0
 800766c:	d10b      	bne.n	8007686 <xQueueGenericSend+0xc6>
	__asm volatile
 800766e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007672:	f383 8811 	msr	BASEPRI, r3
 8007676:	f3bf 8f6f 	isb	sy
 800767a:	f3bf 8f4f 	dsb	sy
 800767e:	61fb      	str	r3, [r7, #28]
}
 8007680:	bf00      	nop
 8007682:	bf00      	nop
 8007684:	e7fd      	b.n	8007682 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007686:	f001 ff4f 	bl	8009528 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800768a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800768c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800768e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007690:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007692:	429a      	cmp	r2, r3
 8007694:	d302      	bcc.n	800769c <xQueueGenericSend+0xdc>
 8007696:	683b      	ldr	r3, [r7, #0]
 8007698:	2b02      	cmp	r3, #2
 800769a:	d129      	bne.n	80076f0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800769c:	683a      	ldr	r2, [r7, #0]
 800769e:	68b9      	ldr	r1, [r7, #8]
 80076a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80076a2:	f000 fa0f 	bl	8007ac4 <prvCopyDataToQueue>
 80076a6:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80076a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d010      	beq.n	80076d2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80076b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076b2:	3324      	adds	r3, #36	@ 0x24
 80076b4:	4618      	mov	r0, r3
 80076b6:	f001 f805 	bl	80086c4 <xTaskRemoveFromEventList>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d013      	beq.n	80076e8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80076c0:	4b3f      	ldr	r3, [pc, #252]	@ (80077c0 <xQueueGenericSend+0x200>)
 80076c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076c6:	601a      	str	r2, [r3, #0]
 80076c8:	f3bf 8f4f 	dsb	sy
 80076cc:	f3bf 8f6f 	isb	sy
 80076d0:	e00a      	b.n	80076e8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80076d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d007      	beq.n	80076e8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80076d8:	4b39      	ldr	r3, [pc, #228]	@ (80077c0 <xQueueGenericSend+0x200>)
 80076da:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076de:	601a      	str	r2, [r3, #0]
 80076e0:	f3bf 8f4f 	dsb	sy
 80076e4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80076e8:	f001 ff50 	bl	800958c <vPortExitCritical>
				return pdPASS;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e063      	b.n	80077b8 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d103      	bne.n	80076fe <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80076f6:	f001 ff49 	bl	800958c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80076fa:	2300      	movs	r3, #0
 80076fc:	e05c      	b.n	80077b8 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80076fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007700:	2b00      	cmp	r3, #0
 8007702:	d106      	bne.n	8007712 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007704:	f107 0314 	add.w	r3, r7, #20
 8007708:	4618      	mov	r0, r3
 800770a:	f001 f83f 	bl	800878c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800770e:	2301      	movs	r3, #1
 8007710:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007712:	f001 ff3b 	bl	800958c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007716:	f000 fda7 	bl	8008268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800771a:	f001 ff05 	bl	8009528 <vPortEnterCritical>
 800771e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007720:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007724:	b25b      	sxtb	r3, r3
 8007726:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800772a:	d103      	bne.n	8007734 <xQueueGenericSend+0x174>
 800772c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800772e:	2200      	movs	r2, #0
 8007730:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007734:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007736:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800773a:	b25b      	sxtb	r3, r3
 800773c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007740:	d103      	bne.n	800774a <xQueueGenericSend+0x18a>
 8007742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007744:	2200      	movs	r2, #0
 8007746:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800774a:	f001 ff1f 	bl	800958c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800774e:	1d3a      	adds	r2, r7, #4
 8007750:	f107 0314 	add.w	r3, r7, #20
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f001 f82e 	bl	80087b8 <xTaskCheckForTimeOut>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d124      	bne.n	80077ac <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007762:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007764:	f000 faa6 	bl	8007cb4 <prvIsQueueFull>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d018      	beq.n	80077a0 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800776e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007770:	3310      	adds	r3, #16
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	4611      	mov	r1, r2
 8007776:	4618      	mov	r0, r3
 8007778:	f000 ff52 	bl	8008620 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800777c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800777e:	f000 fa31 	bl	8007be4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007782:	f000 fd7f 	bl	8008284 <xTaskResumeAll>
 8007786:	4603      	mov	r3, r0
 8007788:	2b00      	cmp	r3, #0
 800778a:	f47f af7c 	bne.w	8007686 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800778e:	4b0c      	ldr	r3, [pc, #48]	@ (80077c0 <xQueueGenericSend+0x200>)
 8007790:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	f3bf 8f6f 	isb	sy
 800779e:	e772      	b.n	8007686 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80077a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077a2:	f000 fa1f 	bl	8007be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80077a6:	f000 fd6d 	bl	8008284 <xTaskResumeAll>
 80077aa:	e76c      	b.n	8007686 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80077ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80077ae:	f000 fa19 	bl	8007be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80077b2:	f000 fd67 	bl	8008284 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80077b6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80077b8:	4618      	mov	r0, r3
 80077ba:	3738      	adds	r7, #56	@ 0x38
 80077bc:	46bd      	mov	sp, r7
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	e000ed04 	.word	0xe000ed04

080077c4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b090      	sub	sp, #64	@ 0x40
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	60f8      	str	r0, [r7, #12]
 80077cc:	60b9      	str	r1, [r7, #8]
 80077ce:	607a      	str	r2, [r7, #4]
 80077d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80077d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d10b      	bne.n	80077f4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80077dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077e0:	f383 8811 	msr	BASEPRI, r3
 80077e4:	f3bf 8f6f 	isb	sy
 80077e8:	f3bf 8f4f 	dsb	sy
 80077ec:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80077ee:	bf00      	nop
 80077f0:	bf00      	nop
 80077f2:	e7fd      	b.n	80077f0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d103      	bne.n	8007802 <xQueueGenericSendFromISR+0x3e>
 80077fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80077fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <xQueueGenericSendFromISR+0x42>
 8007802:	2301      	movs	r3, #1
 8007804:	e000      	b.n	8007808 <xQueueGenericSendFromISR+0x44>
 8007806:	2300      	movs	r3, #0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d10b      	bne.n	8007824 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800780c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007810:	f383 8811 	msr	BASEPRI, r3
 8007814:	f3bf 8f6f 	isb	sy
 8007818:	f3bf 8f4f 	dsb	sy
 800781c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800781e:	bf00      	nop
 8007820:	bf00      	nop
 8007822:	e7fd      	b.n	8007820 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	2b02      	cmp	r3, #2
 8007828:	d103      	bne.n	8007832 <xQueueGenericSendFromISR+0x6e>
 800782a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800782c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800782e:	2b01      	cmp	r3, #1
 8007830:	d101      	bne.n	8007836 <xQueueGenericSendFromISR+0x72>
 8007832:	2301      	movs	r3, #1
 8007834:	e000      	b.n	8007838 <xQueueGenericSendFromISR+0x74>
 8007836:	2300      	movs	r3, #0
 8007838:	2b00      	cmp	r3, #0
 800783a:	d10b      	bne.n	8007854 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800783c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007840:	f383 8811 	msr	BASEPRI, r3
 8007844:	f3bf 8f6f 	isb	sy
 8007848:	f3bf 8f4f 	dsb	sy
 800784c:	623b      	str	r3, [r7, #32]
}
 800784e:	bf00      	nop
 8007850:	bf00      	nop
 8007852:	e7fd      	b.n	8007850 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007854:	f001 ff48 	bl	80096e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007858:	f3ef 8211 	mrs	r2, BASEPRI
 800785c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007860:	f383 8811 	msr	BASEPRI, r3
 8007864:	f3bf 8f6f 	isb	sy
 8007868:	f3bf 8f4f 	dsb	sy
 800786c:	61fa      	str	r2, [r7, #28]
 800786e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007870:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007872:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007874:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007876:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007878:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800787a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800787c:	429a      	cmp	r2, r3
 800787e:	d302      	bcc.n	8007886 <xQueueGenericSendFromISR+0xc2>
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	2b02      	cmp	r3, #2
 8007884:	d12f      	bne.n	80078e6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007886:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007888:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800788c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007892:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007894:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007896:	683a      	ldr	r2, [r7, #0]
 8007898:	68b9      	ldr	r1, [r7, #8]
 800789a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800789c:	f000 f912 	bl	8007ac4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80078a0:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80078a8:	d112      	bne.n	80078d0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ae:	2b00      	cmp	r3, #0
 80078b0:	d016      	beq.n	80078e0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078b4:	3324      	adds	r3, #36	@ 0x24
 80078b6:	4618      	mov	r0, r3
 80078b8:	f000 ff04 	bl	80086c4 <xTaskRemoveFromEventList>
 80078bc:	4603      	mov	r3, r0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d00e      	beq.n	80078e0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d00b      	beq.n	80078e0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2201      	movs	r2, #1
 80078cc:	601a      	str	r2, [r3, #0]
 80078ce:	e007      	b.n	80078e0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80078d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80078d4:	3301      	adds	r3, #1
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	b25a      	sxtb	r2, r3
 80078da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80078dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80078e0:	2301      	movs	r3, #1
 80078e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80078e4:	e001      	b.n	80078ea <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80078e6:	2300      	movs	r3, #0
 80078e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80078ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80078ec:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80078ee:	697b      	ldr	r3, [r7, #20]
 80078f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80078f4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80078f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	3740      	adds	r7, #64	@ 0x40
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}

08007900 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b08c      	sub	sp, #48	@ 0x30
 8007904:	af00      	add	r7, sp, #0
 8007906:	60f8      	str	r0, [r7, #12]
 8007908:	60b9      	str	r1, [r7, #8]
 800790a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800790c:	2300      	movs	r3, #0
 800790e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007916:	2b00      	cmp	r3, #0
 8007918:	d10b      	bne.n	8007932 <xQueueReceive+0x32>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	623b      	str	r3, [r7, #32]
}
 800792c:	bf00      	nop
 800792e:	bf00      	nop
 8007930:	e7fd      	b.n	800792e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d103      	bne.n	8007940 <xQueueReceive+0x40>
 8007938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800793c:	2b00      	cmp	r3, #0
 800793e:	d101      	bne.n	8007944 <xQueueReceive+0x44>
 8007940:	2301      	movs	r3, #1
 8007942:	e000      	b.n	8007946 <xQueueReceive+0x46>
 8007944:	2300      	movs	r3, #0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d10b      	bne.n	8007962 <xQueueReceive+0x62>
	__asm volatile
 800794a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800794e:	f383 8811 	msr	BASEPRI, r3
 8007952:	f3bf 8f6f 	isb	sy
 8007956:	f3bf 8f4f 	dsb	sy
 800795a:	61fb      	str	r3, [r7, #28]
}
 800795c:	bf00      	nop
 800795e:	bf00      	nop
 8007960:	e7fd      	b.n	800795e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007962:	f001 f875 	bl	8008a50 <xTaskGetSchedulerState>
 8007966:	4603      	mov	r3, r0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d102      	bne.n	8007972 <xQueueReceive+0x72>
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d101      	bne.n	8007976 <xQueueReceive+0x76>
 8007972:	2301      	movs	r3, #1
 8007974:	e000      	b.n	8007978 <xQueueReceive+0x78>
 8007976:	2300      	movs	r3, #0
 8007978:	2b00      	cmp	r3, #0
 800797a:	d10b      	bne.n	8007994 <xQueueReceive+0x94>
	__asm volatile
 800797c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007980:	f383 8811 	msr	BASEPRI, r3
 8007984:	f3bf 8f6f 	isb	sy
 8007988:	f3bf 8f4f 	dsb	sy
 800798c:	61bb      	str	r3, [r7, #24]
}
 800798e:	bf00      	nop
 8007990:	bf00      	nop
 8007992:	e7fd      	b.n	8007990 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007994:	f001 fdc8 	bl	8009528 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007998:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800799c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800799e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d01f      	beq.n	80079e4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80079a4:	68b9      	ldr	r1, [r7, #8]
 80079a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079a8:	f000 f8f6 	bl	8007b98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80079ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ae:	1e5a      	subs	r2, r3, #1
 80079b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b2:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80079b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b6:	691b      	ldr	r3, [r3, #16]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d00f      	beq.n	80079dc <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80079bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079be:	3310      	adds	r3, #16
 80079c0:	4618      	mov	r0, r3
 80079c2:	f000 fe7f 	bl	80086c4 <xTaskRemoveFromEventList>
 80079c6:	4603      	mov	r3, r0
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d007      	beq.n	80079dc <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80079cc:	4b3c      	ldr	r3, [pc, #240]	@ (8007ac0 <xQueueReceive+0x1c0>)
 80079ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	f3bf 8f4f 	dsb	sy
 80079d8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80079dc:	f001 fdd6 	bl	800958c <vPortExitCritical>
				return pdPASS;
 80079e0:	2301      	movs	r3, #1
 80079e2:	e069      	b.n	8007ab8 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d103      	bne.n	80079f2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80079ea:	f001 fdcf 	bl	800958c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80079ee:	2300      	movs	r3, #0
 80079f0:	e062      	b.n	8007ab8 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80079f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d106      	bne.n	8007a06 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80079f8:	f107 0310 	add.w	r3, r7, #16
 80079fc:	4618      	mov	r0, r3
 80079fe:	f000 fec5 	bl	800878c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007a02:	2301      	movs	r3, #1
 8007a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007a06:	f001 fdc1 	bl	800958c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007a0a:	f000 fc2d 	bl	8008268 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007a0e:	f001 fd8b 	bl	8009528 <vPortEnterCritical>
 8007a12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a14:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007a18:	b25b      	sxtb	r3, r3
 8007a1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a1e:	d103      	bne.n	8007a28 <xQueueReceive+0x128>
 8007a20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a22:	2200      	movs	r2, #0
 8007a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a2a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007a2e:	b25b      	sxtb	r3, r3
 8007a30:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007a34:	d103      	bne.n	8007a3e <xQueueReceive+0x13e>
 8007a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007a3e:	f001 fda5 	bl	800958c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007a42:	1d3a      	adds	r2, r7, #4
 8007a44:	f107 0310 	add.w	r3, r7, #16
 8007a48:	4611      	mov	r1, r2
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f000 feb4 	bl	80087b8 <xTaskCheckForTimeOut>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d123      	bne.n	8007a9e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007a56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a58:	f000 f916 	bl	8007c88 <prvIsQueueEmpty>
 8007a5c:	4603      	mov	r3, r0
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d017      	beq.n	8007a92 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a64:	3324      	adds	r3, #36	@ 0x24
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	4611      	mov	r1, r2
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f000 fdd8 	bl	8008620 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007a70:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a72:	f000 f8b7 	bl	8007be4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007a76:	f000 fc05 	bl	8008284 <xTaskResumeAll>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d189      	bne.n	8007994 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8007a80:	4b0f      	ldr	r3, [pc, #60]	@ (8007ac0 <xQueueReceive+0x1c0>)
 8007a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
 8007a90:	e780      	b.n	8007994 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007a92:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007a94:	f000 f8a6 	bl	8007be4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007a98:	f000 fbf4 	bl	8008284 <xTaskResumeAll>
 8007a9c:	e77a      	b.n	8007994 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8007a9e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007aa0:	f000 f8a0 	bl	8007be4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007aa4:	f000 fbee 	bl	8008284 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007aa8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007aaa:	f000 f8ed 	bl	8007c88 <prvIsQueueEmpty>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f43f af6f 	beq.w	8007994 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8007ab6:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3730      	adds	r7, #48	@ 0x30
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}
 8007ac0:	e000ed04 	.word	0xe000ed04

08007ac4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b086      	sub	sp, #24
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	60f8      	str	r0, [r7, #12]
 8007acc:	60b9      	str	r1, [r7, #8]
 8007ace:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10d      	bne.n	8007afe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d14d      	bne.n	8007b86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	689b      	ldr	r3, [r3, #8]
 8007aee:	4618      	mov	r0, r3
 8007af0:	f000 ffcc 	bl	8008a8c <xTaskPriorityDisinherit>
 8007af4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	2200      	movs	r2, #0
 8007afa:	609a      	str	r2, [r3, #8]
 8007afc:	e043      	b.n	8007b86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d119      	bne.n	8007b38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	6858      	ldr	r0, [r3, #4]
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b0c:	461a      	mov	r2, r3
 8007b0e:	68b9      	ldr	r1, [r7, #8]
 8007b10:	f002 f8c4 	bl	8009c9c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b1c:	441a      	add	r2, r3
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	685a      	ldr	r2, [r3, #4]
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d32b      	bcc.n	8007b86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681a      	ldr	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	605a      	str	r2, [r3, #4]
 8007b36:	e026      	b.n	8007b86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	68d8      	ldr	r0, [r3, #12]
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b40:	461a      	mov	r2, r3
 8007b42:	68b9      	ldr	r1, [r7, #8]
 8007b44:	f002 f8aa 	bl	8009c9c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	68da      	ldr	r2, [r3, #12]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b50:	425b      	negs	r3, r3
 8007b52:	441a      	add	r2, r3
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	68da      	ldr	r2, [r3, #12]
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d207      	bcs.n	8007b74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	689a      	ldr	r2, [r3, #8]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007b6c:	425b      	negs	r3, r3
 8007b6e:	441a      	add	r2, r3
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2b02      	cmp	r3, #2
 8007b78:	d105      	bne.n	8007b86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007b7a:	693b      	ldr	r3, [r7, #16]
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d002      	beq.n	8007b86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	3b01      	subs	r3, #1
 8007b84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	1c5a      	adds	r2, r3, #1
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8007b8e:	697b      	ldr	r3, [r7, #20]
}
 8007b90:	4618      	mov	r0, r3
 8007b92:	3718      	adds	r7, #24
 8007b94:	46bd      	mov	sp, r7
 8007b96:	bd80      	pop	{r7, pc}

08007b98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007b98:	b580      	push	{r7, lr}
 8007b9a:	b082      	sub	sp, #8
 8007b9c:	af00      	add	r7, sp, #0
 8007b9e:	6078      	str	r0, [r7, #4]
 8007ba0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d018      	beq.n	8007bdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	68da      	ldr	r2, [r3, #12]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bb2:	441a      	add	r2, r3
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d303      	bcc.n	8007bcc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681a      	ldr	r2, [r3, #0]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	68d9      	ldr	r1, [r3, #12]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6838      	ldr	r0, [r7, #0]
 8007bd8:	f002 f860 	bl	8009c9c <memcpy>
	}
}
 8007bdc:	bf00      	nop
 8007bde:	3708      	adds	r7, #8
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8007bec:	f001 fc9c 	bl	8009528 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007bf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007bf8:	e011      	b.n	8007c1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d012      	beq.n	8007c28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	3324      	adds	r3, #36	@ 0x24
 8007c06:	4618      	mov	r0, r3
 8007c08:	f000 fd5c 	bl	80086c4 <xTaskRemoveFromEventList>
 8007c0c:	4603      	mov	r3, r0
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d001      	beq.n	8007c16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007c12:	f000 fe35 	bl	8008880 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007c16:	7bfb      	ldrb	r3, [r7, #15]
 8007c18:	3b01      	subs	r3, #1
 8007c1a:	b2db      	uxtb	r3, r3
 8007c1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007c1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	dce9      	bgt.n	8007bfa <prvUnlockQueue+0x16>
 8007c26:	e000      	b.n	8007c2a <prvUnlockQueue+0x46>
					break;
 8007c28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	22ff      	movs	r2, #255	@ 0xff
 8007c2e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8007c32:	f001 fcab 	bl	800958c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007c36:	f001 fc77 	bl	8009528 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007c40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c42:	e011      	b.n	8007c68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	691b      	ldr	r3, [r3, #16]
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d012      	beq.n	8007c72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	3310      	adds	r3, #16
 8007c50:	4618      	mov	r0, r3
 8007c52:	f000 fd37 	bl	80086c4 <xTaskRemoveFromEventList>
 8007c56:	4603      	mov	r3, r0
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d001      	beq.n	8007c60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8007c5c:	f000 fe10 	bl	8008880 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007c60:	7bbb      	ldrb	r3, [r7, #14]
 8007c62:	3b01      	subs	r3, #1
 8007c64:	b2db      	uxtb	r3, r3
 8007c66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007c68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	dce9      	bgt.n	8007c44 <prvUnlockQueue+0x60>
 8007c70:	e000      	b.n	8007c74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007c72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	22ff      	movs	r2, #255	@ 0xff
 8007c78:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8007c7c:	f001 fc86 	bl	800958c <vPortExitCritical>
}
 8007c80:	bf00      	nop
 8007c82:	3710      	adds	r7, #16
 8007c84:	46bd      	mov	sp, r7
 8007c86:	bd80      	pop	{r7, pc}

08007c88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007c88:	b580      	push	{r7, lr}
 8007c8a:	b084      	sub	sp, #16
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007c90:	f001 fc4a 	bl	8009528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	d102      	bne.n	8007ca2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	60fb      	str	r3, [r7, #12]
 8007ca0:	e001      	b.n	8007ca6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007ca6:	f001 fc71 	bl	800958c <vPortExitCritical>

	return xReturn;
 8007caa:	68fb      	ldr	r3, [r7, #12]
}
 8007cac:	4618      	mov	r0, r3
 8007cae:	3710      	adds	r7, #16
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	bd80      	pop	{r7, pc}

08007cb4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8007cb4:	b580      	push	{r7, lr}
 8007cb6:	b084      	sub	sp, #16
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007cbc:	f001 fc34 	bl	8009528 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007cc8:	429a      	cmp	r2, r3
 8007cca:	d102      	bne.n	8007cd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	60fb      	str	r3, [r7, #12]
 8007cd0:	e001      	b.n	8007cd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007cd2:	2300      	movs	r3, #0
 8007cd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007cd6:	f001 fc59 	bl	800958c <vPortExitCritical>

	return xReturn;
 8007cda:	68fb      	ldr	r3, [r7, #12]
}
 8007cdc:	4618      	mov	r0, r3
 8007cde:	3710      	adds	r7, #16
 8007ce0:	46bd      	mov	sp, r7
 8007ce2:	bd80      	pop	{r7, pc}

08007ce4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b085      	sub	sp, #20
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007cee:	2300      	movs	r3, #0
 8007cf0:	60fb      	str	r3, [r7, #12]
 8007cf2:	e014      	b.n	8007d1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8007d34 <vQueueAddToRegistry+0x50>)
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10b      	bne.n	8007d18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007d00:	490c      	ldr	r1, [pc, #48]	@ (8007d34 <vQueueAddToRegistry+0x50>)
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	683a      	ldr	r2, [r7, #0]
 8007d06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8007d0a:	4a0a      	ldr	r2, [pc, #40]	@ (8007d34 <vQueueAddToRegistry+0x50>)
 8007d0c:	68fb      	ldr	r3, [r7, #12]
 8007d0e:	00db      	lsls	r3, r3, #3
 8007d10:	4413      	add	r3, r2
 8007d12:	687a      	ldr	r2, [r7, #4]
 8007d14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007d16:	e006      	b.n	8007d26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	60fb      	str	r3, [r7, #12]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	2b07      	cmp	r3, #7
 8007d22:	d9e7      	bls.n	8007cf4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007d24:	bf00      	nop
 8007d26:	bf00      	nop
 8007d28:	3714      	adds	r7, #20
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	20000d84 	.word	0x20000d84

08007d38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007d48:	f001 fbee 	bl	8009528 <vPortEnterCritical>
 8007d4c:	697b      	ldr	r3, [r7, #20]
 8007d4e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007d52:	b25b      	sxtb	r3, r3
 8007d54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d58:	d103      	bne.n	8007d62 <vQueueWaitForMessageRestricted+0x2a>
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007d62:	697b      	ldr	r3, [r7, #20]
 8007d64:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007d68:	b25b      	sxtb	r3, r3
 8007d6a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007d6e:	d103      	bne.n	8007d78 <vQueueWaitForMessageRestricted+0x40>
 8007d70:	697b      	ldr	r3, [r7, #20]
 8007d72:	2200      	movs	r2, #0
 8007d74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007d78:	f001 fc08 	bl	800958c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d106      	bne.n	8007d92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007d84:	697b      	ldr	r3, [r7, #20]
 8007d86:	3324      	adds	r3, #36	@ 0x24
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	68b9      	ldr	r1, [r7, #8]
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	f000 fc6d 	bl	800866c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8007d92:	6978      	ldr	r0, [r7, #20]
 8007d94:	f7ff ff26 	bl	8007be4 <prvUnlockQueue>
	}
 8007d98:	bf00      	nop
 8007d9a:	3718      	adds	r7, #24
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	bd80      	pop	{r7, pc}

08007da0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007da0:	b580      	push	{r7, lr}
 8007da2:	b08e      	sub	sp, #56	@ 0x38
 8007da4:	af04      	add	r7, sp, #16
 8007da6:	60f8      	str	r0, [r7, #12]
 8007da8:	60b9      	str	r1, [r7, #8]
 8007daa:	607a      	str	r2, [r7, #4]
 8007dac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007dae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d10b      	bne.n	8007dcc <xTaskCreateStatic+0x2c>
	__asm volatile
 8007db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007db8:	f383 8811 	msr	BASEPRI, r3
 8007dbc:	f3bf 8f6f 	isb	sy
 8007dc0:	f3bf 8f4f 	dsb	sy
 8007dc4:	623b      	str	r3, [r7, #32]
}
 8007dc6:	bf00      	nop
 8007dc8:	bf00      	nop
 8007dca:	e7fd      	b.n	8007dc8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d10b      	bne.n	8007dea <xTaskCreateStatic+0x4a>
	__asm volatile
 8007dd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd6:	f383 8811 	msr	BASEPRI, r3
 8007dda:	f3bf 8f6f 	isb	sy
 8007dde:	f3bf 8f4f 	dsb	sy
 8007de2:	61fb      	str	r3, [r7, #28]
}
 8007de4:	bf00      	nop
 8007de6:	bf00      	nop
 8007de8:	e7fd      	b.n	8007de6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8007dea:	23a8      	movs	r3, #168	@ 0xa8
 8007dec:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	2ba8      	cmp	r3, #168	@ 0xa8
 8007df2:	d00b      	beq.n	8007e0c <xTaskCreateStatic+0x6c>
	__asm volatile
 8007df4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007df8:	f383 8811 	msr	BASEPRI, r3
 8007dfc:	f3bf 8f6f 	isb	sy
 8007e00:	f3bf 8f4f 	dsb	sy
 8007e04:	61bb      	str	r3, [r7, #24]
}
 8007e06:	bf00      	nop
 8007e08:	bf00      	nop
 8007e0a:	e7fd      	b.n	8007e08 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8007e0c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d01e      	beq.n	8007e52 <xTaskCreateStatic+0xb2>
 8007e14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d01b      	beq.n	8007e52 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e1c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e20:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007e22:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e26:	2202      	movs	r2, #2
 8007e28:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9303      	str	r3, [sp, #12]
 8007e30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e32:	9302      	str	r3, [sp, #8]
 8007e34:	f107 0314 	add.w	r3, r7, #20
 8007e38:	9301      	str	r3, [sp, #4]
 8007e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007e3c:	9300      	str	r3, [sp, #0]
 8007e3e:	683b      	ldr	r3, [r7, #0]
 8007e40:	687a      	ldr	r2, [r7, #4]
 8007e42:	68b9      	ldr	r1, [r7, #8]
 8007e44:	68f8      	ldr	r0, [r7, #12]
 8007e46:	f000 f851 	bl	8007eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007e4a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007e4c:	f000 f8f6 	bl	800803c <prvAddNewTaskToReadyList>
 8007e50:	e001      	b.n	8007e56 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8007e52:	2300      	movs	r3, #0
 8007e54:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8007e56:	697b      	ldr	r3, [r7, #20]
	}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3728      	adds	r7, #40	@ 0x28
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08c      	sub	sp, #48	@ 0x30
 8007e64:	af04      	add	r7, sp, #16
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	603b      	str	r3, [r7, #0]
 8007e6c:	4613      	mov	r3, r2
 8007e6e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007e70:	88fb      	ldrh	r3, [r7, #6]
 8007e72:	009b      	lsls	r3, r3, #2
 8007e74:	4618      	mov	r0, r3
 8007e76:	f001 fc79 	bl	800976c <pvPortMalloc>
 8007e7a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d00e      	beq.n	8007ea0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007e82:	20a8      	movs	r0, #168	@ 0xa8
 8007e84:	f001 fc72 	bl	800976c <pvPortMalloc>
 8007e88:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007e8a:	69fb      	ldr	r3, [r7, #28]
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d003      	beq.n	8007e98 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007e90:	69fb      	ldr	r3, [r7, #28]
 8007e92:	697a      	ldr	r2, [r7, #20]
 8007e94:	631a      	str	r2, [r3, #48]	@ 0x30
 8007e96:	e005      	b.n	8007ea4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007e98:	6978      	ldr	r0, [r7, #20]
 8007e9a:	f001 fd35 	bl	8009908 <vPortFree>
 8007e9e:	e001      	b.n	8007ea4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007ea4:	69fb      	ldr	r3, [r7, #28]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d017      	beq.n	8007eda <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007eaa:	69fb      	ldr	r3, [r7, #28]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007eb2:	88fa      	ldrh	r2, [r7, #6]
 8007eb4:	2300      	movs	r3, #0
 8007eb6:	9303      	str	r3, [sp, #12]
 8007eb8:	69fb      	ldr	r3, [r7, #28]
 8007eba:	9302      	str	r3, [sp, #8]
 8007ebc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ebe:	9301      	str	r3, [sp, #4]
 8007ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ec2:	9300      	str	r3, [sp, #0]
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	68b9      	ldr	r1, [r7, #8]
 8007ec8:	68f8      	ldr	r0, [r7, #12]
 8007eca:	f000 f80f 	bl	8007eec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007ece:	69f8      	ldr	r0, [r7, #28]
 8007ed0:	f000 f8b4 	bl	800803c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007ed4:	2301      	movs	r3, #1
 8007ed6:	61bb      	str	r3, [r7, #24]
 8007ed8:	e002      	b.n	8007ee0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007eda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ede:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007ee0:	69bb      	ldr	r3, [r7, #24]
	}
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	3720      	adds	r7, #32
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
	...

08007eec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8007eec:	b580      	push	{r7, lr}
 8007eee:	b088      	sub	sp, #32
 8007ef0:	af00      	add	r7, sp, #0
 8007ef2:	60f8      	str	r0, [r7, #12]
 8007ef4:	60b9      	str	r1, [r7, #8]
 8007ef6:	607a      	str	r2, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007efa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007efc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	461a      	mov	r2, r3
 8007f04:	21a5      	movs	r1, #165	@ 0xa5
 8007f06:	f001 fe3f 	bl	8009b88 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f0c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007f14:	3b01      	subs	r3, #1
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	4413      	add	r3, r2
 8007f1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007f1c:	69bb      	ldr	r3, [r7, #24]
 8007f1e:	f023 0307 	bic.w	r3, r3, #7
 8007f22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007f24:	69bb      	ldr	r3, [r7, #24]
 8007f26:	f003 0307 	and.w	r3, r3, #7
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d00b      	beq.n	8007f46 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8007f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f32:	f383 8811 	msr	BASEPRI, r3
 8007f36:	f3bf 8f6f 	isb	sy
 8007f3a:	f3bf 8f4f 	dsb	sy
 8007f3e:	617b      	str	r3, [r7, #20]
}
 8007f40:	bf00      	nop
 8007f42:	bf00      	nop
 8007f44:	e7fd      	b.n	8007f42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007f46:	68bb      	ldr	r3, [r7, #8]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d01f      	beq.n	8007f8c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f4c:	2300      	movs	r3, #0
 8007f4e:	61fb      	str	r3, [r7, #28]
 8007f50:	e012      	b.n	8007f78 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007f52:	68ba      	ldr	r2, [r7, #8]
 8007f54:	69fb      	ldr	r3, [r7, #28]
 8007f56:	4413      	add	r3, r2
 8007f58:	7819      	ldrb	r1, [r3, #0]
 8007f5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f5c:	69fb      	ldr	r3, [r7, #28]
 8007f5e:	4413      	add	r3, r2
 8007f60:	3334      	adds	r3, #52	@ 0x34
 8007f62:	460a      	mov	r2, r1
 8007f64:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007f66:	68ba      	ldr	r2, [r7, #8]
 8007f68:	69fb      	ldr	r3, [r7, #28]
 8007f6a:	4413      	add	r3, r2
 8007f6c:	781b      	ldrb	r3, [r3, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d006      	beq.n	8007f80 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007f72:	69fb      	ldr	r3, [r7, #28]
 8007f74:	3301      	adds	r3, #1
 8007f76:	61fb      	str	r3, [r7, #28]
 8007f78:	69fb      	ldr	r3, [r7, #28]
 8007f7a:	2b0f      	cmp	r3, #15
 8007f7c:	d9e9      	bls.n	8007f52 <prvInitialiseNewTask+0x66>
 8007f7e:	e000      	b.n	8007f82 <prvInitialiseNewTask+0x96>
			{
				break;
 8007f80:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007f82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007f8a:	e003      	b.n	8007f94 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f96:	2b37      	cmp	r3, #55	@ 0x37
 8007f98:	d901      	bls.n	8007f9e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007f9a:	2337      	movs	r3, #55	@ 0x37
 8007f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007f9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fa2:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fa6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fa8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fac:	2200      	movs	r2, #0
 8007fae:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fb2:	3304      	adds	r3, #4
 8007fb4:	4618      	mov	r0, r3
 8007fb6:	f7ff f965 	bl	8007284 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007fba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fbc:	3318      	adds	r3, #24
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	f7ff f960 	bl	8007284 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007fc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fc8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fcc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007fd0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007fd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007fd8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fdc:	2200      	movs	r2, #0
 8007fde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007fec:	3354      	adds	r3, #84	@ 0x54
 8007fee:	224c      	movs	r2, #76	@ 0x4c
 8007ff0:	2100      	movs	r1, #0
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	f001 fdc8 	bl	8009b88 <memset>
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffa:	4a0d      	ldr	r2, [pc, #52]	@ (8008030 <prvInitialiseNewTask+0x144>)
 8007ffc:	659a      	str	r2, [r3, #88]	@ 0x58
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008000:	4a0c      	ldr	r2, [pc, #48]	@ (8008034 <prvInitialiseNewTask+0x148>)
 8008002:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008004:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008006:	4a0c      	ldr	r2, [pc, #48]	@ (8008038 <prvInitialiseNewTask+0x14c>)
 8008008:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	68f9      	ldr	r1, [r7, #12]
 800800e:	69b8      	ldr	r0, [r7, #24]
 8008010:	f001 f95a 	bl	80092c8 <pxPortInitialiseStack>
 8008014:	4602      	mov	r2, r0
 8008016:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008018:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800801a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800801c:	2b00      	cmp	r3, #0
 800801e:	d002      	beq.n	8008026 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008020:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008022:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008024:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008026:	bf00      	nop
 8008028:	3720      	adds	r7, #32
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	20001fd0 	.word	0x20001fd0
 8008034:	20002038 	.word	0x20002038
 8008038:	200020a0 	.word	0x200020a0

0800803c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b082      	sub	sp, #8
 8008040:	af00      	add	r7, sp, #0
 8008042:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008044:	f001 fa70 	bl	8009528 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008048:	4b2d      	ldr	r3, [pc, #180]	@ (8008100 <prvAddNewTaskToReadyList+0xc4>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	3301      	adds	r3, #1
 800804e:	4a2c      	ldr	r2, [pc, #176]	@ (8008100 <prvAddNewTaskToReadyList+0xc4>)
 8008050:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008052:	4b2c      	ldr	r3, [pc, #176]	@ (8008104 <prvAddNewTaskToReadyList+0xc8>)
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d109      	bne.n	800806e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800805a:	4a2a      	ldr	r2, [pc, #168]	@ (8008104 <prvAddNewTaskToReadyList+0xc8>)
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008060:	4b27      	ldr	r3, [pc, #156]	@ (8008100 <prvAddNewTaskToReadyList+0xc4>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	2b01      	cmp	r3, #1
 8008066:	d110      	bne.n	800808a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008068:	f000 fc2e 	bl	80088c8 <prvInitialiseTaskLists>
 800806c:	e00d      	b.n	800808a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800806e:	4b26      	ldr	r3, [pc, #152]	@ (8008108 <prvAddNewTaskToReadyList+0xcc>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d109      	bne.n	800808a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008076:	4b23      	ldr	r3, [pc, #140]	@ (8008104 <prvAddNewTaskToReadyList+0xc8>)
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008080:	429a      	cmp	r2, r3
 8008082:	d802      	bhi.n	800808a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008084:	4a1f      	ldr	r2, [pc, #124]	@ (8008104 <prvAddNewTaskToReadyList+0xc8>)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800808a:	4b20      	ldr	r3, [pc, #128]	@ (800810c <prvAddNewTaskToReadyList+0xd0>)
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	3301      	adds	r3, #1
 8008090:	4a1e      	ldr	r2, [pc, #120]	@ (800810c <prvAddNewTaskToReadyList+0xd0>)
 8008092:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008094:	4b1d      	ldr	r3, [pc, #116]	@ (800810c <prvAddNewTaskToReadyList+0xd0>)
 8008096:	681a      	ldr	r2, [r3, #0]
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080a0:	4b1b      	ldr	r3, [pc, #108]	@ (8008110 <prvAddNewTaskToReadyList+0xd4>)
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d903      	bls.n	80080b0 <prvAddNewTaskToReadyList+0x74>
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080ac:	4a18      	ldr	r2, [pc, #96]	@ (8008110 <prvAddNewTaskToReadyList+0xd4>)
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080b4:	4613      	mov	r3, r2
 80080b6:	009b      	lsls	r3, r3, #2
 80080b8:	4413      	add	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4a15      	ldr	r2, [pc, #84]	@ (8008114 <prvAddNewTaskToReadyList+0xd8>)
 80080be:	441a      	add	r2, r3
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	3304      	adds	r3, #4
 80080c4:	4619      	mov	r1, r3
 80080c6:	4610      	mov	r0, r2
 80080c8:	f7ff f8e9 	bl	800729e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80080cc:	f001 fa5e 	bl	800958c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80080d0:	4b0d      	ldr	r3, [pc, #52]	@ (8008108 <prvAddNewTaskToReadyList+0xcc>)
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d00e      	beq.n	80080f6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80080d8:	4b0a      	ldr	r3, [pc, #40]	@ (8008104 <prvAddNewTaskToReadyList+0xc8>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080e2:	429a      	cmp	r2, r3
 80080e4:	d207      	bcs.n	80080f6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80080e6:	4b0c      	ldr	r3, [pc, #48]	@ (8008118 <prvAddNewTaskToReadyList+0xdc>)
 80080e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080ec:	601a      	str	r2, [r3, #0]
 80080ee:	f3bf 8f4f 	dsb	sy
 80080f2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80080f6:	bf00      	nop
 80080f8:	3708      	adds	r7, #8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop
 8008100:	20001298 	.word	0x20001298
 8008104:	20000dc4 	.word	0x20000dc4
 8008108:	200012a4 	.word	0x200012a4
 800810c:	200012b4 	.word	0x200012b4
 8008110:	200012a0 	.word	0x200012a0
 8008114:	20000dc8 	.word	0x20000dc8
 8008118:	e000ed04 	.word	0xe000ed04

0800811c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008124:	2300      	movs	r3, #0
 8008126:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d018      	beq.n	8008160 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800812e:	4b14      	ldr	r3, [pc, #80]	@ (8008180 <vTaskDelay+0x64>)
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d00b      	beq.n	800814e <vTaskDelay+0x32>
	__asm volatile
 8008136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	60bb      	str	r3, [r7, #8]
}
 8008148:	bf00      	nop
 800814a:	bf00      	nop
 800814c:	e7fd      	b.n	800814a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800814e:	f000 f88b 	bl	8008268 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008152:	2100      	movs	r1, #0
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 fd09 	bl	8008b6c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800815a:	f000 f893 	bl	8008284 <xTaskResumeAll>
 800815e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d107      	bne.n	8008176 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008166:	4b07      	ldr	r3, [pc, #28]	@ (8008184 <vTaskDelay+0x68>)
 8008168:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800816c:	601a      	str	r2, [r3, #0]
 800816e:	f3bf 8f4f 	dsb	sy
 8008172:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008176:	bf00      	nop
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}
 800817e:	bf00      	nop
 8008180:	200012c0 	.word	0x200012c0
 8008184:	e000ed04 	.word	0xe000ed04

08008188 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b08a      	sub	sp, #40	@ 0x28
 800818c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800818e:	2300      	movs	r3, #0
 8008190:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008192:	2300      	movs	r3, #0
 8008194:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008196:	463a      	mov	r2, r7
 8008198:	1d39      	adds	r1, r7, #4
 800819a:	f107 0308 	add.w	r3, r7, #8
 800819e:	4618      	mov	r0, r3
 80081a0:	f7ff f81c 	bl	80071dc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80081a4:	6839      	ldr	r1, [r7, #0]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	68ba      	ldr	r2, [r7, #8]
 80081aa:	9202      	str	r2, [sp, #8]
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	2300      	movs	r3, #0
 80081b0:	9300      	str	r3, [sp, #0]
 80081b2:	2300      	movs	r3, #0
 80081b4:	460a      	mov	r2, r1
 80081b6:	4924      	ldr	r1, [pc, #144]	@ (8008248 <vTaskStartScheduler+0xc0>)
 80081b8:	4824      	ldr	r0, [pc, #144]	@ (800824c <vTaskStartScheduler+0xc4>)
 80081ba:	f7ff fdf1 	bl	8007da0 <xTaskCreateStatic>
 80081be:	4603      	mov	r3, r0
 80081c0:	4a23      	ldr	r2, [pc, #140]	@ (8008250 <vTaskStartScheduler+0xc8>)
 80081c2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80081c4:	4b22      	ldr	r3, [pc, #136]	@ (8008250 <vTaskStartScheduler+0xc8>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d002      	beq.n	80081d2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80081cc:	2301      	movs	r3, #1
 80081ce:	617b      	str	r3, [r7, #20]
 80081d0:	e001      	b.n	80081d6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80081d2:	2300      	movs	r3, #0
 80081d4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	2b01      	cmp	r3, #1
 80081da:	d102      	bne.n	80081e2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80081dc:	f000 fd1a 	bl	8008c14 <xTimerCreateTimerTask>
 80081e0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80081e2:	697b      	ldr	r3, [r7, #20]
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d11b      	bne.n	8008220 <vTaskStartScheduler+0x98>
	__asm volatile
 80081e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ec:	f383 8811 	msr	BASEPRI, r3
 80081f0:	f3bf 8f6f 	isb	sy
 80081f4:	f3bf 8f4f 	dsb	sy
 80081f8:	613b      	str	r3, [r7, #16]
}
 80081fa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80081fc:	4b15      	ldr	r3, [pc, #84]	@ (8008254 <vTaskStartScheduler+0xcc>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	3354      	adds	r3, #84	@ 0x54
 8008202:	4a15      	ldr	r2, [pc, #84]	@ (8008258 <vTaskStartScheduler+0xd0>)
 8008204:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008206:	4b15      	ldr	r3, [pc, #84]	@ (800825c <vTaskStartScheduler+0xd4>)
 8008208:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800820c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800820e:	4b14      	ldr	r3, [pc, #80]	@ (8008260 <vTaskStartScheduler+0xd8>)
 8008210:	2201      	movs	r2, #1
 8008212:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008214:	4b13      	ldr	r3, [pc, #76]	@ (8008264 <vTaskStartScheduler+0xdc>)
 8008216:	2200      	movs	r2, #0
 8008218:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800821a:	f001 f8e1 	bl	80093e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800821e:	e00f      	b.n	8008240 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008226:	d10b      	bne.n	8008240 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800822c:	f383 8811 	msr	BASEPRI, r3
 8008230:	f3bf 8f6f 	isb	sy
 8008234:	f3bf 8f4f 	dsb	sy
 8008238:	60fb      	str	r3, [r7, #12]
}
 800823a:	bf00      	nop
 800823c:	bf00      	nop
 800823e:	e7fd      	b.n	800823c <vTaskStartScheduler+0xb4>
}
 8008240:	bf00      	nop
 8008242:	3718      	adds	r7, #24
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}
 8008248:	0800a580 	.word	0x0800a580
 800824c:	08008899 	.word	0x08008899
 8008250:	200012bc 	.word	0x200012bc
 8008254:	20000dc4 	.word	0x20000dc4
 8008258:	20000018 	.word	0x20000018
 800825c:	200012b8 	.word	0x200012b8
 8008260:	200012a4 	.word	0x200012a4
 8008264:	2000129c 	.word	0x2000129c

08008268 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008268:	b480      	push	{r7}
 800826a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800826c:	4b04      	ldr	r3, [pc, #16]	@ (8008280 <vTaskSuspendAll+0x18>)
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	3301      	adds	r3, #1
 8008272:	4a03      	ldr	r2, [pc, #12]	@ (8008280 <vTaskSuspendAll+0x18>)
 8008274:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008276:	bf00      	nop
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr
 8008280:	200012c0 	.word	0x200012c0

08008284 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b084      	sub	sp, #16
 8008288:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800828a:	2300      	movs	r3, #0
 800828c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800828e:	2300      	movs	r3, #0
 8008290:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008292:	4b42      	ldr	r3, [pc, #264]	@ (800839c <xTaskResumeAll+0x118>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	2b00      	cmp	r3, #0
 8008298:	d10b      	bne.n	80082b2 <xTaskResumeAll+0x2e>
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	603b      	str	r3, [r7, #0]
}
 80082ac:	bf00      	nop
 80082ae:	bf00      	nop
 80082b0:	e7fd      	b.n	80082ae <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082b2:	f001 f939 	bl	8009528 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082b6:	4b39      	ldr	r3, [pc, #228]	@ (800839c <xTaskResumeAll+0x118>)
 80082b8:	681b      	ldr	r3, [r3, #0]
 80082ba:	3b01      	subs	r3, #1
 80082bc:	4a37      	ldr	r2, [pc, #220]	@ (800839c <xTaskResumeAll+0x118>)
 80082be:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082c0:	4b36      	ldr	r3, [pc, #216]	@ (800839c <xTaskResumeAll+0x118>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d162      	bne.n	800838e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082c8:	4b35      	ldr	r3, [pc, #212]	@ (80083a0 <xTaskResumeAll+0x11c>)
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d05e      	beq.n	800838e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80082d0:	e02f      	b.n	8008332 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082d2:	4b34      	ldr	r3, [pc, #208]	@ (80083a4 <xTaskResumeAll+0x120>)
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	68db      	ldr	r3, [r3, #12]
 80082d8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	3318      	adds	r3, #24
 80082de:	4618      	mov	r0, r3
 80082e0:	f7ff f83a 	bl	8007358 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	3304      	adds	r3, #4
 80082e8:	4618      	mov	r0, r3
 80082ea:	f7ff f835 	bl	8007358 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80082f2:	4b2d      	ldr	r3, [pc, #180]	@ (80083a8 <xTaskResumeAll+0x124>)
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	429a      	cmp	r2, r3
 80082f8:	d903      	bls.n	8008302 <xTaskResumeAll+0x7e>
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80082fe:	4a2a      	ldr	r2, [pc, #168]	@ (80083a8 <xTaskResumeAll+0x124>)
 8008300:	6013      	str	r3, [r2, #0]
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008306:	4613      	mov	r3, r2
 8008308:	009b      	lsls	r3, r3, #2
 800830a:	4413      	add	r3, r2
 800830c:	009b      	lsls	r3, r3, #2
 800830e:	4a27      	ldr	r2, [pc, #156]	@ (80083ac <xTaskResumeAll+0x128>)
 8008310:	441a      	add	r2, r3
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	3304      	adds	r3, #4
 8008316:	4619      	mov	r1, r3
 8008318:	4610      	mov	r0, r2
 800831a:	f7fe ffc0 	bl	800729e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008322:	4b23      	ldr	r3, [pc, #140]	@ (80083b0 <xTaskResumeAll+0x12c>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008328:	429a      	cmp	r2, r3
 800832a:	d302      	bcc.n	8008332 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800832c:	4b21      	ldr	r3, [pc, #132]	@ (80083b4 <xTaskResumeAll+0x130>)
 800832e:	2201      	movs	r2, #1
 8008330:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008332:	4b1c      	ldr	r3, [pc, #112]	@ (80083a4 <xTaskResumeAll+0x120>)
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d1cb      	bne.n	80082d2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d001      	beq.n	8008344 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008340:	f000 fb66 	bl	8008a10 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008344:	4b1c      	ldr	r3, [pc, #112]	@ (80083b8 <xTaskResumeAll+0x134>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d010      	beq.n	8008372 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008350:	f000 f846 	bl	80083e0 <xTaskIncrementTick>
 8008354:	4603      	mov	r3, r0
 8008356:	2b00      	cmp	r3, #0
 8008358:	d002      	beq.n	8008360 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800835a:	4b16      	ldr	r3, [pc, #88]	@ (80083b4 <xTaskResumeAll+0x130>)
 800835c:	2201      	movs	r2, #1
 800835e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	3b01      	subs	r3, #1
 8008364:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2b00      	cmp	r3, #0
 800836a:	d1f1      	bne.n	8008350 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800836c:	4b12      	ldr	r3, [pc, #72]	@ (80083b8 <xTaskResumeAll+0x134>)
 800836e:	2200      	movs	r2, #0
 8008370:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008372:	4b10      	ldr	r3, [pc, #64]	@ (80083b4 <xTaskResumeAll+0x130>)
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d009      	beq.n	800838e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800837a:	2301      	movs	r3, #1
 800837c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800837e:	4b0f      	ldr	r3, [pc, #60]	@ (80083bc <xTaskResumeAll+0x138>)
 8008380:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	f3bf 8f4f 	dsb	sy
 800838a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800838e:	f001 f8fd 	bl	800958c <vPortExitCritical>

	return xAlreadyYielded;
 8008392:	68bb      	ldr	r3, [r7, #8]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}
 800839c:	200012c0 	.word	0x200012c0
 80083a0:	20001298 	.word	0x20001298
 80083a4:	20001258 	.word	0x20001258
 80083a8:	200012a0 	.word	0x200012a0
 80083ac:	20000dc8 	.word	0x20000dc8
 80083b0:	20000dc4 	.word	0x20000dc4
 80083b4:	200012ac 	.word	0x200012ac
 80083b8:	200012a8 	.word	0x200012a8
 80083bc:	e000ed04 	.word	0xe000ed04

080083c0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80083c0:	b480      	push	{r7}
 80083c2:	b083      	sub	sp, #12
 80083c4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80083c6:	4b05      	ldr	r3, [pc, #20]	@ (80083dc <xTaskGetTickCount+0x1c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80083cc:	687b      	ldr	r3, [r7, #4]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	2000129c 	.word	0x2000129c

080083e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ea:	4b4f      	ldr	r3, [pc, #316]	@ (8008528 <xTaskIncrementTick+0x148>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	f040 8090 	bne.w	8008514 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083f4:	4b4d      	ldr	r3, [pc, #308]	@ (800852c <xTaskIncrementTick+0x14c>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3301      	adds	r3, #1
 80083fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083fc:	4a4b      	ldr	r2, [pc, #300]	@ (800852c <xTaskIncrementTick+0x14c>)
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d121      	bne.n	800844c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008408:	4b49      	ldr	r3, [pc, #292]	@ (8008530 <xTaskIncrementTick+0x150>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d00b      	beq.n	800842a <xTaskIncrementTick+0x4a>
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	603b      	str	r3, [r7, #0]
}
 8008424:	bf00      	nop
 8008426:	bf00      	nop
 8008428:	e7fd      	b.n	8008426 <xTaskIncrementTick+0x46>
 800842a:	4b41      	ldr	r3, [pc, #260]	@ (8008530 <xTaskIncrementTick+0x150>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	60fb      	str	r3, [r7, #12]
 8008430:	4b40      	ldr	r3, [pc, #256]	@ (8008534 <xTaskIncrementTick+0x154>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a3e      	ldr	r2, [pc, #248]	@ (8008530 <xTaskIncrementTick+0x150>)
 8008436:	6013      	str	r3, [r2, #0]
 8008438:	4a3e      	ldr	r2, [pc, #248]	@ (8008534 <xTaskIncrementTick+0x154>)
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	6013      	str	r3, [r2, #0]
 800843e:	4b3e      	ldr	r3, [pc, #248]	@ (8008538 <xTaskIncrementTick+0x158>)
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	3301      	adds	r3, #1
 8008444:	4a3c      	ldr	r2, [pc, #240]	@ (8008538 <xTaskIncrementTick+0x158>)
 8008446:	6013      	str	r3, [r2, #0]
 8008448:	f000 fae2 	bl	8008a10 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800844c:	4b3b      	ldr	r3, [pc, #236]	@ (800853c <xTaskIncrementTick+0x15c>)
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	429a      	cmp	r2, r3
 8008454:	d349      	bcc.n	80084ea <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008456:	4b36      	ldr	r3, [pc, #216]	@ (8008530 <xTaskIncrementTick+0x150>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	2b00      	cmp	r3, #0
 800845e:	d104      	bne.n	800846a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008460:	4b36      	ldr	r3, [pc, #216]	@ (800853c <xTaskIncrementTick+0x15c>)
 8008462:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008466:	601a      	str	r2, [r3, #0]
					break;
 8008468:	e03f      	b.n	80084ea <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800846a:	4b31      	ldr	r3, [pc, #196]	@ (8008530 <xTaskIncrementTick+0x150>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	68db      	ldr	r3, [r3, #12]
 8008470:	68db      	ldr	r3, [r3, #12]
 8008472:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008474:	68bb      	ldr	r3, [r7, #8]
 8008476:	685b      	ldr	r3, [r3, #4]
 8008478:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800847a:	693a      	ldr	r2, [r7, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	429a      	cmp	r2, r3
 8008480:	d203      	bcs.n	800848a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008482:	4a2e      	ldr	r2, [pc, #184]	@ (800853c <xTaskIncrementTick+0x15c>)
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008488:	e02f      	b.n	80084ea <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800848a:	68bb      	ldr	r3, [r7, #8]
 800848c:	3304      	adds	r3, #4
 800848e:	4618      	mov	r0, r3
 8008490:	f7fe ff62 	bl	8007358 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008498:	2b00      	cmp	r3, #0
 800849a:	d004      	beq.n	80084a6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800849c:	68bb      	ldr	r3, [r7, #8]
 800849e:	3318      	adds	r3, #24
 80084a0:	4618      	mov	r0, r3
 80084a2:	f7fe ff59 	bl	8007358 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084aa:	4b25      	ldr	r3, [pc, #148]	@ (8008540 <xTaskIncrementTick+0x160>)
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	429a      	cmp	r2, r3
 80084b0:	d903      	bls.n	80084ba <xTaskIncrementTick+0xda>
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084b6:	4a22      	ldr	r2, [pc, #136]	@ (8008540 <xTaskIncrementTick+0x160>)
 80084b8:	6013      	str	r3, [r2, #0]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	009b      	lsls	r3, r3, #2
 80084c6:	4a1f      	ldr	r2, [pc, #124]	@ (8008544 <xTaskIncrementTick+0x164>)
 80084c8:	441a      	add	r2, r3
 80084ca:	68bb      	ldr	r3, [r7, #8]
 80084cc:	3304      	adds	r3, #4
 80084ce:	4619      	mov	r1, r3
 80084d0:	4610      	mov	r0, r2
 80084d2:	f7fe fee4 	bl	800729e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084da:	4b1b      	ldr	r3, [pc, #108]	@ (8008548 <xTaskIncrementTick+0x168>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084e0:	429a      	cmp	r2, r3
 80084e2:	d3b8      	bcc.n	8008456 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80084e4:	2301      	movs	r3, #1
 80084e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084e8:	e7b5      	b.n	8008456 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084ea:	4b17      	ldr	r3, [pc, #92]	@ (8008548 <xTaskIncrementTick+0x168>)
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084f0:	4914      	ldr	r1, [pc, #80]	@ (8008544 <xTaskIncrementTick+0x164>)
 80084f2:	4613      	mov	r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	4413      	add	r3, r2
 80084f8:	009b      	lsls	r3, r3, #2
 80084fa:	440b      	add	r3, r1
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2b01      	cmp	r3, #1
 8008500:	d901      	bls.n	8008506 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8008502:	2301      	movs	r3, #1
 8008504:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008506:	4b11      	ldr	r3, [pc, #68]	@ (800854c <xTaskIncrementTick+0x16c>)
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	2b00      	cmp	r3, #0
 800850c:	d007      	beq.n	800851e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800850e:	2301      	movs	r3, #1
 8008510:	617b      	str	r3, [r7, #20]
 8008512:	e004      	b.n	800851e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008514:	4b0e      	ldr	r3, [pc, #56]	@ (8008550 <xTaskIncrementTick+0x170>)
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	3301      	adds	r3, #1
 800851a:	4a0d      	ldr	r2, [pc, #52]	@ (8008550 <xTaskIncrementTick+0x170>)
 800851c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800851e:	697b      	ldr	r3, [r7, #20]
}
 8008520:	4618      	mov	r0, r3
 8008522:	3718      	adds	r7, #24
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}
 8008528:	200012c0 	.word	0x200012c0
 800852c:	2000129c 	.word	0x2000129c
 8008530:	20001250 	.word	0x20001250
 8008534:	20001254 	.word	0x20001254
 8008538:	200012b0 	.word	0x200012b0
 800853c:	200012b8 	.word	0x200012b8
 8008540:	200012a0 	.word	0x200012a0
 8008544:	20000dc8 	.word	0x20000dc8
 8008548:	20000dc4 	.word	0x20000dc4
 800854c:	200012ac 	.word	0x200012ac
 8008550:	200012a8 	.word	0x200012a8

08008554 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008554:	b480      	push	{r7}
 8008556:	b085      	sub	sp, #20
 8008558:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800855a:	4b2b      	ldr	r3, [pc, #172]	@ (8008608 <vTaskSwitchContext+0xb4>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d003      	beq.n	800856a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008562:	4b2a      	ldr	r3, [pc, #168]	@ (800860c <vTaskSwitchContext+0xb8>)
 8008564:	2201      	movs	r2, #1
 8008566:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008568:	e047      	b.n	80085fa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800856a:	4b28      	ldr	r3, [pc, #160]	@ (800860c <vTaskSwitchContext+0xb8>)
 800856c:	2200      	movs	r2, #0
 800856e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008570:	4b27      	ldr	r3, [pc, #156]	@ (8008610 <vTaskSwitchContext+0xbc>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	60fb      	str	r3, [r7, #12]
 8008576:	e011      	b.n	800859c <vTaskSwitchContext+0x48>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d10b      	bne.n	8008596 <vTaskSwitchContext+0x42>
	__asm volatile
 800857e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008582:	f383 8811 	msr	BASEPRI, r3
 8008586:	f3bf 8f6f 	isb	sy
 800858a:	f3bf 8f4f 	dsb	sy
 800858e:	607b      	str	r3, [r7, #4]
}
 8008590:	bf00      	nop
 8008592:	bf00      	nop
 8008594:	e7fd      	b.n	8008592 <vTaskSwitchContext+0x3e>
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	3b01      	subs	r3, #1
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	491d      	ldr	r1, [pc, #116]	@ (8008614 <vTaskSwitchContext+0xc0>)
 800859e:	68fa      	ldr	r2, [r7, #12]
 80085a0:	4613      	mov	r3, r2
 80085a2:	009b      	lsls	r3, r3, #2
 80085a4:	4413      	add	r3, r2
 80085a6:	009b      	lsls	r3, r3, #2
 80085a8:	440b      	add	r3, r1
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d0e3      	beq.n	8008578 <vTaskSwitchContext+0x24>
 80085b0:	68fa      	ldr	r2, [r7, #12]
 80085b2:	4613      	mov	r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	4413      	add	r3, r2
 80085b8:	009b      	lsls	r3, r3, #2
 80085ba:	4a16      	ldr	r2, [pc, #88]	@ (8008614 <vTaskSwitchContext+0xc0>)
 80085bc:	4413      	add	r3, r2
 80085be:	60bb      	str	r3, [r7, #8]
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	685a      	ldr	r2, [r3, #4]
 80085c6:	68bb      	ldr	r3, [r7, #8]
 80085c8:	605a      	str	r2, [r3, #4]
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	685a      	ldr	r2, [r3, #4]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	3308      	adds	r3, #8
 80085d2:	429a      	cmp	r2, r3
 80085d4:	d104      	bne.n	80085e0 <vTaskSwitchContext+0x8c>
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	685b      	ldr	r3, [r3, #4]
 80085da:	685a      	ldr	r2, [r3, #4]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	605a      	str	r2, [r3, #4]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	68db      	ldr	r3, [r3, #12]
 80085e6:	4a0c      	ldr	r2, [pc, #48]	@ (8008618 <vTaskSwitchContext+0xc4>)
 80085e8:	6013      	str	r3, [r2, #0]
 80085ea:	4a09      	ldr	r2, [pc, #36]	@ (8008610 <vTaskSwitchContext+0xbc>)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80085f0:	4b09      	ldr	r3, [pc, #36]	@ (8008618 <vTaskSwitchContext+0xc4>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	3354      	adds	r3, #84	@ 0x54
 80085f6:	4a09      	ldr	r2, [pc, #36]	@ (800861c <vTaskSwitchContext+0xc8>)
 80085f8:	6013      	str	r3, [r2, #0]
}
 80085fa:	bf00      	nop
 80085fc:	3714      	adds	r7, #20
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
 8008606:	bf00      	nop
 8008608:	200012c0 	.word	0x200012c0
 800860c:	200012ac 	.word	0x200012ac
 8008610:	200012a0 	.word	0x200012a0
 8008614:	20000dc8 	.word	0x20000dc8
 8008618:	20000dc4 	.word	0x20000dc4
 800861c:	20000018 	.word	0x20000018

08008620 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008620:	b580      	push	{r7, lr}
 8008622:	b084      	sub	sp, #16
 8008624:	af00      	add	r7, sp, #0
 8008626:	6078      	str	r0, [r7, #4]
 8008628:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10b      	bne.n	8008648 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8008630:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008634:	f383 8811 	msr	BASEPRI, r3
 8008638:	f3bf 8f6f 	isb	sy
 800863c:	f3bf 8f4f 	dsb	sy
 8008640:	60fb      	str	r3, [r7, #12]
}
 8008642:	bf00      	nop
 8008644:	bf00      	nop
 8008646:	e7fd      	b.n	8008644 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008648:	4b07      	ldr	r3, [pc, #28]	@ (8008668 <vTaskPlaceOnEventList+0x48>)
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	3318      	adds	r3, #24
 800864e:	4619      	mov	r1, r3
 8008650:	6878      	ldr	r0, [r7, #4]
 8008652:	f7fe fe48 	bl	80072e6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008656:	2101      	movs	r1, #1
 8008658:	6838      	ldr	r0, [r7, #0]
 800865a:	f000 fa87 	bl	8008b6c <prvAddCurrentTaskToDelayedList>
}
 800865e:	bf00      	nop
 8008660:	3710      	adds	r7, #16
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	20000dc4 	.word	0x20000dc4

0800866c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800866c:	b580      	push	{r7, lr}
 800866e:	b086      	sub	sp, #24
 8008670:	af00      	add	r7, sp, #0
 8008672:	60f8      	str	r0, [r7, #12]
 8008674:	60b9      	str	r1, [r7, #8]
 8008676:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d10b      	bne.n	8008696 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800867e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008682:	f383 8811 	msr	BASEPRI, r3
 8008686:	f3bf 8f6f 	isb	sy
 800868a:	f3bf 8f4f 	dsb	sy
 800868e:	617b      	str	r3, [r7, #20]
}
 8008690:	bf00      	nop
 8008692:	bf00      	nop
 8008694:	e7fd      	b.n	8008692 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008696:	4b0a      	ldr	r3, [pc, #40]	@ (80086c0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	3318      	adds	r3, #24
 800869c:	4619      	mov	r1, r3
 800869e:	68f8      	ldr	r0, [r7, #12]
 80086a0:	f7fe fdfd 	bl	800729e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d002      	beq.n	80086b0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80086aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80086ae:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80086b0:	6879      	ldr	r1, [r7, #4]
 80086b2:	68b8      	ldr	r0, [r7, #8]
 80086b4:	f000 fa5a 	bl	8008b6c <prvAddCurrentTaskToDelayedList>
	}
 80086b8:	bf00      	nop
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	20000dc4 	.word	0x20000dc4

080086c4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80086c4:	b580      	push	{r7, lr}
 80086c6:	b086      	sub	sp, #24
 80086c8:	af00      	add	r7, sp, #0
 80086ca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	68db      	ldr	r3, [r3, #12]
 80086d0:	68db      	ldr	r3, [r3, #12]
 80086d2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d10b      	bne.n	80086f2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80086da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086de:	f383 8811 	msr	BASEPRI, r3
 80086e2:	f3bf 8f6f 	isb	sy
 80086e6:	f3bf 8f4f 	dsb	sy
 80086ea:	60fb      	str	r3, [r7, #12]
}
 80086ec:	bf00      	nop
 80086ee:	bf00      	nop
 80086f0:	e7fd      	b.n	80086ee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80086f2:	693b      	ldr	r3, [r7, #16]
 80086f4:	3318      	adds	r3, #24
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe fe2e 	bl	8007358 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80086fc:	4b1d      	ldr	r3, [pc, #116]	@ (8008774 <xTaskRemoveFromEventList+0xb0>)
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2b00      	cmp	r3, #0
 8008702:	d11d      	bne.n	8008740 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008704:	693b      	ldr	r3, [r7, #16]
 8008706:	3304      	adds	r3, #4
 8008708:	4618      	mov	r0, r3
 800870a:	f7fe fe25 	bl	8007358 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800870e:	693b      	ldr	r3, [r7, #16]
 8008710:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008712:	4b19      	ldr	r3, [pc, #100]	@ (8008778 <xTaskRemoveFromEventList+0xb4>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	429a      	cmp	r2, r3
 8008718:	d903      	bls.n	8008722 <xTaskRemoveFromEventList+0x5e>
 800871a:	693b      	ldr	r3, [r7, #16]
 800871c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800871e:	4a16      	ldr	r2, [pc, #88]	@ (8008778 <xTaskRemoveFromEventList+0xb4>)
 8008720:	6013      	str	r3, [r2, #0]
 8008722:	693b      	ldr	r3, [r7, #16]
 8008724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008726:	4613      	mov	r3, r2
 8008728:	009b      	lsls	r3, r3, #2
 800872a:	4413      	add	r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	4a13      	ldr	r2, [pc, #76]	@ (800877c <xTaskRemoveFromEventList+0xb8>)
 8008730:	441a      	add	r2, r3
 8008732:	693b      	ldr	r3, [r7, #16]
 8008734:	3304      	adds	r3, #4
 8008736:	4619      	mov	r1, r3
 8008738:	4610      	mov	r0, r2
 800873a:	f7fe fdb0 	bl	800729e <vListInsertEnd>
 800873e:	e005      	b.n	800874c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008740:	693b      	ldr	r3, [r7, #16]
 8008742:	3318      	adds	r3, #24
 8008744:	4619      	mov	r1, r3
 8008746:	480e      	ldr	r0, [pc, #56]	@ (8008780 <xTaskRemoveFromEventList+0xbc>)
 8008748:	f7fe fda9 	bl	800729e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008750:	4b0c      	ldr	r3, [pc, #48]	@ (8008784 <xTaskRemoveFromEventList+0xc0>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008756:	429a      	cmp	r2, r3
 8008758:	d905      	bls.n	8008766 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800875a:	2301      	movs	r3, #1
 800875c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800875e:	4b0a      	ldr	r3, [pc, #40]	@ (8008788 <xTaskRemoveFromEventList+0xc4>)
 8008760:	2201      	movs	r2, #1
 8008762:	601a      	str	r2, [r3, #0]
 8008764:	e001      	b.n	800876a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8008766:	2300      	movs	r3, #0
 8008768:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800876a:	697b      	ldr	r3, [r7, #20]
}
 800876c:	4618      	mov	r0, r3
 800876e:	3718      	adds	r7, #24
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}
 8008774:	200012c0 	.word	0x200012c0
 8008778:	200012a0 	.word	0x200012a0
 800877c:	20000dc8 	.word	0x20000dc8
 8008780:	20001258 	.word	0x20001258
 8008784:	20000dc4 	.word	0x20000dc4
 8008788:	200012ac 	.word	0x200012ac

0800878c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008794:	4b06      	ldr	r3, [pc, #24]	@ (80087b0 <vTaskInternalSetTimeOutState+0x24>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800879c:	4b05      	ldr	r3, [pc, #20]	@ (80087b4 <vTaskInternalSetTimeOutState+0x28>)
 800879e:	681a      	ldr	r2, [r3, #0]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	605a      	str	r2, [r3, #4]
}
 80087a4:	bf00      	nop
 80087a6:	370c      	adds	r7, #12
 80087a8:	46bd      	mov	sp, r7
 80087aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ae:	4770      	bx	lr
 80087b0:	200012b0 	.word	0x200012b0
 80087b4:	2000129c 	.word	0x2000129c

080087b8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b088      	sub	sp, #32
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d10b      	bne.n	80087e0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80087c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087cc:	f383 8811 	msr	BASEPRI, r3
 80087d0:	f3bf 8f6f 	isb	sy
 80087d4:	f3bf 8f4f 	dsb	sy
 80087d8:	613b      	str	r3, [r7, #16]
}
 80087da:	bf00      	nop
 80087dc:	bf00      	nop
 80087de:	e7fd      	b.n	80087dc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80087e0:	683b      	ldr	r3, [r7, #0]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d10b      	bne.n	80087fe <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80087e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ea:	f383 8811 	msr	BASEPRI, r3
 80087ee:	f3bf 8f6f 	isb	sy
 80087f2:	f3bf 8f4f 	dsb	sy
 80087f6:	60fb      	str	r3, [r7, #12]
}
 80087f8:	bf00      	nop
 80087fa:	bf00      	nop
 80087fc:	e7fd      	b.n	80087fa <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80087fe:	f000 fe93 	bl	8009528 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008802:	4b1d      	ldr	r3, [pc, #116]	@ (8008878 <xTaskCheckForTimeOut+0xc0>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	1ad3      	subs	r3, r2, r3
 8008810:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008812:	683b      	ldr	r3, [r7, #0]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800881a:	d102      	bne.n	8008822 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800881c:	2300      	movs	r3, #0
 800881e:	61fb      	str	r3, [r7, #28]
 8008820:	e023      	b.n	800886a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681a      	ldr	r2, [r3, #0]
 8008826:	4b15      	ldr	r3, [pc, #84]	@ (800887c <xTaskCheckForTimeOut+0xc4>)
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d007      	beq.n	800883e <xTaskCheckForTimeOut+0x86>
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	69ba      	ldr	r2, [r7, #24]
 8008834:	429a      	cmp	r2, r3
 8008836:	d302      	bcc.n	800883e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008838:	2301      	movs	r3, #1
 800883a:	61fb      	str	r3, [r7, #28]
 800883c:	e015      	b.n	800886a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800883e:	683b      	ldr	r3, [r7, #0]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	697a      	ldr	r2, [r7, #20]
 8008844:	429a      	cmp	r2, r3
 8008846:	d20b      	bcs.n	8008860 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008848:	683b      	ldr	r3, [r7, #0]
 800884a:	681a      	ldr	r2, [r3, #0]
 800884c:	697b      	ldr	r3, [r7, #20]
 800884e:	1ad2      	subs	r2, r2, r3
 8008850:	683b      	ldr	r3, [r7, #0]
 8008852:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008854:	6878      	ldr	r0, [r7, #4]
 8008856:	f7ff ff99 	bl	800878c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800885a:	2300      	movs	r3, #0
 800885c:	61fb      	str	r3, [r7, #28]
 800885e:	e004      	b.n	800886a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	2200      	movs	r2, #0
 8008864:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008866:	2301      	movs	r3, #1
 8008868:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800886a:	f000 fe8f 	bl	800958c <vPortExitCritical>

	return xReturn;
 800886e:	69fb      	ldr	r3, [r7, #28]
}
 8008870:	4618      	mov	r0, r3
 8008872:	3720      	adds	r7, #32
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	2000129c 	.word	0x2000129c
 800887c:	200012b0 	.word	0x200012b0

08008880 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008880:	b480      	push	{r7}
 8008882:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008884:	4b03      	ldr	r3, [pc, #12]	@ (8008894 <vTaskMissedYield+0x14>)
 8008886:	2201      	movs	r2, #1
 8008888:	601a      	str	r2, [r3, #0]
}
 800888a:	bf00      	nop
 800888c:	46bd      	mov	sp, r7
 800888e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008892:	4770      	bx	lr
 8008894:	200012ac 	.word	0x200012ac

08008898 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80088a0:	f000 f852 	bl	8008948 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80088a4:	4b06      	ldr	r3, [pc, #24]	@ (80088c0 <prvIdleTask+0x28>)
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2b01      	cmp	r3, #1
 80088aa:	d9f9      	bls.n	80088a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80088ac:	4b05      	ldr	r3, [pc, #20]	@ (80088c4 <prvIdleTask+0x2c>)
 80088ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	f3bf 8f4f 	dsb	sy
 80088b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80088bc:	e7f0      	b.n	80088a0 <prvIdleTask+0x8>
 80088be:	bf00      	nop
 80088c0:	20000dc8 	.word	0x20000dc8
 80088c4:	e000ed04 	.word	0xe000ed04

080088c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b082      	sub	sp, #8
 80088cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088ce:	2300      	movs	r3, #0
 80088d0:	607b      	str	r3, [r7, #4]
 80088d2:	e00c      	b.n	80088ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80088d4:	687a      	ldr	r2, [r7, #4]
 80088d6:	4613      	mov	r3, r2
 80088d8:	009b      	lsls	r3, r3, #2
 80088da:	4413      	add	r3, r2
 80088dc:	009b      	lsls	r3, r3, #2
 80088de:	4a12      	ldr	r2, [pc, #72]	@ (8008928 <prvInitialiseTaskLists+0x60>)
 80088e0:	4413      	add	r3, r2
 80088e2:	4618      	mov	r0, r3
 80088e4:	f7fe fcae 	bl	8007244 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	3301      	adds	r3, #1
 80088ec:	607b      	str	r3, [r7, #4]
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b37      	cmp	r3, #55	@ 0x37
 80088f2:	d9ef      	bls.n	80088d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80088f4:	480d      	ldr	r0, [pc, #52]	@ (800892c <prvInitialiseTaskLists+0x64>)
 80088f6:	f7fe fca5 	bl	8007244 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80088fa:	480d      	ldr	r0, [pc, #52]	@ (8008930 <prvInitialiseTaskLists+0x68>)
 80088fc:	f7fe fca2 	bl	8007244 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008900:	480c      	ldr	r0, [pc, #48]	@ (8008934 <prvInitialiseTaskLists+0x6c>)
 8008902:	f7fe fc9f 	bl	8007244 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008906:	480c      	ldr	r0, [pc, #48]	@ (8008938 <prvInitialiseTaskLists+0x70>)
 8008908:	f7fe fc9c 	bl	8007244 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800890c:	480b      	ldr	r0, [pc, #44]	@ (800893c <prvInitialiseTaskLists+0x74>)
 800890e:	f7fe fc99 	bl	8007244 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008912:	4b0b      	ldr	r3, [pc, #44]	@ (8008940 <prvInitialiseTaskLists+0x78>)
 8008914:	4a05      	ldr	r2, [pc, #20]	@ (800892c <prvInitialiseTaskLists+0x64>)
 8008916:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008918:	4b0a      	ldr	r3, [pc, #40]	@ (8008944 <prvInitialiseTaskLists+0x7c>)
 800891a:	4a05      	ldr	r2, [pc, #20]	@ (8008930 <prvInitialiseTaskLists+0x68>)
 800891c:	601a      	str	r2, [r3, #0]
}
 800891e:	bf00      	nop
 8008920:	3708      	adds	r7, #8
 8008922:	46bd      	mov	sp, r7
 8008924:	bd80      	pop	{r7, pc}
 8008926:	bf00      	nop
 8008928:	20000dc8 	.word	0x20000dc8
 800892c:	20001228 	.word	0x20001228
 8008930:	2000123c 	.word	0x2000123c
 8008934:	20001258 	.word	0x20001258
 8008938:	2000126c 	.word	0x2000126c
 800893c:	20001284 	.word	0x20001284
 8008940:	20001250 	.word	0x20001250
 8008944:	20001254 	.word	0x20001254

08008948 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008948:	b580      	push	{r7, lr}
 800894a:	b082      	sub	sp, #8
 800894c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800894e:	e019      	b.n	8008984 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008950:	f000 fdea 	bl	8009528 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008954:	4b10      	ldr	r3, [pc, #64]	@ (8008998 <prvCheckTasksWaitingTermination+0x50>)
 8008956:	68db      	ldr	r3, [r3, #12]
 8008958:	68db      	ldr	r3, [r3, #12]
 800895a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	3304      	adds	r3, #4
 8008960:	4618      	mov	r0, r3
 8008962:	f7fe fcf9 	bl	8007358 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008966:	4b0d      	ldr	r3, [pc, #52]	@ (800899c <prvCheckTasksWaitingTermination+0x54>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3b01      	subs	r3, #1
 800896c:	4a0b      	ldr	r2, [pc, #44]	@ (800899c <prvCheckTasksWaitingTermination+0x54>)
 800896e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008970:	4b0b      	ldr	r3, [pc, #44]	@ (80089a0 <prvCheckTasksWaitingTermination+0x58>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	3b01      	subs	r3, #1
 8008976:	4a0a      	ldr	r2, [pc, #40]	@ (80089a0 <prvCheckTasksWaitingTermination+0x58>)
 8008978:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800897a:	f000 fe07 	bl	800958c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 f810 	bl	80089a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008984:	4b06      	ldr	r3, [pc, #24]	@ (80089a0 <prvCheckTasksWaitingTermination+0x58>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	2b00      	cmp	r3, #0
 800898a:	d1e1      	bne.n	8008950 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800898c:	bf00      	nop
 800898e:	bf00      	nop
 8008990:	3708      	adds	r7, #8
 8008992:	46bd      	mov	sp, r7
 8008994:	bd80      	pop	{r7, pc}
 8008996:	bf00      	nop
 8008998:	2000126c 	.word	0x2000126c
 800899c:	20001298 	.word	0x20001298
 80089a0:	20001280 	.word	0x20001280

080089a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	3354      	adds	r3, #84	@ 0x54
 80089b0:	4618      	mov	r0, r3
 80089b2:	f001 f8f1 	bl	8009b98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d108      	bne.n	80089d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 ff9f 	bl	8009908 <vPortFree>
				vPortFree( pxTCB );
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 ff9c 	bl	8009908 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80089d0:	e019      	b.n	8008a06 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d103      	bne.n	80089e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 ff93 	bl	8009908 <vPortFree>
	}
 80089e2:	e010      	b.n	8008a06 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80089ea:	2b02      	cmp	r3, #2
 80089ec:	d00b      	beq.n	8008a06 <prvDeleteTCB+0x62>
	__asm volatile
 80089ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f2:	f383 8811 	msr	BASEPRI, r3
 80089f6:	f3bf 8f6f 	isb	sy
 80089fa:	f3bf 8f4f 	dsb	sy
 80089fe:	60fb      	str	r3, [r7, #12]
}
 8008a00:	bf00      	nop
 8008a02:	bf00      	nop
 8008a04:	e7fd      	b.n	8008a02 <prvDeleteTCB+0x5e>
	}
 8008a06:	bf00      	nop
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}
	...

08008a10 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008a10:	b480      	push	{r7}
 8008a12:	b083      	sub	sp, #12
 8008a14:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008a16:	4b0c      	ldr	r3, [pc, #48]	@ (8008a48 <prvResetNextTaskUnblockTime+0x38>)
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d104      	bne.n	8008a2a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008a20:	4b0a      	ldr	r3, [pc, #40]	@ (8008a4c <prvResetNextTaskUnblockTime+0x3c>)
 8008a22:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008a26:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008a28:	e008      	b.n	8008a3c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a2a:	4b07      	ldr	r3, [pc, #28]	@ (8008a48 <prvResetNextTaskUnblockTime+0x38>)
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68db      	ldr	r3, [r3, #12]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	4a04      	ldr	r2, [pc, #16]	@ (8008a4c <prvResetNextTaskUnblockTime+0x3c>)
 8008a3a:	6013      	str	r3, [r2, #0]
}
 8008a3c:	bf00      	nop
 8008a3e:	370c      	adds	r7, #12
 8008a40:	46bd      	mov	sp, r7
 8008a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a46:	4770      	bx	lr
 8008a48:	20001250 	.word	0x20001250
 8008a4c:	200012b8 	.word	0x200012b8

08008a50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008a50:	b480      	push	{r7}
 8008a52:	b083      	sub	sp, #12
 8008a54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008a56:	4b0b      	ldr	r3, [pc, #44]	@ (8008a84 <xTaskGetSchedulerState+0x34>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d102      	bne.n	8008a64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008a5e:	2301      	movs	r3, #1
 8008a60:	607b      	str	r3, [r7, #4]
 8008a62:	e008      	b.n	8008a76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008a64:	4b08      	ldr	r3, [pc, #32]	@ (8008a88 <xTaskGetSchedulerState+0x38>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d102      	bne.n	8008a72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008a6c:	2302      	movs	r3, #2
 8008a6e:	607b      	str	r3, [r7, #4]
 8008a70:	e001      	b.n	8008a76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008a72:	2300      	movs	r3, #0
 8008a74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008a76:	687b      	ldr	r3, [r7, #4]
	}
 8008a78:	4618      	mov	r0, r3
 8008a7a:	370c      	adds	r7, #12
 8008a7c:	46bd      	mov	sp, r7
 8008a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a82:	4770      	bx	lr
 8008a84:	200012a4 	.word	0x200012a4
 8008a88:	200012c0 	.word	0x200012c0

08008a8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008a8c:	b580      	push	{r7, lr}
 8008a8e:	b086      	sub	sp, #24
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d058      	beq.n	8008b54 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008aa2:	4b2f      	ldr	r3, [pc, #188]	@ (8008b60 <xTaskPriorityDisinherit+0xd4>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	693a      	ldr	r2, [r7, #16]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d00b      	beq.n	8008ac4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8008aac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab0:	f383 8811 	msr	BASEPRI, r3
 8008ab4:	f3bf 8f6f 	isb	sy
 8008ab8:	f3bf 8f4f 	dsb	sy
 8008abc:	60fb      	str	r3, [r7, #12]
}
 8008abe:	bf00      	nop
 8008ac0:	bf00      	nop
 8008ac2:	e7fd      	b.n	8008ac0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d10b      	bne.n	8008ae4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8008acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad0:	f383 8811 	msr	BASEPRI, r3
 8008ad4:	f3bf 8f6f 	isb	sy
 8008ad8:	f3bf 8f4f 	dsb	sy
 8008adc:	60bb      	str	r3, [r7, #8]
}
 8008ade:	bf00      	nop
 8008ae0:	bf00      	nop
 8008ae2:	e7fd      	b.n	8008ae0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8008ae4:	693b      	ldr	r3, [r7, #16]
 8008ae6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008ae8:	1e5a      	subs	r2, r3, #1
 8008aea:	693b      	ldr	r3, [r7, #16]
 8008aec:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008af2:	693b      	ldr	r3, [r7, #16]
 8008af4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008af6:	429a      	cmp	r2, r3
 8008af8:	d02c      	beq.n	8008b54 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	d128      	bne.n	8008b54 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b02:	693b      	ldr	r3, [r7, #16]
 8008b04:	3304      	adds	r3, #4
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fe fc26 	bl	8007358 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b14:	693b      	ldr	r3, [r7, #16]
 8008b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b18:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b24:	4b0f      	ldr	r3, [pc, #60]	@ (8008b64 <xTaskPriorityDisinherit+0xd8>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	429a      	cmp	r2, r3
 8008b2a:	d903      	bls.n	8008b34 <xTaskPriorityDisinherit+0xa8>
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b30:	4a0c      	ldr	r2, [pc, #48]	@ (8008b64 <xTaskPriorityDisinherit+0xd8>)
 8008b32:	6013      	str	r3, [r2, #0]
 8008b34:	693b      	ldr	r3, [r7, #16]
 8008b36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b38:	4613      	mov	r3, r2
 8008b3a:	009b      	lsls	r3, r3, #2
 8008b3c:	4413      	add	r3, r2
 8008b3e:	009b      	lsls	r3, r3, #2
 8008b40:	4a09      	ldr	r2, [pc, #36]	@ (8008b68 <xTaskPriorityDisinherit+0xdc>)
 8008b42:	441a      	add	r2, r3
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	3304      	adds	r3, #4
 8008b48:	4619      	mov	r1, r3
 8008b4a:	4610      	mov	r0, r2
 8008b4c:	f7fe fba7 	bl	800729e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008b50:	2301      	movs	r3, #1
 8008b52:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008b54:	697b      	ldr	r3, [r7, #20]
	}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	20000dc4 	.word	0x20000dc4
 8008b64:	200012a0 	.word	0x200012a0
 8008b68:	20000dc8 	.word	0x20000dc8

08008b6c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b084      	sub	sp, #16
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
 8008b74:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008b76:	4b21      	ldr	r3, [pc, #132]	@ (8008bfc <prvAddCurrentTaskToDelayedList+0x90>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b7c:	4b20      	ldr	r3, [pc, #128]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	3304      	adds	r3, #4
 8008b82:	4618      	mov	r0, r3
 8008b84:	f7fe fbe8 	bl	8007358 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008b8e:	d10a      	bne.n	8008ba6 <prvAddCurrentTaskToDelayedList+0x3a>
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d007      	beq.n	8008ba6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008b96:	4b1a      	ldr	r3, [pc, #104]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	3304      	adds	r3, #4
 8008b9c:	4619      	mov	r1, r3
 8008b9e:	4819      	ldr	r0, [pc, #100]	@ (8008c04 <prvAddCurrentTaskToDelayedList+0x98>)
 8008ba0:	f7fe fb7d 	bl	800729e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008ba4:	e026      	b.n	8008bf4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	4413      	add	r3, r2
 8008bac:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008bae:	4b14      	ldr	r3, [pc, #80]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	68ba      	ldr	r2, [r7, #8]
 8008bb4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008bb6:	68ba      	ldr	r2, [r7, #8]
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	429a      	cmp	r2, r3
 8008bbc:	d209      	bcs.n	8008bd2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bbe:	4b12      	ldr	r3, [pc, #72]	@ (8008c08 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b0f      	ldr	r3, [pc, #60]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	3304      	adds	r3, #4
 8008bc8:	4619      	mov	r1, r3
 8008bca:	4610      	mov	r0, r2
 8008bcc:	f7fe fb8b 	bl	80072e6 <vListInsert>
}
 8008bd0:	e010      	b.n	8008bf4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008bd2:	4b0e      	ldr	r3, [pc, #56]	@ (8008c0c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008bd4:	681a      	ldr	r2, [r3, #0]
 8008bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8008c00 <prvAddCurrentTaskToDelayedList+0x94>)
 8008bd8:	681b      	ldr	r3, [r3, #0]
 8008bda:	3304      	adds	r3, #4
 8008bdc:	4619      	mov	r1, r3
 8008bde:	4610      	mov	r0, r2
 8008be0:	f7fe fb81 	bl	80072e6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008be4:	4b0a      	ldr	r3, [pc, #40]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	68ba      	ldr	r2, [r7, #8]
 8008bea:	429a      	cmp	r2, r3
 8008bec:	d202      	bcs.n	8008bf4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008bee:	4a08      	ldr	r2, [pc, #32]	@ (8008c10 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	6013      	str	r3, [r2, #0]
}
 8008bf4:	bf00      	nop
 8008bf6:	3710      	adds	r7, #16
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	bd80      	pop	{r7, pc}
 8008bfc:	2000129c 	.word	0x2000129c
 8008c00:	20000dc4 	.word	0x20000dc4
 8008c04:	20001284 	.word	0x20001284
 8008c08:	20001254 	.word	0x20001254
 8008c0c:	20001250 	.word	0x20001250
 8008c10:	200012b8 	.word	0x200012b8

08008c14 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b08a      	sub	sp, #40	@ 0x28
 8008c18:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008c1e:	f000 fb13 	bl	8009248 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008c22:	4b1d      	ldr	r3, [pc, #116]	@ (8008c98 <xTimerCreateTimerTask+0x84>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d021      	beq.n	8008c6e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008c2e:	2300      	movs	r3, #0
 8008c30:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008c32:	1d3a      	adds	r2, r7, #4
 8008c34:	f107 0108 	add.w	r1, r7, #8
 8008c38:	f107 030c 	add.w	r3, r7, #12
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f7fe fae7 	bl	8007210 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008c42:	6879      	ldr	r1, [r7, #4]
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	68fa      	ldr	r2, [r7, #12]
 8008c48:	9202      	str	r2, [sp, #8]
 8008c4a:	9301      	str	r3, [sp, #4]
 8008c4c:	2302      	movs	r3, #2
 8008c4e:	9300      	str	r3, [sp, #0]
 8008c50:	2300      	movs	r3, #0
 8008c52:	460a      	mov	r2, r1
 8008c54:	4911      	ldr	r1, [pc, #68]	@ (8008c9c <xTimerCreateTimerTask+0x88>)
 8008c56:	4812      	ldr	r0, [pc, #72]	@ (8008ca0 <xTimerCreateTimerTask+0x8c>)
 8008c58:	f7ff f8a2 	bl	8007da0 <xTaskCreateStatic>
 8008c5c:	4603      	mov	r3, r0
 8008c5e:	4a11      	ldr	r2, [pc, #68]	@ (8008ca4 <xTimerCreateTimerTask+0x90>)
 8008c60:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008c62:	4b10      	ldr	r3, [pc, #64]	@ (8008ca4 <xTimerCreateTimerTask+0x90>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8008c6a:	2301      	movs	r3, #1
 8008c6c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	2b00      	cmp	r3, #0
 8008c72:	d10b      	bne.n	8008c8c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008c74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c78:	f383 8811 	msr	BASEPRI, r3
 8008c7c:	f3bf 8f6f 	isb	sy
 8008c80:	f3bf 8f4f 	dsb	sy
 8008c84:	613b      	str	r3, [r7, #16]
}
 8008c86:	bf00      	nop
 8008c88:	bf00      	nop
 8008c8a:	e7fd      	b.n	8008c88 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8008c8c:	697b      	ldr	r3, [r7, #20]
}
 8008c8e:	4618      	mov	r0, r3
 8008c90:	3718      	adds	r7, #24
 8008c92:	46bd      	mov	sp, r7
 8008c94:	bd80      	pop	{r7, pc}
 8008c96:	bf00      	nop
 8008c98:	200012f4 	.word	0x200012f4
 8008c9c:	0800a588 	.word	0x0800a588
 8008ca0:	08008de1 	.word	0x08008de1
 8008ca4:	200012f8 	.word	0x200012f8

08008ca8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b08a      	sub	sp, #40	@ 0x28
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	60b9      	str	r1, [r7, #8]
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d10b      	bne.n	8008cd8 <xTimerGenericCommand+0x30>
	__asm volatile
 8008cc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cc4:	f383 8811 	msr	BASEPRI, r3
 8008cc8:	f3bf 8f6f 	isb	sy
 8008ccc:	f3bf 8f4f 	dsb	sy
 8008cd0:	623b      	str	r3, [r7, #32]
}
 8008cd2:	bf00      	nop
 8008cd4:	bf00      	nop
 8008cd6:	e7fd      	b.n	8008cd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8008cd8:	4b19      	ldr	r3, [pc, #100]	@ (8008d40 <xTimerGenericCommand+0x98>)
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d02a      	beq.n	8008d36 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008ce0:	68bb      	ldr	r3, [r7, #8]
 8008ce2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	2b05      	cmp	r3, #5
 8008cf0:	dc18      	bgt.n	8008d24 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008cf2:	f7ff fead 	bl	8008a50 <xTaskGetSchedulerState>
 8008cf6:	4603      	mov	r3, r0
 8008cf8:	2b02      	cmp	r3, #2
 8008cfa:	d109      	bne.n	8008d10 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008cfc:	4b10      	ldr	r3, [pc, #64]	@ (8008d40 <xTimerGenericCommand+0x98>)
 8008cfe:	6818      	ldr	r0, [r3, #0]
 8008d00:	f107 0110 	add.w	r1, r7, #16
 8008d04:	2300      	movs	r3, #0
 8008d06:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d08:	f7fe fc5a 	bl	80075c0 <xQueueGenericSend>
 8008d0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d0e:	e012      	b.n	8008d36 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008d10:	4b0b      	ldr	r3, [pc, #44]	@ (8008d40 <xTimerGenericCommand+0x98>)
 8008d12:	6818      	ldr	r0, [r3, #0]
 8008d14:	f107 0110 	add.w	r1, r7, #16
 8008d18:	2300      	movs	r3, #0
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	f7fe fc50 	bl	80075c0 <xQueueGenericSend>
 8008d20:	6278      	str	r0, [r7, #36]	@ 0x24
 8008d22:	e008      	b.n	8008d36 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008d24:	4b06      	ldr	r3, [pc, #24]	@ (8008d40 <xTimerGenericCommand+0x98>)
 8008d26:	6818      	ldr	r0, [r3, #0]
 8008d28:	f107 0110 	add.w	r1, r7, #16
 8008d2c:	2300      	movs	r3, #0
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	f7fe fd48 	bl	80077c4 <xQueueGenericSendFromISR>
 8008d34:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008d36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008d38:	4618      	mov	r0, r3
 8008d3a:	3728      	adds	r7, #40	@ 0x28
 8008d3c:	46bd      	mov	sp, r7
 8008d3e:	bd80      	pop	{r7, pc}
 8008d40:	200012f4 	.word	0x200012f4

08008d44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b088      	sub	sp, #32
 8008d48:	af02      	add	r7, sp, #8
 8008d4a:	6078      	str	r0, [r7, #4]
 8008d4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008d4e:	4b23      	ldr	r3, [pc, #140]	@ (8008ddc <prvProcessExpiredTimer+0x98>)
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	68db      	ldr	r3, [r3, #12]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008d58:	697b      	ldr	r3, [r7, #20]
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7fe fafb 	bl	8007358 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b00      	cmp	r3, #0
 8008d6e:	d023      	beq.n	8008db8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	699a      	ldr	r2, [r3, #24]
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	18d1      	adds	r1, r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	683a      	ldr	r2, [r7, #0]
 8008d7c:	6978      	ldr	r0, [r7, #20]
 8008d7e:	f000 f8d5 	bl	8008f2c <prvInsertTimerInActiveList>
 8008d82:	4603      	mov	r3, r0
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d020      	beq.n	8008dca <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008d88:	2300      	movs	r3, #0
 8008d8a:	9300      	str	r3, [sp, #0]
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	2100      	movs	r1, #0
 8008d92:	6978      	ldr	r0, [r7, #20]
 8008d94:	f7ff ff88 	bl	8008ca8 <xTimerGenericCommand>
 8008d98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008d9a:	693b      	ldr	r3, [r7, #16]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d114      	bne.n	8008dca <prvProcessExpiredTimer+0x86>
	__asm volatile
 8008da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da4:	f383 8811 	msr	BASEPRI, r3
 8008da8:	f3bf 8f6f 	isb	sy
 8008dac:	f3bf 8f4f 	dsb	sy
 8008db0:	60fb      	str	r3, [r7, #12]
}
 8008db2:	bf00      	nop
 8008db4:	bf00      	nop
 8008db6:	e7fd      	b.n	8008db4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008db8:	697b      	ldr	r3, [r7, #20]
 8008dba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008dbe:	f023 0301 	bic.w	r3, r3, #1
 8008dc2:	b2da      	uxtb	r2, r3
 8008dc4:	697b      	ldr	r3, [r7, #20]
 8008dc6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008dca:	697b      	ldr	r3, [r7, #20]
 8008dcc:	6a1b      	ldr	r3, [r3, #32]
 8008dce:	6978      	ldr	r0, [r7, #20]
 8008dd0:	4798      	blx	r3
}
 8008dd2:	bf00      	nop
 8008dd4:	3718      	adds	r7, #24
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	bd80      	pop	{r7, pc}
 8008dda:	bf00      	nop
 8008ddc:	200012ec 	.word	0x200012ec

08008de0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b084      	sub	sp, #16
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008de8:	f107 0308 	add.w	r3, r7, #8
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 f859 	bl	8008ea4 <prvGetNextExpireTime>
 8008df2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	4619      	mov	r1, r3
 8008df8:	68f8      	ldr	r0, [r7, #12]
 8008dfa:	f000 f805 	bl	8008e08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008dfe:	f000 f8d7 	bl	8008fb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008e02:	bf00      	nop
 8008e04:	e7f0      	b.n	8008de8 <prvTimerTask+0x8>
	...

08008e08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8008e08:	b580      	push	{r7, lr}
 8008e0a:	b084      	sub	sp, #16
 8008e0c:	af00      	add	r7, sp, #0
 8008e0e:	6078      	str	r0, [r7, #4]
 8008e10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008e12:	f7ff fa29 	bl	8008268 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008e16:	f107 0308 	add.w	r3, r7, #8
 8008e1a:	4618      	mov	r0, r3
 8008e1c:	f000 f866 	bl	8008eec <prvSampleTimeNow>
 8008e20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008e22:	68bb      	ldr	r3, [r7, #8]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d130      	bne.n	8008e8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008e28:	683b      	ldr	r3, [r7, #0]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <prvProcessTimerOrBlockTask+0x3c>
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	429a      	cmp	r2, r3
 8008e34:	d806      	bhi.n	8008e44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008e36:	f7ff fa25 	bl	8008284 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8008e3a:	68f9      	ldr	r1, [r7, #12]
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f7ff ff81 	bl	8008d44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008e42:	e024      	b.n	8008e8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008e44:	683b      	ldr	r3, [r7, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d008      	beq.n	8008e5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8008e4a:	4b13      	ldr	r3, [pc, #76]	@ (8008e98 <prvProcessTimerOrBlockTask+0x90>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d101      	bne.n	8008e58 <prvProcessTimerOrBlockTask+0x50>
 8008e54:	2301      	movs	r3, #1
 8008e56:	e000      	b.n	8008e5a <prvProcessTimerOrBlockTask+0x52>
 8008e58:	2300      	movs	r3, #0
 8008e5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008e9c <prvProcessTimerOrBlockTask+0x94>)
 8008e5e:	6818      	ldr	r0, [r3, #0]
 8008e60:	687a      	ldr	r2, [r7, #4]
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	1ad3      	subs	r3, r2, r3
 8008e66:	683a      	ldr	r2, [r7, #0]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	f7fe ff65 	bl	8007d38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008e6e:	f7ff fa09 	bl	8008284 <xTaskResumeAll>
 8008e72:	4603      	mov	r3, r0
 8008e74:	2b00      	cmp	r3, #0
 8008e76:	d10a      	bne.n	8008e8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008e78:	4b09      	ldr	r3, [pc, #36]	@ (8008ea0 <prvProcessTimerOrBlockTask+0x98>)
 8008e7a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e7e:	601a      	str	r2, [r3, #0]
 8008e80:	f3bf 8f4f 	dsb	sy
 8008e84:	f3bf 8f6f 	isb	sy
}
 8008e88:	e001      	b.n	8008e8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8008e8a:	f7ff f9fb 	bl	8008284 <xTaskResumeAll>
}
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}
 8008e96:	bf00      	nop
 8008e98:	200012f0 	.word	0x200012f0
 8008e9c:	200012f4 	.word	0x200012f4
 8008ea0:	e000ed04 	.word	0xe000ed04

08008ea4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b085      	sub	sp, #20
 8008ea8:	af00      	add	r7, sp, #0
 8008eaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008eac:	4b0e      	ldr	r3, [pc, #56]	@ (8008ee8 <prvGetNextExpireTime+0x44>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d101      	bne.n	8008eba <prvGetNextExpireTime+0x16>
 8008eb6:	2201      	movs	r2, #1
 8008eb8:	e000      	b.n	8008ebc <prvGetNextExpireTime+0x18>
 8008eba:	2200      	movs	r2, #0
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d105      	bne.n	8008ed4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008ec8:	4b07      	ldr	r3, [pc, #28]	@ (8008ee8 <prvGetNextExpireTime+0x44>)
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	68db      	ldr	r3, [r3, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	e001      	b.n	8008ed8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8008ed8:	68fb      	ldr	r3, [r7, #12]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3714      	adds	r7, #20
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	200012ec 	.word	0x200012ec

08008eec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008ef4:	f7ff fa64 	bl	80083c0 <xTaskGetTickCount>
 8008ef8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8008efa:	4b0b      	ldr	r3, [pc, #44]	@ (8008f28 <prvSampleTimeNow+0x3c>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	68fa      	ldr	r2, [r7, #12]
 8008f00:	429a      	cmp	r2, r3
 8008f02:	d205      	bcs.n	8008f10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008f04:	f000 f93a 	bl	800917c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2201      	movs	r2, #1
 8008f0c:	601a      	str	r2, [r3, #0]
 8008f0e:	e002      	b.n	8008f16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008f16:	4a04      	ldr	r2, [pc, #16]	@ (8008f28 <prvSampleTimeNow+0x3c>)
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	200012fc 	.word	0x200012fc

08008f2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008f2c:	b580      	push	{r7, lr}
 8008f2e:	b086      	sub	sp, #24
 8008f30:	af00      	add	r7, sp, #0
 8008f32:	60f8      	str	r0, [r7, #12]
 8008f34:	60b9      	str	r1, [r7, #8]
 8008f36:	607a      	str	r2, [r7, #4]
 8008f38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	68ba      	ldr	r2, [r7, #8]
 8008f42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008f4a:	68ba      	ldr	r2, [r7, #8]
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	429a      	cmp	r2, r3
 8008f50:	d812      	bhi.n	8008f78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008f52:	687a      	ldr	r2, [r7, #4]
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	1ad2      	subs	r2, r2, r3
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	699b      	ldr	r3, [r3, #24]
 8008f5c:	429a      	cmp	r2, r3
 8008f5e:	d302      	bcc.n	8008f66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008f60:	2301      	movs	r3, #1
 8008f62:	617b      	str	r3, [r7, #20]
 8008f64:	e01b      	b.n	8008f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008f66:	4b10      	ldr	r3, [pc, #64]	@ (8008fa8 <prvInsertTimerInActiveList+0x7c>)
 8008f68:	681a      	ldr	r2, [r3, #0]
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	3304      	adds	r3, #4
 8008f6e:	4619      	mov	r1, r3
 8008f70:	4610      	mov	r0, r2
 8008f72:	f7fe f9b8 	bl	80072e6 <vListInsert>
 8008f76:	e012      	b.n	8008f9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008f78:	687a      	ldr	r2, [r7, #4]
 8008f7a:	683b      	ldr	r3, [r7, #0]
 8008f7c:	429a      	cmp	r2, r3
 8008f7e:	d206      	bcs.n	8008f8e <prvInsertTimerInActiveList+0x62>
 8008f80:	68ba      	ldr	r2, [r7, #8]
 8008f82:	683b      	ldr	r3, [r7, #0]
 8008f84:	429a      	cmp	r2, r3
 8008f86:	d302      	bcc.n	8008f8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008f88:	2301      	movs	r3, #1
 8008f8a:	617b      	str	r3, [r7, #20]
 8008f8c:	e007      	b.n	8008f9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008f8e:	4b07      	ldr	r3, [pc, #28]	@ (8008fac <prvInsertTimerInActiveList+0x80>)
 8008f90:	681a      	ldr	r2, [r3, #0]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	3304      	adds	r3, #4
 8008f96:	4619      	mov	r1, r3
 8008f98:	4610      	mov	r0, r2
 8008f9a:	f7fe f9a4 	bl	80072e6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008f9e:	697b      	ldr	r3, [r7, #20]
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3718      	adds	r7, #24
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	200012f0 	.word	0x200012f0
 8008fac:	200012ec 	.word	0x200012ec

08008fb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	b08e      	sub	sp, #56	@ 0x38
 8008fb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008fb6:	e0ce      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	da19      	bge.n	8008ff2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008fbe:	1d3b      	adds	r3, r7, #4
 8008fc0:	3304      	adds	r3, #4
 8008fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008fc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d10b      	bne.n	8008fe2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8008fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fce:	f383 8811 	msr	BASEPRI, r3
 8008fd2:	f3bf 8f6f 	isb	sy
 8008fd6:	f3bf 8f4f 	dsb	sy
 8008fda:	61fb      	str	r3, [r7, #28]
}
 8008fdc:	bf00      	nop
 8008fde:	bf00      	nop
 8008fe0:	e7fd      	b.n	8008fde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008fe2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fe8:	6850      	ldr	r0, [r2, #4]
 8008fea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008fec:	6892      	ldr	r2, [r2, #8]
 8008fee:	4611      	mov	r1, r2
 8008ff0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	f2c0 80ae 	blt.w	8009156 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008ffa:	68fb      	ldr	r3, [r7, #12]
 8008ffc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ffe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009000:	695b      	ldr	r3, [r3, #20]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d004      	beq.n	8009010 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009006:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009008:	3304      	adds	r3, #4
 800900a:	4618      	mov	r0, r3
 800900c:	f7fe f9a4 	bl	8007358 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009010:	463b      	mov	r3, r7
 8009012:	4618      	mov	r0, r3
 8009014:	f7ff ff6a 	bl	8008eec <prvSampleTimeNow>
 8009018:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2b09      	cmp	r3, #9
 800901e:	f200 8097 	bhi.w	8009150 <prvProcessReceivedCommands+0x1a0>
 8009022:	a201      	add	r2, pc, #4	@ (adr r2, 8009028 <prvProcessReceivedCommands+0x78>)
 8009024:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009028:	08009051 	.word	0x08009051
 800902c:	08009051 	.word	0x08009051
 8009030:	08009051 	.word	0x08009051
 8009034:	080090c7 	.word	0x080090c7
 8009038:	080090db 	.word	0x080090db
 800903c:	08009127 	.word	0x08009127
 8009040:	08009051 	.word	0x08009051
 8009044:	08009051 	.word	0x08009051
 8009048:	080090c7 	.word	0x080090c7
 800904c:	080090db 	.word	0x080090db
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009052:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009056:	f043 0301 	orr.w	r3, r3, #1
 800905a:	b2da      	uxtb	r2, r3
 800905c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800905e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009062:	68ba      	ldr	r2, [r7, #8]
 8009064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009066:	699b      	ldr	r3, [r3, #24]
 8009068:	18d1      	adds	r1, r2, r3
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800906e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009070:	f7ff ff5c 	bl	8008f2c <prvInsertTimerInActiveList>
 8009074:	4603      	mov	r3, r0
 8009076:	2b00      	cmp	r3, #0
 8009078:	d06c      	beq.n	8009154 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800907a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800907c:	6a1b      	ldr	r3, [r3, #32]
 800907e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009080:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009084:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009088:	f003 0304 	and.w	r3, r3, #4
 800908c:	2b00      	cmp	r3, #0
 800908e:	d061      	beq.n	8009154 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009094:	699b      	ldr	r3, [r3, #24]
 8009096:	441a      	add	r2, r3
 8009098:	2300      	movs	r3, #0
 800909a:	9300      	str	r3, [sp, #0]
 800909c:	2300      	movs	r3, #0
 800909e:	2100      	movs	r1, #0
 80090a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80090a2:	f7ff fe01 	bl	8008ca8 <xTimerGenericCommand>
 80090a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80090a8:	6a3b      	ldr	r3, [r7, #32]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d152      	bne.n	8009154 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	61bb      	str	r3, [r7, #24]
}
 80090c0:	bf00      	nop
 80090c2:	bf00      	nop
 80090c4:	e7fd      	b.n	80090c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80090c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090cc:	f023 0301 	bic.w	r3, r3, #1
 80090d0:	b2da      	uxtb	r2, r3
 80090d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090d4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80090d8:	e03d      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80090da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80090e0:	f043 0301 	orr.w	r3, r3, #1
 80090e4:	b2da      	uxtb	r2, r3
 80090e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80090ec:	68ba      	ldr	r2, [r7, #8]
 80090ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80090f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80090f4:	699b      	ldr	r3, [r3, #24]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d10b      	bne.n	8009112 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80090fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090fe:	f383 8811 	msr	BASEPRI, r3
 8009102:	f3bf 8f6f 	isb	sy
 8009106:	f3bf 8f4f 	dsb	sy
 800910a:	617b      	str	r3, [r7, #20]
}
 800910c:	bf00      	nop
 800910e:	bf00      	nop
 8009110:	e7fd      	b.n	800910e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009114:	699a      	ldr	r2, [r3, #24]
 8009116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009118:	18d1      	adds	r1, r2, r3
 800911a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800911c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800911e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009120:	f7ff ff04 	bl	8008f2c <prvInsertTimerInActiveList>
					break;
 8009124:	e017      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009128:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800912c:	f003 0302 	and.w	r3, r3, #2
 8009130:	2b00      	cmp	r3, #0
 8009132:	d103      	bne.n	800913c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009134:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009136:	f000 fbe7 	bl	8009908 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800913a:	e00c      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800913c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800913e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009142:	f023 0301 	bic.w	r3, r3, #1
 8009146:	b2da      	uxtb	r2, r3
 8009148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800914a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800914e:	e002      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009150:	bf00      	nop
 8009152:	e000      	b.n	8009156 <prvProcessReceivedCommands+0x1a6>
					break;
 8009154:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009156:	4b08      	ldr	r3, [pc, #32]	@ (8009178 <prvProcessReceivedCommands+0x1c8>)
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	1d39      	adds	r1, r7, #4
 800915c:	2200      	movs	r2, #0
 800915e:	4618      	mov	r0, r3
 8009160:	f7fe fbce 	bl	8007900 <xQueueReceive>
 8009164:	4603      	mov	r3, r0
 8009166:	2b00      	cmp	r3, #0
 8009168:	f47f af26 	bne.w	8008fb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800916c:	bf00      	nop
 800916e:	bf00      	nop
 8009170:	3730      	adds	r7, #48	@ 0x30
 8009172:	46bd      	mov	sp, r7
 8009174:	bd80      	pop	{r7, pc}
 8009176:	bf00      	nop
 8009178:	200012f4 	.word	0x200012f4

0800917c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800917c:	b580      	push	{r7, lr}
 800917e:	b088      	sub	sp, #32
 8009180:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009182:	e049      	b.n	8009218 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009184:	4b2e      	ldr	r3, [pc, #184]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68db      	ldr	r3, [r3, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800918e:	4b2c      	ldr	r3, [pc, #176]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	68db      	ldr	r3, [r3, #12]
 8009194:	68db      	ldr	r3, [r3, #12]
 8009196:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	3304      	adds	r3, #4
 800919c:	4618      	mov	r0, r3
 800919e:	f7fe f8db 	bl	8007358 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6a1b      	ldr	r3, [r3, #32]
 80091a6:	68f8      	ldr	r0, [r7, #12]
 80091a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80091b0:	f003 0304 	and.w	r3, r3, #4
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d02f      	beq.n	8009218 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	699b      	ldr	r3, [r3, #24]
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	4413      	add	r3, r2
 80091c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80091c2:	68ba      	ldr	r2, [r7, #8]
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	429a      	cmp	r2, r3
 80091c8:	d90e      	bls.n	80091e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	68ba      	ldr	r2, [r7, #8]
 80091ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	68fa      	ldr	r2, [r7, #12]
 80091d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80091d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 80091d8:	681a      	ldr	r2, [r3, #0]
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	3304      	adds	r3, #4
 80091de:	4619      	mov	r1, r3
 80091e0:	4610      	mov	r0, r2
 80091e2:	f7fe f880 	bl	80072e6 <vListInsert>
 80091e6:	e017      	b.n	8009218 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80091e8:	2300      	movs	r3, #0
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	2300      	movs	r3, #0
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	2100      	movs	r1, #0
 80091f2:	68f8      	ldr	r0, [r7, #12]
 80091f4:	f7ff fd58 	bl	8008ca8 <xTimerGenericCommand>
 80091f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80091fa:	687b      	ldr	r3, [r7, #4]
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d10b      	bne.n	8009218 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009200:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009204:	f383 8811 	msr	BASEPRI, r3
 8009208:	f3bf 8f6f 	isb	sy
 800920c:	f3bf 8f4f 	dsb	sy
 8009210:	603b      	str	r3, [r7, #0]
}
 8009212:	bf00      	nop
 8009214:	bf00      	nop
 8009216:	e7fd      	b.n	8009214 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009218:	4b09      	ldr	r3, [pc, #36]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	2b00      	cmp	r3, #0
 8009220:	d1b0      	bne.n	8009184 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009222:	4b07      	ldr	r3, [pc, #28]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009228:	4b06      	ldr	r3, [pc, #24]	@ (8009244 <prvSwitchTimerLists+0xc8>)
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	4a04      	ldr	r2, [pc, #16]	@ (8009240 <prvSwitchTimerLists+0xc4>)
 800922e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009230:	4a04      	ldr	r2, [pc, #16]	@ (8009244 <prvSwitchTimerLists+0xc8>)
 8009232:	697b      	ldr	r3, [r7, #20]
 8009234:	6013      	str	r3, [r2, #0]
}
 8009236:	bf00      	nop
 8009238:	3718      	adds	r7, #24
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	200012ec 	.word	0x200012ec
 8009244:	200012f0 	.word	0x200012f0

08009248 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b082      	sub	sp, #8
 800924c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800924e:	f000 f96b 	bl	8009528 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009252:	4b15      	ldr	r3, [pc, #84]	@ (80092a8 <prvCheckForValidListAndQueue+0x60>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	2b00      	cmp	r3, #0
 8009258:	d120      	bne.n	800929c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800925a:	4814      	ldr	r0, [pc, #80]	@ (80092ac <prvCheckForValidListAndQueue+0x64>)
 800925c:	f7fd fff2 	bl	8007244 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009260:	4813      	ldr	r0, [pc, #76]	@ (80092b0 <prvCheckForValidListAndQueue+0x68>)
 8009262:	f7fd ffef 	bl	8007244 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009266:	4b13      	ldr	r3, [pc, #76]	@ (80092b4 <prvCheckForValidListAndQueue+0x6c>)
 8009268:	4a10      	ldr	r2, [pc, #64]	@ (80092ac <prvCheckForValidListAndQueue+0x64>)
 800926a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800926c:	4b12      	ldr	r3, [pc, #72]	@ (80092b8 <prvCheckForValidListAndQueue+0x70>)
 800926e:	4a10      	ldr	r2, [pc, #64]	@ (80092b0 <prvCheckForValidListAndQueue+0x68>)
 8009270:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009272:	2300      	movs	r3, #0
 8009274:	9300      	str	r3, [sp, #0]
 8009276:	4b11      	ldr	r3, [pc, #68]	@ (80092bc <prvCheckForValidListAndQueue+0x74>)
 8009278:	4a11      	ldr	r2, [pc, #68]	@ (80092c0 <prvCheckForValidListAndQueue+0x78>)
 800927a:	2110      	movs	r1, #16
 800927c:	200a      	movs	r0, #10
 800927e:	f7fe f8ff 	bl	8007480 <xQueueGenericCreateStatic>
 8009282:	4603      	mov	r3, r0
 8009284:	4a08      	ldr	r2, [pc, #32]	@ (80092a8 <prvCheckForValidListAndQueue+0x60>)
 8009286:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009288:	4b07      	ldr	r3, [pc, #28]	@ (80092a8 <prvCheckForValidListAndQueue+0x60>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d005      	beq.n	800929c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009290:	4b05      	ldr	r3, [pc, #20]	@ (80092a8 <prvCheckForValidListAndQueue+0x60>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	490b      	ldr	r1, [pc, #44]	@ (80092c4 <prvCheckForValidListAndQueue+0x7c>)
 8009296:	4618      	mov	r0, r3
 8009298:	f7fe fd24 	bl	8007ce4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800929c:	f000 f976 	bl	800958c <vPortExitCritical>
}
 80092a0:	bf00      	nop
 80092a2:	46bd      	mov	sp, r7
 80092a4:	bd80      	pop	{r7, pc}
 80092a6:	bf00      	nop
 80092a8:	200012f4 	.word	0x200012f4
 80092ac:	200012c4 	.word	0x200012c4
 80092b0:	200012d8 	.word	0x200012d8
 80092b4:	200012ec 	.word	0x200012ec
 80092b8:	200012f0 	.word	0x200012f0
 80092bc:	200013a0 	.word	0x200013a0
 80092c0:	20001300 	.word	0x20001300
 80092c4:	0800a590 	.word	0x0800a590

080092c8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80092c8:	b480      	push	{r7}
 80092ca:	b085      	sub	sp, #20
 80092cc:	af00      	add	r7, sp, #0
 80092ce:	60f8      	str	r0, [r7, #12]
 80092d0:	60b9      	str	r1, [r7, #8]
 80092d2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	3b04      	subs	r3, #4
 80092d8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80092e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	3b04      	subs	r3, #4
 80092e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80092e8:	68bb      	ldr	r3, [r7, #8]
 80092ea:	f023 0201 	bic.w	r2, r3, #1
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	3b04      	subs	r3, #4
 80092f6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80092f8:	4a0c      	ldr	r2, [pc, #48]	@ (800932c <pxPortInitialiseStack+0x64>)
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	3b14      	subs	r3, #20
 8009302:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009304:	687a      	ldr	r2, [r7, #4]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800930a:	68fb      	ldr	r3, [r7, #12]
 800930c:	3b04      	subs	r3, #4
 800930e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	f06f 0202 	mvn.w	r2, #2
 8009316:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	3b20      	subs	r3, #32
 800931c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800931e:	68fb      	ldr	r3, [r7, #12]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3714      	adds	r7, #20
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr
 800932c:	08009331 	.word	0x08009331

08009330 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009330:	b480      	push	{r7}
 8009332:	b085      	sub	sp, #20
 8009334:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009336:	2300      	movs	r3, #0
 8009338:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800933a:	4b13      	ldr	r3, [pc, #76]	@ (8009388 <prvTaskExitError+0x58>)
 800933c:	681b      	ldr	r3, [r3, #0]
 800933e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009342:	d00b      	beq.n	800935c <prvTaskExitError+0x2c>
	__asm volatile
 8009344:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009348:	f383 8811 	msr	BASEPRI, r3
 800934c:	f3bf 8f6f 	isb	sy
 8009350:	f3bf 8f4f 	dsb	sy
 8009354:	60fb      	str	r3, [r7, #12]
}
 8009356:	bf00      	nop
 8009358:	bf00      	nop
 800935a:	e7fd      	b.n	8009358 <prvTaskExitError+0x28>
	__asm volatile
 800935c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009360:	f383 8811 	msr	BASEPRI, r3
 8009364:	f3bf 8f6f 	isb	sy
 8009368:	f3bf 8f4f 	dsb	sy
 800936c:	60bb      	str	r3, [r7, #8]
}
 800936e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009370:	bf00      	nop
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d0fc      	beq.n	8009372 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009378:	bf00      	nop
 800937a:	bf00      	nop
 800937c:	3714      	adds	r7, #20
 800937e:	46bd      	mov	sp, r7
 8009380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009384:	4770      	bx	lr
 8009386:	bf00      	nop
 8009388:	20000014 	.word	0x20000014
 800938c:	00000000 	.word	0x00000000

08009390 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009390:	4b07      	ldr	r3, [pc, #28]	@ (80093b0 <pxCurrentTCBConst2>)
 8009392:	6819      	ldr	r1, [r3, #0]
 8009394:	6808      	ldr	r0, [r1, #0]
 8009396:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939a:	f380 8809 	msr	PSP, r0
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f04f 0000 	mov.w	r0, #0
 80093a6:	f380 8811 	msr	BASEPRI, r0
 80093aa:	4770      	bx	lr
 80093ac:	f3af 8000 	nop.w

080093b0 <pxCurrentTCBConst2>:
 80093b0:	20000dc4 	.word	0x20000dc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80093b4:	bf00      	nop
 80093b6:	bf00      	nop

080093b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80093b8:	4808      	ldr	r0, [pc, #32]	@ (80093dc <prvPortStartFirstTask+0x24>)
 80093ba:	6800      	ldr	r0, [r0, #0]
 80093bc:	6800      	ldr	r0, [r0, #0]
 80093be:	f380 8808 	msr	MSP, r0
 80093c2:	f04f 0000 	mov.w	r0, #0
 80093c6:	f380 8814 	msr	CONTROL, r0
 80093ca:	b662      	cpsie	i
 80093cc:	b661      	cpsie	f
 80093ce:	f3bf 8f4f 	dsb	sy
 80093d2:	f3bf 8f6f 	isb	sy
 80093d6:	df00      	svc	0
 80093d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80093da:	bf00      	nop
 80093dc:	e000ed08 	.word	0xe000ed08

080093e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80093e0:	b580      	push	{r7, lr}
 80093e2:	b086      	sub	sp, #24
 80093e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80093e6:	4b47      	ldr	r3, [pc, #284]	@ (8009504 <xPortStartScheduler+0x124>)
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	4a47      	ldr	r2, [pc, #284]	@ (8009508 <xPortStartScheduler+0x128>)
 80093ec:	4293      	cmp	r3, r2
 80093ee:	d10b      	bne.n	8009408 <xPortStartScheduler+0x28>
	__asm volatile
 80093f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093f4:	f383 8811 	msr	BASEPRI, r3
 80093f8:	f3bf 8f6f 	isb	sy
 80093fc:	f3bf 8f4f 	dsb	sy
 8009400:	613b      	str	r3, [r7, #16]
}
 8009402:	bf00      	nop
 8009404:	bf00      	nop
 8009406:	e7fd      	b.n	8009404 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009408:	4b3e      	ldr	r3, [pc, #248]	@ (8009504 <xPortStartScheduler+0x124>)
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4a3f      	ldr	r2, [pc, #252]	@ (800950c <xPortStartScheduler+0x12c>)
 800940e:	4293      	cmp	r3, r2
 8009410:	d10b      	bne.n	800942a <xPortStartScheduler+0x4a>
	__asm volatile
 8009412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009416:	f383 8811 	msr	BASEPRI, r3
 800941a:	f3bf 8f6f 	isb	sy
 800941e:	f3bf 8f4f 	dsb	sy
 8009422:	60fb      	str	r3, [r7, #12]
}
 8009424:	bf00      	nop
 8009426:	bf00      	nop
 8009428:	e7fd      	b.n	8009426 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800942a:	4b39      	ldr	r3, [pc, #228]	@ (8009510 <xPortStartScheduler+0x130>)
 800942c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	781b      	ldrb	r3, [r3, #0]
 8009432:	b2db      	uxtb	r3, r3
 8009434:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009436:	697b      	ldr	r3, [r7, #20]
 8009438:	22ff      	movs	r2, #255	@ 0xff
 800943a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	781b      	ldrb	r3, [r3, #0]
 8009440:	b2db      	uxtb	r3, r3
 8009442:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009444:	78fb      	ldrb	r3, [r7, #3]
 8009446:	b2db      	uxtb	r3, r3
 8009448:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800944c:	b2da      	uxtb	r2, r3
 800944e:	4b31      	ldr	r3, [pc, #196]	@ (8009514 <xPortStartScheduler+0x134>)
 8009450:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009452:	4b31      	ldr	r3, [pc, #196]	@ (8009518 <xPortStartScheduler+0x138>)
 8009454:	2207      	movs	r2, #7
 8009456:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009458:	e009      	b.n	800946e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800945a:	4b2f      	ldr	r3, [pc, #188]	@ (8009518 <xPortStartScheduler+0x138>)
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	3b01      	subs	r3, #1
 8009460:	4a2d      	ldr	r2, [pc, #180]	@ (8009518 <xPortStartScheduler+0x138>)
 8009462:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009464:	78fb      	ldrb	r3, [r7, #3]
 8009466:	b2db      	uxtb	r3, r3
 8009468:	005b      	lsls	r3, r3, #1
 800946a:	b2db      	uxtb	r3, r3
 800946c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800946e:	78fb      	ldrb	r3, [r7, #3]
 8009470:	b2db      	uxtb	r3, r3
 8009472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009476:	2b80      	cmp	r3, #128	@ 0x80
 8009478:	d0ef      	beq.n	800945a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800947a:	4b27      	ldr	r3, [pc, #156]	@ (8009518 <xPortStartScheduler+0x138>)
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f1c3 0307 	rsb	r3, r3, #7
 8009482:	2b04      	cmp	r3, #4
 8009484:	d00b      	beq.n	800949e <xPortStartScheduler+0xbe>
	__asm volatile
 8009486:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800948a:	f383 8811 	msr	BASEPRI, r3
 800948e:	f3bf 8f6f 	isb	sy
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	60bb      	str	r3, [r7, #8]
}
 8009498:	bf00      	nop
 800949a:	bf00      	nop
 800949c:	e7fd      	b.n	800949a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800949e:	4b1e      	ldr	r3, [pc, #120]	@ (8009518 <xPortStartScheduler+0x138>)
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	021b      	lsls	r3, r3, #8
 80094a4:	4a1c      	ldr	r2, [pc, #112]	@ (8009518 <xPortStartScheduler+0x138>)
 80094a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80094a8:	4b1b      	ldr	r3, [pc, #108]	@ (8009518 <xPortStartScheduler+0x138>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80094b0:	4a19      	ldr	r2, [pc, #100]	@ (8009518 <xPortStartScheduler+0x138>)
 80094b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	b2da      	uxtb	r2, r3
 80094b8:	697b      	ldr	r3, [r7, #20]
 80094ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80094bc:	4b17      	ldr	r3, [pc, #92]	@ (800951c <xPortStartScheduler+0x13c>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a16      	ldr	r2, [pc, #88]	@ (800951c <xPortStartScheduler+0x13c>)
 80094c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80094c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80094c8:	4b14      	ldr	r3, [pc, #80]	@ (800951c <xPortStartScheduler+0x13c>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	4a13      	ldr	r2, [pc, #76]	@ (800951c <xPortStartScheduler+0x13c>)
 80094ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80094d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80094d4:	f000 f8da 	bl	800968c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80094d8:	4b11      	ldr	r3, [pc, #68]	@ (8009520 <xPortStartScheduler+0x140>)
 80094da:	2200      	movs	r2, #0
 80094dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80094de:	f000 f8f9 	bl	80096d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80094e2:	4b10      	ldr	r3, [pc, #64]	@ (8009524 <xPortStartScheduler+0x144>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	4a0f      	ldr	r2, [pc, #60]	@ (8009524 <xPortStartScheduler+0x144>)
 80094e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80094ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80094ee:	f7ff ff63 	bl	80093b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80094f2:	f7ff f82f 	bl	8008554 <vTaskSwitchContext>
	prvTaskExitError();
 80094f6:	f7ff ff1b 	bl	8009330 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80094fa:	2300      	movs	r3, #0
}
 80094fc:	4618      	mov	r0, r3
 80094fe:	3718      	adds	r7, #24
 8009500:	46bd      	mov	sp, r7
 8009502:	bd80      	pop	{r7, pc}
 8009504:	e000ed00 	.word	0xe000ed00
 8009508:	410fc271 	.word	0x410fc271
 800950c:	410fc270 	.word	0x410fc270
 8009510:	e000e400 	.word	0xe000e400
 8009514:	200013f0 	.word	0x200013f0
 8009518:	200013f4 	.word	0x200013f4
 800951c:	e000ed20 	.word	0xe000ed20
 8009520:	20000014 	.word	0x20000014
 8009524:	e000ef34 	.word	0xe000ef34

08009528 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
	__asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	607b      	str	r3, [r7, #4]
}
 8009540:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009542:	4b10      	ldr	r3, [pc, #64]	@ (8009584 <vPortEnterCritical+0x5c>)
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	3301      	adds	r3, #1
 8009548:	4a0e      	ldr	r2, [pc, #56]	@ (8009584 <vPortEnterCritical+0x5c>)
 800954a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800954c:	4b0d      	ldr	r3, [pc, #52]	@ (8009584 <vPortEnterCritical+0x5c>)
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	2b01      	cmp	r3, #1
 8009552:	d110      	bne.n	8009576 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009554:	4b0c      	ldr	r3, [pc, #48]	@ (8009588 <vPortEnterCritical+0x60>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	b2db      	uxtb	r3, r3
 800955a:	2b00      	cmp	r3, #0
 800955c:	d00b      	beq.n	8009576 <vPortEnterCritical+0x4e>
	__asm volatile
 800955e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009562:	f383 8811 	msr	BASEPRI, r3
 8009566:	f3bf 8f6f 	isb	sy
 800956a:	f3bf 8f4f 	dsb	sy
 800956e:	603b      	str	r3, [r7, #0]
}
 8009570:	bf00      	nop
 8009572:	bf00      	nop
 8009574:	e7fd      	b.n	8009572 <vPortEnterCritical+0x4a>
	}
}
 8009576:	bf00      	nop
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20000014 	.word	0x20000014
 8009588:	e000ed04 	.word	0xe000ed04

0800958c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800958c:	b480      	push	{r7}
 800958e:	b083      	sub	sp, #12
 8009590:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009592:	4b12      	ldr	r3, [pc, #72]	@ (80095dc <vPortExitCritical+0x50>)
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d10b      	bne.n	80095b2 <vPortExitCritical+0x26>
	__asm volatile
 800959a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800959e:	f383 8811 	msr	BASEPRI, r3
 80095a2:	f3bf 8f6f 	isb	sy
 80095a6:	f3bf 8f4f 	dsb	sy
 80095aa:	607b      	str	r3, [r7, #4]
}
 80095ac:	bf00      	nop
 80095ae:	bf00      	nop
 80095b0:	e7fd      	b.n	80095ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80095b2:	4b0a      	ldr	r3, [pc, #40]	@ (80095dc <vPortExitCritical+0x50>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3b01      	subs	r3, #1
 80095b8:	4a08      	ldr	r2, [pc, #32]	@ (80095dc <vPortExitCritical+0x50>)
 80095ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80095bc:	4b07      	ldr	r3, [pc, #28]	@ (80095dc <vPortExitCritical+0x50>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d105      	bne.n	80095d0 <vPortExitCritical+0x44>
 80095c4:	2300      	movs	r3, #0
 80095c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	f383 8811 	msr	BASEPRI, r3
}
 80095ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80095d0:	bf00      	nop
 80095d2:	370c      	adds	r7, #12
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr
 80095dc:	20000014 	.word	0x20000014

080095e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80095e0:	f3ef 8009 	mrs	r0, PSP
 80095e4:	f3bf 8f6f 	isb	sy
 80095e8:	4b15      	ldr	r3, [pc, #84]	@ (8009640 <pxCurrentTCBConst>)
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	f01e 0f10 	tst.w	lr, #16
 80095f0:	bf08      	it	eq
 80095f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80095f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095fa:	6010      	str	r0, [r2, #0]
 80095fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009600:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009604:	f380 8811 	msr	BASEPRI, r0
 8009608:	f3bf 8f4f 	dsb	sy
 800960c:	f3bf 8f6f 	isb	sy
 8009610:	f7fe ffa0 	bl	8008554 <vTaskSwitchContext>
 8009614:	f04f 0000 	mov.w	r0, #0
 8009618:	f380 8811 	msr	BASEPRI, r0
 800961c:	bc09      	pop	{r0, r3}
 800961e:	6819      	ldr	r1, [r3, #0]
 8009620:	6808      	ldr	r0, [r1, #0]
 8009622:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009626:	f01e 0f10 	tst.w	lr, #16
 800962a:	bf08      	it	eq
 800962c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009630:	f380 8809 	msr	PSP, r0
 8009634:	f3bf 8f6f 	isb	sy
 8009638:	4770      	bx	lr
 800963a:	bf00      	nop
 800963c:	f3af 8000 	nop.w

08009640 <pxCurrentTCBConst>:
 8009640:	20000dc4 	.word	0x20000dc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009644:	bf00      	nop
 8009646:	bf00      	nop

08009648 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
	__asm volatile
 800964e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009652:	f383 8811 	msr	BASEPRI, r3
 8009656:	f3bf 8f6f 	isb	sy
 800965a:	f3bf 8f4f 	dsb	sy
 800965e:	607b      	str	r3, [r7, #4]
}
 8009660:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009662:	f7fe febd 	bl	80083e0 <xTaskIncrementTick>
 8009666:	4603      	mov	r3, r0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d003      	beq.n	8009674 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800966c:	4b06      	ldr	r3, [pc, #24]	@ (8009688 <xPortSysTickHandler+0x40>)
 800966e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009672:	601a      	str	r2, [r3, #0]
 8009674:	2300      	movs	r3, #0
 8009676:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	f383 8811 	msr	BASEPRI, r3
}
 800967e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009680:	bf00      	nop
 8009682:	3708      	adds	r7, #8
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}
 8009688:	e000ed04 	.word	0xe000ed04

0800968c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800968c:	b480      	push	{r7}
 800968e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009690:	4b0b      	ldr	r3, [pc, #44]	@ (80096c0 <vPortSetupTimerInterrupt+0x34>)
 8009692:	2200      	movs	r2, #0
 8009694:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009696:	4b0b      	ldr	r3, [pc, #44]	@ (80096c4 <vPortSetupTimerInterrupt+0x38>)
 8009698:	2200      	movs	r2, #0
 800969a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800969c:	4b0a      	ldr	r3, [pc, #40]	@ (80096c8 <vPortSetupTimerInterrupt+0x3c>)
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a0a      	ldr	r2, [pc, #40]	@ (80096cc <vPortSetupTimerInterrupt+0x40>)
 80096a2:	fba2 2303 	umull	r2, r3, r2, r3
 80096a6:	099b      	lsrs	r3, r3, #6
 80096a8:	4a09      	ldr	r2, [pc, #36]	@ (80096d0 <vPortSetupTimerInterrupt+0x44>)
 80096aa:	3b01      	subs	r3, #1
 80096ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80096ae:	4b04      	ldr	r3, [pc, #16]	@ (80096c0 <vPortSetupTimerInterrupt+0x34>)
 80096b0:	2207      	movs	r2, #7
 80096b2:	601a      	str	r2, [r3, #0]
}
 80096b4:	bf00      	nop
 80096b6:	46bd      	mov	sp, r7
 80096b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	e000e010 	.word	0xe000e010
 80096c4:	e000e018 	.word	0xe000e018
 80096c8:	20000008 	.word	0x20000008
 80096cc:	10624dd3 	.word	0x10624dd3
 80096d0:	e000e014 	.word	0xe000e014

080096d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80096d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80096e4 <vPortEnableVFP+0x10>
 80096d8:	6801      	ldr	r1, [r0, #0]
 80096da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80096de:	6001      	str	r1, [r0, #0]
 80096e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80096e2:	bf00      	nop
 80096e4:	e000ed88 	.word	0xe000ed88

080096e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80096e8:	b480      	push	{r7}
 80096ea:	b085      	sub	sp, #20
 80096ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80096ee:	f3ef 8305 	mrs	r3, IPSR
 80096f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	2b0f      	cmp	r3, #15
 80096f8:	d915      	bls.n	8009726 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80096fa:	4a18      	ldr	r2, [pc, #96]	@ (800975c <vPortValidateInterruptPriority+0x74>)
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	4413      	add	r3, r2
 8009700:	781b      	ldrb	r3, [r3, #0]
 8009702:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009704:	4b16      	ldr	r3, [pc, #88]	@ (8009760 <vPortValidateInterruptPriority+0x78>)
 8009706:	781b      	ldrb	r3, [r3, #0]
 8009708:	7afa      	ldrb	r2, [r7, #11]
 800970a:	429a      	cmp	r2, r3
 800970c:	d20b      	bcs.n	8009726 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800970e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009712:	f383 8811 	msr	BASEPRI, r3
 8009716:	f3bf 8f6f 	isb	sy
 800971a:	f3bf 8f4f 	dsb	sy
 800971e:	607b      	str	r3, [r7, #4]
}
 8009720:	bf00      	nop
 8009722:	bf00      	nop
 8009724:	e7fd      	b.n	8009722 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009726:	4b0f      	ldr	r3, [pc, #60]	@ (8009764 <vPortValidateInterruptPriority+0x7c>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800972e:	4b0e      	ldr	r3, [pc, #56]	@ (8009768 <vPortValidateInterruptPriority+0x80>)
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	429a      	cmp	r2, r3
 8009734:	d90b      	bls.n	800974e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8009736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800973a:	f383 8811 	msr	BASEPRI, r3
 800973e:	f3bf 8f6f 	isb	sy
 8009742:	f3bf 8f4f 	dsb	sy
 8009746:	603b      	str	r3, [r7, #0]
}
 8009748:	bf00      	nop
 800974a:	bf00      	nop
 800974c:	e7fd      	b.n	800974a <vPortValidateInterruptPriority+0x62>
	}
 800974e:	bf00      	nop
 8009750:	3714      	adds	r7, #20
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr
 800975a:	bf00      	nop
 800975c:	e000e3f0 	.word	0xe000e3f0
 8009760:	200013f0 	.word	0x200013f0
 8009764:	e000ed0c 	.word	0xe000ed0c
 8009768:	200013f4 	.word	0x200013f4

0800976c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08a      	sub	sp, #40	@ 0x28
 8009770:	af00      	add	r7, sp, #0
 8009772:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009774:	2300      	movs	r3, #0
 8009776:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009778:	f7fe fd76 	bl	8008268 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800977c:	4b5c      	ldr	r3, [pc, #368]	@ (80098f0 <pvPortMalloc+0x184>)
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	2b00      	cmp	r3, #0
 8009782:	d101      	bne.n	8009788 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009784:	f000 f924 	bl	80099d0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009788:	4b5a      	ldr	r3, [pc, #360]	@ (80098f4 <pvPortMalloc+0x188>)
 800978a:	681a      	ldr	r2, [r3, #0]
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	4013      	ands	r3, r2
 8009790:	2b00      	cmp	r3, #0
 8009792:	f040 8095 	bne.w	80098c0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d01e      	beq.n	80097da <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800979c:	2208      	movs	r2, #8
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	4413      	add	r3, r2
 80097a2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	f003 0307 	and.w	r3, r3, #7
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d015      	beq.n	80097da <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	f023 0307 	bic.w	r3, r3, #7
 80097b4:	3308      	adds	r3, #8
 80097b6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f003 0307 	and.w	r3, r3, #7
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d00b      	beq.n	80097da <pvPortMalloc+0x6e>
	__asm volatile
 80097c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097c6:	f383 8811 	msr	BASEPRI, r3
 80097ca:	f3bf 8f6f 	isb	sy
 80097ce:	f3bf 8f4f 	dsb	sy
 80097d2:	617b      	str	r3, [r7, #20]
}
 80097d4:	bf00      	nop
 80097d6:	bf00      	nop
 80097d8:	e7fd      	b.n	80097d6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2b00      	cmp	r3, #0
 80097de:	d06f      	beq.n	80098c0 <pvPortMalloc+0x154>
 80097e0:	4b45      	ldr	r3, [pc, #276]	@ (80098f8 <pvPortMalloc+0x18c>)
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	687a      	ldr	r2, [r7, #4]
 80097e6:	429a      	cmp	r2, r3
 80097e8:	d86a      	bhi.n	80098c0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80097ea:	4b44      	ldr	r3, [pc, #272]	@ (80098fc <pvPortMalloc+0x190>)
 80097ec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80097ee:	4b43      	ldr	r3, [pc, #268]	@ (80098fc <pvPortMalloc+0x190>)
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80097f4:	e004      	b.n	8009800 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80097f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097f8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80097fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009802:	685b      	ldr	r3, [r3, #4]
 8009804:	687a      	ldr	r2, [r7, #4]
 8009806:	429a      	cmp	r2, r3
 8009808:	d903      	bls.n	8009812 <pvPortMalloc+0xa6>
 800980a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	2b00      	cmp	r3, #0
 8009810:	d1f1      	bne.n	80097f6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009812:	4b37      	ldr	r3, [pc, #220]	@ (80098f0 <pvPortMalloc+0x184>)
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009818:	429a      	cmp	r2, r3
 800981a:	d051      	beq.n	80098c0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800981c:	6a3b      	ldr	r3, [r7, #32]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	2208      	movs	r2, #8
 8009822:	4413      	add	r3, r2
 8009824:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009826:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009828:	681a      	ldr	r2, [r3, #0]
 800982a:	6a3b      	ldr	r3, [r7, #32]
 800982c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800982e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009830:	685a      	ldr	r2, [r3, #4]
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	1ad2      	subs	r2, r2, r3
 8009836:	2308      	movs	r3, #8
 8009838:	005b      	lsls	r3, r3, #1
 800983a:	429a      	cmp	r2, r3
 800983c:	d920      	bls.n	8009880 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800983e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	4413      	add	r3, r2
 8009844:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009846:	69bb      	ldr	r3, [r7, #24]
 8009848:	f003 0307 	and.w	r3, r3, #7
 800984c:	2b00      	cmp	r3, #0
 800984e:	d00b      	beq.n	8009868 <pvPortMalloc+0xfc>
	__asm volatile
 8009850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009854:	f383 8811 	msr	BASEPRI, r3
 8009858:	f3bf 8f6f 	isb	sy
 800985c:	f3bf 8f4f 	dsb	sy
 8009860:	613b      	str	r3, [r7, #16]
}
 8009862:	bf00      	nop
 8009864:	bf00      	nop
 8009866:	e7fd      	b.n	8009864 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009868:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800986a:	685a      	ldr	r2, [r3, #4]
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	1ad2      	subs	r2, r2, r3
 8009870:	69bb      	ldr	r3, [r7, #24]
 8009872:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009876:	687a      	ldr	r2, [r7, #4]
 8009878:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800987a:	69b8      	ldr	r0, [r7, #24]
 800987c:	f000 f90a 	bl	8009a94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009880:	4b1d      	ldr	r3, [pc, #116]	@ (80098f8 <pvPortMalloc+0x18c>)
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009886:	685b      	ldr	r3, [r3, #4]
 8009888:	1ad3      	subs	r3, r2, r3
 800988a:	4a1b      	ldr	r2, [pc, #108]	@ (80098f8 <pvPortMalloc+0x18c>)
 800988c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800988e:	4b1a      	ldr	r3, [pc, #104]	@ (80098f8 <pvPortMalloc+0x18c>)
 8009890:	681a      	ldr	r2, [r3, #0]
 8009892:	4b1b      	ldr	r3, [pc, #108]	@ (8009900 <pvPortMalloc+0x194>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	429a      	cmp	r2, r3
 8009898:	d203      	bcs.n	80098a2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800989a:	4b17      	ldr	r3, [pc, #92]	@ (80098f8 <pvPortMalloc+0x18c>)
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a18      	ldr	r2, [pc, #96]	@ (8009900 <pvPortMalloc+0x194>)
 80098a0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80098a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098a4:	685a      	ldr	r2, [r3, #4]
 80098a6:	4b13      	ldr	r3, [pc, #76]	@ (80098f4 <pvPortMalloc+0x188>)
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	431a      	orrs	r2, r3
 80098ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80098b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098b2:	2200      	movs	r2, #0
 80098b4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80098b6:	4b13      	ldr	r3, [pc, #76]	@ (8009904 <pvPortMalloc+0x198>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	3301      	adds	r3, #1
 80098bc:	4a11      	ldr	r2, [pc, #68]	@ (8009904 <pvPortMalloc+0x198>)
 80098be:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80098c0:	f7fe fce0 	bl	8008284 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	f003 0307 	and.w	r3, r3, #7
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d00b      	beq.n	80098e6 <pvPortMalloc+0x17a>
	__asm volatile
 80098ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098d2:	f383 8811 	msr	BASEPRI, r3
 80098d6:	f3bf 8f6f 	isb	sy
 80098da:	f3bf 8f4f 	dsb	sy
 80098de:	60fb      	str	r3, [r7, #12]
}
 80098e0:	bf00      	nop
 80098e2:	bf00      	nop
 80098e4:	e7fd      	b.n	80098e2 <pvPortMalloc+0x176>
	return pvReturn;
 80098e6:	69fb      	ldr	r3, [r7, #28]
}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3728      	adds	r7, #40	@ 0x28
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	20001fb8 	.word	0x20001fb8
 80098f4:	20001fcc 	.word	0x20001fcc
 80098f8:	20001fbc 	.word	0x20001fbc
 80098fc:	20001fb0 	.word	0x20001fb0
 8009900:	20001fc0 	.word	0x20001fc0
 8009904:	20001fc4 	.word	0x20001fc4

08009908 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b086      	sub	sp, #24
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2b00      	cmp	r3, #0
 8009918:	d04f      	beq.n	80099ba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800991a:	2308      	movs	r3, #8
 800991c:	425b      	negs	r3, r3
 800991e:	697a      	ldr	r2, [r7, #20]
 8009920:	4413      	add	r3, r2
 8009922:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009928:	693b      	ldr	r3, [r7, #16]
 800992a:	685a      	ldr	r2, [r3, #4]
 800992c:	4b25      	ldr	r3, [pc, #148]	@ (80099c4 <vPortFree+0xbc>)
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	4013      	ands	r3, r2
 8009932:	2b00      	cmp	r3, #0
 8009934:	d10b      	bne.n	800994e <vPortFree+0x46>
	__asm volatile
 8009936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800993a:	f383 8811 	msr	BASEPRI, r3
 800993e:	f3bf 8f6f 	isb	sy
 8009942:	f3bf 8f4f 	dsb	sy
 8009946:	60fb      	str	r3, [r7, #12]
}
 8009948:	bf00      	nop
 800994a:	bf00      	nop
 800994c:	e7fd      	b.n	800994a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800994e:	693b      	ldr	r3, [r7, #16]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d00b      	beq.n	800996e <vPortFree+0x66>
	__asm volatile
 8009956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800995a:	f383 8811 	msr	BASEPRI, r3
 800995e:	f3bf 8f6f 	isb	sy
 8009962:	f3bf 8f4f 	dsb	sy
 8009966:	60bb      	str	r3, [r7, #8]
}
 8009968:	bf00      	nop
 800996a:	bf00      	nop
 800996c:	e7fd      	b.n	800996a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800996e:	693b      	ldr	r3, [r7, #16]
 8009970:	685a      	ldr	r2, [r3, #4]
 8009972:	4b14      	ldr	r3, [pc, #80]	@ (80099c4 <vPortFree+0xbc>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	4013      	ands	r3, r2
 8009978:	2b00      	cmp	r3, #0
 800997a:	d01e      	beq.n	80099ba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800997c:	693b      	ldr	r3, [r7, #16]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	2b00      	cmp	r3, #0
 8009982:	d11a      	bne.n	80099ba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009984:	693b      	ldr	r3, [r7, #16]
 8009986:	685a      	ldr	r2, [r3, #4]
 8009988:	4b0e      	ldr	r3, [pc, #56]	@ (80099c4 <vPortFree+0xbc>)
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	43db      	mvns	r3, r3
 800998e:	401a      	ands	r2, r3
 8009990:	693b      	ldr	r3, [r7, #16]
 8009992:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009994:	f7fe fc68 	bl	8008268 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009998:	693b      	ldr	r3, [r7, #16]
 800999a:	685a      	ldr	r2, [r3, #4]
 800999c:	4b0a      	ldr	r3, [pc, #40]	@ (80099c8 <vPortFree+0xc0>)
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4413      	add	r3, r2
 80099a2:	4a09      	ldr	r2, [pc, #36]	@ (80099c8 <vPortFree+0xc0>)
 80099a4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80099a6:	6938      	ldr	r0, [r7, #16]
 80099a8:	f000 f874 	bl	8009a94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80099ac:	4b07      	ldr	r3, [pc, #28]	@ (80099cc <vPortFree+0xc4>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	3301      	adds	r3, #1
 80099b2:	4a06      	ldr	r2, [pc, #24]	@ (80099cc <vPortFree+0xc4>)
 80099b4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80099b6:	f7fe fc65 	bl	8008284 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80099ba:	bf00      	nop
 80099bc:	3718      	adds	r7, #24
 80099be:	46bd      	mov	sp, r7
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20001fcc 	.word	0x20001fcc
 80099c8:	20001fbc 	.word	0x20001fbc
 80099cc:	20001fc8 	.word	0x20001fc8

080099d0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80099d6:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80099da:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80099dc:	4b27      	ldr	r3, [pc, #156]	@ (8009a7c <prvHeapInit+0xac>)
 80099de:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	f003 0307 	and.w	r3, r3, #7
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d00c      	beq.n	8009a04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	3307      	adds	r3, #7
 80099ee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	f023 0307 	bic.w	r3, r3, #7
 80099f6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80099f8:	68ba      	ldr	r2, [r7, #8]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	1ad3      	subs	r3, r2, r3
 80099fe:	4a1f      	ldr	r2, [pc, #124]	@ (8009a7c <prvHeapInit+0xac>)
 8009a00:	4413      	add	r3, r2
 8009a02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009a08:	4a1d      	ldr	r2, [pc, #116]	@ (8009a80 <prvHeapInit+0xb0>)
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009a0e:	4b1c      	ldr	r3, [pc, #112]	@ (8009a80 <prvHeapInit+0xb0>)
 8009a10:	2200      	movs	r2, #0
 8009a12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68ba      	ldr	r2, [r7, #8]
 8009a18:	4413      	add	r3, r2
 8009a1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009a1c:	2208      	movs	r2, #8
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	1a9b      	subs	r3, r3, r2
 8009a22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f023 0307 	bic.w	r3, r3, #7
 8009a2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	4a15      	ldr	r2, [pc, #84]	@ (8009a84 <prvHeapInit+0xb4>)
 8009a30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009a32:	4b14      	ldr	r3, [pc, #80]	@ (8009a84 <prvHeapInit+0xb4>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2200      	movs	r2, #0
 8009a38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009a3a:	4b12      	ldr	r3, [pc, #72]	@ (8009a84 <prvHeapInit+0xb4>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	2200      	movs	r2, #0
 8009a40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009a46:	683b      	ldr	r3, [r7, #0]
 8009a48:	68fa      	ldr	r2, [r7, #12]
 8009a4a:	1ad2      	subs	r2, r2, r3
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009a50:	4b0c      	ldr	r3, [pc, #48]	@ (8009a84 <prvHeapInit+0xb4>)
 8009a52:	681a      	ldr	r2, [r3, #0]
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a58:	683b      	ldr	r3, [r7, #0]
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8009a88 <prvHeapInit+0xb8>)
 8009a5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	685b      	ldr	r3, [r3, #4]
 8009a64:	4a09      	ldr	r2, [pc, #36]	@ (8009a8c <prvHeapInit+0xbc>)
 8009a66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009a68:	4b09      	ldr	r3, [pc, #36]	@ (8009a90 <prvHeapInit+0xc0>)
 8009a6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009a6e:	601a      	str	r2, [r3, #0]
}
 8009a70:	bf00      	nop
 8009a72:	3714      	adds	r7, #20
 8009a74:	46bd      	mov	sp, r7
 8009a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7a:	4770      	bx	lr
 8009a7c:	200013f8 	.word	0x200013f8
 8009a80:	20001fb0 	.word	0x20001fb0
 8009a84:	20001fb8 	.word	0x20001fb8
 8009a88:	20001fc0 	.word	0x20001fc0
 8009a8c:	20001fbc 	.word	0x20001fbc
 8009a90:	20001fcc 	.word	0x20001fcc

08009a94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009a94:	b480      	push	{r7}
 8009a96:	b085      	sub	sp, #20
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009a9c:	4b28      	ldr	r3, [pc, #160]	@ (8009b40 <prvInsertBlockIntoFreeList+0xac>)
 8009a9e:	60fb      	str	r3, [r7, #12]
 8009aa0:	e002      	b.n	8009aa8 <prvInsertBlockIntoFreeList+0x14>
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	60fb      	str	r3, [r7, #12]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	687a      	ldr	r2, [r7, #4]
 8009aae:	429a      	cmp	r2, r3
 8009ab0:	d8f7      	bhi.n	8009aa2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	68ba      	ldr	r2, [r7, #8]
 8009abc:	4413      	add	r3, r2
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	429a      	cmp	r2, r3
 8009ac2:	d108      	bne.n	8009ad6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	685a      	ldr	r2, [r3, #4]
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	441a      	add	r2, r3
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	685b      	ldr	r3, [r3, #4]
 8009ade:	68ba      	ldr	r2, [r7, #8]
 8009ae0:	441a      	add	r2, r3
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	429a      	cmp	r2, r3
 8009ae8:	d118      	bne.n	8009b1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681a      	ldr	r2, [r3, #0]
 8009aee:	4b15      	ldr	r3, [pc, #84]	@ (8009b44 <prvInsertBlockIntoFreeList+0xb0>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	429a      	cmp	r2, r3
 8009af4:	d00d      	beq.n	8009b12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	685a      	ldr	r2, [r3, #4]
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	685b      	ldr	r3, [r3, #4]
 8009b00:	441a      	add	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	601a      	str	r2, [r3, #0]
 8009b10:	e008      	b.n	8009b24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009b12:	4b0c      	ldr	r3, [pc, #48]	@ (8009b44 <prvInsertBlockIntoFreeList+0xb0>)
 8009b14:	681a      	ldr	r2, [r3, #0]
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	601a      	str	r2, [r3, #0]
 8009b1a:	e003      	b.n	8009b24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681a      	ldr	r2, [r3, #0]
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009b24:	68fa      	ldr	r2, [r7, #12]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	429a      	cmp	r2, r3
 8009b2a:	d002      	beq.n	8009b32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009b32:	bf00      	nop
 8009b34:	3714      	adds	r7, #20
 8009b36:	46bd      	mov	sp, r7
 8009b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3c:	4770      	bx	lr
 8009b3e:	bf00      	nop
 8009b40:	20001fb0 	.word	0x20001fb0
 8009b44:	20001fb8 	.word	0x20001fb8

08009b48 <siprintf>:
 8009b48:	b40e      	push	{r1, r2, r3}
 8009b4a:	b500      	push	{lr}
 8009b4c:	b09c      	sub	sp, #112	@ 0x70
 8009b4e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009b50:	9002      	str	r0, [sp, #8]
 8009b52:	9006      	str	r0, [sp, #24]
 8009b54:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009b58:	4809      	ldr	r0, [pc, #36]	@ (8009b80 <siprintf+0x38>)
 8009b5a:	9107      	str	r1, [sp, #28]
 8009b5c:	9104      	str	r1, [sp, #16]
 8009b5e:	4909      	ldr	r1, [pc, #36]	@ (8009b84 <siprintf+0x3c>)
 8009b60:	f853 2b04 	ldr.w	r2, [r3], #4
 8009b64:	9105      	str	r1, [sp, #20]
 8009b66:	6800      	ldr	r0, [r0, #0]
 8009b68:	9301      	str	r3, [sp, #4]
 8009b6a:	a902      	add	r1, sp, #8
 8009b6c:	f000 f94a 	bl	8009e04 <_svfiprintf_r>
 8009b70:	9b02      	ldr	r3, [sp, #8]
 8009b72:	2200      	movs	r2, #0
 8009b74:	701a      	strb	r2, [r3, #0]
 8009b76:	b01c      	add	sp, #112	@ 0x70
 8009b78:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b7c:	b003      	add	sp, #12
 8009b7e:	4770      	bx	lr
 8009b80:	20000018 	.word	0x20000018
 8009b84:	ffff0208 	.word	0xffff0208

08009b88 <memset>:
 8009b88:	4402      	add	r2, r0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	4293      	cmp	r3, r2
 8009b8e:	d100      	bne.n	8009b92 <memset+0xa>
 8009b90:	4770      	bx	lr
 8009b92:	f803 1b01 	strb.w	r1, [r3], #1
 8009b96:	e7f9      	b.n	8009b8c <memset+0x4>

08009b98 <_reclaim_reent>:
 8009b98:	4b29      	ldr	r3, [pc, #164]	@ (8009c40 <_reclaim_reent+0xa8>)
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	4283      	cmp	r3, r0
 8009b9e:	b570      	push	{r4, r5, r6, lr}
 8009ba0:	4604      	mov	r4, r0
 8009ba2:	d04b      	beq.n	8009c3c <_reclaim_reent+0xa4>
 8009ba4:	69c3      	ldr	r3, [r0, #28]
 8009ba6:	b1ab      	cbz	r3, 8009bd4 <_reclaim_reent+0x3c>
 8009ba8:	68db      	ldr	r3, [r3, #12]
 8009baa:	b16b      	cbz	r3, 8009bc8 <_reclaim_reent+0x30>
 8009bac:	2500      	movs	r5, #0
 8009bae:	69e3      	ldr	r3, [r4, #28]
 8009bb0:	68db      	ldr	r3, [r3, #12]
 8009bb2:	5959      	ldr	r1, [r3, r5]
 8009bb4:	2900      	cmp	r1, #0
 8009bb6:	d13b      	bne.n	8009c30 <_reclaim_reent+0x98>
 8009bb8:	3504      	adds	r5, #4
 8009bba:	2d80      	cmp	r5, #128	@ 0x80
 8009bbc:	d1f7      	bne.n	8009bae <_reclaim_reent+0x16>
 8009bbe:	69e3      	ldr	r3, [r4, #28]
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	68d9      	ldr	r1, [r3, #12]
 8009bc4:	f000 f878 	bl	8009cb8 <_free_r>
 8009bc8:	69e3      	ldr	r3, [r4, #28]
 8009bca:	6819      	ldr	r1, [r3, #0]
 8009bcc:	b111      	cbz	r1, 8009bd4 <_reclaim_reent+0x3c>
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f000 f872 	bl	8009cb8 <_free_r>
 8009bd4:	6961      	ldr	r1, [r4, #20]
 8009bd6:	b111      	cbz	r1, 8009bde <_reclaim_reent+0x46>
 8009bd8:	4620      	mov	r0, r4
 8009bda:	f000 f86d 	bl	8009cb8 <_free_r>
 8009bde:	69e1      	ldr	r1, [r4, #28]
 8009be0:	b111      	cbz	r1, 8009be8 <_reclaim_reent+0x50>
 8009be2:	4620      	mov	r0, r4
 8009be4:	f000 f868 	bl	8009cb8 <_free_r>
 8009be8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009bea:	b111      	cbz	r1, 8009bf2 <_reclaim_reent+0x5a>
 8009bec:	4620      	mov	r0, r4
 8009bee:	f000 f863 	bl	8009cb8 <_free_r>
 8009bf2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009bf4:	b111      	cbz	r1, 8009bfc <_reclaim_reent+0x64>
 8009bf6:	4620      	mov	r0, r4
 8009bf8:	f000 f85e 	bl	8009cb8 <_free_r>
 8009bfc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8009bfe:	b111      	cbz	r1, 8009c06 <_reclaim_reent+0x6e>
 8009c00:	4620      	mov	r0, r4
 8009c02:	f000 f859 	bl	8009cb8 <_free_r>
 8009c06:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009c08:	b111      	cbz	r1, 8009c10 <_reclaim_reent+0x78>
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	f000 f854 	bl	8009cb8 <_free_r>
 8009c10:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8009c12:	b111      	cbz	r1, 8009c1a <_reclaim_reent+0x82>
 8009c14:	4620      	mov	r0, r4
 8009c16:	f000 f84f 	bl	8009cb8 <_free_r>
 8009c1a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009c1c:	b111      	cbz	r1, 8009c24 <_reclaim_reent+0x8c>
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f000 f84a 	bl	8009cb8 <_free_r>
 8009c24:	6a23      	ldr	r3, [r4, #32]
 8009c26:	b14b      	cbz	r3, 8009c3c <_reclaim_reent+0xa4>
 8009c28:	4620      	mov	r0, r4
 8009c2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009c2e:	4718      	bx	r3
 8009c30:	680e      	ldr	r6, [r1, #0]
 8009c32:	4620      	mov	r0, r4
 8009c34:	f000 f840 	bl	8009cb8 <_free_r>
 8009c38:	4631      	mov	r1, r6
 8009c3a:	e7bb      	b.n	8009bb4 <_reclaim_reent+0x1c>
 8009c3c:	bd70      	pop	{r4, r5, r6, pc}
 8009c3e:	bf00      	nop
 8009c40:	20000018 	.word	0x20000018

08009c44 <__errno>:
 8009c44:	4b01      	ldr	r3, [pc, #4]	@ (8009c4c <__errno+0x8>)
 8009c46:	6818      	ldr	r0, [r3, #0]
 8009c48:	4770      	bx	lr
 8009c4a:	bf00      	nop
 8009c4c:	20000018 	.word	0x20000018

08009c50 <__libc_init_array>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	4d0d      	ldr	r5, [pc, #52]	@ (8009c88 <__libc_init_array+0x38>)
 8009c54:	4c0d      	ldr	r4, [pc, #52]	@ (8009c8c <__libc_init_array+0x3c>)
 8009c56:	1b64      	subs	r4, r4, r5
 8009c58:	10a4      	asrs	r4, r4, #2
 8009c5a:	2600      	movs	r6, #0
 8009c5c:	42a6      	cmp	r6, r4
 8009c5e:	d109      	bne.n	8009c74 <__libc_init_array+0x24>
 8009c60:	4d0b      	ldr	r5, [pc, #44]	@ (8009c90 <__libc_init_array+0x40>)
 8009c62:	4c0c      	ldr	r4, [pc, #48]	@ (8009c94 <__libc_init_array+0x44>)
 8009c64:	f000 fc66 	bl	800a534 <_init>
 8009c68:	1b64      	subs	r4, r4, r5
 8009c6a:	10a4      	asrs	r4, r4, #2
 8009c6c:	2600      	movs	r6, #0
 8009c6e:	42a6      	cmp	r6, r4
 8009c70:	d105      	bne.n	8009c7e <__libc_init_array+0x2e>
 8009c72:	bd70      	pop	{r4, r5, r6, pc}
 8009c74:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c78:	4798      	blx	r3
 8009c7a:	3601      	adds	r6, #1
 8009c7c:	e7ee      	b.n	8009c5c <__libc_init_array+0xc>
 8009c7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009c82:	4798      	blx	r3
 8009c84:	3601      	adds	r6, #1
 8009c86:	e7f2      	b.n	8009c6e <__libc_init_array+0x1e>
 8009c88:	0800b3c0 	.word	0x0800b3c0
 8009c8c:	0800b3c0 	.word	0x0800b3c0
 8009c90:	0800b3c0 	.word	0x0800b3c0
 8009c94:	0800b3c4 	.word	0x0800b3c4

08009c98 <__retarget_lock_acquire_recursive>:
 8009c98:	4770      	bx	lr

08009c9a <__retarget_lock_release_recursive>:
 8009c9a:	4770      	bx	lr

08009c9c <memcpy>:
 8009c9c:	440a      	add	r2, r1
 8009c9e:	4291      	cmp	r1, r2
 8009ca0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009ca4:	d100      	bne.n	8009ca8 <memcpy+0xc>
 8009ca6:	4770      	bx	lr
 8009ca8:	b510      	push	{r4, lr}
 8009caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009cb2:	4291      	cmp	r1, r2
 8009cb4:	d1f9      	bne.n	8009caa <memcpy+0xe>
 8009cb6:	bd10      	pop	{r4, pc}

08009cb8 <_free_r>:
 8009cb8:	b538      	push	{r3, r4, r5, lr}
 8009cba:	4605      	mov	r5, r0
 8009cbc:	2900      	cmp	r1, #0
 8009cbe:	d041      	beq.n	8009d44 <_free_r+0x8c>
 8009cc0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009cc4:	1f0c      	subs	r4, r1, #4
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	bfb8      	it	lt
 8009cca:	18e4      	addlt	r4, r4, r3
 8009ccc:	f000 fbc6 	bl	800a45c <__malloc_lock>
 8009cd0:	4a1d      	ldr	r2, [pc, #116]	@ (8009d48 <_free_r+0x90>)
 8009cd2:	6813      	ldr	r3, [r2, #0]
 8009cd4:	b933      	cbnz	r3, 8009ce4 <_free_r+0x2c>
 8009cd6:	6063      	str	r3, [r4, #4]
 8009cd8:	6014      	str	r4, [r2, #0]
 8009cda:	4628      	mov	r0, r5
 8009cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009ce0:	f000 bbc2 	b.w	800a468 <__malloc_unlock>
 8009ce4:	42a3      	cmp	r3, r4
 8009ce6:	d908      	bls.n	8009cfa <_free_r+0x42>
 8009ce8:	6820      	ldr	r0, [r4, #0]
 8009cea:	1821      	adds	r1, r4, r0
 8009cec:	428b      	cmp	r3, r1
 8009cee:	bf01      	itttt	eq
 8009cf0:	6819      	ldreq	r1, [r3, #0]
 8009cf2:	685b      	ldreq	r3, [r3, #4]
 8009cf4:	1809      	addeq	r1, r1, r0
 8009cf6:	6021      	streq	r1, [r4, #0]
 8009cf8:	e7ed      	b.n	8009cd6 <_free_r+0x1e>
 8009cfa:	461a      	mov	r2, r3
 8009cfc:	685b      	ldr	r3, [r3, #4]
 8009cfe:	b10b      	cbz	r3, 8009d04 <_free_r+0x4c>
 8009d00:	42a3      	cmp	r3, r4
 8009d02:	d9fa      	bls.n	8009cfa <_free_r+0x42>
 8009d04:	6811      	ldr	r1, [r2, #0]
 8009d06:	1850      	adds	r0, r2, r1
 8009d08:	42a0      	cmp	r0, r4
 8009d0a:	d10b      	bne.n	8009d24 <_free_r+0x6c>
 8009d0c:	6820      	ldr	r0, [r4, #0]
 8009d0e:	4401      	add	r1, r0
 8009d10:	1850      	adds	r0, r2, r1
 8009d12:	4283      	cmp	r3, r0
 8009d14:	6011      	str	r1, [r2, #0]
 8009d16:	d1e0      	bne.n	8009cda <_free_r+0x22>
 8009d18:	6818      	ldr	r0, [r3, #0]
 8009d1a:	685b      	ldr	r3, [r3, #4]
 8009d1c:	6053      	str	r3, [r2, #4]
 8009d1e:	4408      	add	r0, r1
 8009d20:	6010      	str	r0, [r2, #0]
 8009d22:	e7da      	b.n	8009cda <_free_r+0x22>
 8009d24:	d902      	bls.n	8009d2c <_free_r+0x74>
 8009d26:	230c      	movs	r3, #12
 8009d28:	602b      	str	r3, [r5, #0]
 8009d2a:	e7d6      	b.n	8009cda <_free_r+0x22>
 8009d2c:	6820      	ldr	r0, [r4, #0]
 8009d2e:	1821      	adds	r1, r4, r0
 8009d30:	428b      	cmp	r3, r1
 8009d32:	bf04      	itt	eq
 8009d34:	6819      	ldreq	r1, [r3, #0]
 8009d36:	685b      	ldreq	r3, [r3, #4]
 8009d38:	6063      	str	r3, [r4, #4]
 8009d3a:	bf04      	itt	eq
 8009d3c:	1809      	addeq	r1, r1, r0
 8009d3e:	6021      	streq	r1, [r4, #0]
 8009d40:	6054      	str	r4, [r2, #4]
 8009d42:	e7ca      	b.n	8009cda <_free_r+0x22>
 8009d44:	bd38      	pop	{r3, r4, r5, pc}
 8009d46:	bf00      	nop
 8009d48:	20002114 	.word	0x20002114

08009d4c <__ssputs_r>:
 8009d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d50:	688e      	ldr	r6, [r1, #8]
 8009d52:	461f      	mov	r7, r3
 8009d54:	42be      	cmp	r6, r7
 8009d56:	680b      	ldr	r3, [r1, #0]
 8009d58:	4682      	mov	sl, r0
 8009d5a:	460c      	mov	r4, r1
 8009d5c:	4690      	mov	r8, r2
 8009d5e:	d82d      	bhi.n	8009dbc <__ssputs_r+0x70>
 8009d60:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009d64:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009d68:	d026      	beq.n	8009db8 <__ssputs_r+0x6c>
 8009d6a:	6965      	ldr	r5, [r4, #20]
 8009d6c:	6909      	ldr	r1, [r1, #16]
 8009d6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d72:	eba3 0901 	sub.w	r9, r3, r1
 8009d76:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d7a:	1c7b      	adds	r3, r7, #1
 8009d7c:	444b      	add	r3, r9
 8009d7e:	106d      	asrs	r5, r5, #1
 8009d80:	429d      	cmp	r5, r3
 8009d82:	bf38      	it	cc
 8009d84:	461d      	movcc	r5, r3
 8009d86:	0553      	lsls	r3, r2, #21
 8009d88:	d527      	bpl.n	8009dda <__ssputs_r+0x8e>
 8009d8a:	4629      	mov	r1, r5
 8009d8c:	f000 f958 	bl	800a040 <_malloc_r>
 8009d90:	4606      	mov	r6, r0
 8009d92:	b360      	cbz	r0, 8009dee <__ssputs_r+0xa2>
 8009d94:	6921      	ldr	r1, [r4, #16]
 8009d96:	464a      	mov	r2, r9
 8009d98:	f7ff ff80 	bl	8009c9c <memcpy>
 8009d9c:	89a3      	ldrh	r3, [r4, #12]
 8009d9e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009da2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009da6:	81a3      	strh	r3, [r4, #12]
 8009da8:	6126      	str	r6, [r4, #16]
 8009daa:	6165      	str	r5, [r4, #20]
 8009dac:	444e      	add	r6, r9
 8009dae:	eba5 0509 	sub.w	r5, r5, r9
 8009db2:	6026      	str	r6, [r4, #0]
 8009db4:	60a5      	str	r5, [r4, #8]
 8009db6:	463e      	mov	r6, r7
 8009db8:	42be      	cmp	r6, r7
 8009dba:	d900      	bls.n	8009dbe <__ssputs_r+0x72>
 8009dbc:	463e      	mov	r6, r7
 8009dbe:	6820      	ldr	r0, [r4, #0]
 8009dc0:	4632      	mov	r2, r6
 8009dc2:	4641      	mov	r1, r8
 8009dc4:	f000 fb84 	bl	800a4d0 <memmove>
 8009dc8:	68a3      	ldr	r3, [r4, #8]
 8009dca:	1b9b      	subs	r3, r3, r6
 8009dcc:	60a3      	str	r3, [r4, #8]
 8009dce:	6823      	ldr	r3, [r4, #0]
 8009dd0:	4433      	add	r3, r6
 8009dd2:	6023      	str	r3, [r4, #0]
 8009dd4:	2000      	movs	r0, #0
 8009dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dda:	462a      	mov	r2, r5
 8009ddc:	f000 fb4a 	bl	800a474 <_realloc_r>
 8009de0:	4606      	mov	r6, r0
 8009de2:	2800      	cmp	r0, #0
 8009de4:	d1e0      	bne.n	8009da8 <__ssputs_r+0x5c>
 8009de6:	6921      	ldr	r1, [r4, #16]
 8009de8:	4650      	mov	r0, sl
 8009dea:	f7ff ff65 	bl	8009cb8 <_free_r>
 8009dee:	230c      	movs	r3, #12
 8009df0:	f8ca 3000 	str.w	r3, [sl]
 8009df4:	89a3      	ldrh	r3, [r4, #12]
 8009df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e00:	e7e9      	b.n	8009dd6 <__ssputs_r+0x8a>
	...

08009e04 <_svfiprintf_r>:
 8009e04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e08:	4698      	mov	r8, r3
 8009e0a:	898b      	ldrh	r3, [r1, #12]
 8009e0c:	061b      	lsls	r3, r3, #24
 8009e0e:	b09d      	sub	sp, #116	@ 0x74
 8009e10:	4607      	mov	r7, r0
 8009e12:	460d      	mov	r5, r1
 8009e14:	4614      	mov	r4, r2
 8009e16:	d510      	bpl.n	8009e3a <_svfiprintf_r+0x36>
 8009e18:	690b      	ldr	r3, [r1, #16]
 8009e1a:	b973      	cbnz	r3, 8009e3a <_svfiprintf_r+0x36>
 8009e1c:	2140      	movs	r1, #64	@ 0x40
 8009e1e:	f000 f90f 	bl	800a040 <_malloc_r>
 8009e22:	6028      	str	r0, [r5, #0]
 8009e24:	6128      	str	r0, [r5, #16]
 8009e26:	b930      	cbnz	r0, 8009e36 <_svfiprintf_r+0x32>
 8009e28:	230c      	movs	r3, #12
 8009e2a:	603b      	str	r3, [r7, #0]
 8009e2c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009e30:	b01d      	add	sp, #116	@ 0x74
 8009e32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e36:	2340      	movs	r3, #64	@ 0x40
 8009e38:	616b      	str	r3, [r5, #20]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009e3e:	2320      	movs	r3, #32
 8009e40:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e48:	2330      	movs	r3, #48	@ 0x30
 8009e4a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009fe8 <_svfiprintf_r+0x1e4>
 8009e4e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009e52:	f04f 0901 	mov.w	r9, #1
 8009e56:	4623      	mov	r3, r4
 8009e58:	469a      	mov	sl, r3
 8009e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e5e:	b10a      	cbz	r2, 8009e64 <_svfiprintf_r+0x60>
 8009e60:	2a25      	cmp	r2, #37	@ 0x25
 8009e62:	d1f9      	bne.n	8009e58 <_svfiprintf_r+0x54>
 8009e64:	ebba 0b04 	subs.w	fp, sl, r4
 8009e68:	d00b      	beq.n	8009e82 <_svfiprintf_r+0x7e>
 8009e6a:	465b      	mov	r3, fp
 8009e6c:	4622      	mov	r2, r4
 8009e6e:	4629      	mov	r1, r5
 8009e70:	4638      	mov	r0, r7
 8009e72:	f7ff ff6b 	bl	8009d4c <__ssputs_r>
 8009e76:	3001      	adds	r0, #1
 8009e78:	f000 80a7 	beq.w	8009fca <_svfiprintf_r+0x1c6>
 8009e7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e7e:	445a      	add	r2, fp
 8009e80:	9209      	str	r2, [sp, #36]	@ 0x24
 8009e82:	f89a 3000 	ldrb.w	r3, [sl]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	f000 809f 	beq.w	8009fca <_svfiprintf_r+0x1c6>
 8009e8c:	2300      	movs	r3, #0
 8009e8e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e96:	f10a 0a01 	add.w	sl, sl, #1
 8009e9a:	9304      	str	r3, [sp, #16]
 8009e9c:	9307      	str	r3, [sp, #28]
 8009e9e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009ea2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009ea4:	4654      	mov	r4, sl
 8009ea6:	2205      	movs	r2, #5
 8009ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009eac:	484e      	ldr	r0, [pc, #312]	@ (8009fe8 <_svfiprintf_r+0x1e4>)
 8009eae:	f7f6 f997 	bl	80001e0 <memchr>
 8009eb2:	9a04      	ldr	r2, [sp, #16]
 8009eb4:	b9d8      	cbnz	r0, 8009eee <_svfiprintf_r+0xea>
 8009eb6:	06d0      	lsls	r0, r2, #27
 8009eb8:	bf44      	itt	mi
 8009eba:	2320      	movmi	r3, #32
 8009ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009ec0:	0711      	lsls	r1, r2, #28
 8009ec2:	bf44      	itt	mi
 8009ec4:	232b      	movmi	r3, #43	@ 0x2b
 8009ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009eca:	f89a 3000 	ldrb.w	r3, [sl]
 8009ece:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ed0:	d015      	beq.n	8009efe <_svfiprintf_r+0xfa>
 8009ed2:	9a07      	ldr	r2, [sp, #28]
 8009ed4:	4654      	mov	r4, sl
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	f04f 0c0a 	mov.w	ip, #10
 8009edc:	4621      	mov	r1, r4
 8009ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009ee2:	3b30      	subs	r3, #48	@ 0x30
 8009ee4:	2b09      	cmp	r3, #9
 8009ee6:	d94b      	bls.n	8009f80 <_svfiprintf_r+0x17c>
 8009ee8:	b1b0      	cbz	r0, 8009f18 <_svfiprintf_r+0x114>
 8009eea:	9207      	str	r2, [sp, #28]
 8009eec:	e014      	b.n	8009f18 <_svfiprintf_r+0x114>
 8009eee:	eba0 0308 	sub.w	r3, r0, r8
 8009ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8009ef6:	4313      	orrs	r3, r2
 8009ef8:	9304      	str	r3, [sp, #16]
 8009efa:	46a2      	mov	sl, r4
 8009efc:	e7d2      	b.n	8009ea4 <_svfiprintf_r+0xa0>
 8009efe:	9b03      	ldr	r3, [sp, #12]
 8009f00:	1d19      	adds	r1, r3, #4
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	9103      	str	r1, [sp, #12]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	bfbb      	ittet	lt
 8009f0a:	425b      	neglt	r3, r3
 8009f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8009f10:	9307      	strge	r3, [sp, #28]
 8009f12:	9307      	strlt	r3, [sp, #28]
 8009f14:	bfb8      	it	lt
 8009f16:	9204      	strlt	r2, [sp, #16]
 8009f18:	7823      	ldrb	r3, [r4, #0]
 8009f1a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009f1c:	d10a      	bne.n	8009f34 <_svfiprintf_r+0x130>
 8009f1e:	7863      	ldrb	r3, [r4, #1]
 8009f20:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f22:	d132      	bne.n	8009f8a <_svfiprintf_r+0x186>
 8009f24:	9b03      	ldr	r3, [sp, #12]
 8009f26:	1d1a      	adds	r2, r3, #4
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	9203      	str	r2, [sp, #12]
 8009f2c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009f30:	3402      	adds	r4, #2
 8009f32:	9305      	str	r3, [sp, #20]
 8009f34:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ff8 <_svfiprintf_r+0x1f4>
 8009f38:	7821      	ldrb	r1, [r4, #0]
 8009f3a:	2203      	movs	r2, #3
 8009f3c:	4650      	mov	r0, sl
 8009f3e:	f7f6 f94f 	bl	80001e0 <memchr>
 8009f42:	b138      	cbz	r0, 8009f54 <_svfiprintf_r+0x150>
 8009f44:	9b04      	ldr	r3, [sp, #16]
 8009f46:	eba0 000a 	sub.w	r0, r0, sl
 8009f4a:	2240      	movs	r2, #64	@ 0x40
 8009f4c:	4082      	lsls	r2, r0
 8009f4e:	4313      	orrs	r3, r2
 8009f50:	3401      	adds	r4, #1
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f58:	4824      	ldr	r0, [pc, #144]	@ (8009fec <_svfiprintf_r+0x1e8>)
 8009f5a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009f5e:	2206      	movs	r2, #6
 8009f60:	f7f6 f93e 	bl	80001e0 <memchr>
 8009f64:	2800      	cmp	r0, #0
 8009f66:	d036      	beq.n	8009fd6 <_svfiprintf_r+0x1d2>
 8009f68:	4b21      	ldr	r3, [pc, #132]	@ (8009ff0 <_svfiprintf_r+0x1ec>)
 8009f6a:	bb1b      	cbnz	r3, 8009fb4 <_svfiprintf_r+0x1b0>
 8009f6c:	9b03      	ldr	r3, [sp, #12]
 8009f6e:	3307      	adds	r3, #7
 8009f70:	f023 0307 	bic.w	r3, r3, #7
 8009f74:	3308      	adds	r3, #8
 8009f76:	9303      	str	r3, [sp, #12]
 8009f78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f7a:	4433      	add	r3, r6
 8009f7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f7e:	e76a      	b.n	8009e56 <_svfiprintf_r+0x52>
 8009f80:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f84:	460c      	mov	r4, r1
 8009f86:	2001      	movs	r0, #1
 8009f88:	e7a8      	b.n	8009edc <_svfiprintf_r+0xd8>
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	3401      	adds	r4, #1
 8009f8e:	9305      	str	r3, [sp, #20]
 8009f90:	4619      	mov	r1, r3
 8009f92:	f04f 0c0a 	mov.w	ip, #10
 8009f96:	4620      	mov	r0, r4
 8009f98:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f9c:	3a30      	subs	r2, #48	@ 0x30
 8009f9e:	2a09      	cmp	r2, #9
 8009fa0:	d903      	bls.n	8009faa <_svfiprintf_r+0x1a6>
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d0c6      	beq.n	8009f34 <_svfiprintf_r+0x130>
 8009fa6:	9105      	str	r1, [sp, #20]
 8009fa8:	e7c4      	b.n	8009f34 <_svfiprintf_r+0x130>
 8009faa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009fae:	4604      	mov	r4, r0
 8009fb0:	2301      	movs	r3, #1
 8009fb2:	e7f0      	b.n	8009f96 <_svfiprintf_r+0x192>
 8009fb4:	ab03      	add	r3, sp, #12
 8009fb6:	9300      	str	r3, [sp, #0]
 8009fb8:	462a      	mov	r2, r5
 8009fba:	4b0e      	ldr	r3, [pc, #56]	@ (8009ff4 <_svfiprintf_r+0x1f0>)
 8009fbc:	a904      	add	r1, sp, #16
 8009fbe:	4638      	mov	r0, r7
 8009fc0:	f3af 8000 	nop.w
 8009fc4:	1c42      	adds	r2, r0, #1
 8009fc6:	4606      	mov	r6, r0
 8009fc8:	d1d6      	bne.n	8009f78 <_svfiprintf_r+0x174>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	065b      	lsls	r3, r3, #25
 8009fce:	f53f af2d 	bmi.w	8009e2c <_svfiprintf_r+0x28>
 8009fd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009fd4:	e72c      	b.n	8009e30 <_svfiprintf_r+0x2c>
 8009fd6:	ab03      	add	r3, sp, #12
 8009fd8:	9300      	str	r3, [sp, #0]
 8009fda:	462a      	mov	r2, r5
 8009fdc:	4b05      	ldr	r3, [pc, #20]	@ (8009ff4 <_svfiprintf_r+0x1f0>)
 8009fde:	a904      	add	r1, sp, #16
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	f000 f91b 	bl	800a21c <_printf_i>
 8009fe6:	e7ed      	b.n	8009fc4 <_svfiprintf_r+0x1c0>
 8009fe8:	0800b384 	.word	0x0800b384
 8009fec:	0800b38e 	.word	0x0800b38e
 8009ff0:	00000000 	.word	0x00000000
 8009ff4:	08009d4d 	.word	0x08009d4d
 8009ff8:	0800b38a 	.word	0x0800b38a

08009ffc <sbrk_aligned>:
 8009ffc:	b570      	push	{r4, r5, r6, lr}
 8009ffe:	4e0f      	ldr	r6, [pc, #60]	@ (800a03c <sbrk_aligned+0x40>)
 800a000:	460c      	mov	r4, r1
 800a002:	6831      	ldr	r1, [r6, #0]
 800a004:	4605      	mov	r5, r0
 800a006:	b911      	cbnz	r1, 800a00e <sbrk_aligned+0x12>
 800a008:	f000 fa7c 	bl	800a504 <_sbrk_r>
 800a00c:	6030      	str	r0, [r6, #0]
 800a00e:	4621      	mov	r1, r4
 800a010:	4628      	mov	r0, r5
 800a012:	f000 fa77 	bl	800a504 <_sbrk_r>
 800a016:	1c43      	adds	r3, r0, #1
 800a018:	d103      	bne.n	800a022 <sbrk_aligned+0x26>
 800a01a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a01e:	4620      	mov	r0, r4
 800a020:	bd70      	pop	{r4, r5, r6, pc}
 800a022:	1cc4      	adds	r4, r0, #3
 800a024:	f024 0403 	bic.w	r4, r4, #3
 800a028:	42a0      	cmp	r0, r4
 800a02a:	d0f8      	beq.n	800a01e <sbrk_aligned+0x22>
 800a02c:	1a21      	subs	r1, r4, r0
 800a02e:	4628      	mov	r0, r5
 800a030:	f000 fa68 	bl	800a504 <_sbrk_r>
 800a034:	3001      	adds	r0, #1
 800a036:	d1f2      	bne.n	800a01e <sbrk_aligned+0x22>
 800a038:	e7ef      	b.n	800a01a <sbrk_aligned+0x1e>
 800a03a:	bf00      	nop
 800a03c:	20002110 	.word	0x20002110

0800a040 <_malloc_r>:
 800a040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a044:	1ccd      	adds	r5, r1, #3
 800a046:	f025 0503 	bic.w	r5, r5, #3
 800a04a:	3508      	adds	r5, #8
 800a04c:	2d0c      	cmp	r5, #12
 800a04e:	bf38      	it	cc
 800a050:	250c      	movcc	r5, #12
 800a052:	2d00      	cmp	r5, #0
 800a054:	4606      	mov	r6, r0
 800a056:	db01      	blt.n	800a05c <_malloc_r+0x1c>
 800a058:	42a9      	cmp	r1, r5
 800a05a:	d904      	bls.n	800a066 <_malloc_r+0x26>
 800a05c:	230c      	movs	r3, #12
 800a05e:	6033      	str	r3, [r6, #0]
 800a060:	2000      	movs	r0, #0
 800a062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a066:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a13c <_malloc_r+0xfc>
 800a06a:	f000 f9f7 	bl	800a45c <__malloc_lock>
 800a06e:	f8d8 3000 	ldr.w	r3, [r8]
 800a072:	461c      	mov	r4, r3
 800a074:	bb44      	cbnz	r4, 800a0c8 <_malloc_r+0x88>
 800a076:	4629      	mov	r1, r5
 800a078:	4630      	mov	r0, r6
 800a07a:	f7ff ffbf 	bl	8009ffc <sbrk_aligned>
 800a07e:	1c43      	adds	r3, r0, #1
 800a080:	4604      	mov	r4, r0
 800a082:	d158      	bne.n	800a136 <_malloc_r+0xf6>
 800a084:	f8d8 4000 	ldr.w	r4, [r8]
 800a088:	4627      	mov	r7, r4
 800a08a:	2f00      	cmp	r7, #0
 800a08c:	d143      	bne.n	800a116 <_malloc_r+0xd6>
 800a08e:	2c00      	cmp	r4, #0
 800a090:	d04b      	beq.n	800a12a <_malloc_r+0xea>
 800a092:	6823      	ldr	r3, [r4, #0]
 800a094:	4639      	mov	r1, r7
 800a096:	4630      	mov	r0, r6
 800a098:	eb04 0903 	add.w	r9, r4, r3
 800a09c:	f000 fa32 	bl	800a504 <_sbrk_r>
 800a0a0:	4581      	cmp	r9, r0
 800a0a2:	d142      	bne.n	800a12a <_malloc_r+0xea>
 800a0a4:	6821      	ldr	r1, [r4, #0]
 800a0a6:	1a6d      	subs	r5, r5, r1
 800a0a8:	4629      	mov	r1, r5
 800a0aa:	4630      	mov	r0, r6
 800a0ac:	f7ff ffa6 	bl	8009ffc <sbrk_aligned>
 800a0b0:	3001      	adds	r0, #1
 800a0b2:	d03a      	beq.n	800a12a <_malloc_r+0xea>
 800a0b4:	6823      	ldr	r3, [r4, #0]
 800a0b6:	442b      	add	r3, r5
 800a0b8:	6023      	str	r3, [r4, #0]
 800a0ba:	f8d8 3000 	ldr.w	r3, [r8]
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	bb62      	cbnz	r2, 800a11c <_malloc_r+0xdc>
 800a0c2:	f8c8 7000 	str.w	r7, [r8]
 800a0c6:	e00f      	b.n	800a0e8 <_malloc_r+0xa8>
 800a0c8:	6822      	ldr	r2, [r4, #0]
 800a0ca:	1b52      	subs	r2, r2, r5
 800a0cc:	d420      	bmi.n	800a110 <_malloc_r+0xd0>
 800a0ce:	2a0b      	cmp	r2, #11
 800a0d0:	d917      	bls.n	800a102 <_malloc_r+0xc2>
 800a0d2:	1961      	adds	r1, r4, r5
 800a0d4:	42a3      	cmp	r3, r4
 800a0d6:	6025      	str	r5, [r4, #0]
 800a0d8:	bf18      	it	ne
 800a0da:	6059      	strne	r1, [r3, #4]
 800a0dc:	6863      	ldr	r3, [r4, #4]
 800a0de:	bf08      	it	eq
 800a0e0:	f8c8 1000 	streq.w	r1, [r8]
 800a0e4:	5162      	str	r2, [r4, r5]
 800a0e6:	604b      	str	r3, [r1, #4]
 800a0e8:	4630      	mov	r0, r6
 800a0ea:	f000 f9bd 	bl	800a468 <__malloc_unlock>
 800a0ee:	f104 000b 	add.w	r0, r4, #11
 800a0f2:	1d23      	adds	r3, r4, #4
 800a0f4:	f020 0007 	bic.w	r0, r0, #7
 800a0f8:	1ac2      	subs	r2, r0, r3
 800a0fa:	bf1c      	itt	ne
 800a0fc:	1a1b      	subne	r3, r3, r0
 800a0fe:	50a3      	strne	r3, [r4, r2]
 800a100:	e7af      	b.n	800a062 <_malloc_r+0x22>
 800a102:	6862      	ldr	r2, [r4, #4]
 800a104:	42a3      	cmp	r3, r4
 800a106:	bf0c      	ite	eq
 800a108:	f8c8 2000 	streq.w	r2, [r8]
 800a10c:	605a      	strne	r2, [r3, #4]
 800a10e:	e7eb      	b.n	800a0e8 <_malloc_r+0xa8>
 800a110:	4623      	mov	r3, r4
 800a112:	6864      	ldr	r4, [r4, #4]
 800a114:	e7ae      	b.n	800a074 <_malloc_r+0x34>
 800a116:	463c      	mov	r4, r7
 800a118:	687f      	ldr	r7, [r7, #4]
 800a11a:	e7b6      	b.n	800a08a <_malloc_r+0x4a>
 800a11c:	461a      	mov	r2, r3
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	42a3      	cmp	r3, r4
 800a122:	d1fb      	bne.n	800a11c <_malloc_r+0xdc>
 800a124:	2300      	movs	r3, #0
 800a126:	6053      	str	r3, [r2, #4]
 800a128:	e7de      	b.n	800a0e8 <_malloc_r+0xa8>
 800a12a:	230c      	movs	r3, #12
 800a12c:	6033      	str	r3, [r6, #0]
 800a12e:	4630      	mov	r0, r6
 800a130:	f000 f99a 	bl	800a468 <__malloc_unlock>
 800a134:	e794      	b.n	800a060 <_malloc_r+0x20>
 800a136:	6005      	str	r5, [r0, #0]
 800a138:	e7d6      	b.n	800a0e8 <_malloc_r+0xa8>
 800a13a:	bf00      	nop
 800a13c:	20002114 	.word	0x20002114

0800a140 <_printf_common>:
 800a140:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a144:	4616      	mov	r6, r2
 800a146:	4698      	mov	r8, r3
 800a148:	688a      	ldr	r2, [r1, #8]
 800a14a:	690b      	ldr	r3, [r1, #16]
 800a14c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800a150:	4293      	cmp	r3, r2
 800a152:	bfb8      	it	lt
 800a154:	4613      	movlt	r3, r2
 800a156:	6033      	str	r3, [r6, #0]
 800a158:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800a15c:	4607      	mov	r7, r0
 800a15e:	460c      	mov	r4, r1
 800a160:	b10a      	cbz	r2, 800a166 <_printf_common+0x26>
 800a162:	3301      	adds	r3, #1
 800a164:	6033      	str	r3, [r6, #0]
 800a166:	6823      	ldr	r3, [r4, #0]
 800a168:	0699      	lsls	r1, r3, #26
 800a16a:	bf42      	ittt	mi
 800a16c:	6833      	ldrmi	r3, [r6, #0]
 800a16e:	3302      	addmi	r3, #2
 800a170:	6033      	strmi	r3, [r6, #0]
 800a172:	6825      	ldr	r5, [r4, #0]
 800a174:	f015 0506 	ands.w	r5, r5, #6
 800a178:	d106      	bne.n	800a188 <_printf_common+0x48>
 800a17a:	f104 0a19 	add.w	sl, r4, #25
 800a17e:	68e3      	ldr	r3, [r4, #12]
 800a180:	6832      	ldr	r2, [r6, #0]
 800a182:	1a9b      	subs	r3, r3, r2
 800a184:	42ab      	cmp	r3, r5
 800a186:	dc26      	bgt.n	800a1d6 <_printf_common+0x96>
 800a188:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800a18c:	6822      	ldr	r2, [r4, #0]
 800a18e:	3b00      	subs	r3, #0
 800a190:	bf18      	it	ne
 800a192:	2301      	movne	r3, #1
 800a194:	0692      	lsls	r2, r2, #26
 800a196:	d42b      	bmi.n	800a1f0 <_printf_common+0xb0>
 800a198:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800a19c:	4641      	mov	r1, r8
 800a19e:	4638      	mov	r0, r7
 800a1a0:	47c8      	blx	r9
 800a1a2:	3001      	adds	r0, #1
 800a1a4:	d01e      	beq.n	800a1e4 <_printf_common+0xa4>
 800a1a6:	6823      	ldr	r3, [r4, #0]
 800a1a8:	6922      	ldr	r2, [r4, #16]
 800a1aa:	f003 0306 	and.w	r3, r3, #6
 800a1ae:	2b04      	cmp	r3, #4
 800a1b0:	bf02      	ittt	eq
 800a1b2:	68e5      	ldreq	r5, [r4, #12]
 800a1b4:	6833      	ldreq	r3, [r6, #0]
 800a1b6:	1aed      	subeq	r5, r5, r3
 800a1b8:	68a3      	ldr	r3, [r4, #8]
 800a1ba:	bf0c      	ite	eq
 800a1bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a1c0:	2500      	movne	r5, #0
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	bfc4      	itt	gt
 800a1c6:	1a9b      	subgt	r3, r3, r2
 800a1c8:	18ed      	addgt	r5, r5, r3
 800a1ca:	2600      	movs	r6, #0
 800a1cc:	341a      	adds	r4, #26
 800a1ce:	42b5      	cmp	r5, r6
 800a1d0:	d11a      	bne.n	800a208 <_printf_common+0xc8>
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	e008      	b.n	800a1e8 <_printf_common+0xa8>
 800a1d6:	2301      	movs	r3, #1
 800a1d8:	4652      	mov	r2, sl
 800a1da:	4641      	mov	r1, r8
 800a1dc:	4638      	mov	r0, r7
 800a1de:	47c8      	blx	r9
 800a1e0:	3001      	adds	r0, #1
 800a1e2:	d103      	bne.n	800a1ec <_printf_common+0xac>
 800a1e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a1ec:	3501      	adds	r5, #1
 800a1ee:	e7c6      	b.n	800a17e <_printf_common+0x3e>
 800a1f0:	18e1      	adds	r1, r4, r3
 800a1f2:	1c5a      	adds	r2, r3, #1
 800a1f4:	2030      	movs	r0, #48	@ 0x30
 800a1f6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800a1fa:	4422      	add	r2, r4
 800a1fc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800a200:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800a204:	3302      	adds	r3, #2
 800a206:	e7c7      	b.n	800a198 <_printf_common+0x58>
 800a208:	2301      	movs	r3, #1
 800a20a:	4622      	mov	r2, r4
 800a20c:	4641      	mov	r1, r8
 800a20e:	4638      	mov	r0, r7
 800a210:	47c8      	blx	r9
 800a212:	3001      	adds	r0, #1
 800a214:	d0e6      	beq.n	800a1e4 <_printf_common+0xa4>
 800a216:	3601      	adds	r6, #1
 800a218:	e7d9      	b.n	800a1ce <_printf_common+0x8e>
	...

0800a21c <_printf_i>:
 800a21c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a220:	7e0f      	ldrb	r7, [r1, #24]
 800a222:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a224:	2f78      	cmp	r7, #120	@ 0x78
 800a226:	4691      	mov	r9, r2
 800a228:	4680      	mov	r8, r0
 800a22a:	460c      	mov	r4, r1
 800a22c:	469a      	mov	sl, r3
 800a22e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a232:	d807      	bhi.n	800a244 <_printf_i+0x28>
 800a234:	2f62      	cmp	r7, #98	@ 0x62
 800a236:	d80a      	bhi.n	800a24e <_printf_i+0x32>
 800a238:	2f00      	cmp	r7, #0
 800a23a:	f000 80d2 	beq.w	800a3e2 <_printf_i+0x1c6>
 800a23e:	2f58      	cmp	r7, #88	@ 0x58
 800a240:	f000 80b9 	beq.w	800a3b6 <_printf_i+0x19a>
 800a244:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a248:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a24c:	e03a      	b.n	800a2c4 <_printf_i+0xa8>
 800a24e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a252:	2b15      	cmp	r3, #21
 800a254:	d8f6      	bhi.n	800a244 <_printf_i+0x28>
 800a256:	a101      	add	r1, pc, #4	@ (adr r1, 800a25c <_printf_i+0x40>)
 800a258:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a25c:	0800a2b5 	.word	0x0800a2b5
 800a260:	0800a2c9 	.word	0x0800a2c9
 800a264:	0800a245 	.word	0x0800a245
 800a268:	0800a245 	.word	0x0800a245
 800a26c:	0800a245 	.word	0x0800a245
 800a270:	0800a245 	.word	0x0800a245
 800a274:	0800a2c9 	.word	0x0800a2c9
 800a278:	0800a245 	.word	0x0800a245
 800a27c:	0800a245 	.word	0x0800a245
 800a280:	0800a245 	.word	0x0800a245
 800a284:	0800a245 	.word	0x0800a245
 800a288:	0800a3c9 	.word	0x0800a3c9
 800a28c:	0800a2f3 	.word	0x0800a2f3
 800a290:	0800a383 	.word	0x0800a383
 800a294:	0800a245 	.word	0x0800a245
 800a298:	0800a245 	.word	0x0800a245
 800a29c:	0800a3eb 	.word	0x0800a3eb
 800a2a0:	0800a245 	.word	0x0800a245
 800a2a4:	0800a2f3 	.word	0x0800a2f3
 800a2a8:	0800a245 	.word	0x0800a245
 800a2ac:	0800a245 	.word	0x0800a245
 800a2b0:	0800a38b 	.word	0x0800a38b
 800a2b4:	6833      	ldr	r3, [r6, #0]
 800a2b6:	1d1a      	adds	r2, r3, #4
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	6032      	str	r2, [r6, #0]
 800a2bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a2c0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e09d      	b.n	800a404 <_printf_i+0x1e8>
 800a2c8:	6833      	ldr	r3, [r6, #0]
 800a2ca:	6820      	ldr	r0, [r4, #0]
 800a2cc:	1d19      	adds	r1, r3, #4
 800a2ce:	6031      	str	r1, [r6, #0]
 800a2d0:	0606      	lsls	r6, r0, #24
 800a2d2:	d501      	bpl.n	800a2d8 <_printf_i+0xbc>
 800a2d4:	681d      	ldr	r5, [r3, #0]
 800a2d6:	e003      	b.n	800a2e0 <_printf_i+0xc4>
 800a2d8:	0645      	lsls	r5, r0, #25
 800a2da:	d5fb      	bpl.n	800a2d4 <_printf_i+0xb8>
 800a2dc:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a2e0:	2d00      	cmp	r5, #0
 800a2e2:	da03      	bge.n	800a2ec <_printf_i+0xd0>
 800a2e4:	232d      	movs	r3, #45	@ 0x2d
 800a2e6:	426d      	negs	r5, r5
 800a2e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a2ec:	4859      	ldr	r0, [pc, #356]	@ (800a454 <_printf_i+0x238>)
 800a2ee:	230a      	movs	r3, #10
 800a2f0:	e011      	b.n	800a316 <_printf_i+0xfa>
 800a2f2:	6821      	ldr	r1, [r4, #0]
 800a2f4:	6833      	ldr	r3, [r6, #0]
 800a2f6:	0608      	lsls	r0, r1, #24
 800a2f8:	f853 5b04 	ldr.w	r5, [r3], #4
 800a2fc:	d402      	bmi.n	800a304 <_printf_i+0xe8>
 800a2fe:	0649      	lsls	r1, r1, #25
 800a300:	bf48      	it	mi
 800a302:	b2ad      	uxthmi	r5, r5
 800a304:	2f6f      	cmp	r7, #111	@ 0x6f
 800a306:	4853      	ldr	r0, [pc, #332]	@ (800a454 <_printf_i+0x238>)
 800a308:	6033      	str	r3, [r6, #0]
 800a30a:	bf14      	ite	ne
 800a30c:	230a      	movne	r3, #10
 800a30e:	2308      	moveq	r3, #8
 800a310:	2100      	movs	r1, #0
 800a312:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a316:	6866      	ldr	r6, [r4, #4]
 800a318:	60a6      	str	r6, [r4, #8]
 800a31a:	2e00      	cmp	r6, #0
 800a31c:	bfa2      	ittt	ge
 800a31e:	6821      	ldrge	r1, [r4, #0]
 800a320:	f021 0104 	bicge.w	r1, r1, #4
 800a324:	6021      	strge	r1, [r4, #0]
 800a326:	b90d      	cbnz	r5, 800a32c <_printf_i+0x110>
 800a328:	2e00      	cmp	r6, #0
 800a32a:	d04b      	beq.n	800a3c4 <_printf_i+0x1a8>
 800a32c:	4616      	mov	r6, r2
 800a32e:	fbb5 f1f3 	udiv	r1, r5, r3
 800a332:	fb03 5711 	mls	r7, r3, r1, r5
 800a336:	5dc7      	ldrb	r7, [r0, r7]
 800a338:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a33c:	462f      	mov	r7, r5
 800a33e:	42bb      	cmp	r3, r7
 800a340:	460d      	mov	r5, r1
 800a342:	d9f4      	bls.n	800a32e <_printf_i+0x112>
 800a344:	2b08      	cmp	r3, #8
 800a346:	d10b      	bne.n	800a360 <_printf_i+0x144>
 800a348:	6823      	ldr	r3, [r4, #0]
 800a34a:	07df      	lsls	r7, r3, #31
 800a34c:	d508      	bpl.n	800a360 <_printf_i+0x144>
 800a34e:	6923      	ldr	r3, [r4, #16]
 800a350:	6861      	ldr	r1, [r4, #4]
 800a352:	4299      	cmp	r1, r3
 800a354:	bfde      	ittt	le
 800a356:	2330      	movle	r3, #48	@ 0x30
 800a358:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a35c:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800a360:	1b92      	subs	r2, r2, r6
 800a362:	6122      	str	r2, [r4, #16]
 800a364:	f8cd a000 	str.w	sl, [sp]
 800a368:	464b      	mov	r3, r9
 800a36a:	aa03      	add	r2, sp, #12
 800a36c:	4621      	mov	r1, r4
 800a36e:	4640      	mov	r0, r8
 800a370:	f7ff fee6 	bl	800a140 <_printf_common>
 800a374:	3001      	adds	r0, #1
 800a376:	d14a      	bne.n	800a40e <_printf_i+0x1f2>
 800a378:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a37c:	b004      	add	sp, #16
 800a37e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a382:	6823      	ldr	r3, [r4, #0]
 800a384:	f043 0320 	orr.w	r3, r3, #32
 800a388:	6023      	str	r3, [r4, #0]
 800a38a:	4833      	ldr	r0, [pc, #204]	@ (800a458 <_printf_i+0x23c>)
 800a38c:	2778      	movs	r7, #120	@ 0x78
 800a38e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a392:	6823      	ldr	r3, [r4, #0]
 800a394:	6831      	ldr	r1, [r6, #0]
 800a396:	061f      	lsls	r7, r3, #24
 800a398:	f851 5b04 	ldr.w	r5, [r1], #4
 800a39c:	d402      	bmi.n	800a3a4 <_printf_i+0x188>
 800a39e:	065f      	lsls	r7, r3, #25
 800a3a0:	bf48      	it	mi
 800a3a2:	b2ad      	uxthmi	r5, r5
 800a3a4:	6031      	str	r1, [r6, #0]
 800a3a6:	07d9      	lsls	r1, r3, #31
 800a3a8:	bf44      	itt	mi
 800a3aa:	f043 0320 	orrmi.w	r3, r3, #32
 800a3ae:	6023      	strmi	r3, [r4, #0]
 800a3b0:	b11d      	cbz	r5, 800a3ba <_printf_i+0x19e>
 800a3b2:	2310      	movs	r3, #16
 800a3b4:	e7ac      	b.n	800a310 <_printf_i+0xf4>
 800a3b6:	4827      	ldr	r0, [pc, #156]	@ (800a454 <_printf_i+0x238>)
 800a3b8:	e7e9      	b.n	800a38e <_printf_i+0x172>
 800a3ba:	6823      	ldr	r3, [r4, #0]
 800a3bc:	f023 0320 	bic.w	r3, r3, #32
 800a3c0:	6023      	str	r3, [r4, #0]
 800a3c2:	e7f6      	b.n	800a3b2 <_printf_i+0x196>
 800a3c4:	4616      	mov	r6, r2
 800a3c6:	e7bd      	b.n	800a344 <_printf_i+0x128>
 800a3c8:	6833      	ldr	r3, [r6, #0]
 800a3ca:	6825      	ldr	r5, [r4, #0]
 800a3cc:	6961      	ldr	r1, [r4, #20]
 800a3ce:	1d18      	adds	r0, r3, #4
 800a3d0:	6030      	str	r0, [r6, #0]
 800a3d2:	062e      	lsls	r6, r5, #24
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	d501      	bpl.n	800a3dc <_printf_i+0x1c0>
 800a3d8:	6019      	str	r1, [r3, #0]
 800a3da:	e002      	b.n	800a3e2 <_printf_i+0x1c6>
 800a3dc:	0668      	lsls	r0, r5, #25
 800a3de:	d5fb      	bpl.n	800a3d8 <_printf_i+0x1bc>
 800a3e0:	8019      	strh	r1, [r3, #0]
 800a3e2:	2300      	movs	r3, #0
 800a3e4:	6123      	str	r3, [r4, #16]
 800a3e6:	4616      	mov	r6, r2
 800a3e8:	e7bc      	b.n	800a364 <_printf_i+0x148>
 800a3ea:	6833      	ldr	r3, [r6, #0]
 800a3ec:	1d1a      	adds	r2, r3, #4
 800a3ee:	6032      	str	r2, [r6, #0]
 800a3f0:	681e      	ldr	r6, [r3, #0]
 800a3f2:	6862      	ldr	r2, [r4, #4]
 800a3f4:	2100      	movs	r1, #0
 800a3f6:	4630      	mov	r0, r6
 800a3f8:	f7f5 fef2 	bl	80001e0 <memchr>
 800a3fc:	b108      	cbz	r0, 800a402 <_printf_i+0x1e6>
 800a3fe:	1b80      	subs	r0, r0, r6
 800a400:	6060      	str	r0, [r4, #4]
 800a402:	6863      	ldr	r3, [r4, #4]
 800a404:	6123      	str	r3, [r4, #16]
 800a406:	2300      	movs	r3, #0
 800a408:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a40c:	e7aa      	b.n	800a364 <_printf_i+0x148>
 800a40e:	6923      	ldr	r3, [r4, #16]
 800a410:	4632      	mov	r2, r6
 800a412:	4649      	mov	r1, r9
 800a414:	4640      	mov	r0, r8
 800a416:	47d0      	blx	sl
 800a418:	3001      	adds	r0, #1
 800a41a:	d0ad      	beq.n	800a378 <_printf_i+0x15c>
 800a41c:	6823      	ldr	r3, [r4, #0]
 800a41e:	079b      	lsls	r3, r3, #30
 800a420:	d413      	bmi.n	800a44a <_printf_i+0x22e>
 800a422:	68e0      	ldr	r0, [r4, #12]
 800a424:	9b03      	ldr	r3, [sp, #12]
 800a426:	4298      	cmp	r0, r3
 800a428:	bfb8      	it	lt
 800a42a:	4618      	movlt	r0, r3
 800a42c:	e7a6      	b.n	800a37c <_printf_i+0x160>
 800a42e:	2301      	movs	r3, #1
 800a430:	4632      	mov	r2, r6
 800a432:	4649      	mov	r1, r9
 800a434:	4640      	mov	r0, r8
 800a436:	47d0      	blx	sl
 800a438:	3001      	adds	r0, #1
 800a43a:	d09d      	beq.n	800a378 <_printf_i+0x15c>
 800a43c:	3501      	adds	r5, #1
 800a43e:	68e3      	ldr	r3, [r4, #12]
 800a440:	9903      	ldr	r1, [sp, #12]
 800a442:	1a5b      	subs	r3, r3, r1
 800a444:	42ab      	cmp	r3, r5
 800a446:	dcf2      	bgt.n	800a42e <_printf_i+0x212>
 800a448:	e7eb      	b.n	800a422 <_printf_i+0x206>
 800a44a:	2500      	movs	r5, #0
 800a44c:	f104 0619 	add.w	r6, r4, #25
 800a450:	e7f5      	b.n	800a43e <_printf_i+0x222>
 800a452:	bf00      	nop
 800a454:	0800b395 	.word	0x0800b395
 800a458:	0800b3a6 	.word	0x0800b3a6

0800a45c <__malloc_lock>:
 800a45c:	4801      	ldr	r0, [pc, #4]	@ (800a464 <__malloc_lock+0x8>)
 800a45e:	f7ff bc1b 	b.w	8009c98 <__retarget_lock_acquire_recursive>
 800a462:	bf00      	nop
 800a464:	2000210c 	.word	0x2000210c

0800a468 <__malloc_unlock>:
 800a468:	4801      	ldr	r0, [pc, #4]	@ (800a470 <__malloc_unlock+0x8>)
 800a46a:	f7ff bc16 	b.w	8009c9a <__retarget_lock_release_recursive>
 800a46e:	bf00      	nop
 800a470:	2000210c 	.word	0x2000210c

0800a474 <_realloc_r>:
 800a474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a478:	4680      	mov	r8, r0
 800a47a:	4615      	mov	r5, r2
 800a47c:	460c      	mov	r4, r1
 800a47e:	b921      	cbnz	r1, 800a48a <_realloc_r+0x16>
 800a480:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a484:	4611      	mov	r1, r2
 800a486:	f7ff bddb 	b.w	800a040 <_malloc_r>
 800a48a:	b92a      	cbnz	r2, 800a498 <_realloc_r+0x24>
 800a48c:	f7ff fc14 	bl	8009cb8 <_free_r>
 800a490:	2400      	movs	r4, #0
 800a492:	4620      	mov	r0, r4
 800a494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a498:	f000 f844 	bl	800a524 <_malloc_usable_size_r>
 800a49c:	4285      	cmp	r5, r0
 800a49e:	4606      	mov	r6, r0
 800a4a0:	d802      	bhi.n	800a4a8 <_realloc_r+0x34>
 800a4a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a4a6:	d8f4      	bhi.n	800a492 <_realloc_r+0x1e>
 800a4a8:	4629      	mov	r1, r5
 800a4aa:	4640      	mov	r0, r8
 800a4ac:	f7ff fdc8 	bl	800a040 <_malloc_r>
 800a4b0:	4607      	mov	r7, r0
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d0ec      	beq.n	800a490 <_realloc_r+0x1c>
 800a4b6:	42b5      	cmp	r5, r6
 800a4b8:	462a      	mov	r2, r5
 800a4ba:	4621      	mov	r1, r4
 800a4bc:	bf28      	it	cs
 800a4be:	4632      	movcs	r2, r6
 800a4c0:	f7ff fbec 	bl	8009c9c <memcpy>
 800a4c4:	4621      	mov	r1, r4
 800a4c6:	4640      	mov	r0, r8
 800a4c8:	f7ff fbf6 	bl	8009cb8 <_free_r>
 800a4cc:	463c      	mov	r4, r7
 800a4ce:	e7e0      	b.n	800a492 <_realloc_r+0x1e>

0800a4d0 <memmove>:
 800a4d0:	4288      	cmp	r0, r1
 800a4d2:	b510      	push	{r4, lr}
 800a4d4:	eb01 0402 	add.w	r4, r1, r2
 800a4d8:	d902      	bls.n	800a4e0 <memmove+0x10>
 800a4da:	4284      	cmp	r4, r0
 800a4dc:	4623      	mov	r3, r4
 800a4de:	d807      	bhi.n	800a4f0 <memmove+0x20>
 800a4e0:	1e43      	subs	r3, r0, #1
 800a4e2:	42a1      	cmp	r1, r4
 800a4e4:	d008      	beq.n	800a4f8 <memmove+0x28>
 800a4e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a4ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a4ee:	e7f8      	b.n	800a4e2 <memmove+0x12>
 800a4f0:	4402      	add	r2, r0
 800a4f2:	4601      	mov	r1, r0
 800a4f4:	428a      	cmp	r2, r1
 800a4f6:	d100      	bne.n	800a4fa <memmove+0x2a>
 800a4f8:	bd10      	pop	{r4, pc}
 800a4fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a4fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a502:	e7f7      	b.n	800a4f4 <memmove+0x24>

0800a504 <_sbrk_r>:
 800a504:	b538      	push	{r3, r4, r5, lr}
 800a506:	4d06      	ldr	r5, [pc, #24]	@ (800a520 <_sbrk_r+0x1c>)
 800a508:	2300      	movs	r3, #0
 800a50a:	4604      	mov	r4, r0
 800a50c:	4608      	mov	r0, r1
 800a50e:	602b      	str	r3, [r5, #0]
 800a510:	f7f7 fd94 	bl	800203c <_sbrk>
 800a514:	1c43      	adds	r3, r0, #1
 800a516:	d102      	bne.n	800a51e <_sbrk_r+0x1a>
 800a518:	682b      	ldr	r3, [r5, #0]
 800a51a:	b103      	cbz	r3, 800a51e <_sbrk_r+0x1a>
 800a51c:	6023      	str	r3, [r4, #0]
 800a51e:	bd38      	pop	{r3, r4, r5, pc}
 800a520:	20002108 	.word	0x20002108

0800a524 <_malloc_usable_size_r>:
 800a524:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a528:	1f18      	subs	r0, r3, #4
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	bfbc      	itt	lt
 800a52e:	580b      	ldrlt	r3, [r1, r0]
 800a530:	18c0      	addlt	r0, r0, r3
 800a532:	4770      	bx	lr

0800a534 <_init>:
 800a534:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a536:	bf00      	nop
 800a538:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a53a:	bc08      	pop	{r3}
 800a53c:	469e      	mov	lr, r3
 800a53e:	4770      	bx	lr

0800a540 <_fini>:
 800a540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a542:	bf00      	nop
 800a544:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a546:	bc08      	pop	{r3}
 800a548:	469e      	mov	lr, r3
 800a54a:	4770      	bx	lr
