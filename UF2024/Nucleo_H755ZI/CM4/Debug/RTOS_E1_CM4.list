
RTOS_E1_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000095ec  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011b4  08109890  08109890  0000a890  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0810aa44  0810aa44  0000ba44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810aa4c  0810aa4c  0000ba4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810aa50  0810aa50  0000ba50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001e8  10000000  0810aa54  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000718  100001e8  0810ac3c  0000c1e8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000900  0810ac3c  0000c900  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001505a  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00002bb3  00000000  00000000  00021272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001000  00000000  00000000  00023e28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000c55  00000000  00000000  00024e28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003afd3  00000000  00000000  00025a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000163ae  00000000  00000000  00060a50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017d5f1  00000000  00000000  00076dfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000086  00000000  00000000  001f43ef  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000056a8  00000000  00000000  001f4478  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  001f9b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001e8 	.word	0x100001e8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08109874 	.word	0x08109874

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001ec 	.word	0x100001ec
 81002dc:	08109874 	.word	0x08109874

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_d2lz>:
 8100d98:	b538      	push	{r3, r4, r5, lr}
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	2300      	movs	r3, #0
 8100d9e:	4604      	mov	r4, r0
 8100da0:	460d      	mov	r5, r1
 8100da2:	f7ff ff23 	bl	8100bec <__aeabi_dcmplt>
 8100da6:	b928      	cbnz	r0, 8100db4 <__aeabi_d2lz+0x1c>
 8100da8:	4620      	mov	r0, r4
 8100daa:	4629      	mov	r1, r5
 8100dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100db0:	f000 b80a 	b.w	8100dc8 <__aeabi_d2ulz>
 8100db4:	4620      	mov	r0, r4
 8100db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dba:	f000 f805 	bl	8100dc8 <__aeabi_d2ulz>
 8100dbe:	4240      	negs	r0, r0
 8100dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc4:	bd38      	pop	{r3, r4, r5, pc}
 8100dc6:	bf00      	nop

08100dc8 <__aeabi_d2ulz>:
 8100dc8:	b5d0      	push	{r4, r6, r7, lr}
 8100dca:	4b0c      	ldr	r3, [pc, #48]	@ (8100dfc <__aeabi_d2ulz+0x34>)
 8100dcc:	2200      	movs	r2, #0
 8100dce:	4606      	mov	r6, r0
 8100dd0:	460f      	mov	r7, r1
 8100dd2:	f7ff fc99 	bl	8100708 <__aeabi_dmul>
 8100dd6:	f7ff ff6f 	bl	8100cb8 <__aeabi_d2uiz>
 8100dda:	4604      	mov	r4, r0
 8100ddc:	f7ff fc1a 	bl	8100614 <__aeabi_ui2d>
 8100de0:	4b07      	ldr	r3, [pc, #28]	@ (8100e00 <__aeabi_d2ulz+0x38>)
 8100de2:	2200      	movs	r2, #0
 8100de4:	f7ff fc90 	bl	8100708 <__aeabi_dmul>
 8100de8:	4602      	mov	r2, r0
 8100dea:	460b      	mov	r3, r1
 8100dec:	4630      	mov	r0, r6
 8100dee:	4639      	mov	r1, r7
 8100df0:	f7ff fad2 	bl	8100398 <__aeabi_dsub>
 8100df4:	f7ff ff60 	bl	8100cb8 <__aeabi_d2uiz>
 8100df8:	4621      	mov	r1, r4
 8100dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8100dfc:	3df00000 	.word	0x3df00000
 8100e00:	41f00000 	.word	0x41f00000

08100e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100e04:	b480      	push	{r7}
 8100e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100e08:	4b09      	ldr	r3, [pc, #36]	@ (8100e30 <SystemInit+0x2c>)
 8100e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100e0e:	4a08      	ldr	r2, [pc, #32]	@ (8100e30 <SystemInit+0x2c>)
 8100e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100e18:	4b05      	ldr	r3, [pc, #20]	@ (8100e30 <SystemInit+0x2c>)
 8100e1a:	691b      	ldr	r3, [r3, #16]
 8100e1c:	4a04      	ldr	r2, [pc, #16]	@ (8100e30 <SystemInit+0x2c>)
 8100e1e:	f043 0310 	orr.w	r3, r3, #16
 8100e22:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100e24:	bf00      	nop
 8100e26:	46bd      	mov	sp, r7
 8100e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e2c:	4770      	bx	lr
 8100e2e:	bf00      	nop
 8100e30:	e000ed00 	.word	0xe000ed00

08100e34 <ADS1115_Init>:
uint8_t ADS1115_config[2];
uint8_t ADS1115_rawValue[2];
float ADS1115_voltCoef; // Voltage coefficient.

/* Function definitions. */
HAL_StatusTypeDef ADS1115_Init(I2C_HandleTypeDef *handler, uint16_t setDataRate, uint16_t setPGA) {
 8100e34:	b580      	push	{r7, lr}
 8100e36:	b082      	sub	sp, #8
 8100e38:	af00      	add	r7, sp, #0
 8100e3a:	6078      	str	r0, [r7, #4]
 8100e3c:	460b      	mov	r3, r1
 8100e3e:	807b      	strh	r3, [r7, #2]
 8100e40:	4613      	mov	r3, r2
 8100e42:	803b      	strh	r3, [r7, #0]

	// Handler
	memcpy(&ADS1115_I2C_Handler, handler, sizeof(*handler));
 8100e44:	2254      	movs	r2, #84	@ 0x54
 8100e46:	6879      	ldr	r1, [r7, #4]
 8100e48:	482f      	ldr	r0, [pc, #188]	@ (8100f08 <ADS1115_Init+0xd4>)
 8100e4a:	f005 ffc8 	bl	8106dde <memcpy>

	// Data rate and PGA configurations.
	ADS1115_dataRate = setDataRate;
 8100e4e:	4a2f      	ldr	r2, [pc, #188]	@ (8100f0c <ADS1115_Init+0xd8>)
 8100e50:	887b      	ldrh	r3, [r7, #2]
 8100e52:	8013      	strh	r3, [r2, #0]
	ADS1115_pga = setPGA;
 8100e54:	4a2e      	ldr	r2, [pc, #184]	@ (8100f10 <ADS1115_Init+0xdc>)
 8100e56:	883b      	ldrh	r3, [r7, #0]
 8100e58:	8013      	strh	r3, [r2, #0]

	// Voltage coefficient update.
	switch (ADS1115_pga) {
 8100e5a:	4b2d      	ldr	r3, [pc, #180]	@ (8100f10 <ADS1115_Init+0xdc>)
 8100e5c:	881b      	ldrh	r3, [r3, #0]
 8100e5e:	2b0e      	cmp	r3, #14
 8100e60:	d83e      	bhi.n	8100ee0 <ADS1115_Init+0xac>
 8100e62:	a201      	add	r2, pc, #4	@ (adr r2, 8100e68 <ADS1115_Init+0x34>)
 8100e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100e68:	08100ea5 	.word	0x08100ea5
 8100e6c:	08100ee1 	.word	0x08100ee1
 8100e70:	08100eaf 	.word	0x08100eaf
 8100e74:	08100ee1 	.word	0x08100ee1
 8100e78:	08100eb9 	.word	0x08100eb9
 8100e7c:	08100ee1 	.word	0x08100ee1
 8100e80:	08100ec3 	.word	0x08100ec3
 8100e84:	08100ee1 	.word	0x08100ee1
 8100e88:	08100ecd 	.word	0x08100ecd
 8100e8c:	08100ee1 	.word	0x08100ee1
 8100e90:	08100ee1 	.word	0x08100ee1
 8100e94:	08100ee1 	.word	0x08100ee1
 8100e98:	08100ee1 	.word	0x08100ee1
 8100e9c:	08100ee1 	.word	0x08100ee1
 8100ea0:	08100ed7 	.word	0x08100ed7

	case ADS1115_PGA_TWOTHIRDS:
		ADS1115_voltCoef = 0.1875;
 8100ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8100f14 <ADS1115_Init+0xe0>)
 8100ea6:	f04f 5279 	mov.w	r2, #1044381696	@ 0x3e400000
 8100eaa:	601a      	str	r2, [r3, #0]
		break;
 8100eac:	e018      	b.n	8100ee0 <ADS1115_Init+0xac>

	case ADS1115_PGA_ONE:
		ADS1115_voltCoef = 0.125;
 8100eae:	4b19      	ldr	r3, [pc, #100]	@ (8100f14 <ADS1115_Init+0xe0>)
 8100eb0:	f04f 5278 	mov.w	r2, #1040187392	@ 0x3e000000
 8100eb4:	601a      	str	r2, [r3, #0]
		break;
 8100eb6:	e013      	b.n	8100ee0 <ADS1115_Init+0xac>

	case ADS1115_PGA_TWO:
		ADS1115_voltCoef = 0.0625;
 8100eb8:	4b16      	ldr	r3, [pc, #88]	@ (8100f14 <ADS1115_Init+0xe0>)
 8100eba:	f04f 5276 	mov.w	r2, #1031798784	@ 0x3d800000
 8100ebe:	601a      	str	r2, [r3, #0]
		break;
 8100ec0:	e00e      	b.n	8100ee0 <ADS1115_Init+0xac>

	case ADS1115_PGA_FOUR:
		ADS1115_voltCoef = 0.03125;
 8100ec2:	4b14      	ldr	r3, [pc, #80]	@ (8100f14 <ADS1115_Init+0xe0>)
 8100ec4:	f04f 5274 	mov.w	r2, #1023410176	@ 0x3d000000
 8100ec8:	601a      	str	r2, [r3, #0]
		break;
 8100eca:	e009      	b.n	8100ee0 <ADS1115_Init+0xac>

	case ADS1115_PGA_EIGHT:
		ADS1115_voltCoef = 0.015625;
 8100ecc:	4b11      	ldr	r3, [pc, #68]	@ (8100f14 <ADS1115_Init+0xe0>)
 8100ece:	f04f 5272 	mov.w	r2, #1015021568	@ 0x3c800000
 8100ed2:	601a      	str	r2, [r3, #0]
		break;
 8100ed4:	e004      	b.n	8100ee0 <ADS1115_Init+0xac>

	case ADS1115_PGA_SIXTEEN:
		ADS1115_voltCoef = 0.0078125;
 8100ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8100f14 <ADS1115_Init+0xe0>)
 8100ed8:	f04f 5270 	mov.w	r2, #1006632960	@ 0x3c000000
 8100edc:	601a      	str	r2, [r3, #0]
		break;
 8100ede:	bf00      	nop

		}

	if (HAL_I2C_IsDeviceReady(&ADS1115_I2C_Handler, (uint16_t) (ADS1115_devAddress << 1), 5, ADS1115_TIMEOUT) == HAL_OK) {
 8100ee0:	4b0d      	ldr	r3, [pc, #52]	@ (8100f18 <ADS1115_Init+0xe4>)
 8100ee2:	781b      	ldrb	r3, [r3, #0]
 8100ee4:	005b      	lsls	r3, r3, #1
 8100ee6:	b299      	uxth	r1, r3
 8100ee8:	2301      	movs	r3, #1
 8100eea:	2205      	movs	r2, #5
 8100eec:	4806      	ldr	r0, [pc, #24]	@ (8100f08 <ADS1115_Init+0xd4>)
 8100eee:	f001 fe43 	bl	8102b78 <HAL_I2C_IsDeviceReady>
 8100ef2:	4603      	mov	r3, r0
 8100ef4:	2b00      	cmp	r3, #0
 8100ef6:	d101      	bne.n	8100efc <ADS1115_Init+0xc8>
		return HAL_OK;
 8100ef8:	2300      	movs	r3, #0
 8100efa:	e000      	b.n	8100efe <ADS1115_Init+0xca>
	} else {
		return HAL_ERROR;
 8100efc:	2301      	movs	r3, #1
	}

}
 8100efe:	4618      	mov	r0, r3
 8100f00:	3708      	adds	r7, #8
 8100f02:	46bd      	mov	sp, r7
 8100f04:	bd80      	pop	{r7, pc}
 8100f06:	bf00      	nop
 8100f08:	10000204 	.word	0x10000204
 8100f0c:	1000000a 	.word	0x1000000a
 8100f10:	1000000c 	.word	0x1000000c
 8100f14:	10000260 	.word	0x10000260
 8100f18:	10000008 	.word	0x10000008

08100f1c <ADS1115_readSingleEnded>:

HAL_StatusTypeDef ADS1115_readSingleEnded(uint16_t muxPort, float *voltage) {
 8100f1c:	b580      	push	{r7, lr}
 8100f1e:	b088      	sub	sp, #32
 8100f20:	af04      	add	r7, sp, #16
 8100f22:	4603      	mov	r3, r0
 8100f24:	6039      	str	r1, [r7, #0]
 8100f26:	80fb      	strh	r3, [r7, #6]

	ADS1115_config[0] = ADS1115_OS | muxPort | ADS1115_pga | ADS1115_MODE;
 8100f28:	88fb      	ldrh	r3, [r7, #6]
 8100f2a:	b2da      	uxtb	r2, r3
 8100f2c:	4b42      	ldr	r3, [pc, #264]	@ (8101038 <ADS1115_readSingleEnded+0x11c>)
 8100f2e:	881b      	ldrh	r3, [r3, #0]
 8100f30:	b2db      	uxtb	r3, r3
 8100f32:	4313      	orrs	r3, r2
 8100f34:	b2db      	uxtb	r3, r3
 8100f36:	f063 037e 	orn	r3, r3, #126	@ 0x7e
 8100f3a:	b2da      	uxtb	r2, r3
 8100f3c:	4b3f      	ldr	r3, [pc, #252]	@ (810103c <ADS1115_readSingleEnded+0x120>)
 8100f3e:	701a      	strb	r2, [r3, #0]
	ADS1115_config[1] = ADS1115_dataRate | ADS1115_COMP_MODE | ADS1115_COMP_POL | ADS1115_COMP_LAT| ADS1115_COMP_QUE;
 8100f40:	4b3f      	ldr	r3, [pc, #252]	@ (8101040 <ADS1115_readSingleEnded+0x124>)
 8100f42:	881b      	ldrh	r3, [r3, #0]
 8100f44:	b2db      	uxtb	r3, r3
 8100f46:	f043 0303 	orr.w	r3, r3, #3
 8100f4a:	b2da      	uxtb	r2, r3
 8100f4c:	4b3b      	ldr	r3, [pc, #236]	@ (810103c <ADS1115_readSingleEnded+0x120>)
 8100f4e:	705a      	strb	r2, [r3, #1]
	uint8_t waiting=1;
 8100f50:	2301      	movs	r3, #1
 8100f52:	73fb      	strb	r3, [r7, #15]
	uint16_t cnt=0;
 8100f54:	2300      	movs	r3, #0
 8100f56:	81bb      	strh	r3, [r7, #12]

	if(HAL_I2C_Mem_Write(&ADS1115_I2C_Handler, (uint16_t) (ADS1115_devAddress << 1), ADS1115_CONFIG_REG, 1, ADS1115_config, 2, ADS1115_TIMEOUT) == HAL_OK)
 8100f58:	4b3a      	ldr	r3, [pc, #232]	@ (8101044 <ADS1115_readSingleEnded+0x128>)
 8100f5a:	781b      	ldrb	r3, [r3, #0]
 8100f5c:	005b      	lsls	r3, r3, #1
 8100f5e:	b299      	uxth	r1, r3
 8100f60:	2301      	movs	r3, #1
 8100f62:	9302      	str	r3, [sp, #8]
 8100f64:	2302      	movs	r3, #2
 8100f66:	9301      	str	r3, [sp, #4]
 8100f68:	4b34      	ldr	r3, [pc, #208]	@ (810103c <ADS1115_readSingleEnded+0x120>)
 8100f6a:	9300      	str	r3, [sp, #0]
 8100f6c:	2301      	movs	r3, #1
 8100f6e:	2201      	movs	r2, #1
 8100f70:	4835      	ldr	r0, [pc, #212]	@ (8101048 <ADS1115_readSingleEnded+0x12c>)
 8100f72:	f001 fbd3 	bl	810271c <HAL_I2C_Mem_Write>
 8100f76:	4603      	mov	r3, r0
 8100f78:	2b00      	cmp	r3, #0
 8100f7a:	d157      	bne.n	810102c <ADS1115_readSingleEnded+0x110>
	{
		while(waiting) //Checking Data Ready
 8100f7c:	e027      	b.n	8100fce <ADS1115_readSingleEnded+0xb2>
		{
			if(HAL_I2C_Mem_Read(&ADS1115_I2C_Handler, (uint16_t) ((ADS1115_devAddress << 1) | 0x1), ADS1115_CONFIG_REG, 1, ADS1115_config, 2, ADS1115_TIMEOUT) == HAL_OK)
 8100f7e:	4b31      	ldr	r3, [pc, #196]	@ (8101044 <ADS1115_readSingleEnded+0x128>)
 8100f80:	781b      	ldrb	r3, [r3, #0]
 8100f82:	005b      	lsls	r3, r3, #1
 8100f84:	b21b      	sxth	r3, r3
 8100f86:	f043 0301 	orr.w	r3, r3, #1
 8100f8a:	b21b      	sxth	r3, r3
 8100f8c:	b299      	uxth	r1, r3
 8100f8e:	2301      	movs	r3, #1
 8100f90:	9302      	str	r3, [sp, #8]
 8100f92:	2302      	movs	r3, #2
 8100f94:	9301      	str	r3, [sp, #4]
 8100f96:	4b29      	ldr	r3, [pc, #164]	@ (810103c <ADS1115_readSingleEnded+0x120>)
 8100f98:	9300      	str	r3, [sp, #0]
 8100f9a:	2301      	movs	r3, #1
 8100f9c:	2201      	movs	r2, #1
 8100f9e:	482a      	ldr	r0, [pc, #168]	@ (8101048 <ADS1115_readSingleEnded+0x12c>)
 8100fa0:	f001 fcd0 	bl	8102944 <HAL_I2C_Mem_Read>
 8100fa4:	4603      	mov	r3, r0
 8100fa6:	2b00      	cmp	r3, #0
 8100fa8:	d107      	bne.n	8100fba <ADS1115_readSingleEnded+0x9e>
				{
				if(ADS1115_config[0] & ADS1115_OS) waiting=0;
 8100faa:	4b24      	ldr	r3, [pc, #144]	@ (810103c <ADS1115_readSingleEnded+0x120>)
 8100fac:	781b      	ldrb	r3, [r3, #0]
 8100fae:	b25b      	sxtb	r3, r3
 8100fb0:	2b00      	cmp	r3, #0
 8100fb2:	da04      	bge.n	8100fbe <ADS1115_readSingleEnded+0xa2>
 8100fb4:	2300      	movs	r3, #0
 8100fb6:	73fb      	strb	r3, [r7, #15]
 8100fb8:	e001      	b.n	8100fbe <ADS1115_readSingleEnded+0xa2>
				}
			else return HAL_ERROR;
 8100fba:	2301      	movs	r3, #1
 8100fbc:	e037      	b.n	810102e <ADS1115_readSingleEnded+0x112>
			if(++cnt==100) return HAL_ERROR;
 8100fbe:	89bb      	ldrh	r3, [r7, #12]
 8100fc0:	3301      	adds	r3, #1
 8100fc2:	81bb      	strh	r3, [r7, #12]
 8100fc4:	89bb      	ldrh	r3, [r7, #12]
 8100fc6:	2b64      	cmp	r3, #100	@ 0x64
 8100fc8:	d101      	bne.n	8100fce <ADS1115_readSingleEnded+0xb2>
 8100fca:	2301      	movs	r3, #1
 8100fcc:	e02f      	b.n	810102e <ADS1115_readSingleEnded+0x112>
		while(waiting) //Checking Data Ready
 8100fce:	7bfb      	ldrb	r3, [r7, #15]
 8100fd0:	2b00      	cmp	r3, #0
 8100fd2:	d1d4      	bne.n	8100f7e <ADS1115_readSingleEnded+0x62>
		}

		if(HAL_I2C_Mem_Read(&ADS1115_I2C_Handler, (uint16_t) ((ADS1115_devAddress << 1) | 0x1), ADS1115_CONVER_REG, 1, ADS1115_rawValue, 2, ADS1115_TIMEOUT) == HAL_OK)
 8100fd4:	4b1b      	ldr	r3, [pc, #108]	@ (8101044 <ADS1115_readSingleEnded+0x128>)
 8100fd6:	781b      	ldrb	r3, [r3, #0]
 8100fd8:	005b      	lsls	r3, r3, #1
 8100fda:	b21b      	sxth	r3, r3
 8100fdc:	f043 0301 	orr.w	r3, r3, #1
 8100fe0:	b21b      	sxth	r3, r3
 8100fe2:	b299      	uxth	r1, r3
 8100fe4:	2301      	movs	r3, #1
 8100fe6:	9302      	str	r3, [sp, #8]
 8100fe8:	2302      	movs	r3, #2
 8100fea:	9301      	str	r3, [sp, #4]
 8100fec:	4b17      	ldr	r3, [pc, #92]	@ (810104c <ADS1115_readSingleEnded+0x130>)
 8100fee:	9300      	str	r3, [sp, #0]
 8100ff0:	2301      	movs	r3, #1
 8100ff2:	2200      	movs	r2, #0
 8100ff4:	4814      	ldr	r0, [pc, #80]	@ (8101048 <ADS1115_readSingleEnded+0x12c>)
 8100ff6:	f001 fca5 	bl	8102944 <HAL_I2C_Mem_Read>
 8100ffa:	4603      	mov	r3, r0
 8100ffc:	2b00      	cmp	r3, #0
 8100ffe:	d115      	bne.n	810102c <ADS1115_readSingleEnded+0x110>
		{
			*voltage = (float) (((int16_t) (ADS1115_rawValue[0] << 8) | ADS1115_rawValue[1]) * ADS1115_voltCoef);
 8101000:	4b12      	ldr	r3, [pc, #72]	@ (810104c <ADS1115_readSingleEnded+0x130>)
 8101002:	781b      	ldrb	r3, [r3, #0]
 8101004:	021b      	lsls	r3, r3, #8
 8101006:	b21b      	sxth	r3, r3
 8101008:	461a      	mov	r2, r3
 810100a:	4b10      	ldr	r3, [pc, #64]	@ (810104c <ADS1115_readSingleEnded+0x130>)
 810100c:	785b      	ldrb	r3, [r3, #1]
 810100e:	4313      	orrs	r3, r2
 8101010:	ee07 3a90 	vmov	s15, r3
 8101014:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8101018:	4b0d      	ldr	r3, [pc, #52]	@ (8101050 <ADS1115_readSingleEnded+0x134>)
 810101a:	edd3 7a00 	vldr	s15, [r3]
 810101e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101022:	683b      	ldr	r3, [r7, #0]
 8101024:	edc3 7a00 	vstr	s15, [r3]
			return HAL_OK;
 8101028:	2300      	movs	r3, #0
 810102a:	e000      	b.n	810102e <ADS1115_readSingleEnded+0x112>

		}

	}

	return HAL_ERROR;
 810102c:	2301      	movs	r3, #1

}
 810102e:	4618      	mov	r0, r3
 8101030:	3710      	adds	r7, #16
 8101032:	46bd      	mov	sp, r7
 8101034:	bd80      	pop	{r7, pc}
 8101036:	bf00      	nop
 8101038:	1000000c 	.word	0x1000000c
 810103c:	10000258 	.word	0x10000258
 8101040:	1000000a 	.word	0x1000000a
 8101044:	10000008 	.word	0x10000008
 8101048:	10000204 	.word	0x10000204
 810104c:	1000025c 	.word	0x1000025c
 8101050:	10000260 	.word	0x10000260

08101054 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8101054:	b580      	push	{r7, lr}
 8101056:	b088      	sub	sp, #32
 8101058:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810105a:	4b4e      	ldr	r3, [pc, #312]	@ (8101194 <main+0x140>)
 810105c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101060:	4a4c      	ldr	r2, [pc, #304]	@ (8101194 <main+0x140>)
 8101062:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101066:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810106a:	4b4a      	ldr	r3, [pc, #296]	@ (8101194 <main+0x140>)
 810106c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101070:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8101074:	607b      	str	r3, [r7, #4]
 8101076:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8101078:	2001      	movs	r0, #1
 810107a:	f001 f989 	bl	8102390 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810107e:	f002 fa3b 	bl	81034f8 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8101082:	2201      	movs	r2, #1
 8101084:	2102      	movs	r1, #2
 8101086:	2000      	movs	r0, #0
 8101088:	f002 f9bc 	bl	8103404 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810108c:	4b42      	ldr	r3, [pc, #264]	@ (8101198 <main+0x144>)
 810108e:	681b      	ldr	r3, [r3, #0]
 8101090:	091b      	lsrs	r3, r3, #4
 8101092:	f003 030f 	and.w	r3, r3, #15
 8101096:	2b07      	cmp	r3, #7
 8101098:	d108      	bne.n	81010ac <main+0x58>
 810109a:	4b40      	ldr	r3, [pc, #256]	@ (810119c <main+0x148>)
 810109c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 81010a0:	4a3e      	ldr	r2, [pc, #248]	@ (810119c <main+0x148>)
 81010a2:	f043 0301 	orr.w	r3, r3, #1
 81010a6:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 81010aa:	e007      	b.n	81010bc <main+0x68>
 81010ac:	4b3b      	ldr	r3, [pc, #236]	@ (810119c <main+0x148>)
 81010ae:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 81010b2:	4a3a      	ldr	r2, [pc, #232]	@ (810119c <main+0x148>)
 81010b4:	f043 0301 	orr.w	r3, r3, #1
 81010b8:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 81010bc:	f000 fde8 	bl	8101c90 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 81010c0:	f000 f8fa 	bl	81012b8 <MX_GPIO_Init>
  MX_I2C1_Init();
 81010c4:	f000 f878 	bl	81011b8 <MX_I2C1_Init>
  MX_I2C2_Init();
 81010c8:	f000 f8b6 	bl	8101238 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  SSD1306_Init (); // initialize the diaply
 81010cc:	f000 f914 	bl	81012f8 <SSD1306_Init>
  SSD1306_GotoXY (0,0); // goto 10, 10
 81010d0:	2100      	movs	r1, #0
 81010d2:	2000      	movs	r0, #0
 81010d4:	f000 fa7a 	bl	81015cc <SSD1306_GotoXY>
  SSD1306_Puts ("CH1: ", &Font_11x18, 1); // print Voltmeter_Back to Intel Nuc
 81010d8:	2201      	movs	r2, #1
 81010da:	4931      	ldr	r1, [pc, #196]	@ (81011a0 <main+0x14c>)
 81010dc:	4831      	ldr	r0, [pc, #196]	@ (81011a4 <main+0x150>)
 81010de:	f000 fb09 	bl	81016f4 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 81010e2:	f000 f9cd 	bl	8101480 <SSD1306_UpdateScreen>
  //HAL_Delay(3000);
  SSD1306_GotoXY (0,20);
 81010e6:	2114      	movs	r1, #20
 81010e8:	2000      	movs	r0, #0
 81010ea:	f000 fa6f 	bl	81015cc <SSD1306_GotoXY>
  SSD1306_Puts ("CH2: ", &Font_11x18, 1);
 81010ee:	2201      	movs	r2, #1
 81010f0:	492b      	ldr	r1, [pc, #172]	@ (81011a0 <main+0x14c>)
 81010f2:	482d      	ldr	r0, [pc, #180]	@ (81011a8 <main+0x154>)
 81010f4:	f000 fafe 	bl	81016f4 <SSD1306_Puts>
  SSD1306_GotoXY (0,40);
 81010f8:	2128      	movs	r1, #40	@ 0x28
 81010fa:	2000      	movs	r0, #0
 81010fc:	f000 fa66 	bl	81015cc <SSD1306_GotoXY>
  SSD1306_Puts ("Temp: ", &Font_11x18, 1);
 8101100:	2201      	movs	r2, #1
 8101102:	4927      	ldr	r1, [pc, #156]	@ (81011a0 <main+0x14c>)
 8101104:	4829      	ldr	r0, [pc, #164]	@ (81011ac <main+0x158>)
 8101106:	f000 faf5 	bl	81016f4 <SSD1306_Puts>
  SSD1306_UpdateScreen(); // update screen
 810110a:	f000 f9b9 	bl	8101480 <SSD1306_UpdateScreen>

  // ADS1115 Init
  if(ADS1115_Init(&hi2c2, ADS1115_DATA_RATE_64, ADS1115_PGA_ONE) == HAL_OK)
 810110e:	2202      	movs	r2, #2
 8101110:	2160      	movs	r1, #96	@ 0x60
 8101112:	4827      	ldr	r0, [pc, #156]	@ (81011b0 <main+0x15c>)
 8101114:	f7ff fe8e 	bl	8100e34 <ADS1115_Init>
 8101118:	4603      	mov	r3, r0
 810111a:	2b00      	cmp	r3, #0
 810111c:	d107      	bne.n	810112e <main+0xda>
  {
    // Device found.
    HAL_Delay(1500);
 810111e:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 8101122:	f000 fe69 	bl	8101df8 <HAL_Delay>
  {
    // Device cannot found.
    while(1);
  }

  float voltageRead = 0;
 8101126:	f04f 0300 	mov.w	r3, #0
 810112a:	61fb      	str	r3, [r7, #28]
 810112c:	e000      	b.n	8101130 <main+0xdc>
    while(1);
 810112e:	e7fe      	b.n	810112e <main+0xda>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 ADS1115_readSingleEnded(ADS1115_MUX_AIN0, &voltageRead);
 8101130:	f107 031c 	add.w	r3, r7, #28
 8101134:	4619      	mov	r1, r3
 8101136:	2040      	movs	r0, #64	@ 0x40
 8101138:	f7ff fef0 	bl	8100f1c <ADS1115_readSingleEnded>
	 sprintf(msg,"%g\r\n",voltageRead);
 810113c:	69fb      	ldr	r3, [r7, #28]
 810113e:	4618      	mov	r0, r3
 8101140:	f7ff fa8a 	bl	8100658 <__aeabi_f2d>
 8101144:	4602      	mov	r2, r0
 8101146:	460b      	mov	r3, r1
 8101148:	f107 0008 	add.w	r0, r7, #8
 810114c:	4919      	ldr	r1, [pc, #100]	@ (81011b4 <main+0x160>)
 810114e:	f004 fe95 	bl	8105e7c <siprintf>
	 HAL_UART_Transmit(COM1, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY);
 8101152:	f107 0308 	add.w	r3, r7, #8
 8101156:	4618      	mov	r0, r3
 8101158:	f7ff f912 	bl	8100380 <strlen>
 810115c:	4603      	mov	r3, r0
 810115e:	b29a      	uxth	r2, r3
 8101160:	f107 0108 	add.w	r1, r7, #8
 8101164:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8101168:	2000      	movs	r0, #0
 810116a:	f003 febb 	bl	8104ee4 <HAL_UART_Transmit>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	 SSD1306_GotoXY (40,40); // goto 10, 10
 810116e:	2128      	movs	r1, #40	@ 0x28
 8101170:	2028      	movs	r0, #40	@ 0x28
 8101172:	f000 fa2b 	bl	81015cc <SSD1306_GotoXY>
	 SSD1306_Puts((char *)msg, &Font_11x18, 1);
 8101176:	f107 0308 	add.w	r3, r7, #8
 810117a:	2201      	movs	r2, #1
 810117c:	4908      	ldr	r1, [pc, #32]	@ (81011a0 <main+0x14c>)
 810117e:	4618      	mov	r0, r3
 8101180:	f000 fab8 	bl	81016f4 <SSD1306_Puts>

	 /*SSD1306_Putc ((char)((int)(Temp)/100+48), &Font_11x18, 1);
	 SSD1306_Putc ((char)(((int)(Temp)%100)/10+48), &Font_11x18, 1);
	 SSD1306_Puts (".", &Font_11x18, 1);
	 SSD1306_Putc ((char)((int)(Temp)%10+48), &Font_11x18, 1);*/
	 SSD1306_UpdateScreen(); // update screen
 8101184:	f000 f97c 	bl	8101480 <SSD1306_UpdateScreen>
	 HAL_Delay(1000);
 8101188:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 810118c:	f000 fe34 	bl	8101df8 <HAL_Delay>
	 ADS1115_readSingleEnded(ADS1115_MUX_AIN0, &voltageRead);
 8101190:	bf00      	nop
 8101192:	e7cd      	b.n	8101130 <main+0xdc>
 8101194:	58024400 	.word	0x58024400
 8101198:	e000ed00 	.word	0xe000ed00
 810119c:	58026400 	.word	0x58026400
 81011a0:	10000010 	.word	0x10000010
 81011a4:	08109890 	.word	0x08109890
 81011a8:	08109898 	.word	0x08109898
 81011ac:	081098a0 	.word	0x081098a0
 81011b0:	100002b8 	.word	0x100002b8
 81011b4:	081098a8 	.word	0x081098a8

081011b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 81011b8:	b580      	push	{r7, lr}
 81011ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 81011bc:	4b1b      	ldr	r3, [pc, #108]	@ (810122c <MX_I2C1_Init+0x74>)
 81011be:	4a1c      	ldr	r2, [pc, #112]	@ (8101230 <MX_I2C1_Init+0x78>)
 81011c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 81011c2:	4b1a      	ldr	r3, [pc, #104]	@ (810122c <MX_I2C1_Init+0x74>)
 81011c4:	4a1b      	ldr	r2, [pc, #108]	@ (8101234 <MX_I2C1_Init+0x7c>)
 81011c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 81011c8:	4b18      	ldr	r3, [pc, #96]	@ (810122c <MX_I2C1_Init+0x74>)
 81011ca:	2200      	movs	r2, #0
 81011cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 81011ce:	4b17      	ldr	r3, [pc, #92]	@ (810122c <MX_I2C1_Init+0x74>)
 81011d0:	2201      	movs	r2, #1
 81011d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 81011d4:	4b15      	ldr	r3, [pc, #84]	@ (810122c <MX_I2C1_Init+0x74>)
 81011d6:	2200      	movs	r2, #0
 81011d8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 81011da:	4b14      	ldr	r3, [pc, #80]	@ (810122c <MX_I2C1_Init+0x74>)
 81011dc:	2200      	movs	r2, #0
 81011de:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 81011e0:	4b12      	ldr	r3, [pc, #72]	@ (810122c <MX_I2C1_Init+0x74>)
 81011e2:	2200      	movs	r2, #0
 81011e4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 81011e6:	4b11      	ldr	r3, [pc, #68]	@ (810122c <MX_I2C1_Init+0x74>)
 81011e8:	2200      	movs	r2, #0
 81011ea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 81011ec:	4b0f      	ldr	r3, [pc, #60]	@ (810122c <MX_I2C1_Init+0x74>)
 81011ee:	2200      	movs	r2, #0
 81011f0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 81011f2:	480e      	ldr	r0, [pc, #56]	@ (810122c <MX_I2C1_Init+0x74>)
 81011f4:	f001 f8de 	bl	81023b4 <HAL_I2C_Init>
 81011f8:	4603      	mov	r3, r0
 81011fa:	2b00      	cmp	r3, #0
 81011fc:	d001      	beq.n	8101202 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 81011fe:	f000 f875 	bl	81012ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101202:	2100      	movs	r1, #0
 8101204:	4809      	ldr	r0, [pc, #36]	@ (810122c <MX_I2C1_Init+0x74>)
 8101206:	f002 f865 	bl	81032d4 <HAL_I2CEx_ConfigAnalogFilter>
 810120a:	4603      	mov	r3, r0
 810120c:	2b00      	cmp	r3, #0
 810120e:	d001      	beq.n	8101214 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8101210:	f000 f86c 	bl	81012ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8101214:	2100      	movs	r1, #0
 8101216:	4805      	ldr	r0, [pc, #20]	@ (810122c <MX_I2C1_Init+0x74>)
 8101218:	f002 f8a7 	bl	810336a <HAL_I2CEx_ConfigDigitalFilter>
 810121c:	4603      	mov	r3, r0
 810121e:	2b00      	cmp	r3, #0
 8101220:	d001      	beq.n	8101226 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8101222:	f000 f863 	bl	81012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8101226:	bf00      	nop
 8101228:	bd80      	pop	{r7, pc}
 810122a:	bf00      	nop
 810122c:	10000264 	.word	0x10000264
 8101230:	40005400 	.word	0x40005400
 8101234:	00707cbb 	.word	0x00707cbb

08101238 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8101238:	b580      	push	{r7, lr}
 810123a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 810123c:	4b1b      	ldr	r3, [pc, #108]	@ (81012ac <MX_I2C2_Init+0x74>)
 810123e:	4a1c      	ldr	r2, [pc, #112]	@ (81012b0 <MX_I2C2_Init+0x78>)
 8101240:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8101242:	4b1a      	ldr	r3, [pc, #104]	@ (81012ac <MX_I2C2_Init+0x74>)
 8101244:	4a1b      	ldr	r2, [pc, #108]	@ (81012b4 <MX_I2C2_Init+0x7c>)
 8101246:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8101248:	4b18      	ldr	r3, [pc, #96]	@ (81012ac <MX_I2C2_Init+0x74>)
 810124a:	2200      	movs	r2, #0
 810124c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 810124e:	4b17      	ldr	r3, [pc, #92]	@ (81012ac <MX_I2C2_Init+0x74>)
 8101250:	2201      	movs	r2, #1
 8101252:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8101254:	4b15      	ldr	r3, [pc, #84]	@ (81012ac <MX_I2C2_Init+0x74>)
 8101256:	2200      	movs	r2, #0
 8101258:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 810125a:	4b14      	ldr	r3, [pc, #80]	@ (81012ac <MX_I2C2_Init+0x74>)
 810125c:	2200      	movs	r2, #0
 810125e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8101260:	4b12      	ldr	r3, [pc, #72]	@ (81012ac <MX_I2C2_Init+0x74>)
 8101262:	2200      	movs	r2, #0
 8101264:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8101266:	4b11      	ldr	r3, [pc, #68]	@ (81012ac <MX_I2C2_Init+0x74>)
 8101268:	2200      	movs	r2, #0
 810126a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 810126c:	4b0f      	ldr	r3, [pc, #60]	@ (81012ac <MX_I2C2_Init+0x74>)
 810126e:	2200      	movs	r2, #0
 8101270:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8101272:	480e      	ldr	r0, [pc, #56]	@ (81012ac <MX_I2C2_Init+0x74>)
 8101274:	f001 f89e 	bl	81023b4 <HAL_I2C_Init>
 8101278:	4603      	mov	r3, r0
 810127a:	2b00      	cmp	r3, #0
 810127c:	d001      	beq.n	8101282 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 810127e:	f000 f835 	bl	81012ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8101282:	2100      	movs	r1, #0
 8101284:	4809      	ldr	r0, [pc, #36]	@ (81012ac <MX_I2C2_Init+0x74>)
 8101286:	f002 f825 	bl	81032d4 <HAL_I2CEx_ConfigAnalogFilter>
 810128a:	4603      	mov	r3, r0
 810128c:	2b00      	cmp	r3, #0
 810128e:	d001      	beq.n	8101294 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8101290:	f000 f82c 	bl	81012ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8101294:	2100      	movs	r1, #0
 8101296:	4805      	ldr	r0, [pc, #20]	@ (81012ac <MX_I2C2_Init+0x74>)
 8101298:	f002 f867 	bl	810336a <HAL_I2CEx_ConfigDigitalFilter>
 810129c:	4603      	mov	r3, r0
 810129e:	2b00      	cmp	r3, #0
 81012a0:	d001      	beq.n	81012a6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 81012a2:	f000 f823 	bl	81012ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 81012a6:	bf00      	nop
 81012a8:	bd80      	pop	{r7, pc}
 81012aa:	bf00      	nop
 81012ac:	100002b8 	.word	0x100002b8
 81012b0:	40005800 	.word	0x40005800
 81012b4:	00707cbb 	.word	0x00707cbb

081012b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81012b8:	b480      	push	{r7}
 81012ba:	b083      	sub	sp, #12
 81012bc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81012be:	4b0a      	ldr	r3, [pc, #40]	@ (81012e8 <MX_GPIO_Init+0x30>)
 81012c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012c4:	4a08      	ldr	r2, [pc, #32]	@ (81012e8 <MX_GPIO_Init+0x30>)
 81012c6:	f043 0302 	orr.w	r3, r3, #2
 81012ca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81012ce:	4b06      	ldr	r3, [pc, #24]	@ (81012e8 <MX_GPIO_Init+0x30>)
 81012d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81012d4:	f003 0302 	and.w	r3, r3, #2
 81012d8:	607b      	str	r3, [r7, #4]
 81012da:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81012dc:	bf00      	nop
 81012de:	370c      	adds	r7, #12
 81012e0:	46bd      	mov	sp, r7
 81012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81012e6:	4770      	bx	lr
 81012e8:	58024400 	.word	0x58024400

081012ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81012ec:	b480      	push	{r7}
 81012ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 81012f0:	b672      	cpsid	i
}
 81012f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81012f4:	bf00      	nop
 81012f6:	e7fd      	b.n	81012f4 <Error_Handler+0x8>

081012f8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 81012f8:	b580      	push	{r7, lr}
 81012fa:	b082      	sub	sp, #8
 81012fc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 81012fe:	f000 fa1f 	bl	8101740 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8101302:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8101306:	2201      	movs	r2, #1
 8101308:	2148      	movs	r1, #72	@ 0x48
 810130a:	485b      	ldr	r0, [pc, #364]	@ (8101478 <SSD1306_Init+0x180>)
 810130c:	f001 fc34 	bl	8102b78 <HAL_I2C_IsDeviceReady>
 8101310:	4603      	mov	r3, r0
 8101312:	2b00      	cmp	r3, #0
 8101314:	d001      	beq.n	810131a <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8101316:	2300      	movs	r3, #0
 8101318:	e0a9      	b.n	810146e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 810131a:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 810131e:	607b      	str	r3, [r7, #4]
	while(p>0)
 8101320:	e002      	b.n	8101328 <SSD1306_Init+0x30>
		p--;
 8101322:	687b      	ldr	r3, [r7, #4]
 8101324:	3b01      	subs	r3, #1
 8101326:	607b      	str	r3, [r7, #4]
	while(p>0)
 8101328:	687b      	ldr	r3, [r7, #4]
 810132a:	2b00      	cmp	r3, #0
 810132c:	d1f9      	bne.n	8101322 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 810132e:	22ae      	movs	r2, #174	@ 0xae
 8101330:	2100      	movs	r1, #0
 8101332:	2048      	movs	r0, #72	@ 0x48
 8101334:	f000 fa80 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8101338:	2220      	movs	r2, #32
 810133a:	2100      	movs	r1, #0
 810133c:	2048      	movs	r0, #72	@ 0x48
 810133e:	f000 fa7b 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8101342:	2210      	movs	r2, #16
 8101344:	2100      	movs	r1, #0
 8101346:	2048      	movs	r0, #72	@ 0x48
 8101348:	f000 fa76 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 810134c:	22b0      	movs	r2, #176	@ 0xb0
 810134e:	2100      	movs	r1, #0
 8101350:	2048      	movs	r0, #72	@ 0x48
 8101352:	f000 fa71 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8101356:	22c8      	movs	r2, #200	@ 0xc8
 8101358:	2100      	movs	r1, #0
 810135a:	2048      	movs	r0, #72	@ 0x48
 810135c:	f000 fa6c 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8101360:	2200      	movs	r2, #0
 8101362:	2100      	movs	r1, #0
 8101364:	2048      	movs	r0, #72	@ 0x48
 8101366:	f000 fa67 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 810136a:	2210      	movs	r2, #16
 810136c:	2100      	movs	r1, #0
 810136e:	2048      	movs	r0, #72	@ 0x48
 8101370:	f000 fa62 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8101374:	2240      	movs	r2, #64	@ 0x40
 8101376:	2100      	movs	r1, #0
 8101378:	2048      	movs	r0, #72	@ 0x48
 810137a:	f000 fa5d 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 810137e:	2281      	movs	r2, #129	@ 0x81
 8101380:	2100      	movs	r1, #0
 8101382:	2048      	movs	r0, #72	@ 0x48
 8101384:	f000 fa58 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8101388:	22ff      	movs	r2, #255	@ 0xff
 810138a:	2100      	movs	r1, #0
 810138c:	2048      	movs	r0, #72	@ 0x48
 810138e:	f000 fa53 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8101392:	22a1      	movs	r2, #161	@ 0xa1
 8101394:	2100      	movs	r1, #0
 8101396:	2048      	movs	r0, #72	@ 0x48
 8101398:	f000 fa4e 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 810139c:	22a6      	movs	r2, #166	@ 0xa6
 810139e:	2100      	movs	r1, #0
 81013a0:	2048      	movs	r0, #72	@ 0x48
 81013a2:	f000 fa49 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 81013a6:	22a8      	movs	r2, #168	@ 0xa8
 81013a8:	2100      	movs	r1, #0
 81013aa:	2048      	movs	r0, #72	@ 0x48
 81013ac:	f000 fa44 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 81013b0:	223f      	movs	r2, #63	@ 0x3f
 81013b2:	2100      	movs	r1, #0
 81013b4:	2048      	movs	r0, #72	@ 0x48
 81013b6:	f000 fa3f 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 81013ba:	22a4      	movs	r2, #164	@ 0xa4
 81013bc:	2100      	movs	r1, #0
 81013be:	2048      	movs	r0, #72	@ 0x48
 81013c0:	f000 fa3a 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 81013c4:	22d3      	movs	r2, #211	@ 0xd3
 81013c6:	2100      	movs	r1, #0
 81013c8:	2048      	movs	r0, #72	@ 0x48
 81013ca:	f000 fa35 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 81013ce:	2200      	movs	r2, #0
 81013d0:	2100      	movs	r1, #0
 81013d2:	2048      	movs	r0, #72	@ 0x48
 81013d4:	f000 fa30 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 81013d8:	22d5      	movs	r2, #213	@ 0xd5
 81013da:	2100      	movs	r1, #0
 81013dc:	2048      	movs	r0, #72	@ 0x48
 81013de:	f000 fa2b 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 81013e2:	22f0      	movs	r2, #240	@ 0xf0
 81013e4:	2100      	movs	r1, #0
 81013e6:	2048      	movs	r0, #72	@ 0x48
 81013e8:	f000 fa26 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 81013ec:	22d9      	movs	r2, #217	@ 0xd9
 81013ee:	2100      	movs	r1, #0
 81013f0:	2048      	movs	r0, #72	@ 0x48
 81013f2:	f000 fa21 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 81013f6:	2222      	movs	r2, #34	@ 0x22
 81013f8:	2100      	movs	r1, #0
 81013fa:	2048      	movs	r0, #72	@ 0x48
 81013fc:	f000 fa1c 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8101400:	22da      	movs	r2, #218	@ 0xda
 8101402:	2100      	movs	r1, #0
 8101404:	2048      	movs	r0, #72	@ 0x48
 8101406:	f000 fa17 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 810140a:	2212      	movs	r2, #18
 810140c:	2100      	movs	r1, #0
 810140e:	2048      	movs	r0, #72	@ 0x48
 8101410:	f000 fa12 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8101414:	22db      	movs	r2, #219	@ 0xdb
 8101416:	2100      	movs	r1, #0
 8101418:	2048      	movs	r0, #72	@ 0x48
 810141a:	f000 fa0d 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 810141e:	2220      	movs	r2, #32
 8101420:	2100      	movs	r1, #0
 8101422:	2048      	movs	r0, #72	@ 0x48
 8101424:	f000 fa08 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8101428:	228d      	movs	r2, #141	@ 0x8d
 810142a:	2100      	movs	r1, #0
 810142c:	2048      	movs	r0, #72	@ 0x48
 810142e:	f000 fa03 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8101432:	2214      	movs	r2, #20
 8101434:	2100      	movs	r1, #0
 8101436:	2048      	movs	r0, #72	@ 0x48
 8101438:	f000 f9fe 	bl	8101838 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 810143c:	22af      	movs	r2, #175	@ 0xaf
 810143e:	2100      	movs	r1, #0
 8101440:	2048      	movs	r0, #72	@ 0x48
 8101442:	f000 f9f9 	bl	8101838 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8101446:	222e      	movs	r2, #46	@ 0x2e
 8101448:	2100      	movs	r1, #0
 810144a:	2048      	movs	r0, #72	@ 0x48
 810144c:	f000 f9f4 	bl	8101838 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8101450:	2000      	movs	r0, #0
 8101452:	f000 f843 	bl	81014dc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8101456:	f000 f813 	bl	8101480 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 810145a:	4b08      	ldr	r3, [pc, #32]	@ (810147c <SSD1306_Init+0x184>)
 810145c:	2200      	movs	r2, #0
 810145e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8101460:	4b06      	ldr	r3, [pc, #24]	@ (810147c <SSD1306_Init+0x184>)
 8101462:	2200      	movs	r2, #0
 8101464:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8101466:	4b05      	ldr	r3, [pc, #20]	@ (810147c <SSD1306_Init+0x184>)
 8101468:	2201      	movs	r2, #1
 810146a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 810146c:	2301      	movs	r3, #1
}
 810146e:	4618      	mov	r0, r3
 8101470:	3708      	adds	r7, #8
 8101472:	46bd      	mov	sp, r7
 8101474:	bd80      	pop	{r7, pc}
 8101476:	bf00      	nop
 8101478:	10000264 	.word	0x10000264
 810147c:	1000070c 	.word	0x1000070c

08101480 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8101480:	b580      	push	{r7, lr}
 8101482:	b082      	sub	sp, #8
 8101484:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8101486:	2300      	movs	r3, #0
 8101488:	71fb      	strb	r3, [r7, #7]
 810148a:	e01d      	b.n	81014c8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 810148c:	79fb      	ldrb	r3, [r7, #7]
 810148e:	3b50      	subs	r3, #80	@ 0x50
 8101490:	b2db      	uxtb	r3, r3
 8101492:	461a      	mov	r2, r3
 8101494:	2100      	movs	r1, #0
 8101496:	2048      	movs	r0, #72	@ 0x48
 8101498:	f000 f9ce 	bl	8101838 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 810149c:	2200      	movs	r2, #0
 810149e:	2100      	movs	r1, #0
 81014a0:	2048      	movs	r0, #72	@ 0x48
 81014a2:	f000 f9c9 	bl	8101838 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 81014a6:	2210      	movs	r2, #16
 81014a8:	2100      	movs	r1, #0
 81014aa:	2048      	movs	r0, #72	@ 0x48
 81014ac:	f000 f9c4 	bl	8101838 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 81014b0:	79fb      	ldrb	r3, [r7, #7]
 81014b2:	01db      	lsls	r3, r3, #7
 81014b4:	4a08      	ldr	r2, [pc, #32]	@ (81014d8 <SSD1306_UpdateScreen+0x58>)
 81014b6:	441a      	add	r2, r3
 81014b8:	2380      	movs	r3, #128	@ 0x80
 81014ba:	2140      	movs	r1, #64	@ 0x40
 81014bc:	2048      	movs	r0, #72	@ 0x48
 81014be:	f000 f955 	bl	810176c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 81014c2:	79fb      	ldrb	r3, [r7, #7]
 81014c4:	3301      	adds	r3, #1
 81014c6:	71fb      	strb	r3, [r7, #7]
 81014c8:	79fb      	ldrb	r3, [r7, #7]
 81014ca:	2b07      	cmp	r3, #7
 81014cc:	d9de      	bls.n	810148c <SSD1306_UpdateScreen+0xc>
	}
}
 81014ce:	bf00      	nop
 81014d0:	bf00      	nop
 81014d2:	3708      	adds	r7, #8
 81014d4:	46bd      	mov	sp, r7
 81014d6:	bd80      	pop	{r7, pc}
 81014d8:	1000030c 	.word	0x1000030c

081014dc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 81014dc:	b580      	push	{r7, lr}
 81014de:	b082      	sub	sp, #8
 81014e0:	af00      	add	r7, sp, #0
 81014e2:	4603      	mov	r3, r0
 81014e4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 81014e6:	79fb      	ldrb	r3, [r7, #7]
 81014e8:	2b00      	cmp	r3, #0
 81014ea:	d101      	bne.n	81014f0 <SSD1306_Fill+0x14>
 81014ec:	2300      	movs	r3, #0
 81014ee:	e000      	b.n	81014f2 <SSD1306_Fill+0x16>
 81014f0:	23ff      	movs	r3, #255	@ 0xff
 81014f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81014f6:	4619      	mov	r1, r3
 81014f8:	4803      	ldr	r0, [pc, #12]	@ (8101508 <SSD1306_Fill+0x2c>)
 81014fa:	f005 fc37 	bl	8106d6c <memset>
}
 81014fe:	bf00      	nop
 8101500:	3708      	adds	r7, #8
 8101502:	46bd      	mov	sp, r7
 8101504:	bd80      	pop	{r7, pc}
 8101506:	bf00      	nop
 8101508:	1000030c 	.word	0x1000030c

0810150c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 810150c:	b480      	push	{r7}
 810150e:	b083      	sub	sp, #12
 8101510:	af00      	add	r7, sp, #0
 8101512:	4603      	mov	r3, r0
 8101514:	80fb      	strh	r3, [r7, #6]
 8101516:	460b      	mov	r3, r1
 8101518:	80bb      	strh	r3, [r7, #4]
 810151a:	4613      	mov	r3, r2
 810151c:	70fb      	strb	r3, [r7, #3]
	if (
 810151e:	88fb      	ldrh	r3, [r7, #6]
 8101520:	2b7f      	cmp	r3, #127	@ 0x7f
 8101522:	d848      	bhi.n	81015b6 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8101524:	88bb      	ldrh	r3, [r7, #4]
 8101526:	2b3f      	cmp	r3, #63	@ 0x3f
 8101528:	d845      	bhi.n	81015b6 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 810152a:	4b26      	ldr	r3, [pc, #152]	@ (81015c4 <SSD1306_DrawPixel+0xb8>)
 810152c:	791b      	ldrb	r3, [r3, #4]
 810152e:	2b00      	cmp	r3, #0
 8101530:	d006      	beq.n	8101540 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8101532:	78fb      	ldrb	r3, [r7, #3]
 8101534:	2b00      	cmp	r3, #0
 8101536:	bf0c      	ite	eq
 8101538:	2301      	moveq	r3, #1
 810153a:	2300      	movne	r3, #0
 810153c:	b2db      	uxtb	r3, r3
 810153e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8101540:	78fb      	ldrb	r3, [r7, #3]
 8101542:	2b01      	cmp	r3, #1
 8101544:	d11a      	bne.n	810157c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8101546:	88fa      	ldrh	r2, [r7, #6]
 8101548:	88bb      	ldrh	r3, [r7, #4]
 810154a:	08db      	lsrs	r3, r3, #3
 810154c:	b298      	uxth	r0, r3
 810154e:	4603      	mov	r3, r0
 8101550:	01db      	lsls	r3, r3, #7
 8101552:	4413      	add	r3, r2
 8101554:	4a1c      	ldr	r2, [pc, #112]	@ (81015c8 <SSD1306_DrawPixel+0xbc>)
 8101556:	5cd3      	ldrb	r3, [r2, r3]
 8101558:	b25a      	sxtb	r2, r3
 810155a:	88bb      	ldrh	r3, [r7, #4]
 810155c:	f003 0307 	and.w	r3, r3, #7
 8101560:	2101      	movs	r1, #1
 8101562:	fa01 f303 	lsl.w	r3, r1, r3
 8101566:	b25b      	sxtb	r3, r3
 8101568:	4313      	orrs	r3, r2
 810156a:	b259      	sxtb	r1, r3
 810156c:	88fa      	ldrh	r2, [r7, #6]
 810156e:	4603      	mov	r3, r0
 8101570:	01db      	lsls	r3, r3, #7
 8101572:	4413      	add	r3, r2
 8101574:	b2c9      	uxtb	r1, r1
 8101576:	4a14      	ldr	r2, [pc, #80]	@ (81015c8 <SSD1306_DrawPixel+0xbc>)
 8101578:	54d1      	strb	r1, [r2, r3]
 810157a:	e01d      	b.n	81015b8 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 810157c:	88fa      	ldrh	r2, [r7, #6]
 810157e:	88bb      	ldrh	r3, [r7, #4]
 8101580:	08db      	lsrs	r3, r3, #3
 8101582:	b298      	uxth	r0, r3
 8101584:	4603      	mov	r3, r0
 8101586:	01db      	lsls	r3, r3, #7
 8101588:	4413      	add	r3, r2
 810158a:	4a0f      	ldr	r2, [pc, #60]	@ (81015c8 <SSD1306_DrawPixel+0xbc>)
 810158c:	5cd3      	ldrb	r3, [r2, r3]
 810158e:	b25a      	sxtb	r2, r3
 8101590:	88bb      	ldrh	r3, [r7, #4]
 8101592:	f003 0307 	and.w	r3, r3, #7
 8101596:	2101      	movs	r1, #1
 8101598:	fa01 f303 	lsl.w	r3, r1, r3
 810159c:	b25b      	sxtb	r3, r3
 810159e:	43db      	mvns	r3, r3
 81015a0:	b25b      	sxtb	r3, r3
 81015a2:	4013      	ands	r3, r2
 81015a4:	b259      	sxtb	r1, r3
 81015a6:	88fa      	ldrh	r2, [r7, #6]
 81015a8:	4603      	mov	r3, r0
 81015aa:	01db      	lsls	r3, r3, #7
 81015ac:	4413      	add	r3, r2
 81015ae:	b2c9      	uxtb	r1, r1
 81015b0:	4a05      	ldr	r2, [pc, #20]	@ (81015c8 <SSD1306_DrawPixel+0xbc>)
 81015b2:	54d1      	strb	r1, [r2, r3]
 81015b4:	e000      	b.n	81015b8 <SSD1306_DrawPixel+0xac>
		return;
 81015b6:	bf00      	nop
	}
}
 81015b8:	370c      	adds	r7, #12
 81015ba:	46bd      	mov	sp, r7
 81015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015c0:	4770      	bx	lr
 81015c2:	bf00      	nop
 81015c4:	1000070c 	.word	0x1000070c
 81015c8:	1000030c 	.word	0x1000030c

081015cc <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 81015cc:	b480      	push	{r7}
 81015ce:	b083      	sub	sp, #12
 81015d0:	af00      	add	r7, sp, #0
 81015d2:	4603      	mov	r3, r0
 81015d4:	460a      	mov	r2, r1
 81015d6:	80fb      	strh	r3, [r7, #6]
 81015d8:	4613      	mov	r3, r2
 81015da:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 81015dc:	4a05      	ldr	r2, [pc, #20]	@ (81015f4 <SSD1306_GotoXY+0x28>)
 81015de:	88fb      	ldrh	r3, [r7, #6]
 81015e0:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 81015e2:	4a04      	ldr	r2, [pc, #16]	@ (81015f4 <SSD1306_GotoXY+0x28>)
 81015e4:	88bb      	ldrh	r3, [r7, #4]
 81015e6:	8053      	strh	r3, [r2, #2]
}
 81015e8:	bf00      	nop
 81015ea:	370c      	adds	r7, #12
 81015ec:	46bd      	mov	sp, r7
 81015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015f2:	4770      	bx	lr
 81015f4:	1000070c 	.word	0x1000070c

081015f8 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 81015f8:	b580      	push	{r7, lr}
 81015fa:	b086      	sub	sp, #24
 81015fc:	af00      	add	r7, sp, #0
 81015fe:	4603      	mov	r3, r0
 8101600:	6039      	str	r1, [r7, #0]
 8101602:	71fb      	strb	r3, [r7, #7]
 8101604:	4613      	mov	r3, r2
 8101606:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8101608:	4b39      	ldr	r3, [pc, #228]	@ (81016f0 <SSD1306_Putc+0xf8>)
 810160a:	881b      	ldrh	r3, [r3, #0]
 810160c:	461a      	mov	r2, r3
 810160e:	683b      	ldr	r3, [r7, #0]
 8101610:	781b      	ldrb	r3, [r3, #0]
 8101612:	4413      	add	r3, r2
	if (
 8101614:	2b7f      	cmp	r3, #127	@ 0x7f
 8101616:	dc07      	bgt.n	8101628 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8101618:	4b35      	ldr	r3, [pc, #212]	@ (81016f0 <SSD1306_Putc+0xf8>)
 810161a:	885b      	ldrh	r3, [r3, #2]
 810161c:	461a      	mov	r2, r3
 810161e:	683b      	ldr	r3, [r7, #0]
 8101620:	785b      	ldrb	r3, [r3, #1]
 8101622:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8101624:	2b3f      	cmp	r3, #63	@ 0x3f
 8101626:	dd01      	ble.n	810162c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8101628:	2300      	movs	r3, #0
 810162a:	e05d      	b.n	81016e8 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 810162c:	2300      	movs	r3, #0
 810162e:	617b      	str	r3, [r7, #20]
 8101630:	e04b      	b.n	81016ca <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8101632:	683b      	ldr	r3, [r7, #0]
 8101634:	685a      	ldr	r2, [r3, #4]
 8101636:	79fb      	ldrb	r3, [r7, #7]
 8101638:	3b20      	subs	r3, #32
 810163a:	6839      	ldr	r1, [r7, #0]
 810163c:	7849      	ldrb	r1, [r1, #1]
 810163e:	fb01 f303 	mul.w	r3, r1, r3
 8101642:	4619      	mov	r1, r3
 8101644:	697b      	ldr	r3, [r7, #20]
 8101646:	440b      	add	r3, r1
 8101648:	005b      	lsls	r3, r3, #1
 810164a:	4413      	add	r3, r2
 810164c:	881b      	ldrh	r3, [r3, #0]
 810164e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8101650:	2300      	movs	r3, #0
 8101652:	613b      	str	r3, [r7, #16]
 8101654:	e030      	b.n	81016b8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8101656:	68fa      	ldr	r2, [r7, #12]
 8101658:	693b      	ldr	r3, [r7, #16]
 810165a:	fa02 f303 	lsl.w	r3, r2, r3
 810165e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8101662:	2b00      	cmp	r3, #0
 8101664:	d010      	beq.n	8101688 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8101666:	4b22      	ldr	r3, [pc, #136]	@ (81016f0 <SSD1306_Putc+0xf8>)
 8101668:	881a      	ldrh	r2, [r3, #0]
 810166a:	693b      	ldr	r3, [r7, #16]
 810166c:	b29b      	uxth	r3, r3
 810166e:	4413      	add	r3, r2
 8101670:	b298      	uxth	r0, r3
 8101672:	4b1f      	ldr	r3, [pc, #124]	@ (81016f0 <SSD1306_Putc+0xf8>)
 8101674:	885a      	ldrh	r2, [r3, #2]
 8101676:	697b      	ldr	r3, [r7, #20]
 8101678:	b29b      	uxth	r3, r3
 810167a:	4413      	add	r3, r2
 810167c:	b29b      	uxth	r3, r3
 810167e:	79ba      	ldrb	r2, [r7, #6]
 8101680:	4619      	mov	r1, r3
 8101682:	f7ff ff43 	bl	810150c <SSD1306_DrawPixel>
 8101686:	e014      	b.n	81016b2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8101688:	4b19      	ldr	r3, [pc, #100]	@ (81016f0 <SSD1306_Putc+0xf8>)
 810168a:	881a      	ldrh	r2, [r3, #0]
 810168c:	693b      	ldr	r3, [r7, #16]
 810168e:	b29b      	uxth	r3, r3
 8101690:	4413      	add	r3, r2
 8101692:	b298      	uxth	r0, r3
 8101694:	4b16      	ldr	r3, [pc, #88]	@ (81016f0 <SSD1306_Putc+0xf8>)
 8101696:	885a      	ldrh	r2, [r3, #2]
 8101698:	697b      	ldr	r3, [r7, #20]
 810169a:	b29b      	uxth	r3, r3
 810169c:	4413      	add	r3, r2
 810169e:	b299      	uxth	r1, r3
 81016a0:	79bb      	ldrb	r3, [r7, #6]
 81016a2:	2b00      	cmp	r3, #0
 81016a4:	bf0c      	ite	eq
 81016a6:	2301      	moveq	r3, #1
 81016a8:	2300      	movne	r3, #0
 81016aa:	b2db      	uxtb	r3, r3
 81016ac:	461a      	mov	r2, r3
 81016ae:	f7ff ff2d 	bl	810150c <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 81016b2:	693b      	ldr	r3, [r7, #16]
 81016b4:	3301      	adds	r3, #1
 81016b6:	613b      	str	r3, [r7, #16]
 81016b8:	683b      	ldr	r3, [r7, #0]
 81016ba:	781b      	ldrb	r3, [r3, #0]
 81016bc:	461a      	mov	r2, r3
 81016be:	693b      	ldr	r3, [r7, #16]
 81016c0:	4293      	cmp	r3, r2
 81016c2:	d3c8      	bcc.n	8101656 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 81016c4:	697b      	ldr	r3, [r7, #20]
 81016c6:	3301      	adds	r3, #1
 81016c8:	617b      	str	r3, [r7, #20]
 81016ca:	683b      	ldr	r3, [r7, #0]
 81016cc:	785b      	ldrb	r3, [r3, #1]
 81016ce:	461a      	mov	r2, r3
 81016d0:	697b      	ldr	r3, [r7, #20]
 81016d2:	4293      	cmp	r3, r2
 81016d4:	d3ad      	bcc.n	8101632 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 81016d6:	4b06      	ldr	r3, [pc, #24]	@ (81016f0 <SSD1306_Putc+0xf8>)
 81016d8:	881b      	ldrh	r3, [r3, #0]
 81016da:	683a      	ldr	r2, [r7, #0]
 81016dc:	7812      	ldrb	r2, [r2, #0]
 81016de:	4413      	add	r3, r2
 81016e0:	b29a      	uxth	r2, r3
 81016e2:	4b03      	ldr	r3, [pc, #12]	@ (81016f0 <SSD1306_Putc+0xf8>)
 81016e4:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 81016e6:	79fb      	ldrb	r3, [r7, #7]
}
 81016e8:	4618      	mov	r0, r3
 81016ea:	3718      	adds	r7, #24
 81016ec:	46bd      	mov	sp, r7
 81016ee:	bd80      	pop	{r7, pc}
 81016f0:	1000070c 	.word	0x1000070c

081016f4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 81016f4:	b580      	push	{r7, lr}
 81016f6:	b084      	sub	sp, #16
 81016f8:	af00      	add	r7, sp, #0
 81016fa:	60f8      	str	r0, [r7, #12]
 81016fc:	60b9      	str	r1, [r7, #8]
 81016fe:	4613      	mov	r3, r2
 8101700:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8101702:	e012      	b.n	810172a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8101704:	68fb      	ldr	r3, [r7, #12]
 8101706:	781b      	ldrb	r3, [r3, #0]
 8101708:	79fa      	ldrb	r2, [r7, #7]
 810170a:	68b9      	ldr	r1, [r7, #8]
 810170c:	4618      	mov	r0, r3
 810170e:	f7ff ff73 	bl	81015f8 <SSD1306_Putc>
 8101712:	4603      	mov	r3, r0
 8101714:	461a      	mov	r2, r3
 8101716:	68fb      	ldr	r3, [r7, #12]
 8101718:	781b      	ldrb	r3, [r3, #0]
 810171a:	429a      	cmp	r2, r3
 810171c:	d002      	beq.n	8101724 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 810171e:	68fb      	ldr	r3, [r7, #12]
 8101720:	781b      	ldrb	r3, [r3, #0]
 8101722:	e008      	b.n	8101736 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8101724:	68fb      	ldr	r3, [r7, #12]
 8101726:	3301      	adds	r3, #1
 8101728:	60fb      	str	r3, [r7, #12]
	while (*str) {
 810172a:	68fb      	ldr	r3, [r7, #12]
 810172c:	781b      	ldrb	r3, [r3, #0]
 810172e:	2b00      	cmp	r3, #0
 8101730:	d1e8      	bne.n	8101704 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8101732:	68fb      	ldr	r3, [r7, #12]
 8101734:	781b      	ldrb	r3, [r3, #0]
}
 8101736:	4618      	mov	r0, r3
 8101738:	3710      	adds	r7, #16
 810173a:	46bd      	mov	sp, r7
 810173c:	bd80      	pop	{r7, pc}
	...

08101740 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8101740:	b480      	push	{r7}
 8101742:	b083      	sub	sp, #12
 8101744:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8101746:	4b08      	ldr	r3, [pc, #32]	@ (8101768 <ssd1306_I2C_Init+0x28>)
 8101748:	607b      	str	r3, [r7, #4]
	while(p>0)
 810174a:	e002      	b.n	8101752 <ssd1306_I2C_Init+0x12>
		p--;
 810174c:	687b      	ldr	r3, [r7, #4]
 810174e:	3b01      	subs	r3, #1
 8101750:	607b      	str	r3, [r7, #4]
	while(p>0)
 8101752:	687b      	ldr	r3, [r7, #4]
 8101754:	2b00      	cmp	r3, #0
 8101756:	d1f9      	bne.n	810174c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8101758:	bf00      	nop
 810175a:	bf00      	nop
 810175c:	370c      	adds	r7, #12
 810175e:	46bd      	mov	sp, r7
 8101760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101764:	4770      	bx	lr
 8101766:	bf00      	nop
 8101768:	0003d090 	.word	0x0003d090

0810176c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 810176c:	b590      	push	{r4, r7, lr}
 810176e:	b0c7      	sub	sp, #284	@ 0x11c
 8101770:	af02      	add	r7, sp, #8
 8101772:	4604      	mov	r4, r0
 8101774:	4608      	mov	r0, r1
 8101776:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 810177a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 810177e:	600a      	str	r2, [r1, #0]
 8101780:	4619      	mov	r1, r3
 8101782:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101786:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 810178a:	4622      	mov	r2, r4
 810178c:	701a      	strb	r2, [r3, #0]
 810178e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101792:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8101796:	4602      	mov	r2, r0
 8101798:	701a      	strb	r2, [r3, #0]
 810179a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 810179e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 81017a2:	460a      	mov	r2, r1
 81017a4:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 81017a6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 81017aa:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 81017ae:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 81017b2:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 81017b6:	7812      	ldrb	r2, [r2, #0]
 81017b8:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 81017ba:	2300      	movs	r3, #0
 81017bc:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 81017c0:	e015      	b.n	81017ee <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 81017c2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 81017c6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 81017ca:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 81017ce:	6812      	ldr	r2, [r2, #0]
 81017d0:	441a      	add	r2, r3
 81017d2:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 81017d6:	3301      	adds	r3, #1
 81017d8:	7811      	ldrb	r1, [r2, #0]
 81017da:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 81017de:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 81017e2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 81017e4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 81017e8:	3301      	adds	r3, #1
 81017ea:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 81017ee:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 81017f2:	b29b      	uxth	r3, r3
 81017f4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 81017f8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 81017fc:	8812      	ldrh	r2, [r2, #0]
 81017fe:	429a      	cmp	r2, r3
 8101800:	d8df      	bhi.n	81017c2 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8101802:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101806:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 810180a:	781b      	ldrb	r3, [r3, #0]
 810180c:	b299      	uxth	r1, r3
 810180e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8101812:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8101816:	881b      	ldrh	r3, [r3, #0]
 8101818:	3301      	adds	r3, #1
 810181a:	b29b      	uxth	r3, r3
 810181c:	f107 020c 	add.w	r2, r7, #12
 8101820:	200a      	movs	r0, #10
 8101822:	9000      	str	r0, [sp, #0]
 8101824:	4803      	ldr	r0, [pc, #12]	@ (8101834 <ssd1306_I2C_WriteMulti+0xc8>)
 8101826:	f000 fe61 	bl	81024ec <HAL_I2C_Master_Transmit>
}
 810182a:	bf00      	nop
 810182c:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8101830:	46bd      	mov	sp, r7
 8101832:	bd90      	pop	{r4, r7, pc}
 8101834:	10000264 	.word	0x10000264

08101838 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8101838:	b580      	push	{r7, lr}
 810183a:	b086      	sub	sp, #24
 810183c:	af02      	add	r7, sp, #8
 810183e:	4603      	mov	r3, r0
 8101840:	71fb      	strb	r3, [r7, #7]
 8101842:	460b      	mov	r3, r1
 8101844:	71bb      	strb	r3, [r7, #6]
 8101846:	4613      	mov	r3, r2
 8101848:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 810184a:	79bb      	ldrb	r3, [r7, #6]
 810184c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 810184e:	797b      	ldrb	r3, [r7, #5]
 8101850:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8101852:	79fb      	ldrb	r3, [r7, #7]
 8101854:	b299      	uxth	r1, r3
 8101856:	f107 020c 	add.w	r2, r7, #12
 810185a:	230a      	movs	r3, #10
 810185c:	9300      	str	r3, [sp, #0]
 810185e:	2302      	movs	r3, #2
 8101860:	4803      	ldr	r0, [pc, #12]	@ (8101870 <ssd1306_I2C_Write+0x38>)
 8101862:	f000 fe43 	bl	81024ec <HAL_I2C_Master_Transmit>
}
 8101866:	bf00      	nop
 8101868:	3710      	adds	r7, #16
 810186a:	46bd      	mov	sp, r7
 810186c:	bd80      	pop	{r7, pc}
 810186e:	bf00      	nop
 8101870:	10000264 	.word	0x10000264

08101874 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101874:	b480      	push	{r7}
 8101876:	b083      	sub	sp, #12
 8101878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810187a:	4b0a      	ldr	r3, [pc, #40]	@ (81018a4 <HAL_MspInit+0x30>)
 810187c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101880:	4a08      	ldr	r2, [pc, #32]	@ (81018a4 <HAL_MspInit+0x30>)
 8101882:	f043 0302 	orr.w	r3, r3, #2
 8101886:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 810188a:	4b06      	ldr	r3, [pc, #24]	@ (81018a4 <HAL_MspInit+0x30>)
 810188c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8101890:	f003 0302 	and.w	r3, r3, #2
 8101894:	607b      	str	r3, [r7, #4]
 8101896:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8101898:	bf00      	nop
 810189a:	370c      	adds	r7, #12
 810189c:	46bd      	mov	sp, r7
 810189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018a2:	4770      	bx	lr
 81018a4:	58024400 	.word	0x58024400

081018a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 81018a8:	b580      	push	{r7, lr}
 81018aa:	b0bc      	sub	sp, #240	@ 0xf0
 81018ac:	af00      	add	r7, sp, #0
 81018ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81018b0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81018b4:	2200      	movs	r2, #0
 81018b6:	601a      	str	r2, [r3, #0]
 81018b8:	605a      	str	r2, [r3, #4]
 81018ba:	609a      	str	r2, [r3, #8]
 81018bc:	60da      	str	r2, [r3, #12]
 81018be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81018c0:	f107 0318 	add.w	r3, r7, #24
 81018c4:	22c0      	movs	r2, #192	@ 0xc0
 81018c6:	2100      	movs	r1, #0
 81018c8:	4618      	mov	r0, r3
 81018ca:	f005 fa4f 	bl	8106d6c <memset>
  if(hi2c->Instance==I2C1)
 81018ce:	687b      	ldr	r3, [r7, #4]
 81018d0:	681b      	ldr	r3, [r3, #0]
 81018d2:	4a4d      	ldr	r2, [pc, #308]	@ (8101a08 <HAL_I2C_MspInit+0x160>)
 81018d4:	4293      	cmp	r3, r2
 81018d6:	d146      	bne.n	8101966 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81018d8:	f04f 0208 	mov.w	r2, #8
 81018dc:	f04f 0300 	mov.w	r3, #0
 81018e0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81018e4:	2300      	movs	r3, #0
 81018e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81018ea:	f107 0318 	add.w	r3, r7, #24
 81018ee:	4618      	mov	r0, r3
 81018f0:	f001 ff8a 	bl	8103808 <HAL_RCCEx_PeriphCLKConfig>
 81018f4:	4603      	mov	r3, r0
 81018f6:	2b00      	cmp	r3, #0
 81018f8:	d001      	beq.n	81018fe <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 81018fa:	f7ff fcf7 	bl	81012ec <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81018fe:	4b43      	ldr	r3, [pc, #268]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 8101900:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101904:	4a41      	ldr	r2, [pc, #260]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 8101906:	f043 0302 	orr.w	r3, r3, #2
 810190a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810190e:	4b3f      	ldr	r3, [pc, #252]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 8101910:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101914:	f003 0302 	and.w	r3, r3, #2
 8101918:	617b      	str	r3, [r7, #20]
 810191a:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 810191c:	23c0      	movs	r3, #192	@ 0xc0
 810191e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101922:	2312      	movs	r3, #18
 8101924:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101928:	2300      	movs	r3, #0
 810192a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810192e:	2300      	movs	r3, #0
 8101930:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101934:	2304      	movs	r3, #4
 8101936:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 810193a:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810193e:	4619      	mov	r1, r3
 8101940:	4833      	ldr	r0, [pc, #204]	@ (8101a10 <HAL_I2C_MspInit+0x168>)
 8101942:	f000 fb75 	bl	8102030 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101946:	4b31      	ldr	r3, [pc, #196]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 8101948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810194c:	4a2f      	ldr	r2, [pc, #188]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 810194e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8101952:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101956:	4b2d      	ldr	r3, [pc, #180]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 8101958:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810195c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101960:	613b      	str	r3, [r7, #16]
 8101962:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8101964:	e04b      	b.n	81019fe <HAL_I2C_MspInit+0x156>
  else if(hi2c->Instance==I2C2)
 8101966:	687b      	ldr	r3, [r7, #4]
 8101968:	681b      	ldr	r3, [r3, #0]
 810196a:	4a2a      	ldr	r2, [pc, #168]	@ (8101a14 <HAL_I2C_MspInit+0x16c>)
 810196c:	4293      	cmp	r3, r2
 810196e:	d146      	bne.n	81019fe <HAL_I2C_MspInit+0x156>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8101970:	f04f 0208 	mov.w	r2, #8
 8101974:	f04f 0300 	mov.w	r3, #0
 8101978:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 810197c:	2300      	movs	r3, #0
 810197e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101982:	f107 0318 	add.w	r3, r7, #24
 8101986:	4618      	mov	r0, r3
 8101988:	f001 ff3e 	bl	8103808 <HAL_RCCEx_PeriphCLKConfig>
 810198c:	4603      	mov	r3, r0
 810198e:	2b00      	cmp	r3, #0
 8101990:	d001      	beq.n	8101996 <HAL_I2C_MspInit+0xee>
      Error_Handler();
 8101992:	f7ff fcab 	bl	81012ec <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8101996:	4b1d      	ldr	r3, [pc, #116]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 8101998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810199c:	4a1b      	ldr	r2, [pc, #108]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 810199e:	f043 0302 	orr.w	r3, r3, #2
 81019a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81019a6:	4b19      	ldr	r3, [pc, #100]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 81019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81019ac:	f003 0302 	and.w	r3, r3, #2
 81019b0:	60fb      	str	r3, [r7, #12]
 81019b2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 81019b4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 81019b8:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81019bc:	2312      	movs	r3, #18
 81019be:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81019c2:	2300      	movs	r3, #0
 81019c4:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81019c8:	2300      	movs	r3, #0
 81019ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 81019ce:	2304      	movs	r3, #4
 81019d0:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81019d4:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81019d8:	4619      	mov	r1, r3
 81019da:	480d      	ldr	r0, [pc, #52]	@ (8101a10 <HAL_I2C_MspInit+0x168>)
 81019dc:	f000 fb28 	bl	8102030 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 81019e0:	4b0a      	ldr	r3, [pc, #40]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 81019e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81019e6:	4a09      	ldr	r2, [pc, #36]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 81019e8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81019ec:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81019f0:	4b06      	ldr	r3, [pc, #24]	@ (8101a0c <HAL_I2C_MspInit+0x164>)
 81019f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81019f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 81019fa:	60bb      	str	r3, [r7, #8]
 81019fc:	68bb      	ldr	r3, [r7, #8]
}
 81019fe:	bf00      	nop
 8101a00:	37f0      	adds	r7, #240	@ 0xf0
 8101a02:	46bd      	mov	sp, r7
 8101a04:	bd80      	pop	{r7, pc}
 8101a06:	bf00      	nop
 8101a08:	40005400 	.word	0x40005400
 8101a0c:	58024400 	.word	0x58024400
 8101a10:	58020400 	.word	0x58020400
 8101a14:	40005800 	.word	0x40005800

08101a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101a18:	b480      	push	{r7}
 8101a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101a1c:	bf00      	nop
 8101a1e:	e7fd      	b.n	8101a1c <NMI_Handler+0x4>

08101a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101a20:	b480      	push	{r7}
 8101a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101a24:	bf00      	nop
 8101a26:	e7fd      	b.n	8101a24 <HardFault_Handler+0x4>

08101a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101a28:	b480      	push	{r7}
 8101a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101a2c:	bf00      	nop
 8101a2e:	e7fd      	b.n	8101a2c <MemManage_Handler+0x4>

08101a30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8101a30:	b480      	push	{r7}
 8101a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101a34:	bf00      	nop
 8101a36:	e7fd      	b.n	8101a34 <BusFault_Handler+0x4>

08101a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101a38:	b480      	push	{r7}
 8101a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101a3c:	bf00      	nop
 8101a3e:	e7fd      	b.n	8101a3c <UsageFault_Handler+0x4>

08101a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8101a40:	b480      	push	{r7}
 8101a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101a44:	bf00      	nop
 8101a46:	46bd      	mov	sp, r7
 8101a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a4c:	4770      	bx	lr

08101a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101a4e:	b480      	push	{r7}
 8101a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8101a52:	bf00      	nop
 8101a54:	46bd      	mov	sp, r7
 8101a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a5a:	4770      	bx	lr

08101a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101a5c:	b480      	push	{r7}
 8101a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8101a60:	bf00      	nop
 8101a62:	46bd      	mov	sp, r7
 8101a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a68:	4770      	bx	lr

08101a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101a6a:	b580      	push	{r7, lr}
 8101a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101a6e:	f000 f9a3 	bl	8101db8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101a72:	bf00      	nop
 8101a74:	bd80      	pop	{r7, pc}

08101a76 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101a76:	b480      	push	{r7}
 8101a78:	af00      	add	r7, sp, #0
  return 1;
 8101a7a:	2301      	movs	r3, #1
}
 8101a7c:	4618      	mov	r0, r3
 8101a7e:	46bd      	mov	sp, r7
 8101a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a84:	4770      	bx	lr

08101a86 <_kill>:

int _kill(int pid, int sig)
{
 8101a86:	b580      	push	{r7, lr}
 8101a88:	b082      	sub	sp, #8
 8101a8a:	af00      	add	r7, sp, #0
 8101a8c:	6078      	str	r0, [r7, #4]
 8101a8e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8101a90:	f005 f978 	bl	8106d84 <__errno>
 8101a94:	4603      	mov	r3, r0
 8101a96:	2216      	movs	r2, #22
 8101a98:	601a      	str	r2, [r3, #0]
  return -1;
 8101a9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8101a9e:	4618      	mov	r0, r3
 8101aa0:	3708      	adds	r7, #8
 8101aa2:	46bd      	mov	sp, r7
 8101aa4:	bd80      	pop	{r7, pc}

08101aa6 <_exit>:

void _exit (int status)
{
 8101aa6:	b580      	push	{r7, lr}
 8101aa8:	b082      	sub	sp, #8
 8101aaa:	af00      	add	r7, sp, #0
 8101aac:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8101aae:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8101ab2:	6878      	ldr	r0, [r7, #4]
 8101ab4:	f7ff ffe7 	bl	8101a86 <_kill>
  while (1) {}    /* Make sure we hang here */
 8101ab8:	bf00      	nop
 8101aba:	e7fd      	b.n	8101ab8 <_exit+0x12>

08101abc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8101abc:	b580      	push	{r7, lr}
 8101abe:	b086      	sub	sp, #24
 8101ac0:	af00      	add	r7, sp, #0
 8101ac2:	60f8      	str	r0, [r7, #12]
 8101ac4:	60b9      	str	r1, [r7, #8]
 8101ac6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ac8:	2300      	movs	r3, #0
 8101aca:	617b      	str	r3, [r7, #20]
 8101acc:	e00a      	b.n	8101ae4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101ace:	f3af 8000 	nop.w
 8101ad2:	4601      	mov	r1, r0
 8101ad4:	68bb      	ldr	r3, [r7, #8]
 8101ad6:	1c5a      	adds	r2, r3, #1
 8101ad8:	60ba      	str	r2, [r7, #8]
 8101ada:	b2ca      	uxtb	r2, r1
 8101adc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101ade:	697b      	ldr	r3, [r7, #20]
 8101ae0:	3301      	adds	r3, #1
 8101ae2:	617b      	str	r3, [r7, #20]
 8101ae4:	697a      	ldr	r2, [r7, #20]
 8101ae6:	687b      	ldr	r3, [r7, #4]
 8101ae8:	429a      	cmp	r2, r3
 8101aea:	dbf0      	blt.n	8101ace <_read+0x12>
  }

  return len;
 8101aec:	687b      	ldr	r3, [r7, #4]
}
 8101aee:	4618      	mov	r0, r3
 8101af0:	3718      	adds	r7, #24
 8101af2:	46bd      	mov	sp, r7
 8101af4:	bd80      	pop	{r7, pc}

08101af6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101af6:	b580      	push	{r7, lr}
 8101af8:	b086      	sub	sp, #24
 8101afa:	af00      	add	r7, sp, #0
 8101afc:	60f8      	str	r0, [r7, #12]
 8101afe:	60b9      	str	r1, [r7, #8]
 8101b00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b02:	2300      	movs	r3, #0
 8101b04:	617b      	str	r3, [r7, #20]
 8101b06:	e009      	b.n	8101b1c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101b08:	68bb      	ldr	r3, [r7, #8]
 8101b0a:	1c5a      	adds	r2, r3, #1
 8101b0c:	60ba      	str	r2, [r7, #8]
 8101b0e:	781b      	ldrb	r3, [r3, #0]
 8101b10:	4618      	mov	r0, r3
 8101b12:	f000 f8a1 	bl	8101c58 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101b16:	697b      	ldr	r3, [r7, #20]
 8101b18:	3301      	adds	r3, #1
 8101b1a:	617b      	str	r3, [r7, #20]
 8101b1c:	697a      	ldr	r2, [r7, #20]
 8101b1e:	687b      	ldr	r3, [r7, #4]
 8101b20:	429a      	cmp	r2, r3
 8101b22:	dbf1      	blt.n	8101b08 <_write+0x12>
  }
  return len;
 8101b24:	687b      	ldr	r3, [r7, #4]
}
 8101b26:	4618      	mov	r0, r3
 8101b28:	3718      	adds	r7, #24
 8101b2a:	46bd      	mov	sp, r7
 8101b2c:	bd80      	pop	{r7, pc}

08101b2e <_close>:

int _close(int file)
{
 8101b2e:	b480      	push	{r7}
 8101b30:	b083      	sub	sp, #12
 8101b32:	af00      	add	r7, sp, #0
 8101b34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8101b3a:	4618      	mov	r0, r3
 8101b3c:	370c      	adds	r7, #12
 8101b3e:	46bd      	mov	sp, r7
 8101b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b44:	4770      	bx	lr

08101b46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101b46:	b480      	push	{r7}
 8101b48:	b083      	sub	sp, #12
 8101b4a:	af00      	add	r7, sp, #0
 8101b4c:	6078      	str	r0, [r7, #4]
 8101b4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101b50:	683b      	ldr	r3, [r7, #0]
 8101b52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101b56:	605a      	str	r2, [r3, #4]
  return 0;
 8101b58:	2300      	movs	r3, #0
}
 8101b5a:	4618      	mov	r0, r3
 8101b5c:	370c      	adds	r7, #12
 8101b5e:	46bd      	mov	sp, r7
 8101b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b64:	4770      	bx	lr

08101b66 <_isatty>:

int _isatty(int file)
{
 8101b66:	b480      	push	{r7}
 8101b68:	b083      	sub	sp, #12
 8101b6a:	af00      	add	r7, sp, #0
 8101b6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8101b6e:	2301      	movs	r3, #1
}
 8101b70:	4618      	mov	r0, r3
 8101b72:	370c      	adds	r7, #12
 8101b74:	46bd      	mov	sp, r7
 8101b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b7a:	4770      	bx	lr

08101b7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101b7c:	b480      	push	{r7}
 8101b7e:	b085      	sub	sp, #20
 8101b80:	af00      	add	r7, sp, #0
 8101b82:	60f8      	str	r0, [r7, #12]
 8101b84:	60b9      	str	r1, [r7, #8]
 8101b86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101b88:	2300      	movs	r3, #0
}
 8101b8a:	4618      	mov	r0, r3
 8101b8c:	3714      	adds	r7, #20
 8101b8e:	46bd      	mov	sp, r7
 8101b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b94:	4770      	bx	lr
	...

08101b98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8101b98:	b580      	push	{r7, lr}
 8101b9a:	b086      	sub	sp, #24
 8101b9c:	af00      	add	r7, sp, #0
 8101b9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8101ba0:	4a14      	ldr	r2, [pc, #80]	@ (8101bf4 <_sbrk+0x5c>)
 8101ba2:	4b15      	ldr	r3, [pc, #84]	@ (8101bf8 <_sbrk+0x60>)
 8101ba4:	1ad3      	subs	r3, r2, r3
 8101ba6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8101ba8:	697b      	ldr	r3, [r7, #20]
 8101baa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8101bac:	4b13      	ldr	r3, [pc, #76]	@ (8101bfc <_sbrk+0x64>)
 8101bae:	681b      	ldr	r3, [r3, #0]
 8101bb0:	2b00      	cmp	r3, #0
 8101bb2:	d102      	bne.n	8101bba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8101bb4:	4b11      	ldr	r3, [pc, #68]	@ (8101bfc <_sbrk+0x64>)
 8101bb6:	4a12      	ldr	r2, [pc, #72]	@ (8101c00 <_sbrk+0x68>)
 8101bb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8101bba:	4b10      	ldr	r3, [pc, #64]	@ (8101bfc <_sbrk+0x64>)
 8101bbc:	681a      	ldr	r2, [r3, #0]
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	4413      	add	r3, r2
 8101bc2:	693a      	ldr	r2, [r7, #16]
 8101bc4:	429a      	cmp	r2, r3
 8101bc6:	d207      	bcs.n	8101bd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8101bc8:	f005 f8dc 	bl	8106d84 <__errno>
 8101bcc:	4603      	mov	r3, r0
 8101bce:	220c      	movs	r2, #12
 8101bd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101bd2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8101bd6:	e009      	b.n	8101bec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8101bd8:	4b08      	ldr	r3, [pc, #32]	@ (8101bfc <_sbrk+0x64>)
 8101bda:	681b      	ldr	r3, [r3, #0]
 8101bdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101bde:	4b07      	ldr	r3, [pc, #28]	@ (8101bfc <_sbrk+0x64>)
 8101be0:	681a      	ldr	r2, [r3, #0]
 8101be2:	687b      	ldr	r3, [r7, #4]
 8101be4:	4413      	add	r3, r2
 8101be6:	4a05      	ldr	r2, [pc, #20]	@ (8101bfc <_sbrk+0x64>)
 8101be8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8101bea:	68fb      	ldr	r3, [r7, #12]
}
 8101bec:	4618      	mov	r0, r3
 8101bee:	3718      	adds	r7, #24
 8101bf0:	46bd      	mov	sp, r7
 8101bf2:	bd80      	pop	{r7, pc}
 8101bf4:	10048000 	.word	0x10048000
 8101bf8:	00000400 	.word	0x00000400
 8101bfc:	10000714 	.word	0x10000714
 8101c00:	10000900 	.word	0x10000900

08101c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101c04:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8101c3c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101c08:	f7ff f8fc 	bl	8100e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101c0c:	480c      	ldr	r0, [pc, #48]	@ (8101c40 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101c0e:	490d      	ldr	r1, [pc, #52]	@ (8101c44 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101c10:	4a0d      	ldr	r2, [pc, #52]	@ (8101c48 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101c12:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101c14:	e002      	b.n	8101c1c <LoopCopyDataInit>

08101c16 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101c16:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101c18:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101c1a:	3304      	adds	r3, #4

08101c1c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101c1c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101c1e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101c20:	d3f9      	bcc.n	8101c16 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101c22:	4a0a      	ldr	r2, [pc, #40]	@ (8101c4c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101c24:	4c0a      	ldr	r4, [pc, #40]	@ (8101c50 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101c26:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101c28:	e001      	b.n	8101c2e <LoopFillZerobss>

08101c2a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101c2a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101c2c:	3204      	adds	r2, #4

08101c2e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101c2e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101c30:	d3fb      	bcc.n	8101c2a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101c32:	f005 f8ad 	bl	8106d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101c36:	f7ff fa0d 	bl	8101054 <main>
  bx  lr
 8101c3a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101c3c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101c40:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101c44:	100001e8 	.word	0x100001e8
  ldr r2, =_sidata
 8101c48:	0810aa54 	.word	0x0810aa54
  ldr r2, =_sbss
 8101c4c:	100001e8 	.word	0x100001e8
  ldr r4, =_ebss
 8101c50:	10000900 	.word	0x10000900

08101c54 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101c54:	e7fe      	b.n	8101c54 <ADC3_IRQHandler>
	...

08101c58 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8101c58:	b580      	push	{r7, lr}
 8101c5a:	b082      	sub	sp, #8
 8101c5c:	af00      	add	r7, sp, #0
 8101c5e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8101c60:	4b09      	ldr	r3, [pc, #36]	@ (8101c88 <__io_putchar+0x30>)
 8101c62:	781b      	ldrb	r3, [r3, #0]
 8101c64:	461a      	mov	r2, r3
 8101c66:	2394      	movs	r3, #148	@ 0x94
 8101c68:	fb02 f303 	mul.w	r3, r2, r3
 8101c6c:	4a07      	ldr	r2, [pc, #28]	@ (8101c8c <__io_putchar+0x34>)
 8101c6e:	1898      	adds	r0, r3, r2
 8101c70:	1d39      	adds	r1, r7, #4
 8101c72:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101c76:	2201      	movs	r2, #1
 8101c78:	f003 f934 	bl	8104ee4 <HAL_UART_Transmit>
  return ch;
 8101c7c:	687b      	ldr	r3, [r7, #4]
}
 8101c7e:	4618      	mov	r0, r3
 8101c80:	3708      	adds	r7, #8
 8101c82:	46bd      	mov	sp, r7
 8101c84:	bd80      	pop	{r7, pc}
 8101c86:	bf00      	nop
 8101c88:	100007ac 	.word	0x100007ac
 8101c8c:	10000718 	.word	0x10000718

08101c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8101c90:	b580      	push	{r7, lr}
 8101c92:	b082      	sub	sp, #8
 8101c94:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101c96:	4b28      	ldr	r3, [pc, #160]	@ (8101d38 <HAL_Init+0xa8>)
 8101c98:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101c9c:	4a26      	ldr	r2, [pc, #152]	@ (8101d38 <HAL_Init+0xa8>)
 8101c9e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8101ca2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8101ca6:	4b24      	ldr	r3, [pc, #144]	@ (8101d38 <HAL_Init+0xa8>)
 8101ca8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8101cac:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8101cb0:	603b      	str	r3, [r7, #0]
 8101cb2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101cb4:	4b21      	ldr	r3, [pc, #132]	@ (8101d3c <HAL_Init+0xac>)
 8101cb6:	681b      	ldr	r3, [r3, #0]
 8101cb8:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 8101cbc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8101d3c <HAL_Init+0xac>)
 8101cc2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 8101cc6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8101d3c <HAL_Init+0xac>)
 8101cca:	681b      	ldr	r3, [r3, #0]
 8101ccc:	4a1b      	ldr	r2, [pc, #108]	@ (8101d3c <HAL_Init+0xac>)
 8101cce:	f043 0301 	orr.w	r3, r3, #1
 8101cd2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101cd4:	2003      	movs	r0, #3
 8101cd6:	f000 f965 	bl	8101fa4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101cda:	f001 fc1b 	bl	8103514 <HAL_RCC_GetSysClockFreq>
 8101cde:	4602      	mov	r2, r0
 8101ce0:	4b15      	ldr	r3, [pc, #84]	@ (8101d38 <HAL_Init+0xa8>)
 8101ce2:	699b      	ldr	r3, [r3, #24]
 8101ce4:	0a1b      	lsrs	r3, r3, #8
 8101ce6:	f003 030f 	and.w	r3, r3, #15
 8101cea:	4915      	ldr	r1, [pc, #84]	@ (8101d40 <HAL_Init+0xb0>)
 8101cec:	5ccb      	ldrb	r3, [r1, r3]
 8101cee:	f003 031f 	and.w	r3, r3, #31
 8101cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8101cf6:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8101d38 <HAL_Init+0xa8>)
 8101cfa:	699b      	ldr	r3, [r3, #24]
 8101cfc:	f003 030f 	and.w	r3, r3, #15
 8101d00:	4a0f      	ldr	r2, [pc, #60]	@ (8101d40 <HAL_Init+0xb0>)
 8101d02:	5cd3      	ldrb	r3, [r2, r3]
 8101d04:	f003 031f 	and.w	r3, r3, #31
 8101d08:	687a      	ldr	r2, [r7, #4]
 8101d0a:	fa22 f303 	lsr.w	r3, r2, r3
 8101d0e:	4a0d      	ldr	r2, [pc, #52]	@ (8101d44 <HAL_Init+0xb4>)
 8101d10:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8101d12:	4b0c      	ldr	r3, [pc, #48]	@ (8101d44 <HAL_Init+0xb4>)
 8101d14:	681b      	ldr	r3, [r3, #0]
 8101d16:	4a0c      	ldr	r2, [pc, #48]	@ (8101d48 <HAL_Init+0xb8>)
 8101d18:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101d1a:	2000      	movs	r0, #0
 8101d1c:	f000 f816 	bl	8101d4c <HAL_InitTick>
 8101d20:	4603      	mov	r3, r0
 8101d22:	2b00      	cmp	r3, #0
 8101d24:	d001      	beq.n	8101d2a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101d26:	2301      	movs	r3, #1
 8101d28:	e002      	b.n	8101d30 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101d2a:	f7ff fda3 	bl	8101874 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8101d2e:	2300      	movs	r3, #0
}
 8101d30:	4618      	mov	r0, r3
 8101d32:	3708      	adds	r7, #8
 8101d34:	46bd      	mov	sp, r7
 8101d36:	bd80      	pop	{r7, pc}
 8101d38:	58024400 	.word	0x58024400
 8101d3c:	40024400 	.word	0x40024400
 8101d40:	081098b0 	.word	0x081098b0
 8101d44:	10000004 	.word	0x10000004
 8101d48:	10000000 	.word	0x10000000

08101d4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101d4c:	b580      	push	{r7, lr}
 8101d4e:	b082      	sub	sp, #8
 8101d50:	af00      	add	r7, sp, #0
 8101d52:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101d54:	4b15      	ldr	r3, [pc, #84]	@ (8101dac <HAL_InitTick+0x60>)
 8101d56:	781b      	ldrb	r3, [r3, #0]
 8101d58:	2b00      	cmp	r3, #0
 8101d5a:	d101      	bne.n	8101d60 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101d5c:	2301      	movs	r3, #1
 8101d5e:	e021      	b.n	8101da4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8101d60:	4b13      	ldr	r3, [pc, #76]	@ (8101db0 <HAL_InitTick+0x64>)
 8101d62:	681a      	ldr	r2, [r3, #0]
 8101d64:	4b11      	ldr	r3, [pc, #68]	@ (8101dac <HAL_InitTick+0x60>)
 8101d66:	781b      	ldrb	r3, [r3, #0]
 8101d68:	4619      	mov	r1, r3
 8101d6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101d6e:	fbb3 f3f1 	udiv	r3, r3, r1
 8101d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8101d76:	4618      	mov	r0, r3
 8101d78:	f000 f939 	bl	8101fee <HAL_SYSTICK_Config>
 8101d7c:	4603      	mov	r3, r0
 8101d7e:	2b00      	cmp	r3, #0
 8101d80:	d001      	beq.n	8101d86 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8101d82:	2301      	movs	r3, #1
 8101d84:	e00e      	b.n	8101da4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	2b0f      	cmp	r3, #15
 8101d8a:	d80a      	bhi.n	8101da2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101d8c:	2200      	movs	r2, #0
 8101d8e:	6879      	ldr	r1, [r7, #4]
 8101d90:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8101d94:	f000 f911 	bl	8101fba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101d98:	4a06      	ldr	r2, [pc, #24]	@ (8101db4 <HAL_InitTick+0x68>)
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8101d9e:	2300      	movs	r3, #0
 8101da0:	e000      	b.n	8101da4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8101da2:	2301      	movs	r3, #1
}
 8101da4:	4618      	mov	r0, r3
 8101da6:	3708      	adds	r7, #8
 8101da8:	46bd      	mov	sp, r7
 8101daa:	bd80      	pop	{r7, pc}
 8101dac:	1000001c 	.word	0x1000001c
 8101db0:	10000000 	.word	0x10000000
 8101db4:	10000018 	.word	0x10000018

08101db8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101db8:	b480      	push	{r7}
 8101dba:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101dbc:	4b06      	ldr	r3, [pc, #24]	@ (8101dd8 <HAL_IncTick+0x20>)
 8101dbe:	781b      	ldrb	r3, [r3, #0]
 8101dc0:	461a      	mov	r2, r3
 8101dc2:	4b06      	ldr	r3, [pc, #24]	@ (8101ddc <HAL_IncTick+0x24>)
 8101dc4:	681b      	ldr	r3, [r3, #0]
 8101dc6:	4413      	add	r3, r2
 8101dc8:	4a04      	ldr	r2, [pc, #16]	@ (8101ddc <HAL_IncTick+0x24>)
 8101dca:	6013      	str	r3, [r2, #0]
}
 8101dcc:	bf00      	nop
 8101dce:	46bd      	mov	sp, r7
 8101dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dd4:	4770      	bx	lr
 8101dd6:	bf00      	nop
 8101dd8:	1000001c 	.word	0x1000001c
 8101ddc:	100007b0 	.word	0x100007b0

08101de0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8101de0:	b480      	push	{r7}
 8101de2:	af00      	add	r7, sp, #0
  return uwTick;
 8101de4:	4b03      	ldr	r3, [pc, #12]	@ (8101df4 <HAL_GetTick+0x14>)
 8101de6:	681b      	ldr	r3, [r3, #0]
}
 8101de8:	4618      	mov	r0, r3
 8101dea:	46bd      	mov	sp, r7
 8101dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101df0:	4770      	bx	lr
 8101df2:	bf00      	nop
 8101df4:	100007b0 	.word	0x100007b0

08101df8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101df8:	b580      	push	{r7, lr}
 8101dfa:	b084      	sub	sp, #16
 8101dfc:	af00      	add	r7, sp, #0
 8101dfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8101e00:	f7ff ffee 	bl	8101de0 <HAL_GetTick>
 8101e04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101e06:	687b      	ldr	r3, [r7, #4]
 8101e08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101e0a:	68fb      	ldr	r3, [r7, #12]
 8101e0c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8101e10:	d005      	beq.n	8101e1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8101e12:	4b0a      	ldr	r3, [pc, #40]	@ (8101e3c <HAL_Delay+0x44>)
 8101e14:	781b      	ldrb	r3, [r3, #0]
 8101e16:	461a      	mov	r2, r3
 8101e18:	68fb      	ldr	r3, [r7, #12]
 8101e1a:	4413      	add	r3, r2
 8101e1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8101e1e:	bf00      	nop
 8101e20:	f7ff ffde 	bl	8101de0 <HAL_GetTick>
 8101e24:	4602      	mov	r2, r0
 8101e26:	68bb      	ldr	r3, [r7, #8]
 8101e28:	1ad3      	subs	r3, r2, r3
 8101e2a:	68fa      	ldr	r2, [r7, #12]
 8101e2c:	429a      	cmp	r2, r3
 8101e2e:	d8f7      	bhi.n	8101e20 <HAL_Delay+0x28>
  {
  }
}
 8101e30:	bf00      	nop
 8101e32:	bf00      	nop
 8101e34:	3710      	adds	r7, #16
 8101e36:	46bd      	mov	sp, r7
 8101e38:	bd80      	pop	{r7, pc}
 8101e3a:	bf00      	nop
 8101e3c:	1000001c 	.word	0x1000001c

08101e40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101e40:	b480      	push	{r7}
 8101e42:	b085      	sub	sp, #20
 8101e44:	af00      	add	r7, sp, #0
 8101e46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101e48:	687b      	ldr	r3, [r7, #4]
 8101e4a:	f003 0307 	and.w	r3, r3, #7
 8101e4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8101e50:	4b0c      	ldr	r3, [pc, #48]	@ (8101e84 <__NVIC_SetPriorityGrouping+0x44>)
 8101e52:	68db      	ldr	r3, [r3, #12]
 8101e54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101e56:	68ba      	ldr	r2, [r7, #8]
 8101e58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101e5c:	4013      	ands	r3, r2
 8101e5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8101e60:	68fb      	ldr	r3, [r7, #12]
 8101e62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101e64:	68bb      	ldr	r3, [r7, #8]
 8101e66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101e68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101e6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101e70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8101e72:	4a04      	ldr	r2, [pc, #16]	@ (8101e84 <__NVIC_SetPriorityGrouping+0x44>)
 8101e74:	68bb      	ldr	r3, [r7, #8]
 8101e76:	60d3      	str	r3, [r2, #12]
}
 8101e78:	bf00      	nop
 8101e7a:	3714      	adds	r7, #20
 8101e7c:	46bd      	mov	sp, r7
 8101e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e82:	4770      	bx	lr
 8101e84:	e000ed00 	.word	0xe000ed00

08101e88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101e88:	b480      	push	{r7}
 8101e8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101e8c:	4b04      	ldr	r3, [pc, #16]	@ (8101ea0 <__NVIC_GetPriorityGrouping+0x18>)
 8101e8e:	68db      	ldr	r3, [r3, #12]
 8101e90:	0a1b      	lsrs	r3, r3, #8
 8101e92:	f003 0307 	and.w	r3, r3, #7
}
 8101e96:	4618      	mov	r0, r3
 8101e98:	46bd      	mov	sp, r7
 8101e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e9e:	4770      	bx	lr
 8101ea0:	e000ed00 	.word	0xe000ed00

08101ea4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8101ea4:	b480      	push	{r7}
 8101ea6:	b083      	sub	sp, #12
 8101ea8:	af00      	add	r7, sp, #0
 8101eaa:	4603      	mov	r3, r0
 8101eac:	6039      	str	r1, [r7, #0]
 8101eae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8101eb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101eb4:	2b00      	cmp	r3, #0
 8101eb6:	db0a      	blt.n	8101ece <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101eb8:	683b      	ldr	r3, [r7, #0]
 8101eba:	b2da      	uxtb	r2, r3
 8101ebc:	490c      	ldr	r1, [pc, #48]	@ (8101ef0 <__NVIC_SetPriority+0x4c>)
 8101ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101ec2:	0112      	lsls	r2, r2, #4
 8101ec4:	b2d2      	uxtb	r2, r2
 8101ec6:	440b      	add	r3, r1
 8101ec8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8101ecc:	e00a      	b.n	8101ee4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8101ece:	683b      	ldr	r3, [r7, #0]
 8101ed0:	b2da      	uxtb	r2, r3
 8101ed2:	4908      	ldr	r1, [pc, #32]	@ (8101ef4 <__NVIC_SetPriority+0x50>)
 8101ed4:	88fb      	ldrh	r3, [r7, #6]
 8101ed6:	f003 030f 	and.w	r3, r3, #15
 8101eda:	3b04      	subs	r3, #4
 8101edc:	0112      	lsls	r2, r2, #4
 8101ede:	b2d2      	uxtb	r2, r2
 8101ee0:	440b      	add	r3, r1
 8101ee2:	761a      	strb	r2, [r3, #24]
}
 8101ee4:	bf00      	nop
 8101ee6:	370c      	adds	r7, #12
 8101ee8:	46bd      	mov	sp, r7
 8101eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101eee:	4770      	bx	lr
 8101ef0:	e000e100 	.word	0xe000e100
 8101ef4:	e000ed00 	.word	0xe000ed00

08101ef8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101ef8:	b480      	push	{r7}
 8101efa:	b089      	sub	sp, #36	@ 0x24
 8101efc:	af00      	add	r7, sp, #0
 8101efe:	60f8      	str	r0, [r7, #12]
 8101f00:	60b9      	str	r1, [r7, #8]
 8101f02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101f04:	68fb      	ldr	r3, [r7, #12]
 8101f06:	f003 0307 	and.w	r3, r3, #7
 8101f0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101f0c:	69fb      	ldr	r3, [r7, #28]
 8101f0e:	f1c3 0307 	rsb	r3, r3, #7
 8101f12:	2b04      	cmp	r3, #4
 8101f14:	bf28      	it	cs
 8101f16:	2304      	movcs	r3, #4
 8101f18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101f1a:	69fb      	ldr	r3, [r7, #28]
 8101f1c:	3304      	adds	r3, #4
 8101f1e:	2b06      	cmp	r3, #6
 8101f20:	d902      	bls.n	8101f28 <NVIC_EncodePriority+0x30>
 8101f22:	69fb      	ldr	r3, [r7, #28]
 8101f24:	3b03      	subs	r3, #3
 8101f26:	e000      	b.n	8101f2a <NVIC_EncodePriority+0x32>
 8101f28:	2300      	movs	r3, #0
 8101f2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101f2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8101f30:	69bb      	ldr	r3, [r7, #24]
 8101f32:	fa02 f303 	lsl.w	r3, r2, r3
 8101f36:	43da      	mvns	r2, r3
 8101f38:	68bb      	ldr	r3, [r7, #8]
 8101f3a:	401a      	ands	r2, r3
 8101f3c:	697b      	ldr	r3, [r7, #20]
 8101f3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8101f40:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8101f44:	697b      	ldr	r3, [r7, #20]
 8101f46:	fa01 f303 	lsl.w	r3, r1, r3
 8101f4a:	43d9      	mvns	r1, r3
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101f50:	4313      	orrs	r3, r2
         );
}
 8101f52:	4618      	mov	r0, r3
 8101f54:	3724      	adds	r7, #36	@ 0x24
 8101f56:	46bd      	mov	sp, r7
 8101f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f5c:	4770      	bx	lr
	...

08101f60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8101f60:	b580      	push	{r7, lr}
 8101f62:	b082      	sub	sp, #8
 8101f64:	af00      	add	r7, sp, #0
 8101f66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101f68:	687b      	ldr	r3, [r7, #4]
 8101f6a:	3b01      	subs	r3, #1
 8101f6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8101f70:	d301      	bcc.n	8101f76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8101f72:	2301      	movs	r3, #1
 8101f74:	e00f      	b.n	8101f96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101f76:	4a0a      	ldr	r2, [pc, #40]	@ (8101fa0 <SysTick_Config+0x40>)
 8101f78:	687b      	ldr	r3, [r7, #4]
 8101f7a:	3b01      	subs	r3, #1
 8101f7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8101f7e:	210f      	movs	r1, #15
 8101f80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8101f84:	f7ff ff8e 	bl	8101ea4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101f88:	4b05      	ldr	r3, [pc, #20]	@ (8101fa0 <SysTick_Config+0x40>)
 8101f8a:	2200      	movs	r2, #0
 8101f8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8101f8e:	4b04      	ldr	r3, [pc, #16]	@ (8101fa0 <SysTick_Config+0x40>)
 8101f90:	2207      	movs	r2, #7
 8101f92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8101f94:	2300      	movs	r3, #0
}
 8101f96:	4618      	mov	r0, r3
 8101f98:	3708      	adds	r7, #8
 8101f9a:	46bd      	mov	sp, r7
 8101f9c:	bd80      	pop	{r7, pc}
 8101f9e:	bf00      	nop
 8101fa0:	e000e010 	.word	0xe000e010

08101fa4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8101fa4:	b580      	push	{r7, lr}
 8101fa6:	b082      	sub	sp, #8
 8101fa8:	af00      	add	r7, sp, #0
 8101faa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8101fac:	6878      	ldr	r0, [r7, #4]
 8101fae:	f7ff ff47 	bl	8101e40 <__NVIC_SetPriorityGrouping>
}
 8101fb2:	bf00      	nop
 8101fb4:	3708      	adds	r7, #8
 8101fb6:	46bd      	mov	sp, r7
 8101fb8:	bd80      	pop	{r7, pc}

08101fba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101fba:	b580      	push	{r7, lr}
 8101fbc:	b086      	sub	sp, #24
 8101fbe:	af00      	add	r7, sp, #0
 8101fc0:	4603      	mov	r3, r0
 8101fc2:	60b9      	str	r1, [r7, #8]
 8101fc4:	607a      	str	r2, [r7, #4]
 8101fc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8101fc8:	f7ff ff5e 	bl	8101e88 <__NVIC_GetPriorityGrouping>
 8101fcc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8101fce:	687a      	ldr	r2, [r7, #4]
 8101fd0:	68b9      	ldr	r1, [r7, #8]
 8101fd2:	6978      	ldr	r0, [r7, #20]
 8101fd4:	f7ff ff90 	bl	8101ef8 <NVIC_EncodePriority>
 8101fd8:	4602      	mov	r2, r0
 8101fda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8101fde:	4611      	mov	r1, r2
 8101fe0:	4618      	mov	r0, r3
 8101fe2:	f7ff ff5f 	bl	8101ea4 <__NVIC_SetPriority>
}
 8101fe6:	bf00      	nop
 8101fe8:	3718      	adds	r7, #24
 8101fea:	46bd      	mov	sp, r7
 8101fec:	bd80      	pop	{r7, pc}

08101fee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8101fee:	b580      	push	{r7, lr}
 8101ff0:	b082      	sub	sp, #8
 8101ff2:	af00      	add	r7, sp, #0
 8101ff4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101ff6:	6878      	ldr	r0, [r7, #4]
 8101ff8:	f7ff ffb2 	bl	8101f60 <SysTick_Config>
 8101ffc:	4603      	mov	r3, r0
}
 8101ffe:	4618      	mov	r0, r3
 8102000:	3708      	adds	r7, #8
 8102002:	46bd      	mov	sp, r7
 8102004:	bd80      	pop	{r7, pc}
	...

08102008 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8102008:	b480      	push	{r7}
 810200a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 810200c:	4b07      	ldr	r3, [pc, #28]	@ (810202c <HAL_GetCurrentCPUID+0x24>)
 810200e:	681b      	ldr	r3, [r3, #0]
 8102010:	091b      	lsrs	r3, r3, #4
 8102012:	f003 030f 	and.w	r3, r3, #15
 8102016:	2b07      	cmp	r3, #7
 8102018:	d101      	bne.n	810201e <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810201a:	2303      	movs	r3, #3
 810201c:	e000      	b.n	8102020 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810201e:	2301      	movs	r3, #1
  }
}
 8102020:	4618      	mov	r0, r3
 8102022:	46bd      	mov	sp, r7
 8102024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102028:	4770      	bx	lr
 810202a:	bf00      	nop
 810202c:	e000ed00 	.word	0xe000ed00

08102030 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8102030:	b480      	push	{r7}
 8102032:	b089      	sub	sp, #36	@ 0x24
 8102034:	af00      	add	r7, sp, #0
 8102036:	6078      	str	r0, [r7, #4]
 8102038:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810203a:	2300      	movs	r3, #0
 810203c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810203e:	4b89      	ldr	r3, [pc, #548]	@ (8102264 <HAL_GPIO_Init+0x234>)
 8102040:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8102042:	e194      	b.n	810236e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8102044:	683b      	ldr	r3, [r7, #0]
 8102046:	681a      	ldr	r2, [r3, #0]
 8102048:	2101      	movs	r1, #1
 810204a:	69fb      	ldr	r3, [r7, #28]
 810204c:	fa01 f303 	lsl.w	r3, r1, r3
 8102050:	4013      	ands	r3, r2
 8102052:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8102054:	693b      	ldr	r3, [r7, #16]
 8102056:	2b00      	cmp	r3, #0
 8102058:	f000 8186 	beq.w	8102368 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810205c:	683b      	ldr	r3, [r7, #0]
 810205e:	685b      	ldr	r3, [r3, #4]
 8102060:	f003 0303 	and.w	r3, r3, #3
 8102064:	2b01      	cmp	r3, #1
 8102066:	d005      	beq.n	8102074 <HAL_GPIO_Init+0x44>
 8102068:	683b      	ldr	r3, [r7, #0]
 810206a:	685b      	ldr	r3, [r3, #4]
 810206c:	f003 0303 	and.w	r3, r3, #3
 8102070:	2b02      	cmp	r3, #2
 8102072:	d130      	bne.n	81020d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8102074:	687b      	ldr	r3, [r7, #4]
 8102076:	689b      	ldr	r3, [r3, #8]
 8102078:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810207a:	69fb      	ldr	r3, [r7, #28]
 810207c:	005b      	lsls	r3, r3, #1
 810207e:	2203      	movs	r2, #3
 8102080:	fa02 f303 	lsl.w	r3, r2, r3
 8102084:	43db      	mvns	r3, r3
 8102086:	69ba      	ldr	r2, [r7, #24]
 8102088:	4013      	ands	r3, r2
 810208a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810208c:	683b      	ldr	r3, [r7, #0]
 810208e:	68da      	ldr	r2, [r3, #12]
 8102090:	69fb      	ldr	r3, [r7, #28]
 8102092:	005b      	lsls	r3, r3, #1
 8102094:	fa02 f303 	lsl.w	r3, r2, r3
 8102098:	69ba      	ldr	r2, [r7, #24]
 810209a:	4313      	orrs	r3, r2
 810209c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810209e:	687b      	ldr	r3, [r7, #4]
 81020a0:	69ba      	ldr	r2, [r7, #24]
 81020a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81020a4:	687b      	ldr	r3, [r7, #4]
 81020a6:	685b      	ldr	r3, [r3, #4]
 81020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81020aa:	2201      	movs	r2, #1
 81020ac:	69fb      	ldr	r3, [r7, #28]
 81020ae:	fa02 f303 	lsl.w	r3, r2, r3
 81020b2:	43db      	mvns	r3, r3
 81020b4:	69ba      	ldr	r2, [r7, #24]
 81020b6:	4013      	ands	r3, r2
 81020b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81020ba:	683b      	ldr	r3, [r7, #0]
 81020bc:	685b      	ldr	r3, [r3, #4]
 81020be:	091b      	lsrs	r3, r3, #4
 81020c0:	f003 0201 	and.w	r2, r3, #1
 81020c4:	69fb      	ldr	r3, [r7, #28]
 81020c6:	fa02 f303 	lsl.w	r3, r2, r3
 81020ca:	69ba      	ldr	r2, [r7, #24]
 81020cc:	4313      	orrs	r3, r2
 81020ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81020d0:	687b      	ldr	r3, [r7, #4]
 81020d2:	69ba      	ldr	r2, [r7, #24]
 81020d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81020d6:	683b      	ldr	r3, [r7, #0]
 81020d8:	685b      	ldr	r3, [r3, #4]
 81020da:	f003 0303 	and.w	r3, r3, #3
 81020de:	2b03      	cmp	r3, #3
 81020e0:	d017      	beq.n	8102112 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81020e2:	687b      	ldr	r3, [r7, #4]
 81020e4:	68db      	ldr	r3, [r3, #12]
 81020e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81020e8:	69fb      	ldr	r3, [r7, #28]
 81020ea:	005b      	lsls	r3, r3, #1
 81020ec:	2203      	movs	r2, #3
 81020ee:	fa02 f303 	lsl.w	r3, r2, r3
 81020f2:	43db      	mvns	r3, r3
 81020f4:	69ba      	ldr	r2, [r7, #24]
 81020f6:	4013      	ands	r3, r2
 81020f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81020fa:	683b      	ldr	r3, [r7, #0]
 81020fc:	689a      	ldr	r2, [r3, #8]
 81020fe:	69fb      	ldr	r3, [r7, #28]
 8102100:	005b      	lsls	r3, r3, #1
 8102102:	fa02 f303 	lsl.w	r3, r2, r3
 8102106:	69ba      	ldr	r2, [r7, #24]
 8102108:	4313      	orrs	r3, r2
 810210a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810210c:	687b      	ldr	r3, [r7, #4]
 810210e:	69ba      	ldr	r2, [r7, #24]
 8102110:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8102112:	683b      	ldr	r3, [r7, #0]
 8102114:	685b      	ldr	r3, [r3, #4]
 8102116:	f003 0303 	and.w	r3, r3, #3
 810211a:	2b02      	cmp	r3, #2
 810211c:	d123      	bne.n	8102166 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810211e:	69fb      	ldr	r3, [r7, #28]
 8102120:	08da      	lsrs	r2, r3, #3
 8102122:	687b      	ldr	r3, [r7, #4]
 8102124:	3208      	adds	r2, #8
 8102126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810212a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 810212c:	69fb      	ldr	r3, [r7, #28]
 810212e:	f003 0307 	and.w	r3, r3, #7
 8102132:	009b      	lsls	r3, r3, #2
 8102134:	220f      	movs	r2, #15
 8102136:	fa02 f303 	lsl.w	r3, r2, r3
 810213a:	43db      	mvns	r3, r3
 810213c:	69ba      	ldr	r2, [r7, #24]
 810213e:	4013      	ands	r3, r2
 8102140:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8102142:	683b      	ldr	r3, [r7, #0]
 8102144:	691a      	ldr	r2, [r3, #16]
 8102146:	69fb      	ldr	r3, [r7, #28]
 8102148:	f003 0307 	and.w	r3, r3, #7
 810214c:	009b      	lsls	r3, r3, #2
 810214e:	fa02 f303 	lsl.w	r3, r2, r3
 8102152:	69ba      	ldr	r2, [r7, #24]
 8102154:	4313      	orrs	r3, r2
 8102156:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8102158:	69fb      	ldr	r3, [r7, #28]
 810215a:	08da      	lsrs	r2, r3, #3
 810215c:	687b      	ldr	r3, [r7, #4]
 810215e:	3208      	adds	r2, #8
 8102160:	69b9      	ldr	r1, [r7, #24]
 8102162:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8102166:	687b      	ldr	r3, [r7, #4]
 8102168:	681b      	ldr	r3, [r3, #0]
 810216a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 810216c:	69fb      	ldr	r3, [r7, #28]
 810216e:	005b      	lsls	r3, r3, #1
 8102170:	2203      	movs	r2, #3
 8102172:	fa02 f303 	lsl.w	r3, r2, r3
 8102176:	43db      	mvns	r3, r3
 8102178:	69ba      	ldr	r2, [r7, #24]
 810217a:	4013      	ands	r3, r2
 810217c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810217e:	683b      	ldr	r3, [r7, #0]
 8102180:	685b      	ldr	r3, [r3, #4]
 8102182:	f003 0203 	and.w	r2, r3, #3
 8102186:	69fb      	ldr	r3, [r7, #28]
 8102188:	005b      	lsls	r3, r3, #1
 810218a:	fa02 f303 	lsl.w	r3, r2, r3
 810218e:	69ba      	ldr	r2, [r7, #24]
 8102190:	4313      	orrs	r3, r2
 8102192:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8102194:	687b      	ldr	r3, [r7, #4]
 8102196:	69ba      	ldr	r2, [r7, #24]
 8102198:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 810219a:	683b      	ldr	r3, [r7, #0]
 810219c:	685b      	ldr	r3, [r3, #4]
 810219e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81021a2:	2b00      	cmp	r3, #0
 81021a4:	f000 80e0 	beq.w	8102368 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81021a8:	4b2f      	ldr	r3, [pc, #188]	@ (8102268 <HAL_GPIO_Init+0x238>)
 81021aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81021ae:	4a2e      	ldr	r2, [pc, #184]	@ (8102268 <HAL_GPIO_Init+0x238>)
 81021b0:	f043 0302 	orr.w	r3, r3, #2
 81021b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81021b8:	4b2b      	ldr	r3, [pc, #172]	@ (8102268 <HAL_GPIO_Init+0x238>)
 81021ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81021be:	f003 0302 	and.w	r3, r3, #2
 81021c2:	60fb      	str	r3, [r7, #12]
 81021c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81021c6:	4a29      	ldr	r2, [pc, #164]	@ (810226c <HAL_GPIO_Init+0x23c>)
 81021c8:	69fb      	ldr	r3, [r7, #28]
 81021ca:	089b      	lsrs	r3, r3, #2
 81021cc:	3302      	adds	r3, #2
 81021ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81021d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81021d4:	69fb      	ldr	r3, [r7, #28]
 81021d6:	f003 0303 	and.w	r3, r3, #3
 81021da:	009b      	lsls	r3, r3, #2
 81021dc:	220f      	movs	r2, #15
 81021de:	fa02 f303 	lsl.w	r3, r2, r3
 81021e2:	43db      	mvns	r3, r3
 81021e4:	69ba      	ldr	r2, [r7, #24]
 81021e6:	4013      	ands	r3, r2
 81021e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	4a20      	ldr	r2, [pc, #128]	@ (8102270 <HAL_GPIO_Init+0x240>)
 81021ee:	4293      	cmp	r3, r2
 81021f0:	d052      	beq.n	8102298 <HAL_GPIO_Init+0x268>
 81021f2:	687b      	ldr	r3, [r7, #4]
 81021f4:	4a1f      	ldr	r2, [pc, #124]	@ (8102274 <HAL_GPIO_Init+0x244>)
 81021f6:	4293      	cmp	r3, r2
 81021f8:	d031      	beq.n	810225e <HAL_GPIO_Init+0x22e>
 81021fa:	687b      	ldr	r3, [r7, #4]
 81021fc:	4a1e      	ldr	r2, [pc, #120]	@ (8102278 <HAL_GPIO_Init+0x248>)
 81021fe:	4293      	cmp	r3, r2
 8102200:	d02b      	beq.n	810225a <HAL_GPIO_Init+0x22a>
 8102202:	687b      	ldr	r3, [r7, #4]
 8102204:	4a1d      	ldr	r2, [pc, #116]	@ (810227c <HAL_GPIO_Init+0x24c>)
 8102206:	4293      	cmp	r3, r2
 8102208:	d025      	beq.n	8102256 <HAL_GPIO_Init+0x226>
 810220a:	687b      	ldr	r3, [r7, #4]
 810220c:	4a1c      	ldr	r2, [pc, #112]	@ (8102280 <HAL_GPIO_Init+0x250>)
 810220e:	4293      	cmp	r3, r2
 8102210:	d01f      	beq.n	8102252 <HAL_GPIO_Init+0x222>
 8102212:	687b      	ldr	r3, [r7, #4]
 8102214:	4a1b      	ldr	r2, [pc, #108]	@ (8102284 <HAL_GPIO_Init+0x254>)
 8102216:	4293      	cmp	r3, r2
 8102218:	d019      	beq.n	810224e <HAL_GPIO_Init+0x21e>
 810221a:	687b      	ldr	r3, [r7, #4]
 810221c:	4a1a      	ldr	r2, [pc, #104]	@ (8102288 <HAL_GPIO_Init+0x258>)
 810221e:	4293      	cmp	r3, r2
 8102220:	d013      	beq.n	810224a <HAL_GPIO_Init+0x21a>
 8102222:	687b      	ldr	r3, [r7, #4]
 8102224:	4a19      	ldr	r2, [pc, #100]	@ (810228c <HAL_GPIO_Init+0x25c>)
 8102226:	4293      	cmp	r3, r2
 8102228:	d00d      	beq.n	8102246 <HAL_GPIO_Init+0x216>
 810222a:	687b      	ldr	r3, [r7, #4]
 810222c:	4a18      	ldr	r2, [pc, #96]	@ (8102290 <HAL_GPIO_Init+0x260>)
 810222e:	4293      	cmp	r3, r2
 8102230:	d007      	beq.n	8102242 <HAL_GPIO_Init+0x212>
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	4a17      	ldr	r2, [pc, #92]	@ (8102294 <HAL_GPIO_Init+0x264>)
 8102236:	4293      	cmp	r3, r2
 8102238:	d101      	bne.n	810223e <HAL_GPIO_Init+0x20e>
 810223a:	2309      	movs	r3, #9
 810223c:	e02d      	b.n	810229a <HAL_GPIO_Init+0x26a>
 810223e:	230a      	movs	r3, #10
 8102240:	e02b      	b.n	810229a <HAL_GPIO_Init+0x26a>
 8102242:	2308      	movs	r3, #8
 8102244:	e029      	b.n	810229a <HAL_GPIO_Init+0x26a>
 8102246:	2307      	movs	r3, #7
 8102248:	e027      	b.n	810229a <HAL_GPIO_Init+0x26a>
 810224a:	2306      	movs	r3, #6
 810224c:	e025      	b.n	810229a <HAL_GPIO_Init+0x26a>
 810224e:	2305      	movs	r3, #5
 8102250:	e023      	b.n	810229a <HAL_GPIO_Init+0x26a>
 8102252:	2304      	movs	r3, #4
 8102254:	e021      	b.n	810229a <HAL_GPIO_Init+0x26a>
 8102256:	2303      	movs	r3, #3
 8102258:	e01f      	b.n	810229a <HAL_GPIO_Init+0x26a>
 810225a:	2302      	movs	r3, #2
 810225c:	e01d      	b.n	810229a <HAL_GPIO_Init+0x26a>
 810225e:	2301      	movs	r3, #1
 8102260:	e01b      	b.n	810229a <HAL_GPIO_Init+0x26a>
 8102262:	bf00      	nop
 8102264:	580000c0 	.word	0x580000c0
 8102268:	58024400 	.word	0x58024400
 810226c:	58000400 	.word	0x58000400
 8102270:	58020000 	.word	0x58020000
 8102274:	58020400 	.word	0x58020400
 8102278:	58020800 	.word	0x58020800
 810227c:	58020c00 	.word	0x58020c00
 8102280:	58021000 	.word	0x58021000
 8102284:	58021400 	.word	0x58021400
 8102288:	58021800 	.word	0x58021800
 810228c:	58021c00 	.word	0x58021c00
 8102290:	58022000 	.word	0x58022000
 8102294:	58022400 	.word	0x58022400
 8102298:	2300      	movs	r3, #0
 810229a:	69fa      	ldr	r2, [r7, #28]
 810229c:	f002 0203 	and.w	r2, r2, #3
 81022a0:	0092      	lsls	r2, r2, #2
 81022a2:	4093      	lsls	r3, r2
 81022a4:	69ba      	ldr	r2, [r7, #24]
 81022a6:	4313      	orrs	r3, r2
 81022a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 81022aa:	4938      	ldr	r1, [pc, #224]	@ (810238c <HAL_GPIO_Init+0x35c>)
 81022ac:	69fb      	ldr	r3, [r7, #28]
 81022ae:	089b      	lsrs	r3, r3, #2
 81022b0:	3302      	adds	r3, #2
 81022b2:	69ba      	ldr	r2, [r7, #24]
 81022b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 81022b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81022bc:	681b      	ldr	r3, [r3, #0]
 81022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81022c0:	693b      	ldr	r3, [r7, #16]
 81022c2:	43db      	mvns	r3, r3
 81022c4:	69ba      	ldr	r2, [r7, #24]
 81022c6:	4013      	ands	r3, r2
 81022c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 81022ca:	683b      	ldr	r3, [r7, #0]
 81022cc:	685b      	ldr	r3, [r3, #4]
 81022ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 81022d2:	2b00      	cmp	r3, #0
 81022d4:	d003      	beq.n	81022de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 81022d6:	69ba      	ldr	r2, [r7, #24]
 81022d8:	693b      	ldr	r3, [r7, #16]
 81022da:	4313      	orrs	r3, r2
 81022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81022de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 81022e2:	69bb      	ldr	r3, [r7, #24]
 81022e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81022e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 81022ea:	685b      	ldr	r3, [r3, #4]
 81022ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81022ee:	693b      	ldr	r3, [r7, #16]
 81022f0:	43db      	mvns	r3, r3
 81022f2:	69ba      	ldr	r2, [r7, #24]
 81022f4:	4013      	ands	r3, r2
 81022f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 81022f8:	683b      	ldr	r3, [r7, #0]
 81022fa:	685b      	ldr	r3, [r3, #4]
 81022fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8102300:	2b00      	cmp	r3, #0
 8102302:	d003      	beq.n	810230c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8102304:	69ba      	ldr	r2, [r7, #24]
 8102306:	693b      	ldr	r3, [r7, #16]
 8102308:	4313      	orrs	r3, r2
 810230a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 810230c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8102310:	69bb      	ldr	r3, [r7, #24]
 8102312:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8102314:	697b      	ldr	r3, [r7, #20]
 8102316:	685b      	ldr	r3, [r3, #4]
 8102318:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810231a:	693b      	ldr	r3, [r7, #16]
 810231c:	43db      	mvns	r3, r3
 810231e:	69ba      	ldr	r2, [r7, #24]
 8102320:	4013      	ands	r3, r2
 8102322:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8102324:	683b      	ldr	r3, [r7, #0]
 8102326:	685b      	ldr	r3, [r3, #4]
 8102328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 810232c:	2b00      	cmp	r3, #0
 810232e:	d003      	beq.n	8102338 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8102330:	69ba      	ldr	r2, [r7, #24]
 8102332:	693b      	ldr	r3, [r7, #16]
 8102334:	4313      	orrs	r3, r2
 8102336:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8102338:	697b      	ldr	r3, [r7, #20]
 810233a:	69ba      	ldr	r2, [r7, #24]
 810233c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810233e:	697b      	ldr	r3, [r7, #20]
 8102340:	681b      	ldr	r3, [r3, #0]
 8102342:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8102344:	693b      	ldr	r3, [r7, #16]
 8102346:	43db      	mvns	r3, r3
 8102348:	69ba      	ldr	r2, [r7, #24]
 810234a:	4013      	ands	r3, r2
 810234c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 810234e:	683b      	ldr	r3, [r7, #0]
 8102350:	685b      	ldr	r3, [r3, #4]
 8102352:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8102356:	2b00      	cmp	r3, #0
 8102358:	d003      	beq.n	8102362 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 810235a:	69ba      	ldr	r2, [r7, #24]
 810235c:	693b      	ldr	r3, [r7, #16]
 810235e:	4313      	orrs	r3, r2
 8102360:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8102362:	697b      	ldr	r3, [r7, #20]
 8102364:	69ba      	ldr	r2, [r7, #24]
 8102366:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8102368:	69fb      	ldr	r3, [r7, #28]
 810236a:	3301      	adds	r3, #1
 810236c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810236e:	683b      	ldr	r3, [r7, #0]
 8102370:	681a      	ldr	r2, [r3, #0]
 8102372:	69fb      	ldr	r3, [r7, #28]
 8102374:	fa22 f303 	lsr.w	r3, r2, r3
 8102378:	2b00      	cmp	r3, #0
 810237a:	f47f ae63 	bne.w	8102044 <HAL_GPIO_Init+0x14>
  }
}
 810237e:	bf00      	nop
 8102380:	bf00      	nop
 8102382:	3724      	adds	r7, #36	@ 0x24
 8102384:	46bd      	mov	sp, r7
 8102386:	f85d 7b04 	ldr.w	r7, [sp], #4
 810238a:	4770      	bx	lr
 810238c:	58000400 	.word	0x58000400

08102390 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8102390:	b480      	push	{r7}
 8102392:	b083      	sub	sp, #12
 8102394:	af00      	add	r7, sp, #0
 8102396:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8102398:	4b05      	ldr	r3, [pc, #20]	@ (81023b0 <HAL_HSEM_ActivateNotification+0x20>)
 810239a:	681a      	ldr	r2, [r3, #0]
 810239c:	4904      	ldr	r1, [pc, #16]	@ (81023b0 <HAL_HSEM_ActivateNotification+0x20>)
 810239e:	687b      	ldr	r3, [r7, #4]
 81023a0:	4313      	orrs	r3, r2
 81023a2:	600b      	str	r3, [r1, #0]
#endif
}
 81023a4:	bf00      	nop
 81023a6:	370c      	adds	r7, #12
 81023a8:	46bd      	mov	sp, r7
 81023aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023ae:	4770      	bx	lr
 81023b0:	58026510 	.word	0x58026510

081023b4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 81023b4:	b580      	push	{r7, lr}
 81023b6:	b082      	sub	sp, #8
 81023b8:	af00      	add	r7, sp, #0
 81023ba:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 81023bc:	687b      	ldr	r3, [r7, #4]
 81023be:	2b00      	cmp	r3, #0
 81023c0:	d101      	bne.n	81023c6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 81023c2:	2301      	movs	r3, #1
 81023c4:	e08d      	b.n	81024e2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 81023c6:	687b      	ldr	r3, [r7, #4]
 81023c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81023cc:	b2db      	uxtb	r3, r3
 81023ce:	2b00      	cmp	r3, #0
 81023d0:	d106      	bne.n	81023e0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 81023d2:	687b      	ldr	r3, [r7, #4]
 81023d4:	2200      	movs	r2, #0
 81023d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 81023da:	6878      	ldr	r0, [r7, #4]
 81023dc:	f7ff fa64 	bl	81018a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 81023e0:	687b      	ldr	r3, [r7, #4]
 81023e2:	2224      	movs	r2, #36	@ 0x24
 81023e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 81023e8:	687b      	ldr	r3, [r7, #4]
 81023ea:	681b      	ldr	r3, [r3, #0]
 81023ec:	681a      	ldr	r2, [r3, #0]
 81023ee:	687b      	ldr	r3, [r7, #4]
 81023f0:	681b      	ldr	r3, [r3, #0]
 81023f2:	f022 0201 	bic.w	r2, r2, #1
 81023f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 81023f8:	687b      	ldr	r3, [r7, #4]
 81023fa:	685a      	ldr	r2, [r3, #4]
 81023fc:	687b      	ldr	r3, [r7, #4]
 81023fe:	681b      	ldr	r3, [r3, #0]
 8102400:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8102404:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8102406:	687b      	ldr	r3, [r7, #4]
 8102408:	681b      	ldr	r3, [r3, #0]
 810240a:	689a      	ldr	r2, [r3, #8]
 810240c:	687b      	ldr	r3, [r7, #4]
 810240e:	681b      	ldr	r3, [r3, #0]
 8102410:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8102414:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	68db      	ldr	r3, [r3, #12]
 810241a:	2b01      	cmp	r3, #1
 810241c:	d107      	bne.n	810242e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 810241e:	687b      	ldr	r3, [r7, #4]
 8102420:	689a      	ldr	r2, [r3, #8]
 8102422:	687b      	ldr	r3, [r7, #4]
 8102424:	681b      	ldr	r3, [r3, #0]
 8102426:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 810242a:	609a      	str	r2, [r3, #8]
 810242c:	e006      	b.n	810243c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 810242e:	687b      	ldr	r3, [r7, #4]
 8102430:	689a      	ldr	r2, [r3, #8]
 8102432:	687b      	ldr	r3, [r7, #4]
 8102434:	681b      	ldr	r3, [r3, #0]
 8102436:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 810243a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 810243c:	687b      	ldr	r3, [r7, #4]
 810243e:	68db      	ldr	r3, [r3, #12]
 8102440:	2b02      	cmp	r3, #2
 8102442:	d108      	bne.n	8102456 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8102444:	687b      	ldr	r3, [r7, #4]
 8102446:	681b      	ldr	r3, [r3, #0]
 8102448:	685a      	ldr	r2, [r3, #4]
 810244a:	687b      	ldr	r3, [r7, #4]
 810244c:	681b      	ldr	r3, [r3, #0]
 810244e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8102452:	605a      	str	r2, [r3, #4]
 8102454:	e007      	b.n	8102466 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	681b      	ldr	r3, [r3, #0]
 810245a:	685a      	ldr	r2, [r3, #4]
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	681b      	ldr	r3, [r3, #0]
 8102460:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8102464:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8102466:	687b      	ldr	r3, [r7, #4]
 8102468:	681b      	ldr	r3, [r3, #0]
 810246a:	685b      	ldr	r3, [r3, #4]
 810246c:	687a      	ldr	r2, [r7, #4]
 810246e:	6812      	ldr	r2, [r2, #0]
 8102470:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8102474:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8102478:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	681b      	ldr	r3, [r3, #0]
 810247e:	68da      	ldr	r2, [r3, #12]
 8102480:	687b      	ldr	r3, [r7, #4]
 8102482:	681b      	ldr	r3, [r3, #0]
 8102484:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8102488:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810248a:	687b      	ldr	r3, [r7, #4]
 810248c:	691a      	ldr	r2, [r3, #16]
 810248e:	687b      	ldr	r3, [r7, #4]
 8102490:	695b      	ldr	r3, [r3, #20]
 8102492:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	699b      	ldr	r3, [r3, #24]
 810249a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 810249c:	687b      	ldr	r3, [r7, #4]
 810249e:	681b      	ldr	r3, [r3, #0]
 81024a0:	430a      	orrs	r2, r1
 81024a2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 81024a4:	687b      	ldr	r3, [r7, #4]
 81024a6:	69d9      	ldr	r1, [r3, #28]
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	6a1a      	ldr	r2, [r3, #32]
 81024ac:	687b      	ldr	r3, [r7, #4]
 81024ae:	681b      	ldr	r3, [r3, #0]
 81024b0:	430a      	orrs	r2, r1
 81024b2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 81024b4:	687b      	ldr	r3, [r7, #4]
 81024b6:	681b      	ldr	r3, [r3, #0]
 81024b8:	681a      	ldr	r2, [r3, #0]
 81024ba:	687b      	ldr	r3, [r7, #4]
 81024bc:	681b      	ldr	r3, [r3, #0]
 81024be:	f042 0201 	orr.w	r2, r2, #1
 81024c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	2200      	movs	r2, #0
 81024c8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 81024ca:	687b      	ldr	r3, [r7, #4]
 81024cc:	2220      	movs	r2, #32
 81024ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 81024d2:	687b      	ldr	r3, [r7, #4]
 81024d4:	2200      	movs	r2, #0
 81024d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 81024d8:	687b      	ldr	r3, [r7, #4]
 81024da:	2200      	movs	r2, #0
 81024dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 81024e0:	2300      	movs	r3, #0
}
 81024e2:	4618      	mov	r0, r3
 81024e4:	3708      	adds	r7, #8
 81024e6:	46bd      	mov	sp, r7
 81024e8:	bd80      	pop	{r7, pc}
	...

081024ec <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 81024ec:	b580      	push	{r7, lr}
 81024ee:	b088      	sub	sp, #32
 81024f0:	af02      	add	r7, sp, #8
 81024f2:	60f8      	str	r0, [r7, #12]
 81024f4:	607a      	str	r2, [r7, #4]
 81024f6:	461a      	mov	r2, r3
 81024f8:	460b      	mov	r3, r1
 81024fa:	817b      	strh	r3, [r7, #10]
 81024fc:	4613      	mov	r3, r2
 81024fe:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102500:	68fb      	ldr	r3, [r7, #12]
 8102502:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8102506:	b2db      	uxtb	r3, r3
 8102508:	2b20      	cmp	r3, #32
 810250a:	f040 80fd 	bne.w	8102708 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 810250e:	68fb      	ldr	r3, [r7, #12]
 8102510:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8102514:	2b01      	cmp	r3, #1
 8102516:	d101      	bne.n	810251c <HAL_I2C_Master_Transmit+0x30>
 8102518:	2302      	movs	r3, #2
 810251a:	e0f6      	b.n	810270a <HAL_I2C_Master_Transmit+0x21e>
 810251c:	68fb      	ldr	r3, [r7, #12]
 810251e:	2201      	movs	r2, #1
 8102520:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102524:	f7ff fc5c 	bl	8101de0 <HAL_GetTick>
 8102528:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 810252a:	693b      	ldr	r3, [r7, #16]
 810252c:	9300      	str	r3, [sp, #0]
 810252e:	2319      	movs	r3, #25
 8102530:	2201      	movs	r2, #1
 8102532:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8102536:	68f8      	ldr	r0, [r7, #12]
 8102538:	f000 fcd6 	bl	8102ee8 <I2C_WaitOnFlagUntilTimeout>
 810253c:	4603      	mov	r3, r0
 810253e:	2b00      	cmp	r3, #0
 8102540:	d001      	beq.n	8102546 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8102542:	2301      	movs	r3, #1
 8102544:	e0e1      	b.n	810270a <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8102546:	68fb      	ldr	r3, [r7, #12]
 8102548:	2221      	movs	r2, #33	@ 0x21
 810254a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 810254e:	68fb      	ldr	r3, [r7, #12]
 8102550:	2210      	movs	r2, #16
 8102552:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102556:	68fb      	ldr	r3, [r7, #12]
 8102558:	2200      	movs	r2, #0
 810255a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 810255c:	68fb      	ldr	r3, [r7, #12]
 810255e:	687a      	ldr	r2, [r7, #4]
 8102560:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8102562:	68fb      	ldr	r3, [r7, #12]
 8102564:	893a      	ldrh	r2, [r7, #8]
 8102566:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8102568:	68fb      	ldr	r3, [r7, #12]
 810256a:	2200      	movs	r2, #0
 810256c:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810256e:	68fb      	ldr	r3, [r7, #12]
 8102570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102572:	b29b      	uxth	r3, r3
 8102574:	2bff      	cmp	r3, #255	@ 0xff
 8102576:	d906      	bls.n	8102586 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102578:	68fb      	ldr	r3, [r7, #12]
 810257a:	22ff      	movs	r2, #255	@ 0xff
 810257c:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 810257e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8102582:	617b      	str	r3, [r7, #20]
 8102584:	e007      	b.n	8102596 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102586:	68fb      	ldr	r3, [r7, #12]
 8102588:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810258a:	b29a      	uxth	r2, r3
 810258c:	68fb      	ldr	r3, [r7, #12]
 810258e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8102590:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8102594:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8102596:	68fb      	ldr	r3, [r7, #12]
 8102598:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810259a:	2b00      	cmp	r3, #0
 810259c:	d024      	beq.n	81025e8 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 810259e:	68fb      	ldr	r3, [r7, #12]
 81025a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81025a2:	781a      	ldrb	r2, [r3, #0]
 81025a4:	68fb      	ldr	r3, [r7, #12]
 81025a6:	681b      	ldr	r3, [r3, #0]
 81025a8:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 81025aa:	68fb      	ldr	r3, [r7, #12]
 81025ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 81025ae:	1c5a      	adds	r2, r3, #1
 81025b0:	68fb      	ldr	r3, [r7, #12]
 81025b2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 81025b4:	68fb      	ldr	r3, [r7, #12]
 81025b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81025b8:	b29b      	uxth	r3, r3
 81025ba:	3b01      	subs	r3, #1
 81025bc:	b29a      	uxth	r2, r3
 81025be:	68fb      	ldr	r3, [r7, #12]
 81025c0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 81025c2:	68fb      	ldr	r3, [r7, #12]
 81025c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81025c6:	3b01      	subs	r3, #1
 81025c8:	b29a      	uxth	r2, r3
 81025ca:	68fb      	ldr	r3, [r7, #12]
 81025cc:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 81025ce:	68fb      	ldr	r3, [r7, #12]
 81025d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81025d2:	b2db      	uxtb	r3, r3
 81025d4:	3301      	adds	r3, #1
 81025d6:	b2da      	uxtb	r2, r3
 81025d8:	8979      	ldrh	r1, [r7, #10]
 81025da:	4b4e      	ldr	r3, [pc, #312]	@ (8102714 <HAL_I2C_Master_Transmit+0x228>)
 81025dc:	9300      	str	r3, [sp, #0]
 81025de:	697b      	ldr	r3, [r7, #20]
 81025e0:	68f8      	ldr	r0, [r7, #12]
 81025e2:	f000 fe45 	bl	8103270 <I2C_TransferConfig>
 81025e6:	e066      	b.n	81026b6 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 81025e8:	68fb      	ldr	r3, [r7, #12]
 81025ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81025ec:	b2da      	uxtb	r2, r3
 81025ee:	8979      	ldrh	r1, [r7, #10]
 81025f0:	4b48      	ldr	r3, [pc, #288]	@ (8102714 <HAL_I2C_Master_Transmit+0x228>)
 81025f2:	9300      	str	r3, [sp, #0]
 81025f4:	697b      	ldr	r3, [r7, #20]
 81025f6:	68f8      	ldr	r0, [r7, #12]
 81025f8:	f000 fe3a 	bl	8103270 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 81025fc:	e05b      	b.n	81026b6 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81025fe:	693a      	ldr	r2, [r7, #16]
 8102600:	6a39      	ldr	r1, [r7, #32]
 8102602:	68f8      	ldr	r0, [r7, #12]
 8102604:	f000 fcc9 	bl	8102f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8102608:	4603      	mov	r3, r0
 810260a:	2b00      	cmp	r3, #0
 810260c:	d001      	beq.n	8102612 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 810260e:	2301      	movs	r3, #1
 8102610:	e07b      	b.n	810270a <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102612:	68fb      	ldr	r3, [r7, #12]
 8102614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102616:	781a      	ldrb	r2, [r3, #0]
 8102618:	68fb      	ldr	r3, [r7, #12]
 810261a:	681b      	ldr	r3, [r3, #0]
 810261c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810261e:	68fb      	ldr	r3, [r7, #12]
 8102620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102622:	1c5a      	adds	r2, r3, #1
 8102624:	68fb      	ldr	r3, [r7, #12]
 8102626:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8102628:	68fb      	ldr	r3, [r7, #12]
 810262a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810262c:	b29b      	uxth	r3, r3
 810262e:	3b01      	subs	r3, #1
 8102630:	b29a      	uxth	r2, r3
 8102632:	68fb      	ldr	r3, [r7, #12]
 8102634:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8102636:	68fb      	ldr	r3, [r7, #12]
 8102638:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810263a:	3b01      	subs	r3, #1
 810263c:	b29a      	uxth	r2, r3
 810263e:	68fb      	ldr	r3, [r7, #12]
 8102640:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102642:	68fb      	ldr	r3, [r7, #12]
 8102644:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102646:	b29b      	uxth	r3, r3
 8102648:	2b00      	cmp	r3, #0
 810264a:	d034      	beq.n	81026b6 <HAL_I2C_Master_Transmit+0x1ca>
 810264c:	68fb      	ldr	r3, [r7, #12]
 810264e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102650:	2b00      	cmp	r3, #0
 8102652:	d130      	bne.n	81026b6 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102654:	693b      	ldr	r3, [r7, #16]
 8102656:	9300      	str	r3, [sp, #0]
 8102658:	6a3b      	ldr	r3, [r7, #32]
 810265a:	2200      	movs	r2, #0
 810265c:	2180      	movs	r1, #128	@ 0x80
 810265e:	68f8      	ldr	r0, [r7, #12]
 8102660:	f000 fc42 	bl	8102ee8 <I2C_WaitOnFlagUntilTimeout>
 8102664:	4603      	mov	r3, r0
 8102666:	2b00      	cmp	r3, #0
 8102668:	d001      	beq.n	810266e <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 810266a:	2301      	movs	r3, #1
 810266c:	e04d      	b.n	810270a <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810266e:	68fb      	ldr	r3, [r7, #12]
 8102670:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102672:	b29b      	uxth	r3, r3
 8102674:	2bff      	cmp	r3, #255	@ 0xff
 8102676:	d90e      	bls.n	8102696 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102678:	68fb      	ldr	r3, [r7, #12]
 810267a:	22ff      	movs	r2, #255	@ 0xff
 810267c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 810267e:	68fb      	ldr	r3, [r7, #12]
 8102680:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102682:	b2da      	uxtb	r2, r3
 8102684:	8979      	ldrh	r1, [r7, #10]
 8102686:	2300      	movs	r3, #0
 8102688:	9300      	str	r3, [sp, #0]
 810268a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 810268e:	68f8      	ldr	r0, [r7, #12]
 8102690:	f000 fdee 	bl	8103270 <I2C_TransferConfig>
 8102694:	e00f      	b.n	81026b6 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102696:	68fb      	ldr	r3, [r7, #12]
 8102698:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810269a:	b29a      	uxth	r2, r3
 810269c:	68fb      	ldr	r3, [r7, #12]
 810269e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81026a0:	68fb      	ldr	r3, [r7, #12]
 81026a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81026a4:	b2da      	uxtb	r2, r3
 81026a6:	8979      	ldrh	r1, [r7, #10]
 81026a8:	2300      	movs	r3, #0
 81026aa:	9300      	str	r3, [sp, #0]
 81026ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81026b0:	68f8      	ldr	r0, [r7, #12]
 81026b2:	f000 fddd 	bl	8103270 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 81026b6:	68fb      	ldr	r3, [r7, #12]
 81026b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81026ba:	b29b      	uxth	r3, r3
 81026bc:	2b00      	cmp	r3, #0
 81026be:	d19e      	bne.n	81025fe <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81026c0:	693a      	ldr	r2, [r7, #16]
 81026c2:	6a39      	ldr	r1, [r7, #32]
 81026c4:	68f8      	ldr	r0, [r7, #12]
 81026c6:	f000 fcaf 	bl	8103028 <I2C_WaitOnSTOPFlagUntilTimeout>
 81026ca:	4603      	mov	r3, r0
 81026cc:	2b00      	cmp	r3, #0
 81026ce:	d001      	beq.n	81026d4 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 81026d0:	2301      	movs	r3, #1
 81026d2:	e01a      	b.n	810270a <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 81026d4:	68fb      	ldr	r3, [r7, #12]
 81026d6:	681b      	ldr	r3, [r3, #0]
 81026d8:	2220      	movs	r2, #32
 81026da:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 81026dc:	68fb      	ldr	r3, [r7, #12]
 81026de:	681b      	ldr	r3, [r3, #0]
 81026e0:	6859      	ldr	r1, [r3, #4]
 81026e2:	68fb      	ldr	r3, [r7, #12]
 81026e4:	681a      	ldr	r2, [r3, #0]
 81026e6:	4b0c      	ldr	r3, [pc, #48]	@ (8102718 <HAL_I2C_Master_Transmit+0x22c>)
 81026e8:	400b      	ands	r3, r1
 81026ea:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 81026ec:	68fb      	ldr	r3, [r7, #12]
 81026ee:	2220      	movs	r2, #32
 81026f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 81026f4:	68fb      	ldr	r3, [r7, #12]
 81026f6:	2200      	movs	r2, #0
 81026f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81026fc:	68fb      	ldr	r3, [r7, #12]
 81026fe:	2200      	movs	r2, #0
 8102700:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8102704:	2300      	movs	r3, #0
 8102706:	e000      	b.n	810270a <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8102708:	2302      	movs	r3, #2
  }
}
 810270a:	4618      	mov	r0, r3
 810270c:	3718      	adds	r7, #24
 810270e:	46bd      	mov	sp, r7
 8102710:	bd80      	pop	{r7, pc}
 8102712:	bf00      	nop
 8102714:	80002000 	.word	0x80002000
 8102718:	fe00e800 	.word	0xfe00e800

0810271c <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 810271c:	b580      	push	{r7, lr}
 810271e:	b088      	sub	sp, #32
 8102720:	af02      	add	r7, sp, #8
 8102722:	60f8      	str	r0, [r7, #12]
 8102724:	4608      	mov	r0, r1
 8102726:	4611      	mov	r1, r2
 8102728:	461a      	mov	r2, r3
 810272a:	4603      	mov	r3, r0
 810272c:	817b      	strh	r3, [r7, #10]
 810272e:	460b      	mov	r3, r1
 8102730:	813b      	strh	r3, [r7, #8]
 8102732:	4613      	mov	r3, r2
 8102734:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102736:	68fb      	ldr	r3, [r7, #12]
 8102738:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810273c:	b2db      	uxtb	r3, r3
 810273e:	2b20      	cmp	r3, #32
 8102740:	f040 80f9 	bne.w	8102936 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8102744:	6a3b      	ldr	r3, [r7, #32]
 8102746:	2b00      	cmp	r3, #0
 8102748:	d002      	beq.n	8102750 <HAL_I2C_Mem_Write+0x34>
 810274a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 810274c:	2b00      	cmp	r3, #0
 810274e:	d105      	bne.n	810275c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102750:	68fb      	ldr	r3, [r7, #12]
 8102752:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8102756:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8102758:	2301      	movs	r3, #1
 810275a:	e0ed      	b.n	8102938 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 810275c:	68fb      	ldr	r3, [r7, #12]
 810275e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8102762:	2b01      	cmp	r3, #1
 8102764:	d101      	bne.n	810276a <HAL_I2C_Mem_Write+0x4e>
 8102766:	2302      	movs	r3, #2
 8102768:	e0e6      	b.n	8102938 <HAL_I2C_Mem_Write+0x21c>
 810276a:	68fb      	ldr	r3, [r7, #12]
 810276c:	2201      	movs	r2, #1
 810276e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8102772:	f7ff fb35 	bl	8101de0 <HAL_GetTick>
 8102776:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8102778:	697b      	ldr	r3, [r7, #20]
 810277a:	9300      	str	r3, [sp, #0]
 810277c:	2319      	movs	r3, #25
 810277e:	2201      	movs	r2, #1
 8102780:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8102784:	68f8      	ldr	r0, [r7, #12]
 8102786:	f000 fbaf 	bl	8102ee8 <I2C_WaitOnFlagUntilTimeout>
 810278a:	4603      	mov	r3, r0
 810278c:	2b00      	cmp	r3, #0
 810278e:	d001      	beq.n	8102794 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8102790:	2301      	movs	r3, #1
 8102792:	e0d1      	b.n	8102938 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8102794:	68fb      	ldr	r3, [r7, #12]
 8102796:	2221      	movs	r2, #33	@ 0x21
 8102798:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 810279c:	68fb      	ldr	r3, [r7, #12]
 810279e:	2240      	movs	r2, #64	@ 0x40
 81027a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81027a4:	68fb      	ldr	r3, [r7, #12]
 81027a6:	2200      	movs	r2, #0
 81027a8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81027aa:	68fb      	ldr	r3, [r7, #12]
 81027ac:	6a3a      	ldr	r2, [r7, #32]
 81027ae:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81027b0:	68fb      	ldr	r3, [r7, #12]
 81027b2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 81027b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81027b6:	68fb      	ldr	r3, [r7, #12]
 81027b8:	2200      	movs	r2, #0
 81027ba:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81027bc:	88f8      	ldrh	r0, [r7, #6]
 81027be:	893a      	ldrh	r2, [r7, #8]
 81027c0:	8979      	ldrh	r1, [r7, #10]
 81027c2:	697b      	ldr	r3, [r7, #20]
 81027c4:	9301      	str	r3, [sp, #4]
 81027c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81027c8:	9300      	str	r3, [sp, #0]
 81027ca:	4603      	mov	r3, r0
 81027cc:	68f8      	ldr	r0, [r7, #12]
 81027ce:	f000 fabf 	bl	8102d50 <I2C_RequestMemoryWrite>
 81027d2:	4603      	mov	r3, r0
 81027d4:	2b00      	cmp	r3, #0
 81027d6:	d005      	beq.n	81027e4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 81027d8:	68fb      	ldr	r3, [r7, #12]
 81027da:	2200      	movs	r2, #0
 81027dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 81027e0:	2301      	movs	r3, #1
 81027e2:	e0a9      	b.n	8102938 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 81027e4:	68fb      	ldr	r3, [r7, #12]
 81027e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81027e8:	b29b      	uxth	r3, r3
 81027ea:	2bff      	cmp	r3, #255	@ 0xff
 81027ec:	d90e      	bls.n	810280c <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 81027ee:	68fb      	ldr	r3, [r7, #12]
 81027f0:	22ff      	movs	r2, #255	@ 0xff
 81027f2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 81027f4:	68fb      	ldr	r3, [r7, #12]
 81027f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81027f8:	b2da      	uxtb	r2, r3
 81027fa:	8979      	ldrh	r1, [r7, #10]
 81027fc:	2300      	movs	r3, #0
 81027fe:	9300      	str	r3, [sp, #0]
 8102800:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8102804:	68f8      	ldr	r0, [r7, #12]
 8102806:	f000 fd33 	bl	8103270 <I2C_TransferConfig>
 810280a:	e00f      	b.n	810282c <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 810280c:	68fb      	ldr	r3, [r7, #12]
 810280e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102810:	b29a      	uxth	r2, r3
 8102812:	68fb      	ldr	r3, [r7, #12]
 8102814:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8102816:	68fb      	ldr	r3, [r7, #12]
 8102818:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810281a:	b2da      	uxtb	r2, r3
 810281c:	8979      	ldrh	r1, [r7, #10]
 810281e:	2300      	movs	r3, #0
 8102820:	9300      	str	r3, [sp, #0]
 8102822:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8102826:	68f8      	ldr	r0, [r7, #12]
 8102828:	f000 fd22 	bl	8103270 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 810282c:	697a      	ldr	r2, [r7, #20]
 810282e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8102830:	68f8      	ldr	r0, [r7, #12]
 8102832:	f000 fbb2 	bl	8102f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8102836:	4603      	mov	r3, r0
 8102838:	2b00      	cmp	r3, #0
 810283a:	d001      	beq.n	8102840 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 810283c:	2301      	movs	r3, #1
 810283e:	e07b      	b.n	8102938 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8102840:	68fb      	ldr	r3, [r7, #12]
 8102842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102844:	781a      	ldrb	r2, [r3, #0]
 8102846:	68fb      	ldr	r3, [r7, #12]
 8102848:	681b      	ldr	r3, [r3, #0]
 810284a:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 810284c:	68fb      	ldr	r3, [r7, #12]
 810284e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102850:	1c5a      	adds	r2, r3, #1
 8102852:	68fb      	ldr	r3, [r7, #12]
 8102854:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8102856:	68fb      	ldr	r3, [r7, #12]
 8102858:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 810285a:	b29b      	uxth	r3, r3
 810285c:	3b01      	subs	r3, #1
 810285e:	b29a      	uxth	r2, r3
 8102860:	68fb      	ldr	r3, [r7, #12]
 8102862:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8102864:	68fb      	ldr	r3, [r7, #12]
 8102866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102868:	3b01      	subs	r3, #1
 810286a:	b29a      	uxth	r2, r3
 810286c:	68fb      	ldr	r3, [r7, #12]
 810286e:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102870:	68fb      	ldr	r3, [r7, #12]
 8102872:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102874:	b29b      	uxth	r3, r3
 8102876:	2b00      	cmp	r3, #0
 8102878:	d034      	beq.n	81028e4 <HAL_I2C_Mem_Write+0x1c8>
 810287a:	68fb      	ldr	r3, [r7, #12]
 810287c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 810287e:	2b00      	cmp	r3, #0
 8102880:	d130      	bne.n	81028e4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102882:	697b      	ldr	r3, [r7, #20]
 8102884:	9300      	str	r3, [sp, #0]
 8102886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102888:	2200      	movs	r2, #0
 810288a:	2180      	movs	r1, #128	@ 0x80
 810288c:	68f8      	ldr	r0, [r7, #12]
 810288e:	f000 fb2b 	bl	8102ee8 <I2C_WaitOnFlagUntilTimeout>
 8102892:	4603      	mov	r3, r0
 8102894:	2b00      	cmp	r3, #0
 8102896:	d001      	beq.n	810289c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8102898:	2301      	movs	r3, #1
 810289a:	e04d      	b.n	8102938 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 810289c:	68fb      	ldr	r3, [r7, #12]
 810289e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81028a0:	b29b      	uxth	r3, r3
 81028a2:	2bff      	cmp	r3, #255	@ 0xff
 81028a4:	d90e      	bls.n	81028c4 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 81028a6:	68fb      	ldr	r3, [r7, #12]
 81028a8:	22ff      	movs	r2, #255	@ 0xff
 81028aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 81028ac:	68fb      	ldr	r3, [r7, #12]
 81028ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81028b0:	b2da      	uxtb	r2, r3
 81028b2:	8979      	ldrh	r1, [r7, #10]
 81028b4:	2300      	movs	r3, #0
 81028b6:	9300      	str	r3, [sp, #0]
 81028b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 81028bc:	68f8      	ldr	r0, [r7, #12]
 81028be:	f000 fcd7 	bl	8103270 <I2C_TransferConfig>
 81028c2:	e00f      	b.n	81028e4 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 81028c4:	68fb      	ldr	r3, [r7, #12]
 81028c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81028c8:	b29a      	uxth	r2, r3
 81028ca:	68fb      	ldr	r3, [r7, #12]
 81028cc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 81028ce:	68fb      	ldr	r3, [r7, #12]
 81028d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 81028d2:	b2da      	uxtb	r2, r3
 81028d4:	8979      	ldrh	r1, [r7, #10]
 81028d6:	2300      	movs	r3, #0
 81028d8:	9300      	str	r3, [sp, #0]
 81028da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 81028de:	68f8      	ldr	r0, [r7, #12]
 81028e0:	f000 fcc6 	bl	8103270 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 81028e4:	68fb      	ldr	r3, [r7, #12]
 81028e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 81028e8:	b29b      	uxth	r3, r3
 81028ea:	2b00      	cmp	r3, #0
 81028ec:	d19e      	bne.n	810282c <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 81028ee:	697a      	ldr	r2, [r7, #20]
 81028f0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81028f2:	68f8      	ldr	r0, [r7, #12]
 81028f4:	f000 fb98 	bl	8103028 <I2C_WaitOnSTOPFlagUntilTimeout>
 81028f8:	4603      	mov	r3, r0
 81028fa:	2b00      	cmp	r3, #0
 81028fc:	d001      	beq.n	8102902 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 81028fe:	2301      	movs	r3, #1
 8102900:	e01a      	b.n	8102938 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102902:	68fb      	ldr	r3, [r7, #12]
 8102904:	681b      	ldr	r3, [r3, #0]
 8102906:	2220      	movs	r2, #32
 8102908:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810290a:	68fb      	ldr	r3, [r7, #12]
 810290c:	681b      	ldr	r3, [r3, #0]
 810290e:	6859      	ldr	r1, [r3, #4]
 8102910:	68fb      	ldr	r3, [r7, #12]
 8102912:	681a      	ldr	r2, [r3, #0]
 8102914:	4b0a      	ldr	r3, [pc, #40]	@ (8102940 <HAL_I2C_Mem_Write+0x224>)
 8102916:	400b      	ands	r3, r1
 8102918:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 810291a:	68fb      	ldr	r3, [r7, #12]
 810291c:	2220      	movs	r2, #32
 810291e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102922:	68fb      	ldr	r3, [r7, #12]
 8102924:	2200      	movs	r2, #0
 8102926:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 810292a:	68fb      	ldr	r3, [r7, #12]
 810292c:	2200      	movs	r2, #0
 810292e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8102932:	2300      	movs	r3, #0
 8102934:	e000      	b.n	8102938 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8102936:	2302      	movs	r3, #2
  }
}
 8102938:	4618      	mov	r0, r3
 810293a:	3718      	adds	r7, #24
 810293c:	46bd      	mov	sp, r7
 810293e:	bd80      	pop	{r7, pc}
 8102940:	fe00e800 	.word	0xfe00e800

08102944 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8102944:	b580      	push	{r7, lr}
 8102946:	b088      	sub	sp, #32
 8102948:	af02      	add	r7, sp, #8
 810294a:	60f8      	str	r0, [r7, #12]
 810294c:	4608      	mov	r0, r1
 810294e:	4611      	mov	r1, r2
 8102950:	461a      	mov	r2, r3
 8102952:	4603      	mov	r3, r0
 8102954:	817b      	strh	r3, [r7, #10]
 8102956:	460b      	mov	r3, r1
 8102958:	813b      	strh	r3, [r7, #8]
 810295a:	4613      	mov	r3, r2
 810295c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 810295e:	68fb      	ldr	r3, [r7, #12]
 8102960:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8102964:	b2db      	uxtb	r3, r3
 8102966:	2b20      	cmp	r3, #32
 8102968:	f040 80fd 	bne.w	8102b66 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 810296c:	6a3b      	ldr	r3, [r7, #32]
 810296e:	2b00      	cmp	r3, #0
 8102970:	d002      	beq.n	8102978 <HAL_I2C_Mem_Read+0x34>
 8102972:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8102974:	2b00      	cmp	r3, #0
 8102976:	d105      	bne.n	8102984 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8102978:	68fb      	ldr	r3, [r7, #12]
 810297a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 810297e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8102980:	2301      	movs	r3, #1
 8102982:	e0f1      	b.n	8102b68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102984:	68fb      	ldr	r3, [r7, #12]
 8102986:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 810298a:	2b01      	cmp	r3, #1
 810298c:	d101      	bne.n	8102992 <HAL_I2C_Mem_Read+0x4e>
 810298e:	2302      	movs	r3, #2
 8102990:	e0ea      	b.n	8102b68 <HAL_I2C_Mem_Read+0x224>
 8102992:	68fb      	ldr	r3, [r7, #12]
 8102994:	2201      	movs	r2, #1
 8102996:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 810299a:	f7ff fa21 	bl	8101de0 <HAL_GetTick>
 810299e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 81029a0:	697b      	ldr	r3, [r7, #20]
 81029a2:	9300      	str	r3, [sp, #0]
 81029a4:	2319      	movs	r3, #25
 81029a6:	2201      	movs	r2, #1
 81029a8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 81029ac:	68f8      	ldr	r0, [r7, #12]
 81029ae:	f000 fa9b 	bl	8102ee8 <I2C_WaitOnFlagUntilTimeout>
 81029b2:	4603      	mov	r3, r0
 81029b4:	2b00      	cmp	r3, #0
 81029b6:	d001      	beq.n	81029bc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 81029b8:	2301      	movs	r3, #1
 81029ba:	e0d5      	b.n	8102b68 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 81029bc:	68fb      	ldr	r3, [r7, #12]
 81029be:	2222      	movs	r2, #34	@ 0x22
 81029c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 81029c4:	68fb      	ldr	r3, [r7, #12]
 81029c6:	2240      	movs	r2, #64	@ 0x40
 81029c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 81029cc:	68fb      	ldr	r3, [r7, #12]
 81029ce:	2200      	movs	r2, #0
 81029d0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 81029d2:	68fb      	ldr	r3, [r7, #12]
 81029d4:	6a3a      	ldr	r2, [r7, #32]
 81029d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 81029d8:	68fb      	ldr	r3, [r7, #12]
 81029da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 81029dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 81029de:	68fb      	ldr	r3, [r7, #12]
 81029e0:	2200      	movs	r2, #0
 81029e2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 81029e4:	88f8      	ldrh	r0, [r7, #6]
 81029e6:	893a      	ldrh	r2, [r7, #8]
 81029e8:	8979      	ldrh	r1, [r7, #10]
 81029ea:	697b      	ldr	r3, [r7, #20]
 81029ec:	9301      	str	r3, [sp, #4]
 81029ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81029f0:	9300      	str	r3, [sp, #0]
 81029f2:	4603      	mov	r3, r0
 81029f4:	68f8      	ldr	r0, [r7, #12]
 81029f6:	f000 f9ff 	bl	8102df8 <I2C_RequestMemoryRead>
 81029fa:	4603      	mov	r3, r0
 81029fc:	2b00      	cmp	r3, #0
 81029fe:	d005      	beq.n	8102a0c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8102a00:	68fb      	ldr	r3, [r7, #12]
 8102a02:	2200      	movs	r2, #0
 8102a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8102a08:	2301      	movs	r3, #1
 8102a0a:	e0ad      	b.n	8102b68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102a0c:	68fb      	ldr	r3, [r7, #12]
 8102a0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102a10:	b29b      	uxth	r3, r3
 8102a12:	2bff      	cmp	r3, #255	@ 0xff
 8102a14:	d90e      	bls.n	8102a34 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8102a16:	68fb      	ldr	r3, [r7, #12]
 8102a18:	22ff      	movs	r2, #255	@ 0xff
 8102a1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8102a1c:	68fb      	ldr	r3, [r7, #12]
 8102a1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102a20:	b2da      	uxtb	r2, r3
 8102a22:	8979      	ldrh	r1, [r7, #10]
 8102a24:	4b52      	ldr	r3, [pc, #328]	@ (8102b70 <HAL_I2C_Mem_Read+0x22c>)
 8102a26:	9300      	str	r3, [sp, #0]
 8102a28:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8102a2c:	68f8      	ldr	r0, [r7, #12]
 8102a2e:	f000 fc1f 	bl	8103270 <I2C_TransferConfig>
 8102a32:	e00f      	b.n	8102a54 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8102a34:	68fb      	ldr	r3, [r7, #12]
 8102a36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102a38:	b29a      	uxth	r2, r3
 8102a3a:	68fb      	ldr	r3, [r7, #12]
 8102a3c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102a3e:	68fb      	ldr	r3, [r7, #12]
 8102a40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102a42:	b2da      	uxtb	r2, r3
 8102a44:	8979      	ldrh	r1, [r7, #10]
 8102a46:	4b4a      	ldr	r3, [pc, #296]	@ (8102b70 <HAL_I2C_Mem_Read+0x22c>)
 8102a48:	9300      	str	r3, [sp, #0]
 8102a4a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8102a4e:	68f8      	ldr	r0, [r7, #12]
 8102a50:	f000 fc0e 	bl	8103270 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8102a54:	697b      	ldr	r3, [r7, #20]
 8102a56:	9300      	str	r3, [sp, #0]
 8102a58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102a5a:	2200      	movs	r2, #0
 8102a5c:	2104      	movs	r1, #4
 8102a5e:	68f8      	ldr	r0, [r7, #12]
 8102a60:	f000 fa42 	bl	8102ee8 <I2C_WaitOnFlagUntilTimeout>
 8102a64:	4603      	mov	r3, r0
 8102a66:	2b00      	cmp	r3, #0
 8102a68:	d001      	beq.n	8102a6e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8102a6a:	2301      	movs	r3, #1
 8102a6c:	e07c      	b.n	8102b68 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8102a6e:	68fb      	ldr	r3, [r7, #12]
 8102a70:	681b      	ldr	r3, [r3, #0]
 8102a72:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8102a74:	68fb      	ldr	r3, [r7, #12]
 8102a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102a78:	b2d2      	uxtb	r2, r2
 8102a7a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8102a7c:	68fb      	ldr	r3, [r7, #12]
 8102a7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8102a80:	1c5a      	adds	r2, r3, #1
 8102a82:	68fb      	ldr	r3, [r7, #12]
 8102a84:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8102a86:	68fb      	ldr	r3, [r7, #12]
 8102a88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102a8a:	3b01      	subs	r3, #1
 8102a8c:	b29a      	uxth	r2, r3
 8102a8e:	68fb      	ldr	r3, [r7, #12]
 8102a90:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8102a92:	68fb      	ldr	r3, [r7, #12]
 8102a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102a96:	b29b      	uxth	r3, r3
 8102a98:	3b01      	subs	r3, #1
 8102a9a:	b29a      	uxth	r2, r3
 8102a9c:	68fb      	ldr	r3, [r7, #12]
 8102a9e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8102aa0:	68fb      	ldr	r3, [r7, #12]
 8102aa2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102aa4:	b29b      	uxth	r3, r3
 8102aa6:	2b00      	cmp	r3, #0
 8102aa8:	d034      	beq.n	8102b14 <HAL_I2C_Mem_Read+0x1d0>
 8102aaa:	68fb      	ldr	r3, [r7, #12]
 8102aac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102aae:	2b00      	cmp	r3, #0
 8102ab0:	d130      	bne.n	8102b14 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8102ab2:	697b      	ldr	r3, [r7, #20]
 8102ab4:	9300      	str	r3, [sp, #0]
 8102ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8102ab8:	2200      	movs	r2, #0
 8102aba:	2180      	movs	r1, #128	@ 0x80
 8102abc:	68f8      	ldr	r0, [r7, #12]
 8102abe:	f000 fa13 	bl	8102ee8 <I2C_WaitOnFlagUntilTimeout>
 8102ac2:	4603      	mov	r3, r0
 8102ac4:	2b00      	cmp	r3, #0
 8102ac6:	d001      	beq.n	8102acc <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8102ac8:	2301      	movs	r3, #1
 8102aca:	e04d      	b.n	8102b68 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8102acc:	68fb      	ldr	r3, [r7, #12]
 8102ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102ad0:	b29b      	uxth	r3, r3
 8102ad2:	2bff      	cmp	r3, #255	@ 0xff
 8102ad4:	d90e      	bls.n	8102af4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8102ad6:	68fb      	ldr	r3, [r7, #12]
 8102ad8:	22ff      	movs	r2, #255	@ 0xff
 8102ada:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8102adc:	68fb      	ldr	r3, [r7, #12]
 8102ade:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102ae0:	b2da      	uxtb	r2, r3
 8102ae2:	8979      	ldrh	r1, [r7, #10]
 8102ae4:	2300      	movs	r3, #0
 8102ae6:	9300      	str	r3, [sp, #0]
 8102ae8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8102aec:	68f8      	ldr	r0, [r7, #12]
 8102aee:	f000 fbbf 	bl	8103270 <I2C_TransferConfig>
 8102af2:	e00f      	b.n	8102b14 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8102af4:	68fb      	ldr	r3, [r7, #12]
 8102af6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102af8:	b29a      	uxth	r2, r3
 8102afa:	68fb      	ldr	r3, [r7, #12]
 8102afc:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8102afe:	68fb      	ldr	r3, [r7, #12]
 8102b00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8102b02:	b2da      	uxtb	r2, r3
 8102b04:	8979      	ldrh	r1, [r7, #10]
 8102b06:	2300      	movs	r3, #0
 8102b08:	9300      	str	r3, [sp, #0]
 8102b0a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8102b0e:	68f8      	ldr	r0, [r7, #12]
 8102b10:	f000 fbae 	bl	8103270 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8102b14:	68fb      	ldr	r3, [r7, #12]
 8102b16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8102b18:	b29b      	uxth	r3, r3
 8102b1a:	2b00      	cmp	r3, #0
 8102b1c:	d19a      	bne.n	8102a54 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8102b1e:	697a      	ldr	r2, [r7, #20]
 8102b20:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8102b22:	68f8      	ldr	r0, [r7, #12]
 8102b24:	f000 fa80 	bl	8103028 <I2C_WaitOnSTOPFlagUntilTimeout>
 8102b28:	4603      	mov	r3, r0
 8102b2a:	2b00      	cmp	r3, #0
 8102b2c:	d001      	beq.n	8102b32 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8102b2e:	2301      	movs	r3, #1
 8102b30:	e01a      	b.n	8102b68 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102b32:	68fb      	ldr	r3, [r7, #12]
 8102b34:	681b      	ldr	r3, [r3, #0]
 8102b36:	2220      	movs	r2, #32
 8102b38:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8102b3a:	68fb      	ldr	r3, [r7, #12]
 8102b3c:	681b      	ldr	r3, [r3, #0]
 8102b3e:	6859      	ldr	r1, [r3, #4]
 8102b40:	68fb      	ldr	r3, [r7, #12]
 8102b42:	681a      	ldr	r2, [r3, #0]
 8102b44:	4b0b      	ldr	r3, [pc, #44]	@ (8102b74 <HAL_I2C_Mem_Read+0x230>)
 8102b46:	400b      	ands	r3, r1
 8102b48:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8102b4a:	68fb      	ldr	r3, [r7, #12]
 8102b4c:	2220      	movs	r2, #32
 8102b4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8102b52:	68fb      	ldr	r3, [r7, #12]
 8102b54:	2200      	movs	r2, #0
 8102b56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102b5a:	68fb      	ldr	r3, [r7, #12]
 8102b5c:	2200      	movs	r2, #0
 8102b5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8102b62:	2300      	movs	r3, #0
 8102b64:	e000      	b.n	8102b68 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8102b66:	2302      	movs	r3, #2
  }
}
 8102b68:	4618      	mov	r0, r3
 8102b6a:	3718      	adds	r7, #24
 8102b6c:	46bd      	mov	sp, r7
 8102b6e:	bd80      	pop	{r7, pc}
 8102b70:	80002400 	.word	0x80002400
 8102b74:	fe00e800 	.word	0xfe00e800

08102b78 <HAL_I2C_IsDeviceReady>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials,
                                        uint32_t Timeout)
{
 8102b78:	b580      	push	{r7, lr}
 8102b7a:	b08a      	sub	sp, #40	@ 0x28
 8102b7c:	af02      	add	r7, sp, #8
 8102b7e:	60f8      	str	r0, [r7, #12]
 8102b80:	607a      	str	r2, [r7, #4]
 8102b82:	603b      	str	r3, [r7, #0]
 8102b84:	460b      	mov	r3, r1
 8102b86:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 8102b88:	2300      	movs	r3, #0
 8102b8a:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8102b8c:	68fb      	ldr	r3, [r7, #12]
 8102b8e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8102b92:	b2db      	uxtb	r3, r3
 8102b94:	2b20      	cmp	r3, #32
 8102b96:	f040 80d6 	bne.w	8102d46 <HAL_I2C_IsDeviceReady+0x1ce>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8102b9a:	68fb      	ldr	r3, [r7, #12]
 8102b9c:	681b      	ldr	r3, [r3, #0]
 8102b9e:	699b      	ldr	r3, [r3, #24]
 8102ba0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8102ba4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102ba8:	d101      	bne.n	8102bae <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 8102baa:	2302      	movs	r3, #2
 8102bac:	e0cc      	b.n	8102d48 <HAL_I2C_IsDeviceReady+0x1d0>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8102bae:	68fb      	ldr	r3, [r7, #12]
 8102bb0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8102bb4:	2b01      	cmp	r3, #1
 8102bb6:	d101      	bne.n	8102bbc <HAL_I2C_IsDeviceReady+0x44>
 8102bb8:	2302      	movs	r3, #2
 8102bba:	e0c5      	b.n	8102d48 <HAL_I2C_IsDeviceReady+0x1d0>
 8102bbc:	68fb      	ldr	r3, [r7, #12]
 8102bbe:	2201      	movs	r2, #1
 8102bc0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8102bc4:	68fb      	ldr	r3, [r7, #12]
 8102bc6:	2224      	movs	r2, #36	@ 0x24
 8102bc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8102bcc:	68fb      	ldr	r3, [r7, #12]
 8102bce:	2200      	movs	r2, #0
 8102bd0:	645a      	str	r2, [r3, #68]	@ 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8102bd2:	68fb      	ldr	r3, [r7, #12]
 8102bd4:	68db      	ldr	r3, [r3, #12]
 8102bd6:	2b01      	cmp	r3, #1
 8102bd8:	d107      	bne.n	8102bea <HAL_I2C_IsDeviceReady+0x72>
 8102bda:	897b      	ldrh	r3, [r7, #10]
 8102bdc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8102be0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8102be4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8102be8:	e006      	b.n	8102bf8 <HAL_I2C_IsDeviceReady+0x80>
 8102bea:	897b      	ldrh	r3, [r7, #10]
 8102bec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8102bf0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8102bf4:	f443 5320 	orr.w	r3, r3, #10240	@ 0x2800
 8102bf8:	68fa      	ldr	r2, [r7, #12]
 8102bfa:	6812      	ldr	r2, [r2, #0]
 8102bfc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8102bfe:	f7ff f8ef 	bl	8101de0 <HAL_GetTick>
 8102c02:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102c04:	68fb      	ldr	r3, [r7, #12]
 8102c06:	681b      	ldr	r3, [r3, #0]
 8102c08:	699b      	ldr	r3, [r3, #24]
 8102c0a:	f003 0320 	and.w	r3, r3, #32
 8102c0e:	2b20      	cmp	r3, #32
 8102c10:	bf0c      	ite	eq
 8102c12:	2301      	moveq	r3, #1
 8102c14:	2300      	movne	r3, #0
 8102c16:	b2db      	uxtb	r3, r3
 8102c18:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102c1a:	68fb      	ldr	r3, [r7, #12]
 8102c1c:	681b      	ldr	r3, [r3, #0]
 8102c1e:	699b      	ldr	r3, [r3, #24]
 8102c20:	f003 0310 	and.w	r3, r3, #16
 8102c24:	2b10      	cmp	r3, #16
 8102c26:	bf0c      	ite	eq
 8102c28:	2301      	moveq	r3, #1
 8102c2a:	2300      	movne	r3, #0
 8102c2c:	b2db      	uxtb	r3, r3
 8102c2e:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102c30:	e034      	b.n	8102c9c <HAL_I2C_IsDeviceReady+0x124>
      {
        if (Timeout != HAL_MAX_DELAY)
 8102c32:	683b      	ldr	r3, [r7, #0]
 8102c34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8102c38:	d01a      	beq.n	8102c70 <HAL_I2C_IsDeviceReady+0xf8>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8102c3a:	f7ff f8d1 	bl	8101de0 <HAL_GetTick>
 8102c3e:	4602      	mov	r2, r0
 8102c40:	69bb      	ldr	r3, [r7, #24]
 8102c42:	1ad3      	subs	r3, r2, r3
 8102c44:	683a      	ldr	r2, [r7, #0]
 8102c46:	429a      	cmp	r2, r3
 8102c48:	d302      	bcc.n	8102c50 <HAL_I2C_IsDeviceReady+0xd8>
 8102c4a:	683b      	ldr	r3, [r7, #0]
 8102c4c:	2b00      	cmp	r3, #0
 8102c4e:	d10f      	bne.n	8102c70 <HAL_I2C_IsDeviceReady+0xf8>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8102c50:	68fb      	ldr	r3, [r7, #12]
 8102c52:	2220      	movs	r2, #32
 8102c54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102c58:	68fb      	ldr	r3, [r7, #12]
 8102c5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102c5c:	f043 0220 	orr.w	r2, r3, #32
 8102c60:	68fb      	ldr	r3, [r7, #12]
 8102c62:	645a      	str	r2, [r3, #68]	@ 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8102c64:	68fb      	ldr	r3, [r7, #12]
 8102c66:	2200      	movs	r2, #0
 8102c68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

            return HAL_ERROR;
 8102c6c:	2301      	movs	r3, #1
 8102c6e:	e06b      	b.n	8102d48 <HAL_I2C_IsDeviceReady+0x1d0>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8102c70:	68fb      	ldr	r3, [r7, #12]
 8102c72:	681b      	ldr	r3, [r3, #0]
 8102c74:	699b      	ldr	r3, [r3, #24]
 8102c76:	f003 0320 	and.w	r3, r3, #32
 8102c7a:	2b20      	cmp	r3, #32
 8102c7c:	bf0c      	ite	eq
 8102c7e:	2301      	moveq	r3, #1
 8102c80:	2300      	movne	r3, #0
 8102c82:	b2db      	uxtb	r3, r3
 8102c84:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8102c86:	68fb      	ldr	r3, [r7, #12]
 8102c88:	681b      	ldr	r3, [r3, #0]
 8102c8a:	699b      	ldr	r3, [r3, #24]
 8102c8c:	f003 0310 	and.w	r3, r3, #16
 8102c90:	2b10      	cmp	r3, #16
 8102c92:	bf0c      	ite	eq
 8102c94:	2301      	moveq	r3, #1
 8102c96:	2300      	movne	r3, #0
 8102c98:	b2db      	uxtb	r3, r3
 8102c9a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8102c9c:	7ffb      	ldrb	r3, [r7, #31]
 8102c9e:	2b00      	cmp	r3, #0
 8102ca0:	d102      	bne.n	8102ca8 <HAL_I2C_IsDeviceReady+0x130>
 8102ca2:	7fbb      	ldrb	r3, [r7, #30]
 8102ca4:	2b00      	cmp	r3, #0
 8102ca6:	d0c4      	beq.n	8102c32 <HAL_I2C_IsDeviceReady+0xba>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8102ca8:	68fb      	ldr	r3, [r7, #12]
 8102caa:	681b      	ldr	r3, [r3, #0]
 8102cac:	699b      	ldr	r3, [r3, #24]
 8102cae:	f003 0310 	and.w	r3, r3, #16
 8102cb2:	2b10      	cmp	r3, #16
 8102cb4:	d01a      	beq.n	8102cec <HAL_I2C_IsDeviceReady+0x174>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102cb6:	69bb      	ldr	r3, [r7, #24]
 8102cb8:	9300      	str	r3, [sp, #0]
 8102cba:	683b      	ldr	r3, [r7, #0]
 8102cbc:	2200      	movs	r2, #0
 8102cbe:	2120      	movs	r1, #32
 8102cc0:	68f8      	ldr	r0, [r7, #12]
 8102cc2:	f000 f911 	bl	8102ee8 <I2C_WaitOnFlagUntilTimeout>
 8102cc6:	4603      	mov	r3, r0
 8102cc8:	2b00      	cmp	r3, #0
 8102cca:	d001      	beq.n	8102cd0 <HAL_I2C_IsDeviceReady+0x158>
        {
          return HAL_ERROR;
 8102ccc:	2301      	movs	r3, #1
 8102cce:	e03b      	b.n	8102d48 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102cd0:	68fb      	ldr	r3, [r7, #12]
 8102cd2:	681b      	ldr	r3, [r3, #0]
 8102cd4:	2220      	movs	r2, #32
 8102cd6:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8102cd8:	68fb      	ldr	r3, [r7, #12]
 8102cda:	2220      	movs	r2, #32
 8102cdc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8102ce0:	68fb      	ldr	r3, [r7, #12]
 8102ce2:	2200      	movs	r2, #0
 8102ce4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_OK;
 8102ce8:	2300      	movs	r3, #0
 8102cea:	e02d      	b.n	8102d48 <HAL_I2C_IsDeviceReady+0x1d0>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8102cec:	69bb      	ldr	r3, [r7, #24]
 8102cee:	9300      	str	r3, [sp, #0]
 8102cf0:	683b      	ldr	r3, [r7, #0]
 8102cf2:	2200      	movs	r2, #0
 8102cf4:	2120      	movs	r1, #32
 8102cf6:	68f8      	ldr	r0, [r7, #12]
 8102cf8:	f000 f8f6 	bl	8102ee8 <I2C_WaitOnFlagUntilTimeout>
 8102cfc:	4603      	mov	r3, r0
 8102cfe:	2b00      	cmp	r3, #0
 8102d00:	d001      	beq.n	8102d06 <HAL_I2C_IsDeviceReady+0x18e>
        {
          return HAL_ERROR;
 8102d02:	2301      	movs	r3, #1
 8102d04:	e020      	b.n	8102d48 <HAL_I2C_IsDeviceReady+0x1d0>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8102d06:	68fb      	ldr	r3, [r7, #12]
 8102d08:	681b      	ldr	r3, [r3, #0]
 8102d0a:	2210      	movs	r2, #16
 8102d0c:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8102d0e:	68fb      	ldr	r3, [r7, #12]
 8102d10:	681b      	ldr	r3, [r3, #0]
 8102d12:	2220      	movs	r2, #32
 8102d14:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8102d16:	697b      	ldr	r3, [r7, #20]
 8102d18:	3301      	adds	r3, #1
 8102d1a:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8102d1c:	697b      	ldr	r3, [r7, #20]
 8102d1e:	687a      	ldr	r2, [r7, #4]
 8102d20:	429a      	cmp	r2, r3
 8102d22:	f63f af56 	bhi.w	8102bd2 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8102d26:	68fb      	ldr	r3, [r7, #12]
 8102d28:	2220      	movs	r2, #32
 8102d2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102d2e:	68fb      	ldr	r3, [r7, #12]
 8102d30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102d32:	f043 0220 	orr.w	r2, r3, #32
 8102d36:	68fb      	ldr	r3, [r7, #12]
 8102d38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8102d3a:	68fb      	ldr	r3, [r7, #12]
 8102d3c:	2200      	movs	r2, #0
 8102d3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_ERROR;
 8102d42:	2301      	movs	r3, #1
 8102d44:	e000      	b.n	8102d48 <HAL_I2C_IsDeviceReady+0x1d0>
  }
  else
  {
    return HAL_BUSY;
 8102d46:	2302      	movs	r3, #2
  }
}
 8102d48:	4618      	mov	r0, r3
 8102d4a:	3720      	adds	r7, #32
 8102d4c:	46bd      	mov	sp, r7
 8102d4e:	bd80      	pop	{r7, pc}

08102d50 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8102d50:	b580      	push	{r7, lr}
 8102d52:	b086      	sub	sp, #24
 8102d54:	af02      	add	r7, sp, #8
 8102d56:	60f8      	str	r0, [r7, #12]
 8102d58:	4608      	mov	r0, r1
 8102d5a:	4611      	mov	r1, r2
 8102d5c:	461a      	mov	r2, r3
 8102d5e:	4603      	mov	r3, r0
 8102d60:	817b      	strh	r3, [r7, #10]
 8102d62:	460b      	mov	r3, r1
 8102d64:	813b      	strh	r3, [r7, #8]
 8102d66:	4613      	mov	r3, r2
 8102d68:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8102d6a:	88fb      	ldrh	r3, [r7, #6]
 8102d6c:	b2da      	uxtb	r2, r3
 8102d6e:	8979      	ldrh	r1, [r7, #10]
 8102d70:	4b20      	ldr	r3, [pc, #128]	@ (8102df4 <I2C_RequestMemoryWrite+0xa4>)
 8102d72:	9300      	str	r3, [sp, #0]
 8102d74:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8102d78:	68f8      	ldr	r0, [r7, #12]
 8102d7a:	f000 fa79 	bl	8103270 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102d7e:	69fa      	ldr	r2, [r7, #28]
 8102d80:	69b9      	ldr	r1, [r7, #24]
 8102d82:	68f8      	ldr	r0, [r7, #12]
 8102d84:	f000 f909 	bl	8102f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8102d88:	4603      	mov	r3, r0
 8102d8a:	2b00      	cmp	r3, #0
 8102d8c:	d001      	beq.n	8102d92 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8102d8e:	2301      	movs	r3, #1
 8102d90:	e02c      	b.n	8102dec <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102d92:	88fb      	ldrh	r3, [r7, #6]
 8102d94:	2b01      	cmp	r3, #1
 8102d96:	d105      	bne.n	8102da4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102d98:	893b      	ldrh	r3, [r7, #8]
 8102d9a:	b2da      	uxtb	r2, r3
 8102d9c:	68fb      	ldr	r3, [r7, #12]
 8102d9e:	681b      	ldr	r3, [r3, #0]
 8102da0:	629a      	str	r2, [r3, #40]	@ 0x28
 8102da2:	e015      	b.n	8102dd0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102da4:	893b      	ldrh	r3, [r7, #8]
 8102da6:	0a1b      	lsrs	r3, r3, #8
 8102da8:	b29b      	uxth	r3, r3
 8102daa:	b2da      	uxtb	r2, r3
 8102dac:	68fb      	ldr	r3, [r7, #12]
 8102dae:	681b      	ldr	r3, [r3, #0]
 8102db0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102db2:	69fa      	ldr	r2, [r7, #28]
 8102db4:	69b9      	ldr	r1, [r7, #24]
 8102db6:	68f8      	ldr	r0, [r7, #12]
 8102db8:	f000 f8ef 	bl	8102f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8102dbc:	4603      	mov	r3, r0
 8102dbe:	2b00      	cmp	r3, #0
 8102dc0:	d001      	beq.n	8102dc6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8102dc2:	2301      	movs	r3, #1
 8102dc4:	e012      	b.n	8102dec <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102dc6:	893b      	ldrh	r3, [r7, #8]
 8102dc8:	b2da      	uxtb	r2, r3
 8102dca:	68fb      	ldr	r3, [r7, #12]
 8102dcc:	681b      	ldr	r3, [r3, #0]
 8102dce:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8102dd0:	69fb      	ldr	r3, [r7, #28]
 8102dd2:	9300      	str	r3, [sp, #0]
 8102dd4:	69bb      	ldr	r3, [r7, #24]
 8102dd6:	2200      	movs	r2, #0
 8102dd8:	2180      	movs	r1, #128	@ 0x80
 8102dda:	68f8      	ldr	r0, [r7, #12]
 8102ddc:	f000 f884 	bl	8102ee8 <I2C_WaitOnFlagUntilTimeout>
 8102de0:	4603      	mov	r3, r0
 8102de2:	2b00      	cmp	r3, #0
 8102de4:	d001      	beq.n	8102dea <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8102de6:	2301      	movs	r3, #1
 8102de8:	e000      	b.n	8102dec <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8102dea:	2300      	movs	r3, #0
}
 8102dec:	4618      	mov	r0, r3
 8102dee:	3710      	adds	r7, #16
 8102df0:	46bd      	mov	sp, r7
 8102df2:	bd80      	pop	{r7, pc}
 8102df4:	80002000 	.word	0x80002000

08102df8 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8102df8:	b580      	push	{r7, lr}
 8102dfa:	b086      	sub	sp, #24
 8102dfc:	af02      	add	r7, sp, #8
 8102dfe:	60f8      	str	r0, [r7, #12]
 8102e00:	4608      	mov	r0, r1
 8102e02:	4611      	mov	r1, r2
 8102e04:	461a      	mov	r2, r3
 8102e06:	4603      	mov	r3, r0
 8102e08:	817b      	strh	r3, [r7, #10]
 8102e0a:	460b      	mov	r3, r1
 8102e0c:	813b      	strh	r3, [r7, #8]
 8102e0e:	4613      	mov	r3, r2
 8102e10:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8102e12:	88fb      	ldrh	r3, [r7, #6]
 8102e14:	b2da      	uxtb	r2, r3
 8102e16:	8979      	ldrh	r1, [r7, #10]
 8102e18:	4b20      	ldr	r3, [pc, #128]	@ (8102e9c <I2C_RequestMemoryRead+0xa4>)
 8102e1a:	9300      	str	r3, [sp, #0]
 8102e1c:	2300      	movs	r3, #0
 8102e1e:	68f8      	ldr	r0, [r7, #12]
 8102e20:	f000 fa26 	bl	8103270 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102e24:	69fa      	ldr	r2, [r7, #28]
 8102e26:	69b9      	ldr	r1, [r7, #24]
 8102e28:	68f8      	ldr	r0, [r7, #12]
 8102e2a:	f000 f8b6 	bl	8102f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8102e2e:	4603      	mov	r3, r0
 8102e30:	2b00      	cmp	r3, #0
 8102e32:	d001      	beq.n	8102e38 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8102e34:	2301      	movs	r3, #1
 8102e36:	e02c      	b.n	8102e92 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8102e38:	88fb      	ldrh	r3, [r7, #6]
 8102e3a:	2b01      	cmp	r3, #1
 8102e3c:	d105      	bne.n	8102e4a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102e3e:	893b      	ldrh	r3, [r7, #8]
 8102e40:	b2da      	uxtb	r2, r3
 8102e42:	68fb      	ldr	r3, [r7, #12]
 8102e44:	681b      	ldr	r3, [r3, #0]
 8102e46:	629a      	str	r2, [r3, #40]	@ 0x28
 8102e48:	e015      	b.n	8102e76 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8102e4a:	893b      	ldrh	r3, [r7, #8]
 8102e4c:	0a1b      	lsrs	r3, r3, #8
 8102e4e:	b29b      	uxth	r3, r3
 8102e50:	b2da      	uxtb	r2, r3
 8102e52:	68fb      	ldr	r3, [r7, #12]
 8102e54:	681b      	ldr	r3, [r3, #0]
 8102e56:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8102e58:	69fa      	ldr	r2, [r7, #28]
 8102e5a:	69b9      	ldr	r1, [r7, #24]
 8102e5c:	68f8      	ldr	r0, [r7, #12]
 8102e5e:	f000 f89c 	bl	8102f9a <I2C_WaitOnTXISFlagUntilTimeout>
 8102e62:	4603      	mov	r3, r0
 8102e64:	2b00      	cmp	r3, #0
 8102e66:	d001      	beq.n	8102e6c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8102e68:	2301      	movs	r3, #1
 8102e6a:	e012      	b.n	8102e92 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8102e6c:	893b      	ldrh	r3, [r7, #8]
 8102e6e:	b2da      	uxtb	r2, r3
 8102e70:	68fb      	ldr	r3, [r7, #12]
 8102e72:	681b      	ldr	r3, [r3, #0]
 8102e74:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8102e76:	69fb      	ldr	r3, [r7, #28]
 8102e78:	9300      	str	r3, [sp, #0]
 8102e7a:	69bb      	ldr	r3, [r7, #24]
 8102e7c:	2200      	movs	r2, #0
 8102e7e:	2140      	movs	r1, #64	@ 0x40
 8102e80:	68f8      	ldr	r0, [r7, #12]
 8102e82:	f000 f831 	bl	8102ee8 <I2C_WaitOnFlagUntilTimeout>
 8102e86:	4603      	mov	r3, r0
 8102e88:	2b00      	cmp	r3, #0
 8102e8a:	d001      	beq.n	8102e90 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8102e8c:	2301      	movs	r3, #1
 8102e8e:	e000      	b.n	8102e92 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8102e90:	2300      	movs	r3, #0
}
 8102e92:	4618      	mov	r0, r3
 8102e94:	3710      	adds	r7, #16
 8102e96:	46bd      	mov	sp, r7
 8102e98:	bd80      	pop	{r7, pc}
 8102e9a:	bf00      	nop
 8102e9c:	80002000 	.word	0x80002000

08102ea0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8102ea0:	b480      	push	{r7}
 8102ea2:	b083      	sub	sp, #12
 8102ea4:	af00      	add	r7, sp, #0
 8102ea6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8102ea8:	687b      	ldr	r3, [r7, #4]
 8102eaa:	681b      	ldr	r3, [r3, #0]
 8102eac:	699b      	ldr	r3, [r3, #24]
 8102eae:	f003 0302 	and.w	r3, r3, #2
 8102eb2:	2b02      	cmp	r3, #2
 8102eb4:	d103      	bne.n	8102ebe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8102eb6:	687b      	ldr	r3, [r7, #4]
 8102eb8:	681b      	ldr	r3, [r3, #0]
 8102eba:	2200      	movs	r2, #0
 8102ebc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8102ebe:	687b      	ldr	r3, [r7, #4]
 8102ec0:	681b      	ldr	r3, [r3, #0]
 8102ec2:	699b      	ldr	r3, [r3, #24]
 8102ec4:	f003 0301 	and.w	r3, r3, #1
 8102ec8:	2b01      	cmp	r3, #1
 8102eca:	d007      	beq.n	8102edc <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8102ecc:	687b      	ldr	r3, [r7, #4]
 8102ece:	681b      	ldr	r3, [r3, #0]
 8102ed0:	699a      	ldr	r2, [r3, #24]
 8102ed2:	687b      	ldr	r3, [r7, #4]
 8102ed4:	681b      	ldr	r3, [r3, #0]
 8102ed6:	f042 0201 	orr.w	r2, r2, #1
 8102eda:	619a      	str	r2, [r3, #24]
  }
}
 8102edc:	bf00      	nop
 8102ede:	370c      	adds	r7, #12
 8102ee0:	46bd      	mov	sp, r7
 8102ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ee6:	4770      	bx	lr

08102ee8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8102ee8:	b580      	push	{r7, lr}
 8102eea:	b084      	sub	sp, #16
 8102eec:	af00      	add	r7, sp, #0
 8102eee:	60f8      	str	r0, [r7, #12]
 8102ef0:	60b9      	str	r1, [r7, #8]
 8102ef2:	603b      	str	r3, [r7, #0]
 8102ef4:	4613      	mov	r3, r2
 8102ef6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102ef8:	e03b      	b.n	8102f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102efa:	69ba      	ldr	r2, [r7, #24]
 8102efc:	6839      	ldr	r1, [r7, #0]
 8102efe:	68f8      	ldr	r0, [r7, #12]
 8102f00:	f000 f8d6 	bl	81030b0 <I2C_IsErrorOccurred>
 8102f04:	4603      	mov	r3, r0
 8102f06:	2b00      	cmp	r3, #0
 8102f08:	d001      	beq.n	8102f0e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8102f0a:	2301      	movs	r3, #1
 8102f0c:	e041      	b.n	8102f92 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102f0e:	683b      	ldr	r3, [r7, #0]
 8102f10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8102f14:	d02d      	beq.n	8102f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102f16:	f7fe ff63 	bl	8101de0 <HAL_GetTick>
 8102f1a:	4602      	mov	r2, r0
 8102f1c:	69bb      	ldr	r3, [r7, #24]
 8102f1e:	1ad3      	subs	r3, r2, r3
 8102f20:	683a      	ldr	r2, [r7, #0]
 8102f22:	429a      	cmp	r2, r3
 8102f24:	d302      	bcc.n	8102f2c <I2C_WaitOnFlagUntilTimeout+0x44>
 8102f26:	683b      	ldr	r3, [r7, #0]
 8102f28:	2b00      	cmp	r3, #0
 8102f2a:	d122      	bne.n	8102f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8102f2c:	68fb      	ldr	r3, [r7, #12]
 8102f2e:	681b      	ldr	r3, [r3, #0]
 8102f30:	699a      	ldr	r2, [r3, #24]
 8102f32:	68bb      	ldr	r3, [r7, #8]
 8102f34:	4013      	ands	r3, r2
 8102f36:	68ba      	ldr	r2, [r7, #8]
 8102f38:	429a      	cmp	r2, r3
 8102f3a:	bf0c      	ite	eq
 8102f3c:	2301      	moveq	r3, #1
 8102f3e:	2300      	movne	r3, #0
 8102f40:	b2db      	uxtb	r3, r3
 8102f42:	461a      	mov	r2, r3
 8102f44:	79fb      	ldrb	r3, [r7, #7]
 8102f46:	429a      	cmp	r2, r3
 8102f48:	d113      	bne.n	8102f72 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102f4a:	68fb      	ldr	r3, [r7, #12]
 8102f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102f4e:	f043 0220 	orr.w	r2, r3, #32
 8102f52:	68fb      	ldr	r3, [r7, #12]
 8102f54:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102f56:	68fb      	ldr	r3, [r7, #12]
 8102f58:	2220      	movs	r2, #32
 8102f5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102f5e:	68fb      	ldr	r3, [r7, #12]
 8102f60:	2200      	movs	r2, #0
 8102f62:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8102f66:	68fb      	ldr	r3, [r7, #12]
 8102f68:	2200      	movs	r2, #0
 8102f6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8102f6e:	2301      	movs	r3, #1
 8102f70:	e00f      	b.n	8102f92 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8102f72:	68fb      	ldr	r3, [r7, #12]
 8102f74:	681b      	ldr	r3, [r3, #0]
 8102f76:	699a      	ldr	r2, [r3, #24]
 8102f78:	68bb      	ldr	r3, [r7, #8]
 8102f7a:	4013      	ands	r3, r2
 8102f7c:	68ba      	ldr	r2, [r7, #8]
 8102f7e:	429a      	cmp	r2, r3
 8102f80:	bf0c      	ite	eq
 8102f82:	2301      	moveq	r3, #1
 8102f84:	2300      	movne	r3, #0
 8102f86:	b2db      	uxtb	r3, r3
 8102f88:	461a      	mov	r2, r3
 8102f8a:	79fb      	ldrb	r3, [r7, #7]
 8102f8c:	429a      	cmp	r2, r3
 8102f8e:	d0b4      	beq.n	8102efa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8102f90:	2300      	movs	r3, #0
}
 8102f92:	4618      	mov	r0, r3
 8102f94:	3710      	adds	r7, #16
 8102f96:	46bd      	mov	sp, r7
 8102f98:	bd80      	pop	{r7, pc}

08102f9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8102f9a:	b580      	push	{r7, lr}
 8102f9c:	b084      	sub	sp, #16
 8102f9e:	af00      	add	r7, sp, #0
 8102fa0:	60f8      	str	r0, [r7, #12]
 8102fa2:	60b9      	str	r1, [r7, #8]
 8102fa4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8102fa6:	e033      	b.n	8103010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8102fa8:	687a      	ldr	r2, [r7, #4]
 8102faa:	68b9      	ldr	r1, [r7, #8]
 8102fac:	68f8      	ldr	r0, [r7, #12]
 8102fae:	f000 f87f 	bl	81030b0 <I2C_IsErrorOccurred>
 8102fb2:	4603      	mov	r3, r0
 8102fb4:	2b00      	cmp	r3, #0
 8102fb6:	d001      	beq.n	8102fbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8102fb8:	2301      	movs	r3, #1
 8102fba:	e031      	b.n	8103020 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8102fbc:	68bb      	ldr	r3, [r7, #8]
 8102fbe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8102fc2:	d025      	beq.n	8103010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8102fc4:	f7fe ff0c 	bl	8101de0 <HAL_GetTick>
 8102fc8:	4602      	mov	r2, r0
 8102fca:	687b      	ldr	r3, [r7, #4]
 8102fcc:	1ad3      	subs	r3, r2, r3
 8102fce:	68ba      	ldr	r2, [r7, #8]
 8102fd0:	429a      	cmp	r2, r3
 8102fd2:	d302      	bcc.n	8102fda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8102fd4:	68bb      	ldr	r3, [r7, #8]
 8102fd6:	2b00      	cmp	r3, #0
 8102fd8:	d11a      	bne.n	8103010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8102fda:	68fb      	ldr	r3, [r7, #12]
 8102fdc:	681b      	ldr	r3, [r3, #0]
 8102fde:	699b      	ldr	r3, [r3, #24]
 8102fe0:	f003 0302 	and.w	r3, r3, #2
 8102fe4:	2b02      	cmp	r3, #2
 8102fe6:	d013      	beq.n	8103010 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8102fe8:	68fb      	ldr	r3, [r7, #12]
 8102fea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102fec:	f043 0220 	orr.w	r2, r3, #32
 8102ff0:	68fb      	ldr	r3, [r7, #12]
 8102ff2:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8102ff4:	68fb      	ldr	r3, [r7, #12]
 8102ff6:	2220      	movs	r2, #32
 8102ff8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8102ffc:	68fb      	ldr	r3, [r7, #12]
 8102ffe:	2200      	movs	r2, #0
 8103000:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8103004:	68fb      	ldr	r3, [r7, #12]
 8103006:	2200      	movs	r2, #0
 8103008:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 810300c:	2301      	movs	r3, #1
 810300e:	e007      	b.n	8103020 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8103010:	68fb      	ldr	r3, [r7, #12]
 8103012:	681b      	ldr	r3, [r3, #0]
 8103014:	699b      	ldr	r3, [r3, #24]
 8103016:	f003 0302 	and.w	r3, r3, #2
 810301a:	2b02      	cmp	r3, #2
 810301c:	d1c4      	bne.n	8102fa8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 810301e:	2300      	movs	r3, #0
}
 8103020:	4618      	mov	r0, r3
 8103022:	3710      	adds	r7, #16
 8103024:	46bd      	mov	sp, r7
 8103026:	bd80      	pop	{r7, pc}

08103028 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8103028:	b580      	push	{r7, lr}
 810302a:	b084      	sub	sp, #16
 810302c:	af00      	add	r7, sp, #0
 810302e:	60f8      	str	r0, [r7, #12]
 8103030:	60b9      	str	r1, [r7, #8]
 8103032:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103034:	e02f      	b.n	8103096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8103036:	687a      	ldr	r2, [r7, #4]
 8103038:	68b9      	ldr	r1, [r7, #8]
 810303a:	68f8      	ldr	r0, [r7, #12]
 810303c:	f000 f838 	bl	81030b0 <I2C_IsErrorOccurred>
 8103040:	4603      	mov	r3, r0
 8103042:	2b00      	cmp	r3, #0
 8103044:	d001      	beq.n	810304a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8103046:	2301      	movs	r3, #1
 8103048:	e02d      	b.n	81030a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810304a:	f7fe fec9 	bl	8101de0 <HAL_GetTick>
 810304e:	4602      	mov	r2, r0
 8103050:	687b      	ldr	r3, [r7, #4]
 8103052:	1ad3      	subs	r3, r2, r3
 8103054:	68ba      	ldr	r2, [r7, #8]
 8103056:	429a      	cmp	r2, r3
 8103058:	d302      	bcc.n	8103060 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 810305a:	68bb      	ldr	r3, [r7, #8]
 810305c:	2b00      	cmp	r3, #0
 810305e:	d11a      	bne.n	8103096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8103060:	68fb      	ldr	r3, [r7, #12]
 8103062:	681b      	ldr	r3, [r3, #0]
 8103064:	699b      	ldr	r3, [r3, #24]
 8103066:	f003 0320 	and.w	r3, r3, #32
 810306a:	2b20      	cmp	r3, #32
 810306c:	d013      	beq.n	8103096 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 810306e:	68fb      	ldr	r3, [r7, #12]
 8103070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103072:	f043 0220 	orr.w	r2, r3, #32
 8103076:	68fb      	ldr	r3, [r7, #12]
 8103078:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 810307a:	68fb      	ldr	r3, [r7, #12]
 810307c:	2220      	movs	r2, #32
 810307e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8103082:	68fb      	ldr	r3, [r7, #12]
 8103084:	2200      	movs	r2, #0
 8103086:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 810308a:	68fb      	ldr	r3, [r7, #12]
 810308c:	2200      	movs	r2, #0
 810308e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8103092:	2301      	movs	r3, #1
 8103094:	e007      	b.n	81030a6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8103096:	68fb      	ldr	r3, [r7, #12]
 8103098:	681b      	ldr	r3, [r3, #0]
 810309a:	699b      	ldr	r3, [r3, #24]
 810309c:	f003 0320 	and.w	r3, r3, #32
 81030a0:	2b20      	cmp	r3, #32
 81030a2:	d1c8      	bne.n	8103036 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 81030a4:	2300      	movs	r3, #0
}
 81030a6:	4618      	mov	r0, r3
 81030a8:	3710      	adds	r7, #16
 81030aa:	46bd      	mov	sp, r7
 81030ac:	bd80      	pop	{r7, pc}
	...

081030b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 81030b0:	b580      	push	{r7, lr}
 81030b2:	b08a      	sub	sp, #40	@ 0x28
 81030b4:	af00      	add	r7, sp, #0
 81030b6:	60f8      	str	r0, [r7, #12]
 81030b8:	60b9      	str	r1, [r7, #8]
 81030ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 81030bc:	2300      	movs	r3, #0
 81030be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 81030c2:	68fb      	ldr	r3, [r7, #12]
 81030c4:	681b      	ldr	r3, [r3, #0]
 81030c6:	699b      	ldr	r3, [r3, #24]
 81030c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 81030ca:	2300      	movs	r3, #0
 81030cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 81030ce:	687b      	ldr	r3, [r7, #4]
 81030d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 81030d2:	69bb      	ldr	r3, [r7, #24]
 81030d4:	f003 0310 	and.w	r3, r3, #16
 81030d8:	2b00      	cmp	r3, #0
 81030da:	d068      	beq.n	81031ae <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 81030dc:	68fb      	ldr	r3, [r7, #12]
 81030de:	681b      	ldr	r3, [r3, #0]
 81030e0:	2210      	movs	r2, #16
 81030e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 81030e4:	e049      	b.n	810317a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 81030e6:	68bb      	ldr	r3, [r7, #8]
 81030e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 81030ec:	d045      	beq.n	810317a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 81030ee:	f7fe fe77 	bl	8101de0 <HAL_GetTick>
 81030f2:	4602      	mov	r2, r0
 81030f4:	69fb      	ldr	r3, [r7, #28]
 81030f6:	1ad3      	subs	r3, r2, r3
 81030f8:	68ba      	ldr	r2, [r7, #8]
 81030fa:	429a      	cmp	r2, r3
 81030fc:	d302      	bcc.n	8103104 <I2C_IsErrorOccurred+0x54>
 81030fe:	68bb      	ldr	r3, [r7, #8]
 8103100:	2b00      	cmp	r3, #0
 8103102:	d13a      	bne.n	810317a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8103104:	68fb      	ldr	r3, [r7, #12]
 8103106:	681b      	ldr	r3, [r3, #0]
 8103108:	685b      	ldr	r3, [r3, #4]
 810310a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 810310e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8103110:	68fb      	ldr	r3, [r7, #12]
 8103112:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8103116:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8103118:	68fb      	ldr	r3, [r7, #12]
 810311a:	681b      	ldr	r3, [r3, #0]
 810311c:	699b      	ldr	r3, [r3, #24]
 810311e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8103122:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8103126:	d121      	bne.n	810316c <I2C_IsErrorOccurred+0xbc>
 8103128:	697b      	ldr	r3, [r7, #20]
 810312a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810312e:	d01d      	beq.n	810316c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8103130:	7cfb      	ldrb	r3, [r7, #19]
 8103132:	2b20      	cmp	r3, #32
 8103134:	d01a      	beq.n	810316c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8103136:	68fb      	ldr	r3, [r7, #12]
 8103138:	681b      	ldr	r3, [r3, #0]
 810313a:	685a      	ldr	r2, [r3, #4]
 810313c:	68fb      	ldr	r3, [r7, #12]
 810313e:	681b      	ldr	r3, [r3, #0]
 8103140:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8103144:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8103146:	f7fe fe4b 	bl	8101de0 <HAL_GetTick>
 810314a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810314c:	e00e      	b.n	810316c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 810314e:	f7fe fe47 	bl	8101de0 <HAL_GetTick>
 8103152:	4602      	mov	r2, r0
 8103154:	69fb      	ldr	r3, [r7, #28]
 8103156:	1ad3      	subs	r3, r2, r3
 8103158:	2b19      	cmp	r3, #25
 810315a:	d907      	bls.n	810316c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 810315c:	6a3b      	ldr	r3, [r7, #32]
 810315e:	f043 0320 	orr.w	r3, r3, #32
 8103162:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8103164:	2301      	movs	r3, #1
 8103166:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 810316a:	e006      	b.n	810317a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 810316c:	68fb      	ldr	r3, [r7, #12]
 810316e:	681b      	ldr	r3, [r3, #0]
 8103170:	699b      	ldr	r3, [r3, #24]
 8103172:	f003 0320 	and.w	r3, r3, #32
 8103176:	2b20      	cmp	r3, #32
 8103178:	d1e9      	bne.n	810314e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 810317a:	68fb      	ldr	r3, [r7, #12]
 810317c:	681b      	ldr	r3, [r3, #0]
 810317e:	699b      	ldr	r3, [r3, #24]
 8103180:	f003 0320 	and.w	r3, r3, #32
 8103184:	2b20      	cmp	r3, #32
 8103186:	d003      	beq.n	8103190 <I2C_IsErrorOccurred+0xe0>
 8103188:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 810318c:	2b00      	cmp	r3, #0
 810318e:	d0aa      	beq.n	81030e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8103190:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8103194:	2b00      	cmp	r3, #0
 8103196:	d103      	bne.n	81031a0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8103198:	68fb      	ldr	r3, [r7, #12]
 810319a:	681b      	ldr	r3, [r3, #0]
 810319c:	2220      	movs	r2, #32
 810319e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 81031a0:	6a3b      	ldr	r3, [r7, #32]
 81031a2:	f043 0304 	orr.w	r3, r3, #4
 81031a6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 81031a8:	2301      	movs	r3, #1
 81031aa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 81031ae:	68fb      	ldr	r3, [r7, #12]
 81031b0:	681b      	ldr	r3, [r3, #0]
 81031b2:	699b      	ldr	r3, [r3, #24]
 81031b4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 81031b6:	69bb      	ldr	r3, [r7, #24]
 81031b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 81031bc:	2b00      	cmp	r3, #0
 81031be:	d00b      	beq.n	81031d8 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 81031c0:	6a3b      	ldr	r3, [r7, #32]
 81031c2:	f043 0301 	orr.w	r3, r3, #1
 81031c6:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 81031c8:	68fb      	ldr	r3, [r7, #12]
 81031ca:	681b      	ldr	r3, [r3, #0]
 81031cc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 81031d0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81031d2:	2301      	movs	r3, #1
 81031d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 81031d8:	69bb      	ldr	r3, [r7, #24]
 81031da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 81031de:	2b00      	cmp	r3, #0
 81031e0:	d00b      	beq.n	81031fa <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 81031e2:	6a3b      	ldr	r3, [r7, #32]
 81031e4:	f043 0308 	orr.w	r3, r3, #8
 81031e8:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 81031ea:	68fb      	ldr	r3, [r7, #12]
 81031ec:	681b      	ldr	r3, [r3, #0]
 81031ee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 81031f2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 81031f4:	2301      	movs	r3, #1
 81031f6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 81031fa:	69bb      	ldr	r3, [r7, #24]
 81031fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8103200:	2b00      	cmp	r3, #0
 8103202:	d00b      	beq.n	810321c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8103204:	6a3b      	ldr	r3, [r7, #32]
 8103206:	f043 0302 	orr.w	r3, r3, #2
 810320a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 810320c:	68fb      	ldr	r3, [r7, #12]
 810320e:	681b      	ldr	r3, [r3, #0]
 8103210:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8103214:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8103216:	2301      	movs	r3, #1
 8103218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 810321c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8103220:	2b00      	cmp	r3, #0
 8103222:	d01c      	beq.n	810325e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8103224:	68f8      	ldr	r0, [r7, #12]
 8103226:	f7ff fe3b 	bl	8102ea0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 810322a:	68fb      	ldr	r3, [r7, #12]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	6859      	ldr	r1, [r3, #4]
 8103230:	68fb      	ldr	r3, [r7, #12]
 8103232:	681a      	ldr	r2, [r3, #0]
 8103234:	4b0d      	ldr	r3, [pc, #52]	@ (810326c <I2C_IsErrorOccurred+0x1bc>)
 8103236:	400b      	ands	r3, r1
 8103238:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 810323a:	68fb      	ldr	r3, [r7, #12]
 810323c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 810323e:	6a3b      	ldr	r3, [r7, #32]
 8103240:	431a      	orrs	r2, r3
 8103242:	68fb      	ldr	r3, [r7, #12]
 8103244:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8103246:	68fb      	ldr	r3, [r7, #12]
 8103248:	2220      	movs	r2, #32
 810324a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 810324e:	68fb      	ldr	r3, [r7, #12]
 8103250:	2200      	movs	r2, #0
 8103252:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103256:	68fb      	ldr	r3, [r7, #12]
 8103258:	2200      	movs	r2, #0
 810325a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 810325e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8103262:	4618      	mov	r0, r3
 8103264:	3728      	adds	r7, #40	@ 0x28
 8103266:	46bd      	mov	sp, r7
 8103268:	bd80      	pop	{r7, pc}
 810326a:	bf00      	nop
 810326c:	fe00e800 	.word	0xfe00e800

08103270 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8103270:	b480      	push	{r7}
 8103272:	b087      	sub	sp, #28
 8103274:	af00      	add	r7, sp, #0
 8103276:	60f8      	str	r0, [r7, #12]
 8103278:	607b      	str	r3, [r7, #4]
 810327a:	460b      	mov	r3, r1
 810327c:	817b      	strh	r3, [r7, #10]
 810327e:	4613      	mov	r3, r2
 8103280:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103282:	897b      	ldrh	r3, [r7, #10]
 8103284:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103288:	7a7b      	ldrb	r3, [r7, #9]
 810328a:	041b      	lsls	r3, r3, #16
 810328c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103290:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8103292:	687b      	ldr	r3, [r7, #4]
 8103294:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8103296:	6a3b      	ldr	r3, [r7, #32]
 8103298:	4313      	orrs	r3, r2
 810329a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 810329e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 81032a0:	68fb      	ldr	r3, [r7, #12]
 81032a2:	681b      	ldr	r3, [r3, #0]
 81032a4:	685a      	ldr	r2, [r3, #4]
 81032a6:	6a3b      	ldr	r3, [r7, #32]
 81032a8:	0d5b      	lsrs	r3, r3, #21
 81032aa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 81032ae:	4b08      	ldr	r3, [pc, #32]	@ (81032d0 <I2C_TransferConfig+0x60>)
 81032b0:	430b      	orrs	r3, r1
 81032b2:	43db      	mvns	r3, r3
 81032b4:	ea02 0103 	and.w	r1, r2, r3
 81032b8:	68fb      	ldr	r3, [r7, #12]
 81032ba:	681b      	ldr	r3, [r3, #0]
 81032bc:	697a      	ldr	r2, [r7, #20]
 81032be:	430a      	orrs	r2, r1
 81032c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 81032c2:	bf00      	nop
 81032c4:	371c      	adds	r7, #28
 81032c6:	46bd      	mov	sp, r7
 81032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032cc:	4770      	bx	lr
 81032ce:	bf00      	nop
 81032d0:	03ff63ff 	.word	0x03ff63ff

081032d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 81032d4:	b480      	push	{r7}
 81032d6:	b083      	sub	sp, #12
 81032d8:	af00      	add	r7, sp, #0
 81032da:	6078      	str	r0, [r7, #4]
 81032dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 81032de:	687b      	ldr	r3, [r7, #4]
 81032e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 81032e4:	b2db      	uxtb	r3, r3
 81032e6:	2b20      	cmp	r3, #32
 81032e8:	d138      	bne.n	810335c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 81032ea:	687b      	ldr	r3, [r7, #4]
 81032ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 81032f0:	2b01      	cmp	r3, #1
 81032f2:	d101      	bne.n	81032f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 81032f4:	2302      	movs	r3, #2
 81032f6:	e032      	b.n	810335e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 81032f8:	687b      	ldr	r3, [r7, #4]
 81032fa:	2201      	movs	r2, #1
 81032fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103300:	687b      	ldr	r3, [r7, #4]
 8103302:	2224      	movs	r2, #36	@ 0x24
 8103304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8103308:	687b      	ldr	r3, [r7, #4]
 810330a:	681b      	ldr	r3, [r3, #0]
 810330c:	681a      	ldr	r2, [r3, #0]
 810330e:	687b      	ldr	r3, [r7, #4]
 8103310:	681b      	ldr	r3, [r3, #0]
 8103312:	f022 0201 	bic.w	r2, r2, #1
 8103316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8103318:	687b      	ldr	r3, [r7, #4]
 810331a:	681b      	ldr	r3, [r3, #0]
 810331c:	681a      	ldr	r2, [r3, #0]
 810331e:	687b      	ldr	r3, [r7, #4]
 8103320:	681b      	ldr	r3, [r3, #0]
 8103322:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8103326:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8103328:	687b      	ldr	r3, [r7, #4]
 810332a:	681b      	ldr	r3, [r3, #0]
 810332c:	6819      	ldr	r1, [r3, #0]
 810332e:	687b      	ldr	r3, [r7, #4]
 8103330:	681b      	ldr	r3, [r3, #0]
 8103332:	683a      	ldr	r2, [r7, #0]
 8103334:	430a      	orrs	r2, r1
 8103336:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8103338:	687b      	ldr	r3, [r7, #4]
 810333a:	681b      	ldr	r3, [r3, #0]
 810333c:	681a      	ldr	r2, [r3, #0]
 810333e:	687b      	ldr	r3, [r7, #4]
 8103340:	681b      	ldr	r3, [r3, #0]
 8103342:	f042 0201 	orr.w	r2, r2, #1
 8103346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8103348:	687b      	ldr	r3, [r7, #4]
 810334a:	2220      	movs	r2, #32
 810334c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8103350:	687b      	ldr	r3, [r7, #4]
 8103352:	2200      	movs	r2, #0
 8103354:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8103358:	2300      	movs	r3, #0
 810335a:	e000      	b.n	810335e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 810335c:	2302      	movs	r3, #2
  }
}
 810335e:	4618      	mov	r0, r3
 8103360:	370c      	adds	r7, #12
 8103362:	46bd      	mov	sp, r7
 8103364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103368:	4770      	bx	lr

0810336a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 810336a:	b480      	push	{r7}
 810336c:	b085      	sub	sp, #20
 810336e:	af00      	add	r7, sp, #0
 8103370:	6078      	str	r0, [r7, #4]
 8103372:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8103374:	687b      	ldr	r3, [r7, #4]
 8103376:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 810337a:	b2db      	uxtb	r3, r3
 810337c:	2b20      	cmp	r3, #32
 810337e:	d139      	bne.n	81033f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8103380:	687b      	ldr	r3, [r7, #4]
 8103382:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8103386:	2b01      	cmp	r3, #1
 8103388:	d101      	bne.n	810338e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 810338a:	2302      	movs	r3, #2
 810338c:	e033      	b.n	81033f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 810338e:	687b      	ldr	r3, [r7, #4]
 8103390:	2201      	movs	r2, #1
 8103392:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8103396:	687b      	ldr	r3, [r7, #4]
 8103398:	2224      	movs	r2, #36	@ 0x24
 810339a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 810339e:	687b      	ldr	r3, [r7, #4]
 81033a0:	681b      	ldr	r3, [r3, #0]
 81033a2:	681a      	ldr	r2, [r3, #0]
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	681b      	ldr	r3, [r3, #0]
 81033a8:	f022 0201 	bic.w	r2, r2, #1
 81033ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 81033ae:	687b      	ldr	r3, [r7, #4]
 81033b0:	681b      	ldr	r3, [r3, #0]
 81033b2:	681b      	ldr	r3, [r3, #0]
 81033b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 81033b6:	68fb      	ldr	r3, [r7, #12]
 81033b8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81033bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 81033be:	683b      	ldr	r3, [r7, #0]
 81033c0:	021b      	lsls	r3, r3, #8
 81033c2:	68fa      	ldr	r2, [r7, #12]
 81033c4:	4313      	orrs	r3, r2
 81033c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 81033c8:	687b      	ldr	r3, [r7, #4]
 81033ca:	681b      	ldr	r3, [r3, #0]
 81033cc:	68fa      	ldr	r2, [r7, #12]
 81033ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	681b      	ldr	r3, [r3, #0]
 81033d4:	681a      	ldr	r2, [r3, #0]
 81033d6:	687b      	ldr	r3, [r7, #4]
 81033d8:	681b      	ldr	r3, [r3, #0]
 81033da:	f042 0201 	orr.w	r2, r2, #1
 81033de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 81033e0:	687b      	ldr	r3, [r7, #4]
 81033e2:	2220      	movs	r2, #32
 81033e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 81033e8:	687b      	ldr	r3, [r7, #4]
 81033ea:	2200      	movs	r2, #0
 81033ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 81033f0:	2300      	movs	r3, #0
 81033f2:	e000      	b.n	81033f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 81033f4:	2302      	movs	r3, #2
  }
}
 81033f6:	4618      	mov	r0, r3
 81033f8:	3714      	adds	r7, #20
 81033fa:	46bd      	mov	sp, r7
 81033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103400:	4770      	bx	lr
	...

08103404 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8103404:	b580      	push	{r7, lr}
 8103406:	b084      	sub	sp, #16
 8103408:	af00      	add	r7, sp, #0
 810340a:	60f8      	str	r0, [r7, #12]
 810340c:	460b      	mov	r3, r1
 810340e:	607a      	str	r2, [r7, #4]
 8103410:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8103412:	4b37      	ldr	r3, [pc, #220]	@ (81034f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103414:	681b      	ldr	r3, [r3, #0]
 8103416:	f023 0201 	bic.w	r2, r3, #1
 810341a:	4935      	ldr	r1, [pc, #212]	@ (81034f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 810341c:	68fb      	ldr	r3, [r7, #12]
 810341e:	4313      	orrs	r3, r2
 8103420:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8103422:	687b      	ldr	r3, [r7, #4]
 8103424:	2b00      	cmp	r3, #0
 8103426:	d123      	bne.n	8103470 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103428:	f7fe fdee 	bl	8102008 <HAL_GetCurrentCPUID>
 810342c:	4603      	mov	r3, r0
 810342e:	2b03      	cmp	r3, #3
 8103430:	d158      	bne.n	81034e4 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8103432:	4b2f      	ldr	r3, [pc, #188]	@ (81034f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103434:	691b      	ldr	r3, [r3, #16]
 8103436:	4a2e      	ldr	r2, [pc, #184]	@ (81034f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103438:	f023 0301 	bic.w	r3, r3, #1
 810343c:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810343e:	4b2d      	ldr	r3, [pc, #180]	@ (81034f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103440:	691b      	ldr	r3, [r3, #16]
 8103442:	4a2c      	ldr	r2, [pc, #176]	@ (81034f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103444:	f043 0304 	orr.w	r3, r3, #4
 8103448:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810344a:	f3bf 8f4f 	dsb	sy
}
 810344e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8103450:	f3bf 8f6f 	isb	sy
}
 8103454:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8103456:	7afb      	ldrb	r3, [r7, #11]
 8103458:	2b01      	cmp	r3, #1
 810345a:	d101      	bne.n	8103460 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 810345c:	bf30      	wfi
 810345e:	e000      	b.n	8103462 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103460:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103462:	4b24      	ldr	r3, [pc, #144]	@ (81034f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103464:	691b      	ldr	r3, [r3, #16]
 8103466:	4a23      	ldr	r2, [pc, #140]	@ (81034f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103468:	f023 0304 	bic.w	r3, r3, #4
 810346c:	6113      	str	r3, [r2, #16]
 810346e:	e03c      	b.n	81034ea <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8103470:	687b      	ldr	r3, [r7, #4]
 8103472:	2b01      	cmp	r3, #1
 8103474:	d123      	bne.n	81034be <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8103476:	f7fe fdc7 	bl	8102008 <HAL_GetCurrentCPUID>
 810347a:	4603      	mov	r3, r0
 810347c:	2b01      	cmp	r3, #1
 810347e:	d133      	bne.n	81034e8 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8103480:	4b1b      	ldr	r3, [pc, #108]	@ (81034f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103482:	695b      	ldr	r3, [r3, #20]
 8103484:	4a1a      	ldr	r2, [pc, #104]	@ (81034f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103486:	f023 0302 	bic.w	r3, r3, #2
 810348a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 810348c:	4b19      	ldr	r3, [pc, #100]	@ (81034f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810348e:	691b      	ldr	r3, [r3, #16]
 8103490:	4a18      	ldr	r2, [pc, #96]	@ (81034f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103492:	f043 0304 	orr.w	r3, r3, #4
 8103496:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8103498:	f3bf 8f4f 	dsb	sy
}
 810349c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 810349e:	f3bf 8f6f 	isb	sy
}
 81034a2:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81034a4:	7afb      	ldrb	r3, [r7, #11]
 81034a6:	2b01      	cmp	r3, #1
 81034a8:	d101      	bne.n	81034ae <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81034aa:	bf30      	wfi
 81034ac:	e000      	b.n	81034b0 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81034ae:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81034b0:	4b10      	ldr	r3, [pc, #64]	@ (81034f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034b2:	691b      	ldr	r3, [r3, #16]
 81034b4:	4a0f      	ldr	r2, [pc, #60]	@ (81034f4 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81034b6:	f023 0304 	bic.w	r3, r3, #4
 81034ba:	6113      	str	r3, [r2, #16]
 81034bc:	e015      	b.n	81034ea <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81034be:	f7fe fda3 	bl	8102008 <HAL_GetCurrentCPUID>
 81034c2:	4603      	mov	r3, r0
 81034c4:	2b03      	cmp	r3, #3
 81034c6:	d106      	bne.n	81034d6 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81034c8:	4b09      	ldr	r3, [pc, #36]	@ (81034f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034ca:	691b      	ldr	r3, [r3, #16]
 81034cc:	4a08      	ldr	r2, [pc, #32]	@ (81034f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034ce:	f023 0304 	bic.w	r3, r3, #4
 81034d2:	6113      	str	r3, [r2, #16]
 81034d4:	e009      	b.n	81034ea <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 81034d6:	4b06      	ldr	r3, [pc, #24]	@ (81034f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034d8:	695b      	ldr	r3, [r3, #20]
 81034da:	4a05      	ldr	r2, [pc, #20]	@ (81034f0 <HAL_PWREx_EnterSTOPMode+0xec>)
 81034dc:	f023 0304 	bic.w	r3, r3, #4
 81034e0:	6153      	str	r3, [r2, #20]
 81034e2:	e002      	b.n	81034ea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81034e4:	bf00      	nop
 81034e6:	e000      	b.n	81034ea <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 81034e8:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 81034ea:	3710      	adds	r7, #16
 81034ec:	46bd      	mov	sp, r7
 81034ee:	bd80      	pop	{r7, pc}
 81034f0:	58024800 	.word	0x58024800
 81034f4:	e000ed00 	.word	0xe000ed00

081034f8 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 81034f8:	b580      	push	{r7, lr}
 81034fa:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81034fc:	f7fe fd84 	bl	8102008 <HAL_GetCurrentCPUID>
 8103500:	4603      	mov	r3, r0
 8103502:	2b03      	cmp	r3, #3
 8103504:	d101      	bne.n	810350a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8103506:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103508:	e001      	b.n	810350e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810350a:	bf40      	sev
    __WFE ();
 810350c:	bf20      	wfe
}
 810350e:	bf00      	nop
 8103510:	bd80      	pop	{r7, pc}
	...

08103514 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8103514:	b480      	push	{r7}
 8103516:	b089      	sub	sp, #36	@ 0x24
 8103518:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810351a:	4bb3      	ldr	r3, [pc, #716]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810351c:	691b      	ldr	r3, [r3, #16]
 810351e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8103522:	2b18      	cmp	r3, #24
 8103524:	f200 8155 	bhi.w	81037d2 <HAL_RCC_GetSysClockFreq+0x2be>
 8103528:	a201      	add	r2, pc, #4	@ (adr r2, 8103530 <HAL_RCC_GetSysClockFreq+0x1c>)
 810352a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810352e:	bf00      	nop
 8103530:	08103595 	.word	0x08103595
 8103534:	081037d3 	.word	0x081037d3
 8103538:	081037d3 	.word	0x081037d3
 810353c:	081037d3 	.word	0x081037d3
 8103540:	081037d3 	.word	0x081037d3
 8103544:	081037d3 	.word	0x081037d3
 8103548:	081037d3 	.word	0x081037d3
 810354c:	081037d3 	.word	0x081037d3
 8103550:	081035bb 	.word	0x081035bb
 8103554:	081037d3 	.word	0x081037d3
 8103558:	081037d3 	.word	0x081037d3
 810355c:	081037d3 	.word	0x081037d3
 8103560:	081037d3 	.word	0x081037d3
 8103564:	081037d3 	.word	0x081037d3
 8103568:	081037d3 	.word	0x081037d3
 810356c:	081037d3 	.word	0x081037d3
 8103570:	081035c1 	.word	0x081035c1
 8103574:	081037d3 	.word	0x081037d3
 8103578:	081037d3 	.word	0x081037d3
 810357c:	081037d3 	.word	0x081037d3
 8103580:	081037d3 	.word	0x081037d3
 8103584:	081037d3 	.word	0x081037d3
 8103588:	081037d3 	.word	0x081037d3
 810358c:	081037d3 	.word	0x081037d3
 8103590:	081035c7 	.word	0x081035c7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103594:	4b94      	ldr	r3, [pc, #592]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103596:	681b      	ldr	r3, [r3, #0]
 8103598:	f003 0320 	and.w	r3, r3, #32
 810359c:	2b00      	cmp	r3, #0
 810359e:	d009      	beq.n	81035b4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81035a0:	4b91      	ldr	r3, [pc, #580]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035a2:	681b      	ldr	r3, [r3, #0]
 81035a4:	08db      	lsrs	r3, r3, #3
 81035a6:	f003 0303 	and.w	r3, r3, #3
 81035aa:	4a90      	ldr	r2, [pc, #576]	@ (81037ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81035ac:	fa22 f303 	lsr.w	r3, r2, r3
 81035b0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81035b2:	e111      	b.n	81037d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81035b4:	4b8d      	ldr	r3, [pc, #564]	@ (81037ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 81035b6:	61bb      	str	r3, [r7, #24]
      break;
 81035b8:	e10e      	b.n	81037d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81035ba:	4b8d      	ldr	r3, [pc, #564]	@ (81037f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81035bc:	61bb      	str	r3, [r7, #24]
      break;
 81035be:	e10b      	b.n	81037d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81035c0:	4b8c      	ldr	r3, [pc, #560]	@ (81037f4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81035c2:	61bb      	str	r3, [r7, #24]
      break;
 81035c4:	e108      	b.n	81037d8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81035c6:	4b88      	ldr	r3, [pc, #544]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81035ca:	f003 0303 	and.w	r3, r3, #3
 81035ce:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 81035d0:	4b85      	ldr	r3, [pc, #532]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81035d4:	091b      	lsrs	r3, r3, #4
 81035d6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81035da:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 81035dc:	4b82      	ldr	r3, [pc, #520]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81035e0:	f003 0301 	and.w	r3, r3, #1
 81035e4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 81035e6:	4b80      	ldr	r3, [pc, #512]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81035e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 81035ea:	08db      	lsrs	r3, r3, #3
 81035ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81035f0:	68fa      	ldr	r2, [r7, #12]
 81035f2:	fb02 f303 	mul.w	r3, r2, r3
 81035f6:	ee07 3a90 	vmov	s15, r3
 81035fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035fe:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8103602:	693b      	ldr	r3, [r7, #16]
 8103604:	2b00      	cmp	r3, #0
 8103606:	f000 80e1 	beq.w	81037cc <HAL_RCC_GetSysClockFreq+0x2b8>
 810360a:	697b      	ldr	r3, [r7, #20]
 810360c:	2b02      	cmp	r3, #2
 810360e:	f000 8083 	beq.w	8103718 <HAL_RCC_GetSysClockFreq+0x204>
 8103612:	697b      	ldr	r3, [r7, #20]
 8103614:	2b02      	cmp	r3, #2
 8103616:	f200 80a1 	bhi.w	810375c <HAL_RCC_GetSysClockFreq+0x248>
 810361a:	697b      	ldr	r3, [r7, #20]
 810361c:	2b00      	cmp	r3, #0
 810361e:	d003      	beq.n	8103628 <HAL_RCC_GetSysClockFreq+0x114>
 8103620:	697b      	ldr	r3, [r7, #20]
 8103622:	2b01      	cmp	r3, #1
 8103624:	d056      	beq.n	81036d4 <HAL_RCC_GetSysClockFreq+0x1c0>
 8103626:	e099      	b.n	810375c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103628:	4b6f      	ldr	r3, [pc, #444]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810362a:	681b      	ldr	r3, [r3, #0]
 810362c:	f003 0320 	and.w	r3, r3, #32
 8103630:	2b00      	cmp	r3, #0
 8103632:	d02d      	beq.n	8103690 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8103634:	4b6c      	ldr	r3, [pc, #432]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103636:	681b      	ldr	r3, [r3, #0]
 8103638:	08db      	lsrs	r3, r3, #3
 810363a:	f003 0303 	and.w	r3, r3, #3
 810363e:	4a6b      	ldr	r2, [pc, #428]	@ (81037ec <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103640:	fa22 f303 	lsr.w	r3, r2, r3
 8103644:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103646:	687b      	ldr	r3, [r7, #4]
 8103648:	ee07 3a90 	vmov	s15, r3
 810364c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103650:	693b      	ldr	r3, [r7, #16]
 8103652:	ee07 3a90 	vmov	s15, r3
 8103656:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810365a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810365e:	4b62      	ldr	r3, [pc, #392]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103662:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103666:	ee07 3a90 	vmov	s15, r3
 810366a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810366e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103672:	eddf 5a61 	vldr	s11, [pc, #388]	@ 81037f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103676:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810367a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810367e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103682:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103686:	ee67 7a27 	vmul.f32	s15, s14, s15
 810368a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 810368e:	e087      	b.n	81037a0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103690:	693b      	ldr	r3, [r7, #16]
 8103692:	ee07 3a90 	vmov	s15, r3
 8103696:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810369a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 81037fc <HAL_RCC_GetSysClockFreq+0x2e8>
 810369e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81036a2:	4b51      	ldr	r3, [pc, #324]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81036a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81036aa:	ee07 3a90 	vmov	s15, r3
 81036ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81036b2:	ed97 6a02 	vldr	s12, [r7, #8]
 81036b6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 81037f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81036ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81036c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81036c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036ce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81036d2:	e065      	b.n	81037a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81036d4:	693b      	ldr	r3, [r7, #16]
 81036d6:	ee07 3a90 	vmov	s15, r3
 81036da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036de:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8103800 <HAL_RCC_GetSysClockFreq+0x2ec>
 81036e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81036e6:	4b40      	ldr	r3, [pc, #256]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81036e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81036ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81036ee:	ee07 3a90 	vmov	s15, r3
 81036f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81036f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81036fa:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 81037f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 81036fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103702:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103706:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810370a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810370e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103712:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8103716:	e043      	b.n	81037a0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8103718:	693b      	ldr	r3, [r7, #16]
 810371a:	ee07 3a90 	vmov	s15, r3
 810371e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103722:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8103804 <HAL_RCC_GetSysClockFreq+0x2f0>
 8103726:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810372a:	4b2f      	ldr	r3, [pc, #188]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810372c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810372e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103732:	ee07 3a90 	vmov	s15, r3
 8103736:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810373a:	ed97 6a02 	vldr	s12, [r7, #8]
 810373e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 81037f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103742:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103746:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810374a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810374e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103752:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103756:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810375a:	e021      	b.n	81037a0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810375c:	693b      	ldr	r3, [r7, #16]
 810375e:	ee07 3a90 	vmov	s15, r3
 8103762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103766:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8103800 <HAL_RCC_GetSysClockFreq+0x2ec>
 810376a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810376e:	4b1e      	ldr	r3, [pc, #120]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8103772:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103776:	ee07 3a90 	vmov	s15, r3
 810377a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810377e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103782:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 81037f8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103786:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810378a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810378e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8103792:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103796:	ee67 7a27 	vmul.f32	s15, s14, s15
 810379a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810379e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81037a0:	4b11      	ldr	r3, [pc, #68]	@ (81037e8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81037a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81037a4:	0a5b      	lsrs	r3, r3, #9
 81037a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81037aa:	3301      	adds	r3, #1
 81037ac:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 81037ae:	683b      	ldr	r3, [r7, #0]
 81037b0:	ee07 3a90 	vmov	s15, r3
 81037b4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 81037b8:	edd7 6a07 	vldr	s13, [r7, #28]
 81037bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81037c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81037c4:	ee17 3a90 	vmov	r3, s15
 81037c8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 81037ca:	e005      	b.n	81037d8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 81037cc:	2300      	movs	r3, #0
 81037ce:	61bb      	str	r3, [r7, #24]
      break;
 81037d0:	e002      	b.n	81037d8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 81037d2:	4b07      	ldr	r3, [pc, #28]	@ (81037f0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81037d4:	61bb      	str	r3, [r7, #24]
      break;
 81037d6:	bf00      	nop
  }

  return sysclockfreq;
 81037d8:	69bb      	ldr	r3, [r7, #24]
}
 81037da:	4618      	mov	r0, r3
 81037dc:	3724      	adds	r7, #36	@ 0x24
 81037de:	46bd      	mov	sp, r7
 81037e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037e4:	4770      	bx	lr
 81037e6:	bf00      	nop
 81037e8:	58024400 	.word	0x58024400
 81037ec:	03d09000 	.word	0x03d09000
 81037f0:	003d0900 	.word	0x003d0900
 81037f4:	017d7840 	.word	0x017d7840
 81037f8:	46000000 	.word	0x46000000
 81037fc:	4c742400 	.word	0x4c742400
 8103800:	4a742400 	.word	0x4a742400
 8103804:	4bbebc20 	.word	0x4bbebc20

08103808 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 810380c:	b0ca      	sub	sp, #296	@ 0x128
 810380e:	af00      	add	r7, sp, #0
 8103810:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103814:	2300      	movs	r3, #0
 8103816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810381a:	2300      	movs	r3, #0
 810381c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103828:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 810382c:	2500      	movs	r5, #0
 810382e:	ea54 0305 	orrs.w	r3, r4, r5
 8103832:	d049      	beq.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8103834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810383a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810383e:	d02f      	beq.n	81038a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8103840:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8103844:	d828      	bhi.n	8103898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810384a:	d01a      	beq.n	8103882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 810384c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103850:	d822      	bhi.n	8103898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8103852:	2b00      	cmp	r3, #0
 8103854:	d003      	beq.n	810385e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8103856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810385a:	d007      	beq.n	810386c <HAL_RCCEx_PeriphCLKConfig+0x64>
 810385c:	e01c      	b.n	8103898 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810385e:	4bb8      	ldr	r3, [pc, #736]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103862:	4ab7      	ldr	r2, [pc, #732]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 810386a:	e01a      	b.n	81038a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103870:	3308      	adds	r3, #8
 8103872:	2102      	movs	r1, #2
 8103874:	4618      	mov	r0, r3
 8103876:	f001 f9d1 	bl	8104c1c <RCCEx_PLL2_Config>
 810387a:	4603      	mov	r3, r0
 810387c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103880:	e00f      	b.n	81038a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103886:	3328      	adds	r3, #40	@ 0x28
 8103888:	2102      	movs	r1, #2
 810388a:	4618      	mov	r0, r3
 810388c:	f001 fa78 	bl	8104d80 <RCCEx_PLL3_Config>
 8103890:	4603      	mov	r3, r0
 8103892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8103896:	e004      	b.n	81038a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103898:	2301      	movs	r3, #1
 810389a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810389e:	e000      	b.n	81038a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81038a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81038a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81038a6:	2b00      	cmp	r3, #0
 81038a8:	d10a      	bne.n	81038c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81038aa:	4ba5      	ldr	r3, [pc, #660]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81038ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81038b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81038b8:	4aa1      	ldr	r2, [pc, #644]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81038ba:	430b      	orrs	r3, r1
 81038bc:	6513      	str	r3, [r2, #80]	@ 0x50
 81038be:	e003      	b.n	81038c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81038c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81038c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 81038c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81038d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 81038d4:	f04f 0900 	mov.w	r9, #0
 81038d8:	ea58 0309 	orrs.w	r3, r8, r9
 81038dc:	d047      	beq.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 81038de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81038e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81038e4:	2b04      	cmp	r3, #4
 81038e6:	d82a      	bhi.n	810393e <HAL_RCCEx_PeriphCLKConfig+0x136>
 81038e8:	a201      	add	r2, pc, #4	@ (adr r2, 81038f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 81038ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81038ee:	bf00      	nop
 81038f0:	08103905 	.word	0x08103905
 81038f4:	08103913 	.word	0x08103913
 81038f8:	08103929 	.word	0x08103929
 81038fc:	08103947 	.word	0x08103947
 8103900:	08103947 	.word	0x08103947
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103904:	4b8e      	ldr	r3, [pc, #568]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103908:	4a8d      	ldr	r2, [pc, #564]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810390a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810390e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103910:	e01a      	b.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103916:	3308      	adds	r3, #8
 8103918:	2100      	movs	r1, #0
 810391a:	4618      	mov	r0, r3
 810391c:	f001 f97e 	bl	8104c1c <RCCEx_PLL2_Config>
 8103920:	4603      	mov	r3, r0
 8103922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103926:	e00f      	b.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810392c:	3328      	adds	r3, #40	@ 0x28
 810392e:	2100      	movs	r1, #0
 8103930:	4618      	mov	r0, r3
 8103932:	f001 fa25 	bl	8104d80 <RCCEx_PLL3_Config>
 8103936:	4603      	mov	r3, r0
 8103938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810393c:	e004      	b.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810393e:	2301      	movs	r3, #1
 8103940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103944:	e000      	b.n	8103948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8103946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810394c:	2b00      	cmp	r3, #0
 810394e:	d10a      	bne.n	8103966 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103950:	4b7b      	ldr	r3, [pc, #492]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103954:	f023 0107 	bic.w	r1, r3, #7
 8103958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810395c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810395e:	4a78      	ldr	r2, [pc, #480]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103960:	430b      	orrs	r3, r1
 8103962:	6513      	str	r3, [r2, #80]	@ 0x50
 8103964:	e003      	b.n	810396e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810396a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 810396e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103976:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 810397a:	f04f 0b00 	mov.w	fp, #0
 810397e:	ea5a 030b 	orrs.w	r3, sl, fp
 8103982:	d04c      	beq.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8103984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 810398a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810398e:	d030      	beq.n	81039f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8103990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8103994:	d829      	bhi.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8103996:	2bc0      	cmp	r3, #192	@ 0xc0
 8103998:	d02d      	beq.n	81039f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 810399a:	2bc0      	cmp	r3, #192	@ 0xc0
 810399c:	d825      	bhi.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 810399e:	2b80      	cmp	r3, #128	@ 0x80
 81039a0:	d018      	beq.n	81039d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81039a2:	2b80      	cmp	r3, #128	@ 0x80
 81039a4:	d821      	bhi.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81039a6:	2b00      	cmp	r3, #0
 81039a8:	d002      	beq.n	81039b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81039aa:	2b40      	cmp	r3, #64	@ 0x40
 81039ac:	d007      	beq.n	81039be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81039ae:	e01c      	b.n	81039ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81039b0:	4b63      	ldr	r3, [pc, #396]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81039b4:	4a62      	ldr	r2, [pc, #392]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81039b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81039ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81039bc:	e01c      	b.n	81039f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81039be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039c2:	3308      	adds	r3, #8
 81039c4:	2100      	movs	r1, #0
 81039c6:	4618      	mov	r0, r3
 81039c8:	f001 f928 	bl	8104c1c <RCCEx_PLL2_Config>
 81039cc:	4603      	mov	r3, r0
 81039ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81039d2:	e011      	b.n	81039f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81039d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81039d8:	3328      	adds	r3, #40	@ 0x28
 81039da:	2100      	movs	r1, #0
 81039dc:	4618      	mov	r0, r3
 81039de:	f001 f9cf 	bl	8104d80 <RCCEx_PLL3_Config>
 81039e2:	4603      	mov	r3, r0
 81039e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 81039e8:	e006      	b.n	81039f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81039ea:	2301      	movs	r3, #1
 81039ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81039f0:	e002      	b.n	81039f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81039f2:	bf00      	nop
 81039f4:	e000      	b.n	81039f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 81039f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81039f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81039fc:	2b00      	cmp	r3, #0
 81039fe:	d10a      	bne.n	8103a16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103a00:	4b4f      	ldr	r3, [pc, #316]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103a04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8103a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8103a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a10:	430b      	orrs	r3, r1
 8103a12:	6513      	str	r3, [r2, #80]	@ 0x50
 8103a14:	e003      	b.n	8103a1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103a26:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8103a2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8103a2e:	2300      	movs	r3, #0
 8103a30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8103a34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8103a38:	460b      	mov	r3, r1
 8103a3a:	4313      	orrs	r3, r2
 8103a3c:	d053      	beq.n	8103ae6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8103a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103a46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8103a4a:	d035      	beq.n	8103ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8103a4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8103a50:	d82e      	bhi.n	8103ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103a52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103a56:	d031      	beq.n	8103abc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8103a58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8103a5c:	d828      	bhi.n	8103ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103a62:	d01a      	beq.n	8103a9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8103a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8103a68:	d822      	bhi.n	8103ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8103a6a:	2b00      	cmp	r3, #0
 8103a6c:	d003      	beq.n	8103a76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8103a6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103a72:	d007      	beq.n	8103a84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8103a74:	e01c      	b.n	8103ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103a76:	4b32      	ldr	r3, [pc, #200]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103a7a:	4a31      	ldr	r2, [pc, #196]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103a82:	e01c      	b.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a88:	3308      	adds	r3, #8
 8103a8a:	2100      	movs	r1, #0
 8103a8c:	4618      	mov	r0, r3
 8103a8e:	f001 f8c5 	bl	8104c1c <RCCEx_PLL2_Config>
 8103a92:	4603      	mov	r3, r0
 8103a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103a98:	e011      	b.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103a9e:	3328      	adds	r3, #40	@ 0x28
 8103aa0:	2100      	movs	r1, #0
 8103aa2:	4618      	mov	r0, r3
 8103aa4:	f001 f96c 	bl	8104d80 <RCCEx_PLL3_Config>
 8103aa8:	4603      	mov	r3, r0
 8103aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103aae:	e006      	b.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103ab0:	2301      	movs	r3, #1
 8103ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103ab6:	e002      	b.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103ab8:	bf00      	nop
 8103aba:	e000      	b.n	8103abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8103abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ac2:	2b00      	cmp	r3, #0
 8103ac4:	d10b      	bne.n	8103ade <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103aca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8103ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8103ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8103b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8103ad8:	430b      	orrs	r3, r1
 8103ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8103adc:	e003      	b.n	8103ae6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103aee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8103af2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8103af6:	2300      	movs	r3, #0
 8103af8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8103afc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8103b00:	460b      	mov	r3, r1
 8103b02:	4313      	orrs	r3, r2
 8103b04:	d056      	beq.n	8103bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8103b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103b0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103b12:	d038      	beq.n	8103b86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8103b14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8103b18:	d831      	bhi.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103b1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103b1e:	d034      	beq.n	8103b8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8103b20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8103b24:	d82b      	bhi.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103b26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103b2a:	d01d      	beq.n	8103b68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8103b2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8103b30:	d825      	bhi.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103b32:	2b00      	cmp	r3, #0
 8103b34:	d006      	beq.n	8103b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8103b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8103b3a:	d00a      	beq.n	8103b52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103b3c:	e01f      	b.n	8103b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8103b3e:	bf00      	nop
 8103b40:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103b44:	4ba2      	ldr	r3, [pc, #648]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103b48:	4aa1      	ldr	r2, [pc, #644]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103b50:	e01c      	b.n	8103b8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b56:	3308      	adds	r3, #8
 8103b58:	2100      	movs	r1, #0
 8103b5a:	4618      	mov	r0, r3
 8103b5c:	f001 f85e 	bl	8104c1c <RCCEx_PLL2_Config>
 8103b60:	4603      	mov	r3, r0
 8103b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8103b66:	e011      	b.n	8103b8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103b6c:	3328      	adds	r3, #40	@ 0x28
 8103b6e:	2100      	movs	r1, #0
 8103b70:	4618      	mov	r0, r3
 8103b72:	f001 f905 	bl	8104d80 <RCCEx_PLL3_Config>
 8103b76:	4603      	mov	r3, r0
 8103b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8103b7c:	e006      	b.n	8103b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8103b7e:	2301      	movs	r3, #1
 8103b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103b84:	e002      	b.n	8103b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103b86:	bf00      	nop
 8103b88:	e000      	b.n	8103b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8103b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103b90:	2b00      	cmp	r3, #0
 8103b92:	d10b      	bne.n	8103bac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103b94:	4b8e      	ldr	r3, [pc, #568]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103b98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8103b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ba0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8103ba4:	4a8a      	ldr	r2, [pc, #552]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ba6:	430b      	orrs	r3, r1
 8103ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8103baa:	e003      	b.n	8103bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103bbc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8103bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8103bc4:	2300      	movs	r3, #0
 8103bc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8103bca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8103bce:	460b      	mov	r3, r1
 8103bd0:	4313      	orrs	r3, r2
 8103bd2:	d03a      	beq.n	8103c4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8103bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103bda:	2b30      	cmp	r3, #48	@ 0x30
 8103bdc:	d01f      	beq.n	8103c1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8103bde:	2b30      	cmp	r3, #48	@ 0x30
 8103be0:	d819      	bhi.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103be2:	2b20      	cmp	r3, #32
 8103be4:	d00c      	beq.n	8103c00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8103be6:	2b20      	cmp	r3, #32
 8103be8:	d815      	bhi.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8103bea:	2b00      	cmp	r3, #0
 8103bec:	d019      	beq.n	8103c22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8103bee:	2b10      	cmp	r3, #16
 8103bf0:	d111      	bne.n	8103c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103bf2:	4b77      	ldr	r3, [pc, #476]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103bf6:	4a76      	ldr	r2, [pc, #472]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103bfe:	e011      	b.n	8103c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c04:	3308      	adds	r3, #8
 8103c06:	2102      	movs	r1, #2
 8103c08:	4618      	mov	r0, r3
 8103c0a:	f001 f807 	bl	8104c1c <RCCEx_PLL2_Config>
 8103c0e:	4603      	mov	r3, r0
 8103c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8103c14:	e006      	b.n	8103c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103c16:	2301      	movs	r3, #1
 8103c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103c1c:	e002      	b.n	8103c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103c1e:	bf00      	nop
 8103c20:	e000      	b.n	8103c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8103c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c28:	2b00      	cmp	r3, #0
 8103c2a:	d10a      	bne.n	8103c42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8103c2c:	4b68      	ldr	r3, [pc, #416]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103c30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8103c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103c3a:	4a65      	ldr	r2, [pc, #404]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103c3c:	430b      	orrs	r3, r1
 8103c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103c40:	e003      	b.n	8103c4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103c46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8103c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103c52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8103c56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8103c5a:	2300      	movs	r3, #0
 8103c5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8103c60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8103c64:	460b      	mov	r3, r1
 8103c66:	4313      	orrs	r3, r2
 8103c68:	d051      	beq.n	8103d0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8103c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103c74:	d035      	beq.n	8103ce2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8103c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8103c7a:	d82e      	bhi.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103c7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103c80:	d031      	beq.n	8103ce6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8103c82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8103c86:	d828      	bhi.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103c8c:	d01a      	beq.n	8103cc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8103c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103c92:	d822      	bhi.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8103c94:	2b00      	cmp	r3, #0
 8103c96:	d003      	beq.n	8103ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8103c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103c9c:	d007      	beq.n	8103cae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8103c9e:	e01c      	b.n	8103cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103ca4:	4a4a      	ldr	r2, [pc, #296]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103cac:	e01c      	b.n	8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cb2:	3308      	adds	r3, #8
 8103cb4:	2100      	movs	r1, #0
 8103cb6:	4618      	mov	r0, r3
 8103cb8:	f000 ffb0 	bl	8104c1c <RCCEx_PLL2_Config>
 8103cbc:	4603      	mov	r3, r0
 8103cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103cc2:	e011      	b.n	8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cc8:	3328      	adds	r3, #40	@ 0x28
 8103cca:	2100      	movs	r1, #0
 8103ccc:	4618      	mov	r0, r3
 8103cce:	f001 f857 	bl	8104d80 <RCCEx_PLL3_Config>
 8103cd2:	4603      	mov	r3, r0
 8103cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8103cd8:	e006      	b.n	8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103cda:	2301      	movs	r3, #1
 8103cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103ce0:	e002      	b.n	8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103ce2:	bf00      	nop
 8103ce4:	e000      	b.n	8103ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8103ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103cec:	2b00      	cmp	r3, #0
 8103cee:	d10a      	bne.n	8103d06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8103cf0:	4b37      	ldr	r3, [pc, #220]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103cf4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8103cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8103cfe:	4a34      	ldr	r2, [pc, #208]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103d00:	430b      	orrs	r3, r1
 8103d02:	6513      	str	r3, [r2, #80]	@ 0x50
 8103d04:	e003      	b.n	8103d0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8103d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103d16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8103d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8103d1e:	2300      	movs	r3, #0
 8103d20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8103d24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8103d28:	460b      	mov	r3, r1
 8103d2a:	4313      	orrs	r3, r2
 8103d2c:	d056      	beq.n	8103ddc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8103d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103d38:	d033      	beq.n	8103da2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8103d3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8103d3e:	d82c      	bhi.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103d40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103d44:	d02f      	beq.n	8103da6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8103d46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8103d4a:	d826      	bhi.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103d4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103d50:	d02b      	beq.n	8103daa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8103d52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8103d56:	d820      	bhi.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103d58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103d5c:	d012      	beq.n	8103d84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8103d5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103d62:	d81a      	bhi.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8103d64:	2b00      	cmp	r3, #0
 8103d66:	d022      	beq.n	8103dae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8103d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103d6c:	d115      	bne.n	8103d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d72:	3308      	adds	r3, #8
 8103d74:	2101      	movs	r1, #1
 8103d76:	4618      	mov	r0, r3
 8103d78:	f000 ff50 	bl	8104c1c <RCCEx_PLL2_Config>
 8103d7c:	4603      	mov	r3, r0
 8103d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103d82:	e015      	b.n	8103db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103d88:	3328      	adds	r3, #40	@ 0x28
 8103d8a:	2101      	movs	r1, #1
 8103d8c:	4618      	mov	r0, r3
 8103d8e:	f000 fff7 	bl	8104d80 <RCCEx_PLL3_Config>
 8103d92:	4603      	mov	r3, r0
 8103d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8103d98:	e00a      	b.n	8103db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103d9a:	2301      	movs	r3, #1
 8103d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103da0:	e006      	b.n	8103db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103da2:	bf00      	nop
 8103da4:	e004      	b.n	8103db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103da6:	bf00      	nop
 8103da8:	e002      	b.n	8103db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103daa:	bf00      	nop
 8103dac:	e000      	b.n	8103db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8103dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103db4:	2b00      	cmp	r3, #0
 8103db6:	d10d      	bne.n	8103dd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8103db8:	4b05      	ldr	r3, [pc, #20]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103dbc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8103dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8103dc6:	4a02      	ldr	r2, [pc, #8]	@ (8103dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8103dc8:	430b      	orrs	r3, r1
 8103dca:	6513      	str	r3, [r2, #80]	@ 0x50
 8103dcc:	e006      	b.n	8103ddc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8103dce:	bf00      	nop
 8103dd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8103ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103de4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8103de8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8103dec:	2300      	movs	r3, #0
 8103dee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8103df2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8103df6:	460b      	mov	r3, r1
 8103df8:	4313      	orrs	r3, r2
 8103dfa:	d055      	beq.n	8103ea8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8103dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103e08:	d033      	beq.n	8103e72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8103e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8103e0e:	d82c      	bhi.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103e14:	d02f      	beq.n	8103e76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8103e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8103e1a:	d826      	bhi.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103e1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103e20:	d02b      	beq.n	8103e7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8103e22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8103e26:	d820      	bhi.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103e2c:	d012      	beq.n	8103e54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8103e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103e32:	d81a      	bhi.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8103e34:	2b00      	cmp	r3, #0
 8103e36:	d022      	beq.n	8103e7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8103e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103e3c:	d115      	bne.n	8103e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e42:	3308      	adds	r3, #8
 8103e44:	2101      	movs	r1, #1
 8103e46:	4618      	mov	r0, r3
 8103e48:	f000 fee8 	bl	8104c1c <RCCEx_PLL2_Config>
 8103e4c:	4603      	mov	r3, r0
 8103e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103e52:	e015      	b.n	8103e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e58:	3328      	adds	r3, #40	@ 0x28
 8103e5a:	2101      	movs	r1, #1
 8103e5c:	4618      	mov	r0, r3
 8103e5e:	f000 ff8f 	bl	8104d80 <RCCEx_PLL3_Config>
 8103e62:	4603      	mov	r3, r0
 8103e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8103e68:	e00a      	b.n	8103e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8103e6a:	2301      	movs	r3, #1
 8103e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103e70:	e006      	b.n	8103e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103e72:	bf00      	nop
 8103e74:	e004      	b.n	8103e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103e76:	bf00      	nop
 8103e78:	e002      	b.n	8103e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103e7a:	bf00      	nop
 8103e7c:	e000      	b.n	8103e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8103e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103e80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103e84:	2b00      	cmp	r3, #0
 8103e86:	d10b      	bne.n	8103ea0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8103e88:	4ba4      	ldr	r3, [pc, #656]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103e8c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8103e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103e94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8103e98:	4aa0      	ldr	r2, [pc, #640]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103e9a:	430b      	orrs	r3, r1
 8103e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8103e9e:	e003      	b.n	8103ea8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8103ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103eb0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8103eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8103eb8:	2300      	movs	r3, #0
 8103eba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8103ebe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8103ec2:	460b      	mov	r3, r1
 8103ec4:	4313      	orrs	r3, r2
 8103ec6:	d037      	beq.n	8103f38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8103ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103ed2:	d00e      	beq.n	8103ef2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8103ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8103ed8:	d816      	bhi.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8103eda:	2b00      	cmp	r3, #0
 8103edc:	d018      	beq.n	8103f10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8103ede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8103ee2:	d111      	bne.n	8103f08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ee4:	4b8d      	ldr	r3, [pc, #564]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103ee8:	4a8c      	ldr	r2, [pc, #560]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103ef0:	e00f      	b.n	8103f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103ef6:	3308      	adds	r3, #8
 8103ef8:	2101      	movs	r1, #1
 8103efa:	4618      	mov	r0, r3
 8103efc:	f000 fe8e 	bl	8104c1c <RCCEx_PLL2_Config>
 8103f00:	4603      	mov	r3, r0
 8103f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8103f06:	e004      	b.n	8103f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103f08:	2301      	movs	r3, #1
 8103f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103f0e:	e000      	b.n	8103f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8103f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103f16:	2b00      	cmp	r3, #0
 8103f18:	d10a      	bne.n	8103f30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8103f1a:	4b80      	ldr	r3, [pc, #512]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103f1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8103f28:	4a7c      	ldr	r2, [pc, #496]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f2a:	430b      	orrs	r3, r1
 8103f2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8103f2e:	e003      	b.n	8103f38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8103f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103f40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8103f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8103f48:	2300      	movs	r3, #0
 8103f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8103f4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8103f52:	460b      	mov	r3, r1
 8103f54:	4313      	orrs	r3, r2
 8103f56:	d039      	beq.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8103f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103f5e:	2b03      	cmp	r3, #3
 8103f60:	d81c      	bhi.n	8103f9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8103f62:	a201      	add	r2, pc, #4	@ (adr r2, 8103f68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8103f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103f68:	08103fa5 	.word	0x08103fa5
 8103f6c:	08103f79 	.word	0x08103f79
 8103f70:	08103f87 	.word	0x08103f87
 8103f74:	08103fa5 	.word	0x08103fa5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f78:	4b68      	ldr	r3, [pc, #416]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103f7c:	4a67      	ldr	r2, [pc, #412]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103f82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103f84:	e00f      	b.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103f8a:	3308      	adds	r3, #8
 8103f8c:	2102      	movs	r1, #2
 8103f8e:	4618      	mov	r0, r3
 8103f90:	f000 fe44 	bl	8104c1c <RCCEx_PLL2_Config>
 8103f94:	4603      	mov	r3, r0
 8103f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8103f9a:	e004      	b.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8103f9c:	2301      	movs	r3, #1
 8103f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103fa2:	e000      	b.n	8103fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8103fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103faa:	2b00      	cmp	r3, #0
 8103fac:	d10a      	bne.n	8103fc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8103fae:	4b5b      	ldr	r3, [pc, #364]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103fb2:	f023 0103 	bic.w	r1, r3, #3
 8103fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8103fbc:	4a57      	ldr	r2, [pc, #348]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8103fbe:	430b      	orrs	r3, r1
 8103fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8103fc2:	e003      	b.n	8103fcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8103fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103fd4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8103fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8103fdc:	2300      	movs	r3, #0
 8103fde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8103fe2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8103fe6:	460b      	mov	r3, r1
 8103fe8:	4313      	orrs	r3, r2
 8103fea:	f000 809f 	beq.w	810412c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8103fee:	4b4c      	ldr	r3, [pc, #304]	@ (8104120 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103ff0:	681b      	ldr	r3, [r3, #0]
 8103ff2:	4a4b      	ldr	r2, [pc, #300]	@ (8104120 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8103ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8103ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8103ffa:	f7fd fef1 	bl	8101de0 <HAL_GetTick>
 8103ffe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104002:	e00b      	b.n	810401c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104004:	f7fd feec 	bl	8101de0 <HAL_GetTick>
 8104008:	4602      	mov	r2, r0
 810400a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 810400e:	1ad3      	subs	r3, r2, r3
 8104010:	2b64      	cmp	r3, #100	@ 0x64
 8104012:	d903      	bls.n	810401c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8104014:	2303      	movs	r3, #3
 8104016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810401a:	e005      	b.n	8104028 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810401c:	4b40      	ldr	r3, [pc, #256]	@ (8104120 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810401e:	681b      	ldr	r3, [r3, #0]
 8104020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8104024:	2b00      	cmp	r3, #0
 8104026:	d0ed      	beq.n	8104004 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8104028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810402c:	2b00      	cmp	r3, #0
 810402e:	d179      	bne.n	8104124 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8104030:	4b3a      	ldr	r3, [pc, #232]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104032:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8104034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810403c:	4053      	eors	r3, r2
 810403e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8104042:	2b00      	cmp	r3, #0
 8104044:	d015      	beq.n	8104072 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8104046:	4b35      	ldr	r3, [pc, #212]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810404a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 810404e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104052:	4b32      	ldr	r3, [pc, #200]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104056:	4a31      	ldr	r2, [pc, #196]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 810405c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 810405e:	4b2f      	ldr	r3, [pc, #188]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8104062:	4a2e      	ldr	r2, [pc, #184]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8104064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8104068:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 810406a:	4a2c      	ldr	r2, [pc, #176]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810406c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8104070:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 810407a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810407e:	d118      	bne.n	81040b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104080:	f7fd feae 	bl	8101de0 <HAL_GetTick>
 8104084:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104088:	e00d      	b.n	81040a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810408a:	f7fd fea9 	bl	8101de0 <HAL_GetTick>
 810408e:	4602      	mov	r2, r0
 8104090:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8104094:	1ad2      	subs	r2, r2, r3
 8104096:	f241 3388 	movw	r3, #5000	@ 0x1388
 810409a:	429a      	cmp	r2, r3
 810409c:	d903      	bls.n	81040a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 810409e:	2303      	movs	r3, #3
 81040a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 81040a4:	e005      	b.n	81040b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81040a6:	4b1d      	ldr	r3, [pc, #116]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81040a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 81040aa:	f003 0302 	and.w	r3, r3, #2
 81040ae:	2b00      	cmp	r3, #0
 81040b0:	d0eb      	beq.n	810408a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81040b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81040b6:	2b00      	cmp	r3, #0
 81040b8:	d12b      	bne.n	8104112 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81040ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81040c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 81040c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81040ca:	d110      	bne.n	81040ee <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 81040cc:	4b13      	ldr	r3, [pc, #76]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81040ce:	691b      	ldr	r3, [r3, #16]
 81040d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 81040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81040d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 81040dc:	091b      	lsrs	r3, r3, #4
 81040de:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 81040e2:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 81040e6:	4a0d      	ldr	r2, [pc, #52]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81040e8:	430b      	orrs	r3, r1
 81040ea:	6113      	str	r3, [r2, #16]
 81040ec:	e005      	b.n	81040fa <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 81040ee:	4b0b      	ldr	r3, [pc, #44]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81040f0:	691b      	ldr	r3, [r3, #16]
 81040f2:	4a0a      	ldr	r2, [pc, #40]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81040f4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 81040f8:	6113      	str	r3, [r2, #16]
 81040fa:	4b08      	ldr	r3, [pc, #32]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81040fc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 81040fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104102:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8104106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 810410a:	4a04      	ldr	r2, [pc, #16]	@ (810411c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810410c:	430b      	orrs	r3, r1
 810410e:	6713      	str	r3, [r2, #112]	@ 0x70
 8104110:	e00c      	b.n	810412c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104112:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104116:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 810411a:	e007      	b.n	810412c <HAL_RCCEx_PeriphCLKConfig+0x924>
 810411c:	58024400 	.word	0x58024400
 8104120:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 810412c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104134:	f002 0301 	and.w	r3, r2, #1
 8104138:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 810413c:	2300      	movs	r3, #0
 810413e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8104142:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8104146:	460b      	mov	r3, r1
 8104148:	4313      	orrs	r3, r2
 810414a:	f000 8089 	beq.w	8104260 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 810414e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104152:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8104154:	2b28      	cmp	r3, #40	@ 0x28
 8104156:	d86b      	bhi.n	8104230 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8104158:	a201      	add	r2, pc, #4	@ (adr r2, 8104160 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 810415a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810415e:	bf00      	nop
 8104160:	08104239 	.word	0x08104239
 8104164:	08104231 	.word	0x08104231
 8104168:	08104231 	.word	0x08104231
 810416c:	08104231 	.word	0x08104231
 8104170:	08104231 	.word	0x08104231
 8104174:	08104231 	.word	0x08104231
 8104178:	08104231 	.word	0x08104231
 810417c:	08104231 	.word	0x08104231
 8104180:	08104205 	.word	0x08104205
 8104184:	08104231 	.word	0x08104231
 8104188:	08104231 	.word	0x08104231
 810418c:	08104231 	.word	0x08104231
 8104190:	08104231 	.word	0x08104231
 8104194:	08104231 	.word	0x08104231
 8104198:	08104231 	.word	0x08104231
 810419c:	08104231 	.word	0x08104231
 81041a0:	0810421b 	.word	0x0810421b
 81041a4:	08104231 	.word	0x08104231
 81041a8:	08104231 	.word	0x08104231
 81041ac:	08104231 	.word	0x08104231
 81041b0:	08104231 	.word	0x08104231
 81041b4:	08104231 	.word	0x08104231
 81041b8:	08104231 	.word	0x08104231
 81041bc:	08104231 	.word	0x08104231
 81041c0:	08104239 	.word	0x08104239
 81041c4:	08104231 	.word	0x08104231
 81041c8:	08104231 	.word	0x08104231
 81041cc:	08104231 	.word	0x08104231
 81041d0:	08104231 	.word	0x08104231
 81041d4:	08104231 	.word	0x08104231
 81041d8:	08104231 	.word	0x08104231
 81041dc:	08104231 	.word	0x08104231
 81041e0:	08104239 	.word	0x08104239
 81041e4:	08104231 	.word	0x08104231
 81041e8:	08104231 	.word	0x08104231
 81041ec:	08104231 	.word	0x08104231
 81041f0:	08104231 	.word	0x08104231
 81041f4:	08104231 	.word	0x08104231
 81041f8:	08104231 	.word	0x08104231
 81041fc:	08104231 	.word	0x08104231
 8104200:	08104239 	.word	0x08104239
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104208:	3308      	adds	r3, #8
 810420a:	2101      	movs	r1, #1
 810420c:	4618      	mov	r0, r3
 810420e:	f000 fd05 	bl	8104c1c <RCCEx_PLL2_Config>
 8104212:	4603      	mov	r3, r0
 8104214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8104218:	e00f      	b.n	810423a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810421a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810421e:	3328      	adds	r3, #40	@ 0x28
 8104220:	2101      	movs	r1, #1
 8104222:	4618      	mov	r0, r3
 8104224:	f000 fdac 	bl	8104d80 <RCCEx_PLL3_Config>
 8104228:	4603      	mov	r3, r0
 810422a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 810422e:	e004      	b.n	810423a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104230:	2301      	movs	r3, #1
 8104232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104236:	e000      	b.n	810423a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8104238:	bf00      	nop
    }

    if (ret == HAL_OK)
 810423a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810423e:	2b00      	cmp	r3, #0
 8104240:	d10a      	bne.n	8104258 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104242:	4bbf      	ldr	r3, [pc, #764]	@ (8104540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104246:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 810424a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810424e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8104250:	4abb      	ldr	r2, [pc, #748]	@ (8104540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104252:	430b      	orrs	r3, r1
 8104254:	6553      	str	r3, [r2, #84]	@ 0x54
 8104256:	e003      	b.n	8104260 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810425c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8104260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104268:	f002 0302 	and.w	r3, r2, #2
 810426c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8104270:	2300      	movs	r3, #0
 8104272:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8104276:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 810427a:	460b      	mov	r3, r1
 810427c:	4313      	orrs	r3, r2
 810427e:	d041      	beq.n	8104304 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8104280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8104286:	2b05      	cmp	r3, #5
 8104288:	d824      	bhi.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 810428a:	a201      	add	r2, pc, #4	@ (adr r2, 8104290 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 810428c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104290:	081042dd 	.word	0x081042dd
 8104294:	081042a9 	.word	0x081042a9
 8104298:	081042bf 	.word	0x081042bf
 810429c:	081042dd 	.word	0x081042dd
 81042a0:	081042dd 	.word	0x081042dd
 81042a4:	081042dd 	.word	0x081042dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81042a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042ac:	3308      	adds	r3, #8
 81042ae:	2101      	movs	r1, #1
 81042b0:	4618      	mov	r0, r3
 81042b2:	f000 fcb3 	bl	8104c1c <RCCEx_PLL2_Config>
 81042b6:	4603      	mov	r3, r0
 81042b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81042bc:	e00f      	b.n	81042de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042c2:	3328      	adds	r3, #40	@ 0x28
 81042c4:	2101      	movs	r1, #1
 81042c6:	4618      	mov	r0, r3
 81042c8:	f000 fd5a 	bl	8104d80 <RCCEx_PLL3_Config>
 81042cc:	4603      	mov	r3, r0
 81042ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 81042d2:	e004      	b.n	81042de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81042d4:	2301      	movs	r3, #1
 81042d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81042da:	e000      	b.n	81042de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 81042dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81042de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81042e2:	2b00      	cmp	r3, #0
 81042e4:	d10a      	bne.n	81042fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 81042e6:	4b96      	ldr	r3, [pc, #600]	@ (8104540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81042e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81042ea:	f023 0107 	bic.w	r1, r3, #7
 81042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81042f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 81042f4:	4a92      	ldr	r2, [pc, #584]	@ (8104540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81042f6:	430b      	orrs	r3, r1
 81042f8:	6553      	str	r3, [r2, #84]	@ 0x54
 81042fa:	e003      	b.n	8104304 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8104304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104308:	e9d3 2300 	ldrd	r2, r3, [r3]
 810430c:	f002 0304 	and.w	r3, r2, #4
 8104310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8104314:	2300      	movs	r3, #0
 8104316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810431a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 810431e:	460b      	mov	r3, r1
 8104320:	4313      	orrs	r3, r2
 8104322:	d044      	beq.n	81043ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8104324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810432c:	2b05      	cmp	r3, #5
 810432e:	d825      	bhi.n	810437c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8104330:	a201      	add	r2, pc, #4	@ (adr r2, 8104338 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8104332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104336:	bf00      	nop
 8104338:	08104385 	.word	0x08104385
 810433c:	08104351 	.word	0x08104351
 8104340:	08104367 	.word	0x08104367
 8104344:	08104385 	.word	0x08104385
 8104348:	08104385 	.word	0x08104385
 810434c:	08104385 	.word	0x08104385
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104354:	3308      	adds	r3, #8
 8104356:	2101      	movs	r1, #1
 8104358:	4618      	mov	r0, r3
 810435a:	f000 fc5f 	bl	8104c1c <RCCEx_PLL2_Config>
 810435e:	4603      	mov	r3, r0
 8104360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8104364:	e00f      	b.n	8104386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810436a:	3328      	adds	r3, #40	@ 0x28
 810436c:	2101      	movs	r1, #1
 810436e:	4618      	mov	r0, r3
 8104370:	f000 fd06 	bl	8104d80 <RCCEx_PLL3_Config>
 8104374:	4603      	mov	r3, r0
 8104376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 810437a:	e004      	b.n	8104386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810437c:	2301      	movs	r3, #1
 810437e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104382:	e000      	b.n	8104386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8104384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810438a:	2b00      	cmp	r3, #0
 810438c:	d10b      	bne.n	81043a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 810438e:	4b6c      	ldr	r3, [pc, #432]	@ (8104540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104392:	f023 0107 	bic.w	r1, r3, #7
 8104396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810439a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 810439e:	4a68      	ldr	r2, [pc, #416]	@ (8104540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81043a0:	430b      	orrs	r3, r1
 81043a2:	6593      	str	r3, [r2, #88]	@ 0x58
 81043a4:	e003      	b.n	81043ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81043a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81043aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81043ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81043b6:	f002 0320 	and.w	r3, r2, #32
 81043ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 81043be:	2300      	movs	r3, #0
 81043c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 81043c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 81043c8:	460b      	mov	r3, r1
 81043ca:	4313      	orrs	r3, r2
 81043cc:	d055      	beq.n	810447a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 81043ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81043d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81043d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81043da:	d033      	beq.n	8104444 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 81043dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 81043e0:	d82c      	bhi.n	810443c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81043e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81043e6:	d02f      	beq.n	8104448 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 81043e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81043ec:	d826      	bhi.n	810443c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81043ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81043f2:	d02b      	beq.n	810444c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 81043f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 81043f8:	d820      	bhi.n	810443c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 81043fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 81043fe:	d012      	beq.n	8104426 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8104400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8104404:	d81a      	bhi.n	810443c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8104406:	2b00      	cmp	r3, #0
 8104408:	d022      	beq.n	8104450 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810440a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 810440e:	d115      	bne.n	810443c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104414:	3308      	adds	r3, #8
 8104416:	2100      	movs	r1, #0
 8104418:	4618      	mov	r0, r3
 810441a:	f000 fbff 	bl	8104c1c <RCCEx_PLL2_Config>
 810441e:	4603      	mov	r3, r0
 8104420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8104424:	e015      	b.n	8104452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810442a:	3328      	adds	r3, #40	@ 0x28
 810442c:	2102      	movs	r1, #2
 810442e:	4618      	mov	r0, r3
 8104430:	f000 fca6 	bl	8104d80 <RCCEx_PLL3_Config>
 8104434:	4603      	mov	r3, r0
 8104436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810443a:	e00a      	b.n	8104452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810443c:	2301      	movs	r3, #1
 810443e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104442:	e006      	b.n	8104452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104444:	bf00      	nop
 8104446:	e004      	b.n	8104452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104448:	bf00      	nop
 810444a:	e002      	b.n	8104452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810444c:	bf00      	nop
 810444e:	e000      	b.n	8104452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8104450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104456:	2b00      	cmp	r3, #0
 8104458:	d10b      	bne.n	8104472 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810445a:	4b39      	ldr	r3, [pc, #228]	@ (8104540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810445c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810445e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8104462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810446a:	4a35      	ldr	r2, [pc, #212]	@ (8104540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810446c:	430b      	orrs	r3, r1
 810446e:	6553      	str	r3, [r2, #84]	@ 0x54
 8104470:	e003      	b.n	810447a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 810447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810447e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104482:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8104486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 810448a:	2300      	movs	r3, #0
 810448c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8104490:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8104494:	460b      	mov	r3, r1
 8104496:	4313      	orrs	r3, r2
 8104498:	d058      	beq.n	810454c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 810449a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810449e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81044a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81044a6:	d033      	beq.n	8104510 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81044a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81044ac:	d82c      	bhi.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81044ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81044b2:	d02f      	beq.n	8104514 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81044b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81044b8:	d826      	bhi.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81044ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81044be:	d02b      	beq.n	8104518 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 81044c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 81044c4:	d820      	bhi.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81044c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81044ca:	d012      	beq.n	81044f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 81044cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 81044d0:	d81a      	bhi.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81044d2:	2b00      	cmp	r3, #0
 81044d4:	d022      	beq.n	810451c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 81044d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 81044da:	d115      	bne.n	8104508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81044dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044e0:	3308      	adds	r3, #8
 81044e2:	2100      	movs	r1, #0
 81044e4:	4618      	mov	r0, r3
 81044e6:	f000 fb99 	bl	8104c1c <RCCEx_PLL2_Config>
 81044ea:	4603      	mov	r3, r0
 81044ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 81044f0:	e015      	b.n	810451e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81044f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81044f6:	3328      	adds	r3, #40	@ 0x28
 81044f8:	2102      	movs	r1, #2
 81044fa:	4618      	mov	r0, r3
 81044fc:	f000 fc40 	bl	8104d80 <RCCEx_PLL3_Config>
 8104500:	4603      	mov	r3, r0
 8104502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8104506:	e00a      	b.n	810451e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104508:	2301      	movs	r3, #1
 810450a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810450e:	e006      	b.n	810451e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104510:	bf00      	nop
 8104512:	e004      	b.n	810451e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104514:	bf00      	nop
 8104516:	e002      	b.n	810451e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8104518:	bf00      	nop
 810451a:	e000      	b.n	810451e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810451c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810451e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104522:	2b00      	cmp	r3, #0
 8104524:	d10e      	bne.n	8104544 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8104526:	4b06      	ldr	r3, [pc, #24]	@ (8104540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810452a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 810452e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8104536:	4a02      	ldr	r2, [pc, #8]	@ (8104540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8104538:	430b      	orrs	r3, r1
 810453a:	6593      	str	r3, [r2, #88]	@ 0x58
 810453c:	e006      	b.n	810454c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 810453e:	bf00      	nop
 8104540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 810454c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104554:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8104558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 810455c:	2300      	movs	r3, #0
 810455e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8104562:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8104566:	460b      	mov	r3, r1
 8104568:	4313      	orrs	r3, r2
 810456a:	d055      	beq.n	8104618 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 810456c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104570:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104574:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8104578:	d033      	beq.n	81045e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 810457a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 810457e:	d82c      	bhi.n	81045da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8104584:	d02f      	beq.n	81045e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8104586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 810458a:	d826      	bhi.n	81045da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 810458c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8104590:	d02b      	beq.n	81045ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8104592:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8104596:	d820      	bhi.n	81045da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8104598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 810459c:	d012      	beq.n	81045c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 810459e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81045a2:	d81a      	bhi.n	81045da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81045a4:	2b00      	cmp	r3, #0
 81045a6:	d022      	beq.n	81045ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81045a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81045ac:	d115      	bne.n	81045da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81045ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045b2:	3308      	adds	r3, #8
 81045b4:	2100      	movs	r1, #0
 81045b6:	4618      	mov	r0, r3
 81045b8:	f000 fb30 	bl	8104c1c <RCCEx_PLL2_Config>
 81045bc:	4603      	mov	r3, r0
 81045be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81045c2:	e015      	b.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81045c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81045c8:	3328      	adds	r3, #40	@ 0x28
 81045ca:	2102      	movs	r1, #2
 81045cc:	4618      	mov	r0, r3
 81045ce:	f000 fbd7 	bl	8104d80 <RCCEx_PLL3_Config>
 81045d2:	4603      	mov	r3, r0
 81045d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 81045d8:	e00a      	b.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81045da:	2301      	movs	r3, #1
 81045dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81045e0:	e006      	b.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81045e2:	bf00      	nop
 81045e4:	e004      	b.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81045e6:	bf00      	nop
 81045e8:	e002      	b.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81045ea:	bf00      	nop
 81045ec:	e000      	b.n	81045f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 81045ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 81045f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81045f4:	2b00      	cmp	r3, #0
 81045f6:	d10b      	bne.n	8104610 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81045f8:	4ba1      	ldr	r3, [pc, #644]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81045fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81045fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8104600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104604:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8104608:	4a9d      	ldr	r2, [pc, #628]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810460a:	430b      	orrs	r3, r1
 810460c:	6593      	str	r3, [r2, #88]	@ 0x58
 810460e:	e003      	b.n	8104618 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8104618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104620:	f002 0308 	and.w	r3, r2, #8
 8104624:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8104628:	2300      	movs	r3, #0
 810462a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 810462e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8104632:	460b      	mov	r3, r1
 8104634:	4313      	orrs	r3, r2
 8104636:	d01e      	beq.n	8104676 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8104638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810463c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104644:	d10c      	bne.n	8104660 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8104646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810464a:	3328      	adds	r3, #40	@ 0x28
 810464c:	2102      	movs	r1, #2
 810464e:	4618      	mov	r0, r3
 8104650:	f000 fb96 	bl	8104d80 <RCCEx_PLL3_Config>
 8104654:	4603      	mov	r3, r0
 8104656:	2b00      	cmp	r3, #0
 8104658:	d002      	beq.n	8104660 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810465a:	2301      	movs	r3, #1
 810465c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8104660:	4b87      	ldr	r3, [pc, #540]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104664:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8104668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810466c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8104670:	4a83      	ldr	r2, [pc, #524]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104672:	430b      	orrs	r3, r1
 8104674:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8104676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810467a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810467e:	f002 0310 	and.w	r3, r2, #16
 8104682:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8104686:	2300      	movs	r3, #0
 8104688:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 810468c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8104690:	460b      	mov	r3, r1
 8104692:	4313      	orrs	r3, r2
 8104694:	d01e      	beq.n	81046d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8104696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810469a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 810469e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81046a2:	d10c      	bne.n	81046be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81046a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046a8:	3328      	adds	r3, #40	@ 0x28
 81046aa:	2102      	movs	r1, #2
 81046ac:	4618      	mov	r0, r3
 81046ae:	f000 fb67 	bl	8104d80 <RCCEx_PLL3_Config>
 81046b2:	4603      	mov	r3, r0
 81046b4:	2b00      	cmp	r3, #0
 81046b6:	d002      	beq.n	81046be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81046b8:	2301      	movs	r3, #1
 81046ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 81046be:	4b70      	ldr	r3, [pc, #448]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81046c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81046c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 81046c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81046ce:	4a6c      	ldr	r2, [pc, #432]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81046d0:	430b      	orrs	r3, r1
 81046d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 81046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81046dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 81046e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 81046e4:	2300      	movs	r3, #0
 81046e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 81046ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 81046ee:	460b      	mov	r3, r1
 81046f0:	4313      	orrs	r3, r2
 81046f2:	d03e      	beq.n	8104772 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 81046f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81046f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81046fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104700:	d022      	beq.n	8104748 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8104702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8104706:	d81b      	bhi.n	8104740 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8104708:	2b00      	cmp	r3, #0
 810470a:	d003      	beq.n	8104714 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 810470c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104710:	d00b      	beq.n	810472a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8104712:	e015      	b.n	8104740 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104718:	3308      	adds	r3, #8
 810471a:	2100      	movs	r1, #0
 810471c:	4618      	mov	r0, r3
 810471e:	f000 fa7d 	bl	8104c1c <RCCEx_PLL2_Config>
 8104722:	4603      	mov	r3, r0
 8104724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8104728:	e00f      	b.n	810474a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810472a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810472e:	3328      	adds	r3, #40	@ 0x28
 8104730:	2102      	movs	r1, #2
 8104732:	4618      	mov	r0, r3
 8104734:	f000 fb24 	bl	8104d80 <RCCEx_PLL3_Config>
 8104738:	4603      	mov	r3, r0
 810473a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810473e:	e004      	b.n	810474a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104740:	2301      	movs	r3, #1
 8104742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8104746:	e000      	b.n	810474a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8104748:	bf00      	nop
    }

    if (ret == HAL_OK)
 810474a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810474e:	2b00      	cmp	r3, #0
 8104750:	d10b      	bne.n	810476a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8104752:	4b4b      	ldr	r3, [pc, #300]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8104756:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810475a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810475e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8104762:	4a47      	ldr	r2, [pc, #284]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104764:	430b      	orrs	r3, r1
 8104766:	6593      	str	r3, [r2, #88]	@ 0x58
 8104768:	e003      	b.n	8104772 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810476a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810476e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8104772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104776:	e9d3 2300 	ldrd	r2, r3, [r3]
 810477a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 810477e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8104780:	2300      	movs	r3, #0
 8104782:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8104784:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8104788:	460b      	mov	r3, r1
 810478a:	4313      	orrs	r3, r2
 810478c:	d03b      	beq.n	8104806 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 810478e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104796:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 810479a:	d01f      	beq.n	81047dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 810479c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81047a0:	d818      	bhi.n	81047d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81047a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81047a6:	d003      	beq.n	81047b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81047a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81047ac:	d007      	beq.n	81047be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81047ae:	e011      	b.n	81047d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81047b0:	4b33      	ldr	r3, [pc, #204]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81047b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81047b4:	4a32      	ldr	r2, [pc, #200]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81047b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81047ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 81047bc:	e00f      	b.n	81047de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81047be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047c2:	3328      	adds	r3, #40	@ 0x28
 81047c4:	2101      	movs	r1, #1
 81047c6:	4618      	mov	r0, r3
 81047c8:	f000 fada 	bl	8104d80 <RCCEx_PLL3_Config>
 81047cc:	4603      	mov	r3, r0
 81047ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 81047d2:	e004      	b.n	81047de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81047d4:	2301      	movs	r3, #1
 81047d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81047da:	e000      	b.n	81047de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 81047dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 81047de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81047e2:	2b00      	cmp	r3, #0
 81047e4:	d10b      	bne.n	81047fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 81047e6:	4b26      	ldr	r3, [pc, #152]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81047e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81047ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81047ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81047f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81047f6:	4a22      	ldr	r2, [pc, #136]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81047f8:	430b      	orrs	r3, r1
 81047fa:	6553      	str	r3, [r2, #84]	@ 0x54
 81047fc:	e003      	b.n	8104806 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81047fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8104806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810480a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810480e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8104812:	673b      	str	r3, [r7, #112]	@ 0x70
 8104814:	2300      	movs	r3, #0
 8104816:	677b      	str	r3, [r7, #116]	@ 0x74
 8104818:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 810481c:	460b      	mov	r3, r1
 810481e:	4313      	orrs	r3, r2
 8104820:	d034      	beq.n	810488c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8104822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104828:	2b00      	cmp	r3, #0
 810482a:	d003      	beq.n	8104834 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 810482c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8104830:	d007      	beq.n	8104842 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8104832:	e011      	b.n	8104858 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104834:	4b12      	ldr	r3, [pc, #72]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104838:	4a11      	ldr	r2, [pc, #68]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810483a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810483e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104840:	e00e      	b.n	8104860 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104846:	3308      	adds	r3, #8
 8104848:	2102      	movs	r1, #2
 810484a:	4618      	mov	r0, r3
 810484c:	f000 f9e6 	bl	8104c1c <RCCEx_PLL2_Config>
 8104850:	4603      	mov	r3, r0
 8104852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8104856:	e003      	b.n	8104860 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8104858:	2301      	movs	r3, #1
 810485a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810485e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104864:	2b00      	cmp	r3, #0
 8104866:	d10d      	bne.n	8104884 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8104868:	4b05      	ldr	r3, [pc, #20]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810486a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810486c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8104870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104876:	4a02      	ldr	r2, [pc, #8]	@ (8104880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8104878:	430b      	orrs	r3, r1
 810487a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 810487c:	e006      	b.n	810488c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 810487e:	bf00      	nop
 8104880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 810488c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104894:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8104898:	66bb      	str	r3, [r7, #104]	@ 0x68
 810489a:	2300      	movs	r3, #0
 810489c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 810489e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81048a2:	460b      	mov	r3, r1
 81048a4:	4313      	orrs	r3, r2
 81048a6:	d00c      	beq.n	81048c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81048a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048ac:	3328      	adds	r3, #40	@ 0x28
 81048ae:	2102      	movs	r1, #2
 81048b0:	4618      	mov	r0, r3
 81048b2:	f000 fa65 	bl	8104d80 <RCCEx_PLL3_Config>
 81048b6:	4603      	mov	r3, r0
 81048b8:	2b00      	cmp	r3, #0
 81048ba:	d002      	beq.n	81048c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 81048bc:	2301      	movs	r3, #1
 81048be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 81048c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81048ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 81048ce:	663b      	str	r3, [r7, #96]	@ 0x60
 81048d0:	2300      	movs	r3, #0
 81048d2:	667b      	str	r3, [r7, #100]	@ 0x64
 81048d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 81048d8:	460b      	mov	r3, r1
 81048da:	4313      	orrs	r3, r2
 81048dc:	d038      	beq.n	8104950 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 81048de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81048e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 81048e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81048ea:	d018      	beq.n	810491e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 81048ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81048f0:	d811      	bhi.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81048f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81048f6:	d014      	beq.n	8104922 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 81048f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81048fc:	d80b      	bhi.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 81048fe:	2b00      	cmp	r3, #0
 8104900:	d011      	beq.n	8104926 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8104902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8104906:	d106      	bne.n	8104916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104908:	4bc3      	ldr	r3, [pc, #780]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810490a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810490c:	4ac2      	ldr	r2, [pc, #776]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810490e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8104912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8104914:	e008      	b.n	8104928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8104916:	2301      	movs	r3, #1
 8104918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810491c:	e004      	b.n	8104928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810491e:	bf00      	nop
 8104920:	e002      	b.n	8104928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104922:	bf00      	nop
 8104924:	e000      	b.n	8104928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8104926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8104928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810492c:	2b00      	cmp	r3, #0
 810492e:	d10b      	bne.n	8104948 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104930:	4bb9      	ldr	r3, [pc, #740]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104934:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8104938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810493c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8104940:	4ab5      	ldr	r2, [pc, #724]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104942:	430b      	orrs	r3, r1
 8104944:	6553      	str	r3, [r2, #84]	@ 0x54
 8104946:	e003      	b.n	8104950 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810494c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104958:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 810495c:	65bb      	str	r3, [r7, #88]	@ 0x58
 810495e:	2300      	movs	r3, #0
 8104960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8104962:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8104966:	460b      	mov	r3, r1
 8104968:	4313      	orrs	r3, r2
 810496a:	d009      	beq.n	8104980 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 810496c:	4baa      	ldr	r3, [pc, #680]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810496e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8104970:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8104974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 810497a:	4aa7      	ldr	r2, [pc, #668]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810497c:	430b      	orrs	r3, r1
 810497e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104988:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 810498c:	653b      	str	r3, [r7, #80]	@ 0x50
 810498e:	2300      	movs	r3, #0
 8104990:	657b      	str	r3, [r7, #84]	@ 0x54
 8104992:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8104996:	460b      	mov	r3, r1
 8104998:	4313      	orrs	r3, r2
 810499a:	d00a      	beq.n	81049b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 810499c:	4b9e      	ldr	r3, [pc, #632]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810499e:	691b      	ldr	r3, [r3, #16]
 81049a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81049a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81049ac:	4a9a      	ldr	r2, [pc, #616]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81049ae:	430b      	orrs	r3, r1
 81049b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81049b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 81049be:	64bb      	str	r3, [r7, #72]	@ 0x48
 81049c0:	2300      	movs	r3, #0
 81049c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81049c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 81049c8:	460b      	mov	r3, r1
 81049ca:	4313      	orrs	r3, r2
 81049cc:	d009      	beq.n	81049e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 81049ce:	4b92      	ldr	r3, [pc, #584]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81049d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81049d2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 81049d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81049dc:	4a8e      	ldr	r2, [pc, #568]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81049de:	430b      	orrs	r3, r1
 81049e0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 81049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81049ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 81049ee:	643b      	str	r3, [r7, #64]	@ 0x40
 81049f0:	2300      	movs	r3, #0
 81049f2:	647b      	str	r3, [r7, #68]	@ 0x44
 81049f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 81049f8:	460b      	mov	r3, r1
 81049fa:	4313      	orrs	r3, r2
 81049fc:	d00e      	beq.n	8104a1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 81049fe:	4b86      	ldr	r3, [pc, #536]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a00:	691b      	ldr	r3, [r3, #16]
 8104a02:	4a85      	ldr	r2, [pc, #532]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8104a08:	6113      	str	r3, [r2, #16]
 8104a0a:	4b83      	ldr	r3, [pc, #524]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a0c:	6919      	ldr	r1, [r3, #16]
 8104a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8104a16:	4a80      	ldr	r2, [pc, #512]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a18:	430b      	orrs	r3, r1
 8104a1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8104a28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8104a2a:	2300      	movs	r3, #0
 8104a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8104a2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8104a32:	460b      	mov	r3, r1
 8104a34:	4313      	orrs	r3, r2
 8104a36:	d009      	beq.n	8104a4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104a38:	4b77      	ldr	r3, [pc, #476]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8104a3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8104a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104a46:	4a74      	ldr	r2, [pc, #464]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a48:	430b      	orrs	r3, r1
 8104a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8104a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8104a5a:	2300      	movs	r3, #0
 8104a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8104a5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8104a62:	460b      	mov	r3, r1
 8104a64:	4313      	orrs	r3, r2
 8104a66:	d00a      	beq.n	8104a7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104a68:	4b6b      	ldr	r3, [pc, #428]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8104a6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8104a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8104a78:	4a67      	ldr	r2, [pc, #412]	@ (8104c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8104a7a:	430b      	orrs	r3, r1
 8104a7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8104a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104a86:	2100      	movs	r1, #0
 8104a88:	62b9      	str	r1, [r7, #40]	@ 0x28
 8104a8a:	f003 0301 	and.w	r3, r3, #1
 8104a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8104a90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8104a94:	460b      	mov	r3, r1
 8104a96:	4313      	orrs	r3, r2
 8104a98:	d011      	beq.n	8104abe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8104a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104a9e:	3308      	adds	r3, #8
 8104aa0:	2100      	movs	r1, #0
 8104aa2:	4618      	mov	r0, r3
 8104aa4:	f000 f8ba 	bl	8104c1c <RCCEx_PLL2_Config>
 8104aa8:	4603      	mov	r3, r0
 8104aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104ab2:	2b00      	cmp	r3, #0
 8104ab4:	d003      	beq.n	8104abe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8104abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104ac6:	2100      	movs	r1, #0
 8104ac8:	6239      	str	r1, [r7, #32]
 8104aca:	f003 0302 	and.w	r3, r3, #2
 8104ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8104ad0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8104ad4:	460b      	mov	r3, r1
 8104ad6:	4313      	orrs	r3, r2
 8104ad8:	d011      	beq.n	8104afe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8104ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104ade:	3308      	adds	r3, #8
 8104ae0:	2101      	movs	r1, #1
 8104ae2:	4618      	mov	r0, r3
 8104ae4:	f000 f89a 	bl	8104c1c <RCCEx_PLL2_Config>
 8104ae8:	4603      	mov	r3, r0
 8104aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104af2:	2b00      	cmp	r3, #0
 8104af4:	d003      	beq.n	8104afe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8104afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b06:	2100      	movs	r1, #0
 8104b08:	61b9      	str	r1, [r7, #24]
 8104b0a:	f003 0304 	and.w	r3, r3, #4
 8104b0e:	61fb      	str	r3, [r7, #28]
 8104b10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8104b14:	460b      	mov	r3, r1
 8104b16:	4313      	orrs	r3, r2
 8104b18:	d011      	beq.n	8104b3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8104b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b1e:	3308      	adds	r3, #8
 8104b20:	2102      	movs	r1, #2
 8104b22:	4618      	mov	r0, r3
 8104b24:	f000 f87a 	bl	8104c1c <RCCEx_PLL2_Config>
 8104b28:	4603      	mov	r3, r0
 8104b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b32:	2b00      	cmp	r3, #0
 8104b34:	d003      	beq.n	8104b3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8104b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b46:	2100      	movs	r1, #0
 8104b48:	6139      	str	r1, [r7, #16]
 8104b4a:	f003 0308 	and.w	r3, r3, #8
 8104b4e:	617b      	str	r3, [r7, #20]
 8104b50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8104b54:	460b      	mov	r3, r1
 8104b56:	4313      	orrs	r3, r2
 8104b58:	d011      	beq.n	8104b7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8104b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b5e:	3328      	adds	r3, #40	@ 0x28
 8104b60:	2100      	movs	r1, #0
 8104b62:	4618      	mov	r0, r3
 8104b64:	f000 f90c 	bl	8104d80 <RCCEx_PLL3_Config>
 8104b68:	4603      	mov	r3, r0
 8104b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8104b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b72:	2b00      	cmp	r3, #0
 8104b74:	d003      	beq.n	8104b7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8104b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b86:	2100      	movs	r1, #0
 8104b88:	60b9      	str	r1, [r7, #8]
 8104b8a:	f003 0310 	and.w	r3, r3, #16
 8104b8e:	60fb      	str	r3, [r7, #12]
 8104b90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8104b94:	460b      	mov	r3, r1
 8104b96:	4313      	orrs	r3, r2
 8104b98:	d011      	beq.n	8104bbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8104b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104b9e:	3328      	adds	r3, #40	@ 0x28
 8104ba0:	2101      	movs	r1, #1
 8104ba2:	4618      	mov	r0, r3
 8104ba4:	f000 f8ec 	bl	8104d80 <RCCEx_PLL3_Config>
 8104ba8:	4603      	mov	r3, r0
 8104baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104bb2:	2b00      	cmp	r3, #0
 8104bb4:	d003      	beq.n	8104bbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8104bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104bc6:	2100      	movs	r1, #0
 8104bc8:	6039      	str	r1, [r7, #0]
 8104bca:	f003 0320 	and.w	r3, r3, #32
 8104bce:	607b      	str	r3, [r7, #4]
 8104bd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8104bd4:	460b      	mov	r3, r1
 8104bd6:	4313      	orrs	r3, r2
 8104bd8:	d011      	beq.n	8104bfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8104bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8104bde:	3328      	adds	r3, #40	@ 0x28
 8104be0:	2102      	movs	r1, #2
 8104be2:	4618      	mov	r0, r3
 8104be4:	f000 f8cc 	bl	8104d80 <RCCEx_PLL3_Config>
 8104be8:	4603      	mov	r3, r0
 8104bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8104bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104bf2:	2b00      	cmp	r3, #0
 8104bf4:	d003      	beq.n	8104bfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8104bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8104bfe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8104c02:	2b00      	cmp	r3, #0
 8104c04:	d101      	bne.n	8104c0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8104c06:	2300      	movs	r3, #0
 8104c08:	e000      	b.n	8104c0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8104c0a:	2301      	movs	r3, #1
}
 8104c0c:	4618      	mov	r0, r3
 8104c0e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8104c12:	46bd      	mov	sp, r7
 8104c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8104c18:	58024400 	.word	0x58024400

08104c1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8104c1c:	b580      	push	{r7, lr}
 8104c1e:	b084      	sub	sp, #16
 8104c20:	af00      	add	r7, sp, #0
 8104c22:	6078      	str	r0, [r7, #4]
 8104c24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104c26:	2300      	movs	r3, #0
 8104c28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104c2a:	4b54      	ldr	r3, [pc, #336]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104c2e:	f003 0303 	and.w	r3, r3, #3
 8104c32:	2b03      	cmp	r3, #3
 8104c34:	d101      	bne.n	8104c3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8104c36:	2301      	movs	r3, #1
 8104c38:	e09b      	b.n	8104d72 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8104c3a:	4b50      	ldr	r3, [pc, #320]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104c3c:	681b      	ldr	r3, [r3, #0]
 8104c3e:	4a4f      	ldr	r2, [pc, #316]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104c40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8104c44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104c46:	f7fd f8cb 	bl	8101de0 <HAL_GetTick>
 8104c4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104c4c:	e008      	b.n	8104c60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104c4e:	f7fd f8c7 	bl	8101de0 <HAL_GetTick>
 8104c52:	4602      	mov	r2, r0
 8104c54:	68bb      	ldr	r3, [r7, #8]
 8104c56:	1ad3      	subs	r3, r2, r3
 8104c58:	2b02      	cmp	r3, #2
 8104c5a:	d901      	bls.n	8104c60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104c5c:	2303      	movs	r3, #3
 8104c5e:	e088      	b.n	8104d72 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8104c60:	4b46      	ldr	r3, [pc, #280]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104c62:	681b      	ldr	r3, [r3, #0]
 8104c64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104c68:	2b00      	cmp	r3, #0
 8104c6a:	d1f0      	bne.n	8104c4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8104c6c:	4b43      	ldr	r3, [pc, #268]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104c70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8104c74:	687b      	ldr	r3, [r7, #4]
 8104c76:	681b      	ldr	r3, [r3, #0]
 8104c78:	031b      	lsls	r3, r3, #12
 8104c7a:	4940      	ldr	r1, [pc, #256]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104c7c:	4313      	orrs	r3, r2
 8104c7e:	628b      	str	r3, [r1, #40]	@ 0x28
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	685b      	ldr	r3, [r3, #4]
 8104c84:	3b01      	subs	r3, #1
 8104c86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104c8a:	687b      	ldr	r3, [r7, #4]
 8104c8c:	689b      	ldr	r3, [r3, #8]
 8104c8e:	3b01      	subs	r3, #1
 8104c90:	025b      	lsls	r3, r3, #9
 8104c92:	b29b      	uxth	r3, r3
 8104c94:	431a      	orrs	r2, r3
 8104c96:	687b      	ldr	r3, [r7, #4]
 8104c98:	68db      	ldr	r3, [r3, #12]
 8104c9a:	3b01      	subs	r3, #1
 8104c9c:	041b      	lsls	r3, r3, #16
 8104c9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104ca2:	431a      	orrs	r2, r3
 8104ca4:	687b      	ldr	r3, [r7, #4]
 8104ca6:	691b      	ldr	r3, [r3, #16]
 8104ca8:	3b01      	subs	r3, #1
 8104caa:	061b      	lsls	r3, r3, #24
 8104cac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104cb0:	4932      	ldr	r1, [pc, #200]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104cb2:	4313      	orrs	r3, r2
 8104cb4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8104cb6:	4b31      	ldr	r3, [pc, #196]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104cba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8104cbe:	687b      	ldr	r3, [r7, #4]
 8104cc0:	695b      	ldr	r3, [r3, #20]
 8104cc2:	492e      	ldr	r1, [pc, #184]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104cc4:	4313      	orrs	r3, r2
 8104cc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8104cc8:	4b2c      	ldr	r3, [pc, #176]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104ccc:	f023 0220 	bic.w	r2, r3, #32
 8104cd0:	687b      	ldr	r3, [r7, #4]
 8104cd2:	699b      	ldr	r3, [r3, #24]
 8104cd4:	4929      	ldr	r1, [pc, #164]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104cd6:	4313      	orrs	r3, r2
 8104cd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8104cda:	4b28      	ldr	r3, [pc, #160]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104cde:	4a27      	ldr	r2, [pc, #156]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104ce0:	f023 0310 	bic.w	r3, r3, #16
 8104ce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8104ce6:	4b25      	ldr	r3, [pc, #148]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104ce8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8104cea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104cee:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104cf2:	687a      	ldr	r2, [r7, #4]
 8104cf4:	69d2      	ldr	r2, [r2, #28]
 8104cf6:	00d2      	lsls	r2, r2, #3
 8104cf8:	4920      	ldr	r1, [pc, #128]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104cfa:	4313      	orrs	r3, r2
 8104cfc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8104cfe:	4b1f      	ldr	r3, [pc, #124]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d02:	4a1e      	ldr	r2, [pc, #120]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104d04:	f043 0310 	orr.w	r3, r3, #16
 8104d08:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8104d0a:	683b      	ldr	r3, [r7, #0]
 8104d0c:	2b00      	cmp	r3, #0
 8104d0e:	d106      	bne.n	8104d1e <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8104d10:	4b1a      	ldr	r3, [pc, #104]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104d12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d14:	4a19      	ldr	r2, [pc, #100]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104d16:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8104d1a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104d1c:	e00f      	b.n	8104d3e <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104d1e:	683b      	ldr	r3, [r7, #0]
 8104d20:	2b01      	cmp	r3, #1
 8104d22:	d106      	bne.n	8104d32 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8104d24:	4b15      	ldr	r3, [pc, #84]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104d26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d28:	4a14      	ldr	r2, [pc, #80]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104d2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8104d2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104d30:	e005      	b.n	8104d3e <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8104d32:	4b12      	ldr	r3, [pc, #72]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104d36:	4a11      	ldr	r2, [pc, #68]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104d38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8104d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8104d3e:	4b0f      	ldr	r3, [pc, #60]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104d40:	681b      	ldr	r3, [r3, #0]
 8104d42:	4a0e      	ldr	r2, [pc, #56]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104d44:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8104d48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104d4a:	f7fd f849 	bl	8101de0 <HAL_GetTick>
 8104d4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104d50:	e008      	b.n	8104d64 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8104d52:	f7fd f845 	bl	8101de0 <HAL_GetTick>
 8104d56:	4602      	mov	r2, r0
 8104d58:	68bb      	ldr	r3, [r7, #8]
 8104d5a:	1ad3      	subs	r3, r2, r3
 8104d5c:	2b02      	cmp	r3, #2
 8104d5e:	d901      	bls.n	8104d64 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104d60:	2303      	movs	r3, #3
 8104d62:	e006      	b.n	8104d72 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8104d64:	4b05      	ldr	r3, [pc, #20]	@ (8104d7c <RCCEx_PLL2_Config+0x160>)
 8104d66:	681b      	ldr	r3, [r3, #0]
 8104d68:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8104d6c:	2b00      	cmp	r3, #0
 8104d6e:	d0f0      	beq.n	8104d52 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8104d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8104d72:	4618      	mov	r0, r3
 8104d74:	3710      	adds	r7, #16
 8104d76:	46bd      	mov	sp, r7
 8104d78:	bd80      	pop	{r7, pc}
 8104d7a:	bf00      	nop
 8104d7c:	58024400 	.word	0x58024400

08104d80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8104d80:	b580      	push	{r7, lr}
 8104d82:	b084      	sub	sp, #16
 8104d84:	af00      	add	r7, sp, #0
 8104d86:	6078      	str	r0, [r7, #4]
 8104d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8104d8a:	2300      	movs	r3, #0
 8104d8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8104d8e:	4b54      	ldr	r3, [pc, #336]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104d90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104d92:	f003 0303 	and.w	r3, r3, #3
 8104d96:	2b03      	cmp	r3, #3
 8104d98:	d101      	bne.n	8104d9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8104d9a:	2301      	movs	r3, #1
 8104d9c:	e09b      	b.n	8104ed6 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8104d9e:	4b50      	ldr	r3, [pc, #320]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104da0:	681b      	ldr	r3, [r3, #0]
 8104da2:	4a4f      	ldr	r2, [pc, #316]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104da4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8104da8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104daa:	f7fd f819 	bl	8101de0 <HAL_GetTick>
 8104dae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104db0:	e008      	b.n	8104dc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104db2:	f7fd f815 	bl	8101de0 <HAL_GetTick>
 8104db6:	4602      	mov	r2, r0
 8104db8:	68bb      	ldr	r3, [r7, #8]
 8104dba:	1ad3      	subs	r3, r2, r3
 8104dbc:	2b02      	cmp	r3, #2
 8104dbe:	d901      	bls.n	8104dc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8104dc0:	2303      	movs	r3, #3
 8104dc2:	e088      	b.n	8104ed6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8104dc4:	4b46      	ldr	r3, [pc, #280]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104dc6:	681b      	ldr	r3, [r3, #0]
 8104dc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104dcc:	2b00      	cmp	r3, #0
 8104dce:	d1f0      	bne.n	8104db2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8104dd0:	4b43      	ldr	r3, [pc, #268]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8104dd4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8104dd8:	687b      	ldr	r3, [r7, #4]
 8104dda:	681b      	ldr	r3, [r3, #0]
 8104ddc:	051b      	lsls	r3, r3, #20
 8104dde:	4940      	ldr	r1, [pc, #256]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104de0:	4313      	orrs	r3, r2
 8104de2:	628b      	str	r3, [r1, #40]	@ 0x28
 8104de4:	687b      	ldr	r3, [r7, #4]
 8104de6:	685b      	ldr	r3, [r3, #4]
 8104de8:	3b01      	subs	r3, #1
 8104dea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8104dee:	687b      	ldr	r3, [r7, #4]
 8104df0:	689b      	ldr	r3, [r3, #8]
 8104df2:	3b01      	subs	r3, #1
 8104df4:	025b      	lsls	r3, r3, #9
 8104df6:	b29b      	uxth	r3, r3
 8104df8:	431a      	orrs	r2, r3
 8104dfa:	687b      	ldr	r3, [r7, #4]
 8104dfc:	68db      	ldr	r3, [r3, #12]
 8104dfe:	3b01      	subs	r3, #1
 8104e00:	041b      	lsls	r3, r3, #16
 8104e02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8104e06:	431a      	orrs	r2, r3
 8104e08:	687b      	ldr	r3, [r7, #4]
 8104e0a:	691b      	ldr	r3, [r3, #16]
 8104e0c:	3b01      	subs	r3, #1
 8104e0e:	061b      	lsls	r3, r3, #24
 8104e10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8104e14:	4932      	ldr	r1, [pc, #200]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e16:	4313      	orrs	r3, r2
 8104e18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8104e1a:	4b31      	ldr	r3, [pc, #196]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104e1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8104e22:	687b      	ldr	r3, [r7, #4]
 8104e24:	695b      	ldr	r3, [r3, #20]
 8104e26:	492e      	ldr	r1, [pc, #184]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e28:	4313      	orrs	r3, r2
 8104e2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8104e2c:	4b2c      	ldr	r3, [pc, #176]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104e30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8104e34:	687b      	ldr	r3, [r7, #4]
 8104e36:	699b      	ldr	r3, [r3, #24]
 8104e38:	4929      	ldr	r1, [pc, #164]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e3a:	4313      	orrs	r3, r2
 8104e3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8104e3e:	4b28      	ldr	r3, [pc, #160]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104e42:	4a27      	ldr	r2, [pc, #156]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8104e48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8104e4a:	4b25      	ldr	r3, [pc, #148]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8104e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8104e52:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8104e56:	687a      	ldr	r2, [r7, #4]
 8104e58:	69d2      	ldr	r2, [r2, #28]
 8104e5a:	00d2      	lsls	r2, r2, #3
 8104e5c:	4920      	ldr	r1, [pc, #128]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e5e:	4313      	orrs	r3, r2
 8104e60:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8104e62:	4b1f      	ldr	r3, [pc, #124]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104e66:	4a1e      	ldr	r2, [pc, #120]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8104e6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8104e6e:	683b      	ldr	r3, [r7, #0]
 8104e70:	2b00      	cmp	r3, #0
 8104e72:	d106      	bne.n	8104e82 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8104e74:	4b1a      	ldr	r3, [pc, #104]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104e78:	4a19      	ldr	r2, [pc, #100]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e7a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8104e7e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104e80:	e00f      	b.n	8104ea2 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8104e82:	683b      	ldr	r3, [r7, #0]
 8104e84:	2b01      	cmp	r3, #1
 8104e86:	d106      	bne.n	8104e96 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8104e88:	4b15      	ldr	r3, [pc, #84]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104e8c:	4a14      	ldr	r2, [pc, #80]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e8e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8104e92:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8104e94:	e005      	b.n	8104ea2 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8104e96:	4b12      	ldr	r3, [pc, #72]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8104e9a:	4a11      	ldr	r2, [pc, #68]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104e9c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8104ea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8104ea2:	4b0f      	ldr	r3, [pc, #60]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104ea4:	681b      	ldr	r3, [r3, #0]
 8104ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8104eac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8104eae:	f7fc ff97 	bl	8101de0 <HAL_GetTick>
 8104eb2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104eb4:	e008      	b.n	8104ec8 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8104eb6:	f7fc ff93 	bl	8101de0 <HAL_GetTick>
 8104eba:	4602      	mov	r2, r0
 8104ebc:	68bb      	ldr	r3, [r7, #8]
 8104ebe:	1ad3      	subs	r3, r2, r3
 8104ec0:	2b02      	cmp	r3, #2
 8104ec2:	d901      	bls.n	8104ec8 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8104ec4:	2303      	movs	r3, #3
 8104ec6:	e006      	b.n	8104ed6 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8104ec8:	4b05      	ldr	r3, [pc, #20]	@ (8104ee0 <RCCEx_PLL3_Config+0x160>)
 8104eca:	681b      	ldr	r3, [r3, #0]
 8104ecc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8104ed0:	2b00      	cmp	r3, #0
 8104ed2:	d0f0      	beq.n	8104eb6 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8104ed4:	7bfb      	ldrb	r3, [r7, #15]
}
 8104ed6:	4618      	mov	r0, r3
 8104ed8:	3710      	adds	r7, #16
 8104eda:	46bd      	mov	sp, r7
 8104edc:	bd80      	pop	{r7, pc}
 8104ede:	bf00      	nop
 8104ee0:	58024400 	.word	0x58024400

08104ee4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8104ee4:	b580      	push	{r7, lr}
 8104ee6:	b08a      	sub	sp, #40	@ 0x28
 8104ee8:	af02      	add	r7, sp, #8
 8104eea:	60f8      	str	r0, [r7, #12]
 8104eec:	60b9      	str	r1, [r7, #8]
 8104eee:	603b      	str	r3, [r7, #0]
 8104ef0:	4613      	mov	r3, r2
 8104ef2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8104ef4:	68fb      	ldr	r3, [r7, #12]
 8104ef6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8104efa:	2b20      	cmp	r3, #32
 8104efc:	d17b      	bne.n	8104ff6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8104efe:	68bb      	ldr	r3, [r7, #8]
 8104f00:	2b00      	cmp	r3, #0
 8104f02:	d002      	beq.n	8104f0a <HAL_UART_Transmit+0x26>
 8104f04:	88fb      	ldrh	r3, [r7, #6]
 8104f06:	2b00      	cmp	r3, #0
 8104f08:	d101      	bne.n	8104f0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8104f0a:	2301      	movs	r3, #1
 8104f0c:	e074      	b.n	8104ff8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8104f0e:	68fb      	ldr	r3, [r7, #12]
 8104f10:	2200      	movs	r2, #0
 8104f12:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8104f16:	68fb      	ldr	r3, [r7, #12]
 8104f18:	2221      	movs	r2, #33	@ 0x21
 8104f1a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8104f1e:	f7fc ff5f 	bl	8101de0 <HAL_GetTick>
 8104f22:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8104f24:	68fb      	ldr	r3, [r7, #12]
 8104f26:	88fa      	ldrh	r2, [r7, #6]
 8104f28:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8104f2c:	68fb      	ldr	r3, [r7, #12]
 8104f2e:	88fa      	ldrh	r2, [r7, #6]
 8104f30:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8104f34:	68fb      	ldr	r3, [r7, #12]
 8104f36:	689b      	ldr	r3, [r3, #8]
 8104f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8104f3c:	d108      	bne.n	8104f50 <HAL_UART_Transmit+0x6c>
 8104f3e:	68fb      	ldr	r3, [r7, #12]
 8104f40:	691b      	ldr	r3, [r3, #16]
 8104f42:	2b00      	cmp	r3, #0
 8104f44:	d104      	bne.n	8104f50 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8104f46:	2300      	movs	r3, #0
 8104f48:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8104f4a:	68bb      	ldr	r3, [r7, #8]
 8104f4c:	61bb      	str	r3, [r7, #24]
 8104f4e:	e003      	b.n	8104f58 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8104f50:	68bb      	ldr	r3, [r7, #8]
 8104f52:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8104f54:	2300      	movs	r3, #0
 8104f56:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8104f58:	e030      	b.n	8104fbc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8104f5a:	683b      	ldr	r3, [r7, #0]
 8104f5c:	9300      	str	r3, [sp, #0]
 8104f5e:	697b      	ldr	r3, [r7, #20]
 8104f60:	2200      	movs	r2, #0
 8104f62:	2180      	movs	r1, #128	@ 0x80
 8104f64:	68f8      	ldr	r0, [r7, #12]
 8104f66:	f000 f84b 	bl	8105000 <UART_WaitOnFlagUntilTimeout>
 8104f6a:	4603      	mov	r3, r0
 8104f6c:	2b00      	cmp	r3, #0
 8104f6e:	d005      	beq.n	8104f7c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8104f70:	68fb      	ldr	r3, [r7, #12]
 8104f72:	2220      	movs	r2, #32
 8104f74:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8104f78:	2303      	movs	r3, #3
 8104f7a:	e03d      	b.n	8104ff8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8104f7c:	69fb      	ldr	r3, [r7, #28]
 8104f7e:	2b00      	cmp	r3, #0
 8104f80:	d10b      	bne.n	8104f9a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8104f82:	69bb      	ldr	r3, [r7, #24]
 8104f84:	881b      	ldrh	r3, [r3, #0]
 8104f86:	461a      	mov	r2, r3
 8104f88:	68fb      	ldr	r3, [r7, #12]
 8104f8a:	681b      	ldr	r3, [r3, #0]
 8104f8c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8104f90:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8104f92:	69bb      	ldr	r3, [r7, #24]
 8104f94:	3302      	adds	r3, #2
 8104f96:	61bb      	str	r3, [r7, #24]
 8104f98:	e007      	b.n	8104faa <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8104f9a:	69fb      	ldr	r3, [r7, #28]
 8104f9c:	781a      	ldrb	r2, [r3, #0]
 8104f9e:	68fb      	ldr	r3, [r7, #12]
 8104fa0:	681b      	ldr	r3, [r3, #0]
 8104fa2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8104fa4:	69fb      	ldr	r3, [r7, #28]
 8104fa6:	3301      	adds	r3, #1
 8104fa8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8104faa:	68fb      	ldr	r3, [r7, #12]
 8104fac:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8104fb0:	b29b      	uxth	r3, r3
 8104fb2:	3b01      	subs	r3, #1
 8104fb4:	b29a      	uxth	r2, r3
 8104fb6:	68fb      	ldr	r3, [r7, #12]
 8104fb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8104fbc:	68fb      	ldr	r3, [r7, #12]
 8104fbe:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8104fc2:	b29b      	uxth	r3, r3
 8104fc4:	2b00      	cmp	r3, #0
 8104fc6:	d1c8      	bne.n	8104f5a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8104fc8:	683b      	ldr	r3, [r7, #0]
 8104fca:	9300      	str	r3, [sp, #0]
 8104fcc:	697b      	ldr	r3, [r7, #20]
 8104fce:	2200      	movs	r2, #0
 8104fd0:	2140      	movs	r1, #64	@ 0x40
 8104fd2:	68f8      	ldr	r0, [r7, #12]
 8104fd4:	f000 f814 	bl	8105000 <UART_WaitOnFlagUntilTimeout>
 8104fd8:	4603      	mov	r3, r0
 8104fda:	2b00      	cmp	r3, #0
 8104fdc:	d005      	beq.n	8104fea <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8104fde:	68fb      	ldr	r3, [r7, #12]
 8104fe0:	2220      	movs	r2, #32
 8104fe2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8104fe6:	2303      	movs	r3, #3
 8104fe8:	e006      	b.n	8104ff8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8104fea:	68fb      	ldr	r3, [r7, #12]
 8104fec:	2220      	movs	r2, #32
 8104fee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8104ff2:	2300      	movs	r3, #0
 8104ff4:	e000      	b.n	8104ff8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8104ff6:	2302      	movs	r3, #2
  }
}
 8104ff8:	4618      	mov	r0, r3
 8104ffa:	3720      	adds	r7, #32
 8104ffc:	46bd      	mov	sp, r7
 8104ffe:	bd80      	pop	{r7, pc}

08105000 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105000:	b580      	push	{r7, lr}
 8105002:	b084      	sub	sp, #16
 8105004:	af00      	add	r7, sp, #0
 8105006:	60f8      	str	r0, [r7, #12]
 8105008:	60b9      	str	r1, [r7, #8]
 810500a:	603b      	str	r3, [r7, #0]
 810500c:	4613      	mov	r3, r2
 810500e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105010:	e04f      	b.n	81050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8105012:	69bb      	ldr	r3, [r7, #24]
 8105014:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8105018:	d04b      	beq.n	81050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 810501a:	f7fc fee1 	bl	8101de0 <HAL_GetTick>
 810501e:	4602      	mov	r2, r0
 8105020:	683b      	ldr	r3, [r7, #0]
 8105022:	1ad3      	subs	r3, r2, r3
 8105024:	69ba      	ldr	r2, [r7, #24]
 8105026:	429a      	cmp	r2, r3
 8105028:	d302      	bcc.n	8105030 <UART_WaitOnFlagUntilTimeout+0x30>
 810502a:	69bb      	ldr	r3, [r7, #24]
 810502c:	2b00      	cmp	r3, #0
 810502e:	d101      	bne.n	8105034 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8105030:	2303      	movs	r3, #3
 8105032:	e04e      	b.n	81050d2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8105034:	68fb      	ldr	r3, [r7, #12]
 8105036:	681b      	ldr	r3, [r3, #0]
 8105038:	681b      	ldr	r3, [r3, #0]
 810503a:	f003 0304 	and.w	r3, r3, #4
 810503e:	2b00      	cmp	r3, #0
 8105040:	d037      	beq.n	81050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8105042:	68bb      	ldr	r3, [r7, #8]
 8105044:	2b80      	cmp	r3, #128	@ 0x80
 8105046:	d034      	beq.n	81050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8105048:	68bb      	ldr	r3, [r7, #8]
 810504a:	2b40      	cmp	r3, #64	@ 0x40
 810504c:	d031      	beq.n	81050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 810504e:	68fb      	ldr	r3, [r7, #12]
 8105050:	681b      	ldr	r3, [r3, #0]
 8105052:	69db      	ldr	r3, [r3, #28]
 8105054:	f003 0308 	and.w	r3, r3, #8
 8105058:	2b08      	cmp	r3, #8
 810505a:	d110      	bne.n	810507e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810505c:	68fb      	ldr	r3, [r7, #12]
 810505e:	681b      	ldr	r3, [r3, #0]
 8105060:	2208      	movs	r2, #8
 8105062:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8105064:	68f8      	ldr	r0, [r7, #12]
 8105066:	f000 f838 	bl	81050da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 810506a:	68fb      	ldr	r3, [r7, #12]
 810506c:	2208      	movs	r2, #8
 810506e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8105072:	68fb      	ldr	r3, [r7, #12]
 8105074:	2200      	movs	r2, #0
 8105076:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 810507a:	2301      	movs	r3, #1
 810507c:	e029      	b.n	81050d2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810507e:	68fb      	ldr	r3, [r7, #12]
 8105080:	681b      	ldr	r3, [r3, #0]
 8105082:	69db      	ldr	r3, [r3, #28]
 8105084:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8105088:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810508c:	d111      	bne.n	81050b2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810508e:	68fb      	ldr	r3, [r7, #12]
 8105090:	681b      	ldr	r3, [r3, #0]
 8105092:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8105096:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8105098:	68f8      	ldr	r0, [r7, #12]
 810509a:	f000 f81e 	bl	81050da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810509e:	68fb      	ldr	r3, [r7, #12]
 81050a0:	2220      	movs	r2, #32
 81050a2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81050a6:	68fb      	ldr	r3, [r7, #12]
 81050a8:	2200      	movs	r2, #0
 81050aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 81050ae:	2303      	movs	r3, #3
 81050b0:	e00f      	b.n	81050d2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81050b2:	68fb      	ldr	r3, [r7, #12]
 81050b4:	681b      	ldr	r3, [r3, #0]
 81050b6:	69da      	ldr	r2, [r3, #28]
 81050b8:	68bb      	ldr	r3, [r7, #8]
 81050ba:	4013      	ands	r3, r2
 81050bc:	68ba      	ldr	r2, [r7, #8]
 81050be:	429a      	cmp	r2, r3
 81050c0:	bf0c      	ite	eq
 81050c2:	2301      	moveq	r3, #1
 81050c4:	2300      	movne	r3, #0
 81050c6:	b2db      	uxtb	r3, r3
 81050c8:	461a      	mov	r2, r3
 81050ca:	79fb      	ldrb	r3, [r7, #7]
 81050cc:	429a      	cmp	r2, r3
 81050ce:	d0a0      	beq.n	8105012 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81050d0:	2300      	movs	r3, #0
}
 81050d2:	4618      	mov	r0, r3
 81050d4:	3710      	adds	r7, #16
 81050d6:	46bd      	mov	sp, r7
 81050d8:	bd80      	pop	{r7, pc}

081050da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 81050da:	b480      	push	{r7}
 81050dc:	b095      	sub	sp, #84	@ 0x54
 81050de:	af00      	add	r7, sp, #0
 81050e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81050e2:	687b      	ldr	r3, [r7, #4]
 81050e4:	681b      	ldr	r3, [r3, #0]
 81050e6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81050e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 81050ea:	e853 3f00 	ldrex	r3, [r3]
 81050ee:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 81050f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 81050f2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81050f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81050f8:	687b      	ldr	r3, [r7, #4]
 81050fa:	681b      	ldr	r3, [r3, #0]
 81050fc:	461a      	mov	r2, r3
 81050fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8105100:	643b      	str	r3, [r7, #64]	@ 0x40
 8105102:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105104:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8105106:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8105108:	e841 2300 	strex	r3, r2, [r1]
 810510c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 810510e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8105110:	2b00      	cmp	r3, #0
 8105112:	d1e6      	bne.n	81050e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8105114:	687b      	ldr	r3, [r7, #4]
 8105116:	681b      	ldr	r3, [r3, #0]
 8105118:	3308      	adds	r3, #8
 810511a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810511c:	6a3b      	ldr	r3, [r7, #32]
 810511e:	e853 3f00 	ldrex	r3, [r3]
 8105122:	61fb      	str	r3, [r7, #28]
   return(result);
 8105124:	69fb      	ldr	r3, [r7, #28]
 8105126:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 810512a:	f023 0301 	bic.w	r3, r3, #1
 810512e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8105130:	687b      	ldr	r3, [r7, #4]
 8105132:	681b      	ldr	r3, [r3, #0]
 8105134:	3308      	adds	r3, #8
 8105136:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8105138:	62fa      	str	r2, [r7, #44]	@ 0x2c
 810513a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810513c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 810513e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8105140:	e841 2300 	strex	r3, r2, [r1]
 8105144:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8105146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8105148:	2b00      	cmp	r3, #0
 810514a:	d1e3      	bne.n	8105114 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810514c:	687b      	ldr	r3, [r7, #4]
 810514e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8105150:	2b01      	cmp	r3, #1
 8105152:	d118      	bne.n	8105186 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8105154:	687b      	ldr	r3, [r7, #4]
 8105156:	681b      	ldr	r3, [r3, #0]
 8105158:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810515a:	68fb      	ldr	r3, [r7, #12]
 810515c:	e853 3f00 	ldrex	r3, [r3]
 8105160:	60bb      	str	r3, [r7, #8]
   return(result);
 8105162:	68bb      	ldr	r3, [r7, #8]
 8105164:	f023 0310 	bic.w	r3, r3, #16
 8105168:	647b      	str	r3, [r7, #68]	@ 0x44
 810516a:	687b      	ldr	r3, [r7, #4]
 810516c:	681b      	ldr	r3, [r3, #0]
 810516e:	461a      	mov	r2, r3
 8105170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8105172:	61bb      	str	r3, [r7, #24]
 8105174:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105176:	6979      	ldr	r1, [r7, #20]
 8105178:	69ba      	ldr	r2, [r7, #24]
 810517a:	e841 2300 	strex	r3, r2, [r1]
 810517e:	613b      	str	r3, [r7, #16]
   return(result);
 8105180:	693b      	ldr	r3, [r7, #16]
 8105182:	2b00      	cmp	r3, #0
 8105184:	d1e6      	bne.n	8105154 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8105186:	687b      	ldr	r3, [r7, #4]
 8105188:	2220      	movs	r2, #32
 810518a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810518e:	687b      	ldr	r3, [r7, #4]
 8105190:	2200      	movs	r2, #0
 8105192:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8105194:	687b      	ldr	r3, [r7, #4]
 8105196:	2200      	movs	r2, #0
 8105198:	675a      	str	r2, [r3, #116]	@ 0x74
}
 810519a:	bf00      	nop
 810519c:	3754      	adds	r7, #84	@ 0x54
 810519e:	46bd      	mov	sp, r7
 81051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81051a4:	4770      	bx	lr

081051a6 <__cvt>:
 81051a6:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81051aa:	ec57 6b10 	vmov	r6, r7, d0
 81051ae:	2f00      	cmp	r7, #0
 81051b0:	460c      	mov	r4, r1
 81051b2:	4619      	mov	r1, r3
 81051b4:	463b      	mov	r3, r7
 81051b6:	bfbb      	ittet	lt
 81051b8:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 81051bc:	461f      	movlt	r7, r3
 81051be:	2300      	movge	r3, #0
 81051c0:	232d      	movlt	r3, #45	@ 0x2d
 81051c2:	700b      	strb	r3, [r1, #0]
 81051c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 81051c6:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 81051ca:	4691      	mov	r9, r2
 81051cc:	f023 0820 	bic.w	r8, r3, #32
 81051d0:	bfbc      	itt	lt
 81051d2:	4632      	movlt	r2, r6
 81051d4:	4616      	movlt	r6, r2
 81051d6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 81051da:	d005      	beq.n	81051e8 <__cvt+0x42>
 81051dc:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 81051e0:	d100      	bne.n	81051e4 <__cvt+0x3e>
 81051e2:	3401      	adds	r4, #1
 81051e4:	2102      	movs	r1, #2
 81051e6:	e000      	b.n	81051ea <__cvt+0x44>
 81051e8:	2103      	movs	r1, #3
 81051ea:	ab03      	add	r3, sp, #12
 81051ec:	9301      	str	r3, [sp, #4]
 81051ee:	ab02      	add	r3, sp, #8
 81051f0:	9300      	str	r3, [sp, #0]
 81051f2:	ec47 6b10 	vmov	d0, r6, r7
 81051f6:	4653      	mov	r3, sl
 81051f8:	4622      	mov	r2, r4
 81051fa:	f001 fe99 	bl	8106f30 <_dtoa_r>
 81051fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8105202:	4605      	mov	r5, r0
 8105204:	d119      	bne.n	810523a <__cvt+0x94>
 8105206:	f019 0f01 	tst.w	r9, #1
 810520a:	d00e      	beq.n	810522a <__cvt+0x84>
 810520c:	eb00 0904 	add.w	r9, r0, r4
 8105210:	2200      	movs	r2, #0
 8105212:	2300      	movs	r3, #0
 8105214:	4630      	mov	r0, r6
 8105216:	4639      	mov	r1, r7
 8105218:	f7fb fcde 	bl	8100bd8 <__aeabi_dcmpeq>
 810521c:	b108      	cbz	r0, 8105222 <__cvt+0x7c>
 810521e:	f8cd 900c 	str.w	r9, [sp, #12]
 8105222:	2230      	movs	r2, #48	@ 0x30
 8105224:	9b03      	ldr	r3, [sp, #12]
 8105226:	454b      	cmp	r3, r9
 8105228:	d31e      	bcc.n	8105268 <__cvt+0xc2>
 810522a:	9b03      	ldr	r3, [sp, #12]
 810522c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810522e:	1b5b      	subs	r3, r3, r5
 8105230:	4628      	mov	r0, r5
 8105232:	6013      	str	r3, [r2, #0]
 8105234:	b004      	add	sp, #16
 8105236:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810523a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 810523e:	eb00 0904 	add.w	r9, r0, r4
 8105242:	d1e5      	bne.n	8105210 <__cvt+0x6a>
 8105244:	7803      	ldrb	r3, [r0, #0]
 8105246:	2b30      	cmp	r3, #48	@ 0x30
 8105248:	d10a      	bne.n	8105260 <__cvt+0xba>
 810524a:	2200      	movs	r2, #0
 810524c:	2300      	movs	r3, #0
 810524e:	4630      	mov	r0, r6
 8105250:	4639      	mov	r1, r7
 8105252:	f7fb fcc1 	bl	8100bd8 <__aeabi_dcmpeq>
 8105256:	b918      	cbnz	r0, 8105260 <__cvt+0xba>
 8105258:	f1c4 0401 	rsb	r4, r4, #1
 810525c:	f8ca 4000 	str.w	r4, [sl]
 8105260:	f8da 3000 	ldr.w	r3, [sl]
 8105264:	4499      	add	r9, r3
 8105266:	e7d3      	b.n	8105210 <__cvt+0x6a>
 8105268:	1c59      	adds	r1, r3, #1
 810526a:	9103      	str	r1, [sp, #12]
 810526c:	701a      	strb	r2, [r3, #0]
 810526e:	e7d9      	b.n	8105224 <__cvt+0x7e>

08105270 <__exponent>:
 8105270:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8105272:	2900      	cmp	r1, #0
 8105274:	bfba      	itte	lt
 8105276:	4249      	neglt	r1, r1
 8105278:	232d      	movlt	r3, #45	@ 0x2d
 810527a:	232b      	movge	r3, #43	@ 0x2b
 810527c:	2909      	cmp	r1, #9
 810527e:	7002      	strb	r2, [r0, #0]
 8105280:	7043      	strb	r3, [r0, #1]
 8105282:	dd29      	ble.n	81052d8 <__exponent+0x68>
 8105284:	f10d 0307 	add.w	r3, sp, #7
 8105288:	461d      	mov	r5, r3
 810528a:	270a      	movs	r7, #10
 810528c:	461a      	mov	r2, r3
 810528e:	fbb1 f6f7 	udiv	r6, r1, r7
 8105292:	fb07 1416 	mls	r4, r7, r6, r1
 8105296:	3430      	adds	r4, #48	@ 0x30
 8105298:	f802 4c01 	strb.w	r4, [r2, #-1]
 810529c:	460c      	mov	r4, r1
 810529e:	2c63      	cmp	r4, #99	@ 0x63
 81052a0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 81052a4:	4631      	mov	r1, r6
 81052a6:	dcf1      	bgt.n	810528c <__exponent+0x1c>
 81052a8:	3130      	adds	r1, #48	@ 0x30
 81052aa:	1e94      	subs	r4, r2, #2
 81052ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 81052b0:	1c41      	adds	r1, r0, #1
 81052b2:	4623      	mov	r3, r4
 81052b4:	42ab      	cmp	r3, r5
 81052b6:	d30a      	bcc.n	81052ce <__exponent+0x5e>
 81052b8:	f10d 0309 	add.w	r3, sp, #9
 81052bc:	1a9b      	subs	r3, r3, r2
 81052be:	42ac      	cmp	r4, r5
 81052c0:	bf88      	it	hi
 81052c2:	2300      	movhi	r3, #0
 81052c4:	3302      	adds	r3, #2
 81052c6:	4403      	add	r3, r0
 81052c8:	1a18      	subs	r0, r3, r0
 81052ca:	b003      	add	sp, #12
 81052cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81052ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 81052d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 81052d6:	e7ed      	b.n	81052b4 <__exponent+0x44>
 81052d8:	2330      	movs	r3, #48	@ 0x30
 81052da:	3130      	adds	r1, #48	@ 0x30
 81052dc:	7083      	strb	r3, [r0, #2]
 81052de:	70c1      	strb	r1, [r0, #3]
 81052e0:	1d03      	adds	r3, r0, #4
 81052e2:	e7f1      	b.n	81052c8 <__exponent+0x58>

081052e4 <_printf_float>:
 81052e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81052e8:	b08d      	sub	sp, #52	@ 0x34
 81052ea:	460c      	mov	r4, r1
 81052ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 81052f0:	4616      	mov	r6, r2
 81052f2:	461f      	mov	r7, r3
 81052f4:	4605      	mov	r5, r0
 81052f6:	f001 fd41 	bl	8106d7c <_localeconv_r>
 81052fa:	6803      	ldr	r3, [r0, #0]
 81052fc:	9304      	str	r3, [sp, #16]
 81052fe:	4618      	mov	r0, r3
 8105300:	f7fb f83e 	bl	8100380 <strlen>
 8105304:	2300      	movs	r3, #0
 8105306:	930a      	str	r3, [sp, #40]	@ 0x28
 8105308:	f8d8 3000 	ldr.w	r3, [r8]
 810530c:	9005      	str	r0, [sp, #20]
 810530e:	3307      	adds	r3, #7
 8105310:	f023 0307 	bic.w	r3, r3, #7
 8105314:	f103 0208 	add.w	r2, r3, #8
 8105318:	f894 a018 	ldrb.w	sl, [r4, #24]
 810531c:	f8d4 b000 	ldr.w	fp, [r4]
 8105320:	f8c8 2000 	str.w	r2, [r8]
 8105324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8105328:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 810532c:	9307      	str	r3, [sp, #28]
 810532e:	f8cd 8018 	str.w	r8, [sp, #24]
 8105332:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8105336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810533a:	4b9c      	ldr	r3, [pc, #624]	@ (81055ac <_printf_float+0x2c8>)
 810533c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8105340:	f7fb fc7c 	bl	8100c3c <__aeabi_dcmpun>
 8105344:	bb70      	cbnz	r0, 81053a4 <_printf_float+0xc0>
 8105346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 810534a:	4b98      	ldr	r3, [pc, #608]	@ (81055ac <_printf_float+0x2c8>)
 810534c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8105350:	f7fb fc56 	bl	8100c00 <__aeabi_dcmple>
 8105354:	bb30      	cbnz	r0, 81053a4 <_printf_float+0xc0>
 8105356:	2200      	movs	r2, #0
 8105358:	2300      	movs	r3, #0
 810535a:	4640      	mov	r0, r8
 810535c:	4649      	mov	r1, r9
 810535e:	f7fb fc45 	bl	8100bec <__aeabi_dcmplt>
 8105362:	b110      	cbz	r0, 810536a <_printf_float+0x86>
 8105364:	232d      	movs	r3, #45	@ 0x2d
 8105366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 810536a:	4a91      	ldr	r2, [pc, #580]	@ (81055b0 <_printf_float+0x2cc>)
 810536c:	4b91      	ldr	r3, [pc, #580]	@ (81055b4 <_printf_float+0x2d0>)
 810536e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8105372:	bf94      	ite	ls
 8105374:	4690      	movls	r8, r2
 8105376:	4698      	movhi	r8, r3
 8105378:	2303      	movs	r3, #3
 810537a:	6123      	str	r3, [r4, #16]
 810537c:	f02b 0304 	bic.w	r3, fp, #4
 8105380:	6023      	str	r3, [r4, #0]
 8105382:	f04f 0900 	mov.w	r9, #0
 8105386:	9700      	str	r7, [sp, #0]
 8105388:	4633      	mov	r3, r6
 810538a:	aa0b      	add	r2, sp, #44	@ 0x2c
 810538c:	4621      	mov	r1, r4
 810538e:	4628      	mov	r0, r5
 8105390:	f000 f9d2 	bl	8105738 <_printf_common>
 8105394:	3001      	adds	r0, #1
 8105396:	f040 808d 	bne.w	81054b4 <_printf_float+0x1d0>
 810539a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810539e:	b00d      	add	sp, #52	@ 0x34
 81053a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81053a4:	4642      	mov	r2, r8
 81053a6:	464b      	mov	r3, r9
 81053a8:	4640      	mov	r0, r8
 81053aa:	4649      	mov	r1, r9
 81053ac:	f7fb fc46 	bl	8100c3c <__aeabi_dcmpun>
 81053b0:	b140      	cbz	r0, 81053c4 <_printf_float+0xe0>
 81053b2:	464b      	mov	r3, r9
 81053b4:	2b00      	cmp	r3, #0
 81053b6:	bfbc      	itt	lt
 81053b8:	232d      	movlt	r3, #45	@ 0x2d
 81053ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 81053be:	4a7e      	ldr	r2, [pc, #504]	@ (81055b8 <_printf_float+0x2d4>)
 81053c0:	4b7e      	ldr	r3, [pc, #504]	@ (81055bc <_printf_float+0x2d8>)
 81053c2:	e7d4      	b.n	810536e <_printf_float+0x8a>
 81053c4:	6863      	ldr	r3, [r4, #4]
 81053c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 81053ca:	9206      	str	r2, [sp, #24]
 81053cc:	1c5a      	adds	r2, r3, #1
 81053ce:	d13b      	bne.n	8105448 <_printf_float+0x164>
 81053d0:	2306      	movs	r3, #6
 81053d2:	6063      	str	r3, [r4, #4]
 81053d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 81053d8:	2300      	movs	r3, #0
 81053da:	6022      	str	r2, [r4, #0]
 81053dc:	9303      	str	r3, [sp, #12]
 81053de:	ab0a      	add	r3, sp, #40	@ 0x28
 81053e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 81053e4:	ab09      	add	r3, sp, #36	@ 0x24
 81053e6:	9300      	str	r3, [sp, #0]
 81053e8:	6861      	ldr	r1, [r4, #4]
 81053ea:	ec49 8b10 	vmov	d0, r8, r9
 81053ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 81053f2:	4628      	mov	r0, r5
 81053f4:	f7ff fed7 	bl	81051a6 <__cvt>
 81053f8:	9b06      	ldr	r3, [sp, #24]
 81053fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81053fc:	2b47      	cmp	r3, #71	@ 0x47
 81053fe:	4680      	mov	r8, r0
 8105400:	d129      	bne.n	8105456 <_printf_float+0x172>
 8105402:	1cc8      	adds	r0, r1, #3
 8105404:	db02      	blt.n	810540c <_printf_float+0x128>
 8105406:	6863      	ldr	r3, [r4, #4]
 8105408:	4299      	cmp	r1, r3
 810540a:	dd41      	ble.n	8105490 <_printf_float+0x1ac>
 810540c:	f1aa 0a02 	sub.w	sl, sl, #2
 8105410:	fa5f fa8a 	uxtb.w	sl, sl
 8105414:	3901      	subs	r1, #1
 8105416:	4652      	mov	r2, sl
 8105418:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 810541c:	9109      	str	r1, [sp, #36]	@ 0x24
 810541e:	f7ff ff27 	bl	8105270 <__exponent>
 8105422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8105424:	1813      	adds	r3, r2, r0
 8105426:	2a01      	cmp	r2, #1
 8105428:	4681      	mov	r9, r0
 810542a:	6123      	str	r3, [r4, #16]
 810542c:	dc02      	bgt.n	8105434 <_printf_float+0x150>
 810542e:	6822      	ldr	r2, [r4, #0]
 8105430:	07d2      	lsls	r2, r2, #31
 8105432:	d501      	bpl.n	8105438 <_printf_float+0x154>
 8105434:	3301      	adds	r3, #1
 8105436:	6123      	str	r3, [r4, #16]
 8105438:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 810543c:	2b00      	cmp	r3, #0
 810543e:	d0a2      	beq.n	8105386 <_printf_float+0xa2>
 8105440:	232d      	movs	r3, #45	@ 0x2d
 8105442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8105446:	e79e      	b.n	8105386 <_printf_float+0xa2>
 8105448:	9a06      	ldr	r2, [sp, #24]
 810544a:	2a47      	cmp	r2, #71	@ 0x47
 810544c:	d1c2      	bne.n	81053d4 <_printf_float+0xf0>
 810544e:	2b00      	cmp	r3, #0
 8105450:	d1c0      	bne.n	81053d4 <_printf_float+0xf0>
 8105452:	2301      	movs	r3, #1
 8105454:	e7bd      	b.n	81053d2 <_printf_float+0xee>
 8105456:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 810545a:	d9db      	bls.n	8105414 <_printf_float+0x130>
 810545c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8105460:	d118      	bne.n	8105494 <_printf_float+0x1b0>
 8105462:	2900      	cmp	r1, #0
 8105464:	6863      	ldr	r3, [r4, #4]
 8105466:	dd0b      	ble.n	8105480 <_printf_float+0x19c>
 8105468:	6121      	str	r1, [r4, #16]
 810546a:	b913      	cbnz	r3, 8105472 <_printf_float+0x18e>
 810546c:	6822      	ldr	r2, [r4, #0]
 810546e:	07d0      	lsls	r0, r2, #31
 8105470:	d502      	bpl.n	8105478 <_printf_float+0x194>
 8105472:	3301      	adds	r3, #1
 8105474:	440b      	add	r3, r1
 8105476:	6123      	str	r3, [r4, #16]
 8105478:	65a1      	str	r1, [r4, #88]	@ 0x58
 810547a:	f04f 0900 	mov.w	r9, #0
 810547e:	e7db      	b.n	8105438 <_printf_float+0x154>
 8105480:	b913      	cbnz	r3, 8105488 <_printf_float+0x1a4>
 8105482:	6822      	ldr	r2, [r4, #0]
 8105484:	07d2      	lsls	r2, r2, #31
 8105486:	d501      	bpl.n	810548c <_printf_float+0x1a8>
 8105488:	3302      	adds	r3, #2
 810548a:	e7f4      	b.n	8105476 <_printf_float+0x192>
 810548c:	2301      	movs	r3, #1
 810548e:	e7f2      	b.n	8105476 <_printf_float+0x192>
 8105490:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8105494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8105496:	4299      	cmp	r1, r3
 8105498:	db05      	blt.n	81054a6 <_printf_float+0x1c2>
 810549a:	6823      	ldr	r3, [r4, #0]
 810549c:	6121      	str	r1, [r4, #16]
 810549e:	07d8      	lsls	r0, r3, #31
 81054a0:	d5ea      	bpl.n	8105478 <_printf_float+0x194>
 81054a2:	1c4b      	adds	r3, r1, #1
 81054a4:	e7e7      	b.n	8105476 <_printf_float+0x192>
 81054a6:	2900      	cmp	r1, #0
 81054a8:	bfd4      	ite	le
 81054aa:	f1c1 0202 	rsble	r2, r1, #2
 81054ae:	2201      	movgt	r2, #1
 81054b0:	4413      	add	r3, r2
 81054b2:	e7e0      	b.n	8105476 <_printf_float+0x192>
 81054b4:	6823      	ldr	r3, [r4, #0]
 81054b6:	055a      	lsls	r2, r3, #21
 81054b8:	d407      	bmi.n	81054ca <_printf_float+0x1e6>
 81054ba:	6923      	ldr	r3, [r4, #16]
 81054bc:	4642      	mov	r2, r8
 81054be:	4631      	mov	r1, r6
 81054c0:	4628      	mov	r0, r5
 81054c2:	47b8      	blx	r7
 81054c4:	3001      	adds	r0, #1
 81054c6:	d12b      	bne.n	8105520 <_printf_float+0x23c>
 81054c8:	e767      	b.n	810539a <_printf_float+0xb6>
 81054ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 81054ce:	f240 80dd 	bls.w	810568c <_printf_float+0x3a8>
 81054d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 81054d6:	2200      	movs	r2, #0
 81054d8:	2300      	movs	r3, #0
 81054da:	f7fb fb7d 	bl	8100bd8 <__aeabi_dcmpeq>
 81054de:	2800      	cmp	r0, #0
 81054e0:	d033      	beq.n	810554a <_printf_float+0x266>
 81054e2:	4a37      	ldr	r2, [pc, #220]	@ (81055c0 <_printf_float+0x2dc>)
 81054e4:	2301      	movs	r3, #1
 81054e6:	4631      	mov	r1, r6
 81054e8:	4628      	mov	r0, r5
 81054ea:	47b8      	blx	r7
 81054ec:	3001      	adds	r0, #1
 81054ee:	f43f af54 	beq.w	810539a <_printf_float+0xb6>
 81054f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 81054f6:	4543      	cmp	r3, r8
 81054f8:	db02      	blt.n	8105500 <_printf_float+0x21c>
 81054fa:	6823      	ldr	r3, [r4, #0]
 81054fc:	07d8      	lsls	r0, r3, #31
 81054fe:	d50f      	bpl.n	8105520 <_printf_float+0x23c>
 8105500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8105504:	4631      	mov	r1, r6
 8105506:	4628      	mov	r0, r5
 8105508:	47b8      	blx	r7
 810550a:	3001      	adds	r0, #1
 810550c:	f43f af45 	beq.w	810539a <_printf_float+0xb6>
 8105510:	f04f 0900 	mov.w	r9, #0
 8105514:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8105518:	f104 0a1a 	add.w	sl, r4, #26
 810551c:	45c8      	cmp	r8, r9
 810551e:	dc09      	bgt.n	8105534 <_printf_float+0x250>
 8105520:	6823      	ldr	r3, [r4, #0]
 8105522:	079b      	lsls	r3, r3, #30
 8105524:	f100 8103 	bmi.w	810572e <_printf_float+0x44a>
 8105528:	68e0      	ldr	r0, [r4, #12]
 810552a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810552c:	4298      	cmp	r0, r3
 810552e:	bfb8      	it	lt
 8105530:	4618      	movlt	r0, r3
 8105532:	e734      	b.n	810539e <_printf_float+0xba>
 8105534:	2301      	movs	r3, #1
 8105536:	4652      	mov	r2, sl
 8105538:	4631      	mov	r1, r6
 810553a:	4628      	mov	r0, r5
 810553c:	47b8      	blx	r7
 810553e:	3001      	adds	r0, #1
 8105540:	f43f af2b 	beq.w	810539a <_printf_float+0xb6>
 8105544:	f109 0901 	add.w	r9, r9, #1
 8105548:	e7e8      	b.n	810551c <_printf_float+0x238>
 810554a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810554c:	2b00      	cmp	r3, #0
 810554e:	dc39      	bgt.n	81055c4 <_printf_float+0x2e0>
 8105550:	4a1b      	ldr	r2, [pc, #108]	@ (81055c0 <_printf_float+0x2dc>)
 8105552:	2301      	movs	r3, #1
 8105554:	4631      	mov	r1, r6
 8105556:	4628      	mov	r0, r5
 8105558:	47b8      	blx	r7
 810555a:	3001      	adds	r0, #1
 810555c:	f43f af1d 	beq.w	810539a <_printf_float+0xb6>
 8105560:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8105564:	ea59 0303 	orrs.w	r3, r9, r3
 8105568:	d102      	bne.n	8105570 <_printf_float+0x28c>
 810556a:	6823      	ldr	r3, [r4, #0]
 810556c:	07d9      	lsls	r1, r3, #31
 810556e:	d5d7      	bpl.n	8105520 <_printf_float+0x23c>
 8105570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8105574:	4631      	mov	r1, r6
 8105576:	4628      	mov	r0, r5
 8105578:	47b8      	blx	r7
 810557a:	3001      	adds	r0, #1
 810557c:	f43f af0d 	beq.w	810539a <_printf_float+0xb6>
 8105580:	f04f 0a00 	mov.w	sl, #0
 8105584:	f104 0b1a 	add.w	fp, r4, #26
 8105588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810558a:	425b      	negs	r3, r3
 810558c:	4553      	cmp	r3, sl
 810558e:	dc01      	bgt.n	8105594 <_printf_float+0x2b0>
 8105590:	464b      	mov	r3, r9
 8105592:	e793      	b.n	81054bc <_printf_float+0x1d8>
 8105594:	2301      	movs	r3, #1
 8105596:	465a      	mov	r2, fp
 8105598:	4631      	mov	r1, r6
 810559a:	4628      	mov	r0, r5
 810559c:	47b8      	blx	r7
 810559e:	3001      	adds	r0, #1
 81055a0:	f43f aefb 	beq.w	810539a <_printf_float+0xb6>
 81055a4:	f10a 0a01 	add.w	sl, sl, #1
 81055a8:	e7ee      	b.n	8105588 <_printf_float+0x2a4>
 81055aa:	bf00      	nop
 81055ac:	7fefffff 	.word	0x7fefffff
 81055b0:	0810a61c 	.word	0x0810a61c
 81055b4:	0810a620 	.word	0x0810a620
 81055b8:	0810a624 	.word	0x0810a624
 81055bc:	0810a628 	.word	0x0810a628
 81055c0:	0810a62c 	.word	0x0810a62c
 81055c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 81055c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 81055ca:	4553      	cmp	r3, sl
 81055cc:	bfa8      	it	ge
 81055ce:	4653      	movge	r3, sl
 81055d0:	2b00      	cmp	r3, #0
 81055d2:	4699      	mov	r9, r3
 81055d4:	dc36      	bgt.n	8105644 <_printf_float+0x360>
 81055d6:	f04f 0b00 	mov.w	fp, #0
 81055da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81055de:	f104 021a 	add.w	r2, r4, #26
 81055e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 81055e4:	9306      	str	r3, [sp, #24]
 81055e6:	eba3 0309 	sub.w	r3, r3, r9
 81055ea:	455b      	cmp	r3, fp
 81055ec:	dc31      	bgt.n	8105652 <_printf_float+0x36e>
 81055ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81055f0:	459a      	cmp	sl, r3
 81055f2:	dc3a      	bgt.n	810566a <_printf_float+0x386>
 81055f4:	6823      	ldr	r3, [r4, #0]
 81055f6:	07da      	lsls	r2, r3, #31
 81055f8:	d437      	bmi.n	810566a <_printf_float+0x386>
 81055fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81055fc:	ebaa 0903 	sub.w	r9, sl, r3
 8105600:	9b06      	ldr	r3, [sp, #24]
 8105602:	ebaa 0303 	sub.w	r3, sl, r3
 8105606:	4599      	cmp	r9, r3
 8105608:	bfa8      	it	ge
 810560a:	4699      	movge	r9, r3
 810560c:	f1b9 0f00 	cmp.w	r9, #0
 8105610:	dc33      	bgt.n	810567a <_printf_float+0x396>
 8105612:	f04f 0800 	mov.w	r8, #0
 8105616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810561a:	f104 0b1a 	add.w	fp, r4, #26
 810561e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8105620:	ebaa 0303 	sub.w	r3, sl, r3
 8105624:	eba3 0309 	sub.w	r3, r3, r9
 8105628:	4543      	cmp	r3, r8
 810562a:	f77f af79 	ble.w	8105520 <_printf_float+0x23c>
 810562e:	2301      	movs	r3, #1
 8105630:	465a      	mov	r2, fp
 8105632:	4631      	mov	r1, r6
 8105634:	4628      	mov	r0, r5
 8105636:	47b8      	blx	r7
 8105638:	3001      	adds	r0, #1
 810563a:	f43f aeae 	beq.w	810539a <_printf_float+0xb6>
 810563e:	f108 0801 	add.w	r8, r8, #1
 8105642:	e7ec      	b.n	810561e <_printf_float+0x33a>
 8105644:	4642      	mov	r2, r8
 8105646:	4631      	mov	r1, r6
 8105648:	4628      	mov	r0, r5
 810564a:	47b8      	blx	r7
 810564c:	3001      	adds	r0, #1
 810564e:	d1c2      	bne.n	81055d6 <_printf_float+0x2f2>
 8105650:	e6a3      	b.n	810539a <_printf_float+0xb6>
 8105652:	2301      	movs	r3, #1
 8105654:	4631      	mov	r1, r6
 8105656:	4628      	mov	r0, r5
 8105658:	9206      	str	r2, [sp, #24]
 810565a:	47b8      	blx	r7
 810565c:	3001      	adds	r0, #1
 810565e:	f43f ae9c 	beq.w	810539a <_printf_float+0xb6>
 8105662:	9a06      	ldr	r2, [sp, #24]
 8105664:	f10b 0b01 	add.w	fp, fp, #1
 8105668:	e7bb      	b.n	81055e2 <_printf_float+0x2fe>
 810566a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810566e:	4631      	mov	r1, r6
 8105670:	4628      	mov	r0, r5
 8105672:	47b8      	blx	r7
 8105674:	3001      	adds	r0, #1
 8105676:	d1c0      	bne.n	81055fa <_printf_float+0x316>
 8105678:	e68f      	b.n	810539a <_printf_float+0xb6>
 810567a:	9a06      	ldr	r2, [sp, #24]
 810567c:	464b      	mov	r3, r9
 810567e:	4442      	add	r2, r8
 8105680:	4631      	mov	r1, r6
 8105682:	4628      	mov	r0, r5
 8105684:	47b8      	blx	r7
 8105686:	3001      	adds	r0, #1
 8105688:	d1c3      	bne.n	8105612 <_printf_float+0x32e>
 810568a:	e686      	b.n	810539a <_printf_float+0xb6>
 810568c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8105690:	f1ba 0f01 	cmp.w	sl, #1
 8105694:	dc01      	bgt.n	810569a <_printf_float+0x3b6>
 8105696:	07db      	lsls	r3, r3, #31
 8105698:	d536      	bpl.n	8105708 <_printf_float+0x424>
 810569a:	2301      	movs	r3, #1
 810569c:	4642      	mov	r2, r8
 810569e:	4631      	mov	r1, r6
 81056a0:	4628      	mov	r0, r5
 81056a2:	47b8      	blx	r7
 81056a4:	3001      	adds	r0, #1
 81056a6:	f43f ae78 	beq.w	810539a <_printf_float+0xb6>
 81056aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81056ae:	4631      	mov	r1, r6
 81056b0:	4628      	mov	r0, r5
 81056b2:	47b8      	blx	r7
 81056b4:	3001      	adds	r0, #1
 81056b6:	f43f ae70 	beq.w	810539a <_printf_float+0xb6>
 81056ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 81056be:	2200      	movs	r2, #0
 81056c0:	2300      	movs	r3, #0
 81056c2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 81056c6:	f7fb fa87 	bl	8100bd8 <__aeabi_dcmpeq>
 81056ca:	b9c0      	cbnz	r0, 81056fe <_printf_float+0x41a>
 81056cc:	4653      	mov	r3, sl
 81056ce:	f108 0201 	add.w	r2, r8, #1
 81056d2:	4631      	mov	r1, r6
 81056d4:	4628      	mov	r0, r5
 81056d6:	47b8      	blx	r7
 81056d8:	3001      	adds	r0, #1
 81056da:	d10c      	bne.n	81056f6 <_printf_float+0x412>
 81056dc:	e65d      	b.n	810539a <_printf_float+0xb6>
 81056de:	2301      	movs	r3, #1
 81056e0:	465a      	mov	r2, fp
 81056e2:	4631      	mov	r1, r6
 81056e4:	4628      	mov	r0, r5
 81056e6:	47b8      	blx	r7
 81056e8:	3001      	adds	r0, #1
 81056ea:	f43f ae56 	beq.w	810539a <_printf_float+0xb6>
 81056ee:	f108 0801 	add.w	r8, r8, #1
 81056f2:	45d0      	cmp	r8, sl
 81056f4:	dbf3      	blt.n	81056de <_printf_float+0x3fa>
 81056f6:	464b      	mov	r3, r9
 81056f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 81056fc:	e6df      	b.n	81054be <_printf_float+0x1da>
 81056fe:	f04f 0800 	mov.w	r8, #0
 8105702:	f104 0b1a 	add.w	fp, r4, #26
 8105706:	e7f4      	b.n	81056f2 <_printf_float+0x40e>
 8105708:	2301      	movs	r3, #1
 810570a:	4642      	mov	r2, r8
 810570c:	e7e1      	b.n	81056d2 <_printf_float+0x3ee>
 810570e:	2301      	movs	r3, #1
 8105710:	464a      	mov	r2, r9
 8105712:	4631      	mov	r1, r6
 8105714:	4628      	mov	r0, r5
 8105716:	47b8      	blx	r7
 8105718:	3001      	adds	r0, #1
 810571a:	f43f ae3e 	beq.w	810539a <_printf_float+0xb6>
 810571e:	f108 0801 	add.w	r8, r8, #1
 8105722:	68e3      	ldr	r3, [r4, #12]
 8105724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8105726:	1a5b      	subs	r3, r3, r1
 8105728:	4543      	cmp	r3, r8
 810572a:	dcf0      	bgt.n	810570e <_printf_float+0x42a>
 810572c:	e6fc      	b.n	8105528 <_printf_float+0x244>
 810572e:	f04f 0800 	mov.w	r8, #0
 8105732:	f104 0919 	add.w	r9, r4, #25
 8105736:	e7f4      	b.n	8105722 <_printf_float+0x43e>

08105738 <_printf_common>:
 8105738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810573c:	4616      	mov	r6, r2
 810573e:	4698      	mov	r8, r3
 8105740:	688a      	ldr	r2, [r1, #8]
 8105742:	690b      	ldr	r3, [r1, #16]
 8105744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8105748:	4293      	cmp	r3, r2
 810574a:	bfb8      	it	lt
 810574c:	4613      	movlt	r3, r2
 810574e:	6033      	str	r3, [r6, #0]
 8105750:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8105754:	4607      	mov	r7, r0
 8105756:	460c      	mov	r4, r1
 8105758:	b10a      	cbz	r2, 810575e <_printf_common+0x26>
 810575a:	3301      	adds	r3, #1
 810575c:	6033      	str	r3, [r6, #0]
 810575e:	6823      	ldr	r3, [r4, #0]
 8105760:	0699      	lsls	r1, r3, #26
 8105762:	bf42      	ittt	mi
 8105764:	6833      	ldrmi	r3, [r6, #0]
 8105766:	3302      	addmi	r3, #2
 8105768:	6033      	strmi	r3, [r6, #0]
 810576a:	6825      	ldr	r5, [r4, #0]
 810576c:	f015 0506 	ands.w	r5, r5, #6
 8105770:	d106      	bne.n	8105780 <_printf_common+0x48>
 8105772:	f104 0a19 	add.w	sl, r4, #25
 8105776:	68e3      	ldr	r3, [r4, #12]
 8105778:	6832      	ldr	r2, [r6, #0]
 810577a:	1a9b      	subs	r3, r3, r2
 810577c:	42ab      	cmp	r3, r5
 810577e:	dc26      	bgt.n	81057ce <_printf_common+0x96>
 8105780:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8105784:	6822      	ldr	r2, [r4, #0]
 8105786:	3b00      	subs	r3, #0
 8105788:	bf18      	it	ne
 810578a:	2301      	movne	r3, #1
 810578c:	0692      	lsls	r2, r2, #26
 810578e:	d42b      	bmi.n	81057e8 <_printf_common+0xb0>
 8105790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8105794:	4641      	mov	r1, r8
 8105796:	4638      	mov	r0, r7
 8105798:	47c8      	blx	r9
 810579a:	3001      	adds	r0, #1
 810579c:	d01e      	beq.n	81057dc <_printf_common+0xa4>
 810579e:	6823      	ldr	r3, [r4, #0]
 81057a0:	6922      	ldr	r2, [r4, #16]
 81057a2:	f003 0306 	and.w	r3, r3, #6
 81057a6:	2b04      	cmp	r3, #4
 81057a8:	bf02      	ittt	eq
 81057aa:	68e5      	ldreq	r5, [r4, #12]
 81057ac:	6833      	ldreq	r3, [r6, #0]
 81057ae:	1aed      	subeq	r5, r5, r3
 81057b0:	68a3      	ldr	r3, [r4, #8]
 81057b2:	bf0c      	ite	eq
 81057b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 81057b8:	2500      	movne	r5, #0
 81057ba:	4293      	cmp	r3, r2
 81057bc:	bfc4      	itt	gt
 81057be:	1a9b      	subgt	r3, r3, r2
 81057c0:	18ed      	addgt	r5, r5, r3
 81057c2:	2600      	movs	r6, #0
 81057c4:	341a      	adds	r4, #26
 81057c6:	42b5      	cmp	r5, r6
 81057c8:	d11a      	bne.n	8105800 <_printf_common+0xc8>
 81057ca:	2000      	movs	r0, #0
 81057cc:	e008      	b.n	81057e0 <_printf_common+0xa8>
 81057ce:	2301      	movs	r3, #1
 81057d0:	4652      	mov	r2, sl
 81057d2:	4641      	mov	r1, r8
 81057d4:	4638      	mov	r0, r7
 81057d6:	47c8      	blx	r9
 81057d8:	3001      	adds	r0, #1
 81057da:	d103      	bne.n	81057e4 <_printf_common+0xac>
 81057dc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81057e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81057e4:	3501      	adds	r5, #1
 81057e6:	e7c6      	b.n	8105776 <_printf_common+0x3e>
 81057e8:	18e1      	adds	r1, r4, r3
 81057ea:	1c5a      	adds	r2, r3, #1
 81057ec:	2030      	movs	r0, #48	@ 0x30
 81057ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 81057f2:	4422      	add	r2, r4
 81057f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 81057f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 81057fc:	3302      	adds	r3, #2
 81057fe:	e7c7      	b.n	8105790 <_printf_common+0x58>
 8105800:	2301      	movs	r3, #1
 8105802:	4622      	mov	r2, r4
 8105804:	4641      	mov	r1, r8
 8105806:	4638      	mov	r0, r7
 8105808:	47c8      	blx	r9
 810580a:	3001      	adds	r0, #1
 810580c:	d0e6      	beq.n	81057dc <_printf_common+0xa4>
 810580e:	3601      	adds	r6, #1
 8105810:	e7d9      	b.n	81057c6 <_printf_common+0x8e>
	...

08105814 <_printf_i>:
 8105814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8105818:	7e0f      	ldrb	r7, [r1, #24]
 810581a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 810581c:	2f78      	cmp	r7, #120	@ 0x78
 810581e:	4691      	mov	r9, r2
 8105820:	4680      	mov	r8, r0
 8105822:	460c      	mov	r4, r1
 8105824:	469a      	mov	sl, r3
 8105826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810582a:	d807      	bhi.n	810583c <_printf_i+0x28>
 810582c:	2f62      	cmp	r7, #98	@ 0x62
 810582e:	d80a      	bhi.n	8105846 <_printf_i+0x32>
 8105830:	2f00      	cmp	r7, #0
 8105832:	f000 80d2 	beq.w	81059da <_printf_i+0x1c6>
 8105836:	2f58      	cmp	r7, #88	@ 0x58
 8105838:	f000 80b9 	beq.w	81059ae <_printf_i+0x19a>
 810583c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8105840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8105844:	e03a      	b.n	81058bc <_printf_i+0xa8>
 8105846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810584a:	2b15      	cmp	r3, #21
 810584c:	d8f6      	bhi.n	810583c <_printf_i+0x28>
 810584e:	a101      	add	r1, pc, #4	@ (adr r1, 8105854 <_printf_i+0x40>)
 8105850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8105854:	081058ad 	.word	0x081058ad
 8105858:	081058c1 	.word	0x081058c1
 810585c:	0810583d 	.word	0x0810583d
 8105860:	0810583d 	.word	0x0810583d
 8105864:	0810583d 	.word	0x0810583d
 8105868:	0810583d 	.word	0x0810583d
 810586c:	081058c1 	.word	0x081058c1
 8105870:	0810583d 	.word	0x0810583d
 8105874:	0810583d 	.word	0x0810583d
 8105878:	0810583d 	.word	0x0810583d
 810587c:	0810583d 	.word	0x0810583d
 8105880:	081059c1 	.word	0x081059c1
 8105884:	081058eb 	.word	0x081058eb
 8105888:	0810597b 	.word	0x0810597b
 810588c:	0810583d 	.word	0x0810583d
 8105890:	0810583d 	.word	0x0810583d
 8105894:	081059e3 	.word	0x081059e3
 8105898:	0810583d 	.word	0x0810583d
 810589c:	081058eb 	.word	0x081058eb
 81058a0:	0810583d 	.word	0x0810583d
 81058a4:	0810583d 	.word	0x0810583d
 81058a8:	08105983 	.word	0x08105983
 81058ac:	6833      	ldr	r3, [r6, #0]
 81058ae:	1d1a      	adds	r2, r3, #4
 81058b0:	681b      	ldr	r3, [r3, #0]
 81058b2:	6032      	str	r2, [r6, #0]
 81058b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 81058b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 81058bc:	2301      	movs	r3, #1
 81058be:	e09d      	b.n	81059fc <_printf_i+0x1e8>
 81058c0:	6833      	ldr	r3, [r6, #0]
 81058c2:	6820      	ldr	r0, [r4, #0]
 81058c4:	1d19      	adds	r1, r3, #4
 81058c6:	6031      	str	r1, [r6, #0]
 81058c8:	0606      	lsls	r6, r0, #24
 81058ca:	d501      	bpl.n	81058d0 <_printf_i+0xbc>
 81058cc:	681d      	ldr	r5, [r3, #0]
 81058ce:	e003      	b.n	81058d8 <_printf_i+0xc4>
 81058d0:	0645      	lsls	r5, r0, #25
 81058d2:	d5fb      	bpl.n	81058cc <_printf_i+0xb8>
 81058d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 81058d8:	2d00      	cmp	r5, #0
 81058da:	da03      	bge.n	81058e4 <_printf_i+0xd0>
 81058dc:	232d      	movs	r3, #45	@ 0x2d
 81058de:	426d      	negs	r5, r5
 81058e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 81058e4:	4859      	ldr	r0, [pc, #356]	@ (8105a4c <_printf_i+0x238>)
 81058e6:	230a      	movs	r3, #10
 81058e8:	e011      	b.n	810590e <_printf_i+0xfa>
 81058ea:	6821      	ldr	r1, [r4, #0]
 81058ec:	6833      	ldr	r3, [r6, #0]
 81058ee:	0608      	lsls	r0, r1, #24
 81058f0:	f853 5b04 	ldr.w	r5, [r3], #4
 81058f4:	d402      	bmi.n	81058fc <_printf_i+0xe8>
 81058f6:	0649      	lsls	r1, r1, #25
 81058f8:	bf48      	it	mi
 81058fa:	b2ad      	uxthmi	r5, r5
 81058fc:	2f6f      	cmp	r7, #111	@ 0x6f
 81058fe:	4853      	ldr	r0, [pc, #332]	@ (8105a4c <_printf_i+0x238>)
 8105900:	6033      	str	r3, [r6, #0]
 8105902:	bf14      	ite	ne
 8105904:	230a      	movne	r3, #10
 8105906:	2308      	moveq	r3, #8
 8105908:	2100      	movs	r1, #0
 810590a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 810590e:	6866      	ldr	r6, [r4, #4]
 8105910:	60a6      	str	r6, [r4, #8]
 8105912:	2e00      	cmp	r6, #0
 8105914:	bfa2      	ittt	ge
 8105916:	6821      	ldrge	r1, [r4, #0]
 8105918:	f021 0104 	bicge.w	r1, r1, #4
 810591c:	6021      	strge	r1, [r4, #0]
 810591e:	b90d      	cbnz	r5, 8105924 <_printf_i+0x110>
 8105920:	2e00      	cmp	r6, #0
 8105922:	d04b      	beq.n	81059bc <_printf_i+0x1a8>
 8105924:	4616      	mov	r6, r2
 8105926:	fbb5 f1f3 	udiv	r1, r5, r3
 810592a:	fb03 5711 	mls	r7, r3, r1, r5
 810592e:	5dc7      	ldrb	r7, [r0, r7]
 8105930:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8105934:	462f      	mov	r7, r5
 8105936:	42bb      	cmp	r3, r7
 8105938:	460d      	mov	r5, r1
 810593a:	d9f4      	bls.n	8105926 <_printf_i+0x112>
 810593c:	2b08      	cmp	r3, #8
 810593e:	d10b      	bne.n	8105958 <_printf_i+0x144>
 8105940:	6823      	ldr	r3, [r4, #0]
 8105942:	07df      	lsls	r7, r3, #31
 8105944:	d508      	bpl.n	8105958 <_printf_i+0x144>
 8105946:	6923      	ldr	r3, [r4, #16]
 8105948:	6861      	ldr	r1, [r4, #4]
 810594a:	4299      	cmp	r1, r3
 810594c:	bfde      	ittt	le
 810594e:	2330      	movle	r3, #48	@ 0x30
 8105950:	f806 3c01 	strble.w	r3, [r6, #-1]
 8105954:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8105958:	1b92      	subs	r2, r2, r6
 810595a:	6122      	str	r2, [r4, #16]
 810595c:	f8cd a000 	str.w	sl, [sp]
 8105960:	464b      	mov	r3, r9
 8105962:	aa03      	add	r2, sp, #12
 8105964:	4621      	mov	r1, r4
 8105966:	4640      	mov	r0, r8
 8105968:	f7ff fee6 	bl	8105738 <_printf_common>
 810596c:	3001      	adds	r0, #1
 810596e:	d14a      	bne.n	8105a06 <_printf_i+0x1f2>
 8105970:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8105974:	b004      	add	sp, #16
 8105976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810597a:	6823      	ldr	r3, [r4, #0]
 810597c:	f043 0320 	orr.w	r3, r3, #32
 8105980:	6023      	str	r3, [r4, #0]
 8105982:	4833      	ldr	r0, [pc, #204]	@ (8105a50 <_printf_i+0x23c>)
 8105984:	2778      	movs	r7, #120	@ 0x78
 8105986:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 810598a:	6823      	ldr	r3, [r4, #0]
 810598c:	6831      	ldr	r1, [r6, #0]
 810598e:	061f      	lsls	r7, r3, #24
 8105990:	f851 5b04 	ldr.w	r5, [r1], #4
 8105994:	d402      	bmi.n	810599c <_printf_i+0x188>
 8105996:	065f      	lsls	r7, r3, #25
 8105998:	bf48      	it	mi
 810599a:	b2ad      	uxthmi	r5, r5
 810599c:	6031      	str	r1, [r6, #0]
 810599e:	07d9      	lsls	r1, r3, #31
 81059a0:	bf44      	itt	mi
 81059a2:	f043 0320 	orrmi.w	r3, r3, #32
 81059a6:	6023      	strmi	r3, [r4, #0]
 81059a8:	b11d      	cbz	r5, 81059b2 <_printf_i+0x19e>
 81059aa:	2310      	movs	r3, #16
 81059ac:	e7ac      	b.n	8105908 <_printf_i+0xf4>
 81059ae:	4827      	ldr	r0, [pc, #156]	@ (8105a4c <_printf_i+0x238>)
 81059b0:	e7e9      	b.n	8105986 <_printf_i+0x172>
 81059b2:	6823      	ldr	r3, [r4, #0]
 81059b4:	f023 0320 	bic.w	r3, r3, #32
 81059b8:	6023      	str	r3, [r4, #0]
 81059ba:	e7f6      	b.n	81059aa <_printf_i+0x196>
 81059bc:	4616      	mov	r6, r2
 81059be:	e7bd      	b.n	810593c <_printf_i+0x128>
 81059c0:	6833      	ldr	r3, [r6, #0]
 81059c2:	6825      	ldr	r5, [r4, #0]
 81059c4:	6961      	ldr	r1, [r4, #20]
 81059c6:	1d18      	adds	r0, r3, #4
 81059c8:	6030      	str	r0, [r6, #0]
 81059ca:	062e      	lsls	r6, r5, #24
 81059cc:	681b      	ldr	r3, [r3, #0]
 81059ce:	d501      	bpl.n	81059d4 <_printf_i+0x1c0>
 81059d0:	6019      	str	r1, [r3, #0]
 81059d2:	e002      	b.n	81059da <_printf_i+0x1c6>
 81059d4:	0668      	lsls	r0, r5, #25
 81059d6:	d5fb      	bpl.n	81059d0 <_printf_i+0x1bc>
 81059d8:	8019      	strh	r1, [r3, #0]
 81059da:	2300      	movs	r3, #0
 81059dc:	6123      	str	r3, [r4, #16]
 81059de:	4616      	mov	r6, r2
 81059e0:	e7bc      	b.n	810595c <_printf_i+0x148>
 81059e2:	6833      	ldr	r3, [r6, #0]
 81059e4:	1d1a      	adds	r2, r3, #4
 81059e6:	6032      	str	r2, [r6, #0]
 81059e8:	681e      	ldr	r6, [r3, #0]
 81059ea:	6862      	ldr	r2, [r4, #4]
 81059ec:	2100      	movs	r1, #0
 81059ee:	4630      	mov	r0, r6
 81059f0:	f7fa fc76 	bl	81002e0 <memchr>
 81059f4:	b108      	cbz	r0, 81059fa <_printf_i+0x1e6>
 81059f6:	1b80      	subs	r0, r0, r6
 81059f8:	6060      	str	r0, [r4, #4]
 81059fa:	6863      	ldr	r3, [r4, #4]
 81059fc:	6123      	str	r3, [r4, #16]
 81059fe:	2300      	movs	r3, #0
 8105a00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8105a04:	e7aa      	b.n	810595c <_printf_i+0x148>
 8105a06:	6923      	ldr	r3, [r4, #16]
 8105a08:	4632      	mov	r2, r6
 8105a0a:	4649      	mov	r1, r9
 8105a0c:	4640      	mov	r0, r8
 8105a0e:	47d0      	blx	sl
 8105a10:	3001      	adds	r0, #1
 8105a12:	d0ad      	beq.n	8105970 <_printf_i+0x15c>
 8105a14:	6823      	ldr	r3, [r4, #0]
 8105a16:	079b      	lsls	r3, r3, #30
 8105a18:	d413      	bmi.n	8105a42 <_printf_i+0x22e>
 8105a1a:	68e0      	ldr	r0, [r4, #12]
 8105a1c:	9b03      	ldr	r3, [sp, #12]
 8105a1e:	4298      	cmp	r0, r3
 8105a20:	bfb8      	it	lt
 8105a22:	4618      	movlt	r0, r3
 8105a24:	e7a6      	b.n	8105974 <_printf_i+0x160>
 8105a26:	2301      	movs	r3, #1
 8105a28:	4632      	mov	r2, r6
 8105a2a:	4649      	mov	r1, r9
 8105a2c:	4640      	mov	r0, r8
 8105a2e:	47d0      	blx	sl
 8105a30:	3001      	adds	r0, #1
 8105a32:	d09d      	beq.n	8105970 <_printf_i+0x15c>
 8105a34:	3501      	adds	r5, #1
 8105a36:	68e3      	ldr	r3, [r4, #12]
 8105a38:	9903      	ldr	r1, [sp, #12]
 8105a3a:	1a5b      	subs	r3, r3, r1
 8105a3c:	42ab      	cmp	r3, r5
 8105a3e:	dcf2      	bgt.n	8105a26 <_printf_i+0x212>
 8105a40:	e7eb      	b.n	8105a1a <_printf_i+0x206>
 8105a42:	2500      	movs	r5, #0
 8105a44:	f104 0619 	add.w	r6, r4, #25
 8105a48:	e7f5      	b.n	8105a36 <_printf_i+0x222>
 8105a4a:	bf00      	nop
 8105a4c:	0810a62e 	.word	0x0810a62e
 8105a50:	0810a63f 	.word	0x0810a63f

08105a54 <_scanf_float>:
 8105a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105a58:	b087      	sub	sp, #28
 8105a5a:	4617      	mov	r7, r2
 8105a5c:	9303      	str	r3, [sp, #12]
 8105a5e:	688b      	ldr	r3, [r1, #8]
 8105a60:	1e5a      	subs	r2, r3, #1
 8105a62:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8105a66:	bf81      	itttt	hi
 8105a68:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8105a6c:	eb03 0b05 	addhi.w	fp, r3, r5
 8105a70:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8105a74:	608b      	strhi	r3, [r1, #8]
 8105a76:	680b      	ldr	r3, [r1, #0]
 8105a78:	460a      	mov	r2, r1
 8105a7a:	f04f 0500 	mov.w	r5, #0
 8105a7e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8105a82:	f842 3b1c 	str.w	r3, [r2], #28
 8105a86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8105a8a:	4680      	mov	r8, r0
 8105a8c:	460c      	mov	r4, r1
 8105a8e:	bf98      	it	ls
 8105a90:	f04f 0b00 	movls.w	fp, #0
 8105a94:	9201      	str	r2, [sp, #4]
 8105a96:	4616      	mov	r6, r2
 8105a98:	46aa      	mov	sl, r5
 8105a9a:	46a9      	mov	r9, r5
 8105a9c:	9502      	str	r5, [sp, #8]
 8105a9e:	68a2      	ldr	r2, [r4, #8]
 8105aa0:	b152      	cbz	r2, 8105ab8 <_scanf_float+0x64>
 8105aa2:	683b      	ldr	r3, [r7, #0]
 8105aa4:	781b      	ldrb	r3, [r3, #0]
 8105aa6:	2b4e      	cmp	r3, #78	@ 0x4e
 8105aa8:	d864      	bhi.n	8105b74 <_scanf_float+0x120>
 8105aaa:	2b40      	cmp	r3, #64	@ 0x40
 8105aac:	d83c      	bhi.n	8105b28 <_scanf_float+0xd4>
 8105aae:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8105ab2:	b2c8      	uxtb	r0, r1
 8105ab4:	280e      	cmp	r0, #14
 8105ab6:	d93a      	bls.n	8105b2e <_scanf_float+0xda>
 8105ab8:	f1b9 0f00 	cmp.w	r9, #0
 8105abc:	d003      	beq.n	8105ac6 <_scanf_float+0x72>
 8105abe:	6823      	ldr	r3, [r4, #0]
 8105ac0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8105ac4:	6023      	str	r3, [r4, #0]
 8105ac6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8105aca:	f1ba 0f01 	cmp.w	sl, #1
 8105ace:	f200 8117 	bhi.w	8105d00 <_scanf_float+0x2ac>
 8105ad2:	9b01      	ldr	r3, [sp, #4]
 8105ad4:	429e      	cmp	r6, r3
 8105ad6:	f200 8108 	bhi.w	8105cea <_scanf_float+0x296>
 8105ada:	2001      	movs	r0, #1
 8105adc:	b007      	add	sp, #28
 8105ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105ae2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8105ae6:	2a0d      	cmp	r2, #13
 8105ae8:	d8e6      	bhi.n	8105ab8 <_scanf_float+0x64>
 8105aea:	a101      	add	r1, pc, #4	@ (adr r1, 8105af0 <_scanf_float+0x9c>)
 8105aec:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8105af0:	08105c37 	.word	0x08105c37
 8105af4:	08105ab9 	.word	0x08105ab9
 8105af8:	08105ab9 	.word	0x08105ab9
 8105afc:	08105ab9 	.word	0x08105ab9
 8105b00:	08105c97 	.word	0x08105c97
 8105b04:	08105c6f 	.word	0x08105c6f
 8105b08:	08105ab9 	.word	0x08105ab9
 8105b0c:	08105ab9 	.word	0x08105ab9
 8105b10:	08105c45 	.word	0x08105c45
 8105b14:	08105ab9 	.word	0x08105ab9
 8105b18:	08105ab9 	.word	0x08105ab9
 8105b1c:	08105ab9 	.word	0x08105ab9
 8105b20:	08105ab9 	.word	0x08105ab9
 8105b24:	08105bfd 	.word	0x08105bfd
 8105b28:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8105b2c:	e7db      	b.n	8105ae6 <_scanf_float+0x92>
 8105b2e:	290e      	cmp	r1, #14
 8105b30:	d8c2      	bhi.n	8105ab8 <_scanf_float+0x64>
 8105b32:	a001      	add	r0, pc, #4	@ (adr r0, 8105b38 <_scanf_float+0xe4>)
 8105b34:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8105b38:	08105bed 	.word	0x08105bed
 8105b3c:	08105ab9 	.word	0x08105ab9
 8105b40:	08105bed 	.word	0x08105bed
 8105b44:	08105c83 	.word	0x08105c83
 8105b48:	08105ab9 	.word	0x08105ab9
 8105b4c:	08105b95 	.word	0x08105b95
 8105b50:	08105bd3 	.word	0x08105bd3
 8105b54:	08105bd3 	.word	0x08105bd3
 8105b58:	08105bd3 	.word	0x08105bd3
 8105b5c:	08105bd3 	.word	0x08105bd3
 8105b60:	08105bd3 	.word	0x08105bd3
 8105b64:	08105bd3 	.word	0x08105bd3
 8105b68:	08105bd3 	.word	0x08105bd3
 8105b6c:	08105bd3 	.word	0x08105bd3
 8105b70:	08105bd3 	.word	0x08105bd3
 8105b74:	2b6e      	cmp	r3, #110	@ 0x6e
 8105b76:	d809      	bhi.n	8105b8c <_scanf_float+0x138>
 8105b78:	2b60      	cmp	r3, #96	@ 0x60
 8105b7a:	d8b2      	bhi.n	8105ae2 <_scanf_float+0x8e>
 8105b7c:	2b54      	cmp	r3, #84	@ 0x54
 8105b7e:	d07b      	beq.n	8105c78 <_scanf_float+0x224>
 8105b80:	2b59      	cmp	r3, #89	@ 0x59
 8105b82:	d199      	bne.n	8105ab8 <_scanf_float+0x64>
 8105b84:	2d07      	cmp	r5, #7
 8105b86:	d197      	bne.n	8105ab8 <_scanf_float+0x64>
 8105b88:	2508      	movs	r5, #8
 8105b8a:	e02c      	b.n	8105be6 <_scanf_float+0x192>
 8105b8c:	2b74      	cmp	r3, #116	@ 0x74
 8105b8e:	d073      	beq.n	8105c78 <_scanf_float+0x224>
 8105b90:	2b79      	cmp	r3, #121	@ 0x79
 8105b92:	e7f6      	b.n	8105b82 <_scanf_float+0x12e>
 8105b94:	6821      	ldr	r1, [r4, #0]
 8105b96:	05c8      	lsls	r0, r1, #23
 8105b98:	d51b      	bpl.n	8105bd2 <_scanf_float+0x17e>
 8105b9a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8105b9e:	6021      	str	r1, [r4, #0]
 8105ba0:	f109 0901 	add.w	r9, r9, #1
 8105ba4:	f1bb 0f00 	cmp.w	fp, #0
 8105ba8:	d003      	beq.n	8105bb2 <_scanf_float+0x15e>
 8105baa:	3201      	adds	r2, #1
 8105bac:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8105bb0:	60a2      	str	r2, [r4, #8]
 8105bb2:	68a3      	ldr	r3, [r4, #8]
 8105bb4:	3b01      	subs	r3, #1
 8105bb6:	60a3      	str	r3, [r4, #8]
 8105bb8:	6923      	ldr	r3, [r4, #16]
 8105bba:	3301      	adds	r3, #1
 8105bbc:	6123      	str	r3, [r4, #16]
 8105bbe:	687b      	ldr	r3, [r7, #4]
 8105bc0:	3b01      	subs	r3, #1
 8105bc2:	2b00      	cmp	r3, #0
 8105bc4:	607b      	str	r3, [r7, #4]
 8105bc6:	f340 8087 	ble.w	8105cd8 <_scanf_float+0x284>
 8105bca:	683b      	ldr	r3, [r7, #0]
 8105bcc:	3301      	adds	r3, #1
 8105bce:	603b      	str	r3, [r7, #0]
 8105bd0:	e765      	b.n	8105a9e <_scanf_float+0x4a>
 8105bd2:	eb1a 0105 	adds.w	r1, sl, r5
 8105bd6:	f47f af6f 	bne.w	8105ab8 <_scanf_float+0x64>
 8105bda:	6822      	ldr	r2, [r4, #0]
 8105bdc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8105be0:	6022      	str	r2, [r4, #0]
 8105be2:	460d      	mov	r5, r1
 8105be4:	468a      	mov	sl, r1
 8105be6:	f806 3b01 	strb.w	r3, [r6], #1
 8105bea:	e7e2      	b.n	8105bb2 <_scanf_float+0x15e>
 8105bec:	6822      	ldr	r2, [r4, #0]
 8105bee:	0610      	lsls	r0, r2, #24
 8105bf0:	f57f af62 	bpl.w	8105ab8 <_scanf_float+0x64>
 8105bf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8105bf8:	6022      	str	r2, [r4, #0]
 8105bfa:	e7f4      	b.n	8105be6 <_scanf_float+0x192>
 8105bfc:	f1ba 0f00 	cmp.w	sl, #0
 8105c00:	d10e      	bne.n	8105c20 <_scanf_float+0x1cc>
 8105c02:	f1b9 0f00 	cmp.w	r9, #0
 8105c06:	d10e      	bne.n	8105c26 <_scanf_float+0x1d2>
 8105c08:	6822      	ldr	r2, [r4, #0]
 8105c0a:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8105c0e:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8105c12:	d108      	bne.n	8105c26 <_scanf_float+0x1d2>
 8105c14:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8105c18:	6022      	str	r2, [r4, #0]
 8105c1a:	f04f 0a01 	mov.w	sl, #1
 8105c1e:	e7e2      	b.n	8105be6 <_scanf_float+0x192>
 8105c20:	f1ba 0f02 	cmp.w	sl, #2
 8105c24:	d055      	beq.n	8105cd2 <_scanf_float+0x27e>
 8105c26:	2d01      	cmp	r5, #1
 8105c28:	d002      	beq.n	8105c30 <_scanf_float+0x1dc>
 8105c2a:	2d04      	cmp	r5, #4
 8105c2c:	f47f af44 	bne.w	8105ab8 <_scanf_float+0x64>
 8105c30:	3501      	adds	r5, #1
 8105c32:	b2ed      	uxtb	r5, r5
 8105c34:	e7d7      	b.n	8105be6 <_scanf_float+0x192>
 8105c36:	f1ba 0f01 	cmp.w	sl, #1
 8105c3a:	f47f af3d 	bne.w	8105ab8 <_scanf_float+0x64>
 8105c3e:	f04f 0a02 	mov.w	sl, #2
 8105c42:	e7d0      	b.n	8105be6 <_scanf_float+0x192>
 8105c44:	b97d      	cbnz	r5, 8105c66 <_scanf_float+0x212>
 8105c46:	f1b9 0f00 	cmp.w	r9, #0
 8105c4a:	f47f af38 	bne.w	8105abe <_scanf_float+0x6a>
 8105c4e:	6822      	ldr	r2, [r4, #0]
 8105c50:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8105c54:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8105c58:	f040 8108 	bne.w	8105e6c <_scanf_float+0x418>
 8105c5c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8105c60:	6022      	str	r2, [r4, #0]
 8105c62:	2501      	movs	r5, #1
 8105c64:	e7bf      	b.n	8105be6 <_scanf_float+0x192>
 8105c66:	2d03      	cmp	r5, #3
 8105c68:	d0e2      	beq.n	8105c30 <_scanf_float+0x1dc>
 8105c6a:	2d05      	cmp	r5, #5
 8105c6c:	e7de      	b.n	8105c2c <_scanf_float+0x1d8>
 8105c6e:	2d02      	cmp	r5, #2
 8105c70:	f47f af22 	bne.w	8105ab8 <_scanf_float+0x64>
 8105c74:	2503      	movs	r5, #3
 8105c76:	e7b6      	b.n	8105be6 <_scanf_float+0x192>
 8105c78:	2d06      	cmp	r5, #6
 8105c7a:	f47f af1d 	bne.w	8105ab8 <_scanf_float+0x64>
 8105c7e:	2507      	movs	r5, #7
 8105c80:	e7b1      	b.n	8105be6 <_scanf_float+0x192>
 8105c82:	6822      	ldr	r2, [r4, #0]
 8105c84:	0591      	lsls	r1, r2, #22
 8105c86:	f57f af17 	bpl.w	8105ab8 <_scanf_float+0x64>
 8105c8a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8105c8e:	6022      	str	r2, [r4, #0]
 8105c90:	f8cd 9008 	str.w	r9, [sp, #8]
 8105c94:	e7a7      	b.n	8105be6 <_scanf_float+0x192>
 8105c96:	6822      	ldr	r2, [r4, #0]
 8105c98:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8105c9c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8105ca0:	d006      	beq.n	8105cb0 <_scanf_float+0x25c>
 8105ca2:	0550      	lsls	r0, r2, #21
 8105ca4:	f57f af08 	bpl.w	8105ab8 <_scanf_float+0x64>
 8105ca8:	f1b9 0f00 	cmp.w	r9, #0
 8105cac:	f000 80de 	beq.w	8105e6c <_scanf_float+0x418>
 8105cb0:	0591      	lsls	r1, r2, #22
 8105cb2:	bf58      	it	pl
 8105cb4:	9902      	ldrpl	r1, [sp, #8]
 8105cb6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8105cba:	bf58      	it	pl
 8105cbc:	eba9 0101 	subpl.w	r1, r9, r1
 8105cc0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8105cc4:	bf58      	it	pl
 8105cc6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8105cca:	6022      	str	r2, [r4, #0]
 8105ccc:	f04f 0900 	mov.w	r9, #0
 8105cd0:	e789      	b.n	8105be6 <_scanf_float+0x192>
 8105cd2:	f04f 0a03 	mov.w	sl, #3
 8105cd6:	e786      	b.n	8105be6 <_scanf_float+0x192>
 8105cd8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8105cdc:	4639      	mov	r1, r7
 8105cde:	4640      	mov	r0, r8
 8105ce0:	4798      	blx	r3
 8105ce2:	2800      	cmp	r0, #0
 8105ce4:	f43f aedb 	beq.w	8105a9e <_scanf_float+0x4a>
 8105ce8:	e6e6      	b.n	8105ab8 <_scanf_float+0x64>
 8105cea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8105cee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8105cf2:	463a      	mov	r2, r7
 8105cf4:	4640      	mov	r0, r8
 8105cf6:	4798      	blx	r3
 8105cf8:	6923      	ldr	r3, [r4, #16]
 8105cfa:	3b01      	subs	r3, #1
 8105cfc:	6123      	str	r3, [r4, #16]
 8105cfe:	e6e8      	b.n	8105ad2 <_scanf_float+0x7e>
 8105d00:	1e6b      	subs	r3, r5, #1
 8105d02:	2b06      	cmp	r3, #6
 8105d04:	d824      	bhi.n	8105d50 <_scanf_float+0x2fc>
 8105d06:	2d02      	cmp	r5, #2
 8105d08:	d836      	bhi.n	8105d78 <_scanf_float+0x324>
 8105d0a:	9b01      	ldr	r3, [sp, #4]
 8105d0c:	429e      	cmp	r6, r3
 8105d0e:	f67f aee4 	bls.w	8105ada <_scanf_float+0x86>
 8105d12:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8105d16:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8105d1a:	463a      	mov	r2, r7
 8105d1c:	4640      	mov	r0, r8
 8105d1e:	4798      	blx	r3
 8105d20:	6923      	ldr	r3, [r4, #16]
 8105d22:	3b01      	subs	r3, #1
 8105d24:	6123      	str	r3, [r4, #16]
 8105d26:	e7f0      	b.n	8105d0a <_scanf_float+0x2b6>
 8105d28:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8105d2c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8105d30:	463a      	mov	r2, r7
 8105d32:	4640      	mov	r0, r8
 8105d34:	4798      	blx	r3
 8105d36:	6923      	ldr	r3, [r4, #16]
 8105d38:	3b01      	subs	r3, #1
 8105d3a:	6123      	str	r3, [r4, #16]
 8105d3c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8105d40:	fa5f fa8a 	uxtb.w	sl, sl
 8105d44:	f1ba 0f02 	cmp.w	sl, #2
 8105d48:	d1ee      	bne.n	8105d28 <_scanf_float+0x2d4>
 8105d4a:	3d03      	subs	r5, #3
 8105d4c:	b2ed      	uxtb	r5, r5
 8105d4e:	1b76      	subs	r6, r6, r5
 8105d50:	6823      	ldr	r3, [r4, #0]
 8105d52:	05da      	lsls	r2, r3, #23
 8105d54:	d530      	bpl.n	8105db8 <_scanf_float+0x364>
 8105d56:	055b      	lsls	r3, r3, #21
 8105d58:	d511      	bpl.n	8105d7e <_scanf_float+0x32a>
 8105d5a:	9b01      	ldr	r3, [sp, #4]
 8105d5c:	429e      	cmp	r6, r3
 8105d5e:	f67f aebc 	bls.w	8105ada <_scanf_float+0x86>
 8105d62:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8105d66:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8105d6a:	463a      	mov	r2, r7
 8105d6c:	4640      	mov	r0, r8
 8105d6e:	4798      	blx	r3
 8105d70:	6923      	ldr	r3, [r4, #16]
 8105d72:	3b01      	subs	r3, #1
 8105d74:	6123      	str	r3, [r4, #16]
 8105d76:	e7f0      	b.n	8105d5a <_scanf_float+0x306>
 8105d78:	46aa      	mov	sl, r5
 8105d7a:	46b3      	mov	fp, r6
 8105d7c:	e7de      	b.n	8105d3c <_scanf_float+0x2e8>
 8105d7e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8105d82:	6923      	ldr	r3, [r4, #16]
 8105d84:	2965      	cmp	r1, #101	@ 0x65
 8105d86:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8105d8a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8105d8e:	6123      	str	r3, [r4, #16]
 8105d90:	d00c      	beq.n	8105dac <_scanf_float+0x358>
 8105d92:	2945      	cmp	r1, #69	@ 0x45
 8105d94:	d00a      	beq.n	8105dac <_scanf_float+0x358>
 8105d96:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8105d9a:	463a      	mov	r2, r7
 8105d9c:	4640      	mov	r0, r8
 8105d9e:	4798      	blx	r3
 8105da0:	6923      	ldr	r3, [r4, #16]
 8105da2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8105da6:	3b01      	subs	r3, #1
 8105da8:	1eb5      	subs	r5, r6, #2
 8105daa:	6123      	str	r3, [r4, #16]
 8105dac:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8105db0:	463a      	mov	r2, r7
 8105db2:	4640      	mov	r0, r8
 8105db4:	4798      	blx	r3
 8105db6:	462e      	mov	r6, r5
 8105db8:	6822      	ldr	r2, [r4, #0]
 8105dba:	f012 0210 	ands.w	r2, r2, #16
 8105dbe:	d001      	beq.n	8105dc4 <_scanf_float+0x370>
 8105dc0:	2000      	movs	r0, #0
 8105dc2:	e68b      	b.n	8105adc <_scanf_float+0x88>
 8105dc4:	7032      	strb	r2, [r6, #0]
 8105dc6:	6823      	ldr	r3, [r4, #0]
 8105dc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8105dcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8105dd0:	d11c      	bne.n	8105e0c <_scanf_float+0x3b8>
 8105dd2:	9b02      	ldr	r3, [sp, #8]
 8105dd4:	454b      	cmp	r3, r9
 8105dd6:	eba3 0209 	sub.w	r2, r3, r9
 8105dda:	d123      	bne.n	8105e24 <_scanf_float+0x3d0>
 8105ddc:	9901      	ldr	r1, [sp, #4]
 8105dde:	2200      	movs	r2, #0
 8105de0:	4640      	mov	r0, r8
 8105de2:	f000 ff11 	bl	8106c08 <_strtod_r>
 8105de6:	9b03      	ldr	r3, [sp, #12]
 8105de8:	6821      	ldr	r1, [r4, #0]
 8105dea:	681b      	ldr	r3, [r3, #0]
 8105dec:	f011 0f02 	tst.w	r1, #2
 8105df0:	ec57 6b10 	vmov	r6, r7, d0
 8105df4:	f103 0204 	add.w	r2, r3, #4
 8105df8:	d01f      	beq.n	8105e3a <_scanf_float+0x3e6>
 8105dfa:	9903      	ldr	r1, [sp, #12]
 8105dfc:	600a      	str	r2, [r1, #0]
 8105dfe:	681b      	ldr	r3, [r3, #0]
 8105e00:	e9c3 6700 	strd	r6, r7, [r3]
 8105e04:	68e3      	ldr	r3, [r4, #12]
 8105e06:	3301      	adds	r3, #1
 8105e08:	60e3      	str	r3, [r4, #12]
 8105e0a:	e7d9      	b.n	8105dc0 <_scanf_float+0x36c>
 8105e0c:	9b04      	ldr	r3, [sp, #16]
 8105e0e:	2b00      	cmp	r3, #0
 8105e10:	d0e4      	beq.n	8105ddc <_scanf_float+0x388>
 8105e12:	9905      	ldr	r1, [sp, #20]
 8105e14:	230a      	movs	r3, #10
 8105e16:	3101      	adds	r1, #1
 8105e18:	4640      	mov	r0, r8
 8105e1a:	f000 ff75 	bl	8106d08 <_strtol_r>
 8105e1e:	9b04      	ldr	r3, [sp, #16]
 8105e20:	9e05      	ldr	r6, [sp, #20]
 8105e22:	1ac2      	subs	r2, r0, r3
 8105e24:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8105e28:	429e      	cmp	r6, r3
 8105e2a:	bf28      	it	cs
 8105e2c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8105e30:	4910      	ldr	r1, [pc, #64]	@ (8105e74 <_scanf_float+0x420>)
 8105e32:	4630      	mov	r0, r6
 8105e34:	f000 f822 	bl	8105e7c <siprintf>
 8105e38:	e7d0      	b.n	8105ddc <_scanf_float+0x388>
 8105e3a:	f011 0f04 	tst.w	r1, #4
 8105e3e:	9903      	ldr	r1, [sp, #12]
 8105e40:	600a      	str	r2, [r1, #0]
 8105e42:	d1dc      	bne.n	8105dfe <_scanf_float+0x3aa>
 8105e44:	681d      	ldr	r5, [r3, #0]
 8105e46:	4632      	mov	r2, r6
 8105e48:	463b      	mov	r3, r7
 8105e4a:	4630      	mov	r0, r6
 8105e4c:	4639      	mov	r1, r7
 8105e4e:	f7fa fef5 	bl	8100c3c <__aeabi_dcmpun>
 8105e52:	b128      	cbz	r0, 8105e60 <_scanf_float+0x40c>
 8105e54:	4808      	ldr	r0, [pc, #32]	@ (8105e78 <_scanf_float+0x424>)
 8105e56:	f000 ffdb 	bl	8106e10 <nanf>
 8105e5a:	ed85 0a00 	vstr	s0, [r5]
 8105e5e:	e7d1      	b.n	8105e04 <_scanf_float+0x3b0>
 8105e60:	4630      	mov	r0, r6
 8105e62:	4639      	mov	r1, r7
 8105e64:	f7fa ff48 	bl	8100cf8 <__aeabi_d2f>
 8105e68:	6028      	str	r0, [r5, #0]
 8105e6a:	e7cb      	b.n	8105e04 <_scanf_float+0x3b0>
 8105e6c:	f04f 0900 	mov.w	r9, #0
 8105e70:	e629      	b.n	8105ac6 <_scanf_float+0x72>
 8105e72:	bf00      	nop
 8105e74:	0810a650 	.word	0x0810a650
 8105e78:	0810aa43 	.word	0x0810aa43

08105e7c <siprintf>:
 8105e7c:	b40e      	push	{r1, r2, r3}
 8105e7e:	b500      	push	{lr}
 8105e80:	b09c      	sub	sp, #112	@ 0x70
 8105e82:	ab1d      	add	r3, sp, #116	@ 0x74
 8105e84:	9002      	str	r0, [sp, #8]
 8105e86:	9006      	str	r0, [sp, #24]
 8105e88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8105e8c:	4809      	ldr	r0, [pc, #36]	@ (8105eb4 <siprintf+0x38>)
 8105e8e:	9107      	str	r1, [sp, #28]
 8105e90:	9104      	str	r1, [sp, #16]
 8105e92:	4909      	ldr	r1, [pc, #36]	@ (8105eb8 <siprintf+0x3c>)
 8105e94:	f853 2b04 	ldr.w	r2, [r3], #4
 8105e98:	9105      	str	r1, [sp, #20]
 8105e9a:	6800      	ldr	r0, [r0, #0]
 8105e9c:	9301      	str	r3, [sp, #4]
 8105e9e:	a902      	add	r1, sp, #8
 8105ea0:	f002 f99e 	bl	81081e0 <_svfiprintf_r>
 8105ea4:	9b02      	ldr	r3, [sp, #8]
 8105ea6:	2200      	movs	r2, #0
 8105ea8:	701a      	strb	r2, [r3, #0]
 8105eaa:	b01c      	add	sp, #112	@ 0x70
 8105eac:	f85d eb04 	ldr.w	lr, [sp], #4
 8105eb0:	b003      	add	sp, #12
 8105eb2:	4770      	bx	lr
 8105eb4:	10000198 	.word	0x10000198
 8105eb8:	ffff0208 	.word	0xffff0208

08105ebc <std>:
 8105ebc:	2300      	movs	r3, #0
 8105ebe:	b510      	push	{r4, lr}
 8105ec0:	4604      	mov	r4, r0
 8105ec2:	e9c0 3300 	strd	r3, r3, [r0]
 8105ec6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8105eca:	6083      	str	r3, [r0, #8]
 8105ecc:	8181      	strh	r1, [r0, #12]
 8105ece:	6643      	str	r3, [r0, #100]	@ 0x64
 8105ed0:	81c2      	strh	r2, [r0, #14]
 8105ed2:	6183      	str	r3, [r0, #24]
 8105ed4:	4619      	mov	r1, r3
 8105ed6:	2208      	movs	r2, #8
 8105ed8:	305c      	adds	r0, #92	@ 0x5c
 8105eda:	f000 ff47 	bl	8106d6c <memset>
 8105ede:	4b0d      	ldr	r3, [pc, #52]	@ (8105f14 <std+0x58>)
 8105ee0:	6263      	str	r3, [r4, #36]	@ 0x24
 8105ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8105f18 <std+0x5c>)
 8105ee4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8105ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8105f1c <std+0x60>)
 8105ee8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8105eea:	4b0d      	ldr	r3, [pc, #52]	@ (8105f20 <std+0x64>)
 8105eec:	6323      	str	r3, [r4, #48]	@ 0x30
 8105eee:	4b0d      	ldr	r3, [pc, #52]	@ (8105f24 <std+0x68>)
 8105ef0:	6224      	str	r4, [r4, #32]
 8105ef2:	429c      	cmp	r4, r3
 8105ef4:	d006      	beq.n	8105f04 <std+0x48>
 8105ef6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8105efa:	4294      	cmp	r4, r2
 8105efc:	d002      	beq.n	8105f04 <std+0x48>
 8105efe:	33d0      	adds	r3, #208	@ 0xd0
 8105f00:	429c      	cmp	r4, r3
 8105f02:	d105      	bne.n	8105f10 <std+0x54>
 8105f04:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8105f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8105f0c:	f000 bf64 	b.w	8106dd8 <__retarget_lock_init_recursive>
 8105f10:	bd10      	pop	{r4, pc}
 8105f12:	bf00      	nop
 8105f14:	08109025 	.word	0x08109025
 8105f18:	08109047 	.word	0x08109047
 8105f1c:	0810907f 	.word	0x0810907f
 8105f20:	081090a3 	.word	0x081090a3
 8105f24:	100007b4 	.word	0x100007b4

08105f28 <stdio_exit_handler>:
 8105f28:	4a02      	ldr	r2, [pc, #8]	@ (8105f34 <stdio_exit_handler+0xc>)
 8105f2a:	4903      	ldr	r1, [pc, #12]	@ (8105f38 <stdio_exit_handler+0x10>)
 8105f2c:	4803      	ldr	r0, [pc, #12]	@ (8105f3c <stdio_exit_handler+0x14>)
 8105f2e:	f000 beed 	b.w	8106d0c <_fwalk_sglue>
 8105f32:	bf00      	nop
 8105f34:	10000020 	.word	0x10000020
 8105f38:	08108659 	.word	0x08108659
 8105f3c:	1000019c 	.word	0x1000019c

08105f40 <cleanup_stdio>:
 8105f40:	6841      	ldr	r1, [r0, #4]
 8105f42:	4b0c      	ldr	r3, [pc, #48]	@ (8105f74 <cleanup_stdio+0x34>)
 8105f44:	4299      	cmp	r1, r3
 8105f46:	b510      	push	{r4, lr}
 8105f48:	4604      	mov	r4, r0
 8105f4a:	d001      	beq.n	8105f50 <cleanup_stdio+0x10>
 8105f4c:	f002 fb84 	bl	8108658 <_fflush_r>
 8105f50:	68a1      	ldr	r1, [r4, #8]
 8105f52:	4b09      	ldr	r3, [pc, #36]	@ (8105f78 <cleanup_stdio+0x38>)
 8105f54:	4299      	cmp	r1, r3
 8105f56:	d002      	beq.n	8105f5e <cleanup_stdio+0x1e>
 8105f58:	4620      	mov	r0, r4
 8105f5a:	f002 fb7d 	bl	8108658 <_fflush_r>
 8105f5e:	68e1      	ldr	r1, [r4, #12]
 8105f60:	4b06      	ldr	r3, [pc, #24]	@ (8105f7c <cleanup_stdio+0x3c>)
 8105f62:	4299      	cmp	r1, r3
 8105f64:	d004      	beq.n	8105f70 <cleanup_stdio+0x30>
 8105f66:	4620      	mov	r0, r4
 8105f68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8105f6c:	f002 bb74 	b.w	8108658 <_fflush_r>
 8105f70:	bd10      	pop	{r4, pc}
 8105f72:	bf00      	nop
 8105f74:	100007b4 	.word	0x100007b4
 8105f78:	1000081c 	.word	0x1000081c
 8105f7c:	10000884 	.word	0x10000884

08105f80 <global_stdio_init.part.0>:
 8105f80:	b510      	push	{r4, lr}
 8105f82:	4b0b      	ldr	r3, [pc, #44]	@ (8105fb0 <global_stdio_init.part.0+0x30>)
 8105f84:	4c0b      	ldr	r4, [pc, #44]	@ (8105fb4 <global_stdio_init.part.0+0x34>)
 8105f86:	4a0c      	ldr	r2, [pc, #48]	@ (8105fb8 <global_stdio_init.part.0+0x38>)
 8105f88:	601a      	str	r2, [r3, #0]
 8105f8a:	4620      	mov	r0, r4
 8105f8c:	2200      	movs	r2, #0
 8105f8e:	2104      	movs	r1, #4
 8105f90:	f7ff ff94 	bl	8105ebc <std>
 8105f94:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8105f98:	2201      	movs	r2, #1
 8105f9a:	2109      	movs	r1, #9
 8105f9c:	f7ff ff8e 	bl	8105ebc <std>
 8105fa0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8105fa4:	2202      	movs	r2, #2
 8105fa6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8105faa:	2112      	movs	r1, #18
 8105fac:	f7ff bf86 	b.w	8105ebc <std>
 8105fb0:	100008ec 	.word	0x100008ec
 8105fb4:	100007b4 	.word	0x100007b4
 8105fb8:	08105f29 	.word	0x08105f29

08105fbc <__sfp_lock_acquire>:
 8105fbc:	4801      	ldr	r0, [pc, #4]	@ (8105fc4 <__sfp_lock_acquire+0x8>)
 8105fbe:	f000 bf0c 	b.w	8106dda <__retarget_lock_acquire_recursive>
 8105fc2:	bf00      	nop
 8105fc4:	100008f1 	.word	0x100008f1

08105fc8 <__sfp_lock_release>:
 8105fc8:	4801      	ldr	r0, [pc, #4]	@ (8105fd0 <__sfp_lock_release+0x8>)
 8105fca:	f000 bf07 	b.w	8106ddc <__retarget_lock_release_recursive>
 8105fce:	bf00      	nop
 8105fd0:	100008f1 	.word	0x100008f1

08105fd4 <__sinit>:
 8105fd4:	b510      	push	{r4, lr}
 8105fd6:	4604      	mov	r4, r0
 8105fd8:	f7ff fff0 	bl	8105fbc <__sfp_lock_acquire>
 8105fdc:	6a23      	ldr	r3, [r4, #32]
 8105fde:	b11b      	cbz	r3, 8105fe8 <__sinit+0x14>
 8105fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8105fe4:	f7ff bff0 	b.w	8105fc8 <__sfp_lock_release>
 8105fe8:	4b04      	ldr	r3, [pc, #16]	@ (8105ffc <__sinit+0x28>)
 8105fea:	6223      	str	r3, [r4, #32]
 8105fec:	4b04      	ldr	r3, [pc, #16]	@ (8106000 <__sinit+0x2c>)
 8105fee:	681b      	ldr	r3, [r3, #0]
 8105ff0:	2b00      	cmp	r3, #0
 8105ff2:	d1f5      	bne.n	8105fe0 <__sinit+0xc>
 8105ff4:	f7ff ffc4 	bl	8105f80 <global_stdio_init.part.0>
 8105ff8:	e7f2      	b.n	8105fe0 <__sinit+0xc>
 8105ffa:	bf00      	nop
 8105ffc:	08105f41 	.word	0x08105f41
 8106000:	100008ec 	.word	0x100008ec

08106004 <sulp>:
 8106004:	b570      	push	{r4, r5, r6, lr}
 8106006:	4604      	mov	r4, r0
 8106008:	460d      	mov	r5, r1
 810600a:	ec45 4b10 	vmov	d0, r4, r5
 810600e:	4616      	mov	r6, r2
 8106010:	f002 feca 	bl	8108da8 <__ulp>
 8106014:	ec51 0b10 	vmov	r0, r1, d0
 8106018:	b17e      	cbz	r6, 810603a <sulp+0x36>
 810601a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 810601e:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8106022:	2b00      	cmp	r3, #0
 8106024:	dd09      	ble.n	810603a <sulp+0x36>
 8106026:	051b      	lsls	r3, r3, #20
 8106028:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 810602c:	2400      	movs	r4, #0
 810602e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8106032:	4622      	mov	r2, r4
 8106034:	462b      	mov	r3, r5
 8106036:	f7fa fb67 	bl	8100708 <__aeabi_dmul>
 810603a:	ec41 0b10 	vmov	d0, r0, r1
 810603e:	bd70      	pop	{r4, r5, r6, pc}

08106040 <_strtod_l>:
 8106040:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106044:	b09f      	sub	sp, #124	@ 0x7c
 8106046:	460c      	mov	r4, r1
 8106048:	9217      	str	r2, [sp, #92]	@ 0x5c
 810604a:	2200      	movs	r2, #0
 810604c:	921a      	str	r2, [sp, #104]	@ 0x68
 810604e:	9005      	str	r0, [sp, #20]
 8106050:	f04f 0a00 	mov.w	sl, #0
 8106054:	f04f 0b00 	mov.w	fp, #0
 8106058:	460a      	mov	r2, r1
 810605a:	9219      	str	r2, [sp, #100]	@ 0x64
 810605c:	7811      	ldrb	r1, [r2, #0]
 810605e:	292b      	cmp	r1, #43	@ 0x2b
 8106060:	d04a      	beq.n	81060f8 <_strtod_l+0xb8>
 8106062:	d838      	bhi.n	81060d6 <_strtod_l+0x96>
 8106064:	290d      	cmp	r1, #13
 8106066:	d832      	bhi.n	81060ce <_strtod_l+0x8e>
 8106068:	2908      	cmp	r1, #8
 810606a:	d832      	bhi.n	81060d2 <_strtod_l+0x92>
 810606c:	2900      	cmp	r1, #0
 810606e:	d03b      	beq.n	81060e8 <_strtod_l+0xa8>
 8106070:	2200      	movs	r2, #0
 8106072:	920b      	str	r2, [sp, #44]	@ 0x2c
 8106074:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8106076:	782a      	ldrb	r2, [r5, #0]
 8106078:	2a30      	cmp	r2, #48	@ 0x30
 810607a:	f040 80b3 	bne.w	81061e4 <_strtod_l+0x1a4>
 810607e:	786a      	ldrb	r2, [r5, #1]
 8106080:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8106084:	2a58      	cmp	r2, #88	@ 0x58
 8106086:	d16e      	bne.n	8106166 <_strtod_l+0x126>
 8106088:	9302      	str	r3, [sp, #8]
 810608a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 810608c:	9301      	str	r3, [sp, #4]
 810608e:	ab1a      	add	r3, sp, #104	@ 0x68
 8106090:	9300      	str	r3, [sp, #0]
 8106092:	4a8e      	ldr	r2, [pc, #568]	@ (81062cc <_strtod_l+0x28c>)
 8106094:	9805      	ldr	r0, [sp, #20]
 8106096:	ab1b      	add	r3, sp, #108	@ 0x6c
 8106098:	a919      	add	r1, sp, #100	@ 0x64
 810609a:	f001 fd75 	bl	8107b88 <__gethex>
 810609e:	f010 060f 	ands.w	r6, r0, #15
 81060a2:	4604      	mov	r4, r0
 81060a4:	d005      	beq.n	81060b2 <_strtod_l+0x72>
 81060a6:	2e06      	cmp	r6, #6
 81060a8:	d128      	bne.n	81060fc <_strtod_l+0xbc>
 81060aa:	3501      	adds	r5, #1
 81060ac:	2300      	movs	r3, #0
 81060ae:	9519      	str	r5, [sp, #100]	@ 0x64
 81060b0:	930b      	str	r3, [sp, #44]	@ 0x2c
 81060b2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 81060b4:	2b00      	cmp	r3, #0
 81060b6:	f040 858e 	bne.w	8106bd6 <_strtod_l+0xb96>
 81060ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81060bc:	b1cb      	cbz	r3, 81060f2 <_strtod_l+0xb2>
 81060be:	4652      	mov	r2, sl
 81060c0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 81060c4:	ec43 2b10 	vmov	d0, r2, r3
 81060c8:	b01f      	add	sp, #124	@ 0x7c
 81060ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81060ce:	2920      	cmp	r1, #32
 81060d0:	d1ce      	bne.n	8106070 <_strtod_l+0x30>
 81060d2:	3201      	adds	r2, #1
 81060d4:	e7c1      	b.n	810605a <_strtod_l+0x1a>
 81060d6:	292d      	cmp	r1, #45	@ 0x2d
 81060d8:	d1ca      	bne.n	8106070 <_strtod_l+0x30>
 81060da:	2101      	movs	r1, #1
 81060dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 81060de:	1c51      	adds	r1, r2, #1
 81060e0:	9119      	str	r1, [sp, #100]	@ 0x64
 81060e2:	7852      	ldrb	r2, [r2, #1]
 81060e4:	2a00      	cmp	r2, #0
 81060e6:	d1c5      	bne.n	8106074 <_strtod_l+0x34>
 81060e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 81060ea:	9419      	str	r4, [sp, #100]	@ 0x64
 81060ec:	2b00      	cmp	r3, #0
 81060ee:	f040 8570 	bne.w	8106bd2 <_strtod_l+0xb92>
 81060f2:	4652      	mov	r2, sl
 81060f4:	465b      	mov	r3, fp
 81060f6:	e7e5      	b.n	81060c4 <_strtod_l+0x84>
 81060f8:	2100      	movs	r1, #0
 81060fa:	e7ef      	b.n	81060dc <_strtod_l+0x9c>
 81060fc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 81060fe:	b13a      	cbz	r2, 8106110 <_strtod_l+0xd0>
 8106100:	2135      	movs	r1, #53	@ 0x35
 8106102:	a81c      	add	r0, sp, #112	@ 0x70
 8106104:	f002 ff4a 	bl	8108f9c <__copybits>
 8106108:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810610a:	9805      	ldr	r0, [sp, #20]
 810610c:	f002 fb18 	bl	8108740 <_Bfree>
 8106110:	3e01      	subs	r6, #1
 8106112:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8106114:	2e04      	cmp	r6, #4
 8106116:	d806      	bhi.n	8106126 <_strtod_l+0xe6>
 8106118:	e8df f006 	tbb	[pc, r6]
 810611c:	201d0314 	.word	0x201d0314
 8106120:	14          	.byte	0x14
 8106121:	00          	.byte	0x00
 8106122:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8106126:	05e1      	lsls	r1, r4, #23
 8106128:	bf48      	it	mi
 810612a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 810612e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8106132:	0d1b      	lsrs	r3, r3, #20
 8106134:	051b      	lsls	r3, r3, #20
 8106136:	2b00      	cmp	r3, #0
 8106138:	d1bb      	bne.n	81060b2 <_strtod_l+0x72>
 810613a:	f000 fe23 	bl	8106d84 <__errno>
 810613e:	2322      	movs	r3, #34	@ 0x22
 8106140:	6003      	str	r3, [r0, #0]
 8106142:	e7b6      	b.n	81060b2 <_strtod_l+0x72>
 8106144:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8106148:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 810614c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8106150:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8106154:	e7e7      	b.n	8106126 <_strtod_l+0xe6>
 8106156:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 81062d4 <_strtod_l+0x294>
 810615a:	e7e4      	b.n	8106126 <_strtod_l+0xe6>
 810615c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8106160:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8106164:	e7df      	b.n	8106126 <_strtod_l+0xe6>
 8106166:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8106168:	1c5a      	adds	r2, r3, #1
 810616a:	9219      	str	r2, [sp, #100]	@ 0x64
 810616c:	785b      	ldrb	r3, [r3, #1]
 810616e:	2b30      	cmp	r3, #48	@ 0x30
 8106170:	d0f9      	beq.n	8106166 <_strtod_l+0x126>
 8106172:	2b00      	cmp	r3, #0
 8106174:	d09d      	beq.n	81060b2 <_strtod_l+0x72>
 8106176:	2301      	movs	r3, #1
 8106178:	9309      	str	r3, [sp, #36]	@ 0x24
 810617a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810617c:	930c      	str	r3, [sp, #48]	@ 0x30
 810617e:	2300      	movs	r3, #0
 8106180:	9308      	str	r3, [sp, #32]
 8106182:	930a      	str	r3, [sp, #40]	@ 0x28
 8106184:	461f      	mov	r7, r3
 8106186:	220a      	movs	r2, #10
 8106188:	9819      	ldr	r0, [sp, #100]	@ 0x64
 810618a:	7805      	ldrb	r5, [r0, #0]
 810618c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8106190:	b2d9      	uxtb	r1, r3
 8106192:	2909      	cmp	r1, #9
 8106194:	d928      	bls.n	81061e8 <_strtod_l+0x1a8>
 8106196:	494e      	ldr	r1, [pc, #312]	@ (81062d0 <_strtod_l+0x290>)
 8106198:	2201      	movs	r2, #1
 810619a:	f000 fdd5 	bl	8106d48 <strncmp>
 810619e:	2800      	cmp	r0, #0
 81061a0:	d032      	beq.n	8106208 <_strtod_l+0x1c8>
 81061a2:	2000      	movs	r0, #0
 81061a4:	462a      	mov	r2, r5
 81061a6:	4681      	mov	r9, r0
 81061a8:	463d      	mov	r5, r7
 81061aa:	4603      	mov	r3, r0
 81061ac:	2a65      	cmp	r2, #101	@ 0x65
 81061ae:	d001      	beq.n	81061b4 <_strtod_l+0x174>
 81061b0:	2a45      	cmp	r2, #69	@ 0x45
 81061b2:	d114      	bne.n	81061de <_strtod_l+0x19e>
 81061b4:	b91d      	cbnz	r5, 81061be <_strtod_l+0x17e>
 81061b6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81061b8:	4302      	orrs	r2, r0
 81061ba:	d095      	beq.n	81060e8 <_strtod_l+0xa8>
 81061bc:	2500      	movs	r5, #0
 81061be:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 81061c0:	1c62      	adds	r2, r4, #1
 81061c2:	9219      	str	r2, [sp, #100]	@ 0x64
 81061c4:	7862      	ldrb	r2, [r4, #1]
 81061c6:	2a2b      	cmp	r2, #43	@ 0x2b
 81061c8:	d077      	beq.n	81062ba <_strtod_l+0x27a>
 81061ca:	2a2d      	cmp	r2, #45	@ 0x2d
 81061cc:	d07b      	beq.n	81062c6 <_strtod_l+0x286>
 81061ce:	f04f 0c00 	mov.w	ip, #0
 81061d2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 81061d6:	2909      	cmp	r1, #9
 81061d8:	f240 8082 	bls.w	81062e0 <_strtod_l+0x2a0>
 81061dc:	9419      	str	r4, [sp, #100]	@ 0x64
 81061de:	f04f 0800 	mov.w	r8, #0
 81061e2:	e0a2      	b.n	810632a <_strtod_l+0x2ea>
 81061e4:	2300      	movs	r3, #0
 81061e6:	e7c7      	b.n	8106178 <_strtod_l+0x138>
 81061e8:	2f08      	cmp	r7, #8
 81061ea:	bfd5      	itete	le
 81061ec:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 81061ee:	9908      	ldrgt	r1, [sp, #32]
 81061f0:	fb02 3301 	mlale	r3, r2, r1, r3
 81061f4:	fb02 3301 	mlagt	r3, r2, r1, r3
 81061f8:	f100 0001 	add.w	r0, r0, #1
 81061fc:	bfd4      	ite	le
 81061fe:	930a      	strle	r3, [sp, #40]	@ 0x28
 8106200:	9308      	strgt	r3, [sp, #32]
 8106202:	3701      	adds	r7, #1
 8106204:	9019      	str	r0, [sp, #100]	@ 0x64
 8106206:	e7bf      	b.n	8106188 <_strtod_l+0x148>
 8106208:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810620a:	1c5a      	adds	r2, r3, #1
 810620c:	9219      	str	r2, [sp, #100]	@ 0x64
 810620e:	785a      	ldrb	r2, [r3, #1]
 8106210:	b37f      	cbz	r7, 8106272 <_strtod_l+0x232>
 8106212:	4681      	mov	r9, r0
 8106214:	463d      	mov	r5, r7
 8106216:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 810621a:	2b09      	cmp	r3, #9
 810621c:	d912      	bls.n	8106244 <_strtod_l+0x204>
 810621e:	2301      	movs	r3, #1
 8106220:	e7c4      	b.n	81061ac <_strtod_l+0x16c>
 8106222:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8106224:	1c5a      	adds	r2, r3, #1
 8106226:	9219      	str	r2, [sp, #100]	@ 0x64
 8106228:	785a      	ldrb	r2, [r3, #1]
 810622a:	3001      	adds	r0, #1
 810622c:	2a30      	cmp	r2, #48	@ 0x30
 810622e:	d0f8      	beq.n	8106222 <_strtod_l+0x1e2>
 8106230:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8106234:	2b08      	cmp	r3, #8
 8106236:	f200 84d3 	bhi.w	8106be0 <_strtod_l+0xba0>
 810623a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810623c:	930c      	str	r3, [sp, #48]	@ 0x30
 810623e:	4681      	mov	r9, r0
 8106240:	2000      	movs	r0, #0
 8106242:	4605      	mov	r5, r0
 8106244:	3a30      	subs	r2, #48	@ 0x30
 8106246:	f100 0301 	add.w	r3, r0, #1
 810624a:	d02a      	beq.n	81062a2 <_strtod_l+0x262>
 810624c:	4499      	add	r9, r3
 810624e:	eb00 0c05 	add.w	ip, r0, r5
 8106252:	462b      	mov	r3, r5
 8106254:	210a      	movs	r1, #10
 8106256:	4563      	cmp	r3, ip
 8106258:	d10d      	bne.n	8106276 <_strtod_l+0x236>
 810625a:	1c69      	adds	r1, r5, #1
 810625c:	4401      	add	r1, r0
 810625e:	4428      	add	r0, r5
 8106260:	2808      	cmp	r0, #8
 8106262:	dc16      	bgt.n	8106292 <_strtod_l+0x252>
 8106264:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8106266:	230a      	movs	r3, #10
 8106268:	fb03 2300 	mla	r3, r3, r0, r2
 810626c:	930a      	str	r3, [sp, #40]	@ 0x28
 810626e:	2300      	movs	r3, #0
 8106270:	e018      	b.n	81062a4 <_strtod_l+0x264>
 8106272:	4638      	mov	r0, r7
 8106274:	e7da      	b.n	810622c <_strtod_l+0x1ec>
 8106276:	2b08      	cmp	r3, #8
 8106278:	f103 0301 	add.w	r3, r3, #1
 810627c:	dc03      	bgt.n	8106286 <_strtod_l+0x246>
 810627e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8106280:	434e      	muls	r6, r1
 8106282:	960a      	str	r6, [sp, #40]	@ 0x28
 8106284:	e7e7      	b.n	8106256 <_strtod_l+0x216>
 8106286:	2b10      	cmp	r3, #16
 8106288:	bfde      	ittt	le
 810628a:	9e08      	ldrle	r6, [sp, #32]
 810628c:	434e      	mulle	r6, r1
 810628e:	9608      	strle	r6, [sp, #32]
 8106290:	e7e1      	b.n	8106256 <_strtod_l+0x216>
 8106292:	280f      	cmp	r0, #15
 8106294:	dceb      	bgt.n	810626e <_strtod_l+0x22e>
 8106296:	9808      	ldr	r0, [sp, #32]
 8106298:	230a      	movs	r3, #10
 810629a:	fb03 2300 	mla	r3, r3, r0, r2
 810629e:	9308      	str	r3, [sp, #32]
 81062a0:	e7e5      	b.n	810626e <_strtod_l+0x22e>
 81062a2:	4629      	mov	r1, r5
 81062a4:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 81062a6:	1c50      	adds	r0, r2, #1
 81062a8:	9019      	str	r0, [sp, #100]	@ 0x64
 81062aa:	7852      	ldrb	r2, [r2, #1]
 81062ac:	4618      	mov	r0, r3
 81062ae:	460d      	mov	r5, r1
 81062b0:	e7b1      	b.n	8106216 <_strtod_l+0x1d6>
 81062b2:	f04f 0900 	mov.w	r9, #0
 81062b6:	2301      	movs	r3, #1
 81062b8:	e77d      	b.n	81061b6 <_strtod_l+0x176>
 81062ba:	f04f 0c00 	mov.w	ip, #0
 81062be:	1ca2      	adds	r2, r4, #2
 81062c0:	9219      	str	r2, [sp, #100]	@ 0x64
 81062c2:	78a2      	ldrb	r2, [r4, #2]
 81062c4:	e785      	b.n	81061d2 <_strtod_l+0x192>
 81062c6:	f04f 0c01 	mov.w	ip, #1
 81062ca:	e7f8      	b.n	81062be <_strtod_l+0x27e>
 81062cc:	0810a66c 	.word	0x0810a66c
 81062d0:	0810a655 	.word	0x0810a655
 81062d4:	7ff00000 	.word	0x7ff00000
 81062d8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 81062da:	1c51      	adds	r1, r2, #1
 81062dc:	9119      	str	r1, [sp, #100]	@ 0x64
 81062de:	7852      	ldrb	r2, [r2, #1]
 81062e0:	2a30      	cmp	r2, #48	@ 0x30
 81062e2:	d0f9      	beq.n	81062d8 <_strtod_l+0x298>
 81062e4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 81062e8:	2908      	cmp	r1, #8
 81062ea:	f63f af78 	bhi.w	81061de <_strtod_l+0x19e>
 81062ee:	3a30      	subs	r2, #48	@ 0x30
 81062f0:	920e      	str	r2, [sp, #56]	@ 0x38
 81062f2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 81062f4:	920f      	str	r2, [sp, #60]	@ 0x3c
 81062f6:	f04f 080a 	mov.w	r8, #10
 81062fa:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 81062fc:	1c56      	adds	r6, r2, #1
 81062fe:	9619      	str	r6, [sp, #100]	@ 0x64
 8106300:	7852      	ldrb	r2, [r2, #1]
 8106302:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8106306:	f1be 0f09 	cmp.w	lr, #9
 810630a:	d939      	bls.n	8106380 <_strtod_l+0x340>
 810630c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 810630e:	1a76      	subs	r6, r6, r1
 8106310:	2e08      	cmp	r6, #8
 8106312:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8106316:	dc03      	bgt.n	8106320 <_strtod_l+0x2e0>
 8106318:	990e      	ldr	r1, [sp, #56]	@ 0x38
 810631a:	4588      	cmp	r8, r1
 810631c:	bfa8      	it	ge
 810631e:	4688      	movge	r8, r1
 8106320:	f1bc 0f00 	cmp.w	ip, #0
 8106324:	d001      	beq.n	810632a <_strtod_l+0x2ea>
 8106326:	f1c8 0800 	rsb	r8, r8, #0
 810632a:	2d00      	cmp	r5, #0
 810632c:	d14e      	bne.n	81063cc <_strtod_l+0x38c>
 810632e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8106330:	4308      	orrs	r0, r1
 8106332:	f47f aebe 	bne.w	81060b2 <_strtod_l+0x72>
 8106336:	2b00      	cmp	r3, #0
 8106338:	f47f aed6 	bne.w	81060e8 <_strtod_l+0xa8>
 810633c:	2a69      	cmp	r2, #105	@ 0x69
 810633e:	d028      	beq.n	8106392 <_strtod_l+0x352>
 8106340:	dc25      	bgt.n	810638e <_strtod_l+0x34e>
 8106342:	2a49      	cmp	r2, #73	@ 0x49
 8106344:	d025      	beq.n	8106392 <_strtod_l+0x352>
 8106346:	2a4e      	cmp	r2, #78	@ 0x4e
 8106348:	f47f aece 	bne.w	81060e8 <_strtod_l+0xa8>
 810634c:	499b      	ldr	r1, [pc, #620]	@ (81065bc <_strtod_l+0x57c>)
 810634e:	a819      	add	r0, sp, #100	@ 0x64
 8106350:	f001 fe3c 	bl	8107fcc <__match>
 8106354:	2800      	cmp	r0, #0
 8106356:	f43f aec7 	beq.w	81060e8 <_strtod_l+0xa8>
 810635a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 810635c:	781b      	ldrb	r3, [r3, #0]
 810635e:	2b28      	cmp	r3, #40	@ 0x28
 8106360:	d12e      	bne.n	81063c0 <_strtod_l+0x380>
 8106362:	4997      	ldr	r1, [pc, #604]	@ (81065c0 <_strtod_l+0x580>)
 8106364:	aa1c      	add	r2, sp, #112	@ 0x70
 8106366:	a819      	add	r0, sp, #100	@ 0x64
 8106368:	f001 fe44 	bl	8107ff4 <__hexnan>
 810636c:	2805      	cmp	r0, #5
 810636e:	d127      	bne.n	81063c0 <_strtod_l+0x380>
 8106370:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8106372:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8106376:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 810637a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 810637e:	e698      	b.n	81060b2 <_strtod_l+0x72>
 8106380:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8106382:	fb08 2101 	mla	r1, r8, r1, r2
 8106386:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 810638a:	920e      	str	r2, [sp, #56]	@ 0x38
 810638c:	e7b5      	b.n	81062fa <_strtod_l+0x2ba>
 810638e:	2a6e      	cmp	r2, #110	@ 0x6e
 8106390:	e7da      	b.n	8106348 <_strtod_l+0x308>
 8106392:	498c      	ldr	r1, [pc, #560]	@ (81065c4 <_strtod_l+0x584>)
 8106394:	a819      	add	r0, sp, #100	@ 0x64
 8106396:	f001 fe19 	bl	8107fcc <__match>
 810639a:	2800      	cmp	r0, #0
 810639c:	f43f aea4 	beq.w	81060e8 <_strtod_l+0xa8>
 81063a0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81063a2:	4989      	ldr	r1, [pc, #548]	@ (81065c8 <_strtod_l+0x588>)
 81063a4:	3b01      	subs	r3, #1
 81063a6:	a819      	add	r0, sp, #100	@ 0x64
 81063a8:	9319      	str	r3, [sp, #100]	@ 0x64
 81063aa:	f001 fe0f 	bl	8107fcc <__match>
 81063ae:	b910      	cbnz	r0, 81063b6 <_strtod_l+0x376>
 81063b0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 81063b2:	3301      	adds	r3, #1
 81063b4:	9319      	str	r3, [sp, #100]	@ 0x64
 81063b6:	f8df b220 	ldr.w	fp, [pc, #544]	@ 81065d8 <_strtod_l+0x598>
 81063ba:	f04f 0a00 	mov.w	sl, #0
 81063be:	e678      	b.n	81060b2 <_strtod_l+0x72>
 81063c0:	4882      	ldr	r0, [pc, #520]	@ (81065cc <_strtod_l+0x58c>)
 81063c2:	f000 fd1d 	bl	8106e00 <nan>
 81063c6:	ec5b ab10 	vmov	sl, fp, d0
 81063ca:	e672      	b.n	81060b2 <_strtod_l+0x72>
 81063cc:	eba8 0309 	sub.w	r3, r8, r9
 81063d0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 81063d2:	9309      	str	r3, [sp, #36]	@ 0x24
 81063d4:	2f00      	cmp	r7, #0
 81063d6:	bf08      	it	eq
 81063d8:	462f      	moveq	r7, r5
 81063da:	2d10      	cmp	r5, #16
 81063dc:	462c      	mov	r4, r5
 81063de:	bfa8      	it	ge
 81063e0:	2410      	movge	r4, #16
 81063e2:	f7fa f917 	bl	8100614 <__aeabi_ui2d>
 81063e6:	2d09      	cmp	r5, #9
 81063e8:	4682      	mov	sl, r0
 81063ea:	468b      	mov	fp, r1
 81063ec:	dc13      	bgt.n	8106416 <_strtod_l+0x3d6>
 81063ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81063f0:	2b00      	cmp	r3, #0
 81063f2:	f43f ae5e 	beq.w	81060b2 <_strtod_l+0x72>
 81063f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81063f8:	dd78      	ble.n	81064ec <_strtod_l+0x4ac>
 81063fa:	2b16      	cmp	r3, #22
 81063fc:	dc5f      	bgt.n	81064be <_strtod_l+0x47e>
 81063fe:	4974      	ldr	r1, [pc, #464]	@ (81065d0 <_strtod_l+0x590>)
 8106400:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8106404:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106408:	4652      	mov	r2, sl
 810640a:	465b      	mov	r3, fp
 810640c:	f7fa f97c 	bl	8100708 <__aeabi_dmul>
 8106410:	4682      	mov	sl, r0
 8106412:	468b      	mov	fp, r1
 8106414:	e64d      	b.n	81060b2 <_strtod_l+0x72>
 8106416:	4b6e      	ldr	r3, [pc, #440]	@ (81065d0 <_strtod_l+0x590>)
 8106418:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 810641c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8106420:	f7fa f972 	bl	8100708 <__aeabi_dmul>
 8106424:	4682      	mov	sl, r0
 8106426:	9808      	ldr	r0, [sp, #32]
 8106428:	468b      	mov	fp, r1
 810642a:	f7fa f8f3 	bl	8100614 <__aeabi_ui2d>
 810642e:	4602      	mov	r2, r0
 8106430:	460b      	mov	r3, r1
 8106432:	4650      	mov	r0, sl
 8106434:	4659      	mov	r1, fp
 8106436:	f7f9 ffb1 	bl	810039c <__adddf3>
 810643a:	2d0f      	cmp	r5, #15
 810643c:	4682      	mov	sl, r0
 810643e:	468b      	mov	fp, r1
 8106440:	ddd5      	ble.n	81063ee <_strtod_l+0x3ae>
 8106442:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8106444:	1b2c      	subs	r4, r5, r4
 8106446:	441c      	add	r4, r3
 8106448:	2c00      	cmp	r4, #0
 810644a:	f340 8096 	ble.w	810657a <_strtod_l+0x53a>
 810644e:	f014 030f 	ands.w	r3, r4, #15
 8106452:	d00a      	beq.n	810646a <_strtod_l+0x42a>
 8106454:	495e      	ldr	r1, [pc, #376]	@ (81065d0 <_strtod_l+0x590>)
 8106456:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 810645a:	4652      	mov	r2, sl
 810645c:	465b      	mov	r3, fp
 810645e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106462:	f7fa f951 	bl	8100708 <__aeabi_dmul>
 8106466:	4682      	mov	sl, r0
 8106468:	468b      	mov	fp, r1
 810646a:	f034 040f 	bics.w	r4, r4, #15
 810646e:	d073      	beq.n	8106558 <_strtod_l+0x518>
 8106470:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8106474:	dd48      	ble.n	8106508 <_strtod_l+0x4c8>
 8106476:	2400      	movs	r4, #0
 8106478:	46a0      	mov	r8, r4
 810647a:	940a      	str	r4, [sp, #40]	@ 0x28
 810647c:	46a1      	mov	r9, r4
 810647e:	9a05      	ldr	r2, [sp, #20]
 8106480:	f8df b154 	ldr.w	fp, [pc, #340]	@ 81065d8 <_strtod_l+0x598>
 8106484:	2322      	movs	r3, #34	@ 0x22
 8106486:	6013      	str	r3, [r2, #0]
 8106488:	f04f 0a00 	mov.w	sl, #0
 810648c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810648e:	2b00      	cmp	r3, #0
 8106490:	f43f ae0f 	beq.w	81060b2 <_strtod_l+0x72>
 8106494:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8106496:	9805      	ldr	r0, [sp, #20]
 8106498:	f002 f952 	bl	8108740 <_Bfree>
 810649c:	9805      	ldr	r0, [sp, #20]
 810649e:	4649      	mov	r1, r9
 81064a0:	f002 f94e 	bl	8108740 <_Bfree>
 81064a4:	9805      	ldr	r0, [sp, #20]
 81064a6:	4641      	mov	r1, r8
 81064a8:	f002 f94a 	bl	8108740 <_Bfree>
 81064ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 81064ae:	9805      	ldr	r0, [sp, #20]
 81064b0:	f002 f946 	bl	8108740 <_Bfree>
 81064b4:	9805      	ldr	r0, [sp, #20]
 81064b6:	4621      	mov	r1, r4
 81064b8:	f002 f942 	bl	8108740 <_Bfree>
 81064bc:	e5f9      	b.n	81060b2 <_strtod_l+0x72>
 81064be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81064c0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 81064c4:	4293      	cmp	r3, r2
 81064c6:	dbbc      	blt.n	8106442 <_strtod_l+0x402>
 81064c8:	4c41      	ldr	r4, [pc, #260]	@ (81065d0 <_strtod_l+0x590>)
 81064ca:	f1c5 050f 	rsb	r5, r5, #15
 81064ce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 81064d2:	4652      	mov	r2, sl
 81064d4:	465b      	mov	r3, fp
 81064d6:	e9d1 0100 	ldrd	r0, r1, [r1]
 81064da:	f7fa f915 	bl	8100708 <__aeabi_dmul>
 81064de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81064e0:	1b5d      	subs	r5, r3, r5
 81064e2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 81064e6:	e9d4 2300 	ldrd	r2, r3, [r4]
 81064ea:	e78f      	b.n	810640c <_strtod_l+0x3cc>
 81064ec:	3316      	adds	r3, #22
 81064ee:	dba8      	blt.n	8106442 <_strtod_l+0x402>
 81064f0:	4b37      	ldr	r3, [pc, #220]	@ (81065d0 <_strtod_l+0x590>)
 81064f2:	eba9 0808 	sub.w	r8, r9, r8
 81064f6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 81064fa:	e9d8 2300 	ldrd	r2, r3, [r8]
 81064fe:	4650      	mov	r0, sl
 8106500:	4659      	mov	r1, fp
 8106502:	f7fa fa2b 	bl	810095c <__aeabi_ddiv>
 8106506:	e783      	b.n	8106410 <_strtod_l+0x3d0>
 8106508:	4b32      	ldr	r3, [pc, #200]	@ (81065d4 <_strtod_l+0x594>)
 810650a:	9308      	str	r3, [sp, #32]
 810650c:	2300      	movs	r3, #0
 810650e:	1124      	asrs	r4, r4, #4
 8106510:	4650      	mov	r0, sl
 8106512:	4659      	mov	r1, fp
 8106514:	461e      	mov	r6, r3
 8106516:	2c01      	cmp	r4, #1
 8106518:	dc21      	bgt.n	810655e <_strtod_l+0x51e>
 810651a:	b10b      	cbz	r3, 8106520 <_strtod_l+0x4e0>
 810651c:	4682      	mov	sl, r0
 810651e:	468b      	mov	fp, r1
 8106520:	492c      	ldr	r1, [pc, #176]	@ (81065d4 <_strtod_l+0x594>)
 8106522:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8106526:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 810652a:	4652      	mov	r2, sl
 810652c:	465b      	mov	r3, fp
 810652e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8106532:	f7fa f8e9 	bl	8100708 <__aeabi_dmul>
 8106536:	4b28      	ldr	r3, [pc, #160]	@ (81065d8 <_strtod_l+0x598>)
 8106538:	460a      	mov	r2, r1
 810653a:	400b      	ands	r3, r1
 810653c:	4927      	ldr	r1, [pc, #156]	@ (81065dc <_strtod_l+0x59c>)
 810653e:	428b      	cmp	r3, r1
 8106540:	4682      	mov	sl, r0
 8106542:	d898      	bhi.n	8106476 <_strtod_l+0x436>
 8106544:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8106548:	428b      	cmp	r3, r1
 810654a:	bf86      	itte	hi
 810654c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 81065e0 <_strtod_l+0x5a0>
 8106550:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8106554:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8106558:	2300      	movs	r3, #0
 810655a:	9308      	str	r3, [sp, #32]
 810655c:	e07a      	b.n	8106654 <_strtod_l+0x614>
 810655e:	07e2      	lsls	r2, r4, #31
 8106560:	d505      	bpl.n	810656e <_strtod_l+0x52e>
 8106562:	9b08      	ldr	r3, [sp, #32]
 8106564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106568:	f7fa f8ce 	bl	8100708 <__aeabi_dmul>
 810656c:	2301      	movs	r3, #1
 810656e:	9a08      	ldr	r2, [sp, #32]
 8106570:	3208      	adds	r2, #8
 8106572:	3601      	adds	r6, #1
 8106574:	1064      	asrs	r4, r4, #1
 8106576:	9208      	str	r2, [sp, #32]
 8106578:	e7cd      	b.n	8106516 <_strtod_l+0x4d6>
 810657a:	d0ed      	beq.n	8106558 <_strtod_l+0x518>
 810657c:	4264      	negs	r4, r4
 810657e:	f014 020f 	ands.w	r2, r4, #15
 8106582:	d00a      	beq.n	810659a <_strtod_l+0x55a>
 8106584:	4b12      	ldr	r3, [pc, #72]	@ (81065d0 <_strtod_l+0x590>)
 8106586:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810658a:	4650      	mov	r0, sl
 810658c:	4659      	mov	r1, fp
 810658e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106592:	f7fa f9e3 	bl	810095c <__aeabi_ddiv>
 8106596:	4682      	mov	sl, r0
 8106598:	468b      	mov	fp, r1
 810659a:	1124      	asrs	r4, r4, #4
 810659c:	d0dc      	beq.n	8106558 <_strtod_l+0x518>
 810659e:	2c1f      	cmp	r4, #31
 81065a0:	dd20      	ble.n	81065e4 <_strtod_l+0x5a4>
 81065a2:	2400      	movs	r4, #0
 81065a4:	46a0      	mov	r8, r4
 81065a6:	940a      	str	r4, [sp, #40]	@ 0x28
 81065a8:	46a1      	mov	r9, r4
 81065aa:	9a05      	ldr	r2, [sp, #20]
 81065ac:	2322      	movs	r3, #34	@ 0x22
 81065ae:	f04f 0a00 	mov.w	sl, #0
 81065b2:	f04f 0b00 	mov.w	fp, #0
 81065b6:	6013      	str	r3, [r2, #0]
 81065b8:	e768      	b.n	810648c <_strtod_l+0x44c>
 81065ba:	bf00      	nop
 81065bc:	0810a629 	.word	0x0810a629
 81065c0:	0810a658 	.word	0x0810a658
 81065c4:	0810a621 	.word	0x0810a621
 81065c8:	0810a7b4 	.word	0x0810a7b4
 81065cc:	0810aa43 	.word	0x0810aa43
 81065d0:	0810a940 	.word	0x0810a940
 81065d4:	0810a918 	.word	0x0810a918
 81065d8:	7ff00000 	.word	0x7ff00000
 81065dc:	7ca00000 	.word	0x7ca00000
 81065e0:	7fefffff 	.word	0x7fefffff
 81065e4:	f014 0310 	ands.w	r3, r4, #16
 81065e8:	bf18      	it	ne
 81065ea:	236a      	movne	r3, #106	@ 0x6a
 81065ec:	4ea9      	ldr	r6, [pc, #676]	@ (8106894 <_strtod_l+0x854>)
 81065ee:	9308      	str	r3, [sp, #32]
 81065f0:	4650      	mov	r0, sl
 81065f2:	4659      	mov	r1, fp
 81065f4:	2300      	movs	r3, #0
 81065f6:	07e2      	lsls	r2, r4, #31
 81065f8:	d504      	bpl.n	8106604 <_strtod_l+0x5c4>
 81065fa:	e9d6 2300 	ldrd	r2, r3, [r6]
 81065fe:	f7fa f883 	bl	8100708 <__aeabi_dmul>
 8106602:	2301      	movs	r3, #1
 8106604:	1064      	asrs	r4, r4, #1
 8106606:	f106 0608 	add.w	r6, r6, #8
 810660a:	d1f4      	bne.n	81065f6 <_strtod_l+0x5b6>
 810660c:	b10b      	cbz	r3, 8106612 <_strtod_l+0x5d2>
 810660e:	4682      	mov	sl, r0
 8106610:	468b      	mov	fp, r1
 8106612:	9b08      	ldr	r3, [sp, #32]
 8106614:	b1b3      	cbz	r3, 8106644 <_strtod_l+0x604>
 8106616:	f3cb 520a 	ubfx	r2, fp, #20, #11
 810661a:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 810661e:	2b00      	cmp	r3, #0
 8106620:	4659      	mov	r1, fp
 8106622:	dd0f      	ble.n	8106644 <_strtod_l+0x604>
 8106624:	2b1f      	cmp	r3, #31
 8106626:	dd55      	ble.n	81066d4 <_strtod_l+0x694>
 8106628:	2b34      	cmp	r3, #52	@ 0x34
 810662a:	bfde      	ittt	le
 810662c:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8106630:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8106634:	4093      	lslle	r3, r2
 8106636:	f04f 0a00 	mov.w	sl, #0
 810663a:	bfcc      	ite	gt
 810663c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8106640:	ea03 0b01 	andle.w	fp, r3, r1
 8106644:	2200      	movs	r2, #0
 8106646:	2300      	movs	r3, #0
 8106648:	4650      	mov	r0, sl
 810664a:	4659      	mov	r1, fp
 810664c:	f7fa fac4 	bl	8100bd8 <__aeabi_dcmpeq>
 8106650:	2800      	cmp	r0, #0
 8106652:	d1a6      	bne.n	81065a2 <_strtod_l+0x562>
 8106654:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8106656:	9300      	str	r3, [sp, #0]
 8106658:	990c      	ldr	r1, [sp, #48]	@ 0x30
 810665a:	9805      	ldr	r0, [sp, #20]
 810665c:	462b      	mov	r3, r5
 810665e:	463a      	mov	r2, r7
 8106660:	f002 f8d6 	bl	8108810 <__s2b>
 8106664:	900a      	str	r0, [sp, #40]	@ 0x28
 8106666:	2800      	cmp	r0, #0
 8106668:	f43f af05 	beq.w	8106476 <_strtod_l+0x436>
 810666c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810666e:	2a00      	cmp	r2, #0
 8106670:	eba9 0308 	sub.w	r3, r9, r8
 8106674:	bfa8      	it	ge
 8106676:	2300      	movge	r3, #0
 8106678:	9312      	str	r3, [sp, #72]	@ 0x48
 810667a:	2400      	movs	r4, #0
 810667c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8106680:	9316      	str	r3, [sp, #88]	@ 0x58
 8106682:	46a0      	mov	r8, r4
 8106684:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8106686:	9805      	ldr	r0, [sp, #20]
 8106688:	6859      	ldr	r1, [r3, #4]
 810668a:	f002 f819 	bl	81086c0 <_Balloc>
 810668e:	4681      	mov	r9, r0
 8106690:	2800      	cmp	r0, #0
 8106692:	f43f aef4 	beq.w	810647e <_strtod_l+0x43e>
 8106696:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8106698:	691a      	ldr	r2, [r3, #16]
 810669a:	3202      	adds	r2, #2
 810669c:	f103 010c 	add.w	r1, r3, #12
 81066a0:	0092      	lsls	r2, r2, #2
 81066a2:	300c      	adds	r0, #12
 81066a4:	f000 fb9b 	bl	8106dde <memcpy>
 81066a8:	ec4b ab10 	vmov	d0, sl, fp
 81066ac:	9805      	ldr	r0, [sp, #20]
 81066ae:	aa1c      	add	r2, sp, #112	@ 0x70
 81066b0:	a91b      	add	r1, sp, #108	@ 0x6c
 81066b2:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 81066b6:	f002 fbe7 	bl	8108e88 <__d2b>
 81066ba:	901a      	str	r0, [sp, #104]	@ 0x68
 81066bc:	2800      	cmp	r0, #0
 81066be:	f43f aede 	beq.w	810647e <_strtod_l+0x43e>
 81066c2:	9805      	ldr	r0, [sp, #20]
 81066c4:	2101      	movs	r1, #1
 81066c6:	f002 f939 	bl	810893c <__i2b>
 81066ca:	4680      	mov	r8, r0
 81066cc:	b948      	cbnz	r0, 81066e2 <_strtod_l+0x6a2>
 81066ce:	f04f 0800 	mov.w	r8, #0
 81066d2:	e6d4      	b.n	810647e <_strtod_l+0x43e>
 81066d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81066d8:	fa02 f303 	lsl.w	r3, r2, r3
 81066dc:	ea03 0a0a 	and.w	sl, r3, sl
 81066e0:	e7b0      	b.n	8106644 <_strtod_l+0x604>
 81066e2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 81066e4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 81066e6:	2d00      	cmp	r5, #0
 81066e8:	bfab      	itete	ge
 81066ea:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 81066ec:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 81066ee:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 81066f0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 81066f2:	bfac      	ite	ge
 81066f4:	18ef      	addge	r7, r5, r3
 81066f6:	1b5e      	sublt	r6, r3, r5
 81066f8:	9b08      	ldr	r3, [sp, #32]
 81066fa:	1aed      	subs	r5, r5, r3
 81066fc:	4415      	add	r5, r2
 81066fe:	4b66      	ldr	r3, [pc, #408]	@ (8106898 <_strtod_l+0x858>)
 8106700:	3d01      	subs	r5, #1
 8106702:	429d      	cmp	r5, r3
 8106704:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8106708:	da50      	bge.n	81067ac <_strtod_l+0x76c>
 810670a:	1b5b      	subs	r3, r3, r5
 810670c:	2b1f      	cmp	r3, #31
 810670e:	eba2 0203 	sub.w	r2, r2, r3
 8106712:	f04f 0101 	mov.w	r1, #1
 8106716:	dc3d      	bgt.n	8106794 <_strtod_l+0x754>
 8106718:	fa01 f303 	lsl.w	r3, r1, r3
 810671c:	9313      	str	r3, [sp, #76]	@ 0x4c
 810671e:	2300      	movs	r3, #0
 8106720:	9310      	str	r3, [sp, #64]	@ 0x40
 8106722:	18bd      	adds	r5, r7, r2
 8106724:	9b08      	ldr	r3, [sp, #32]
 8106726:	42af      	cmp	r7, r5
 8106728:	4416      	add	r6, r2
 810672a:	441e      	add	r6, r3
 810672c:	463b      	mov	r3, r7
 810672e:	bfa8      	it	ge
 8106730:	462b      	movge	r3, r5
 8106732:	42b3      	cmp	r3, r6
 8106734:	bfa8      	it	ge
 8106736:	4633      	movge	r3, r6
 8106738:	2b00      	cmp	r3, #0
 810673a:	bfc2      	ittt	gt
 810673c:	1aed      	subgt	r5, r5, r3
 810673e:	1af6      	subgt	r6, r6, r3
 8106740:	1aff      	subgt	r7, r7, r3
 8106742:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8106744:	2b00      	cmp	r3, #0
 8106746:	dd16      	ble.n	8106776 <_strtod_l+0x736>
 8106748:	4641      	mov	r1, r8
 810674a:	9805      	ldr	r0, [sp, #20]
 810674c:	461a      	mov	r2, r3
 810674e:	f002 f9b5 	bl	8108abc <__pow5mult>
 8106752:	4680      	mov	r8, r0
 8106754:	2800      	cmp	r0, #0
 8106756:	d0ba      	beq.n	81066ce <_strtod_l+0x68e>
 8106758:	4601      	mov	r1, r0
 810675a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 810675c:	9805      	ldr	r0, [sp, #20]
 810675e:	f002 f903 	bl	8108968 <__multiply>
 8106762:	900e      	str	r0, [sp, #56]	@ 0x38
 8106764:	2800      	cmp	r0, #0
 8106766:	f43f ae8a 	beq.w	810647e <_strtod_l+0x43e>
 810676a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810676c:	9805      	ldr	r0, [sp, #20]
 810676e:	f001 ffe7 	bl	8108740 <_Bfree>
 8106772:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8106774:	931a      	str	r3, [sp, #104]	@ 0x68
 8106776:	2d00      	cmp	r5, #0
 8106778:	dc1d      	bgt.n	81067b6 <_strtod_l+0x776>
 810677a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810677c:	2b00      	cmp	r3, #0
 810677e:	dd23      	ble.n	81067c8 <_strtod_l+0x788>
 8106780:	4649      	mov	r1, r9
 8106782:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8106784:	9805      	ldr	r0, [sp, #20]
 8106786:	f002 f999 	bl	8108abc <__pow5mult>
 810678a:	4681      	mov	r9, r0
 810678c:	b9e0      	cbnz	r0, 81067c8 <_strtod_l+0x788>
 810678e:	f04f 0900 	mov.w	r9, #0
 8106792:	e674      	b.n	810647e <_strtod_l+0x43e>
 8106794:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8106798:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 810679c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 81067a0:	35e2      	adds	r5, #226	@ 0xe2
 81067a2:	fa01 f305 	lsl.w	r3, r1, r5
 81067a6:	9310      	str	r3, [sp, #64]	@ 0x40
 81067a8:	9113      	str	r1, [sp, #76]	@ 0x4c
 81067aa:	e7ba      	b.n	8106722 <_strtod_l+0x6e2>
 81067ac:	2300      	movs	r3, #0
 81067ae:	9310      	str	r3, [sp, #64]	@ 0x40
 81067b0:	2301      	movs	r3, #1
 81067b2:	9313      	str	r3, [sp, #76]	@ 0x4c
 81067b4:	e7b5      	b.n	8106722 <_strtod_l+0x6e2>
 81067b6:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81067b8:	9805      	ldr	r0, [sp, #20]
 81067ba:	462a      	mov	r2, r5
 81067bc:	f002 f9d8 	bl	8108b70 <__lshift>
 81067c0:	901a      	str	r0, [sp, #104]	@ 0x68
 81067c2:	2800      	cmp	r0, #0
 81067c4:	d1d9      	bne.n	810677a <_strtod_l+0x73a>
 81067c6:	e65a      	b.n	810647e <_strtod_l+0x43e>
 81067c8:	2e00      	cmp	r6, #0
 81067ca:	dd07      	ble.n	81067dc <_strtod_l+0x79c>
 81067cc:	4649      	mov	r1, r9
 81067ce:	9805      	ldr	r0, [sp, #20]
 81067d0:	4632      	mov	r2, r6
 81067d2:	f002 f9cd 	bl	8108b70 <__lshift>
 81067d6:	4681      	mov	r9, r0
 81067d8:	2800      	cmp	r0, #0
 81067da:	d0d8      	beq.n	810678e <_strtod_l+0x74e>
 81067dc:	2f00      	cmp	r7, #0
 81067de:	dd08      	ble.n	81067f2 <_strtod_l+0x7b2>
 81067e0:	4641      	mov	r1, r8
 81067e2:	9805      	ldr	r0, [sp, #20]
 81067e4:	463a      	mov	r2, r7
 81067e6:	f002 f9c3 	bl	8108b70 <__lshift>
 81067ea:	4680      	mov	r8, r0
 81067ec:	2800      	cmp	r0, #0
 81067ee:	f43f ae46 	beq.w	810647e <_strtod_l+0x43e>
 81067f2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81067f4:	9805      	ldr	r0, [sp, #20]
 81067f6:	464a      	mov	r2, r9
 81067f8:	f002 fa42 	bl	8108c80 <__mdiff>
 81067fc:	4604      	mov	r4, r0
 81067fe:	2800      	cmp	r0, #0
 8106800:	f43f ae3d 	beq.w	810647e <_strtod_l+0x43e>
 8106804:	68c3      	ldr	r3, [r0, #12]
 8106806:	930f      	str	r3, [sp, #60]	@ 0x3c
 8106808:	2300      	movs	r3, #0
 810680a:	60c3      	str	r3, [r0, #12]
 810680c:	4641      	mov	r1, r8
 810680e:	f002 fa1b 	bl	8108c48 <__mcmp>
 8106812:	2800      	cmp	r0, #0
 8106814:	da46      	bge.n	81068a4 <_strtod_l+0x864>
 8106816:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8106818:	ea53 030a 	orrs.w	r3, r3, sl
 810681c:	d16c      	bne.n	81068f8 <_strtod_l+0x8b8>
 810681e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8106822:	2b00      	cmp	r3, #0
 8106824:	d168      	bne.n	81068f8 <_strtod_l+0x8b8>
 8106826:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 810682a:	0d1b      	lsrs	r3, r3, #20
 810682c:	051b      	lsls	r3, r3, #20
 810682e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8106832:	d961      	bls.n	81068f8 <_strtod_l+0x8b8>
 8106834:	6963      	ldr	r3, [r4, #20]
 8106836:	b913      	cbnz	r3, 810683e <_strtod_l+0x7fe>
 8106838:	6923      	ldr	r3, [r4, #16]
 810683a:	2b01      	cmp	r3, #1
 810683c:	dd5c      	ble.n	81068f8 <_strtod_l+0x8b8>
 810683e:	4621      	mov	r1, r4
 8106840:	2201      	movs	r2, #1
 8106842:	9805      	ldr	r0, [sp, #20]
 8106844:	f002 f994 	bl	8108b70 <__lshift>
 8106848:	4641      	mov	r1, r8
 810684a:	4604      	mov	r4, r0
 810684c:	f002 f9fc 	bl	8108c48 <__mcmp>
 8106850:	2800      	cmp	r0, #0
 8106852:	dd51      	ble.n	81068f8 <_strtod_l+0x8b8>
 8106854:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8106858:	9a08      	ldr	r2, [sp, #32]
 810685a:	0d1b      	lsrs	r3, r3, #20
 810685c:	051b      	lsls	r3, r3, #20
 810685e:	2a00      	cmp	r2, #0
 8106860:	d06b      	beq.n	810693a <_strtod_l+0x8fa>
 8106862:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8106866:	d868      	bhi.n	810693a <_strtod_l+0x8fa>
 8106868:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 810686c:	f67f ae9d 	bls.w	81065aa <_strtod_l+0x56a>
 8106870:	4b0a      	ldr	r3, [pc, #40]	@ (810689c <_strtod_l+0x85c>)
 8106872:	4650      	mov	r0, sl
 8106874:	4659      	mov	r1, fp
 8106876:	2200      	movs	r2, #0
 8106878:	f7f9 ff46 	bl	8100708 <__aeabi_dmul>
 810687c:	4b08      	ldr	r3, [pc, #32]	@ (81068a0 <_strtod_l+0x860>)
 810687e:	400b      	ands	r3, r1
 8106880:	4682      	mov	sl, r0
 8106882:	468b      	mov	fp, r1
 8106884:	2b00      	cmp	r3, #0
 8106886:	f47f ae05 	bne.w	8106494 <_strtod_l+0x454>
 810688a:	9a05      	ldr	r2, [sp, #20]
 810688c:	2322      	movs	r3, #34	@ 0x22
 810688e:	6013      	str	r3, [r2, #0]
 8106890:	e600      	b.n	8106494 <_strtod_l+0x454>
 8106892:	bf00      	nop
 8106894:	0810a680 	.word	0x0810a680
 8106898:	fffffc02 	.word	0xfffffc02
 810689c:	39500000 	.word	0x39500000
 81068a0:	7ff00000 	.word	0x7ff00000
 81068a4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 81068a8:	d165      	bne.n	8106976 <_strtod_l+0x936>
 81068aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 81068ac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 81068b0:	b35a      	cbz	r2, 810690a <_strtod_l+0x8ca>
 81068b2:	4a9f      	ldr	r2, [pc, #636]	@ (8106b30 <_strtod_l+0xaf0>)
 81068b4:	4293      	cmp	r3, r2
 81068b6:	d12b      	bne.n	8106910 <_strtod_l+0x8d0>
 81068b8:	9b08      	ldr	r3, [sp, #32]
 81068ba:	4651      	mov	r1, sl
 81068bc:	b303      	cbz	r3, 8106900 <_strtod_l+0x8c0>
 81068be:	4b9d      	ldr	r3, [pc, #628]	@ (8106b34 <_strtod_l+0xaf4>)
 81068c0:	465a      	mov	r2, fp
 81068c2:	4013      	ands	r3, r2
 81068c4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 81068c8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 81068cc:	d81b      	bhi.n	8106906 <_strtod_l+0x8c6>
 81068ce:	0d1b      	lsrs	r3, r3, #20
 81068d0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 81068d4:	fa02 f303 	lsl.w	r3, r2, r3
 81068d8:	4299      	cmp	r1, r3
 81068da:	d119      	bne.n	8106910 <_strtod_l+0x8d0>
 81068dc:	4b96      	ldr	r3, [pc, #600]	@ (8106b38 <_strtod_l+0xaf8>)
 81068de:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81068e0:	429a      	cmp	r2, r3
 81068e2:	d102      	bne.n	81068ea <_strtod_l+0x8aa>
 81068e4:	3101      	adds	r1, #1
 81068e6:	f43f adca 	beq.w	810647e <_strtod_l+0x43e>
 81068ea:	4b92      	ldr	r3, [pc, #584]	@ (8106b34 <_strtod_l+0xaf4>)
 81068ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81068ee:	401a      	ands	r2, r3
 81068f0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 81068f4:	f04f 0a00 	mov.w	sl, #0
 81068f8:	9b08      	ldr	r3, [sp, #32]
 81068fa:	2b00      	cmp	r3, #0
 81068fc:	d1b8      	bne.n	8106870 <_strtod_l+0x830>
 81068fe:	e5c9      	b.n	8106494 <_strtod_l+0x454>
 8106900:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8106904:	e7e8      	b.n	81068d8 <_strtod_l+0x898>
 8106906:	4613      	mov	r3, r2
 8106908:	e7e6      	b.n	81068d8 <_strtod_l+0x898>
 810690a:	ea53 030a 	orrs.w	r3, r3, sl
 810690e:	d0a1      	beq.n	8106854 <_strtod_l+0x814>
 8106910:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8106912:	b1db      	cbz	r3, 810694c <_strtod_l+0x90c>
 8106914:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8106916:	4213      	tst	r3, r2
 8106918:	d0ee      	beq.n	81068f8 <_strtod_l+0x8b8>
 810691a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810691c:	9a08      	ldr	r2, [sp, #32]
 810691e:	4650      	mov	r0, sl
 8106920:	4659      	mov	r1, fp
 8106922:	b1bb      	cbz	r3, 8106954 <_strtod_l+0x914>
 8106924:	f7ff fb6e 	bl	8106004 <sulp>
 8106928:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810692c:	ec53 2b10 	vmov	r2, r3, d0
 8106930:	f7f9 fd34 	bl	810039c <__adddf3>
 8106934:	4682      	mov	sl, r0
 8106936:	468b      	mov	fp, r1
 8106938:	e7de      	b.n	81068f8 <_strtod_l+0x8b8>
 810693a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 810693e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8106942:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8106946:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 810694a:	e7d5      	b.n	81068f8 <_strtod_l+0x8b8>
 810694c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810694e:	ea13 0f0a 	tst.w	r3, sl
 8106952:	e7e1      	b.n	8106918 <_strtod_l+0x8d8>
 8106954:	f7ff fb56 	bl	8106004 <sulp>
 8106958:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 810695c:	ec53 2b10 	vmov	r2, r3, d0
 8106960:	f7f9 fd1a 	bl	8100398 <__aeabi_dsub>
 8106964:	2200      	movs	r2, #0
 8106966:	2300      	movs	r3, #0
 8106968:	4682      	mov	sl, r0
 810696a:	468b      	mov	fp, r1
 810696c:	f7fa f934 	bl	8100bd8 <__aeabi_dcmpeq>
 8106970:	2800      	cmp	r0, #0
 8106972:	d0c1      	beq.n	81068f8 <_strtod_l+0x8b8>
 8106974:	e619      	b.n	81065aa <_strtod_l+0x56a>
 8106976:	4641      	mov	r1, r8
 8106978:	4620      	mov	r0, r4
 810697a:	f002 fadd 	bl	8108f38 <__ratio>
 810697e:	ec57 6b10 	vmov	r6, r7, d0
 8106982:	2200      	movs	r2, #0
 8106984:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8106988:	4630      	mov	r0, r6
 810698a:	4639      	mov	r1, r7
 810698c:	f7fa f938 	bl	8100c00 <__aeabi_dcmple>
 8106990:	2800      	cmp	r0, #0
 8106992:	d06f      	beq.n	8106a74 <_strtod_l+0xa34>
 8106994:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8106996:	2b00      	cmp	r3, #0
 8106998:	d17a      	bne.n	8106a90 <_strtod_l+0xa50>
 810699a:	f1ba 0f00 	cmp.w	sl, #0
 810699e:	d158      	bne.n	8106a52 <_strtod_l+0xa12>
 81069a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81069a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81069a6:	2b00      	cmp	r3, #0
 81069a8:	d15a      	bne.n	8106a60 <_strtod_l+0xa20>
 81069aa:	4b64      	ldr	r3, [pc, #400]	@ (8106b3c <_strtod_l+0xafc>)
 81069ac:	2200      	movs	r2, #0
 81069ae:	4630      	mov	r0, r6
 81069b0:	4639      	mov	r1, r7
 81069b2:	f7fa f91b 	bl	8100bec <__aeabi_dcmplt>
 81069b6:	2800      	cmp	r0, #0
 81069b8:	d159      	bne.n	8106a6e <_strtod_l+0xa2e>
 81069ba:	4630      	mov	r0, r6
 81069bc:	4639      	mov	r1, r7
 81069be:	4b60      	ldr	r3, [pc, #384]	@ (8106b40 <_strtod_l+0xb00>)
 81069c0:	2200      	movs	r2, #0
 81069c2:	f7f9 fea1 	bl	8100708 <__aeabi_dmul>
 81069c6:	4606      	mov	r6, r0
 81069c8:	460f      	mov	r7, r1
 81069ca:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 81069ce:	9606      	str	r6, [sp, #24]
 81069d0:	9307      	str	r3, [sp, #28]
 81069d2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 81069d6:	4d57      	ldr	r5, [pc, #348]	@ (8106b34 <_strtod_l+0xaf4>)
 81069d8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 81069dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81069de:	401d      	ands	r5, r3
 81069e0:	4b58      	ldr	r3, [pc, #352]	@ (8106b44 <_strtod_l+0xb04>)
 81069e2:	429d      	cmp	r5, r3
 81069e4:	f040 80b2 	bne.w	8106b4c <_strtod_l+0xb0c>
 81069e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81069ea:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 81069ee:	ec4b ab10 	vmov	d0, sl, fp
 81069f2:	f002 f9d9 	bl	8108da8 <__ulp>
 81069f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 81069fa:	ec51 0b10 	vmov	r0, r1, d0
 81069fe:	f7f9 fe83 	bl	8100708 <__aeabi_dmul>
 8106a02:	4652      	mov	r2, sl
 8106a04:	465b      	mov	r3, fp
 8106a06:	f7f9 fcc9 	bl	810039c <__adddf3>
 8106a0a:	460b      	mov	r3, r1
 8106a0c:	4949      	ldr	r1, [pc, #292]	@ (8106b34 <_strtod_l+0xaf4>)
 8106a0e:	4a4e      	ldr	r2, [pc, #312]	@ (8106b48 <_strtod_l+0xb08>)
 8106a10:	4019      	ands	r1, r3
 8106a12:	4291      	cmp	r1, r2
 8106a14:	4682      	mov	sl, r0
 8106a16:	d942      	bls.n	8106a9e <_strtod_l+0xa5e>
 8106a18:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8106a1a:	4b47      	ldr	r3, [pc, #284]	@ (8106b38 <_strtod_l+0xaf8>)
 8106a1c:	429a      	cmp	r2, r3
 8106a1e:	d103      	bne.n	8106a28 <_strtod_l+0x9e8>
 8106a20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8106a22:	3301      	adds	r3, #1
 8106a24:	f43f ad2b 	beq.w	810647e <_strtod_l+0x43e>
 8106a28:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8106b38 <_strtod_l+0xaf8>
 8106a2c:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8106a30:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8106a32:	9805      	ldr	r0, [sp, #20]
 8106a34:	f001 fe84 	bl	8108740 <_Bfree>
 8106a38:	9805      	ldr	r0, [sp, #20]
 8106a3a:	4649      	mov	r1, r9
 8106a3c:	f001 fe80 	bl	8108740 <_Bfree>
 8106a40:	9805      	ldr	r0, [sp, #20]
 8106a42:	4641      	mov	r1, r8
 8106a44:	f001 fe7c 	bl	8108740 <_Bfree>
 8106a48:	9805      	ldr	r0, [sp, #20]
 8106a4a:	4621      	mov	r1, r4
 8106a4c:	f001 fe78 	bl	8108740 <_Bfree>
 8106a50:	e618      	b.n	8106684 <_strtod_l+0x644>
 8106a52:	f1ba 0f01 	cmp.w	sl, #1
 8106a56:	d103      	bne.n	8106a60 <_strtod_l+0xa20>
 8106a58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8106a5a:	2b00      	cmp	r3, #0
 8106a5c:	f43f ada5 	beq.w	81065aa <_strtod_l+0x56a>
 8106a60:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8106b10 <_strtod_l+0xad0>
 8106a64:	4f35      	ldr	r7, [pc, #212]	@ (8106b3c <_strtod_l+0xafc>)
 8106a66:	ed8d 7b06 	vstr	d7, [sp, #24]
 8106a6a:	2600      	movs	r6, #0
 8106a6c:	e7b1      	b.n	81069d2 <_strtod_l+0x992>
 8106a6e:	4f34      	ldr	r7, [pc, #208]	@ (8106b40 <_strtod_l+0xb00>)
 8106a70:	2600      	movs	r6, #0
 8106a72:	e7aa      	b.n	81069ca <_strtod_l+0x98a>
 8106a74:	4b32      	ldr	r3, [pc, #200]	@ (8106b40 <_strtod_l+0xb00>)
 8106a76:	4630      	mov	r0, r6
 8106a78:	4639      	mov	r1, r7
 8106a7a:	2200      	movs	r2, #0
 8106a7c:	f7f9 fe44 	bl	8100708 <__aeabi_dmul>
 8106a80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8106a82:	4606      	mov	r6, r0
 8106a84:	460f      	mov	r7, r1
 8106a86:	2b00      	cmp	r3, #0
 8106a88:	d09f      	beq.n	81069ca <_strtod_l+0x98a>
 8106a8a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8106a8e:	e7a0      	b.n	81069d2 <_strtod_l+0x992>
 8106a90:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8106b18 <_strtod_l+0xad8>
 8106a94:	ed8d 7b06 	vstr	d7, [sp, #24]
 8106a98:	ec57 6b17 	vmov	r6, r7, d7
 8106a9c:	e799      	b.n	81069d2 <_strtod_l+0x992>
 8106a9e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8106aa2:	9b08      	ldr	r3, [sp, #32]
 8106aa4:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8106aa8:	2b00      	cmp	r3, #0
 8106aaa:	d1c1      	bne.n	8106a30 <_strtod_l+0x9f0>
 8106aac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8106ab0:	0d1b      	lsrs	r3, r3, #20
 8106ab2:	051b      	lsls	r3, r3, #20
 8106ab4:	429d      	cmp	r5, r3
 8106ab6:	d1bb      	bne.n	8106a30 <_strtod_l+0x9f0>
 8106ab8:	4630      	mov	r0, r6
 8106aba:	4639      	mov	r1, r7
 8106abc:	f7fa f96c 	bl	8100d98 <__aeabi_d2lz>
 8106ac0:	f7f9 fdf4 	bl	81006ac <__aeabi_l2d>
 8106ac4:	4602      	mov	r2, r0
 8106ac6:	460b      	mov	r3, r1
 8106ac8:	4630      	mov	r0, r6
 8106aca:	4639      	mov	r1, r7
 8106acc:	f7f9 fc64 	bl	8100398 <__aeabi_dsub>
 8106ad0:	460b      	mov	r3, r1
 8106ad2:	4602      	mov	r2, r0
 8106ad4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8106ad8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8106adc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8106ade:	ea46 060a 	orr.w	r6, r6, sl
 8106ae2:	431e      	orrs	r6, r3
 8106ae4:	d06f      	beq.n	8106bc6 <_strtod_l+0xb86>
 8106ae6:	a30e      	add	r3, pc, #56	@ (adr r3, 8106b20 <_strtod_l+0xae0>)
 8106ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106aec:	f7fa f87e 	bl	8100bec <__aeabi_dcmplt>
 8106af0:	2800      	cmp	r0, #0
 8106af2:	f47f accf 	bne.w	8106494 <_strtod_l+0x454>
 8106af6:	a30c      	add	r3, pc, #48	@ (adr r3, 8106b28 <_strtod_l+0xae8>)
 8106af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106afc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8106b00:	f7fa f892 	bl	8100c28 <__aeabi_dcmpgt>
 8106b04:	2800      	cmp	r0, #0
 8106b06:	d093      	beq.n	8106a30 <_strtod_l+0x9f0>
 8106b08:	e4c4      	b.n	8106494 <_strtod_l+0x454>
 8106b0a:	bf00      	nop
 8106b0c:	f3af 8000 	nop.w
 8106b10:	00000000 	.word	0x00000000
 8106b14:	bff00000 	.word	0xbff00000
 8106b18:	00000000 	.word	0x00000000
 8106b1c:	3ff00000 	.word	0x3ff00000
 8106b20:	94a03595 	.word	0x94a03595
 8106b24:	3fdfffff 	.word	0x3fdfffff
 8106b28:	35afe535 	.word	0x35afe535
 8106b2c:	3fe00000 	.word	0x3fe00000
 8106b30:	000fffff 	.word	0x000fffff
 8106b34:	7ff00000 	.word	0x7ff00000
 8106b38:	7fefffff 	.word	0x7fefffff
 8106b3c:	3ff00000 	.word	0x3ff00000
 8106b40:	3fe00000 	.word	0x3fe00000
 8106b44:	7fe00000 	.word	0x7fe00000
 8106b48:	7c9fffff 	.word	0x7c9fffff
 8106b4c:	9b08      	ldr	r3, [sp, #32]
 8106b4e:	b323      	cbz	r3, 8106b9a <_strtod_l+0xb5a>
 8106b50:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8106b54:	d821      	bhi.n	8106b9a <_strtod_l+0xb5a>
 8106b56:	a328      	add	r3, pc, #160	@ (adr r3, 8106bf8 <_strtod_l+0xbb8>)
 8106b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106b5c:	4630      	mov	r0, r6
 8106b5e:	4639      	mov	r1, r7
 8106b60:	f7fa f84e 	bl	8100c00 <__aeabi_dcmple>
 8106b64:	b1a0      	cbz	r0, 8106b90 <_strtod_l+0xb50>
 8106b66:	4639      	mov	r1, r7
 8106b68:	4630      	mov	r0, r6
 8106b6a:	f7fa f8a5 	bl	8100cb8 <__aeabi_d2uiz>
 8106b6e:	2801      	cmp	r0, #1
 8106b70:	bf38      	it	cc
 8106b72:	2001      	movcc	r0, #1
 8106b74:	f7f9 fd4e 	bl	8100614 <__aeabi_ui2d>
 8106b78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8106b7a:	4606      	mov	r6, r0
 8106b7c:	460f      	mov	r7, r1
 8106b7e:	b9fb      	cbnz	r3, 8106bc0 <_strtod_l+0xb80>
 8106b80:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8106b84:	9014      	str	r0, [sp, #80]	@ 0x50
 8106b86:	9315      	str	r3, [sp, #84]	@ 0x54
 8106b88:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8106b8c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8106b90:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8106b92:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8106b96:	1b5b      	subs	r3, r3, r5
 8106b98:	9311      	str	r3, [sp, #68]	@ 0x44
 8106b9a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8106b9e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8106ba2:	f002 f901 	bl	8108da8 <__ulp>
 8106ba6:	4650      	mov	r0, sl
 8106ba8:	ec53 2b10 	vmov	r2, r3, d0
 8106bac:	4659      	mov	r1, fp
 8106bae:	f7f9 fdab 	bl	8100708 <__aeabi_dmul>
 8106bb2:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8106bb6:	f7f9 fbf1 	bl	810039c <__adddf3>
 8106bba:	4682      	mov	sl, r0
 8106bbc:	468b      	mov	fp, r1
 8106bbe:	e770      	b.n	8106aa2 <_strtod_l+0xa62>
 8106bc0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8106bc4:	e7e0      	b.n	8106b88 <_strtod_l+0xb48>
 8106bc6:	a30e      	add	r3, pc, #56	@ (adr r3, 8106c00 <_strtod_l+0xbc0>)
 8106bc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8106bcc:	f7fa f80e 	bl	8100bec <__aeabi_dcmplt>
 8106bd0:	e798      	b.n	8106b04 <_strtod_l+0xac4>
 8106bd2:	2300      	movs	r3, #0
 8106bd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8106bd6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8106bd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8106bda:	6013      	str	r3, [r2, #0]
 8106bdc:	f7ff ba6d 	b.w	81060ba <_strtod_l+0x7a>
 8106be0:	2a65      	cmp	r2, #101	@ 0x65
 8106be2:	f43f ab66 	beq.w	81062b2 <_strtod_l+0x272>
 8106be6:	2a45      	cmp	r2, #69	@ 0x45
 8106be8:	f43f ab63 	beq.w	81062b2 <_strtod_l+0x272>
 8106bec:	2301      	movs	r3, #1
 8106bee:	f7ff bb9e 	b.w	810632e <_strtod_l+0x2ee>
 8106bf2:	bf00      	nop
 8106bf4:	f3af 8000 	nop.w
 8106bf8:	ffc00000 	.word	0xffc00000
 8106bfc:	41dfffff 	.word	0x41dfffff
 8106c00:	94a03595 	.word	0x94a03595
 8106c04:	3fcfffff 	.word	0x3fcfffff

08106c08 <_strtod_r>:
 8106c08:	4b01      	ldr	r3, [pc, #4]	@ (8106c10 <_strtod_r+0x8>)
 8106c0a:	f7ff ba19 	b.w	8106040 <_strtod_l>
 8106c0e:	bf00      	nop
 8106c10:	1000002c 	.word	0x1000002c

08106c14 <_strtol_l.constprop.0>:
 8106c14:	2b24      	cmp	r3, #36	@ 0x24
 8106c16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106c1a:	4686      	mov	lr, r0
 8106c1c:	4690      	mov	r8, r2
 8106c1e:	d801      	bhi.n	8106c24 <_strtol_l.constprop.0+0x10>
 8106c20:	2b01      	cmp	r3, #1
 8106c22:	d106      	bne.n	8106c32 <_strtol_l.constprop.0+0x1e>
 8106c24:	f000 f8ae 	bl	8106d84 <__errno>
 8106c28:	2316      	movs	r3, #22
 8106c2a:	6003      	str	r3, [r0, #0]
 8106c2c:	2000      	movs	r0, #0
 8106c2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106c32:	4834      	ldr	r0, [pc, #208]	@ (8106d04 <_strtol_l.constprop.0+0xf0>)
 8106c34:	460d      	mov	r5, r1
 8106c36:	462a      	mov	r2, r5
 8106c38:	f815 4b01 	ldrb.w	r4, [r5], #1
 8106c3c:	5d06      	ldrb	r6, [r0, r4]
 8106c3e:	f016 0608 	ands.w	r6, r6, #8
 8106c42:	d1f8      	bne.n	8106c36 <_strtol_l.constprop.0+0x22>
 8106c44:	2c2d      	cmp	r4, #45	@ 0x2d
 8106c46:	d12d      	bne.n	8106ca4 <_strtol_l.constprop.0+0x90>
 8106c48:	782c      	ldrb	r4, [r5, #0]
 8106c4a:	2601      	movs	r6, #1
 8106c4c:	1c95      	adds	r5, r2, #2
 8106c4e:	f033 0210 	bics.w	r2, r3, #16
 8106c52:	d109      	bne.n	8106c68 <_strtol_l.constprop.0+0x54>
 8106c54:	2c30      	cmp	r4, #48	@ 0x30
 8106c56:	d12a      	bne.n	8106cae <_strtol_l.constprop.0+0x9a>
 8106c58:	782a      	ldrb	r2, [r5, #0]
 8106c5a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8106c5e:	2a58      	cmp	r2, #88	@ 0x58
 8106c60:	d125      	bne.n	8106cae <_strtol_l.constprop.0+0x9a>
 8106c62:	786c      	ldrb	r4, [r5, #1]
 8106c64:	2310      	movs	r3, #16
 8106c66:	3502      	adds	r5, #2
 8106c68:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8106c6c:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8106c70:	2200      	movs	r2, #0
 8106c72:	fbbc f9f3 	udiv	r9, ip, r3
 8106c76:	4610      	mov	r0, r2
 8106c78:	fb03 ca19 	mls	sl, r3, r9, ip
 8106c7c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8106c80:	2f09      	cmp	r7, #9
 8106c82:	d81b      	bhi.n	8106cbc <_strtol_l.constprop.0+0xa8>
 8106c84:	463c      	mov	r4, r7
 8106c86:	42a3      	cmp	r3, r4
 8106c88:	dd27      	ble.n	8106cda <_strtol_l.constprop.0+0xc6>
 8106c8a:	1c57      	adds	r7, r2, #1
 8106c8c:	d007      	beq.n	8106c9e <_strtol_l.constprop.0+0x8a>
 8106c8e:	4581      	cmp	r9, r0
 8106c90:	d320      	bcc.n	8106cd4 <_strtol_l.constprop.0+0xc0>
 8106c92:	d101      	bne.n	8106c98 <_strtol_l.constprop.0+0x84>
 8106c94:	45a2      	cmp	sl, r4
 8106c96:	db1d      	blt.n	8106cd4 <_strtol_l.constprop.0+0xc0>
 8106c98:	fb00 4003 	mla	r0, r0, r3, r4
 8106c9c:	2201      	movs	r2, #1
 8106c9e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8106ca2:	e7eb      	b.n	8106c7c <_strtol_l.constprop.0+0x68>
 8106ca4:	2c2b      	cmp	r4, #43	@ 0x2b
 8106ca6:	bf04      	itt	eq
 8106ca8:	782c      	ldrbeq	r4, [r5, #0]
 8106caa:	1c95      	addeq	r5, r2, #2
 8106cac:	e7cf      	b.n	8106c4e <_strtol_l.constprop.0+0x3a>
 8106cae:	2b00      	cmp	r3, #0
 8106cb0:	d1da      	bne.n	8106c68 <_strtol_l.constprop.0+0x54>
 8106cb2:	2c30      	cmp	r4, #48	@ 0x30
 8106cb4:	bf0c      	ite	eq
 8106cb6:	2308      	moveq	r3, #8
 8106cb8:	230a      	movne	r3, #10
 8106cba:	e7d5      	b.n	8106c68 <_strtol_l.constprop.0+0x54>
 8106cbc:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8106cc0:	2f19      	cmp	r7, #25
 8106cc2:	d801      	bhi.n	8106cc8 <_strtol_l.constprop.0+0xb4>
 8106cc4:	3c37      	subs	r4, #55	@ 0x37
 8106cc6:	e7de      	b.n	8106c86 <_strtol_l.constprop.0+0x72>
 8106cc8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8106ccc:	2f19      	cmp	r7, #25
 8106cce:	d804      	bhi.n	8106cda <_strtol_l.constprop.0+0xc6>
 8106cd0:	3c57      	subs	r4, #87	@ 0x57
 8106cd2:	e7d8      	b.n	8106c86 <_strtol_l.constprop.0+0x72>
 8106cd4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8106cd8:	e7e1      	b.n	8106c9e <_strtol_l.constprop.0+0x8a>
 8106cda:	1c53      	adds	r3, r2, #1
 8106cdc:	d108      	bne.n	8106cf0 <_strtol_l.constprop.0+0xdc>
 8106cde:	2322      	movs	r3, #34	@ 0x22
 8106ce0:	f8ce 3000 	str.w	r3, [lr]
 8106ce4:	4660      	mov	r0, ip
 8106ce6:	f1b8 0f00 	cmp.w	r8, #0
 8106cea:	d0a0      	beq.n	8106c2e <_strtol_l.constprop.0+0x1a>
 8106cec:	1e69      	subs	r1, r5, #1
 8106cee:	e006      	b.n	8106cfe <_strtol_l.constprop.0+0xea>
 8106cf0:	b106      	cbz	r6, 8106cf4 <_strtol_l.constprop.0+0xe0>
 8106cf2:	4240      	negs	r0, r0
 8106cf4:	f1b8 0f00 	cmp.w	r8, #0
 8106cf8:	d099      	beq.n	8106c2e <_strtol_l.constprop.0+0x1a>
 8106cfa:	2a00      	cmp	r2, #0
 8106cfc:	d1f6      	bne.n	8106cec <_strtol_l.constprop.0+0xd8>
 8106cfe:	f8c8 1000 	str.w	r1, [r8]
 8106d02:	e794      	b.n	8106c2e <_strtol_l.constprop.0+0x1a>
 8106d04:	0810a6b1 	.word	0x0810a6b1

08106d08 <_strtol_r>:
 8106d08:	f7ff bf84 	b.w	8106c14 <_strtol_l.constprop.0>

08106d0c <_fwalk_sglue>:
 8106d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106d10:	4607      	mov	r7, r0
 8106d12:	4688      	mov	r8, r1
 8106d14:	4614      	mov	r4, r2
 8106d16:	2600      	movs	r6, #0
 8106d18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8106d1c:	f1b9 0901 	subs.w	r9, r9, #1
 8106d20:	d505      	bpl.n	8106d2e <_fwalk_sglue+0x22>
 8106d22:	6824      	ldr	r4, [r4, #0]
 8106d24:	2c00      	cmp	r4, #0
 8106d26:	d1f7      	bne.n	8106d18 <_fwalk_sglue+0xc>
 8106d28:	4630      	mov	r0, r6
 8106d2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106d2e:	89ab      	ldrh	r3, [r5, #12]
 8106d30:	2b01      	cmp	r3, #1
 8106d32:	d907      	bls.n	8106d44 <_fwalk_sglue+0x38>
 8106d34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8106d38:	3301      	adds	r3, #1
 8106d3a:	d003      	beq.n	8106d44 <_fwalk_sglue+0x38>
 8106d3c:	4629      	mov	r1, r5
 8106d3e:	4638      	mov	r0, r7
 8106d40:	47c0      	blx	r8
 8106d42:	4306      	orrs	r6, r0
 8106d44:	3568      	adds	r5, #104	@ 0x68
 8106d46:	e7e9      	b.n	8106d1c <_fwalk_sglue+0x10>

08106d48 <strncmp>:
 8106d48:	b510      	push	{r4, lr}
 8106d4a:	b16a      	cbz	r2, 8106d68 <strncmp+0x20>
 8106d4c:	3901      	subs	r1, #1
 8106d4e:	1884      	adds	r4, r0, r2
 8106d50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8106d54:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8106d58:	429a      	cmp	r2, r3
 8106d5a:	d103      	bne.n	8106d64 <strncmp+0x1c>
 8106d5c:	42a0      	cmp	r0, r4
 8106d5e:	d001      	beq.n	8106d64 <strncmp+0x1c>
 8106d60:	2a00      	cmp	r2, #0
 8106d62:	d1f5      	bne.n	8106d50 <strncmp+0x8>
 8106d64:	1ad0      	subs	r0, r2, r3
 8106d66:	bd10      	pop	{r4, pc}
 8106d68:	4610      	mov	r0, r2
 8106d6a:	e7fc      	b.n	8106d66 <strncmp+0x1e>

08106d6c <memset>:
 8106d6c:	4402      	add	r2, r0
 8106d6e:	4603      	mov	r3, r0
 8106d70:	4293      	cmp	r3, r2
 8106d72:	d100      	bne.n	8106d76 <memset+0xa>
 8106d74:	4770      	bx	lr
 8106d76:	f803 1b01 	strb.w	r1, [r3], #1
 8106d7a:	e7f9      	b.n	8106d70 <memset+0x4>

08106d7c <_localeconv_r>:
 8106d7c:	4800      	ldr	r0, [pc, #0]	@ (8106d80 <_localeconv_r+0x4>)
 8106d7e:	4770      	bx	lr
 8106d80:	1000011c 	.word	0x1000011c

08106d84 <__errno>:
 8106d84:	4b01      	ldr	r3, [pc, #4]	@ (8106d8c <__errno+0x8>)
 8106d86:	6818      	ldr	r0, [r3, #0]
 8106d88:	4770      	bx	lr
 8106d8a:	bf00      	nop
 8106d8c:	10000198 	.word	0x10000198

08106d90 <__libc_init_array>:
 8106d90:	b570      	push	{r4, r5, r6, lr}
 8106d92:	4d0d      	ldr	r5, [pc, #52]	@ (8106dc8 <__libc_init_array+0x38>)
 8106d94:	4c0d      	ldr	r4, [pc, #52]	@ (8106dcc <__libc_init_array+0x3c>)
 8106d96:	1b64      	subs	r4, r4, r5
 8106d98:	10a4      	asrs	r4, r4, #2
 8106d9a:	2600      	movs	r6, #0
 8106d9c:	42a6      	cmp	r6, r4
 8106d9e:	d109      	bne.n	8106db4 <__libc_init_array+0x24>
 8106da0:	4d0b      	ldr	r5, [pc, #44]	@ (8106dd0 <__libc_init_array+0x40>)
 8106da2:	4c0c      	ldr	r4, [pc, #48]	@ (8106dd4 <__libc_init_array+0x44>)
 8106da4:	f002 fd66 	bl	8109874 <_init>
 8106da8:	1b64      	subs	r4, r4, r5
 8106daa:	10a4      	asrs	r4, r4, #2
 8106dac:	2600      	movs	r6, #0
 8106dae:	42a6      	cmp	r6, r4
 8106db0:	d105      	bne.n	8106dbe <__libc_init_array+0x2e>
 8106db2:	bd70      	pop	{r4, r5, r6, pc}
 8106db4:	f855 3b04 	ldr.w	r3, [r5], #4
 8106db8:	4798      	blx	r3
 8106dba:	3601      	adds	r6, #1
 8106dbc:	e7ee      	b.n	8106d9c <__libc_init_array+0xc>
 8106dbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8106dc2:	4798      	blx	r3
 8106dc4:	3601      	adds	r6, #1
 8106dc6:	e7f2      	b.n	8106dae <__libc_init_array+0x1e>
 8106dc8:	0810aa4c 	.word	0x0810aa4c
 8106dcc:	0810aa4c 	.word	0x0810aa4c
 8106dd0:	0810aa4c 	.word	0x0810aa4c
 8106dd4:	0810aa50 	.word	0x0810aa50

08106dd8 <__retarget_lock_init_recursive>:
 8106dd8:	4770      	bx	lr

08106dda <__retarget_lock_acquire_recursive>:
 8106dda:	4770      	bx	lr

08106ddc <__retarget_lock_release_recursive>:
 8106ddc:	4770      	bx	lr

08106dde <memcpy>:
 8106dde:	440a      	add	r2, r1
 8106de0:	4291      	cmp	r1, r2
 8106de2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8106de6:	d100      	bne.n	8106dea <memcpy+0xc>
 8106de8:	4770      	bx	lr
 8106dea:	b510      	push	{r4, lr}
 8106dec:	f811 4b01 	ldrb.w	r4, [r1], #1
 8106df0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8106df4:	4291      	cmp	r1, r2
 8106df6:	d1f9      	bne.n	8106dec <memcpy+0xe>
 8106df8:	bd10      	pop	{r4, pc}
 8106dfa:	0000      	movs	r0, r0
 8106dfc:	0000      	movs	r0, r0
	...

08106e00 <nan>:
 8106e00:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8106e08 <nan+0x8>
 8106e04:	4770      	bx	lr
 8106e06:	bf00      	nop
 8106e08:	00000000 	.word	0x00000000
 8106e0c:	7ff80000 	.word	0x7ff80000

08106e10 <nanf>:
 8106e10:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8106e18 <nanf+0x8>
 8106e14:	4770      	bx	lr
 8106e16:	bf00      	nop
 8106e18:	7fc00000 	.word	0x7fc00000

08106e1c <quorem>:
 8106e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106e20:	6903      	ldr	r3, [r0, #16]
 8106e22:	690c      	ldr	r4, [r1, #16]
 8106e24:	42a3      	cmp	r3, r4
 8106e26:	4607      	mov	r7, r0
 8106e28:	db7e      	blt.n	8106f28 <quorem+0x10c>
 8106e2a:	3c01      	subs	r4, #1
 8106e2c:	f101 0814 	add.w	r8, r1, #20
 8106e30:	00a3      	lsls	r3, r4, #2
 8106e32:	f100 0514 	add.w	r5, r0, #20
 8106e36:	9300      	str	r3, [sp, #0]
 8106e38:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8106e3c:	9301      	str	r3, [sp, #4]
 8106e3e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8106e42:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8106e46:	3301      	adds	r3, #1
 8106e48:	429a      	cmp	r2, r3
 8106e4a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8106e4e:	fbb2 f6f3 	udiv	r6, r2, r3
 8106e52:	d32e      	bcc.n	8106eb2 <quorem+0x96>
 8106e54:	f04f 0a00 	mov.w	sl, #0
 8106e58:	46c4      	mov	ip, r8
 8106e5a:	46ae      	mov	lr, r5
 8106e5c:	46d3      	mov	fp, sl
 8106e5e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8106e62:	b298      	uxth	r0, r3
 8106e64:	fb06 a000 	mla	r0, r6, r0, sl
 8106e68:	0c02      	lsrs	r2, r0, #16
 8106e6a:	0c1b      	lsrs	r3, r3, #16
 8106e6c:	fb06 2303 	mla	r3, r6, r3, r2
 8106e70:	f8de 2000 	ldr.w	r2, [lr]
 8106e74:	b280      	uxth	r0, r0
 8106e76:	b292      	uxth	r2, r2
 8106e78:	1a12      	subs	r2, r2, r0
 8106e7a:	445a      	add	r2, fp
 8106e7c:	f8de 0000 	ldr.w	r0, [lr]
 8106e80:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8106e84:	b29b      	uxth	r3, r3
 8106e86:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8106e8a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8106e8e:	b292      	uxth	r2, r2
 8106e90:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8106e94:	45e1      	cmp	r9, ip
 8106e96:	f84e 2b04 	str.w	r2, [lr], #4
 8106e9a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8106e9e:	d2de      	bcs.n	8106e5e <quorem+0x42>
 8106ea0:	9b00      	ldr	r3, [sp, #0]
 8106ea2:	58eb      	ldr	r3, [r5, r3]
 8106ea4:	b92b      	cbnz	r3, 8106eb2 <quorem+0x96>
 8106ea6:	9b01      	ldr	r3, [sp, #4]
 8106ea8:	3b04      	subs	r3, #4
 8106eaa:	429d      	cmp	r5, r3
 8106eac:	461a      	mov	r2, r3
 8106eae:	d32f      	bcc.n	8106f10 <quorem+0xf4>
 8106eb0:	613c      	str	r4, [r7, #16]
 8106eb2:	4638      	mov	r0, r7
 8106eb4:	f001 fec8 	bl	8108c48 <__mcmp>
 8106eb8:	2800      	cmp	r0, #0
 8106eba:	db25      	blt.n	8106f08 <quorem+0xec>
 8106ebc:	4629      	mov	r1, r5
 8106ebe:	2000      	movs	r0, #0
 8106ec0:	f858 2b04 	ldr.w	r2, [r8], #4
 8106ec4:	f8d1 c000 	ldr.w	ip, [r1]
 8106ec8:	fa1f fe82 	uxth.w	lr, r2
 8106ecc:	fa1f f38c 	uxth.w	r3, ip
 8106ed0:	eba3 030e 	sub.w	r3, r3, lr
 8106ed4:	4403      	add	r3, r0
 8106ed6:	0c12      	lsrs	r2, r2, #16
 8106ed8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8106edc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8106ee0:	b29b      	uxth	r3, r3
 8106ee2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8106ee6:	45c1      	cmp	r9, r8
 8106ee8:	f841 3b04 	str.w	r3, [r1], #4
 8106eec:	ea4f 4022 	mov.w	r0, r2, asr #16
 8106ef0:	d2e6      	bcs.n	8106ec0 <quorem+0xa4>
 8106ef2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8106ef6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8106efa:	b922      	cbnz	r2, 8106f06 <quorem+0xea>
 8106efc:	3b04      	subs	r3, #4
 8106efe:	429d      	cmp	r5, r3
 8106f00:	461a      	mov	r2, r3
 8106f02:	d30b      	bcc.n	8106f1c <quorem+0x100>
 8106f04:	613c      	str	r4, [r7, #16]
 8106f06:	3601      	adds	r6, #1
 8106f08:	4630      	mov	r0, r6
 8106f0a:	b003      	add	sp, #12
 8106f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106f10:	6812      	ldr	r2, [r2, #0]
 8106f12:	3b04      	subs	r3, #4
 8106f14:	2a00      	cmp	r2, #0
 8106f16:	d1cb      	bne.n	8106eb0 <quorem+0x94>
 8106f18:	3c01      	subs	r4, #1
 8106f1a:	e7c6      	b.n	8106eaa <quorem+0x8e>
 8106f1c:	6812      	ldr	r2, [r2, #0]
 8106f1e:	3b04      	subs	r3, #4
 8106f20:	2a00      	cmp	r2, #0
 8106f22:	d1ef      	bne.n	8106f04 <quorem+0xe8>
 8106f24:	3c01      	subs	r4, #1
 8106f26:	e7ea      	b.n	8106efe <quorem+0xe2>
 8106f28:	2000      	movs	r0, #0
 8106f2a:	e7ee      	b.n	8106f0a <quorem+0xee>
 8106f2c:	0000      	movs	r0, r0
	...

08106f30 <_dtoa_r>:
 8106f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106f34:	69c7      	ldr	r7, [r0, #28]
 8106f36:	b099      	sub	sp, #100	@ 0x64
 8106f38:	ed8d 0b02 	vstr	d0, [sp, #8]
 8106f3c:	ec55 4b10 	vmov	r4, r5, d0
 8106f40:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8106f42:	9109      	str	r1, [sp, #36]	@ 0x24
 8106f44:	4683      	mov	fp, r0
 8106f46:	920e      	str	r2, [sp, #56]	@ 0x38
 8106f48:	9313      	str	r3, [sp, #76]	@ 0x4c
 8106f4a:	b97f      	cbnz	r7, 8106f6c <_dtoa_r+0x3c>
 8106f4c:	2010      	movs	r0, #16
 8106f4e:	f001 fa43 	bl	81083d8 <malloc>
 8106f52:	4602      	mov	r2, r0
 8106f54:	f8cb 001c 	str.w	r0, [fp, #28]
 8106f58:	b920      	cbnz	r0, 8106f64 <_dtoa_r+0x34>
 8106f5a:	4ba7      	ldr	r3, [pc, #668]	@ (81071f8 <_dtoa_r+0x2c8>)
 8106f5c:	21ef      	movs	r1, #239	@ 0xef
 8106f5e:	48a7      	ldr	r0, [pc, #668]	@ (81071fc <_dtoa_r+0x2cc>)
 8106f60:	f002 f94e 	bl	8109200 <__assert_func>
 8106f64:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8106f68:	6007      	str	r7, [r0, #0]
 8106f6a:	60c7      	str	r7, [r0, #12]
 8106f6c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8106f70:	6819      	ldr	r1, [r3, #0]
 8106f72:	b159      	cbz	r1, 8106f8c <_dtoa_r+0x5c>
 8106f74:	685a      	ldr	r2, [r3, #4]
 8106f76:	604a      	str	r2, [r1, #4]
 8106f78:	2301      	movs	r3, #1
 8106f7a:	4093      	lsls	r3, r2
 8106f7c:	608b      	str	r3, [r1, #8]
 8106f7e:	4658      	mov	r0, fp
 8106f80:	f001 fbde 	bl	8108740 <_Bfree>
 8106f84:	f8db 301c 	ldr.w	r3, [fp, #28]
 8106f88:	2200      	movs	r2, #0
 8106f8a:	601a      	str	r2, [r3, #0]
 8106f8c:	1e2b      	subs	r3, r5, #0
 8106f8e:	bfb9      	ittee	lt
 8106f90:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8106f94:	9303      	strlt	r3, [sp, #12]
 8106f96:	2300      	movge	r3, #0
 8106f98:	6033      	strge	r3, [r6, #0]
 8106f9a:	9f03      	ldr	r7, [sp, #12]
 8106f9c:	4b98      	ldr	r3, [pc, #608]	@ (8107200 <_dtoa_r+0x2d0>)
 8106f9e:	bfbc      	itt	lt
 8106fa0:	2201      	movlt	r2, #1
 8106fa2:	6032      	strlt	r2, [r6, #0]
 8106fa4:	43bb      	bics	r3, r7
 8106fa6:	d112      	bne.n	8106fce <_dtoa_r+0x9e>
 8106fa8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8106faa:	f242 730f 	movw	r3, #9999	@ 0x270f
 8106fae:	6013      	str	r3, [r2, #0]
 8106fb0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8106fb4:	4323      	orrs	r3, r4
 8106fb6:	f000 854d 	beq.w	8107a54 <_dtoa_r+0xb24>
 8106fba:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8106fbc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8107214 <_dtoa_r+0x2e4>
 8106fc0:	2b00      	cmp	r3, #0
 8106fc2:	f000 854f 	beq.w	8107a64 <_dtoa_r+0xb34>
 8106fc6:	f10a 0303 	add.w	r3, sl, #3
 8106fca:	f000 bd49 	b.w	8107a60 <_dtoa_r+0xb30>
 8106fce:	ed9d 7b02 	vldr	d7, [sp, #8]
 8106fd2:	2200      	movs	r2, #0
 8106fd4:	ec51 0b17 	vmov	r0, r1, d7
 8106fd8:	2300      	movs	r3, #0
 8106fda:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8106fde:	f7f9 fdfb 	bl	8100bd8 <__aeabi_dcmpeq>
 8106fe2:	4680      	mov	r8, r0
 8106fe4:	b158      	cbz	r0, 8106ffe <_dtoa_r+0xce>
 8106fe6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8106fe8:	2301      	movs	r3, #1
 8106fea:	6013      	str	r3, [r2, #0]
 8106fec:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8106fee:	b113      	cbz	r3, 8106ff6 <_dtoa_r+0xc6>
 8106ff0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8106ff2:	4b84      	ldr	r3, [pc, #528]	@ (8107204 <_dtoa_r+0x2d4>)
 8106ff4:	6013      	str	r3, [r2, #0]
 8106ff6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8107218 <_dtoa_r+0x2e8>
 8106ffa:	f000 bd33 	b.w	8107a64 <_dtoa_r+0xb34>
 8106ffe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8107002:	aa16      	add	r2, sp, #88	@ 0x58
 8107004:	a917      	add	r1, sp, #92	@ 0x5c
 8107006:	4658      	mov	r0, fp
 8107008:	f001 ff3e 	bl	8108e88 <__d2b>
 810700c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8107010:	4681      	mov	r9, r0
 8107012:	2e00      	cmp	r6, #0
 8107014:	d077      	beq.n	8107106 <_dtoa_r+0x1d6>
 8107016:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8107018:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 810701c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8107020:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8107024:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8107028:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 810702c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8107030:	4619      	mov	r1, r3
 8107032:	2200      	movs	r2, #0
 8107034:	4b74      	ldr	r3, [pc, #464]	@ (8107208 <_dtoa_r+0x2d8>)
 8107036:	f7f9 f9af 	bl	8100398 <__aeabi_dsub>
 810703a:	a369      	add	r3, pc, #420	@ (adr r3, 81071e0 <_dtoa_r+0x2b0>)
 810703c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8107040:	f7f9 fb62 	bl	8100708 <__aeabi_dmul>
 8107044:	a368      	add	r3, pc, #416	@ (adr r3, 81071e8 <_dtoa_r+0x2b8>)
 8107046:	e9d3 2300 	ldrd	r2, r3, [r3]
 810704a:	f7f9 f9a7 	bl	810039c <__adddf3>
 810704e:	4604      	mov	r4, r0
 8107050:	4630      	mov	r0, r6
 8107052:	460d      	mov	r5, r1
 8107054:	f7f9 faee 	bl	8100634 <__aeabi_i2d>
 8107058:	a365      	add	r3, pc, #404	@ (adr r3, 81071f0 <_dtoa_r+0x2c0>)
 810705a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810705e:	f7f9 fb53 	bl	8100708 <__aeabi_dmul>
 8107062:	4602      	mov	r2, r0
 8107064:	460b      	mov	r3, r1
 8107066:	4620      	mov	r0, r4
 8107068:	4629      	mov	r1, r5
 810706a:	f7f9 f997 	bl	810039c <__adddf3>
 810706e:	4604      	mov	r4, r0
 8107070:	460d      	mov	r5, r1
 8107072:	f7f9 fdf9 	bl	8100c68 <__aeabi_d2iz>
 8107076:	2200      	movs	r2, #0
 8107078:	4607      	mov	r7, r0
 810707a:	2300      	movs	r3, #0
 810707c:	4620      	mov	r0, r4
 810707e:	4629      	mov	r1, r5
 8107080:	f7f9 fdb4 	bl	8100bec <__aeabi_dcmplt>
 8107084:	b140      	cbz	r0, 8107098 <_dtoa_r+0x168>
 8107086:	4638      	mov	r0, r7
 8107088:	f7f9 fad4 	bl	8100634 <__aeabi_i2d>
 810708c:	4622      	mov	r2, r4
 810708e:	462b      	mov	r3, r5
 8107090:	f7f9 fda2 	bl	8100bd8 <__aeabi_dcmpeq>
 8107094:	b900      	cbnz	r0, 8107098 <_dtoa_r+0x168>
 8107096:	3f01      	subs	r7, #1
 8107098:	2f16      	cmp	r7, #22
 810709a:	d851      	bhi.n	8107140 <_dtoa_r+0x210>
 810709c:	4b5b      	ldr	r3, [pc, #364]	@ (810720c <_dtoa_r+0x2dc>)
 810709e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 81070a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81070a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81070aa:	f7f9 fd9f 	bl	8100bec <__aeabi_dcmplt>
 81070ae:	2800      	cmp	r0, #0
 81070b0:	d048      	beq.n	8107144 <_dtoa_r+0x214>
 81070b2:	3f01      	subs	r7, #1
 81070b4:	2300      	movs	r3, #0
 81070b6:	9312      	str	r3, [sp, #72]	@ 0x48
 81070b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 81070ba:	1b9b      	subs	r3, r3, r6
 81070bc:	1e5a      	subs	r2, r3, #1
 81070be:	bf44      	itt	mi
 81070c0:	f1c3 0801 	rsbmi	r8, r3, #1
 81070c4:	2300      	movmi	r3, #0
 81070c6:	9208      	str	r2, [sp, #32]
 81070c8:	bf54      	ite	pl
 81070ca:	f04f 0800 	movpl.w	r8, #0
 81070ce:	9308      	strmi	r3, [sp, #32]
 81070d0:	2f00      	cmp	r7, #0
 81070d2:	db39      	blt.n	8107148 <_dtoa_r+0x218>
 81070d4:	9b08      	ldr	r3, [sp, #32]
 81070d6:	970f      	str	r7, [sp, #60]	@ 0x3c
 81070d8:	443b      	add	r3, r7
 81070da:	9308      	str	r3, [sp, #32]
 81070dc:	2300      	movs	r3, #0
 81070de:	930a      	str	r3, [sp, #40]	@ 0x28
 81070e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81070e2:	2b09      	cmp	r3, #9
 81070e4:	d864      	bhi.n	81071b0 <_dtoa_r+0x280>
 81070e6:	2b05      	cmp	r3, #5
 81070e8:	bfc4      	itt	gt
 81070ea:	3b04      	subgt	r3, #4
 81070ec:	9309      	strgt	r3, [sp, #36]	@ 0x24
 81070ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81070f0:	f1a3 0302 	sub.w	r3, r3, #2
 81070f4:	bfcc      	ite	gt
 81070f6:	2400      	movgt	r4, #0
 81070f8:	2401      	movle	r4, #1
 81070fa:	2b03      	cmp	r3, #3
 81070fc:	d863      	bhi.n	81071c6 <_dtoa_r+0x296>
 81070fe:	e8df f003 	tbb	[pc, r3]
 8107102:	372a      	.short	0x372a
 8107104:	5535      	.short	0x5535
 8107106:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 810710a:	441e      	add	r6, r3
 810710c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8107110:	2b20      	cmp	r3, #32
 8107112:	bfc1      	itttt	gt
 8107114:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8107118:	409f      	lslgt	r7, r3
 810711a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 810711e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8107122:	bfd6      	itet	le
 8107124:	f1c3 0320 	rsble	r3, r3, #32
 8107128:	ea47 0003 	orrgt.w	r0, r7, r3
 810712c:	fa04 f003 	lslle.w	r0, r4, r3
 8107130:	f7f9 fa70 	bl	8100614 <__aeabi_ui2d>
 8107134:	2201      	movs	r2, #1
 8107136:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 810713a:	3e01      	subs	r6, #1
 810713c:	9214      	str	r2, [sp, #80]	@ 0x50
 810713e:	e777      	b.n	8107030 <_dtoa_r+0x100>
 8107140:	2301      	movs	r3, #1
 8107142:	e7b8      	b.n	81070b6 <_dtoa_r+0x186>
 8107144:	9012      	str	r0, [sp, #72]	@ 0x48
 8107146:	e7b7      	b.n	81070b8 <_dtoa_r+0x188>
 8107148:	427b      	negs	r3, r7
 810714a:	930a      	str	r3, [sp, #40]	@ 0x28
 810714c:	2300      	movs	r3, #0
 810714e:	eba8 0807 	sub.w	r8, r8, r7
 8107152:	930f      	str	r3, [sp, #60]	@ 0x3c
 8107154:	e7c4      	b.n	81070e0 <_dtoa_r+0x1b0>
 8107156:	2300      	movs	r3, #0
 8107158:	930b      	str	r3, [sp, #44]	@ 0x2c
 810715a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810715c:	2b00      	cmp	r3, #0
 810715e:	dc35      	bgt.n	81071cc <_dtoa_r+0x29c>
 8107160:	2301      	movs	r3, #1
 8107162:	9300      	str	r3, [sp, #0]
 8107164:	9307      	str	r3, [sp, #28]
 8107166:	461a      	mov	r2, r3
 8107168:	920e      	str	r2, [sp, #56]	@ 0x38
 810716a:	e00b      	b.n	8107184 <_dtoa_r+0x254>
 810716c:	2301      	movs	r3, #1
 810716e:	e7f3      	b.n	8107158 <_dtoa_r+0x228>
 8107170:	2300      	movs	r3, #0
 8107172:	930b      	str	r3, [sp, #44]	@ 0x2c
 8107174:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8107176:	18fb      	adds	r3, r7, r3
 8107178:	9300      	str	r3, [sp, #0]
 810717a:	3301      	adds	r3, #1
 810717c:	2b01      	cmp	r3, #1
 810717e:	9307      	str	r3, [sp, #28]
 8107180:	bfb8      	it	lt
 8107182:	2301      	movlt	r3, #1
 8107184:	f8db 001c 	ldr.w	r0, [fp, #28]
 8107188:	2100      	movs	r1, #0
 810718a:	2204      	movs	r2, #4
 810718c:	f102 0514 	add.w	r5, r2, #20
 8107190:	429d      	cmp	r5, r3
 8107192:	d91f      	bls.n	81071d4 <_dtoa_r+0x2a4>
 8107194:	6041      	str	r1, [r0, #4]
 8107196:	4658      	mov	r0, fp
 8107198:	f001 fa92 	bl	81086c0 <_Balloc>
 810719c:	4682      	mov	sl, r0
 810719e:	2800      	cmp	r0, #0
 81071a0:	d13c      	bne.n	810721c <_dtoa_r+0x2ec>
 81071a2:	4b1b      	ldr	r3, [pc, #108]	@ (8107210 <_dtoa_r+0x2e0>)
 81071a4:	4602      	mov	r2, r0
 81071a6:	f240 11af 	movw	r1, #431	@ 0x1af
 81071aa:	e6d8      	b.n	8106f5e <_dtoa_r+0x2e>
 81071ac:	2301      	movs	r3, #1
 81071ae:	e7e0      	b.n	8107172 <_dtoa_r+0x242>
 81071b0:	2401      	movs	r4, #1
 81071b2:	2300      	movs	r3, #0
 81071b4:	9309      	str	r3, [sp, #36]	@ 0x24
 81071b6:	940b      	str	r4, [sp, #44]	@ 0x2c
 81071b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 81071bc:	9300      	str	r3, [sp, #0]
 81071be:	9307      	str	r3, [sp, #28]
 81071c0:	2200      	movs	r2, #0
 81071c2:	2312      	movs	r3, #18
 81071c4:	e7d0      	b.n	8107168 <_dtoa_r+0x238>
 81071c6:	2301      	movs	r3, #1
 81071c8:	930b      	str	r3, [sp, #44]	@ 0x2c
 81071ca:	e7f5      	b.n	81071b8 <_dtoa_r+0x288>
 81071cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81071ce:	9300      	str	r3, [sp, #0]
 81071d0:	9307      	str	r3, [sp, #28]
 81071d2:	e7d7      	b.n	8107184 <_dtoa_r+0x254>
 81071d4:	3101      	adds	r1, #1
 81071d6:	0052      	lsls	r2, r2, #1
 81071d8:	e7d8      	b.n	810718c <_dtoa_r+0x25c>
 81071da:	bf00      	nop
 81071dc:	f3af 8000 	nop.w
 81071e0:	636f4361 	.word	0x636f4361
 81071e4:	3fd287a7 	.word	0x3fd287a7
 81071e8:	8b60c8b3 	.word	0x8b60c8b3
 81071ec:	3fc68a28 	.word	0x3fc68a28
 81071f0:	509f79fb 	.word	0x509f79fb
 81071f4:	3fd34413 	.word	0x3fd34413
 81071f8:	0810a7be 	.word	0x0810a7be
 81071fc:	0810a7d5 	.word	0x0810a7d5
 8107200:	7ff00000 	.word	0x7ff00000
 8107204:	0810a62d 	.word	0x0810a62d
 8107208:	3ff80000 	.word	0x3ff80000
 810720c:	0810a940 	.word	0x0810a940
 8107210:	0810a82d 	.word	0x0810a82d
 8107214:	0810a7ba 	.word	0x0810a7ba
 8107218:	0810a62c 	.word	0x0810a62c
 810721c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8107220:	6018      	str	r0, [r3, #0]
 8107222:	9b07      	ldr	r3, [sp, #28]
 8107224:	2b0e      	cmp	r3, #14
 8107226:	f200 80a4 	bhi.w	8107372 <_dtoa_r+0x442>
 810722a:	2c00      	cmp	r4, #0
 810722c:	f000 80a1 	beq.w	8107372 <_dtoa_r+0x442>
 8107230:	2f00      	cmp	r7, #0
 8107232:	dd33      	ble.n	810729c <_dtoa_r+0x36c>
 8107234:	4bad      	ldr	r3, [pc, #692]	@ (81074ec <_dtoa_r+0x5bc>)
 8107236:	f007 020f 	and.w	r2, r7, #15
 810723a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 810723e:	ed93 7b00 	vldr	d7, [r3]
 8107242:	05f8      	lsls	r0, r7, #23
 8107244:	ed8d 7b04 	vstr	d7, [sp, #16]
 8107248:	ea4f 1427 	mov.w	r4, r7, asr #4
 810724c:	d516      	bpl.n	810727c <_dtoa_r+0x34c>
 810724e:	4ba8      	ldr	r3, [pc, #672]	@ (81074f0 <_dtoa_r+0x5c0>)
 8107250:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8107254:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8107258:	f7f9 fb80 	bl	810095c <__aeabi_ddiv>
 810725c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8107260:	f004 040f 	and.w	r4, r4, #15
 8107264:	2603      	movs	r6, #3
 8107266:	4da2      	ldr	r5, [pc, #648]	@ (81074f0 <_dtoa_r+0x5c0>)
 8107268:	b954      	cbnz	r4, 8107280 <_dtoa_r+0x350>
 810726a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 810726e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8107272:	f7f9 fb73 	bl	810095c <__aeabi_ddiv>
 8107276:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810727a:	e028      	b.n	81072ce <_dtoa_r+0x39e>
 810727c:	2602      	movs	r6, #2
 810727e:	e7f2      	b.n	8107266 <_dtoa_r+0x336>
 8107280:	07e1      	lsls	r1, r4, #31
 8107282:	d508      	bpl.n	8107296 <_dtoa_r+0x366>
 8107284:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8107288:	e9d5 2300 	ldrd	r2, r3, [r5]
 810728c:	f7f9 fa3c 	bl	8100708 <__aeabi_dmul>
 8107290:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8107294:	3601      	adds	r6, #1
 8107296:	1064      	asrs	r4, r4, #1
 8107298:	3508      	adds	r5, #8
 810729a:	e7e5      	b.n	8107268 <_dtoa_r+0x338>
 810729c:	f000 80d2 	beq.w	8107444 <_dtoa_r+0x514>
 81072a0:	427c      	negs	r4, r7
 81072a2:	4b92      	ldr	r3, [pc, #584]	@ (81074ec <_dtoa_r+0x5bc>)
 81072a4:	4d92      	ldr	r5, [pc, #584]	@ (81074f0 <_dtoa_r+0x5c0>)
 81072a6:	f004 020f 	and.w	r2, r4, #15
 81072aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81072ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 81072b2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81072b6:	f7f9 fa27 	bl	8100708 <__aeabi_dmul>
 81072ba:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81072be:	1124      	asrs	r4, r4, #4
 81072c0:	2300      	movs	r3, #0
 81072c2:	2602      	movs	r6, #2
 81072c4:	2c00      	cmp	r4, #0
 81072c6:	f040 80b2 	bne.w	810742e <_dtoa_r+0x4fe>
 81072ca:	2b00      	cmp	r3, #0
 81072cc:	d1d3      	bne.n	8107276 <_dtoa_r+0x346>
 81072ce:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 81072d0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 81072d4:	2b00      	cmp	r3, #0
 81072d6:	f000 80b7 	beq.w	8107448 <_dtoa_r+0x518>
 81072da:	4b86      	ldr	r3, [pc, #536]	@ (81074f4 <_dtoa_r+0x5c4>)
 81072dc:	2200      	movs	r2, #0
 81072de:	4620      	mov	r0, r4
 81072e0:	4629      	mov	r1, r5
 81072e2:	f7f9 fc83 	bl	8100bec <__aeabi_dcmplt>
 81072e6:	2800      	cmp	r0, #0
 81072e8:	f000 80ae 	beq.w	8107448 <_dtoa_r+0x518>
 81072ec:	9b07      	ldr	r3, [sp, #28]
 81072ee:	2b00      	cmp	r3, #0
 81072f0:	f000 80aa 	beq.w	8107448 <_dtoa_r+0x518>
 81072f4:	9b00      	ldr	r3, [sp, #0]
 81072f6:	2b00      	cmp	r3, #0
 81072f8:	dd37      	ble.n	810736a <_dtoa_r+0x43a>
 81072fa:	1e7b      	subs	r3, r7, #1
 81072fc:	9304      	str	r3, [sp, #16]
 81072fe:	4620      	mov	r0, r4
 8107300:	4b7d      	ldr	r3, [pc, #500]	@ (81074f8 <_dtoa_r+0x5c8>)
 8107302:	2200      	movs	r2, #0
 8107304:	4629      	mov	r1, r5
 8107306:	f7f9 f9ff 	bl	8100708 <__aeabi_dmul>
 810730a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810730e:	9c00      	ldr	r4, [sp, #0]
 8107310:	3601      	adds	r6, #1
 8107312:	4630      	mov	r0, r6
 8107314:	f7f9 f98e 	bl	8100634 <__aeabi_i2d>
 8107318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 810731c:	f7f9 f9f4 	bl	8100708 <__aeabi_dmul>
 8107320:	4b76      	ldr	r3, [pc, #472]	@ (81074fc <_dtoa_r+0x5cc>)
 8107322:	2200      	movs	r2, #0
 8107324:	f7f9 f83a 	bl	810039c <__adddf3>
 8107328:	4605      	mov	r5, r0
 810732a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 810732e:	2c00      	cmp	r4, #0
 8107330:	f040 808d 	bne.w	810744e <_dtoa_r+0x51e>
 8107334:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8107338:	4b71      	ldr	r3, [pc, #452]	@ (8107500 <_dtoa_r+0x5d0>)
 810733a:	2200      	movs	r2, #0
 810733c:	f7f9 f82c 	bl	8100398 <__aeabi_dsub>
 8107340:	4602      	mov	r2, r0
 8107342:	460b      	mov	r3, r1
 8107344:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8107348:	462a      	mov	r2, r5
 810734a:	4633      	mov	r3, r6
 810734c:	f7f9 fc6c 	bl	8100c28 <__aeabi_dcmpgt>
 8107350:	2800      	cmp	r0, #0
 8107352:	f040 828b 	bne.w	810786c <_dtoa_r+0x93c>
 8107356:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810735a:	462a      	mov	r2, r5
 810735c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8107360:	f7f9 fc44 	bl	8100bec <__aeabi_dcmplt>
 8107364:	2800      	cmp	r0, #0
 8107366:	f040 8128 	bne.w	81075ba <_dtoa_r+0x68a>
 810736a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 810736e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8107372:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8107374:	2b00      	cmp	r3, #0
 8107376:	f2c0 815a 	blt.w	810762e <_dtoa_r+0x6fe>
 810737a:	2f0e      	cmp	r7, #14
 810737c:	f300 8157 	bgt.w	810762e <_dtoa_r+0x6fe>
 8107380:	4b5a      	ldr	r3, [pc, #360]	@ (81074ec <_dtoa_r+0x5bc>)
 8107382:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8107386:	ed93 7b00 	vldr	d7, [r3]
 810738a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810738c:	2b00      	cmp	r3, #0
 810738e:	ed8d 7b00 	vstr	d7, [sp]
 8107392:	da03      	bge.n	810739c <_dtoa_r+0x46c>
 8107394:	9b07      	ldr	r3, [sp, #28]
 8107396:	2b00      	cmp	r3, #0
 8107398:	f340 8101 	ble.w	810759e <_dtoa_r+0x66e>
 810739c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 81073a0:	4656      	mov	r6, sl
 81073a2:	e9dd 2300 	ldrd	r2, r3, [sp]
 81073a6:	4620      	mov	r0, r4
 81073a8:	4629      	mov	r1, r5
 81073aa:	f7f9 fad7 	bl	810095c <__aeabi_ddiv>
 81073ae:	f7f9 fc5b 	bl	8100c68 <__aeabi_d2iz>
 81073b2:	4680      	mov	r8, r0
 81073b4:	f7f9 f93e 	bl	8100634 <__aeabi_i2d>
 81073b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 81073bc:	f7f9 f9a4 	bl	8100708 <__aeabi_dmul>
 81073c0:	4602      	mov	r2, r0
 81073c2:	460b      	mov	r3, r1
 81073c4:	4620      	mov	r0, r4
 81073c6:	4629      	mov	r1, r5
 81073c8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 81073cc:	f7f8 ffe4 	bl	8100398 <__aeabi_dsub>
 81073d0:	f806 4b01 	strb.w	r4, [r6], #1
 81073d4:	9d07      	ldr	r5, [sp, #28]
 81073d6:	eba6 040a 	sub.w	r4, r6, sl
 81073da:	42a5      	cmp	r5, r4
 81073dc:	4602      	mov	r2, r0
 81073de:	460b      	mov	r3, r1
 81073e0:	f040 8117 	bne.w	8107612 <_dtoa_r+0x6e2>
 81073e4:	f7f8 ffda 	bl	810039c <__adddf3>
 81073e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 81073ec:	4604      	mov	r4, r0
 81073ee:	460d      	mov	r5, r1
 81073f0:	f7f9 fc1a 	bl	8100c28 <__aeabi_dcmpgt>
 81073f4:	2800      	cmp	r0, #0
 81073f6:	f040 80f9 	bne.w	81075ec <_dtoa_r+0x6bc>
 81073fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 81073fe:	4620      	mov	r0, r4
 8107400:	4629      	mov	r1, r5
 8107402:	f7f9 fbe9 	bl	8100bd8 <__aeabi_dcmpeq>
 8107406:	b118      	cbz	r0, 8107410 <_dtoa_r+0x4e0>
 8107408:	f018 0f01 	tst.w	r8, #1
 810740c:	f040 80ee 	bne.w	81075ec <_dtoa_r+0x6bc>
 8107410:	4649      	mov	r1, r9
 8107412:	4658      	mov	r0, fp
 8107414:	f001 f994 	bl	8108740 <_Bfree>
 8107418:	2300      	movs	r3, #0
 810741a:	7033      	strb	r3, [r6, #0]
 810741c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 810741e:	3701      	adds	r7, #1
 8107420:	601f      	str	r7, [r3, #0]
 8107422:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8107424:	2b00      	cmp	r3, #0
 8107426:	f000 831d 	beq.w	8107a64 <_dtoa_r+0xb34>
 810742a:	601e      	str	r6, [r3, #0]
 810742c:	e31a      	b.n	8107a64 <_dtoa_r+0xb34>
 810742e:	07e2      	lsls	r2, r4, #31
 8107430:	d505      	bpl.n	810743e <_dtoa_r+0x50e>
 8107432:	e9d5 2300 	ldrd	r2, r3, [r5]
 8107436:	f7f9 f967 	bl	8100708 <__aeabi_dmul>
 810743a:	3601      	adds	r6, #1
 810743c:	2301      	movs	r3, #1
 810743e:	1064      	asrs	r4, r4, #1
 8107440:	3508      	adds	r5, #8
 8107442:	e73f      	b.n	81072c4 <_dtoa_r+0x394>
 8107444:	2602      	movs	r6, #2
 8107446:	e742      	b.n	81072ce <_dtoa_r+0x39e>
 8107448:	9c07      	ldr	r4, [sp, #28]
 810744a:	9704      	str	r7, [sp, #16]
 810744c:	e761      	b.n	8107312 <_dtoa_r+0x3e2>
 810744e:	4b27      	ldr	r3, [pc, #156]	@ (81074ec <_dtoa_r+0x5bc>)
 8107450:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8107452:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8107456:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 810745a:	4454      	add	r4, sl
 810745c:	2900      	cmp	r1, #0
 810745e:	d053      	beq.n	8107508 <_dtoa_r+0x5d8>
 8107460:	4928      	ldr	r1, [pc, #160]	@ (8107504 <_dtoa_r+0x5d4>)
 8107462:	2000      	movs	r0, #0
 8107464:	f7f9 fa7a 	bl	810095c <__aeabi_ddiv>
 8107468:	4633      	mov	r3, r6
 810746a:	462a      	mov	r2, r5
 810746c:	f7f8 ff94 	bl	8100398 <__aeabi_dsub>
 8107470:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8107474:	4656      	mov	r6, sl
 8107476:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810747a:	f7f9 fbf5 	bl	8100c68 <__aeabi_d2iz>
 810747e:	4605      	mov	r5, r0
 8107480:	f7f9 f8d8 	bl	8100634 <__aeabi_i2d>
 8107484:	4602      	mov	r2, r0
 8107486:	460b      	mov	r3, r1
 8107488:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810748c:	f7f8 ff84 	bl	8100398 <__aeabi_dsub>
 8107490:	3530      	adds	r5, #48	@ 0x30
 8107492:	4602      	mov	r2, r0
 8107494:	460b      	mov	r3, r1
 8107496:	e9cd 2302 	strd	r2, r3, [sp, #8]
 810749a:	f806 5b01 	strb.w	r5, [r6], #1
 810749e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 81074a2:	f7f9 fba3 	bl	8100bec <__aeabi_dcmplt>
 81074a6:	2800      	cmp	r0, #0
 81074a8:	d171      	bne.n	810758e <_dtoa_r+0x65e>
 81074aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81074ae:	4911      	ldr	r1, [pc, #68]	@ (81074f4 <_dtoa_r+0x5c4>)
 81074b0:	2000      	movs	r0, #0
 81074b2:	f7f8 ff71 	bl	8100398 <__aeabi_dsub>
 81074b6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 81074ba:	f7f9 fb97 	bl	8100bec <__aeabi_dcmplt>
 81074be:	2800      	cmp	r0, #0
 81074c0:	f040 8095 	bne.w	81075ee <_dtoa_r+0x6be>
 81074c4:	42a6      	cmp	r6, r4
 81074c6:	f43f af50 	beq.w	810736a <_dtoa_r+0x43a>
 81074ca:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 81074ce:	4b0a      	ldr	r3, [pc, #40]	@ (81074f8 <_dtoa_r+0x5c8>)
 81074d0:	2200      	movs	r2, #0
 81074d2:	f7f9 f919 	bl	8100708 <__aeabi_dmul>
 81074d6:	4b08      	ldr	r3, [pc, #32]	@ (81074f8 <_dtoa_r+0x5c8>)
 81074d8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 81074dc:	2200      	movs	r2, #0
 81074de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 81074e2:	f7f9 f911 	bl	8100708 <__aeabi_dmul>
 81074e6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 81074ea:	e7c4      	b.n	8107476 <_dtoa_r+0x546>
 81074ec:	0810a940 	.word	0x0810a940
 81074f0:	0810a918 	.word	0x0810a918
 81074f4:	3ff00000 	.word	0x3ff00000
 81074f8:	40240000 	.word	0x40240000
 81074fc:	401c0000 	.word	0x401c0000
 8107500:	40140000 	.word	0x40140000
 8107504:	3fe00000 	.word	0x3fe00000
 8107508:	4631      	mov	r1, r6
 810750a:	4628      	mov	r0, r5
 810750c:	f7f9 f8fc 	bl	8100708 <__aeabi_dmul>
 8107510:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8107514:	9415      	str	r4, [sp, #84]	@ 0x54
 8107516:	4656      	mov	r6, sl
 8107518:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810751c:	f7f9 fba4 	bl	8100c68 <__aeabi_d2iz>
 8107520:	4605      	mov	r5, r0
 8107522:	f7f9 f887 	bl	8100634 <__aeabi_i2d>
 8107526:	4602      	mov	r2, r0
 8107528:	460b      	mov	r3, r1
 810752a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810752e:	f7f8 ff33 	bl	8100398 <__aeabi_dsub>
 8107532:	3530      	adds	r5, #48	@ 0x30
 8107534:	f806 5b01 	strb.w	r5, [r6], #1
 8107538:	4602      	mov	r2, r0
 810753a:	460b      	mov	r3, r1
 810753c:	42a6      	cmp	r6, r4
 810753e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8107542:	f04f 0200 	mov.w	r2, #0
 8107546:	d124      	bne.n	8107592 <_dtoa_r+0x662>
 8107548:	4bac      	ldr	r3, [pc, #688]	@ (81077fc <_dtoa_r+0x8cc>)
 810754a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 810754e:	f7f8 ff25 	bl	810039c <__adddf3>
 8107552:	4602      	mov	r2, r0
 8107554:	460b      	mov	r3, r1
 8107556:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 810755a:	f7f9 fb65 	bl	8100c28 <__aeabi_dcmpgt>
 810755e:	2800      	cmp	r0, #0
 8107560:	d145      	bne.n	81075ee <_dtoa_r+0x6be>
 8107562:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8107566:	49a5      	ldr	r1, [pc, #660]	@ (81077fc <_dtoa_r+0x8cc>)
 8107568:	2000      	movs	r0, #0
 810756a:	f7f8 ff15 	bl	8100398 <__aeabi_dsub>
 810756e:	4602      	mov	r2, r0
 8107570:	460b      	mov	r3, r1
 8107572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8107576:	f7f9 fb39 	bl	8100bec <__aeabi_dcmplt>
 810757a:	2800      	cmp	r0, #0
 810757c:	f43f aef5 	beq.w	810736a <_dtoa_r+0x43a>
 8107580:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8107582:	1e73      	subs	r3, r6, #1
 8107584:	9315      	str	r3, [sp, #84]	@ 0x54
 8107586:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 810758a:	2b30      	cmp	r3, #48	@ 0x30
 810758c:	d0f8      	beq.n	8107580 <_dtoa_r+0x650>
 810758e:	9f04      	ldr	r7, [sp, #16]
 8107590:	e73e      	b.n	8107410 <_dtoa_r+0x4e0>
 8107592:	4b9b      	ldr	r3, [pc, #620]	@ (8107800 <_dtoa_r+0x8d0>)
 8107594:	f7f9 f8b8 	bl	8100708 <__aeabi_dmul>
 8107598:	e9cd 0102 	strd	r0, r1, [sp, #8]
 810759c:	e7bc      	b.n	8107518 <_dtoa_r+0x5e8>
 810759e:	d10c      	bne.n	81075ba <_dtoa_r+0x68a>
 81075a0:	4b98      	ldr	r3, [pc, #608]	@ (8107804 <_dtoa_r+0x8d4>)
 81075a2:	2200      	movs	r2, #0
 81075a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 81075a8:	f7f9 f8ae 	bl	8100708 <__aeabi_dmul>
 81075ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 81075b0:	f7f9 fb30 	bl	8100c14 <__aeabi_dcmpge>
 81075b4:	2800      	cmp	r0, #0
 81075b6:	f000 8157 	beq.w	8107868 <_dtoa_r+0x938>
 81075ba:	2400      	movs	r4, #0
 81075bc:	4625      	mov	r5, r4
 81075be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81075c0:	43db      	mvns	r3, r3
 81075c2:	9304      	str	r3, [sp, #16]
 81075c4:	4656      	mov	r6, sl
 81075c6:	2700      	movs	r7, #0
 81075c8:	4621      	mov	r1, r4
 81075ca:	4658      	mov	r0, fp
 81075cc:	f001 f8b8 	bl	8108740 <_Bfree>
 81075d0:	2d00      	cmp	r5, #0
 81075d2:	d0dc      	beq.n	810758e <_dtoa_r+0x65e>
 81075d4:	b12f      	cbz	r7, 81075e2 <_dtoa_r+0x6b2>
 81075d6:	42af      	cmp	r7, r5
 81075d8:	d003      	beq.n	81075e2 <_dtoa_r+0x6b2>
 81075da:	4639      	mov	r1, r7
 81075dc:	4658      	mov	r0, fp
 81075de:	f001 f8af 	bl	8108740 <_Bfree>
 81075e2:	4629      	mov	r1, r5
 81075e4:	4658      	mov	r0, fp
 81075e6:	f001 f8ab 	bl	8108740 <_Bfree>
 81075ea:	e7d0      	b.n	810758e <_dtoa_r+0x65e>
 81075ec:	9704      	str	r7, [sp, #16]
 81075ee:	4633      	mov	r3, r6
 81075f0:	461e      	mov	r6, r3
 81075f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81075f6:	2a39      	cmp	r2, #57	@ 0x39
 81075f8:	d107      	bne.n	810760a <_dtoa_r+0x6da>
 81075fa:	459a      	cmp	sl, r3
 81075fc:	d1f8      	bne.n	81075f0 <_dtoa_r+0x6c0>
 81075fe:	9a04      	ldr	r2, [sp, #16]
 8107600:	3201      	adds	r2, #1
 8107602:	9204      	str	r2, [sp, #16]
 8107604:	2230      	movs	r2, #48	@ 0x30
 8107606:	f88a 2000 	strb.w	r2, [sl]
 810760a:	781a      	ldrb	r2, [r3, #0]
 810760c:	3201      	adds	r2, #1
 810760e:	701a      	strb	r2, [r3, #0]
 8107610:	e7bd      	b.n	810758e <_dtoa_r+0x65e>
 8107612:	4b7b      	ldr	r3, [pc, #492]	@ (8107800 <_dtoa_r+0x8d0>)
 8107614:	2200      	movs	r2, #0
 8107616:	f7f9 f877 	bl	8100708 <__aeabi_dmul>
 810761a:	2200      	movs	r2, #0
 810761c:	2300      	movs	r3, #0
 810761e:	4604      	mov	r4, r0
 8107620:	460d      	mov	r5, r1
 8107622:	f7f9 fad9 	bl	8100bd8 <__aeabi_dcmpeq>
 8107626:	2800      	cmp	r0, #0
 8107628:	f43f aebb 	beq.w	81073a2 <_dtoa_r+0x472>
 810762c:	e6f0      	b.n	8107410 <_dtoa_r+0x4e0>
 810762e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8107630:	2a00      	cmp	r2, #0
 8107632:	f000 80db 	beq.w	81077ec <_dtoa_r+0x8bc>
 8107636:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8107638:	2a01      	cmp	r2, #1
 810763a:	f300 80bf 	bgt.w	81077bc <_dtoa_r+0x88c>
 810763e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8107640:	2a00      	cmp	r2, #0
 8107642:	f000 80b7 	beq.w	81077b4 <_dtoa_r+0x884>
 8107646:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 810764a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 810764c:	4646      	mov	r6, r8
 810764e:	9a08      	ldr	r2, [sp, #32]
 8107650:	2101      	movs	r1, #1
 8107652:	441a      	add	r2, r3
 8107654:	4658      	mov	r0, fp
 8107656:	4498      	add	r8, r3
 8107658:	9208      	str	r2, [sp, #32]
 810765a:	f001 f96f 	bl	810893c <__i2b>
 810765e:	4605      	mov	r5, r0
 8107660:	b15e      	cbz	r6, 810767a <_dtoa_r+0x74a>
 8107662:	9b08      	ldr	r3, [sp, #32]
 8107664:	2b00      	cmp	r3, #0
 8107666:	dd08      	ble.n	810767a <_dtoa_r+0x74a>
 8107668:	42b3      	cmp	r3, r6
 810766a:	9a08      	ldr	r2, [sp, #32]
 810766c:	bfa8      	it	ge
 810766e:	4633      	movge	r3, r6
 8107670:	eba8 0803 	sub.w	r8, r8, r3
 8107674:	1af6      	subs	r6, r6, r3
 8107676:	1ad3      	subs	r3, r2, r3
 8107678:	9308      	str	r3, [sp, #32]
 810767a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810767c:	b1f3      	cbz	r3, 81076bc <_dtoa_r+0x78c>
 810767e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8107680:	2b00      	cmp	r3, #0
 8107682:	f000 80b7 	beq.w	81077f4 <_dtoa_r+0x8c4>
 8107686:	b18c      	cbz	r4, 81076ac <_dtoa_r+0x77c>
 8107688:	4629      	mov	r1, r5
 810768a:	4622      	mov	r2, r4
 810768c:	4658      	mov	r0, fp
 810768e:	f001 fa15 	bl	8108abc <__pow5mult>
 8107692:	464a      	mov	r2, r9
 8107694:	4601      	mov	r1, r0
 8107696:	4605      	mov	r5, r0
 8107698:	4658      	mov	r0, fp
 810769a:	f001 f965 	bl	8108968 <__multiply>
 810769e:	4649      	mov	r1, r9
 81076a0:	9004      	str	r0, [sp, #16]
 81076a2:	4658      	mov	r0, fp
 81076a4:	f001 f84c 	bl	8108740 <_Bfree>
 81076a8:	9b04      	ldr	r3, [sp, #16]
 81076aa:	4699      	mov	r9, r3
 81076ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81076ae:	1b1a      	subs	r2, r3, r4
 81076b0:	d004      	beq.n	81076bc <_dtoa_r+0x78c>
 81076b2:	4649      	mov	r1, r9
 81076b4:	4658      	mov	r0, fp
 81076b6:	f001 fa01 	bl	8108abc <__pow5mult>
 81076ba:	4681      	mov	r9, r0
 81076bc:	2101      	movs	r1, #1
 81076be:	4658      	mov	r0, fp
 81076c0:	f001 f93c 	bl	810893c <__i2b>
 81076c4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81076c6:	4604      	mov	r4, r0
 81076c8:	2b00      	cmp	r3, #0
 81076ca:	f000 81cf 	beq.w	8107a6c <_dtoa_r+0xb3c>
 81076ce:	461a      	mov	r2, r3
 81076d0:	4601      	mov	r1, r0
 81076d2:	4658      	mov	r0, fp
 81076d4:	f001 f9f2 	bl	8108abc <__pow5mult>
 81076d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81076da:	2b01      	cmp	r3, #1
 81076dc:	4604      	mov	r4, r0
 81076de:	f300 8095 	bgt.w	810780c <_dtoa_r+0x8dc>
 81076e2:	9b02      	ldr	r3, [sp, #8]
 81076e4:	2b00      	cmp	r3, #0
 81076e6:	f040 8087 	bne.w	81077f8 <_dtoa_r+0x8c8>
 81076ea:	9b03      	ldr	r3, [sp, #12]
 81076ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81076f0:	2b00      	cmp	r3, #0
 81076f2:	f040 8089 	bne.w	8107808 <_dtoa_r+0x8d8>
 81076f6:	9b03      	ldr	r3, [sp, #12]
 81076f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 81076fc:	0d1b      	lsrs	r3, r3, #20
 81076fe:	051b      	lsls	r3, r3, #20
 8107700:	b12b      	cbz	r3, 810770e <_dtoa_r+0x7de>
 8107702:	9b08      	ldr	r3, [sp, #32]
 8107704:	3301      	adds	r3, #1
 8107706:	9308      	str	r3, [sp, #32]
 8107708:	f108 0801 	add.w	r8, r8, #1
 810770c:	2301      	movs	r3, #1
 810770e:	930a      	str	r3, [sp, #40]	@ 0x28
 8107710:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8107712:	2b00      	cmp	r3, #0
 8107714:	f000 81b0 	beq.w	8107a78 <_dtoa_r+0xb48>
 8107718:	6923      	ldr	r3, [r4, #16]
 810771a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 810771e:	6918      	ldr	r0, [r3, #16]
 8107720:	f001 f8c0 	bl	81088a4 <__hi0bits>
 8107724:	f1c0 0020 	rsb	r0, r0, #32
 8107728:	9b08      	ldr	r3, [sp, #32]
 810772a:	4418      	add	r0, r3
 810772c:	f010 001f 	ands.w	r0, r0, #31
 8107730:	d077      	beq.n	8107822 <_dtoa_r+0x8f2>
 8107732:	f1c0 0320 	rsb	r3, r0, #32
 8107736:	2b04      	cmp	r3, #4
 8107738:	dd6b      	ble.n	8107812 <_dtoa_r+0x8e2>
 810773a:	9b08      	ldr	r3, [sp, #32]
 810773c:	f1c0 001c 	rsb	r0, r0, #28
 8107740:	4403      	add	r3, r0
 8107742:	4480      	add	r8, r0
 8107744:	4406      	add	r6, r0
 8107746:	9308      	str	r3, [sp, #32]
 8107748:	f1b8 0f00 	cmp.w	r8, #0
 810774c:	dd05      	ble.n	810775a <_dtoa_r+0x82a>
 810774e:	4649      	mov	r1, r9
 8107750:	4642      	mov	r2, r8
 8107752:	4658      	mov	r0, fp
 8107754:	f001 fa0c 	bl	8108b70 <__lshift>
 8107758:	4681      	mov	r9, r0
 810775a:	9b08      	ldr	r3, [sp, #32]
 810775c:	2b00      	cmp	r3, #0
 810775e:	dd05      	ble.n	810776c <_dtoa_r+0x83c>
 8107760:	4621      	mov	r1, r4
 8107762:	461a      	mov	r2, r3
 8107764:	4658      	mov	r0, fp
 8107766:	f001 fa03 	bl	8108b70 <__lshift>
 810776a:	4604      	mov	r4, r0
 810776c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810776e:	2b00      	cmp	r3, #0
 8107770:	d059      	beq.n	8107826 <_dtoa_r+0x8f6>
 8107772:	4621      	mov	r1, r4
 8107774:	4648      	mov	r0, r9
 8107776:	f001 fa67 	bl	8108c48 <__mcmp>
 810777a:	2800      	cmp	r0, #0
 810777c:	da53      	bge.n	8107826 <_dtoa_r+0x8f6>
 810777e:	1e7b      	subs	r3, r7, #1
 8107780:	9304      	str	r3, [sp, #16]
 8107782:	4649      	mov	r1, r9
 8107784:	2300      	movs	r3, #0
 8107786:	220a      	movs	r2, #10
 8107788:	4658      	mov	r0, fp
 810778a:	f000 fffb 	bl	8108784 <__multadd>
 810778e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8107790:	4681      	mov	r9, r0
 8107792:	2b00      	cmp	r3, #0
 8107794:	f000 8172 	beq.w	8107a7c <_dtoa_r+0xb4c>
 8107798:	2300      	movs	r3, #0
 810779a:	4629      	mov	r1, r5
 810779c:	220a      	movs	r2, #10
 810779e:	4658      	mov	r0, fp
 81077a0:	f000 fff0 	bl	8108784 <__multadd>
 81077a4:	9b00      	ldr	r3, [sp, #0]
 81077a6:	2b00      	cmp	r3, #0
 81077a8:	4605      	mov	r5, r0
 81077aa:	dc67      	bgt.n	810787c <_dtoa_r+0x94c>
 81077ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81077ae:	2b02      	cmp	r3, #2
 81077b0:	dc41      	bgt.n	8107836 <_dtoa_r+0x906>
 81077b2:	e063      	b.n	810787c <_dtoa_r+0x94c>
 81077b4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 81077b6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 81077ba:	e746      	b.n	810764a <_dtoa_r+0x71a>
 81077bc:	9b07      	ldr	r3, [sp, #28]
 81077be:	1e5c      	subs	r4, r3, #1
 81077c0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81077c2:	42a3      	cmp	r3, r4
 81077c4:	bfbf      	itttt	lt
 81077c6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 81077c8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 81077ca:	940a      	strlt	r4, [sp, #40]	@ 0x28
 81077cc:	1ae3      	sublt	r3, r4, r3
 81077ce:	bfb4      	ite	lt
 81077d0:	18d2      	addlt	r2, r2, r3
 81077d2:	1b1c      	subge	r4, r3, r4
 81077d4:	9b07      	ldr	r3, [sp, #28]
 81077d6:	bfbc      	itt	lt
 81077d8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 81077da:	2400      	movlt	r4, #0
 81077dc:	2b00      	cmp	r3, #0
 81077de:	bfb5      	itete	lt
 81077e0:	eba8 0603 	sublt.w	r6, r8, r3
 81077e4:	9b07      	ldrge	r3, [sp, #28]
 81077e6:	2300      	movlt	r3, #0
 81077e8:	4646      	movge	r6, r8
 81077ea:	e730      	b.n	810764e <_dtoa_r+0x71e>
 81077ec:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 81077ee:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 81077f0:	4646      	mov	r6, r8
 81077f2:	e735      	b.n	8107660 <_dtoa_r+0x730>
 81077f4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 81077f6:	e75c      	b.n	81076b2 <_dtoa_r+0x782>
 81077f8:	2300      	movs	r3, #0
 81077fa:	e788      	b.n	810770e <_dtoa_r+0x7de>
 81077fc:	3fe00000 	.word	0x3fe00000
 8107800:	40240000 	.word	0x40240000
 8107804:	40140000 	.word	0x40140000
 8107808:	9b02      	ldr	r3, [sp, #8]
 810780a:	e780      	b.n	810770e <_dtoa_r+0x7de>
 810780c:	2300      	movs	r3, #0
 810780e:	930a      	str	r3, [sp, #40]	@ 0x28
 8107810:	e782      	b.n	8107718 <_dtoa_r+0x7e8>
 8107812:	d099      	beq.n	8107748 <_dtoa_r+0x818>
 8107814:	9a08      	ldr	r2, [sp, #32]
 8107816:	331c      	adds	r3, #28
 8107818:	441a      	add	r2, r3
 810781a:	4498      	add	r8, r3
 810781c:	441e      	add	r6, r3
 810781e:	9208      	str	r2, [sp, #32]
 8107820:	e792      	b.n	8107748 <_dtoa_r+0x818>
 8107822:	4603      	mov	r3, r0
 8107824:	e7f6      	b.n	8107814 <_dtoa_r+0x8e4>
 8107826:	9b07      	ldr	r3, [sp, #28]
 8107828:	9704      	str	r7, [sp, #16]
 810782a:	2b00      	cmp	r3, #0
 810782c:	dc20      	bgt.n	8107870 <_dtoa_r+0x940>
 810782e:	9300      	str	r3, [sp, #0]
 8107830:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107832:	2b02      	cmp	r3, #2
 8107834:	dd1e      	ble.n	8107874 <_dtoa_r+0x944>
 8107836:	9b00      	ldr	r3, [sp, #0]
 8107838:	2b00      	cmp	r3, #0
 810783a:	f47f aec0 	bne.w	81075be <_dtoa_r+0x68e>
 810783e:	4621      	mov	r1, r4
 8107840:	2205      	movs	r2, #5
 8107842:	4658      	mov	r0, fp
 8107844:	f000 ff9e 	bl	8108784 <__multadd>
 8107848:	4601      	mov	r1, r0
 810784a:	4604      	mov	r4, r0
 810784c:	4648      	mov	r0, r9
 810784e:	f001 f9fb 	bl	8108c48 <__mcmp>
 8107852:	2800      	cmp	r0, #0
 8107854:	f77f aeb3 	ble.w	81075be <_dtoa_r+0x68e>
 8107858:	4656      	mov	r6, sl
 810785a:	2331      	movs	r3, #49	@ 0x31
 810785c:	f806 3b01 	strb.w	r3, [r6], #1
 8107860:	9b04      	ldr	r3, [sp, #16]
 8107862:	3301      	adds	r3, #1
 8107864:	9304      	str	r3, [sp, #16]
 8107866:	e6ae      	b.n	81075c6 <_dtoa_r+0x696>
 8107868:	9c07      	ldr	r4, [sp, #28]
 810786a:	9704      	str	r7, [sp, #16]
 810786c:	4625      	mov	r5, r4
 810786e:	e7f3      	b.n	8107858 <_dtoa_r+0x928>
 8107870:	9b07      	ldr	r3, [sp, #28]
 8107872:	9300      	str	r3, [sp, #0]
 8107874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8107876:	2b00      	cmp	r3, #0
 8107878:	f000 8104 	beq.w	8107a84 <_dtoa_r+0xb54>
 810787c:	2e00      	cmp	r6, #0
 810787e:	dd05      	ble.n	810788c <_dtoa_r+0x95c>
 8107880:	4629      	mov	r1, r5
 8107882:	4632      	mov	r2, r6
 8107884:	4658      	mov	r0, fp
 8107886:	f001 f973 	bl	8108b70 <__lshift>
 810788a:	4605      	mov	r5, r0
 810788c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810788e:	2b00      	cmp	r3, #0
 8107890:	d05a      	beq.n	8107948 <_dtoa_r+0xa18>
 8107892:	6869      	ldr	r1, [r5, #4]
 8107894:	4658      	mov	r0, fp
 8107896:	f000 ff13 	bl	81086c0 <_Balloc>
 810789a:	4606      	mov	r6, r0
 810789c:	b928      	cbnz	r0, 81078aa <_dtoa_r+0x97a>
 810789e:	4b84      	ldr	r3, [pc, #528]	@ (8107ab0 <_dtoa_r+0xb80>)
 81078a0:	4602      	mov	r2, r0
 81078a2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 81078a6:	f7ff bb5a 	b.w	8106f5e <_dtoa_r+0x2e>
 81078aa:	692a      	ldr	r2, [r5, #16]
 81078ac:	3202      	adds	r2, #2
 81078ae:	0092      	lsls	r2, r2, #2
 81078b0:	f105 010c 	add.w	r1, r5, #12
 81078b4:	300c      	adds	r0, #12
 81078b6:	f7ff fa92 	bl	8106dde <memcpy>
 81078ba:	2201      	movs	r2, #1
 81078bc:	4631      	mov	r1, r6
 81078be:	4658      	mov	r0, fp
 81078c0:	f001 f956 	bl	8108b70 <__lshift>
 81078c4:	f10a 0301 	add.w	r3, sl, #1
 81078c8:	9307      	str	r3, [sp, #28]
 81078ca:	9b00      	ldr	r3, [sp, #0]
 81078cc:	4453      	add	r3, sl
 81078ce:	930b      	str	r3, [sp, #44]	@ 0x2c
 81078d0:	9b02      	ldr	r3, [sp, #8]
 81078d2:	f003 0301 	and.w	r3, r3, #1
 81078d6:	462f      	mov	r7, r5
 81078d8:	930a      	str	r3, [sp, #40]	@ 0x28
 81078da:	4605      	mov	r5, r0
 81078dc:	9b07      	ldr	r3, [sp, #28]
 81078de:	4621      	mov	r1, r4
 81078e0:	3b01      	subs	r3, #1
 81078e2:	4648      	mov	r0, r9
 81078e4:	9300      	str	r3, [sp, #0]
 81078e6:	f7ff fa99 	bl	8106e1c <quorem>
 81078ea:	4639      	mov	r1, r7
 81078ec:	9002      	str	r0, [sp, #8]
 81078ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 81078f2:	4648      	mov	r0, r9
 81078f4:	f001 f9a8 	bl	8108c48 <__mcmp>
 81078f8:	462a      	mov	r2, r5
 81078fa:	9008      	str	r0, [sp, #32]
 81078fc:	4621      	mov	r1, r4
 81078fe:	4658      	mov	r0, fp
 8107900:	f001 f9be 	bl	8108c80 <__mdiff>
 8107904:	68c2      	ldr	r2, [r0, #12]
 8107906:	4606      	mov	r6, r0
 8107908:	bb02      	cbnz	r2, 810794c <_dtoa_r+0xa1c>
 810790a:	4601      	mov	r1, r0
 810790c:	4648      	mov	r0, r9
 810790e:	f001 f99b 	bl	8108c48 <__mcmp>
 8107912:	4602      	mov	r2, r0
 8107914:	4631      	mov	r1, r6
 8107916:	4658      	mov	r0, fp
 8107918:	920e      	str	r2, [sp, #56]	@ 0x38
 810791a:	f000 ff11 	bl	8108740 <_Bfree>
 810791e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107920:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8107922:	9e07      	ldr	r6, [sp, #28]
 8107924:	ea43 0102 	orr.w	r1, r3, r2
 8107928:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810792a:	4319      	orrs	r1, r3
 810792c:	d110      	bne.n	8107950 <_dtoa_r+0xa20>
 810792e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8107932:	d029      	beq.n	8107988 <_dtoa_r+0xa58>
 8107934:	9b08      	ldr	r3, [sp, #32]
 8107936:	2b00      	cmp	r3, #0
 8107938:	dd02      	ble.n	8107940 <_dtoa_r+0xa10>
 810793a:	9b02      	ldr	r3, [sp, #8]
 810793c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8107940:	9b00      	ldr	r3, [sp, #0]
 8107942:	f883 8000 	strb.w	r8, [r3]
 8107946:	e63f      	b.n	81075c8 <_dtoa_r+0x698>
 8107948:	4628      	mov	r0, r5
 810794a:	e7bb      	b.n	81078c4 <_dtoa_r+0x994>
 810794c:	2201      	movs	r2, #1
 810794e:	e7e1      	b.n	8107914 <_dtoa_r+0x9e4>
 8107950:	9b08      	ldr	r3, [sp, #32]
 8107952:	2b00      	cmp	r3, #0
 8107954:	db04      	blt.n	8107960 <_dtoa_r+0xa30>
 8107956:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8107958:	430b      	orrs	r3, r1
 810795a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 810795c:	430b      	orrs	r3, r1
 810795e:	d120      	bne.n	81079a2 <_dtoa_r+0xa72>
 8107960:	2a00      	cmp	r2, #0
 8107962:	dded      	ble.n	8107940 <_dtoa_r+0xa10>
 8107964:	4649      	mov	r1, r9
 8107966:	2201      	movs	r2, #1
 8107968:	4658      	mov	r0, fp
 810796a:	f001 f901 	bl	8108b70 <__lshift>
 810796e:	4621      	mov	r1, r4
 8107970:	4681      	mov	r9, r0
 8107972:	f001 f969 	bl	8108c48 <__mcmp>
 8107976:	2800      	cmp	r0, #0
 8107978:	dc03      	bgt.n	8107982 <_dtoa_r+0xa52>
 810797a:	d1e1      	bne.n	8107940 <_dtoa_r+0xa10>
 810797c:	f018 0f01 	tst.w	r8, #1
 8107980:	d0de      	beq.n	8107940 <_dtoa_r+0xa10>
 8107982:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8107986:	d1d8      	bne.n	810793a <_dtoa_r+0xa0a>
 8107988:	9a00      	ldr	r2, [sp, #0]
 810798a:	2339      	movs	r3, #57	@ 0x39
 810798c:	7013      	strb	r3, [r2, #0]
 810798e:	4633      	mov	r3, r6
 8107990:	461e      	mov	r6, r3
 8107992:	3b01      	subs	r3, #1
 8107994:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8107998:	2a39      	cmp	r2, #57	@ 0x39
 810799a:	d052      	beq.n	8107a42 <_dtoa_r+0xb12>
 810799c:	3201      	adds	r2, #1
 810799e:	701a      	strb	r2, [r3, #0]
 81079a0:	e612      	b.n	81075c8 <_dtoa_r+0x698>
 81079a2:	2a00      	cmp	r2, #0
 81079a4:	dd07      	ble.n	81079b6 <_dtoa_r+0xa86>
 81079a6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 81079aa:	d0ed      	beq.n	8107988 <_dtoa_r+0xa58>
 81079ac:	9a00      	ldr	r2, [sp, #0]
 81079ae:	f108 0301 	add.w	r3, r8, #1
 81079b2:	7013      	strb	r3, [r2, #0]
 81079b4:	e608      	b.n	81075c8 <_dtoa_r+0x698>
 81079b6:	9b07      	ldr	r3, [sp, #28]
 81079b8:	9a07      	ldr	r2, [sp, #28]
 81079ba:	f803 8c01 	strb.w	r8, [r3, #-1]
 81079be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81079c0:	4293      	cmp	r3, r2
 81079c2:	d028      	beq.n	8107a16 <_dtoa_r+0xae6>
 81079c4:	4649      	mov	r1, r9
 81079c6:	2300      	movs	r3, #0
 81079c8:	220a      	movs	r2, #10
 81079ca:	4658      	mov	r0, fp
 81079cc:	f000 feda 	bl	8108784 <__multadd>
 81079d0:	42af      	cmp	r7, r5
 81079d2:	4681      	mov	r9, r0
 81079d4:	f04f 0300 	mov.w	r3, #0
 81079d8:	f04f 020a 	mov.w	r2, #10
 81079dc:	4639      	mov	r1, r7
 81079de:	4658      	mov	r0, fp
 81079e0:	d107      	bne.n	81079f2 <_dtoa_r+0xac2>
 81079e2:	f000 fecf 	bl	8108784 <__multadd>
 81079e6:	4607      	mov	r7, r0
 81079e8:	4605      	mov	r5, r0
 81079ea:	9b07      	ldr	r3, [sp, #28]
 81079ec:	3301      	adds	r3, #1
 81079ee:	9307      	str	r3, [sp, #28]
 81079f0:	e774      	b.n	81078dc <_dtoa_r+0x9ac>
 81079f2:	f000 fec7 	bl	8108784 <__multadd>
 81079f6:	4629      	mov	r1, r5
 81079f8:	4607      	mov	r7, r0
 81079fa:	2300      	movs	r3, #0
 81079fc:	220a      	movs	r2, #10
 81079fe:	4658      	mov	r0, fp
 8107a00:	f000 fec0 	bl	8108784 <__multadd>
 8107a04:	4605      	mov	r5, r0
 8107a06:	e7f0      	b.n	81079ea <_dtoa_r+0xaba>
 8107a08:	9b00      	ldr	r3, [sp, #0]
 8107a0a:	2b00      	cmp	r3, #0
 8107a0c:	bfcc      	ite	gt
 8107a0e:	461e      	movgt	r6, r3
 8107a10:	2601      	movle	r6, #1
 8107a12:	4456      	add	r6, sl
 8107a14:	2700      	movs	r7, #0
 8107a16:	4649      	mov	r1, r9
 8107a18:	2201      	movs	r2, #1
 8107a1a:	4658      	mov	r0, fp
 8107a1c:	f001 f8a8 	bl	8108b70 <__lshift>
 8107a20:	4621      	mov	r1, r4
 8107a22:	4681      	mov	r9, r0
 8107a24:	f001 f910 	bl	8108c48 <__mcmp>
 8107a28:	2800      	cmp	r0, #0
 8107a2a:	dcb0      	bgt.n	810798e <_dtoa_r+0xa5e>
 8107a2c:	d102      	bne.n	8107a34 <_dtoa_r+0xb04>
 8107a2e:	f018 0f01 	tst.w	r8, #1
 8107a32:	d1ac      	bne.n	810798e <_dtoa_r+0xa5e>
 8107a34:	4633      	mov	r3, r6
 8107a36:	461e      	mov	r6, r3
 8107a38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8107a3c:	2a30      	cmp	r2, #48	@ 0x30
 8107a3e:	d0fa      	beq.n	8107a36 <_dtoa_r+0xb06>
 8107a40:	e5c2      	b.n	81075c8 <_dtoa_r+0x698>
 8107a42:	459a      	cmp	sl, r3
 8107a44:	d1a4      	bne.n	8107990 <_dtoa_r+0xa60>
 8107a46:	9b04      	ldr	r3, [sp, #16]
 8107a48:	3301      	adds	r3, #1
 8107a4a:	9304      	str	r3, [sp, #16]
 8107a4c:	2331      	movs	r3, #49	@ 0x31
 8107a4e:	f88a 3000 	strb.w	r3, [sl]
 8107a52:	e5b9      	b.n	81075c8 <_dtoa_r+0x698>
 8107a54:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8107a56:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8107ab4 <_dtoa_r+0xb84>
 8107a5a:	b11b      	cbz	r3, 8107a64 <_dtoa_r+0xb34>
 8107a5c:	f10a 0308 	add.w	r3, sl, #8
 8107a60:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8107a62:	6013      	str	r3, [r2, #0]
 8107a64:	4650      	mov	r0, sl
 8107a66:	b019      	add	sp, #100	@ 0x64
 8107a68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107a6e:	2b01      	cmp	r3, #1
 8107a70:	f77f ae37 	ble.w	81076e2 <_dtoa_r+0x7b2>
 8107a74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8107a76:	930a      	str	r3, [sp, #40]	@ 0x28
 8107a78:	2001      	movs	r0, #1
 8107a7a:	e655      	b.n	8107728 <_dtoa_r+0x7f8>
 8107a7c:	9b00      	ldr	r3, [sp, #0]
 8107a7e:	2b00      	cmp	r3, #0
 8107a80:	f77f aed6 	ble.w	8107830 <_dtoa_r+0x900>
 8107a84:	4656      	mov	r6, sl
 8107a86:	4621      	mov	r1, r4
 8107a88:	4648      	mov	r0, r9
 8107a8a:	f7ff f9c7 	bl	8106e1c <quorem>
 8107a8e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8107a92:	f806 8b01 	strb.w	r8, [r6], #1
 8107a96:	9b00      	ldr	r3, [sp, #0]
 8107a98:	eba6 020a 	sub.w	r2, r6, sl
 8107a9c:	4293      	cmp	r3, r2
 8107a9e:	ddb3      	ble.n	8107a08 <_dtoa_r+0xad8>
 8107aa0:	4649      	mov	r1, r9
 8107aa2:	2300      	movs	r3, #0
 8107aa4:	220a      	movs	r2, #10
 8107aa6:	4658      	mov	r0, fp
 8107aa8:	f000 fe6c 	bl	8108784 <__multadd>
 8107aac:	4681      	mov	r9, r0
 8107aae:	e7ea      	b.n	8107a86 <_dtoa_r+0xb56>
 8107ab0:	0810a82d 	.word	0x0810a82d
 8107ab4:	0810a7b1 	.word	0x0810a7b1

08107ab8 <rshift>:
 8107ab8:	6903      	ldr	r3, [r0, #16]
 8107aba:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8107abe:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8107ac2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8107ac6:	f100 0414 	add.w	r4, r0, #20
 8107aca:	dd45      	ble.n	8107b58 <rshift+0xa0>
 8107acc:	f011 011f 	ands.w	r1, r1, #31
 8107ad0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8107ad4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8107ad8:	d10c      	bne.n	8107af4 <rshift+0x3c>
 8107ada:	f100 0710 	add.w	r7, r0, #16
 8107ade:	4629      	mov	r1, r5
 8107ae0:	42b1      	cmp	r1, r6
 8107ae2:	d334      	bcc.n	8107b4e <rshift+0x96>
 8107ae4:	1a9b      	subs	r3, r3, r2
 8107ae6:	009b      	lsls	r3, r3, #2
 8107ae8:	1eea      	subs	r2, r5, #3
 8107aea:	4296      	cmp	r6, r2
 8107aec:	bf38      	it	cc
 8107aee:	2300      	movcc	r3, #0
 8107af0:	4423      	add	r3, r4
 8107af2:	e015      	b.n	8107b20 <rshift+0x68>
 8107af4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8107af8:	f1c1 0820 	rsb	r8, r1, #32
 8107afc:	40cf      	lsrs	r7, r1
 8107afe:	f105 0e04 	add.w	lr, r5, #4
 8107b02:	46a1      	mov	r9, r4
 8107b04:	4576      	cmp	r6, lr
 8107b06:	46f4      	mov	ip, lr
 8107b08:	d815      	bhi.n	8107b36 <rshift+0x7e>
 8107b0a:	1a9a      	subs	r2, r3, r2
 8107b0c:	0092      	lsls	r2, r2, #2
 8107b0e:	3a04      	subs	r2, #4
 8107b10:	3501      	adds	r5, #1
 8107b12:	42ae      	cmp	r6, r5
 8107b14:	bf38      	it	cc
 8107b16:	2200      	movcc	r2, #0
 8107b18:	18a3      	adds	r3, r4, r2
 8107b1a:	50a7      	str	r7, [r4, r2]
 8107b1c:	b107      	cbz	r7, 8107b20 <rshift+0x68>
 8107b1e:	3304      	adds	r3, #4
 8107b20:	1b1a      	subs	r2, r3, r4
 8107b22:	42a3      	cmp	r3, r4
 8107b24:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8107b28:	bf08      	it	eq
 8107b2a:	2300      	moveq	r3, #0
 8107b2c:	6102      	str	r2, [r0, #16]
 8107b2e:	bf08      	it	eq
 8107b30:	6143      	streq	r3, [r0, #20]
 8107b32:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8107b36:	f8dc c000 	ldr.w	ip, [ip]
 8107b3a:	fa0c fc08 	lsl.w	ip, ip, r8
 8107b3e:	ea4c 0707 	orr.w	r7, ip, r7
 8107b42:	f849 7b04 	str.w	r7, [r9], #4
 8107b46:	f85e 7b04 	ldr.w	r7, [lr], #4
 8107b4a:	40cf      	lsrs	r7, r1
 8107b4c:	e7da      	b.n	8107b04 <rshift+0x4c>
 8107b4e:	f851 cb04 	ldr.w	ip, [r1], #4
 8107b52:	f847 cf04 	str.w	ip, [r7, #4]!
 8107b56:	e7c3      	b.n	8107ae0 <rshift+0x28>
 8107b58:	4623      	mov	r3, r4
 8107b5a:	e7e1      	b.n	8107b20 <rshift+0x68>

08107b5c <__hexdig_fun>:
 8107b5c:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8107b60:	2b09      	cmp	r3, #9
 8107b62:	d802      	bhi.n	8107b6a <__hexdig_fun+0xe>
 8107b64:	3820      	subs	r0, #32
 8107b66:	b2c0      	uxtb	r0, r0
 8107b68:	4770      	bx	lr
 8107b6a:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8107b6e:	2b05      	cmp	r3, #5
 8107b70:	d801      	bhi.n	8107b76 <__hexdig_fun+0x1a>
 8107b72:	3847      	subs	r0, #71	@ 0x47
 8107b74:	e7f7      	b.n	8107b66 <__hexdig_fun+0xa>
 8107b76:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8107b7a:	2b05      	cmp	r3, #5
 8107b7c:	d801      	bhi.n	8107b82 <__hexdig_fun+0x26>
 8107b7e:	3827      	subs	r0, #39	@ 0x27
 8107b80:	e7f1      	b.n	8107b66 <__hexdig_fun+0xa>
 8107b82:	2000      	movs	r0, #0
 8107b84:	4770      	bx	lr
	...

08107b88 <__gethex>:
 8107b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107b8c:	b085      	sub	sp, #20
 8107b8e:	468a      	mov	sl, r1
 8107b90:	9302      	str	r3, [sp, #8]
 8107b92:	680b      	ldr	r3, [r1, #0]
 8107b94:	9001      	str	r0, [sp, #4]
 8107b96:	4690      	mov	r8, r2
 8107b98:	1c9c      	adds	r4, r3, #2
 8107b9a:	46a1      	mov	r9, r4
 8107b9c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8107ba0:	2830      	cmp	r0, #48	@ 0x30
 8107ba2:	d0fa      	beq.n	8107b9a <__gethex+0x12>
 8107ba4:	eba9 0303 	sub.w	r3, r9, r3
 8107ba8:	f1a3 0b02 	sub.w	fp, r3, #2
 8107bac:	f7ff ffd6 	bl	8107b5c <__hexdig_fun>
 8107bb0:	4605      	mov	r5, r0
 8107bb2:	2800      	cmp	r0, #0
 8107bb4:	d168      	bne.n	8107c88 <__gethex+0x100>
 8107bb6:	49a0      	ldr	r1, [pc, #640]	@ (8107e38 <__gethex+0x2b0>)
 8107bb8:	2201      	movs	r2, #1
 8107bba:	4648      	mov	r0, r9
 8107bbc:	f7ff f8c4 	bl	8106d48 <strncmp>
 8107bc0:	4607      	mov	r7, r0
 8107bc2:	2800      	cmp	r0, #0
 8107bc4:	d167      	bne.n	8107c96 <__gethex+0x10e>
 8107bc6:	f899 0001 	ldrb.w	r0, [r9, #1]
 8107bca:	4626      	mov	r6, r4
 8107bcc:	f7ff ffc6 	bl	8107b5c <__hexdig_fun>
 8107bd0:	2800      	cmp	r0, #0
 8107bd2:	d062      	beq.n	8107c9a <__gethex+0x112>
 8107bd4:	4623      	mov	r3, r4
 8107bd6:	7818      	ldrb	r0, [r3, #0]
 8107bd8:	2830      	cmp	r0, #48	@ 0x30
 8107bda:	4699      	mov	r9, r3
 8107bdc:	f103 0301 	add.w	r3, r3, #1
 8107be0:	d0f9      	beq.n	8107bd6 <__gethex+0x4e>
 8107be2:	f7ff ffbb 	bl	8107b5c <__hexdig_fun>
 8107be6:	fab0 f580 	clz	r5, r0
 8107bea:	096d      	lsrs	r5, r5, #5
 8107bec:	f04f 0b01 	mov.w	fp, #1
 8107bf0:	464a      	mov	r2, r9
 8107bf2:	4616      	mov	r6, r2
 8107bf4:	3201      	adds	r2, #1
 8107bf6:	7830      	ldrb	r0, [r6, #0]
 8107bf8:	f7ff ffb0 	bl	8107b5c <__hexdig_fun>
 8107bfc:	2800      	cmp	r0, #0
 8107bfe:	d1f8      	bne.n	8107bf2 <__gethex+0x6a>
 8107c00:	498d      	ldr	r1, [pc, #564]	@ (8107e38 <__gethex+0x2b0>)
 8107c02:	2201      	movs	r2, #1
 8107c04:	4630      	mov	r0, r6
 8107c06:	f7ff f89f 	bl	8106d48 <strncmp>
 8107c0a:	2800      	cmp	r0, #0
 8107c0c:	d13f      	bne.n	8107c8e <__gethex+0x106>
 8107c0e:	b944      	cbnz	r4, 8107c22 <__gethex+0x9a>
 8107c10:	1c74      	adds	r4, r6, #1
 8107c12:	4622      	mov	r2, r4
 8107c14:	4616      	mov	r6, r2
 8107c16:	3201      	adds	r2, #1
 8107c18:	7830      	ldrb	r0, [r6, #0]
 8107c1a:	f7ff ff9f 	bl	8107b5c <__hexdig_fun>
 8107c1e:	2800      	cmp	r0, #0
 8107c20:	d1f8      	bne.n	8107c14 <__gethex+0x8c>
 8107c22:	1ba4      	subs	r4, r4, r6
 8107c24:	00a7      	lsls	r7, r4, #2
 8107c26:	7833      	ldrb	r3, [r6, #0]
 8107c28:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8107c2c:	2b50      	cmp	r3, #80	@ 0x50
 8107c2e:	d13e      	bne.n	8107cae <__gethex+0x126>
 8107c30:	7873      	ldrb	r3, [r6, #1]
 8107c32:	2b2b      	cmp	r3, #43	@ 0x2b
 8107c34:	d033      	beq.n	8107c9e <__gethex+0x116>
 8107c36:	2b2d      	cmp	r3, #45	@ 0x2d
 8107c38:	d034      	beq.n	8107ca4 <__gethex+0x11c>
 8107c3a:	1c71      	adds	r1, r6, #1
 8107c3c:	2400      	movs	r4, #0
 8107c3e:	7808      	ldrb	r0, [r1, #0]
 8107c40:	f7ff ff8c 	bl	8107b5c <__hexdig_fun>
 8107c44:	1e43      	subs	r3, r0, #1
 8107c46:	b2db      	uxtb	r3, r3
 8107c48:	2b18      	cmp	r3, #24
 8107c4a:	d830      	bhi.n	8107cae <__gethex+0x126>
 8107c4c:	f1a0 0210 	sub.w	r2, r0, #16
 8107c50:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8107c54:	f7ff ff82 	bl	8107b5c <__hexdig_fun>
 8107c58:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8107c5c:	fa5f fc8c 	uxtb.w	ip, ip
 8107c60:	f1bc 0f18 	cmp.w	ip, #24
 8107c64:	f04f 030a 	mov.w	r3, #10
 8107c68:	d91e      	bls.n	8107ca8 <__gethex+0x120>
 8107c6a:	b104      	cbz	r4, 8107c6e <__gethex+0xe6>
 8107c6c:	4252      	negs	r2, r2
 8107c6e:	4417      	add	r7, r2
 8107c70:	f8ca 1000 	str.w	r1, [sl]
 8107c74:	b1ed      	cbz	r5, 8107cb2 <__gethex+0x12a>
 8107c76:	f1bb 0f00 	cmp.w	fp, #0
 8107c7a:	bf0c      	ite	eq
 8107c7c:	2506      	moveq	r5, #6
 8107c7e:	2500      	movne	r5, #0
 8107c80:	4628      	mov	r0, r5
 8107c82:	b005      	add	sp, #20
 8107c84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107c88:	2500      	movs	r5, #0
 8107c8a:	462c      	mov	r4, r5
 8107c8c:	e7b0      	b.n	8107bf0 <__gethex+0x68>
 8107c8e:	2c00      	cmp	r4, #0
 8107c90:	d1c7      	bne.n	8107c22 <__gethex+0x9a>
 8107c92:	4627      	mov	r7, r4
 8107c94:	e7c7      	b.n	8107c26 <__gethex+0x9e>
 8107c96:	464e      	mov	r6, r9
 8107c98:	462f      	mov	r7, r5
 8107c9a:	2501      	movs	r5, #1
 8107c9c:	e7c3      	b.n	8107c26 <__gethex+0x9e>
 8107c9e:	2400      	movs	r4, #0
 8107ca0:	1cb1      	adds	r1, r6, #2
 8107ca2:	e7cc      	b.n	8107c3e <__gethex+0xb6>
 8107ca4:	2401      	movs	r4, #1
 8107ca6:	e7fb      	b.n	8107ca0 <__gethex+0x118>
 8107ca8:	fb03 0002 	mla	r0, r3, r2, r0
 8107cac:	e7ce      	b.n	8107c4c <__gethex+0xc4>
 8107cae:	4631      	mov	r1, r6
 8107cb0:	e7de      	b.n	8107c70 <__gethex+0xe8>
 8107cb2:	eba6 0309 	sub.w	r3, r6, r9
 8107cb6:	3b01      	subs	r3, #1
 8107cb8:	4629      	mov	r1, r5
 8107cba:	2b07      	cmp	r3, #7
 8107cbc:	dc0a      	bgt.n	8107cd4 <__gethex+0x14c>
 8107cbe:	9801      	ldr	r0, [sp, #4]
 8107cc0:	f000 fcfe 	bl	81086c0 <_Balloc>
 8107cc4:	4604      	mov	r4, r0
 8107cc6:	b940      	cbnz	r0, 8107cda <__gethex+0x152>
 8107cc8:	4b5c      	ldr	r3, [pc, #368]	@ (8107e3c <__gethex+0x2b4>)
 8107cca:	4602      	mov	r2, r0
 8107ccc:	21e4      	movs	r1, #228	@ 0xe4
 8107cce:	485c      	ldr	r0, [pc, #368]	@ (8107e40 <__gethex+0x2b8>)
 8107cd0:	f001 fa96 	bl	8109200 <__assert_func>
 8107cd4:	3101      	adds	r1, #1
 8107cd6:	105b      	asrs	r3, r3, #1
 8107cd8:	e7ef      	b.n	8107cba <__gethex+0x132>
 8107cda:	f100 0a14 	add.w	sl, r0, #20
 8107cde:	2300      	movs	r3, #0
 8107ce0:	4655      	mov	r5, sl
 8107ce2:	469b      	mov	fp, r3
 8107ce4:	45b1      	cmp	r9, r6
 8107ce6:	d337      	bcc.n	8107d58 <__gethex+0x1d0>
 8107ce8:	f845 bb04 	str.w	fp, [r5], #4
 8107cec:	eba5 050a 	sub.w	r5, r5, sl
 8107cf0:	10ad      	asrs	r5, r5, #2
 8107cf2:	6125      	str	r5, [r4, #16]
 8107cf4:	4658      	mov	r0, fp
 8107cf6:	f000 fdd5 	bl	81088a4 <__hi0bits>
 8107cfa:	016d      	lsls	r5, r5, #5
 8107cfc:	f8d8 6000 	ldr.w	r6, [r8]
 8107d00:	1a2d      	subs	r5, r5, r0
 8107d02:	42b5      	cmp	r5, r6
 8107d04:	dd54      	ble.n	8107db0 <__gethex+0x228>
 8107d06:	1bad      	subs	r5, r5, r6
 8107d08:	4629      	mov	r1, r5
 8107d0a:	4620      	mov	r0, r4
 8107d0c:	f001 f969 	bl	8108fe2 <__any_on>
 8107d10:	4681      	mov	r9, r0
 8107d12:	b178      	cbz	r0, 8107d34 <__gethex+0x1ac>
 8107d14:	1e6b      	subs	r3, r5, #1
 8107d16:	1159      	asrs	r1, r3, #5
 8107d18:	f003 021f 	and.w	r2, r3, #31
 8107d1c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8107d20:	f04f 0901 	mov.w	r9, #1
 8107d24:	fa09 f202 	lsl.w	r2, r9, r2
 8107d28:	420a      	tst	r2, r1
 8107d2a:	d003      	beq.n	8107d34 <__gethex+0x1ac>
 8107d2c:	454b      	cmp	r3, r9
 8107d2e:	dc36      	bgt.n	8107d9e <__gethex+0x216>
 8107d30:	f04f 0902 	mov.w	r9, #2
 8107d34:	4629      	mov	r1, r5
 8107d36:	4620      	mov	r0, r4
 8107d38:	f7ff febe 	bl	8107ab8 <rshift>
 8107d3c:	442f      	add	r7, r5
 8107d3e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8107d42:	42bb      	cmp	r3, r7
 8107d44:	da42      	bge.n	8107dcc <__gethex+0x244>
 8107d46:	9801      	ldr	r0, [sp, #4]
 8107d48:	4621      	mov	r1, r4
 8107d4a:	f000 fcf9 	bl	8108740 <_Bfree>
 8107d4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8107d50:	2300      	movs	r3, #0
 8107d52:	6013      	str	r3, [r2, #0]
 8107d54:	25a3      	movs	r5, #163	@ 0xa3
 8107d56:	e793      	b.n	8107c80 <__gethex+0xf8>
 8107d58:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8107d5c:	2a2e      	cmp	r2, #46	@ 0x2e
 8107d5e:	d012      	beq.n	8107d86 <__gethex+0x1fe>
 8107d60:	2b20      	cmp	r3, #32
 8107d62:	d104      	bne.n	8107d6e <__gethex+0x1e6>
 8107d64:	f845 bb04 	str.w	fp, [r5], #4
 8107d68:	f04f 0b00 	mov.w	fp, #0
 8107d6c:	465b      	mov	r3, fp
 8107d6e:	7830      	ldrb	r0, [r6, #0]
 8107d70:	9303      	str	r3, [sp, #12]
 8107d72:	f7ff fef3 	bl	8107b5c <__hexdig_fun>
 8107d76:	9b03      	ldr	r3, [sp, #12]
 8107d78:	f000 000f 	and.w	r0, r0, #15
 8107d7c:	4098      	lsls	r0, r3
 8107d7e:	ea4b 0b00 	orr.w	fp, fp, r0
 8107d82:	3304      	adds	r3, #4
 8107d84:	e7ae      	b.n	8107ce4 <__gethex+0x15c>
 8107d86:	45b1      	cmp	r9, r6
 8107d88:	d8ea      	bhi.n	8107d60 <__gethex+0x1d8>
 8107d8a:	492b      	ldr	r1, [pc, #172]	@ (8107e38 <__gethex+0x2b0>)
 8107d8c:	9303      	str	r3, [sp, #12]
 8107d8e:	2201      	movs	r2, #1
 8107d90:	4630      	mov	r0, r6
 8107d92:	f7fe ffd9 	bl	8106d48 <strncmp>
 8107d96:	9b03      	ldr	r3, [sp, #12]
 8107d98:	2800      	cmp	r0, #0
 8107d9a:	d1e1      	bne.n	8107d60 <__gethex+0x1d8>
 8107d9c:	e7a2      	b.n	8107ce4 <__gethex+0x15c>
 8107d9e:	1ea9      	subs	r1, r5, #2
 8107da0:	4620      	mov	r0, r4
 8107da2:	f001 f91e 	bl	8108fe2 <__any_on>
 8107da6:	2800      	cmp	r0, #0
 8107da8:	d0c2      	beq.n	8107d30 <__gethex+0x1a8>
 8107daa:	f04f 0903 	mov.w	r9, #3
 8107dae:	e7c1      	b.n	8107d34 <__gethex+0x1ac>
 8107db0:	da09      	bge.n	8107dc6 <__gethex+0x23e>
 8107db2:	1b75      	subs	r5, r6, r5
 8107db4:	4621      	mov	r1, r4
 8107db6:	9801      	ldr	r0, [sp, #4]
 8107db8:	462a      	mov	r2, r5
 8107dba:	f000 fed9 	bl	8108b70 <__lshift>
 8107dbe:	1b7f      	subs	r7, r7, r5
 8107dc0:	4604      	mov	r4, r0
 8107dc2:	f100 0a14 	add.w	sl, r0, #20
 8107dc6:	f04f 0900 	mov.w	r9, #0
 8107dca:	e7b8      	b.n	8107d3e <__gethex+0x1b6>
 8107dcc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8107dd0:	42bd      	cmp	r5, r7
 8107dd2:	dd6f      	ble.n	8107eb4 <__gethex+0x32c>
 8107dd4:	1bed      	subs	r5, r5, r7
 8107dd6:	42ae      	cmp	r6, r5
 8107dd8:	dc34      	bgt.n	8107e44 <__gethex+0x2bc>
 8107dda:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8107dde:	2b02      	cmp	r3, #2
 8107de0:	d022      	beq.n	8107e28 <__gethex+0x2a0>
 8107de2:	2b03      	cmp	r3, #3
 8107de4:	d024      	beq.n	8107e30 <__gethex+0x2a8>
 8107de6:	2b01      	cmp	r3, #1
 8107de8:	d115      	bne.n	8107e16 <__gethex+0x28e>
 8107dea:	42ae      	cmp	r6, r5
 8107dec:	d113      	bne.n	8107e16 <__gethex+0x28e>
 8107dee:	2e01      	cmp	r6, #1
 8107df0:	d10b      	bne.n	8107e0a <__gethex+0x282>
 8107df2:	9a02      	ldr	r2, [sp, #8]
 8107df4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8107df8:	6013      	str	r3, [r2, #0]
 8107dfa:	2301      	movs	r3, #1
 8107dfc:	6123      	str	r3, [r4, #16]
 8107dfe:	f8ca 3000 	str.w	r3, [sl]
 8107e02:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8107e04:	2562      	movs	r5, #98	@ 0x62
 8107e06:	601c      	str	r4, [r3, #0]
 8107e08:	e73a      	b.n	8107c80 <__gethex+0xf8>
 8107e0a:	1e71      	subs	r1, r6, #1
 8107e0c:	4620      	mov	r0, r4
 8107e0e:	f001 f8e8 	bl	8108fe2 <__any_on>
 8107e12:	2800      	cmp	r0, #0
 8107e14:	d1ed      	bne.n	8107df2 <__gethex+0x26a>
 8107e16:	9801      	ldr	r0, [sp, #4]
 8107e18:	4621      	mov	r1, r4
 8107e1a:	f000 fc91 	bl	8108740 <_Bfree>
 8107e1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8107e20:	2300      	movs	r3, #0
 8107e22:	6013      	str	r3, [r2, #0]
 8107e24:	2550      	movs	r5, #80	@ 0x50
 8107e26:	e72b      	b.n	8107c80 <__gethex+0xf8>
 8107e28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8107e2a:	2b00      	cmp	r3, #0
 8107e2c:	d1f3      	bne.n	8107e16 <__gethex+0x28e>
 8107e2e:	e7e0      	b.n	8107df2 <__gethex+0x26a>
 8107e30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8107e32:	2b00      	cmp	r3, #0
 8107e34:	d1dd      	bne.n	8107df2 <__gethex+0x26a>
 8107e36:	e7ee      	b.n	8107e16 <__gethex+0x28e>
 8107e38:	0810a655 	.word	0x0810a655
 8107e3c:	0810a82d 	.word	0x0810a82d
 8107e40:	0810a83e 	.word	0x0810a83e
 8107e44:	1e6f      	subs	r7, r5, #1
 8107e46:	f1b9 0f00 	cmp.w	r9, #0
 8107e4a:	d130      	bne.n	8107eae <__gethex+0x326>
 8107e4c:	b127      	cbz	r7, 8107e58 <__gethex+0x2d0>
 8107e4e:	4639      	mov	r1, r7
 8107e50:	4620      	mov	r0, r4
 8107e52:	f001 f8c6 	bl	8108fe2 <__any_on>
 8107e56:	4681      	mov	r9, r0
 8107e58:	117a      	asrs	r2, r7, #5
 8107e5a:	2301      	movs	r3, #1
 8107e5c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8107e60:	f007 071f 	and.w	r7, r7, #31
 8107e64:	40bb      	lsls	r3, r7
 8107e66:	4213      	tst	r3, r2
 8107e68:	4629      	mov	r1, r5
 8107e6a:	4620      	mov	r0, r4
 8107e6c:	bf18      	it	ne
 8107e6e:	f049 0902 	orrne.w	r9, r9, #2
 8107e72:	f7ff fe21 	bl	8107ab8 <rshift>
 8107e76:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8107e7a:	1b76      	subs	r6, r6, r5
 8107e7c:	2502      	movs	r5, #2
 8107e7e:	f1b9 0f00 	cmp.w	r9, #0
 8107e82:	d047      	beq.n	8107f14 <__gethex+0x38c>
 8107e84:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8107e88:	2b02      	cmp	r3, #2
 8107e8a:	d015      	beq.n	8107eb8 <__gethex+0x330>
 8107e8c:	2b03      	cmp	r3, #3
 8107e8e:	d017      	beq.n	8107ec0 <__gethex+0x338>
 8107e90:	2b01      	cmp	r3, #1
 8107e92:	d109      	bne.n	8107ea8 <__gethex+0x320>
 8107e94:	f019 0f02 	tst.w	r9, #2
 8107e98:	d006      	beq.n	8107ea8 <__gethex+0x320>
 8107e9a:	f8da 3000 	ldr.w	r3, [sl]
 8107e9e:	ea49 0903 	orr.w	r9, r9, r3
 8107ea2:	f019 0f01 	tst.w	r9, #1
 8107ea6:	d10e      	bne.n	8107ec6 <__gethex+0x33e>
 8107ea8:	f045 0510 	orr.w	r5, r5, #16
 8107eac:	e032      	b.n	8107f14 <__gethex+0x38c>
 8107eae:	f04f 0901 	mov.w	r9, #1
 8107eb2:	e7d1      	b.n	8107e58 <__gethex+0x2d0>
 8107eb4:	2501      	movs	r5, #1
 8107eb6:	e7e2      	b.n	8107e7e <__gethex+0x2f6>
 8107eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8107eba:	f1c3 0301 	rsb	r3, r3, #1
 8107ebe:	930f      	str	r3, [sp, #60]	@ 0x3c
 8107ec0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8107ec2:	2b00      	cmp	r3, #0
 8107ec4:	d0f0      	beq.n	8107ea8 <__gethex+0x320>
 8107ec6:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8107eca:	f104 0314 	add.w	r3, r4, #20
 8107ece:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8107ed2:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8107ed6:	f04f 0c00 	mov.w	ip, #0
 8107eda:	4618      	mov	r0, r3
 8107edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8107ee0:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8107ee4:	d01b      	beq.n	8107f1e <__gethex+0x396>
 8107ee6:	3201      	adds	r2, #1
 8107ee8:	6002      	str	r2, [r0, #0]
 8107eea:	2d02      	cmp	r5, #2
 8107eec:	f104 0314 	add.w	r3, r4, #20
 8107ef0:	d13c      	bne.n	8107f6c <__gethex+0x3e4>
 8107ef2:	f8d8 2000 	ldr.w	r2, [r8]
 8107ef6:	3a01      	subs	r2, #1
 8107ef8:	42b2      	cmp	r2, r6
 8107efa:	d109      	bne.n	8107f10 <__gethex+0x388>
 8107efc:	1171      	asrs	r1, r6, #5
 8107efe:	2201      	movs	r2, #1
 8107f00:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8107f04:	f006 061f 	and.w	r6, r6, #31
 8107f08:	fa02 f606 	lsl.w	r6, r2, r6
 8107f0c:	421e      	tst	r6, r3
 8107f0e:	d13a      	bne.n	8107f86 <__gethex+0x3fe>
 8107f10:	f045 0520 	orr.w	r5, r5, #32
 8107f14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8107f16:	601c      	str	r4, [r3, #0]
 8107f18:	9b02      	ldr	r3, [sp, #8]
 8107f1a:	601f      	str	r7, [r3, #0]
 8107f1c:	e6b0      	b.n	8107c80 <__gethex+0xf8>
 8107f1e:	4299      	cmp	r1, r3
 8107f20:	f843 cc04 	str.w	ip, [r3, #-4]
 8107f24:	d8d9      	bhi.n	8107eda <__gethex+0x352>
 8107f26:	68a3      	ldr	r3, [r4, #8]
 8107f28:	459b      	cmp	fp, r3
 8107f2a:	db17      	blt.n	8107f5c <__gethex+0x3d4>
 8107f2c:	6861      	ldr	r1, [r4, #4]
 8107f2e:	9801      	ldr	r0, [sp, #4]
 8107f30:	3101      	adds	r1, #1
 8107f32:	f000 fbc5 	bl	81086c0 <_Balloc>
 8107f36:	4681      	mov	r9, r0
 8107f38:	b918      	cbnz	r0, 8107f42 <__gethex+0x3ba>
 8107f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8107fa4 <__gethex+0x41c>)
 8107f3c:	4602      	mov	r2, r0
 8107f3e:	2184      	movs	r1, #132	@ 0x84
 8107f40:	e6c5      	b.n	8107cce <__gethex+0x146>
 8107f42:	6922      	ldr	r2, [r4, #16]
 8107f44:	3202      	adds	r2, #2
 8107f46:	f104 010c 	add.w	r1, r4, #12
 8107f4a:	0092      	lsls	r2, r2, #2
 8107f4c:	300c      	adds	r0, #12
 8107f4e:	f7fe ff46 	bl	8106dde <memcpy>
 8107f52:	4621      	mov	r1, r4
 8107f54:	9801      	ldr	r0, [sp, #4]
 8107f56:	f000 fbf3 	bl	8108740 <_Bfree>
 8107f5a:	464c      	mov	r4, r9
 8107f5c:	6923      	ldr	r3, [r4, #16]
 8107f5e:	1c5a      	adds	r2, r3, #1
 8107f60:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8107f64:	6122      	str	r2, [r4, #16]
 8107f66:	2201      	movs	r2, #1
 8107f68:	615a      	str	r2, [r3, #20]
 8107f6a:	e7be      	b.n	8107eea <__gethex+0x362>
 8107f6c:	6922      	ldr	r2, [r4, #16]
 8107f6e:	455a      	cmp	r2, fp
 8107f70:	dd0b      	ble.n	8107f8a <__gethex+0x402>
 8107f72:	2101      	movs	r1, #1
 8107f74:	4620      	mov	r0, r4
 8107f76:	f7ff fd9f 	bl	8107ab8 <rshift>
 8107f7a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8107f7e:	3701      	adds	r7, #1
 8107f80:	42bb      	cmp	r3, r7
 8107f82:	f6ff aee0 	blt.w	8107d46 <__gethex+0x1be>
 8107f86:	2501      	movs	r5, #1
 8107f88:	e7c2      	b.n	8107f10 <__gethex+0x388>
 8107f8a:	f016 061f 	ands.w	r6, r6, #31
 8107f8e:	d0fa      	beq.n	8107f86 <__gethex+0x3fe>
 8107f90:	4453      	add	r3, sl
 8107f92:	f1c6 0620 	rsb	r6, r6, #32
 8107f96:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8107f9a:	f000 fc83 	bl	81088a4 <__hi0bits>
 8107f9e:	42b0      	cmp	r0, r6
 8107fa0:	dbe7      	blt.n	8107f72 <__gethex+0x3ea>
 8107fa2:	e7f0      	b.n	8107f86 <__gethex+0x3fe>
 8107fa4:	0810a82d 	.word	0x0810a82d

08107fa8 <L_shift>:
 8107fa8:	f1c2 0208 	rsb	r2, r2, #8
 8107fac:	0092      	lsls	r2, r2, #2
 8107fae:	b570      	push	{r4, r5, r6, lr}
 8107fb0:	f1c2 0620 	rsb	r6, r2, #32
 8107fb4:	6843      	ldr	r3, [r0, #4]
 8107fb6:	6804      	ldr	r4, [r0, #0]
 8107fb8:	fa03 f506 	lsl.w	r5, r3, r6
 8107fbc:	432c      	orrs	r4, r5
 8107fbe:	40d3      	lsrs	r3, r2
 8107fc0:	6004      	str	r4, [r0, #0]
 8107fc2:	f840 3f04 	str.w	r3, [r0, #4]!
 8107fc6:	4288      	cmp	r0, r1
 8107fc8:	d3f4      	bcc.n	8107fb4 <L_shift+0xc>
 8107fca:	bd70      	pop	{r4, r5, r6, pc}

08107fcc <__match>:
 8107fcc:	b530      	push	{r4, r5, lr}
 8107fce:	6803      	ldr	r3, [r0, #0]
 8107fd0:	3301      	adds	r3, #1
 8107fd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8107fd6:	b914      	cbnz	r4, 8107fde <__match+0x12>
 8107fd8:	6003      	str	r3, [r0, #0]
 8107fda:	2001      	movs	r0, #1
 8107fdc:	bd30      	pop	{r4, r5, pc}
 8107fde:	f813 2b01 	ldrb.w	r2, [r3], #1
 8107fe2:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8107fe6:	2d19      	cmp	r5, #25
 8107fe8:	bf98      	it	ls
 8107fea:	3220      	addls	r2, #32
 8107fec:	42a2      	cmp	r2, r4
 8107fee:	d0f0      	beq.n	8107fd2 <__match+0x6>
 8107ff0:	2000      	movs	r0, #0
 8107ff2:	e7f3      	b.n	8107fdc <__match+0x10>

08107ff4 <__hexnan>:
 8107ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107ff8:	680b      	ldr	r3, [r1, #0]
 8107ffa:	6801      	ldr	r1, [r0, #0]
 8107ffc:	115e      	asrs	r6, r3, #5
 8107ffe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8108002:	f013 031f 	ands.w	r3, r3, #31
 8108006:	b087      	sub	sp, #28
 8108008:	bf18      	it	ne
 810800a:	3604      	addne	r6, #4
 810800c:	2500      	movs	r5, #0
 810800e:	1f37      	subs	r7, r6, #4
 8108010:	4682      	mov	sl, r0
 8108012:	4690      	mov	r8, r2
 8108014:	9301      	str	r3, [sp, #4]
 8108016:	f846 5c04 	str.w	r5, [r6, #-4]
 810801a:	46b9      	mov	r9, r7
 810801c:	463c      	mov	r4, r7
 810801e:	9502      	str	r5, [sp, #8]
 8108020:	46ab      	mov	fp, r5
 8108022:	784a      	ldrb	r2, [r1, #1]
 8108024:	1c4b      	adds	r3, r1, #1
 8108026:	9303      	str	r3, [sp, #12]
 8108028:	b342      	cbz	r2, 810807c <__hexnan+0x88>
 810802a:	4610      	mov	r0, r2
 810802c:	9105      	str	r1, [sp, #20]
 810802e:	9204      	str	r2, [sp, #16]
 8108030:	f7ff fd94 	bl	8107b5c <__hexdig_fun>
 8108034:	2800      	cmp	r0, #0
 8108036:	d151      	bne.n	81080dc <__hexnan+0xe8>
 8108038:	9a04      	ldr	r2, [sp, #16]
 810803a:	9905      	ldr	r1, [sp, #20]
 810803c:	2a20      	cmp	r2, #32
 810803e:	d818      	bhi.n	8108072 <__hexnan+0x7e>
 8108040:	9b02      	ldr	r3, [sp, #8]
 8108042:	459b      	cmp	fp, r3
 8108044:	dd13      	ble.n	810806e <__hexnan+0x7a>
 8108046:	454c      	cmp	r4, r9
 8108048:	d206      	bcs.n	8108058 <__hexnan+0x64>
 810804a:	2d07      	cmp	r5, #7
 810804c:	dc04      	bgt.n	8108058 <__hexnan+0x64>
 810804e:	462a      	mov	r2, r5
 8108050:	4649      	mov	r1, r9
 8108052:	4620      	mov	r0, r4
 8108054:	f7ff ffa8 	bl	8107fa8 <L_shift>
 8108058:	4544      	cmp	r4, r8
 810805a:	d952      	bls.n	8108102 <__hexnan+0x10e>
 810805c:	2300      	movs	r3, #0
 810805e:	f1a4 0904 	sub.w	r9, r4, #4
 8108062:	f844 3c04 	str.w	r3, [r4, #-4]
 8108066:	f8cd b008 	str.w	fp, [sp, #8]
 810806a:	464c      	mov	r4, r9
 810806c:	461d      	mov	r5, r3
 810806e:	9903      	ldr	r1, [sp, #12]
 8108070:	e7d7      	b.n	8108022 <__hexnan+0x2e>
 8108072:	2a29      	cmp	r2, #41	@ 0x29
 8108074:	d157      	bne.n	8108126 <__hexnan+0x132>
 8108076:	3102      	adds	r1, #2
 8108078:	f8ca 1000 	str.w	r1, [sl]
 810807c:	f1bb 0f00 	cmp.w	fp, #0
 8108080:	d051      	beq.n	8108126 <__hexnan+0x132>
 8108082:	454c      	cmp	r4, r9
 8108084:	d206      	bcs.n	8108094 <__hexnan+0xa0>
 8108086:	2d07      	cmp	r5, #7
 8108088:	dc04      	bgt.n	8108094 <__hexnan+0xa0>
 810808a:	462a      	mov	r2, r5
 810808c:	4649      	mov	r1, r9
 810808e:	4620      	mov	r0, r4
 8108090:	f7ff ff8a 	bl	8107fa8 <L_shift>
 8108094:	4544      	cmp	r4, r8
 8108096:	d936      	bls.n	8108106 <__hexnan+0x112>
 8108098:	f1a8 0204 	sub.w	r2, r8, #4
 810809c:	4623      	mov	r3, r4
 810809e:	f853 1b04 	ldr.w	r1, [r3], #4
 81080a2:	f842 1f04 	str.w	r1, [r2, #4]!
 81080a6:	429f      	cmp	r7, r3
 81080a8:	d2f9      	bcs.n	810809e <__hexnan+0xaa>
 81080aa:	1b3b      	subs	r3, r7, r4
 81080ac:	f023 0303 	bic.w	r3, r3, #3
 81080b0:	3304      	adds	r3, #4
 81080b2:	3401      	adds	r4, #1
 81080b4:	3e03      	subs	r6, #3
 81080b6:	42b4      	cmp	r4, r6
 81080b8:	bf88      	it	hi
 81080ba:	2304      	movhi	r3, #4
 81080bc:	4443      	add	r3, r8
 81080be:	2200      	movs	r2, #0
 81080c0:	f843 2b04 	str.w	r2, [r3], #4
 81080c4:	429f      	cmp	r7, r3
 81080c6:	d2fb      	bcs.n	81080c0 <__hexnan+0xcc>
 81080c8:	683b      	ldr	r3, [r7, #0]
 81080ca:	b91b      	cbnz	r3, 81080d4 <__hexnan+0xe0>
 81080cc:	4547      	cmp	r7, r8
 81080ce:	d128      	bne.n	8108122 <__hexnan+0x12e>
 81080d0:	2301      	movs	r3, #1
 81080d2:	603b      	str	r3, [r7, #0]
 81080d4:	2005      	movs	r0, #5
 81080d6:	b007      	add	sp, #28
 81080d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81080dc:	3501      	adds	r5, #1
 81080de:	2d08      	cmp	r5, #8
 81080e0:	f10b 0b01 	add.w	fp, fp, #1
 81080e4:	dd06      	ble.n	81080f4 <__hexnan+0x100>
 81080e6:	4544      	cmp	r4, r8
 81080e8:	d9c1      	bls.n	810806e <__hexnan+0x7a>
 81080ea:	2300      	movs	r3, #0
 81080ec:	f844 3c04 	str.w	r3, [r4, #-4]
 81080f0:	2501      	movs	r5, #1
 81080f2:	3c04      	subs	r4, #4
 81080f4:	6822      	ldr	r2, [r4, #0]
 81080f6:	f000 000f 	and.w	r0, r0, #15
 81080fa:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 81080fe:	6020      	str	r0, [r4, #0]
 8108100:	e7b5      	b.n	810806e <__hexnan+0x7a>
 8108102:	2508      	movs	r5, #8
 8108104:	e7b3      	b.n	810806e <__hexnan+0x7a>
 8108106:	9b01      	ldr	r3, [sp, #4]
 8108108:	2b00      	cmp	r3, #0
 810810a:	d0dd      	beq.n	81080c8 <__hexnan+0xd4>
 810810c:	f1c3 0320 	rsb	r3, r3, #32
 8108110:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8108114:	40da      	lsrs	r2, r3
 8108116:	f856 3c04 	ldr.w	r3, [r6, #-4]
 810811a:	4013      	ands	r3, r2
 810811c:	f846 3c04 	str.w	r3, [r6, #-4]
 8108120:	e7d2      	b.n	81080c8 <__hexnan+0xd4>
 8108122:	3f04      	subs	r7, #4
 8108124:	e7d0      	b.n	81080c8 <__hexnan+0xd4>
 8108126:	2004      	movs	r0, #4
 8108128:	e7d5      	b.n	81080d6 <__hexnan+0xe2>

0810812a <__ssputs_r>:
 810812a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810812e:	688e      	ldr	r6, [r1, #8]
 8108130:	461f      	mov	r7, r3
 8108132:	42be      	cmp	r6, r7
 8108134:	680b      	ldr	r3, [r1, #0]
 8108136:	4682      	mov	sl, r0
 8108138:	460c      	mov	r4, r1
 810813a:	4690      	mov	r8, r2
 810813c:	d82d      	bhi.n	810819a <__ssputs_r+0x70>
 810813e:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8108142:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8108146:	d026      	beq.n	8108196 <__ssputs_r+0x6c>
 8108148:	6965      	ldr	r5, [r4, #20]
 810814a:	6909      	ldr	r1, [r1, #16]
 810814c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8108150:	eba3 0901 	sub.w	r9, r3, r1
 8108154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8108158:	1c7b      	adds	r3, r7, #1
 810815a:	444b      	add	r3, r9
 810815c:	106d      	asrs	r5, r5, #1
 810815e:	429d      	cmp	r5, r3
 8108160:	bf38      	it	cc
 8108162:	461d      	movcc	r5, r3
 8108164:	0553      	lsls	r3, r2, #21
 8108166:	d527      	bpl.n	81081b8 <__ssputs_r+0x8e>
 8108168:	4629      	mov	r1, r5
 810816a:	f000 f95f 	bl	810842c <_malloc_r>
 810816e:	4606      	mov	r6, r0
 8108170:	b360      	cbz	r0, 81081cc <__ssputs_r+0xa2>
 8108172:	6921      	ldr	r1, [r4, #16]
 8108174:	464a      	mov	r2, r9
 8108176:	f7fe fe32 	bl	8106dde <memcpy>
 810817a:	89a3      	ldrh	r3, [r4, #12]
 810817c:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8108180:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8108184:	81a3      	strh	r3, [r4, #12]
 8108186:	6126      	str	r6, [r4, #16]
 8108188:	6165      	str	r5, [r4, #20]
 810818a:	444e      	add	r6, r9
 810818c:	eba5 0509 	sub.w	r5, r5, r9
 8108190:	6026      	str	r6, [r4, #0]
 8108192:	60a5      	str	r5, [r4, #8]
 8108194:	463e      	mov	r6, r7
 8108196:	42be      	cmp	r6, r7
 8108198:	d900      	bls.n	810819c <__ssputs_r+0x72>
 810819a:	463e      	mov	r6, r7
 810819c:	6820      	ldr	r0, [r4, #0]
 810819e:	4632      	mov	r2, r6
 81081a0:	4641      	mov	r1, r8
 81081a2:	f000 ffbd 	bl	8109120 <memmove>
 81081a6:	68a3      	ldr	r3, [r4, #8]
 81081a8:	1b9b      	subs	r3, r3, r6
 81081aa:	60a3      	str	r3, [r4, #8]
 81081ac:	6823      	ldr	r3, [r4, #0]
 81081ae:	4433      	add	r3, r6
 81081b0:	6023      	str	r3, [r4, #0]
 81081b2:	2000      	movs	r0, #0
 81081b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81081b8:	462a      	mov	r2, r5
 81081ba:	f000 ff76 	bl	81090aa <_realloc_r>
 81081be:	4606      	mov	r6, r0
 81081c0:	2800      	cmp	r0, #0
 81081c2:	d1e0      	bne.n	8108186 <__ssputs_r+0x5c>
 81081c4:	6921      	ldr	r1, [r4, #16]
 81081c6:	4650      	mov	r0, sl
 81081c8:	f001 f84c 	bl	8109264 <_free_r>
 81081cc:	230c      	movs	r3, #12
 81081ce:	f8ca 3000 	str.w	r3, [sl]
 81081d2:	89a3      	ldrh	r3, [r4, #12]
 81081d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81081d8:	81a3      	strh	r3, [r4, #12]
 81081da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81081de:	e7e9      	b.n	81081b4 <__ssputs_r+0x8a>

081081e0 <_svfiprintf_r>:
 81081e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81081e4:	4698      	mov	r8, r3
 81081e6:	898b      	ldrh	r3, [r1, #12]
 81081e8:	061b      	lsls	r3, r3, #24
 81081ea:	b09d      	sub	sp, #116	@ 0x74
 81081ec:	4607      	mov	r7, r0
 81081ee:	460d      	mov	r5, r1
 81081f0:	4614      	mov	r4, r2
 81081f2:	d510      	bpl.n	8108216 <_svfiprintf_r+0x36>
 81081f4:	690b      	ldr	r3, [r1, #16]
 81081f6:	b973      	cbnz	r3, 8108216 <_svfiprintf_r+0x36>
 81081f8:	2140      	movs	r1, #64	@ 0x40
 81081fa:	f000 f917 	bl	810842c <_malloc_r>
 81081fe:	6028      	str	r0, [r5, #0]
 8108200:	6128      	str	r0, [r5, #16]
 8108202:	b930      	cbnz	r0, 8108212 <_svfiprintf_r+0x32>
 8108204:	230c      	movs	r3, #12
 8108206:	603b      	str	r3, [r7, #0]
 8108208:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 810820c:	b01d      	add	sp, #116	@ 0x74
 810820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108212:	2340      	movs	r3, #64	@ 0x40
 8108214:	616b      	str	r3, [r5, #20]
 8108216:	2300      	movs	r3, #0
 8108218:	9309      	str	r3, [sp, #36]	@ 0x24
 810821a:	2320      	movs	r3, #32
 810821c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8108220:	f8cd 800c 	str.w	r8, [sp, #12]
 8108224:	2330      	movs	r3, #48	@ 0x30
 8108226:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 81083c4 <_svfiprintf_r+0x1e4>
 810822a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 810822e:	f04f 0901 	mov.w	r9, #1
 8108232:	4623      	mov	r3, r4
 8108234:	469a      	mov	sl, r3
 8108236:	f813 2b01 	ldrb.w	r2, [r3], #1
 810823a:	b10a      	cbz	r2, 8108240 <_svfiprintf_r+0x60>
 810823c:	2a25      	cmp	r2, #37	@ 0x25
 810823e:	d1f9      	bne.n	8108234 <_svfiprintf_r+0x54>
 8108240:	ebba 0b04 	subs.w	fp, sl, r4
 8108244:	d00b      	beq.n	810825e <_svfiprintf_r+0x7e>
 8108246:	465b      	mov	r3, fp
 8108248:	4622      	mov	r2, r4
 810824a:	4629      	mov	r1, r5
 810824c:	4638      	mov	r0, r7
 810824e:	f7ff ff6c 	bl	810812a <__ssputs_r>
 8108252:	3001      	adds	r0, #1
 8108254:	f000 80a7 	beq.w	81083a6 <_svfiprintf_r+0x1c6>
 8108258:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810825a:	445a      	add	r2, fp
 810825c:	9209      	str	r2, [sp, #36]	@ 0x24
 810825e:	f89a 3000 	ldrb.w	r3, [sl]
 8108262:	2b00      	cmp	r3, #0
 8108264:	f000 809f 	beq.w	81083a6 <_svfiprintf_r+0x1c6>
 8108268:	2300      	movs	r3, #0
 810826a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810826e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8108272:	f10a 0a01 	add.w	sl, sl, #1
 8108276:	9304      	str	r3, [sp, #16]
 8108278:	9307      	str	r3, [sp, #28]
 810827a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 810827e:	931a      	str	r3, [sp, #104]	@ 0x68
 8108280:	4654      	mov	r4, sl
 8108282:	2205      	movs	r2, #5
 8108284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108288:	484e      	ldr	r0, [pc, #312]	@ (81083c4 <_svfiprintf_r+0x1e4>)
 810828a:	f7f8 f829 	bl	81002e0 <memchr>
 810828e:	9a04      	ldr	r2, [sp, #16]
 8108290:	b9d8      	cbnz	r0, 81082ca <_svfiprintf_r+0xea>
 8108292:	06d0      	lsls	r0, r2, #27
 8108294:	bf44      	itt	mi
 8108296:	2320      	movmi	r3, #32
 8108298:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810829c:	0711      	lsls	r1, r2, #28
 810829e:	bf44      	itt	mi
 81082a0:	232b      	movmi	r3, #43	@ 0x2b
 81082a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 81082a6:	f89a 3000 	ldrb.w	r3, [sl]
 81082aa:	2b2a      	cmp	r3, #42	@ 0x2a
 81082ac:	d015      	beq.n	81082da <_svfiprintf_r+0xfa>
 81082ae:	9a07      	ldr	r2, [sp, #28]
 81082b0:	4654      	mov	r4, sl
 81082b2:	2000      	movs	r0, #0
 81082b4:	f04f 0c0a 	mov.w	ip, #10
 81082b8:	4621      	mov	r1, r4
 81082ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 81082be:	3b30      	subs	r3, #48	@ 0x30
 81082c0:	2b09      	cmp	r3, #9
 81082c2:	d94b      	bls.n	810835c <_svfiprintf_r+0x17c>
 81082c4:	b1b0      	cbz	r0, 81082f4 <_svfiprintf_r+0x114>
 81082c6:	9207      	str	r2, [sp, #28]
 81082c8:	e014      	b.n	81082f4 <_svfiprintf_r+0x114>
 81082ca:	eba0 0308 	sub.w	r3, r0, r8
 81082ce:	fa09 f303 	lsl.w	r3, r9, r3
 81082d2:	4313      	orrs	r3, r2
 81082d4:	9304      	str	r3, [sp, #16]
 81082d6:	46a2      	mov	sl, r4
 81082d8:	e7d2      	b.n	8108280 <_svfiprintf_r+0xa0>
 81082da:	9b03      	ldr	r3, [sp, #12]
 81082dc:	1d19      	adds	r1, r3, #4
 81082de:	681b      	ldr	r3, [r3, #0]
 81082e0:	9103      	str	r1, [sp, #12]
 81082e2:	2b00      	cmp	r3, #0
 81082e4:	bfbb      	ittet	lt
 81082e6:	425b      	neglt	r3, r3
 81082e8:	f042 0202 	orrlt.w	r2, r2, #2
 81082ec:	9307      	strge	r3, [sp, #28]
 81082ee:	9307      	strlt	r3, [sp, #28]
 81082f0:	bfb8      	it	lt
 81082f2:	9204      	strlt	r2, [sp, #16]
 81082f4:	7823      	ldrb	r3, [r4, #0]
 81082f6:	2b2e      	cmp	r3, #46	@ 0x2e
 81082f8:	d10a      	bne.n	8108310 <_svfiprintf_r+0x130>
 81082fa:	7863      	ldrb	r3, [r4, #1]
 81082fc:	2b2a      	cmp	r3, #42	@ 0x2a
 81082fe:	d132      	bne.n	8108366 <_svfiprintf_r+0x186>
 8108300:	9b03      	ldr	r3, [sp, #12]
 8108302:	1d1a      	adds	r2, r3, #4
 8108304:	681b      	ldr	r3, [r3, #0]
 8108306:	9203      	str	r2, [sp, #12]
 8108308:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 810830c:	3402      	adds	r4, #2
 810830e:	9305      	str	r3, [sp, #20]
 8108310:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 81083d4 <_svfiprintf_r+0x1f4>
 8108314:	7821      	ldrb	r1, [r4, #0]
 8108316:	2203      	movs	r2, #3
 8108318:	4650      	mov	r0, sl
 810831a:	f7f7 ffe1 	bl	81002e0 <memchr>
 810831e:	b138      	cbz	r0, 8108330 <_svfiprintf_r+0x150>
 8108320:	9b04      	ldr	r3, [sp, #16]
 8108322:	eba0 000a 	sub.w	r0, r0, sl
 8108326:	2240      	movs	r2, #64	@ 0x40
 8108328:	4082      	lsls	r2, r0
 810832a:	4313      	orrs	r3, r2
 810832c:	3401      	adds	r4, #1
 810832e:	9304      	str	r3, [sp, #16]
 8108330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8108334:	4824      	ldr	r0, [pc, #144]	@ (81083c8 <_svfiprintf_r+0x1e8>)
 8108336:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810833a:	2206      	movs	r2, #6
 810833c:	f7f7 ffd0 	bl	81002e0 <memchr>
 8108340:	2800      	cmp	r0, #0
 8108342:	d036      	beq.n	81083b2 <_svfiprintf_r+0x1d2>
 8108344:	4b21      	ldr	r3, [pc, #132]	@ (81083cc <_svfiprintf_r+0x1ec>)
 8108346:	bb1b      	cbnz	r3, 8108390 <_svfiprintf_r+0x1b0>
 8108348:	9b03      	ldr	r3, [sp, #12]
 810834a:	3307      	adds	r3, #7
 810834c:	f023 0307 	bic.w	r3, r3, #7
 8108350:	3308      	adds	r3, #8
 8108352:	9303      	str	r3, [sp, #12]
 8108354:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8108356:	4433      	add	r3, r6
 8108358:	9309      	str	r3, [sp, #36]	@ 0x24
 810835a:	e76a      	b.n	8108232 <_svfiprintf_r+0x52>
 810835c:	fb0c 3202 	mla	r2, ip, r2, r3
 8108360:	460c      	mov	r4, r1
 8108362:	2001      	movs	r0, #1
 8108364:	e7a8      	b.n	81082b8 <_svfiprintf_r+0xd8>
 8108366:	2300      	movs	r3, #0
 8108368:	3401      	adds	r4, #1
 810836a:	9305      	str	r3, [sp, #20]
 810836c:	4619      	mov	r1, r3
 810836e:	f04f 0c0a 	mov.w	ip, #10
 8108372:	4620      	mov	r0, r4
 8108374:	f810 2b01 	ldrb.w	r2, [r0], #1
 8108378:	3a30      	subs	r2, #48	@ 0x30
 810837a:	2a09      	cmp	r2, #9
 810837c:	d903      	bls.n	8108386 <_svfiprintf_r+0x1a6>
 810837e:	2b00      	cmp	r3, #0
 8108380:	d0c6      	beq.n	8108310 <_svfiprintf_r+0x130>
 8108382:	9105      	str	r1, [sp, #20]
 8108384:	e7c4      	b.n	8108310 <_svfiprintf_r+0x130>
 8108386:	fb0c 2101 	mla	r1, ip, r1, r2
 810838a:	4604      	mov	r4, r0
 810838c:	2301      	movs	r3, #1
 810838e:	e7f0      	b.n	8108372 <_svfiprintf_r+0x192>
 8108390:	ab03      	add	r3, sp, #12
 8108392:	9300      	str	r3, [sp, #0]
 8108394:	462a      	mov	r2, r5
 8108396:	4b0e      	ldr	r3, [pc, #56]	@ (81083d0 <_svfiprintf_r+0x1f0>)
 8108398:	a904      	add	r1, sp, #16
 810839a:	4638      	mov	r0, r7
 810839c:	f7fc ffa2 	bl	81052e4 <_printf_float>
 81083a0:	1c42      	adds	r2, r0, #1
 81083a2:	4606      	mov	r6, r0
 81083a4:	d1d6      	bne.n	8108354 <_svfiprintf_r+0x174>
 81083a6:	89ab      	ldrh	r3, [r5, #12]
 81083a8:	065b      	lsls	r3, r3, #25
 81083aa:	f53f af2d 	bmi.w	8108208 <_svfiprintf_r+0x28>
 81083ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 81083b0:	e72c      	b.n	810820c <_svfiprintf_r+0x2c>
 81083b2:	ab03      	add	r3, sp, #12
 81083b4:	9300      	str	r3, [sp, #0]
 81083b6:	462a      	mov	r2, r5
 81083b8:	4b05      	ldr	r3, [pc, #20]	@ (81083d0 <_svfiprintf_r+0x1f0>)
 81083ba:	a904      	add	r1, sp, #16
 81083bc:	4638      	mov	r0, r7
 81083be:	f7fd fa29 	bl	8105814 <_printf_i>
 81083c2:	e7ed      	b.n	81083a0 <_svfiprintf_r+0x1c0>
 81083c4:	0810a89e 	.word	0x0810a89e
 81083c8:	0810a8a8 	.word	0x0810a8a8
 81083cc:	081052e5 	.word	0x081052e5
 81083d0:	0810812b 	.word	0x0810812b
 81083d4:	0810a8a4 	.word	0x0810a8a4

081083d8 <malloc>:
 81083d8:	4b02      	ldr	r3, [pc, #8]	@ (81083e4 <malloc+0xc>)
 81083da:	4601      	mov	r1, r0
 81083dc:	6818      	ldr	r0, [r3, #0]
 81083de:	f000 b825 	b.w	810842c <_malloc_r>
 81083e2:	bf00      	nop
 81083e4:	10000198 	.word	0x10000198

081083e8 <sbrk_aligned>:
 81083e8:	b570      	push	{r4, r5, r6, lr}
 81083ea:	4e0f      	ldr	r6, [pc, #60]	@ (8108428 <sbrk_aligned+0x40>)
 81083ec:	460c      	mov	r4, r1
 81083ee:	6831      	ldr	r1, [r6, #0]
 81083f0:	4605      	mov	r5, r0
 81083f2:	b911      	cbnz	r1, 81083fa <sbrk_aligned+0x12>
 81083f4:	f000 fee2 	bl	81091bc <_sbrk_r>
 81083f8:	6030      	str	r0, [r6, #0]
 81083fa:	4621      	mov	r1, r4
 81083fc:	4628      	mov	r0, r5
 81083fe:	f000 fedd 	bl	81091bc <_sbrk_r>
 8108402:	1c43      	adds	r3, r0, #1
 8108404:	d103      	bne.n	810840e <sbrk_aligned+0x26>
 8108406:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 810840a:	4620      	mov	r0, r4
 810840c:	bd70      	pop	{r4, r5, r6, pc}
 810840e:	1cc4      	adds	r4, r0, #3
 8108410:	f024 0403 	bic.w	r4, r4, #3
 8108414:	42a0      	cmp	r0, r4
 8108416:	d0f8      	beq.n	810840a <sbrk_aligned+0x22>
 8108418:	1a21      	subs	r1, r4, r0
 810841a:	4628      	mov	r0, r5
 810841c:	f000 fece 	bl	81091bc <_sbrk_r>
 8108420:	3001      	adds	r0, #1
 8108422:	d1f2      	bne.n	810840a <sbrk_aligned+0x22>
 8108424:	e7ef      	b.n	8108406 <sbrk_aligned+0x1e>
 8108426:	bf00      	nop
 8108428:	100008f4 	.word	0x100008f4

0810842c <_malloc_r>:
 810842c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108430:	1ccd      	adds	r5, r1, #3
 8108432:	f025 0503 	bic.w	r5, r5, #3
 8108436:	3508      	adds	r5, #8
 8108438:	2d0c      	cmp	r5, #12
 810843a:	bf38      	it	cc
 810843c:	250c      	movcc	r5, #12
 810843e:	2d00      	cmp	r5, #0
 8108440:	4606      	mov	r6, r0
 8108442:	db01      	blt.n	8108448 <_malloc_r+0x1c>
 8108444:	42a9      	cmp	r1, r5
 8108446:	d904      	bls.n	8108452 <_malloc_r+0x26>
 8108448:	230c      	movs	r3, #12
 810844a:	6033      	str	r3, [r6, #0]
 810844c:	2000      	movs	r0, #0
 810844e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108452:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8108528 <_malloc_r+0xfc>
 8108456:	f000 f927 	bl	81086a8 <__malloc_lock>
 810845a:	f8d8 3000 	ldr.w	r3, [r8]
 810845e:	461c      	mov	r4, r3
 8108460:	bb44      	cbnz	r4, 81084b4 <_malloc_r+0x88>
 8108462:	4629      	mov	r1, r5
 8108464:	4630      	mov	r0, r6
 8108466:	f7ff ffbf 	bl	81083e8 <sbrk_aligned>
 810846a:	1c43      	adds	r3, r0, #1
 810846c:	4604      	mov	r4, r0
 810846e:	d158      	bne.n	8108522 <_malloc_r+0xf6>
 8108470:	f8d8 4000 	ldr.w	r4, [r8]
 8108474:	4627      	mov	r7, r4
 8108476:	2f00      	cmp	r7, #0
 8108478:	d143      	bne.n	8108502 <_malloc_r+0xd6>
 810847a:	2c00      	cmp	r4, #0
 810847c:	d04b      	beq.n	8108516 <_malloc_r+0xea>
 810847e:	6823      	ldr	r3, [r4, #0]
 8108480:	4639      	mov	r1, r7
 8108482:	4630      	mov	r0, r6
 8108484:	eb04 0903 	add.w	r9, r4, r3
 8108488:	f000 fe98 	bl	81091bc <_sbrk_r>
 810848c:	4581      	cmp	r9, r0
 810848e:	d142      	bne.n	8108516 <_malloc_r+0xea>
 8108490:	6821      	ldr	r1, [r4, #0]
 8108492:	1a6d      	subs	r5, r5, r1
 8108494:	4629      	mov	r1, r5
 8108496:	4630      	mov	r0, r6
 8108498:	f7ff ffa6 	bl	81083e8 <sbrk_aligned>
 810849c:	3001      	adds	r0, #1
 810849e:	d03a      	beq.n	8108516 <_malloc_r+0xea>
 81084a0:	6823      	ldr	r3, [r4, #0]
 81084a2:	442b      	add	r3, r5
 81084a4:	6023      	str	r3, [r4, #0]
 81084a6:	f8d8 3000 	ldr.w	r3, [r8]
 81084aa:	685a      	ldr	r2, [r3, #4]
 81084ac:	bb62      	cbnz	r2, 8108508 <_malloc_r+0xdc>
 81084ae:	f8c8 7000 	str.w	r7, [r8]
 81084b2:	e00f      	b.n	81084d4 <_malloc_r+0xa8>
 81084b4:	6822      	ldr	r2, [r4, #0]
 81084b6:	1b52      	subs	r2, r2, r5
 81084b8:	d420      	bmi.n	81084fc <_malloc_r+0xd0>
 81084ba:	2a0b      	cmp	r2, #11
 81084bc:	d917      	bls.n	81084ee <_malloc_r+0xc2>
 81084be:	1961      	adds	r1, r4, r5
 81084c0:	42a3      	cmp	r3, r4
 81084c2:	6025      	str	r5, [r4, #0]
 81084c4:	bf18      	it	ne
 81084c6:	6059      	strne	r1, [r3, #4]
 81084c8:	6863      	ldr	r3, [r4, #4]
 81084ca:	bf08      	it	eq
 81084cc:	f8c8 1000 	streq.w	r1, [r8]
 81084d0:	5162      	str	r2, [r4, r5]
 81084d2:	604b      	str	r3, [r1, #4]
 81084d4:	4630      	mov	r0, r6
 81084d6:	f000 f8ed 	bl	81086b4 <__malloc_unlock>
 81084da:	f104 000b 	add.w	r0, r4, #11
 81084de:	1d23      	adds	r3, r4, #4
 81084e0:	f020 0007 	bic.w	r0, r0, #7
 81084e4:	1ac2      	subs	r2, r0, r3
 81084e6:	bf1c      	itt	ne
 81084e8:	1a1b      	subne	r3, r3, r0
 81084ea:	50a3      	strne	r3, [r4, r2]
 81084ec:	e7af      	b.n	810844e <_malloc_r+0x22>
 81084ee:	6862      	ldr	r2, [r4, #4]
 81084f0:	42a3      	cmp	r3, r4
 81084f2:	bf0c      	ite	eq
 81084f4:	f8c8 2000 	streq.w	r2, [r8]
 81084f8:	605a      	strne	r2, [r3, #4]
 81084fa:	e7eb      	b.n	81084d4 <_malloc_r+0xa8>
 81084fc:	4623      	mov	r3, r4
 81084fe:	6864      	ldr	r4, [r4, #4]
 8108500:	e7ae      	b.n	8108460 <_malloc_r+0x34>
 8108502:	463c      	mov	r4, r7
 8108504:	687f      	ldr	r7, [r7, #4]
 8108506:	e7b6      	b.n	8108476 <_malloc_r+0x4a>
 8108508:	461a      	mov	r2, r3
 810850a:	685b      	ldr	r3, [r3, #4]
 810850c:	42a3      	cmp	r3, r4
 810850e:	d1fb      	bne.n	8108508 <_malloc_r+0xdc>
 8108510:	2300      	movs	r3, #0
 8108512:	6053      	str	r3, [r2, #4]
 8108514:	e7de      	b.n	81084d4 <_malloc_r+0xa8>
 8108516:	230c      	movs	r3, #12
 8108518:	6033      	str	r3, [r6, #0]
 810851a:	4630      	mov	r0, r6
 810851c:	f000 f8ca 	bl	81086b4 <__malloc_unlock>
 8108520:	e794      	b.n	810844c <_malloc_r+0x20>
 8108522:	6005      	str	r5, [r0, #0]
 8108524:	e7d6      	b.n	81084d4 <_malloc_r+0xa8>
 8108526:	bf00      	nop
 8108528:	100008f8 	.word	0x100008f8

0810852c <__ascii_mbtowc>:
 810852c:	b082      	sub	sp, #8
 810852e:	b901      	cbnz	r1, 8108532 <__ascii_mbtowc+0x6>
 8108530:	a901      	add	r1, sp, #4
 8108532:	b142      	cbz	r2, 8108546 <__ascii_mbtowc+0x1a>
 8108534:	b14b      	cbz	r3, 810854a <__ascii_mbtowc+0x1e>
 8108536:	7813      	ldrb	r3, [r2, #0]
 8108538:	600b      	str	r3, [r1, #0]
 810853a:	7812      	ldrb	r2, [r2, #0]
 810853c:	1e10      	subs	r0, r2, #0
 810853e:	bf18      	it	ne
 8108540:	2001      	movne	r0, #1
 8108542:	b002      	add	sp, #8
 8108544:	4770      	bx	lr
 8108546:	4610      	mov	r0, r2
 8108548:	e7fb      	b.n	8108542 <__ascii_mbtowc+0x16>
 810854a:	f06f 0001 	mvn.w	r0, #1
 810854e:	e7f8      	b.n	8108542 <__ascii_mbtowc+0x16>

08108550 <__sflush_r>:
 8108550:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8108554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108558:	0716      	lsls	r6, r2, #28
 810855a:	4605      	mov	r5, r0
 810855c:	460c      	mov	r4, r1
 810855e:	d454      	bmi.n	810860a <__sflush_r+0xba>
 8108560:	684b      	ldr	r3, [r1, #4]
 8108562:	2b00      	cmp	r3, #0
 8108564:	dc02      	bgt.n	810856c <__sflush_r+0x1c>
 8108566:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8108568:	2b00      	cmp	r3, #0
 810856a:	dd48      	ble.n	81085fe <__sflush_r+0xae>
 810856c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 810856e:	2e00      	cmp	r6, #0
 8108570:	d045      	beq.n	81085fe <__sflush_r+0xae>
 8108572:	2300      	movs	r3, #0
 8108574:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8108578:	682f      	ldr	r7, [r5, #0]
 810857a:	6a21      	ldr	r1, [r4, #32]
 810857c:	602b      	str	r3, [r5, #0]
 810857e:	d030      	beq.n	81085e2 <__sflush_r+0x92>
 8108580:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8108582:	89a3      	ldrh	r3, [r4, #12]
 8108584:	0759      	lsls	r1, r3, #29
 8108586:	d505      	bpl.n	8108594 <__sflush_r+0x44>
 8108588:	6863      	ldr	r3, [r4, #4]
 810858a:	1ad2      	subs	r2, r2, r3
 810858c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 810858e:	b10b      	cbz	r3, 8108594 <__sflush_r+0x44>
 8108590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8108592:	1ad2      	subs	r2, r2, r3
 8108594:	2300      	movs	r3, #0
 8108596:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8108598:	6a21      	ldr	r1, [r4, #32]
 810859a:	4628      	mov	r0, r5
 810859c:	47b0      	blx	r6
 810859e:	1c43      	adds	r3, r0, #1
 81085a0:	89a3      	ldrh	r3, [r4, #12]
 81085a2:	d106      	bne.n	81085b2 <__sflush_r+0x62>
 81085a4:	6829      	ldr	r1, [r5, #0]
 81085a6:	291d      	cmp	r1, #29
 81085a8:	d82b      	bhi.n	8108602 <__sflush_r+0xb2>
 81085aa:	4a2a      	ldr	r2, [pc, #168]	@ (8108654 <__sflush_r+0x104>)
 81085ac:	410a      	asrs	r2, r1
 81085ae:	07d6      	lsls	r6, r2, #31
 81085b0:	d427      	bmi.n	8108602 <__sflush_r+0xb2>
 81085b2:	2200      	movs	r2, #0
 81085b4:	6062      	str	r2, [r4, #4]
 81085b6:	04d9      	lsls	r1, r3, #19
 81085b8:	6922      	ldr	r2, [r4, #16]
 81085ba:	6022      	str	r2, [r4, #0]
 81085bc:	d504      	bpl.n	81085c8 <__sflush_r+0x78>
 81085be:	1c42      	adds	r2, r0, #1
 81085c0:	d101      	bne.n	81085c6 <__sflush_r+0x76>
 81085c2:	682b      	ldr	r3, [r5, #0]
 81085c4:	b903      	cbnz	r3, 81085c8 <__sflush_r+0x78>
 81085c6:	6560      	str	r0, [r4, #84]	@ 0x54
 81085c8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81085ca:	602f      	str	r7, [r5, #0]
 81085cc:	b1b9      	cbz	r1, 81085fe <__sflush_r+0xae>
 81085ce:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81085d2:	4299      	cmp	r1, r3
 81085d4:	d002      	beq.n	81085dc <__sflush_r+0x8c>
 81085d6:	4628      	mov	r0, r5
 81085d8:	f000 fe44 	bl	8109264 <_free_r>
 81085dc:	2300      	movs	r3, #0
 81085de:	6363      	str	r3, [r4, #52]	@ 0x34
 81085e0:	e00d      	b.n	81085fe <__sflush_r+0xae>
 81085e2:	2301      	movs	r3, #1
 81085e4:	4628      	mov	r0, r5
 81085e6:	47b0      	blx	r6
 81085e8:	4602      	mov	r2, r0
 81085ea:	1c50      	adds	r0, r2, #1
 81085ec:	d1c9      	bne.n	8108582 <__sflush_r+0x32>
 81085ee:	682b      	ldr	r3, [r5, #0]
 81085f0:	2b00      	cmp	r3, #0
 81085f2:	d0c6      	beq.n	8108582 <__sflush_r+0x32>
 81085f4:	2b1d      	cmp	r3, #29
 81085f6:	d001      	beq.n	81085fc <__sflush_r+0xac>
 81085f8:	2b16      	cmp	r3, #22
 81085fa:	d11e      	bne.n	810863a <__sflush_r+0xea>
 81085fc:	602f      	str	r7, [r5, #0]
 81085fe:	2000      	movs	r0, #0
 8108600:	e022      	b.n	8108648 <__sflush_r+0xf8>
 8108602:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108606:	b21b      	sxth	r3, r3
 8108608:	e01b      	b.n	8108642 <__sflush_r+0xf2>
 810860a:	690f      	ldr	r7, [r1, #16]
 810860c:	2f00      	cmp	r7, #0
 810860e:	d0f6      	beq.n	81085fe <__sflush_r+0xae>
 8108610:	0793      	lsls	r3, r2, #30
 8108612:	680e      	ldr	r6, [r1, #0]
 8108614:	bf08      	it	eq
 8108616:	694b      	ldreq	r3, [r1, #20]
 8108618:	600f      	str	r7, [r1, #0]
 810861a:	bf18      	it	ne
 810861c:	2300      	movne	r3, #0
 810861e:	eba6 0807 	sub.w	r8, r6, r7
 8108622:	608b      	str	r3, [r1, #8]
 8108624:	f1b8 0f00 	cmp.w	r8, #0
 8108628:	dde9      	ble.n	81085fe <__sflush_r+0xae>
 810862a:	6a21      	ldr	r1, [r4, #32]
 810862c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 810862e:	4643      	mov	r3, r8
 8108630:	463a      	mov	r2, r7
 8108632:	4628      	mov	r0, r5
 8108634:	47b0      	blx	r6
 8108636:	2800      	cmp	r0, #0
 8108638:	dc08      	bgt.n	810864c <__sflush_r+0xfc>
 810863a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810863e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8108642:	81a3      	strh	r3, [r4, #12]
 8108644:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8108648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810864c:	4407      	add	r7, r0
 810864e:	eba8 0800 	sub.w	r8, r8, r0
 8108652:	e7e7      	b.n	8108624 <__sflush_r+0xd4>
 8108654:	dfbffffe 	.word	0xdfbffffe

08108658 <_fflush_r>:
 8108658:	b538      	push	{r3, r4, r5, lr}
 810865a:	690b      	ldr	r3, [r1, #16]
 810865c:	4605      	mov	r5, r0
 810865e:	460c      	mov	r4, r1
 8108660:	b913      	cbnz	r3, 8108668 <_fflush_r+0x10>
 8108662:	2500      	movs	r5, #0
 8108664:	4628      	mov	r0, r5
 8108666:	bd38      	pop	{r3, r4, r5, pc}
 8108668:	b118      	cbz	r0, 8108672 <_fflush_r+0x1a>
 810866a:	6a03      	ldr	r3, [r0, #32]
 810866c:	b90b      	cbnz	r3, 8108672 <_fflush_r+0x1a>
 810866e:	f7fd fcb1 	bl	8105fd4 <__sinit>
 8108672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8108676:	2b00      	cmp	r3, #0
 8108678:	d0f3      	beq.n	8108662 <_fflush_r+0xa>
 810867a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 810867c:	07d0      	lsls	r0, r2, #31
 810867e:	d404      	bmi.n	810868a <_fflush_r+0x32>
 8108680:	0599      	lsls	r1, r3, #22
 8108682:	d402      	bmi.n	810868a <_fflush_r+0x32>
 8108684:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8108686:	f7fe fba8 	bl	8106dda <__retarget_lock_acquire_recursive>
 810868a:	4628      	mov	r0, r5
 810868c:	4621      	mov	r1, r4
 810868e:	f7ff ff5f 	bl	8108550 <__sflush_r>
 8108692:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8108694:	07da      	lsls	r2, r3, #31
 8108696:	4605      	mov	r5, r0
 8108698:	d4e4      	bmi.n	8108664 <_fflush_r+0xc>
 810869a:	89a3      	ldrh	r3, [r4, #12]
 810869c:	059b      	lsls	r3, r3, #22
 810869e:	d4e1      	bmi.n	8108664 <_fflush_r+0xc>
 81086a0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81086a2:	f7fe fb9b 	bl	8106ddc <__retarget_lock_release_recursive>
 81086a6:	e7dd      	b.n	8108664 <_fflush_r+0xc>

081086a8 <__malloc_lock>:
 81086a8:	4801      	ldr	r0, [pc, #4]	@ (81086b0 <__malloc_lock+0x8>)
 81086aa:	f7fe bb96 	b.w	8106dda <__retarget_lock_acquire_recursive>
 81086ae:	bf00      	nop
 81086b0:	100008f0 	.word	0x100008f0

081086b4 <__malloc_unlock>:
 81086b4:	4801      	ldr	r0, [pc, #4]	@ (81086bc <__malloc_unlock+0x8>)
 81086b6:	f7fe bb91 	b.w	8106ddc <__retarget_lock_release_recursive>
 81086ba:	bf00      	nop
 81086bc:	100008f0 	.word	0x100008f0

081086c0 <_Balloc>:
 81086c0:	b570      	push	{r4, r5, r6, lr}
 81086c2:	69c6      	ldr	r6, [r0, #28]
 81086c4:	4604      	mov	r4, r0
 81086c6:	460d      	mov	r5, r1
 81086c8:	b976      	cbnz	r6, 81086e8 <_Balloc+0x28>
 81086ca:	2010      	movs	r0, #16
 81086cc:	f7ff fe84 	bl	81083d8 <malloc>
 81086d0:	4602      	mov	r2, r0
 81086d2:	61e0      	str	r0, [r4, #28]
 81086d4:	b920      	cbnz	r0, 81086e0 <_Balloc+0x20>
 81086d6:	4b18      	ldr	r3, [pc, #96]	@ (8108738 <_Balloc+0x78>)
 81086d8:	4818      	ldr	r0, [pc, #96]	@ (810873c <_Balloc+0x7c>)
 81086da:	216b      	movs	r1, #107	@ 0x6b
 81086dc:	f000 fd90 	bl	8109200 <__assert_func>
 81086e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81086e4:	6006      	str	r6, [r0, #0]
 81086e6:	60c6      	str	r6, [r0, #12]
 81086e8:	69e6      	ldr	r6, [r4, #28]
 81086ea:	68f3      	ldr	r3, [r6, #12]
 81086ec:	b183      	cbz	r3, 8108710 <_Balloc+0x50>
 81086ee:	69e3      	ldr	r3, [r4, #28]
 81086f0:	68db      	ldr	r3, [r3, #12]
 81086f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 81086f6:	b9b8      	cbnz	r0, 8108728 <_Balloc+0x68>
 81086f8:	2101      	movs	r1, #1
 81086fa:	fa01 f605 	lsl.w	r6, r1, r5
 81086fe:	1d72      	adds	r2, r6, #5
 8108700:	0092      	lsls	r2, r2, #2
 8108702:	4620      	mov	r0, r4
 8108704:	f000 fd9a 	bl	810923c <_calloc_r>
 8108708:	b160      	cbz	r0, 8108724 <_Balloc+0x64>
 810870a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 810870e:	e00e      	b.n	810872e <_Balloc+0x6e>
 8108710:	2221      	movs	r2, #33	@ 0x21
 8108712:	2104      	movs	r1, #4
 8108714:	4620      	mov	r0, r4
 8108716:	f000 fd91 	bl	810923c <_calloc_r>
 810871a:	69e3      	ldr	r3, [r4, #28]
 810871c:	60f0      	str	r0, [r6, #12]
 810871e:	68db      	ldr	r3, [r3, #12]
 8108720:	2b00      	cmp	r3, #0
 8108722:	d1e4      	bne.n	81086ee <_Balloc+0x2e>
 8108724:	2000      	movs	r0, #0
 8108726:	bd70      	pop	{r4, r5, r6, pc}
 8108728:	6802      	ldr	r2, [r0, #0]
 810872a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 810872e:	2300      	movs	r3, #0
 8108730:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8108734:	e7f7      	b.n	8108726 <_Balloc+0x66>
 8108736:	bf00      	nop
 8108738:	0810a7be 	.word	0x0810a7be
 810873c:	0810a8af 	.word	0x0810a8af

08108740 <_Bfree>:
 8108740:	b570      	push	{r4, r5, r6, lr}
 8108742:	69c6      	ldr	r6, [r0, #28]
 8108744:	4605      	mov	r5, r0
 8108746:	460c      	mov	r4, r1
 8108748:	b976      	cbnz	r6, 8108768 <_Bfree+0x28>
 810874a:	2010      	movs	r0, #16
 810874c:	f7ff fe44 	bl	81083d8 <malloc>
 8108750:	4602      	mov	r2, r0
 8108752:	61e8      	str	r0, [r5, #28]
 8108754:	b920      	cbnz	r0, 8108760 <_Bfree+0x20>
 8108756:	4b09      	ldr	r3, [pc, #36]	@ (810877c <_Bfree+0x3c>)
 8108758:	4809      	ldr	r0, [pc, #36]	@ (8108780 <_Bfree+0x40>)
 810875a:	218f      	movs	r1, #143	@ 0x8f
 810875c:	f000 fd50 	bl	8109200 <__assert_func>
 8108760:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8108764:	6006      	str	r6, [r0, #0]
 8108766:	60c6      	str	r6, [r0, #12]
 8108768:	b13c      	cbz	r4, 810877a <_Bfree+0x3a>
 810876a:	69eb      	ldr	r3, [r5, #28]
 810876c:	6862      	ldr	r2, [r4, #4]
 810876e:	68db      	ldr	r3, [r3, #12]
 8108770:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8108774:	6021      	str	r1, [r4, #0]
 8108776:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 810877a:	bd70      	pop	{r4, r5, r6, pc}
 810877c:	0810a7be 	.word	0x0810a7be
 8108780:	0810a8af 	.word	0x0810a8af

08108784 <__multadd>:
 8108784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108788:	690d      	ldr	r5, [r1, #16]
 810878a:	4607      	mov	r7, r0
 810878c:	460c      	mov	r4, r1
 810878e:	461e      	mov	r6, r3
 8108790:	f101 0c14 	add.w	ip, r1, #20
 8108794:	2000      	movs	r0, #0
 8108796:	f8dc 3000 	ldr.w	r3, [ip]
 810879a:	b299      	uxth	r1, r3
 810879c:	fb02 6101 	mla	r1, r2, r1, r6
 81087a0:	0c1e      	lsrs	r6, r3, #16
 81087a2:	0c0b      	lsrs	r3, r1, #16
 81087a4:	fb02 3306 	mla	r3, r2, r6, r3
 81087a8:	b289      	uxth	r1, r1
 81087aa:	3001      	adds	r0, #1
 81087ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 81087b0:	4285      	cmp	r5, r0
 81087b2:	f84c 1b04 	str.w	r1, [ip], #4
 81087b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 81087ba:	dcec      	bgt.n	8108796 <__multadd+0x12>
 81087bc:	b30e      	cbz	r6, 8108802 <__multadd+0x7e>
 81087be:	68a3      	ldr	r3, [r4, #8]
 81087c0:	42ab      	cmp	r3, r5
 81087c2:	dc19      	bgt.n	81087f8 <__multadd+0x74>
 81087c4:	6861      	ldr	r1, [r4, #4]
 81087c6:	4638      	mov	r0, r7
 81087c8:	3101      	adds	r1, #1
 81087ca:	f7ff ff79 	bl	81086c0 <_Balloc>
 81087ce:	4680      	mov	r8, r0
 81087d0:	b928      	cbnz	r0, 81087de <__multadd+0x5a>
 81087d2:	4602      	mov	r2, r0
 81087d4:	4b0c      	ldr	r3, [pc, #48]	@ (8108808 <__multadd+0x84>)
 81087d6:	480d      	ldr	r0, [pc, #52]	@ (810880c <__multadd+0x88>)
 81087d8:	21ba      	movs	r1, #186	@ 0xba
 81087da:	f000 fd11 	bl	8109200 <__assert_func>
 81087de:	6922      	ldr	r2, [r4, #16]
 81087e0:	3202      	adds	r2, #2
 81087e2:	f104 010c 	add.w	r1, r4, #12
 81087e6:	0092      	lsls	r2, r2, #2
 81087e8:	300c      	adds	r0, #12
 81087ea:	f7fe faf8 	bl	8106dde <memcpy>
 81087ee:	4621      	mov	r1, r4
 81087f0:	4638      	mov	r0, r7
 81087f2:	f7ff ffa5 	bl	8108740 <_Bfree>
 81087f6:	4644      	mov	r4, r8
 81087f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 81087fc:	3501      	adds	r5, #1
 81087fe:	615e      	str	r6, [r3, #20]
 8108800:	6125      	str	r5, [r4, #16]
 8108802:	4620      	mov	r0, r4
 8108804:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108808:	0810a82d 	.word	0x0810a82d
 810880c:	0810a8af 	.word	0x0810a8af

08108810 <__s2b>:
 8108810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108814:	460c      	mov	r4, r1
 8108816:	4615      	mov	r5, r2
 8108818:	461f      	mov	r7, r3
 810881a:	2209      	movs	r2, #9
 810881c:	3308      	adds	r3, #8
 810881e:	4606      	mov	r6, r0
 8108820:	fb93 f3f2 	sdiv	r3, r3, r2
 8108824:	2100      	movs	r1, #0
 8108826:	2201      	movs	r2, #1
 8108828:	429a      	cmp	r2, r3
 810882a:	db09      	blt.n	8108840 <__s2b+0x30>
 810882c:	4630      	mov	r0, r6
 810882e:	f7ff ff47 	bl	81086c0 <_Balloc>
 8108832:	b940      	cbnz	r0, 8108846 <__s2b+0x36>
 8108834:	4602      	mov	r2, r0
 8108836:	4b19      	ldr	r3, [pc, #100]	@ (810889c <__s2b+0x8c>)
 8108838:	4819      	ldr	r0, [pc, #100]	@ (81088a0 <__s2b+0x90>)
 810883a:	21d3      	movs	r1, #211	@ 0xd3
 810883c:	f000 fce0 	bl	8109200 <__assert_func>
 8108840:	0052      	lsls	r2, r2, #1
 8108842:	3101      	adds	r1, #1
 8108844:	e7f0      	b.n	8108828 <__s2b+0x18>
 8108846:	9b08      	ldr	r3, [sp, #32]
 8108848:	6143      	str	r3, [r0, #20]
 810884a:	2d09      	cmp	r5, #9
 810884c:	f04f 0301 	mov.w	r3, #1
 8108850:	6103      	str	r3, [r0, #16]
 8108852:	dd16      	ble.n	8108882 <__s2b+0x72>
 8108854:	f104 0909 	add.w	r9, r4, #9
 8108858:	46c8      	mov	r8, r9
 810885a:	442c      	add	r4, r5
 810885c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8108860:	4601      	mov	r1, r0
 8108862:	3b30      	subs	r3, #48	@ 0x30
 8108864:	220a      	movs	r2, #10
 8108866:	4630      	mov	r0, r6
 8108868:	f7ff ff8c 	bl	8108784 <__multadd>
 810886c:	45a0      	cmp	r8, r4
 810886e:	d1f5      	bne.n	810885c <__s2b+0x4c>
 8108870:	f1a5 0408 	sub.w	r4, r5, #8
 8108874:	444c      	add	r4, r9
 8108876:	1b2d      	subs	r5, r5, r4
 8108878:	1963      	adds	r3, r4, r5
 810887a:	42bb      	cmp	r3, r7
 810887c:	db04      	blt.n	8108888 <__s2b+0x78>
 810887e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108882:	340a      	adds	r4, #10
 8108884:	2509      	movs	r5, #9
 8108886:	e7f6      	b.n	8108876 <__s2b+0x66>
 8108888:	f814 3b01 	ldrb.w	r3, [r4], #1
 810888c:	4601      	mov	r1, r0
 810888e:	3b30      	subs	r3, #48	@ 0x30
 8108890:	220a      	movs	r2, #10
 8108892:	4630      	mov	r0, r6
 8108894:	f7ff ff76 	bl	8108784 <__multadd>
 8108898:	e7ee      	b.n	8108878 <__s2b+0x68>
 810889a:	bf00      	nop
 810889c:	0810a82d 	.word	0x0810a82d
 81088a0:	0810a8af 	.word	0x0810a8af

081088a4 <__hi0bits>:
 81088a4:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 81088a8:	4603      	mov	r3, r0
 81088aa:	bf36      	itet	cc
 81088ac:	0403      	lslcc	r3, r0, #16
 81088ae:	2000      	movcs	r0, #0
 81088b0:	2010      	movcc	r0, #16
 81088b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 81088b6:	bf3c      	itt	cc
 81088b8:	021b      	lslcc	r3, r3, #8
 81088ba:	3008      	addcc	r0, #8
 81088bc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 81088c0:	bf3c      	itt	cc
 81088c2:	011b      	lslcc	r3, r3, #4
 81088c4:	3004      	addcc	r0, #4
 81088c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 81088ca:	bf3c      	itt	cc
 81088cc:	009b      	lslcc	r3, r3, #2
 81088ce:	3002      	addcc	r0, #2
 81088d0:	2b00      	cmp	r3, #0
 81088d2:	db05      	blt.n	81088e0 <__hi0bits+0x3c>
 81088d4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 81088d8:	f100 0001 	add.w	r0, r0, #1
 81088dc:	bf08      	it	eq
 81088de:	2020      	moveq	r0, #32
 81088e0:	4770      	bx	lr

081088e2 <__lo0bits>:
 81088e2:	6803      	ldr	r3, [r0, #0]
 81088e4:	4602      	mov	r2, r0
 81088e6:	f013 0007 	ands.w	r0, r3, #7
 81088ea:	d00b      	beq.n	8108904 <__lo0bits+0x22>
 81088ec:	07d9      	lsls	r1, r3, #31
 81088ee:	d421      	bmi.n	8108934 <__lo0bits+0x52>
 81088f0:	0798      	lsls	r0, r3, #30
 81088f2:	bf49      	itett	mi
 81088f4:	085b      	lsrmi	r3, r3, #1
 81088f6:	089b      	lsrpl	r3, r3, #2
 81088f8:	2001      	movmi	r0, #1
 81088fa:	6013      	strmi	r3, [r2, #0]
 81088fc:	bf5c      	itt	pl
 81088fe:	6013      	strpl	r3, [r2, #0]
 8108900:	2002      	movpl	r0, #2
 8108902:	4770      	bx	lr
 8108904:	b299      	uxth	r1, r3
 8108906:	b909      	cbnz	r1, 810890c <__lo0bits+0x2a>
 8108908:	0c1b      	lsrs	r3, r3, #16
 810890a:	2010      	movs	r0, #16
 810890c:	b2d9      	uxtb	r1, r3
 810890e:	b909      	cbnz	r1, 8108914 <__lo0bits+0x32>
 8108910:	3008      	adds	r0, #8
 8108912:	0a1b      	lsrs	r3, r3, #8
 8108914:	0719      	lsls	r1, r3, #28
 8108916:	bf04      	itt	eq
 8108918:	091b      	lsreq	r3, r3, #4
 810891a:	3004      	addeq	r0, #4
 810891c:	0799      	lsls	r1, r3, #30
 810891e:	bf04      	itt	eq
 8108920:	089b      	lsreq	r3, r3, #2
 8108922:	3002      	addeq	r0, #2
 8108924:	07d9      	lsls	r1, r3, #31
 8108926:	d403      	bmi.n	8108930 <__lo0bits+0x4e>
 8108928:	085b      	lsrs	r3, r3, #1
 810892a:	f100 0001 	add.w	r0, r0, #1
 810892e:	d003      	beq.n	8108938 <__lo0bits+0x56>
 8108930:	6013      	str	r3, [r2, #0]
 8108932:	4770      	bx	lr
 8108934:	2000      	movs	r0, #0
 8108936:	4770      	bx	lr
 8108938:	2020      	movs	r0, #32
 810893a:	4770      	bx	lr

0810893c <__i2b>:
 810893c:	b510      	push	{r4, lr}
 810893e:	460c      	mov	r4, r1
 8108940:	2101      	movs	r1, #1
 8108942:	f7ff febd 	bl	81086c0 <_Balloc>
 8108946:	4602      	mov	r2, r0
 8108948:	b928      	cbnz	r0, 8108956 <__i2b+0x1a>
 810894a:	4b05      	ldr	r3, [pc, #20]	@ (8108960 <__i2b+0x24>)
 810894c:	4805      	ldr	r0, [pc, #20]	@ (8108964 <__i2b+0x28>)
 810894e:	f240 1145 	movw	r1, #325	@ 0x145
 8108952:	f000 fc55 	bl	8109200 <__assert_func>
 8108956:	2301      	movs	r3, #1
 8108958:	6144      	str	r4, [r0, #20]
 810895a:	6103      	str	r3, [r0, #16]
 810895c:	bd10      	pop	{r4, pc}
 810895e:	bf00      	nop
 8108960:	0810a82d 	.word	0x0810a82d
 8108964:	0810a8af 	.word	0x0810a8af

08108968 <__multiply>:
 8108968:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810896c:	4614      	mov	r4, r2
 810896e:	690a      	ldr	r2, [r1, #16]
 8108970:	6923      	ldr	r3, [r4, #16]
 8108972:	429a      	cmp	r2, r3
 8108974:	bfa8      	it	ge
 8108976:	4623      	movge	r3, r4
 8108978:	460f      	mov	r7, r1
 810897a:	bfa4      	itt	ge
 810897c:	460c      	movge	r4, r1
 810897e:	461f      	movge	r7, r3
 8108980:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8108984:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8108988:	68a3      	ldr	r3, [r4, #8]
 810898a:	6861      	ldr	r1, [r4, #4]
 810898c:	eb0a 0609 	add.w	r6, sl, r9
 8108990:	42b3      	cmp	r3, r6
 8108992:	b085      	sub	sp, #20
 8108994:	bfb8      	it	lt
 8108996:	3101      	addlt	r1, #1
 8108998:	f7ff fe92 	bl	81086c0 <_Balloc>
 810899c:	b930      	cbnz	r0, 81089ac <__multiply+0x44>
 810899e:	4602      	mov	r2, r0
 81089a0:	4b44      	ldr	r3, [pc, #272]	@ (8108ab4 <__multiply+0x14c>)
 81089a2:	4845      	ldr	r0, [pc, #276]	@ (8108ab8 <__multiply+0x150>)
 81089a4:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 81089a8:	f000 fc2a 	bl	8109200 <__assert_func>
 81089ac:	f100 0514 	add.w	r5, r0, #20
 81089b0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 81089b4:	462b      	mov	r3, r5
 81089b6:	2200      	movs	r2, #0
 81089b8:	4543      	cmp	r3, r8
 81089ba:	d321      	bcc.n	8108a00 <__multiply+0x98>
 81089bc:	f107 0114 	add.w	r1, r7, #20
 81089c0:	f104 0214 	add.w	r2, r4, #20
 81089c4:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 81089c8:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 81089cc:	9302      	str	r3, [sp, #8]
 81089ce:	1b13      	subs	r3, r2, r4
 81089d0:	3b15      	subs	r3, #21
 81089d2:	f023 0303 	bic.w	r3, r3, #3
 81089d6:	3304      	adds	r3, #4
 81089d8:	f104 0715 	add.w	r7, r4, #21
 81089dc:	42ba      	cmp	r2, r7
 81089de:	bf38      	it	cc
 81089e0:	2304      	movcc	r3, #4
 81089e2:	9301      	str	r3, [sp, #4]
 81089e4:	9b02      	ldr	r3, [sp, #8]
 81089e6:	9103      	str	r1, [sp, #12]
 81089e8:	428b      	cmp	r3, r1
 81089ea:	d80c      	bhi.n	8108a06 <__multiply+0x9e>
 81089ec:	2e00      	cmp	r6, #0
 81089ee:	dd03      	ble.n	81089f8 <__multiply+0x90>
 81089f0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 81089f4:	2b00      	cmp	r3, #0
 81089f6:	d05b      	beq.n	8108ab0 <__multiply+0x148>
 81089f8:	6106      	str	r6, [r0, #16]
 81089fa:	b005      	add	sp, #20
 81089fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108a00:	f843 2b04 	str.w	r2, [r3], #4
 8108a04:	e7d8      	b.n	81089b8 <__multiply+0x50>
 8108a06:	f8b1 a000 	ldrh.w	sl, [r1]
 8108a0a:	f1ba 0f00 	cmp.w	sl, #0
 8108a0e:	d024      	beq.n	8108a5a <__multiply+0xf2>
 8108a10:	f104 0e14 	add.w	lr, r4, #20
 8108a14:	46a9      	mov	r9, r5
 8108a16:	f04f 0c00 	mov.w	ip, #0
 8108a1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8108a1e:	f8d9 3000 	ldr.w	r3, [r9]
 8108a22:	fa1f fb87 	uxth.w	fp, r7
 8108a26:	b29b      	uxth	r3, r3
 8108a28:	fb0a 330b 	mla	r3, sl, fp, r3
 8108a2c:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8108a30:	f8d9 7000 	ldr.w	r7, [r9]
 8108a34:	4463      	add	r3, ip
 8108a36:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8108a3a:	fb0a c70b 	mla	r7, sl, fp, ip
 8108a3e:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8108a42:	b29b      	uxth	r3, r3
 8108a44:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8108a48:	4572      	cmp	r2, lr
 8108a4a:	f849 3b04 	str.w	r3, [r9], #4
 8108a4e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8108a52:	d8e2      	bhi.n	8108a1a <__multiply+0xb2>
 8108a54:	9b01      	ldr	r3, [sp, #4]
 8108a56:	f845 c003 	str.w	ip, [r5, r3]
 8108a5a:	9b03      	ldr	r3, [sp, #12]
 8108a5c:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8108a60:	3104      	adds	r1, #4
 8108a62:	f1b9 0f00 	cmp.w	r9, #0
 8108a66:	d021      	beq.n	8108aac <__multiply+0x144>
 8108a68:	682b      	ldr	r3, [r5, #0]
 8108a6a:	f104 0c14 	add.w	ip, r4, #20
 8108a6e:	46ae      	mov	lr, r5
 8108a70:	f04f 0a00 	mov.w	sl, #0
 8108a74:	f8bc b000 	ldrh.w	fp, [ip]
 8108a78:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8108a7c:	fb09 770b 	mla	r7, r9, fp, r7
 8108a80:	4457      	add	r7, sl
 8108a82:	b29b      	uxth	r3, r3
 8108a84:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8108a88:	f84e 3b04 	str.w	r3, [lr], #4
 8108a8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8108a90:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8108a94:	f8be 3000 	ldrh.w	r3, [lr]
 8108a98:	fb09 330a 	mla	r3, r9, sl, r3
 8108a9c:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8108aa0:	4562      	cmp	r2, ip
 8108aa2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8108aa6:	d8e5      	bhi.n	8108a74 <__multiply+0x10c>
 8108aa8:	9f01      	ldr	r7, [sp, #4]
 8108aaa:	51eb      	str	r3, [r5, r7]
 8108aac:	3504      	adds	r5, #4
 8108aae:	e799      	b.n	81089e4 <__multiply+0x7c>
 8108ab0:	3e01      	subs	r6, #1
 8108ab2:	e79b      	b.n	81089ec <__multiply+0x84>
 8108ab4:	0810a82d 	.word	0x0810a82d
 8108ab8:	0810a8af 	.word	0x0810a8af

08108abc <__pow5mult>:
 8108abc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8108ac0:	4615      	mov	r5, r2
 8108ac2:	f012 0203 	ands.w	r2, r2, #3
 8108ac6:	4607      	mov	r7, r0
 8108ac8:	460e      	mov	r6, r1
 8108aca:	d007      	beq.n	8108adc <__pow5mult+0x20>
 8108acc:	4c25      	ldr	r4, [pc, #148]	@ (8108b64 <__pow5mult+0xa8>)
 8108ace:	3a01      	subs	r2, #1
 8108ad0:	2300      	movs	r3, #0
 8108ad2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8108ad6:	f7ff fe55 	bl	8108784 <__multadd>
 8108ada:	4606      	mov	r6, r0
 8108adc:	10ad      	asrs	r5, r5, #2
 8108ade:	d03d      	beq.n	8108b5c <__pow5mult+0xa0>
 8108ae0:	69fc      	ldr	r4, [r7, #28]
 8108ae2:	b97c      	cbnz	r4, 8108b04 <__pow5mult+0x48>
 8108ae4:	2010      	movs	r0, #16
 8108ae6:	f7ff fc77 	bl	81083d8 <malloc>
 8108aea:	4602      	mov	r2, r0
 8108aec:	61f8      	str	r0, [r7, #28]
 8108aee:	b928      	cbnz	r0, 8108afc <__pow5mult+0x40>
 8108af0:	4b1d      	ldr	r3, [pc, #116]	@ (8108b68 <__pow5mult+0xac>)
 8108af2:	481e      	ldr	r0, [pc, #120]	@ (8108b6c <__pow5mult+0xb0>)
 8108af4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8108af8:	f000 fb82 	bl	8109200 <__assert_func>
 8108afc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8108b00:	6004      	str	r4, [r0, #0]
 8108b02:	60c4      	str	r4, [r0, #12]
 8108b04:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8108b08:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8108b0c:	b94c      	cbnz	r4, 8108b22 <__pow5mult+0x66>
 8108b0e:	f240 2171 	movw	r1, #625	@ 0x271
 8108b12:	4638      	mov	r0, r7
 8108b14:	f7ff ff12 	bl	810893c <__i2b>
 8108b18:	2300      	movs	r3, #0
 8108b1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8108b1e:	4604      	mov	r4, r0
 8108b20:	6003      	str	r3, [r0, #0]
 8108b22:	f04f 0900 	mov.w	r9, #0
 8108b26:	07eb      	lsls	r3, r5, #31
 8108b28:	d50a      	bpl.n	8108b40 <__pow5mult+0x84>
 8108b2a:	4631      	mov	r1, r6
 8108b2c:	4622      	mov	r2, r4
 8108b2e:	4638      	mov	r0, r7
 8108b30:	f7ff ff1a 	bl	8108968 <__multiply>
 8108b34:	4631      	mov	r1, r6
 8108b36:	4680      	mov	r8, r0
 8108b38:	4638      	mov	r0, r7
 8108b3a:	f7ff fe01 	bl	8108740 <_Bfree>
 8108b3e:	4646      	mov	r6, r8
 8108b40:	106d      	asrs	r5, r5, #1
 8108b42:	d00b      	beq.n	8108b5c <__pow5mult+0xa0>
 8108b44:	6820      	ldr	r0, [r4, #0]
 8108b46:	b938      	cbnz	r0, 8108b58 <__pow5mult+0x9c>
 8108b48:	4622      	mov	r2, r4
 8108b4a:	4621      	mov	r1, r4
 8108b4c:	4638      	mov	r0, r7
 8108b4e:	f7ff ff0b 	bl	8108968 <__multiply>
 8108b52:	6020      	str	r0, [r4, #0]
 8108b54:	f8c0 9000 	str.w	r9, [r0]
 8108b58:	4604      	mov	r4, r0
 8108b5a:	e7e4      	b.n	8108b26 <__pow5mult+0x6a>
 8108b5c:	4630      	mov	r0, r6
 8108b5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8108b62:	bf00      	nop
 8108b64:	0810a908 	.word	0x0810a908
 8108b68:	0810a7be 	.word	0x0810a7be
 8108b6c:	0810a8af 	.word	0x0810a8af

08108b70 <__lshift>:
 8108b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8108b74:	460c      	mov	r4, r1
 8108b76:	6849      	ldr	r1, [r1, #4]
 8108b78:	6923      	ldr	r3, [r4, #16]
 8108b7a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8108b7e:	68a3      	ldr	r3, [r4, #8]
 8108b80:	4607      	mov	r7, r0
 8108b82:	4691      	mov	r9, r2
 8108b84:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8108b88:	f108 0601 	add.w	r6, r8, #1
 8108b8c:	42b3      	cmp	r3, r6
 8108b8e:	db0b      	blt.n	8108ba8 <__lshift+0x38>
 8108b90:	4638      	mov	r0, r7
 8108b92:	f7ff fd95 	bl	81086c0 <_Balloc>
 8108b96:	4605      	mov	r5, r0
 8108b98:	b948      	cbnz	r0, 8108bae <__lshift+0x3e>
 8108b9a:	4602      	mov	r2, r0
 8108b9c:	4b28      	ldr	r3, [pc, #160]	@ (8108c40 <__lshift+0xd0>)
 8108b9e:	4829      	ldr	r0, [pc, #164]	@ (8108c44 <__lshift+0xd4>)
 8108ba0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8108ba4:	f000 fb2c 	bl	8109200 <__assert_func>
 8108ba8:	3101      	adds	r1, #1
 8108baa:	005b      	lsls	r3, r3, #1
 8108bac:	e7ee      	b.n	8108b8c <__lshift+0x1c>
 8108bae:	2300      	movs	r3, #0
 8108bb0:	f100 0114 	add.w	r1, r0, #20
 8108bb4:	f100 0210 	add.w	r2, r0, #16
 8108bb8:	4618      	mov	r0, r3
 8108bba:	4553      	cmp	r3, sl
 8108bbc:	db33      	blt.n	8108c26 <__lshift+0xb6>
 8108bbe:	6920      	ldr	r0, [r4, #16]
 8108bc0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8108bc4:	f104 0314 	add.w	r3, r4, #20
 8108bc8:	f019 091f 	ands.w	r9, r9, #31
 8108bcc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8108bd0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8108bd4:	d02b      	beq.n	8108c2e <__lshift+0xbe>
 8108bd6:	f1c9 0e20 	rsb	lr, r9, #32
 8108bda:	468a      	mov	sl, r1
 8108bdc:	2200      	movs	r2, #0
 8108bde:	6818      	ldr	r0, [r3, #0]
 8108be0:	fa00 f009 	lsl.w	r0, r0, r9
 8108be4:	4310      	orrs	r0, r2
 8108be6:	f84a 0b04 	str.w	r0, [sl], #4
 8108bea:	f853 2b04 	ldr.w	r2, [r3], #4
 8108bee:	459c      	cmp	ip, r3
 8108bf0:	fa22 f20e 	lsr.w	r2, r2, lr
 8108bf4:	d8f3      	bhi.n	8108bde <__lshift+0x6e>
 8108bf6:	ebac 0304 	sub.w	r3, ip, r4
 8108bfa:	3b15      	subs	r3, #21
 8108bfc:	f023 0303 	bic.w	r3, r3, #3
 8108c00:	3304      	adds	r3, #4
 8108c02:	f104 0015 	add.w	r0, r4, #21
 8108c06:	4584      	cmp	ip, r0
 8108c08:	bf38      	it	cc
 8108c0a:	2304      	movcc	r3, #4
 8108c0c:	50ca      	str	r2, [r1, r3]
 8108c0e:	b10a      	cbz	r2, 8108c14 <__lshift+0xa4>
 8108c10:	f108 0602 	add.w	r6, r8, #2
 8108c14:	3e01      	subs	r6, #1
 8108c16:	4638      	mov	r0, r7
 8108c18:	612e      	str	r6, [r5, #16]
 8108c1a:	4621      	mov	r1, r4
 8108c1c:	f7ff fd90 	bl	8108740 <_Bfree>
 8108c20:	4628      	mov	r0, r5
 8108c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8108c26:	f842 0f04 	str.w	r0, [r2, #4]!
 8108c2a:	3301      	adds	r3, #1
 8108c2c:	e7c5      	b.n	8108bba <__lshift+0x4a>
 8108c2e:	3904      	subs	r1, #4
 8108c30:	f853 2b04 	ldr.w	r2, [r3], #4
 8108c34:	f841 2f04 	str.w	r2, [r1, #4]!
 8108c38:	459c      	cmp	ip, r3
 8108c3a:	d8f9      	bhi.n	8108c30 <__lshift+0xc0>
 8108c3c:	e7ea      	b.n	8108c14 <__lshift+0xa4>
 8108c3e:	bf00      	nop
 8108c40:	0810a82d 	.word	0x0810a82d
 8108c44:	0810a8af 	.word	0x0810a8af

08108c48 <__mcmp>:
 8108c48:	690a      	ldr	r2, [r1, #16]
 8108c4a:	4603      	mov	r3, r0
 8108c4c:	6900      	ldr	r0, [r0, #16]
 8108c4e:	1a80      	subs	r0, r0, r2
 8108c50:	b530      	push	{r4, r5, lr}
 8108c52:	d10e      	bne.n	8108c72 <__mcmp+0x2a>
 8108c54:	3314      	adds	r3, #20
 8108c56:	3114      	adds	r1, #20
 8108c58:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8108c5c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8108c60:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8108c64:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8108c68:	4295      	cmp	r5, r2
 8108c6a:	d003      	beq.n	8108c74 <__mcmp+0x2c>
 8108c6c:	d205      	bcs.n	8108c7a <__mcmp+0x32>
 8108c6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8108c72:	bd30      	pop	{r4, r5, pc}
 8108c74:	42a3      	cmp	r3, r4
 8108c76:	d3f3      	bcc.n	8108c60 <__mcmp+0x18>
 8108c78:	e7fb      	b.n	8108c72 <__mcmp+0x2a>
 8108c7a:	2001      	movs	r0, #1
 8108c7c:	e7f9      	b.n	8108c72 <__mcmp+0x2a>
	...

08108c80 <__mdiff>:
 8108c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108c84:	4689      	mov	r9, r1
 8108c86:	4606      	mov	r6, r0
 8108c88:	4611      	mov	r1, r2
 8108c8a:	4648      	mov	r0, r9
 8108c8c:	4614      	mov	r4, r2
 8108c8e:	f7ff ffdb 	bl	8108c48 <__mcmp>
 8108c92:	1e05      	subs	r5, r0, #0
 8108c94:	d112      	bne.n	8108cbc <__mdiff+0x3c>
 8108c96:	4629      	mov	r1, r5
 8108c98:	4630      	mov	r0, r6
 8108c9a:	f7ff fd11 	bl	81086c0 <_Balloc>
 8108c9e:	4602      	mov	r2, r0
 8108ca0:	b928      	cbnz	r0, 8108cae <__mdiff+0x2e>
 8108ca2:	4b3f      	ldr	r3, [pc, #252]	@ (8108da0 <__mdiff+0x120>)
 8108ca4:	f240 2137 	movw	r1, #567	@ 0x237
 8108ca8:	483e      	ldr	r0, [pc, #248]	@ (8108da4 <__mdiff+0x124>)
 8108caa:	f000 faa9 	bl	8109200 <__assert_func>
 8108cae:	2301      	movs	r3, #1
 8108cb0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8108cb4:	4610      	mov	r0, r2
 8108cb6:	b003      	add	sp, #12
 8108cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8108cbc:	bfbc      	itt	lt
 8108cbe:	464b      	movlt	r3, r9
 8108cc0:	46a1      	movlt	r9, r4
 8108cc2:	4630      	mov	r0, r6
 8108cc4:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8108cc8:	bfba      	itte	lt
 8108cca:	461c      	movlt	r4, r3
 8108ccc:	2501      	movlt	r5, #1
 8108cce:	2500      	movge	r5, #0
 8108cd0:	f7ff fcf6 	bl	81086c0 <_Balloc>
 8108cd4:	4602      	mov	r2, r0
 8108cd6:	b918      	cbnz	r0, 8108ce0 <__mdiff+0x60>
 8108cd8:	4b31      	ldr	r3, [pc, #196]	@ (8108da0 <__mdiff+0x120>)
 8108cda:	f240 2145 	movw	r1, #581	@ 0x245
 8108cde:	e7e3      	b.n	8108ca8 <__mdiff+0x28>
 8108ce0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8108ce4:	6926      	ldr	r6, [r4, #16]
 8108ce6:	60c5      	str	r5, [r0, #12]
 8108ce8:	f109 0310 	add.w	r3, r9, #16
 8108cec:	f109 0514 	add.w	r5, r9, #20
 8108cf0:	f104 0e14 	add.w	lr, r4, #20
 8108cf4:	f100 0b14 	add.w	fp, r0, #20
 8108cf8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8108cfc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8108d00:	9301      	str	r3, [sp, #4]
 8108d02:	46d9      	mov	r9, fp
 8108d04:	f04f 0c00 	mov.w	ip, #0
 8108d08:	9b01      	ldr	r3, [sp, #4]
 8108d0a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8108d0e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8108d12:	9301      	str	r3, [sp, #4]
 8108d14:	fa1f f38a 	uxth.w	r3, sl
 8108d18:	4619      	mov	r1, r3
 8108d1a:	b283      	uxth	r3, r0
 8108d1c:	1acb      	subs	r3, r1, r3
 8108d1e:	0c00      	lsrs	r0, r0, #16
 8108d20:	4463      	add	r3, ip
 8108d22:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8108d26:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8108d2a:	b29b      	uxth	r3, r3
 8108d2c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8108d30:	4576      	cmp	r6, lr
 8108d32:	f849 3b04 	str.w	r3, [r9], #4
 8108d36:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8108d3a:	d8e5      	bhi.n	8108d08 <__mdiff+0x88>
 8108d3c:	1b33      	subs	r3, r6, r4
 8108d3e:	3b15      	subs	r3, #21
 8108d40:	f023 0303 	bic.w	r3, r3, #3
 8108d44:	3415      	adds	r4, #21
 8108d46:	3304      	adds	r3, #4
 8108d48:	42a6      	cmp	r6, r4
 8108d4a:	bf38      	it	cc
 8108d4c:	2304      	movcc	r3, #4
 8108d4e:	441d      	add	r5, r3
 8108d50:	445b      	add	r3, fp
 8108d52:	461e      	mov	r6, r3
 8108d54:	462c      	mov	r4, r5
 8108d56:	4544      	cmp	r4, r8
 8108d58:	d30e      	bcc.n	8108d78 <__mdiff+0xf8>
 8108d5a:	f108 0103 	add.w	r1, r8, #3
 8108d5e:	1b49      	subs	r1, r1, r5
 8108d60:	f021 0103 	bic.w	r1, r1, #3
 8108d64:	3d03      	subs	r5, #3
 8108d66:	45a8      	cmp	r8, r5
 8108d68:	bf38      	it	cc
 8108d6a:	2100      	movcc	r1, #0
 8108d6c:	440b      	add	r3, r1
 8108d6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8108d72:	b191      	cbz	r1, 8108d9a <__mdiff+0x11a>
 8108d74:	6117      	str	r7, [r2, #16]
 8108d76:	e79d      	b.n	8108cb4 <__mdiff+0x34>
 8108d78:	f854 1b04 	ldr.w	r1, [r4], #4
 8108d7c:	46e6      	mov	lr, ip
 8108d7e:	0c08      	lsrs	r0, r1, #16
 8108d80:	fa1c fc81 	uxtah	ip, ip, r1
 8108d84:	4471      	add	r1, lr
 8108d86:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8108d8a:	b289      	uxth	r1, r1
 8108d8c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8108d90:	f846 1b04 	str.w	r1, [r6], #4
 8108d94:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8108d98:	e7dd      	b.n	8108d56 <__mdiff+0xd6>
 8108d9a:	3f01      	subs	r7, #1
 8108d9c:	e7e7      	b.n	8108d6e <__mdiff+0xee>
 8108d9e:	bf00      	nop
 8108da0:	0810a82d 	.word	0x0810a82d
 8108da4:	0810a8af 	.word	0x0810a8af

08108da8 <__ulp>:
 8108da8:	b082      	sub	sp, #8
 8108daa:	ed8d 0b00 	vstr	d0, [sp]
 8108dae:	9a01      	ldr	r2, [sp, #4]
 8108db0:	4b0f      	ldr	r3, [pc, #60]	@ (8108df0 <__ulp+0x48>)
 8108db2:	4013      	ands	r3, r2
 8108db4:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8108db8:	2b00      	cmp	r3, #0
 8108dba:	dc08      	bgt.n	8108dce <__ulp+0x26>
 8108dbc:	425b      	negs	r3, r3
 8108dbe:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8108dc2:	ea4f 5223 	mov.w	r2, r3, asr #20
 8108dc6:	da04      	bge.n	8108dd2 <__ulp+0x2a>
 8108dc8:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8108dcc:	4113      	asrs	r3, r2
 8108dce:	2200      	movs	r2, #0
 8108dd0:	e008      	b.n	8108de4 <__ulp+0x3c>
 8108dd2:	f1a2 0314 	sub.w	r3, r2, #20
 8108dd6:	2b1e      	cmp	r3, #30
 8108dd8:	bfda      	itte	le
 8108dda:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8108dde:	40da      	lsrle	r2, r3
 8108de0:	2201      	movgt	r2, #1
 8108de2:	2300      	movs	r3, #0
 8108de4:	4619      	mov	r1, r3
 8108de6:	4610      	mov	r0, r2
 8108de8:	ec41 0b10 	vmov	d0, r0, r1
 8108dec:	b002      	add	sp, #8
 8108dee:	4770      	bx	lr
 8108df0:	7ff00000 	.word	0x7ff00000

08108df4 <__b2d>:
 8108df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8108df8:	6906      	ldr	r6, [r0, #16]
 8108dfa:	f100 0814 	add.w	r8, r0, #20
 8108dfe:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8108e02:	1f37      	subs	r7, r6, #4
 8108e04:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8108e08:	4610      	mov	r0, r2
 8108e0a:	f7ff fd4b 	bl	81088a4 <__hi0bits>
 8108e0e:	f1c0 0320 	rsb	r3, r0, #32
 8108e12:	280a      	cmp	r0, #10
 8108e14:	600b      	str	r3, [r1, #0]
 8108e16:	491b      	ldr	r1, [pc, #108]	@ (8108e84 <__b2d+0x90>)
 8108e18:	dc15      	bgt.n	8108e46 <__b2d+0x52>
 8108e1a:	f1c0 0c0b 	rsb	ip, r0, #11
 8108e1e:	fa22 f30c 	lsr.w	r3, r2, ip
 8108e22:	45b8      	cmp	r8, r7
 8108e24:	ea43 0501 	orr.w	r5, r3, r1
 8108e28:	bf34      	ite	cc
 8108e2a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8108e2e:	2300      	movcs	r3, #0
 8108e30:	3015      	adds	r0, #21
 8108e32:	fa02 f000 	lsl.w	r0, r2, r0
 8108e36:	fa23 f30c 	lsr.w	r3, r3, ip
 8108e3a:	4303      	orrs	r3, r0
 8108e3c:	461c      	mov	r4, r3
 8108e3e:	ec45 4b10 	vmov	d0, r4, r5
 8108e42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8108e46:	45b8      	cmp	r8, r7
 8108e48:	bf3a      	itte	cc
 8108e4a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8108e4e:	f1a6 0708 	subcc.w	r7, r6, #8
 8108e52:	2300      	movcs	r3, #0
 8108e54:	380b      	subs	r0, #11
 8108e56:	d012      	beq.n	8108e7e <__b2d+0x8a>
 8108e58:	f1c0 0120 	rsb	r1, r0, #32
 8108e5c:	fa23 f401 	lsr.w	r4, r3, r1
 8108e60:	4082      	lsls	r2, r0
 8108e62:	4322      	orrs	r2, r4
 8108e64:	4547      	cmp	r7, r8
 8108e66:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8108e6a:	bf8c      	ite	hi
 8108e6c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8108e70:	2200      	movls	r2, #0
 8108e72:	4083      	lsls	r3, r0
 8108e74:	40ca      	lsrs	r2, r1
 8108e76:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8108e7a:	4313      	orrs	r3, r2
 8108e7c:	e7de      	b.n	8108e3c <__b2d+0x48>
 8108e7e:	ea42 0501 	orr.w	r5, r2, r1
 8108e82:	e7db      	b.n	8108e3c <__b2d+0x48>
 8108e84:	3ff00000 	.word	0x3ff00000

08108e88 <__d2b>:
 8108e88:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8108e8c:	460f      	mov	r7, r1
 8108e8e:	2101      	movs	r1, #1
 8108e90:	ec59 8b10 	vmov	r8, r9, d0
 8108e94:	4616      	mov	r6, r2
 8108e96:	f7ff fc13 	bl	81086c0 <_Balloc>
 8108e9a:	4604      	mov	r4, r0
 8108e9c:	b930      	cbnz	r0, 8108eac <__d2b+0x24>
 8108e9e:	4602      	mov	r2, r0
 8108ea0:	4b23      	ldr	r3, [pc, #140]	@ (8108f30 <__d2b+0xa8>)
 8108ea2:	4824      	ldr	r0, [pc, #144]	@ (8108f34 <__d2b+0xac>)
 8108ea4:	f240 310f 	movw	r1, #783	@ 0x30f
 8108ea8:	f000 f9aa 	bl	8109200 <__assert_func>
 8108eac:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8108eb0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8108eb4:	b10d      	cbz	r5, 8108eba <__d2b+0x32>
 8108eb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8108eba:	9301      	str	r3, [sp, #4]
 8108ebc:	f1b8 0300 	subs.w	r3, r8, #0
 8108ec0:	d023      	beq.n	8108f0a <__d2b+0x82>
 8108ec2:	4668      	mov	r0, sp
 8108ec4:	9300      	str	r3, [sp, #0]
 8108ec6:	f7ff fd0c 	bl	81088e2 <__lo0bits>
 8108eca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8108ece:	b1d0      	cbz	r0, 8108f06 <__d2b+0x7e>
 8108ed0:	f1c0 0320 	rsb	r3, r0, #32
 8108ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8108ed8:	430b      	orrs	r3, r1
 8108eda:	40c2      	lsrs	r2, r0
 8108edc:	6163      	str	r3, [r4, #20]
 8108ede:	9201      	str	r2, [sp, #4]
 8108ee0:	9b01      	ldr	r3, [sp, #4]
 8108ee2:	61a3      	str	r3, [r4, #24]
 8108ee4:	2b00      	cmp	r3, #0
 8108ee6:	bf0c      	ite	eq
 8108ee8:	2201      	moveq	r2, #1
 8108eea:	2202      	movne	r2, #2
 8108eec:	6122      	str	r2, [r4, #16]
 8108eee:	b1a5      	cbz	r5, 8108f1a <__d2b+0x92>
 8108ef0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8108ef4:	4405      	add	r5, r0
 8108ef6:	603d      	str	r5, [r7, #0]
 8108ef8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8108efc:	6030      	str	r0, [r6, #0]
 8108efe:	4620      	mov	r0, r4
 8108f00:	b003      	add	sp, #12
 8108f02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8108f06:	6161      	str	r1, [r4, #20]
 8108f08:	e7ea      	b.n	8108ee0 <__d2b+0x58>
 8108f0a:	a801      	add	r0, sp, #4
 8108f0c:	f7ff fce9 	bl	81088e2 <__lo0bits>
 8108f10:	9b01      	ldr	r3, [sp, #4]
 8108f12:	6163      	str	r3, [r4, #20]
 8108f14:	3020      	adds	r0, #32
 8108f16:	2201      	movs	r2, #1
 8108f18:	e7e8      	b.n	8108eec <__d2b+0x64>
 8108f1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8108f1e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8108f22:	6038      	str	r0, [r7, #0]
 8108f24:	6918      	ldr	r0, [r3, #16]
 8108f26:	f7ff fcbd 	bl	81088a4 <__hi0bits>
 8108f2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8108f2e:	e7e5      	b.n	8108efc <__d2b+0x74>
 8108f30:	0810a82d 	.word	0x0810a82d
 8108f34:	0810a8af 	.word	0x0810a8af

08108f38 <__ratio>:
 8108f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8108f3c:	b085      	sub	sp, #20
 8108f3e:	e9cd 1000 	strd	r1, r0, [sp]
 8108f42:	a902      	add	r1, sp, #8
 8108f44:	f7ff ff56 	bl	8108df4 <__b2d>
 8108f48:	9800      	ldr	r0, [sp, #0]
 8108f4a:	a903      	add	r1, sp, #12
 8108f4c:	ec55 4b10 	vmov	r4, r5, d0
 8108f50:	f7ff ff50 	bl	8108df4 <__b2d>
 8108f54:	9b01      	ldr	r3, [sp, #4]
 8108f56:	6919      	ldr	r1, [r3, #16]
 8108f58:	9b00      	ldr	r3, [sp, #0]
 8108f5a:	691b      	ldr	r3, [r3, #16]
 8108f5c:	1ac9      	subs	r1, r1, r3
 8108f5e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8108f62:	1a9b      	subs	r3, r3, r2
 8108f64:	ec5b ab10 	vmov	sl, fp, d0
 8108f68:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8108f6c:	2b00      	cmp	r3, #0
 8108f6e:	bfce      	itee	gt
 8108f70:	462a      	movgt	r2, r5
 8108f72:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8108f76:	465a      	movle	r2, fp
 8108f78:	462f      	mov	r7, r5
 8108f7a:	46d9      	mov	r9, fp
 8108f7c:	bfcc      	ite	gt
 8108f7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8108f82:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8108f86:	464b      	mov	r3, r9
 8108f88:	4652      	mov	r2, sl
 8108f8a:	4620      	mov	r0, r4
 8108f8c:	4639      	mov	r1, r7
 8108f8e:	f7f7 fce5 	bl	810095c <__aeabi_ddiv>
 8108f92:	ec41 0b10 	vmov	d0, r0, r1
 8108f96:	b005      	add	sp, #20
 8108f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08108f9c <__copybits>:
 8108f9c:	3901      	subs	r1, #1
 8108f9e:	b570      	push	{r4, r5, r6, lr}
 8108fa0:	1149      	asrs	r1, r1, #5
 8108fa2:	6914      	ldr	r4, [r2, #16]
 8108fa4:	3101      	adds	r1, #1
 8108fa6:	f102 0314 	add.w	r3, r2, #20
 8108faa:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8108fae:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8108fb2:	1f05      	subs	r5, r0, #4
 8108fb4:	42a3      	cmp	r3, r4
 8108fb6:	d30c      	bcc.n	8108fd2 <__copybits+0x36>
 8108fb8:	1aa3      	subs	r3, r4, r2
 8108fba:	3b11      	subs	r3, #17
 8108fbc:	f023 0303 	bic.w	r3, r3, #3
 8108fc0:	3211      	adds	r2, #17
 8108fc2:	42a2      	cmp	r2, r4
 8108fc4:	bf88      	it	hi
 8108fc6:	2300      	movhi	r3, #0
 8108fc8:	4418      	add	r0, r3
 8108fca:	2300      	movs	r3, #0
 8108fcc:	4288      	cmp	r0, r1
 8108fce:	d305      	bcc.n	8108fdc <__copybits+0x40>
 8108fd0:	bd70      	pop	{r4, r5, r6, pc}
 8108fd2:	f853 6b04 	ldr.w	r6, [r3], #4
 8108fd6:	f845 6f04 	str.w	r6, [r5, #4]!
 8108fda:	e7eb      	b.n	8108fb4 <__copybits+0x18>
 8108fdc:	f840 3b04 	str.w	r3, [r0], #4
 8108fe0:	e7f4      	b.n	8108fcc <__copybits+0x30>

08108fe2 <__any_on>:
 8108fe2:	f100 0214 	add.w	r2, r0, #20
 8108fe6:	6900      	ldr	r0, [r0, #16]
 8108fe8:	114b      	asrs	r3, r1, #5
 8108fea:	4298      	cmp	r0, r3
 8108fec:	b510      	push	{r4, lr}
 8108fee:	db11      	blt.n	8109014 <__any_on+0x32>
 8108ff0:	dd0a      	ble.n	8109008 <__any_on+0x26>
 8108ff2:	f011 011f 	ands.w	r1, r1, #31
 8108ff6:	d007      	beq.n	8109008 <__any_on+0x26>
 8108ff8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8108ffc:	fa24 f001 	lsr.w	r0, r4, r1
 8109000:	fa00 f101 	lsl.w	r1, r0, r1
 8109004:	428c      	cmp	r4, r1
 8109006:	d10b      	bne.n	8109020 <__any_on+0x3e>
 8109008:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 810900c:	4293      	cmp	r3, r2
 810900e:	d803      	bhi.n	8109018 <__any_on+0x36>
 8109010:	2000      	movs	r0, #0
 8109012:	bd10      	pop	{r4, pc}
 8109014:	4603      	mov	r3, r0
 8109016:	e7f7      	b.n	8109008 <__any_on+0x26>
 8109018:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 810901c:	2900      	cmp	r1, #0
 810901e:	d0f5      	beq.n	810900c <__any_on+0x2a>
 8109020:	2001      	movs	r0, #1
 8109022:	e7f6      	b.n	8109012 <__any_on+0x30>

08109024 <__sread>:
 8109024:	b510      	push	{r4, lr}
 8109026:	460c      	mov	r4, r1
 8109028:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810902c:	f000 f8b4 	bl	8109198 <_read_r>
 8109030:	2800      	cmp	r0, #0
 8109032:	bfab      	itete	ge
 8109034:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8109036:	89a3      	ldrhlt	r3, [r4, #12]
 8109038:	181b      	addge	r3, r3, r0
 810903a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 810903e:	bfac      	ite	ge
 8109040:	6563      	strge	r3, [r4, #84]	@ 0x54
 8109042:	81a3      	strhlt	r3, [r4, #12]
 8109044:	bd10      	pop	{r4, pc}

08109046 <__swrite>:
 8109046:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810904a:	461f      	mov	r7, r3
 810904c:	898b      	ldrh	r3, [r1, #12]
 810904e:	05db      	lsls	r3, r3, #23
 8109050:	4605      	mov	r5, r0
 8109052:	460c      	mov	r4, r1
 8109054:	4616      	mov	r6, r2
 8109056:	d505      	bpl.n	8109064 <__swrite+0x1e>
 8109058:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810905c:	2302      	movs	r3, #2
 810905e:	2200      	movs	r2, #0
 8109060:	f000 f888 	bl	8109174 <_lseek_r>
 8109064:	89a3      	ldrh	r3, [r4, #12]
 8109066:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810906a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 810906e:	81a3      	strh	r3, [r4, #12]
 8109070:	4632      	mov	r2, r6
 8109072:	463b      	mov	r3, r7
 8109074:	4628      	mov	r0, r5
 8109076:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810907a:	f000 b8af 	b.w	81091dc <_write_r>

0810907e <__sseek>:
 810907e:	b510      	push	{r4, lr}
 8109080:	460c      	mov	r4, r1
 8109082:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8109086:	f000 f875 	bl	8109174 <_lseek_r>
 810908a:	1c43      	adds	r3, r0, #1
 810908c:	89a3      	ldrh	r3, [r4, #12]
 810908e:	bf15      	itete	ne
 8109090:	6560      	strne	r0, [r4, #84]	@ 0x54
 8109092:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8109096:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 810909a:	81a3      	strheq	r3, [r4, #12]
 810909c:	bf18      	it	ne
 810909e:	81a3      	strhne	r3, [r4, #12]
 81090a0:	bd10      	pop	{r4, pc}

081090a2 <__sclose>:
 81090a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81090a6:	f000 b855 	b.w	8109154 <_close_r>

081090aa <_realloc_r>:
 81090aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81090ae:	4680      	mov	r8, r0
 81090b0:	4615      	mov	r5, r2
 81090b2:	460c      	mov	r4, r1
 81090b4:	b921      	cbnz	r1, 81090c0 <_realloc_r+0x16>
 81090b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 81090ba:	4611      	mov	r1, r2
 81090bc:	f7ff b9b6 	b.w	810842c <_malloc_r>
 81090c0:	b92a      	cbnz	r2, 81090ce <_realloc_r+0x24>
 81090c2:	f000 f8cf 	bl	8109264 <_free_r>
 81090c6:	2400      	movs	r4, #0
 81090c8:	4620      	mov	r0, r4
 81090ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81090ce:	f000 f913 	bl	81092f8 <_malloc_usable_size_r>
 81090d2:	4285      	cmp	r5, r0
 81090d4:	4606      	mov	r6, r0
 81090d6:	d802      	bhi.n	81090de <_realloc_r+0x34>
 81090d8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 81090dc:	d8f4      	bhi.n	81090c8 <_realloc_r+0x1e>
 81090de:	4629      	mov	r1, r5
 81090e0:	4640      	mov	r0, r8
 81090e2:	f7ff f9a3 	bl	810842c <_malloc_r>
 81090e6:	4607      	mov	r7, r0
 81090e8:	2800      	cmp	r0, #0
 81090ea:	d0ec      	beq.n	81090c6 <_realloc_r+0x1c>
 81090ec:	42b5      	cmp	r5, r6
 81090ee:	462a      	mov	r2, r5
 81090f0:	4621      	mov	r1, r4
 81090f2:	bf28      	it	cs
 81090f4:	4632      	movcs	r2, r6
 81090f6:	f7fd fe72 	bl	8106dde <memcpy>
 81090fa:	4621      	mov	r1, r4
 81090fc:	4640      	mov	r0, r8
 81090fe:	f000 f8b1 	bl	8109264 <_free_r>
 8109102:	463c      	mov	r4, r7
 8109104:	e7e0      	b.n	81090c8 <_realloc_r+0x1e>

08109106 <__ascii_wctomb>:
 8109106:	4603      	mov	r3, r0
 8109108:	4608      	mov	r0, r1
 810910a:	b141      	cbz	r1, 810911e <__ascii_wctomb+0x18>
 810910c:	2aff      	cmp	r2, #255	@ 0xff
 810910e:	d904      	bls.n	810911a <__ascii_wctomb+0x14>
 8109110:	228a      	movs	r2, #138	@ 0x8a
 8109112:	601a      	str	r2, [r3, #0]
 8109114:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8109118:	4770      	bx	lr
 810911a:	700a      	strb	r2, [r1, #0]
 810911c:	2001      	movs	r0, #1
 810911e:	4770      	bx	lr

08109120 <memmove>:
 8109120:	4288      	cmp	r0, r1
 8109122:	b510      	push	{r4, lr}
 8109124:	eb01 0402 	add.w	r4, r1, r2
 8109128:	d902      	bls.n	8109130 <memmove+0x10>
 810912a:	4284      	cmp	r4, r0
 810912c:	4623      	mov	r3, r4
 810912e:	d807      	bhi.n	8109140 <memmove+0x20>
 8109130:	1e43      	subs	r3, r0, #1
 8109132:	42a1      	cmp	r1, r4
 8109134:	d008      	beq.n	8109148 <memmove+0x28>
 8109136:	f811 2b01 	ldrb.w	r2, [r1], #1
 810913a:	f803 2f01 	strb.w	r2, [r3, #1]!
 810913e:	e7f8      	b.n	8109132 <memmove+0x12>
 8109140:	4402      	add	r2, r0
 8109142:	4601      	mov	r1, r0
 8109144:	428a      	cmp	r2, r1
 8109146:	d100      	bne.n	810914a <memmove+0x2a>
 8109148:	bd10      	pop	{r4, pc}
 810914a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 810914e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8109152:	e7f7      	b.n	8109144 <memmove+0x24>

08109154 <_close_r>:
 8109154:	b538      	push	{r3, r4, r5, lr}
 8109156:	4d06      	ldr	r5, [pc, #24]	@ (8109170 <_close_r+0x1c>)
 8109158:	2300      	movs	r3, #0
 810915a:	4604      	mov	r4, r0
 810915c:	4608      	mov	r0, r1
 810915e:	602b      	str	r3, [r5, #0]
 8109160:	f7f8 fce5 	bl	8101b2e <_close>
 8109164:	1c43      	adds	r3, r0, #1
 8109166:	d102      	bne.n	810916e <_close_r+0x1a>
 8109168:	682b      	ldr	r3, [r5, #0]
 810916a:	b103      	cbz	r3, 810916e <_close_r+0x1a>
 810916c:	6023      	str	r3, [r4, #0]
 810916e:	bd38      	pop	{r3, r4, r5, pc}
 8109170:	100008fc 	.word	0x100008fc

08109174 <_lseek_r>:
 8109174:	b538      	push	{r3, r4, r5, lr}
 8109176:	4d07      	ldr	r5, [pc, #28]	@ (8109194 <_lseek_r+0x20>)
 8109178:	4604      	mov	r4, r0
 810917a:	4608      	mov	r0, r1
 810917c:	4611      	mov	r1, r2
 810917e:	2200      	movs	r2, #0
 8109180:	602a      	str	r2, [r5, #0]
 8109182:	461a      	mov	r2, r3
 8109184:	f7f8 fcfa 	bl	8101b7c <_lseek>
 8109188:	1c43      	adds	r3, r0, #1
 810918a:	d102      	bne.n	8109192 <_lseek_r+0x1e>
 810918c:	682b      	ldr	r3, [r5, #0]
 810918e:	b103      	cbz	r3, 8109192 <_lseek_r+0x1e>
 8109190:	6023      	str	r3, [r4, #0]
 8109192:	bd38      	pop	{r3, r4, r5, pc}
 8109194:	100008fc 	.word	0x100008fc

08109198 <_read_r>:
 8109198:	b538      	push	{r3, r4, r5, lr}
 810919a:	4d07      	ldr	r5, [pc, #28]	@ (81091b8 <_read_r+0x20>)
 810919c:	4604      	mov	r4, r0
 810919e:	4608      	mov	r0, r1
 81091a0:	4611      	mov	r1, r2
 81091a2:	2200      	movs	r2, #0
 81091a4:	602a      	str	r2, [r5, #0]
 81091a6:	461a      	mov	r2, r3
 81091a8:	f7f8 fc88 	bl	8101abc <_read>
 81091ac:	1c43      	adds	r3, r0, #1
 81091ae:	d102      	bne.n	81091b6 <_read_r+0x1e>
 81091b0:	682b      	ldr	r3, [r5, #0]
 81091b2:	b103      	cbz	r3, 81091b6 <_read_r+0x1e>
 81091b4:	6023      	str	r3, [r4, #0]
 81091b6:	bd38      	pop	{r3, r4, r5, pc}
 81091b8:	100008fc 	.word	0x100008fc

081091bc <_sbrk_r>:
 81091bc:	b538      	push	{r3, r4, r5, lr}
 81091be:	4d06      	ldr	r5, [pc, #24]	@ (81091d8 <_sbrk_r+0x1c>)
 81091c0:	2300      	movs	r3, #0
 81091c2:	4604      	mov	r4, r0
 81091c4:	4608      	mov	r0, r1
 81091c6:	602b      	str	r3, [r5, #0]
 81091c8:	f7f8 fce6 	bl	8101b98 <_sbrk>
 81091cc:	1c43      	adds	r3, r0, #1
 81091ce:	d102      	bne.n	81091d6 <_sbrk_r+0x1a>
 81091d0:	682b      	ldr	r3, [r5, #0]
 81091d2:	b103      	cbz	r3, 81091d6 <_sbrk_r+0x1a>
 81091d4:	6023      	str	r3, [r4, #0]
 81091d6:	bd38      	pop	{r3, r4, r5, pc}
 81091d8:	100008fc 	.word	0x100008fc

081091dc <_write_r>:
 81091dc:	b538      	push	{r3, r4, r5, lr}
 81091de:	4d07      	ldr	r5, [pc, #28]	@ (81091fc <_write_r+0x20>)
 81091e0:	4604      	mov	r4, r0
 81091e2:	4608      	mov	r0, r1
 81091e4:	4611      	mov	r1, r2
 81091e6:	2200      	movs	r2, #0
 81091e8:	602a      	str	r2, [r5, #0]
 81091ea:	461a      	mov	r2, r3
 81091ec:	f7f8 fc83 	bl	8101af6 <_write>
 81091f0:	1c43      	adds	r3, r0, #1
 81091f2:	d102      	bne.n	81091fa <_write_r+0x1e>
 81091f4:	682b      	ldr	r3, [r5, #0]
 81091f6:	b103      	cbz	r3, 81091fa <_write_r+0x1e>
 81091f8:	6023      	str	r3, [r4, #0]
 81091fa:	bd38      	pop	{r3, r4, r5, pc}
 81091fc:	100008fc 	.word	0x100008fc

08109200 <__assert_func>:
 8109200:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8109202:	4614      	mov	r4, r2
 8109204:	461a      	mov	r2, r3
 8109206:	4b09      	ldr	r3, [pc, #36]	@ (810922c <__assert_func+0x2c>)
 8109208:	681b      	ldr	r3, [r3, #0]
 810920a:	4605      	mov	r5, r0
 810920c:	68d8      	ldr	r0, [r3, #12]
 810920e:	b954      	cbnz	r4, 8109226 <__assert_func+0x26>
 8109210:	4b07      	ldr	r3, [pc, #28]	@ (8109230 <__assert_func+0x30>)
 8109212:	461c      	mov	r4, r3
 8109214:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8109218:	9100      	str	r1, [sp, #0]
 810921a:	462b      	mov	r3, r5
 810921c:	4905      	ldr	r1, [pc, #20]	@ (8109234 <__assert_func+0x34>)
 810921e:	f000 f873 	bl	8109308 <fiprintf>
 8109222:	f000 f883 	bl	810932c <abort>
 8109226:	4b04      	ldr	r3, [pc, #16]	@ (8109238 <__assert_func+0x38>)
 8109228:	e7f4      	b.n	8109214 <__assert_func+0x14>
 810922a:	bf00      	nop
 810922c:	10000198 	.word	0x10000198
 8109230:	0810aa43 	.word	0x0810aa43
 8109234:	0810aa15 	.word	0x0810aa15
 8109238:	0810aa08 	.word	0x0810aa08

0810923c <_calloc_r>:
 810923c:	b570      	push	{r4, r5, r6, lr}
 810923e:	fba1 5402 	umull	r5, r4, r1, r2
 8109242:	b93c      	cbnz	r4, 8109254 <_calloc_r+0x18>
 8109244:	4629      	mov	r1, r5
 8109246:	f7ff f8f1 	bl	810842c <_malloc_r>
 810924a:	4606      	mov	r6, r0
 810924c:	b928      	cbnz	r0, 810925a <_calloc_r+0x1e>
 810924e:	2600      	movs	r6, #0
 8109250:	4630      	mov	r0, r6
 8109252:	bd70      	pop	{r4, r5, r6, pc}
 8109254:	220c      	movs	r2, #12
 8109256:	6002      	str	r2, [r0, #0]
 8109258:	e7f9      	b.n	810924e <_calloc_r+0x12>
 810925a:	462a      	mov	r2, r5
 810925c:	4621      	mov	r1, r4
 810925e:	f7fd fd85 	bl	8106d6c <memset>
 8109262:	e7f5      	b.n	8109250 <_calloc_r+0x14>

08109264 <_free_r>:
 8109264:	b538      	push	{r3, r4, r5, lr}
 8109266:	4605      	mov	r5, r0
 8109268:	2900      	cmp	r1, #0
 810926a:	d041      	beq.n	81092f0 <_free_r+0x8c>
 810926c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8109270:	1f0c      	subs	r4, r1, #4
 8109272:	2b00      	cmp	r3, #0
 8109274:	bfb8      	it	lt
 8109276:	18e4      	addlt	r4, r4, r3
 8109278:	f7ff fa16 	bl	81086a8 <__malloc_lock>
 810927c:	4a1d      	ldr	r2, [pc, #116]	@ (81092f4 <_free_r+0x90>)
 810927e:	6813      	ldr	r3, [r2, #0]
 8109280:	b933      	cbnz	r3, 8109290 <_free_r+0x2c>
 8109282:	6063      	str	r3, [r4, #4]
 8109284:	6014      	str	r4, [r2, #0]
 8109286:	4628      	mov	r0, r5
 8109288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810928c:	f7ff ba12 	b.w	81086b4 <__malloc_unlock>
 8109290:	42a3      	cmp	r3, r4
 8109292:	d908      	bls.n	81092a6 <_free_r+0x42>
 8109294:	6820      	ldr	r0, [r4, #0]
 8109296:	1821      	adds	r1, r4, r0
 8109298:	428b      	cmp	r3, r1
 810929a:	bf01      	itttt	eq
 810929c:	6819      	ldreq	r1, [r3, #0]
 810929e:	685b      	ldreq	r3, [r3, #4]
 81092a0:	1809      	addeq	r1, r1, r0
 81092a2:	6021      	streq	r1, [r4, #0]
 81092a4:	e7ed      	b.n	8109282 <_free_r+0x1e>
 81092a6:	461a      	mov	r2, r3
 81092a8:	685b      	ldr	r3, [r3, #4]
 81092aa:	b10b      	cbz	r3, 81092b0 <_free_r+0x4c>
 81092ac:	42a3      	cmp	r3, r4
 81092ae:	d9fa      	bls.n	81092a6 <_free_r+0x42>
 81092b0:	6811      	ldr	r1, [r2, #0]
 81092b2:	1850      	adds	r0, r2, r1
 81092b4:	42a0      	cmp	r0, r4
 81092b6:	d10b      	bne.n	81092d0 <_free_r+0x6c>
 81092b8:	6820      	ldr	r0, [r4, #0]
 81092ba:	4401      	add	r1, r0
 81092bc:	1850      	adds	r0, r2, r1
 81092be:	4283      	cmp	r3, r0
 81092c0:	6011      	str	r1, [r2, #0]
 81092c2:	d1e0      	bne.n	8109286 <_free_r+0x22>
 81092c4:	6818      	ldr	r0, [r3, #0]
 81092c6:	685b      	ldr	r3, [r3, #4]
 81092c8:	6053      	str	r3, [r2, #4]
 81092ca:	4408      	add	r0, r1
 81092cc:	6010      	str	r0, [r2, #0]
 81092ce:	e7da      	b.n	8109286 <_free_r+0x22>
 81092d0:	d902      	bls.n	81092d8 <_free_r+0x74>
 81092d2:	230c      	movs	r3, #12
 81092d4:	602b      	str	r3, [r5, #0]
 81092d6:	e7d6      	b.n	8109286 <_free_r+0x22>
 81092d8:	6820      	ldr	r0, [r4, #0]
 81092da:	1821      	adds	r1, r4, r0
 81092dc:	428b      	cmp	r3, r1
 81092de:	bf04      	itt	eq
 81092e0:	6819      	ldreq	r1, [r3, #0]
 81092e2:	685b      	ldreq	r3, [r3, #4]
 81092e4:	6063      	str	r3, [r4, #4]
 81092e6:	bf04      	itt	eq
 81092e8:	1809      	addeq	r1, r1, r0
 81092ea:	6021      	streq	r1, [r4, #0]
 81092ec:	6054      	str	r4, [r2, #4]
 81092ee:	e7ca      	b.n	8109286 <_free_r+0x22>
 81092f0:	bd38      	pop	{r3, r4, r5, pc}
 81092f2:	bf00      	nop
 81092f4:	100008f8 	.word	0x100008f8

081092f8 <_malloc_usable_size_r>:
 81092f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 81092fc:	1f18      	subs	r0, r3, #4
 81092fe:	2b00      	cmp	r3, #0
 8109300:	bfbc      	itt	lt
 8109302:	580b      	ldrlt	r3, [r1, r0]
 8109304:	18c0      	addlt	r0, r0, r3
 8109306:	4770      	bx	lr

08109308 <fiprintf>:
 8109308:	b40e      	push	{r1, r2, r3}
 810930a:	b503      	push	{r0, r1, lr}
 810930c:	4601      	mov	r1, r0
 810930e:	ab03      	add	r3, sp, #12
 8109310:	4805      	ldr	r0, [pc, #20]	@ (8109328 <fiprintf+0x20>)
 8109312:	f853 2b04 	ldr.w	r2, [r3], #4
 8109316:	6800      	ldr	r0, [r0, #0]
 8109318:	9301      	str	r3, [sp, #4]
 810931a:	f000 f837 	bl	810938c <_vfiprintf_r>
 810931e:	b002      	add	sp, #8
 8109320:	f85d eb04 	ldr.w	lr, [sp], #4
 8109324:	b003      	add	sp, #12
 8109326:	4770      	bx	lr
 8109328:	10000198 	.word	0x10000198

0810932c <abort>:
 810932c:	b508      	push	{r3, lr}
 810932e:	2006      	movs	r0, #6
 8109330:	f000 fa84 	bl	810983c <raise>
 8109334:	2001      	movs	r0, #1
 8109336:	f7f8 fbb6 	bl	8101aa6 <_exit>

0810933a <__sfputc_r>:
 810933a:	6893      	ldr	r3, [r2, #8]
 810933c:	3b01      	subs	r3, #1
 810933e:	2b00      	cmp	r3, #0
 8109340:	b410      	push	{r4}
 8109342:	6093      	str	r3, [r2, #8]
 8109344:	da08      	bge.n	8109358 <__sfputc_r+0x1e>
 8109346:	6994      	ldr	r4, [r2, #24]
 8109348:	42a3      	cmp	r3, r4
 810934a:	db01      	blt.n	8109350 <__sfputc_r+0x16>
 810934c:	290a      	cmp	r1, #10
 810934e:	d103      	bne.n	8109358 <__sfputc_r+0x1e>
 8109350:	f85d 4b04 	ldr.w	r4, [sp], #4
 8109354:	f000 b932 	b.w	81095bc <__swbuf_r>
 8109358:	6813      	ldr	r3, [r2, #0]
 810935a:	1c58      	adds	r0, r3, #1
 810935c:	6010      	str	r0, [r2, #0]
 810935e:	7019      	strb	r1, [r3, #0]
 8109360:	4608      	mov	r0, r1
 8109362:	f85d 4b04 	ldr.w	r4, [sp], #4
 8109366:	4770      	bx	lr

08109368 <__sfputs_r>:
 8109368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810936a:	4606      	mov	r6, r0
 810936c:	460f      	mov	r7, r1
 810936e:	4614      	mov	r4, r2
 8109370:	18d5      	adds	r5, r2, r3
 8109372:	42ac      	cmp	r4, r5
 8109374:	d101      	bne.n	810937a <__sfputs_r+0x12>
 8109376:	2000      	movs	r0, #0
 8109378:	e007      	b.n	810938a <__sfputs_r+0x22>
 810937a:	f814 1b01 	ldrb.w	r1, [r4], #1
 810937e:	463a      	mov	r2, r7
 8109380:	4630      	mov	r0, r6
 8109382:	f7ff ffda 	bl	810933a <__sfputc_r>
 8109386:	1c43      	adds	r3, r0, #1
 8109388:	d1f3      	bne.n	8109372 <__sfputs_r+0xa>
 810938a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0810938c <_vfiprintf_r>:
 810938c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8109390:	460d      	mov	r5, r1
 8109392:	b09d      	sub	sp, #116	@ 0x74
 8109394:	4614      	mov	r4, r2
 8109396:	4698      	mov	r8, r3
 8109398:	4606      	mov	r6, r0
 810939a:	b118      	cbz	r0, 81093a4 <_vfiprintf_r+0x18>
 810939c:	6a03      	ldr	r3, [r0, #32]
 810939e:	b90b      	cbnz	r3, 81093a4 <_vfiprintf_r+0x18>
 81093a0:	f7fc fe18 	bl	8105fd4 <__sinit>
 81093a4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81093a6:	07d9      	lsls	r1, r3, #31
 81093a8:	d405      	bmi.n	81093b6 <_vfiprintf_r+0x2a>
 81093aa:	89ab      	ldrh	r3, [r5, #12]
 81093ac:	059a      	lsls	r2, r3, #22
 81093ae:	d402      	bmi.n	81093b6 <_vfiprintf_r+0x2a>
 81093b0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81093b2:	f7fd fd12 	bl	8106dda <__retarget_lock_acquire_recursive>
 81093b6:	89ab      	ldrh	r3, [r5, #12]
 81093b8:	071b      	lsls	r3, r3, #28
 81093ba:	d501      	bpl.n	81093c0 <_vfiprintf_r+0x34>
 81093bc:	692b      	ldr	r3, [r5, #16]
 81093be:	b99b      	cbnz	r3, 81093e8 <_vfiprintf_r+0x5c>
 81093c0:	4629      	mov	r1, r5
 81093c2:	4630      	mov	r0, r6
 81093c4:	f000 f938 	bl	8109638 <__swsetup_r>
 81093c8:	b170      	cbz	r0, 81093e8 <_vfiprintf_r+0x5c>
 81093ca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 81093cc:	07dc      	lsls	r4, r3, #31
 81093ce:	d504      	bpl.n	81093da <_vfiprintf_r+0x4e>
 81093d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81093d4:	b01d      	add	sp, #116	@ 0x74
 81093d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81093da:	89ab      	ldrh	r3, [r5, #12]
 81093dc:	0598      	lsls	r0, r3, #22
 81093de:	d4f7      	bmi.n	81093d0 <_vfiprintf_r+0x44>
 81093e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 81093e2:	f7fd fcfb 	bl	8106ddc <__retarget_lock_release_recursive>
 81093e6:	e7f3      	b.n	81093d0 <_vfiprintf_r+0x44>
 81093e8:	2300      	movs	r3, #0
 81093ea:	9309      	str	r3, [sp, #36]	@ 0x24
 81093ec:	2320      	movs	r3, #32
 81093ee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 81093f2:	f8cd 800c 	str.w	r8, [sp, #12]
 81093f6:	2330      	movs	r3, #48	@ 0x30
 81093f8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 81095a8 <_vfiprintf_r+0x21c>
 81093fc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8109400:	f04f 0901 	mov.w	r9, #1
 8109404:	4623      	mov	r3, r4
 8109406:	469a      	mov	sl, r3
 8109408:	f813 2b01 	ldrb.w	r2, [r3], #1
 810940c:	b10a      	cbz	r2, 8109412 <_vfiprintf_r+0x86>
 810940e:	2a25      	cmp	r2, #37	@ 0x25
 8109410:	d1f9      	bne.n	8109406 <_vfiprintf_r+0x7a>
 8109412:	ebba 0b04 	subs.w	fp, sl, r4
 8109416:	d00b      	beq.n	8109430 <_vfiprintf_r+0xa4>
 8109418:	465b      	mov	r3, fp
 810941a:	4622      	mov	r2, r4
 810941c:	4629      	mov	r1, r5
 810941e:	4630      	mov	r0, r6
 8109420:	f7ff ffa2 	bl	8109368 <__sfputs_r>
 8109424:	3001      	adds	r0, #1
 8109426:	f000 80a7 	beq.w	8109578 <_vfiprintf_r+0x1ec>
 810942a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 810942c:	445a      	add	r2, fp
 810942e:	9209      	str	r2, [sp, #36]	@ 0x24
 8109430:	f89a 3000 	ldrb.w	r3, [sl]
 8109434:	2b00      	cmp	r3, #0
 8109436:	f000 809f 	beq.w	8109578 <_vfiprintf_r+0x1ec>
 810943a:	2300      	movs	r3, #0
 810943c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8109440:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8109444:	f10a 0a01 	add.w	sl, sl, #1
 8109448:	9304      	str	r3, [sp, #16]
 810944a:	9307      	str	r3, [sp, #28]
 810944c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8109450:	931a      	str	r3, [sp, #104]	@ 0x68
 8109452:	4654      	mov	r4, sl
 8109454:	2205      	movs	r2, #5
 8109456:	f814 1b01 	ldrb.w	r1, [r4], #1
 810945a:	4853      	ldr	r0, [pc, #332]	@ (81095a8 <_vfiprintf_r+0x21c>)
 810945c:	f7f6 ff40 	bl	81002e0 <memchr>
 8109460:	9a04      	ldr	r2, [sp, #16]
 8109462:	b9d8      	cbnz	r0, 810949c <_vfiprintf_r+0x110>
 8109464:	06d1      	lsls	r1, r2, #27
 8109466:	bf44      	itt	mi
 8109468:	2320      	movmi	r3, #32
 810946a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 810946e:	0713      	lsls	r3, r2, #28
 8109470:	bf44      	itt	mi
 8109472:	232b      	movmi	r3, #43	@ 0x2b
 8109474:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8109478:	f89a 3000 	ldrb.w	r3, [sl]
 810947c:	2b2a      	cmp	r3, #42	@ 0x2a
 810947e:	d015      	beq.n	81094ac <_vfiprintf_r+0x120>
 8109480:	9a07      	ldr	r2, [sp, #28]
 8109482:	4654      	mov	r4, sl
 8109484:	2000      	movs	r0, #0
 8109486:	f04f 0c0a 	mov.w	ip, #10
 810948a:	4621      	mov	r1, r4
 810948c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8109490:	3b30      	subs	r3, #48	@ 0x30
 8109492:	2b09      	cmp	r3, #9
 8109494:	d94b      	bls.n	810952e <_vfiprintf_r+0x1a2>
 8109496:	b1b0      	cbz	r0, 81094c6 <_vfiprintf_r+0x13a>
 8109498:	9207      	str	r2, [sp, #28]
 810949a:	e014      	b.n	81094c6 <_vfiprintf_r+0x13a>
 810949c:	eba0 0308 	sub.w	r3, r0, r8
 81094a0:	fa09 f303 	lsl.w	r3, r9, r3
 81094a4:	4313      	orrs	r3, r2
 81094a6:	9304      	str	r3, [sp, #16]
 81094a8:	46a2      	mov	sl, r4
 81094aa:	e7d2      	b.n	8109452 <_vfiprintf_r+0xc6>
 81094ac:	9b03      	ldr	r3, [sp, #12]
 81094ae:	1d19      	adds	r1, r3, #4
 81094b0:	681b      	ldr	r3, [r3, #0]
 81094b2:	9103      	str	r1, [sp, #12]
 81094b4:	2b00      	cmp	r3, #0
 81094b6:	bfbb      	ittet	lt
 81094b8:	425b      	neglt	r3, r3
 81094ba:	f042 0202 	orrlt.w	r2, r2, #2
 81094be:	9307      	strge	r3, [sp, #28]
 81094c0:	9307      	strlt	r3, [sp, #28]
 81094c2:	bfb8      	it	lt
 81094c4:	9204      	strlt	r2, [sp, #16]
 81094c6:	7823      	ldrb	r3, [r4, #0]
 81094c8:	2b2e      	cmp	r3, #46	@ 0x2e
 81094ca:	d10a      	bne.n	81094e2 <_vfiprintf_r+0x156>
 81094cc:	7863      	ldrb	r3, [r4, #1]
 81094ce:	2b2a      	cmp	r3, #42	@ 0x2a
 81094d0:	d132      	bne.n	8109538 <_vfiprintf_r+0x1ac>
 81094d2:	9b03      	ldr	r3, [sp, #12]
 81094d4:	1d1a      	adds	r2, r3, #4
 81094d6:	681b      	ldr	r3, [r3, #0]
 81094d8:	9203      	str	r2, [sp, #12]
 81094da:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 81094de:	3402      	adds	r4, #2
 81094e0:	9305      	str	r3, [sp, #20]
 81094e2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 81095b8 <_vfiprintf_r+0x22c>
 81094e6:	7821      	ldrb	r1, [r4, #0]
 81094e8:	2203      	movs	r2, #3
 81094ea:	4650      	mov	r0, sl
 81094ec:	f7f6 fef8 	bl	81002e0 <memchr>
 81094f0:	b138      	cbz	r0, 8109502 <_vfiprintf_r+0x176>
 81094f2:	9b04      	ldr	r3, [sp, #16]
 81094f4:	eba0 000a 	sub.w	r0, r0, sl
 81094f8:	2240      	movs	r2, #64	@ 0x40
 81094fa:	4082      	lsls	r2, r0
 81094fc:	4313      	orrs	r3, r2
 81094fe:	3401      	adds	r4, #1
 8109500:	9304      	str	r3, [sp, #16]
 8109502:	f814 1b01 	ldrb.w	r1, [r4], #1
 8109506:	4829      	ldr	r0, [pc, #164]	@ (81095ac <_vfiprintf_r+0x220>)
 8109508:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 810950c:	2206      	movs	r2, #6
 810950e:	f7f6 fee7 	bl	81002e0 <memchr>
 8109512:	2800      	cmp	r0, #0
 8109514:	d03f      	beq.n	8109596 <_vfiprintf_r+0x20a>
 8109516:	4b26      	ldr	r3, [pc, #152]	@ (81095b0 <_vfiprintf_r+0x224>)
 8109518:	bb1b      	cbnz	r3, 8109562 <_vfiprintf_r+0x1d6>
 810951a:	9b03      	ldr	r3, [sp, #12]
 810951c:	3307      	adds	r3, #7
 810951e:	f023 0307 	bic.w	r3, r3, #7
 8109522:	3308      	adds	r3, #8
 8109524:	9303      	str	r3, [sp, #12]
 8109526:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8109528:	443b      	add	r3, r7
 810952a:	9309      	str	r3, [sp, #36]	@ 0x24
 810952c:	e76a      	b.n	8109404 <_vfiprintf_r+0x78>
 810952e:	fb0c 3202 	mla	r2, ip, r2, r3
 8109532:	460c      	mov	r4, r1
 8109534:	2001      	movs	r0, #1
 8109536:	e7a8      	b.n	810948a <_vfiprintf_r+0xfe>
 8109538:	2300      	movs	r3, #0
 810953a:	3401      	adds	r4, #1
 810953c:	9305      	str	r3, [sp, #20]
 810953e:	4619      	mov	r1, r3
 8109540:	f04f 0c0a 	mov.w	ip, #10
 8109544:	4620      	mov	r0, r4
 8109546:	f810 2b01 	ldrb.w	r2, [r0], #1
 810954a:	3a30      	subs	r2, #48	@ 0x30
 810954c:	2a09      	cmp	r2, #9
 810954e:	d903      	bls.n	8109558 <_vfiprintf_r+0x1cc>
 8109550:	2b00      	cmp	r3, #0
 8109552:	d0c6      	beq.n	81094e2 <_vfiprintf_r+0x156>
 8109554:	9105      	str	r1, [sp, #20]
 8109556:	e7c4      	b.n	81094e2 <_vfiprintf_r+0x156>
 8109558:	fb0c 2101 	mla	r1, ip, r1, r2
 810955c:	4604      	mov	r4, r0
 810955e:	2301      	movs	r3, #1
 8109560:	e7f0      	b.n	8109544 <_vfiprintf_r+0x1b8>
 8109562:	ab03      	add	r3, sp, #12
 8109564:	9300      	str	r3, [sp, #0]
 8109566:	462a      	mov	r2, r5
 8109568:	4b12      	ldr	r3, [pc, #72]	@ (81095b4 <_vfiprintf_r+0x228>)
 810956a:	a904      	add	r1, sp, #16
 810956c:	4630      	mov	r0, r6
 810956e:	f7fb feb9 	bl	81052e4 <_printf_float>
 8109572:	4607      	mov	r7, r0
 8109574:	1c78      	adds	r0, r7, #1
 8109576:	d1d6      	bne.n	8109526 <_vfiprintf_r+0x19a>
 8109578:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 810957a:	07d9      	lsls	r1, r3, #31
 810957c:	d405      	bmi.n	810958a <_vfiprintf_r+0x1fe>
 810957e:	89ab      	ldrh	r3, [r5, #12]
 8109580:	059a      	lsls	r2, r3, #22
 8109582:	d402      	bmi.n	810958a <_vfiprintf_r+0x1fe>
 8109584:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8109586:	f7fd fc29 	bl	8106ddc <__retarget_lock_release_recursive>
 810958a:	89ab      	ldrh	r3, [r5, #12]
 810958c:	065b      	lsls	r3, r3, #25
 810958e:	f53f af1f 	bmi.w	81093d0 <_vfiprintf_r+0x44>
 8109592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8109594:	e71e      	b.n	81093d4 <_vfiprintf_r+0x48>
 8109596:	ab03      	add	r3, sp, #12
 8109598:	9300      	str	r3, [sp, #0]
 810959a:	462a      	mov	r2, r5
 810959c:	4b05      	ldr	r3, [pc, #20]	@ (81095b4 <_vfiprintf_r+0x228>)
 810959e:	a904      	add	r1, sp, #16
 81095a0:	4630      	mov	r0, r6
 81095a2:	f7fc f937 	bl	8105814 <_printf_i>
 81095a6:	e7e4      	b.n	8109572 <_vfiprintf_r+0x1e6>
 81095a8:	0810a89e 	.word	0x0810a89e
 81095ac:	0810a8a8 	.word	0x0810a8a8
 81095b0:	081052e5 	.word	0x081052e5
 81095b4:	08109369 	.word	0x08109369
 81095b8:	0810a8a4 	.word	0x0810a8a4

081095bc <__swbuf_r>:
 81095bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81095be:	460e      	mov	r6, r1
 81095c0:	4614      	mov	r4, r2
 81095c2:	4605      	mov	r5, r0
 81095c4:	b118      	cbz	r0, 81095ce <__swbuf_r+0x12>
 81095c6:	6a03      	ldr	r3, [r0, #32]
 81095c8:	b90b      	cbnz	r3, 81095ce <__swbuf_r+0x12>
 81095ca:	f7fc fd03 	bl	8105fd4 <__sinit>
 81095ce:	69a3      	ldr	r3, [r4, #24]
 81095d0:	60a3      	str	r3, [r4, #8]
 81095d2:	89a3      	ldrh	r3, [r4, #12]
 81095d4:	071a      	lsls	r2, r3, #28
 81095d6:	d501      	bpl.n	81095dc <__swbuf_r+0x20>
 81095d8:	6923      	ldr	r3, [r4, #16]
 81095da:	b943      	cbnz	r3, 81095ee <__swbuf_r+0x32>
 81095dc:	4621      	mov	r1, r4
 81095de:	4628      	mov	r0, r5
 81095e0:	f000 f82a 	bl	8109638 <__swsetup_r>
 81095e4:	b118      	cbz	r0, 81095ee <__swbuf_r+0x32>
 81095e6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 81095ea:	4638      	mov	r0, r7
 81095ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81095ee:	6823      	ldr	r3, [r4, #0]
 81095f0:	6922      	ldr	r2, [r4, #16]
 81095f2:	1a98      	subs	r0, r3, r2
 81095f4:	6963      	ldr	r3, [r4, #20]
 81095f6:	b2f6      	uxtb	r6, r6
 81095f8:	4283      	cmp	r3, r0
 81095fa:	4637      	mov	r7, r6
 81095fc:	dc05      	bgt.n	810960a <__swbuf_r+0x4e>
 81095fe:	4621      	mov	r1, r4
 8109600:	4628      	mov	r0, r5
 8109602:	f7ff f829 	bl	8108658 <_fflush_r>
 8109606:	2800      	cmp	r0, #0
 8109608:	d1ed      	bne.n	81095e6 <__swbuf_r+0x2a>
 810960a:	68a3      	ldr	r3, [r4, #8]
 810960c:	3b01      	subs	r3, #1
 810960e:	60a3      	str	r3, [r4, #8]
 8109610:	6823      	ldr	r3, [r4, #0]
 8109612:	1c5a      	adds	r2, r3, #1
 8109614:	6022      	str	r2, [r4, #0]
 8109616:	701e      	strb	r6, [r3, #0]
 8109618:	6962      	ldr	r2, [r4, #20]
 810961a:	1c43      	adds	r3, r0, #1
 810961c:	429a      	cmp	r2, r3
 810961e:	d004      	beq.n	810962a <__swbuf_r+0x6e>
 8109620:	89a3      	ldrh	r3, [r4, #12]
 8109622:	07db      	lsls	r3, r3, #31
 8109624:	d5e1      	bpl.n	81095ea <__swbuf_r+0x2e>
 8109626:	2e0a      	cmp	r6, #10
 8109628:	d1df      	bne.n	81095ea <__swbuf_r+0x2e>
 810962a:	4621      	mov	r1, r4
 810962c:	4628      	mov	r0, r5
 810962e:	f7ff f813 	bl	8108658 <_fflush_r>
 8109632:	2800      	cmp	r0, #0
 8109634:	d0d9      	beq.n	81095ea <__swbuf_r+0x2e>
 8109636:	e7d6      	b.n	81095e6 <__swbuf_r+0x2a>

08109638 <__swsetup_r>:
 8109638:	b538      	push	{r3, r4, r5, lr}
 810963a:	4b29      	ldr	r3, [pc, #164]	@ (81096e0 <__swsetup_r+0xa8>)
 810963c:	4605      	mov	r5, r0
 810963e:	6818      	ldr	r0, [r3, #0]
 8109640:	460c      	mov	r4, r1
 8109642:	b118      	cbz	r0, 810964c <__swsetup_r+0x14>
 8109644:	6a03      	ldr	r3, [r0, #32]
 8109646:	b90b      	cbnz	r3, 810964c <__swsetup_r+0x14>
 8109648:	f7fc fcc4 	bl	8105fd4 <__sinit>
 810964c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109650:	0719      	lsls	r1, r3, #28
 8109652:	d422      	bmi.n	810969a <__swsetup_r+0x62>
 8109654:	06da      	lsls	r2, r3, #27
 8109656:	d407      	bmi.n	8109668 <__swsetup_r+0x30>
 8109658:	2209      	movs	r2, #9
 810965a:	602a      	str	r2, [r5, #0]
 810965c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8109660:	81a3      	strh	r3, [r4, #12]
 8109662:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8109666:	e033      	b.n	81096d0 <__swsetup_r+0x98>
 8109668:	0758      	lsls	r0, r3, #29
 810966a:	d512      	bpl.n	8109692 <__swsetup_r+0x5a>
 810966c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 810966e:	b141      	cbz	r1, 8109682 <__swsetup_r+0x4a>
 8109670:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8109674:	4299      	cmp	r1, r3
 8109676:	d002      	beq.n	810967e <__swsetup_r+0x46>
 8109678:	4628      	mov	r0, r5
 810967a:	f7ff fdf3 	bl	8109264 <_free_r>
 810967e:	2300      	movs	r3, #0
 8109680:	6363      	str	r3, [r4, #52]	@ 0x34
 8109682:	89a3      	ldrh	r3, [r4, #12]
 8109684:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8109688:	81a3      	strh	r3, [r4, #12]
 810968a:	2300      	movs	r3, #0
 810968c:	6063      	str	r3, [r4, #4]
 810968e:	6923      	ldr	r3, [r4, #16]
 8109690:	6023      	str	r3, [r4, #0]
 8109692:	89a3      	ldrh	r3, [r4, #12]
 8109694:	f043 0308 	orr.w	r3, r3, #8
 8109698:	81a3      	strh	r3, [r4, #12]
 810969a:	6923      	ldr	r3, [r4, #16]
 810969c:	b94b      	cbnz	r3, 81096b2 <__swsetup_r+0x7a>
 810969e:	89a3      	ldrh	r3, [r4, #12]
 81096a0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 81096a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 81096a8:	d003      	beq.n	81096b2 <__swsetup_r+0x7a>
 81096aa:	4621      	mov	r1, r4
 81096ac:	4628      	mov	r0, r5
 81096ae:	f000 f83f 	bl	8109730 <__smakebuf_r>
 81096b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81096b6:	f013 0201 	ands.w	r2, r3, #1
 81096ba:	d00a      	beq.n	81096d2 <__swsetup_r+0x9a>
 81096bc:	2200      	movs	r2, #0
 81096be:	60a2      	str	r2, [r4, #8]
 81096c0:	6962      	ldr	r2, [r4, #20]
 81096c2:	4252      	negs	r2, r2
 81096c4:	61a2      	str	r2, [r4, #24]
 81096c6:	6922      	ldr	r2, [r4, #16]
 81096c8:	b942      	cbnz	r2, 81096dc <__swsetup_r+0xa4>
 81096ca:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 81096ce:	d1c5      	bne.n	810965c <__swsetup_r+0x24>
 81096d0:	bd38      	pop	{r3, r4, r5, pc}
 81096d2:	0799      	lsls	r1, r3, #30
 81096d4:	bf58      	it	pl
 81096d6:	6962      	ldrpl	r2, [r4, #20]
 81096d8:	60a2      	str	r2, [r4, #8]
 81096da:	e7f4      	b.n	81096c6 <__swsetup_r+0x8e>
 81096dc:	2000      	movs	r0, #0
 81096de:	e7f7      	b.n	81096d0 <__swsetup_r+0x98>
 81096e0:	10000198 	.word	0x10000198

081096e4 <__swhatbuf_r>:
 81096e4:	b570      	push	{r4, r5, r6, lr}
 81096e6:	460c      	mov	r4, r1
 81096e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81096ec:	2900      	cmp	r1, #0
 81096ee:	b096      	sub	sp, #88	@ 0x58
 81096f0:	4615      	mov	r5, r2
 81096f2:	461e      	mov	r6, r3
 81096f4:	da0d      	bge.n	8109712 <__swhatbuf_r+0x2e>
 81096f6:	89a3      	ldrh	r3, [r4, #12]
 81096f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 81096fc:	f04f 0100 	mov.w	r1, #0
 8109700:	bf14      	ite	ne
 8109702:	2340      	movne	r3, #64	@ 0x40
 8109704:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8109708:	2000      	movs	r0, #0
 810970a:	6031      	str	r1, [r6, #0]
 810970c:	602b      	str	r3, [r5, #0]
 810970e:	b016      	add	sp, #88	@ 0x58
 8109710:	bd70      	pop	{r4, r5, r6, pc}
 8109712:	466a      	mov	r2, sp
 8109714:	f000 f848 	bl	81097a8 <_fstat_r>
 8109718:	2800      	cmp	r0, #0
 810971a:	dbec      	blt.n	81096f6 <__swhatbuf_r+0x12>
 810971c:	9901      	ldr	r1, [sp, #4]
 810971e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8109722:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8109726:	4259      	negs	r1, r3
 8109728:	4159      	adcs	r1, r3
 810972a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 810972e:	e7eb      	b.n	8109708 <__swhatbuf_r+0x24>

08109730 <__smakebuf_r>:
 8109730:	898b      	ldrh	r3, [r1, #12]
 8109732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8109734:	079d      	lsls	r5, r3, #30
 8109736:	4606      	mov	r6, r0
 8109738:	460c      	mov	r4, r1
 810973a:	d507      	bpl.n	810974c <__smakebuf_r+0x1c>
 810973c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8109740:	6023      	str	r3, [r4, #0]
 8109742:	6123      	str	r3, [r4, #16]
 8109744:	2301      	movs	r3, #1
 8109746:	6163      	str	r3, [r4, #20]
 8109748:	b003      	add	sp, #12
 810974a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 810974c:	ab01      	add	r3, sp, #4
 810974e:	466a      	mov	r2, sp
 8109750:	f7ff ffc8 	bl	81096e4 <__swhatbuf_r>
 8109754:	9f00      	ldr	r7, [sp, #0]
 8109756:	4605      	mov	r5, r0
 8109758:	4639      	mov	r1, r7
 810975a:	4630      	mov	r0, r6
 810975c:	f7fe fe66 	bl	810842c <_malloc_r>
 8109760:	b948      	cbnz	r0, 8109776 <__smakebuf_r+0x46>
 8109762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8109766:	059a      	lsls	r2, r3, #22
 8109768:	d4ee      	bmi.n	8109748 <__smakebuf_r+0x18>
 810976a:	f023 0303 	bic.w	r3, r3, #3
 810976e:	f043 0302 	orr.w	r3, r3, #2
 8109772:	81a3      	strh	r3, [r4, #12]
 8109774:	e7e2      	b.n	810973c <__smakebuf_r+0xc>
 8109776:	89a3      	ldrh	r3, [r4, #12]
 8109778:	6020      	str	r0, [r4, #0]
 810977a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 810977e:	81a3      	strh	r3, [r4, #12]
 8109780:	9b01      	ldr	r3, [sp, #4]
 8109782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8109786:	b15b      	cbz	r3, 81097a0 <__smakebuf_r+0x70>
 8109788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810978c:	4630      	mov	r0, r6
 810978e:	f000 f81d 	bl	81097cc <_isatty_r>
 8109792:	b128      	cbz	r0, 81097a0 <__smakebuf_r+0x70>
 8109794:	89a3      	ldrh	r3, [r4, #12]
 8109796:	f023 0303 	bic.w	r3, r3, #3
 810979a:	f043 0301 	orr.w	r3, r3, #1
 810979e:	81a3      	strh	r3, [r4, #12]
 81097a0:	89a3      	ldrh	r3, [r4, #12]
 81097a2:	431d      	orrs	r5, r3
 81097a4:	81a5      	strh	r5, [r4, #12]
 81097a6:	e7cf      	b.n	8109748 <__smakebuf_r+0x18>

081097a8 <_fstat_r>:
 81097a8:	b538      	push	{r3, r4, r5, lr}
 81097aa:	4d07      	ldr	r5, [pc, #28]	@ (81097c8 <_fstat_r+0x20>)
 81097ac:	2300      	movs	r3, #0
 81097ae:	4604      	mov	r4, r0
 81097b0:	4608      	mov	r0, r1
 81097b2:	4611      	mov	r1, r2
 81097b4:	602b      	str	r3, [r5, #0]
 81097b6:	f7f8 f9c6 	bl	8101b46 <_fstat>
 81097ba:	1c43      	adds	r3, r0, #1
 81097bc:	d102      	bne.n	81097c4 <_fstat_r+0x1c>
 81097be:	682b      	ldr	r3, [r5, #0]
 81097c0:	b103      	cbz	r3, 81097c4 <_fstat_r+0x1c>
 81097c2:	6023      	str	r3, [r4, #0]
 81097c4:	bd38      	pop	{r3, r4, r5, pc}
 81097c6:	bf00      	nop
 81097c8:	100008fc 	.word	0x100008fc

081097cc <_isatty_r>:
 81097cc:	b538      	push	{r3, r4, r5, lr}
 81097ce:	4d06      	ldr	r5, [pc, #24]	@ (81097e8 <_isatty_r+0x1c>)
 81097d0:	2300      	movs	r3, #0
 81097d2:	4604      	mov	r4, r0
 81097d4:	4608      	mov	r0, r1
 81097d6:	602b      	str	r3, [r5, #0]
 81097d8:	f7f8 f9c5 	bl	8101b66 <_isatty>
 81097dc:	1c43      	adds	r3, r0, #1
 81097de:	d102      	bne.n	81097e6 <_isatty_r+0x1a>
 81097e0:	682b      	ldr	r3, [r5, #0]
 81097e2:	b103      	cbz	r3, 81097e6 <_isatty_r+0x1a>
 81097e4:	6023      	str	r3, [r4, #0]
 81097e6:	bd38      	pop	{r3, r4, r5, pc}
 81097e8:	100008fc 	.word	0x100008fc

081097ec <_raise_r>:
 81097ec:	291f      	cmp	r1, #31
 81097ee:	b538      	push	{r3, r4, r5, lr}
 81097f0:	4605      	mov	r5, r0
 81097f2:	460c      	mov	r4, r1
 81097f4:	d904      	bls.n	8109800 <_raise_r+0x14>
 81097f6:	2316      	movs	r3, #22
 81097f8:	6003      	str	r3, [r0, #0]
 81097fa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81097fe:	bd38      	pop	{r3, r4, r5, pc}
 8109800:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8109802:	b112      	cbz	r2, 810980a <_raise_r+0x1e>
 8109804:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8109808:	b94b      	cbnz	r3, 810981e <_raise_r+0x32>
 810980a:	4628      	mov	r0, r5
 810980c:	f000 f830 	bl	8109870 <_getpid_r>
 8109810:	4622      	mov	r2, r4
 8109812:	4601      	mov	r1, r0
 8109814:	4628      	mov	r0, r5
 8109816:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 810981a:	f000 b817 	b.w	810984c <_kill_r>
 810981e:	2b01      	cmp	r3, #1
 8109820:	d00a      	beq.n	8109838 <_raise_r+0x4c>
 8109822:	1c59      	adds	r1, r3, #1
 8109824:	d103      	bne.n	810982e <_raise_r+0x42>
 8109826:	2316      	movs	r3, #22
 8109828:	6003      	str	r3, [r0, #0]
 810982a:	2001      	movs	r0, #1
 810982c:	e7e7      	b.n	81097fe <_raise_r+0x12>
 810982e:	2100      	movs	r1, #0
 8109830:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8109834:	4620      	mov	r0, r4
 8109836:	4798      	blx	r3
 8109838:	2000      	movs	r0, #0
 810983a:	e7e0      	b.n	81097fe <_raise_r+0x12>

0810983c <raise>:
 810983c:	4b02      	ldr	r3, [pc, #8]	@ (8109848 <raise+0xc>)
 810983e:	4601      	mov	r1, r0
 8109840:	6818      	ldr	r0, [r3, #0]
 8109842:	f7ff bfd3 	b.w	81097ec <_raise_r>
 8109846:	bf00      	nop
 8109848:	10000198 	.word	0x10000198

0810984c <_kill_r>:
 810984c:	b538      	push	{r3, r4, r5, lr}
 810984e:	4d07      	ldr	r5, [pc, #28]	@ (810986c <_kill_r+0x20>)
 8109850:	2300      	movs	r3, #0
 8109852:	4604      	mov	r4, r0
 8109854:	4608      	mov	r0, r1
 8109856:	4611      	mov	r1, r2
 8109858:	602b      	str	r3, [r5, #0]
 810985a:	f7f8 f914 	bl	8101a86 <_kill>
 810985e:	1c43      	adds	r3, r0, #1
 8109860:	d102      	bne.n	8109868 <_kill_r+0x1c>
 8109862:	682b      	ldr	r3, [r5, #0]
 8109864:	b103      	cbz	r3, 8109868 <_kill_r+0x1c>
 8109866:	6023      	str	r3, [r4, #0]
 8109868:	bd38      	pop	{r3, r4, r5, pc}
 810986a:	bf00      	nop
 810986c:	100008fc 	.word	0x100008fc

08109870 <_getpid_r>:
 8109870:	f7f8 b901 	b.w	8101a76 <_getpid>

08109874 <_init>:
 8109874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109876:	bf00      	nop
 8109878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810987a:	bc08      	pop	{r3}
 810987c:	469e      	mov	lr, r3
 810987e:	4770      	bx	lr

08109880 <_fini>:
 8109880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8109882:	bf00      	nop
 8109884:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8109886:	bc08      	pop	{r3}
 8109888:	469e      	mov	lr, r3
 810988a:	4770      	bx	lr
