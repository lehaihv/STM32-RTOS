
RTOS_E1_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008044  081002a0  081002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000043c  081082e8  081082e8  000092e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08108724  08108724  00009724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0810872c  0810872c  0000972c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08108730  08108730  00009730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000001d8  10000000  08108734  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000002b0  100001d8  0810890c  0000a1d8  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  10000488  0810890c  0000a488  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00013082  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 0000258f  00000000  00000000  0001d28a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000ec0  00000000  00000000  0001f820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000b67  00000000  00000000  000206e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a886  00000000  00000000  00021247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   000141d2  00000000  00000000  0005bacd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017dcda  00000000  00000000  0006fc9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001ed979  2**0
                  CONTENTS, READONLY
 18 .debug_frame  000051fc  00000000  00000000  001ed9bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000072  00000000  00000000  001f2bb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	@ (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	@ (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	@ (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001d8 	.word	0x100001d8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	081082cc 	.word	0x081082cc

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	@ (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	@ (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	@ (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001dc 	.word	0x100001dc
 81002dc:	081082cc 	.word	0x081082cc

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	@ 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_d2lz>:
 8100d98:	b538      	push	{r3, r4, r5, lr}
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	2300      	movs	r3, #0
 8100d9e:	4604      	mov	r4, r0
 8100da0:	460d      	mov	r5, r1
 8100da2:	f7ff ff23 	bl	8100bec <__aeabi_dcmplt>
 8100da6:	b928      	cbnz	r0, 8100db4 <__aeabi_d2lz+0x1c>
 8100da8:	4620      	mov	r0, r4
 8100daa:	4629      	mov	r1, r5
 8100dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100db0:	f000 b80a 	b.w	8100dc8 <__aeabi_d2ulz>
 8100db4:	4620      	mov	r0, r4
 8100db6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8100dba:	f000 f805 	bl	8100dc8 <__aeabi_d2ulz>
 8100dbe:	4240      	negs	r0, r0
 8100dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc4:	bd38      	pop	{r3, r4, r5, pc}
 8100dc6:	bf00      	nop

08100dc8 <__aeabi_d2ulz>:
 8100dc8:	b5d0      	push	{r4, r6, r7, lr}
 8100dca:	4b0c      	ldr	r3, [pc, #48]	@ (8100dfc <__aeabi_d2ulz+0x34>)
 8100dcc:	2200      	movs	r2, #0
 8100dce:	4606      	mov	r6, r0
 8100dd0:	460f      	mov	r7, r1
 8100dd2:	f7ff fc99 	bl	8100708 <__aeabi_dmul>
 8100dd6:	f7ff ff6f 	bl	8100cb8 <__aeabi_d2uiz>
 8100dda:	4604      	mov	r4, r0
 8100ddc:	f7ff fc1a 	bl	8100614 <__aeabi_ui2d>
 8100de0:	4b07      	ldr	r3, [pc, #28]	@ (8100e00 <__aeabi_d2ulz+0x38>)
 8100de2:	2200      	movs	r2, #0
 8100de4:	f7ff fc90 	bl	8100708 <__aeabi_dmul>
 8100de8:	4602      	mov	r2, r0
 8100dea:	460b      	mov	r3, r1
 8100dec:	4630      	mov	r0, r6
 8100dee:	4639      	mov	r1, r7
 8100df0:	f7ff fad2 	bl	8100398 <__aeabi_dsub>
 8100df4:	f7ff ff60 	bl	8100cb8 <__aeabi_d2uiz>
 8100df8:	4621      	mov	r1, r4
 8100dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8100dfc:	3df00000 	.word	0x3df00000
 8100e00:	41f00000 	.word	0x41f00000

08100e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100e04:	b480      	push	{r7}
 8100e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100e08:	4b09      	ldr	r3, [pc, #36]	@ (8100e30 <SystemInit+0x2c>)
 8100e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8100e0e:	4a08      	ldr	r2, [pc, #32]	@ (8100e30 <SystemInit+0x2c>)
 8100e10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8100e14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100e18:	4b05      	ldr	r3, [pc, #20]	@ (8100e30 <SystemInit+0x2c>)
 8100e1a:	691b      	ldr	r3, [r3, #16]
 8100e1c:	4a04      	ldr	r2, [pc, #16]	@ (8100e30 <SystemInit+0x2c>)
 8100e1e:	f043 0310 	orr.w	r3, r3, #16
 8100e22:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100e24:	bf00      	nop
 8100e26:	46bd      	mov	sp, r7
 8100e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e2c:	4770      	bx	lr
 8100e2e:	bf00      	nop
 8100e30:	e000ed00 	.word	0xe000ed00

08100e34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100e34:	b580      	push	{r7, lr}
 8100e36:	b082      	sub	sp, #8
 8100e38:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100e3a:	4b27      	ldr	r3, [pc, #156]	@ (8100ed8 <main+0xa4>)
 8100e3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e40:	4a25      	ldr	r2, [pc, #148]	@ (8100ed8 <main+0xa4>)
 8100e42:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8100e46:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100e4a:	4b23      	ldr	r3, [pc, #140]	@ (8100ed8 <main+0xa4>)
 8100e4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100e54:	607b      	str	r3, [r7, #4]
 8100e56:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e58:	2001      	movs	r0, #1
 8100e5a:	f000 feb9 	bl	8101bd0 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100e5e:	f001 f875 	bl	8101f4c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100e62:	2201      	movs	r2, #1
 8100e64:	2102      	movs	r1, #2
 8100e66:	2000      	movs	r0, #0
 8100e68:	f000 fff6 	bl	8101e58 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8100edc <main+0xa8>)
 8100e6e:	681b      	ldr	r3, [r3, #0]
 8100e70:	091b      	lsrs	r3, r3, #4
 8100e72:	f003 030f 	and.w	r3, r3, #15
 8100e76:	2b07      	cmp	r3, #7
 8100e78:	d108      	bne.n	8100e8c <main+0x58>
 8100e7a:	4b19      	ldr	r3, [pc, #100]	@ (8100ee0 <main+0xac>)
 8100e7c:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100e80:	4a17      	ldr	r2, [pc, #92]	@ (8100ee0 <main+0xac>)
 8100e82:	f043 0301 	orr.w	r3, r3, #1
 8100e86:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 8100e8a:	e007      	b.n	8100e9c <main+0x68>
 8100e8c:	4b14      	ldr	r3, [pc, #80]	@ (8100ee0 <main+0xac>)
 8100e8e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100e92:	4a13      	ldr	r2, [pc, #76]	@ (8100ee0 <main+0xac>)
 8100e94:	f043 0301 	orr.w	r3, r3, #1
 8100e98:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100e9c:	f000 fafe 	bl	810149c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100ea0:	f000 f8a2 	bl	8100fe8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8100ea4:	f000 f820 	bl	8100ee8 <MX_I2C1_Init>
  MX_I2C2_Init();
 8100ea8:	f000 f85e 	bl	8100f68 <MX_I2C2_Init>
	 SSD1306_Putc ((char)(((int)(Temp)%100)/10+48), &Font_11x18, 1);
	 SSD1306_Puts (".", &Font_11x18, 1);
	 SSD1306_Putc ((char)((int)(Temp)%10+48), &Font_11x18, 1);*/
	 //SSD1306_UpdateScreen(); // update screen
	  // LED ON
	  	  	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8100eac:	2201      	movs	r2, #1
 8100eae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8100eb2:	480c      	ldr	r0, [pc, #48]	@ (8100ee4 <main+0xb0>)
 8100eb4:	f000 fe72 	bl	8101b9c <HAL_GPIO_WritePin>
	  	  	      HAL_Delay(500);
 8100eb8:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8100ebc:	f000 fba2 	bl	8101604 <HAL_Delay>
	  	  	      // LED OFF
	  	  	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8100ec0:	2200      	movs	r2, #0
 8100ec2:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8100ec6:	4807      	ldr	r0, [pc, #28]	@ (8100ee4 <main+0xb0>)
 8100ec8:	f000 fe68 	bl	8101b9c <HAL_GPIO_WritePin>
	  	  	      HAL_Delay(500);
 8100ecc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8100ed0:	f000 fb98 	bl	8101604 <HAL_Delay>
	  	  	      HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8100ed4:	bf00      	nop
 8100ed6:	e7e9      	b.n	8100eac <main+0x78>
 8100ed8:	58024400 	.word	0x58024400
 8100edc:	e000ed00 	.word	0xe000ed00
 8100ee0:	58026400 	.word	0x58026400
 8100ee4:	58020800 	.word	0x58020800

08100ee8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8100ee8:	b580      	push	{r7, lr}
 8100eea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8100eec:	4b1b      	ldr	r3, [pc, #108]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100eee:	4a1c      	ldr	r2, [pc, #112]	@ (8100f60 <MX_I2C1_Init+0x78>)
 8100ef0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00707CBB;
 8100ef2:	4b1a      	ldr	r3, [pc, #104]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100ef4:	4a1b      	ldr	r2, [pc, #108]	@ (8100f64 <MX_I2C1_Init+0x7c>)
 8100ef6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8100ef8:	4b18      	ldr	r3, [pc, #96]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100efa:	2200      	movs	r2, #0
 8100efc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100efe:	4b17      	ldr	r3, [pc, #92]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100f00:	2201      	movs	r2, #1
 8100f02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100f04:	4b15      	ldr	r3, [pc, #84]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100f06:	2200      	movs	r2, #0
 8100f08:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8100f0a:	4b14      	ldr	r3, [pc, #80]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100f0c:	2200      	movs	r2, #0
 8100f0e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100f10:	4b12      	ldr	r3, [pc, #72]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100f12:	2200      	movs	r2, #0
 8100f14:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100f16:	4b11      	ldr	r3, [pc, #68]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100f18:	2200      	movs	r2, #0
 8100f1a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100f1e:	2200      	movs	r2, #0
 8100f20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8100f22:	480e      	ldr	r0, [pc, #56]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100f24:	f000 fe66 	bl	8101bf4 <HAL_I2C_Init>
 8100f28:	4603      	mov	r3, r0
 8100f2a:	2b00      	cmp	r3, #0
 8100f2c:	d001      	beq.n	8100f32 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8100f2e:	f000 f8a1 	bl	8101074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100f32:	2100      	movs	r1, #0
 8100f34:	4809      	ldr	r0, [pc, #36]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100f36:	f000 fef8 	bl	8101d2a <HAL_I2CEx_ConfigAnalogFilter>
 8100f3a:	4603      	mov	r3, r0
 8100f3c:	2b00      	cmp	r3, #0
 8100f3e:	d001      	beq.n	8100f44 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8100f40:	f000 f898 	bl	8101074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8100f44:	2100      	movs	r1, #0
 8100f46:	4805      	ldr	r0, [pc, #20]	@ (8100f5c <MX_I2C1_Init+0x74>)
 8100f48:	f000 ff3a 	bl	8101dc0 <HAL_I2CEx_ConfigDigitalFilter>
 8100f4c:	4603      	mov	r3, r0
 8100f4e:	2b00      	cmp	r3, #0
 8100f50:	d001      	beq.n	8100f56 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8100f52:	f000 f88f 	bl	8101074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8100f56:	bf00      	nop
 8100f58:	bd80      	pop	{r7, pc}
 8100f5a:	bf00      	nop
 8100f5c:	100001f4 	.word	0x100001f4
 8100f60:	40005400 	.word	0x40005400
 8100f64:	00707cbb 	.word	0x00707cbb

08100f68 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8100f68:	b580      	push	{r7, lr}
 8100f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8100f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8100fe0 <MX_I2C2_Init+0x78>)
 8100f70:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00707CBB;
 8100f72:	4b1a      	ldr	r3, [pc, #104]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100f74:	4a1b      	ldr	r2, [pc, #108]	@ (8100fe4 <MX_I2C2_Init+0x7c>)
 8100f76:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8100f78:	4b18      	ldr	r3, [pc, #96]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100f7a:	2200      	movs	r2, #0
 8100f7c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8100f7e:	4b17      	ldr	r3, [pc, #92]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100f80:	2201      	movs	r2, #1
 8100f82:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8100f84:	4b15      	ldr	r3, [pc, #84]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100f86:	2200      	movs	r2, #0
 8100f88:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8100f8a:	4b14      	ldr	r3, [pc, #80]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100f8c:	2200      	movs	r2, #0
 8100f8e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8100f90:	4b12      	ldr	r3, [pc, #72]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100f92:	2200      	movs	r2, #0
 8100f94:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8100f96:	4b11      	ldr	r3, [pc, #68]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100f98:	2200      	movs	r2, #0
 8100f9a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8100f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100f9e:	2200      	movs	r2, #0
 8100fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8100fa2:	480e      	ldr	r0, [pc, #56]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100fa4:	f000 fe26 	bl	8101bf4 <HAL_I2C_Init>
 8100fa8:	4603      	mov	r3, r0
 8100faa:	2b00      	cmp	r3, #0
 8100fac:	d001      	beq.n	8100fb2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8100fae:	f000 f861 	bl	8101074 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8100fb2:	2100      	movs	r1, #0
 8100fb4:	4809      	ldr	r0, [pc, #36]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100fb6:	f000 feb8 	bl	8101d2a <HAL_I2CEx_ConfigAnalogFilter>
 8100fba:	4603      	mov	r3, r0
 8100fbc:	2b00      	cmp	r3, #0
 8100fbe:	d001      	beq.n	8100fc4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8100fc0:	f000 f858 	bl	8101074 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8100fc4:	2100      	movs	r1, #0
 8100fc6:	4805      	ldr	r0, [pc, #20]	@ (8100fdc <MX_I2C2_Init+0x74>)
 8100fc8:	f000 fefa 	bl	8101dc0 <HAL_I2CEx_ConfigDigitalFilter>
 8100fcc:	4603      	mov	r3, r0
 8100fce:	2b00      	cmp	r3, #0
 8100fd0:	d001      	beq.n	8100fd6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8100fd2:	f000 f84f 	bl	8101074 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8100fd6:	bf00      	nop
 8100fd8:	bd80      	pop	{r7, pc}
 8100fda:	bf00      	nop
 8100fdc:	10000248 	.word	0x10000248
 8100fe0:	40005800 	.word	0x40005800
 8100fe4:	00707cbb 	.word	0x00707cbb

08100fe8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100fe8:	b580      	push	{r7, lr}
 8100fea:	b088      	sub	sp, #32
 8100fec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100fee:	f107 030c 	add.w	r3, r7, #12
 8100ff2:	2200      	movs	r2, #0
 8100ff4:	601a      	str	r2, [r3, #0]
 8100ff6:	605a      	str	r2, [r3, #4]
 8100ff8:	609a      	str	r2, [r3, #8]
 8100ffa:	60da      	str	r2, [r3, #12]
 8100ffc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100ffe:	4b1b      	ldr	r3, [pc, #108]	@ (810106c <MX_GPIO_Init+0x84>)
 8101000:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101004:	4a19      	ldr	r2, [pc, #100]	@ (810106c <MX_GPIO_Init+0x84>)
 8101006:	f043 0302 	orr.w	r3, r3, #2
 810100a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810100e:	4b17      	ldr	r3, [pc, #92]	@ (810106c <MX_GPIO_Init+0x84>)
 8101010:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101014:	f003 0302 	and.w	r3, r3, #2
 8101018:	60bb      	str	r3, [r7, #8]
 810101a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 810101c:	4b13      	ldr	r3, [pc, #76]	@ (810106c <MX_GPIO_Init+0x84>)
 810101e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101022:	4a12      	ldr	r2, [pc, #72]	@ (810106c <MX_GPIO_Init+0x84>)
 8101024:	f043 0304 	orr.w	r3, r3, #4
 8101028:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810102c:	4b0f      	ldr	r3, [pc, #60]	@ (810106c <MX_GPIO_Init+0x84>)
 810102e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101032:	f003 0304 	and.w	r3, r3, #4
 8101036:	607b      	str	r3, [r7, #4]
 8101038:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 810103a:	2200      	movs	r2, #0
 810103c:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8101040:	480b      	ldr	r0, [pc, #44]	@ (8101070 <MX_GPIO_Init+0x88>)
 8101042:	f000 fdab 	bl	8101b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101046:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810104a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 810104c:	2301      	movs	r3, #1
 810104e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101050:	2300      	movs	r3, #0
 8101052:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8101054:	2300      	movs	r3, #0
 8101056:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8101058:	f107 030c 	add.w	r3, r7, #12
 810105c:	4619      	mov	r1, r3
 810105e:	4804      	ldr	r0, [pc, #16]	@ (8101070 <MX_GPIO_Init+0x88>)
 8101060:	f000 fbec 	bl	810183c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8101064:	bf00      	nop
 8101066:	3720      	adds	r7, #32
 8101068:	46bd      	mov	sp, r7
 810106a:	bd80      	pop	{r7, pc}
 810106c:	58024400 	.word	0x58024400
 8101070:	58020800 	.word	0x58020800

08101074 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8101074:	b480      	push	{r7}
 8101076:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101078:	b672      	cpsid	i
}
 810107a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 810107c:	bf00      	nop
 810107e:	e7fd      	b.n	810107c <Error_Handler+0x8>

08101080 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101080:	b480      	push	{r7}
 8101082:	b083      	sub	sp, #12
 8101084:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101086:	4b0a      	ldr	r3, [pc, #40]	@ (81010b0 <HAL_MspInit+0x30>)
 8101088:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810108c:	4a08      	ldr	r2, [pc, #32]	@ (81010b0 <HAL_MspInit+0x30>)
 810108e:	f043 0302 	orr.w	r3, r3, #2
 8101092:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8101096:	4b06      	ldr	r3, [pc, #24]	@ (81010b0 <HAL_MspInit+0x30>)
 8101098:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 810109c:	f003 0302 	and.w	r3, r3, #2
 81010a0:	607b      	str	r3, [r7, #4]
 81010a2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81010a4:	bf00      	nop
 81010a6:	370c      	adds	r7, #12
 81010a8:	46bd      	mov	sp, r7
 81010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81010ae:	4770      	bx	lr
 81010b0:	58024400 	.word	0x58024400

081010b4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 81010b4:	b580      	push	{r7, lr}
 81010b6:	b0bc      	sub	sp, #240	@ 0xf0
 81010b8:	af00      	add	r7, sp, #0
 81010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81010bc:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81010c0:	2200      	movs	r2, #0
 81010c2:	601a      	str	r2, [r3, #0]
 81010c4:	605a      	str	r2, [r3, #4]
 81010c6:	609a      	str	r2, [r3, #8]
 81010c8:	60da      	str	r2, [r3, #12]
 81010ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81010cc:	f107 0318 	add.w	r3, r7, #24
 81010d0:	22c0      	movs	r2, #192	@ 0xc0
 81010d2:	2100      	movs	r1, #0
 81010d4:	4618      	mov	r0, r3
 81010d6:	f004 fb75 	bl	81057c4 <memset>
  if(hi2c->Instance==I2C1)
 81010da:	687b      	ldr	r3, [r7, #4]
 81010dc:	681b      	ldr	r3, [r3, #0]
 81010de:	4a4d      	ldr	r2, [pc, #308]	@ (8101214 <HAL_I2C_MspInit+0x160>)
 81010e0:	4293      	cmp	r3, r2
 81010e2:	d147      	bne.n	8101174 <HAL_I2C_MspInit+0xc0>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 81010e4:	f04f 0208 	mov.w	r2, #8
 81010e8:	f04f 0300 	mov.w	r3, #0
 81010ec:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 81010f0:	2300      	movs	r3, #0
 81010f2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 81010f6:	f107 0318 	add.w	r3, r7, #24
 81010fa:	4618      	mov	r0, r3
 81010fc:	f001 f8ae 	bl	810225c <HAL_RCCEx_PeriphCLKConfig>
 8101100:	4603      	mov	r3, r0
 8101102:	2b00      	cmp	r3, #0
 8101104:	d001      	beq.n	810110a <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8101106:	f7ff ffb5 	bl	8101074 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 810110a:	4b43      	ldr	r3, [pc, #268]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 810110c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101110:	4a41      	ldr	r2, [pc, #260]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 8101112:	f043 0302 	orr.w	r3, r3, #2
 8101116:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810111a:	4b3f      	ldr	r3, [pc, #252]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 810111c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8101120:	f003 0302 	and.w	r3, r3, #2
 8101124:	617b      	str	r3, [r7, #20]
 8101126:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8101128:	f44f 7340 	mov.w	r3, #768	@ 0x300
 810112c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8101130:	2312      	movs	r3, #18
 8101132:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8101136:	2300      	movs	r3, #0
 8101138:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810113c:	2300      	movs	r3, #0
 810113e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8101142:	2304      	movs	r3, #4
 8101144:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8101148:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 810114c:	4619      	mov	r1, r3
 810114e:	4833      	ldr	r0, [pc, #204]	@ (810121c <HAL_I2C_MspInit+0x168>)
 8101150:	f000 fb74 	bl	810183c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8101154:	4b30      	ldr	r3, [pc, #192]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 8101156:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810115a:	4a2f      	ldr	r2, [pc, #188]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 810115c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8101160:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8101164:	4b2c      	ldr	r3, [pc, #176]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 8101166:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 810116a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 810116e:	613b      	str	r3, [r7, #16]
 8101170:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8101172:	e04b      	b.n	810120c <HAL_I2C_MspInit+0x158>
  else if(hi2c->Instance==I2C2)
 8101174:	687b      	ldr	r3, [r7, #4]
 8101176:	681b      	ldr	r3, [r3, #0]
 8101178:	4a29      	ldr	r2, [pc, #164]	@ (8101220 <HAL_I2C_MspInit+0x16c>)
 810117a:	4293      	cmp	r3, r2
 810117c:	d146      	bne.n	810120c <HAL_I2C_MspInit+0x158>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 810117e:	f04f 0208 	mov.w	r2, #8
 8101182:	f04f 0300 	mov.w	r3, #0
 8101186:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 810118a:	2300      	movs	r3, #0
 810118c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8101190:	f107 0318 	add.w	r3, r7, #24
 8101194:	4618      	mov	r0, r3
 8101196:	f001 f861 	bl	810225c <HAL_RCCEx_PeriphCLKConfig>
 810119a:	4603      	mov	r3, r0
 810119c:	2b00      	cmp	r3, #0
 810119e:	d001      	beq.n	81011a4 <HAL_I2C_MspInit+0xf0>
      Error_Handler();
 81011a0:	f7ff ff68 	bl	8101074 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 81011a4:	4b1c      	ldr	r3, [pc, #112]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 81011a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011aa:	4a1b      	ldr	r2, [pc, #108]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 81011ac:	f043 0302 	orr.w	r3, r3, #2
 81011b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 81011b4:	4b18      	ldr	r3, [pc, #96]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 81011b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 81011ba:	f003 0302 	and.w	r3, r3, #2
 81011be:	60fb      	str	r3, [r7, #12]
 81011c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 81011c2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 81011c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 81011ca:	2312      	movs	r3, #18
 81011cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81011d0:	2300      	movs	r3, #0
 81011d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81011d6:	2300      	movs	r3, #0
 81011d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 81011dc:	2304      	movs	r3, #4
 81011de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81011e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81011e6:	4619      	mov	r1, r3
 81011e8:	480c      	ldr	r0, [pc, #48]	@ (810121c <HAL_I2C_MspInit+0x168>)
 81011ea:	f000 fb27 	bl	810183c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 81011ee:	4b0a      	ldr	r3, [pc, #40]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 81011f0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 81011f4:	4a08      	ldr	r2, [pc, #32]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 81011f6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81011fa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 81011fe:	4b06      	ldr	r3, [pc, #24]	@ (8101218 <HAL_I2C_MspInit+0x164>)
 8101200:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8101204:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8101208:	60bb      	str	r3, [r7, #8]
 810120a:	68bb      	ldr	r3, [r7, #8]
}
 810120c:	bf00      	nop
 810120e:	37f0      	adds	r7, #240	@ 0xf0
 8101210:	46bd      	mov	sp, r7
 8101212:	bd80      	pop	{r7, pc}
 8101214:	40005400 	.word	0x40005400
 8101218:	58024400 	.word	0x58024400
 810121c:	58020400 	.word	0x58020400
 8101220:	40005800 	.word	0x40005800

08101224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8101224:	b480      	push	{r7}
 8101226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101228:	bf00      	nop
 810122a:	e7fd      	b.n	8101228 <NMI_Handler+0x4>

0810122c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810122c:	b480      	push	{r7}
 810122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101230:	bf00      	nop
 8101232:	e7fd      	b.n	8101230 <HardFault_Handler+0x4>

08101234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101234:	b480      	push	{r7}
 8101236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8101238:	bf00      	nop
 810123a:	e7fd      	b.n	8101238 <MemManage_Handler+0x4>

0810123c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810123c:	b480      	push	{r7}
 810123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101240:	bf00      	nop
 8101242:	e7fd      	b.n	8101240 <BusFault_Handler+0x4>

08101244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101244:	b480      	push	{r7}
 8101246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101248:	bf00      	nop
 810124a:	e7fd      	b.n	8101248 <UsageFault_Handler+0x4>

0810124c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810124c:	b480      	push	{r7}
 810124e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8101250:	bf00      	nop
 8101252:	46bd      	mov	sp, r7
 8101254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101258:	4770      	bx	lr

0810125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810125a:	b480      	push	{r7}
 810125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810125e:	bf00      	nop
 8101260:	46bd      	mov	sp, r7
 8101262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101266:	4770      	bx	lr

08101268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101268:	b480      	push	{r7}
 810126a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810126c:	bf00      	nop
 810126e:	46bd      	mov	sp, r7
 8101270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101274:	4770      	bx	lr

08101276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101276:	b580      	push	{r7, lr}
 8101278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810127a:	f000 f9a3 	bl	81015c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810127e:	bf00      	nop
 8101280:	bd80      	pop	{r7, pc}

08101282 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8101282:	b480      	push	{r7}
 8101284:	af00      	add	r7, sp, #0
  return 1;
 8101286:	2301      	movs	r3, #1
}
 8101288:	4618      	mov	r0, r3
 810128a:	46bd      	mov	sp, r7
 810128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101290:	4770      	bx	lr

08101292 <_kill>:

int _kill(int pid, int sig)
{
 8101292:	b580      	push	{r7, lr}
 8101294:	b082      	sub	sp, #8
 8101296:	af00      	add	r7, sp, #0
 8101298:	6078      	str	r0, [r7, #4]
 810129a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 810129c:	f004 fa9e 	bl	81057dc <__errno>
 81012a0:	4603      	mov	r3, r0
 81012a2:	2216      	movs	r2, #22
 81012a4:	601a      	str	r2, [r3, #0]
  return -1;
 81012a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 81012aa:	4618      	mov	r0, r3
 81012ac:	3708      	adds	r7, #8
 81012ae:	46bd      	mov	sp, r7
 81012b0:	bd80      	pop	{r7, pc}

081012b2 <_exit>:

void _exit (int status)
{
 81012b2:	b580      	push	{r7, lr}
 81012b4:	b082      	sub	sp, #8
 81012b6:	af00      	add	r7, sp, #0
 81012b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 81012ba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 81012be:	6878      	ldr	r0, [r7, #4]
 81012c0:	f7ff ffe7 	bl	8101292 <_kill>
  while (1) {}    /* Make sure we hang here */
 81012c4:	bf00      	nop
 81012c6:	e7fd      	b.n	81012c4 <_exit+0x12>

081012c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81012c8:	b580      	push	{r7, lr}
 81012ca:	b086      	sub	sp, #24
 81012cc:	af00      	add	r7, sp, #0
 81012ce:	60f8      	str	r0, [r7, #12]
 81012d0:	60b9      	str	r1, [r7, #8]
 81012d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81012d4:	2300      	movs	r3, #0
 81012d6:	617b      	str	r3, [r7, #20]
 81012d8:	e00a      	b.n	81012f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 81012da:	f3af 8000 	nop.w
 81012de:	4601      	mov	r1, r0
 81012e0:	68bb      	ldr	r3, [r7, #8]
 81012e2:	1c5a      	adds	r2, r3, #1
 81012e4:	60ba      	str	r2, [r7, #8]
 81012e6:	b2ca      	uxtb	r2, r1
 81012e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81012ea:	697b      	ldr	r3, [r7, #20]
 81012ec:	3301      	adds	r3, #1
 81012ee:	617b      	str	r3, [r7, #20]
 81012f0:	697a      	ldr	r2, [r7, #20]
 81012f2:	687b      	ldr	r3, [r7, #4]
 81012f4:	429a      	cmp	r2, r3
 81012f6:	dbf0      	blt.n	81012da <_read+0x12>
  }

  return len;
 81012f8:	687b      	ldr	r3, [r7, #4]
}
 81012fa:	4618      	mov	r0, r3
 81012fc:	3718      	adds	r7, #24
 81012fe:	46bd      	mov	sp, r7
 8101300:	bd80      	pop	{r7, pc}

08101302 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8101302:	b580      	push	{r7, lr}
 8101304:	b086      	sub	sp, #24
 8101306:	af00      	add	r7, sp, #0
 8101308:	60f8      	str	r0, [r7, #12]
 810130a:	60b9      	str	r1, [r7, #8]
 810130c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810130e:	2300      	movs	r3, #0
 8101310:	617b      	str	r3, [r7, #20]
 8101312:	e009      	b.n	8101328 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8101314:	68bb      	ldr	r3, [r7, #8]
 8101316:	1c5a      	adds	r2, r3, #1
 8101318:	60ba      	str	r2, [r7, #8]
 810131a:	781b      	ldrb	r3, [r3, #0]
 810131c:	4618      	mov	r0, r3
 810131e:	f000 f8a1 	bl	8101464 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101322:	697b      	ldr	r3, [r7, #20]
 8101324:	3301      	adds	r3, #1
 8101326:	617b      	str	r3, [r7, #20]
 8101328:	697a      	ldr	r2, [r7, #20]
 810132a:	687b      	ldr	r3, [r7, #4]
 810132c:	429a      	cmp	r2, r3
 810132e:	dbf1      	blt.n	8101314 <_write+0x12>
  }
  return len;
 8101330:	687b      	ldr	r3, [r7, #4]
}
 8101332:	4618      	mov	r0, r3
 8101334:	3718      	adds	r7, #24
 8101336:	46bd      	mov	sp, r7
 8101338:	bd80      	pop	{r7, pc}

0810133a <_close>:

int _close(int file)
{
 810133a:	b480      	push	{r7}
 810133c:	b083      	sub	sp, #12
 810133e:	af00      	add	r7, sp, #0
 8101340:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8101342:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8101346:	4618      	mov	r0, r3
 8101348:	370c      	adds	r7, #12
 810134a:	46bd      	mov	sp, r7
 810134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101350:	4770      	bx	lr

08101352 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8101352:	b480      	push	{r7}
 8101354:	b083      	sub	sp, #12
 8101356:	af00      	add	r7, sp, #0
 8101358:	6078      	str	r0, [r7, #4]
 810135a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 810135c:	683b      	ldr	r3, [r7, #0]
 810135e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8101362:	605a      	str	r2, [r3, #4]
  return 0;
 8101364:	2300      	movs	r3, #0
}
 8101366:	4618      	mov	r0, r3
 8101368:	370c      	adds	r7, #12
 810136a:	46bd      	mov	sp, r7
 810136c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101370:	4770      	bx	lr

08101372 <_isatty>:

int _isatty(int file)
{
 8101372:	b480      	push	{r7}
 8101374:	b083      	sub	sp, #12
 8101376:	af00      	add	r7, sp, #0
 8101378:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 810137a:	2301      	movs	r3, #1
}
 810137c:	4618      	mov	r0, r3
 810137e:	370c      	adds	r7, #12
 8101380:	46bd      	mov	sp, r7
 8101382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101386:	4770      	bx	lr

08101388 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8101388:	b480      	push	{r7}
 810138a:	b085      	sub	sp, #20
 810138c:	af00      	add	r7, sp, #0
 810138e:	60f8      	str	r0, [r7, #12]
 8101390:	60b9      	str	r1, [r7, #8]
 8101392:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8101394:	2300      	movs	r3, #0
}
 8101396:	4618      	mov	r0, r3
 8101398:	3714      	adds	r7, #20
 810139a:	46bd      	mov	sp, r7
 810139c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013a0:	4770      	bx	lr
	...

081013a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81013a4:	b580      	push	{r7, lr}
 81013a6:	b086      	sub	sp, #24
 81013a8:	af00      	add	r7, sp, #0
 81013aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81013ac:	4a14      	ldr	r2, [pc, #80]	@ (8101400 <_sbrk+0x5c>)
 81013ae:	4b15      	ldr	r3, [pc, #84]	@ (8101404 <_sbrk+0x60>)
 81013b0:	1ad3      	subs	r3, r2, r3
 81013b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81013b4:	697b      	ldr	r3, [r7, #20]
 81013b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81013b8:	4b13      	ldr	r3, [pc, #76]	@ (8101408 <_sbrk+0x64>)
 81013ba:	681b      	ldr	r3, [r3, #0]
 81013bc:	2b00      	cmp	r3, #0
 81013be:	d102      	bne.n	81013c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81013c0:	4b11      	ldr	r3, [pc, #68]	@ (8101408 <_sbrk+0x64>)
 81013c2:	4a12      	ldr	r2, [pc, #72]	@ (810140c <_sbrk+0x68>)
 81013c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81013c6:	4b10      	ldr	r3, [pc, #64]	@ (8101408 <_sbrk+0x64>)
 81013c8:	681a      	ldr	r2, [r3, #0]
 81013ca:	687b      	ldr	r3, [r7, #4]
 81013cc:	4413      	add	r3, r2
 81013ce:	693a      	ldr	r2, [r7, #16]
 81013d0:	429a      	cmp	r2, r3
 81013d2:	d207      	bcs.n	81013e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 81013d4:	f004 fa02 	bl	81057dc <__errno>
 81013d8:	4603      	mov	r3, r0
 81013da:	220c      	movs	r2, #12
 81013dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 81013de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 81013e2:	e009      	b.n	81013f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 81013e4:	4b08      	ldr	r3, [pc, #32]	@ (8101408 <_sbrk+0x64>)
 81013e6:	681b      	ldr	r3, [r3, #0]
 81013e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 81013ea:	4b07      	ldr	r3, [pc, #28]	@ (8101408 <_sbrk+0x64>)
 81013ec:	681a      	ldr	r2, [r3, #0]
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	4413      	add	r3, r2
 81013f2:	4a05      	ldr	r2, [pc, #20]	@ (8101408 <_sbrk+0x64>)
 81013f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 81013f6:	68fb      	ldr	r3, [r7, #12]
}
 81013f8:	4618      	mov	r0, r3
 81013fa:	3718      	adds	r7, #24
 81013fc:	46bd      	mov	sp, r7
 81013fe:	bd80      	pop	{r7, pc}
 8101400:	10048000 	.word	0x10048000
 8101404:	00000400 	.word	0x00000400
 8101408:	1000029c 	.word	0x1000029c
 810140c:	10000488 	.word	0x10000488

08101410 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101410:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8101448 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101414:	f7ff fcf6 	bl	8100e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101418:	480c      	ldr	r0, [pc, #48]	@ (810144c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810141a:	490d      	ldr	r1, [pc, #52]	@ (8101450 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810141c:	4a0d      	ldr	r2, [pc, #52]	@ (8101454 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810141e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101420:	e002      	b.n	8101428 <LoopCopyDataInit>

08101422 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101422:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101424:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101426:	3304      	adds	r3, #4

08101428 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101428:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810142a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810142c:	d3f9      	bcc.n	8101422 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810142e:	4a0a      	ldr	r2, [pc, #40]	@ (8101458 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101430:	4c0a      	ldr	r4, [pc, #40]	@ (810145c <LoopFillZerobss+0x22>)
  movs r3, #0
 8101432:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101434:	e001      	b.n	810143a <LoopFillZerobss>

08101436 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101436:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101438:	3204      	adds	r2, #4

0810143a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810143a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810143c:	d3fb      	bcc.n	8101436 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810143e:	f004 f9d3 	bl	81057e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101442:	f7ff fcf7 	bl	8100e34 <main>
  bx  lr
 8101446:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101448:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810144c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101450:	100001d8 	.word	0x100001d8
  ldr r2, =_sidata
 8101454:	08108734 	.word	0x08108734
  ldr r2, =_sbss
 8101458:	100001d8 	.word	0x100001d8
  ldr r4, =_ebss
 810145c:	10000488 	.word	0x10000488

08101460 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101460:	e7fe      	b.n	8101460 <ADC3_IRQHandler>
	...

08101464 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8101464:	b580      	push	{r7, lr}
 8101466:	b082      	sub	sp, #8
 8101468:	af00      	add	r7, sp, #0
 810146a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 810146c:	4b09      	ldr	r3, [pc, #36]	@ (8101494 <__io_putchar+0x30>)
 810146e:	781b      	ldrb	r3, [r3, #0]
 8101470:	461a      	mov	r2, r3
 8101472:	2394      	movs	r3, #148	@ 0x94
 8101474:	fb02 f303 	mul.w	r3, r2, r3
 8101478:	4a07      	ldr	r2, [pc, #28]	@ (8101498 <__io_putchar+0x34>)
 810147a:	1898      	adds	r0, r3, r2
 810147c:	1d39      	adds	r1, r7, #4
 810147e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8101482:	2201      	movs	r2, #1
 8101484:	f002 fa58 	bl	8103938 <HAL_UART_Transmit>
  return ch;
 8101488:	687b      	ldr	r3, [r7, #4]
}
 810148a:	4618      	mov	r0, r3
 810148c:	3708      	adds	r7, #8
 810148e:	46bd      	mov	sp, r7
 8101490:	bd80      	pop	{r7, pc}
 8101492:	bf00      	nop
 8101494:	10000334 	.word	0x10000334
 8101498:	100002a0 	.word	0x100002a0

0810149c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810149c:	b580      	push	{r7, lr}
 810149e:	b082      	sub	sp, #8
 81014a0:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81014a2:	4b28      	ldr	r3, [pc, #160]	@ (8101544 <HAL_Init+0xa8>)
 81014a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81014a8:	4a26      	ldr	r2, [pc, #152]	@ (8101544 <HAL_Init+0xa8>)
 81014aa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81014ae:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81014b2:	4b24      	ldr	r3, [pc, #144]	@ (8101544 <HAL_Init+0xa8>)
 81014b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81014b8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81014bc:	603b      	str	r3, [r7, #0]
 81014be:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81014c0:	4b21      	ldr	r3, [pc, #132]	@ (8101548 <HAL_Init+0xac>)
 81014c2:	681b      	ldr	r3, [r3, #0]
 81014c4:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81014c8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81014cc:	4a1e      	ldr	r2, [pc, #120]	@ (8101548 <HAL_Init+0xac>)
 81014ce:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81014d2:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81014d4:	4b1c      	ldr	r3, [pc, #112]	@ (8101548 <HAL_Init+0xac>)
 81014d6:	681b      	ldr	r3, [r3, #0]
 81014d8:	4a1b      	ldr	r2, [pc, #108]	@ (8101548 <HAL_Init+0xac>)
 81014da:	f043 0301 	orr.w	r3, r3, #1
 81014de:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81014e0:	2003      	movs	r0, #3
 81014e2:	f000 f965 	bl	81017b0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81014e6:	f000 fd3f 	bl	8101f68 <HAL_RCC_GetSysClockFreq>
 81014ea:	4602      	mov	r2, r0
 81014ec:	4b15      	ldr	r3, [pc, #84]	@ (8101544 <HAL_Init+0xa8>)
 81014ee:	699b      	ldr	r3, [r3, #24]
 81014f0:	0a1b      	lsrs	r3, r3, #8
 81014f2:	f003 030f 	and.w	r3, r3, #15
 81014f6:	4915      	ldr	r1, [pc, #84]	@ (810154c <HAL_Init+0xb0>)
 81014f8:	5ccb      	ldrb	r3, [r1, r3]
 81014fa:	f003 031f 	and.w	r3, r3, #31
 81014fe:	fa22 f303 	lsr.w	r3, r2, r3
 8101502:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8101504:	4b0f      	ldr	r3, [pc, #60]	@ (8101544 <HAL_Init+0xa8>)
 8101506:	699b      	ldr	r3, [r3, #24]
 8101508:	f003 030f 	and.w	r3, r3, #15
 810150c:	4a0f      	ldr	r2, [pc, #60]	@ (810154c <HAL_Init+0xb0>)
 810150e:	5cd3      	ldrb	r3, [r2, r3]
 8101510:	f003 031f 	and.w	r3, r3, #31
 8101514:	687a      	ldr	r2, [r7, #4]
 8101516:	fa22 f303 	lsr.w	r3, r2, r3
 810151a:	4a0d      	ldr	r2, [pc, #52]	@ (8101550 <HAL_Init+0xb4>)
 810151c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 810151e:	4b0c      	ldr	r3, [pc, #48]	@ (8101550 <HAL_Init+0xb4>)
 8101520:	681b      	ldr	r3, [r3, #0]
 8101522:	4a0c      	ldr	r2, [pc, #48]	@ (8101554 <HAL_Init+0xb8>)
 8101524:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8101526:	2000      	movs	r0, #0
 8101528:	f000 f816 	bl	8101558 <HAL_InitTick>
 810152c:	4603      	mov	r3, r0
 810152e:	2b00      	cmp	r3, #0
 8101530:	d001      	beq.n	8101536 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8101532:	2301      	movs	r3, #1
 8101534:	e002      	b.n	810153c <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8101536:	f7ff fda3 	bl	8101080 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 810153a:	2300      	movs	r3, #0
}
 810153c:	4618      	mov	r0, r3
 810153e:	3708      	adds	r7, #8
 8101540:	46bd      	mov	sp, r7
 8101542:	bd80      	pop	{r7, pc}
 8101544:	58024400 	.word	0x58024400
 8101548:	40024400 	.word	0x40024400
 810154c:	081082e8 	.word	0x081082e8
 8101550:	10000004 	.word	0x10000004
 8101554:	10000000 	.word	0x10000000

08101558 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8101558:	b580      	push	{r7, lr}
 810155a:	b082      	sub	sp, #8
 810155c:	af00      	add	r7, sp, #0
 810155e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101560:	4b15      	ldr	r3, [pc, #84]	@ (81015b8 <HAL_InitTick+0x60>)
 8101562:	781b      	ldrb	r3, [r3, #0]
 8101564:	2b00      	cmp	r3, #0
 8101566:	d101      	bne.n	810156c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101568:	2301      	movs	r3, #1
 810156a:	e021      	b.n	81015b0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810156c:	4b13      	ldr	r3, [pc, #76]	@ (81015bc <HAL_InitTick+0x64>)
 810156e:	681a      	ldr	r2, [r3, #0]
 8101570:	4b11      	ldr	r3, [pc, #68]	@ (81015b8 <HAL_InitTick+0x60>)
 8101572:	781b      	ldrb	r3, [r3, #0]
 8101574:	4619      	mov	r1, r3
 8101576:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 810157a:	fbb3 f3f1 	udiv	r3, r3, r1
 810157e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101582:	4618      	mov	r0, r3
 8101584:	f000 f939 	bl	81017fa <HAL_SYSTICK_Config>
 8101588:	4603      	mov	r3, r0
 810158a:	2b00      	cmp	r3, #0
 810158c:	d001      	beq.n	8101592 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810158e:	2301      	movs	r3, #1
 8101590:	e00e      	b.n	81015b0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101592:	687b      	ldr	r3, [r7, #4]
 8101594:	2b0f      	cmp	r3, #15
 8101596:	d80a      	bhi.n	81015ae <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101598:	2200      	movs	r2, #0
 810159a:	6879      	ldr	r1, [r7, #4]
 810159c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81015a0:	f000 f911 	bl	81017c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 81015a4:	4a06      	ldr	r2, [pc, #24]	@ (81015c0 <HAL_InitTick+0x68>)
 81015a6:	687b      	ldr	r3, [r7, #4]
 81015a8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 81015aa:	2300      	movs	r3, #0
 81015ac:	e000      	b.n	81015b0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 81015ae:	2301      	movs	r3, #1
}
 81015b0:	4618      	mov	r0, r3
 81015b2:	3708      	adds	r7, #8
 81015b4:	46bd      	mov	sp, r7
 81015b6:	bd80      	pop	{r7, pc}
 81015b8:	1000000c 	.word	0x1000000c
 81015bc:	10000000 	.word	0x10000000
 81015c0:	10000008 	.word	0x10000008

081015c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 81015c4:	b480      	push	{r7}
 81015c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81015c8:	4b06      	ldr	r3, [pc, #24]	@ (81015e4 <HAL_IncTick+0x20>)
 81015ca:	781b      	ldrb	r3, [r3, #0]
 81015cc:	461a      	mov	r2, r3
 81015ce:	4b06      	ldr	r3, [pc, #24]	@ (81015e8 <HAL_IncTick+0x24>)
 81015d0:	681b      	ldr	r3, [r3, #0]
 81015d2:	4413      	add	r3, r2
 81015d4:	4a04      	ldr	r2, [pc, #16]	@ (81015e8 <HAL_IncTick+0x24>)
 81015d6:	6013      	str	r3, [r2, #0]
}
 81015d8:	bf00      	nop
 81015da:	46bd      	mov	sp, r7
 81015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015e0:	4770      	bx	lr
 81015e2:	bf00      	nop
 81015e4:	1000000c 	.word	0x1000000c
 81015e8:	10000338 	.word	0x10000338

081015ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81015ec:	b480      	push	{r7}
 81015ee:	af00      	add	r7, sp, #0
  return uwTick;
 81015f0:	4b03      	ldr	r3, [pc, #12]	@ (8101600 <HAL_GetTick+0x14>)
 81015f2:	681b      	ldr	r3, [r3, #0]
}
 81015f4:	4618      	mov	r0, r3
 81015f6:	46bd      	mov	sp, r7
 81015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015fc:	4770      	bx	lr
 81015fe:	bf00      	nop
 8101600:	10000338 	.word	0x10000338

08101604 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8101604:	b580      	push	{r7, lr}
 8101606:	b084      	sub	sp, #16
 8101608:	af00      	add	r7, sp, #0
 810160a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 810160c:	f7ff ffee 	bl	81015ec <HAL_GetTick>
 8101610:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8101612:	687b      	ldr	r3, [r7, #4]
 8101614:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8101616:	68fb      	ldr	r3, [r7, #12]
 8101618:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 810161c:	d005      	beq.n	810162a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 810161e:	4b0a      	ldr	r3, [pc, #40]	@ (8101648 <HAL_Delay+0x44>)
 8101620:	781b      	ldrb	r3, [r3, #0]
 8101622:	461a      	mov	r2, r3
 8101624:	68fb      	ldr	r3, [r7, #12]
 8101626:	4413      	add	r3, r2
 8101628:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 810162a:	bf00      	nop
 810162c:	f7ff ffde 	bl	81015ec <HAL_GetTick>
 8101630:	4602      	mov	r2, r0
 8101632:	68bb      	ldr	r3, [r7, #8]
 8101634:	1ad3      	subs	r3, r2, r3
 8101636:	68fa      	ldr	r2, [r7, #12]
 8101638:	429a      	cmp	r2, r3
 810163a:	d8f7      	bhi.n	810162c <HAL_Delay+0x28>
  {
  }
}
 810163c:	bf00      	nop
 810163e:	bf00      	nop
 8101640:	3710      	adds	r7, #16
 8101642:	46bd      	mov	sp, r7
 8101644:	bd80      	pop	{r7, pc}
 8101646:	bf00      	nop
 8101648:	1000000c 	.word	0x1000000c

0810164c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810164c:	b480      	push	{r7}
 810164e:	b085      	sub	sp, #20
 8101650:	af00      	add	r7, sp, #0
 8101652:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101654:	687b      	ldr	r3, [r7, #4]
 8101656:	f003 0307 	and.w	r3, r3, #7
 810165a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810165c:	4b0c      	ldr	r3, [pc, #48]	@ (8101690 <__NVIC_SetPriorityGrouping+0x44>)
 810165e:	68db      	ldr	r3, [r3, #12]
 8101660:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101662:	68ba      	ldr	r2, [r7, #8]
 8101664:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8101668:	4013      	ands	r3, r2
 810166a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810166c:	68fb      	ldr	r3, [r7, #12]
 810166e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101670:	68bb      	ldr	r3, [r7, #8]
 8101672:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101674:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8101678:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810167c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810167e:	4a04      	ldr	r2, [pc, #16]	@ (8101690 <__NVIC_SetPriorityGrouping+0x44>)
 8101680:	68bb      	ldr	r3, [r7, #8]
 8101682:	60d3      	str	r3, [r2, #12]
}
 8101684:	bf00      	nop
 8101686:	3714      	adds	r7, #20
 8101688:	46bd      	mov	sp, r7
 810168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810168e:	4770      	bx	lr
 8101690:	e000ed00 	.word	0xe000ed00

08101694 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8101694:	b480      	push	{r7}
 8101696:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8101698:	4b04      	ldr	r3, [pc, #16]	@ (81016ac <__NVIC_GetPriorityGrouping+0x18>)
 810169a:	68db      	ldr	r3, [r3, #12]
 810169c:	0a1b      	lsrs	r3, r3, #8
 810169e:	f003 0307 	and.w	r3, r3, #7
}
 81016a2:	4618      	mov	r0, r3
 81016a4:	46bd      	mov	sp, r7
 81016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016aa:	4770      	bx	lr
 81016ac:	e000ed00 	.word	0xe000ed00

081016b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81016b0:	b480      	push	{r7}
 81016b2:	b083      	sub	sp, #12
 81016b4:	af00      	add	r7, sp, #0
 81016b6:	4603      	mov	r3, r0
 81016b8:	6039      	str	r1, [r7, #0]
 81016ba:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81016bc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016c0:	2b00      	cmp	r3, #0
 81016c2:	db0a      	blt.n	81016da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81016c4:	683b      	ldr	r3, [r7, #0]
 81016c6:	b2da      	uxtb	r2, r3
 81016c8:	490c      	ldr	r1, [pc, #48]	@ (81016fc <__NVIC_SetPriority+0x4c>)
 81016ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81016ce:	0112      	lsls	r2, r2, #4
 81016d0:	b2d2      	uxtb	r2, r2
 81016d2:	440b      	add	r3, r1
 81016d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81016d8:	e00a      	b.n	81016f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81016da:	683b      	ldr	r3, [r7, #0]
 81016dc:	b2da      	uxtb	r2, r3
 81016de:	4908      	ldr	r1, [pc, #32]	@ (8101700 <__NVIC_SetPriority+0x50>)
 81016e0:	88fb      	ldrh	r3, [r7, #6]
 81016e2:	f003 030f 	and.w	r3, r3, #15
 81016e6:	3b04      	subs	r3, #4
 81016e8:	0112      	lsls	r2, r2, #4
 81016ea:	b2d2      	uxtb	r2, r2
 81016ec:	440b      	add	r3, r1
 81016ee:	761a      	strb	r2, [r3, #24]
}
 81016f0:	bf00      	nop
 81016f2:	370c      	adds	r7, #12
 81016f4:	46bd      	mov	sp, r7
 81016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016fa:	4770      	bx	lr
 81016fc:	e000e100 	.word	0xe000e100
 8101700:	e000ed00 	.word	0xe000ed00

08101704 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101704:	b480      	push	{r7}
 8101706:	b089      	sub	sp, #36	@ 0x24
 8101708:	af00      	add	r7, sp, #0
 810170a:	60f8      	str	r0, [r7, #12]
 810170c:	60b9      	str	r1, [r7, #8]
 810170e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101710:	68fb      	ldr	r3, [r7, #12]
 8101712:	f003 0307 	and.w	r3, r3, #7
 8101716:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101718:	69fb      	ldr	r3, [r7, #28]
 810171a:	f1c3 0307 	rsb	r3, r3, #7
 810171e:	2b04      	cmp	r3, #4
 8101720:	bf28      	it	cs
 8101722:	2304      	movcs	r3, #4
 8101724:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101726:	69fb      	ldr	r3, [r7, #28]
 8101728:	3304      	adds	r3, #4
 810172a:	2b06      	cmp	r3, #6
 810172c:	d902      	bls.n	8101734 <NVIC_EncodePriority+0x30>
 810172e:	69fb      	ldr	r3, [r7, #28]
 8101730:	3b03      	subs	r3, #3
 8101732:	e000      	b.n	8101736 <NVIC_EncodePriority+0x32>
 8101734:	2300      	movs	r3, #0
 8101736:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101738:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 810173c:	69bb      	ldr	r3, [r7, #24]
 810173e:	fa02 f303 	lsl.w	r3, r2, r3
 8101742:	43da      	mvns	r2, r3
 8101744:	68bb      	ldr	r3, [r7, #8]
 8101746:	401a      	ands	r2, r3
 8101748:	697b      	ldr	r3, [r7, #20]
 810174a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810174c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8101750:	697b      	ldr	r3, [r7, #20]
 8101752:	fa01 f303 	lsl.w	r3, r1, r3
 8101756:	43d9      	mvns	r1, r3
 8101758:	687b      	ldr	r3, [r7, #4]
 810175a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810175c:	4313      	orrs	r3, r2
         );
}
 810175e:	4618      	mov	r0, r3
 8101760:	3724      	adds	r7, #36	@ 0x24
 8101762:	46bd      	mov	sp, r7
 8101764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101768:	4770      	bx	lr
	...

0810176c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 810176c:	b580      	push	{r7, lr}
 810176e:	b082      	sub	sp, #8
 8101770:	af00      	add	r7, sp, #0
 8101772:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8101774:	687b      	ldr	r3, [r7, #4]
 8101776:	3b01      	subs	r3, #1
 8101778:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810177c:	d301      	bcc.n	8101782 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 810177e:	2301      	movs	r3, #1
 8101780:	e00f      	b.n	81017a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8101782:	4a0a      	ldr	r2, [pc, #40]	@ (81017ac <SysTick_Config+0x40>)
 8101784:	687b      	ldr	r3, [r7, #4]
 8101786:	3b01      	subs	r3, #1
 8101788:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 810178a:	210f      	movs	r1, #15
 810178c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8101790:	f7ff ff8e 	bl	81016b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8101794:	4b05      	ldr	r3, [pc, #20]	@ (81017ac <SysTick_Config+0x40>)
 8101796:	2200      	movs	r2, #0
 8101798:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 810179a:	4b04      	ldr	r3, [pc, #16]	@ (81017ac <SysTick_Config+0x40>)
 810179c:	2207      	movs	r2, #7
 810179e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81017a0:	2300      	movs	r3, #0
}
 81017a2:	4618      	mov	r0, r3
 81017a4:	3708      	adds	r7, #8
 81017a6:	46bd      	mov	sp, r7
 81017a8:	bd80      	pop	{r7, pc}
 81017aa:	bf00      	nop
 81017ac:	e000e010 	.word	0xe000e010

081017b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81017b0:	b580      	push	{r7, lr}
 81017b2:	b082      	sub	sp, #8
 81017b4:	af00      	add	r7, sp, #0
 81017b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 81017b8:	6878      	ldr	r0, [r7, #4]
 81017ba:	f7ff ff47 	bl	810164c <__NVIC_SetPriorityGrouping>
}
 81017be:	bf00      	nop
 81017c0:	3708      	adds	r7, #8
 81017c2:	46bd      	mov	sp, r7
 81017c4:	bd80      	pop	{r7, pc}

081017c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81017c6:	b580      	push	{r7, lr}
 81017c8:	b086      	sub	sp, #24
 81017ca:	af00      	add	r7, sp, #0
 81017cc:	4603      	mov	r3, r0
 81017ce:	60b9      	str	r1, [r7, #8]
 81017d0:	607a      	str	r2, [r7, #4]
 81017d2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81017d4:	f7ff ff5e 	bl	8101694 <__NVIC_GetPriorityGrouping>
 81017d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81017da:	687a      	ldr	r2, [r7, #4]
 81017dc:	68b9      	ldr	r1, [r7, #8]
 81017de:	6978      	ldr	r0, [r7, #20]
 81017e0:	f7ff ff90 	bl	8101704 <NVIC_EncodePriority>
 81017e4:	4602      	mov	r2, r0
 81017e6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81017ea:	4611      	mov	r1, r2
 81017ec:	4618      	mov	r0, r3
 81017ee:	f7ff ff5f 	bl	81016b0 <__NVIC_SetPriority>
}
 81017f2:	bf00      	nop
 81017f4:	3718      	adds	r7, #24
 81017f6:	46bd      	mov	sp, r7
 81017f8:	bd80      	pop	{r7, pc}

081017fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81017fa:	b580      	push	{r7, lr}
 81017fc:	b082      	sub	sp, #8
 81017fe:	af00      	add	r7, sp, #0
 8101800:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8101802:	6878      	ldr	r0, [r7, #4]
 8101804:	f7ff ffb2 	bl	810176c <SysTick_Config>
 8101808:	4603      	mov	r3, r0
}
 810180a:	4618      	mov	r0, r3
 810180c:	3708      	adds	r7, #8
 810180e:	46bd      	mov	sp, r7
 8101810:	bd80      	pop	{r7, pc}
	...

08101814 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8101814:	b480      	push	{r7}
 8101816:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8101818:	4b07      	ldr	r3, [pc, #28]	@ (8101838 <HAL_GetCurrentCPUID+0x24>)
 810181a:	681b      	ldr	r3, [r3, #0]
 810181c:	091b      	lsrs	r3, r3, #4
 810181e:	f003 030f 	and.w	r3, r3, #15
 8101822:	2b07      	cmp	r3, #7
 8101824:	d101      	bne.n	810182a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8101826:	2303      	movs	r3, #3
 8101828:	e000      	b.n	810182c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 810182a:	2301      	movs	r3, #1
  }
}
 810182c:	4618      	mov	r0, r3
 810182e:	46bd      	mov	sp, r7
 8101830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101834:	4770      	bx	lr
 8101836:	bf00      	nop
 8101838:	e000ed00 	.word	0xe000ed00

0810183c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 810183c:	b480      	push	{r7}
 810183e:	b089      	sub	sp, #36	@ 0x24
 8101840:	af00      	add	r7, sp, #0
 8101842:	6078      	str	r0, [r7, #4]
 8101844:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8101846:	2300      	movs	r3, #0
 8101848:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810184a:	4b89      	ldr	r3, [pc, #548]	@ (8101a70 <HAL_GPIO_Init+0x234>)
 810184c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 810184e:	e194      	b.n	8101b7a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101850:	683b      	ldr	r3, [r7, #0]
 8101852:	681a      	ldr	r2, [r3, #0]
 8101854:	2101      	movs	r1, #1
 8101856:	69fb      	ldr	r3, [r7, #28]
 8101858:	fa01 f303 	lsl.w	r3, r1, r3
 810185c:	4013      	ands	r3, r2
 810185e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101860:	693b      	ldr	r3, [r7, #16]
 8101862:	2b00      	cmp	r3, #0
 8101864:	f000 8186 	beq.w	8101b74 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8101868:	683b      	ldr	r3, [r7, #0]
 810186a:	685b      	ldr	r3, [r3, #4]
 810186c:	f003 0303 	and.w	r3, r3, #3
 8101870:	2b01      	cmp	r3, #1
 8101872:	d005      	beq.n	8101880 <HAL_GPIO_Init+0x44>
 8101874:	683b      	ldr	r3, [r7, #0]
 8101876:	685b      	ldr	r3, [r3, #4]
 8101878:	f003 0303 	and.w	r3, r3, #3
 810187c:	2b02      	cmp	r3, #2
 810187e:	d130      	bne.n	81018e2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101880:	687b      	ldr	r3, [r7, #4]
 8101882:	689b      	ldr	r3, [r3, #8]
 8101884:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8101886:	69fb      	ldr	r3, [r7, #28]
 8101888:	005b      	lsls	r3, r3, #1
 810188a:	2203      	movs	r2, #3
 810188c:	fa02 f303 	lsl.w	r3, r2, r3
 8101890:	43db      	mvns	r3, r3
 8101892:	69ba      	ldr	r2, [r7, #24]
 8101894:	4013      	ands	r3, r2
 8101896:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8101898:	683b      	ldr	r3, [r7, #0]
 810189a:	68da      	ldr	r2, [r3, #12]
 810189c:	69fb      	ldr	r3, [r7, #28]
 810189e:	005b      	lsls	r3, r3, #1
 81018a0:	fa02 f303 	lsl.w	r3, r2, r3
 81018a4:	69ba      	ldr	r2, [r7, #24]
 81018a6:	4313      	orrs	r3, r2
 81018a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 81018aa:	687b      	ldr	r3, [r7, #4]
 81018ac:	69ba      	ldr	r2, [r7, #24]
 81018ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 81018b0:	687b      	ldr	r3, [r7, #4]
 81018b2:	685b      	ldr	r3, [r3, #4]
 81018b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 81018b6:	2201      	movs	r2, #1
 81018b8:	69fb      	ldr	r3, [r7, #28]
 81018ba:	fa02 f303 	lsl.w	r3, r2, r3
 81018be:	43db      	mvns	r3, r3
 81018c0:	69ba      	ldr	r2, [r7, #24]
 81018c2:	4013      	ands	r3, r2
 81018c4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 81018c6:	683b      	ldr	r3, [r7, #0]
 81018c8:	685b      	ldr	r3, [r3, #4]
 81018ca:	091b      	lsrs	r3, r3, #4
 81018cc:	f003 0201 	and.w	r2, r3, #1
 81018d0:	69fb      	ldr	r3, [r7, #28]
 81018d2:	fa02 f303 	lsl.w	r3, r2, r3
 81018d6:	69ba      	ldr	r2, [r7, #24]
 81018d8:	4313      	orrs	r3, r2
 81018da:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81018dc:	687b      	ldr	r3, [r7, #4]
 81018de:	69ba      	ldr	r2, [r7, #24]
 81018e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81018e2:	683b      	ldr	r3, [r7, #0]
 81018e4:	685b      	ldr	r3, [r3, #4]
 81018e6:	f003 0303 	and.w	r3, r3, #3
 81018ea:	2b03      	cmp	r3, #3
 81018ec:	d017      	beq.n	810191e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81018ee:	687b      	ldr	r3, [r7, #4]
 81018f0:	68db      	ldr	r3, [r3, #12]
 81018f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81018f4:	69fb      	ldr	r3, [r7, #28]
 81018f6:	005b      	lsls	r3, r3, #1
 81018f8:	2203      	movs	r2, #3
 81018fa:	fa02 f303 	lsl.w	r3, r2, r3
 81018fe:	43db      	mvns	r3, r3
 8101900:	69ba      	ldr	r2, [r7, #24]
 8101902:	4013      	ands	r3, r2
 8101904:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8101906:	683b      	ldr	r3, [r7, #0]
 8101908:	689a      	ldr	r2, [r3, #8]
 810190a:	69fb      	ldr	r3, [r7, #28]
 810190c:	005b      	lsls	r3, r3, #1
 810190e:	fa02 f303 	lsl.w	r3, r2, r3
 8101912:	69ba      	ldr	r2, [r7, #24]
 8101914:	4313      	orrs	r3, r2
 8101916:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8101918:	687b      	ldr	r3, [r7, #4]
 810191a:	69ba      	ldr	r2, [r7, #24]
 810191c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 810191e:	683b      	ldr	r3, [r7, #0]
 8101920:	685b      	ldr	r3, [r3, #4]
 8101922:	f003 0303 	and.w	r3, r3, #3
 8101926:	2b02      	cmp	r3, #2
 8101928:	d123      	bne.n	8101972 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 810192a:	69fb      	ldr	r3, [r7, #28]
 810192c:	08da      	lsrs	r2, r3, #3
 810192e:	687b      	ldr	r3, [r7, #4]
 8101930:	3208      	adds	r2, #8
 8101932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101938:	69fb      	ldr	r3, [r7, #28]
 810193a:	f003 0307 	and.w	r3, r3, #7
 810193e:	009b      	lsls	r3, r3, #2
 8101940:	220f      	movs	r2, #15
 8101942:	fa02 f303 	lsl.w	r3, r2, r3
 8101946:	43db      	mvns	r3, r3
 8101948:	69ba      	ldr	r2, [r7, #24]
 810194a:	4013      	ands	r3, r2
 810194c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 810194e:	683b      	ldr	r3, [r7, #0]
 8101950:	691a      	ldr	r2, [r3, #16]
 8101952:	69fb      	ldr	r3, [r7, #28]
 8101954:	f003 0307 	and.w	r3, r3, #7
 8101958:	009b      	lsls	r3, r3, #2
 810195a:	fa02 f303 	lsl.w	r3, r2, r3
 810195e:	69ba      	ldr	r2, [r7, #24]
 8101960:	4313      	orrs	r3, r2
 8101962:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101964:	69fb      	ldr	r3, [r7, #28]
 8101966:	08da      	lsrs	r2, r3, #3
 8101968:	687b      	ldr	r3, [r7, #4]
 810196a:	3208      	adds	r2, #8
 810196c:	69b9      	ldr	r1, [r7, #24]
 810196e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101972:	687b      	ldr	r3, [r7, #4]
 8101974:	681b      	ldr	r3, [r3, #0]
 8101976:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101978:	69fb      	ldr	r3, [r7, #28]
 810197a:	005b      	lsls	r3, r3, #1
 810197c:	2203      	movs	r2, #3
 810197e:	fa02 f303 	lsl.w	r3, r2, r3
 8101982:	43db      	mvns	r3, r3
 8101984:	69ba      	ldr	r2, [r7, #24]
 8101986:	4013      	ands	r3, r2
 8101988:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 810198a:	683b      	ldr	r3, [r7, #0]
 810198c:	685b      	ldr	r3, [r3, #4]
 810198e:	f003 0203 	and.w	r2, r3, #3
 8101992:	69fb      	ldr	r3, [r7, #28]
 8101994:	005b      	lsls	r3, r3, #1
 8101996:	fa02 f303 	lsl.w	r3, r2, r3
 810199a:	69ba      	ldr	r2, [r7, #24]
 810199c:	4313      	orrs	r3, r2
 810199e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 81019a0:	687b      	ldr	r3, [r7, #4]
 81019a2:	69ba      	ldr	r2, [r7, #24]
 81019a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 81019a6:	683b      	ldr	r3, [r7, #0]
 81019a8:	685b      	ldr	r3, [r3, #4]
 81019aa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 81019ae:	2b00      	cmp	r3, #0
 81019b0:	f000 80e0 	beq.w	8101b74 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 81019b4:	4b2f      	ldr	r3, [pc, #188]	@ (8101a74 <HAL_GPIO_Init+0x238>)
 81019b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81019ba:	4a2e      	ldr	r2, [pc, #184]	@ (8101a74 <HAL_GPIO_Init+0x238>)
 81019bc:	f043 0302 	orr.w	r3, r3, #2
 81019c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81019c4:	4b2b      	ldr	r3, [pc, #172]	@ (8101a74 <HAL_GPIO_Init+0x238>)
 81019c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81019ca:	f003 0302 	and.w	r3, r3, #2
 81019ce:	60fb      	str	r3, [r7, #12]
 81019d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 81019d2:	4a29      	ldr	r2, [pc, #164]	@ (8101a78 <HAL_GPIO_Init+0x23c>)
 81019d4:	69fb      	ldr	r3, [r7, #28]
 81019d6:	089b      	lsrs	r3, r3, #2
 81019d8:	3302      	adds	r3, #2
 81019da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 81019de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 81019e0:	69fb      	ldr	r3, [r7, #28]
 81019e2:	f003 0303 	and.w	r3, r3, #3
 81019e6:	009b      	lsls	r3, r3, #2
 81019e8:	220f      	movs	r2, #15
 81019ea:	fa02 f303 	lsl.w	r3, r2, r3
 81019ee:	43db      	mvns	r3, r3
 81019f0:	69ba      	ldr	r2, [r7, #24]
 81019f2:	4013      	ands	r3, r2
 81019f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 81019f6:	687b      	ldr	r3, [r7, #4]
 81019f8:	4a20      	ldr	r2, [pc, #128]	@ (8101a7c <HAL_GPIO_Init+0x240>)
 81019fa:	4293      	cmp	r3, r2
 81019fc:	d052      	beq.n	8101aa4 <HAL_GPIO_Init+0x268>
 81019fe:	687b      	ldr	r3, [r7, #4]
 8101a00:	4a1f      	ldr	r2, [pc, #124]	@ (8101a80 <HAL_GPIO_Init+0x244>)
 8101a02:	4293      	cmp	r3, r2
 8101a04:	d031      	beq.n	8101a6a <HAL_GPIO_Init+0x22e>
 8101a06:	687b      	ldr	r3, [r7, #4]
 8101a08:	4a1e      	ldr	r2, [pc, #120]	@ (8101a84 <HAL_GPIO_Init+0x248>)
 8101a0a:	4293      	cmp	r3, r2
 8101a0c:	d02b      	beq.n	8101a66 <HAL_GPIO_Init+0x22a>
 8101a0e:	687b      	ldr	r3, [r7, #4]
 8101a10:	4a1d      	ldr	r2, [pc, #116]	@ (8101a88 <HAL_GPIO_Init+0x24c>)
 8101a12:	4293      	cmp	r3, r2
 8101a14:	d025      	beq.n	8101a62 <HAL_GPIO_Init+0x226>
 8101a16:	687b      	ldr	r3, [r7, #4]
 8101a18:	4a1c      	ldr	r2, [pc, #112]	@ (8101a8c <HAL_GPIO_Init+0x250>)
 8101a1a:	4293      	cmp	r3, r2
 8101a1c:	d01f      	beq.n	8101a5e <HAL_GPIO_Init+0x222>
 8101a1e:	687b      	ldr	r3, [r7, #4]
 8101a20:	4a1b      	ldr	r2, [pc, #108]	@ (8101a90 <HAL_GPIO_Init+0x254>)
 8101a22:	4293      	cmp	r3, r2
 8101a24:	d019      	beq.n	8101a5a <HAL_GPIO_Init+0x21e>
 8101a26:	687b      	ldr	r3, [r7, #4]
 8101a28:	4a1a      	ldr	r2, [pc, #104]	@ (8101a94 <HAL_GPIO_Init+0x258>)
 8101a2a:	4293      	cmp	r3, r2
 8101a2c:	d013      	beq.n	8101a56 <HAL_GPIO_Init+0x21a>
 8101a2e:	687b      	ldr	r3, [r7, #4]
 8101a30:	4a19      	ldr	r2, [pc, #100]	@ (8101a98 <HAL_GPIO_Init+0x25c>)
 8101a32:	4293      	cmp	r3, r2
 8101a34:	d00d      	beq.n	8101a52 <HAL_GPIO_Init+0x216>
 8101a36:	687b      	ldr	r3, [r7, #4]
 8101a38:	4a18      	ldr	r2, [pc, #96]	@ (8101a9c <HAL_GPIO_Init+0x260>)
 8101a3a:	4293      	cmp	r3, r2
 8101a3c:	d007      	beq.n	8101a4e <HAL_GPIO_Init+0x212>
 8101a3e:	687b      	ldr	r3, [r7, #4]
 8101a40:	4a17      	ldr	r2, [pc, #92]	@ (8101aa0 <HAL_GPIO_Init+0x264>)
 8101a42:	4293      	cmp	r3, r2
 8101a44:	d101      	bne.n	8101a4a <HAL_GPIO_Init+0x20e>
 8101a46:	2309      	movs	r3, #9
 8101a48:	e02d      	b.n	8101aa6 <HAL_GPIO_Init+0x26a>
 8101a4a:	230a      	movs	r3, #10
 8101a4c:	e02b      	b.n	8101aa6 <HAL_GPIO_Init+0x26a>
 8101a4e:	2308      	movs	r3, #8
 8101a50:	e029      	b.n	8101aa6 <HAL_GPIO_Init+0x26a>
 8101a52:	2307      	movs	r3, #7
 8101a54:	e027      	b.n	8101aa6 <HAL_GPIO_Init+0x26a>
 8101a56:	2306      	movs	r3, #6
 8101a58:	e025      	b.n	8101aa6 <HAL_GPIO_Init+0x26a>
 8101a5a:	2305      	movs	r3, #5
 8101a5c:	e023      	b.n	8101aa6 <HAL_GPIO_Init+0x26a>
 8101a5e:	2304      	movs	r3, #4
 8101a60:	e021      	b.n	8101aa6 <HAL_GPIO_Init+0x26a>
 8101a62:	2303      	movs	r3, #3
 8101a64:	e01f      	b.n	8101aa6 <HAL_GPIO_Init+0x26a>
 8101a66:	2302      	movs	r3, #2
 8101a68:	e01d      	b.n	8101aa6 <HAL_GPIO_Init+0x26a>
 8101a6a:	2301      	movs	r3, #1
 8101a6c:	e01b      	b.n	8101aa6 <HAL_GPIO_Init+0x26a>
 8101a6e:	bf00      	nop
 8101a70:	580000c0 	.word	0x580000c0
 8101a74:	58024400 	.word	0x58024400
 8101a78:	58000400 	.word	0x58000400
 8101a7c:	58020000 	.word	0x58020000
 8101a80:	58020400 	.word	0x58020400
 8101a84:	58020800 	.word	0x58020800
 8101a88:	58020c00 	.word	0x58020c00
 8101a8c:	58021000 	.word	0x58021000
 8101a90:	58021400 	.word	0x58021400
 8101a94:	58021800 	.word	0x58021800
 8101a98:	58021c00 	.word	0x58021c00
 8101a9c:	58022000 	.word	0x58022000
 8101aa0:	58022400 	.word	0x58022400
 8101aa4:	2300      	movs	r3, #0
 8101aa6:	69fa      	ldr	r2, [r7, #28]
 8101aa8:	f002 0203 	and.w	r2, r2, #3
 8101aac:	0092      	lsls	r2, r2, #2
 8101aae:	4093      	lsls	r3, r2
 8101ab0:	69ba      	ldr	r2, [r7, #24]
 8101ab2:	4313      	orrs	r3, r2
 8101ab4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101ab6:	4938      	ldr	r1, [pc, #224]	@ (8101b98 <HAL_GPIO_Init+0x35c>)
 8101ab8:	69fb      	ldr	r3, [r7, #28]
 8101aba:	089b      	lsrs	r3, r3, #2
 8101abc:	3302      	adds	r3, #2
 8101abe:	69ba      	ldr	r2, [r7, #24]
 8101ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101ac4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101ac8:	681b      	ldr	r3, [r3, #0]
 8101aca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101acc:	693b      	ldr	r3, [r7, #16]
 8101ace:	43db      	mvns	r3, r3
 8101ad0:	69ba      	ldr	r2, [r7, #24]
 8101ad2:	4013      	ands	r3, r2
 8101ad4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101ad6:	683b      	ldr	r3, [r7, #0]
 8101ad8:	685b      	ldr	r3, [r3, #4]
 8101ada:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8101ade:	2b00      	cmp	r3, #0
 8101ae0:	d003      	beq.n	8101aea <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101ae2:	69ba      	ldr	r2, [r7, #24]
 8101ae4:	693b      	ldr	r3, [r7, #16]
 8101ae6:	4313      	orrs	r3, r2
 8101ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101aea:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101aee:	69bb      	ldr	r3, [r7, #24]
 8101af0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101af2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8101af6:	685b      	ldr	r3, [r3, #4]
 8101af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101afa:	693b      	ldr	r3, [r7, #16]
 8101afc:	43db      	mvns	r3, r3
 8101afe:	69ba      	ldr	r2, [r7, #24]
 8101b00:	4013      	ands	r3, r2
 8101b02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101b04:	683b      	ldr	r3, [r7, #0]
 8101b06:	685b      	ldr	r3, [r3, #4]
 8101b08:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8101b0c:	2b00      	cmp	r3, #0
 8101b0e:	d003      	beq.n	8101b18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101b10:	69ba      	ldr	r2, [r7, #24]
 8101b12:	693b      	ldr	r3, [r7, #16]
 8101b14:	4313      	orrs	r3, r2
 8101b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101b18:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8101b1c:	69bb      	ldr	r3, [r7, #24]
 8101b1e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101b20:	697b      	ldr	r3, [r7, #20]
 8101b22:	685b      	ldr	r3, [r3, #4]
 8101b24:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b26:	693b      	ldr	r3, [r7, #16]
 8101b28:	43db      	mvns	r3, r3
 8101b2a:	69ba      	ldr	r2, [r7, #24]
 8101b2c:	4013      	ands	r3, r2
 8101b2e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101b30:	683b      	ldr	r3, [r7, #0]
 8101b32:	685b      	ldr	r3, [r3, #4]
 8101b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101b38:	2b00      	cmp	r3, #0
 8101b3a:	d003      	beq.n	8101b44 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101b3c:	69ba      	ldr	r2, [r7, #24]
 8101b3e:	693b      	ldr	r3, [r7, #16]
 8101b40:	4313      	orrs	r3, r2
 8101b42:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101b44:	697b      	ldr	r3, [r7, #20]
 8101b46:	69ba      	ldr	r2, [r7, #24]
 8101b48:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101b4a:	697b      	ldr	r3, [r7, #20]
 8101b4c:	681b      	ldr	r3, [r3, #0]
 8101b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101b50:	693b      	ldr	r3, [r7, #16]
 8101b52:	43db      	mvns	r3, r3
 8101b54:	69ba      	ldr	r2, [r7, #24]
 8101b56:	4013      	ands	r3, r2
 8101b58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101b5a:	683b      	ldr	r3, [r7, #0]
 8101b5c:	685b      	ldr	r3, [r3, #4]
 8101b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8101b62:	2b00      	cmp	r3, #0
 8101b64:	d003      	beq.n	8101b6e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101b66:	69ba      	ldr	r2, [r7, #24]
 8101b68:	693b      	ldr	r3, [r7, #16]
 8101b6a:	4313      	orrs	r3, r2
 8101b6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101b6e:	697b      	ldr	r3, [r7, #20]
 8101b70:	69ba      	ldr	r2, [r7, #24]
 8101b72:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101b74:	69fb      	ldr	r3, [r7, #28]
 8101b76:	3301      	adds	r3, #1
 8101b78:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101b7a:	683b      	ldr	r3, [r7, #0]
 8101b7c:	681a      	ldr	r2, [r3, #0]
 8101b7e:	69fb      	ldr	r3, [r7, #28]
 8101b80:	fa22 f303 	lsr.w	r3, r2, r3
 8101b84:	2b00      	cmp	r3, #0
 8101b86:	f47f ae63 	bne.w	8101850 <HAL_GPIO_Init+0x14>
  }
}
 8101b8a:	bf00      	nop
 8101b8c:	bf00      	nop
 8101b8e:	3724      	adds	r7, #36	@ 0x24
 8101b90:	46bd      	mov	sp, r7
 8101b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b96:	4770      	bx	lr
 8101b98:	58000400 	.word	0x58000400

08101b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8101b9c:	b480      	push	{r7}
 8101b9e:	b083      	sub	sp, #12
 8101ba0:	af00      	add	r7, sp, #0
 8101ba2:	6078      	str	r0, [r7, #4]
 8101ba4:	460b      	mov	r3, r1
 8101ba6:	807b      	strh	r3, [r7, #2]
 8101ba8:	4613      	mov	r3, r2
 8101baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8101bac:	787b      	ldrb	r3, [r7, #1]
 8101bae:	2b00      	cmp	r3, #0
 8101bb0:	d003      	beq.n	8101bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8101bb2:	887a      	ldrh	r2, [r7, #2]
 8101bb4:	687b      	ldr	r3, [r7, #4]
 8101bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8101bb8:	e003      	b.n	8101bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8101bba:	887b      	ldrh	r3, [r7, #2]
 8101bbc:	041a      	lsls	r2, r3, #16
 8101bbe:	687b      	ldr	r3, [r7, #4]
 8101bc0:	619a      	str	r2, [r3, #24]
}
 8101bc2:	bf00      	nop
 8101bc4:	370c      	adds	r7, #12
 8101bc6:	46bd      	mov	sp, r7
 8101bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bcc:	4770      	bx	lr
	...

08101bd0 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101bd0:	b480      	push	{r7}
 8101bd2:	b083      	sub	sp, #12
 8101bd4:	af00      	add	r7, sp, #0
 8101bd6:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101bd8:	4b05      	ldr	r3, [pc, #20]	@ (8101bf0 <HAL_HSEM_ActivateNotification+0x20>)
 8101bda:	681a      	ldr	r2, [r3, #0]
 8101bdc:	4904      	ldr	r1, [pc, #16]	@ (8101bf0 <HAL_HSEM_ActivateNotification+0x20>)
 8101bde:	687b      	ldr	r3, [r7, #4]
 8101be0:	4313      	orrs	r3, r2
 8101be2:	600b      	str	r3, [r1, #0]
#endif
}
 8101be4:	bf00      	nop
 8101be6:	370c      	adds	r7, #12
 8101be8:	46bd      	mov	sp, r7
 8101bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101bee:	4770      	bx	lr
 8101bf0:	58026510 	.word	0x58026510

08101bf4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8101bf4:	b580      	push	{r7, lr}
 8101bf6:	b082      	sub	sp, #8
 8101bf8:	af00      	add	r7, sp, #0
 8101bfa:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8101bfc:	687b      	ldr	r3, [r7, #4]
 8101bfe:	2b00      	cmp	r3, #0
 8101c00:	d101      	bne.n	8101c06 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8101c02:	2301      	movs	r3, #1
 8101c04:	e08d      	b.n	8101d22 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8101c06:	687b      	ldr	r3, [r7, #4]
 8101c08:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101c0c:	b2db      	uxtb	r3, r3
 8101c0e:	2b00      	cmp	r3, #0
 8101c10:	d106      	bne.n	8101c20 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8101c12:	687b      	ldr	r3, [r7, #4]
 8101c14:	2200      	movs	r2, #0
 8101c16:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8101c1a:	6878      	ldr	r0, [r7, #4]
 8101c1c:	f7ff fa4a 	bl	81010b4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8101c20:	687b      	ldr	r3, [r7, #4]
 8101c22:	2224      	movs	r2, #36	@ 0x24
 8101c24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8101c28:	687b      	ldr	r3, [r7, #4]
 8101c2a:	681b      	ldr	r3, [r3, #0]
 8101c2c:	681a      	ldr	r2, [r3, #0]
 8101c2e:	687b      	ldr	r3, [r7, #4]
 8101c30:	681b      	ldr	r3, [r3, #0]
 8101c32:	f022 0201 	bic.w	r2, r2, #1
 8101c36:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	685a      	ldr	r2, [r3, #4]
 8101c3c:	687b      	ldr	r3, [r7, #4]
 8101c3e:	681b      	ldr	r3, [r3, #0]
 8101c40:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8101c44:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8101c46:	687b      	ldr	r3, [r7, #4]
 8101c48:	681b      	ldr	r3, [r3, #0]
 8101c4a:	689a      	ldr	r2, [r3, #8]
 8101c4c:	687b      	ldr	r3, [r7, #4]
 8101c4e:	681b      	ldr	r3, [r3, #0]
 8101c50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8101c54:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8101c56:	687b      	ldr	r3, [r7, #4]
 8101c58:	68db      	ldr	r3, [r3, #12]
 8101c5a:	2b01      	cmp	r3, #1
 8101c5c:	d107      	bne.n	8101c6e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8101c5e:	687b      	ldr	r3, [r7, #4]
 8101c60:	689a      	ldr	r2, [r3, #8]
 8101c62:	687b      	ldr	r3, [r7, #4]
 8101c64:	681b      	ldr	r3, [r3, #0]
 8101c66:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8101c6a:	609a      	str	r2, [r3, #8]
 8101c6c:	e006      	b.n	8101c7c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8101c6e:	687b      	ldr	r3, [r7, #4]
 8101c70:	689a      	ldr	r2, [r3, #8]
 8101c72:	687b      	ldr	r3, [r7, #4]
 8101c74:	681b      	ldr	r3, [r3, #0]
 8101c76:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8101c7a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8101c7c:	687b      	ldr	r3, [r7, #4]
 8101c7e:	68db      	ldr	r3, [r3, #12]
 8101c80:	2b02      	cmp	r3, #2
 8101c82:	d108      	bne.n	8101c96 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8101c84:	687b      	ldr	r3, [r7, #4]
 8101c86:	681b      	ldr	r3, [r3, #0]
 8101c88:	685a      	ldr	r2, [r3, #4]
 8101c8a:	687b      	ldr	r3, [r7, #4]
 8101c8c:	681b      	ldr	r3, [r3, #0]
 8101c8e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8101c92:	605a      	str	r2, [r3, #4]
 8101c94:	e007      	b.n	8101ca6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	681b      	ldr	r3, [r3, #0]
 8101c9a:	685a      	ldr	r2, [r3, #4]
 8101c9c:	687b      	ldr	r3, [r7, #4]
 8101c9e:	681b      	ldr	r3, [r3, #0]
 8101ca0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8101ca4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	681b      	ldr	r3, [r3, #0]
 8101caa:	685b      	ldr	r3, [r3, #4]
 8101cac:	687a      	ldr	r2, [r7, #4]
 8101cae:	6812      	ldr	r2, [r2, #0]
 8101cb0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8101cb4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8101cb8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8101cba:	687b      	ldr	r3, [r7, #4]
 8101cbc:	681b      	ldr	r3, [r3, #0]
 8101cbe:	68da      	ldr	r2, [r3, #12]
 8101cc0:	687b      	ldr	r3, [r7, #4]
 8101cc2:	681b      	ldr	r3, [r3, #0]
 8101cc4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8101cc8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8101cca:	687b      	ldr	r3, [r7, #4]
 8101ccc:	691a      	ldr	r2, [r3, #16]
 8101cce:	687b      	ldr	r3, [r7, #4]
 8101cd0:	695b      	ldr	r3, [r3, #20]
 8101cd2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8101cd6:	687b      	ldr	r3, [r7, #4]
 8101cd8:	699b      	ldr	r3, [r3, #24]
 8101cda:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8101cdc:	687b      	ldr	r3, [r7, #4]
 8101cde:	681b      	ldr	r3, [r3, #0]
 8101ce0:	430a      	orrs	r2, r1
 8101ce2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8101ce4:	687b      	ldr	r3, [r7, #4]
 8101ce6:	69d9      	ldr	r1, [r3, #28]
 8101ce8:	687b      	ldr	r3, [r7, #4]
 8101cea:	6a1a      	ldr	r2, [r3, #32]
 8101cec:	687b      	ldr	r3, [r7, #4]
 8101cee:	681b      	ldr	r3, [r3, #0]
 8101cf0:	430a      	orrs	r2, r1
 8101cf2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8101cf4:	687b      	ldr	r3, [r7, #4]
 8101cf6:	681b      	ldr	r3, [r3, #0]
 8101cf8:	681a      	ldr	r2, [r3, #0]
 8101cfa:	687b      	ldr	r3, [r7, #4]
 8101cfc:	681b      	ldr	r3, [r3, #0]
 8101cfe:	f042 0201 	orr.w	r2, r2, #1
 8101d02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8101d04:	687b      	ldr	r3, [r7, #4]
 8101d06:	2200      	movs	r2, #0
 8101d08:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8101d0a:	687b      	ldr	r3, [r7, #4]
 8101d0c:	2220      	movs	r2, #32
 8101d0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8101d12:	687b      	ldr	r3, [r7, #4]
 8101d14:	2200      	movs	r2, #0
 8101d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8101d18:	687b      	ldr	r3, [r7, #4]
 8101d1a:	2200      	movs	r2, #0
 8101d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8101d20:	2300      	movs	r3, #0
}
 8101d22:	4618      	mov	r0, r3
 8101d24:	3708      	adds	r7, #8
 8101d26:	46bd      	mov	sp, r7
 8101d28:	bd80      	pop	{r7, pc}

08101d2a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8101d2a:	b480      	push	{r7}
 8101d2c:	b083      	sub	sp, #12
 8101d2e:	af00      	add	r7, sp, #0
 8101d30:	6078      	str	r0, [r7, #4]
 8101d32:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101d34:	687b      	ldr	r3, [r7, #4]
 8101d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101d3a:	b2db      	uxtb	r3, r3
 8101d3c:	2b20      	cmp	r3, #32
 8101d3e:	d138      	bne.n	8101db2 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101d40:	687b      	ldr	r3, [r7, #4]
 8101d42:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8101d46:	2b01      	cmp	r3, #1
 8101d48:	d101      	bne.n	8101d4e <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8101d4a:	2302      	movs	r3, #2
 8101d4c:	e032      	b.n	8101db4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8101d4e:	687b      	ldr	r3, [r7, #4]
 8101d50:	2201      	movs	r2, #1
 8101d52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101d56:	687b      	ldr	r3, [r7, #4]
 8101d58:	2224      	movs	r2, #36	@ 0x24
 8101d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	681b      	ldr	r3, [r3, #0]
 8101d62:	681a      	ldr	r2, [r3, #0]
 8101d64:	687b      	ldr	r3, [r7, #4]
 8101d66:	681b      	ldr	r3, [r3, #0]
 8101d68:	f022 0201 	bic.w	r2, r2, #1
 8101d6c:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8101d6e:	687b      	ldr	r3, [r7, #4]
 8101d70:	681b      	ldr	r3, [r3, #0]
 8101d72:	681a      	ldr	r2, [r3, #0]
 8101d74:	687b      	ldr	r3, [r7, #4]
 8101d76:	681b      	ldr	r3, [r3, #0]
 8101d78:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8101d7c:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8101d7e:	687b      	ldr	r3, [r7, #4]
 8101d80:	681b      	ldr	r3, [r3, #0]
 8101d82:	6819      	ldr	r1, [r3, #0]
 8101d84:	687b      	ldr	r3, [r7, #4]
 8101d86:	681b      	ldr	r3, [r3, #0]
 8101d88:	683a      	ldr	r2, [r7, #0]
 8101d8a:	430a      	orrs	r2, r1
 8101d8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8101d8e:	687b      	ldr	r3, [r7, #4]
 8101d90:	681b      	ldr	r3, [r3, #0]
 8101d92:	681a      	ldr	r2, [r3, #0]
 8101d94:	687b      	ldr	r3, [r7, #4]
 8101d96:	681b      	ldr	r3, [r3, #0]
 8101d98:	f042 0201 	orr.w	r2, r2, #1
 8101d9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8101d9e:	687b      	ldr	r3, [r7, #4]
 8101da0:	2220      	movs	r2, #32
 8101da2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101da6:	687b      	ldr	r3, [r7, #4]
 8101da8:	2200      	movs	r2, #0
 8101daa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8101dae:	2300      	movs	r3, #0
 8101db0:	e000      	b.n	8101db4 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8101db2:	2302      	movs	r3, #2
  }
}
 8101db4:	4618      	mov	r0, r3
 8101db6:	370c      	adds	r7, #12
 8101db8:	46bd      	mov	sp, r7
 8101dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101dbe:	4770      	bx	lr

08101dc0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8101dc0:	b480      	push	{r7}
 8101dc2:	b085      	sub	sp, #20
 8101dc4:	af00      	add	r7, sp, #0
 8101dc6:	6078      	str	r0, [r7, #4]
 8101dc8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8101dca:	687b      	ldr	r3, [r7, #4]
 8101dcc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8101dd0:	b2db      	uxtb	r3, r3
 8101dd2:	2b20      	cmp	r3, #32
 8101dd4:	d139      	bne.n	8101e4a <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8101dd6:	687b      	ldr	r3, [r7, #4]
 8101dd8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8101ddc:	2b01      	cmp	r3, #1
 8101dde:	d101      	bne.n	8101de4 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8101de0:	2302      	movs	r3, #2
 8101de2:	e033      	b.n	8101e4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8101de4:	687b      	ldr	r3, [r7, #4]
 8101de6:	2201      	movs	r2, #1
 8101de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8101dec:	687b      	ldr	r3, [r7, #4]
 8101dee:	2224      	movs	r2, #36	@ 0x24
 8101df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8101df4:	687b      	ldr	r3, [r7, #4]
 8101df6:	681b      	ldr	r3, [r3, #0]
 8101df8:	681a      	ldr	r2, [r3, #0]
 8101dfa:	687b      	ldr	r3, [r7, #4]
 8101dfc:	681b      	ldr	r3, [r3, #0]
 8101dfe:	f022 0201 	bic.w	r2, r2, #1
 8101e02:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8101e04:	687b      	ldr	r3, [r7, #4]
 8101e06:	681b      	ldr	r3, [r3, #0]
 8101e08:	681b      	ldr	r3, [r3, #0]
 8101e0a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8101e0c:	68fb      	ldr	r3, [r7, #12]
 8101e0e:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8101e12:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8101e14:	683b      	ldr	r3, [r7, #0]
 8101e16:	021b      	lsls	r3, r3, #8
 8101e18:	68fa      	ldr	r2, [r7, #12]
 8101e1a:	4313      	orrs	r3, r2
 8101e1c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8101e1e:	687b      	ldr	r3, [r7, #4]
 8101e20:	681b      	ldr	r3, [r3, #0]
 8101e22:	68fa      	ldr	r2, [r7, #12]
 8101e24:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8101e26:	687b      	ldr	r3, [r7, #4]
 8101e28:	681b      	ldr	r3, [r3, #0]
 8101e2a:	681a      	ldr	r2, [r3, #0]
 8101e2c:	687b      	ldr	r3, [r7, #4]
 8101e2e:	681b      	ldr	r3, [r3, #0]
 8101e30:	f042 0201 	orr.w	r2, r2, #1
 8101e34:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8101e36:	687b      	ldr	r3, [r7, #4]
 8101e38:	2220      	movs	r2, #32
 8101e3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8101e3e:	687b      	ldr	r3, [r7, #4]
 8101e40:	2200      	movs	r2, #0
 8101e42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8101e46:	2300      	movs	r3, #0
 8101e48:	e000      	b.n	8101e4c <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8101e4a:	2302      	movs	r3, #2
  }
}
 8101e4c:	4618      	mov	r0, r3
 8101e4e:	3714      	adds	r7, #20
 8101e50:	46bd      	mov	sp, r7
 8101e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e56:	4770      	bx	lr

08101e58 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101e58:	b580      	push	{r7, lr}
 8101e5a:	b084      	sub	sp, #16
 8101e5c:	af00      	add	r7, sp, #0
 8101e5e:	60f8      	str	r0, [r7, #12]
 8101e60:	460b      	mov	r3, r1
 8101e62:	607a      	str	r2, [r7, #4]
 8101e64:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101e66:	4b37      	ldr	r3, [pc, #220]	@ (8101f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e68:	681b      	ldr	r3, [r3, #0]
 8101e6a:	f023 0201 	bic.w	r2, r3, #1
 8101e6e:	4935      	ldr	r1, [pc, #212]	@ (8101f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e70:	68fb      	ldr	r3, [r7, #12]
 8101e72:	4313      	orrs	r3, r2
 8101e74:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101e76:	687b      	ldr	r3, [r7, #4]
 8101e78:	2b00      	cmp	r3, #0
 8101e7a:	d123      	bne.n	8101ec4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101e7c:	f7ff fcca 	bl	8101814 <HAL_GetCurrentCPUID>
 8101e80:	4603      	mov	r3, r0
 8101e82:	2b03      	cmp	r3, #3
 8101e84:	d158      	bne.n	8101f38 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101e86:	4b2f      	ldr	r3, [pc, #188]	@ (8101f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e88:	691b      	ldr	r3, [r3, #16]
 8101e8a:	4a2e      	ldr	r2, [pc, #184]	@ (8101f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101e8c:	f023 0301 	bic.w	r3, r3, #1
 8101e90:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101e92:	4b2d      	ldr	r3, [pc, #180]	@ (8101f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101e94:	691b      	ldr	r3, [r3, #16]
 8101e96:	4a2c      	ldr	r2, [pc, #176]	@ (8101f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101e98:	f043 0304 	orr.w	r3, r3, #4
 8101e9c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101e9e:	f3bf 8f4f 	dsb	sy
}
 8101ea2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101ea4:	f3bf 8f6f 	isb	sy
}
 8101ea8:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101eaa:	7afb      	ldrb	r3, [r7, #11]
 8101eac:	2b01      	cmp	r3, #1
 8101eae:	d101      	bne.n	8101eb4 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101eb0:	bf30      	wfi
 8101eb2:	e000      	b.n	8101eb6 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101eb4:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101eb6:	4b24      	ldr	r3, [pc, #144]	@ (8101f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101eb8:	691b      	ldr	r3, [r3, #16]
 8101eba:	4a23      	ldr	r2, [pc, #140]	@ (8101f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ebc:	f023 0304 	bic.w	r3, r3, #4
 8101ec0:	6113      	str	r3, [r2, #16]
 8101ec2:	e03c      	b.n	8101f3e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101ec4:	687b      	ldr	r3, [r7, #4]
 8101ec6:	2b01      	cmp	r3, #1
 8101ec8:	d123      	bne.n	8101f12 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101eca:	f7ff fca3 	bl	8101814 <HAL_GetCurrentCPUID>
 8101ece:	4603      	mov	r3, r0
 8101ed0:	2b01      	cmp	r3, #1
 8101ed2:	d133      	bne.n	8101f3c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8101f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ed6:	695b      	ldr	r3, [r3, #20]
 8101ed8:	4a1a      	ldr	r2, [pc, #104]	@ (8101f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101eda:	f023 0302 	bic.w	r3, r3, #2
 8101ede:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101ee0:	4b19      	ldr	r3, [pc, #100]	@ (8101f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ee2:	691b      	ldr	r3, [r3, #16]
 8101ee4:	4a18      	ldr	r2, [pc, #96]	@ (8101f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101ee6:	f043 0304 	orr.w	r3, r3, #4
 8101eea:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101eec:	f3bf 8f4f 	dsb	sy
}
 8101ef0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101ef2:	f3bf 8f6f 	isb	sy
}
 8101ef6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101ef8:	7afb      	ldrb	r3, [r7, #11]
 8101efa:	2b01      	cmp	r3, #1
 8101efc:	d101      	bne.n	8101f02 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101efe:	bf30      	wfi
 8101f00:	e000      	b.n	8101f04 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101f02:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101f04:	4b10      	ldr	r3, [pc, #64]	@ (8101f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101f06:	691b      	ldr	r3, [r3, #16]
 8101f08:	4a0f      	ldr	r2, [pc, #60]	@ (8101f48 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101f0a:	f023 0304 	bic.w	r3, r3, #4
 8101f0e:	6113      	str	r3, [r2, #16]
 8101f10:	e015      	b.n	8101f3e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101f12:	f7ff fc7f 	bl	8101814 <HAL_GetCurrentCPUID>
 8101f16:	4603      	mov	r3, r0
 8101f18:	2b03      	cmp	r3, #3
 8101f1a:	d106      	bne.n	8101f2a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101f1c:	4b09      	ldr	r3, [pc, #36]	@ (8101f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f1e:	691b      	ldr	r3, [r3, #16]
 8101f20:	4a08      	ldr	r2, [pc, #32]	@ (8101f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f22:	f023 0304 	bic.w	r3, r3, #4
 8101f26:	6113      	str	r3, [r2, #16]
 8101f28:	e009      	b.n	8101f3e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101f2a:	4b06      	ldr	r3, [pc, #24]	@ (8101f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f2c:	695b      	ldr	r3, [r3, #20]
 8101f2e:	4a05      	ldr	r2, [pc, #20]	@ (8101f44 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101f30:	f023 0304 	bic.w	r3, r3, #4
 8101f34:	6153      	str	r3, [r2, #20]
 8101f36:	e002      	b.n	8101f3e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101f38:	bf00      	nop
 8101f3a:	e000      	b.n	8101f3e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101f3c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101f3e:	3710      	adds	r7, #16
 8101f40:	46bd      	mov	sp, r7
 8101f42:	bd80      	pop	{r7, pc}
 8101f44:	58024800 	.word	0x58024800
 8101f48:	e000ed00 	.word	0xe000ed00

08101f4c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101f4c:	b580      	push	{r7, lr}
 8101f4e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101f50:	f7ff fc60 	bl	8101814 <HAL_GetCurrentCPUID>
 8101f54:	4603      	mov	r3, r0
 8101f56:	2b03      	cmp	r3, #3
 8101f58:	d101      	bne.n	8101f5e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101f5a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101f5c:	e001      	b.n	8101f62 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101f5e:	bf40      	sev
    __WFE ();
 8101f60:	bf20      	wfe
}
 8101f62:	bf00      	nop
 8101f64:	bd80      	pop	{r7, pc}
	...

08101f68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101f68:	b480      	push	{r7}
 8101f6a:	b089      	sub	sp, #36	@ 0x24
 8101f6c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101f6e:	4bb3      	ldr	r3, [pc, #716]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f70:	691b      	ldr	r3, [r3, #16]
 8101f72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8101f76:	2b18      	cmp	r3, #24
 8101f78:	f200 8155 	bhi.w	8102226 <HAL_RCC_GetSysClockFreq+0x2be>
 8101f7c:	a201      	add	r2, pc, #4	@ (adr r2, 8101f84 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101f82:	bf00      	nop
 8101f84:	08101fe9 	.word	0x08101fe9
 8101f88:	08102227 	.word	0x08102227
 8101f8c:	08102227 	.word	0x08102227
 8101f90:	08102227 	.word	0x08102227
 8101f94:	08102227 	.word	0x08102227
 8101f98:	08102227 	.word	0x08102227
 8101f9c:	08102227 	.word	0x08102227
 8101fa0:	08102227 	.word	0x08102227
 8101fa4:	0810200f 	.word	0x0810200f
 8101fa8:	08102227 	.word	0x08102227
 8101fac:	08102227 	.word	0x08102227
 8101fb0:	08102227 	.word	0x08102227
 8101fb4:	08102227 	.word	0x08102227
 8101fb8:	08102227 	.word	0x08102227
 8101fbc:	08102227 	.word	0x08102227
 8101fc0:	08102227 	.word	0x08102227
 8101fc4:	08102015 	.word	0x08102015
 8101fc8:	08102227 	.word	0x08102227
 8101fcc:	08102227 	.word	0x08102227
 8101fd0:	08102227 	.word	0x08102227
 8101fd4:	08102227 	.word	0x08102227
 8101fd8:	08102227 	.word	0x08102227
 8101fdc:	08102227 	.word	0x08102227
 8101fe0:	08102227 	.word	0x08102227
 8101fe4:	0810201b 	.word	0x0810201b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101fe8:	4b94      	ldr	r3, [pc, #592]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101fea:	681b      	ldr	r3, [r3, #0]
 8101fec:	f003 0320 	and.w	r3, r3, #32
 8101ff0:	2b00      	cmp	r3, #0
 8101ff2:	d009      	beq.n	8102008 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101ff4:	4b91      	ldr	r3, [pc, #580]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ff6:	681b      	ldr	r3, [r3, #0]
 8101ff8:	08db      	lsrs	r3, r3, #3
 8101ffa:	f003 0303 	and.w	r3, r3, #3
 8101ffe:	4a90      	ldr	r2, [pc, #576]	@ (8102240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102000:	fa22 f303 	lsr.w	r3, r2, r3
 8102004:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8102006:	e111      	b.n	810222c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8102008:	4b8d      	ldr	r3, [pc, #564]	@ (8102240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810200a:	61bb      	str	r3, [r7, #24]
      break;
 810200c:	e10e      	b.n	810222c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 810200e:	4b8d      	ldr	r3, [pc, #564]	@ (8102244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102010:	61bb      	str	r3, [r7, #24]
      break;
 8102012:	e10b      	b.n	810222c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8102014:	4b8c      	ldr	r3, [pc, #560]	@ (8102248 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8102016:	61bb      	str	r3, [r7, #24]
      break;
 8102018:	e108      	b.n	810222c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810201a:	4b88      	ldr	r3, [pc, #544]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810201e:	f003 0303 	and.w	r3, r3, #3
 8102022:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8102024:	4b85      	ldr	r3, [pc, #532]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102028:	091b      	lsrs	r3, r3, #4
 810202a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 810202e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8102030:	4b82      	ldr	r3, [pc, #520]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102034:	f003 0301 	and.w	r3, r3, #1
 8102038:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810203a:	4b80      	ldr	r3, [pc, #512]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810203c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 810203e:	08db      	lsrs	r3, r3, #3
 8102040:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102044:	68fa      	ldr	r2, [r7, #12]
 8102046:	fb02 f303 	mul.w	r3, r2, r3
 810204a:	ee07 3a90 	vmov	s15, r3
 810204e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102052:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8102056:	693b      	ldr	r3, [r7, #16]
 8102058:	2b00      	cmp	r3, #0
 810205a:	f000 80e1 	beq.w	8102220 <HAL_RCC_GetSysClockFreq+0x2b8>
 810205e:	697b      	ldr	r3, [r7, #20]
 8102060:	2b02      	cmp	r3, #2
 8102062:	f000 8083 	beq.w	810216c <HAL_RCC_GetSysClockFreq+0x204>
 8102066:	697b      	ldr	r3, [r7, #20]
 8102068:	2b02      	cmp	r3, #2
 810206a:	f200 80a1 	bhi.w	81021b0 <HAL_RCC_GetSysClockFreq+0x248>
 810206e:	697b      	ldr	r3, [r7, #20]
 8102070:	2b00      	cmp	r3, #0
 8102072:	d003      	beq.n	810207c <HAL_RCC_GetSysClockFreq+0x114>
 8102074:	697b      	ldr	r3, [r7, #20]
 8102076:	2b01      	cmp	r3, #1
 8102078:	d056      	beq.n	8102128 <HAL_RCC_GetSysClockFreq+0x1c0>
 810207a:	e099      	b.n	81021b0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810207c:	4b6f      	ldr	r3, [pc, #444]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810207e:	681b      	ldr	r3, [r3, #0]
 8102080:	f003 0320 	and.w	r3, r3, #32
 8102084:	2b00      	cmp	r3, #0
 8102086:	d02d      	beq.n	81020e4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102088:	4b6c      	ldr	r3, [pc, #432]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810208a:	681b      	ldr	r3, [r3, #0]
 810208c:	08db      	lsrs	r3, r3, #3
 810208e:	f003 0303 	and.w	r3, r3, #3
 8102092:	4a6b      	ldr	r2, [pc, #428]	@ (8102240 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8102094:	fa22 f303 	lsr.w	r3, r2, r3
 8102098:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810209a:	687b      	ldr	r3, [r7, #4]
 810209c:	ee07 3a90 	vmov	s15, r3
 81020a0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81020a4:	693b      	ldr	r3, [r7, #16]
 81020a6:	ee07 3a90 	vmov	s15, r3
 81020aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81020ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81020b2:	4b62      	ldr	r3, [pc, #392]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81020b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81020b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81020ba:	ee07 3a90 	vmov	s15, r3
 81020be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81020c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81020c6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 810224c <HAL_RCC_GetSysClockFreq+0x2e4>
 81020ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81020ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81020d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81020d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81020da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81020de:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 81020e2:	e087      	b.n	81021f4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81020e4:	693b      	ldr	r3, [r7, #16]
 81020e6:	ee07 3a90 	vmov	s15, r3
 81020ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81020ee:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8102250 <HAL_RCC_GetSysClockFreq+0x2e8>
 81020f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81020f6:	4b51      	ldr	r3, [pc, #324]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81020fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81020fe:	ee07 3a90 	vmov	s15, r3
 8102102:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102106:	ed97 6a02 	vldr	s12, [r7, #8]
 810210a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 810224c <HAL_RCC_GetSysClockFreq+0x2e4>
 810210e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102112:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102116:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810211a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810211e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102122:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8102126:	e065      	b.n	81021f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8102128:	693b      	ldr	r3, [r7, #16]
 810212a:	ee07 3a90 	vmov	s15, r3
 810212e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102132:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8102254 <HAL_RCC_GetSysClockFreq+0x2ec>
 8102136:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810213a:	4b40      	ldr	r3, [pc, #256]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 810213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810213e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102142:	ee07 3a90 	vmov	s15, r3
 8102146:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810214a:	ed97 6a02 	vldr	s12, [r7, #8]
 810214e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 810224c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102152:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102156:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810215a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810215e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102162:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102166:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810216a:	e043      	b.n	81021f4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810216c:	693b      	ldr	r3, [r7, #16]
 810216e:	ee07 3a90 	vmov	s15, r3
 8102172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102176:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8102258 <HAL_RCC_GetSysClockFreq+0x2f0>
 810217a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810217e:	4b2f      	ldr	r3, [pc, #188]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102180:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8102182:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102186:	ee07 3a90 	vmov	s15, r3
 810218a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810218e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102192:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 810224c <HAL_RCC_GetSysClockFreq+0x2e4>
 8102196:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810219a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810219e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81021a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81021a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81021aa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81021ae:	e021      	b.n	81021f4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81021b0:	693b      	ldr	r3, [r7, #16]
 81021b2:	ee07 3a90 	vmov	s15, r3
 81021b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81021ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8102254 <HAL_RCC_GetSysClockFreq+0x2ec>
 81021be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81021c2:	4b1e      	ldr	r3, [pc, #120]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81021c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81021ca:	ee07 3a90 	vmov	s15, r3
 81021ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81021d2:	ed97 6a02 	vldr	s12, [r7, #8]
 81021d6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 810224c <HAL_RCC_GetSysClockFreq+0x2e4>
 81021da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81021de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81021e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81021e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81021ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 81021ee:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81021f2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 81021f4:	4b11      	ldr	r3, [pc, #68]	@ (810223c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81021f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81021f8:	0a5b      	lsrs	r3, r3, #9
 81021fa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 81021fe:	3301      	adds	r3, #1
 8102200:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8102202:	683b      	ldr	r3, [r7, #0]
 8102204:	ee07 3a90 	vmov	s15, r3
 8102208:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 810220c:	edd7 6a07 	vldr	s13, [r7, #28]
 8102210:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102214:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102218:	ee17 3a90 	vmov	r3, s15
 810221c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810221e:	e005      	b.n	810222c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8102220:	2300      	movs	r3, #0
 8102222:	61bb      	str	r3, [r7, #24]
      break;
 8102224:	e002      	b.n	810222c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8102226:	4b07      	ldr	r3, [pc, #28]	@ (8102244 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102228:	61bb      	str	r3, [r7, #24]
      break;
 810222a:	bf00      	nop
  }

  return sysclockfreq;
 810222c:	69bb      	ldr	r3, [r7, #24]
}
 810222e:	4618      	mov	r0, r3
 8102230:	3724      	adds	r7, #36	@ 0x24
 8102232:	46bd      	mov	sp, r7
 8102234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102238:	4770      	bx	lr
 810223a:	bf00      	nop
 810223c:	58024400 	.word	0x58024400
 8102240:	03d09000 	.word	0x03d09000
 8102244:	003d0900 	.word	0x003d0900
 8102248:	017d7840 	.word	0x017d7840
 810224c:	46000000 	.word	0x46000000
 8102250:	4c742400 	.word	0x4c742400
 8102254:	4a742400 	.word	0x4a742400
 8102258:	4bbebc20 	.word	0x4bbebc20

0810225c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810225c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102260:	b0ca      	sub	sp, #296	@ 0x128
 8102262:	af00      	add	r7, sp, #0
 8102264:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102268:	2300      	movs	r3, #0
 810226a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810226e:	2300      	movs	r3, #0
 8102270:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8102274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102278:	e9d3 2300 	ldrd	r2, r3, [r3]
 810227c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8102280:	2500      	movs	r5, #0
 8102282:	ea54 0305 	orrs.w	r3, r4, r5
 8102286:	d049      	beq.n	810231c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102288:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810228c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810228e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102292:	d02f      	beq.n	81022f4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8102294:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8102298:	d828      	bhi.n	81022ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 810229a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810229e:	d01a      	beq.n	81022d6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 81022a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81022a4:	d822      	bhi.n	81022ec <HAL_RCCEx_PeriphCLKConfig+0x90>
 81022a6:	2b00      	cmp	r3, #0
 81022a8:	d003      	beq.n	81022b2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 81022aa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81022ae:	d007      	beq.n	81022c0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81022b0:	e01c      	b.n	81022ec <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81022b2:	4bb8      	ldr	r3, [pc, #736]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81022b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81022b6:	4ab7      	ldr	r2, [pc, #732]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81022b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81022bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81022be:	e01a      	b.n	81022f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81022c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022c4:	3308      	adds	r3, #8
 81022c6:	2102      	movs	r1, #2
 81022c8:	4618      	mov	r0, r3
 81022ca:	f001 f9d1 	bl	8103670 <RCCEx_PLL2_Config>
 81022ce:	4603      	mov	r3, r0
 81022d0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81022d4:	e00f      	b.n	81022f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81022d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022da:	3328      	adds	r3, #40	@ 0x28
 81022dc:	2102      	movs	r1, #2
 81022de:	4618      	mov	r0, r3
 81022e0:	f001 fa78 	bl	81037d4 <RCCEx_PLL3_Config>
 81022e4:	4603      	mov	r3, r0
 81022e6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81022ea:	e004      	b.n	81022f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81022ec:	2301      	movs	r3, #1
 81022ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81022f2:	e000      	b.n	81022f6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81022f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81022f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81022fa:	2b00      	cmp	r3, #0
 81022fc:	d10a      	bne.n	8102314 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81022fe:	4ba5      	ldr	r3, [pc, #660]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102300:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102302:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102306:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810230a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810230c:	4aa1      	ldr	r2, [pc, #644]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810230e:	430b      	orrs	r3, r1
 8102310:	6513      	str	r3, [r2, #80]	@ 0x50
 8102312:	e003      	b.n	810231c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102314:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102318:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810231c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102324:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8102328:	f04f 0900 	mov.w	r9, #0
 810232c:	ea58 0309 	orrs.w	r3, r8, r9
 8102330:	d047      	beq.n	81023c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8102332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102338:	2b04      	cmp	r3, #4
 810233a:	d82a      	bhi.n	8102392 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810233c:	a201      	add	r2, pc, #4	@ (adr r2, 8102344 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810233e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102342:	bf00      	nop
 8102344:	08102359 	.word	0x08102359
 8102348:	08102367 	.word	0x08102367
 810234c:	0810237d 	.word	0x0810237d
 8102350:	0810239b 	.word	0x0810239b
 8102354:	0810239b 	.word	0x0810239b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102358:	4b8e      	ldr	r3, [pc, #568]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810235a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810235c:	4a8d      	ldr	r2, [pc, #564]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810235e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102362:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102364:	e01a      	b.n	810239c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810236a:	3308      	adds	r3, #8
 810236c:	2100      	movs	r1, #0
 810236e:	4618      	mov	r0, r3
 8102370:	f001 f97e 	bl	8103670 <RCCEx_PLL2_Config>
 8102374:	4603      	mov	r3, r0
 8102376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810237a:	e00f      	b.n	810239c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810237c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102380:	3328      	adds	r3, #40	@ 0x28
 8102382:	2100      	movs	r1, #0
 8102384:	4618      	mov	r0, r3
 8102386:	f001 fa25 	bl	81037d4 <RCCEx_PLL3_Config>
 810238a:	4603      	mov	r3, r0
 810238c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102390:	e004      	b.n	810239c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102392:	2301      	movs	r3, #1
 8102394:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102398:	e000      	b.n	810239c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810239a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810239c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023a0:	2b00      	cmp	r3, #0
 81023a2:	d10a      	bne.n	81023ba <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 81023a4:	4b7b      	ldr	r3, [pc, #492]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81023a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81023a8:	f023 0107 	bic.w	r1, r3, #7
 81023ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81023b2:	4a78      	ldr	r2, [pc, #480]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81023b4:	430b      	orrs	r3, r1
 81023b6:	6513      	str	r3, [r2, #80]	@ 0x50
 81023b8:	e003      	b.n	81023c2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81023ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81023be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81023c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023ca:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81023ce:	f04f 0b00 	mov.w	fp, #0
 81023d2:	ea5a 030b 	orrs.w	r3, sl, fp
 81023d6:	d04c      	beq.n	8102472 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81023d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81023de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81023e2:	d030      	beq.n	8102446 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81023e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81023e8:	d829      	bhi.n	810243e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81023ea:	2bc0      	cmp	r3, #192	@ 0xc0
 81023ec:	d02d      	beq.n	810244a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81023ee:	2bc0      	cmp	r3, #192	@ 0xc0
 81023f0:	d825      	bhi.n	810243e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81023f2:	2b80      	cmp	r3, #128	@ 0x80
 81023f4:	d018      	beq.n	8102428 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81023f6:	2b80      	cmp	r3, #128	@ 0x80
 81023f8:	d821      	bhi.n	810243e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81023fa:	2b00      	cmp	r3, #0
 81023fc:	d002      	beq.n	8102404 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81023fe:	2b40      	cmp	r3, #64	@ 0x40
 8102400:	d007      	beq.n	8102412 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8102402:	e01c      	b.n	810243e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102404:	4b63      	ldr	r3, [pc, #396]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102408:	4a62      	ldr	r2, [pc, #392]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810240a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810240e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102410:	e01c      	b.n	810244c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102416:	3308      	adds	r3, #8
 8102418:	2100      	movs	r1, #0
 810241a:	4618      	mov	r0, r3
 810241c:	f001 f928 	bl	8103670 <RCCEx_PLL2_Config>
 8102420:	4603      	mov	r3, r0
 8102422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102426:	e011      	b.n	810244c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810242c:	3328      	adds	r3, #40	@ 0x28
 810242e:	2100      	movs	r1, #0
 8102430:	4618      	mov	r0, r3
 8102432:	f001 f9cf 	bl	81037d4 <RCCEx_PLL3_Config>
 8102436:	4603      	mov	r3, r0
 8102438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810243c:	e006      	b.n	810244c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810243e:	2301      	movs	r3, #1
 8102440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102444:	e002      	b.n	810244c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102446:	bf00      	nop
 8102448:	e000      	b.n	810244c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810244a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810244c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102450:	2b00      	cmp	r3, #0
 8102452:	d10a      	bne.n	810246a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8102454:	4b4f      	ldr	r3, [pc, #316]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102456:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102458:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810245c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102460:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8102462:	4a4c      	ldr	r2, [pc, #304]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102464:	430b      	orrs	r3, r1
 8102466:	6513      	str	r3, [r2, #80]	@ 0x50
 8102468:	e003      	b.n	8102472 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810246a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810246e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8102472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102476:	e9d3 2300 	ldrd	r2, r3, [r3]
 810247a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810247e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8102482:	2300      	movs	r3, #0
 8102484:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8102488:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810248c:	460b      	mov	r3, r1
 810248e:	4313      	orrs	r3, r2
 8102490:	d053      	beq.n	810253a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8102492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102496:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810249a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810249e:	d035      	beq.n	810250c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 81024a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 81024a4:	d82e      	bhi.n	8102504 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81024a6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81024aa:	d031      	beq.n	8102510 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81024ac:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81024b0:	d828      	bhi.n	8102504 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81024b2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81024b6:	d01a      	beq.n	81024ee <HAL_RCCEx_PeriphCLKConfig+0x292>
 81024b8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81024bc:	d822      	bhi.n	8102504 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81024be:	2b00      	cmp	r3, #0
 81024c0:	d003      	beq.n	81024ca <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81024c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81024c6:	d007      	beq.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81024c8:	e01c      	b.n	8102504 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81024ca:	4b32      	ldr	r3, [pc, #200]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81024cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81024ce:	4a31      	ldr	r2, [pc, #196]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81024d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81024d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81024d6:	e01c      	b.n	8102512 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81024d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024dc:	3308      	adds	r3, #8
 81024de:	2100      	movs	r1, #0
 81024e0:	4618      	mov	r0, r3
 81024e2:	f001 f8c5 	bl	8103670 <RCCEx_PLL2_Config>
 81024e6:	4603      	mov	r3, r0
 81024e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81024ec:	e011      	b.n	8102512 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81024ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024f2:	3328      	adds	r3, #40	@ 0x28
 81024f4:	2100      	movs	r1, #0
 81024f6:	4618      	mov	r0, r3
 81024f8:	f001 f96c 	bl	81037d4 <RCCEx_PLL3_Config>
 81024fc:	4603      	mov	r3, r0
 81024fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102502:	e006      	b.n	8102512 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8102504:	2301      	movs	r3, #1
 8102506:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810250a:	e002      	b.n	8102512 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 810250c:	bf00      	nop
 810250e:	e000      	b.n	8102512 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102510:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102512:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102516:	2b00      	cmp	r3, #0
 8102518:	d10b      	bne.n	8102532 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810251a:	4b1e      	ldr	r3, [pc, #120]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810251c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810251e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8102522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102526:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810252a:	4a1a      	ldr	r2, [pc, #104]	@ (8102594 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810252c:	430b      	orrs	r3, r1
 810252e:	6593      	str	r3, [r2, #88]	@ 0x58
 8102530:	e003      	b.n	810253a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102532:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102536:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810253a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810253e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102542:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8102546:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810254a:	2300      	movs	r3, #0
 810254c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8102550:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8102554:	460b      	mov	r3, r1
 8102556:	4313      	orrs	r3, r2
 8102558:	d056      	beq.n	8102608 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810255a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810255e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8102562:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8102566:	d038      	beq.n	81025da <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8102568:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810256c:	d831      	bhi.n	81025d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810256e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102572:	d034      	beq.n	81025de <HAL_RCCEx_PeriphCLKConfig+0x382>
 8102574:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8102578:	d82b      	bhi.n	81025d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810257a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810257e:	d01d      	beq.n	81025bc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102580:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8102584:	d825      	bhi.n	81025d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102586:	2b00      	cmp	r3, #0
 8102588:	d006      	beq.n	8102598 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810258a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810258e:	d00a      	beq.n	81025a6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102590:	e01f      	b.n	81025d2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102592:	bf00      	nop
 8102594:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102598:	4ba2      	ldr	r3, [pc, #648]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810259a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810259c:	4aa1      	ldr	r2, [pc, #644]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810259e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81025a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81025a4:	e01c      	b.n	81025e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81025a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025aa:	3308      	adds	r3, #8
 81025ac:	2100      	movs	r1, #0
 81025ae:	4618      	mov	r0, r3
 81025b0:	f001 f85e 	bl	8103670 <RCCEx_PLL2_Config>
 81025b4:	4603      	mov	r3, r0
 81025b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81025ba:	e011      	b.n	81025e0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81025bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025c0:	3328      	adds	r3, #40	@ 0x28
 81025c2:	2100      	movs	r1, #0
 81025c4:	4618      	mov	r0, r3
 81025c6:	f001 f905 	bl	81037d4 <RCCEx_PLL3_Config>
 81025ca:	4603      	mov	r3, r0
 81025cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81025d0:	e006      	b.n	81025e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81025d2:	2301      	movs	r3, #1
 81025d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81025d8:	e002      	b.n	81025e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81025da:	bf00      	nop
 81025dc:	e000      	b.n	81025e0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81025de:	bf00      	nop
    }

    if (ret == HAL_OK)
 81025e0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025e4:	2b00      	cmp	r3, #0
 81025e6:	d10b      	bne.n	8102600 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81025e8:	4b8e      	ldr	r3, [pc, #568]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81025ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81025ec:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81025f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025f4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81025f8:	4a8a      	ldr	r2, [pc, #552]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81025fa:	430b      	orrs	r3, r1
 81025fc:	6593      	str	r3, [r2, #88]	@ 0x58
 81025fe:	e003      	b.n	8102608 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102600:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102604:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102608:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810260c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102610:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8102614:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8102618:	2300      	movs	r3, #0
 810261a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810261e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8102622:	460b      	mov	r3, r1
 8102624:	4313      	orrs	r3, r2
 8102626:	d03a      	beq.n	810269e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8102628:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810262c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810262e:	2b30      	cmp	r3, #48	@ 0x30
 8102630:	d01f      	beq.n	8102672 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8102632:	2b30      	cmp	r3, #48	@ 0x30
 8102634:	d819      	bhi.n	810266a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102636:	2b20      	cmp	r3, #32
 8102638:	d00c      	beq.n	8102654 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810263a:	2b20      	cmp	r3, #32
 810263c:	d815      	bhi.n	810266a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810263e:	2b00      	cmp	r3, #0
 8102640:	d019      	beq.n	8102676 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8102642:	2b10      	cmp	r3, #16
 8102644:	d111      	bne.n	810266a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102646:	4b77      	ldr	r3, [pc, #476]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102648:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810264a:	4a76      	ldr	r2, [pc, #472]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810264c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102650:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102652:	e011      	b.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102658:	3308      	adds	r3, #8
 810265a:	2102      	movs	r1, #2
 810265c:	4618      	mov	r0, r3
 810265e:	f001 f807 	bl	8103670 <RCCEx_PLL2_Config>
 8102662:	4603      	mov	r3, r0
 8102664:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102668:	e006      	b.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810266a:	2301      	movs	r3, #1
 810266c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102670:	e002      	b.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102672:	bf00      	nop
 8102674:	e000      	b.n	8102678 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8102676:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102678:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810267c:	2b00      	cmp	r3, #0
 810267e:	d10a      	bne.n	8102696 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102680:	4b68      	ldr	r3, [pc, #416]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102682:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102684:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8102688:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810268c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810268e:	4a65      	ldr	r2, [pc, #404]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102690:	430b      	orrs	r3, r1
 8102692:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102694:	e003      	b.n	810269e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102696:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810269a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810269e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026a6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 81026aa:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 81026ae:	2300      	movs	r3, #0
 81026b0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81026b4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81026b8:	460b      	mov	r3, r1
 81026ba:	4313      	orrs	r3, r2
 81026bc:	d051      	beq.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81026be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026c2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81026c4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81026c8:	d035      	beq.n	8102736 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81026ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81026ce:	d82e      	bhi.n	810272e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81026d0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81026d4:	d031      	beq.n	810273a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81026d6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81026da:	d828      	bhi.n	810272e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81026dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81026e0:	d01a      	beq.n	8102718 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81026e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81026e6:	d822      	bhi.n	810272e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81026e8:	2b00      	cmp	r3, #0
 81026ea:	d003      	beq.n	81026f4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81026ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81026f0:	d007      	beq.n	8102702 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81026f2:	e01c      	b.n	810272e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81026f4:	4b4b      	ldr	r3, [pc, #300]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81026f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81026f8:	4a4a      	ldr	r2, [pc, #296]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81026fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81026fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102700:	e01c      	b.n	810273c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102706:	3308      	adds	r3, #8
 8102708:	2100      	movs	r1, #0
 810270a:	4618      	mov	r0, r3
 810270c:	f000 ffb0 	bl	8103670 <RCCEx_PLL2_Config>
 8102710:	4603      	mov	r3, r0
 8102712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102716:	e011      	b.n	810273c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810271c:	3328      	adds	r3, #40	@ 0x28
 810271e:	2100      	movs	r1, #0
 8102720:	4618      	mov	r0, r3
 8102722:	f001 f857 	bl	81037d4 <RCCEx_PLL3_Config>
 8102726:	4603      	mov	r3, r0
 8102728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810272c:	e006      	b.n	810273c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810272e:	2301      	movs	r3, #1
 8102730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102734:	e002      	b.n	810273c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102736:	bf00      	nop
 8102738:	e000      	b.n	810273c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810273a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810273c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102740:	2b00      	cmp	r3, #0
 8102742:	d10a      	bne.n	810275a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8102744:	4b37      	ldr	r3, [pc, #220]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102748:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 810274c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102750:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8102752:	4a34      	ldr	r2, [pc, #208]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102754:	430b      	orrs	r3, r1
 8102756:	6513      	str	r3, [r2, #80]	@ 0x50
 8102758:	e003      	b.n	8102762 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810275a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810275e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8102762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102766:	e9d3 2300 	ldrd	r2, r3, [r3]
 810276a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 810276e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8102772:	2300      	movs	r3, #0
 8102774:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8102778:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 810277c:	460b      	mov	r3, r1
 810277e:	4313      	orrs	r3, r2
 8102780:	d056      	beq.n	8102830 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8102782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102786:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8102788:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 810278c:	d033      	beq.n	81027f6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 810278e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8102792:	d82c      	bhi.n	81027ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102794:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8102798:	d02f      	beq.n	81027fa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 810279a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 810279e:	d826      	bhi.n	81027ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 81027a0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81027a4:	d02b      	beq.n	81027fe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 81027a6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 81027aa:	d820      	bhi.n	81027ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 81027ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81027b0:	d012      	beq.n	81027d8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81027b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 81027b6:	d81a      	bhi.n	81027ee <HAL_RCCEx_PeriphCLKConfig+0x592>
 81027b8:	2b00      	cmp	r3, #0
 81027ba:	d022      	beq.n	8102802 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81027bc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 81027c0:	d115      	bne.n	81027ee <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81027c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027c6:	3308      	adds	r3, #8
 81027c8:	2101      	movs	r1, #1
 81027ca:	4618      	mov	r0, r3
 81027cc:	f000 ff50 	bl	8103670 <RCCEx_PLL2_Config>
 81027d0:	4603      	mov	r3, r0
 81027d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81027d6:	e015      	b.n	8102804 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81027d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027dc:	3328      	adds	r3, #40	@ 0x28
 81027de:	2101      	movs	r1, #1
 81027e0:	4618      	mov	r0, r3
 81027e2:	f000 fff7 	bl	81037d4 <RCCEx_PLL3_Config>
 81027e6:	4603      	mov	r3, r0
 81027e8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81027ec:	e00a      	b.n	8102804 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81027ee:	2301      	movs	r3, #1
 81027f0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81027f4:	e006      	b.n	8102804 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81027f6:	bf00      	nop
 81027f8:	e004      	b.n	8102804 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81027fa:	bf00      	nop
 81027fc:	e002      	b.n	8102804 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81027fe:	bf00      	nop
 8102800:	e000      	b.n	8102804 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8102802:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102804:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102808:	2b00      	cmp	r3, #0
 810280a:	d10d      	bne.n	8102828 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 810280c:	4b05      	ldr	r3, [pc, #20]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810280e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102810:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8102814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102818:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 810281a:	4a02      	ldr	r2, [pc, #8]	@ (8102824 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810281c:	430b      	orrs	r3, r1
 810281e:	6513      	str	r3, [r2, #80]	@ 0x50
 8102820:	e006      	b.n	8102830 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8102822:	bf00      	nop
 8102824:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102828:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810282c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102830:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102838:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 810283c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8102840:	2300      	movs	r3, #0
 8102842:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8102846:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 810284a:	460b      	mov	r3, r1
 810284c:	4313      	orrs	r3, r2
 810284e:	d055      	beq.n	81028fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8102850:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102854:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8102858:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810285c:	d033      	beq.n	81028c6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 810285e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102862:	d82c      	bhi.n	81028be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102864:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102868:	d02f      	beq.n	81028ca <HAL_RCCEx_PeriphCLKConfig+0x66e>
 810286a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810286e:	d826      	bhi.n	81028be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102870:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102874:	d02b      	beq.n	81028ce <HAL_RCCEx_PeriphCLKConfig+0x672>
 8102876:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810287a:	d820      	bhi.n	81028be <HAL_RCCEx_PeriphCLKConfig+0x662>
 810287c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102880:	d012      	beq.n	81028a8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8102882:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102886:	d81a      	bhi.n	81028be <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102888:	2b00      	cmp	r3, #0
 810288a:	d022      	beq.n	81028d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 810288c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102890:	d115      	bne.n	81028be <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102896:	3308      	adds	r3, #8
 8102898:	2101      	movs	r1, #1
 810289a:	4618      	mov	r0, r3
 810289c:	f000 fee8 	bl	8103670 <RCCEx_PLL2_Config>
 81028a0:	4603      	mov	r3, r0
 81028a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81028a6:	e015      	b.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81028a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028ac:	3328      	adds	r3, #40	@ 0x28
 81028ae:	2101      	movs	r1, #1
 81028b0:	4618      	mov	r0, r3
 81028b2:	f000 ff8f 	bl	81037d4 <RCCEx_PLL3_Config>
 81028b6:	4603      	mov	r3, r0
 81028b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81028bc:	e00a      	b.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81028be:	2301      	movs	r3, #1
 81028c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81028c4:	e006      	b.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81028c6:	bf00      	nop
 81028c8:	e004      	b.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81028ca:	bf00      	nop
 81028cc:	e002      	b.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81028ce:	bf00      	nop
 81028d0:	e000      	b.n	81028d4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81028d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81028d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028d8:	2b00      	cmp	r3, #0
 81028da:	d10b      	bne.n	81028f4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81028dc:	4ba4      	ldr	r3, [pc, #656]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81028de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81028e0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81028e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 81028ec:	4aa0      	ldr	r2, [pc, #640]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81028ee:	430b      	orrs	r3, r1
 81028f0:	6593      	str	r3, [r2, #88]	@ 0x58
 81028f2:	e003      	b.n	81028fc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81028fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102904:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8102908:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 810290c:	2300      	movs	r3, #0
 810290e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8102912:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8102916:	460b      	mov	r3, r1
 8102918:	4313      	orrs	r3, r2
 810291a:	d037      	beq.n	810298c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 810291c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102920:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102922:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102926:	d00e      	beq.n	8102946 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8102928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 810292c:	d816      	bhi.n	810295c <HAL_RCCEx_PeriphCLKConfig+0x700>
 810292e:	2b00      	cmp	r3, #0
 8102930:	d018      	beq.n	8102964 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8102932:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102936:	d111      	bne.n	810295c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102938:	4b8d      	ldr	r3, [pc, #564]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810293a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810293c:	4a8c      	ldr	r2, [pc, #560]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810293e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102942:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102944:	e00f      	b.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102946:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810294a:	3308      	adds	r3, #8
 810294c:	2101      	movs	r1, #1
 810294e:	4618      	mov	r0, r3
 8102950:	f000 fe8e 	bl	8103670 <RCCEx_PLL2_Config>
 8102954:	4603      	mov	r3, r0
 8102956:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810295a:	e004      	b.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810295c:	2301      	movs	r3, #1
 810295e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102962:	e000      	b.n	8102966 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8102964:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810296a:	2b00      	cmp	r3, #0
 810296c:	d10a      	bne.n	8102984 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 810296e:	4b80      	ldr	r3, [pc, #512]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102970:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102972:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810297a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 810297c:	4a7c      	ldr	r2, [pc, #496]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810297e:	430b      	orrs	r3, r1
 8102980:	6513      	str	r3, [r2, #80]	@ 0x50
 8102982:	e003      	b.n	810298c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102988:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810298c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102990:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102994:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8102998:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 810299c:	2300      	movs	r3, #0
 810299e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 81029a2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 81029a6:	460b      	mov	r3, r1
 81029a8:	4313      	orrs	r3, r2
 81029aa:	d039      	beq.n	8102a20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81029ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 81029b2:	2b03      	cmp	r3, #3
 81029b4:	d81c      	bhi.n	81029f0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 81029b6:	a201      	add	r2, pc, #4	@ (adr r2, 81029bc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81029b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81029bc:	081029f9 	.word	0x081029f9
 81029c0:	081029cd 	.word	0x081029cd
 81029c4:	081029db 	.word	0x081029db
 81029c8:	081029f9 	.word	0x081029f9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81029cc:	4b68      	ldr	r3, [pc, #416]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81029d0:	4a67      	ldr	r2, [pc, #412]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81029d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81029d8:	e00f      	b.n	81029fa <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81029da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81029de:	3308      	adds	r3, #8
 81029e0:	2102      	movs	r1, #2
 81029e2:	4618      	mov	r0, r3
 81029e4:	f000 fe44 	bl	8103670 <RCCEx_PLL2_Config>
 81029e8:	4603      	mov	r3, r0
 81029ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81029ee:	e004      	b.n	81029fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81029f0:	2301      	movs	r3, #1
 81029f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81029f6:	e000      	b.n	81029fa <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81029f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81029fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81029fe:	2b00      	cmp	r3, #0
 8102a00:	d10a      	bne.n	8102a18 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8102a02:	4b5b      	ldr	r3, [pc, #364]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102a06:	f023 0103 	bic.w	r1, r3, #3
 8102a0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8102a10:	4a57      	ldr	r2, [pc, #348]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a12:	430b      	orrs	r3, r1
 8102a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8102a16:	e003      	b.n	8102a20 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a28:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8102a2c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8102a30:	2300      	movs	r3, #0
 8102a32:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8102a36:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8102a3a:	460b      	mov	r3, r1
 8102a3c:	4313      	orrs	r3, r2
 8102a3e:	f000 809f 	beq.w	8102b80 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8102a42:	4b4c      	ldr	r3, [pc, #304]	@ (8102b74 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102a44:	681b      	ldr	r3, [r3, #0]
 8102a46:	4a4b      	ldr	r2, [pc, #300]	@ (8102b74 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102a48:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8102a4c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102a4e:	f7fe fdcd 	bl	81015ec <HAL_GetTick>
 8102a52:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102a56:	e00b      	b.n	8102a70 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102a58:	f7fe fdc8 	bl	81015ec <HAL_GetTick>
 8102a5c:	4602      	mov	r2, r0
 8102a5e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8102a62:	1ad3      	subs	r3, r2, r3
 8102a64:	2b64      	cmp	r3, #100	@ 0x64
 8102a66:	d903      	bls.n	8102a70 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8102a68:	2303      	movs	r3, #3
 8102a6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102a6e:	e005      	b.n	8102a7c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102a70:	4b40      	ldr	r3, [pc, #256]	@ (8102b74 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102a72:	681b      	ldr	r3, [r3, #0]
 8102a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8102a78:	2b00      	cmp	r3, #0
 8102a7a:	d0ed      	beq.n	8102a58 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8102a7c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102a80:	2b00      	cmp	r3, #0
 8102a82:	d179      	bne.n	8102b78 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8102a84:	4b3a      	ldr	r3, [pc, #232]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a86:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8102a88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102a8c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102a90:	4053      	eors	r3, r2
 8102a92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102a96:	2b00      	cmp	r3, #0
 8102a98:	d015      	beq.n	8102ac6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102a9a:	4b35      	ldr	r3, [pc, #212]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102a9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8102aa2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8102aa6:	4b32      	ldr	r3, [pc, #200]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102aa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102aaa:	4a31      	ldr	r2, [pc, #196]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102aac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8102ab0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8102ab2:	4b2f      	ldr	r3, [pc, #188]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102ab4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102ab6:	4a2e      	ldr	r2, [pc, #184]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102ab8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8102abc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8102abe:	4a2c      	ldr	r2, [pc, #176]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102ac0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8102ac4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8102ac6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102aca:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8102ad2:	d118      	bne.n	8102b06 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8102ad4:	f7fe fd8a 	bl	81015ec <HAL_GetTick>
 8102ad8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102adc:	e00d      	b.n	8102afa <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8102ade:	f7fe fd85 	bl	81015ec <HAL_GetTick>
 8102ae2:	4602      	mov	r2, r0
 8102ae4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8102ae8:	1ad2      	subs	r2, r2, r3
 8102aea:	f241 3388 	movw	r3, #5000	@ 0x1388
 8102aee:	429a      	cmp	r2, r3
 8102af0:	d903      	bls.n	8102afa <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8102af2:	2303      	movs	r3, #3
 8102af4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8102af8:	e005      	b.n	8102b06 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8102afa:	4b1d      	ldr	r3, [pc, #116]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102afc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8102afe:	f003 0302 	and.w	r3, r3, #2
 8102b02:	2b00      	cmp	r3, #0
 8102b04:	d0eb      	beq.n	8102ade <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8102b06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b0a:	2b00      	cmp	r3, #0
 8102b0c:	d12b      	bne.n	8102b66 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102b0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b12:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102b16:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8102b1a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102b1e:	d110      	bne.n	8102b42 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8102b20:	4b13      	ldr	r3, [pc, #76]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102b22:	691b      	ldr	r3, [r3, #16]
 8102b24:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8102b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b2c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102b30:	091b      	lsrs	r3, r3, #4
 8102b32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8102b36:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8102b3a:	4a0d      	ldr	r2, [pc, #52]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102b3c:	430b      	orrs	r3, r1
 8102b3e:	6113      	str	r3, [r2, #16]
 8102b40:	e005      	b.n	8102b4e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8102b42:	4b0b      	ldr	r3, [pc, #44]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102b44:	691b      	ldr	r3, [r3, #16]
 8102b46:	4a0a      	ldr	r2, [pc, #40]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102b48:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8102b4c:	6113      	str	r3, [r2, #16]
 8102b4e:	4b08      	ldr	r3, [pc, #32]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102b50:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8102b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8102b5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102b5e:	4a04      	ldr	r2, [pc, #16]	@ (8102b70 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102b60:	430b      	orrs	r3, r1
 8102b62:	6713      	str	r3, [r2, #112]	@ 0x70
 8102b64:	e00c      	b.n	8102b80 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8102b66:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b6a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8102b6e:	e007      	b.n	8102b80 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8102b70:	58024400 	.word	0x58024400
 8102b74:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102b78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102b7c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102b80:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102b88:	f002 0301 	and.w	r3, r2, #1
 8102b8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8102b90:	2300      	movs	r3, #0
 8102b92:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8102b96:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8102b9a:	460b      	mov	r3, r1
 8102b9c:	4313      	orrs	r3, r2
 8102b9e:	f000 8089 	beq.w	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8102ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ba6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102ba8:	2b28      	cmp	r3, #40	@ 0x28
 8102baa:	d86b      	bhi.n	8102c84 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8102bac:	a201      	add	r2, pc, #4	@ (adr r2, 8102bb4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8102bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102bb2:	bf00      	nop
 8102bb4:	08102c8d 	.word	0x08102c8d
 8102bb8:	08102c85 	.word	0x08102c85
 8102bbc:	08102c85 	.word	0x08102c85
 8102bc0:	08102c85 	.word	0x08102c85
 8102bc4:	08102c85 	.word	0x08102c85
 8102bc8:	08102c85 	.word	0x08102c85
 8102bcc:	08102c85 	.word	0x08102c85
 8102bd0:	08102c85 	.word	0x08102c85
 8102bd4:	08102c59 	.word	0x08102c59
 8102bd8:	08102c85 	.word	0x08102c85
 8102bdc:	08102c85 	.word	0x08102c85
 8102be0:	08102c85 	.word	0x08102c85
 8102be4:	08102c85 	.word	0x08102c85
 8102be8:	08102c85 	.word	0x08102c85
 8102bec:	08102c85 	.word	0x08102c85
 8102bf0:	08102c85 	.word	0x08102c85
 8102bf4:	08102c6f 	.word	0x08102c6f
 8102bf8:	08102c85 	.word	0x08102c85
 8102bfc:	08102c85 	.word	0x08102c85
 8102c00:	08102c85 	.word	0x08102c85
 8102c04:	08102c85 	.word	0x08102c85
 8102c08:	08102c85 	.word	0x08102c85
 8102c0c:	08102c85 	.word	0x08102c85
 8102c10:	08102c85 	.word	0x08102c85
 8102c14:	08102c8d 	.word	0x08102c8d
 8102c18:	08102c85 	.word	0x08102c85
 8102c1c:	08102c85 	.word	0x08102c85
 8102c20:	08102c85 	.word	0x08102c85
 8102c24:	08102c85 	.word	0x08102c85
 8102c28:	08102c85 	.word	0x08102c85
 8102c2c:	08102c85 	.word	0x08102c85
 8102c30:	08102c85 	.word	0x08102c85
 8102c34:	08102c8d 	.word	0x08102c8d
 8102c38:	08102c85 	.word	0x08102c85
 8102c3c:	08102c85 	.word	0x08102c85
 8102c40:	08102c85 	.word	0x08102c85
 8102c44:	08102c85 	.word	0x08102c85
 8102c48:	08102c85 	.word	0x08102c85
 8102c4c:	08102c85 	.word	0x08102c85
 8102c50:	08102c85 	.word	0x08102c85
 8102c54:	08102c8d 	.word	0x08102c8d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102c58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c5c:	3308      	adds	r3, #8
 8102c5e:	2101      	movs	r1, #1
 8102c60:	4618      	mov	r0, r3
 8102c62:	f000 fd05 	bl	8103670 <RCCEx_PLL2_Config>
 8102c66:	4603      	mov	r3, r0
 8102c68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102c6c:	e00f      	b.n	8102c8e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102c6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102c72:	3328      	adds	r3, #40	@ 0x28
 8102c74:	2101      	movs	r1, #1
 8102c76:	4618      	mov	r0, r3
 8102c78:	f000 fdac 	bl	81037d4 <RCCEx_PLL3_Config>
 8102c7c:	4603      	mov	r3, r0
 8102c7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102c82:	e004      	b.n	8102c8e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c84:	2301      	movs	r3, #1
 8102c86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102c8a:	e000      	b.n	8102c8e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8102c8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102c92:	2b00      	cmp	r3, #0
 8102c94:	d10a      	bne.n	8102cac <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102c96:	4bbf      	ldr	r3, [pc, #764]	@ (8102f94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102c98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102c9a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8102c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ca2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8102ca4:	4abb      	ldr	r2, [pc, #748]	@ (8102f94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102ca6:	430b      	orrs	r3, r1
 8102ca8:	6553      	str	r3, [r2, #84]	@ 0x54
 8102caa:	e003      	b.n	8102cb4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102cb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102cbc:	f002 0302 	and.w	r3, r2, #2
 8102cc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8102cc4:	2300      	movs	r3, #0
 8102cc6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8102cca:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8102cce:	460b      	mov	r3, r1
 8102cd0:	4313      	orrs	r3, r2
 8102cd2:	d041      	beq.n	8102d58 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8102cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102cd8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102cda:	2b05      	cmp	r3, #5
 8102cdc:	d824      	bhi.n	8102d28 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8102cde:	a201      	add	r2, pc, #4	@ (adr r2, 8102ce4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8102ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102ce4:	08102d31 	.word	0x08102d31
 8102ce8:	08102cfd 	.word	0x08102cfd
 8102cec:	08102d13 	.word	0x08102d13
 8102cf0:	08102d31 	.word	0x08102d31
 8102cf4:	08102d31 	.word	0x08102d31
 8102cf8:	08102d31 	.word	0x08102d31
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102cfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d00:	3308      	adds	r3, #8
 8102d02:	2101      	movs	r1, #1
 8102d04:	4618      	mov	r0, r3
 8102d06:	f000 fcb3 	bl	8103670 <RCCEx_PLL2_Config>
 8102d0a:	4603      	mov	r3, r0
 8102d0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102d10:	e00f      	b.n	8102d32 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102d12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d16:	3328      	adds	r3, #40	@ 0x28
 8102d18:	2101      	movs	r1, #1
 8102d1a:	4618      	mov	r0, r3
 8102d1c:	f000 fd5a 	bl	81037d4 <RCCEx_PLL3_Config>
 8102d20:	4603      	mov	r3, r0
 8102d22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102d26:	e004      	b.n	8102d32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102d28:	2301      	movs	r3, #1
 8102d2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102d2e:	e000      	b.n	8102d32 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8102d30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d36:	2b00      	cmp	r3, #0
 8102d38:	d10a      	bne.n	8102d50 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102d3a:	4b96      	ldr	r3, [pc, #600]	@ (8102f94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102d3e:	f023 0107 	bic.w	r1, r3, #7
 8102d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102d48:	4a92      	ldr	r2, [pc, #584]	@ (8102f94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102d4a:	430b      	orrs	r3, r1
 8102d4c:	6553      	str	r3, [r2, #84]	@ 0x54
 8102d4e:	e003      	b.n	8102d58 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102d50:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102d54:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d60:	f002 0304 	and.w	r3, r2, #4
 8102d64:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8102d68:	2300      	movs	r3, #0
 8102d6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8102d6e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8102d72:	460b      	mov	r3, r1
 8102d74:	4313      	orrs	r3, r2
 8102d76:	d044      	beq.n	8102e02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102d7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102d80:	2b05      	cmp	r3, #5
 8102d82:	d825      	bhi.n	8102dd0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8102d84:	a201      	add	r2, pc, #4	@ (adr r2, 8102d8c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8102d86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102d8a:	bf00      	nop
 8102d8c:	08102dd9 	.word	0x08102dd9
 8102d90:	08102da5 	.word	0x08102da5
 8102d94:	08102dbb 	.word	0x08102dbb
 8102d98:	08102dd9 	.word	0x08102dd9
 8102d9c:	08102dd9 	.word	0x08102dd9
 8102da0:	08102dd9 	.word	0x08102dd9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102da4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102da8:	3308      	adds	r3, #8
 8102daa:	2101      	movs	r1, #1
 8102dac:	4618      	mov	r0, r3
 8102dae:	f000 fc5f 	bl	8103670 <RCCEx_PLL2_Config>
 8102db2:	4603      	mov	r3, r0
 8102db4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102db8:	e00f      	b.n	8102dda <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102dba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dbe:	3328      	adds	r3, #40	@ 0x28
 8102dc0:	2101      	movs	r1, #1
 8102dc2:	4618      	mov	r0, r3
 8102dc4:	f000 fd06 	bl	81037d4 <RCCEx_PLL3_Config>
 8102dc8:	4603      	mov	r3, r0
 8102dca:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102dce:	e004      	b.n	8102dda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102dd0:	2301      	movs	r3, #1
 8102dd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102dd6:	e000      	b.n	8102dda <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8102dd8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102dda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102dde:	2b00      	cmp	r3, #0
 8102de0:	d10b      	bne.n	8102dfa <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102de2:	4b6c      	ldr	r3, [pc, #432]	@ (8102f94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102de4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102de6:	f023 0107 	bic.w	r1, r3, #7
 8102dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102dee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102df2:	4a68      	ldr	r2, [pc, #416]	@ (8102f94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102df4:	430b      	orrs	r3, r1
 8102df6:	6593      	str	r3, [r2, #88]	@ 0x58
 8102df8:	e003      	b.n	8102e02 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102dfa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102dfe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102e0a:	f002 0320 	and.w	r3, r2, #32
 8102e0e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8102e12:	2300      	movs	r3, #0
 8102e14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8102e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8102e1c:	460b      	mov	r3, r1
 8102e1e:	4313      	orrs	r3, r2
 8102e20:	d055      	beq.n	8102ece <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102e2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102e2e:	d033      	beq.n	8102e98 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8102e30:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102e34:	d82c      	bhi.n	8102e90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102e36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102e3a:	d02f      	beq.n	8102e9c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8102e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102e40:	d826      	bhi.n	8102e90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102e42:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102e46:	d02b      	beq.n	8102ea0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8102e48:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102e4c:	d820      	bhi.n	8102e90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102e4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102e52:	d012      	beq.n	8102e7a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8102e54:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102e58:	d81a      	bhi.n	8102e90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102e5a:	2b00      	cmp	r3, #0
 8102e5c:	d022      	beq.n	8102ea4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8102e5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102e62:	d115      	bne.n	8102e90 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102e64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e68:	3308      	adds	r3, #8
 8102e6a:	2100      	movs	r1, #0
 8102e6c:	4618      	mov	r0, r3
 8102e6e:	f000 fbff 	bl	8103670 <RCCEx_PLL2_Config>
 8102e72:	4603      	mov	r3, r0
 8102e74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102e78:	e015      	b.n	8102ea6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102e7e:	3328      	adds	r3, #40	@ 0x28
 8102e80:	2102      	movs	r1, #2
 8102e82:	4618      	mov	r0, r3
 8102e84:	f000 fca6 	bl	81037d4 <RCCEx_PLL3_Config>
 8102e88:	4603      	mov	r3, r0
 8102e8a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102e8e:	e00a      	b.n	8102ea6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102e90:	2301      	movs	r3, #1
 8102e92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102e96:	e006      	b.n	8102ea6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102e98:	bf00      	nop
 8102e9a:	e004      	b.n	8102ea6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102e9c:	bf00      	nop
 8102e9e:	e002      	b.n	8102ea6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102ea0:	bf00      	nop
 8102ea2:	e000      	b.n	8102ea6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102ea4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102ea6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102eaa:	2b00      	cmp	r3, #0
 8102eac:	d10b      	bne.n	8102ec6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102eae:	4b39      	ldr	r3, [pc, #228]	@ (8102f94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102eb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102eb2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8102eb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8102ebe:	4a35      	ldr	r2, [pc, #212]	@ (8102f94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102ec0:	430b      	orrs	r3, r1
 8102ec2:	6553      	str	r3, [r2, #84]	@ 0x54
 8102ec4:	e003      	b.n	8102ece <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ec6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102eca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102ece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ed6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8102eda:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8102ede:	2300      	movs	r3, #0
 8102ee0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8102ee4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8102ee8:	460b      	mov	r3, r1
 8102eea:	4313      	orrs	r3, r2
 8102eec:	d058      	beq.n	8102fa0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8102eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102ef2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102ef6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102efa:	d033      	beq.n	8102f64 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8102efc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8102f00:	d82c      	bhi.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102f02:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102f06:	d02f      	beq.n	8102f68 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8102f08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102f0c:	d826      	bhi.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102f0e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102f12:	d02b      	beq.n	8102f6c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8102f14:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102f18:	d820      	bhi.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102f1a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102f1e:	d012      	beq.n	8102f46 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8102f20:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102f24:	d81a      	bhi.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102f26:	2b00      	cmp	r3, #0
 8102f28:	d022      	beq.n	8102f70 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8102f2a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8102f2e:	d115      	bne.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102f30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f34:	3308      	adds	r3, #8
 8102f36:	2100      	movs	r1, #0
 8102f38:	4618      	mov	r0, r3
 8102f3a:	f000 fb99 	bl	8103670 <RCCEx_PLL2_Config>
 8102f3e:	4603      	mov	r3, r0
 8102f40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102f44:	e015      	b.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102f46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f4a:	3328      	adds	r3, #40	@ 0x28
 8102f4c:	2102      	movs	r1, #2
 8102f4e:	4618      	mov	r0, r3
 8102f50:	f000 fc40 	bl	81037d4 <RCCEx_PLL3_Config>
 8102f54:	4603      	mov	r3, r0
 8102f56:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102f5a:	e00a      	b.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102f5c:	2301      	movs	r3, #1
 8102f5e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102f62:	e006      	b.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102f64:	bf00      	nop
 8102f66:	e004      	b.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102f68:	bf00      	nop
 8102f6a:	e002      	b.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102f6c:	bf00      	nop
 8102f6e:	e000      	b.n	8102f72 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102f70:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f76:	2b00      	cmp	r3, #0
 8102f78:	d10e      	bne.n	8102f98 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102f7a:	4b06      	ldr	r3, [pc, #24]	@ (8102f94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102f7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102f7e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8102f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102f86:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8102f8a:	4a02      	ldr	r2, [pc, #8]	@ (8102f94 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102f8c:	430b      	orrs	r3, r1
 8102f8e:	6593      	str	r3, [r2, #88]	@ 0x58
 8102f90:	e006      	b.n	8102fa0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8102f92:	bf00      	nop
 8102f94:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102f9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102fa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fa8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8102fac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8102fb0:	2300      	movs	r3, #0
 8102fb2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8102fb6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8102fba:	460b      	mov	r3, r1
 8102fbc:	4313      	orrs	r3, r2
 8102fbe:	d055      	beq.n	810306c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8102fc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102fc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8102fc8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102fcc:	d033      	beq.n	8103036 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8102fce:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8102fd2:	d82c      	bhi.n	810302e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102fd4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102fd8:	d02f      	beq.n	810303a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8102fda:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8102fde:	d826      	bhi.n	810302e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102fe0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102fe4:	d02b      	beq.n	810303e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8102fe6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8102fea:	d820      	bhi.n	810302e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102fec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102ff0:	d012      	beq.n	8103018 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8102ff2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8102ff6:	d81a      	bhi.n	810302e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102ff8:	2b00      	cmp	r3, #0
 8102ffa:	d022      	beq.n	8103042 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8102ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8103000:	d115      	bne.n	810302e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103006:	3308      	adds	r3, #8
 8103008:	2100      	movs	r1, #0
 810300a:	4618      	mov	r0, r3
 810300c:	f000 fb30 	bl	8103670 <RCCEx_PLL2_Config>
 8103010:	4603      	mov	r3, r0
 8103012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8103016:	e015      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103018:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810301c:	3328      	adds	r3, #40	@ 0x28
 810301e:	2102      	movs	r1, #2
 8103020:	4618      	mov	r0, r3
 8103022:	f000 fbd7 	bl	81037d4 <RCCEx_PLL3_Config>
 8103026:	4603      	mov	r3, r0
 8103028:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810302c:	e00a      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810302e:	2301      	movs	r3, #1
 8103030:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103034:	e006      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103036:	bf00      	nop
 8103038:	e004      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810303a:	bf00      	nop
 810303c:	e002      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810303e:	bf00      	nop
 8103040:	e000      	b.n	8103044 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8103042:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103044:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103048:	2b00      	cmp	r3, #0
 810304a:	d10b      	bne.n	8103064 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810304c:	4ba1      	ldr	r3, [pc, #644]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103050:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8103054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103058:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810305c:	4a9d      	ldr	r2, [pc, #628]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810305e:	430b      	orrs	r3, r1
 8103060:	6593      	str	r3, [r2, #88]	@ 0x58
 8103062:	e003      	b.n	810306c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103064:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103068:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810306c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103074:	f002 0308 	and.w	r3, r2, #8
 8103078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810307c:	2300      	movs	r3, #0
 810307e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8103082:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8103086:	460b      	mov	r3, r1
 8103088:	4313      	orrs	r3, r2
 810308a:	d01e      	beq.n	81030ca <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810308c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103090:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8103094:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103098:	d10c      	bne.n	81030b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810309a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810309e:	3328      	adds	r3, #40	@ 0x28
 81030a0:	2102      	movs	r1, #2
 81030a2:	4618      	mov	r0, r3
 81030a4:	f000 fb96 	bl	81037d4 <RCCEx_PLL3_Config>
 81030a8:	4603      	mov	r3, r0
 81030aa:	2b00      	cmp	r3, #0
 81030ac:	d002      	beq.n	81030b4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 81030ae:	2301      	movs	r3, #1
 81030b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81030b4:	4b87      	ldr	r3, [pc, #540]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81030b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81030b8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81030bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81030c4:	4a83      	ldr	r2, [pc, #524]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81030c6:	430b      	orrs	r3, r1
 81030c8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81030ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030d2:	f002 0310 	and.w	r3, r2, #16
 81030d6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81030da:	2300      	movs	r3, #0
 81030dc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81030e0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81030e4:	460b      	mov	r3, r1
 81030e6:	4313      	orrs	r3, r2
 81030e8:	d01e      	beq.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81030ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81030f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81030f6:	d10c      	bne.n	8103112 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81030f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81030fc:	3328      	adds	r3, #40	@ 0x28
 81030fe:	2102      	movs	r1, #2
 8103100:	4618      	mov	r0, r3
 8103102:	f000 fb67 	bl	81037d4 <RCCEx_PLL3_Config>
 8103106:	4603      	mov	r3, r0
 8103108:	2b00      	cmp	r3, #0
 810310a:	d002      	beq.n	8103112 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 810310c:	2301      	movs	r3, #1
 810310e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8103112:	4b70      	ldr	r3, [pc, #448]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103114:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103116:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810311a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810311e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8103122:	4a6c      	ldr	r2, [pc, #432]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103124:	430b      	orrs	r3, r1
 8103126:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103128:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810312c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103130:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8103134:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8103138:	2300      	movs	r3, #0
 810313a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810313e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8103142:	460b      	mov	r3, r1
 8103144:	4313      	orrs	r3, r2
 8103146:	d03e      	beq.n	81031c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810314c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8103150:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8103154:	d022      	beq.n	810319c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8103156:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810315a:	d81b      	bhi.n	8103194 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 810315c:	2b00      	cmp	r3, #0
 810315e:	d003      	beq.n	8103168 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8103160:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103164:	d00b      	beq.n	810317e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8103166:	e015      	b.n	8103194 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810316c:	3308      	adds	r3, #8
 810316e:	2100      	movs	r1, #0
 8103170:	4618      	mov	r0, r3
 8103172:	f000 fa7d 	bl	8103670 <RCCEx_PLL2_Config>
 8103176:	4603      	mov	r3, r0
 8103178:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810317c:	e00f      	b.n	810319e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810317e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103182:	3328      	adds	r3, #40	@ 0x28
 8103184:	2102      	movs	r1, #2
 8103186:	4618      	mov	r0, r3
 8103188:	f000 fb24 	bl	81037d4 <RCCEx_PLL3_Config>
 810318c:	4603      	mov	r3, r0
 810318e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103192:	e004      	b.n	810319e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103194:	2301      	movs	r3, #1
 8103196:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810319a:	e000      	b.n	810319e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810319c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810319e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81031a2:	2b00      	cmp	r3, #0
 81031a4:	d10b      	bne.n	81031be <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81031a6:	4b4b      	ldr	r3, [pc, #300]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81031a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81031aa:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 81031ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81031b6:	4a47      	ldr	r2, [pc, #284]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81031b8:	430b      	orrs	r3, r1
 81031ba:	6593      	str	r3, [r2, #88]	@ 0x58
 81031bc:	e003      	b.n	81031c6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031be:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81031c2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81031c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031ce:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81031d2:	67bb      	str	r3, [r7, #120]	@ 0x78
 81031d4:	2300      	movs	r3, #0
 81031d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81031d8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81031dc:	460b      	mov	r3, r1
 81031de:	4313      	orrs	r3, r2
 81031e0:	d03b      	beq.n	810325a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81031e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81031e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81031ea:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81031ee:	d01f      	beq.n	8103230 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81031f0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81031f4:	d818      	bhi.n	8103228 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81031f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81031fa:	d003      	beq.n	8103204 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81031fc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8103200:	d007      	beq.n	8103212 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8103202:	e011      	b.n	8103228 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103204:	4b33      	ldr	r3, [pc, #204]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103206:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103208:	4a32      	ldr	r2, [pc, #200]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810320a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 810320e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103210:	e00f      	b.n	8103232 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8103212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103216:	3328      	adds	r3, #40	@ 0x28
 8103218:	2101      	movs	r1, #1
 810321a:	4618      	mov	r0, r3
 810321c:	f000 fada 	bl	81037d4 <RCCEx_PLL3_Config>
 8103220:	4603      	mov	r3, r0
 8103222:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8103226:	e004      	b.n	8103232 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103228:	2301      	movs	r3, #1
 810322a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810322e:	e000      	b.n	8103232 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8103230:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103232:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103236:	2b00      	cmp	r3, #0
 8103238:	d10b      	bne.n	8103252 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810323a:	4b26      	ldr	r3, [pc, #152]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810323c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810323e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8103242:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103246:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810324a:	4a22      	ldr	r2, [pc, #136]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810324c:	430b      	orrs	r3, r1
 810324e:	6553      	str	r3, [r2, #84]	@ 0x54
 8103250:	e003      	b.n	810325a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103252:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103256:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810325a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810325e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103262:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8103266:	673b      	str	r3, [r7, #112]	@ 0x70
 8103268:	2300      	movs	r3, #0
 810326a:	677b      	str	r3, [r7, #116]	@ 0x74
 810326c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8103270:	460b      	mov	r3, r1
 8103272:	4313      	orrs	r3, r2
 8103274:	d034      	beq.n	81032e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8103276:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810327a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810327c:	2b00      	cmp	r3, #0
 810327e:	d003      	beq.n	8103288 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8103280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103284:	d007      	beq.n	8103296 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8103286:	e011      	b.n	81032ac <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103288:	4b12      	ldr	r3, [pc, #72]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810328a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810328c:	4a11      	ldr	r2, [pc, #68]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810328e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103292:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8103294:	e00e      	b.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103296:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810329a:	3308      	adds	r3, #8
 810329c:	2102      	movs	r1, #2
 810329e:	4618      	mov	r0, r3
 81032a0:	f000 f9e6 	bl	8103670 <RCCEx_PLL2_Config>
 81032a4:	4603      	mov	r3, r0
 81032a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81032aa:	e003      	b.n	81032b4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81032ac:	2301      	movs	r3, #1
 81032ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81032b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81032b4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81032b8:	2b00      	cmp	r3, #0
 81032ba:	d10d      	bne.n	81032d8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81032bc:	4b05      	ldr	r3, [pc, #20]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81032be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81032c0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81032c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81032ca:	4a02      	ldr	r2, [pc, #8]	@ (81032d4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81032cc:	430b      	orrs	r3, r1
 81032ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81032d0:	e006      	b.n	81032e0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81032d2:	bf00      	nop
 81032d4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81032d8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81032dc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81032e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81032e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032e8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81032ec:	66bb      	str	r3, [r7, #104]	@ 0x68
 81032ee:	2300      	movs	r3, #0
 81032f0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81032f2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81032f6:	460b      	mov	r3, r1
 81032f8:	4313      	orrs	r3, r2
 81032fa:	d00c      	beq.n	8103316 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81032fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103300:	3328      	adds	r3, #40	@ 0x28
 8103302:	2102      	movs	r1, #2
 8103304:	4618      	mov	r0, r3
 8103306:	f000 fa65 	bl	81037d4 <RCCEx_PLL3_Config>
 810330a:	4603      	mov	r3, r0
 810330c:	2b00      	cmp	r3, #0
 810330e:	d002      	beq.n	8103316 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8103310:	2301      	movs	r3, #1
 8103312:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8103316:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810331a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810331e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8103322:	663b      	str	r3, [r7, #96]	@ 0x60
 8103324:	2300      	movs	r3, #0
 8103326:	667b      	str	r3, [r7, #100]	@ 0x64
 8103328:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810332c:	460b      	mov	r3, r1
 810332e:	4313      	orrs	r3, r2
 8103330:	d038      	beq.n	81033a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8103332:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103336:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810333a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810333e:	d018      	beq.n	8103372 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8103340:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8103344:	d811      	bhi.n	810336a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8103346:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810334a:	d014      	beq.n	8103376 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 810334c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8103350:	d80b      	bhi.n	810336a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8103352:	2b00      	cmp	r3, #0
 8103354:	d011      	beq.n	810337a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8103356:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810335a:	d106      	bne.n	810336a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810335c:	4bc3      	ldr	r3, [pc, #780]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103360:	4ac2      	ldr	r2, [pc, #776]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103362:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8103366:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103368:	e008      	b.n	810337c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810336a:	2301      	movs	r3, #1
 810336c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8103370:	e004      	b.n	810337c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103372:	bf00      	nop
 8103374:	e002      	b.n	810337c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103376:	bf00      	nop
 8103378:	e000      	b.n	810337c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810337a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810337c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103380:	2b00      	cmp	r3, #0
 8103382:	d10b      	bne.n	810339c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8103384:	4bb9      	ldr	r3, [pc, #740]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103386:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103388:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810338c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103390:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8103394:	4ab5      	ldr	r2, [pc, #724]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103396:	430b      	orrs	r3, r1
 8103398:	6553      	str	r3, [r2, #84]	@ 0x54
 810339a:	e003      	b.n	81033a4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810339c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81033a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 81033a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033ac:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81033b0:	65bb      	str	r3, [r7, #88]	@ 0x58
 81033b2:	2300      	movs	r3, #0
 81033b4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81033b6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81033ba:	460b      	mov	r3, r1
 81033bc:	4313      	orrs	r3, r2
 81033be:	d009      	beq.n	81033d4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81033c0:	4baa      	ldr	r3, [pc, #680]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81033c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81033c4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81033c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81033ce:	4aa7      	ldr	r2, [pc, #668]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81033d0:	430b      	orrs	r3, r1
 81033d2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81033d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033dc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81033e0:	653b      	str	r3, [r7, #80]	@ 0x50
 81033e2:	2300      	movs	r3, #0
 81033e4:	657b      	str	r3, [r7, #84]	@ 0x54
 81033e6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81033ea:	460b      	mov	r3, r1
 81033ec:	4313      	orrs	r3, r2
 81033ee:	d00a      	beq.n	8103406 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81033f0:	4b9e      	ldr	r3, [pc, #632]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81033f2:	691b      	ldr	r3, [r3, #16]
 81033f4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81033fc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8103400:	4a9a      	ldr	r2, [pc, #616]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103402:	430b      	orrs	r3, r1
 8103404:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8103406:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810340a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810340e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8103412:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103414:	2300      	movs	r3, #0
 8103416:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103418:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810341c:	460b      	mov	r3, r1
 810341e:	4313      	orrs	r3, r2
 8103420:	d009      	beq.n	8103436 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8103422:	4b92      	ldr	r3, [pc, #584]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103424:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8103426:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810342a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810342e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103430:	4a8e      	ldr	r2, [pc, #568]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103432:	430b      	orrs	r3, r1
 8103434:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8103436:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810343a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810343e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8103442:	643b      	str	r3, [r7, #64]	@ 0x40
 8103444:	2300      	movs	r3, #0
 8103446:	647b      	str	r3, [r7, #68]	@ 0x44
 8103448:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810344c:	460b      	mov	r3, r1
 810344e:	4313      	orrs	r3, r2
 8103450:	d00e      	beq.n	8103470 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8103452:	4b86      	ldr	r3, [pc, #536]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103454:	691b      	ldr	r3, [r3, #16]
 8103456:	4a85      	ldr	r2, [pc, #532]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103458:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810345c:	6113      	str	r3, [r2, #16]
 810345e:	4b83      	ldr	r3, [pc, #524]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103460:	6919      	ldr	r1, [r3, #16]
 8103462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103466:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810346a:	4a80      	ldr	r2, [pc, #512]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810346c:	430b      	orrs	r3, r1
 810346e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103470:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103478:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810347c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810347e:	2300      	movs	r3, #0
 8103480:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8103482:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8103486:	460b      	mov	r3, r1
 8103488:	4313      	orrs	r3, r2
 810348a:	d009      	beq.n	81034a0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810348c:	4b77      	ldr	r3, [pc, #476]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810348e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8103490:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8103494:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103498:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810349a:	4a74      	ldr	r2, [pc, #464]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810349c:	430b      	orrs	r3, r1
 810349e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 81034a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81034a8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 81034ac:	633b      	str	r3, [r7, #48]	@ 0x30
 81034ae:	2300      	movs	r3, #0
 81034b0:	637b      	str	r3, [r7, #52]	@ 0x34
 81034b2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81034b6:	460b      	mov	r3, r1
 81034b8:	4313      	orrs	r3, r2
 81034ba:	d00a      	beq.n	81034d2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81034bc:	4b6b      	ldr	r3, [pc, #428]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81034be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81034c0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81034c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81034cc:	4a67      	ldr	r2, [pc, #412]	@ (810366c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81034ce:	430b      	orrs	r3, r1
 81034d0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81034d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81034da:	2100      	movs	r1, #0
 81034dc:	62b9      	str	r1, [r7, #40]	@ 0x28
 81034de:	f003 0301 	and.w	r3, r3, #1
 81034e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81034e4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81034e8:	460b      	mov	r3, r1
 81034ea:	4313      	orrs	r3, r2
 81034ec:	d011      	beq.n	8103512 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81034ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81034f2:	3308      	adds	r3, #8
 81034f4:	2100      	movs	r1, #0
 81034f6:	4618      	mov	r0, r3
 81034f8:	f000 f8ba 	bl	8103670 <RCCEx_PLL2_Config>
 81034fc:	4603      	mov	r3, r0
 81034fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103502:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103506:	2b00      	cmp	r3, #0
 8103508:	d003      	beq.n	8103512 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810350a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810350e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8103512:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103516:	e9d3 2300 	ldrd	r2, r3, [r3]
 810351a:	2100      	movs	r1, #0
 810351c:	6239      	str	r1, [r7, #32]
 810351e:	f003 0302 	and.w	r3, r3, #2
 8103522:	627b      	str	r3, [r7, #36]	@ 0x24
 8103524:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8103528:	460b      	mov	r3, r1
 810352a:	4313      	orrs	r3, r2
 810352c:	d011      	beq.n	8103552 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810352e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103532:	3308      	adds	r3, #8
 8103534:	2101      	movs	r1, #1
 8103536:	4618      	mov	r0, r3
 8103538:	f000 f89a 	bl	8103670 <RCCEx_PLL2_Config>
 810353c:	4603      	mov	r3, r0
 810353e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103546:	2b00      	cmp	r3, #0
 8103548:	d003      	beq.n	8103552 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810354a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810354e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8103552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103556:	e9d3 2300 	ldrd	r2, r3, [r3]
 810355a:	2100      	movs	r1, #0
 810355c:	61b9      	str	r1, [r7, #24]
 810355e:	f003 0304 	and.w	r3, r3, #4
 8103562:	61fb      	str	r3, [r7, #28]
 8103564:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8103568:	460b      	mov	r3, r1
 810356a:	4313      	orrs	r3, r2
 810356c:	d011      	beq.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810356e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103572:	3308      	adds	r3, #8
 8103574:	2102      	movs	r1, #2
 8103576:	4618      	mov	r0, r3
 8103578:	f000 f87a 	bl	8103670 <RCCEx_PLL2_Config>
 810357c:	4603      	mov	r3, r0
 810357e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103582:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103586:	2b00      	cmp	r3, #0
 8103588:	d003      	beq.n	8103592 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810358a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810358e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8103592:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103596:	e9d3 2300 	ldrd	r2, r3, [r3]
 810359a:	2100      	movs	r1, #0
 810359c:	6139      	str	r1, [r7, #16]
 810359e:	f003 0308 	and.w	r3, r3, #8
 81035a2:	617b      	str	r3, [r7, #20]
 81035a4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81035a8:	460b      	mov	r3, r1
 81035aa:	4313      	orrs	r3, r2
 81035ac:	d011      	beq.n	81035d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81035ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035b2:	3328      	adds	r3, #40	@ 0x28
 81035b4:	2100      	movs	r1, #0
 81035b6:	4618      	mov	r0, r3
 81035b8:	f000 f90c 	bl	81037d4 <RCCEx_PLL3_Config>
 81035bc:	4603      	mov	r3, r0
 81035be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81035c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81035c6:	2b00      	cmp	r3, #0
 81035c8:	d003      	beq.n	81035d2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81035ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81035ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81035d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81035da:	2100      	movs	r1, #0
 81035dc:	60b9      	str	r1, [r7, #8]
 81035de:	f003 0310 	and.w	r3, r3, #16
 81035e2:	60fb      	str	r3, [r7, #12]
 81035e4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81035e8:	460b      	mov	r3, r1
 81035ea:	4313      	orrs	r3, r2
 81035ec:	d011      	beq.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81035ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81035f2:	3328      	adds	r3, #40	@ 0x28
 81035f4:	2101      	movs	r1, #1
 81035f6:	4618      	mov	r0, r3
 81035f8:	f000 f8ec 	bl	81037d4 <RCCEx_PLL3_Config>
 81035fc:	4603      	mov	r3, r0
 81035fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103602:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103606:	2b00      	cmp	r3, #0
 8103608:	d003      	beq.n	8103612 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810360a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810360e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8103612:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103616:	e9d3 2300 	ldrd	r2, r3, [r3]
 810361a:	2100      	movs	r1, #0
 810361c:	6039      	str	r1, [r7, #0]
 810361e:	f003 0320 	and.w	r3, r3, #32
 8103622:	607b      	str	r3, [r7, #4]
 8103624:	e9d7 1200 	ldrd	r1, r2, [r7]
 8103628:	460b      	mov	r3, r1
 810362a:	4313      	orrs	r3, r2
 810362c:	d011      	beq.n	8103652 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810362e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8103632:	3328      	adds	r3, #40	@ 0x28
 8103634:	2102      	movs	r1, #2
 8103636:	4618      	mov	r0, r3
 8103638:	f000 f8cc 	bl	81037d4 <RCCEx_PLL3_Config>
 810363c:	4603      	mov	r3, r0
 810363e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8103642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8103646:	2b00      	cmp	r3, #0
 8103648:	d003      	beq.n	8103652 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810364a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810364e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8103652:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8103656:	2b00      	cmp	r3, #0
 8103658:	d101      	bne.n	810365e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810365a:	2300      	movs	r3, #0
 810365c:	e000      	b.n	8103660 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810365e:	2301      	movs	r3, #1
}
 8103660:	4618      	mov	r0, r3
 8103662:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8103666:	46bd      	mov	sp, r7
 8103668:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810366c:	58024400 	.word	0x58024400

08103670 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103670:	b580      	push	{r7, lr}
 8103672:	b084      	sub	sp, #16
 8103674:	af00      	add	r7, sp, #0
 8103676:	6078      	str	r0, [r7, #4]
 8103678:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810367a:	2300      	movs	r3, #0
 810367c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810367e:	4b54      	ldr	r3, [pc, #336]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103680:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103682:	f003 0303 	and.w	r3, r3, #3
 8103686:	2b03      	cmp	r3, #3
 8103688:	d101      	bne.n	810368e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 810368a:	2301      	movs	r3, #1
 810368c:	e09b      	b.n	81037c6 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 810368e:	4b50      	ldr	r3, [pc, #320]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103690:	681b      	ldr	r3, [r3, #0]
 8103692:	4a4f      	ldr	r2, [pc, #316]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103694:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8103698:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810369a:	f7fd ffa7 	bl	81015ec <HAL_GetTick>
 810369e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81036a0:	e008      	b.n	81036b4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81036a2:	f7fd ffa3 	bl	81015ec <HAL_GetTick>
 81036a6:	4602      	mov	r2, r0
 81036a8:	68bb      	ldr	r3, [r7, #8]
 81036aa:	1ad3      	subs	r3, r2, r3
 81036ac:	2b02      	cmp	r3, #2
 81036ae:	d901      	bls.n	81036b4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 81036b0:	2303      	movs	r3, #3
 81036b2:	e088      	b.n	81037c6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 81036b4:	4b46      	ldr	r3, [pc, #280]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 81036b6:	681b      	ldr	r3, [r3, #0]
 81036b8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81036bc:	2b00      	cmp	r3, #0
 81036be:	d1f0      	bne.n	81036a2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 81036c0:	4b43      	ldr	r3, [pc, #268]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 81036c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81036c4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 81036c8:	687b      	ldr	r3, [r7, #4]
 81036ca:	681b      	ldr	r3, [r3, #0]
 81036cc:	031b      	lsls	r3, r3, #12
 81036ce:	4940      	ldr	r1, [pc, #256]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 81036d0:	4313      	orrs	r3, r2
 81036d2:	628b      	str	r3, [r1, #40]	@ 0x28
 81036d4:	687b      	ldr	r3, [r7, #4]
 81036d6:	685b      	ldr	r3, [r3, #4]
 81036d8:	3b01      	subs	r3, #1
 81036da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81036de:	687b      	ldr	r3, [r7, #4]
 81036e0:	689b      	ldr	r3, [r3, #8]
 81036e2:	3b01      	subs	r3, #1
 81036e4:	025b      	lsls	r3, r3, #9
 81036e6:	b29b      	uxth	r3, r3
 81036e8:	431a      	orrs	r2, r3
 81036ea:	687b      	ldr	r3, [r7, #4]
 81036ec:	68db      	ldr	r3, [r3, #12]
 81036ee:	3b01      	subs	r3, #1
 81036f0:	041b      	lsls	r3, r3, #16
 81036f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81036f6:	431a      	orrs	r2, r3
 81036f8:	687b      	ldr	r3, [r7, #4]
 81036fa:	691b      	ldr	r3, [r3, #16]
 81036fc:	3b01      	subs	r3, #1
 81036fe:	061b      	lsls	r3, r3, #24
 8103700:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103704:	4932      	ldr	r1, [pc, #200]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103706:	4313      	orrs	r3, r2
 8103708:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 810370a:	4b31      	ldr	r3, [pc, #196]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 810370c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810370e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8103712:	687b      	ldr	r3, [r7, #4]
 8103714:	695b      	ldr	r3, [r3, #20]
 8103716:	492e      	ldr	r1, [pc, #184]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103718:	4313      	orrs	r3, r2
 810371a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 810371c:	4b2c      	ldr	r3, [pc, #176]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 810371e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103720:	f023 0220 	bic.w	r2, r3, #32
 8103724:	687b      	ldr	r3, [r7, #4]
 8103726:	699b      	ldr	r3, [r3, #24]
 8103728:	4929      	ldr	r1, [pc, #164]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 810372a:	4313      	orrs	r3, r2
 810372c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 810372e:	4b28      	ldr	r3, [pc, #160]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103732:	4a27      	ldr	r2, [pc, #156]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103734:	f023 0310 	bic.w	r3, r3, #16
 8103738:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 810373a:	4b25      	ldr	r3, [pc, #148]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 810373c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 810373e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103742:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8103746:	687a      	ldr	r2, [r7, #4]
 8103748:	69d2      	ldr	r2, [r2, #28]
 810374a:	00d2      	lsls	r2, r2, #3
 810374c:	4920      	ldr	r1, [pc, #128]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 810374e:	4313      	orrs	r3, r2
 8103750:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103752:	4b1f      	ldr	r3, [pc, #124]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103754:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103756:	4a1e      	ldr	r2, [pc, #120]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103758:	f043 0310 	orr.w	r3, r3, #16
 810375c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810375e:	683b      	ldr	r3, [r7, #0]
 8103760:	2b00      	cmp	r3, #0
 8103762:	d106      	bne.n	8103772 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103764:	4b1a      	ldr	r3, [pc, #104]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103768:	4a19      	ldr	r2, [pc, #100]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 810376a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810376e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103770:	e00f      	b.n	8103792 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103772:	683b      	ldr	r3, [r7, #0]
 8103774:	2b01      	cmp	r3, #1
 8103776:	d106      	bne.n	8103786 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103778:	4b15      	ldr	r3, [pc, #84]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 810377a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810377c:	4a14      	ldr	r2, [pc, #80]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 810377e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8103782:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103784:	e005      	b.n	8103792 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103786:	4b12      	ldr	r3, [pc, #72]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810378a:	4a11      	ldr	r2, [pc, #68]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 810378c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8103790:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103792:	4b0f      	ldr	r3, [pc, #60]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103794:	681b      	ldr	r3, [r3, #0]
 8103796:	4a0e      	ldr	r2, [pc, #56]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 8103798:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 810379c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810379e:	f7fd ff25 	bl	81015ec <HAL_GetTick>
 81037a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81037a4:	e008      	b.n	81037b8 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 81037a6:	f7fd ff21 	bl	81015ec <HAL_GetTick>
 81037aa:	4602      	mov	r2, r0
 81037ac:	68bb      	ldr	r3, [r7, #8]
 81037ae:	1ad3      	subs	r3, r2, r3
 81037b0:	2b02      	cmp	r3, #2
 81037b2:	d901      	bls.n	81037b8 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 81037b4:	2303      	movs	r3, #3
 81037b6:	e006      	b.n	81037c6 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 81037b8:	4b05      	ldr	r3, [pc, #20]	@ (81037d0 <RCCEx_PLL2_Config+0x160>)
 81037ba:	681b      	ldr	r3, [r3, #0]
 81037bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 81037c0:	2b00      	cmp	r3, #0
 81037c2:	d0f0      	beq.n	81037a6 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 81037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 81037c6:	4618      	mov	r0, r3
 81037c8:	3710      	adds	r7, #16
 81037ca:	46bd      	mov	sp, r7
 81037cc:	bd80      	pop	{r7, pc}
 81037ce:	bf00      	nop
 81037d0:	58024400 	.word	0x58024400

081037d4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 81037d4:	b580      	push	{r7, lr}
 81037d6:	b084      	sub	sp, #16
 81037d8:	af00      	add	r7, sp, #0
 81037da:	6078      	str	r0, [r7, #4]
 81037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 81037de:	2300      	movs	r3, #0
 81037e0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 81037e2:	4b54      	ldr	r3, [pc, #336]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81037e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81037e6:	f003 0303 	and.w	r3, r3, #3
 81037ea:	2b03      	cmp	r3, #3
 81037ec:	d101      	bne.n	81037f2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 81037ee:	2301      	movs	r3, #1
 81037f0:	e09b      	b.n	810392a <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 81037f2:	4b50      	ldr	r3, [pc, #320]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81037f4:	681b      	ldr	r3, [r3, #0]
 81037f6:	4a4f      	ldr	r2, [pc, #316]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81037f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81037fc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 81037fe:	f7fd fef5 	bl	81015ec <HAL_GetTick>
 8103802:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103804:	e008      	b.n	8103818 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103806:	f7fd fef1 	bl	81015ec <HAL_GetTick>
 810380a:	4602      	mov	r2, r0
 810380c:	68bb      	ldr	r3, [r7, #8]
 810380e:	1ad3      	subs	r3, r2, r3
 8103810:	2b02      	cmp	r3, #2
 8103812:	d901      	bls.n	8103818 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103814:	2303      	movs	r3, #3
 8103816:	e088      	b.n	810392a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103818:	4b46      	ldr	r3, [pc, #280]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 810381a:	681b      	ldr	r3, [r3, #0]
 810381c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103820:	2b00      	cmp	r3, #0
 8103822:	d1f0      	bne.n	8103806 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103824:	4b43      	ldr	r3, [pc, #268]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 8103826:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103828:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 810382c:	687b      	ldr	r3, [r7, #4]
 810382e:	681b      	ldr	r3, [r3, #0]
 8103830:	051b      	lsls	r3, r3, #20
 8103832:	4940      	ldr	r1, [pc, #256]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 8103834:	4313      	orrs	r3, r2
 8103836:	628b      	str	r3, [r1, #40]	@ 0x28
 8103838:	687b      	ldr	r3, [r7, #4]
 810383a:	685b      	ldr	r3, [r3, #4]
 810383c:	3b01      	subs	r3, #1
 810383e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103842:	687b      	ldr	r3, [r7, #4]
 8103844:	689b      	ldr	r3, [r3, #8]
 8103846:	3b01      	subs	r3, #1
 8103848:	025b      	lsls	r3, r3, #9
 810384a:	b29b      	uxth	r3, r3
 810384c:	431a      	orrs	r2, r3
 810384e:	687b      	ldr	r3, [r7, #4]
 8103850:	68db      	ldr	r3, [r3, #12]
 8103852:	3b01      	subs	r3, #1
 8103854:	041b      	lsls	r3, r3, #16
 8103856:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 810385a:	431a      	orrs	r2, r3
 810385c:	687b      	ldr	r3, [r7, #4]
 810385e:	691b      	ldr	r3, [r3, #16]
 8103860:	3b01      	subs	r3, #1
 8103862:	061b      	lsls	r3, r3, #24
 8103864:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8103868:	4932      	ldr	r1, [pc, #200]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 810386a:	4313      	orrs	r3, r2
 810386c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 810386e:	4b31      	ldr	r3, [pc, #196]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 8103870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103872:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8103876:	687b      	ldr	r3, [r7, #4]
 8103878:	695b      	ldr	r3, [r3, #20]
 810387a:	492e      	ldr	r1, [pc, #184]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 810387c:	4313      	orrs	r3, r2
 810387e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103880:	4b2c      	ldr	r3, [pc, #176]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 8103882:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103884:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8103888:	687b      	ldr	r3, [r7, #4]
 810388a:	699b      	ldr	r3, [r3, #24]
 810388c:	4929      	ldr	r1, [pc, #164]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 810388e:	4313      	orrs	r3, r2
 8103890:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103892:	4b28      	ldr	r3, [pc, #160]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 8103894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103896:	4a27      	ldr	r2, [pc, #156]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 8103898:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 810389c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810389e:	4b25      	ldr	r3, [pc, #148]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 81038a2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 81038a6:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 81038aa:	687a      	ldr	r2, [r7, #4]
 81038ac:	69d2      	ldr	r2, [r2, #28]
 81038ae:	00d2      	lsls	r2, r2, #3
 81038b0:	4920      	ldr	r1, [pc, #128]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038b2:	4313      	orrs	r3, r2
 81038b4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 81038b6:	4b1f      	ldr	r3, [pc, #124]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81038ba:	4a1e      	ldr	r2, [pc, #120]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 81038c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 81038c2:	683b      	ldr	r3, [r7, #0]
 81038c4:	2b00      	cmp	r3, #0
 81038c6:	d106      	bne.n	81038d6 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 81038c8:	4b1a      	ldr	r3, [pc, #104]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81038cc:	4a19      	ldr	r2, [pc, #100]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038ce:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 81038d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81038d4:	e00f      	b.n	81038f6 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 81038d6:	683b      	ldr	r3, [r7, #0]
 81038d8:	2b01      	cmp	r3, #1
 81038da:	d106      	bne.n	81038ea <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 81038dc:	4b15      	ldr	r3, [pc, #84]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81038e0:	4a14      	ldr	r2, [pc, #80]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038e2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 81038e6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 81038e8:	e005      	b.n	81038f6 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 81038ea:	4b12      	ldr	r3, [pc, #72]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81038ee:	4a11      	ldr	r2, [pc, #68]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038f0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 81038f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 81038f6:	4b0f      	ldr	r3, [pc, #60]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038f8:	681b      	ldr	r3, [r3, #0]
 81038fa:	4a0e      	ldr	r2, [pc, #56]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 81038fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8103900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103902:	f7fd fe73 	bl	81015ec <HAL_GetTick>
 8103906:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103908:	e008      	b.n	810391c <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 810390a:	f7fd fe6f 	bl	81015ec <HAL_GetTick>
 810390e:	4602      	mov	r2, r0
 8103910:	68bb      	ldr	r3, [r7, #8]
 8103912:	1ad3      	subs	r3, r2, r3
 8103914:	2b02      	cmp	r3, #2
 8103916:	d901      	bls.n	810391c <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103918:	2303      	movs	r3, #3
 810391a:	e006      	b.n	810392a <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 810391c:	4b05      	ldr	r3, [pc, #20]	@ (8103934 <RCCEx_PLL3_Config+0x160>)
 810391e:	681b      	ldr	r3, [r3, #0]
 8103920:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103924:	2b00      	cmp	r3, #0
 8103926:	d0f0      	beq.n	810390a <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103928:	7bfb      	ldrb	r3, [r7, #15]
}
 810392a:	4618      	mov	r0, r3
 810392c:	3710      	adds	r7, #16
 810392e:	46bd      	mov	sp, r7
 8103930:	bd80      	pop	{r7, pc}
 8103932:	bf00      	nop
 8103934:	58024400 	.word	0x58024400

08103938 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103938:	b580      	push	{r7, lr}
 810393a:	b08a      	sub	sp, #40	@ 0x28
 810393c:	af02      	add	r7, sp, #8
 810393e:	60f8      	str	r0, [r7, #12]
 8103940:	60b9      	str	r1, [r7, #8]
 8103942:	603b      	str	r3, [r7, #0]
 8103944:	4613      	mov	r3, r2
 8103946:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8103948:	68fb      	ldr	r3, [r7, #12]
 810394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810394e:	2b20      	cmp	r3, #32
 8103950:	d17b      	bne.n	8103a4a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8103952:	68bb      	ldr	r3, [r7, #8]
 8103954:	2b00      	cmp	r3, #0
 8103956:	d002      	beq.n	810395e <HAL_UART_Transmit+0x26>
 8103958:	88fb      	ldrh	r3, [r7, #6]
 810395a:	2b00      	cmp	r3, #0
 810395c:	d101      	bne.n	8103962 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 810395e:	2301      	movs	r3, #1
 8103960:	e074      	b.n	8103a4c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103962:	68fb      	ldr	r3, [r7, #12]
 8103964:	2200      	movs	r2, #0
 8103966:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 810396a:	68fb      	ldr	r3, [r7, #12]
 810396c:	2221      	movs	r2, #33	@ 0x21
 810396e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8103972:	f7fd fe3b 	bl	81015ec <HAL_GetTick>
 8103976:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8103978:	68fb      	ldr	r3, [r7, #12]
 810397a:	88fa      	ldrh	r2, [r7, #6]
 810397c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8103980:	68fb      	ldr	r3, [r7, #12]
 8103982:	88fa      	ldrh	r2, [r7, #6]
 8103984:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8103988:	68fb      	ldr	r3, [r7, #12]
 810398a:	689b      	ldr	r3, [r3, #8]
 810398c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8103990:	d108      	bne.n	81039a4 <HAL_UART_Transmit+0x6c>
 8103992:	68fb      	ldr	r3, [r7, #12]
 8103994:	691b      	ldr	r3, [r3, #16]
 8103996:	2b00      	cmp	r3, #0
 8103998:	d104      	bne.n	81039a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 810399a:	2300      	movs	r3, #0
 810399c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 810399e:	68bb      	ldr	r3, [r7, #8]
 81039a0:	61bb      	str	r3, [r7, #24]
 81039a2:	e003      	b.n	81039ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 81039a4:	68bb      	ldr	r3, [r7, #8]
 81039a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 81039a8:	2300      	movs	r3, #0
 81039aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 81039ac:	e030      	b.n	8103a10 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 81039ae:	683b      	ldr	r3, [r7, #0]
 81039b0:	9300      	str	r3, [sp, #0]
 81039b2:	697b      	ldr	r3, [r7, #20]
 81039b4:	2200      	movs	r2, #0
 81039b6:	2180      	movs	r1, #128	@ 0x80
 81039b8:	68f8      	ldr	r0, [r7, #12]
 81039ba:	f000 f84b 	bl	8103a54 <UART_WaitOnFlagUntilTimeout>
 81039be:	4603      	mov	r3, r0
 81039c0:	2b00      	cmp	r3, #0
 81039c2:	d005      	beq.n	81039d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 81039c4:	68fb      	ldr	r3, [r7, #12]
 81039c6:	2220      	movs	r2, #32
 81039c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 81039cc:	2303      	movs	r3, #3
 81039ce:	e03d      	b.n	8103a4c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 81039d0:	69fb      	ldr	r3, [r7, #28]
 81039d2:	2b00      	cmp	r3, #0
 81039d4:	d10b      	bne.n	81039ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 81039d6:	69bb      	ldr	r3, [r7, #24]
 81039d8:	881b      	ldrh	r3, [r3, #0]
 81039da:	461a      	mov	r2, r3
 81039dc:	68fb      	ldr	r3, [r7, #12]
 81039de:	681b      	ldr	r3, [r3, #0]
 81039e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 81039e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 81039e6:	69bb      	ldr	r3, [r7, #24]
 81039e8:	3302      	adds	r3, #2
 81039ea:	61bb      	str	r3, [r7, #24]
 81039ec:	e007      	b.n	81039fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 81039ee:	69fb      	ldr	r3, [r7, #28]
 81039f0:	781a      	ldrb	r2, [r3, #0]
 81039f2:	68fb      	ldr	r3, [r7, #12]
 81039f4:	681b      	ldr	r3, [r3, #0]
 81039f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 81039f8:	69fb      	ldr	r3, [r7, #28]
 81039fa:	3301      	adds	r3, #1
 81039fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 81039fe:	68fb      	ldr	r3, [r7, #12]
 8103a00:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8103a04:	b29b      	uxth	r3, r3
 8103a06:	3b01      	subs	r3, #1
 8103a08:	b29a      	uxth	r2, r3
 8103a0a:	68fb      	ldr	r3, [r7, #12]
 8103a0c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8103a10:	68fb      	ldr	r3, [r7, #12]
 8103a12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8103a16:	b29b      	uxth	r3, r3
 8103a18:	2b00      	cmp	r3, #0
 8103a1a:	d1c8      	bne.n	81039ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8103a1c:	683b      	ldr	r3, [r7, #0]
 8103a1e:	9300      	str	r3, [sp, #0]
 8103a20:	697b      	ldr	r3, [r7, #20]
 8103a22:	2200      	movs	r2, #0
 8103a24:	2140      	movs	r1, #64	@ 0x40
 8103a26:	68f8      	ldr	r0, [r7, #12]
 8103a28:	f000 f814 	bl	8103a54 <UART_WaitOnFlagUntilTimeout>
 8103a2c:	4603      	mov	r3, r0
 8103a2e:	2b00      	cmp	r3, #0
 8103a30:	d005      	beq.n	8103a3e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8103a32:	68fb      	ldr	r3, [r7, #12]
 8103a34:	2220      	movs	r2, #32
 8103a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8103a3a:	2303      	movs	r3, #3
 8103a3c:	e006      	b.n	8103a4c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8103a3e:	68fb      	ldr	r3, [r7, #12]
 8103a40:	2220      	movs	r2, #32
 8103a42:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8103a46:	2300      	movs	r3, #0
 8103a48:	e000      	b.n	8103a4c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8103a4a:	2302      	movs	r3, #2
  }
}
 8103a4c:	4618      	mov	r0, r3
 8103a4e:	3720      	adds	r7, #32
 8103a50:	46bd      	mov	sp, r7
 8103a52:	bd80      	pop	{r7, pc}

08103a54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8103a54:	b580      	push	{r7, lr}
 8103a56:	b084      	sub	sp, #16
 8103a58:	af00      	add	r7, sp, #0
 8103a5a:	60f8      	str	r0, [r7, #12]
 8103a5c:	60b9      	str	r1, [r7, #8]
 8103a5e:	603b      	str	r3, [r7, #0]
 8103a60:	4613      	mov	r3, r2
 8103a62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103a64:	e04f      	b.n	8103b06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103a66:	69bb      	ldr	r3, [r7, #24]
 8103a68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8103a6c:	d04b      	beq.n	8103b06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103a6e:	f7fd fdbd 	bl	81015ec <HAL_GetTick>
 8103a72:	4602      	mov	r2, r0
 8103a74:	683b      	ldr	r3, [r7, #0]
 8103a76:	1ad3      	subs	r3, r2, r3
 8103a78:	69ba      	ldr	r2, [r7, #24]
 8103a7a:	429a      	cmp	r2, r3
 8103a7c:	d302      	bcc.n	8103a84 <UART_WaitOnFlagUntilTimeout+0x30>
 8103a7e:	69bb      	ldr	r3, [r7, #24]
 8103a80:	2b00      	cmp	r3, #0
 8103a82:	d101      	bne.n	8103a88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8103a84:	2303      	movs	r3, #3
 8103a86:	e04e      	b.n	8103b26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8103a88:	68fb      	ldr	r3, [r7, #12]
 8103a8a:	681b      	ldr	r3, [r3, #0]
 8103a8c:	681b      	ldr	r3, [r3, #0]
 8103a8e:	f003 0304 	and.w	r3, r3, #4
 8103a92:	2b00      	cmp	r3, #0
 8103a94:	d037      	beq.n	8103b06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8103a96:	68bb      	ldr	r3, [r7, #8]
 8103a98:	2b80      	cmp	r3, #128	@ 0x80
 8103a9a:	d034      	beq.n	8103b06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8103a9c:	68bb      	ldr	r3, [r7, #8]
 8103a9e:	2b40      	cmp	r3, #64	@ 0x40
 8103aa0:	d031      	beq.n	8103b06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8103aa2:	68fb      	ldr	r3, [r7, #12]
 8103aa4:	681b      	ldr	r3, [r3, #0]
 8103aa6:	69db      	ldr	r3, [r3, #28]
 8103aa8:	f003 0308 	and.w	r3, r3, #8
 8103aac:	2b08      	cmp	r3, #8
 8103aae:	d110      	bne.n	8103ad2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8103ab0:	68fb      	ldr	r3, [r7, #12]
 8103ab2:	681b      	ldr	r3, [r3, #0]
 8103ab4:	2208      	movs	r2, #8
 8103ab6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8103ab8:	68f8      	ldr	r0, [r7, #12]
 8103aba:	f000 f838 	bl	8103b2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8103abe:	68fb      	ldr	r3, [r7, #12]
 8103ac0:	2208      	movs	r2, #8
 8103ac2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8103ac6:	68fb      	ldr	r3, [r7, #12]
 8103ac8:	2200      	movs	r2, #0
 8103aca:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8103ace:	2301      	movs	r3, #1
 8103ad0:	e029      	b.n	8103b26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8103ad2:	68fb      	ldr	r3, [r7, #12]
 8103ad4:	681b      	ldr	r3, [r3, #0]
 8103ad6:	69db      	ldr	r3, [r3, #28]
 8103ad8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8103adc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8103ae0:	d111      	bne.n	8103b06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8103ae2:	68fb      	ldr	r3, [r7, #12]
 8103ae4:	681b      	ldr	r3, [r3, #0]
 8103ae6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8103aea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8103aec:	68f8      	ldr	r0, [r7, #12]
 8103aee:	f000 f81e 	bl	8103b2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8103af2:	68fb      	ldr	r3, [r7, #12]
 8103af4:	2220      	movs	r2, #32
 8103af6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8103afa:	68fb      	ldr	r3, [r7, #12]
 8103afc:	2200      	movs	r2, #0
 8103afe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8103b02:	2303      	movs	r3, #3
 8103b04:	e00f      	b.n	8103b26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103b06:	68fb      	ldr	r3, [r7, #12]
 8103b08:	681b      	ldr	r3, [r3, #0]
 8103b0a:	69da      	ldr	r2, [r3, #28]
 8103b0c:	68bb      	ldr	r3, [r7, #8]
 8103b0e:	4013      	ands	r3, r2
 8103b10:	68ba      	ldr	r2, [r7, #8]
 8103b12:	429a      	cmp	r2, r3
 8103b14:	bf0c      	ite	eq
 8103b16:	2301      	moveq	r3, #1
 8103b18:	2300      	movne	r3, #0
 8103b1a:	b2db      	uxtb	r3, r3
 8103b1c:	461a      	mov	r2, r3
 8103b1e:	79fb      	ldrb	r3, [r7, #7]
 8103b20:	429a      	cmp	r2, r3
 8103b22:	d0a0      	beq.n	8103a66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8103b24:	2300      	movs	r3, #0
}
 8103b26:	4618      	mov	r0, r3
 8103b28:	3710      	adds	r7, #16
 8103b2a:	46bd      	mov	sp, r7
 8103b2c:	bd80      	pop	{r7, pc}

08103b2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8103b2e:	b480      	push	{r7}
 8103b30:	b095      	sub	sp, #84	@ 0x54
 8103b32:	af00      	add	r7, sp, #0
 8103b34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8103b36:	687b      	ldr	r3, [r7, #4]
 8103b38:	681b      	ldr	r3, [r3, #0]
 8103b3a:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103b3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103b3e:	e853 3f00 	ldrex	r3, [r3]
 8103b42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8103b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8103b46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8103b4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103b4c:	687b      	ldr	r3, [r7, #4]
 8103b4e:	681b      	ldr	r3, [r3, #0]
 8103b50:	461a      	mov	r2, r3
 8103b52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8103b54:	643b      	str	r3, [r7, #64]	@ 0x40
 8103b56:	63fa      	str	r2, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103b58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8103b5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8103b5c:	e841 2300 	strex	r3, r2, [r1]
 8103b60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8103b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b64:	2b00      	cmp	r3, #0
 8103b66:	d1e6      	bne.n	8103b36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8103b68:	687b      	ldr	r3, [r7, #4]
 8103b6a:	681b      	ldr	r3, [r3, #0]
 8103b6c:	3308      	adds	r3, #8
 8103b6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103b70:	6a3b      	ldr	r3, [r7, #32]
 8103b72:	e853 3f00 	ldrex	r3, [r3]
 8103b76:	61fb      	str	r3, [r7, #28]
   return(result);
 8103b78:	69fb      	ldr	r3, [r7, #28]
 8103b7a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8103b7e:	f023 0301 	bic.w	r3, r3, #1
 8103b82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103b84:	687b      	ldr	r3, [r7, #4]
 8103b86:	681b      	ldr	r3, [r3, #0]
 8103b88:	3308      	adds	r3, #8
 8103b8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8103b8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8103b8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103b90:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8103b92:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8103b94:	e841 2300 	strex	r3, r2, [r1]
 8103b98:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8103b9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103b9c:	2b00      	cmp	r3, #0
 8103b9e:	d1e3      	bne.n	8103b68 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8103ba0:	687b      	ldr	r3, [r7, #4]
 8103ba2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8103ba4:	2b01      	cmp	r3, #1
 8103ba6:	d118      	bne.n	8103bda <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8103ba8:	687b      	ldr	r3, [r7, #4]
 8103baa:	681b      	ldr	r3, [r3, #0]
 8103bac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103bae:	68fb      	ldr	r3, [r7, #12]
 8103bb0:	e853 3f00 	ldrex	r3, [r3]
 8103bb4:	60bb      	str	r3, [r7, #8]
   return(result);
 8103bb6:	68bb      	ldr	r3, [r7, #8]
 8103bb8:	f023 0310 	bic.w	r3, r3, #16
 8103bbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8103bbe:	687b      	ldr	r3, [r7, #4]
 8103bc0:	681b      	ldr	r3, [r3, #0]
 8103bc2:	461a      	mov	r2, r3
 8103bc4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8103bc6:	61bb      	str	r3, [r7, #24]
 8103bc8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103bca:	6979      	ldr	r1, [r7, #20]
 8103bcc:	69ba      	ldr	r2, [r7, #24]
 8103bce:	e841 2300 	strex	r3, r2, [r1]
 8103bd2:	613b      	str	r3, [r7, #16]
   return(result);
 8103bd4:	693b      	ldr	r3, [r7, #16]
 8103bd6:	2b00      	cmp	r3, #0
 8103bd8:	d1e6      	bne.n	8103ba8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8103bda:	687b      	ldr	r3, [r7, #4]
 8103bdc:	2220      	movs	r2, #32
 8103bde:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8103be2:	687b      	ldr	r3, [r7, #4]
 8103be4:	2200      	movs	r2, #0
 8103be6:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8103be8:	687b      	ldr	r3, [r7, #4]
 8103bea:	2200      	movs	r2, #0
 8103bec:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8103bee:	bf00      	nop
 8103bf0:	3754      	adds	r7, #84	@ 0x54
 8103bf2:	46bd      	mov	sp, r7
 8103bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103bf8:	4770      	bx	lr

08103bfa <__cvt>:
 8103bfa:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8103bfe:	ec57 6b10 	vmov	r6, r7, d0
 8103c02:	2f00      	cmp	r7, #0
 8103c04:	460c      	mov	r4, r1
 8103c06:	4619      	mov	r1, r3
 8103c08:	463b      	mov	r3, r7
 8103c0a:	bfbb      	ittet	lt
 8103c0c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8103c10:	461f      	movlt	r7, r3
 8103c12:	2300      	movge	r3, #0
 8103c14:	232d      	movlt	r3, #45	@ 0x2d
 8103c16:	700b      	strb	r3, [r1, #0]
 8103c18:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8103c1a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8103c1e:	4691      	mov	r9, r2
 8103c20:	f023 0820 	bic.w	r8, r3, #32
 8103c24:	bfbc      	itt	lt
 8103c26:	4632      	movlt	r2, r6
 8103c28:	4616      	movlt	r6, r2
 8103c2a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8103c2e:	d005      	beq.n	8103c3c <__cvt+0x42>
 8103c30:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8103c34:	d100      	bne.n	8103c38 <__cvt+0x3e>
 8103c36:	3401      	adds	r4, #1
 8103c38:	2102      	movs	r1, #2
 8103c3a:	e000      	b.n	8103c3e <__cvt+0x44>
 8103c3c:	2103      	movs	r1, #3
 8103c3e:	ab03      	add	r3, sp, #12
 8103c40:	9301      	str	r3, [sp, #4]
 8103c42:	ab02      	add	r3, sp, #8
 8103c44:	9300      	str	r3, [sp, #0]
 8103c46:	ec47 6b10 	vmov	d0, r6, r7
 8103c4a:	4653      	mov	r3, sl
 8103c4c:	4622      	mov	r2, r4
 8103c4e:	f001 fe9b 	bl	8105988 <_dtoa_r>
 8103c52:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8103c56:	4605      	mov	r5, r0
 8103c58:	d119      	bne.n	8103c8e <__cvt+0x94>
 8103c5a:	f019 0f01 	tst.w	r9, #1
 8103c5e:	d00e      	beq.n	8103c7e <__cvt+0x84>
 8103c60:	eb00 0904 	add.w	r9, r0, r4
 8103c64:	2200      	movs	r2, #0
 8103c66:	2300      	movs	r3, #0
 8103c68:	4630      	mov	r0, r6
 8103c6a:	4639      	mov	r1, r7
 8103c6c:	f7fc ffb4 	bl	8100bd8 <__aeabi_dcmpeq>
 8103c70:	b108      	cbz	r0, 8103c76 <__cvt+0x7c>
 8103c72:	f8cd 900c 	str.w	r9, [sp, #12]
 8103c76:	2230      	movs	r2, #48	@ 0x30
 8103c78:	9b03      	ldr	r3, [sp, #12]
 8103c7a:	454b      	cmp	r3, r9
 8103c7c:	d31e      	bcc.n	8103cbc <__cvt+0xc2>
 8103c7e:	9b03      	ldr	r3, [sp, #12]
 8103c80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8103c82:	1b5b      	subs	r3, r3, r5
 8103c84:	4628      	mov	r0, r5
 8103c86:	6013      	str	r3, [r2, #0]
 8103c88:	b004      	add	sp, #16
 8103c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8103c8e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8103c92:	eb00 0904 	add.w	r9, r0, r4
 8103c96:	d1e5      	bne.n	8103c64 <__cvt+0x6a>
 8103c98:	7803      	ldrb	r3, [r0, #0]
 8103c9a:	2b30      	cmp	r3, #48	@ 0x30
 8103c9c:	d10a      	bne.n	8103cb4 <__cvt+0xba>
 8103c9e:	2200      	movs	r2, #0
 8103ca0:	2300      	movs	r3, #0
 8103ca2:	4630      	mov	r0, r6
 8103ca4:	4639      	mov	r1, r7
 8103ca6:	f7fc ff97 	bl	8100bd8 <__aeabi_dcmpeq>
 8103caa:	b918      	cbnz	r0, 8103cb4 <__cvt+0xba>
 8103cac:	f1c4 0401 	rsb	r4, r4, #1
 8103cb0:	f8ca 4000 	str.w	r4, [sl]
 8103cb4:	f8da 3000 	ldr.w	r3, [sl]
 8103cb8:	4499      	add	r9, r3
 8103cba:	e7d3      	b.n	8103c64 <__cvt+0x6a>
 8103cbc:	1c59      	adds	r1, r3, #1
 8103cbe:	9103      	str	r1, [sp, #12]
 8103cc0:	701a      	strb	r2, [r3, #0]
 8103cc2:	e7d9      	b.n	8103c78 <__cvt+0x7e>

08103cc4 <__exponent>:
 8103cc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8103cc6:	2900      	cmp	r1, #0
 8103cc8:	bfba      	itte	lt
 8103cca:	4249      	neglt	r1, r1
 8103ccc:	232d      	movlt	r3, #45	@ 0x2d
 8103cce:	232b      	movge	r3, #43	@ 0x2b
 8103cd0:	2909      	cmp	r1, #9
 8103cd2:	7002      	strb	r2, [r0, #0]
 8103cd4:	7043      	strb	r3, [r0, #1]
 8103cd6:	dd29      	ble.n	8103d2c <__exponent+0x68>
 8103cd8:	f10d 0307 	add.w	r3, sp, #7
 8103cdc:	461d      	mov	r5, r3
 8103cde:	270a      	movs	r7, #10
 8103ce0:	461a      	mov	r2, r3
 8103ce2:	fbb1 f6f7 	udiv	r6, r1, r7
 8103ce6:	fb07 1416 	mls	r4, r7, r6, r1
 8103cea:	3430      	adds	r4, #48	@ 0x30
 8103cec:	f802 4c01 	strb.w	r4, [r2, #-1]
 8103cf0:	460c      	mov	r4, r1
 8103cf2:	2c63      	cmp	r4, #99	@ 0x63
 8103cf4:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8103cf8:	4631      	mov	r1, r6
 8103cfa:	dcf1      	bgt.n	8103ce0 <__exponent+0x1c>
 8103cfc:	3130      	adds	r1, #48	@ 0x30
 8103cfe:	1e94      	subs	r4, r2, #2
 8103d00:	f803 1c01 	strb.w	r1, [r3, #-1]
 8103d04:	1c41      	adds	r1, r0, #1
 8103d06:	4623      	mov	r3, r4
 8103d08:	42ab      	cmp	r3, r5
 8103d0a:	d30a      	bcc.n	8103d22 <__exponent+0x5e>
 8103d0c:	f10d 0309 	add.w	r3, sp, #9
 8103d10:	1a9b      	subs	r3, r3, r2
 8103d12:	42ac      	cmp	r4, r5
 8103d14:	bf88      	it	hi
 8103d16:	2300      	movhi	r3, #0
 8103d18:	3302      	adds	r3, #2
 8103d1a:	4403      	add	r3, r0
 8103d1c:	1a18      	subs	r0, r3, r0
 8103d1e:	b003      	add	sp, #12
 8103d20:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8103d22:	f813 6b01 	ldrb.w	r6, [r3], #1
 8103d26:	f801 6f01 	strb.w	r6, [r1, #1]!
 8103d2a:	e7ed      	b.n	8103d08 <__exponent+0x44>
 8103d2c:	2330      	movs	r3, #48	@ 0x30
 8103d2e:	3130      	adds	r1, #48	@ 0x30
 8103d30:	7083      	strb	r3, [r0, #2]
 8103d32:	70c1      	strb	r1, [r0, #3]
 8103d34:	1d03      	adds	r3, r0, #4
 8103d36:	e7f1      	b.n	8103d1c <__exponent+0x58>

08103d38 <_printf_float>:
 8103d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8103d3c:	b08d      	sub	sp, #52	@ 0x34
 8103d3e:	460c      	mov	r4, r1
 8103d40:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8103d44:	4616      	mov	r6, r2
 8103d46:	461f      	mov	r7, r3
 8103d48:	4605      	mov	r5, r0
 8103d4a:	f001 fd43 	bl	81057d4 <_localeconv_r>
 8103d4e:	6803      	ldr	r3, [r0, #0]
 8103d50:	9304      	str	r3, [sp, #16]
 8103d52:	4618      	mov	r0, r3
 8103d54:	f7fc fb14 	bl	8100380 <strlen>
 8103d58:	2300      	movs	r3, #0
 8103d5a:	930a      	str	r3, [sp, #40]	@ 0x28
 8103d5c:	f8d8 3000 	ldr.w	r3, [r8]
 8103d60:	9005      	str	r0, [sp, #20]
 8103d62:	3307      	adds	r3, #7
 8103d64:	f023 0307 	bic.w	r3, r3, #7
 8103d68:	f103 0208 	add.w	r2, r3, #8
 8103d6c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8103d70:	f8d4 b000 	ldr.w	fp, [r4]
 8103d74:	f8c8 2000 	str.w	r2, [r8]
 8103d78:	e9d3 8900 	ldrd	r8, r9, [r3]
 8103d7c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8103d80:	9307      	str	r3, [sp, #28]
 8103d82:	f8cd 8018 	str.w	r8, [sp, #24]
 8103d86:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8103d8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8103d8e:	4b9c      	ldr	r3, [pc, #624]	@ (8104000 <_printf_float+0x2c8>)
 8103d90:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8103d94:	f7fc ff52 	bl	8100c3c <__aeabi_dcmpun>
 8103d98:	bb70      	cbnz	r0, 8103df8 <_printf_float+0xc0>
 8103d9a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8103d9e:	4b98      	ldr	r3, [pc, #608]	@ (8104000 <_printf_float+0x2c8>)
 8103da0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8103da4:	f7fc ff2c 	bl	8100c00 <__aeabi_dcmple>
 8103da8:	bb30      	cbnz	r0, 8103df8 <_printf_float+0xc0>
 8103daa:	2200      	movs	r2, #0
 8103dac:	2300      	movs	r3, #0
 8103dae:	4640      	mov	r0, r8
 8103db0:	4649      	mov	r1, r9
 8103db2:	f7fc ff1b 	bl	8100bec <__aeabi_dcmplt>
 8103db6:	b110      	cbz	r0, 8103dbe <_printf_float+0x86>
 8103db8:	232d      	movs	r3, #45	@ 0x2d
 8103dba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8103dbe:	4a91      	ldr	r2, [pc, #580]	@ (8104004 <_printf_float+0x2cc>)
 8103dc0:	4b91      	ldr	r3, [pc, #580]	@ (8104008 <_printf_float+0x2d0>)
 8103dc2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8103dc6:	bf94      	ite	ls
 8103dc8:	4690      	movls	r8, r2
 8103dca:	4698      	movhi	r8, r3
 8103dcc:	2303      	movs	r3, #3
 8103dce:	6123      	str	r3, [r4, #16]
 8103dd0:	f02b 0304 	bic.w	r3, fp, #4
 8103dd4:	6023      	str	r3, [r4, #0]
 8103dd6:	f04f 0900 	mov.w	r9, #0
 8103dda:	9700      	str	r7, [sp, #0]
 8103ddc:	4633      	mov	r3, r6
 8103dde:	aa0b      	add	r2, sp, #44	@ 0x2c
 8103de0:	4621      	mov	r1, r4
 8103de2:	4628      	mov	r0, r5
 8103de4:	f000 f9d2 	bl	810418c <_printf_common>
 8103de8:	3001      	adds	r0, #1
 8103dea:	f040 808d 	bne.w	8103f08 <_printf_float+0x1d0>
 8103dee:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8103df2:	b00d      	add	sp, #52	@ 0x34
 8103df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8103df8:	4642      	mov	r2, r8
 8103dfa:	464b      	mov	r3, r9
 8103dfc:	4640      	mov	r0, r8
 8103dfe:	4649      	mov	r1, r9
 8103e00:	f7fc ff1c 	bl	8100c3c <__aeabi_dcmpun>
 8103e04:	b140      	cbz	r0, 8103e18 <_printf_float+0xe0>
 8103e06:	464b      	mov	r3, r9
 8103e08:	2b00      	cmp	r3, #0
 8103e0a:	bfbc      	itt	lt
 8103e0c:	232d      	movlt	r3, #45	@ 0x2d
 8103e0e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8103e12:	4a7e      	ldr	r2, [pc, #504]	@ (810400c <_printf_float+0x2d4>)
 8103e14:	4b7e      	ldr	r3, [pc, #504]	@ (8104010 <_printf_float+0x2d8>)
 8103e16:	e7d4      	b.n	8103dc2 <_printf_float+0x8a>
 8103e18:	6863      	ldr	r3, [r4, #4]
 8103e1a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8103e1e:	9206      	str	r2, [sp, #24]
 8103e20:	1c5a      	adds	r2, r3, #1
 8103e22:	d13b      	bne.n	8103e9c <_printf_float+0x164>
 8103e24:	2306      	movs	r3, #6
 8103e26:	6063      	str	r3, [r4, #4]
 8103e28:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8103e2c:	2300      	movs	r3, #0
 8103e2e:	6022      	str	r2, [r4, #0]
 8103e30:	9303      	str	r3, [sp, #12]
 8103e32:	ab0a      	add	r3, sp, #40	@ 0x28
 8103e34:	e9cd a301 	strd	sl, r3, [sp, #4]
 8103e38:	ab09      	add	r3, sp, #36	@ 0x24
 8103e3a:	9300      	str	r3, [sp, #0]
 8103e3c:	6861      	ldr	r1, [r4, #4]
 8103e3e:	ec49 8b10 	vmov	d0, r8, r9
 8103e42:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8103e46:	4628      	mov	r0, r5
 8103e48:	f7ff fed7 	bl	8103bfa <__cvt>
 8103e4c:	9b06      	ldr	r3, [sp, #24]
 8103e4e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8103e50:	2b47      	cmp	r3, #71	@ 0x47
 8103e52:	4680      	mov	r8, r0
 8103e54:	d129      	bne.n	8103eaa <_printf_float+0x172>
 8103e56:	1cc8      	adds	r0, r1, #3
 8103e58:	db02      	blt.n	8103e60 <_printf_float+0x128>
 8103e5a:	6863      	ldr	r3, [r4, #4]
 8103e5c:	4299      	cmp	r1, r3
 8103e5e:	dd41      	ble.n	8103ee4 <_printf_float+0x1ac>
 8103e60:	f1aa 0a02 	sub.w	sl, sl, #2
 8103e64:	fa5f fa8a 	uxtb.w	sl, sl
 8103e68:	3901      	subs	r1, #1
 8103e6a:	4652      	mov	r2, sl
 8103e6c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8103e70:	9109      	str	r1, [sp, #36]	@ 0x24
 8103e72:	f7ff ff27 	bl	8103cc4 <__exponent>
 8103e76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8103e78:	1813      	adds	r3, r2, r0
 8103e7a:	2a01      	cmp	r2, #1
 8103e7c:	4681      	mov	r9, r0
 8103e7e:	6123      	str	r3, [r4, #16]
 8103e80:	dc02      	bgt.n	8103e88 <_printf_float+0x150>
 8103e82:	6822      	ldr	r2, [r4, #0]
 8103e84:	07d2      	lsls	r2, r2, #31
 8103e86:	d501      	bpl.n	8103e8c <_printf_float+0x154>
 8103e88:	3301      	adds	r3, #1
 8103e8a:	6123      	str	r3, [r4, #16]
 8103e8c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8103e90:	2b00      	cmp	r3, #0
 8103e92:	d0a2      	beq.n	8103dda <_printf_float+0xa2>
 8103e94:	232d      	movs	r3, #45	@ 0x2d
 8103e96:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8103e9a:	e79e      	b.n	8103dda <_printf_float+0xa2>
 8103e9c:	9a06      	ldr	r2, [sp, #24]
 8103e9e:	2a47      	cmp	r2, #71	@ 0x47
 8103ea0:	d1c2      	bne.n	8103e28 <_printf_float+0xf0>
 8103ea2:	2b00      	cmp	r3, #0
 8103ea4:	d1c0      	bne.n	8103e28 <_printf_float+0xf0>
 8103ea6:	2301      	movs	r3, #1
 8103ea8:	e7bd      	b.n	8103e26 <_printf_float+0xee>
 8103eaa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8103eae:	d9db      	bls.n	8103e68 <_printf_float+0x130>
 8103eb0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8103eb4:	d118      	bne.n	8103ee8 <_printf_float+0x1b0>
 8103eb6:	2900      	cmp	r1, #0
 8103eb8:	6863      	ldr	r3, [r4, #4]
 8103eba:	dd0b      	ble.n	8103ed4 <_printf_float+0x19c>
 8103ebc:	6121      	str	r1, [r4, #16]
 8103ebe:	b913      	cbnz	r3, 8103ec6 <_printf_float+0x18e>
 8103ec0:	6822      	ldr	r2, [r4, #0]
 8103ec2:	07d0      	lsls	r0, r2, #31
 8103ec4:	d502      	bpl.n	8103ecc <_printf_float+0x194>
 8103ec6:	3301      	adds	r3, #1
 8103ec8:	440b      	add	r3, r1
 8103eca:	6123      	str	r3, [r4, #16]
 8103ecc:	65a1      	str	r1, [r4, #88]	@ 0x58
 8103ece:	f04f 0900 	mov.w	r9, #0
 8103ed2:	e7db      	b.n	8103e8c <_printf_float+0x154>
 8103ed4:	b913      	cbnz	r3, 8103edc <_printf_float+0x1a4>
 8103ed6:	6822      	ldr	r2, [r4, #0]
 8103ed8:	07d2      	lsls	r2, r2, #31
 8103eda:	d501      	bpl.n	8103ee0 <_printf_float+0x1a8>
 8103edc:	3302      	adds	r3, #2
 8103ede:	e7f4      	b.n	8103eca <_printf_float+0x192>
 8103ee0:	2301      	movs	r3, #1
 8103ee2:	e7f2      	b.n	8103eca <_printf_float+0x192>
 8103ee4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8103ee8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8103eea:	4299      	cmp	r1, r3
 8103eec:	db05      	blt.n	8103efa <_printf_float+0x1c2>
 8103eee:	6823      	ldr	r3, [r4, #0]
 8103ef0:	6121      	str	r1, [r4, #16]
 8103ef2:	07d8      	lsls	r0, r3, #31
 8103ef4:	d5ea      	bpl.n	8103ecc <_printf_float+0x194>
 8103ef6:	1c4b      	adds	r3, r1, #1
 8103ef8:	e7e7      	b.n	8103eca <_printf_float+0x192>
 8103efa:	2900      	cmp	r1, #0
 8103efc:	bfd4      	ite	le
 8103efe:	f1c1 0202 	rsble	r2, r1, #2
 8103f02:	2201      	movgt	r2, #1
 8103f04:	4413      	add	r3, r2
 8103f06:	e7e0      	b.n	8103eca <_printf_float+0x192>
 8103f08:	6823      	ldr	r3, [r4, #0]
 8103f0a:	055a      	lsls	r2, r3, #21
 8103f0c:	d407      	bmi.n	8103f1e <_printf_float+0x1e6>
 8103f0e:	6923      	ldr	r3, [r4, #16]
 8103f10:	4642      	mov	r2, r8
 8103f12:	4631      	mov	r1, r6
 8103f14:	4628      	mov	r0, r5
 8103f16:	47b8      	blx	r7
 8103f18:	3001      	adds	r0, #1
 8103f1a:	d12b      	bne.n	8103f74 <_printf_float+0x23c>
 8103f1c:	e767      	b.n	8103dee <_printf_float+0xb6>
 8103f1e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8103f22:	f240 80dd 	bls.w	81040e0 <_printf_float+0x3a8>
 8103f26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8103f2a:	2200      	movs	r2, #0
 8103f2c:	2300      	movs	r3, #0
 8103f2e:	f7fc fe53 	bl	8100bd8 <__aeabi_dcmpeq>
 8103f32:	2800      	cmp	r0, #0
 8103f34:	d033      	beq.n	8103f9e <_printf_float+0x266>
 8103f36:	4a37      	ldr	r2, [pc, #220]	@ (8104014 <_printf_float+0x2dc>)
 8103f38:	2301      	movs	r3, #1
 8103f3a:	4631      	mov	r1, r6
 8103f3c:	4628      	mov	r0, r5
 8103f3e:	47b8      	blx	r7
 8103f40:	3001      	adds	r0, #1
 8103f42:	f43f af54 	beq.w	8103dee <_printf_float+0xb6>
 8103f46:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8103f4a:	4543      	cmp	r3, r8
 8103f4c:	db02      	blt.n	8103f54 <_printf_float+0x21c>
 8103f4e:	6823      	ldr	r3, [r4, #0]
 8103f50:	07d8      	lsls	r0, r3, #31
 8103f52:	d50f      	bpl.n	8103f74 <_printf_float+0x23c>
 8103f54:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8103f58:	4631      	mov	r1, r6
 8103f5a:	4628      	mov	r0, r5
 8103f5c:	47b8      	blx	r7
 8103f5e:	3001      	adds	r0, #1
 8103f60:	f43f af45 	beq.w	8103dee <_printf_float+0xb6>
 8103f64:	f04f 0900 	mov.w	r9, #0
 8103f68:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8103f6c:	f104 0a1a 	add.w	sl, r4, #26
 8103f70:	45c8      	cmp	r8, r9
 8103f72:	dc09      	bgt.n	8103f88 <_printf_float+0x250>
 8103f74:	6823      	ldr	r3, [r4, #0]
 8103f76:	079b      	lsls	r3, r3, #30
 8103f78:	f100 8103 	bmi.w	8104182 <_printf_float+0x44a>
 8103f7c:	68e0      	ldr	r0, [r4, #12]
 8103f7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8103f80:	4298      	cmp	r0, r3
 8103f82:	bfb8      	it	lt
 8103f84:	4618      	movlt	r0, r3
 8103f86:	e734      	b.n	8103df2 <_printf_float+0xba>
 8103f88:	2301      	movs	r3, #1
 8103f8a:	4652      	mov	r2, sl
 8103f8c:	4631      	mov	r1, r6
 8103f8e:	4628      	mov	r0, r5
 8103f90:	47b8      	blx	r7
 8103f92:	3001      	adds	r0, #1
 8103f94:	f43f af2b 	beq.w	8103dee <_printf_float+0xb6>
 8103f98:	f109 0901 	add.w	r9, r9, #1
 8103f9c:	e7e8      	b.n	8103f70 <_printf_float+0x238>
 8103f9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8103fa0:	2b00      	cmp	r3, #0
 8103fa2:	dc39      	bgt.n	8104018 <_printf_float+0x2e0>
 8103fa4:	4a1b      	ldr	r2, [pc, #108]	@ (8104014 <_printf_float+0x2dc>)
 8103fa6:	2301      	movs	r3, #1
 8103fa8:	4631      	mov	r1, r6
 8103faa:	4628      	mov	r0, r5
 8103fac:	47b8      	blx	r7
 8103fae:	3001      	adds	r0, #1
 8103fb0:	f43f af1d 	beq.w	8103dee <_printf_float+0xb6>
 8103fb4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8103fb8:	ea59 0303 	orrs.w	r3, r9, r3
 8103fbc:	d102      	bne.n	8103fc4 <_printf_float+0x28c>
 8103fbe:	6823      	ldr	r3, [r4, #0]
 8103fc0:	07d9      	lsls	r1, r3, #31
 8103fc2:	d5d7      	bpl.n	8103f74 <_printf_float+0x23c>
 8103fc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8103fc8:	4631      	mov	r1, r6
 8103fca:	4628      	mov	r0, r5
 8103fcc:	47b8      	blx	r7
 8103fce:	3001      	adds	r0, #1
 8103fd0:	f43f af0d 	beq.w	8103dee <_printf_float+0xb6>
 8103fd4:	f04f 0a00 	mov.w	sl, #0
 8103fd8:	f104 0b1a 	add.w	fp, r4, #26
 8103fdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8103fde:	425b      	negs	r3, r3
 8103fe0:	4553      	cmp	r3, sl
 8103fe2:	dc01      	bgt.n	8103fe8 <_printf_float+0x2b0>
 8103fe4:	464b      	mov	r3, r9
 8103fe6:	e793      	b.n	8103f10 <_printf_float+0x1d8>
 8103fe8:	2301      	movs	r3, #1
 8103fea:	465a      	mov	r2, fp
 8103fec:	4631      	mov	r1, r6
 8103fee:	4628      	mov	r0, r5
 8103ff0:	47b8      	blx	r7
 8103ff2:	3001      	adds	r0, #1
 8103ff4:	f43f aefb 	beq.w	8103dee <_printf_float+0xb6>
 8103ff8:	f10a 0a01 	add.w	sl, sl, #1
 8103ffc:	e7ee      	b.n	8103fdc <_printf_float+0x2a4>
 8103ffe:	bf00      	nop
 8104000:	7fefffff 	.word	0x7fefffff
 8104004:	081082f8 	.word	0x081082f8
 8104008:	081082fc 	.word	0x081082fc
 810400c:	08108300 	.word	0x08108300
 8104010:	08108304 	.word	0x08108304
 8104014:	08108308 	.word	0x08108308
 8104018:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 810401a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 810401e:	4553      	cmp	r3, sl
 8104020:	bfa8      	it	ge
 8104022:	4653      	movge	r3, sl
 8104024:	2b00      	cmp	r3, #0
 8104026:	4699      	mov	r9, r3
 8104028:	dc36      	bgt.n	8104098 <_printf_float+0x360>
 810402a:	f04f 0b00 	mov.w	fp, #0
 810402e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8104032:	f104 021a 	add.w	r2, r4, #26
 8104036:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8104038:	9306      	str	r3, [sp, #24]
 810403a:	eba3 0309 	sub.w	r3, r3, r9
 810403e:	455b      	cmp	r3, fp
 8104040:	dc31      	bgt.n	81040a6 <_printf_float+0x36e>
 8104042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8104044:	459a      	cmp	sl, r3
 8104046:	dc3a      	bgt.n	81040be <_printf_float+0x386>
 8104048:	6823      	ldr	r3, [r4, #0]
 810404a:	07da      	lsls	r2, r3, #31
 810404c:	d437      	bmi.n	81040be <_printf_float+0x386>
 810404e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8104050:	ebaa 0903 	sub.w	r9, sl, r3
 8104054:	9b06      	ldr	r3, [sp, #24]
 8104056:	ebaa 0303 	sub.w	r3, sl, r3
 810405a:	4599      	cmp	r9, r3
 810405c:	bfa8      	it	ge
 810405e:	4699      	movge	r9, r3
 8104060:	f1b9 0f00 	cmp.w	r9, #0
 8104064:	dc33      	bgt.n	81040ce <_printf_float+0x396>
 8104066:	f04f 0800 	mov.w	r8, #0
 810406a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 810406e:	f104 0b1a 	add.w	fp, r4, #26
 8104072:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8104074:	ebaa 0303 	sub.w	r3, sl, r3
 8104078:	eba3 0309 	sub.w	r3, r3, r9
 810407c:	4543      	cmp	r3, r8
 810407e:	f77f af79 	ble.w	8103f74 <_printf_float+0x23c>
 8104082:	2301      	movs	r3, #1
 8104084:	465a      	mov	r2, fp
 8104086:	4631      	mov	r1, r6
 8104088:	4628      	mov	r0, r5
 810408a:	47b8      	blx	r7
 810408c:	3001      	adds	r0, #1
 810408e:	f43f aeae 	beq.w	8103dee <_printf_float+0xb6>
 8104092:	f108 0801 	add.w	r8, r8, #1
 8104096:	e7ec      	b.n	8104072 <_printf_float+0x33a>
 8104098:	4642      	mov	r2, r8
 810409a:	4631      	mov	r1, r6
 810409c:	4628      	mov	r0, r5
 810409e:	47b8      	blx	r7
 81040a0:	3001      	adds	r0, #1
 81040a2:	d1c2      	bne.n	810402a <_printf_float+0x2f2>
 81040a4:	e6a3      	b.n	8103dee <_printf_float+0xb6>
 81040a6:	2301      	movs	r3, #1
 81040a8:	4631      	mov	r1, r6
 81040aa:	4628      	mov	r0, r5
 81040ac:	9206      	str	r2, [sp, #24]
 81040ae:	47b8      	blx	r7
 81040b0:	3001      	adds	r0, #1
 81040b2:	f43f ae9c 	beq.w	8103dee <_printf_float+0xb6>
 81040b6:	9a06      	ldr	r2, [sp, #24]
 81040b8:	f10b 0b01 	add.w	fp, fp, #1
 81040bc:	e7bb      	b.n	8104036 <_printf_float+0x2fe>
 81040be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 81040c2:	4631      	mov	r1, r6
 81040c4:	4628      	mov	r0, r5
 81040c6:	47b8      	blx	r7
 81040c8:	3001      	adds	r0, #1
 81040ca:	d1c0      	bne.n	810404e <_printf_float+0x316>
 81040cc:	e68f      	b.n	8103dee <_printf_float+0xb6>
 81040ce:	9a06      	ldr	r2, [sp, #24]
 81040d0:	464b      	mov	r3, r9
 81040d2:	4442      	add	r2, r8
 81040d4:	4631      	mov	r1, r6
 81040d6:	4628      	mov	r0, r5
 81040d8:	47b8      	blx	r7
 81040da:	3001      	adds	r0, #1
 81040dc:	d1c3      	bne.n	8104066 <_printf_float+0x32e>
 81040de:	e686      	b.n	8103dee <_printf_float+0xb6>
 81040e0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 81040e4:	f1ba 0f01 	cmp.w	sl, #1
 81040e8:	dc01      	bgt.n	81040ee <_printf_float+0x3b6>
 81040ea:	07db      	lsls	r3, r3, #31
 81040ec:	d536      	bpl.n	810415c <_printf_float+0x424>
 81040ee:	2301      	movs	r3, #1
 81040f0:	4642      	mov	r2, r8
 81040f2:	4631      	mov	r1, r6
 81040f4:	4628      	mov	r0, r5
 81040f6:	47b8      	blx	r7
 81040f8:	3001      	adds	r0, #1
 81040fa:	f43f ae78 	beq.w	8103dee <_printf_float+0xb6>
 81040fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8104102:	4631      	mov	r1, r6
 8104104:	4628      	mov	r0, r5
 8104106:	47b8      	blx	r7
 8104108:	3001      	adds	r0, #1
 810410a:	f43f ae70 	beq.w	8103dee <_printf_float+0xb6>
 810410e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8104112:	2200      	movs	r2, #0
 8104114:	2300      	movs	r3, #0
 8104116:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 810411a:	f7fc fd5d 	bl	8100bd8 <__aeabi_dcmpeq>
 810411e:	b9c0      	cbnz	r0, 8104152 <_printf_float+0x41a>
 8104120:	4653      	mov	r3, sl
 8104122:	f108 0201 	add.w	r2, r8, #1
 8104126:	4631      	mov	r1, r6
 8104128:	4628      	mov	r0, r5
 810412a:	47b8      	blx	r7
 810412c:	3001      	adds	r0, #1
 810412e:	d10c      	bne.n	810414a <_printf_float+0x412>
 8104130:	e65d      	b.n	8103dee <_printf_float+0xb6>
 8104132:	2301      	movs	r3, #1
 8104134:	465a      	mov	r2, fp
 8104136:	4631      	mov	r1, r6
 8104138:	4628      	mov	r0, r5
 810413a:	47b8      	blx	r7
 810413c:	3001      	adds	r0, #1
 810413e:	f43f ae56 	beq.w	8103dee <_printf_float+0xb6>
 8104142:	f108 0801 	add.w	r8, r8, #1
 8104146:	45d0      	cmp	r8, sl
 8104148:	dbf3      	blt.n	8104132 <_printf_float+0x3fa>
 810414a:	464b      	mov	r3, r9
 810414c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8104150:	e6df      	b.n	8103f12 <_printf_float+0x1da>
 8104152:	f04f 0800 	mov.w	r8, #0
 8104156:	f104 0b1a 	add.w	fp, r4, #26
 810415a:	e7f4      	b.n	8104146 <_printf_float+0x40e>
 810415c:	2301      	movs	r3, #1
 810415e:	4642      	mov	r2, r8
 8104160:	e7e1      	b.n	8104126 <_printf_float+0x3ee>
 8104162:	2301      	movs	r3, #1
 8104164:	464a      	mov	r2, r9
 8104166:	4631      	mov	r1, r6
 8104168:	4628      	mov	r0, r5
 810416a:	47b8      	blx	r7
 810416c:	3001      	adds	r0, #1
 810416e:	f43f ae3e 	beq.w	8103dee <_printf_float+0xb6>
 8104172:	f108 0801 	add.w	r8, r8, #1
 8104176:	68e3      	ldr	r3, [r4, #12]
 8104178:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 810417a:	1a5b      	subs	r3, r3, r1
 810417c:	4543      	cmp	r3, r8
 810417e:	dcf0      	bgt.n	8104162 <_printf_float+0x42a>
 8104180:	e6fc      	b.n	8103f7c <_printf_float+0x244>
 8104182:	f04f 0800 	mov.w	r8, #0
 8104186:	f104 0919 	add.w	r9, r4, #25
 810418a:	e7f4      	b.n	8104176 <_printf_float+0x43e>

0810418c <_printf_common>:
 810418c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8104190:	4616      	mov	r6, r2
 8104192:	4698      	mov	r8, r3
 8104194:	688a      	ldr	r2, [r1, #8]
 8104196:	690b      	ldr	r3, [r1, #16]
 8104198:	f8dd 9020 	ldr.w	r9, [sp, #32]
 810419c:	4293      	cmp	r3, r2
 810419e:	bfb8      	it	lt
 81041a0:	4613      	movlt	r3, r2
 81041a2:	6033      	str	r3, [r6, #0]
 81041a4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 81041a8:	4607      	mov	r7, r0
 81041aa:	460c      	mov	r4, r1
 81041ac:	b10a      	cbz	r2, 81041b2 <_printf_common+0x26>
 81041ae:	3301      	adds	r3, #1
 81041b0:	6033      	str	r3, [r6, #0]
 81041b2:	6823      	ldr	r3, [r4, #0]
 81041b4:	0699      	lsls	r1, r3, #26
 81041b6:	bf42      	ittt	mi
 81041b8:	6833      	ldrmi	r3, [r6, #0]
 81041ba:	3302      	addmi	r3, #2
 81041bc:	6033      	strmi	r3, [r6, #0]
 81041be:	6825      	ldr	r5, [r4, #0]
 81041c0:	f015 0506 	ands.w	r5, r5, #6
 81041c4:	d106      	bne.n	81041d4 <_printf_common+0x48>
 81041c6:	f104 0a19 	add.w	sl, r4, #25
 81041ca:	68e3      	ldr	r3, [r4, #12]
 81041cc:	6832      	ldr	r2, [r6, #0]
 81041ce:	1a9b      	subs	r3, r3, r2
 81041d0:	42ab      	cmp	r3, r5
 81041d2:	dc26      	bgt.n	8104222 <_printf_common+0x96>
 81041d4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 81041d8:	6822      	ldr	r2, [r4, #0]
 81041da:	3b00      	subs	r3, #0
 81041dc:	bf18      	it	ne
 81041de:	2301      	movne	r3, #1
 81041e0:	0692      	lsls	r2, r2, #26
 81041e2:	d42b      	bmi.n	810423c <_printf_common+0xb0>
 81041e4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 81041e8:	4641      	mov	r1, r8
 81041ea:	4638      	mov	r0, r7
 81041ec:	47c8      	blx	r9
 81041ee:	3001      	adds	r0, #1
 81041f0:	d01e      	beq.n	8104230 <_printf_common+0xa4>
 81041f2:	6823      	ldr	r3, [r4, #0]
 81041f4:	6922      	ldr	r2, [r4, #16]
 81041f6:	f003 0306 	and.w	r3, r3, #6
 81041fa:	2b04      	cmp	r3, #4
 81041fc:	bf02      	ittt	eq
 81041fe:	68e5      	ldreq	r5, [r4, #12]
 8104200:	6833      	ldreq	r3, [r6, #0]
 8104202:	1aed      	subeq	r5, r5, r3
 8104204:	68a3      	ldr	r3, [r4, #8]
 8104206:	bf0c      	ite	eq
 8104208:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 810420c:	2500      	movne	r5, #0
 810420e:	4293      	cmp	r3, r2
 8104210:	bfc4      	itt	gt
 8104212:	1a9b      	subgt	r3, r3, r2
 8104214:	18ed      	addgt	r5, r5, r3
 8104216:	2600      	movs	r6, #0
 8104218:	341a      	adds	r4, #26
 810421a:	42b5      	cmp	r5, r6
 810421c:	d11a      	bne.n	8104254 <_printf_common+0xc8>
 810421e:	2000      	movs	r0, #0
 8104220:	e008      	b.n	8104234 <_printf_common+0xa8>
 8104222:	2301      	movs	r3, #1
 8104224:	4652      	mov	r2, sl
 8104226:	4641      	mov	r1, r8
 8104228:	4638      	mov	r0, r7
 810422a:	47c8      	blx	r9
 810422c:	3001      	adds	r0, #1
 810422e:	d103      	bne.n	8104238 <_printf_common+0xac>
 8104230:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8104234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104238:	3501      	adds	r5, #1
 810423a:	e7c6      	b.n	81041ca <_printf_common+0x3e>
 810423c:	18e1      	adds	r1, r4, r3
 810423e:	1c5a      	adds	r2, r3, #1
 8104240:	2030      	movs	r0, #48	@ 0x30
 8104242:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8104246:	4422      	add	r2, r4
 8104248:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 810424c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8104250:	3302      	adds	r3, #2
 8104252:	e7c7      	b.n	81041e4 <_printf_common+0x58>
 8104254:	2301      	movs	r3, #1
 8104256:	4622      	mov	r2, r4
 8104258:	4641      	mov	r1, r8
 810425a:	4638      	mov	r0, r7
 810425c:	47c8      	blx	r9
 810425e:	3001      	adds	r0, #1
 8104260:	d0e6      	beq.n	8104230 <_printf_common+0xa4>
 8104262:	3601      	adds	r6, #1
 8104264:	e7d9      	b.n	810421a <_printf_common+0x8e>
	...

08104268 <_printf_i>:
 8104268:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 810426c:	7e0f      	ldrb	r7, [r1, #24]
 810426e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8104270:	2f78      	cmp	r7, #120	@ 0x78
 8104272:	4691      	mov	r9, r2
 8104274:	4680      	mov	r8, r0
 8104276:	460c      	mov	r4, r1
 8104278:	469a      	mov	sl, r3
 810427a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 810427e:	d807      	bhi.n	8104290 <_printf_i+0x28>
 8104280:	2f62      	cmp	r7, #98	@ 0x62
 8104282:	d80a      	bhi.n	810429a <_printf_i+0x32>
 8104284:	2f00      	cmp	r7, #0
 8104286:	f000 80d2 	beq.w	810442e <_printf_i+0x1c6>
 810428a:	2f58      	cmp	r7, #88	@ 0x58
 810428c:	f000 80b9 	beq.w	8104402 <_printf_i+0x19a>
 8104290:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8104294:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8104298:	e03a      	b.n	8104310 <_printf_i+0xa8>
 810429a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 810429e:	2b15      	cmp	r3, #21
 81042a0:	d8f6      	bhi.n	8104290 <_printf_i+0x28>
 81042a2:	a101      	add	r1, pc, #4	@ (adr r1, 81042a8 <_printf_i+0x40>)
 81042a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 81042a8:	08104301 	.word	0x08104301
 81042ac:	08104315 	.word	0x08104315
 81042b0:	08104291 	.word	0x08104291
 81042b4:	08104291 	.word	0x08104291
 81042b8:	08104291 	.word	0x08104291
 81042bc:	08104291 	.word	0x08104291
 81042c0:	08104315 	.word	0x08104315
 81042c4:	08104291 	.word	0x08104291
 81042c8:	08104291 	.word	0x08104291
 81042cc:	08104291 	.word	0x08104291
 81042d0:	08104291 	.word	0x08104291
 81042d4:	08104415 	.word	0x08104415
 81042d8:	0810433f 	.word	0x0810433f
 81042dc:	081043cf 	.word	0x081043cf
 81042e0:	08104291 	.word	0x08104291
 81042e4:	08104291 	.word	0x08104291
 81042e8:	08104437 	.word	0x08104437
 81042ec:	08104291 	.word	0x08104291
 81042f0:	0810433f 	.word	0x0810433f
 81042f4:	08104291 	.word	0x08104291
 81042f8:	08104291 	.word	0x08104291
 81042fc:	081043d7 	.word	0x081043d7
 8104300:	6833      	ldr	r3, [r6, #0]
 8104302:	1d1a      	adds	r2, r3, #4
 8104304:	681b      	ldr	r3, [r3, #0]
 8104306:	6032      	str	r2, [r6, #0]
 8104308:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 810430c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8104310:	2301      	movs	r3, #1
 8104312:	e09d      	b.n	8104450 <_printf_i+0x1e8>
 8104314:	6833      	ldr	r3, [r6, #0]
 8104316:	6820      	ldr	r0, [r4, #0]
 8104318:	1d19      	adds	r1, r3, #4
 810431a:	6031      	str	r1, [r6, #0]
 810431c:	0606      	lsls	r6, r0, #24
 810431e:	d501      	bpl.n	8104324 <_printf_i+0xbc>
 8104320:	681d      	ldr	r5, [r3, #0]
 8104322:	e003      	b.n	810432c <_printf_i+0xc4>
 8104324:	0645      	lsls	r5, r0, #25
 8104326:	d5fb      	bpl.n	8104320 <_printf_i+0xb8>
 8104328:	f9b3 5000 	ldrsh.w	r5, [r3]
 810432c:	2d00      	cmp	r5, #0
 810432e:	da03      	bge.n	8104338 <_printf_i+0xd0>
 8104330:	232d      	movs	r3, #45	@ 0x2d
 8104332:	426d      	negs	r5, r5
 8104334:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8104338:	4859      	ldr	r0, [pc, #356]	@ (81044a0 <_printf_i+0x238>)
 810433a:	230a      	movs	r3, #10
 810433c:	e011      	b.n	8104362 <_printf_i+0xfa>
 810433e:	6821      	ldr	r1, [r4, #0]
 8104340:	6833      	ldr	r3, [r6, #0]
 8104342:	0608      	lsls	r0, r1, #24
 8104344:	f853 5b04 	ldr.w	r5, [r3], #4
 8104348:	d402      	bmi.n	8104350 <_printf_i+0xe8>
 810434a:	0649      	lsls	r1, r1, #25
 810434c:	bf48      	it	mi
 810434e:	b2ad      	uxthmi	r5, r5
 8104350:	2f6f      	cmp	r7, #111	@ 0x6f
 8104352:	4853      	ldr	r0, [pc, #332]	@ (81044a0 <_printf_i+0x238>)
 8104354:	6033      	str	r3, [r6, #0]
 8104356:	bf14      	ite	ne
 8104358:	230a      	movne	r3, #10
 810435a:	2308      	moveq	r3, #8
 810435c:	2100      	movs	r1, #0
 810435e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8104362:	6866      	ldr	r6, [r4, #4]
 8104364:	60a6      	str	r6, [r4, #8]
 8104366:	2e00      	cmp	r6, #0
 8104368:	bfa2      	ittt	ge
 810436a:	6821      	ldrge	r1, [r4, #0]
 810436c:	f021 0104 	bicge.w	r1, r1, #4
 8104370:	6021      	strge	r1, [r4, #0]
 8104372:	b90d      	cbnz	r5, 8104378 <_printf_i+0x110>
 8104374:	2e00      	cmp	r6, #0
 8104376:	d04b      	beq.n	8104410 <_printf_i+0x1a8>
 8104378:	4616      	mov	r6, r2
 810437a:	fbb5 f1f3 	udiv	r1, r5, r3
 810437e:	fb03 5711 	mls	r7, r3, r1, r5
 8104382:	5dc7      	ldrb	r7, [r0, r7]
 8104384:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8104388:	462f      	mov	r7, r5
 810438a:	42bb      	cmp	r3, r7
 810438c:	460d      	mov	r5, r1
 810438e:	d9f4      	bls.n	810437a <_printf_i+0x112>
 8104390:	2b08      	cmp	r3, #8
 8104392:	d10b      	bne.n	81043ac <_printf_i+0x144>
 8104394:	6823      	ldr	r3, [r4, #0]
 8104396:	07df      	lsls	r7, r3, #31
 8104398:	d508      	bpl.n	81043ac <_printf_i+0x144>
 810439a:	6923      	ldr	r3, [r4, #16]
 810439c:	6861      	ldr	r1, [r4, #4]
 810439e:	4299      	cmp	r1, r3
 81043a0:	bfde      	ittt	le
 81043a2:	2330      	movle	r3, #48	@ 0x30
 81043a4:	f806 3c01 	strble.w	r3, [r6, #-1]
 81043a8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 81043ac:	1b92      	subs	r2, r2, r6
 81043ae:	6122      	str	r2, [r4, #16]
 81043b0:	f8cd a000 	str.w	sl, [sp]
 81043b4:	464b      	mov	r3, r9
 81043b6:	aa03      	add	r2, sp, #12
 81043b8:	4621      	mov	r1, r4
 81043ba:	4640      	mov	r0, r8
 81043bc:	f7ff fee6 	bl	810418c <_printf_common>
 81043c0:	3001      	adds	r0, #1
 81043c2:	d14a      	bne.n	810445a <_printf_i+0x1f2>
 81043c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81043c8:	b004      	add	sp, #16
 81043ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81043ce:	6823      	ldr	r3, [r4, #0]
 81043d0:	f043 0320 	orr.w	r3, r3, #32
 81043d4:	6023      	str	r3, [r4, #0]
 81043d6:	4833      	ldr	r0, [pc, #204]	@ (81044a4 <_printf_i+0x23c>)
 81043d8:	2778      	movs	r7, #120	@ 0x78
 81043da:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 81043de:	6823      	ldr	r3, [r4, #0]
 81043e0:	6831      	ldr	r1, [r6, #0]
 81043e2:	061f      	lsls	r7, r3, #24
 81043e4:	f851 5b04 	ldr.w	r5, [r1], #4
 81043e8:	d402      	bmi.n	81043f0 <_printf_i+0x188>
 81043ea:	065f      	lsls	r7, r3, #25
 81043ec:	bf48      	it	mi
 81043ee:	b2ad      	uxthmi	r5, r5
 81043f0:	6031      	str	r1, [r6, #0]
 81043f2:	07d9      	lsls	r1, r3, #31
 81043f4:	bf44      	itt	mi
 81043f6:	f043 0320 	orrmi.w	r3, r3, #32
 81043fa:	6023      	strmi	r3, [r4, #0]
 81043fc:	b11d      	cbz	r5, 8104406 <_printf_i+0x19e>
 81043fe:	2310      	movs	r3, #16
 8104400:	e7ac      	b.n	810435c <_printf_i+0xf4>
 8104402:	4827      	ldr	r0, [pc, #156]	@ (81044a0 <_printf_i+0x238>)
 8104404:	e7e9      	b.n	81043da <_printf_i+0x172>
 8104406:	6823      	ldr	r3, [r4, #0]
 8104408:	f023 0320 	bic.w	r3, r3, #32
 810440c:	6023      	str	r3, [r4, #0]
 810440e:	e7f6      	b.n	81043fe <_printf_i+0x196>
 8104410:	4616      	mov	r6, r2
 8104412:	e7bd      	b.n	8104390 <_printf_i+0x128>
 8104414:	6833      	ldr	r3, [r6, #0]
 8104416:	6825      	ldr	r5, [r4, #0]
 8104418:	6961      	ldr	r1, [r4, #20]
 810441a:	1d18      	adds	r0, r3, #4
 810441c:	6030      	str	r0, [r6, #0]
 810441e:	062e      	lsls	r6, r5, #24
 8104420:	681b      	ldr	r3, [r3, #0]
 8104422:	d501      	bpl.n	8104428 <_printf_i+0x1c0>
 8104424:	6019      	str	r1, [r3, #0]
 8104426:	e002      	b.n	810442e <_printf_i+0x1c6>
 8104428:	0668      	lsls	r0, r5, #25
 810442a:	d5fb      	bpl.n	8104424 <_printf_i+0x1bc>
 810442c:	8019      	strh	r1, [r3, #0]
 810442e:	2300      	movs	r3, #0
 8104430:	6123      	str	r3, [r4, #16]
 8104432:	4616      	mov	r6, r2
 8104434:	e7bc      	b.n	81043b0 <_printf_i+0x148>
 8104436:	6833      	ldr	r3, [r6, #0]
 8104438:	1d1a      	adds	r2, r3, #4
 810443a:	6032      	str	r2, [r6, #0]
 810443c:	681e      	ldr	r6, [r3, #0]
 810443e:	6862      	ldr	r2, [r4, #4]
 8104440:	2100      	movs	r1, #0
 8104442:	4630      	mov	r0, r6
 8104444:	f7fb ff4c 	bl	81002e0 <memchr>
 8104448:	b108      	cbz	r0, 810444e <_printf_i+0x1e6>
 810444a:	1b80      	subs	r0, r0, r6
 810444c:	6060      	str	r0, [r4, #4]
 810444e:	6863      	ldr	r3, [r4, #4]
 8104450:	6123      	str	r3, [r4, #16]
 8104452:	2300      	movs	r3, #0
 8104454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8104458:	e7aa      	b.n	81043b0 <_printf_i+0x148>
 810445a:	6923      	ldr	r3, [r4, #16]
 810445c:	4632      	mov	r2, r6
 810445e:	4649      	mov	r1, r9
 8104460:	4640      	mov	r0, r8
 8104462:	47d0      	blx	sl
 8104464:	3001      	adds	r0, #1
 8104466:	d0ad      	beq.n	81043c4 <_printf_i+0x15c>
 8104468:	6823      	ldr	r3, [r4, #0]
 810446a:	079b      	lsls	r3, r3, #30
 810446c:	d413      	bmi.n	8104496 <_printf_i+0x22e>
 810446e:	68e0      	ldr	r0, [r4, #12]
 8104470:	9b03      	ldr	r3, [sp, #12]
 8104472:	4298      	cmp	r0, r3
 8104474:	bfb8      	it	lt
 8104476:	4618      	movlt	r0, r3
 8104478:	e7a6      	b.n	81043c8 <_printf_i+0x160>
 810447a:	2301      	movs	r3, #1
 810447c:	4632      	mov	r2, r6
 810447e:	4649      	mov	r1, r9
 8104480:	4640      	mov	r0, r8
 8104482:	47d0      	blx	sl
 8104484:	3001      	adds	r0, #1
 8104486:	d09d      	beq.n	81043c4 <_printf_i+0x15c>
 8104488:	3501      	adds	r5, #1
 810448a:	68e3      	ldr	r3, [r4, #12]
 810448c:	9903      	ldr	r1, [sp, #12]
 810448e:	1a5b      	subs	r3, r3, r1
 8104490:	42ab      	cmp	r3, r5
 8104492:	dcf2      	bgt.n	810447a <_printf_i+0x212>
 8104494:	e7eb      	b.n	810446e <_printf_i+0x206>
 8104496:	2500      	movs	r5, #0
 8104498:	f104 0619 	add.w	r6, r4, #25
 810449c:	e7f5      	b.n	810448a <_printf_i+0x222>
 810449e:	bf00      	nop
 81044a0:	0810830a 	.word	0x0810830a
 81044a4:	0810831b 	.word	0x0810831b

081044a8 <_scanf_float>:
 81044a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81044ac:	b087      	sub	sp, #28
 81044ae:	4617      	mov	r7, r2
 81044b0:	9303      	str	r3, [sp, #12]
 81044b2:	688b      	ldr	r3, [r1, #8]
 81044b4:	1e5a      	subs	r2, r3, #1
 81044b6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 81044ba:	bf81      	itttt	hi
 81044bc:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 81044c0:	eb03 0b05 	addhi.w	fp, r3, r5
 81044c4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 81044c8:	608b      	strhi	r3, [r1, #8]
 81044ca:	680b      	ldr	r3, [r1, #0]
 81044cc:	460a      	mov	r2, r1
 81044ce:	f04f 0500 	mov.w	r5, #0
 81044d2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 81044d6:	f842 3b1c 	str.w	r3, [r2], #28
 81044da:	e9cd 5504 	strd	r5, r5, [sp, #16]
 81044de:	4680      	mov	r8, r0
 81044e0:	460c      	mov	r4, r1
 81044e2:	bf98      	it	ls
 81044e4:	f04f 0b00 	movls.w	fp, #0
 81044e8:	9201      	str	r2, [sp, #4]
 81044ea:	4616      	mov	r6, r2
 81044ec:	46aa      	mov	sl, r5
 81044ee:	46a9      	mov	r9, r5
 81044f0:	9502      	str	r5, [sp, #8]
 81044f2:	68a2      	ldr	r2, [r4, #8]
 81044f4:	b152      	cbz	r2, 810450c <_scanf_float+0x64>
 81044f6:	683b      	ldr	r3, [r7, #0]
 81044f8:	781b      	ldrb	r3, [r3, #0]
 81044fa:	2b4e      	cmp	r3, #78	@ 0x4e
 81044fc:	d864      	bhi.n	81045c8 <_scanf_float+0x120>
 81044fe:	2b40      	cmp	r3, #64	@ 0x40
 8104500:	d83c      	bhi.n	810457c <_scanf_float+0xd4>
 8104502:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8104506:	b2c8      	uxtb	r0, r1
 8104508:	280e      	cmp	r0, #14
 810450a:	d93a      	bls.n	8104582 <_scanf_float+0xda>
 810450c:	f1b9 0f00 	cmp.w	r9, #0
 8104510:	d003      	beq.n	810451a <_scanf_float+0x72>
 8104512:	6823      	ldr	r3, [r4, #0]
 8104514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8104518:	6023      	str	r3, [r4, #0]
 810451a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 810451e:	f1ba 0f01 	cmp.w	sl, #1
 8104522:	f200 8117 	bhi.w	8104754 <_scanf_float+0x2ac>
 8104526:	9b01      	ldr	r3, [sp, #4]
 8104528:	429e      	cmp	r6, r3
 810452a:	f200 8108 	bhi.w	810473e <_scanf_float+0x296>
 810452e:	2001      	movs	r0, #1
 8104530:	b007      	add	sp, #28
 8104532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8104536:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 810453a:	2a0d      	cmp	r2, #13
 810453c:	d8e6      	bhi.n	810450c <_scanf_float+0x64>
 810453e:	a101      	add	r1, pc, #4	@ (adr r1, 8104544 <_scanf_float+0x9c>)
 8104540:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8104544:	0810468b 	.word	0x0810468b
 8104548:	0810450d 	.word	0x0810450d
 810454c:	0810450d 	.word	0x0810450d
 8104550:	0810450d 	.word	0x0810450d
 8104554:	081046eb 	.word	0x081046eb
 8104558:	081046c3 	.word	0x081046c3
 810455c:	0810450d 	.word	0x0810450d
 8104560:	0810450d 	.word	0x0810450d
 8104564:	08104699 	.word	0x08104699
 8104568:	0810450d 	.word	0x0810450d
 810456c:	0810450d 	.word	0x0810450d
 8104570:	0810450d 	.word	0x0810450d
 8104574:	0810450d 	.word	0x0810450d
 8104578:	08104651 	.word	0x08104651
 810457c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8104580:	e7db      	b.n	810453a <_scanf_float+0x92>
 8104582:	290e      	cmp	r1, #14
 8104584:	d8c2      	bhi.n	810450c <_scanf_float+0x64>
 8104586:	a001      	add	r0, pc, #4	@ (adr r0, 810458c <_scanf_float+0xe4>)
 8104588:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 810458c:	08104641 	.word	0x08104641
 8104590:	0810450d 	.word	0x0810450d
 8104594:	08104641 	.word	0x08104641
 8104598:	081046d7 	.word	0x081046d7
 810459c:	0810450d 	.word	0x0810450d
 81045a0:	081045e9 	.word	0x081045e9
 81045a4:	08104627 	.word	0x08104627
 81045a8:	08104627 	.word	0x08104627
 81045ac:	08104627 	.word	0x08104627
 81045b0:	08104627 	.word	0x08104627
 81045b4:	08104627 	.word	0x08104627
 81045b8:	08104627 	.word	0x08104627
 81045bc:	08104627 	.word	0x08104627
 81045c0:	08104627 	.word	0x08104627
 81045c4:	08104627 	.word	0x08104627
 81045c8:	2b6e      	cmp	r3, #110	@ 0x6e
 81045ca:	d809      	bhi.n	81045e0 <_scanf_float+0x138>
 81045cc:	2b60      	cmp	r3, #96	@ 0x60
 81045ce:	d8b2      	bhi.n	8104536 <_scanf_float+0x8e>
 81045d0:	2b54      	cmp	r3, #84	@ 0x54
 81045d2:	d07b      	beq.n	81046cc <_scanf_float+0x224>
 81045d4:	2b59      	cmp	r3, #89	@ 0x59
 81045d6:	d199      	bne.n	810450c <_scanf_float+0x64>
 81045d8:	2d07      	cmp	r5, #7
 81045da:	d197      	bne.n	810450c <_scanf_float+0x64>
 81045dc:	2508      	movs	r5, #8
 81045de:	e02c      	b.n	810463a <_scanf_float+0x192>
 81045e0:	2b74      	cmp	r3, #116	@ 0x74
 81045e2:	d073      	beq.n	81046cc <_scanf_float+0x224>
 81045e4:	2b79      	cmp	r3, #121	@ 0x79
 81045e6:	e7f6      	b.n	81045d6 <_scanf_float+0x12e>
 81045e8:	6821      	ldr	r1, [r4, #0]
 81045ea:	05c8      	lsls	r0, r1, #23
 81045ec:	d51b      	bpl.n	8104626 <_scanf_float+0x17e>
 81045ee:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 81045f2:	6021      	str	r1, [r4, #0]
 81045f4:	f109 0901 	add.w	r9, r9, #1
 81045f8:	f1bb 0f00 	cmp.w	fp, #0
 81045fc:	d003      	beq.n	8104606 <_scanf_float+0x15e>
 81045fe:	3201      	adds	r2, #1
 8104600:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8104604:	60a2      	str	r2, [r4, #8]
 8104606:	68a3      	ldr	r3, [r4, #8]
 8104608:	3b01      	subs	r3, #1
 810460a:	60a3      	str	r3, [r4, #8]
 810460c:	6923      	ldr	r3, [r4, #16]
 810460e:	3301      	adds	r3, #1
 8104610:	6123      	str	r3, [r4, #16]
 8104612:	687b      	ldr	r3, [r7, #4]
 8104614:	3b01      	subs	r3, #1
 8104616:	2b00      	cmp	r3, #0
 8104618:	607b      	str	r3, [r7, #4]
 810461a:	f340 8087 	ble.w	810472c <_scanf_float+0x284>
 810461e:	683b      	ldr	r3, [r7, #0]
 8104620:	3301      	adds	r3, #1
 8104622:	603b      	str	r3, [r7, #0]
 8104624:	e765      	b.n	81044f2 <_scanf_float+0x4a>
 8104626:	eb1a 0105 	adds.w	r1, sl, r5
 810462a:	f47f af6f 	bne.w	810450c <_scanf_float+0x64>
 810462e:	6822      	ldr	r2, [r4, #0]
 8104630:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8104634:	6022      	str	r2, [r4, #0]
 8104636:	460d      	mov	r5, r1
 8104638:	468a      	mov	sl, r1
 810463a:	f806 3b01 	strb.w	r3, [r6], #1
 810463e:	e7e2      	b.n	8104606 <_scanf_float+0x15e>
 8104640:	6822      	ldr	r2, [r4, #0]
 8104642:	0610      	lsls	r0, r2, #24
 8104644:	f57f af62 	bpl.w	810450c <_scanf_float+0x64>
 8104648:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 810464c:	6022      	str	r2, [r4, #0]
 810464e:	e7f4      	b.n	810463a <_scanf_float+0x192>
 8104650:	f1ba 0f00 	cmp.w	sl, #0
 8104654:	d10e      	bne.n	8104674 <_scanf_float+0x1cc>
 8104656:	f1b9 0f00 	cmp.w	r9, #0
 810465a:	d10e      	bne.n	810467a <_scanf_float+0x1d2>
 810465c:	6822      	ldr	r2, [r4, #0]
 810465e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8104662:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8104666:	d108      	bne.n	810467a <_scanf_float+0x1d2>
 8104668:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810466c:	6022      	str	r2, [r4, #0]
 810466e:	f04f 0a01 	mov.w	sl, #1
 8104672:	e7e2      	b.n	810463a <_scanf_float+0x192>
 8104674:	f1ba 0f02 	cmp.w	sl, #2
 8104678:	d055      	beq.n	8104726 <_scanf_float+0x27e>
 810467a:	2d01      	cmp	r5, #1
 810467c:	d002      	beq.n	8104684 <_scanf_float+0x1dc>
 810467e:	2d04      	cmp	r5, #4
 8104680:	f47f af44 	bne.w	810450c <_scanf_float+0x64>
 8104684:	3501      	adds	r5, #1
 8104686:	b2ed      	uxtb	r5, r5
 8104688:	e7d7      	b.n	810463a <_scanf_float+0x192>
 810468a:	f1ba 0f01 	cmp.w	sl, #1
 810468e:	f47f af3d 	bne.w	810450c <_scanf_float+0x64>
 8104692:	f04f 0a02 	mov.w	sl, #2
 8104696:	e7d0      	b.n	810463a <_scanf_float+0x192>
 8104698:	b97d      	cbnz	r5, 81046ba <_scanf_float+0x212>
 810469a:	f1b9 0f00 	cmp.w	r9, #0
 810469e:	f47f af38 	bne.w	8104512 <_scanf_float+0x6a>
 81046a2:	6822      	ldr	r2, [r4, #0]
 81046a4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 81046a8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 81046ac:	f040 8108 	bne.w	81048c0 <_scanf_float+0x418>
 81046b0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 81046b4:	6022      	str	r2, [r4, #0]
 81046b6:	2501      	movs	r5, #1
 81046b8:	e7bf      	b.n	810463a <_scanf_float+0x192>
 81046ba:	2d03      	cmp	r5, #3
 81046bc:	d0e2      	beq.n	8104684 <_scanf_float+0x1dc>
 81046be:	2d05      	cmp	r5, #5
 81046c0:	e7de      	b.n	8104680 <_scanf_float+0x1d8>
 81046c2:	2d02      	cmp	r5, #2
 81046c4:	f47f af22 	bne.w	810450c <_scanf_float+0x64>
 81046c8:	2503      	movs	r5, #3
 81046ca:	e7b6      	b.n	810463a <_scanf_float+0x192>
 81046cc:	2d06      	cmp	r5, #6
 81046ce:	f47f af1d 	bne.w	810450c <_scanf_float+0x64>
 81046d2:	2507      	movs	r5, #7
 81046d4:	e7b1      	b.n	810463a <_scanf_float+0x192>
 81046d6:	6822      	ldr	r2, [r4, #0]
 81046d8:	0591      	lsls	r1, r2, #22
 81046da:	f57f af17 	bpl.w	810450c <_scanf_float+0x64>
 81046de:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 81046e2:	6022      	str	r2, [r4, #0]
 81046e4:	f8cd 9008 	str.w	r9, [sp, #8]
 81046e8:	e7a7      	b.n	810463a <_scanf_float+0x192>
 81046ea:	6822      	ldr	r2, [r4, #0]
 81046ec:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 81046f0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 81046f4:	d006      	beq.n	8104704 <_scanf_float+0x25c>
 81046f6:	0550      	lsls	r0, r2, #21
 81046f8:	f57f af08 	bpl.w	810450c <_scanf_float+0x64>
 81046fc:	f1b9 0f00 	cmp.w	r9, #0
 8104700:	f000 80de 	beq.w	81048c0 <_scanf_float+0x418>
 8104704:	0591      	lsls	r1, r2, #22
 8104706:	bf58      	it	pl
 8104708:	9902      	ldrpl	r1, [sp, #8]
 810470a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 810470e:	bf58      	it	pl
 8104710:	eba9 0101 	subpl.w	r1, r9, r1
 8104714:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8104718:	bf58      	it	pl
 810471a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 810471e:	6022      	str	r2, [r4, #0]
 8104720:	f04f 0900 	mov.w	r9, #0
 8104724:	e789      	b.n	810463a <_scanf_float+0x192>
 8104726:	f04f 0a03 	mov.w	sl, #3
 810472a:	e786      	b.n	810463a <_scanf_float+0x192>
 810472c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8104730:	4639      	mov	r1, r7
 8104732:	4640      	mov	r0, r8
 8104734:	4798      	blx	r3
 8104736:	2800      	cmp	r0, #0
 8104738:	f43f aedb 	beq.w	81044f2 <_scanf_float+0x4a>
 810473c:	e6e6      	b.n	810450c <_scanf_float+0x64>
 810473e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8104742:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8104746:	463a      	mov	r2, r7
 8104748:	4640      	mov	r0, r8
 810474a:	4798      	blx	r3
 810474c:	6923      	ldr	r3, [r4, #16]
 810474e:	3b01      	subs	r3, #1
 8104750:	6123      	str	r3, [r4, #16]
 8104752:	e6e8      	b.n	8104526 <_scanf_float+0x7e>
 8104754:	1e6b      	subs	r3, r5, #1
 8104756:	2b06      	cmp	r3, #6
 8104758:	d824      	bhi.n	81047a4 <_scanf_float+0x2fc>
 810475a:	2d02      	cmp	r5, #2
 810475c:	d836      	bhi.n	81047cc <_scanf_float+0x324>
 810475e:	9b01      	ldr	r3, [sp, #4]
 8104760:	429e      	cmp	r6, r3
 8104762:	f67f aee4 	bls.w	810452e <_scanf_float+0x86>
 8104766:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 810476a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 810476e:	463a      	mov	r2, r7
 8104770:	4640      	mov	r0, r8
 8104772:	4798      	blx	r3
 8104774:	6923      	ldr	r3, [r4, #16]
 8104776:	3b01      	subs	r3, #1
 8104778:	6123      	str	r3, [r4, #16]
 810477a:	e7f0      	b.n	810475e <_scanf_float+0x2b6>
 810477c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8104780:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8104784:	463a      	mov	r2, r7
 8104786:	4640      	mov	r0, r8
 8104788:	4798      	blx	r3
 810478a:	6923      	ldr	r3, [r4, #16]
 810478c:	3b01      	subs	r3, #1
 810478e:	6123      	str	r3, [r4, #16]
 8104790:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8104794:	fa5f fa8a 	uxtb.w	sl, sl
 8104798:	f1ba 0f02 	cmp.w	sl, #2
 810479c:	d1ee      	bne.n	810477c <_scanf_float+0x2d4>
 810479e:	3d03      	subs	r5, #3
 81047a0:	b2ed      	uxtb	r5, r5
 81047a2:	1b76      	subs	r6, r6, r5
 81047a4:	6823      	ldr	r3, [r4, #0]
 81047a6:	05da      	lsls	r2, r3, #23
 81047a8:	d530      	bpl.n	810480c <_scanf_float+0x364>
 81047aa:	055b      	lsls	r3, r3, #21
 81047ac:	d511      	bpl.n	81047d2 <_scanf_float+0x32a>
 81047ae:	9b01      	ldr	r3, [sp, #4]
 81047b0:	429e      	cmp	r6, r3
 81047b2:	f67f aebc 	bls.w	810452e <_scanf_float+0x86>
 81047b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81047ba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 81047be:	463a      	mov	r2, r7
 81047c0:	4640      	mov	r0, r8
 81047c2:	4798      	blx	r3
 81047c4:	6923      	ldr	r3, [r4, #16]
 81047c6:	3b01      	subs	r3, #1
 81047c8:	6123      	str	r3, [r4, #16]
 81047ca:	e7f0      	b.n	81047ae <_scanf_float+0x306>
 81047cc:	46aa      	mov	sl, r5
 81047ce:	46b3      	mov	fp, r6
 81047d0:	e7de      	b.n	8104790 <_scanf_float+0x2e8>
 81047d2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 81047d6:	6923      	ldr	r3, [r4, #16]
 81047d8:	2965      	cmp	r1, #101	@ 0x65
 81047da:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 81047de:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 81047e2:	6123      	str	r3, [r4, #16]
 81047e4:	d00c      	beq.n	8104800 <_scanf_float+0x358>
 81047e6:	2945      	cmp	r1, #69	@ 0x45
 81047e8:	d00a      	beq.n	8104800 <_scanf_float+0x358>
 81047ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 81047ee:	463a      	mov	r2, r7
 81047f0:	4640      	mov	r0, r8
 81047f2:	4798      	blx	r3
 81047f4:	6923      	ldr	r3, [r4, #16]
 81047f6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 81047fa:	3b01      	subs	r3, #1
 81047fc:	1eb5      	subs	r5, r6, #2
 81047fe:	6123      	str	r3, [r4, #16]
 8104800:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8104804:	463a      	mov	r2, r7
 8104806:	4640      	mov	r0, r8
 8104808:	4798      	blx	r3
 810480a:	462e      	mov	r6, r5
 810480c:	6822      	ldr	r2, [r4, #0]
 810480e:	f012 0210 	ands.w	r2, r2, #16
 8104812:	d001      	beq.n	8104818 <_scanf_float+0x370>
 8104814:	2000      	movs	r0, #0
 8104816:	e68b      	b.n	8104530 <_scanf_float+0x88>
 8104818:	7032      	strb	r2, [r6, #0]
 810481a:	6823      	ldr	r3, [r4, #0]
 810481c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8104820:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8104824:	d11c      	bne.n	8104860 <_scanf_float+0x3b8>
 8104826:	9b02      	ldr	r3, [sp, #8]
 8104828:	454b      	cmp	r3, r9
 810482a:	eba3 0209 	sub.w	r2, r3, r9
 810482e:	d123      	bne.n	8104878 <_scanf_float+0x3d0>
 8104830:	9901      	ldr	r1, [sp, #4]
 8104832:	2200      	movs	r2, #0
 8104834:	4640      	mov	r0, r8
 8104836:	f000 ff13 	bl	8105660 <_strtod_r>
 810483a:	9b03      	ldr	r3, [sp, #12]
 810483c:	6821      	ldr	r1, [r4, #0]
 810483e:	681b      	ldr	r3, [r3, #0]
 8104840:	f011 0f02 	tst.w	r1, #2
 8104844:	ec57 6b10 	vmov	r6, r7, d0
 8104848:	f103 0204 	add.w	r2, r3, #4
 810484c:	d01f      	beq.n	810488e <_scanf_float+0x3e6>
 810484e:	9903      	ldr	r1, [sp, #12]
 8104850:	600a      	str	r2, [r1, #0]
 8104852:	681b      	ldr	r3, [r3, #0]
 8104854:	e9c3 6700 	strd	r6, r7, [r3]
 8104858:	68e3      	ldr	r3, [r4, #12]
 810485a:	3301      	adds	r3, #1
 810485c:	60e3      	str	r3, [r4, #12]
 810485e:	e7d9      	b.n	8104814 <_scanf_float+0x36c>
 8104860:	9b04      	ldr	r3, [sp, #16]
 8104862:	2b00      	cmp	r3, #0
 8104864:	d0e4      	beq.n	8104830 <_scanf_float+0x388>
 8104866:	9905      	ldr	r1, [sp, #20]
 8104868:	230a      	movs	r3, #10
 810486a:	3101      	adds	r1, #1
 810486c:	4640      	mov	r0, r8
 810486e:	f000 ff77 	bl	8105760 <_strtol_r>
 8104872:	9b04      	ldr	r3, [sp, #16]
 8104874:	9e05      	ldr	r6, [sp, #20]
 8104876:	1ac2      	subs	r2, r0, r3
 8104878:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 810487c:	429e      	cmp	r6, r3
 810487e:	bf28      	it	cs
 8104880:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8104884:	4910      	ldr	r1, [pc, #64]	@ (81048c8 <_scanf_float+0x420>)
 8104886:	4630      	mov	r0, r6
 8104888:	f000 f822 	bl	81048d0 <siprintf>
 810488c:	e7d0      	b.n	8104830 <_scanf_float+0x388>
 810488e:	f011 0f04 	tst.w	r1, #4
 8104892:	9903      	ldr	r1, [sp, #12]
 8104894:	600a      	str	r2, [r1, #0]
 8104896:	d1dc      	bne.n	8104852 <_scanf_float+0x3aa>
 8104898:	681d      	ldr	r5, [r3, #0]
 810489a:	4632      	mov	r2, r6
 810489c:	463b      	mov	r3, r7
 810489e:	4630      	mov	r0, r6
 81048a0:	4639      	mov	r1, r7
 81048a2:	f7fc f9cb 	bl	8100c3c <__aeabi_dcmpun>
 81048a6:	b128      	cbz	r0, 81048b4 <_scanf_float+0x40c>
 81048a8:	4808      	ldr	r0, [pc, #32]	@ (81048cc <_scanf_float+0x424>)
 81048aa:	f000 ffdd 	bl	8105868 <nanf>
 81048ae:	ed85 0a00 	vstr	s0, [r5]
 81048b2:	e7d1      	b.n	8104858 <_scanf_float+0x3b0>
 81048b4:	4630      	mov	r0, r6
 81048b6:	4639      	mov	r1, r7
 81048b8:	f7fc fa1e 	bl	8100cf8 <__aeabi_d2f>
 81048bc:	6028      	str	r0, [r5, #0]
 81048be:	e7cb      	b.n	8104858 <_scanf_float+0x3b0>
 81048c0:	f04f 0900 	mov.w	r9, #0
 81048c4:	e629      	b.n	810451a <_scanf_float+0x72>
 81048c6:	bf00      	nop
 81048c8:	0810832c 	.word	0x0810832c
 81048cc:	08108723 	.word	0x08108723

081048d0 <siprintf>:
 81048d0:	b40e      	push	{r1, r2, r3}
 81048d2:	b500      	push	{lr}
 81048d4:	b09c      	sub	sp, #112	@ 0x70
 81048d6:	ab1d      	add	r3, sp, #116	@ 0x74
 81048d8:	9002      	str	r0, [sp, #8]
 81048da:	9006      	str	r0, [sp, #24]
 81048dc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 81048e0:	4809      	ldr	r0, [pc, #36]	@ (8104908 <siprintf+0x38>)
 81048e2:	9107      	str	r1, [sp, #28]
 81048e4:	9104      	str	r1, [sp, #16]
 81048e6:	4909      	ldr	r1, [pc, #36]	@ (810490c <siprintf+0x3c>)
 81048e8:	f853 2b04 	ldr.w	r2, [r3], #4
 81048ec:	9105      	str	r1, [sp, #20]
 81048ee:	6800      	ldr	r0, [r0, #0]
 81048f0:	9301      	str	r3, [sp, #4]
 81048f2:	a902      	add	r1, sp, #8
 81048f4:	f002 f9a0 	bl	8106c38 <_svfiprintf_r>
 81048f8:	9b02      	ldr	r3, [sp, #8]
 81048fa:	2200      	movs	r2, #0
 81048fc:	701a      	strb	r2, [r3, #0]
 81048fe:	b01c      	add	sp, #112	@ 0x70
 8104900:	f85d eb04 	ldr.w	lr, [sp], #4
 8104904:	b003      	add	sp, #12
 8104906:	4770      	bx	lr
 8104908:	10000188 	.word	0x10000188
 810490c:	ffff0208 	.word	0xffff0208

08104910 <std>:
 8104910:	2300      	movs	r3, #0
 8104912:	b510      	push	{r4, lr}
 8104914:	4604      	mov	r4, r0
 8104916:	e9c0 3300 	strd	r3, r3, [r0]
 810491a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 810491e:	6083      	str	r3, [r0, #8]
 8104920:	8181      	strh	r1, [r0, #12]
 8104922:	6643      	str	r3, [r0, #100]	@ 0x64
 8104924:	81c2      	strh	r2, [r0, #14]
 8104926:	6183      	str	r3, [r0, #24]
 8104928:	4619      	mov	r1, r3
 810492a:	2208      	movs	r2, #8
 810492c:	305c      	adds	r0, #92	@ 0x5c
 810492e:	f000 ff49 	bl	81057c4 <memset>
 8104932:	4b0d      	ldr	r3, [pc, #52]	@ (8104968 <std+0x58>)
 8104934:	6263      	str	r3, [r4, #36]	@ 0x24
 8104936:	4b0d      	ldr	r3, [pc, #52]	@ (810496c <std+0x5c>)
 8104938:	62a3      	str	r3, [r4, #40]	@ 0x28
 810493a:	4b0d      	ldr	r3, [pc, #52]	@ (8104970 <std+0x60>)
 810493c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 810493e:	4b0d      	ldr	r3, [pc, #52]	@ (8104974 <std+0x64>)
 8104940:	6323      	str	r3, [r4, #48]	@ 0x30
 8104942:	4b0d      	ldr	r3, [pc, #52]	@ (8104978 <std+0x68>)
 8104944:	6224      	str	r4, [r4, #32]
 8104946:	429c      	cmp	r4, r3
 8104948:	d006      	beq.n	8104958 <std+0x48>
 810494a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 810494e:	4294      	cmp	r4, r2
 8104950:	d002      	beq.n	8104958 <std+0x48>
 8104952:	33d0      	adds	r3, #208	@ 0xd0
 8104954:	429c      	cmp	r4, r3
 8104956:	d105      	bne.n	8104964 <std+0x54>
 8104958:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 810495c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8104960:	f000 bf66 	b.w	8105830 <__retarget_lock_init_recursive>
 8104964:	bd10      	pop	{r4, pc}
 8104966:	bf00      	nop
 8104968:	08107a7d 	.word	0x08107a7d
 810496c:	08107a9f 	.word	0x08107a9f
 8104970:	08107ad7 	.word	0x08107ad7
 8104974:	08107afb 	.word	0x08107afb
 8104978:	1000033c 	.word	0x1000033c

0810497c <stdio_exit_handler>:
 810497c:	4a02      	ldr	r2, [pc, #8]	@ (8104988 <stdio_exit_handler+0xc>)
 810497e:	4903      	ldr	r1, [pc, #12]	@ (810498c <stdio_exit_handler+0x10>)
 8104980:	4803      	ldr	r0, [pc, #12]	@ (8104990 <stdio_exit_handler+0x14>)
 8104982:	f000 beef 	b.w	8105764 <_fwalk_sglue>
 8104986:	bf00      	nop
 8104988:	10000010 	.word	0x10000010
 810498c:	081070b1 	.word	0x081070b1
 8104990:	1000018c 	.word	0x1000018c

08104994 <cleanup_stdio>:
 8104994:	6841      	ldr	r1, [r0, #4]
 8104996:	4b0c      	ldr	r3, [pc, #48]	@ (81049c8 <cleanup_stdio+0x34>)
 8104998:	4299      	cmp	r1, r3
 810499a:	b510      	push	{r4, lr}
 810499c:	4604      	mov	r4, r0
 810499e:	d001      	beq.n	81049a4 <cleanup_stdio+0x10>
 81049a0:	f002 fb86 	bl	81070b0 <_fflush_r>
 81049a4:	68a1      	ldr	r1, [r4, #8]
 81049a6:	4b09      	ldr	r3, [pc, #36]	@ (81049cc <cleanup_stdio+0x38>)
 81049a8:	4299      	cmp	r1, r3
 81049aa:	d002      	beq.n	81049b2 <cleanup_stdio+0x1e>
 81049ac:	4620      	mov	r0, r4
 81049ae:	f002 fb7f 	bl	81070b0 <_fflush_r>
 81049b2:	68e1      	ldr	r1, [r4, #12]
 81049b4:	4b06      	ldr	r3, [pc, #24]	@ (81049d0 <cleanup_stdio+0x3c>)
 81049b6:	4299      	cmp	r1, r3
 81049b8:	d004      	beq.n	81049c4 <cleanup_stdio+0x30>
 81049ba:	4620      	mov	r0, r4
 81049bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81049c0:	f002 bb76 	b.w	81070b0 <_fflush_r>
 81049c4:	bd10      	pop	{r4, pc}
 81049c6:	bf00      	nop
 81049c8:	1000033c 	.word	0x1000033c
 81049cc:	100003a4 	.word	0x100003a4
 81049d0:	1000040c 	.word	0x1000040c

081049d4 <global_stdio_init.part.0>:
 81049d4:	b510      	push	{r4, lr}
 81049d6:	4b0b      	ldr	r3, [pc, #44]	@ (8104a04 <global_stdio_init.part.0+0x30>)
 81049d8:	4c0b      	ldr	r4, [pc, #44]	@ (8104a08 <global_stdio_init.part.0+0x34>)
 81049da:	4a0c      	ldr	r2, [pc, #48]	@ (8104a0c <global_stdio_init.part.0+0x38>)
 81049dc:	601a      	str	r2, [r3, #0]
 81049de:	4620      	mov	r0, r4
 81049e0:	2200      	movs	r2, #0
 81049e2:	2104      	movs	r1, #4
 81049e4:	f7ff ff94 	bl	8104910 <std>
 81049e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 81049ec:	2201      	movs	r2, #1
 81049ee:	2109      	movs	r1, #9
 81049f0:	f7ff ff8e 	bl	8104910 <std>
 81049f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 81049f8:	2202      	movs	r2, #2
 81049fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81049fe:	2112      	movs	r1, #18
 8104a00:	f7ff bf86 	b.w	8104910 <std>
 8104a04:	10000474 	.word	0x10000474
 8104a08:	1000033c 	.word	0x1000033c
 8104a0c:	0810497d 	.word	0x0810497d

08104a10 <__sfp_lock_acquire>:
 8104a10:	4801      	ldr	r0, [pc, #4]	@ (8104a18 <__sfp_lock_acquire+0x8>)
 8104a12:	f000 bf0e 	b.w	8105832 <__retarget_lock_acquire_recursive>
 8104a16:	bf00      	nop
 8104a18:	10000479 	.word	0x10000479

08104a1c <__sfp_lock_release>:
 8104a1c:	4801      	ldr	r0, [pc, #4]	@ (8104a24 <__sfp_lock_release+0x8>)
 8104a1e:	f000 bf09 	b.w	8105834 <__retarget_lock_release_recursive>
 8104a22:	bf00      	nop
 8104a24:	10000479 	.word	0x10000479

08104a28 <__sinit>:
 8104a28:	b510      	push	{r4, lr}
 8104a2a:	4604      	mov	r4, r0
 8104a2c:	f7ff fff0 	bl	8104a10 <__sfp_lock_acquire>
 8104a30:	6a23      	ldr	r3, [r4, #32]
 8104a32:	b11b      	cbz	r3, 8104a3c <__sinit+0x14>
 8104a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8104a38:	f7ff bff0 	b.w	8104a1c <__sfp_lock_release>
 8104a3c:	4b04      	ldr	r3, [pc, #16]	@ (8104a50 <__sinit+0x28>)
 8104a3e:	6223      	str	r3, [r4, #32]
 8104a40:	4b04      	ldr	r3, [pc, #16]	@ (8104a54 <__sinit+0x2c>)
 8104a42:	681b      	ldr	r3, [r3, #0]
 8104a44:	2b00      	cmp	r3, #0
 8104a46:	d1f5      	bne.n	8104a34 <__sinit+0xc>
 8104a48:	f7ff ffc4 	bl	81049d4 <global_stdio_init.part.0>
 8104a4c:	e7f2      	b.n	8104a34 <__sinit+0xc>
 8104a4e:	bf00      	nop
 8104a50:	08104995 	.word	0x08104995
 8104a54:	10000474 	.word	0x10000474

08104a58 <sulp>:
 8104a58:	b570      	push	{r4, r5, r6, lr}
 8104a5a:	4604      	mov	r4, r0
 8104a5c:	460d      	mov	r5, r1
 8104a5e:	ec45 4b10 	vmov	d0, r4, r5
 8104a62:	4616      	mov	r6, r2
 8104a64:	f002 fecc 	bl	8107800 <__ulp>
 8104a68:	ec51 0b10 	vmov	r0, r1, d0
 8104a6c:	b17e      	cbz	r6, 8104a8e <sulp+0x36>
 8104a6e:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8104a72:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8104a76:	2b00      	cmp	r3, #0
 8104a78:	dd09      	ble.n	8104a8e <sulp+0x36>
 8104a7a:	051b      	lsls	r3, r3, #20
 8104a7c:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8104a80:	2400      	movs	r4, #0
 8104a82:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8104a86:	4622      	mov	r2, r4
 8104a88:	462b      	mov	r3, r5
 8104a8a:	f7fb fe3d 	bl	8100708 <__aeabi_dmul>
 8104a8e:	ec41 0b10 	vmov	d0, r0, r1
 8104a92:	bd70      	pop	{r4, r5, r6, pc}
 8104a94:	0000      	movs	r0, r0
	...

08104a98 <_strtod_l>:
 8104a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104a9c:	b09f      	sub	sp, #124	@ 0x7c
 8104a9e:	460c      	mov	r4, r1
 8104aa0:	9217      	str	r2, [sp, #92]	@ 0x5c
 8104aa2:	2200      	movs	r2, #0
 8104aa4:	921a      	str	r2, [sp, #104]	@ 0x68
 8104aa6:	9005      	str	r0, [sp, #20]
 8104aa8:	f04f 0a00 	mov.w	sl, #0
 8104aac:	f04f 0b00 	mov.w	fp, #0
 8104ab0:	460a      	mov	r2, r1
 8104ab2:	9219      	str	r2, [sp, #100]	@ 0x64
 8104ab4:	7811      	ldrb	r1, [r2, #0]
 8104ab6:	292b      	cmp	r1, #43	@ 0x2b
 8104ab8:	d04a      	beq.n	8104b50 <_strtod_l+0xb8>
 8104aba:	d838      	bhi.n	8104b2e <_strtod_l+0x96>
 8104abc:	290d      	cmp	r1, #13
 8104abe:	d832      	bhi.n	8104b26 <_strtod_l+0x8e>
 8104ac0:	2908      	cmp	r1, #8
 8104ac2:	d832      	bhi.n	8104b2a <_strtod_l+0x92>
 8104ac4:	2900      	cmp	r1, #0
 8104ac6:	d03b      	beq.n	8104b40 <_strtod_l+0xa8>
 8104ac8:	2200      	movs	r2, #0
 8104aca:	920b      	str	r2, [sp, #44]	@ 0x2c
 8104acc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8104ace:	782a      	ldrb	r2, [r5, #0]
 8104ad0:	2a30      	cmp	r2, #48	@ 0x30
 8104ad2:	f040 80b3 	bne.w	8104c3c <_strtod_l+0x1a4>
 8104ad6:	786a      	ldrb	r2, [r5, #1]
 8104ad8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8104adc:	2a58      	cmp	r2, #88	@ 0x58
 8104ade:	d16e      	bne.n	8104bbe <_strtod_l+0x126>
 8104ae0:	9302      	str	r3, [sp, #8]
 8104ae2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8104ae4:	9301      	str	r3, [sp, #4]
 8104ae6:	ab1a      	add	r3, sp, #104	@ 0x68
 8104ae8:	9300      	str	r3, [sp, #0]
 8104aea:	4a8e      	ldr	r2, [pc, #568]	@ (8104d24 <_strtod_l+0x28c>)
 8104aec:	9805      	ldr	r0, [sp, #20]
 8104aee:	ab1b      	add	r3, sp, #108	@ 0x6c
 8104af0:	a919      	add	r1, sp, #100	@ 0x64
 8104af2:	f001 fd75 	bl	81065e0 <__gethex>
 8104af6:	f010 060f 	ands.w	r6, r0, #15
 8104afa:	4604      	mov	r4, r0
 8104afc:	d005      	beq.n	8104b0a <_strtod_l+0x72>
 8104afe:	2e06      	cmp	r6, #6
 8104b00:	d128      	bne.n	8104b54 <_strtod_l+0xbc>
 8104b02:	3501      	adds	r5, #1
 8104b04:	2300      	movs	r3, #0
 8104b06:	9519      	str	r5, [sp, #100]	@ 0x64
 8104b08:	930b      	str	r3, [sp, #44]	@ 0x2c
 8104b0a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8104b0c:	2b00      	cmp	r3, #0
 8104b0e:	f040 858e 	bne.w	810562e <_strtod_l+0xb96>
 8104b12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8104b14:	b1cb      	cbz	r3, 8104b4a <_strtod_l+0xb2>
 8104b16:	4652      	mov	r2, sl
 8104b18:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8104b1c:	ec43 2b10 	vmov	d0, r2, r3
 8104b20:	b01f      	add	sp, #124	@ 0x7c
 8104b22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8104b26:	2920      	cmp	r1, #32
 8104b28:	d1ce      	bne.n	8104ac8 <_strtod_l+0x30>
 8104b2a:	3201      	adds	r2, #1
 8104b2c:	e7c1      	b.n	8104ab2 <_strtod_l+0x1a>
 8104b2e:	292d      	cmp	r1, #45	@ 0x2d
 8104b30:	d1ca      	bne.n	8104ac8 <_strtod_l+0x30>
 8104b32:	2101      	movs	r1, #1
 8104b34:	910b      	str	r1, [sp, #44]	@ 0x2c
 8104b36:	1c51      	adds	r1, r2, #1
 8104b38:	9119      	str	r1, [sp, #100]	@ 0x64
 8104b3a:	7852      	ldrb	r2, [r2, #1]
 8104b3c:	2a00      	cmp	r2, #0
 8104b3e:	d1c5      	bne.n	8104acc <_strtod_l+0x34>
 8104b40:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8104b42:	9419      	str	r4, [sp, #100]	@ 0x64
 8104b44:	2b00      	cmp	r3, #0
 8104b46:	f040 8570 	bne.w	810562a <_strtod_l+0xb92>
 8104b4a:	4652      	mov	r2, sl
 8104b4c:	465b      	mov	r3, fp
 8104b4e:	e7e5      	b.n	8104b1c <_strtod_l+0x84>
 8104b50:	2100      	movs	r1, #0
 8104b52:	e7ef      	b.n	8104b34 <_strtod_l+0x9c>
 8104b54:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8104b56:	b13a      	cbz	r2, 8104b68 <_strtod_l+0xd0>
 8104b58:	2135      	movs	r1, #53	@ 0x35
 8104b5a:	a81c      	add	r0, sp, #112	@ 0x70
 8104b5c:	f002 ff4a 	bl	81079f4 <__copybits>
 8104b60:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8104b62:	9805      	ldr	r0, [sp, #20]
 8104b64:	f002 fb18 	bl	8107198 <_Bfree>
 8104b68:	3e01      	subs	r6, #1
 8104b6a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8104b6c:	2e04      	cmp	r6, #4
 8104b6e:	d806      	bhi.n	8104b7e <_strtod_l+0xe6>
 8104b70:	e8df f006 	tbb	[pc, r6]
 8104b74:	201d0314 	.word	0x201d0314
 8104b78:	14          	.byte	0x14
 8104b79:	00          	.byte	0x00
 8104b7a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8104b7e:	05e1      	lsls	r1, r4, #23
 8104b80:	bf48      	it	mi
 8104b82:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8104b86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8104b8a:	0d1b      	lsrs	r3, r3, #20
 8104b8c:	051b      	lsls	r3, r3, #20
 8104b8e:	2b00      	cmp	r3, #0
 8104b90:	d1bb      	bne.n	8104b0a <_strtod_l+0x72>
 8104b92:	f000 fe23 	bl	81057dc <__errno>
 8104b96:	2322      	movs	r3, #34	@ 0x22
 8104b98:	6003      	str	r3, [r0, #0]
 8104b9a:	e7b6      	b.n	8104b0a <_strtod_l+0x72>
 8104b9c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8104ba0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8104ba4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8104ba8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8104bac:	e7e7      	b.n	8104b7e <_strtod_l+0xe6>
 8104bae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8104d2c <_strtod_l+0x294>
 8104bb2:	e7e4      	b.n	8104b7e <_strtod_l+0xe6>
 8104bb4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8104bb8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8104bbc:	e7df      	b.n	8104b7e <_strtod_l+0xe6>
 8104bbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8104bc0:	1c5a      	adds	r2, r3, #1
 8104bc2:	9219      	str	r2, [sp, #100]	@ 0x64
 8104bc4:	785b      	ldrb	r3, [r3, #1]
 8104bc6:	2b30      	cmp	r3, #48	@ 0x30
 8104bc8:	d0f9      	beq.n	8104bbe <_strtod_l+0x126>
 8104bca:	2b00      	cmp	r3, #0
 8104bcc:	d09d      	beq.n	8104b0a <_strtod_l+0x72>
 8104bce:	2301      	movs	r3, #1
 8104bd0:	9309      	str	r3, [sp, #36]	@ 0x24
 8104bd2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8104bd4:	930c      	str	r3, [sp, #48]	@ 0x30
 8104bd6:	2300      	movs	r3, #0
 8104bd8:	9308      	str	r3, [sp, #32]
 8104bda:	930a      	str	r3, [sp, #40]	@ 0x28
 8104bdc:	461f      	mov	r7, r3
 8104bde:	220a      	movs	r2, #10
 8104be0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8104be2:	7805      	ldrb	r5, [r0, #0]
 8104be4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8104be8:	b2d9      	uxtb	r1, r3
 8104bea:	2909      	cmp	r1, #9
 8104bec:	d928      	bls.n	8104c40 <_strtod_l+0x1a8>
 8104bee:	494e      	ldr	r1, [pc, #312]	@ (8104d28 <_strtod_l+0x290>)
 8104bf0:	2201      	movs	r2, #1
 8104bf2:	f000 fdd5 	bl	81057a0 <strncmp>
 8104bf6:	2800      	cmp	r0, #0
 8104bf8:	d032      	beq.n	8104c60 <_strtod_l+0x1c8>
 8104bfa:	2000      	movs	r0, #0
 8104bfc:	462a      	mov	r2, r5
 8104bfe:	4681      	mov	r9, r0
 8104c00:	463d      	mov	r5, r7
 8104c02:	4603      	mov	r3, r0
 8104c04:	2a65      	cmp	r2, #101	@ 0x65
 8104c06:	d001      	beq.n	8104c0c <_strtod_l+0x174>
 8104c08:	2a45      	cmp	r2, #69	@ 0x45
 8104c0a:	d114      	bne.n	8104c36 <_strtod_l+0x19e>
 8104c0c:	b91d      	cbnz	r5, 8104c16 <_strtod_l+0x17e>
 8104c0e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8104c10:	4302      	orrs	r2, r0
 8104c12:	d095      	beq.n	8104b40 <_strtod_l+0xa8>
 8104c14:	2500      	movs	r5, #0
 8104c16:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8104c18:	1c62      	adds	r2, r4, #1
 8104c1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8104c1c:	7862      	ldrb	r2, [r4, #1]
 8104c1e:	2a2b      	cmp	r2, #43	@ 0x2b
 8104c20:	d077      	beq.n	8104d12 <_strtod_l+0x27a>
 8104c22:	2a2d      	cmp	r2, #45	@ 0x2d
 8104c24:	d07b      	beq.n	8104d1e <_strtod_l+0x286>
 8104c26:	f04f 0c00 	mov.w	ip, #0
 8104c2a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8104c2e:	2909      	cmp	r1, #9
 8104c30:	f240 8082 	bls.w	8104d38 <_strtod_l+0x2a0>
 8104c34:	9419      	str	r4, [sp, #100]	@ 0x64
 8104c36:	f04f 0800 	mov.w	r8, #0
 8104c3a:	e0a2      	b.n	8104d82 <_strtod_l+0x2ea>
 8104c3c:	2300      	movs	r3, #0
 8104c3e:	e7c7      	b.n	8104bd0 <_strtod_l+0x138>
 8104c40:	2f08      	cmp	r7, #8
 8104c42:	bfd5      	itete	le
 8104c44:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8104c46:	9908      	ldrgt	r1, [sp, #32]
 8104c48:	fb02 3301 	mlale	r3, r2, r1, r3
 8104c4c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8104c50:	f100 0001 	add.w	r0, r0, #1
 8104c54:	bfd4      	ite	le
 8104c56:	930a      	strle	r3, [sp, #40]	@ 0x28
 8104c58:	9308      	strgt	r3, [sp, #32]
 8104c5a:	3701      	adds	r7, #1
 8104c5c:	9019      	str	r0, [sp, #100]	@ 0x64
 8104c5e:	e7bf      	b.n	8104be0 <_strtod_l+0x148>
 8104c60:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8104c62:	1c5a      	adds	r2, r3, #1
 8104c64:	9219      	str	r2, [sp, #100]	@ 0x64
 8104c66:	785a      	ldrb	r2, [r3, #1]
 8104c68:	b37f      	cbz	r7, 8104cca <_strtod_l+0x232>
 8104c6a:	4681      	mov	r9, r0
 8104c6c:	463d      	mov	r5, r7
 8104c6e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8104c72:	2b09      	cmp	r3, #9
 8104c74:	d912      	bls.n	8104c9c <_strtod_l+0x204>
 8104c76:	2301      	movs	r3, #1
 8104c78:	e7c4      	b.n	8104c04 <_strtod_l+0x16c>
 8104c7a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8104c7c:	1c5a      	adds	r2, r3, #1
 8104c7e:	9219      	str	r2, [sp, #100]	@ 0x64
 8104c80:	785a      	ldrb	r2, [r3, #1]
 8104c82:	3001      	adds	r0, #1
 8104c84:	2a30      	cmp	r2, #48	@ 0x30
 8104c86:	d0f8      	beq.n	8104c7a <_strtod_l+0x1e2>
 8104c88:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8104c8c:	2b08      	cmp	r3, #8
 8104c8e:	f200 84d3 	bhi.w	8105638 <_strtod_l+0xba0>
 8104c92:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8104c94:	930c      	str	r3, [sp, #48]	@ 0x30
 8104c96:	4681      	mov	r9, r0
 8104c98:	2000      	movs	r0, #0
 8104c9a:	4605      	mov	r5, r0
 8104c9c:	3a30      	subs	r2, #48	@ 0x30
 8104c9e:	f100 0301 	add.w	r3, r0, #1
 8104ca2:	d02a      	beq.n	8104cfa <_strtod_l+0x262>
 8104ca4:	4499      	add	r9, r3
 8104ca6:	eb00 0c05 	add.w	ip, r0, r5
 8104caa:	462b      	mov	r3, r5
 8104cac:	210a      	movs	r1, #10
 8104cae:	4563      	cmp	r3, ip
 8104cb0:	d10d      	bne.n	8104cce <_strtod_l+0x236>
 8104cb2:	1c69      	adds	r1, r5, #1
 8104cb4:	4401      	add	r1, r0
 8104cb6:	4428      	add	r0, r5
 8104cb8:	2808      	cmp	r0, #8
 8104cba:	dc16      	bgt.n	8104cea <_strtod_l+0x252>
 8104cbc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8104cbe:	230a      	movs	r3, #10
 8104cc0:	fb03 2300 	mla	r3, r3, r0, r2
 8104cc4:	930a      	str	r3, [sp, #40]	@ 0x28
 8104cc6:	2300      	movs	r3, #0
 8104cc8:	e018      	b.n	8104cfc <_strtod_l+0x264>
 8104cca:	4638      	mov	r0, r7
 8104ccc:	e7da      	b.n	8104c84 <_strtod_l+0x1ec>
 8104cce:	2b08      	cmp	r3, #8
 8104cd0:	f103 0301 	add.w	r3, r3, #1
 8104cd4:	dc03      	bgt.n	8104cde <_strtod_l+0x246>
 8104cd6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8104cd8:	434e      	muls	r6, r1
 8104cda:	960a      	str	r6, [sp, #40]	@ 0x28
 8104cdc:	e7e7      	b.n	8104cae <_strtod_l+0x216>
 8104cde:	2b10      	cmp	r3, #16
 8104ce0:	bfde      	ittt	le
 8104ce2:	9e08      	ldrle	r6, [sp, #32]
 8104ce4:	434e      	mulle	r6, r1
 8104ce6:	9608      	strle	r6, [sp, #32]
 8104ce8:	e7e1      	b.n	8104cae <_strtod_l+0x216>
 8104cea:	280f      	cmp	r0, #15
 8104cec:	dceb      	bgt.n	8104cc6 <_strtod_l+0x22e>
 8104cee:	9808      	ldr	r0, [sp, #32]
 8104cf0:	230a      	movs	r3, #10
 8104cf2:	fb03 2300 	mla	r3, r3, r0, r2
 8104cf6:	9308      	str	r3, [sp, #32]
 8104cf8:	e7e5      	b.n	8104cc6 <_strtod_l+0x22e>
 8104cfa:	4629      	mov	r1, r5
 8104cfc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8104cfe:	1c50      	adds	r0, r2, #1
 8104d00:	9019      	str	r0, [sp, #100]	@ 0x64
 8104d02:	7852      	ldrb	r2, [r2, #1]
 8104d04:	4618      	mov	r0, r3
 8104d06:	460d      	mov	r5, r1
 8104d08:	e7b1      	b.n	8104c6e <_strtod_l+0x1d6>
 8104d0a:	f04f 0900 	mov.w	r9, #0
 8104d0e:	2301      	movs	r3, #1
 8104d10:	e77d      	b.n	8104c0e <_strtod_l+0x176>
 8104d12:	f04f 0c00 	mov.w	ip, #0
 8104d16:	1ca2      	adds	r2, r4, #2
 8104d18:	9219      	str	r2, [sp, #100]	@ 0x64
 8104d1a:	78a2      	ldrb	r2, [r4, #2]
 8104d1c:	e785      	b.n	8104c2a <_strtod_l+0x192>
 8104d1e:	f04f 0c01 	mov.w	ip, #1
 8104d22:	e7f8      	b.n	8104d16 <_strtod_l+0x27e>
 8104d24:	08108348 	.word	0x08108348
 8104d28:	08108331 	.word	0x08108331
 8104d2c:	7ff00000 	.word	0x7ff00000
 8104d30:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8104d32:	1c51      	adds	r1, r2, #1
 8104d34:	9119      	str	r1, [sp, #100]	@ 0x64
 8104d36:	7852      	ldrb	r2, [r2, #1]
 8104d38:	2a30      	cmp	r2, #48	@ 0x30
 8104d3a:	d0f9      	beq.n	8104d30 <_strtod_l+0x298>
 8104d3c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8104d40:	2908      	cmp	r1, #8
 8104d42:	f63f af78 	bhi.w	8104c36 <_strtod_l+0x19e>
 8104d46:	3a30      	subs	r2, #48	@ 0x30
 8104d48:	920e      	str	r2, [sp, #56]	@ 0x38
 8104d4a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8104d4c:	920f      	str	r2, [sp, #60]	@ 0x3c
 8104d4e:	f04f 080a 	mov.w	r8, #10
 8104d52:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8104d54:	1c56      	adds	r6, r2, #1
 8104d56:	9619      	str	r6, [sp, #100]	@ 0x64
 8104d58:	7852      	ldrb	r2, [r2, #1]
 8104d5a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8104d5e:	f1be 0f09 	cmp.w	lr, #9
 8104d62:	d939      	bls.n	8104dd8 <_strtod_l+0x340>
 8104d64:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8104d66:	1a76      	subs	r6, r6, r1
 8104d68:	2e08      	cmp	r6, #8
 8104d6a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8104d6e:	dc03      	bgt.n	8104d78 <_strtod_l+0x2e0>
 8104d70:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8104d72:	4588      	cmp	r8, r1
 8104d74:	bfa8      	it	ge
 8104d76:	4688      	movge	r8, r1
 8104d78:	f1bc 0f00 	cmp.w	ip, #0
 8104d7c:	d001      	beq.n	8104d82 <_strtod_l+0x2ea>
 8104d7e:	f1c8 0800 	rsb	r8, r8, #0
 8104d82:	2d00      	cmp	r5, #0
 8104d84:	d14e      	bne.n	8104e24 <_strtod_l+0x38c>
 8104d86:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8104d88:	4308      	orrs	r0, r1
 8104d8a:	f47f aebe 	bne.w	8104b0a <_strtod_l+0x72>
 8104d8e:	2b00      	cmp	r3, #0
 8104d90:	f47f aed6 	bne.w	8104b40 <_strtod_l+0xa8>
 8104d94:	2a69      	cmp	r2, #105	@ 0x69
 8104d96:	d028      	beq.n	8104dea <_strtod_l+0x352>
 8104d98:	dc25      	bgt.n	8104de6 <_strtod_l+0x34e>
 8104d9a:	2a49      	cmp	r2, #73	@ 0x49
 8104d9c:	d025      	beq.n	8104dea <_strtod_l+0x352>
 8104d9e:	2a4e      	cmp	r2, #78	@ 0x4e
 8104da0:	f47f aece 	bne.w	8104b40 <_strtod_l+0xa8>
 8104da4:	499b      	ldr	r1, [pc, #620]	@ (8105014 <_strtod_l+0x57c>)
 8104da6:	a819      	add	r0, sp, #100	@ 0x64
 8104da8:	f001 fe3c 	bl	8106a24 <__match>
 8104dac:	2800      	cmp	r0, #0
 8104dae:	f43f aec7 	beq.w	8104b40 <_strtod_l+0xa8>
 8104db2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8104db4:	781b      	ldrb	r3, [r3, #0]
 8104db6:	2b28      	cmp	r3, #40	@ 0x28
 8104db8:	d12e      	bne.n	8104e18 <_strtod_l+0x380>
 8104dba:	4997      	ldr	r1, [pc, #604]	@ (8105018 <_strtod_l+0x580>)
 8104dbc:	aa1c      	add	r2, sp, #112	@ 0x70
 8104dbe:	a819      	add	r0, sp, #100	@ 0x64
 8104dc0:	f001 fe44 	bl	8106a4c <__hexnan>
 8104dc4:	2805      	cmp	r0, #5
 8104dc6:	d127      	bne.n	8104e18 <_strtod_l+0x380>
 8104dc8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8104dca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8104dce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8104dd2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8104dd6:	e698      	b.n	8104b0a <_strtod_l+0x72>
 8104dd8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8104dda:	fb08 2101 	mla	r1, r8, r1, r2
 8104dde:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8104de2:	920e      	str	r2, [sp, #56]	@ 0x38
 8104de4:	e7b5      	b.n	8104d52 <_strtod_l+0x2ba>
 8104de6:	2a6e      	cmp	r2, #110	@ 0x6e
 8104de8:	e7da      	b.n	8104da0 <_strtod_l+0x308>
 8104dea:	498c      	ldr	r1, [pc, #560]	@ (810501c <_strtod_l+0x584>)
 8104dec:	a819      	add	r0, sp, #100	@ 0x64
 8104dee:	f001 fe19 	bl	8106a24 <__match>
 8104df2:	2800      	cmp	r0, #0
 8104df4:	f43f aea4 	beq.w	8104b40 <_strtod_l+0xa8>
 8104df8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8104dfa:	4989      	ldr	r1, [pc, #548]	@ (8105020 <_strtod_l+0x588>)
 8104dfc:	3b01      	subs	r3, #1
 8104dfe:	a819      	add	r0, sp, #100	@ 0x64
 8104e00:	9319      	str	r3, [sp, #100]	@ 0x64
 8104e02:	f001 fe0f 	bl	8106a24 <__match>
 8104e06:	b910      	cbnz	r0, 8104e0e <_strtod_l+0x376>
 8104e08:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8104e0a:	3301      	adds	r3, #1
 8104e0c:	9319      	str	r3, [sp, #100]	@ 0x64
 8104e0e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8105030 <_strtod_l+0x598>
 8104e12:	f04f 0a00 	mov.w	sl, #0
 8104e16:	e678      	b.n	8104b0a <_strtod_l+0x72>
 8104e18:	4882      	ldr	r0, [pc, #520]	@ (8105024 <_strtod_l+0x58c>)
 8104e1a:	f000 fd1d 	bl	8105858 <nan>
 8104e1e:	ec5b ab10 	vmov	sl, fp, d0
 8104e22:	e672      	b.n	8104b0a <_strtod_l+0x72>
 8104e24:	eba8 0309 	sub.w	r3, r8, r9
 8104e28:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8104e2a:	9309      	str	r3, [sp, #36]	@ 0x24
 8104e2c:	2f00      	cmp	r7, #0
 8104e2e:	bf08      	it	eq
 8104e30:	462f      	moveq	r7, r5
 8104e32:	2d10      	cmp	r5, #16
 8104e34:	462c      	mov	r4, r5
 8104e36:	bfa8      	it	ge
 8104e38:	2410      	movge	r4, #16
 8104e3a:	f7fb fbeb 	bl	8100614 <__aeabi_ui2d>
 8104e3e:	2d09      	cmp	r5, #9
 8104e40:	4682      	mov	sl, r0
 8104e42:	468b      	mov	fp, r1
 8104e44:	dc13      	bgt.n	8104e6e <_strtod_l+0x3d6>
 8104e46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8104e48:	2b00      	cmp	r3, #0
 8104e4a:	f43f ae5e 	beq.w	8104b0a <_strtod_l+0x72>
 8104e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8104e50:	dd78      	ble.n	8104f44 <_strtod_l+0x4ac>
 8104e52:	2b16      	cmp	r3, #22
 8104e54:	dc5f      	bgt.n	8104f16 <_strtod_l+0x47e>
 8104e56:	4974      	ldr	r1, [pc, #464]	@ (8105028 <_strtod_l+0x590>)
 8104e58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8104e5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8104e60:	4652      	mov	r2, sl
 8104e62:	465b      	mov	r3, fp
 8104e64:	f7fb fc50 	bl	8100708 <__aeabi_dmul>
 8104e68:	4682      	mov	sl, r0
 8104e6a:	468b      	mov	fp, r1
 8104e6c:	e64d      	b.n	8104b0a <_strtod_l+0x72>
 8104e6e:	4b6e      	ldr	r3, [pc, #440]	@ (8105028 <_strtod_l+0x590>)
 8104e70:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8104e74:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8104e78:	f7fb fc46 	bl	8100708 <__aeabi_dmul>
 8104e7c:	4682      	mov	sl, r0
 8104e7e:	9808      	ldr	r0, [sp, #32]
 8104e80:	468b      	mov	fp, r1
 8104e82:	f7fb fbc7 	bl	8100614 <__aeabi_ui2d>
 8104e86:	4602      	mov	r2, r0
 8104e88:	460b      	mov	r3, r1
 8104e8a:	4650      	mov	r0, sl
 8104e8c:	4659      	mov	r1, fp
 8104e8e:	f7fb fa85 	bl	810039c <__adddf3>
 8104e92:	2d0f      	cmp	r5, #15
 8104e94:	4682      	mov	sl, r0
 8104e96:	468b      	mov	fp, r1
 8104e98:	ddd5      	ble.n	8104e46 <_strtod_l+0x3ae>
 8104e9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8104e9c:	1b2c      	subs	r4, r5, r4
 8104e9e:	441c      	add	r4, r3
 8104ea0:	2c00      	cmp	r4, #0
 8104ea2:	f340 8096 	ble.w	8104fd2 <_strtod_l+0x53a>
 8104ea6:	f014 030f 	ands.w	r3, r4, #15
 8104eaa:	d00a      	beq.n	8104ec2 <_strtod_l+0x42a>
 8104eac:	495e      	ldr	r1, [pc, #376]	@ (8105028 <_strtod_l+0x590>)
 8104eae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8104eb2:	4652      	mov	r2, sl
 8104eb4:	465b      	mov	r3, fp
 8104eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8104eba:	f7fb fc25 	bl	8100708 <__aeabi_dmul>
 8104ebe:	4682      	mov	sl, r0
 8104ec0:	468b      	mov	fp, r1
 8104ec2:	f034 040f 	bics.w	r4, r4, #15
 8104ec6:	d073      	beq.n	8104fb0 <_strtod_l+0x518>
 8104ec8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8104ecc:	dd48      	ble.n	8104f60 <_strtod_l+0x4c8>
 8104ece:	2400      	movs	r4, #0
 8104ed0:	46a0      	mov	r8, r4
 8104ed2:	940a      	str	r4, [sp, #40]	@ 0x28
 8104ed4:	46a1      	mov	r9, r4
 8104ed6:	9a05      	ldr	r2, [sp, #20]
 8104ed8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8105030 <_strtod_l+0x598>
 8104edc:	2322      	movs	r3, #34	@ 0x22
 8104ede:	6013      	str	r3, [r2, #0]
 8104ee0:	f04f 0a00 	mov.w	sl, #0
 8104ee4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8104ee6:	2b00      	cmp	r3, #0
 8104ee8:	f43f ae0f 	beq.w	8104b0a <_strtod_l+0x72>
 8104eec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8104eee:	9805      	ldr	r0, [sp, #20]
 8104ef0:	f002 f952 	bl	8107198 <_Bfree>
 8104ef4:	9805      	ldr	r0, [sp, #20]
 8104ef6:	4649      	mov	r1, r9
 8104ef8:	f002 f94e 	bl	8107198 <_Bfree>
 8104efc:	9805      	ldr	r0, [sp, #20]
 8104efe:	4641      	mov	r1, r8
 8104f00:	f002 f94a 	bl	8107198 <_Bfree>
 8104f04:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8104f06:	9805      	ldr	r0, [sp, #20]
 8104f08:	f002 f946 	bl	8107198 <_Bfree>
 8104f0c:	9805      	ldr	r0, [sp, #20]
 8104f0e:	4621      	mov	r1, r4
 8104f10:	f002 f942 	bl	8107198 <_Bfree>
 8104f14:	e5f9      	b.n	8104b0a <_strtod_l+0x72>
 8104f16:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8104f18:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8104f1c:	4293      	cmp	r3, r2
 8104f1e:	dbbc      	blt.n	8104e9a <_strtod_l+0x402>
 8104f20:	4c41      	ldr	r4, [pc, #260]	@ (8105028 <_strtod_l+0x590>)
 8104f22:	f1c5 050f 	rsb	r5, r5, #15
 8104f26:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8104f2a:	4652      	mov	r2, sl
 8104f2c:	465b      	mov	r3, fp
 8104f2e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8104f32:	f7fb fbe9 	bl	8100708 <__aeabi_dmul>
 8104f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8104f38:	1b5d      	subs	r5, r3, r5
 8104f3a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8104f3e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8104f42:	e78f      	b.n	8104e64 <_strtod_l+0x3cc>
 8104f44:	3316      	adds	r3, #22
 8104f46:	dba8      	blt.n	8104e9a <_strtod_l+0x402>
 8104f48:	4b37      	ldr	r3, [pc, #220]	@ (8105028 <_strtod_l+0x590>)
 8104f4a:	eba9 0808 	sub.w	r8, r9, r8
 8104f4e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8104f52:	e9d8 2300 	ldrd	r2, r3, [r8]
 8104f56:	4650      	mov	r0, sl
 8104f58:	4659      	mov	r1, fp
 8104f5a:	f7fb fcff 	bl	810095c <__aeabi_ddiv>
 8104f5e:	e783      	b.n	8104e68 <_strtod_l+0x3d0>
 8104f60:	4b32      	ldr	r3, [pc, #200]	@ (810502c <_strtod_l+0x594>)
 8104f62:	9308      	str	r3, [sp, #32]
 8104f64:	2300      	movs	r3, #0
 8104f66:	1124      	asrs	r4, r4, #4
 8104f68:	4650      	mov	r0, sl
 8104f6a:	4659      	mov	r1, fp
 8104f6c:	461e      	mov	r6, r3
 8104f6e:	2c01      	cmp	r4, #1
 8104f70:	dc21      	bgt.n	8104fb6 <_strtod_l+0x51e>
 8104f72:	b10b      	cbz	r3, 8104f78 <_strtod_l+0x4e0>
 8104f74:	4682      	mov	sl, r0
 8104f76:	468b      	mov	fp, r1
 8104f78:	492c      	ldr	r1, [pc, #176]	@ (810502c <_strtod_l+0x594>)
 8104f7a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8104f7e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8104f82:	4652      	mov	r2, sl
 8104f84:	465b      	mov	r3, fp
 8104f86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8104f8a:	f7fb fbbd 	bl	8100708 <__aeabi_dmul>
 8104f8e:	4b28      	ldr	r3, [pc, #160]	@ (8105030 <_strtod_l+0x598>)
 8104f90:	460a      	mov	r2, r1
 8104f92:	400b      	ands	r3, r1
 8104f94:	4927      	ldr	r1, [pc, #156]	@ (8105034 <_strtod_l+0x59c>)
 8104f96:	428b      	cmp	r3, r1
 8104f98:	4682      	mov	sl, r0
 8104f9a:	d898      	bhi.n	8104ece <_strtod_l+0x436>
 8104f9c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8104fa0:	428b      	cmp	r3, r1
 8104fa2:	bf86      	itte	hi
 8104fa4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8105038 <_strtod_l+0x5a0>
 8104fa8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8104fac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8104fb0:	2300      	movs	r3, #0
 8104fb2:	9308      	str	r3, [sp, #32]
 8104fb4:	e07a      	b.n	81050ac <_strtod_l+0x614>
 8104fb6:	07e2      	lsls	r2, r4, #31
 8104fb8:	d505      	bpl.n	8104fc6 <_strtod_l+0x52e>
 8104fba:	9b08      	ldr	r3, [sp, #32]
 8104fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fc0:	f7fb fba2 	bl	8100708 <__aeabi_dmul>
 8104fc4:	2301      	movs	r3, #1
 8104fc6:	9a08      	ldr	r2, [sp, #32]
 8104fc8:	3208      	adds	r2, #8
 8104fca:	3601      	adds	r6, #1
 8104fcc:	1064      	asrs	r4, r4, #1
 8104fce:	9208      	str	r2, [sp, #32]
 8104fd0:	e7cd      	b.n	8104f6e <_strtod_l+0x4d6>
 8104fd2:	d0ed      	beq.n	8104fb0 <_strtod_l+0x518>
 8104fd4:	4264      	negs	r4, r4
 8104fd6:	f014 020f 	ands.w	r2, r4, #15
 8104fda:	d00a      	beq.n	8104ff2 <_strtod_l+0x55a>
 8104fdc:	4b12      	ldr	r3, [pc, #72]	@ (8105028 <_strtod_l+0x590>)
 8104fde:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8104fe2:	4650      	mov	r0, sl
 8104fe4:	4659      	mov	r1, fp
 8104fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104fea:	f7fb fcb7 	bl	810095c <__aeabi_ddiv>
 8104fee:	4682      	mov	sl, r0
 8104ff0:	468b      	mov	fp, r1
 8104ff2:	1124      	asrs	r4, r4, #4
 8104ff4:	d0dc      	beq.n	8104fb0 <_strtod_l+0x518>
 8104ff6:	2c1f      	cmp	r4, #31
 8104ff8:	dd20      	ble.n	810503c <_strtod_l+0x5a4>
 8104ffa:	2400      	movs	r4, #0
 8104ffc:	46a0      	mov	r8, r4
 8104ffe:	940a      	str	r4, [sp, #40]	@ 0x28
 8105000:	46a1      	mov	r9, r4
 8105002:	9a05      	ldr	r2, [sp, #20]
 8105004:	2322      	movs	r3, #34	@ 0x22
 8105006:	f04f 0a00 	mov.w	sl, #0
 810500a:	f04f 0b00 	mov.w	fp, #0
 810500e:	6013      	str	r3, [r2, #0]
 8105010:	e768      	b.n	8104ee4 <_strtod_l+0x44c>
 8105012:	bf00      	nop
 8105014:	08108305 	.word	0x08108305
 8105018:	08108334 	.word	0x08108334
 810501c:	081082fd 	.word	0x081082fd
 8105020:	08108494 	.word	0x08108494
 8105024:	08108723 	.word	0x08108723
 8105028:	08108620 	.word	0x08108620
 810502c:	081085f8 	.word	0x081085f8
 8105030:	7ff00000 	.word	0x7ff00000
 8105034:	7ca00000 	.word	0x7ca00000
 8105038:	7fefffff 	.word	0x7fefffff
 810503c:	f014 0310 	ands.w	r3, r4, #16
 8105040:	bf18      	it	ne
 8105042:	236a      	movne	r3, #106	@ 0x6a
 8105044:	4ea9      	ldr	r6, [pc, #676]	@ (81052ec <_strtod_l+0x854>)
 8105046:	9308      	str	r3, [sp, #32]
 8105048:	4650      	mov	r0, sl
 810504a:	4659      	mov	r1, fp
 810504c:	2300      	movs	r3, #0
 810504e:	07e2      	lsls	r2, r4, #31
 8105050:	d504      	bpl.n	810505c <_strtod_l+0x5c4>
 8105052:	e9d6 2300 	ldrd	r2, r3, [r6]
 8105056:	f7fb fb57 	bl	8100708 <__aeabi_dmul>
 810505a:	2301      	movs	r3, #1
 810505c:	1064      	asrs	r4, r4, #1
 810505e:	f106 0608 	add.w	r6, r6, #8
 8105062:	d1f4      	bne.n	810504e <_strtod_l+0x5b6>
 8105064:	b10b      	cbz	r3, 810506a <_strtod_l+0x5d2>
 8105066:	4682      	mov	sl, r0
 8105068:	468b      	mov	fp, r1
 810506a:	9b08      	ldr	r3, [sp, #32]
 810506c:	b1b3      	cbz	r3, 810509c <_strtod_l+0x604>
 810506e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8105072:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8105076:	2b00      	cmp	r3, #0
 8105078:	4659      	mov	r1, fp
 810507a:	dd0f      	ble.n	810509c <_strtod_l+0x604>
 810507c:	2b1f      	cmp	r3, #31
 810507e:	dd55      	ble.n	810512c <_strtod_l+0x694>
 8105080:	2b34      	cmp	r3, #52	@ 0x34
 8105082:	bfde      	ittt	le
 8105084:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8105088:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 810508c:	4093      	lslle	r3, r2
 810508e:	f04f 0a00 	mov.w	sl, #0
 8105092:	bfcc      	ite	gt
 8105094:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8105098:	ea03 0b01 	andle.w	fp, r3, r1
 810509c:	2200      	movs	r2, #0
 810509e:	2300      	movs	r3, #0
 81050a0:	4650      	mov	r0, sl
 81050a2:	4659      	mov	r1, fp
 81050a4:	f7fb fd98 	bl	8100bd8 <__aeabi_dcmpeq>
 81050a8:	2800      	cmp	r0, #0
 81050aa:	d1a6      	bne.n	8104ffa <_strtod_l+0x562>
 81050ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81050ae:	9300      	str	r3, [sp, #0]
 81050b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 81050b2:	9805      	ldr	r0, [sp, #20]
 81050b4:	462b      	mov	r3, r5
 81050b6:	463a      	mov	r2, r7
 81050b8:	f002 f8d6 	bl	8107268 <__s2b>
 81050bc:	900a      	str	r0, [sp, #40]	@ 0x28
 81050be:	2800      	cmp	r0, #0
 81050c0:	f43f af05 	beq.w	8104ece <_strtod_l+0x436>
 81050c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 81050c6:	2a00      	cmp	r2, #0
 81050c8:	eba9 0308 	sub.w	r3, r9, r8
 81050cc:	bfa8      	it	ge
 81050ce:	2300      	movge	r3, #0
 81050d0:	9312      	str	r3, [sp, #72]	@ 0x48
 81050d2:	2400      	movs	r4, #0
 81050d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 81050d8:	9316      	str	r3, [sp, #88]	@ 0x58
 81050da:	46a0      	mov	r8, r4
 81050dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81050de:	9805      	ldr	r0, [sp, #20]
 81050e0:	6859      	ldr	r1, [r3, #4]
 81050e2:	f002 f819 	bl	8107118 <_Balloc>
 81050e6:	4681      	mov	r9, r0
 81050e8:	2800      	cmp	r0, #0
 81050ea:	f43f aef4 	beq.w	8104ed6 <_strtod_l+0x43e>
 81050ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81050f0:	691a      	ldr	r2, [r3, #16]
 81050f2:	3202      	adds	r2, #2
 81050f4:	f103 010c 	add.w	r1, r3, #12
 81050f8:	0092      	lsls	r2, r2, #2
 81050fa:	300c      	adds	r0, #12
 81050fc:	f000 fb9b 	bl	8105836 <memcpy>
 8105100:	ec4b ab10 	vmov	d0, sl, fp
 8105104:	9805      	ldr	r0, [sp, #20]
 8105106:	aa1c      	add	r2, sp, #112	@ 0x70
 8105108:	a91b      	add	r1, sp, #108	@ 0x6c
 810510a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 810510e:	f002 fbe7 	bl	81078e0 <__d2b>
 8105112:	901a      	str	r0, [sp, #104]	@ 0x68
 8105114:	2800      	cmp	r0, #0
 8105116:	f43f aede 	beq.w	8104ed6 <_strtod_l+0x43e>
 810511a:	9805      	ldr	r0, [sp, #20]
 810511c:	2101      	movs	r1, #1
 810511e:	f002 f939 	bl	8107394 <__i2b>
 8105122:	4680      	mov	r8, r0
 8105124:	b948      	cbnz	r0, 810513a <_strtod_l+0x6a2>
 8105126:	f04f 0800 	mov.w	r8, #0
 810512a:	e6d4      	b.n	8104ed6 <_strtod_l+0x43e>
 810512c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8105130:	fa02 f303 	lsl.w	r3, r2, r3
 8105134:	ea03 0a0a 	and.w	sl, r3, sl
 8105138:	e7b0      	b.n	810509c <_strtod_l+0x604>
 810513a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 810513c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 810513e:	2d00      	cmp	r5, #0
 8105140:	bfab      	itete	ge
 8105142:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8105144:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8105146:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8105148:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 810514a:	bfac      	ite	ge
 810514c:	18ef      	addge	r7, r5, r3
 810514e:	1b5e      	sublt	r6, r3, r5
 8105150:	9b08      	ldr	r3, [sp, #32]
 8105152:	1aed      	subs	r5, r5, r3
 8105154:	4415      	add	r5, r2
 8105156:	4b66      	ldr	r3, [pc, #408]	@ (81052f0 <_strtod_l+0x858>)
 8105158:	3d01      	subs	r5, #1
 810515a:	429d      	cmp	r5, r3
 810515c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8105160:	da50      	bge.n	8105204 <_strtod_l+0x76c>
 8105162:	1b5b      	subs	r3, r3, r5
 8105164:	2b1f      	cmp	r3, #31
 8105166:	eba2 0203 	sub.w	r2, r2, r3
 810516a:	f04f 0101 	mov.w	r1, #1
 810516e:	dc3d      	bgt.n	81051ec <_strtod_l+0x754>
 8105170:	fa01 f303 	lsl.w	r3, r1, r3
 8105174:	9313      	str	r3, [sp, #76]	@ 0x4c
 8105176:	2300      	movs	r3, #0
 8105178:	9310      	str	r3, [sp, #64]	@ 0x40
 810517a:	18bd      	adds	r5, r7, r2
 810517c:	9b08      	ldr	r3, [sp, #32]
 810517e:	42af      	cmp	r7, r5
 8105180:	4416      	add	r6, r2
 8105182:	441e      	add	r6, r3
 8105184:	463b      	mov	r3, r7
 8105186:	bfa8      	it	ge
 8105188:	462b      	movge	r3, r5
 810518a:	42b3      	cmp	r3, r6
 810518c:	bfa8      	it	ge
 810518e:	4633      	movge	r3, r6
 8105190:	2b00      	cmp	r3, #0
 8105192:	bfc2      	ittt	gt
 8105194:	1aed      	subgt	r5, r5, r3
 8105196:	1af6      	subgt	r6, r6, r3
 8105198:	1aff      	subgt	r7, r7, r3
 810519a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 810519c:	2b00      	cmp	r3, #0
 810519e:	dd16      	ble.n	81051ce <_strtod_l+0x736>
 81051a0:	4641      	mov	r1, r8
 81051a2:	9805      	ldr	r0, [sp, #20]
 81051a4:	461a      	mov	r2, r3
 81051a6:	f002 f9b5 	bl	8107514 <__pow5mult>
 81051aa:	4680      	mov	r8, r0
 81051ac:	2800      	cmp	r0, #0
 81051ae:	d0ba      	beq.n	8105126 <_strtod_l+0x68e>
 81051b0:	4601      	mov	r1, r0
 81051b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 81051b4:	9805      	ldr	r0, [sp, #20]
 81051b6:	f002 f903 	bl	81073c0 <__multiply>
 81051ba:	900e      	str	r0, [sp, #56]	@ 0x38
 81051bc:	2800      	cmp	r0, #0
 81051be:	f43f ae8a 	beq.w	8104ed6 <_strtod_l+0x43e>
 81051c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 81051c4:	9805      	ldr	r0, [sp, #20]
 81051c6:	f001 ffe7 	bl	8107198 <_Bfree>
 81051ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81051cc:	931a      	str	r3, [sp, #104]	@ 0x68
 81051ce:	2d00      	cmp	r5, #0
 81051d0:	dc1d      	bgt.n	810520e <_strtod_l+0x776>
 81051d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81051d4:	2b00      	cmp	r3, #0
 81051d6:	dd23      	ble.n	8105220 <_strtod_l+0x788>
 81051d8:	4649      	mov	r1, r9
 81051da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 81051dc:	9805      	ldr	r0, [sp, #20]
 81051de:	f002 f999 	bl	8107514 <__pow5mult>
 81051e2:	4681      	mov	r9, r0
 81051e4:	b9e0      	cbnz	r0, 8105220 <_strtod_l+0x788>
 81051e6:	f04f 0900 	mov.w	r9, #0
 81051ea:	e674      	b.n	8104ed6 <_strtod_l+0x43e>
 81051ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 81051f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 81051f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 81051f8:	35e2      	adds	r5, #226	@ 0xe2
 81051fa:	fa01 f305 	lsl.w	r3, r1, r5
 81051fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8105200:	9113      	str	r1, [sp, #76]	@ 0x4c
 8105202:	e7ba      	b.n	810517a <_strtod_l+0x6e2>
 8105204:	2300      	movs	r3, #0
 8105206:	9310      	str	r3, [sp, #64]	@ 0x40
 8105208:	2301      	movs	r3, #1
 810520a:	9313      	str	r3, [sp, #76]	@ 0x4c
 810520c:	e7b5      	b.n	810517a <_strtod_l+0x6e2>
 810520e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8105210:	9805      	ldr	r0, [sp, #20]
 8105212:	462a      	mov	r2, r5
 8105214:	f002 f9d8 	bl	81075c8 <__lshift>
 8105218:	901a      	str	r0, [sp, #104]	@ 0x68
 810521a:	2800      	cmp	r0, #0
 810521c:	d1d9      	bne.n	81051d2 <_strtod_l+0x73a>
 810521e:	e65a      	b.n	8104ed6 <_strtod_l+0x43e>
 8105220:	2e00      	cmp	r6, #0
 8105222:	dd07      	ble.n	8105234 <_strtod_l+0x79c>
 8105224:	4649      	mov	r1, r9
 8105226:	9805      	ldr	r0, [sp, #20]
 8105228:	4632      	mov	r2, r6
 810522a:	f002 f9cd 	bl	81075c8 <__lshift>
 810522e:	4681      	mov	r9, r0
 8105230:	2800      	cmp	r0, #0
 8105232:	d0d8      	beq.n	81051e6 <_strtod_l+0x74e>
 8105234:	2f00      	cmp	r7, #0
 8105236:	dd08      	ble.n	810524a <_strtod_l+0x7b2>
 8105238:	4641      	mov	r1, r8
 810523a:	9805      	ldr	r0, [sp, #20]
 810523c:	463a      	mov	r2, r7
 810523e:	f002 f9c3 	bl	81075c8 <__lshift>
 8105242:	4680      	mov	r8, r0
 8105244:	2800      	cmp	r0, #0
 8105246:	f43f ae46 	beq.w	8104ed6 <_strtod_l+0x43e>
 810524a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810524c:	9805      	ldr	r0, [sp, #20]
 810524e:	464a      	mov	r2, r9
 8105250:	f002 fa42 	bl	81076d8 <__mdiff>
 8105254:	4604      	mov	r4, r0
 8105256:	2800      	cmp	r0, #0
 8105258:	f43f ae3d 	beq.w	8104ed6 <_strtod_l+0x43e>
 810525c:	68c3      	ldr	r3, [r0, #12]
 810525e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8105260:	2300      	movs	r3, #0
 8105262:	60c3      	str	r3, [r0, #12]
 8105264:	4641      	mov	r1, r8
 8105266:	f002 fa1b 	bl	81076a0 <__mcmp>
 810526a:	2800      	cmp	r0, #0
 810526c:	da46      	bge.n	81052fc <_strtod_l+0x864>
 810526e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8105270:	ea53 030a 	orrs.w	r3, r3, sl
 8105274:	d16c      	bne.n	8105350 <_strtod_l+0x8b8>
 8105276:	f3cb 0313 	ubfx	r3, fp, #0, #20
 810527a:	2b00      	cmp	r3, #0
 810527c:	d168      	bne.n	8105350 <_strtod_l+0x8b8>
 810527e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8105282:	0d1b      	lsrs	r3, r3, #20
 8105284:	051b      	lsls	r3, r3, #20
 8105286:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 810528a:	d961      	bls.n	8105350 <_strtod_l+0x8b8>
 810528c:	6963      	ldr	r3, [r4, #20]
 810528e:	b913      	cbnz	r3, 8105296 <_strtod_l+0x7fe>
 8105290:	6923      	ldr	r3, [r4, #16]
 8105292:	2b01      	cmp	r3, #1
 8105294:	dd5c      	ble.n	8105350 <_strtod_l+0x8b8>
 8105296:	4621      	mov	r1, r4
 8105298:	2201      	movs	r2, #1
 810529a:	9805      	ldr	r0, [sp, #20]
 810529c:	f002 f994 	bl	81075c8 <__lshift>
 81052a0:	4641      	mov	r1, r8
 81052a2:	4604      	mov	r4, r0
 81052a4:	f002 f9fc 	bl	81076a0 <__mcmp>
 81052a8:	2800      	cmp	r0, #0
 81052aa:	dd51      	ble.n	8105350 <_strtod_l+0x8b8>
 81052ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 81052b0:	9a08      	ldr	r2, [sp, #32]
 81052b2:	0d1b      	lsrs	r3, r3, #20
 81052b4:	051b      	lsls	r3, r3, #20
 81052b6:	2a00      	cmp	r2, #0
 81052b8:	d06b      	beq.n	8105392 <_strtod_l+0x8fa>
 81052ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 81052be:	d868      	bhi.n	8105392 <_strtod_l+0x8fa>
 81052c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 81052c4:	f67f ae9d 	bls.w	8105002 <_strtod_l+0x56a>
 81052c8:	4b0a      	ldr	r3, [pc, #40]	@ (81052f4 <_strtod_l+0x85c>)
 81052ca:	4650      	mov	r0, sl
 81052cc:	4659      	mov	r1, fp
 81052ce:	2200      	movs	r2, #0
 81052d0:	f7fb fa1a 	bl	8100708 <__aeabi_dmul>
 81052d4:	4b08      	ldr	r3, [pc, #32]	@ (81052f8 <_strtod_l+0x860>)
 81052d6:	400b      	ands	r3, r1
 81052d8:	4682      	mov	sl, r0
 81052da:	468b      	mov	fp, r1
 81052dc:	2b00      	cmp	r3, #0
 81052de:	f47f ae05 	bne.w	8104eec <_strtod_l+0x454>
 81052e2:	9a05      	ldr	r2, [sp, #20]
 81052e4:	2322      	movs	r3, #34	@ 0x22
 81052e6:	6013      	str	r3, [r2, #0]
 81052e8:	e600      	b.n	8104eec <_strtod_l+0x454>
 81052ea:	bf00      	nop
 81052ec:	08108360 	.word	0x08108360
 81052f0:	fffffc02 	.word	0xfffffc02
 81052f4:	39500000 	.word	0x39500000
 81052f8:	7ff00000 	.word	0x7ff00000
 81052fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8105300:	d165      	bne.n	81053ce <_strtod_l+0x936>
 8105302:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8105304:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8105308:	b35a      	cbz	r2, 8105362 <_strtod_l+0x8ca>
 810530a:	4a9f      	ldr	r2, [pc, #636]	@ (8105588 <_strtod_l+0xaf0>)
 810530c:	4293      	cmp	r3, r2
 810530e:	d12b      	bne.n	8105368 <_strtod_l+0x8d0>
 8105310:	9b08      	ldr	r3, [sp, #32]
 8105312:	4651      	mov	r1, sl
 8105314:	b303      	cbz	r3, 8105358 <_strtod_l+0x8c0>
 8105316:	4b9d      	ldr	r3, [pc, #628]	@ (810558c <_strtod_l+0xaf4>)
 8105318:	465a      	mov	r2, fp
 810531a:	4013      	ands	r3, r2
 810531c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8105320:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8105324:	d81b      	bhi.n	810535e <_strtod_l+0x8c6>
 8105326:	0d1b      	lsrs	r3, r3, #20
 8105328:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 810532c:	fa02 f303 	lsl.w	r3, r2, r3
 8105330:	4299      	cmp	r1, r3
 8105332:	d119      	bne.n	8105368 <_strtod_l+0x8d0>
 8105334:	4b96      	ldr	r3, [pc, #600]	@ (8105590 <_strtod_l+0xaf8>)
 8105336:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8105338:	429a      	cmp	r2, r3
 810533a:	d102      	bne.n	8105342 <_strtod_l+0x8aa>
 810533c:	3101      	adds	r1, #1
 810533e:	f43f adca 	beq.w	8104ed6 <_strtod_l+0x43e>
 8105342:	4b92      	ldr	r3, [pc, #584]	@ (810558c <_strtod_l+0xaf4>)
 8105344:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8105346:	401a      	ands	r2, r3
 8105348:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 810534c:	f04f 0a00 	mov.w	sl, #0
 8105350:	9b08      	ldr	r3, [sp, #32]
 8105352:	2b00      	cmp	r3, #0
 8105354:	d1b8      	bne.n	81052c8 <_strtod_l+0x830>
 8105356:	e5c9      	b.n	8104eec <_strtod_l+0x454>
 8105358:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 810535c:	e7e8      	b.n	8105330 <_strtod_l+0x898>
 810535e:	4613      	mov	r3, r2
 8105360:	e7e6      	b.n	8105330 <_strtod_l+0x898>
 8105362:	ea53 030a 	orrs.w	r3, r3, sl
 8105366:	d0a1      	beq.n	81052ac <_strtod_l+0x814>
 8105368:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 810536a:	b1db      	cbz	r3, 81053a4 <_strtod_l+0x90c>
 810536c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810536e:	4213      	tst	r3, r2
 8105370:	d0ee      	beq.n	8105350 <_strtod_l+0x8b8>
 8105372:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8105374:	9a08      	ldr	r2, [sp, #32]
 8105376:	4650      	mov	r0, sl
 8105378:	4659      	mov	r1, fp
 810537a:	b1bb      	cbz	r3, 81053ac <_strtod_l+0x914>
 810537c:	f7ff fb6c 	bl	8104a58 <sulp>
 8105380:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8105384:	ec53 2b10 	vmov	r2, r3, d0
 8105388:	f7fb f808 	bl	810039c <__adddf3>
 810538c:	4682      	mov	sl, r0
 810538e:	468b      	mov	fp, r1
 8105390:	e7de      	b.n	8105350 <_strtod_l+0x8b8>
 8105392:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8105396:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 810539a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 810539e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 81053a2:	e7d5      	b.n	8105350 <_strtod_l+0x8b8>
 81053a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 81053a6:	ea13 0f0a 	tst.w	r3, sl
 81053aa:	e7e1      	b.n	8105370 <_strtod_l+0x8d8>
 81053ac:	f7ff fb54 	bl	8104a58 <sulp>
 81053b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 81053b4:	ec53 2b10 	vmov	r2, r3, d0
 81053b8:	f7fa ffee 	bl	8100398 <__aeabi_dsub>
 81053bc:	2200      	movs	r2, #0
 81053be:	2300      	movs	r3, #0
 81053c0:	4682      	mov	sl, r0
 81053c2:	468b      	mov	fp, r1
 81053c4:	f7fb fc08 	bl	8100bd8 <__aeabi_dcmpeq>
 81053c8:	2800      	cmp	r0, #0
 81053ca:	d0c1      	beq.n	8105350 <_strtod_l+0x8b8>
 81053cc:	e619      	b.n	8105002 <_strtod_l+0x56a>
 81053ce:	4641      	mov	r1, r8
 81053d0:	4620      	mov	r0, r4
 81053d2:	f002 fadd 	bl	8107990 <__ratio>
 81053d6:	ec57 6b10 	vmov	r6, r7, d0
 81053da:	2200      	movs	r2, #0
 81053dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 81053e0:	4630      	mov	r0, r6
 81053e2:	4639      	mov	r1, r7
 81053e4:	f7fb fc0c 	bl	8100c00 <__aeabi_dcmple>
 81053e8:	2800      	cmp	r0, #0
 81053ea:	d06f      	beq.n	81054cc <_strtod_l+0xa34>
 81053ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81053ee:	2b00      	cmp	r3, #0
 81053f0:	d17a      	bne.n	81054e8 <_strtod_l+0xa50>
 81053f2:	f1ba 0f00 	cmp.w	sl, #0
 81053f6:	d158      	bne.n	81054aa <_strtod_l+0xa12>
 81053f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81053fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81053fe:	2b00      	cmp	r3, #0
 8105400:	d15a      	bne.n	81054b8 <_strtod_l+0xa20>
 8105402:	4b64      	ldr	r3, [pc, #400]	@ (8105594 <_strtod_l+0xafc>)
 8105404:	2200      	movs	r2, #0
 8105406:	4630      	mov	r0, r6
 8105408:	4639      	mov	r1, r7
 810540a:	f7fb fbef 	bl	8100bec <__aeabi_dcmplt>
 810540e:	2800      	cmp	r0, #0
 8105410:	d159      	bne.n	81054c6 <_strtod_l+0xa2e>
 8105412:	4630      	mov	r0, r6
 8105414:	4639      	mov	r1, r7
 8105416:	4b60      	ldr	r3, [pc, #384]	@ (8105598 <_strtod_l+0xb00>)
 8105418:	2200      	movs	r2, #0
 810541a:	f7fb f975 	bl	8100708 <__aeabi_dmul>
 810541e:	4606      	mov	r6, r0
 8105420:	460f      	mov	r7, r1
 8105422:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8105426:	9606      	str	r6, [sp, #24]
 8105428:	9307      	str	r3, [sp, #28]
 810542a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810542e:	4d57      	ldr	r5, [pc, #348]	@ (810558c <_strtod_l+0xaf4>)
 8105430:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8105434:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8105436:	401d      	ands	r5, r3
 8105438:	4b58      	ldr	r3, [pc, #352]	@ (810559c <_strtod_l+0xb04>)
 810543a:	429d      	cmp	r5, r3
 810543c:	f040 80b2 	bne.w	81055a4 <_strtod_l+0xb0c>
 8105440:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8105442:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8105446:	ec4b ab10 	vmov	d0, sl, fp
 810544a:	f002 f9d9 	bl	8107800 <__ulp>
 810544e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8105452:	ec51 0b10 	vmov	r0, r1, d0
 8105456:	f7fb f957 	bl	8100708 <__aeabi_dmul>
 810545a:	4652      	mov	r2, sl
 810545c:	465b      	mov	r3, fp
 810545e:	f7fa ff9d 	bl	810039c <__adddf3>
 8105462:	460b      	mov	r3, r1
 8105464:	4949      	ldr	r1, [pc, #292]	@ (810558c <_strtod_l+0xaf4>)
 8105466:	4a4e      	ldr	r2, [pc, #312]	@ (81055a0 <_strtod_l+0xb08>)
 8105468:	4019      	ands	r1, r3
 810546a:	4291      	cmp	r1, r2
 810546c:	4682      	mov	sl, r0
 810546e:	d942      	bls.n	81054f6 <_strtod_l+0xa5e>
 8105470:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8105472:	4b47      	ldr	r3, [pc, #284]	@ (8105590 <_strtod_l+0xaf8>)
 8105474:	429a      	cmp	r2, r3
 8105476:	d103      	bne.n	8105480 <_strtod_l+0x9e8>
 8105478:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 810547a:	3301      	adds	r3, #1
 810547c:	f43f ad2b 	beq.w	8104ed6 <_strtod_l+0x43e>
 8105480:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8105590 <_strtod_l+0xaf8>
 8105484:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8105488:	991a      	ldr	r1, [sp, #104]	@ 0x68
 810548a:	9805      	ldr	r0, [sp, #20]
 810548c:	f001 fe84 	bl	8107198 <_Bfree>
 8105490:	9805      	ldr	r0, [sp, #20]
 8105492:	4649      	mov	r1, r9
 8105494:	f001 fe80 	bl	8107198 <_Bfree>
 8105498:	9805      	ldr	r0, [sp, #20]
 810549a:	4641      	mov	r1, r8
 810549c:	f001 fe7c 	bl	8107198 <_Bfree>
 81054a0:	9805      	ldr	r0, [sp, #20]
 81054a2:	4621      	mov	r1, r4
 81054a4:	f001 fe78 	bl	8107198 <_Bfree>
 81054a8:	e618      	b.n	81050dc <_strtod_l+0x644>
 81054aa:	f1ba 0f01 	cmp.w	sl, #1
 81054ae:	d103      	bne.n	81054b8 <_strtod_l+0xa20>
 81054b0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 81054b2:	2b00      	cmp	r3, #0
 81054b4:	f43f ada5 	beq.w	8105002 <_strtod_l+0x56a>
 81054b8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8105568 <_strtod_l+0xad0>
 81054bc:	4f35      	ldr	r7, [pc, #212]	@ (8105594 <_strtod_l+0xafc>)
 81054be:	ed8d 7b06 	vstr	d7, [sp, #24]
 81054c2:	2600      	movs	r6, #0
 81054c4:	e7b1      	b.n	810542a <_strtod_l+0x992>
 81054c6:	4f34      	ldr	r7, [pc, #208]	@ (8105598 <_strtod_l+0xb00>)
 81054c8:	2600      	movs	r6, #0
 81054ca:	e7aa      	b.n	8105422 <_strtod_l+0x98a>
 81054cc:	4b32      	ldr	r3, [pc, #200]	@ (8105598 <_strtod_l+0xb00>)
 81054ce:	4630      	mov	r0, r6
 81054d0:	4639      	mov	r1, r7
 81054d2:	2200      	movs	r2, #0
 81054d4:	f7fb f918 	bl	8100708 <__aeabi_dmul>
 81054d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81054da:	4606      	mov	r6, r0
 81054dc:	460f      	mov	r7, r1
 81054de:	2b00      	cmp	r3, #0
 81054e0:	d09f      	beq.n	8105422 <_strtod_l+0x98a>
 81054e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 81054e6:	e7a0      	b.n	810542a <_strtod_l+0x992>
 81054e8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8105570 <_strtod_l+0xad8>
 81054ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 81054f0:	ec57 6b17 	vmov	r6, r7, d7
 81054f4:	e799      	b.n	810542a <_strtod_l+0x992>
 81054f6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 81054fa:	9b08      	ldr	r3, [sp, #32]
 81054fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8105500:	2b00      	cmp	r3, #0
 8105502:	d1c1      	bne.n	8105488 <_strtod_l+0x9f0>
 8105504:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8105508:	0d1b      	lsrs	r3, r3, #20
 810550a:	051b      	lsls	r3, r3, #20
 810550c:	429d      	cmp	r5, r3
 810550e:	d1bb      	bne.n	8105488 <_strtod_l+0x9f0>
 8105510:	4630      	mov	r0, r6
 8105512:	4639      	mov	r1, r7
 8105514:	f7fb fc40 	bl	8100d98 <__aeabi_d2lz>
 8105518:	f7fb f8c8 	bl	81006ac <__aeabi_l2d>
 810551c:	4602      	mov	r2, r0
 810551e:	460b      	mov	r3, r1
 8105520:	4630      	mov	r0, r6
 8105522:	4639      	mov	r1, r7
 8105524:	f7fa ff38 	bl	8100398 <__aeabi_dsub>
 8105528:	460b      	mov	r3, r1
 810552a:	4602      	mov	r2, r0
 810552c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8105530:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8105534:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8105536:	ea46 060a 	orr.w	r6, r6, sl
 810553a:	431e      	orrs	r6, r3
 810553c:	d06f      	beq.n	810561e <_strtod_l+0xb86>
 810553e:	a30e      	add	r3, pc, #56	@ (adr r3, 8105578 <_strtod_l+0xae0>)
 8105540:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105544:	f7fb fb52 	bl	8100bec <__aeabi_dcmplt>
 8105548:	2800      	cmp	r0, #0
 810554a:	f47f accf 	bne.w	8104eec <_strtod_l+0x454>
 810554e:	a30c      	add	r3, pc, #48	@ (adr r3, 8105580 <_strtod_l+0xae8>)
 8105550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105554:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8105558:	f7fb fb66 	bl	8100c28 <__aeabi_dcmpgt>
 810555c:	2800      	cmp	r0, #0
 810555e:	d093      	beq.n	8105488 <_strtod_l+0x9f0>
 8105560:	e4c4      	b.n	8104eec <_strtod_l+0x454>
 8105562:	bf00      	nop
 8105564:	f3af 8000 	nop.w
 8105568:	00000000 	.word	0x00000000
 810556c:	bff00000 	.word	0xbff00000
 8105570:	00000000 	.word	0x00000000
 8105574:	3ff00000 	.word	0x3ff00000
 8105578:	94a03595 	.word	0x94a03595
 810557c:	3fdfffff 	.word	0x3fdfffff
 8105580:	35afe535 	.word	0x35afe535
 8105584:	3fe00000 	.word	0x3fe00000
 8105588:	000fffff 	.word	0x000fffff
 810558c:	7ff00000 	.word	0x7ff00000
 8105590:	7fefffff 	.word	0x7fefffff
 8105594:	3ff00000 	.word	0x3ff00000
 8105598:	3fe00000 	.word	0x3fe00000
 810559c:	7fe00000 	.word	0x7fe00000
 81055a0:	7c9fffff 	.word	0x7c9fffff
 81055a4:	9b08      	ldr	r3, [sp, #32]
 81055a6:	b323      	cbz	r3, 81055f2 <_strtod_l+0xb5a>
 81055a8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 81055ac:	d821      	bhi.n	81055f2 <_strtod_l+0xb5a>
 81055ae:	a328      	add	r3, pc, #160	@ (adr r3, 8105650 <_strtod_l+0xbb8>)
 81055b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81055b4:	4630      	mov	r0, r6
 81055b6:	4639      	mov	r1, r7
 81055b8:	f7fb fb22 	bl	8100c00 <__aeabi_dcmple>
 81055bc:	b1a0      	cbz	r0, 81055e8 <_strtod_l+0xb50>
 81055be:	4639      	mov	r1, r7
 81055c0:	4630      	mov	r0, r6
 81055c2:	f7fb fb79 	bl	8100cb8 <__aeabi_d2uiz>
 81055c6:	2801      	cmp	r0, #1
 81055c8:	bf38      	it	cc
 81055ca:	2001      	movcc	r0, #1
 81055cc:	f7fb f822 	bl	8100614 <__aeabi_ui2d>
 81055d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81055d2:	4606      	mov	r6, r0
 81055d4:	460f      	mov	r7, r1
 81055d6:	b9fb      	cbnz	r3, 8105618 <_strtod_l+0xb80>
 81055d8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 81055dc:	9014      	str	r0, [sp, #80]	@ 0x50
 81055de:	9315      	str	r3, [sp, #84]	@ 0x54
 81055e0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 81055e4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 81055e8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 81055ea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 81055ee:	1b5b      	subs	r3, r3, r5
 81055f0:	9311      	str	r3, [sp, #68]	@ 0x44
 81055f2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 81055f6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 81055fa:	f002 f901 	bl	8107800 <__ulp>
 81055fe:	4650      	mov	r0, sl
 8105600:	ec53 2b10 	vmov	r2, r3, d0
 8105604:	4659      	mov	r1, fp
 8105606:	f7fb f87f 	bl	8100708 <__aeabi_dmul>
 810560a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 810560e:	f7fa fec5 	bl	810039c <__adddf3>
 8105612:	4682      	mov	sl, r0
 8105614:	468b      	mov	fp, r1
 8105616:	e770      	b.n	81054fa <_strtod_l+0xa62>
 8105618:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 810561c:	e7e0      	b.n	81055e0 <_strtod_l+0xb48>
 810561e:	a30e      	add	r3, pc, #56	@ (adr r3, 8105658 <_strtod_l+0xbc0>)
 8105620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105624:	f7fb fae2 	bl	8100bec <__aeabi_dcmplt>
 8105628:	e798      	b.n	810555c <_strtod_l+0xac4>
 810562a:	2300      	movs	r3, #0
 810562c:	930b      	str	r3, [sp, #44]	@ 0x2c
 810562e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8105630:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8105632:	6013      	str	r3, [r2, #0]
 8105634:	f7ff ba6d 	b.w	8104b12 <_strtod_l+0x7a>
 8105638:	2a65      	cmp	r2, #101	@ 0x65
 810563a:	f43f ab66 	beq.w	8104d0a <_strtod_l+0x272>
 810563e:	2a45      	cmp	r2, #69	@ 0x45
 8105640:	f43f ab63 	beq.w	8104d0a <_strtod_l+0x272>
 8105644:	2301      	movs	r3, #1
 8105646:	f7ff bb9e 	b.w	8104d86 <_strtod_l+0x2ee>
 810564a:	bf00      	nop
 810564c:	f3af 8000 	nop.w
 8105650:	ffc00000 	.word	0xffc00000
 8105654:	41dfffff 	.word	0x41dfffff
 8105658:	94a03595 	.word	0x94a03595
 810565c:	3fcfffff 	.word	0x3fcfffff

08105660 <_strtod_r>:
 8105660:	4b01      	ldr	r3, [pc, #4]	@ (8105668 <_strtod_r+0x8>)
 8105662:	f7ff ba19 	b.w	8104a98 <_strtod_l>
 8105666:	bf00      	nop
 8105668:	1000001c 	.word	0x1000001c

0810566c <_strtol_l.constprop.0>:
 810566c:	2b24      	cmp	r3, #36	@ 0x24
 810566e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8105672:	4686      	mov	lr, r0
 8105674:	4690      	mov	r8, r2
 8105676:	d801      	bhi.n	810567c <_strtol_l.constprop.0+0x10>
 8105678:	2b01      	cmp	r3, #1
 810567a:	d106      	bne.n	810568a <_strtol_l.constprop.0+0x1e>
 810567c:	f000 f8ae 	bl	81057dc <__errno>
 8105680:	2316      	movs	r3, #22
 8105682:	6003      	str	r3, [r0, #0]
 8105684:	2000      	movs	r0, #0
 8105686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810568a:	4834      	ldr	r0, [pc, #208]	@ (810575c <_strtol_l.constprop.0+0xf0>)
 810568c:	460d      	mov	r5, r1
 810568e:	462a      	mov	r2, r5
 8105690:	f815 4b01 	ldrb.w	r4, [r5], #1
 8105694:	5d06      	ldrb	r6, [r0, r4]
 8105696:	f016 0608 	ands.w	r6, r6, #8
 810569a:	d1f8      	bne.n	810568e <_strtol_l.constprop.0+0x22>
 810569c:	2c2d      	cmp	r4, #45	@ 0x2d
 810569e:	d12d      	bne.n	81056fc <_strtol_l.constprop.0+0x90>
 81056a0:	782c      	ldrb	r4, [r5, #0]
 81056a2:	2601      	movs	r6, #1
 81056a4:	1c95      	adds	r5, r2, #2
 81056a6:	f033 0210 	bics.w	r2, r3, #16
 81056aa:	d109      	bne.n	81056c0 <_strtol_l.constprop.0+0x54>
 81056ac:	2c30      	cmp	r4, #48	@ 0x30
 81056ae:	d12a      	bne.n	8105706 <_strtol_l.constprop.0+0x9a>
 81056b0:	782a      	ldrb	r2, [r5, #0]
 81056b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 81056b6:	2a58      	cmp	r2, #88	@ 0x58
 81056b8:	d125      	bne.n	8105706 <_strtol_l.constprop.0+0x9a>
 81056ba:	786c      	ldrb	r4, [r5, #1]
 81056bc:	2310      	movs	r3, #16
 81056be:	3502      	adds	r5, #2
 81056c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 81056c4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 81056c8:	2200      	movs	r2, #0
 81056ca:	fbbc f9f3 	udiv	r9, ip, r3
 81056ce:	4610      	mov	r0, r2
 81056d0:	fb03 ca19 	mls	sl, r3, r9, ip
 81056d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 81056d8:	2f09      	cmp	r7, #9
 81056da:	d81b      	bhi.n	8105714 <_strtol_l.constprop.0+0xa8>
 81056dc:	463c      	mov	r4, r7
 81056de:	42a3      	cmp	r3, r4
 81056e0:	dd27      	ble.n	8105732 <_strtol_l.constprop.0+0xc6>
 81056e2:	1c57      	adds	r7, r2, #1
 81056e4:	d007      	beq.n	81056f6 <_strtol_l.constprop.0+0x8a>
 81056e6:	4581      	cmp	r9, r0
 81056e8:	d320      	bcc.n	810572c <_strtol_l.constprop.0+0xc0>
 81056ea:	d101      	bne.n	81056f0 <_strtol_l.constprop.0+0x84>
 81056ec:	45a2      	cmp	sl, r4
 81056ee:	db1d      	blt.n	810572c <_strtol_l.constprop.0+0xc0>
 81056f0:	fb00 4003 	mla	r0, r0, r3, r4
 81056f4:	2201      	movs	r2, #1
 81056f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 81056fa:	e7eb      	b.n	81056d4 <_strtol_l.constprop.0+0x68>
 81056fc:	2c2b      	cmp	r4, #43	@ 0x2b
 81056fe:	bf04      	itt	eq
 8105700:	782c      	ldrbeq	r4, [r5, #0]
 8105702:	1c95      	addeq	r5, r2, #2
 8105704:	e7cf      	b.n	81056a6 <_strtol_l.constprop.0+0x3a>
 8105706:	2b00      	cmp	r3, #0
 8105708:	d1da      	bne.n	81056c0 <_strtol_l.constprop.0+0x54>
 810570a:	2c30      	cmp	r4, #48	@ 0x30
 810570c:	bf0c      	ite	eq
 810570e:	2308      	moveq	r3, #8
 8105710:	230a      	movne	r3, #10
 8105712:	e7d5      	b.n	81056c0 <_strtol_l.constprop.0+0x54>
 8105714:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8105718:	2f19      	cmp	r7, #25
 810571a:	d801      	bhi.n	8105720 <_strtol_l.constprop.0+0xb4>
 810571c:	3c37      	subs	r4, #55	@ 0x37
 810571e:	e7de      	b.n	81056de <_strtol_l.constprop.0+0x72>
 8105720:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8105724:	2f19      	cmp	r7, #25
 8105726:	d804      	bhi.n	8105732 <_strtol_l.constprop.0+0xc6>
 8105728:	3c57      	subs	r4, #87	@ 0x57
 810572a:	e7d8      	b.n	81056de <_strtol_l.constprop.0+0x72>
 810572c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8105730:	e7e1      	b.n	81056f6 <_strtol_l.constprop.0+0x8a>
 8105732:	1c53      	adds	r3, r2, #1
 8105734:	d108      	bne.n	8105748 <_strtol_l.constprop.0+0xdc>
 8105736:	2322      	movs	r3, #34	@ 0x22
 8105738:	f8ce 3000 	str.w	r3, [lr]
 810573c:	4660      	mov	r0, ip
 810573e:	f1b8 0f00 	cmp.w	r8, #0
 8105742:	d0a0      	beq.n	8105686 <_strtol_l.constprop.0+0x1a>
 8105744:	1e69      	subs	r1, r5, #1
 8105746:	e006      	b.n	8105756 <_strtol_l.constprop.0+0xea>
 8105748:	b106      	cbz	r6, 810574c <_strtol_l.constprop.0+0xe0>
 810574a:	4240      	negs	r0, r0
 810574c:	f1b8 0f00 	cmp.w	r8, #0
 8105750:	d099      	beq.n	8105686 <_strtol_l.constprop.0+0x1a>
 8105752:	2a00      	cmp	r2, #0
 8105754:	d1f6      	bne.n	8105744 <_strtol_l.constprop.0+0xd8>
 8105756:	f8c8 1000 	str.w	r1, [r8]
 810575a:	e794      	b.n	8105686 <_strtol_l.constprop.0+0x1a>
 810575c:	08108391 	.word	0x08108391

08105760 <_strtol_r>:
 8105760:	f7ff bf84 	b.w	810566c <_strtol_l.constprop.0>

08105764 <_fwalk_sglue>:
 8105764:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8105768:	4607      	mov	r7, r0
 810576a:	4688      	mov	r8, r1
 810576c:	4614      	mov	r4, r2
 810576e:	2600      	movs	r6, #0
 8105770:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8105774:	f1b9 0901 	subs.w	r9, r9, #1
 8105778:	d505      	bpl.n	8105786 <_fwalk_sglue+0x22>
 810577a:	6824      	ldr	r4, [r4, #0]
 810577c:	2c00      	cmp	r4, #0
 810577e:	d1f7      	bne.n	8105770 <_fwalk_sglue+0xc>
 8105780:	4630      	mov	r0, r6
 8105782:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8105786:	89ab      	ldrh	r3, [r5, #12]
 8105788:	2b01      	cmp	r3, #1
 810578a:	d907      	bls.n	810579c <_fwalk_sglue+0x38>
 810578c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8105790:	3301      	adds	r3, #1
 8105792:	d003      	beq.n	810579c <_fwalk_sglue+0x38>
 8105794:	4629      	mov	r1, r5
 8105796:	4638      	mov	r0, r7
 8105798:	47c0      	blx	r8
 810579a:	4306      	orrs	r6, r0
 810579c:	3568      	adds	r5, #104	@ 0x68
 810579e:	e7e9      	b.n	8105774 <_fwalk_sglue+0x10>

081057a0 <strncmp>:
 81057a0:	b510      	push	{r4, lr}
 81057a2:	b16a      	cbz	r2, 81057c0 <strncmp+0x20>
 81057a4:	3901      	subs	r1, #1
 81057a6:	1884      	adds	r4, r0, r2
 81057a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 81057ac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 81057b0:	429a      	cmp	r2, r3
 81057b2:	d103      	bne.n	81057bc <strncmp+0x1c>
 81057b4:	42a0      	cmp	r0, r4
 81057b6:	d001      	beq.n	81057bc <strncmp+0x1c>
 81057b8:	2a00      	cmp	r2, #0
 81057ba:	d1f5      	bne.n	81057a8 <strncmp+0x8>
 81057bc:	1ad0      	subs	r0, r2, r3
 81057be:	bd10      	pop	{r4, pc}
 81057c0:	4610      	mov	r0, r2
 81057c2:	e7fc      	b.n	81057be <strncmp+0x1e>

081057c4 <memset>:
 81057c4:	4402      	add	r2, r0
 81057c6:	4603      	mov	r3, r0
 81057c8:	4293      	cmp	r3, r2
 81057ca:	d100      	bne.n	81057ce <memset+0xa>
 81057cc:	4770      	bx	lr
 81057ce:	f803 1b01 	strb.w	r1, [r3], #1
 81057d2:	e7f9      	b.n	81057c8 <memset+0x4>

081057d4 <_localeconv_r>:
 81057d4:	4800      	ldr	r0, [pc, #0]	@ (81057d8 <_localeconv_r+0x4>)
 81057d6:	4770      	bx	lr
 81057d8:	1000010c 	.word	0x1000010c

081057dc <__errno>:
 81057dc:	4b01      	ldr	r3, [pc, #4]	@ (81057e4 <__errno+0x8>)
 81057de:	6818      	ldr	r0, [r3, #0]
 81057e0:	4770      	bx	lr
 81057e2:	bf00      	nop
 81057e4:	10000188 	.word	0x10000188

081057e8 <__libc_init_array>:
 81057e8:	b570      	push	{r4, r5, r6, lr}
 81057ea:	4d0d      	ldr	r5, [pc, #52]	@ (8105820 <__libc_init_array+0x38>)
 81057ec:	4c0d      	ldr	r4, [pc, #52]	@ (8105824 <__libc_init_array+0x3c>)
 81057ee:	1b64      	subs	r4, r4, r5
 81057f0:	10a4      	asrs	r4, r4, #2
 81057f2:	2600      	movs	r6, #0
 81057f4:	42a6      	cmp	r6, r4
 81057f6:	d109      	bne.n	810580c <__libc_init_array+0x24>
 81057f8:	4d0b      	ldr	r5, [pc, #44]	@ (8105828 <__libc_init_array+0x40>)
 81057fa:	4c0c      	ldr	r4, [pc, #48]	@ (810582c <__libc_init_array+0x44>)
 81057fc:	f002 fd66 	bl	81082cc <_init>
 8105800:	1b64      	subs	r4, r4, r5
 8105802:	10a4      	asrs	r4, r4, #2
 8105804:	2600      	movs	r6, #0
 8105806:	42a6      	cmp	r6, r4
 8105808:	d105      	bne.n	8105816 <__libc_init_array+0x2e>
 810580a:	bd70      	pop	{r4, r5, r6, pc}
 810580c:	f855 3b04 	ldr.w	r3, [r5], #4
 8105810:	4798      	blx	r3
 8105812:	3601      	adds	r6, #1
 8105814:	e7ee      	b.n	81057f4 <__libc_init_array+0xc>
 8105816:	f855 3b04 	ldr.w	r3, [r5], #4
 810581a:	4798      	blx	r3
 810581c:	3601      	adds	r6, #1
 810581e:	e7f2      	b.n	8105806 <__libc_init_array+0x1e>
 8105820:	0810872c 	.word	0x0810872c
 8105824:	0810872c 	.word	0x0810872c
 8105828:	0810872c 	.word	0x0810872c
 810582c:	08108730 	.word	0x08108730

08105830 <__retarget_lock_init_recursive>:
 8105830:	4770      	bx	lr

08105832 <__retarget_lock_acquire_recursive>:
 8105832:	4770      	bx	lr

08105834 <__retarget_lock_release_recursive>:
 8105834:	4770      	bx	lr

08105836 <memcpy>:
 8105836:	440a      	add	r2, r1
 8105838:	4291      	cmp	r1, r2
 810583a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 810583e:	d100      	bne.n	8105842 <memcpy+0xc>
 8105840:	4770      	bx	lr
 8105842:	b510      	push	{r4, lr}
 8105844:	f811 4b01 	ldrb.w	r4, [r1], #1
 8105848:	f803 4f01 	strb.w	r4, [r3, #1]!
 810584c:	4291      	cmp	r1, r2
 810584e:	d1f9      	bne.n	8105844 <memcpy+0xe>
 8105850:	bd10      	pop	{r4, pc}
 8105852:	0000      	movs	r0, r0
 8105854:	0000      	movs	r0, r0
	...

08105858 <nan>:
 8105858:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8105860 <nan+0x8>
 810585c:	4770      	bx	lr
 810585e:	bf00      	nop
 8105860:	00000000 	.word	0x00000000
 8105864:	7ff80000 	.word	0x7ff80000

08105868 <nanf>:
 8105868:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8105870 <nanf+0x8>
 810586c:	4770      	bx	lr
 810586e:	bf00      	nop
 8105870:	7fc00000 	.word	0x7fc00000

08105874 <quorem>:
 8105874:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105878:	6903      	ldr	r3, [r0, #16]
 810587a:	690c      	ldr	r4, [r1, #16]
 810587c:	42a3      	cmp	r3, r4
 810587e:	4607      	mov	r7, r0
 8105880:	db7e      	blt.n	8105980 <quorem+0x10c>
 8105882:	3c01      	subs	r4, #1
 8105884:	f101 0814 	add.w	r8, r1, #20
 8105888:	00a3      	lsls	r3, r4, #2
 810588a:	f100 0514 	add.w	r5, r0, #20
 810588e:	9300      	str	r3, [sp, #0]
 8105890:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8105894:	9301      	str	r3, [sp, #4]
 8105896:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 810589a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810589e:	3301      	adds	r3, #1
 81058a0:	429a      	cmp	r2, r3
 81058a2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 81058a6:	fbb2 f6f3 	udiv	r6, r2, r3
 81058aa:	d32e      	bcc.n	810590a <quorem+0x96>
 81058ac:	f04f 0a00 	mov.w	sl, #0
 81058b0:	46c4      	mov	ip, r8
 81058b2:	46ae      	mov	lr, r5
 81058b4:	46d3      	mov	fp, sl
 81058b6:	f85c 3b04 	ldr.w	r3, [ip], #4
 81058ba:	b298      	uxth	r0, r3
 81058bc:	fb06 a000 	mla	r0, r6, r0, sl
 81058c0:	0c02      	lsrs	r2, r0, #16
 81058c2:	0c1b      	lsrs	r3, r3, #16
 81058c4:	fb06 2303 	mla	r3, r6, r3, r2
 81058c8:	f8de 2000 	ldr.w	r2, [lr]
 81058cc:	b280      	uxth	r0, r0
 81058ce:	b292      	uxth	r2, r2
 81058d0:	1a12      	subs	r2, r2, r0
 81058d2:	445a      	add	r2, fp
 81058d4:	f8de 0000 	ldr.w	r0, [lr]
 81058d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81058dc:	b29b      	uxth	r3, r3
 81058de:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 81058e2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 81058e6:	b292      	uxth	r2, r2
 81058e8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 81058ec:	45e1      	cmp	r9, ip
 81058ee:	f84e 2b04 	str.w	r2, [lr], #4
 81058f2:	ea4f 4b23 	mov.w	fp, r3, asr #16
 81058f6:	d2de      	bcs.n	81058b6 <quorem+0x42>
 81058f8:	9b00      	ldr	r3, [sp, #0]
 81058fa:	58eb      	ldr	r3, [r5, r3]
 81058fc:	b92b      	cbnz	r3, 810590a <quorem+0x96>
 81058fe:	9b01      	ldr	r3, [sp, #4]
 8105900:	3b04      	subs	r3, #4
 8105902:	429d      	cmp	r5, r3
 8105904:	461a      	mov	r2, r3
 8105906:	d32f      	bcc.n	8105968 <quorem+0xf4>
 8105908:	613c      	str	r4, [r7, #16]
 810590a:	4638      	mov	r0, r7
 810590c:	f001 fec8 	bl	81076a0 <__mcmp>
 8105910:	2800      	cmp	r0, #0
 8105912:	db25      	blt.n	8105960 <quorem+0xec>
 8105914:	4629      	mov	r1, r5
 8105916:	2000      	movs	r0, #0
 8105918:	f858 2b04 	ldr.w	r2, [r8], #4
 810591c:	f8d1 c000 	ldr.w	ip, [r1]
 8105920:	fa1f fe82 	uxth.w	lr, r2
 8105924:	fa1f f38c 	uxth.w	r3, ip
 8105928:	eba3 030e 	sub.w	r3, r3, lr
 810592c:	4403      	add	r3, r0
 810592e:	0c12      	lsrs	r2, r2, #16
 8105930:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8105934:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8105938:	b29b      	uxth	r3, r3
 810593a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 810593e:	45c1      	cmp	r9, r8
 8105940:	f841 3b04 	str.w	r3, [r1], #4
 8105944:	ea4f 4022 	mov.w	r0, r2, asr #16
 8105948:	d2e6      	bcs.n	8105918 <quorem+0xa4>
 810594a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810594e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8105952:	b922      	cbnz	r2, 810595e <quorem+0xea>
 8105954:	3b04      	subs	r3, #4
 8105956:	429d      	cmp	r5, r3
 8105958:	461a      	mov	r2, r3
 810595a:	d30b      	bcc.n	8105974 <quorem+0x100>
 810595c:	613c      	str	r4, [r7, #16]
 810595e:	3601      	adds	r6, #1
 8105960:	4630      	mov	r0, r6
 8105962:	b003      	add	sp, #12
 8105964:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8105968:	6812      	ldr	r2, [r2, #0]
 810596a:	3b04      	subs	r3, #4
 810596c:	2a00      	cmp	r2, #0
 810596e:	d1cb      	bne.n	8105908 <quorem+0x94>
 8105970:	3c01      	subs	r4, #1
 8105972:	e7c6      	b.n	8105902 <quorem+0x8e>
 8105974:	6812      	ldr	r2, [r2, #0]
 8105976:	3b04      	subs	r3, #4
 8105978:	2a00      	cmp	r2, #0
 810597a:	d1ef      	bne.n	810595c <quorem+0xe8>
 810597c:	3c01      	subs	r4, #1
 810597e:	e7ea      	b.n	8105956 <quorem+0xe2>
 8105980:	2000      	movs	r0, #0
 8105982:	e7ee      	b.n	8105962 <quorem+0xee>
 8105984:	0000      	movs	r0, r0
	...

08105988 <_dtoa_r>:
 8105988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810598c:	69c7      	ldr	r7, [r0, #28]
 810598e:	b099      	sub	sp, #100	@ 0x64
 8105990:	ed8d 0b02 	vstr	d0, [sp, #8]
 8105994:	ec55 4b10 	vmov	r4, r5, d0
 8105998:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 810599a:	9109      	str	r1, [sp, #36]	@ 0x24
 810599c:	4683      	mov	fp, r0
 810599e:	920e      	str	r2, [sp, #56]	@ 0x38
 81059a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 81059a2:	b97f      	cbnz	r7, 81059c4 <_dtoa_r+0x3c>
 81059a4:	2010      	movs	r0, #16
 81059a6:	f001 fa43 	bl	8106e30 <malloc>
 81059aa:	4602      	mov	r2, r0
 81059ac:	f8cb 001c 	str.w	r0, [fp, #28]
 81059b0:	b920      	cbnz	r0, 81059bc <_dtoa_r+0x34>
 81059b2:	4ba7      	ldr	r3, [pc, #668]	@ (8105c50 <_dtoa_r+0x2c8>)
 81059b4:	21ef      	movs	r1, #239	@ 0xef
 81059b6:	48a7      	ldr	r0, [pc, #668]	@ (8105c54 <_dtoa_r+0x2cc>)
 81059b8:	f002 f94e 	bl	8107c58 <__assert_func>
 81059bc:	e9c0 7701 	strd	r7, r7, [r0, #4]
 81059c0:	6007      	str	r7, [r0, #0]
 81059c2:	60c7      	str	r7, [r0, #12]
 81059c4:	f8db 301c 	ldr.w	r3, [fp, #28]
 81059c8:	6819      	ldr	r1, [r3, #0]
 81059ca:	b159      	cbz	r1, 81059e4 <_dtoa_r+0x5c>
 81059cc:	685a      	ldr	r2, [r3, #4]
 81059ce:	604a      	str	r2, [r1, #4]
 81059d0:	2301      	movs	r3, #1
 81059d2:	4093      	lsls	r3, r2
 81059d4:	608b      	str	r3, [r1, #8]
 81059d6:	4658      	mov	r0, fp
 81059d8:	f001 fbde 	bl	8107198 <_Bfree>
 81059dc:	f8db 301c 	ldr.w	r3, [fp, #28]
 81059e0:	2200      	movs	r2, #0
 81059e2:	601a      	str	r2, [r3, #0]
 81059e4:	1e2b      	subs	r3, r5, #0
 81059e6:	bfb9      	ittee	lt
 81059e8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 81059ec:	9303      	strlt	r3, [sp, #12]
 81059ee:	2300      	movge	r3, #0
 81059f0:	6033      	strge	r3, [r6, #0]
 81059f2:	9f03      	ldr	r7, [sp, #12]
 81059f4:	4b98      	ldr	r3, [pc, #608]	@ (8105c58 <_dtoa_r+0x2d0>)
 81059f6:	bfbc      	itt	lt
 81059f8:	2201      	movlt	r2, #1
 81059fa:	6032      	strlt	r2, [r6, #0]
 81059fc:	43bb      	bics	r3, r7
 81059fe:	d112      	bne.n	8105a26 <_dtoa_r+0x9e>
 8105a00:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8105a02:	f242 730f 	movw	r3, #9999	@ 0x270f
 8105a06:	6013      	str	r3, [r2, #0]
 8105a08:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8105a0c:	4323      	orrs	r3, r4
 8105a0e:	f000 854d 	beq.w	81064ac <_dtoa_r+0xb24>
 8105a12:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8105a14:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8105c6c <_dtoa_r+0x2e4>
 8105a18:	2b00      	cmp	r3, #0
 8105a1a:	f000 854f 	beq.w	81064bc <_dtoa_r+0xb34>
 8105a1e:	f10a 0303 	add.w	r3, sl, #3
 8105a22:	f000 bd49 	b.w	81064b8 <_dtoa_r+0xb30>
 8105a26:	ed9d 7b02 	vldr	d7, [sp, #8]
 8105a2a:	2200      	movs	r2, #0
 8105a2c:	ec51 0b17 	vmov	r0, r1, d7
 8105a30:	2300      	movs	r3, #0
 8105a32:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8105a36:	f7fb f8cf 	bl	8100bd8 <__aeabi_dcmpeq>
 8105a3a:	4680      	mov	r8, r0
 8105a3c:	b158      	cbz	r0, 8105a56 <_dtoa_r+0xce>
 8105a3e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8105a40:	2301      	movs	r3, #1
 8105a42:	6013      	str	r3, [r2, #0]
 8105a44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8105a46:	b113      	cbz	r3, 8105a4e <_dtoa_r+0xc6>
 8105a48:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8105a4a:	4b84      	ldr	r3, [pc, #528]	@ (8105c5c <_dtoa_r+0x2d4>)
 8105a4c:	6013      	str	r3, [r2, #0]
 8105a4e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8105c70 <_dtoa_r+0x2e8>
 8105a52:	f000 bd33 	b.w	81064bc <_dtoa_r+0xb34>
 8105a56:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8105a5a:	aa16      	add	r2, sp, #88	@ 0x58
 8105a5c:	a917      	add	r1, sp, #92	@ 0x5c
 8105a5e:	4658      	mov	r0, fp
 8105a60:	f001 ff3e 	bl	81078e0 <__d2b>
 8105a64:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8105a68:	4681      	mov	r9, r0
 8105a6a:	2e00      	cmp	r6, #0
 8105a6c:	d077      	beq.n	8105b5e <_dtoa_r+0x1d6>
 8105a6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8105a70:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8105a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105a78:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8105a7c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8105a80:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8105a84:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8105a88:	4619      	mov	r1, r3
 8105a8a:	2200      	movs	r2, #0
 8105a8c:	4b74      	ldr	r3, [pc, #464]	@ (8105c60 <_dtoa_r+0x2d8>)
 8105a8e:	f7fa fc83 	bl	8100398 <__aeabi_dsub>
 8105a92:	a369      	add	r3, pc, #420	@ (adr r3, 8105c38 <_dtoa_r+0x2b0>)
 8105a94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105a98:	f7fa fe36 	bl	8100708 <__aeabi_dmul>
 8105a9c:	a368      	add	r3, pc, #416	@ (adr r3, 8105c40 <_dtoa_r+0x2b8>)
 8105a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105aa2:	f7fa fc7b 	bl	810039c <__adddf3>
 8105aa6:	4604      	mov	r4, r0
 8105aa8:	4630      	mov	r0, r6
 8105aaa:	460d      	mov	r5, r1
 8105aac:	f7fa fdc2 	bl	8100634 <__aeabi_i2d>
 8105ab0:	a365      	add	r3, pc, #404	@ (adr r3, 8105c48 <_dtoa_r+0x2c0>)
 8105ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105ab6:	f7fa fe27 	bl	8100708 <__aeabi_dmul>
 8105aba:	4602      	mov	r2, r0
 8105abc:	460b      	mov	r3, r1
 8105abe:	4620      	mov	r0, r4
 8105ac0:	4629      	mov	r1, r5
 8105ac2:	f7fa fc6b 	bl	810039c <__adddf3>
 8105ac6:	4604      	mov	r4, r0
 8105ac8:	460d      	mov	r5, r1
 8105aca:	f7fb f8cd 	bl	8100c68 <__aeabi_d2iz>
 8105ace:	2200      	movs	r2, #0
 8105ad0:	4607      	mov	r7, r0
 8105ad2:	2300      	movs	r3, #0
 8105ad4:	4620      	mov	r0, r4
 8105ad6:	4629      	mov	r1, r5
 8105ad8:	f7fb f888 	bl	8100bec <__aeabi_dcmplt>
 8105adc:	b140      	cbz	r0, 8105af0 <_dtoa_r+0x168>
 8105ade:	4638      	mov	r0, r7
 8105ae0:	f7fa fda8 	bl	8100634 <__aeabi_i2d>
 8105ae4:	4622      	mov	r2, r4
 8105ae6:	462b      	mov	r3, r5
 8105ae8:	f7fb f876 	bl	8100bd8 <__aeabi_dcmpeq>
 8105aec:	b900      	cbnz	r0, 8105af0 <_dtoa_r+0x168>
 8105aee:	3f01      	subs	r7, #1
 8105af0:	2f16      	cmp	r7, #22
 8105af2:	d851      	bhi.n	8105b98 <_dtoa_r+0x210>
 8105af4:	4b5b      	ldr	r3, [pc, #364]	@ (8105c64 <_dtoa_r+0x2dc>)
 8105af6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8105afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105afe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8105b02:	f7fb f873 	bl	8100bec <__aeabi_dcmplt>
 8105b06:	2800      	cmp	r0, #0
 8105b08:	d048      	beq.n	8105b9c <_dtoa_r+0x214>
 8105b0a:	3f01      	subs	r7, #1
 8105b0c:	2300      	movs	r3, #0
 8105b0e:	9312      	str	r3, [sp, #72]	@ 0x48
 8105b10:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8105b12:	1b9b      	subs	r3, r3, r6
 8105b14:	1e5a      	subs	r2, r3, #1
 8105b16:	bf44      	itt	mi
 8105b18:	f1c3 0801 	rsbmi	r8, r3, #1
 8105b1c:	2300      	movmi	r3, #0
 8105b1e:	9208      	str	r2, [sp, #32]
 8105b20:	bf54      	ite	pl
 8105b22:	f04f 0800 	movpl.w	r8, #0
 8105b26:	9308      	strmi	r3, [sp, #32]
 8105b28:	2f00      	cmp	r7, #0
 8105b2a:	db39      	blt.n	8105ba0 <_dtoa_r+0x218>
 8105b2c:	9b08      	ldr	r3, [sp, #32]
 8105b2e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8105b30:	443b      	add	r3, r7
 8105b32:	9308      	str	r3, [sp, #32]
 8105b34:	2300      	movs	r3, #0
 8105b36:	930a      	str	r3, [sp, #40]	@ 0x28
 8105b38:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8105b3a:	2b09      	cmp	r3, #9
 8105b3c:	d864      	bhi.n	8105c08 <_dtoa_r+0x280>
 8105b3e:	2b05      	cmp	r3, #5
 8105b40:	bfc4      	itt	gt
 8105b42:	3b04      	subgt	r3, #4
 8105b44:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8105b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8105b48:	f1a3 0302 	sub.w	r3, r3, #2
 8105b4c:	bfcc      	ite	gt
 8105b4e:	2400      	movgt	r4, #0
 8105b50:	2401      	movle	r4, #1
 8105b52:	2b03      	cmp	r3, #3
 8105b54:	d863      	bhi.n	8105c1e <_dtoa_r+0x296>
 8105b56:	e8df f003 	tbb	[pc, r3]
 8105b5a:	372a      	.short	0x372a
 8105b5c:	5535      	.short	0x5535
 8105b5e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8105b62:	441e      	add	r6, r3
 8105b64:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8105b68:	2b20      	cmp	r3, #32
 8105b6a:	bfc1      	itttt	gt
 8105b6c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8105b70:	409f      	lslgt	r7, r3
 8105b72:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8105b76:	fa24 f303 	lsrgt.w	r3, r4, r3
 8105b7a:	bfd6      	itet	le
 8105b7c:	f1c3 0320 	rsble	r3, r3, #32
 8105b80:	ea47 0003 	orrgt.w	r0, r7, r3
 8105b84:	fa04 f003 	lslle.w	r0, r4, r3
 8105b88:	f7fa fd44 	bl	8100614 <__aeabi_ui2d>
 8105b8c:	2201      	movs	r2, #1
 8105b8e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8105b92:	3e01      	subs	r6, #1
 8105b94:	9214      	str	r2, [sp, #80]	@ 0x50
 8105b96:	e777      	b.n	8105a88 <_dtoa_r+0x100>
 8105b98:	2301      	movs	r3, #1
 8105b9a:	e7b8      	b.n	8105b0e <_dtoa_r+0x186>
 8105b9c:	9012      	str	r0, [sp, #72]	@ 0x48
 8105b9e:	e7b7      	b.n	8105b10 <_dtoa_r+0x188>
 8105ba0:	427b      	negs	r3, r7
 8105ba2:	930a      	str	r3, [sp, #40]	@ 0x28
 8105ba4:	2300      	movs	r3, #0
 8105ba6:	eba8 0807 	sub.w	r8, r8, r7
 8105baa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8105bac:	e7c4      	b.n	8105b38 <_dtoa_r+0x1b0>
 8105bae:	2300      	movs	r3, #0
 8105bb0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8105bb2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8105bb4:	2b00      	cmp	r3, #0
 8105bb6:	dc35      	bgt.n	8105c24 <_dtoa_r+0x29c>
 8105bb8:	2301      	movs	r3, #1
 8105bba:	9300      	str	r3, [sp, #0]
 8105bbc:	9307      	str	r3, [sp, #28]
 8105bbe:	461a      	mov	r2, r3
 8105bc0:	920e      	str	r2, [sp, #56]	@ 0x38
 8105bc2:	e00b      	b.n	8105bdc <_dtoa_r+0x254>
 8105bc4:	2301      	movs	r3, #1
 8105bc6:	e7f3      	b.n	8105bb0 <_dtoa_r+0x228>
 8105bc8:	2300      	movs	r3, #0
 8105bca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8105bcc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8105bce:	18fb      	adds	r3, r7, r3
 8105bd0:	9300      	str	r3, [sp, #0]
 8105bd2:	3301      	adds	r3, #1
 8105bd4:	2b01      	cmp	r3, #1
 8105bd6:	9307      	str	r3, [sp, #28]
 8105bd8:	bfb8      	it	lt
 8105bda:	2301      	movlt	r3, #1
 8105bdc:	f8db 001c 	ldr.w	r0, [fp, #28]
 8105be0:	2100      	movs	r1, #0
 8105be2:	2204      	movs	r2, #4
 8105be4:	f102 0514 	add.w	r5, r2, #20
 8105be8:	429d      	cmp	r5, r3
 8105bea:	d91f      	bls.n	8105c2c <_dtoa_r+0x2a4>
 8105bec:	6041      	str	r1, [r0, #4]
 8105bee:	4658      	mov	r0, fp
 8105bf0:	f001 fa92 	bl	8107118 <_Balloc>
 8105bf4:	4682      	mov	sl, r0
 8105bf6:	2800      	cmp	r0, #0
 8105bf8:	d13c      	bne.n	8105c74 <_dtoa_r+0x2ec>
 8105bfa:	4b1b      	ldr	r3, [pc, #108]	@ (8105c68 <_dtoa_r+0x2e0>)
 8105bfc:	4602      	mov	r2, r0
 8105bfe:	f240 11af 	movw	r1, #431	@ 0x1af
 8105c02:	e6d8      	b.n	81059b6 <_dtoa_r+0x2e>
 8105c04:	2301      	movs	r3, #1
 8105c06:	e7e0      	b.n	8105bca <_dtoa_r+0x242>
 8105c08:	2401      	movs	r4, #1
 8105c0a:	2300      	movs	r3, #0
 8105c0c:	9309      	str	r3, [sp, #36]	@ 0x24
 8105c0e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8105c10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8105c14:	9300      	str	r3, [sp, #0]
 8105c16:	9307      	str	r3, [sp, #28]
 8105c18:	2200      	movs	r2, #0
 8105c1a:	2312      	movs	r3, #18
 8105c1c:	e7d0      	b.n	8105bc0 <_dtoa_r+0x238>
 8105c1e:	2301      	movs	r3, #1
 8105c20:	930b      	str	r3, [sp, #44]	@ 0x2c
 8105c22:	e7f5      	b.n	8105c10 <_dtoa_r+0x288>
 8105c24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8105c26:	9300      	str	r3, [sp, #0]
 8105c28:	9307      	str	r3, [sp, #28]
 8105c2a:	e7d7      	b.n	8105bdc <_dtoa_r+0x254>
 8105c2c:	3101      	adds	r1, #1
 8105c2e:	0052      	lsls	r2, r2, #1
 8105c30:	e7d8      	b.n	8105be4 <_dtoa_r+0x25c>
 8105c32:	bf00      	nop
 8105c34:	f3af 8000 	nop.w
 8105c38:	636f4361 	.word	0x636f4361
 8105c3c:	3fd287a7 	.word	0x3fd287a7
 8105c40:	8b60c8b3 	.word	0x8b60c8b3
 8105c44:	3fc68a28 	.word	0x3fc68a28
 8105c48:	509f79fb 	.word	0x509f79fb
 8105c4c:	3fd34413 	.word	0x3fd34413
 8105c50:	0810849e 	.word	0x0810849e
 8105c54:	081084b5 	.word	0x081084b5
 8105c58:	7ff00000 	.word	0x7ff00000
 8105c5c:	08108309 	.word	0x08108309
 8105c60:	3ff80000 	.word	0x3ff80000
 8105c64:	08108620 	.word	0x08108620
 8105c68:	0810850d 	.word	0x0810850d
 8105c6c:	0810849a 	.word	0x0810849a
 8105c70:	08108308 	.word	0x08108308
 8105c74:	f8db 301c 	ldr.w	r3, [fp, #28]
 8105c78:	6018      	str	r0, [r3, #0]
 8105c7a:	9b07      	ldr	r3, [sp, #28]
 8105c7c:	2b0e      	cmp	r3, #14
 8105c7e:	f200 80a4 	bhi.w	8105dca <_dtoa_r+0x442>
 8105c82:	2c00      	cmp	r4, #0
 8105c84:	f000 80a1 	beq.w	8105dca <_dtoa_r+0x442>
 8105c88:	2f00      	cmp	r7, #0
 8105c8a:	dd33      	ble.n	8105cf4 <_dtoa_r+0x36c>
 8105c8c:	4bad      	ldr	r3, [pc, #692]	@ (8105f44 <_dtoa_r+0x5bc>)
 8105c8e:	f007 020f 	and.w	r2, r7, #15
 8105c92:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8105c96:	ed93 7b00 	vldr	d7, [r3]
 8105c9a:	05f8      	lsls	r0, r7, #23
 8105c9c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8105ca0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8105ca4:	d516      	bpl.n	8105cd4 <_dtoa_r+0x34c>
 8105ca6:	4ba8      	ldr	r3, [pc, #672]	@ (8105f48 <_dtoa_r+0x5c0>)
 8105ca8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8105cac:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8105cb0:	f7fa fe54 	bl	810095c <__aeabi_ddiv>
 8105cb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8105cb8:	f004 040f 	and.w	r4, r4, #15
 8105cbc:	2603      	movs	r6, #3
 8105cbe:	4da2      	ldr	r5, [pc, #648]	@ (8105f48 <_dtoa_r+0x5c0>)
 8105cc0:	b954      	cbnz	r4, 8105cd8 <_dtoa_r+0x350>
 8105cc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8105cc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8105cca:	f7fa fe47 	bl	810095c <__aeabi_ddiv>
 8105cce:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8105cd2:	e028      	b.n	8105d26 <_dtoa_r+0x39e>
 8105cd4:	2602      	movs	r6, #2
 8105cd6:	e7f2      	b.n	8105cbe <_dtoa_r+0x336>
 8105cd8:	07e1      	lsls	r1, r4, #31
 8105cda:	d508      	bpl.n	8105cee <_dtoa_r+0x366>
 8105cdc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8105ce0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8105ce4:	f7fa fd10 	bl	8100708 <__aeabi_dmul>
 8105ce8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8105cec:	3601      	adds	r6, #1
 8105cee:	1064      	asrs	r4, r4, #1
 8105cf0:	3508      	adds	r5, #8
 8105cf2:	e7e5      	b.n	8105cc0 <_dtoa_r+0x338>
 8105cf4:	f000 80d2 	beq.w	8105e9c <_dtoa_r+0x514>
 8105cf8:	427c      	negs	r4, r7
 8105cfa:	4b92      	ldr	r3, [pc, #584]	@ (8105f44 <_dtoa_r+0x5bc>)
 8105cfc:	4d92      	ldr	r5, [pc, #584]	@ (8105f48 <_dtoa_r+0x5c0>)
 8105cfe:	f004 020f 	and.w	r2, r4, #15
 8105d02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8105d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8105d0a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8105d0e:	f7fa fcfb 	bl	8100708 <__aeabi_dmul>
 8105d12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8105d16:	1124      	asrs	r4, r4, #4
 8105d18:	2300      	movs	r3, #0
 8105d1a:	2602      	movs	r6, #2
 8105d1c:	2c00      	cmp	r4, #0
 8105d1e:	f040 80b2 	bne.w	8105e86 <_dtoa_r+0x4fe>
 8105d22:	2b00      	cmp	r3, #0
 8105d24:	d1d3      	bne.n	8105cce <_dtoa_r+0x346>
 8105d26:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8105d28:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8105d2c:	2b00      	cmp	r3, #0
 8105d2e:	f000 80b7 	beq.w	8105ea0 <_dtoa_r+0x518>
 8105d32:	4b86      	ldr	r3, [pc, #536]	@ (8105f4c <_dtoa_r+0x5c4>)
 8105d34:	2200      	movs	r2, #0
 8105d36:	4620      	mov	r0, r4
 8105d38:	4629      	mov	r1, r5
 8105d3a:	f7fa ff57 	bl	8100bec <__aeabi_dcmplt>
 8105d3e:	2800      	cmp	r0, #0
 8105d40:	f000 80ae 	beq.w	8105ea0 <_dtoa_r+0x518>
 8105d44:	9b07      	ldr	r3, [sp, #28]
 8105d46:	2b00      	cmp	r3, #0
 8105d48:	f000 80aa 	beq.w	8105ea0 <_dtoa_r+0x518>
 8105d4c:	9b00      	ldr	r3, [sp, #0]
 8105d4e:	2b00      	cmp	r3, #0
 8105d50:	dd37      	ble.n	8105dc2 <_dtoa_r+0x43a>
 8105d52:	1e7b      	subs	r3, r7, #1
 8105d54:	9304      	str	r3, [sp, #16]
 8105d56:	4620      	mov	r0, r4
 8105d58:	4b7d      	ldr	r3, [pc, #500]	@ (8105f50 <_dtoa_r+0x5c8>)
 8105d5a:	2200      	movs	r2, #0
 8105d5c:	4629      	mov	r1, r5
 8105d5e:	f7fa fcd3 	bl	8100708 <__aeabi_dmul>
 8105d62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8105d66:	9c00      	ldr	r4, [sp, #0]
 8105d68:	3601      	adds	r6, #1
 8105d6a:	4630      	mov	r0, r6
 8105d6c:	f7fa fc62 	bl	8100634 <__aeabi_i2d>
 8105d70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8105d74:	f7fa fcc8 	bl	8100708 <__aeabi_dmul>
 8105d78:	4b76      	ldr	r3, [pc, #472]	@ (8105f54 <_dtoa_r+0x5cc>)
 8105d7a:	2200      	movs	r2, #0
 8105d7c:	f7fa fb0e 	bl	810039c <__adddf3>
 8105d80:	4605      	mov	r5, r0
 8105d82:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8105d86:	2c00      	cmp	r4, #0
 8105d88:	f040 808d 	bne.w	8105ea6 <_dtoa_r+0x51e>
 8105d8c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8105d90:	4b71      	ldr	r3, [pc, #452]	@ (8105f58 <_dtoa_r+0x5d0>)
 8105d92:	2200      	movs	r2, #0
 8105d94:	f7fa fb00 	bl	8100398 <__aeabi_dsub>
 8105d98:	4602      	mov	r2, r0
 8105d9a:	460b      	mov	r3, r1
 8105d9c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8105da0:	462a      	mov	r2, r5
 8105da2:	4633      	mov	r3, r6
 8105da4:	f7fa ff40 	bl	8100c28 <__aeabi_dcmpgt>
 8105da8:	2800      	cmp	r0, #0
 8105daa:	f040 828b 	bne.w	81062c4 <_dtoa_r+0x93c>
 8105dae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8105db2:	462a      	mov	r2, r5
 8105db4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8105db8:	f7fa ff18 	bl	8100bec <__aeabi_dcmplt>
 8105dbc:	2800      	cmp	r0, #0
 8105dbe:	f040 8128 	bne.w	8106012 <_dtoa_r+0x68a>
 8105dc2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8105dc6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8105dca:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8105dcc:	2b00      	cmp	r3, #0
 8105dce:	f2c0 815a 	blt.w	8106086 <_dtoa_r+0x6fe>
 8105dd2:	2f0e      	cmp	r7, #14
 8105dd4:	f300 8157 	bgt.w	8106086 <_dtoa_r+0x6fe>
 8105dd8:	4b5a      	ldr	r3, [pc, #360]	@ (8105f44 <_dtoa_r+0x5bc>)
 8105dda:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8105dde:	ed93 7b00 	vldr	d7, [r3]
 8105de2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8105de4:	2b00      	cmp	r3, #0
 8105de6:	ed8d 7b00 	vstr	d7, [sp]
 8105dea:	da03      	bge.n	8105df4 <_dtoa_r+0x46c>
 8105dec:	9b07      	ldr	r3, [sp, #28]
 8105dee:	2b00      	cmp	r3, #0
 8105df0:	f340 8101 	ble.w	8105ff6 <_dtoa_r+0x66e>
 8105df4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8105df8:	4656      	mov	r6, sl
 8105dfa:	e9dd 2300 	ldrd	r2, r3, [sp]
 8105dfe:	4620      	mov	r0, r4
 8105e00:	4629      	mov	r1, r5
 8105e02:	f7fa fdab 	bl	810095c <__aeabi_ddiv>
 8105e06:	f7fa ff2f 	bl	8100c68 <__aeabi_d2iz>
 8105e0a:	4680      	mov	r8, r0
 8105e0c:	f7fa fc12 	bl	8100634 <__aeabi_i2d>
 8105e10:	e9dd 2300 	ldrd	r2, r3, [sp]
 8105e14:	f7fa fc78 	bl	8100708 <__aeabi_dmul>
 8105e18:	4602      	mov	r2, r0
 8105e1a:	460b      	mov	r3, r1
 8105e1c:	4620      	mov	r0, r4
 8105e1e:	4629      	mov	r1, r5
 8105e20:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8105e24:	f7fa fab8 	bl	8100398 <__aeabi_dsub>
 8105e28:	f806 4b01 	strb.w	r4, [r6], #1
 8105e2c:	9d07      	ldr	r5, [sp, #28]
 8105e2e:	eba6 040a 	sub.w	r4, r6, sl
 8105e32:	42a5      	cmp	r5, r4
 8105e34:	4602      	mov	r2, r0
 8105e36:	460b      	mov	r3, r1
 8105e38:	f040 8117 	bne.w	810606a <_dtoa_r+0x6e2>
 8105e3c:	f7fa faae 	bl	810039c <__adddf3>
 8105e40:	e9dd 2300 	ldrd	r2, r3, [sp]
 8105e44:	4604      	mov	r4, r0
 8105e46:	460d      	mov	r5, r1
 8105e48:	f7fa feee 	bl	8100c28 <__aeabi_dcmpgt>
 8105e4c:	2800      	cmp	r0, #0
 8105e4e:	f040 80f9 	bne.w	8106044 <_dtoa_r+0x6bc>
 8105e52:	e9dd 2300 	ldrd	r2, r3, [sp]
 8105e56:	4620      	mov	r0, r4
 8105e58:	4629      	mov	r1, r5
 8105e5a:	f7fa febd 	bl	8100bd8 <__aeabi_dcmpeq>
 8105e5e:	b118      	cbz	r0, 8105e68 <_dtoa_r+0x4e0>
 8105e60:	f018 0f01 	tst.w	r8, #1
 8105e64:	f040 80ee 	bne.w	8106044 <_dtoa_r+0x6bc>
 8105e68:	4649      	mov	r1, r9
 8105e6a:	4658      	mov	r0, fp
 8105e6c:	f001 f994 	bl	8107198 <_Bfree>
 8105e70:	2300      	movs	r3, #0
 8105e72:	7033      	strb	r3, [r6, #0]
 8105e74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8105e76:	3701      	adds	r7, #1
 8105e78:	601f      	str	r7, [r3, #0]
 8105e7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8105e7c:	2b00      	cmp	r3, #0
 8105e7e:	f000 831d 	beq.w	81064bc <_dtoa_r+0xb34>
 8105e82:	601e      	str	r6, [r3, #0]
 8105e84:	e31a      	b.n	81064bc <_dtoa_r+0xb34>
 8105e86:	07e2      	lsls	r2, r4, #31
 8105e88:	d505      	bpl.n	8105e96 <_dtoa_r+0x50e>
 8105e8a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8105e8e:	f7fa fc3b 	bl	8100708 <__aeabi_dmul>
 8105e92:	3601      	adds	r6, #1
 8105e94:	2301      	movs	r3, #1
 8105e96:	1064      	asrs	r4, r4, #1
 8105e98:	3508      	adds	r5, #8
 8105e9a:	e73f      	b.n	8105d1c <_dtoa_r+0x394>
 8105e9c:	2602      	movs	r6, #2
 8105e9e:	e742      	b.n	8105d26 <_dtoa_r+0x39e>
 8105ea0:	9c07      	ldr	r4, [sp, #28]
 8105ea2:	9704      	str	r7, [sp, #16]
 8105ea4:	e761      	b.n	8105d6a <_dtoa_r+0x3e2>
 8105ea6:	4b27      	ldr	r3, [pc, #156]	@ (8105f44 <_dtoa_r+0x5bc>)
 8105ea8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8105eaa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8105eae:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8105eb2:	4454      	add	r4, sl
 8105eb4:	2900      	cmp	r1, #0
 8105eb6:	d053      	beq.n	8105f60 <_dtoa_r+0x5d8>
 8105eb8:	4928      	ldr	r1, [pc, #160]	@ (8105f5c <_dtoa_r+0x5d4>)
 8105eba:	2000      	movs	r0, #0
 8105ebc:	f7fa fd4e 	bl	810095c <__aeabi_ddiv>
 8105ec0:	4633      	mov	r3, r6
 8105ec2:	462a      	mov	r2, r5
 8105ec4:	f7fa fa68 	bl	8100398 <__aeabi_dsub>
 8105ec8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8105ecc:	4656      	mov	r6, sl
 8105ece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8105ed2:	f7fa fec9 	bl	8100c68 <__aeabi_d2iz>
 8105ed6:	4605      	mov	r5, r0
 8105ed8:	f7fa fbac 	bl	8100634 <__aeabi_i2d>
 8105edc:	4602      	mov	r2, r0
 8105ede:	460b      	mov	r3, r1
 8105ee0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8105ee4:	f7fa fa58 	bl	8100398 <__aeabi_dsub>
 8105ee8:	3530      	adds	r5, #48	@ 0x30
 8105eea:	4602      	mov	r2, r0
 8105eec:	460b      	mov	r3, r1
 8105eee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8105ef2:	f806 5b01 	strb.w	r5, [r6], #1
 8105ef6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8105efa:	f7fa fe77 	bl	8100bec <__aeabi_dcmplt>
 8105efe:	2800      	cmp	r0, #0
 8105f00:	d171      	bne.n	8105fe6 <_dtoa_r+0x65e>
 8105f02:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8105f06:	4911      	ldr	r1, [pc, #68]	@ (8105f4c <_dtoa_r+0x5c4>)
 8105f08:	2000      	movs	r0, #0
 8105f0a:	f7fa fa45 	bl	8100398 <__aeabi_dsub>
 8105f0e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8105f12:	f7fa fe6b 	bl	8100bec <__aeabi_dcmplt>
 8105f16:	2800      	cmp	r0, #0
 8105f18:	f040 8095 	bne.w	8106046 <_dtoa_r+0x6be>
 8105f1c:	42a6      	cmp	r6, r4
 8105f1e:	f43f af50 	beq.w	8105dc2 <_dtoa_r+0x43a>
 8105f22:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8105f26:	4b0a      	ldr	r3, [pc, #40]	@ (8105f50 <_dtoa_r+0x5c8>)
 8105f28:	2200      	movs	r2, #0
 8105f2a:	f7fa fbed 	bl	8100708 <__aeabi_dmul>
 8105f2e:	4b08      	ldr	r3, [pc, #32]	@ (8105f50 <_dtoa_r+0x5c8>)
 8105f30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8105f34:	2200      	movs	r2, #0
 8105f36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8105f3a:	f7fa fbe5 	bl	8100708 <__aeabi_dmul>
 8105f3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8105f42:	e7c4      	b.n	8105ece <_dtoa_r+0x546>
 8105f44:	08108620 	.word	0x08108620
 8105f48:	081085f8 	.word	0x081085f8
 8105f4c:	3ff00000 	.word	0x3ff00000
 8105f50:	40240000 	.word	0x40240000
 8105f54:	401c0000 	.word	0x401c0000
 8105f58:	40140000 	.word	0x40140000
 8105f5c:	3fe00000 	.word	0x3fe00000
 8105f60:	4631      	mov	r1, r6
 8105f62:	4628      	mov	r0, r5
 8105f64:	f7fa fbd0 	bl	8100708 <__aeabi_dmul>
 8105f68:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8105f6c:	9415      	str	r4, [sp, #84]	@ 0x54
 8105f6e:	4656      	mov	r6, sl
 8105f70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8105f74:	f7fa fe78 	bl	8100c68 <__aeabi_d2iz>
 8105f78:	4605      	mov	r5, r0
 8105f7a:	f7fa fb5b 	bl	8100634 <__aeabi_i2d>
 8105f7e:	4602      	mov	r2, r0
 8105f80:	460b      	mov	r3, r1
 8105f82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8105f86:	f7fa fa07 	bl	8100398 <__aeabi_dsub>
 8105f8a:	3530      	adds	r5, #48	@ 0x30
 8105f8c:	f806 5b01 	strb.w	r5, [r6], #1
 8105f90:	4602      	mov	r2, r0
 8105f92:	460b      	mov	r3, r1
 8105f94:	42a6      	cmp	r6, r4
 8105f96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8105f9a:	f04f 0200 	mov.w	r2, #0
 8105f9e:	d124      	bne.n	8105fea <_dtoa_r+0x662>
 8105fa0:	4bac      	ldr	r3, [pc, #688]	@ (8106254 <_dtoa_r+0x8cc>)
 8105fa2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8105fa6:	f7fa f9f9 	bl	810039c <__adddf3>
 8105faa:	4602      	mov	r2, r0
 8105fac:	460b      	mov	r3, r1
 8105fae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8105fb2:	f7fa fe39 	bl	8100c28 <__aeabi_dcmpgt>
 8105fb6:	2800      	cmp	r0, #0
 8105fb8:	d145      	bne.n	8106046 <_dtoa_r+0x6be>
 8105fba:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8105fbe:	49a5      	ldr	r1, [pc, #660]	@ (8106254 <_dtoa_r+0x8cc>)
 8105fc0:	2000      	movs	r0, #0
 8105fc2:	f7fa f9e9 	bl	8100398 <__aeabi_dsub>
 8105fc6:	4602      	mov	r2, r0
 8105fc8:	460b      	mov	r3, r1
 8105fca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8105fce:	f7fa fe0d 	bl	8100bec <__aeabi_dcmplt>
 8105fd2:	2800      	cmp	r0, #0
 8105fd4:	f43f aef5 	beq.w	8105dc2 <_dtoa_r+0x43a>
 8105fd8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8105fda:	1e73      	subs	r3, r6, #1
 8105fdc:	9315      	str	r3, [sp, #84]	@ 0x54
 8105fde:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8105fe2:	2b30      	cmp	r3, #48	@ 0x30
 8105fe4:	d0f8      	beq.n	8105fd8 <_dtoa_r+0x650>
 8105fe6:	9f04      	ldr	r7, [sp, #16]
 8105fe8:	e73e      	b.n	8105e68 <_dtoa_r+0x4e0>
 8105fea:	4b9b      	ldr	r3, [pc, #620]	@ (8106258 <_dtoa_r+0x8d0>)
 8105fec:	f7fa fb8c 	bl	8100708 <__aeabi_dmul>
 8105ff0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8105ff4:	e7bc      	b.n	8105f70 <_dtoa_r+0x5e8>
 8105ff6:	d10c      	bne.n	8106012 <_dtoa_r+0x68a>
 8105ff8:	4b98      	ldr	r3, [pc, #608]	@ (810625c <_dtoa_r+0x8d4>)
 8105ffa:	2200      	movs	r2, #0
 8105ffc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8106000:	f7fa fb82 	bl	8100708 <__aeabi_dmul>
 8106004:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8106008:	f7fa fe04 	bl	8100c14 <__aeabi_dcmpge>
 810600c:	2800      	cmp	r0, #0
 810600e:	f000 8157 	beq.w	81062c0 <_dtoa_r+0x938>
 8106012:	2400      	movs	r4, #0
 8106014:	4625      	mov	r5, r4
 8106016:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8106018:	43db      	mvns	r3, r3
 810601a:	9304      	str	r3, [sp, #16]
 810601c:	4656      	mov	r6, sl
 810601e:	2700      	movs	r7, #0
 8106020:	4621      	mov	r1, r4
 8106022:	4658      	mov	r0, fp
 8106024:	f001 f8b8 	bl	8107198 <_Bfree>
 8106028:	2d00      	cmp	r5, #0
 810602a:	d0dc      	beq.n	8105fe6 <_dtoa_r+0x65e>
 810602c:	b12f      	cbz	r7, 810603a <_dtoa_r+0x6b2>
 810602e:	42af      	cmp	r7, r5
 8106030:	d003      	beq.n	810603a <_dtoa_r+0x6b2>
 8106032:	4639      	mov	r1, r7
 8106034:	4658      	mov	r0, fp
 8106036:	f001 f8af 	bl	8107198 <_Bfree>
 810603a:	4629      	mov	r1, r5
 810603c:	4658      	mov	r0, fp
 810603e:	f001 f8ab 	bl	8107198 <_Bfree>
 8106042:	e7d0      	b.n	8105fe6 <_dtoa_r+0x65e>
 8106044:	9704      	str	r7, [sp, #16]
 8106046:	4633      	mov	r3, r6
 8106048:	461e      	mov	r6, r3
 810604a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 810604e:	2a39      	cmp	r2, #57	@ 0x39
 8106050:	d107      	bne.n	8106062 <_dtoa_r+0x6da>
 8106052:	459a      	cmp	sl, r3
 8106054:	d1f8      	bne.n	8106048 <_dtoa_r+0x6c0>
 8106056:	9a04      	ldr	r2, [sp, #16]
 8106058:	3201      	adds	r2, #1
 810605a:	9204      	str	r2, [sp, #16]
 810605c:	2230      	movs	r2, #48	@ 0x30
 810605e:	f88a 2000 	strb.w	r2, [sl]
 8106062:	781a      	ldrb	r2, [r3, #0]
 8106064:	3201      	adds	r2, #1
 8106066:	701a      	strb	r2, [r3, #0]
 8106068:	e7bd      	b.n	8105fe6 <_dtoa_r+0x65e>
 810606a:	4b7b      	ldr	r3, [pc, #492]	@ (8106258 <_dtoa_r+0x8d0>)
 810606c:	2200      	movs	r2, #0
 810606e:	f7fa fb4b 	bl	8100708 <__aeabi_dmul>
 8106072:	2200      	movs	r2, #0
 8106074:	2300      	movs	r3, #0
 8106076:	4604      	mov	r4, r0
 8106078:	460d      	mov	r5, r1
 810607a:	f7fa fdad 	bl	8100bd8 <__aeabi_dcmpeq>
 810607e:	2800      	cmp	r0, #0
 8106080:	f43f aebb 	beq.w	8105dfa <_dtoa_r+0x472>
 8106084:	e6f0      	b.n	8105e68 <_dtoa_r+0x4e0>
 8106086:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8106088:	2a00      	cmp	r2, #0
 810608a:	f000 80db 	beq.w	8106244 <_dtoa_r+0x8bc>
 810608e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8106090:	2a01      	cmp	r2, #1
 8106092:	f300 80bf 	bgt.w	8106214 <_dtoa_r+0x88c>
 8106096:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8106098:	2a00      	cmp	r2, #0
 810609a:	f000 80b7 	beq.w	810620c <_dtoa_r+0x884>
 810609e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 81060a2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 81060a4:	4646      	mov	r6, r8
 81060a6:	9a08      	ldr	r2, [sp, #32]
 81060a8:	2101      	movs	r1, #1
 81060aa:	441a      	add	r2, r3
 81060ac:	4658      	mov	r0, fp
 81060ae:	4498      	add	r8, r3
 81060b0:	9208      	str	r2, [sp, #32]
 81060b2:	f001 f96f 	bl	8107394 <__i2b>
 81060b6:	4605      	mov	r5, r0
 81060b8:	b15e      	cbz	r6, 81060d2 <_dtoa_r+0x74a>
 81060ba:	9b08      	ldr	r3, [sp, #32]
 81060bc:	2b00      	cmp	r3, #0
 81060be:	dd08      	ble.n	81060d2 <_dtoa_r+0x74a>
 81060c0:	42b3      	cmp	r3, r6
 81060c2:	9a08      	ldr	r2, [sp, #32]
 81060c4:	bfa8      	it	ge
 81060c6:	4633      	movge	r3, r6
 81060c8:	eba8 0803 	sub.w	r8, r8, r3
 81060cc:	1af6      	subs	r6, r6, r3
 81060ce:	1ad3      	subs	r3, r2, r3
 81060d0:	9308      	str	r3, [sp, #32]
 81060d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81060d4:	b1f3      	cbz	r3, 8106114 <_dtoa_r+0x78c>
 81060d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81060d8:	2b00      	cmp	r3, #0
 81060da:	f000 80b7 	beq.w	810624c <_dtoa_r+0x8c4>
 81060de:	b18c      	cbz	r4, 8106104 <_dtoa_r+0x77c>
 81060e0:	4629      	mov	r1, r5
 81060e2:	4622      	mov	r2, r4
 81060e4:	4658      	mov	r0, fp
 81060e6:	f001 fa15 	bl	8107514 <__pow5mult>
 81060ea:	464a      	mov	r2, r9
 81060ec:	4601      	mov	r1, r0
 81060ee:	4605      	mov	r5, r0
 81060f0:	4658      	mov	r0, fp
 81060f2:	f001 f965 	bl	81073c0 <__multiply>
 81060f6:	4649      	mov	r1, r9
 81060f8:	9004      	str	r0, [sp, #16]
 81060fa:	4658      	mov	r0, fp
 81060fc:	f001 f84c 	bl	8107198 <_Bfree>
 8106100:	9b04      	ldr	r3, [sp, #16]
 8106102:	4699      	mov	r9, r3
 8106104:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8106106:	1b1a      	subs	r2, r3, r4
 8106108:	d004      	beq.n	8106114 <_dtoa_r+0x78c>
 810610a:	4649      	mov	r1, r9
 810610c:	4658      	mov	r0, fp
 810610e:	f001 fa01 	bl	8107514 <__pow5mult>
 8106112:	4681      	mov	r9, r0
 8106114:	2101      	movs	r1, #1
 8106116:	4658      	mov	r0, fp
 8106118:	f001 f93c 	bl	8107394 <__i2b>
 810611c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810611e:	4604      	mov	r4, r0
 8106120:	2b00      	cmp	r3, #0
 8106122:	f000 81cf 	beq.w	81064c4 <_dtoa_r+0xb3c>
 8106126:	461a      	mov	r2, r3
 8106128:	4601      	mov	r1, r0
 810612a:	4658      	mov	r0, fp
 810612c:	f001 f9f2 	bl	8107514 <__pow5mult>
 8106130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8106132:	2b01      	cmp	r3, #1
 8106134:	4604      	mov	r4, r0
 8106136:	f300 8095 	bgt.w	8106264 <_dtoa_r+0x8dc>
 810613a:	9b02      	ldr	r3, [sp, #8]
 810613c:	2b00      	cmp	r3, #0
 810613e:	f040 8087 	bne.w	8106250 <_dtoa_r+0x8c8>
 8106142:	9b03      	ldr	r3, [sp, #12]
 8106144:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8106148:	2b00      	cmp	r3, #0
 810614a:	f040 8089 	bne.w	8106260 <_dtoa_r+0x8d8>
 810614e:	9b03      	ldr	r3, [sp, #12]
 8106150:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8106154:	0d1b      	lsrs	r3, r3, #20
 8106156:	051b      	lsls	r3, r3, #20
 8106158:	b12b      	cbz	r3, 8106166 <_dtoa_r+0x7de>
 810615a:	9b08      	ldr	r3, [sp, #32]
 810615c:	3301      	adds	r3, #1
 810615e:	9308      	str	r3, [sp, #32]
 8106160:	f108 0801 	add.w	r8, r8, #1
 8106164:	2301      	movs	r3, #1
 8106166:	930a      	str	r3, [sp, #40]	@ 0x28
 8106168:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810616a:	2b00      	cmp	r3, #0
 810616c:	f000 81b0 	beq.w	81064d0 <_dtoa_r+0xb48>
 8106170:	6923      	ldr	r3, [r4, #16]
 8106172:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8106176:	6918      	ldr	r0, [r3, #16]
 8106178:	f001 f8c0 	bl	81072fc <__hi0bits>
 810617c:	f1c0 0020 	rsb	r0, r0, #32
 8106180:	9b08      	ldr	r3, [sp, #32]
 8106182:	4418      	add	r0, r3
 8106184:	f010 001f 	ands.w	r0, r0, #31
 8106188:	d077      	beq.n	810627a <_dtoa_r+0x8f2>
 810618a:	f1c0 0320 	rsb	r3, r0, #32
 810618e:	2b04      	cmp	r3, #4
 8106190:	dd6b      	ble.n	810626a <_dtoa_r+0x8e2>
 8106192:	9b08      	ldr	r3, [sp, #32]
 8106194:	f1c0 001c 	rsb	r0, r0, #28
 8106198:	4403      	add	r3, r0
 810619a:	4480      	add	r8, r0
 810619c:	4406      	add	r6, r0
 810619e:	9308      	str	r3, [sp, #32]
 81061a0:	f1b8 0f00 	cmp.w	r8, #0
 81061a4:	dd05      	ble.n	81061b2 <_dtoa_r+0x82a>
 81061a6:	4649      	mov	r1, r9
 81061a8:	4642      	mov	r2, r8
 81061aa:	4658      	mov	r0, fp
 81061ac:	f001 fa0c 	bl	81075c8 <__lshift>
 81061b0:	4681      	mov	r9, r0
 81061b2:	9b08      	ldr	r3, [sp, #32]
 81061b4:	2b00      	cmp	r3, #0
 81061b6:	dd05      	ble.n	81061c4 <_dtoa_r+0x83c>
 81061b8:	4621      	mov	r1, r4
 81061ba:	461a      	mov	r2, r3
 81061bc:	4658      	mov	r0, fp
 81061be:	f001 fa03 	bl	81075c8 <__lshift>
 81061c2:	4604      	mov	r4, r0
 81061c4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 81061c6:	2b00      	cmp	r3, #0
 81061c8:	d059      	beq.n	810627e <_dtoa_r+0x8f6>
 81061ca:	4621      	mov	r1, r4
 81061cc:	4648      	mov	r0, r9
 81061ce:	f001 fa67 	bl	81076a0 <__mcmp>
 81061d2:	2800      	cmp	r0, #0
 81061d4:	da53      	bge.n	810627e <_dtoa_r+0x8f6>
 81061d6:	1e7b      	subs	r3, r7, #1
 81061d8:	9304      	str	r3, [sp, #16]
 81061da:	4649      	mov	r1, r9
 81061dc:	2300      	movs	r3, #0
 81061de:	220a      	movs	r2, #10
 81061e0:	4658      	mov	r0, fp
 81061e2:	f000 fffb 	bl	81071dc <__multadd>
 81061e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81061e8:	4681      	mov	r9, r0
 81061ea:	2b00      	cmp	r3, #0
 81061ec:	f000 8172 	beq.w	81064d4 <_dtoa_r+0xb4c>
 81061f0:	2300      	movs	r3, #0
 81061f2:	4629      	mov	r1, r5
 81061f4:	220a      	movs	r2, #10
 81061f6:	4658      	mov	r0, fp
 81061f8:	f000 fff0 	bl	81071dc <__multadd>
 81061fc:	9b00      	ldr	r3, [sp, #0]
 81061fe:	2b00      	cmp	r3, #0
 8106200:	4605      	mov	r5, r0
 8106202:	dc67      	bgt.n	81062d4 <_dtoa_r+0x94c>
 8106204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8106206:	2b02      	cmp	r3, #2
 8106208:	dc41      	bgt.n	810628e <_dtoa_r+0x906>
 810620a:	e063      	b.n	81062d4 <_dtoa_r+0x94c>
 810620c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 810620e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8106212:	e746      	b.n	81060a2 <_dtoa_r+0x71a>
 8106214:	9b07      	ldr	r3, [sp, #28]
 8106216:	1e5c      	subs	r4, r3, #1
 8106218:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 810621a:	42a3      	cmp	r3, r4
 810621c:	bfbf      	itttt	lt
 810621e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8106220:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8106222:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8106224:	1ae3      	sublt	r3, r4, r3
 8106226:	bfb4      	ite	lt
 8106228:	18d2      	addlt	r2, r2, r3
 810622a:	1b1c      	subge	r4, r3, r4
 810622c:	9b07      	ldr	r3, [sp, #28]
 810622e:	bfbc      	itt	lt
 8106230:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8106232:	2400      	movlt	r4, #0
 8106234:	2b00      	cmp	r3, #0
 8106236:	bfb5      	itete	lt
 8106238:	eba8 0603 	sublt.w	r6, r8, r3
 810623c:	9b07      	ldrge	r3, [sp, #28]
 810623e:	2300      	movlt	r3, #0
 8106240:	4646      	movge	r6, r8
 8106242:	e730      	b.n	81060a6 <_dtoa_r+0x71e>
 8106244:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8106246:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8106248:	4646      	mov	r6, r8
 810624a:	e735      	b.n	81060b8 <_dtoa_r+0x730>
 810624c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 810624e:	e75c      	b.n	810610a <_dtoa_r+0x782>
 8106250:	2300      	movs	r3, #0
 8106252:	e788      	b.n	8106166 <_dtoa_r+0x7de>
 8106254:	3fe00000 	.word	0x3fe00000
 8106258:	40240000 	.word	0x40240000
 810625c:	40140000 	.word	0x40140000
 8106260:	9b02      	ldr	r3, [sp, #8]
 8106262:	e780      	b.n	8106166 <_dtoa_r+0x7de>
 8106264:	2300      	movs	r3, #0
 8106266:	930a      	str	r3, [sp, #40]	@ 0x28
 8106268:	e782      	b.n	8106170 <_dtoa_r+0x7e8>
 810626a:	d099      	beq.n	81061a0 <_dtoa_r+0x818>
 810626c:	9a08      	ldr	r2, [sp, #32]
 810626e:	331c      	adds	r3, #28
 8106270:	441a      	add	r2, r3
 8106272:	4498      	add	r8, r3
 8106274:	441e      	add	r6, r3
 8106276:	9208      	str	r2, [sp, #32]
 8106278:	e792      	b.n	81061a0 <_dtoa_r+0x818>
 810627a:	4603      	mov	r3, r0
 810627c:	e7f6      	b.n	810626c <_dtoa_r+0x8e4>
 810627e:	9b07      	ldr	r3, [sp, #28]
 8106280:	9704      	str	r7, [sp, #16]
 8106282:	2b00      	cmp	r3, #0
 8106284:	dc20      	bgt.n	81062c8 <_dtoa_r+0x940>
 8106286:	9300      	str	r3, [sp, #0]
 8106288:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 810628a:	2b02      	cmp	r3, #2
 810628c:	dd1e      	ble.n	81062cc <_dtoa_r+0x944>
 810628e:	9b00      	ldr	r3, [sp, #0]
 8106290:	2b00      	cmp	r3, #0
 8106292:	f47f aec0 	bne.w	8106016 <_dtoa_r+0x68e>
 8106296:	4621      	mov	r1, r4
 8106298:	2205      	movs	r2, #5
 810629a:	4658      	mov	r0, fp
 810629c:	f000 ff9e 	bl	81071dc <__multadd>
 81062a0:	4601      	mov	r1, r0
 81062a2:	4604      	mov	r4, r0
 81062a4:	4648      	mov	r0, r9
 81062a6:	f001 f9fb 	bl	81076a0 <__mcmp>
 81062aa:	2800      	cmp	r0, #0
 81062ac:	f77f aeb3 	ble.w	8106016 <_dtoa_r+0x68e>
 81062b0:	4656      	mov	r6, sl
 81062b2:	2331      	movs	r3, #49	@ 0x31
 81062b4:	f806 3b01 	strb.w	r3, [r6], #1
 81062b8:	9b04      	ldr	r3, [sp, #16]
 81062ba:	3301      	adds	r3, #1
 81062bc:	9304      	str	r3, [sp, #16]
 81062be:	e6ae      	b.n	810601e <_dtoa_r+0x696>
 81062c0:	9c07      	ldr	r4, [sp, #28]
 81062c2:	9704      	str	r7, [sp, #16]
 81062c4:	4625      	mov	r5, r4
 81062c6:	e7f3      	b.n	81062b0 <_dtoa_r+0x928>
 81062c8:	9b07      	ldr	r3, [sp, #28]
 81062ca:	9300      	str	r3, [sp, #0]
 81062cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 81062ce:	2b00      	cmp	r3, #0
 81062d0:	f000 8104 	beq.w	81064dc <_dtoa_r+0xb54>
 81062d4:	2e00      	cmp	r6, #0
 81062d6:	dd05      	ble.n	81062e4 <_dtoa_r+0x95c>
 81062d8:	4629      	mov	r1, r5
 81062da:	4632      	mov	r2, r6
 81062dc:	4658      	mov	r0, fp
 81062de:	f001 f973 	bl	81075c8 <__lshift>
 81062e2:	4605      	mov	r5, r0
 81062e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 81062e6:	2b00      	cmp	r3, #0
 81062e8:	d05a      	beq.n	81063a0 <_dtoa_r+0xa18>
 81062ea:	6869      	ldr	r1, [r5, #4]
 81062ec:	4658      	mov	r0, fp
 81062ee:	f000 ff13 	bl	8107118 <_Balloc>
 81062f2:	4606      	mov	r6, r0
 81062f4:	b928      	cbnz	r0, 8106302 <_dtoa_r+0x97a>
 81062f6:	4b84      	ldr	r3, [pc, #528]	@ (8106508 <_dtoa_r+0xb80>)
 81062f8:	4602      	mov	r2, r0
 81062fa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 81062fe:	f7ff bb5a 	b.w	81059b6 <_dtoa_r+0x2e>
 8106302:	692a      	ldr	r2, [r5, #16]
 8106304:	3202      	adds	r2, #2
 8106306:	0092      	lsls	r2, r2, #2
 8106308:	f105 010c 	add.w	r1, r5, #12
 810630c:	300c      	adds	r0, #12
 810630e:	f7ff fa92 	bl	8105836 <memcpy>
 8106312:	2201      	movs	r2, #1
 8106314:	4631      	mov	r1, r6
 8106316:	4658      	mov	r0, fp
 8106318:	f001 f956 	bl	81075c8 <__lshift>
 810631c:	f10a 0301 	add.w	r3, sl, #1
 8106320:	9307      	str	r3, [sp, #28]
 8106322:	9b00      	ldr	r3, [sp, #0]
 8106324:	4453      	add	r3, sl
 8106326:	930b      	str	r3, [sp, #44]	@ 0x2c
 8106328:	9b02      	ldr	r3, [sp, #8]
 810632a:	f003 0301 	and.w	r3, r3, #1
 810632e:	462f      	mov	r7, r5
 8106330:	930a      	str	r3, [sp, #40]	@ 0x28
 8106332:	4605      	mov	r5, r0
 8106334:	9b07      	ldr	r3, [sp, #28]
 8106336:	4621      	mov	r1, r4
 8106338:	3b01      	subs	r3, #1
 810633a:	4648      	mov	r0, r9
 810633c:	9300      	str	r3, [sp, #0]
 810633e:	f7ff fa99 	bl	8105874 <quorem>
 8106342:	4639      	mov	r1, r7
 8106344:	9002      	str	r0, [sp, #8]
 8106346:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 810634a:	4648      	mov	r0, r9
 810634c:	f001 f9a8 	bl	81076a0 <__mcmp>
 8106350:	462a      	mov	r2, r5
 8106352:	9008      	str	r0, [sp, #32]
 8106354:	4621      	mov	r1, r4
 8106356:	4658      	mov	r0, fp
 8106358:	f001 f9be 	bl	81076d8 <__mdiff>
 810635c:	68c2      	ldr	r2, [r0, #12]
 810635e:	4606      	mov	r6, r0
 8106360:	bb02      	cbnz	r2, 81063a4 <_dtoa_r+0xa1c>
 8106362:	4601      	mov	r1, r0
 8106364:	4648      	mov	r0, r9
 8106366:	f001 f99b 	bl	81076a0 <__mcmp>
 810636a:	4602      	mov	r2, r0
 810636c:	4631      	mov	r1, r6
 810636e:	4658      	mov	r0, fp
 8106370:	920e      	str	r2, [sp, #56]	@ 0x38
 8106372:	f000 ff11 	bl	8107198 <_Bfree>
 8106376:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8106378:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 810637a:	9e07      	ldr	r6, [sp, #28]
 810637c:	ea43 0102 	orr.w	r1, r3, r2
 8106380:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8106382:	4319      	orrs	r1, r3
 8106384:	d110      	bne.n	81063a8 <_dtoa_r+0xa20>
 8106386:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 810638a:	d029      	beq.n	81063e0 <_dtoa_r+0xa58>
 810638c:	9b08      	ldr	r3, [sp, #32]
 810638e:	2b00      	cmp	r3, #0
 8106390:	dd02      	ble.n	8106398 <_dtoa_r+0xa10>
 8106392:	9b02      	ldr	r3, [sp, #8]
 8106394:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8106398:	9b00      	ldr	r3, [sp, #0]
 810639a:	f883 8000 	strb.w	r8, [r3]
 810639e:	e63f      	b.n	8106020 <_dtoa_r+0x698>
 81063a0:	4628      	mov	r0, r5
 81063a2:	e7bb      	b.n	810631c <_dtoa_r+0x994>
 81063a4:	2201      	movs	r2, #1
 81063a6:	e7e1      	b.n	810636c <_dtoa_r+0x9e4>
 81063a8:	9b08      	ldr	r3, [sp, #32]
 81063aa:	2b00      	cmp	r3, #0
 81063ac:	db04      	blt.n	81063b8 <_dtoa_r+0xa30>
 81063ae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 81063b0:	430b      	orrs	r3, r1
 81063b2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 81063b4:	430b      	orrs	r3, r1
 81063b6:	d120      	bne.n	81063fa <_dtoa_r+0xa72>
 81063b8:	2a00      	cmp	r2, #0
 81063ba:	dded      	ble.n	8106398 <_dtoa_r+0xa10>
 81063bc:	4649      	mov	r1, r9
 81063be:	2201      	movs	r2, #1
 81063c0:	4658      	mov	r0, fp
 81063c2:	f001 f901 	bl	81075c8 <__lshift>
 81063c6:	4621      	mov	r1, r4
 81063c8:	4681      	mov	r9, r0
 81063ca:	f001 f969 	bl	81076a0 <__mcmp>
 81063ce:	2800      	cmp	r0, #0
 81063d0:	dc03      	bgt.n	81063da <_dtoa_r+0xa52>
 81063d2:	d1e1      	bne.n	8106398 <_dtoa_r+0xa10>
 81063d4:	f018 0f01 	tst.w	r8, #1
 81063d8:	d0de      	beq.n	8106398 <_dtoa_r+0xa10>
 81063da:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 81063de:	d1d8      	bne.n	8106392 <_dtoa_r+0xa0a>
 81063e0:	9a00      	ldr	r2, [sp, #0]
 81063e2:	2339      	movs	r3, #57	@ 0x39
 81063e4:	7013      	strb	r3, [r2, #0]
 81063e6:	4633      	mov	r3, r6
 81063e8:	461e      	mov	r6, r3
 81063ea:	3b01      	subs	r3, #1
 81063ec:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 81063f0:	2a39      	cmp	r2, #57	@ 0x39
 81063f2:	d052      	beq.n	810649a <_dtoa_r+0xb12>
 81063f4:	3201      	adds	r2, #1
 81063f6:	701a      	strb	r2, [r3, #0]
 81063f8:	e612      	b.n	8106020 <_dtoa_r+0x698>
 81063fa:	2a00      	cmp	r2, #0
 81063fc:	dd07      	ble.n	810640e <_dtoa_r+0xa86>
 81063fe:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8106402:	d0ed      	beq.n	81063e0 <_dtoa_r+0xa58>
 8106404:	9a00      	ldr	r2, [sp, #0]
 8106406:	f108 0301 	add.w	r3, r8, #1
 810640a:	7013      	strb	r3, [r2, #0]
 810640c:	e608      	b.n	8106020 <_dtoa_r+0x698>
 810640e:	9b07      	ldr	r3, [sp, #28]
 8106410:	9a07      	ldr	r2, [sp, #28]
 8106412:	f803 8c01 	strb.w	r8, [r3, #-1]
 8106416:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8106418:	4293      	cmp	r3, r2
 810641a:	d028      	beq.n	810646e <_dtoa_r+0xae6>
 810641c:	4649      	mov	r1, r9
 810641e:	2300      	movs	r3, #0
 8106420:	220a      	movs	r2, #10
 8106422:	4658      	mov	r0, fp
 8106424:	f000 feda 	bl	81071dc <__multadd>
 8106428:	42af      	cmp	r7, r5
 810642a:	4681      	mov	r9, r0
 810642c:	f04f 0300 	mov.w	r3, #0
 8106430:	f04f 020a 	mov.w	r2, #10
 8106434:	4639      	mov	r1, r7
 8106436:	4658      	mov	r0, fp
 8106438:	d107      	bne.n	810644a <_dtoa_r+0xac2>
 810643a:	f000 fecf 	bl	81071dc <__multadd>
 810643e:	4607      	mov	r7, r0
 8106440:	4605      	mov	r5, r0
 8106442:	9b07      	ldr	r3, [sp, #28]
 8106444:	3301      	adds	r3, #1
 8106446:	9307      	str	r3, [sp, #28]
 8106448:	e774      	b.n	8106334 <_dtoa_r+0x9ac>
 810644a:	f000 fec7 	bl	81071dc <__multadd>
 810644e:	4629      	mov	r1, r5
 8106450:	4607      	mov	r7, r0
 8106452:	2300      	movs	r3, #0
 8106454:	220a      	movs	r2, #10
 8106456:	4658      	mov	r0, fp
 8106458:	f000 fec0 	bl	81071dc <__multadd>
 810645c:	4605      	mov	r5, r0
 810645e:	e7f0      	b.n	8106442 <_dtoa_r+0xaba>
 8106460:	9b00      	ldr	r3, [sp, #0]
 8106462:	2b00      	cmp	r3, #0
 8106464:	bfcc      	ite	gt
 8106466:	461e      	movgt	r6, r3
 8106468:	2601      	movle	r6, #1
 810646a:	4456      	add	r6, sl
 810646c:	2700      	movs	r7, #0
 810646e:	4649      	mov	r1, r9
 8106470:	2201      	movs	r2, #1
 8106472:	4658      	mov	r0, fp
 8106474:	f001 f8a8 	bl	81075c8 <__lshift>
 8106478:	4621      	mov	r1, r4
 810647a:	4681      	mov	r9, r0
 810647c:	f001 f910 	bl	81076a0 <__mcmp>
 8106480:	2800      	cmp	r0, #0
 8106482:	dcb0      	bgt.n	81063e6 <_dtoa_r+0xa5e>
 8106484:	d102      	bne.n	810648c <_dtoa_r+0xb04>
 8106486:	f018 0f01 	tst.w	r8, #1
 810648a:	d1ac      	bne.n	81063e6 <_dtoa_r+0xa5e>
 810648c:	4633      	mov	r3, r6
 810648e:	461e      	mov	r6, r3
 8106490:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8106494:	2a30      	cmp	r2, #48	@ 0x30
 8106496:	d0fa      	beq.n	810648e <_dtoa_r+0xb06>
 8106498:	e5c2      	b.n	8106020 <_dtoa_r+0x698>
 810649a:	459a      	cmp	sl, r3
 810649c:	d1a4      	bne.n	81063e8 <_dtoa_r+0xa60>
 810649e:	9b04      	ldr	r3, [sp, #16]
 81064a0:	3301      	adds	r3, #1
 81064a2:	9304      	str	r3, [sp, #16]
 81064a4:	2331      	movs	r3, #49	@ 0x31
 81064a6:	f88a 3000 	strb.w	r3, [sl]
 81064aa:	e5b9      	b.n	8106020 <_dtoa_r+0x698>
 81064ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 81064ae:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 810650c <_dtoa_r+0xb84>
 81064b2:	b11b      	cbz	r3, 81064bc <_dtoa_r+0xb34>
 81064b4:	f10a 0308 	add.w	r3, sl, #8
 81064b8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 81064ba:	6013      	str	r3, [r2, #0]
 81064bc:	4650      	mov	r0, sl
 81064be:	b019      	add	sp, #100	@ 0x64
 81064c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81064c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 81064c6:	2b01      	cmp	r3, #1
 81064c8:	f77f ae37 	ble.w	810613a <_dtoa_r+0x7b2>
 81064cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 81064ce:	930a      	str	r3, [sp, #40]	@ 0x28
 81064d0:	2001      	movs	r0, #1
 81064d2:	e655      	b.n	8106180 <_dtoa_r+0x7f8>
 81064d4:	9b00      	ldr	r3, [sp, #0]
 81064d6:	2b00      	cmp	r3, #0
 81064d8:	f77f aed6 	ble.w	8106288 <_dtoa_r+0x900>
 81064dc:	4656      	mov	r6, sl
 81064de:	4621      	mov	r1, r4
 81064e0:	4648      	mov	r0, r9
 81064e2:	f7ff f9c7 	bl	8105874 <quorem>
 81064e6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 81064ea:	f806 8b01 	strb.w	r8, [r6], #1
 81064ee:	9b00      	ldr	r3, [sp, #0]
 81064f0:	eba6 020a 	sub.w	r2, r6, sl
 81064f4:	4293      	cmp	r3, r2
 81064f6:	ddb3      	ble.n	8106460 <_dtoa_r+0xad8>
 81064f8:	4649      	mov	r1, r9
 81064fa:	2300      	movs	r3, #0
 81064fc:	220a      	movs	r2, #10
 81064fe:	4658      	mov	r0, fp
 8106500:	f000 fe6c 	bl	81071dc <__multadd>
 8106504:	4681      	mov	r9, r0
 8106506:	e7ea      	b.n	81064de <_dtoa_r+0xb56>
 8106508:	0810850d 	.word	0x0810850d
 810650c:	08108491 	.word	0x08108491

08106510 <rshift>:
 8106510:	6903      	ldr	r3, [r0, #16]
 8106512:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8106516:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 810651a:	ea4f 1261 	mov.w	r2, r1, asr #5
 810651e:	f100 0414 	add.w	r4, r0, #20
 8106522:	dd45      	ble.n	81065b0 <rshift+0xa0>
 8106524:	f011 011f 	ands.w	r1, r1, #31
 8106528:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 810652c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8106530:	d10c      	bne.n	810654c <rshift+0x3c>
 8106532:	f100 0710 	add.w	r7, r0, #16
 8106536:	4629      	mov	r1, r5
 8106538:	42b1      	cmp	r1, r6
 810653a:	d334      	bcc.n	81065a6 <rshift+0x96>
 810653c:	1a9b      	subs	r3, r3, r2
 810653e:	009b      	lsls	r3, r3, #2
 8106540:	1eea      	subs	r2, r5, #3
 8106542:	4296      	cmp	r6, r2
 8106544:	bf38      	it	cc
 8106546:	2300      	movcc	r3, #0
 8106548:	4423      	add	r3, r4
 810654a:	e015      	b.n	8106578 <rshift+0x68>
 810654c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8106550:	f1c1 0820 	rsb	r8, r1, #32
 8106554:	40cf      	lsrs	r7, r1
 8106556:	f105 0e04 	add.w	lr, r5, #4
 810655a:	46a1      	mov	r9, r4
 810655c:	4576      	cmp	r6, lr
 810655e:	46f4      	mov	ip, lr
 8106560:	d815      	bhi.n	810658e <rshift+0x7e>
 8106562:	1a9a      	subs	r2, r3, r2
 8106564:	0092      	lsls	r2, r2, #2
 8106566:	3a04      	subs	r2, #4
 8106568:	3501      	adds	r5, #1
 810656a:	42ae      	cmp	r6, r5
 810656c:	bf38      	it	cc
 810656e:	2200      	movcc	r2, #0
 8106570:	18a3      	adds	r3, r4, r2
 8106572:	50a7      	str	r7, [r4, r2]
 8106574:	b107      	cbz	r7, 8106578 <rshift+0x68>
 8106576:	3304      	adds	r3, #4
 8106578:	1b1a      	subs	r2, r3, r4
 810657a:	42a3      	cmp	r3, r4
 810657c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8106580:	bf08      	it	eq
 8106582:	2300      	moveq	r3, #0
 8106584:	6102      	str	r2, [r0, #16]
 8106586:	bf08      	it	eq
 8106588:	6143      	streq	r3, [r0, #20]
 810658a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810658e:	f8dc c000 	ldr.w	ip, [ip]
 8106592:	fa0c fc08 	lsl.w	ip, ip, r8
 8106596:	ea4c 0707 	orr.w	r7, ip, r7
 810659a:	f849 7b04 	str.w	r7, [r9], #4
 810659e:	f85e 7b04 	ldr.w	r7, [lr], #4
 81065a2:	40cf      	lsrs	r7, r1
 81065a4:	e7da      	b.n	810655c <rshift+0x4c>
 81065a6:	f851 cb04 	ldr.w	ip, [r1], #4
 81065aa:	f847 cf04 	str.w	ip, [r7, #4]!
 81065ae:	e7c3      	b.n	8106538 <rshift+0x28>
 81065b0:	4623      	mov	r3, r4
 81065b2:	e7e1      	b.n	8106578 <rshift+0x68>

081065b4 <__hexdig_fun>:
 81065b4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 81065b8:	2b09      	cmp	r3, #9
 81065ba:	d802      	bhi.n	81065c2 <__hexdig_fun+0xe>
 81065bc:	3820      	subs	r0, #32
 81065be:	b2c0      	uxtb	r0, r0
 81065c0:	4770      	bx	lr
 81065c2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 81065c6:	2b05      	cmp	r3, #5
 81065c8:	d801      	bhi.n	81065ce <__hexdig_fun+0x1a>
 81065ca:	3847      	subs	r0, #71	@ 0x47
 81065cc:	e7f7      	b.n	81065be <__hexdig_fun+0xa>
 81065ce:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 81065d2:	2b05      	cmp	r3, #5
 81065d4:	d801      	bhi.n	81065da <__hexdig_fun+0x26>
 81065d6:	3827      	subs	r0, #39	@ 0x27
 81065d8:	e7f1      	b.n	81065be <__hexdig_fun+0xa>
 81065da:	2000      	movs	r0, #0
 81065dc:	4770      	bx	lr
	...

081065e0 <__gethex>:
 81065e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81065e4:	b085      	sub	sp, #20
 81065e6:	468a      	mov	sl, r1
 81065e8:	9302      	str	r3, [sp, #8]
 81065ea:	680b      	ldr	r3, [r1, #0]
 81065ec:	9001      	str	r0, [sp, #4]
 81065ee:	4690      	mov	r8, r2
 81065f0:	1c9c      	adds	r4, r3, #2
 81065f2:	46a1      	mov	r9, r4
 81065f4:	f814 0b01 	ldrb.w	r0, [r4], #1
 81065f8:	2830      	cmp	r0, #48	@ 0x30
 81065fa:	d0fa      	beq.n	81065f2 <__gethex+0x12>
 81065fc:	eba9 0303 	sub.w	r3, r9, r3
 8106600:	f1a3 0b02 	sub.w	fp, r3, #2
 8106604:	f7ff ffd6 	bl	81065b4 <__hexdig_fun>
 8106608:	4605      	mov	r5, r0
 810660a:	2800      	cmp	r0, #0
 810660c:	d168      	bne.n	81066e0 <__gethex+0x100>
 810660e:	49a0      	ldr	r1, [pc, #640]	@ (8106890 <__gethex+0x2b0>)
 8106610:	2201      	movs	r2, #1
 8106612:	4648      	mov	r0, r9
 8106614:	f7ff f8c4 	bl	81057a0 <strncmp>
 8106618:	4607      	mov	r7, r0
 810661a:	2800      	cmp	r0, #0
 810661c:	d167      	bne.n	81066ee <__gethex+0x10e>
 810661e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8106622:	4626      	mov	r6, r4
 8106624:	f7ff ffc6 	bl	81065b4 <__hexdig_fun>
 8106628:	2800      	cmp	r0, #0
 810662a:	d062      	beq.n	81066f2 <__gethex+0x112>
 810662c:	4623      	mov	r3, r4
 810662e:	7818      	ldrb	r0, [r3, #0]
 8106630:	2830      	cmp	r0, #48	@ 0x30
 8106632:	4699      	mov	r9, r3
 8106634:	f103 0301 	add.w	r3, r3, #1
 8106638:	d0f9      	beq.n	810662e <__gethex+0x4e>
 810663a:	f7ff ffbb 	bl	81065b4 <__hexdig_fun>
 810663e:	fab0 f580 	clz	r5, r0
 8106642:	096d      	lsrs	r5, r5, #5
 8106644:	f04f 0b01 	mov.w	fp, #1
 8106648:	464a      	mov	r2, r9
 810664a:	4616      	mov	r6, r2
 810664c:	3201      	adds	r2, #1
 810664e:	7830      	ldrb	r0, [r6, #0]
 8106650:	f7ff ffb0 	bl	81065b4 <__hexdig_fun>
 8106654:	2800      	cmp	r0, #0
 8106656:	d1f8      	bne.n	810664a <__gethex+0x6a>
 8106658:	498d      	ldr	r1, [pc, #564]	@ (8106890 <__gethex+0x2b0>)
 810665a:	2201      	movs	r2, #1
 810665c:	4630      	mov	r0, r6
 810665e:	f7ff f89f 	bl	81057a0 <strncmp>
 8106662:	2800      	cmp	r0, #0
 8106664:	d13f      	bne.n	81066e6 <__gethex+0x106>
 8106666:	b944      	cbnz	r4, 810667a <__gethex+0x9a>
 8106668:	1c74      	adds	r4, r6, #1
 810666a:	4622      	mov	r2, r4
 810666c:	4616      	mov	r6, r2
 810666e:	3201      	adds	r2, #1
 8106670:	7830      	ldrb	r0, [r6, #0]
 8106672:	f7ff ff9f 	bl	81065b4 <__hexdig_fun>
 8106676:	2800      	cmp	r0, #0
 8106678:	d1f8      	bne.n	810666c <__gethex+0x8c>
 810667a:	1ba4      	subs	r4, r4, r6
 810667c:	00a7      	lsls	r7, r4, #2
 810667e:	7833      	ldrb	r3, [r6, #0]
 8106680:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8106684:	2b50      	cmp	r3, #80	@ 0x50
 8106686:	d13e      	bne.n	8106706 <__gethex+0x126>
 8106688:	7873      	ldrb	r3, [r6, #1]
 810668a:	2b2b      	cmp	r3, #43	@ 0x2b
 810668c:	d033      	beq.n	81066f6 <__gethex+0x116>
 810668e:	2b2d      	cmp	r3, #45	@ 0x2d
 8106690:	d034      	beq.n	81066fc <__gethex+0x11c>
 8106692:	1c71      	adds	r1, r6, #1
 8106694:	2400      	movs	r4, #0
 8106696:	7808      	ldrb	r0, [r1, #0]
 8106698:	f7ff ff8c 	bl	81065b4 <__hexdig_fun>
 810669c:	1e43      	subs	r3, r0, #1
 810669e:	b2db      	uxtb	r3, r3
 81066a0:	2b18      	cmp	r3, #24
 81066a2:	d830      	bhi.n	8106706 <__gethex+0x126>
 81066a4:	f1a0 0210 	sub.w	r2, r0, #16
 81066a8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 81066ac:	f7ff ff82 	bl	81065b4 <__hexdig_fun>
 81066b0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 81066b4:	fa5f fc8c 	uxtb.w	ip, ip
 81066b8:	f1bc 0f18 	cmp.w	ip, #24
 81066bc:	f04f 030a 	mov.w	r3, #10
 81066c0:	d91e      	bls.n	8106700 <__gethex+0x120>
 81066c2:	b104      	cbz	r4, 81066c6 <__gethex+0xe6>
 81066c4:	4252      	negs	r2, r2
 81066c6:	4417      	add	r7, r2
 81066c8:	f8ca 1000 	str.w	r1, [sl]
 81066cc:	b1ed      	cbz	r5, 810670a <__gethex+0x12a>
 81066ce:	f1bb 0f00 	cmp.w	fp, #0
 81066d2:	bf0c      	ite	eq
 81066d4:	2506      	moveq	r5, #6
 81066d6:	2500      	movne	r5, #0
 81066d8:	4628      	mov	r0, r5
 81066da:	b005      	add	sp, #20
 81066dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81066e0:	2500      	movs	r5, #0
 81066e2:	462c      	mov	r4, r5
 81066e4:	e7b0      	b.n	8106648 <__gethex+0x68>
 81066e6:	2c00      	cmp	r4, #0
 81066e8:	d1c7      	bne.n	810667a <__gethex+0x9a>
 81066ea:	4627      	mov	r7, r4
 81066ec:	e7c7      	b.n	810667e <__gethex+0x9e>
 81066ee:	464e      	mov	r6, r9
 81066f0:	462f      	mov	r7, r5
 81066f2:	2501      	movs	r5, #1
 81066f4:	e7c3      	b.n	810667e <__gethex+0x9e>
 81066f6:	2400      	movs	r4, #0
 81066f8:	1cb1      	adds	r1, r6, #2
 81066fa:	e7cc      	b.n	8106696 <__gethex+0xb6>
 81066fc:	2401      	movs	r4, #1
 81066fe:	e7fb      	b.n	81066f8 <__gethex+0x118>
 8106700:	fb03 0002 	mla	r0, r3, r2, r0
 8106704:	e7ce      	b.n	81066a4 <__gethex+0xc4>
 8106706:	4631      	mov	r1, r6
 8106708:	e7de      	b.n	81066c8 <__gethex+0xe8>
 810670a:	eba6 0309 	sub.w	r3, r6, r9
 810670e:	3b01      	subs	r3, #1
 8106710:	4629      	mov	r1, r5
 8106712:	2b07      	cmp	r3, #7
 8106714:	dc0a      	bgt.n	810672c <__gethex+0x14c>
 8106716:	9801      	ldr	r0, [sp, #4]
 8106718:	f000 fcfe 	bl	8107118 <_Balloc>
 810671c:	4604      	mov	r4, r0
 810671e:	b940      	cbnz	r0, 8106732 <__gethex+0x152>
 8106720:	4b5c      	ldr	r3, [pc, #368]	@ (8106894 <__gethex+0x2b4>)
 8106722:	4602      	mov	r2, r0
 8106724:	21e4      	movs	r1, #228	@ 0xe4
 8106726:	485c      	ldr	r0, [pc, #368]	@ (8106898 <__gethex+0x2b8>)
 8106728:	f001 fa96 	bl	8107c58 <__assert_func>
 810672c:	3101      	adds	r1, #1
 810672e:	105b      	asrs	r3, r3, #1
 8106730:	e7ef      	b.n	8106712 <__gethex+0x132>
 8106732:	f100 0a14 	add.w	sl, r0, #20
 8106736:	2300      	movs	r3, #0
 8106738:	4655      	mov	r5, sl
 810673a:	469b      	mov	fp, r3
 810673c:	45b1      	cmp	r9, r6
 810673e:	d337      	bcc.n	81067b0 <__gethex+0x1d0>
 8106740:	f845 bb04 	str.w	fp, [r5], #4
 8106744:	eba5 050a 	sub.w	r5, r5, sl
 8106748:	10ad      	asrs	r5, r5, #2
 810674a:	6125      	str	r5, [r4, #16]
 810674c:	4658      	mov	r0, fp
 810674e:	f000 fdd5 	bl	81072fc <__hi0bits>
 8106752:	016d      	lsls	r5, r5, #5
 8106754:	f8d8 6000 	ldr.w	r6, [r8]
 8106758:	1a2d      	subs	r5, r5, r0
 810675a:	42b5      	cmp	r5, r6
 810675c:	dd54      	ble.n	8106808 <__gethex+0x228>
 810675e:	1bad      	subs	r5, r5, r6
 8106760:	4629      	mov	r1, r5
 8106762:	4620      	mov	r0, r4
 8106764:	f001 f969 	bl	8107a3a <__any_on>
 8106768:	4681      	mov	r9, r0
 810676a:	b178      	cbz	r0, 810678c <__gethex+0x1ac>
 810676c:	1e6b      	subs	r3, r5, #1
 810676e:	1159      	asrs	r1, r3, #5
 8106770:	f003 021f 	and.w	r2, r3, #31
 8106774:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8106778:	f04f 0901 	mov.w	r9, #1
 810677c:	fa09 f202 	lsl.w	r2, r9, r2
 8106780:	420a      	tst	r2, r1
 8106782:	d003      	beq.n	810678c <__gethex+0x1ac>
 8106784:	454b      	cmp	r3, r9
 8106786:	dc36      	bgt.n	81067f6 <__gethex+0x216>
 8106788:	f04f 0902 	mov.w	r9, #2
 810678c:	4629      	mov	r1, r5
 810678e:	4620      	mov	r0, r4
 8106790:	f7ff febe 	bl	8106510 <rshift>
 8106794:	442f      	add	r7, r5
 8106796:	f8d8 3008 	ldr.w	r3, [r8, #8]
 810679a:	42bb      	cmp	r3, r7
 810679c:	da42      	bge.n	8106824 <__gethex+0x244>
 810679e:	9801      	ldr	r0, [sp, #4]
 81067a0:	4621      	mov	r1, r4
 81067a2:	f000 fcf9 	bl	8107198 <_Bfree>
 81067a6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 81067a8:	2300      	movs	r3, #0
 81067aa:	6013      	str	r3, [r2, #0]
 81067ac:	25a3      	movs	r5, #163	@ 0xa3
 81067ae:	e793      	b.n	81066d8 <__gethex+0xf8>
 81067b0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 81067b4:	2a2e      	cmp	r2, #46	@ 0x2e
 81067b6:	d012      	beq.n	81067de <__gethex+0x1fe>
 81067b8:	2b20      	cmp	r3, #32
 81067ba:	d104      	bne.n	81067c6 <__gethex+0x1e6>
 81067bc:	f845 bb04 	str.w	fp, [r5], #4
 81067c0:	f04f 0b00 	mov.w	fp, #0
 81067c4:	465b      	mov	r3, fp
 81067c6:	7830      	ldrb	r0, [r6, #0]
 81067c8:	9303      	str	r3, [sp, #12]
 81067ca:	f7ff fef3 	bl	81065b4 <__hexdig_fun>
 81067ce:	9b03      	ldr	r3, [sp, #12]
 81067d0:	f000 000f 	and.w	r0, r0, #15
 81067d4:	4098      	lsls	r0, r3
 81067d6:	ea4b 0b00 	orr.w	fp, fp, r0
 81067da:	3304      	adds	r3, #4
 81067dc:	e7ae      	b.n	810673c <__gethex+0x15c>
 81067de:	45b1      	cmp	r9, r6
 81067e0:	d8ea      	bhi.n	81067b8 <__gethex+0x1d8>
 81067e2:	492b      	ldr	r1, [pc, #172]	@ (8106890 <__gethex+0x2b0>)
 81067e4:	9303      	str	r3, [sp, #12]
 81067e6:	2201      	movs	r2, #1
 81067e8:	4630      	mov	r0, r6
 81067ea:	f7fe ffd9 	bl	81057a0 <strncmp>
 81067ee:	9b03      	ldr	r3, [sp, #12]
 81067f0:	2800      	cmp	r0, #0
 81067f2:	d1e1      	bne.n	81067b8 <__gethex+0x1d8>
 81067f4:	e7a2      	b.n	810673c <__gethex+0x15c>
 81067f6:	1ea9      	subs	r1, r5, #2
 81067f8:	4620      	mov	r0, r4
 81067fa:	f001 f91e 	bl	8107a3a <__any_on>
 81067fe:	2800      	cmp	r0, #0
 8106800:	d0c2      	beq.n	8106788 <__gethex+0x1a8>
 8106802:	f04f 0903 	mov.w	r9, #3
 8106806:	e7c1      	b.n	810678c <__gethex+0x1ac>
 8106808:	da09      	bge.n	810681e <__gethex+0x23e>
 810680a:	1b75      	subs	r5, r6, r5
 810680c:	4621      	mov	r1, r4
 810680e:	9801      	ldr	r0, [sp, #4]
 8106810:	462a      	mov	r2, r5
 8106812:	f000 fed9 	bl	81075c8 <__lshift>
 8106816:	1b7f      	subs	r7, r7, r5
 8106818:	4604      	mov	r4, r0
 810681a:	f100 0a14 	add.w	sl, r0, #20
 810681e:	f04f 0900 	mov.w	r9, #0
 8106822:	e7b8      	b.n	8106796 <__gethex+0x1b6>
 8106824:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8106828:	42bd      	cmp	r5, r7
 810682a:	dd6f      	ble.n	810690c <__gethex+0x32c>
 810682c:	1bed      	subs	r5, r5, r7
 810682e:	42ae      	cmp	r6, r5
 8106830:	dc34      	bgt.n	810689c <__gethex+0x2bc>
 8106832:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8106836:	2b02      	cmp	r3, #2
 8106838:	d022      	beq.n	8106880 <__gethex+0x2a0>
 810683a:	2b03      	cmp	r3, #3
 810683c:	d024      	beq.n	8106888 <__gethex+0x2a8>
 810683e:	2b01      	cmp	r3, #1
 8106840:	d115      	bne.n	810686e <__gethex+0x28e>
 8106842:	42ae      	cmp	r6, r5
 8106844:	d113      	bne.n	810686e <__gethex+0x28e>
 8106846:	2e01      	cmp	r6, #1
 8106848:	d10b      	bne.n	8106862 <__gethex+0x282>
 810684a:	9a02      	ldr	r2, [sp, #8]
 810684c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8106850:	6013      	str	r3, [r2, #0]
 8106852:	2301      	movs	r3, #1
 8106854:	6123      	str	r3, [r4, #16]
 8106856:	f8ca 3000 	str.w	r3, [sl]
 810685a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810685c:	2562      	movs	r5, #98	@ 0x62
 810685e:	601c      	str	r4, [r3, #0]
 8106860:	e73a      	b.n	81066d8 <__gethex+0xf8>
 8106862:	1e71      	subs	r1, r6, #1
 8106864:	4620      	mov	r0, r4
 8106866:	f001 f8e8 	bl	8107a3a <__any_on>
 810686a:	2800      	cmp	r0, #0
 810686c:	d1ed      	bne.n	810684a <__gethex+0x26a>
 810686e:	9801      	ldr	r0, [sp, #4]
 8106870:	4621      	mov	r1, r4
 8106872:	f000 fc91 	bl	8107198 <_Bfree>
 8106876:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8106878:	2300      	movs	r3, #0
 810687a:	6013      	str	r3, [r2, #0]
 810687c:	2550      	movs	r5, #80	@ 0x50
 810687e:	e72b      	b.n	81066d8 <__gethex+0xf8>
 8106880:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8106882:	2b00      	cmp	r3, #0
 8106884:	d1f3      	bne.n	810686e <__gethex+0x28e>
 8106886:	e7e0      	b.n	810684a <__gethex+0x26a>
 8106888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810688a:	2b00      	cmp	r3, #0
 810688c:	d1dd      	bne.n	810684a <__gethex+0x26a>
 810688e:	e7ee      	b.n	810686e <__gethex+0x28e>
 8106890:	08108331 	.word	0x08108331
 8106894:	0810850d 	.word	0x0810850d
 8106898:	0810851e 	.word	0x0810851e
 810689c:	1e6f      	subs	r7, r5, #1
 810689e:	f1b9 0f00 	cmp.w	r9, #0
 81068a2:	d130      	bne.n	8106906 <__gethex+0x326>
 81068a4:	b127      	cbz	r7, 81068b0 <__gethex+0x2d0>
 81068a6:	4639      	mov	r1, r7
 81068a8:	4620      	mov	r0, r4
 81068aa:	f001 f8c6 	bl	8107a3a <__any_on>
 81068ae:	4681      	mov	r9, r0
 81068b0:	117a      	asrs	r2, r7, #5
 81068b2:	2301      	movs	r3, #1
 81068b4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 81068b8:	f007 071f 	and.w	r7, r7, #31
 81068bc:	40bb      	lsls	r3, r7
 81068be:	4213      	tst	r3, r2
 81068c0:	4629      	mov	r1, r5
 81068c2:	4620      	mov	r0, r4
 81068c4:	bf18      	it	ne
 81068c6:	f049 0902 	orrne.w	r9, r9, #2
 81068ca:	f7ff fe21 	bl	8106510 <rshift>
 81068ce:	f8d8 7004 	ldr.w	r7, [r8, #4]
 81068d2:	1b76      	subs	r6, r6, r5
 81068d4:	2502      	movs	r5, #2
 81068d6:	f1b9 0f00 	cmp.w	r9, #0
 81068da:	d047      	beq.n	810696c <__gethex+0x38c>
 81068dc:	f8d8 300c 	ldr.w	r3, [r8, #12]
 81068e0:	2b02      	cmp	r3, #2
 81068e2:	d015      	beq.n	8106910 <__gethex+0x330>
 81068e4:	2b03      	cmp	r3, #3
 81068e6:	d017      	beq.n	8106918 <__gethex+0x338>
 81068e8:	2b01      	cmp	r3, #1
 81068ea:	d109      	bne.n	8106900 <__gethex+0x320>
 81068ec:	f019 0f02 	tst.w	r9, #2
 81068f0:	d006      	beq.n	8106900 <__gethex+0x320>
 81068f2:	f8da 3000 	ldr.w	r3, [sl]
 81068f6:	ea49 0903 	orr.w	r9, r9, r3
 81068fa:	f019 0f01 	tst.w	r9, #1
 81068fe:	d10e      	bne.n	810691e <__gethex+0x33e>
 8106900:	f045 0510 	orr.w	r5, r5, #16
 8106904:	e032      	b.n	810696c <__gethex+0x38c>
 8106906:	f04f 0901 	mov.w	r9, #1
 810690a:	e7d1      	b.n	81068b0 <__gethex+0x2d0>
 810690c:	2501      	movs	r5, #1
 810690e:	e7e2      	b.n	81068d6 <__gethex+0x2f6>
 8106910:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8106912:	f1c3 0301 	rsb	r3, r3, #1
 8106916:	930f      	str	r3, [sp, #60]	@ 0x3c
 8106918:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 810691a:	2b00      	cmp	r3, #0
 810691c:	d0f0      	beq.n	8106900 <__gethex+0x320>
 810691e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8106922:	f104 0314 	add.w	r3, r4, #20
 8106926:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 810692a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 810692e:	f04f 0c00 	mov.w	ip, #0
 8106932:	4618      	mov	r0, r3
 8106934:	f853 2b04 	ldr.w	r2, [r3], #4
 8106938:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 810693c:	d01b      	beq.n	8106976 <__gethex+0x396>
 810693e:	3201      	adds	r2, #1
 8106940:	6002      	str	r2, [r0, #0]
 8106942:	2d02      	cmp	r5, #2
 8106944:	f104 0314 	add.w	r3, r4, #20
 8106948:	d13c      	bne.n	81069c4 <__gethex+0x3e4>
 810694a:	f8d8 2000 	ldr.w	r2, [r8]
 810694e:	3a01      	subs	r2, #1
 8106950:	42b2      	cmp	r2, r6
 8106952:	d109      	bne.n	8106968 <__gethex+0x388>
 8106954:	1171      	asrs	r1, r6, #5
 8106956:	2201      	movs	r2, #1
 8106958:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 810695c:	f006 061f 	and.w	r6, r6, #31
 8106960:	fa02 f606 	lsl.w	r6, r2, r6
 8106964:	421e      	tst	r6, r3
 8106966:	d13a      	bne.n	81069de <__gethex+0x3fe>
 8106968:	f045 0520 	orr.w	r5, r5, #32
 810696c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 810696e:	601c      	str	r4, [r3, #0]
 8106970:	9b02      	ldr	r3, [sp, #8]
 8106972:	601f      	str	r7, [r3, #0]
 8106974:	e6b0      	b.n	81066d8 <__gethex+0xf8>
 8106976:	4299      	cmp	r1, r3
 8106978:	f843 cc04 	str.w	ip, [r3, #-4]
 810697c:	d8d9      	bhi.n	8106932 <__gethex+0x352>
 810697e:	68a3      	ldr	r3, [r4, #8]
 8106980:	459b      	cmp	fp, r3
 8106982:	db17      	blt.n	81069b4 <__gethex+0x3d4>
 8106984:	6861      	ldr	r1, [r4, #4]
 8106986:	9801      	ldr	r0, [sp, #4]
 8106988:	3101      	adds	r1, #1
 810698a:	f000 fbc5 	bl	8107118 <_Balloc>
 810698e:	4681      	mov	r9, r0
 8106990:	b918      	cbnz	r0, 810699a <__gethex+0x3ba>
 8106992:	4b1a      	ldr	r3, [pc, #104]	@ (81069fc <__gethex+0x41c>)
 8106994:	4602      	mov	r2, r0
 8106996:	2184      	movs	r1, #132	@ 0x84
 8106998:	e6c5      	b.n	8106726 <__gethex+0x146>
 810699a:	6922      	ldr	r2, [r4, #16]
 810699c:	3202      	adds	r2, #2
 810699e:	f104 010c 	add.w	r1, r4, #12
 81069a2:	0092      	lsls	r2, r2, #2
 81069a4:	300c      	adds	r0, #12
 81069a6:	f7fe ff46 	bl	8105836 <memcpy>
 81069aa:	4621      	mov	r1, r4
 81069ac:	9801      	ldr	r0, [sp, #4]
 81069ae:	f000 fbf3 	bl	8107198 <_Bfree>
 81069b2:	464c      	mov	r4, r9
 81069b4:	6923      	ldr	r3, [r4, #16]
 81069b6:	1c5a      	adds	r2, r3, #1
 81069b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 81069bc:	6122      	str	r2, [r4, #16]
 81069be:	2201      	movs	r2, #1
 81069c0:	615a      	str	r2, [r3, #20]
 81069c2:	e7be      	b.n	8106942 <__gethex+0x362>
 81069c4:	6922      	ldr	r2, [r4, #16]
 81069c6:	455a      	cmp	r2, fp
 81069c8:	dd0b      	ble.n	81069e2 <__gethex+0x402>
 81069ca:	2101      	movs	r1, #1
 81069cc:	4620      	mov	r0, r4
 81069ce:	f7ff fd9f 	bl	8106510 <rshift>
 81069d2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 81069d6:	3701      	adds	r7, #1
 81069d8:	42bb      	cmp	r3, r7
 81069da:	f6ff aee0 	blt.w	810679e <__gethex+0x1be>
 81069de:	2501      	movs	r5, #1
 81069e0:	e7c2      	b.n	8106968 <__gethex+0x388>
 81069e2:	f016 061f 	ands.w	r6, r6, #31
 81069e6:	d0fa      	beq.n	81069de <__gethex+0x3fe>
 81069e8:	4453      	add	r3, sl
 81069ea:	f1c6 0620 	rsb	r6, r6, #32
 81069ee:	f853 0c04 	ldr.w	r0, [r3, #-4]
 81069f2:	f000 fc83 	bl	81072fc <__hi0bits>
 81069f6:	42b0      	cmp	r0, r6
 81069f8:	dbe7      	blt.n	81069ca <__gethex+0x3ea>
 81069fa:	e7f0      	b.n	81069de <__gethex+0x3fe>
 81069fc:	0810850d 	.word	0x0810850d

08106a00 <L_shift>:
 8106a00:	f1c2 0208 	rsb	r2, r2, #8
 8106a04:	0092      	lsls	r2, r2, #2
 8106a06:	b570      	push	{r4, r5, r6, lr}
 8106a08:	f1c2 0620 	rsb	r6, r2, #32
 8106a0c:	6843      	ldr	r3, [r0, #4]
 8106a0e:	6804      	ldr	r4, [r0, #0]
 8106a10:	fa03 f506 	lsl.w	r5, r3, r6
 8106a14:	432c      	orrs	r4, r5
 8106a16:	40d3      	lsrs	r3, r2
 8106a18:	6004      	str	r4, [r0, #0]
 8106a1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8106a1e:	4288      	cmp	r0, r1
 8106a20:	d3f4      	bcc.n	8106a0c <L_shift+0xc>
 8106a22:	bd70      	pop	{r4, r5, r6, pc}

08106a24 <__match>:
 8106a24:	b530      	push	{r4, r5, lr}
 8106a26:	6803      	ldr	r3, [r0, #0]
 8106a28:	3301      	adds	r3, #1
 8106a2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8106a2e:	b914      	cbnz	r4, 8106a36 <__match+0x12>
 8106a30:	6003      	str	r3, [r0, #0]
 8106a32:	2001      	movs	r0, #1
 8106a34:	bd30      	pop	{r4, r5, pc}
 8106a36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8106a3a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8106a3e:	2d19      	cmp	r5, #25
 8106a40:	bf98      	it	ls
 8106a42:	3220      	addls	r2, #32
 8106a44:	42a2      	cmp	r2, r4
 8106a46:	d0f0      	beq.n	8106a2a <__match+0x6>
 8106a48:	2000      	movs	r0, #0
 8106a4a:	e7f3      	b.n	8106a34 <__match+0x10>

08106a4c <__hexnan>:
 8106a4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106a50:	680b      	ldr	r3, [r1, #0]
 8106a52:	6801      	ldr	r1, [r0, #0]
 8106a54:	115e      	asrs	r6, r3, #5
 8106a56:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8106a5a:	f013 031f 	ands.w	r3, r3, #31
 8106a5e:	b087      	sub	sp, #28
 8106a60:	bf18      	it	ne
 8106a62:	3604      	addne	r6, #4
 8106a64:	2500      	movs	r5, #0
 8106a66:	1f37      	subs	r7, r6, #4
 8106a68:	4682      	mov	sl, r0
 8106a6a:	4690      	mov	r8, r2
 8106a6c:	9301      	str	r3, [sp, #4]
 8106a6e:	f846 5c04 	str.w	r5, [r6, #-4]
 8106a72:	46b9      	mov	r9, r7
 8106a74:	463c      	mov	r4, r7
 8106a76:	9502      	str	r5, [sp, #8]
 8106a78:	46ab      	mov	fp, r5
 8106a7a:	784a      	ldrb	r2, [r1, #1]
 8106a7c:	1c4b      	adds	r3, r1, #1
 8106a7e:	9303      	str	r3, [sp, #12]
 8106a80:	b342      	cbz	r2, 8106ad4 <__hexnan+0x88>
 8106a82:	4610      	mov	r0, r2
 8106a84:	9105      	str	r1, [sp, #20]
 8106a86:	9204      	str	r2, [sp, #16]
 8106a88:	f7ff fd94 	bl	81065b4 <__hexdig_fun>
 8106a8c:	2800      	cmp	r0, #0
 8106a8e:	d151      	bne.n	8106b34 <__hexnan+0xe8>
 8106a90:	9a04      	ldr	r2, [sp, #16]
 8106a92:	9905      	ldr	r1, [sp, #20]
 8106a94:	2a20      	cmp	r2, #32
 8106a96:	d818      	bhi.n	8106aca <__hexnan+0x7e>
 8106a98:	9b02      	ldr	r3, [sp, #8]
 8106a9a:	459b      	cmp	fp, r3
 8106a9c:	dd13      	ble.n	8106ac6 <__hexnan+0x7a>
 8106a9e:	454c      	cmp	r4, r9
 8106aa0:	d206      	bcs.n	8106ab0 <__hexnan+0x64>
 8106aa2:	2d07      	cmp	r5, #7
 8106aa4:	dc04      	bgt.n	8106ab0 <__hexnan+0x64>
 8106aa6:	462a      	mov	r2, r5
 8106aa8:	4649      	mov	r1, r9
 8106aaa:	4620      	mov	r0, r4
 8106aac:	f7ff ffa8 	bl	8106a00 <L_shift>
 8106ab0:	4544      	cmp	r4, r8
 8106ab2:	d952      	bls.n	8106b5a <__hexnan+0x10e>
 8106ab4:	2300      	movs	r3, #0
 8106ab6:	f1a4 0904 	sub.w	r9, r4, #4
 8106aba:	f844 3c04 	str.w	r3, [r4, #-4]
 8106abe:	f8cd b008 	str.w	fp, [sp, #8]
 8106ac2:	464c      	mov	r4, r9
 8106ac4:	461d      	mov	r5, r3
 8106ac6:	9903      	ldr	r1, [sp, #12]
 8106ac8:	e7d7      	b.n	8106a7a <__hexnan+0x2e>
 8106aca:	2a29      	cmp	r2, #41	@ 0x29
 8106acc:	d157      	bne.n	8106b7e <__hexnan+0x132>
 8106ace:	3102      	adds	r1, #2
 8106ad0:	f8ca 1000 	str.w	r1, [sl]
 8106ad4:	f1bb 0f00 	cmp.w	fp, #0
 8106ad8:	d051      	beq.n	8106b7e <__hexnan+0x132>
 8106ada:	454c      	cmp	r4, r9
 8106adc:	d206      	bcs.n	8106aec <__hexnan+0xa0>
 8106ade:	2d07      	cmp	r5, #7
 8106ae0:	dc04      	bgt.n	8106aec <__hexnan+0xa0>
 8106ae2:	462a      	mov	r2, r5
 8106ae4:	4649      	mov	r1, r9
 8106ae6:	4620      	mov	r0, r4
 8106ae8:	f7ff ff8a 	bl	8106a00 <L_shift>
 8106aec:	4544      	cmp	r4, r8
 8106aee:	d936      	bls.n	8106b5e <__hexnan+0x112>
 8106af0:	f1a8 0204 	sub.w	r2, r8, #4
 8106af4:	4623      	mov	r3, r4
 8106af6:	f853 1b04 	ldr.w	r1, [r3], #4
 8106afa:	f842 1f04 	str.w	r1, [r2, #4]!
 8106afe:	429f      	cmp	r7, r3
 8106b00:	d2f9      	bcs.n	8106af6 <__hexnan+0xaa>
 8106b02:	1b3b      	subs	r3, r7, r4
 8106b04:	f023 0303 	bic.w	r3, r3, #3
 8106b08:	3304      	adds	r3, #4
 8106b0a:	3401      	adds	r4, #1
 8106b0c:	3e03      	subs	r6, #3
 8106b0e:	42b4      	cmp	r4, r6
 8106b10:	bf88      	it	hi
 8106b12:	2304      	movhi	r3, #4
 8106b14:	4443      	add	r3, r8
 8106b16:	2200      	movs	r2, #0
 8106b18:	f843 2b04 	str.w	r2, [r3], #4
 8106b1c:	429f      	cmp	r7, r3
 8106b1e:	d2fb      	bcs.n	8106b18 <__hexnan+0xcc>
 8106b20:	683b      	ldr	r3, [r7, #0]
 8106b22:	b91b      	cbnz	r3, 8106b2c <__hexnan+0xe0>
 8106b24:	4547      	cmp	r7, r8
 8106b26:	d128      	bne.n	8106b7a <__hexnan+0x12e>
 8106b28:	2301      	movs	r3, #1
 8106b2a:	603b      	str	r3, [r7, #0]
 8106b2c:	2005      	movs	r0, #5
 8106b2e:	b007      	add	sp, #28
 8106b30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106b34:	3501      	adds	r5, #1
 8106b36:	2d08      	cmp	r5, #8
 8106b38:	f10b 0b01 	add.w	fp, fp, #1
 8106b3c:	dd06      	ble.n	8106b4c <__hexnan+0x100>
 8106b3e:	4544      	cmp	r4, r8
 8106b40:	d9c1      	bls.n	8106ac6 <__hexnan+0x7a>
 8106b42:	2300      	movs	r3, #0
 8106b44:	f844 3c04 	str.w	r3, [r4, #-4]
 8106b48:	2501      	movs	r5, #1
 8106b4a:	3c04      	subs	r4, #4
 8106b4c:	6822      	ldr	r2, [r4, #0]
 8106b4e:	f000 000f 	and.w	r0, r0, #15
 8106b52:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8106b56:	6020      	str	r0, [r4, #0]
 8106b58:	e7b5      	b.n	8106ac6 <__hexnan+0x7a>
 8106b5a:	2508      	movs	r5, #8
 8106b5c:	e7b3      	b.n	8106ac6 <__hexnan+0x7a>
 8106b5e:	9b01      	ldr	r3, [sp, #4]
 8106b60:	2b00      	cmp	r3, #0
 8106b62:	d0dd      	beq.n	8106b20 <__hexnan+0xd4>
 8106b64:	f1c3 0320 	rsb	r3, r3, #32
 8106b68:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8106b6c:	40da      	lsrs	r2, r3
 8106b6e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8106b72:	4013      	ands	r3, r2
 8106b74:	f846 3c04 	str.w	r3, [r6, #-4]
 8106b78:	e7d2      	b.n	8106b20 <__hexnan+0xd4>
 8106b7a:	3f04      	subs	r7, #4
 8106b7c:	e7d0      	b.n	8106b20 <__hexnan+0xd4>
 8106b7e:	2004      	movs	r0, #4
 8106b80:	e7d5      	b.n	8106b2e <__hexnan+0xe2>

08106b82 <__ssputs_r>:
 8106b82:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106b86:	688e      	ldr	r6, [r1, #8]
 8106b88:	461f      	mov	r7, r3
 8106b8a:	42be      	cmp	r6, r7
 8106b8c:	680b      	ldr	r3, [r1, #0]
 8106b8e:	4682      	mov	sl, r0
 8106b90:	460c      	mov	r4, r1
 8106b92:	4690      	mov	r8, r2
 8106b94:	d82d      	bhi.n	8106bf2 <__ssputs_r+0x70>
 8106b96:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8106b9a:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8106b9e:	d026      	beq.n	8106bee <__ssputs_r+0x6c>
 8106ba0:	6965      	ldr	r5, [r4, #20]
 8106ba2:	6909      	ldr	r1, [r1, #16]
 8106ba4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8106ba8:	eba3 0901 	sub.w	r9, r3, r1
 8106bac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8106bb0:	1c7b      	adds	r3, r7, #1
 8106bb2:	444b      	add	r3, r9
 8106bb4:	106d      	asrs	r5, r5, #1
 8106bb6:	429d      	cmp	r5, r3
 8106bb8:	bf38      	it	cc
 8106bba:	461d      	movcc	r5, r3
 8106bbc:	0553      	lsls	r3, r2, #21
 8106bbe:	d527      	bpl.n	8106c10 <__ssputs_r+0x8e>
 8106bc0:	4629      	mov	r1, r5
 8106bc2:	f000 f95f 	bl	8106e84 <_malloc_r>
 8106bc6:	4606      	mov	r6, r0
 8106bc8:	b360      	cbz	r0, 8106c24 <__ssputs_r+0xa2>
 8106bca:	6921      	ldr	r1, [r4, #16]
 8106bcc:	464a      	mov	r2, r9
 8106bce:	f7fe fe32 	bl	8105836 <memcpy>
 8106bd2:	89a3      	ldrh	r3, [r4, #12]
 8106bd4:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8106bd8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8106bdc:	81a3      	strh	r3, [r4, #12]
 8106bde:	6126      	str	r6, [r4, #16]
 8106be0:	6165      	str	r5, [r4, #20]
 8106be2:	444e      	add	r6, r9
 8106be4:	eba5 0509 	sub.w	r5, r5, r9
 8106be8:	6026      	str	r6, [r4, #0]
 8106bea:	60a5      	str	r5, [r4, #8]
 8106bec:	463e      	mov	r6, r7
 8106bee:	42be      	cmp	r6, r7
 8106bf0:	d900      	bls.n	8106bf4 <__ssputs_r+0x72>
 8106bf2:	463e      	mov	r6, r7
 8106bf4:	6820      	ldr	r0, [r4, #0]
 8106bf6:	4632      	mov	r2, r6
 8106bf8:	4641      	mov	r1, r8
 8106bfa:	f000 ffbd 	bl	8107b78 <memmove>
 8106bfe:	68a3      	ldr	r3, [r4, #8]
 8106c00:	1b9b      	subs	r3, r3, r6
 8106c02:	60a3      	str	r3, [r4, #8]
 8106c04:	6823      	ldr	r3, [r4, #0]
 8106c06:	4433      	add	r3, r6
 8106c08:	6023      	str	r3, [r4, #0]
 8106c0a:	2000      	movs	r0, #0
 8106c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106c10:	462a      	mov	r2, r5
 8106c12:	f000 ff76 	bl	8107b02 <_realloc_r>
 8106c16:	4606      	mov	r6, r0
 8106c18:	2800      	cmp	r0, #0
 8106c1a:	d1e0      	bne.n	8106bde <__ssputs_r+0x5c>
 8106c1c:	6921      	ldr	r1, [r4, #16]
 8106c1e:	4650      	mov	r0, sl
 8106c20:	f001 f84c 	bl	8107cbc <_free_r>
 8106c24:	230c      	movs	r3, #12
 8106c26:	f8ca 3000 	str.w	r3, [sl]
 8106c2a:	89a3      	ldrh	r3, [r4, #12]
 8106c2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8106c30:	81a3      	strh	r3, [r4, #12]
 8106c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8106c36:	e7e9      	b.n	8106c0c <__ssputs_r+0x8a>

08106c38 <_svfiprintf_r>:
 8106c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106c3c:	4698      	mov	r8, r3
 8106c3e:	898b      	ldrh	r3, [r1, #12]
 8106c40:	061b      	lsls	r3, r3, #24
 8106c42:	b09d      	sub	sp, #116	@ 0x74
 8106c44:	4607      	mov	r7, r0
 8106c46:	460d      	mov	r5, r1
 8106c48:	4614      	mov	r4, r2
 8106c4a:	d510      	bpl.n	8106c6e <_svfiprintf_r+0x36>
 8106c4c:	690b      	ldr	r3, [r1, #16]
 8106c4e:	b973      	cbnz	r3, 8106c6e <_svfiprintf_r+0x36>
 8106c50:	2140      	movs	r1, #64	@ 0x40
 8106c52:	f000 f917 	bl	8106e84 <_malloc_r>
 8106c56:	6028      	str	r0, [r5, #0]
 8106c58:	6128      	str	r0, [r5, #16]
 8106c5a:	b930      	cbnz	r0, 8106c6a <_svfiprintf_r+0x32>
 8106c5c:	230c      	movs	r3, #12
 8106c5e:	603b      	str	r3, [r7, #0]
 8106c60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8106c64:	b01d      	add	sp, #116	@ 0x74
 8106c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106c6a:	2340      	movs	r3, #64	@ 0x40
 8106c6c:	616b      	str	r3, [r5, #20]
 8106c6e:	2300      	movs	r3, #0
 8106c70:	9309      	str	r3, [sp, #36]	@ 0x24
 8106c72:	2320      	movs	r3, #32
 8106c74:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8106c78:	f8cd 800c 	str.w	r8, [sp, #12]
 8106c7c:	2330      	movs	r3, #48	@ 0x30
 8106c7e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8106e1c <_svfiprintf_r+0x1e4>
 8106c82:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8106c86:	f04f 0901 	mov.w	r9, #1
 8106c8a:	4623      	mov	r3, r4
 8106c8c:	469a      	mov	sl, r3
 8106c8e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8106c92:	b10a      	cbz	r2, 8106c98 <_svfiprintf_r+0x60>
 8106c94:	2a25      	cmp	r2, #37	@ 0x25
 8106c96:	d1f9      	bne.n	8106c8c <_svfiprintf_r+0x54>
 8106c98:	ebba 0b04 	subs.w	fp, sl, r4
 8106c9c:	d00b      	beq.n	8106cb6 <_svfiprintf_r+0x7e>
 8106c9e:	465b      	mov	r3, fp
 8106ca0:	4622      	mov	r2, r4
 8106ca2:	4629      	mov	r1, r5
 8106ca4:	4638      	mov	r0, r7
 8106ca6:	f7ff ff6c 	bl	8106b82 <__ssputs_r>
 8106caa:	3001      	adds	r0, #1
 8106cac:	f000 80a7 	beq.w	8106dfe <_svfiprintf_r+0x1c6>
 8106cb0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8106cb2:	445a      	add	r2, fp
 8106cb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8106cb6:	f89a 3000 	ldrb.w	r3, [sl]
 8106cba:	2b00      	cmp	r3, #0
 8106cbc:	f000 809f 	beq.w	8106dfe <_svfiprintf_r+0x1c6>
 8106cc0:	2300      	movs	r3, #0
 8106cc2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8106cc6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8106cca:	f10a 0a01 	add.w	sl, sl, #1
 8106cce:	9304      	str	r3, [sp, #16]
 8106cd0:	9307      	str	r3, [sp, #28]
 8106cd2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8106cd6:	931a      	str	r3, [sp, #104]	@ 0x68
 8106cd8:	4654      	mov	r4, sl
 8106cda:	2205      	movs	r2, #5
 8106cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106ce0:	484e      	ldr	r0, [pc, #312]	@ (8106e1c <_svfiprintf_r+0x1e4>)
 8106ce2:	f7f9 fafd 	bl	81002e0 <memchr>
 8106ce6:	9a04      	ldr	r2, [sp, #16]
 8106ce8:	b9d8      	cbnz	r0, 8106d22 <_svfiprintf_r+0xea>
 8106cea:	06d0      	lsls	r0, r2, #27
 8106cec:	bf44      	itt	mi
 8106cee:	2320      	movmi	r3, #32
 8106cf0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8106cf4:	0711      	lsls	r1, r2, #28
 8106cf6:	bf44      	itt	mi
 8106cf8:	232b      	movmi	r3, #43	@ 0x2b
 8106cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8106cfe:	f89a 3000 	ldrb.w	r3, [sl]
 8106d02:	2b2a      	cmp	r3, #42	@ 0x2a
 8106d04:	d015      	beq.n	8106d32 <_svfiprintf_r+0xfa>
 8106d06:	9a07      	ldr	r2, [sp, #28]
 8106d08:	4654      	mov	r4, sl
 8106d0a:	2000      	movs	r0, #0
 8106d0c:	f04f 0c0a 	mov.w	ip, #10
 8106d10:	4621      	mov	r1, r4
 8106d12:	f811 3b01 	ldrb.w	r3, [r1], #1
 8106d16:	3b30      	subs	r3, #48	@ 0x30
 8106d18:	2b09      	cmp	r3, #9
 8106d1a:	d94b      	bls.n	8106db4 <_svfiprintf_r+0x17c>
 8106d1c:	b1b0      	cbz	r0, 8106d4c <_svfiprintf_r+0x114>
 8106d1e:	9207      	str	r2, [sp, #28]
 8106d20:	e014      	b.n	8106d4c <_svfiprintf_r+0x114>
 8106d22:	eba0 0308 	sub.w	r3, r0, r8
 8106d26:	fa09 f303 	lsl.w	r3, r9, r3
 8106d2a:	4313      	orrs	r3, r2
 8106d2c:	9304      	str	r3, [sp, #16]
 8106d2e:	46a2      	mov	sl, r4
 8106d30:	e7d2      	b.n	8106cd8 <_svfiprintf_r+0xa0>
 8106d32:	9b03      	ldr	r3, [sp, #12]
 8106d34:	1d19      	adds	r1, r3, #4
 8106d36:	681b      	ldr	r3, [r3, #0]
 8106d38:	9103      	str	r1, [sp, #12]
 8106d3a:	2b00      	cmp	r3, #0
 8106d3c:	bfbb      	ittet	lt
 8106d3e:	425b      	neglt	r3, r3
 8106d40:	f042 0202 	orrlt.w	r2, r2, #2
 8106d44:	9307      	strge	r3, [sp, #28]
 8106d46:	9307      	strlt	r3, [sp, #28]
 8106d48:	bfb8      	it	lt
 8106d4a:	9204      	strlt	r2, [sp, #16]
 8106d4c:	7823      	ldrb	r3, [r4, #0]
 8106d4e:	2b2e      	cmp	r3, #46	@ 0x2e
 8106d50:	d10a      	bne.n	8106d68 <_svfiprintf_r+0x130>
 8106d52:	7863      	ldrb	r3, [r4, #1]
 8106d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8106d56:	d132      	bne.n	8106dbe <_svfiprintf_r+0x186>
 8106d58:	9b03      	ldr	r3, [sp, #12]
 8106d5a:	1d1a      	adds	r2, r3, #4
 8106d5c:	681b      	ldr	r3, [r3, #0]
 8106d5e:	9203      	str	r2, [sp, #12]
 8106d60:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8106d64:	3402      	adds	r4, #2
 8106d66:	9305      	str	r3, [sp, #20]
 8106d68:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8106e2c <_svfiprintf_r+0x1f4>
 8106d6c:	7821      	ldrb	r1, [r4, #0]
 8106d6e:	2203      	movs	r2, #3
 8106d70:	4650      	mov	r0, sl
 8106d72:	f7f9 fab5 	bl	81002e0 <memchr>
 8106d76:	b138      	cbz	r0, 8106d88 <_svfiprintf_r+0x150>
 8106d78:	9b04      	ldr	r3, [sp, #16]
 8106d7a:	eba0 000a 	sub.w	r0, r0, sl
 8106d7e:	2240      	movs	r2, #64	@ 0x40
 8106d80:	4082      	lsls	r2, r0
 8106d82:	4313      	orrs	r3, r2
 8106d84:	3401      	adds	r4, #1
 8106d86:	9304      	str	r3, [sp, #16]
 8106d88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106d8c:	4824      	ldr	r0, [pc, #144]	@ (8106e20 <_svfiprintf_r+0x1e8>)
 8106d8e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8106d92:	2206      	movs	r2, #6
 8106d94:	f7f9 faa4 	bl	81002e0 <memchr>
 8106d98:	2800      	cmp	r0, #0
 8106d9a:	d036      	beq.n	8106e0a <_svfiprintf_r+0x1d2>
 8106d9c:	4b21      	ldr	r3, [pc, #132]	@ (8106e24 <_svfiprintf_r+0x1ec>)
 8106d9e:	bb1b      	cbnz	r3, 8106de8 <_svfiprintf_r+0x1b0>
 8106da0:	9b03      	ldr	r3, [sp, #12]
 8106da2:	3307      	adds	r3, #7
 8106da4:	f023 0307 	bic.w	r3, r3, #7
 8106da8:	3308      	adds	r3, #8
 8106daa:	9303      	str	r3, [sp, #12]
 8106dac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8106dae:	4433      	add	r3, r6
 8106db0:	9309      	str	r3, [sp, #36]	@ 0x24
 8106db2:	e76a      	b.n	8106c8a <_svfiprintf_r+0x52>
 8106db4:	fb0c 3202 	mla	r2, ip, r2, r3
 8106db8:	460c      	mov	r4, r1
 8106dba:	2001      	movs	r0, #1
 8106dbc:	e7a8      	b.n	8106d10 <_svfiprintf_r+0xd8>
 8106dbe:	2300      	movs	r3, #0
 8106dc0:	3401      	adds	r4, #1
 8106dc2:	9305      	str	r3, [sp, #20]
 8106dc4:	4619      	mov	r1, r3
 8106dc6:	f04f 0c0a 	mov.w	ip, #10
 8106dca:	4620      	mov	r0, r4
 8106dcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8106dd0:	3a30      	subs	r2, #48	@ 0x30
 8106dd2:	2a09      	cmp	r2, #9
 8106dd4:	d903      	bls.n	8106dde <_svfiprintf_r+0x1a6>
 8106dd6:	2b00      	cmp	r3, #0
 8106dd8:	d0c6      	beq.n	8106d68 <_svfiprintf_r+0x130>
 8106dda:	9105      	str	r1, [sp, #20]
 8106ddc:	e7c4      	b.n	8106d68 <_svfiprintf_r+0x130>
 8106dde:	fb0c 2101 	mla	r1, ip, r1, r2
 8106de2:	4604      	mov	r4, r0
 8106de4:	2301      	movs	r3, #1
 8106de6:	e7f0      	b.n	8106dca <_svfiprintf_r+0x192>
 8106de8:	ab03      	add	r3, sp, #12
 8106dea:	9300      	str	r3, [sp, #0]
 8106dec:	462a      	mov	r2, r5
 8106dee:	4b0e      	ldr	r3, [pc, #56]	@ (8106e28 <_svfiprintf_r+0x1f0>)
 8106df0:	a904      	add	r1, sp, #16
 8106df2:	4638      	mov	r0, r7
 8106df4:	f7fc ffa0 	bl	8103d38 <_printf_float>
 8106df8:	1c42      	adds	r2, r0, #1
 8106dfa:	4606      	mov	r6, r0
 8106dfc:	d1d6      	bne.n	8106dac <_svfiprintf_r+0x174>
 8106dfe:	89ab      	ldrh	r3, [r5, #12]
 8106e00:	065b      	lsls	r3, r3, #25
 8106e02:	f53f af2d 	bmi.w	8106c60 <_svfiprintf_r+0x28>
 8106e06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8106e08:	e72c      	b.n	8106c64 <_svfiprintf_r+0x2c>
 8106e0a:	ab03      	add	r3, sp, #12
 8106e0c:	9300      	str	r3, [sp, #0]
 8106e0e:	462a      	mov	r2, r5
 8106e10:	4b05      	ldr	r3, [pc, #20]	@ (8106e28 <_svfiprintf_r+0x1f0>)
 8106e12:	a904      	add	r1, sp, #16
 8106e14:	4638      	mov	r0, r7
 8106e16:	f7fd fa27 	bl	8104268 <_printf_i>
 8106e1a:	e7ed      	b.n	8106df8 <_svfiprintf_r+0x1c0>
 8106e1c:	0810857e 	.word	0x0810857e
 8106e20:	08108588 	.word	0x08108588
 8106e24:	08103d39 	.word	0x08103d39
 8106e28:	08106b83 	.word	0x08106b83
 8106e2c:	08108584 	.word	0x08108584

08106e30 <malloc>:
 8106e30:	4b02      	ldr	r3, [pc, #8]	@ (8106e3c <malloc+0xc>)
 8106e32:	4601      	mov	r1, r0
 8106e34:	6818      	ldr	r0, [r3, #0]
 8106e36:	f000 b825 	b.w	8106e84 <_malloc_r>
 8106e3a:	bf00      	nop
 8106e3c:	10000188 	.word	0x10000188

08106e40 <sbrk_aligned>:
 8106e40:	b570      	push	{r4, r5, r6, lr}
 8106e42:	4e0f      	ldr	r6, [pc, #60]	@ (8106e80 <sbrk_aligned+0x40>)
 8106e44:	460c      	mov	r4, r1
 8106e46:	6831      	ldr	r1, [r6, #0]
 8106e48:	4605      	mov	r5, r0
 8106e4a:	b911      	cbnz	r1, 8106e52 <sbrk_aligned+0x12>
 8106e4c:	f000 fee2 	bl	8107c14 <_sbrk_r>
 8106e50:	6030      	str	r0, [r6, #0]
 8106e52:	4621      	mov	r1, r4
 8106e54:	4628      	mov	r0, r5
 8106e56:	f000 fedd 	bl	8107c14 <_sbrk_r>
 8106e5a:	1c43      	adds	r3, r0, #1
 8106e5c:	d103      	bne.n	8106e66 <sbrk_aligned+0x26>
 8106e5e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8106e62:	4620      	mov	r0, r4
 8106e64:	bd70      	pop	{r4, r5, r6, pc}
 8106e66:	1cc4      	adds	r4, r0, #3
 8106e68:	f024 0403 	bic.w	r4, r4, #3
 8106e6c:	42a0      	cmp	r0, r4
 8106e6e:	d0f8      	beq.n	8106e62 <sbrk_aligned+0x22>
 8106e70:	1a21      	subs	r1, r4, r0
 8106e72:	4628      	mov	r0, r5
 8106e74:	f000 fece 	bl	8107c14 <_sbrk_r>
 8106e78:	3001      	adds	r0, #1
 8106e7a:	d1f2      	bne.n	8106e62 <sbrk_aligned+0x22>
 8106e7c:	e7ef      	b.n	8106e5e <sbrk_aligned+0x1e>
 8106e7e:	bf00      	nop
 8106e80:	1000047c 	.word	0x1000047c

08106e84 <_malloc_r>:
 8106e84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106e88:	1ccd      	adds	r5, r1, #3
 8106e8a:	f025 0503 	bic.w	r5, r5, #3
 8106e8e:	3508      	adds	r5, #8
 8106e90:	2d0c      	cmp	r5, #12
 8106e92:	bf38      	it	cc
 8106e94:	250c      	movcc	r5, #12
 8106e96:	2d00      	cmp	r5, #0
 8106e98:	4606      	mov	r6, r0
 8106e9a:	db01      	blt.n	8106ea0 <_malloc_r+0x1c>
 8106e9c:	42a9      	cmp	r1, r5
 8106e9e:	d904      	bls.n	8106eaa <_malloc_r+0x26>
 8106ea0:	230c      	movs	r3, #12
 8106ea2:	6033      	str	r3, [r6, #0]
 8106ea4:	2000      	movs	r0, #0
 8106ea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8106eaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8106f80 <_malloc_r+0xfc>
 8106eae:	f000 f927 	bl	8107100 <__malloc_lock>
 8106eb2:	f8d8 3000 	ldr.w	r3, [r8]
 8106eb6:	461c      	mov	r4, r3
 8106eb8:	bb44      	cbnz	r4, 8106f0c <_malloc_r+0x88>
 8106eba:	4629      	mov	r1, r5
 8106ebc:	4630      	mov	r0, r6
 8106ebe:	f7ff ffbf 	bl	8106e40 <sbrk_aligned>
 8106ec2:	1c43      	adds	r3, r0, #1
 8106ec4:	4604      	mov	r4, r0
 8106ec6:	d158      	bne.n	8106f7a <_malloc_r+0xf6>
 8106ec8:	f8d8 4000 	ldr.w	r4, [r8]
 8106ecc:	4627      	mov	r7, r4
 8106ece:	2f00      	cmp	r7, #0
 8106ed0:	d143      	bne.n	8106f5a <_malloc_r+0xd6>
 8106ed2:	2c00      	cmp	r4, #0
 8106ed4:	d04b      	beq.n	8106f6e <_malloc_r+0xea>
 8106ed6:	6823      	ldr	r3, [r4, #0]
 8106ed8:	4639      	mov	r1, r7
 8106eda:	4630      	mov	r0, r6
 8106edc:	eb04 0903 	add.w	r9, r4, r3
 8106ee0:	f000 fe98 	bl	8107c14 <_sbrk_r>
 8106ee4:	4581      	cmp	r9, r0
 8106ee6:	d142      	bne.n	8106f6e <_malloc_r+0xea>
 8106ee8:	6821      	ldr	r1, [r4, #0]
 8106eea:	1a6d      	subs	r5, r5, r1
 8106eec:	4629      	mov	r1, r5
 8106eee:	4630      	mov	r0, r6
 8106ef0:	f7ff ffa6 	bl	8106e40 <sbrk_aligned>
 8106ef4:	3001      	adds	r0, #1
 8106ef6:	d03a      	beq.n	8106f6e <_malloc_r+0xea>
 8106ef8:	6823      	ldr	r3, [r4, #0]
 8106efa:	442b      	add	r3, r5
 8106efc:	6023      	str	r3, [r4, #0]
 8106efe:	f8d8 3000 	ldr.w	r3, [r8]
 8106f02:	685a      	ldr	r2, [r3, #4]
 8106f04:	bb62      	cbnz	r2, 8106f60 <_malloc_r+0xdc>
 8106f06:	f8c8 7000 	str.w	r7, [r8]
 8106f0a:	e00f      	b.n	8106f2c <_malloc_r+0xa8>
 8106f0c:	6822      	ldr	r2, [r4, #0]
 8106f0e:	1b52      	subs	r2, r2, r5
 8106f10:	d420      	bmi.n	8106f54 <_malloc_r+0xd0>
 8106f12:	2a0b      	cmp	r2, #11
 8106f14:	d917      	bls.n	8106f46 <_malloc_r+0xc2>
 8106f16:	1961      	adds	r1, r4, r5
 8106f18:	42a3      	cmp	r3, r4
 8106f1a:	6025      	str	r5, [r4, #0]
 8106f1c:	bf18      	it	ne
 8106f1e:	6059      	strne	r1, [r3, #4]
 8106f20:	6863      	ldr	r3, [r4, #4]
 8106f22:	bf08      	it	eq
 8106f24:	f8c8 1000 	streq.w	r1, [r8]
 8106f28:	5162      	str	r2, [r4, r5]
 8106f2a:	604b      	str	r3, [r1, #4]
 8106f2c:	4630      	mov	r0, r6
 8106f2e:	f000 f8ed 	bl	810710c <__malloc_unlock>
 8106f32:	f104 000b 	add.w	r0, r4, #11
 8106f36:	1d23      	adds	r3, r4, #4
 8106f38:	f020 0007 	bic.w	r0, r0, #7
 8106f3c:	1ac2      	subs	r2, r0, r3
 8106f3e:	bf1c      	itt	ne
 8106f40:	1a1b      	subne	r3, r3, r0
 8106f42:	50a3      	strne	r3, [r4, r2]
 8106f44:	e7af      	b.n	8106ea6 <_malloc_r+0x22>
 8106f46:	6862      	ldr	r2, [r4, #4]
 8106f48:	42a3      	cmp	r3, r4
 8106f4a:	bf0c      	ite	eq
 8106f4c:	f8c8 2000 	streq.w	r2, [r8]
 8106f50:	605a      	strne	r2, [r3, #4]
 8106f52:	e7eb      	b.n	8106f2c <_malloc_r+0xa8>
 8106f54:	4623      	mov	r3, r4
 8106f56:	6864      	ldr	r4, [r4, #4]
 8106f58:	e7ae      	b.n	8106eb8 <_malloc_r+0x34>
 8106f5a:	463c      	mov	r4, r7
 8106f5c:	687f      	ldr	r7, [r7, #4]
 8106f5e:	e7b6      	b.n	8106ece <_malloc_r+0x4a>
 8106f60:	461a      	mov	r2, r3
 8106f62:	685b      	ldr	r3, [r3, #4]
 8106f64:	42a3      	cmp	r3, r4
 8106f66:	d1fb      	bne.n	8106f60 <_malloc_r+0xdc>
 8106f68:	2300      	movs	r3, #0
 8106f6a:	6053      	str	r3, [r2, #4]
 8106f6c:	e7de      	b.n	8106f2c <_malloc_r+0xa8>
 8106f6e:	230c      	movs	r3, #12
 8106f70:	6033      	str	r3, [r6, #0]
 8106f72:	4630      	mov	r0, r6
 8106f74:	f000 f8ca 	bl	810710c <__malloc_unlock>
 8106f78:	e794      	b.n	8106ea4 <_malloc_r+0x20>
 8106f7a:	6005      	str	r5, [r0, #0]
 8106f7c:	e7d6      	b.n	8106f2c <_malloc_r+0xa8>
 8106f7e:	bf00      	nop
 8106f80:	10000480 	.word	0x10000480

08106f84 <__ascii_mbtowc>:
 8106f84:	b082      	sub	sp, #8
 8106f86:	b901      	cbnz	r1, 8106f8a <__ascii_mbtowc+0x6>
 8106f88:	a901      	add	r1, sp, #4
 8106f8a:	b142      	cbz	r2, 8106f9e <__ascii_mbtowc+0x1a>
 8106f8c:	b14b      	cbz	r3, 8106fa2 <__ascii_mbtowc+0x1e>
 8106f8e:	7813      	ldrb	r3, [r2, #0]
 8106f90:	600b      	str	r3, [r1, #0]
 8106f92:	7812      	ldrb	r2, [r2, #0]
 8106f94:	1e10      	subs	r0, r2, #0
 8106f96:	bf18      	it	ne
 8106f98:	2001      	movne	r0, #1
 8106f9a:	b002      	add	sp, #8
 8106f9c:	4770      	bx	lr
 8106f9e:	4610      	mov	r0, r2
 8106fa0:	e7fb      	b.n	8106f9a <__ascii_mbtowc+0x16>
 8106fa2:	f06f 0001 	mvn.w	r0, #1
 8106fa6:	e7f8      	b.n	8106f9a <__ascii_mbtowc+0x16>

08106fa8 <__sflush_r>:
 8106fa8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8106fac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106fb0:	0716      	lsls	r6, r2, #28
 8106fb2:	4605      	mov	r5, r0
 8106fb4:	460c      	mov	r4, r1
 8106fb6:	d454      	bmi.n	8107062 <__sflush_r+0xba>
 8106fb8:	684b      	ldr	r3, [r1, #4]
 8106fba:	2b00      	cmp	r3, #0
 8106fbc:	dc02      	bgt.n	8106fc4 <__sflush_r+0x1c>
 8106fbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8106fc0:	2b00      	cmp	r3, #0
 8106fc2:	dd48      	ble.n	8107056 <__sflush_r+0xae>
 8106fc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8106fc6:	2e00      	cmp	r6, #0
 8106fc8:	d045      	beq.n	8107056 <__sflush_r+0xae>
 8106fca:	2300      	movs	r3, #0
 8106fcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8106fd0:	682f      	ldr	r7, [r5, #0]
 8106fd2:	6a21      	ldr	r1, [r4, #32]
 8106fd4:	602b      	str	r3, [r5, #0]
 8106fd6:	d030      	beq.n	810703a <__sflush_r+0x92>
 8106fd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8106fda:	89a3      	ldrh	r3, [r4, #12]
 8106fdc:	0759      	lsls	r1, r3, #29
 8106fde:	d505      	bpl.n	8106fec <__sflush_r+0x44>
 8106fe0:	6863      	ldr	r3, [r4, #4]
 8106fe2:	1ad2      	subs	r2, r2, r3
 8106fe4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8106fe6:	b10b      	cbz	r3, 8106fec <__sflush_r+0x44>
 8106fe8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8106fea:	1ad2      	subs	r2, r2, r3
 8106fec:	2300      	movs	r3, #0
 8106fee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8106ff0:	6a21      	ldr	r1, [r4, #32]
 8106ff2:	4628      	mov	r0, r5
 8106ff4:	47b0      	blx	r6
 8106ff6:	1c43      	adds	r3, r0, #1
 8106ff8:	89a3      	ldrh	r3, [r4, #12]
 8106ffa:	d106      	bne.n	810700a <__sflush_r+0x62>
 8106ffc:	6829      	ldr	r1, [r5, #0]
 8106ffe:	291d      	cmp	r1, #29
 8107000:	d82b      	bhi.n	810705a <__sflush_r+0xb2>
 8107002:	4a2a      	ldr	r2, [pc, #168]	@ (81070ac <__sflush_r+0x104>)
 8107004:	410a      	asrs	r2, r1
 8107006:	07d6      	lsls	r6, r2, #31
 8107008:	d427      	bmi.n	810705a <__sflush_r+0xb2>
 810700a:	2200      	movs	r2, #0
 810700c:	6062      	str	r2, [r4, #4]
 810700e:	04d9      	lsls	r1, r3, #19
 8107010:	6922      	ldr	r2, [r4, #16]
 8107012:	6022      	str	r2, [r4, #0]
 8107014:	d504      	bpl.n	8107020 <__sflush_r+0x78>
 8107016:	1c42      	adds	r2, r0, #1
 8107018:	d101      	bne.n	810701e <__sflush_r+0x76>
 810701a:	682b      	ldr	r3, [r5, #0]
 810701c:	b903      	cbnz	r3, 8107020 <__sflush_r+0x78>
 810701e:	6560      	str	r0, [r4, #84]	@ 0x54
 8107020:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8107022:	602f      	str	r7, [r5, #0]
 8107024:	b1b9      	cbz	r1, 8107056 <__sflush_r+0xae>
 8107026:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 810702a:	4299      	cmp	r1, r3
 810702c:	d002      	beq.n	8107034 <__sflush_r+0x8c>
 810702e:	4628      	mov	r0, r5
 8107030:	f000 fe44 	bl	8107cbc <_free_r>
 8107034:	2300      	movs	r3, #0
 8107036:	6363      	str	r3, [r4, #52]	@ 0x34
 8107038:	e00d      	b.n	8107056 <__sflush_r+0xae>
 810703a:	2301      	movs	r3, #1
 810703c:	4628      	mov	r0, r5
 810703e:	47b0      	blx	r6
 8107040:	4602      	mov	r2, r0
 8107042:	1c50      	adds	r0, r2, #1
 8107044:	d1c9      	bne.n	8106fda <__sflush_r+0x32>
 8107046:	682b      	ldr	r3, [r5, #0]
 8107048:	2b00      	cmp	r3, #0
 810704a:	d0c6      	beq.n	8106fda <__sflush_r+0x32>
 810704c:	2b1d      	cmp	r3, #29
 810704e:	d001      	beq.n	8107054 <__sflush_r+0xac>
 8107050:	2b16      	cmp	r3, #22
 8107052:	d11e      	bne.n	8107092 <__sflush_r+0xea>
 8107054:	602f      	str	r7, [r5, #0]
 8107056:	2000      	movs	r0, #0
 8107058:	e022      	b.n	81070a0 <__sflush_r+0xf8>
 810705a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810705e:	b21b      	sxth	r3, r3
 8107060:	e01b      	b.n	810709a <__sflush_r+0xf2>
 8107062:	690f      	ldr	r7, [r1, #16]
 8107064:	2f00      	cmp	r7, #0
 8107066:	d0f6      	beq.n	8107056 <__sflush_r+0xae>
 8107068:	0793      	lsls	r3, r2, #30
 810706a:	680e      	ldr	r6, [r1, #0]
 810706c:	bf08      	it	eq
 810706e:	694b      	ldreq	r3, [r1, #20]
 8107070:	600f      	str	r7, [r1, #0]
 8107072:	bf18      	it	ne
 8107074:	2300      	movne	r3, #0
 8107076:	eba6 0807 	sub.w	r8, r6, r7
 810707a:	608b      	str	r3, [r1, #8]
 810707c:	f1b8 0f00 	cmp.w	r8, #0
 8107080:	dde9      	ble.n	8107056 <__sflush_r+0xae>
 8107082:	6a21      	ldr	r1, [r4, #32]
 8107084:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8107086:	4643      	mov	r3, r8
 8107088:	463a      	mov	r2, r7
 810708a:	4628      	mov	r0, r5
 810708c:	47b0      	blx	r6
 810708e:	2800      	cmp	r0, #0
 8107090:	dc08      	bgt.n	81070a4 <__sflush_r+0xfc>
 8107092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8107096:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 810709a:	81a3      	strh	r3, [r4, #12]
 810709c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81070a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 81070a4:	4407      	add	r7, r0
 81070a6:	eba8 0800 	sub.w	r8, r8, r0
 81070aa:	e7e7      	b.n	810707c <__sflush_r+0xd4>
 81070ac:	dfbffffe 	.word	0xdfbffffe

081070b0 <_fflush_r>:
 81070b0:	b538      	push	{r3, r4, r5, lr}
 81070b2:	690b      	ldr	r3, [r1, #16]
 81070b4:	4605      	mov	r5, r0
 81070b6:	460c      	mov	r4, r1
 81070b8:	b913      	cbnz	r3, 81070c0 <_fflush_r+0x10>
 81070ba:	2500      	movs	r5, #0
 81070bc:	4628      	mov	r0, r5
 81070be:	bd38      	pop	{r3, r4, r5, pc}
 81070c0:	b118      	cbz	r0, 81070ca <_fflush_r+0x1a>
 81070c2:	6a03      	ldr	r3, [r0, #32]
 81070c4:	b90b      	cbnz	r3, 81070ca <_fflush_r+0x1a>
 81070c6:	f7fd fcaf 	bl	8104a28 <__sinit>
 81070ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81070ce:	2b00      	cmp	r3, #0
 81070d0:	d0f3      	beq.n	81070ba <_fflush_r+0xa>
 81070d2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 81070d4:	07d0      	lsls	r0, r2, #31
 81070d6:	d404      	bmi.n	81070e2 <_fflush_r+0x32>
 81070d8:	0599      	lsls	r1, r3, #22
 81070da:	d402      	bmi.n	81070e2 <_fflush_r+0x32>
 81070dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81070de:	f7fe fba8 	bl	8105832 <__retarget_lock_acquire_recursive>
 81070e2:	4628      	mov	r0, r5
 81070e4:	4621      	mov	r1, r4
 81070e6:	f7ff ff5f 	bl	8106fa8 <__sflush_r>
 81070ea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 81070ec:	07da      	lsls	r2, r3, #31
 81070ee:	4605      	mov	r5, r0
 81070f0:	d4e4      	bmi.n	81070bc <_fflush_r+0xc>
 81070f2:	89a3      	ldrh	r3, [r4, #12]
 81070f4:	059b      	lsls	r3, r3, #22
 81070f6:	d4e1      	bmi.n	81070bc <_fflush_r+0xc>
 81070f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 81070fa:	f7fe fb9b 	bl	8105834 <__retarget_lock_release_recursive>
 81070fe:	e7dd      	b.n	81070bc <_fflush_r+0xc>

08107100 <__malloc_lock>:
 8107100:	4801      	ldr	r0, [pc, #4]	@ (8107108 <__malloc_lock+0x8>)
 8107102:	f7fe bb96 	b.w	8105832 <__retarget_lock_acquire_recursive>
 8107106:	bf00      	nop
 8107108:	10000478 	.word	0x10000478

0810710c <__malloc_unlock>:
 810710c:	4801      	ldr	r0, [pc, #4]	@ (8107114 <__malloc_unlock+0x8>)
 810710e:	f7fe bb91 	b.w	8105834 <__retarget_lock_release_recursive>
 8107112:	bf00      	nop
 8107114:	10000478 	.word	0x10000478

08107118 <_Balloc>:
 8107118:	b570      	push	{r4, r5, r6, lr}
 810711a:	69c6      	ldr	r6, [r0, #28]
 810711c:	4604      	mov	r4, r0
 810711e:	460d      	mov	r5, r1
 8107120:	b976      	cbnz	r6, 8107140 <_Balloc+0x28>
 8107122:	2010      	movs	r0, #16
 8107124:	f7ff fe84 	bl	8106e30 <malloc>
 8107128:	4602      	mov	r2, r0
 810712a:	61e0      	str	r0, [r4, #28]
 810712c:	b920      	cbnz	r0, 8107138 <_Balloc+0x20>
 810712e:	4b18      	ldr	r3, [pc, #96]	@ (8107190 <_Balloc+0x78>)
 8107130:	4818      	ldr	r0, [pc, #96]	@ (8107194 <_Balloc+0x7c>)
 8107132:	216b      	movs	r1, #107	@ 0x6b
 8107134:	f000 fd90 	bl	8107c58 <__assert_func>
 8107138:	e9c0 6601 	strd	r6, r6, [r0, #4]
 810713c:	6006      	str	r6, [r0, #0]
 810713e:	60c6      	str	r6, [r0, #12]
 8107140:	69e6      	ldr	r6, [r4, #28]
 8107142:	68f3      	ldr	r3, [r6, #12]
 8107144:	b183      	cbz	r3, 8107168 <_Balloc+0x50>
 8107146:	69e3      	ldr	r3, [r4, #28]
 8107148:	68db      	ldr	r3, [r3, #12]
 810714a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 810714e:	b9b8      	cbnz	r0, 8107180 <_Balloc+0x68>
 8107150:	2101      	movs	r1, #1
 8107152:	fa01 f605 	lsl.w	r6, r1, r5
 8107156:	1d72      	adds	r2, r6, #5
 8107158:	0092      	lsls	r2, r2, #2
 810715a:	4620      	mov	r0, r4
 810715c:	f000 fd9a 	bl	8107c94 <_calloc_r>
 8107160:	b160      	cbz	r0, 810717c <_Balloc+0x64>
 8107162:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8107166:	e00e      	b.n	8107186 <_Balloc+0x6e>
 8107168:	2221      	movs	r2, #33	@ 0x21
 810716a:	2104      	movs	r1, #4
 810716c:	4620      	mov	r0, r4
 810716e:	f000 fd91 	bl	8107c94 <_calloc_r>
 8107172:	69e3      	ldr	r3, [r4, #28]
 8107174:	60f0      	str	r0, [r6, #12]
 8107176:	68db      	ldr	r3, [r3, #12]
 8107178:	2b00      	cmp	r3, #0
 810717a:	d1e4      	bne.n	8107146 <_Balloc+0x2e>
 810717c:	2000      	movs	r0, #0
 810717e:	bd70      	pop	{r4, r5, r6, pc}
 8107180:	6802      	ldr	r2, [r0, #0]
 8107182:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8107186:	2300      	movs	r3, #0
 8107188:	e9c0 3303 	strd	r3, r3, [r0, #12]
 810718c:	e7f7      	b.n	810717e <_Balloc+0x66>
 810718e:	bf00      	nop
 8107190:	0810849e 	.word	0x0810849e
 8107194:	0810858f 	.word	0x0810858f

08107198 <_Bfree>:
 8107198:	b570      	push	{r4, r5, r6, lr}
 810719a:	69c6      	ldr	r6, [r0, #28]
 810719c:	4605      	mov	r5, r0
 810719e:	460c      	mov	r4, r1
 81071a0:	b976      	cbnz	r6, 81071c0 <_Bfree+0x28>
 81071a2:	2010      	movs	r0, #16
 81071a4:	f7ff fe44 	bl	8106e30 <malloc>
 81071a8:	4602      	mov	r2, r0
 81071aa:	61e8      	str	r0, [r5, #28]
 81071ac:	b920      	cbnz	r0, 81071b8 <_Bfree+0x20>
 81071ae:	4b09      	ldr	r3, [pc, #36]	@ (81071d4 <_Bfree+0x3c>)
 81071b0:	4809      	ldr	r0, [pc, #36]	@ (81071d8 <_Bfree+0x40>)
 81071b2:	218f      	movs	r1, #143	@ 0x8f
 81071b4:	f000 fd50 	bl	8107c58 <__assert_func>
 81071b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 81071bc:	6006      	str	r6, [r0, #0]
 81071be:	60c6      	str	r6, [r0, #12]
 81071c0:	b13c      	cbz	r4, 81071d2 <_Bfree+0x3a>
 81071c2:	69eb      	ldr	r3, [r5, #28]
 81071c4:	6862      	ldr	r2, [r4, #4]
 81071c6:	68db      	ldr	r3, [r3, #12]
 81071c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 81071cc:	6021      	str	r1, [r4, #0]
 81071ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 81071d2:	bd70      	pop	{r4, r5, r6, pc}
 81071d4:	0810849e 	.word	0x0810849e
 81071d8:	0810858f 	.word	0x0810858f

081071dc <__multadd>:
 81071dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 81071e0:	690d      	ldr	r5, [r1, #16]
 81071e2:	4607      	mov	r7, r0
 81071e4:	460c      	mov	r4, r1
 81071e6:	461e      	mov	r6, r3
 81071e8:	f101 0c14 	add.w	ip, r1, #20
 81071ec:	2000      	movs	r0, #0
 81071ee:	f8dc 3000 	ldr.w	r3, [ip]
 81071f2:	b299      	uxth	r1, r3
 81071f4:	fb02 6101 	mla	r1, r2, r1, r6
 81071f8:	0c1e      	lsrs	r6, r3, #16
 81071fa:	0c0b      	lsrs	r3, r1, #16
 81071fc:	fb02 3306 	mla	r3, r2, r6, r3
 8107200:	b289      	uxth	r1, r1
 8107202:	3001      	adds	r0, #1
 8107204:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8107208:	4285      	cmp	r5, r0
 810720a:	f84c 1b04 	str.w	r1, [ip], #4
 810720e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8107212:	dcec      	bgt.n	81071ee <__multadd+0x12>
 8107214:	b30e      	cbz	r6, 810725a <__multadd+0x7e>
 8107216:	68a3      	ldr	r3, [r4, #8]
 8107218:	42ab      	cmp	r3, r5
 810721a:	dc19      	bgt.n	8107250 <__multadd+0x74>
 810721c:	6861      	ldr	r1, [r4, #4]
 810721e:	4638      	mov	r0, r7
 8107220:	3101      	adds	r1, #1
 8107222:	f7ff ff79 	bl	8107118 <_Balloc>
 8107226:	4680      	mov	r8, r0
 8107228:	b928      	cbnz	r0, 8107236 <__multadd+0x5a>
 810722a:	4602      	mov	r2, r0
 810722c:	4b0c      	ldr	r3, [pc, #48]	@ (8107260 <__multadd+0x84>)
 810722e:	480d      	ldr	r0, [pc, #52]	@ (8107264 <__multadd+0x88>)
 8107230:	21ba      	movs	r1, #186	@ 0xba
 8107232:	f000 fd11 	bl	8107c58 <__assert_func>
 8107236:	6922      	ldr	r2, [r4, #16]
 8107238:	3202      	adds	r2, #2
 810723a:	f104 010c 	add.w	r1, r4, #12
 810723e:	0092      	lsls	r2, r2, #2
 8107240:	300c      	adds	r0, #12
 8107242:	f7fe faf8 	bl	8105836 <memcpy>
 8107246:	4621      	mov	r1, r4
 8107248:	4638      	mov	r0, r7
 810724a:	f7ff ffa5 	bl	8107198 <_Bfree>
 810724e:	4644      	mov	r4, r8
 8107250:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8107254:	3501      	adds	r5, #1
 8107256:	615e      	str	r6, [r3, #20]
 8107258:	6125      	str	r5, [r4, #16]
 810725a:	4620      	mov	r0, r4
 810725c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8107260:	0810850d 	.word	0x0810850d
 8107264:	0810858f 	.word	0x0810858f

08107268 <__s2b>:
 8107268:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 810726c:	460c      	mov	r4, r1
 810726e:	4615      	mov	r5, r2
 8107270:	461f      	mov	r7, r3
 8107272:	2209      	movs	r2, #9
 8107274:	3308      	adds	r3, #8
 8107276:	4606      	mov	r6, r0
 8107278:	fb93 f3f2 	sdiv	r3, r3, r2
 810727c:	2100      	movs	r1, #0
 810727e:	2201      	movs	r2, #1
 8107280:	429a      	cmp	r2, r3
 8107282:	db09      	blt.n	8107298 <__s2b+0x30>
 8107284:	4630      	mov	r0, r6
 8107286:	f7ff ff47 	bl	8107118 <_Balloc>
 810728a:	b940      	cbnz	r0, 810729e <__s2b+0x36>
 810728c:	4602      	mov	r2, r0
 810728e:	4b19      	ldr	r3, [pc, #100]	@ (81072f4 <__s2b+0x8c>)
 8107290:	4819      	ldr	r0, [pc, #100]	@ (81072f8 <__s2b+0x90>)
 8107292:	21d3      	movs	r1, #211	@ 0xd3
 8107294:	f000 fce0 	bl	8107c58 <__assert_func>
 8107298:	0052      	lsls	r2, r2, #1
 810729a:	3101      	adds	r1, #1
 810729c:	e7f0      	b.n	8107280 <__s2b+0x18>
 810729e:	9b08      	ldr	r3, [sp, #32]
 81072a0:	6143      	str	r3, [r0, #20]
 81072a2:	2d09      	cmp	r5, #9
 81072a4:	f04f 0301 	mov.w	r3, #1
 81072a8:	6103      	str	r3, [r0, #16]
 81072aa:	dd16      	ble.n	81072da <__s2b+0x72>
 81072ac:	f104 0909 	add.w	r9, r4, #9
 81072b0:	46c8      	mov	r8, r9
 81072b2:	442c      	add	r4, r5
 81072b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 81072b8:	4601      	mov	r1, r0
 81072ba:	3b30      	subs	r3, #48	@ 0x30
 81072bc:	220a      	movs	r2, #10
 81072be:	4630      	mov	r0, r6
 81072c0:	f7ff ff8c 	bl	81071dc <__multadd>
 81072c4:	45a0      	cmp	r8, r4
 81072c6:	d1f5      	bne.n	81072b4 <__s2b+0x4c>
 81072c8:	f1a5 0408 	sub.w	r4, r5, #8
 81072cc:	444c      	add	r4, r9
 81072ce:	1b2d      	subs	r5, r5, r4
 81072d0:	1963      	adds	r3, r4, r5
 81072d2:	42bb      	cmp	r3, r7
 81072d4:	db04      	blt.n	81072e0 <__s2b+0x78>
 81072d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81072da:	340a      	adds	r4, #10
 81072dc:	2509      	movs	r5, #9
 81072de:	e7f6      	b.n	81072ce <__s2b+0x66>
 81072e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 81072e4:	4601      	mov	r1, r0
 81072e6:	3b30      	subs	r3, #48	@ 0x30
 81072e8:	220a      	movs	r2, #10
 81072ea:	4630      	mov	r0, r6
 81072ec:	f7ff ff76 	bl	81071dc <__multadd>
 81072f0:	e7ee      	b.n	81072d0 <__s2b+0x68>
 81072f2:	bf00      	nop
 81072f4:	0810850d 	.word	0x0810850d
 81072f8:	0810858f 	.word	0x0810858f

081072fc <__hi0bits>:
 81072fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8107300:	4603      	mov	r3, r0
 8107302:	bf36      	itet	cc
 8107304:	0403      	lslcc	r3, r0, #16
 8107306:	2000      	movcs	r0, #0
 8107308:	2010      	movcc	r0, #16
 810730a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810730e:	bf3c      	itt	cc
 8107310:	021b      	lslcc	r3, r3, #8
 8107312:	3008      	addcc	r0, #8
 8107314:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8107318:	bf3c      	itt	cc
 810731a:	011b      	lslcc	r3, r3, #4
 810731c:	3004      	addcc	r0, #4
 810731e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8107322:	bf3c      	itt	cc
 8107324:	009b      	lslcc	r3, r3, #2
 8107326:	3002      	addcc	r0, #2
 8107328:	2b00      	cmp	r3, #0
 810732a:	db05      	blt.n	8107338 <__hi0bits+0x3c>
 810732c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8107330:	f100 0001 	add.w	r0, r0, #1
 8107334:	bf08      	it	eq
 8107336:	2020      	moveq	r0, #32
 8107338:	4770      	bx	lr

0810733a <__lo0bits>:
 810733a:	6803      	ldr	r3, [r0, #0]
 810733c:	4602      	mov	r2, r0
 810733e:	f013 0007 	ands.w	r0, r3, #7
 8107342:	d00b      	beq.n	810735c <__lo0bits+0x22>
 8107344:	07d9      	lsls	r1, r3, #31
 8107346:	d421      	bmi.n	810738c <__lo0bits+0x52>
 8107348:	0798      	lsls	r0, r3, #30
 810734a:	bf49      	itett	mi
 810734c:	085b      	lsrmi	r3, r3, #1
 810734e:	089b      	lsrpl	r3, r3, #2
 8107350:	2001      	movmi	r0, #1
 8107352:	6013      	strmi	r3, [r2, #0]
 8107354:	bf5c      	itt	pl
 8107356:	6013      	strpl	r3, [r2, #0]
 8107358:	2002      	movpl	r0, #2
 810735a:	4770      	bx	lr
 810735c:	b299      	uxth	r1, r3
 810735e:	b909      	cbnz	r1, 8107364 <__lo0bits+0x2a>
 8107360:	0c1b      	lsrs	r3, r3, #16
 8107362:	2010      	movs	r0, #16
 8107364:	b2d9      	uxtb	r1, r3
 8107366:	b909      	cbnz	r1, 810736c <__lo0bits+0x32>
 8107368:	3008      	adds	r0, #8
 810736a:	0a1b      	lsrs	r3, r3, #8
 810736c:	0719      	lsls	r1, r3, #28
 810736e:	bf04      	itt	eq
 8107370:	091b      	lsreq	r3, r3, #4
 8107372:	3004      	addeq	r0, #4
 8107374:	0799      	lsls	r1, r3, #30
 8107376:	bf04      	itt	eq
 8107378:	089b      	lsreq	r3, r3, #2
 810737a:	3002      	addeq	r0, #2
 810737c:	07d9      	lsls	r1, r3, #31
 810737e:	d403      	bmi.n	8107388 <__lo0bits+0x4e>
 8107380:	085b      	lsrs	r3, r3, #1
 8107382:	f100 0001 	add.w	r0, r0, #1
 8107386:	d003      	beq.n	8107390 <__lo0bits+0x56>
 8107388:	6013      	str	r3, [r2, #0]
 810738a:	4770      	bx	lr
 810738c:	2000      	movs	r0, #0
 810738e:	4770      	bx	lr
 8107390:	2020      	movs	r0, #32
 8107392:	4770      	bx	lr

08107394 <__i2b>:
 8107394:	b510      	push	{r4, lr}
 8107396:	460c      	mov	r4, r1
 8107398:	2101      	movs	r1, #1
 810739a:	f7ff febd 	bl	8107118 <_Balloc>
 810739e:	4602      	mov	r2, r0
 81073a0:	b928      	cbnz	r0, 81073ae <__i2b+0x1a>
 81073a2:	4b05      	ldr	r3, [pc, #20]	@ (81073b8 <__i2b+0x24>)
 81073a4:	4805      	ldr	r0, [pc, #20]	@ (81073bc <__i2b+0x28>)
 81073a6:	f240 1145 	movw	r1, #325	@ 0x145
 81073aa:	f000 fc55 	bl	8107c58 <__assert_func>
 81073ae:	2301      	movs	r3, #1
 81073b0:	6144      	str	r4, [r0, #20]
 81073b2:	6103      	str	r3, [r0, #16]
 81073b4:	bd10      	pop	{r4, pc}
 81073b6:	bf00      	nop
 81073b8:	0810850d 	.word	0x0810850d
 81073bc:	0810858f 	.word	0x0810858f

081073c0 <__multiply>:
 81073c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81073c4:	4614      	mov	r4, r2
 81073c6:	690a      	ldr	r2, [r1, #16]
 81073c8:	6923      	ldr	r3, [r4, #16]
 81073ca:	429a      	cmp	r2, r3
 81073cc:	bfa8      	it	ge
 81073ce:	4623      	movge	r3, r4
 81073d0:	460f      	mov	r7, r1
 81073d2:	bfa4      	itt	ge
 81073d4:	460c      	movge	r4, r1
 81073d6:	461f      	movge	r7, r3
 81073d8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 81073dc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 81073e0:	68a3      	ldr	r3, [r4, #8]
 81073e2:	6861      	ldr	r1, [r4, #4]
 81073e4:	eb0a 0609 	add.w	r6, sl, r9
 81073e8:	42b3      	cmp	r3, r6
 81073ea:	b085      	sub	sp, #20
 81073ec:	bfb8      	it	lt
 81073ee:	3101      	addlt	r1, #1
 81073f0:	f7ff fe92 	bl	8107118 <_Balloc>
 81073f4:	b930      	cbnz	r0, 8107404 <__multiply+0x44>
 81073f6:	4602      	mov	r2, r0
 81073f8:	4b44      	ldr	r3, [pc, #272]	@ (810750c <__multiply+0x14c>)
 81073fa:	4845      	ldr	r0, [pc, #276]	@ (8107510 <__multiply+0x150>)
 81073fc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8107400:	f000 fc2a 	bl	8107c58 <__assert_func>
 8107404:	f100 0514 	add.w	r5, r0, #20
 8107408:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 810740c:	462b      	mov	r3, r5
 810740e:	2200      	movs	r2, #0
 8107410:	4543      	cmp	r3, r8
 8107412:	d321      	bcc.n	8107458 <__multiply+0x98>
 8107414:	f107 0114 	add.w	r1, r7, #20
 8107418:	f104 0214 	add.w	r2, r4, #20
 810741c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8107420:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8107424:	9302      	str	r3, [sp, #8]
 8107426:	1b13      	subs	r3, r2, r4
 8107428:	3b15      	subs	r3, #21
 810742a:	f023 0303 	bic.w	r3, r3, #3
 810742e:	3304      	adds	r3, #4
 8107430:	f104 0715 	add.w	r7, r4, #21
 8107434:	42ba      	cmp	r2, r7
 8107436:	bf38      	it	cc
 8107438:	2304      	movcc	r3, #4
 810743a:	9301      	str	r3, [sp, #4]
 810743c:	9b02      	ldr	r3, [sp, #8]
 810743e:	9103      	str	r1, [sp, #12]
 8107440:	428b      	cmp	r3, r1
 8107442:	d80c      	bhi.n	810745e <__multiply+0x9e>
 8107444:	2e00      	cmp	r6, #0
 8107446:	dd03      	ble.n	8107450 <__multiply+0x90>
 8107448:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 810744c:	2b00      	cmp	r3, #0
 810744e:	d05b      	beq.n	8107508 <__multiply+0x148>
 8107450:	6106      	str	r6, [r0, #16]
 8107452:	b005      	add	sp, #20
 8107454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107458:	f843 2b04 	str.w	r2, [r3], #4
 810745c:	e7d8      	b.n	8107410 <__multiply+0x50>
 810745e:	f8b1 a000 	ldrh.w	sl, [r1]
 8107462:	f1ba 0f00 	cmp.w	sl, #0
 8107466:	d024      	beq.n	81074b2 <__multiply+0xf2>
 8107468:	f104 0e14 	add.w	lr, r4, #20
 810746c:	46a9      	mov	r9, r5
 810746e:	f04f 0c00 	mov.w	ip, #0
 8107472:	f85e 7b04 	ldr.w	r7, [lr], #4
 8107476:	f8d9 3000 	ldr.w	r3, [r9]
 810747a:	fa1f fb87 	uxth.w	fp, r7
 810747e:	b29b      	uxth	r3, r3
 8107480:	fb0a 330b 	mla	r3, sl, fp, r3
 8107484:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8107488:	f8d9 7000 	ldr.w	r7, [r9]
 810748c:	4463      	add	r3, ip
 810748e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8107492:	fb0a c70b 	mla	r7, sl, fp, ip
 8107496:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 810749a:	b29b      	uxth	r3, r3
 810749c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 81074a0:	4572      	cmp	r2, lr
 81074a2:	f849 3b04 	str.w	r3, [r9], #4
 81074a6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 81074aa:	d8e2      	bhi.n	8107472 <__multiply+0xb2>
 81074ac:	9b01      	ldr	r3, [sp, #4]
 81074ae:	f845 c003 	str.w	ip, [r5, r3]
 81074b2:	9b03      	ldr	r3, [sp, #12]
 81074b4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 81074b8:	3104      	adds	r1, #4
 81074ba:	f1b9 0f00 	cmp.w	r9, #0
 81074be:	d021      	beq.n	8107504 <__multiply+0x144>
 81074c0:	682b      	ldr	r3, [r5, #0]
 81074c2:	f104 0c14 	add.w	ip, r4, #20
 81074c6:	46ae      	mov	lr, r5
 81074c8:	f04f 0a00 	mov.w	sl, #0
 81074cc:	f8bc b000 	ldrh.w	fp, [ip]
 81074d0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 81074d4:	fb09 770b 	mla	r7, r9, fp, r7
 81074d8:	4457      	add	r7, sl
 81074da:	b29b      	uxth	r3, r3
 81074dc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 81074e0:	f84e 3b04 	str.w	r3, [lr], #4
 81074e4:	f85c 3b04 	ldr.w	r3, [ip], #4
 81074e8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81074ec:	f8be 3000 	ldrh.w	r3, [lr]
 81074f0:	fb09 330a 	mla	r3, r9, sl, r3
 81074f4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 81074f8:	4562      	cmp	r2, ip
 81074fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 81074fe:	d8e5      	bhi.n	81074cc <__multiply+0x10c>
 8107500:	9f01      	ldr	r7, [sp, #4]
 8107502:	51eb      	str	r3, [r5, r7]
 8107504:	3504      	adds	r5, #4
 8107506:	e799      	b.n	810743c <__multiply+0x7c>
 8107508:	3e01      	subs	r6, #1
 810750a:	e79b      	b.n	8107444 <__multiply+0x84>
 810750c:	0810850d 	.word	0x0810850d
 8107510:	0810858f 	.word	0x0810858f

08107514 <__pow5mult>:
 8107514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8107518:	4615      	mov	r5, r2
 810751a:	f012 0203 	ands.w	r2, r2, #3
 810751e:	4607      	mov	r7, r0
 8107520:	460e      	mov	r6, r1
 8107522:	d007      	beq.n	8107534 <__pow5mult+0x20>
 8107524:	4c25      	ldr	r4, [pc, #148]	@ (81075bc <__pow5mult+0xa8>)
 8107526:	3a01      	subs	r2, #1
 8107528:	2300      	movs	r3, #0
 810752a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810752e:	f7ff fe55 	bl	81071dc <__multadd>
 8107532:	4606      	mov	r6, r0
 8107534:	10ad      	asrs	r5, r5, #2
 8107536:	d03d      	beq.n	81075b4 <__pow5mult+0xa0>
 8107538:	69fc      	ldr	r4, [r7, #28]
 810753a:	b97c      	cbnz	r4, 810755c <__pow5mult+0x48>
 810753c:	2010      	movs	r0, #16
 810753e:	f7ff fc77 	bl	8106e30 <malloc>
 8107542:	4602      	mov	r2, r0
 8107544:	61f8      	str	r0, [r7, #28]
 8107546:	b928      	cbnz	r0, 8107554 <__pow5mult+0x40>
 8107548:	4b1d      	ldr	r3, [pc, #116]	@ (81075c0 <__pow5mult+0xac>)
 810754a:	481e      	ldr	r0, [pc, #120]	@ (81075c4 <__pow5mult+0xb0>)
 810754c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8107550:	f000 fb82 	bl	8107c58 <__assert_func>
 8107554:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8107558:	6004      	str	r4, [r0, #0]
 810755a:	60c4      	str	r4, [r0, #12]
 810755c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8107560:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8107564:	b94c      	cbnz	r4, 810757a <__pow5mult+0x66>
 8107566:	f240 2171 	movw	r1, #625	@ 0x271
 810756a:	4638      	mov	r0, r7
 810756c:	f7ff ff12 	bl	8107394 <__i2b>
 8107570:	2300      	movs	r3, #0
 8107572:	f8c8 0008 	str.w	r0, [r8, #8]
 8107576:	4604      	mov	r4, r0
 8107578:	6003      	str	r3, [r0, #0]
 810757a:	f04f 0900 	mov.w	r9, #0
 810757e:	07eb      	lsls	r3, r5, #31
 8107580:	d50a      	bpl.n	8107598 <__pow5mult+0x84>
 8107582:	4631      	mov	r1, r6
 8107584:	4622      	mov	r2, r4
 8107586:	4638      	mov	r0, r7
 8107588:	f7ff ff1a 	bl	81073c0 <__multiply>
 810758c:	4631      	mov	r1, r6
 810758e:	4680      	mov	r8, r0
 8107590:	4638      	mov	r0, r7
 8107592:	f7ff fe01 	bl	8107198 <_Bfree>
 8107596:	4646      	mov	r6, r8
 8107598:	106d      	asrs	r5, r5, #1
 810759a:	d00b      	beq.n	81075b4 <__pow5mult+0xa0>
 810759c:	6820      	ldr	r0, [r4, #0]
 810759e:	b938      	cbnz	r0, 81075b0 <__pow5mult+0x9c>
 81075a0:	4622      	mov	r2, r4
 81075a2:	4621      	mov	r1, r4
 81075a4:	4638      	mov	r0, r7
 81075a6:	f7ff ff0b 	bl	81073c0 <__multiply>
 81075aa:	6020      	str	r0, [r4, #0]
 81075ac:	f8c0 9000 	str.w	r9, [r0]
 81075b0:	4604      	mov	r4, r0
 81075b2:	e7e4      	b.n	810757e <__pow5mult+0x6a>
 81075b4:	4630      	mov	r0, r6
 81075b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81075ba:	bf00      	nop
 81075bc:	081085e8 	.word	0x081085e8
 81075c0:	0810849e 	.word	0x0810849e
 81075c4:	0810858f 	.word	0x0810858f

081075c8 <__lshift>:
 81075c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81075cc:	460c      	mov	r4, r1
 81075ce:	6849      	ldr	r1, [r1, #4]
 81075d0:	6923      	ldr	r3, [r4, #16]
 81075d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 81075d6:	68a3      	ldr	r3, [r4, #8]
 81075d8:	4607      	mov	r7, r0
 81075da:	4691      	mov	r9, r2
 81075dc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 81075e0:	f108 0601 	add.w	r6, r8, #1
 81075e4:	42b3      	cmp	r3, r6
 81075e6:	db0b      	blt.n	8107600 <__lshift+0x38>
 81075e8:	4638      	mov	r0, r7
 81075ea:	f7ff fd95 	bl	8107118 <_Balloc>
 81075ee:	4605      	mov	r5, r0
 81075f0:	b948      	cbnz	r0, 8107606 <__lshift+0x3e>
 81075f2:	4602      	mov	r2, r0
 81075f4:	4b28      	ldr	r3, [pc, #160]	@ (8107698 <__lshift+0xd0>)
 81075f6:	4829      	ldr	r0, [pc, #164]	@ (810769c <__lshift+0xd4>)
 81075f8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 81075fc:	f000 fb2c 	bl	8107c58 <__assert_func>
 8107600:	3101      	adds	r1, #1
 8107602:	005b      	lsls	r3, r3, #1
 8107604:	e7ee      	b.n	81075e4 <__lshift+0x1c>
 8107606:	2300      	movs	r3, #0
 8107608:	f100 0114 	add.w	r1, r0, #20
 810760c:	f100 0210 	add.w	r2, r0, #16
 8107610:	4618      	mov	r0, r3
 8107612:	4553      	cmp	r3, sl
 8107614:	db33      	blt.n	810767e <__lshift+0xb6>
 8107616:	6920      	ldr	r0, [r4, #16]
 8107618:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 810761c:	f104 0314 	add.w	r3, r4, #20
 8107620:	f019 091f 	ands.w	r9, r9, #31
 8107624:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8107628:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 810762c:	d02b      	beq.n	8107686 <__lshift+0xbe>
 810762e:	f1c9 0e20 	rsb	lr, r9, #32
 8107632:	468a      	mov	sl, r1
 8107634:	2200      	movs	r2, #0
 8107636:	6818      	ldr	r0, [r3, #0]
 8107638:	fa00 f009 	lsl.w	r0, r0, r9
 810763c:	4310      	orrs	r0, r2
 810763e:	f84a 0b04 	str.w	r0, [sl], #4
 8107642:	f853 2b04 	ldr.w	r2, [r3], #4
 8107646:	459c      	cmp	ip, r3
 8107648:	fa22 f20e 	lsr.w	r2, r2, lr
 810764c:	d8f3      	bhi.n	8107636 <__lshift+0x6e>
 810764e:	ebac 0304 	sub.w	r3, ip, r4
 8107652:	3b15      	subs	r3, #21
 8107654:	f023 0303 	bic.w	r3, r3, #3
 8107658:	3304      	adds	r3, #4
 810765a:	f104 0015 	add.w	r0, r4, #21
 810765e:	4584      	cmp	ip, r0
 8107660:	bf38      	it	cc
 8107662:	2304      	movcc	r3, #4
 8107664:	50ca      	str	r2, [r1, r3]
 8107666:	b10a      	cbz	r2, 810766c <__lshift+0xa4>
 8107668:	f108 0602 	add.w	r6, r8, #2
 810766c:	3e01      	subs	r6, #1
 810766e:	4638      	mov	r0, r7
 8107670:	612e      	str	r6, [r5, #16]
 8107672:	4621      	mov	r1, r4
 8107674:	f7ff fd90 	bl	8107198 <_Bfree>
 8107678:	4628      	mov	r0, r5
 810767a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810767e:	f842 0f04 	str.w	r0, [r2, #4]!
 8107682:	3301      	adds	r3, #1
 8107684:	e7c5      	b.n	8107612 <__lshift+0x4a>
 8107686:	3904      	subs	r1, #4
 8107688:	f853 2b04 	ldr.w	r2, [r3], #4
 810768c:	f841 2f04 	str.w	r2, [r1, #4]!
 8107690:	459c      	cmp	ip, r3
 8107692:	d8f9      	bhi.n	8107688 <__lshift+0xc0>
 8107694:	e7ea      	b.n	810766c <__lshift+0xa4>
 8107696:	bf00      	nop
 8107698:	0810850d 	.word	0x0810850d
 810769c:	0810858f 	.word	0x0810858f

081076a0 <__mcmp>:
 81076a0:	690a      	ldr	r2, [r1, #16]
 81076a2:	4603      	mov	r3, r0
 81076a4:	6900      	ldr	r0, [r0, #16]
 81076a6:	1a80      	subs	r0, r0, r2
 81076a8:	b530      	push	{r4, r5, lr}
 81076aa:	d10e      	bne.n	81076ca <__mcmp+0x2a>
 81076ac:	3314      	adds	r3, #20
 81076ae:	3114      	adds	r1, #20
 81076b0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 81076b4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 81076b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 81076bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 81076c0:	4295      	cmp	r5, r2
 81076c2:	d003      	beq.n	81076cc <__mcmp+0x2c>
 81076c4:	d205      	bcs.n	81076d2 <__mcmp+0x32>
 81076c6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81076ca:	bd30      	pop	{r4, r5, pc}
 81076cc:	42a3      	cmp	r3, r4
 81076ce:	d3f3      	bcc.n	81076b8 <__mcmp+0x18>
 81076d0:	e7fb      	b.n	81076ca <__mcmp+0x2a>
 81076d2:	2001      	movs	r0, #1
 81076d4:	e7f9      	b.n	81076ca <__mcmp+0x2a>
	...

081076d8 <__mdiff>:
 81076d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81076dc:	4689      	mov	r9, r1
 81076de:	4606      	mov	r6, r0
 81076e0:	4611      	mov	r1, r2
 81076e2:	4648      	mov	r0, r9
 81076e4:	4614      	mov	r4, r2
 81076e6:	f7ff ffdb 	bl	81076a0 <__mcmp>
 81076ea:	1e05      	subs	r5, r0, #0
 81076ec:	d112      	bne.n	8107714 <__mdiff+0x3c>
 81076ee:	4629      	mov	r1, r5
 81076f0:	4630      	mov	r0, r6
 81076f2:	f7ff fd11 	bl	8107118 <_Balloc>
 81076f6:	4602      	mov	r2, r0
 81076f8:	b928      	cbnz	r0, 8107706 <__mdiff+0x2e>
 81076fa:	4b3f      	ldr	r3, [pc, #252]	@ (81077f8 <__mdiff+0x120>)
 81076fc:	f240 2137 	movw	r1, #567	@ 0x237
 8107700:	483e      	ldr	r0, [pc, #248]	@ (81077fc <__mdiff+0x124>)
 8107702:	f000 faa9 	bl	8107c58 <__assert_func>
 8107706:	2301      	movs	r3, #1
 8107708:	e9c0 3504 	strd	r3, r5, [r0, #16]
 810770c:	4610      	mov	r0, r2
 810770e:	b003      	add	sp, #12
 8107710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107714:	bfbc      	itt	lt
 8107716:	464b      	movlt	r3, r9
 8107718:	46a1      	movlt	r9, r4
 810771a:	4630      	mov	r0, r6
 810771c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8107720:	bfba      	itte	lt
 8107722:	461c      	movlt	r4, r3
 8107724:	2501      	movlt	r5, #1
 8107726:	2500      	movge	r5, #0
 8107728:	f7ff fcf6 	bl	8107118 <_Balloc>
 810772c:	4602      	mov	r2, r0
 810772e:	b918      	cbnz	r0, 8107738 <__mdiff+0x60>
 8107730:	4b31      	ldr	r3, [pc, #196]	@ (81077f8 <__mdiff+0x120>)
 8107732:	f240 2145 	movw	r1, #581	@ 0x245
 8107736:	e7e3      	b.n	8107700 <__mdiff+0x28>
 8107738:	f8d9 7010 	ldr.w	r7, [r9, #16]
 810773c:	6926      	ldr	r6, [r4, #16]
 810773e:	60c5      	str	r5, [r0, #12]
 8107740:	f109 0310 	add.w	r3, r9, #16
 8107744:	f109 0514 	add.w	r5, r9, #20
 8107748:	f104 0e14 	add.w	lr, r4, #20
 810774c:	f100 0b14 	add.w	fp, r0, #20
 8107750:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8107754:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8107758:	9301      	str	r3, [sp, #4]
 810775a:	46d9      	mov	r9, fp
 810775c:	f04f 0c00 	mov.w	ip, #0
 8107760:	9b01      	ldr	r3, [sp, #4]
 8107762:	f85e 0b04 	ldr.w	r0, [lr], #4
 8107766:	f853 af04 	ldr.w	sl, [r3, #4]!
 810776a:	9301      	str	r3, [sp, #4]
 810776c:	fa1f f38a 	uxth.w	r3, sl
 8107770:	4619      	mov	r1, r3
 8107772:	b283      	uxth	r3, r0
 8107774:	1acb      	subs	r3, r1, r3
 8107776:	0c00      	lsrs	r0, r0, #16
 8107778:	4463      	add	r3, ip
 810777a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 810777e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8107782:	b29b      	uxth	r3, r3
 8107784:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8107788:	4576      	cmp	r6, lr
 810778a:	f849 3b04 	str.w	r3, [r9], #4
 810778e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8107792:	d8e5      	bhi.n	8107760 <__mdiff+0x88>
 8107794:	1b33      	subs	r3, r6, r4
 8107796:	3b15      	subs	r3, #21
 8107798:	f023 0303 	bic.w	r3, r3, #3
 810779c:	3415      	adds	r4, #21
 810779e:	3304      	adds	r3, #4
 81077a0:	42a6      	cmp	r6, r4
 81077a2:	bf38      	it	cc
 81077a4:	2304      	movcc	r3, #4
 81077a6:	441d      	add	r5, r3
 81077a8:	445b      	add	r3, fp
 81077aa:	461e      	mov	r6, r3
 81077ac:	462c      	mov	r4, r5
 81077ae:	4544      	cmp	r4, r8
 81077b0:	d30e      	bcc.n	81077d0 <__mdiff+0xf8>
 81077b2:	f108 0103 	add.w	r1, r8, #3
 81077b6:	1b49      	subs	r1, r1, r5
 81077b8:	f021 0103 	bic.w	r1, r1, #3
 81077bc:	3d03      	subs	r5, #3
 81077be:	45a8      	cmp	r8, r5
 81077c0:	bf38      	it	cc
 81077c2:	2100      	movcc	r1, #0
 81077c4:	440b      	add	r3, r1
 81077c6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 81077ca:	b191      	cbz	r1, 81077f2 <__mdiff+0x11a>
 81077cc:	6117      	str	r7, [r2, #16]
 81077ce:	e79d      	b.n	810770c <__mdiff+0x34>
 81077d0:	f854 1b04 	ldr.w	r1, [r4], #4
 81077d4:	46e6      	mov	lr, ip
 81077d6:	0c08      	lsrs	r0, r1, #16
 81077d8:	fa1c fc81 	uxtah	ip, ip, r1
 81077dc:	4471      	add	r1, lr
 81077de:	eb00 402c 	add.w	r0, r0, ip, asr #16
 81077e2:	b289      	uxth	r1, r1
 81077e4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 81077e8:	f846 1b04 	str.w	r1, [r6], #4
 81077ec:	ea4f 4c20 	mov.w	ip, r0, asr #16
 81077f0:	e7dd      	b.n	81077ae <__mdiff+0xd6>
 81077f2:	3f01      	subs	r7, #1
 81077f4:	e7e7      	b.n	81077c6 <__mdiff+0xee>
 81077f6:	bf00      	nop
 81077f8:	0810850d 	.word	0x0810850d
 81077fc:	0810858f 	.word	0x0810858f

08107800 <__ulp>:
 8107800:	b082      	sub	sp, #8
 8107802:	ed8d 0b00 	vstr	d0, [sp]
 8107806:	9a01      	ldr	r2, [sp, #4]
 8107808:	4b0f      	ldr	r3, [pc, #60]	@ (8107848 <__ulp+0x48>)
 810780a:	4013      	ands	r3, r2
 810780c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8107810:	2b00      	cmp	r3, #0
 8107812:	dc08      	bgt.n	8107826 <__ulp+0x26>
 8107814:	425b      	negs	r3, r3
 8107816:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 810781a:	ea4f 5223 	mov.w	r2, r3, asr #20
 810781e:	da04      	bge.n	810782a <__ulp+0x2a>
 8107820:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8107824:	4113      	asrs	r3, r2
 8107826:	2200      	movs	r2, #0
 8107828:	e008      	b.n	810783c <__ulp+0x3c>
 810782a:	f1a2 0314 	sub.w	r3, r2, #20
 810782e:	2b1e      	cmp	r3, #30
 8107830:	bfda      	itte	le
 8107832:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8107836:	40da      	lsrle	r2, r3
 8107838:	2201      	movgt	r2, #1
 810783a:	2300      	movs	r3, #0
 810783c:	4619      	mov	r1, r3
 810783e:	4610      	mov	r0, r2
 8107840:	ec41 0b10 	vmov	d0, r0, r1
 8107844:	b002      	add	sp, #8
 8107846:	4770      	bx	lr
 8107848:	7ff00000 	.word	0x7ff00000

0810784c <__b2d>:
 810784c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107850:	6906      	ldr	r6, [r0, #16]
 8107852:	f100 0814 	add.w	r8, r0, #20
 8107856:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 810785a:	1f37      	subs	r7, r6, #4
 810785c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8107860:	4610      	mov	r0, r2
 8107862:	f7ff fd4b 	bl	81072fc <__hi0bits>
 8107866:	f1c0 0320 	rsb	r3, r0, #32
 810786a:	280a      	cmp	r0, #10
 810786c:	600b      	str	r3, [r1, #0]
 810786e:	491b      	ldr	r1, [pc, #108]	@ (81078dc <__b2d+0x90>)
 8107870:	dc15      	bgt.n	810789e <__b2d+0x52>
 8107872:	f1c0 0c0b 	rsb	ip, r0, #11
 8107876:	fa22 f30c 	lsr.w	r3, r2, ip
 810787a:	45b8      	cmp	r8, r7
 810787c:	ea43 0501 	orr.w	r5, r3, r1
 8107880:	bf34      	ite	cc
 8107882:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8107886:	2300      	movcs	r3, #0
 8107888:	3015      	adds	r0, #21
 810788a:	fa02 f000 	lsl.w	r0, r2, r0
 810788e:	fa23 f30c 	lsr.w	r3, r3, ip
 8107892:	4303      	orrs	r3, r0
 8107894:	461c      	mov	r4, r3
 8107896:	ec45 4b10 	vmov	d0, r4, r5
 810789a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 810789e:	45b8      	cmp	r8, r7
 81078a0:	bf3a      	itte	cc
 81078a2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 81078a6:	f1a6 0708 	subcc.w	r7, r6, #8
 81078aa:	2300      	movcs	r3, #0
 81078ac:	380b      	subs	r0, #11
 81078ae:	d012      	beq.n	81078d6 <__b2d+0x8a>
 81078b0:	f1c0 0120 	rsb	r1, r0, #32
 81078b4:	fa23 f401 	lsr.w	r4, r3, r1
 81078b8:	4082      	lsls	r2, r0
 81078ba:	4322      	orrs	r2, r4
 81078bc:	4547      	cmp	r7, r8
 81078be:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 81078c2:	bf8c      	ite	hi
 81078c4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 81078c8:	2200      	movls	r2, #0
 81078ca:	4083      	lsls	r3, r0
 81078cc:	40ca      	lsrs	r2, r1
 81078ce:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 81078d2:	4313      	orrs	r3, r2
 81078d4:	e7de      	b.n	8107894 <__b2d+0x48>
 81078d6:	ea42 0501 	orr.w	r5, r2, r1
 81078da:	e7db      	b.n	8107894 <__b2d+0x48>
 81078dc:	3ff00000 	.word	0x3ff00000

081078e0 <__d2b>:
 81078e0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 81078e4:	460f      	mov	r7, r1
 81078e6:	2101      	movs	r1, #1
 81078e8:	ec59 8b10 	vmov	r8, r9, d0
 81078ec:	4616      	mov	r6, r2
 81078ee:	f7ff fc13 	bl	8107118 <_Balloc>
 81078f2:	4604      	mov	r4, r0
 81078f4:	b930      	cbnz	r0, 8107904 <__d2b+0x24>
 81078f6:	4602      	mov	r2, r0
 81078f8:	4b23      	ldr	r3, [pc, #140]	@ (8107988 <__d2b+0xa8>)
 81078fa:	4824      	ldr	r0, [pc, #144]	@ (810798c <__d2b+0xac>)
 81078fc:	f240 310f 	movw	r1, #783	@ 0x30f
 8107900:	f000 f9aa 	bl	8107c58 <__assert_func>
 8107904:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8107908:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810790c:	b10d      	cbz	r5, 8107912 <__d2b+0x32>
 810790e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8107912:	9301      	str	r3, [sp, #4]
 8107914:	f1b8 0300 	subs.w	r3, r8, #0
 8107918:	d023      	beq.n	8107962 <__d2b+0x82>
 810791a:	4668      	mov	r0, sp
 810791c:	9300      	str	r3, [sp, #0]
 810791e:	f7ff fd0c 	bl	810733a <__lo0bits>
 8107922:	e9dd 1200 	ldrd	r1, r2, [sp]
 8107926:	b1d0      	cbz	r0, 810795e <__d2b+0x7e>
 8107928:	f1c0 0320 	rsb	r3, r0, #32
 810792c:	fa02 f303 	lsl.w	r3, r2, r3
 8107930:	430b      	orrs	r3, r1
 8107932:	40c2      	lsrs	r2, r0
 8107934:	6163      	str	r3, [r4, #20]
 8107936:	9201      	str	r2, [sp, #4]
 8107938:	9b01      	ldr	r3, [sp, #4]
 810793a:	61a3      	str	r3, [r4, #24]
 810793c:	2b00      	cmp	r3, #0
 810793e:	bf0c      	ite	eq
 8107940:	2201      	moveq	r2, #1
 8107942:	2202      	movne	r2, #2
 8107944:	6122      	str	r2, [r4, #16]
 8107946:	b1a5      	cbz	r5, 8107972 <__d2b+0x92>
 8107948:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 810794c:	4405      	add	r5, r0
 810794e:	603d      	str	r5, [r7, #0]
 8107950:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8107954:	6030      	str	r0, [r6, #0]
 8107956:	4620      	mov	r0, r4
 8107958:	b003      	add	sp, #12
 810795a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 810795e:	6161      	str	r1, [r4, #20]
 8107960:	e7ea      	b.n	8107938 <__d2b+0x58>
 8107962:	a801      	add	r0, sp, #4
 8107964:	f7ff fce9 	bl	810733a <__lo0bits>
 8107968:	9b01      	ldr	r3, [sp, #4]
 810796a:	6163      	str	r3, [r4, #20]
 810796c:	3020      	adds	r0, #32
 810796e:	2201      	movs	r2, #1
 8107970:	e7e8      	b.n	8107944 <__d2b+0x64>
 8107972:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8107976:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 810797a:	6038      	str	r0, [r7, #0]
 810797c:	6918      	ldr	r0, [r3, #16]
 810797e:	f7ff fcbd 	bl	81072fc <__hi0bits>
 8107982:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8107986:	e7e5      	b.n	8107954 <__d2b+0x74>
 8107988:	0810850d 	.word	0x0810850d
 810798c:	0810858f 	.word	0x0810858f

08107990 <__ratio>:
 8107990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107994:	b085      	sub	sp, #20
 8107996:	e9cd 1000 	strd	r1, r0, [sp]
 810799a:	a902      	add	r1, sp, #8
 810799c:	f7ff ff56 	bl	810784c <__b2d>
 81079a0:	9800      	ldr	r0, [sp, #0]
 81079a2:	a903      	add	r1, sp, #12
 81079a4:	ec55 4b10 	vmov	r4, r5, d0
 81079a8:	f7ff ff50 	bl	810784c <__b2d>
 81079ac:	9b01      	ldr	r3, [sp, #4]
 81079ae:	6919      	ldr	r1, [r3, #16]
 81079b0:	9b00      	ldr	r3, [sp, #0]
 81079b2:	691b      	ldr	r3, [r3, #16]
 81079b4:	1ac9      	subs	r1, r1, r3
 81079b6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 81079ba:	1a9b      	subs	r3, r3, r2
 81079bc:	ec5b ab10 	vmov	sl, fp, d0
 81079c0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 81079c4:	2b00      	cmp	r3, #0
 81079c6:	bfce      	itee	gt
 81079c8:	462a      	movgt	r2, r5
 81079ca:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 81079ce:	465a      	movle	r2, fp
 81079d0:	462f      	mov	r7, r5
 81079d2:	46d9      	mov	r9, fp
 81079d4:	bfcc      	ite	gt
 81079d6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 81079da:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 81079de:	464b      	mov	r3, r9
 81079e0:	4652      	mov	r2, sl
 81079e2:	4620      	mov	r0, r4
 81079e4:	4639      	mov	r1, r7
 81079e6:	f7f8 ffb9 	bl	810095c <__aeabi_ddiv>
 81079ea:	ec41 0b10 	vmov	d0, r0, r1
 81079ee:	b005      	add	sp, #20
 81079f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

081079f4 <__copybits>:
 81079f4:	3901      	subs	r1, #1
 81079f6:	b570      	push	{r4, r5, r6, lr}
 81079f8:	1149      	asrs	r1, r1, #5
 81079fa:	6914      	ldr	r4, [r2, #16]
 81079fc:	3101      	adds	r1, #1
 81079fe:	f102 0314 	add.w	r3, r2, #20
 8107a02:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8107a06:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8107a0a:	1f05      	subs	r5, r0, #4
 8107a0c:	42a3      	cmp	r3, r4
 8107a0e:	d30c      	bcc.n	8107a2a <__copybits+0x36>
 8107a10:	1aa3      	subs	r3, r4, r2
 8107a12:	3b11      	subs	r3, #17
 8107a14:	f023 0303 	bic.w	r3, r3, #3
 8107a18:	3211      	adds	r2, #17
 8107a1a:	42a2      	cmp	r2, r4
 8107a1c:	bf88      	it	hi
 8107a1e:	2300      	movhi	r3, #0
 8107a20:	4418      	add	r0, r3
 8107a22:	2300      	movs	r3, #0
 8107a24:	4288      	cmp	r0, r1
 8107a26:	d305      	bcc.n	8107a34 <__copybits+0x40>
 8107a28:	bd70      	pop	{r4, r5, r6, pc}
 8107a2a:	f853 6b04 	ldr.w	r6, [r3], #4
 8107a2e:	f845 6f04 	str.w	r6, [r5, #4]!
 8107a32:	e7eb      	b.n	8107a0c <__copybits+0x18>
 8107a34:	f840 3b04 	str.w	r3, [r0], #4
 8107a38:	e7f4      	b.n	8107a24 <__copybits+0x30>

08107a3a <__any_on>:
 8107a3a:	f100 0214 	add.w	r2, r0, #20
 8107a3e:	6900      	ldr	r0, [r0, #16]
 8107a40:	114b      	asrs	r3, r1, #5
 8107a42:	4298      	cmp	r0, r3
 8107a44:	b510      	push	{r4, lr}
 8107a46:	db11      	blt.n	8107a6c <__any_on+0x32>
 8107a48:	dd0a      	ble.n	8107a60 <__any_on+0x26>
 8107a4a:	f011 011f 	ands.w	r1, r1, #31
 8107a4e:	d007      	beq.n	8107a60 <__any_on+0x26>
 8107a50:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8107a54:	fa24 f001 	lsr.w	r0, r4, r1
 8107a58:	fa00 f101 	lsl.w	r1, r0, r1
 8107a5c:	428c      	cmp	r4, r1
 8107a5e:	d10b      	bne.n	8107a78 <__any_on+0x3e>
 8107a60:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8107a64:	4293      	cmp	r3, r2
 8107a66:	d803      	bhi.n	8107a70 <__any_on+0x36>
 8107a68:	2000      	movs	r0, #0
 8107a6a:	bd10      	pop	{r4, pc}
 8107a6c:	4603      	mov	r3, r0
 8107a6e:	e7f7      	b.n	8107a60 <__any_on+0x26>
 8107a70:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8107a74:	2900      	cmp	r1, #0
 8107a76:	d0f5      	beq.n	8107a64 <__any_on+0x2a>
 8107a78:	2001      	movs	r0, #1
 8107a7a:	e7f6      	b.n	8107a6a <__any_on+0x30>

08107a7c <__sread>:
 8107a7c:	b510      	push	{r4, lr}
 8107a7e:	460c      	mov	r4, r1
 8107a80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107a84:	f000 f8b4 	bl	8107bf0 <_read_r>
 8107a88:	2800      	cmp	r0, #0
 8107a8a:	bfab      	itete	ge
 8107a8c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8107a8e:	89a3      	ldrhlt	r3, [r4, #12]
 8107a90:	181b      	addge	r3, r3, r0
 8107a92:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8107a96:	bfac      	ite	ge
 8107a98:	6563      	strge	r3, [r4, #84]	@ 0x54
 8107a9a:	81a3      	strhlt	r3, [r4, #12]
 8107a9c:	bd10      	pop	{r4, pc}

08107a9e <__swrite>:
 8107a9e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107aa2:	461f      	mov	r7, r3
 8107aa4:	898b      	ldrh	r3, [r1, #12]
 8107aa6:	05db      	lsls	r3, r3, #23
 8107aa8:	4605      	mov	r5, r0
 8107aaa:	460c      	mov	r4, r1
 8107aac:	4616      	mov	r6, r2
 8107aae:	d505      	bpl.n	8107abc <__swrite+0x1e>
 8107ab0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107ab4:	2302      	movs	r3, #2
 8107ab6:	2200      	movs	r2, #0
 8107ab8:	f000 f888 	bl	8107bcc <_lseek_r>
 8107abc:	89a3      	ldrh	r3, [r4, #12]
 8107abe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8107ac2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8107ac6:	81a3      	strh	r3, [r4, #12]
 8107ac8:	4632      	mov	r2, r6
 8107aca:	463b      	mov	r3, r7
 8107acc:	4628      	mov	r0, r5
 8107ace:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107ad2:	f000 b8af 	b.w	8107c34 <_write_r>

08107ad6 <__sseek>:
 8107ad6:	b510      	push	{r4, lr}
 8107ad8:	460c      	mov	r4, r1
 8107ada:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107ade:	f000 f875 	bl	8107bcc <_lseek_r>
 8107ae2:	1c43      	adds	r3, r0, #1
 8107ae4:	89a3      	ldrh	r3, [r4, #12]
 8107ae6:	bf15      	itete	ne
 8107ae8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8107aea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8107aee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8107af2:	81a3      	strheq	r3, [r4, #12]
 8107af4:	bf18      	it	ne
 8107af6:	81a3      	strhne	r3, [r4, #12]
 8107af8:	bd10      	pop	{r4, pc}

08107afa <__sclose>:
 8107afa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107afe:	f000 b855 	b.w	8107bac <_close_r>

08107b02 <_realloc_r>:
 8107b02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8107b06:	4680      	mov	r8, r0
 8107b08:	4615      	mov	r5, r2
 8107b0a:	460c      	mov	r4, r1
 8107b0c:	b921      	cbnz	r1, 8107b18 <_realloc_r+0x16>
 8107b0e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8107b12:	4611      	mov	r1, r2
 8107b14:	f7ff b9b6 	b.w	8106e84 <_malloc_r>
 8107b18:	b92a      	cbnz	r2, 8107b26 <_realloc_r+0x24>
 8107b1a:	f000 f8cf 	bl	8107cbc <_free_r>
 8107b1e:	2400      	movs	r4, #0
 8107b20:	4620      	mov	r0, r4
 8107b22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8107b26:	f000 f913 	bl	8107d50 <_malloc_usable_size_r>
 8107b2a:	4285      	cmp	r5, r0
 8107b2c:	4606      	mov	r6, r0
 8107b2e:	d802      	bhi.n	8107b36 <_realloc_r+0x34>
 8107b30:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8107b34:	d8f4      	bhi.n	8107b20 <_realloc_r+0x1e>
 8107b36:	4629      	mov	r1, r5
 8107b38:	4640      	mov	r0, r8
 8107b3a:	f7ff f9a3 	bl	8106e84 <_malloc_r>
 8107b3e:	4607      	mov	r7, r0
 8107b40:	2800      	cmp	r0, #0
 8107b42:	d0ec      	beq.n	8107b1e <_realloc_r+0x1c>
 8107b44:	42b5      	cmp	r5, r6
 8107b46:	462a      	mov	r2, r5
 8107b48:	4621      	mov	r1, r4
 8107b4a:	bf28      	it	cs
 8107b4c:	4632      	movcs	r2, r6
 8107b4e:	f7fd fe72 	bl	8105836 <memcpy>
 8107b52:	4621      	mov	r1, r4
 8107b54:	4640      	mov	r0, r8
 8107b56:	f000 f8b1 	bl	8107cbc <_free_r>
 8107b5a:	463c      	mov	r4, r7
 8107b5c:	e7e0      	b.n	8107b20 <_realloc_r+0x1e>

08107b5e <__ascii_wctomb>:
 8107b5e:	4603      	mov	r3, r0
 8107b60:	4608      	mov	r0, r1
 8107b62:	b141      	cbz	r1, 8107b76 <__ascii_wctomb+0x18>
 8107b64:	2aff      	cmp	r2, #255	@ 0xff
 8107b66:	d904      	bls.n	8107b72 <__ascii_wctomb+0x14>
 8107b68:	228a      	movs	r2, #138	@ 0x8a
 8107b6a:	601a      	str	r2, [r3, #0]
 8107b6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8107b70:	4770      	bx	lr
 8107b72:	700a      	strb	r2, [r1, #0]
 8107b74:	2001      	movs	r0, #1
 8107b76:	4770      	bx	lr

08107b78 <memmove>:
 8107b78:	4288      	cmp	r0, r1
 8107b7a:	b510      	push	{r4, lr}
 8107b7c:	eb01 0402 	add.w	r4, r1, r2
 8107b80:	d902      	bls.n	8107b88 <memmove+0x10>
 8107b82:	4284      	cmp	r4, r0
 8107b84:	4623      	mov	r3, r4
 8107b86:	d807      	bhi.n	8107b98 <memmove+0x20>
 8107b88:	1e43      	subs	r3, r0, #1
 8107b8a:	42a1      	cmp	r1, r4
 8107b8c:	d008      	beq.n	8107ba0 <memmove+0x28>
 8107b8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8107b92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8107b96:	e7f8      	b.n	8107b8a <memmove+0x12>
 8107b98:	4402      	add	r2, r0
 8107b9a:	4601      	mov	r1, r0
 8107b9c:	428a      	cmp	r2, r1
 8107b9e:	d100      	bne.n	8107ba2 <memmove+0x2a>
 8107ba0:	bd10      	pop	{r4, pc}
 8107ba2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8107ba6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8107baa:	e7f7      	b.n	8107b9c <memmove+0x24>

08107bac <_close_r>:
 8107bac:	b538      	push	{r3, r4, r5, lr}
 8107bae:	4d06      	ldr	r5, [pc, #24]	@ (8107bc8 <_close_r+0x1c>)
 8107bb0:	2300      	movs	r3, #0
 8107bb2:	4604      	mov	r4, r0
 8107bb4:	4608      	mov	r0, r1
 8107bb6:	602b      	str	r3, [r5, #0]
 8107bb8:	f7f9 fbbf 	bl	810133a <_close>
 8107bbc:	1c43      	adds	r3, r0, #1
 8107bbe:	d102      	bne.n	8107bc6 <_close_r+0x1a>
 8107bc0:	682b      	ldr	r3, [r5, #0]
 8107bc2:	b103      	cbz	r3, 8107bc6 <_close_r+0x1a>
 8107bc4:	6023      	str	r3, [r4, #0]
 8107bc6:	bd38      	pop	{r3, r4, r5, pc}
 8107bc8:	10000484 	.word	0x10000484

08107bcc <_lseek_r>:
 8107bcc:	b538      	push	{r3, r4, r5, lr}
 8107bce:	4d07      	ldr	r5, [pc, #28]	@ (8107bec <_lseek_r+0x20>)
 8107bd0:	4604      	mov	r4, r0
 8107bd2:	4608      	mov	r0, r1
 8107bd4:	4611      	mov	r1, r2
 8107bd6:	2200      	movs	r2, #0
 8107bd8:	602a      	str	r2, [r5, #0]
 8107bda:	461a      	mov	r2, r3
 8107bdc:	f7f9 fbd4 	bl	8101388 <_lseek>
 8107be0:	1c43      	adds	r3, r0, #1
 8107be2:	d102      	bne.n	8107bea <_lseek_r+0x1e>
 8107be4:	682b      	ldr	r3, [r5, #0]
 8107be6:	b103      	cbz	r3, 8107bea <_lseek_r+0x1e>
 8107be8:	6023      	str	r3, [r4, #0]
 8107bea:	bd38      	pop	{r3, r4, r5, pc}
 8107bec:	10000484 	.word	0x10000484

08107bf0 <_read_r>:
 8107bf0:	b538      	push	{r3, r4, r5, lr}
 8107bf2:	4d07      	ldr	r5, [pc, #28]	@ (8107c10 <_read_r+0x20>)
 8107bf4:	4604      	mov	r4, r0
 8107bf6:	4608      	mov	r0, r1
 8107bf8:	4611      	mov	r1, r2
 8107bfa:	2200      	movs	r2, #0
 8107bfc:	602a      	str	r2, [r5, #0]
 8107bfe:	461a      	mov	r2, r3
 8107c00:	f7f9 fb62 	bl	81012c8 <_read>
 8107c04:	1c43      	adds	r3, r0, #1
 8107c06:	d102      	bne.n	8107c0e <_read_r+0x1e>
 8107c08:	682b      	ldr	r3, [r5, #0]
 8107c0a:	b103      	cbz	r3, 8107c0e <_read_r+0x1e>
 8107c0c:	6023      	str	r3, [r4, #0]
 8107c0e:	bd38      	pop	{r3, r4, r5, pc}
 8107c10:	10000484 	.word	0x10000484

08107c14 <_sbrk_r>:
 8107c14:	b538      	push	{r3, r4, r5, lr}
 8107c16:	4d06      	ldr	r5, [pc, #24]	@ (8107c30 <_sbrk_r+0x1c>)
 8107c18:	2300      	movs	r3, #0
 8107c1a:	4604      	mov	r4, r0
 8107c1c:	4608      	mov	r0, r1
 8107c1e:	602b      	str	r3, [r5, #0]
 8107c20:	f7f9 fbc0 	bl	81013a4 <_sbrk>
 8107c24:	1c43      	adds	r3, r0, #1
 8107c26:	d102      	bne.n	8107c2e <_sbrk_r+0x1a>
 8107c28:	682b      	ldr	r3, [r5, #0]
 8107c2a:	b103      	cbz	r3, 8107c2e <_sbrk_r+0x1a>
 8107c2c:	6023      	str	r3, [r4, #0]
 8107c2e:	bd38      	pop	{r3, r4, r5, pc}
 8107c30:	10000484 	.word	0x10000484

08107c34 <_write_r>:
 8107c34:	b538      	push	{r3, r4, r5, lr}
 8107c36:	4d07      	ldr	r5, [pc, #28]	@ (8107c54 <_write_r+0x20>)
 8107c38:	4604      	mov	r4, r0
 8107c3a:	4608      	mov	r0, r1
 8107c3c:	4611      	mov	r1, r2
 8107c3e:	2200      	movs	r2, #0
 8107c40:	602a      	str	r2, [r5, #0]
 8107c42:	461a      	mov	r2, r3
 8107c44:	f7f9 fb5d 	bl	8101302 <_write>
 8107c48:	1c43      	adds	r3, r0, #1
 8107c4a:	d102      	bne.n	8107c52 <_write_r+0x1e>
 8107c4c:	682b      	ldr	r3, [r5, #0]
 8107c4e:	b103      	cbz	r3, 8107c52 <_write_r+0x1e>
 8107c50:	6023      	str	r3, [r4, #0]
 8107c52:	bd38      	pop	{r3, r4, r5, pc}
 8107c54:	10000484 	.word	0x10000484

08107c58 <__assert_func>:
 8107c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8107c5a:	4614      	mov	r4, r2
 8107c5c:	461a      	mov	r2, r3
 8107c5e:	4b09      	ldr	r3, [pc, #36]	@ (8107c84 <__assert_func+0x2c>)
 8107c60:	681b      	ldr	r3, [r3, #0]
 8107c62:	4605      	mov	r5, r0
 8107c64:	68d8      	ldr	r0, [r3, #12]
 8107c66:	b954      	cbnz	r4, 8107c7e <__assert_func+0x26>
 8107c68:	4b07      	ldr	r3, [pc, #28]	@ (8107c88 <__assert_func+0x30>)
 8107c6a:	461c      	mov	r4, r3
 8107c6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8107c70:	9100      	str	r1, [sp, #0]
 8107c72:	462b      	mov	r3, r5
 8107c74:	4905      	ldr	r1, [pc, #20]	@ (8107c8c <__assert_func+0x34>)
 8107c76:	f000 f873 	bl	8107d60 <fiprintf>
 8107c7a:	f000 f883 	bl	8107d84 <abort>
 8107c7e:	4b04      	ldr	r3, [pc, #16]	@ (8107c90 <__assert_func+0x38>)
 8107c80:	e7f4      	b.n	8107c6c <__assert_func+0x14>
 8107c82:	bf00      	nop
 8107c84:	10000188 	.word	0x10000188
 8107c88:	08108723 	.word	0x08108723
 8107c8c:	081086f5 	.word	0x081086f5
 8107c90:	081086e8 	.word	0x081086e8

08107c94 <_calloc_r>:
 8107c94:	b570      	push	{r4, r5, r6, lr}
 8107c96:	fba1 5402 	umull	r5, r4, r1, r2
 8107c9a:	b93c      	cbnz	r4, 8107cac <_calloc_r+0x18>
 8107c9c:	4629      	mov	r1, r5
 8107c9e:	f7ff f8f1 	bl	8106e84 <_malloc_r>
 8107ca2:	4606      	mov	r6, r0
 8107ca4:	b928      	cbnz	r0, 8107cb2 <_calloc_r+0x1e>
 8107ca6:	2600      	movs	r6, #0
 8107ca8:	4630      	mov	r0, r6
 8107caa:	bd70      	pop	{r4, r5, r6, pc}
 8107cac:	220c      	movs	r2, #12
 8107cae:	6002      	str	r2, [r0, #0]
 8107cb0:	e7f9      	b.n	8107ca6 <_calloc_r+0x12>
 8107cb2:	462a      	mov	r2, r5
 8107cb4:	4621      	mov	r1, r4
 8107cb6:	f7fd fd85 	bl	81057c4 <memset>
 8107cba:	e7f5      	b.n	8107ca8 <_calloc_r+0x14>

08107cbc <_free_r>:
 8107cbc:	b538      	push	{r3, r4, r5, lr}
 8107cbe:	4605      	mov	r5, r0
 8107cc0:	2900      	cmp	r1, #0
 8107cc2:	d041      	beq.n	8107d48 <_free_r+0x8c>
 8107cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107cc8:	1f0c      	subs	r4, r1, #4
 8107cca:	2b00      	cmp	r3, #0
 8107ccc:	bfb8      	it	lt
 8107cce:	18e4      	addlt	r4, r4, r3
 8107cd0:	f7ff fa16 	bl	8107100 <__malloc_lock>
 8107cd4:	4a1d      	ldr	r2, [pc, #116]	@ (8107d4c <_free_r+0x90>)
 8107cd6:	6813      	ldr	r3, [r2, #0]
 8107cd8:	b933      	cbnz	r3, 8107ce8 <_free_r+0x2c>
 8107cda:	6063      	str	r3, [r4, #4]
 8107cdc:	6014      	str	r4, [r2, #0]
 8107cde:	4628      	mov	r0, r5
 8107ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8107ce4:	f7ff ba12 	b.w	810710c <__malloc_unlock>
 8107ce8:	42a3      	cmp	r3, r4
 8107cea:	d908      	bls.n	8107cfe <_free_r+0x42>
 8107cec:	6820      	ldr	r0, [r4, #0]
 8107cee:	1821      	adds	r1, r4, r0
 8107cf0:	428b      	cmp	r3, r1
 8107cf2:	bf01      	itttt	eq
 8107cf4:	6819      	ldreq	r1, [r3, #0]
 8107cf6:	685b      	ldreq	r3, [r3, #4]
 8107cf8:	1809      	addeq	r1, r1, r0
 8107cfa:	6021      	streq	r1, [r4, #0]
 8107cfc:	e7ed      	b.n	8107cda <_free_r+0x1e>
 8107cfe:	461a      	mov	r2, r3
 8107d00:	685b      	ldr	r3, [r3, #4]
 8107d02:	b10b      	cbz	r3, 8107d08 <_free_r+0x4c>
 8107d04:	42a3      	cmp	r3, r4
 8107d06:	d9fa      	bls.n	8107cfe <_free_r+0x42>
 8107d08:	6811      	ldr	r1, [r2, #0]
 8107d0a:	1850      	adds	r0, r2, r1
 8107d0c:	42a0      	cmp	r0, r4
 8107d0e:	d10b      	bne.n	8107d28 <_free_r+0x6c>
 8107d10:	6820      	ldr	r0, [r4, #0]
 8107d12:	4401      	add	r1, r0
 8107d14:	1850      	adds	r0, r2, r1
 8107d16:	4283      	cmp	r3, r0
 8107d18:	6011      	str	r1, [r2, #0]
 8107d1a:	d1e0      	bne.n	8107cde <_free_r+0x22>
 8107d1c:	6818      	ldr	r0, [r3, #0]
 8107d1e:	685b      	ldr	r3, [r3, #4]
 8107d20:	6053      	str	r3, [r2, #4]
 8107d22:	4408      	add	r0, r1
 8107d24:	6010      	str	r0, [r2, #0]
 8107d26:	e7da      	b.n	8107cde <_free_r+0x22>
 8107d28:	d902      	bls.n	8107d30 <_free_r+0x74>
 8107d2a:	230c      	movs	r3, #12
 8107d2c:	602b      	str	r3, [r5, #0]
 8107d2e:	e7d6      	b.n	8107cde <_free_r+0x22>
 8107d30:	6820      	ldr	r0, [r4, #0]
 8107d32:	1821      	adds	r1, r4, r0
 8107d34:	428b      	cmp	r3, r1
 8107d36:	bf04      	itt	eq
 8107d38:	6819      	ldreq	r1, [r3, #0]
 8107d3a:	685b      	ldreq	r3, [r3, #4]
 8107d3c:	6063      	str	r3, [r4, #4]
 8107d3e:	bf04      	itt	eq
 8107d40:	1809      	addeq	r1, r1, r0
 8107d42:	6021      	streq	r1, [r4, #0]
 8107d44:	6054      	str	r4, [r2, #4]
 8107d46:	e7ca      	b.n	8107cde <_free_r+0x22>
 8107d48:	bd38      	pop	{r3, r4, r5, pc}
 8107d4a:	bf00      	nop
 8107d4c:	10000480 	.word	0x10000480

08107d50 <_malloc_usable_size_r>:
 8107d50:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8107d54:	1f18      	subs	r0, r3, #4
 8107d56:	2b00      	cmp	r3, #0
 8107d58:	bfbc      	itt	lt
 8107d5a:	580b      	ldrlt	r3, [r1, r0]
 8107d5c:	18c0      	addlt	r0, r0, r3
 8107d5e:	4770      	bx	lr

08107d60 <fiprintf>:
 8107d60:	b40e      	push	{r1, r2, r3}
 8107d62:	b503      	push	{r0, r1, lr}
 8107d64:	4601      	mov	r1, r0
 8107d66:	ab03      	add	r3, sp, #12
 8107d68:	4805      	ldr	r0, [pc, #20]	@ (8107d80 <fiprintf+0x20>)
 8107d6a:	f853 2b04 	ldr.w	r2, [r3], #4
 8107d6e:	6800      	ldr	r0, [r0, #0]
 8107d70:	9301      	str	r3, [sp, #4]
 8107d72:	f000 f837 	bl	8107de4 <_vfiprintf_r>
 8107d76:	b002      	add	sp, #8
 8107d78:	f85d eb04 	ldr.w	lr, [sp], #4
 8107d7c:	b003      	add	sp, #12
 8107d7e:	4770      	bx	lr
 8107d80:	10000188 	.word	0x10000188

08107d84 <abort>:
 8107d84:	b508      	push	{r3, lr}
 8107d86:	2006      	movs	r0, #6
 8107d88:	f000 fa84 	bl	8108294 <raise>
 8107d8c:	2001      	movs	r0, #1
 8107d8e:	f7f9 fa90 	bl	81012b2 <_exit>

08107d92 <__sfputc_r>:
 8107d92:	6893      	ldr	r3, [r2, #8]
 8107d94:	3b01      	subs	r3, #1
 8107d96:	2b00      	cmp	r3, #0
 8107d98:	b410      	push	{r4}
 8107d9a:	6093      	str	r3, [r2, #8]
 8107d9c:	da08      	bge.n	8107db0 <__sfputc_r+0x1e>
 8107d9e:	6994      	ldr	r4, [r2, #24]
 8107da0:	42a3      	cmp	r3, r4
 8107da2:	db01      	blt.n	8107da8 <__sfputc_r+0x16>
 8107da4:	290a      	cmp	r1, #10
 8107da6:	d103      	bne.n	8107db0 <__sfputc_r+0x1e>
 8107da8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8107dac:	f000 b932 	b.w	8108014 <__swbuf_r>
 8107db0:	6813      	ldr	r3, [r2, #0]
 8107db2:	1c58      	adds	r0, r3, #1
 8107db4:	6010      	str	r0, [r2, #0]
 8107db6:	7019      	strb	r1, [r3, #0]
 8107db8:	4608      	mov	r0, r1
 8107dba:	f85d 4b04 	ldr.w	r4, [sp], #4
 8107dbe:	4770      	bx	lr

08107dc0 <__sfputs_r>:
 8107dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107dc2:	4606      	mov	r6, r0
 8107dc4:	460f      	mov	r7, r1
 8107dc6:	4614      	mov	r4, r2
 8107dc8:	18d5      	adds	r5, r2, r3
 8107dca:	42ac      	cmp	r4, r5
 8107dcc:	d101      	bne.n	8107dd2 <__sfputs_r+0x12>
 8107dce:	2000      	movs	r0, #0
 8107dd0:	e007      	b.n	8107de2 <__sfputs_r+0x22>
 8107dd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107dd6:	463a      	mov	r2, r7
 8107dd8:	4630      	mov	r0, r6
 8107dda:	f7ff ffda 	bl	8107d92 <__sfputc_r>
 8107dde:	1c43      	adds	r3, r0, #1
 8107de0:	d1f3      	bne.n	8107dca <__sfputs_r+0xa>
 8107de2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08107de4 <_vfiprintf_r>:
 8107de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8107de8:	460d      	mov	r5, r1
 8107dea:	b09d      	sub	sp, #116	@ 0x74
 8107dec:	4614      	mov	r4, r2
 8107dee:	4698      	mov	r8, r3
 8107df0:	4606      	mov	r6, r0
 8107df2:	b118      	cbz	r0, 8107dfc <_vfiprintf_r+0x18>
 8107df4:	6a03      	ldr	r3, [r0, #32]
 8107df6:	b90b      	cbnz	r3, 8107dfc <_vfiprintf_r+0x18>
 8107df8:	f7fc fe16 	bl	8104a28 <__sinit>
 8107dfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8107dfe:	07d9      	lsls	r1, r3, #31
 8107e00:	d405      	bmi.n	8107e0e <_vfiprintf_r+0x2a>
 8107e02:	89ab      	ldrh	r3, [r5, #12]
 8107e04:	059a      	lsls	r2, r3, #22
 8107e06:	d402      	bmi.n	8107e0e <_vfiprintf_r+0x2a>
 8107e08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8107e0a:	f7fd fd12 	bl	8105832 <__retarget_lock_acquire_recursive>
 8107e0e:	89ab      	ldrh	r3, [r5, #12]
 8107e10:	071b      	lsls	r3, r3, #28
 8107e12:	d501      	bpl.n	8107e18 <_vfiprintf_r+0x34>
 8107e14:	692b      	ldr	r3, [r5, #16]
 8107e16:	b99b      	cbnz	r3, 8107e40 <_vfiprintf_r+0x5c>
 8107e18:	4629      	mov	r1, r5
 8107e1a:	4630      	mov	r0, r6
 8107e1c:	f000 f938 	bl	8108090 <__swsetup_r>
 8107e20:	b170      	cbz	r0, 8107e40 <_vfiprintf_r+0x5c>
 8107e22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8107e24:	07dc      	lsls	r4, r3, #31
 8107e26:	d504      	bpl.n	8107e32 <_vfiprintf_r+0x4e>
 8107e28:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8107e2c:	b01d      	add	sp, #116	@ 0x74
 8107e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8107e32:	89ab      	ldrh	r3, [r5, #12]
 8107e34:	0598      	lsls	r0, r3, #22
 8107e36:	d4f7      	bmi.n	8107e28 <_vfiprintf_r+0x44>
 8107e38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8107e3a:	f7fd fcfb 	bl	8105834 <__retarget_lock_release_recursive>
 8107e3e:	e7f3      	b.n	8107e28 <_vfiprintf_r+0x44>
 8107e40:	2300      	movs	r3, #0
 8107e42:	9309      	str	r3, [sp, #36]	@ 0x24
 8107e44:	2320      	movs	r3, #32
 8107e46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8107e4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8107e4e:	2330      	movs	r3, #48	@ 0x30
 8107e50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8108000 <_vfiprintf_r+0x21c>
 8107e54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8107e58:	f04f 0901 	mov.w	r9, #1
 8107e5c:	4623      	mov	r3, r4
 8107e5e:	469a      	mov	sl, r3
 8107e60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8107e64:	b10a      	cbz	r2, 8107e6a <_vfiprintf_r+0x86>
 8107e66:	2a25      	cmp	r2, #37	@ 0x25
 8107e68:	d1f9      	bne.n	8107e5e <_vfiprintf_r+0x7a>
 8107e6a:	ebba 0b04 	subs.w	fp, sl, r4
 8107e6e:	d00b      	beq.n	8107e88 <_vfiprintf_r+0xa4>
 8107e70:	465b      	mov	r3, fp
 8107e72:	4622      	mov	r2, r4
 8107e74:	4629      	mov	r1, r5
 8107e76:	4630      	mov	r0, r6
 8107e78:	f7ff ffa2 	bl	8107dc0 <__sfputs_r>
 8107e7c:	3001      	adds	r0, #1
 8107e7e:	f000 80a7 	beq.w	8107fd0 <_vfiprintf_r+0x1ec>
 8107e82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8107e84:	445a      	add	r2, fp
 8107e86:	9209      	str	r2, [sp, #36]	@ 0x24
 8107e88:	f89a 3000 	ldrb.w	r3, [sl]
 8107e8c:	2b00      	cmp	r3, #0
 8107e8e:	f000 809f 	beq.w	8107fd0 <_vfiprintf_r+0x1ec>
 8107e92:	2300      	movs	r3, #0
 8107e94:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8107e98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8107e9c:	f10a 0a01 	add.w	sl, sl, #1
 8107ea0:	9304      	str	r3, [sp, #16]
 8107ea2:	9307      	str	r3, [sp, #28]
 8107ea4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8107ea8:	931a      	str	r3, [sp, #104]	@ 0x68
 8107eaa:	4654      	mov	r4, sl
 8107eac:	2205      	movs	r2, #5
 8107eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107eb2:	4853      	ldr	r0, [pc, #332]	@ (8108000 <_vfiprintf_r+0x21c>)
 8107eb4:	f7f8 fa14 	bl	81002e0 <memchr>
 8107eb8:	9a04      	ldr	r2, [sp, #16]
 8107eba:	b9d8      	cbnz	r0, 8107ef4 <_vfiprintf_r+0x110>
 8107ebc:	06d1      	lsls	r1, r2, #27
 8107ebe:	bf44      	itt	mi
 8107ec0:	2320      	movmi	r3, #32
 8107ec2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8107ec6:	0713      	lsls	r3, r2, #28
 8107ec8:	bf44      	itt	mi
 8107eca:	232b      	movmi	r3, #43	@ 0x2b
 8107ecc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8107ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8107ed4:	2b2a      	cmp	r3, #42	@ 0x2a
 8107ed6:	d015      	beq.n	8107f04 <_vfiprintf_r+0x120>
 8107ed8:	9a07      	ldr	r2, [sp, #28]
 8107eda:	4654      	mov	r4, sl
 8107edc:	2000      	movs	r0, #0
 8107ede:	f04f 0c0a 	mov.w	ip, #10
 8107ee2:	4621      	mov	r1, r4
 8107ee4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8107ee8:	3b30      	subs	r3, #48	@ 0x30
 8107eea:	2b09      	cmp	r3, #9
 8107eec:	d94b      	bls.n	8107f86 <_vfiprintf_r+0x1a2>
 8107eee:	b1b0      	cbz	r0, 8107f1e <_vfiprintf_r+0x13a>
 8107ef0:	9207      	str	r2, [sp, #28]
 8107ef2:	e014      	b.n	8107f1e <_vfiprintf_r+0x13a>
 8107ef4:	eba0 0308 	sub.w	r3, r0, r8
 8107ef8:	fa09 f303 	lsl.w	r3, r9, r3
 8107efc:	4313      	orrs	r3, r2
 8107efe:	9304      	str	r3, [sp, #16]
 8107f00:	46a2      	mov	sl, r4
 8107f02:	e7d2      	b.n	8107eaa <_vfiprintf_r+0xc6>
 8107f04:	9b03      	ldr	r3, [sp, #12]
 8107f06:	1d19      	adds	r1, r3, #4
 8107f08:	681b      	ldr	r3, [r3, #0]
 8107f0a:	9103      	str	r1, [sp, #12]
 8107f0c:	2b00      	cmp	r3, #0
 8107f0e:	bfbb      	ittet	lt
 8107f10:	425b      	neglt	r3, r3
 8107f12:	f042 0202 	orrlt.w	r2, r2, #2
 8107f16:	9307      	strge	r3, [sp, #28]
 8107f18:	9307      	strlt	r3, [sp, #28]
 8107f1a:	bfb8      	it	lt
 8107f1c:	9204      	strlt	r2, [sp, #16]
 8107f1e:	7823      	ldrb	r3, [r4, #0]
 8107f20:	2b2e      	cmp	r3, #46	@ 0x2e
 8107f22:	d10a      	bne.n	8107f3a <_vfiprintf_r+0x156>
 8107f24:	7863      	ldrb	r3, [r4, #1]
 8107f26:	2b2a      	cmp	r3, #42	@ 0x2a
 8107f28:	d132      	bne.n	8107f90 <_vfiprintf_r+0x1ac>
 8107f2a:	9b03      	ldr	r3, [sp, #12]
 8107f2c:	1d1a      	adds	r2, r3, #4
 8107f2e:	681b      	ldr	r3, [r3, #0]
 8107f30:	9203      	str	r2, [sp, #12]
 8107f32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8107f36:	3402      	adds	r4, #2
 8107f38:	9305      	str	r3, [sp, #20]
 8107f3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8108010 <_vfiprintf_r+0x22c>
 8107f3e:	7821      	ldrb	r1, [r4, #0]
 8107f40:	2203      	movs	r2, #3
 8107f42:	4650      	mov	r0, sl
 8107f44:	f7f8 f9cc 	bl	81002e0 <memchr>
 8107f48:	b138      	cbz	r0, 8107f5a <_vfiprintf_r+0x176>
 8107f4a:	9b04      	ldr	r3, [sp, #16]
 8107f4c:	eba0 000a 	sub.w	r0, r0, sl
 8107f50:	2240      	movs	r2, #64	@ 0x40
 8107f52:	4082      	lsls	r2, r0
 8107f54:	4313      	orrs	r3, r2
 8107f56:	3401      	adds	r4, #1
 8107f58:	9304      	str	r3, [sp, #16]
 8107f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8107f5e:	4829      	ldr	r0, [pc, #164]	@ (8108004 <_vfiprintf_r+0x220>)
 8107f60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8107f64:	2206      	movs	r2, #6
 8107f66:	f7f8 f9bb 	bl	81002e0 <memchr>
 8107f6a:	2800      	cmp	r0, #0
 8107f6c:	d03f      	beq.n	8107fee <_vfiprintf_r+0x20a>
 8107f6e:	4b26      	ldr	r3, [pc, #152]	@ (8108008 <_vfiprintf_r+0x224>)
 8107f70:	bb1b      	cbnz	r3, 8107fba <_vfiprintf_r+0x1d6>
 8107f72:	9b03      	ldr	r3, [sp, #12]
 8107f74:	3307      	adds	r3, #7
 8107f76:	f023 0307 	bic.w	r3, r3, #7
 8107f7a:	3308      	adds	r3, #8
 8107f7c:	9303      	str	r3, [sp, #12]
 8107f7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8107f80:	443b      	add	r3, r7
 8107f82:	9309      	str	r3, [sp, #36]	@ 0x24
 8107f84:	e76a      	b.n	8107e5c <_vfiprintf_r+0x78>
 8107f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8107f8a:	460c      	mov	r4, r1
 8107f8c:	2001      	movs	r0, #1
 8107f8e:	e7a8      	b.n	8107ee2 <_vfiprintf_r+0xfe>
 8107f90:	2300      	movs	r3, #0
 8107f92:	3401      	adds	r4, #1
 8107f94:	9305      	str	r3, [sp, #20]
 8107f96:	4619      	mov	r1, r3
 8107f98:	f04f 0c0a 	mov.w	ip, #10
 8107f9c:	4620      	mov	r0, r4
 8107f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8107fa2:	3a30      	subs	r2, #48	@ 0x30
 8107fa4:	2a09      	cmp	r2, #9
 8107fa6:	d903      	bls.n	8107fb0 <_vfiprintf_r+0x1cc>
 8107fa8:	2b00      	cmp	r3, #0
 8107faa:	d0c6      	beq.n	8107f3a <_vfiprintf_r+0x156>
 8107fac:	9105      	str	r1, [sp, #20]
 8107fae:	e7c4      	b.n	8107f3a <_vfiprintf_r+0x156>
 8107fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8107fb4:	4604      	mov	r4, r0
 8107fb6:	2301      	movs	r3, #1
 8107fb8:	e7f0      	b.n	8107f9c <_vfiprintf_r+0x1b8>
 8107fba:	ab03      	add	r3, sp, #12
 8107fbc:	9300      	str	r3, [sp, #0]
 8107fbe:	462a      	mov	r2, r5
 8107fc0:	4b12      	ldr	r3, [pc, #72]	@ (810800c <_vfiprintf_r+0x228>)
 8107fc2:	a904      	add	r1, sp, #16
 8107fc4:	4630      	mov	r0, r6
 8107fc6:	f7fb feb7 	bl	8103d38 <_printf_float>
 8107fca:	4607      	mov	r7, r0
 8107fcc:	1c78      	adds	r0, r7, #1
 8107fce:	d1d6      	bne.n	8107f7e <_vfiprintf_r+0x19a>
 8107fd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8107fd2:	07d9      	lsls	r1, r3, #31
 8107fd4:	d405      	bmi.n	8107fe2 <_vfiprintf_r+0x1fe>
 8107fd6:	89ab      	ldrh	r3, [r5, #12]
 8107fd8:	059a      	lsls	r2, r3, #22
 8107fda:	d402      	bmi.n	8107fe2 <_vfiprintf_r+0x1fe>
 8107fdc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8107fde:	f7fd fc29 	bl	8105834 <__retarget_lock_release_recursive>
 8107fe2:	89ab      	ldrh	r3, [r5, #12]
 8107fe4:	065b      	lsls	r3, r3, #25
 8107fe6:	f53f af1f 	bmi.w	8107e28 <_vfiprintf_r+0x44>
 8107fea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8107fec:	e71e      	b.n	8107e2c <_vfiprintf_r+0x48>
 8107fee:	ab03      	add	r3, sp, #12
 8107ff0:	9300      	str	r3, [sp, #0]
 8107ff2:	462a      	mov	r2, r5
 8107ff4:	4b05      	ldr	r3, [pc, #20]	@ (810800c <_vfiprintf_r+0x228>)
 8107ff6:	a904      	add	r1, sp, #16
 8107ff8:	4630      	mov	r0, r6
 8107ffa:	f7fc f935 	bl	8104268 <_printf_i>
 8107ffe:	e7e4      	b.n	8107fca <_vfiprintf_r+0x1e6>
 8108000:	0810857e 	.word	0x0810857e
 8108004:	08108588 	.word	0x08108588
 8108008:	08103d39 	.word	0x08103d39
 810800c:	08107dc1 	.word	0x08107dc1
 8108010:	08108584 	.word	0x08108584

08108014 <__swbuf_r>:
 8108014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8108016:	460e      	mov	r6, r1
 8108018:	4614      	mov	r4, r2
 810801a:	4605      	mov	r5, r0
 810801c:	b118      	cbz	r0, 8108026 <__swbuf_r+0x12>
 810801e:	6a03      	ldr	r3, [r0, #32]
 8108020:	b90b      	cbnz	r3, 8108026 <__swbuf_r+0x12>
 8108022:	f7fc fd01 	bl	8104a28 <__sinit>
 8108026:	69a3      	ldr	r3, [r4, #24]
 8108028:	60a3      	str	r3, [r4, #8]
 810802a:	89a3      	ldrh	r3, [r4, #12]
 810802c:	071a      	lsls	r2, r3, #28
 810802e:	d501      	bpl.n	8108034 <__swbuf_r+0x20>
 8108030:	6923      	ldr	r3, [r4, #16]
 8108032:	b943      	cbnz	r3, 8108046 <__swbuf_r+0x32>
 8108034:	4621      	mov	r1, r4
 8108036:	4628      	mov	r0, r5
 8108038:	f000 f82a 	bl	8108090 <__swsetup_r>
 810803c:	b118      	cbz	r0, 8108046 <__swbuf_r+0x32>
 810803e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8108042:	4638      	mov	r0, r7
 8108044:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8108046:	6823      	ldr	r3, [r4, #0]
 8108048:	6922      	ldr	r2, [r4, #16]
 810804a:	1a98      	subs	r0, r3, r2
 810804c:	6963      	ldr	r3, [r4, #20]
 810804e:	b2f6      	uxtb	r6, r6
 8108050:	4283      	cmp	r3, r0
 8108052:	4637      	mov	r7, r6
 8108054:	dc05      	bgt.n	8108062 <__swbuf_r+0x4e>
 8108056:	4621      	mov	r1, r4
 8108058:	4628      	mov	r0, r5
 810805a:	f7ff f829 	bl	81070b0 <_fflush_r>
 810805e:	2800      	cmp	r0, #0
 8108060:	d1ed      	bne.n	810803e <__swbuf_r+0x2a>
 8108062:	68a3      	ldr	r3, [r4, #8]
 8108064:	3b01      	subs	r3, #1
 8108066:	60a3      	str	r3, [r4, #8]
 8108068:	6823      	ldr	r3, [r4, #0]
 810806a:	1c5a      	adds	r2, r3, #1
 810806c:	6022      	str	r2, [r4, #0]
 810806e:	701e      	strb	r6, [r3, #0]
 8108070:	6962      	ldr	r2, [r4, #20]
 8108072:	1c43      	adds	r3, r0, #1
 8108074:	429a      	cmp	r2, r3
 8108076:	d004      	beq.n	8108082 <__swbuf_r+0x6e>
 8108078:	89a3      	ldrh	r3, [r4, #12]
 810807a:	07db      	lsls	r3, r3, #31
 810807c:	d5e1      	bpl.n	8108042 <__swbuf_r+0x2e>
 810807e:	2e0a      	cmp	r6, #10
 8108080:	d1df      	bne.n	8108042 <__swbuf_r+0x2e>
 8108082:	4621      	mov	r1, r4
 8108084:	4628      	mov	r0, r5
 8108086:	f7ff f813 	bl	81070b0 <_fflush_r>
 810808a:	2800      	cmp	r0, #0
 810808c:	d0d9      	beq.n	8108042 <__swbuf_r+0x2e>
 810808e:	e7d6      	b.n	810803e <__swbuf_r+0x2a>

08108090 <__swsetup_r>:
 8108090:	b538      	push	{r3, r4, r5, lr}
 8108092:	4b29      	ldr	r3, [pc, #164]	@ (8108138 <__swsetup_r+0xa8>)
 8108094:	4605      	mov	r5, r0
 8108096:	6818      	ldr	r0, [r3, #0]
 8108098:	460c      	mov	r4, r1
 810809a:	b118      	cbz	r0, 81080a4 <__swsetup_r+0x14>
 810809c:	6a03      	ldr	r3, [r0, #32]
 810809e:	b90b      	cbnz	r3, 81080a4 <__swsetup_r+0x14>
 81080a0:	f7fc fcc2 	bl	8104a28 <__sinit>
 81080a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81080a8:	0719      	lsls	r1, r3, #28
 81080aa:	d422      	bmi.n	81080f2 <__swsetup_r+0x62>
 81080ac:	06da      	lsls	r2, r3, #27
 81080ae:	d407      	bmi.n	81080c0 <__swsetup_r+0x30>
 81080b0:	2209      	movs	r2, #9
 81080b2:	602a      	str	r2, [r5, #0]
 81080b4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 81080b8:	81a3      	strh	r3, [r4, #12]
 81080ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 81080be:	e033      	b.n	8108128 <__swsetup_r+0x98>
 81080c0:	0758      	lsls	r0, r3, #29
 81080c2:	d512      	bpl.n	81080ea <__swsetup_r+0x5a>
 81080c4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 81080c6:	b141      	cbz	r1, 81080da <__swsetup_r+0x4a>
 81080c8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 81080cc:	4299      	cmp	r1, r3
 81080ce:	d002      	beq.n	81080d6 <__swsetup_r+0x46>
 81080d0:	4628      	mov	r0, r5
 81080d2:	f7ff fdf3 	bl	8107cbc <_free_r>
 81080d6:	2300      	movs	r3, #0
 81080d8:	6363      	str	r3, [r4, #52]	@ 0x34
 81080da:	89a3      	ldrh	r3, [r4, #12]
 81080dc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 81080e0:	81a3      	strh	r3, [r4, #12]
 81080e2:	2300      	movs	r3, #0
 81080e4:	6063      	str	r3, [r4, #4]
 81080e6:	6923      	ldr	r3, [r4, #16]
 81080e8:	6023      	str	r3, [r4, #0]
 81080ea:	89a3      	ldrh	r3, [r4, #12]
 81080ec:	f043 0308 	orr.w	r3, r3, #8
 81080f0:	81a3      	strh	r3, [r4, #12]
 81080f2:	6923      	ldr	r3, [r4, #16]
 81080f4:	b94b      	cbnz	r3, 810810a <__swsetup_r+0x7a>
 81080f6:	89a3      	ldrh	r3, [r4, #12]
 81080f8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 81080fc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8108100:	d003      	beq.n	810810a <__swsetup_r+0x7a>
 8108102:	4621      	mov	r1, r4
 8108104:	4628      	mov	r0, r5
 8108106:	f000 f83f 	bl	8108188 <__smakebuf_r>
 810810a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 810810e:	f013 0201 	ands.w	r2, r3, #1
 8108112:	d00a      	beq.n	810812a <__swsetup_r+0x9a>
 8108114:	2200      	movs	r2, #0
 8108116:	60a2      	str	r2, [r4, #8]
 8108118:	6962      	ldr	r2, [r4, #20]
 810811a:	4252      	negs	r2, r2
 810811c:	61a2      	str	r2, [r4, #24]
 810811e:	6922      	ldr	r2, [r4, #16]
 8108120:	b942      	cbnz	r2, 8108134 <__swsetup_r+0xa4>
 8108122:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8108126:	d1c5      	bne.n	81080b4 <__swsetup_r+0x24>
 8108128:	bd38      	pop	{r3, r4, r5, pc}
 810812a:	0799      	lsls	r1, r3, #30
 810812c:	bf58      	it	pl
 810812e:	6962      	ldrpl	r2, [r4, #20]
 8108130:	60a2      	str	r2, [r4, #8]
 8108132:	e7f4      	b.n	810811e <__swsetup_r+0x8e>
 8108134:	2000      	movs	r0, #0
 8108136:	e7f7      	b.n	8108128 <__swsetup_r+0x98>
 8108138:	10000188 	.word	0x10000188

0810813c <__swhatbuf_r>:
 810813c:	b570      	push	{r4, r5, r6, lr}
 810813e:	460c      	mov	r4, r1
 8108140:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8108144:	2900      	cmp	r1, #0
 8108146:	b096      	sub	sp, #88	@ 0x58
 8108148:	4615      	mov	r5, r2
 810814a:	461e      	mov	r6, r3
 810814c:	da0d      	bge.n	810816a <__swhatbuf_r+0x2e>
 810814e:	89a3      	ldrh	r3, [r4, #12]
 8108150:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8108154:	f04f 0100 	mov.w	r1, #0
 8108158:	bf14      	ite	ne
 810815a:	2340      	movne	r3, #64	@ 0x40
 810815c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8108160:	2000      	movs	r0, #0
 8108162:	6031      	str	r1, [r6, #0]
 8108164:	602b      	str	r3, [r5, #0]
 8108166:	b016      	add	sp, #88	@ 0x58
 8108168:	bd70      	pop	{r4, r5, r6, pc}
 810816a:	466a      	mov	r2, sp
 810816c:	f000 f848 	bl	8108200 <_fstat_r>
 8108170:	2800      	cmp	r0, #0
 8108172:	dbec      	blt.n	810814e <__swhatbuf_r+0x12>
 8108174:	9901      	ldr	r1, [sp, #4]
 8108176:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 810817a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 810817e:	4259      	negs	r1, r3
 8108180:	4159      	adcs	r1, r3
 8108182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8108186:	e7eb      	b.n	8108160 <__swhatbuf_r+0x24>

08108188 <__smakebuf_r>:
 8108188:	898b      	ldrh	r3, [r1, #12]
 810818a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 810818c:	079d      	lsls	r5, r3, #30
 810818e:	4606      	mov	r6, r0
 8108190:	460c      	mov	r4, r1
 8108192:	d507      	bpl.n	81081a4 <__smakebuf_r+0x1c>
 8108194:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8108198:	6023      	str	r3, [r4, #0]
 810819a:	6123      	str	r3, [r4, #16]
 810819c:	2301      	movs	r3, #1
 810819e:	6163      	str	r3, [r4, #20]
 81081a0:	b003      	add	sp, #12
 81081a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 81081a4:	ab01      	add	r3, sp, #4
 81081a6:	466a      	mov	r2, sp
 81081a8:	f7ff ffc8 	bl	810813c <__swhatbuf_r>
 81081ac:	9f00      	ldr	r7, [sp, #0]
 81081ae:	4605      	mov	r5, r0
 81081b0:	4639      	mov	r1, r7
 81081b2:	4630      	mov	r0, r6
 81081b4:	f7fe fe66 	bl	8106e84 <_malloc_r>
 81081b8:	b948      	cbnz	r0, 81081ce <__smakebuf_r+0x46>
 81081ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81081be:	059a      	lsls	r2, r3, #22
 81081c0:	d4ee      	bmi.n	81081a0 <__smakebuf_r+0x18>
 81081c2:	f023 0303 	bic.w	r3, r3, #3
 81081c6:	f043 0302 	orr.w	r3, r3, #2
 81081ca:	81a3      	strh	r3, [r4, #12]
 81081cc:	e7e2      	b.n	8108194 <__smakebuf_r+0xc>
 81081ce:	89a3      	ldrh	r3, [r4, #12]
 81081d0:	6020      	str	r0, [r4, #0]
 81081d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 81081d6:	81a3      	strh	r3, [r4, #12]
 81081d8:	9b01      	ldr	r3, [sp, #4]
 81081da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 81081de:	b15b      	cbz	r3, 81081f8 <__smakebuf_r+0x70>
 81081e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81081e4:	4630      	mov	r0, r6
 81081e6:	f000 f81d 	bl	8108224 <_isatty_r>
 81081ea:	b128      	cbz	r0, 81081f8 <__smakebuf_r+0x70>
 81081ec:	89a3      	ldrh	r3, [r4, #12]
 81081ee:	f023 0303 	bic.w	r3, r3, #3
 81081f2:	f043 0301 	orr.w	r3, r3, #1
 81081f6:	81a3      	strh	r3, [r4, #12]
 81081f8:	89a3      	ldrh	r3, [r4, #12]
 81081fa:	431d      	orrs	r5, r3
 81081fc:	81a5      	strh	r5, [r4, #12]
 81081fe:	e7cf      	b.n	81081a0 <__smakebuf_r+0x18>

08108200 <_fstat_r>:
 8108200:	b538      	push	{r3, r4, r5, lr}
 8108202:	4d07      	ldr	r5, [pc, #28]	@ (8108220 <_fstat_r+0x20>)
 8108204:	2300      	movs	r3, #0
 8108206:	4604      	mov	r4, r0
 8108208:	4608      	mov	r0, r1
 810820a:	4611      	mov	r1, r2
 810820c:	602b      	str	r3, [r5, #0]
 810820e:	f7f9 f8a0 	bl	8101352 <_fstat>
 8108212:	1c43      	adds	r3, r0, #1
 8108214:	d102      	bne.n	810821c <_fstat_r+0x1c>
 8108216:	682b      	ldr	r3, [r5, #0]
 8108218:	b103      	cbz	r3, 810821c <_fstat_r+0x1c>
 810821a:	6023      	str	r3, [r4, #0]
 810821c:	bd38      	pop	{r3, r4, r5, pc}
 810821e:	bf00      	nop
 8108220:	10000484 	.word	0x10000484

08108224 <_isatty_r>:
 8108224:	b538      	push	{r3, r4, r5, lr}
 8108226:	4d06      	ldr	r5, [pc, #24]	@ (8108240 <_isatty_r+0x1c>)
 8108228:	2300      	movs	r3, #0
 810822a:	4604      	mov	r4, r0
 810822c:	4608      	mov	r0, r1
 810822e:	602b      	str	r3, [r5, #0]
 8108230:	f7f9 f89f 	bl	8101372 <_isatty>
 8108234:	1c43      	adds	r3, r0, #1
 8108236:	d102      	bne.n	810823e <_isatty_r+0x1a>
 8108238:	682b      	ldr	r3, [r5, #0]
 810823a:	b103      	cbz	r3, 810823e <_isatty_r+0x1a>
 810823c:	6023      	str	r3, [r4, #0]
 810823e:	bd38      	pop	{r3, r4, r5, pc}
 8108240:	10000484 	.word	0x10000484

08108244 <_raise_r>:
 8108244:	291f      	cmp	r1, #31
 8108246:	b538      	push	{r3, r4, r5, lr}
 8108248:	4605      	mov	r5, r0
 810824a:	460c      	mov	r4, r1
 810824c:	d904      	bls.n	8108258 <_raise_r+0x14>
 810824e:	2316      	movs	r3, #22
 8108250:	6003      	str	r3, [r0, #0]
 8108252:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8108256:	bd38      	pop	{r3, r4, r5, pc}
 8108258:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 810825a:	b112      	cbz	r2, 8108262 <_raise_r+0x1e>
 810825c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8108260:	b94b      	cbnz	r3, 8108276 <_raise_r+0x32>
 8108262:	4628      	mov	r0, r5
 8108264:	f000 f830 	bl	81082c8 <_getpid_r>
 8108268:	4622      	mov	r2, r4
 810826a:	4601      	mov	r1, r0
 810826c:	4628      	mov	r0, r5
 810826e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8108272:	f000 b817 	b.w	81082a4 <_kill_r>
 8108276:	2b01      	cmp	r3, #1
 8108278:	d00a      	beq.n	8108290 <_raise_r+0x4c>
 810827a:	1c59      	adds	r1, r3, #1
 810827c:	d103      	bne.n	8108286 <_raise_r+0x42>
 810827e:	2316      	movs	r3, #22
 8108280:	6003      	str	r3, [r0, #0]
 8108282:	2001      	movs	r0, #1
 8108284:	e7e7      	b.n	8108256 <_raise_r+0x12>
 8108286:	2100      	movs	r1, #0
 8108288:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 810828c:	4620      	mov	r0, r4
 810828e:	4798      	blx	r3
 8108290:	2000      	movs	r0, #0
 8108292:	e7e0      	b.n	8108256 <_raise_r+0x12>

08108294 <raise>:
 8108294:	4b02      	ldr	r3, [pc, #8]	@ (81082a0 <raise+0xc>)
 8108296:	4601      	mov	r1, r0
 8108298:	6818      	ldr	r0, [r3, #0]
 810829a:	f7ff bfd3 	b.w	8108244 <_raise_r>
 810829e:	bf00      	nop
 81082a0:	10000188 	.word	0x10000188

081082a4 <_kill_r>:
 81082a4:	b538      	push	{r3, r4, r5, lr}
 81082a6:	4d07      	ldr	r5, [pc, #28]	@ (81082c4 <_kill_r+0x20>)
 81082a8:	2300      	movs	r3, #0
 81082aa:	4604      	mov	r4, r0
 81082ac:	4608      	mov	r0, r1
 81082ae:	4611      	mov	r1, r2
 81082b0:	602b      	str	r3, [r5, #0]
 81082b2:	f7f8 ffee 	bl	8101292 <_kill>
 81082b6:	1c43      	adds	r3, r0, #1
 81082b8:	d102      	bne.n	81082c0 <_kill_r+0x1c>
 81082ba:	682b      	ldr	r3, [r5, #0]
 81082bc:	b103      	cbz	r3, 81082c0 <_kill_r+0x1c>
 81082be:	6023      	str	r3, [r4, #0]
 81082c0:	bd38      	pop	{r3, r4, r5, pc}
 81082c2:	bf00      	nop
 81082c4:	10000484 	.word	0x10000484

081082c8 <_getpid_r>:
 81082c8:	f7f8 bfdb 	b.w	8101282 <_getpid>

081082cc <_init>:
 81082cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81082ce:	bf00      	nop
 81082d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81082d2:	bc08      	pop	{r3}
 81082d4:	469e      	mov	lr, r3
 81082d6:	4770      	bx	lr

081082d8 <_fini>:
 81082d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81082da:	bf00      	nop
 81082dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81082de:	bc08      	pop	{r3}
 81082e0:	469e      	mov	lr, r3
 81082e2:	4770      	bx	lr
