
RTOS_E1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008694  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000045c  08008938  08008938  00009938  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d94  08008d94  0000a1f4  2**0
                  CONTENTS
  4 .ARM          00000008  08008d94  08008d94  00009d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d9c  08008d9c  0000a1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d9c  08008d9c  00009d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008da0  08008da0  00009da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  24000000  08008da4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  240001f4  08008f98  0000a1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  24000414  08008f98  0000a414  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010591  00000000  00000000  0000a222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002214  00000000  00000000  0001a7b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c28  00000000  00000000  0001c9c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000093f  00000000  00000000  0001d5f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003a565  00000000  00000000  0001df2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010590  00000000  00000000  00058494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017cf9e  00000000  00000000  00068a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e59c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004480  00000000  00000000  001e5a08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  001e9e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800891c 	.word	0x0800891c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	0800891c 	.word	0x0800891c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000718:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b9e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ba0:	bf00      	nop
 8000ba2:	4b34      	ldr	r3, [pc, #208]	@ (8000c74 <main+0xe0>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d004      	beq.n	8000bb8 <main+0x24>
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	1e5a      	subs	r2, r3, #1
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	dcf4      	bgt.n	8000ba2 <main+0xe>
  if ( timeout < 0 )
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <main+0x2e>
  {
  Error_Handler();
 8000bbe:	f000 f96f 	bl	8000ea0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc2:	f000 fc97 	bl	80014f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f859 	bl	8000c7c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bca:	4b2a      	ldr	r3, [pc, #168]	@ (8000c74 <main+0xe0>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a28      	ldr	r2, [pc, #160]	@ (8000c74 <main+0xe0>)
 8000bd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bda:	4b26      	ldr	r3, [pc, #152]	@ (8000c74 <main+0xe0>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f001 f87f 	bl	8001cec <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f001 f895 	bl	8001d20 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000bf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bfa:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000bfc:	bf00      	nop
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	@ (8000c74 <main+0xe0>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d104      	bne.n	8000c14 <main+0x80>
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	1e5a      	subs	r2, r3, #1
 8000c0e:	607a      	str	r2, [r7, #4]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dcf4      	bgt.n	8000bfe <main+0x6a>
if ( timeout < 0 )
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da01      	bge.n	8000c1e <main+0x8a>
{
Error_Handler();
 8000c1a:	f000 f941 	bl	8000ea0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f000 f897 	bl	8000d50 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000c22:	2000      	movs	r0, #0
 8000c24:	f000 fa82 	bl	800112c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000c28:	2001      	movs	r0, #1
 8000c2a:	f000 fa7f 	bl	800112c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000c2e:	2002      	movs	r0, #2
 8000c30:	f000 fa7c 	bl	800112c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000c34:	2101      	movs	r1, #1
 8000c36:	2000      	movs	r0, #0
 8000c38:	f000 faee 	bl	8001218 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <main+0xe4>)
 8000c3e:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c42:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <main+0xe4>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <main+0xe4>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <main+0xe4>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <main+0xe4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000c5c:	4906      	ldr	r1, [pc, #24]	@ (8000c78 <main+0xe4>)
 8000c5e:	2000      	movs	r0, #0
 8000c60:	f000 fb6a 	bl	8001338 <BSP_COM_Init>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d002      	beq.n	8000c70 <main+0xdc>
  {
    Error_Handler();
 8000c6a:	f000 f919 	bl	8000ea0 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c6e:	bf00      	nop
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <main+0xdc>
 8000c74:	58024400 	.word	0x58024400
 8000c78:	24000210 	.word	0x24000210

08000c7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b09c      	sub	sp, #112	@ 0x70
 8000c80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c82:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c86:	224c      	movs	r2, #76	@ 0x4c
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f005 f934 	bl	8005ef8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c90:	1d3b      	adds	r3, r7, #4
 8000c92:	2220      	movs	r2, #32
 8000c94:	2100      	movs	r1, #0
 8000c96:	4618      	mov	r0, r3
 8000c98:	f005 f92e 	bl	8005ef8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c9c:	2004      	movs	r0, #4
 8000c9e:	f001 f853 	bl	8001d48 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	603b      	str	r3, [r7, #0]
 8000ca6:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000caa:	4a27      	ldr	r2, [pc, #156]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000cac:	f023 0301 	bic.w	r3, r3, #1
 8000cb0:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000cb2:	4b25      	ldr	r3, [pc, #148]	@ (8000d48 <SystemClock_Config+0xcc>)
 8000cb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cb6:	f003 0301 	and.w	r3, r3, #1
 8000cba:	603b      	str	r3, [r7, #0]
 8000cbc:	4b23      	ldr	r3, [pc, #140]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000cc4:	4a21      	ldr	r2, [pc, #132]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cca:	6193      	str	r3, [r2, #24]
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cce:	699b      	ldr	r3, [r3, #24]
 8000cd0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000cd4:	603b      	str	r3, [r7, #0]
 8000cd6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cd8:	bf00      	nop
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <SystemClock_Config+0xd0>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000ce2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000ce6:	d1f8      	bne.n	8000cda <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000cec:	2301      	movs	r3, #1
 8000cee:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000cf0:	2340      	movs	r3, #64	@ 0x40
 8000cf2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f001 f87d 	bl	8001dfc <HAL_RCC_OscConfig>
 8000d02:	4603      	mov	r3, r0
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d001      	beq.n	8000d0c <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000d08:	f000 f8ca 	bl	8000ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d0c:	233f      	movs	r3, #63	@ 0x3f
 8000d0e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d14:	2300      	movs	r3, #0
 8000d16:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d20:	2340      	movs	r3, #64	@ 0x40
 8000d22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d24:	2300      	movs	r3, #0
 8000d26:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	2101      	movs	r1, #1
 8000d30:	4618      	mov	r0, r3
 8000d32:	f001 fcbd 	bl	80026b0 <HAL_RCC_ClockConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000d3c:	f000 f8b0 	bl	8000ea0 <Error_Handler>
  }
}
 8000d40:	bf00      	nop
 8000d42:	3770      	adds	r7, #112	@ 0x70
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	58000400 	.word	0x58000400
 8000d4c:	58024800 	.word	0x58024800

08000d50 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b08a      	sub	sp, #40	@ 0x28
 8000d54:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d56:	f107 0314 	add.w	r3, r7, #20
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d66:	4b49      	ldr	r3, [pc, #292]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d6c:	4a47      	ldr	r2, [pc, #284]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d6e:	f043 0304 	orr.w	r3, r3, #4
 8000d72:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d76:	4b45      	ldr	r3, [pc, #276]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d7c:	f003 0304 	and.w	r3, r3, #4
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d84:	4b41      	ldr	r3, [pc, #260]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d8a:	4a40      	ldr	r2, [pc, #256]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d8c:	f043 0301 	orr.w	r3, r3, #1
 8000d90:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d94:	4b3d      	ldr	r3, [pc, #244]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000d96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
 8000da0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	4b3a      	ldr	r3, [pc, #232]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000da4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000da8:	4a38      	ldr	r2, [pc, #224]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000daa:	f043 0302 	orr.w	r3, r3, #2
 8000dae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000db2:	4b36      	ldr	r3, [pc, #216]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000db4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000db8:	f003 0302 	and.w	r3, r3, #2
 8000dbc:	60bb      	str	r3, [r7, #8]
 8000dbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dc0:	4b32      	ldr	r3, [pc, #200]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000dc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dc6:	4a31      	ldr	r2, [pc, #196]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000dc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dcc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8000e8c <MX_GPIO_Init+0x13c>)
 8000dd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000dda:	607b      	str	r3, [r7, #4]
 8000ddc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000dde:	2332      	movs	r3, #50	@ 0x32
 8000de0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dea:	2300      	movs	r3, #0
 8000dec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dee:	230b      	movs	r3, #11
 8000df0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000df2:	f107 0314 	add.w	r3, r7, #20
 8000df6:	4619      	mov	r1, r3
 8000df8:	4825      	ldr	r0, [pc, #148]	@ (8000e90 <MX_GPIO_Init+0x140>)
 8000dfa:	f000 fdad 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000dfe:	2386      	movs	r3, #134	@ 0x86
 8000e00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e02:	2302      	movs	r3, #2
 8000e04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e0e:	230b      	movs	r3, #11
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	481e      	ldr	r0, [pc, #120]	@ (8000e94 <MX_GPIO_Init+0x144>)
 8000e1a:	f000 fd9d 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e24:	2302      	movs	r3, #2
 8000e26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e30:	230b      	movs	r3, #11
 8000e32:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e34:	f107 0314 	add.w	r3, r7, #20
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4817      	ldr	r0, [pc, #92]	@ (8000e98 <MX_GPIO_Init+0x148>)
 8000e3c:	f000 fd8c 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e40:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000e44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e46:	2302      	movs	r3, #2
 8000e48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e52:	230a      	movs	r3, #10
 8000e54:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e56:	f107 0314 	add.w	r3, r7, #20
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <MX_GPIO_Init+0x144>)
 8000e5e:	f000 fd7b 	bl	8001958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000e62:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000e66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e70:	2300      	movs	r3, #0
 8000e72:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e74:	230b      	movs	r3, #11
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4807      	ldr	r0, [pc, #28]	@ (8000e9c <MX_GPIO_Init+0x14c>)
 8000e80:	f000 fd6a 	bl	8001958 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	@ 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	58020800 	.word	0x58020800
 8000e94:	58020000 	.word	0x58020000
 8000e98:	58020400 	.word	0x58020400
 8000e9c:	58021800 	.word	0x58021800

08000ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea4:	b672      	cpsid	i
}
 8000ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ea8:	bf00      	nop
 8000eaa:	e7fd      	b.n	8000ea8 <Error_Handler+0x8>

08000eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <HAL_MspInit+0x30>)
 8000eb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000eb8:	4a08      	ldr	r2, [pc, #32]	@ (8000edc <HAL_MspInit+0x30>)
 8000eba:	f043 0302 	orr.w	r3, r3, #2
 8000ebe:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <HAL_MspInit+0x30>)
 8000ec4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ec8:	f003 0302 	and.w	r3, r3, #2
 8000ecc:	607b      	str	r3, [r7, #4]
 8000ece:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	58024400 	.word	0x58024400

08000ee0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ee4:	bf00      	nop
 8000ee6:	e7fd      	b.n	8000ee4 <NMI_Handler+0x4>

08000ee8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eec:	bf00      	nop
 8000eee:	e7fd      	b.n	8000eec <HardFault_Handler+0x4>

08000ef0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ef4:	bf00      	nop
 8000ef6:	e7fd      	b.n	8000ef4 <MemManage_Handler+0x4>

08000ef8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000efc:	bf00      	nop
 8000efe:	e7fd      	b.n	8000efc <BusFault_Handler+0x4>

08000f00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <UsageFault_Handler+0x4>

08000f08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f16:	b480      	push	{r7}
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1a:	bf00      	nop
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr

08000f24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f28:	bf00      	nop
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr

08000f32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f32:	b580      	push	{r7, lr}
 8000f34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f36:	f000 fb4f 	bl	80015d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000f42:	2000      	movs	r0, #0
 8000f44:	f000 f9da 	bl	80012fc <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	bd80      	pop	{r7, pc}

08000f4c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  return 1;
 8000f50:	2301      	movs	r3, #1
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr

08000f5c <_kill>:

int _kill(int pid, int sig)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
 8000f64:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f66:	f004 ffd3 	bl	8005f10 <__errno>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2216      	movs	r2, #22
 8000f6e:	601a      	str	r2, [r3, #0]
  return -1;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3708      	adds	r7, #8
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_exit>:

void _exit (int status)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000f88:	6878      	ldr	r0, [r7, #4]
 8000f8a:	f7ff ffe7 	bl	8000f5c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f8e:	bf00      	nop
 8000f90:	e7fd      	b.n	8000f8e <_exit+0x12>

08000f92 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b086      	sub	sp, #24
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	60f8      	str	r0, [r7, #12]
 8000f9a:	60b9      	str	r1, [r7, #8]
 8000f9c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	e00a      	b.n	8000fba <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fa4:	f3af 8000 	nop.w
 8000fa8:	4601      	mov	r1, r0
 8000faa:	68bb      	ldr	r3, [r7, #8]
 8000fac:	1c5a      	adds	r2, r3, #1
 8000fae:	60ba      	str	r2, [r7, #8]
 8000fb0:	b2ca      	uxtb	r2, r1
 8000fb2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	697a      	ldr	r2, [r7, #20]
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	dbf0      	blt.n	8000fa4 <_read+0x12>
  }

  return len;
 8000fc2:	687b      	ldr	r3, [r7, #4]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3718      	adds	r7, #24
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b086      	sub	sp, #24
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	60f8      	str	r0, [r7, #12]
 8000fd4:	60b9      	str	r1, [r7, #8]
 8000fd6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	e009      	b.n	8000ff2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fde:	68bb      	ldr	r3, [r7, #8]
 8000fe0:	1c5a      	adds	r2, r3, #1
 8000fe2:	60ba      	str	r2, [r7, #8]
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f000 fa08 	bl	80013fc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fec:	697b      	ldr	r3, [r7, #20]
 8000fee:	3301      	adds	r3, #1
 8000ff0:	617b      	str	r3, [r7, #20]
 8000ff2:	697a      	ldr	r2, [r7, #20]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	429a      	cmp	r2, r3
 8000ff8:	dbf1      	blt.n	8000fde <_write+0x12>
  }
  return len;
 8000ffa:	687b      	ldr	r3, [r7, #4]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	3718      	adds	r7, #24
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}

08001004 <_close>:

int _close(int file)
{
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800100c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001010:	4618      	mov	r0, r3
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800102c:	605a      	str	r2, [r3, #4]
  return 0;
 800102e:	2300      	movs	r3, #0
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_isatty>:

int _isatty(int file)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001044:	2301      	movs	r3, #1
}
 8001046:	4618      	mov	r0, r3
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001052:	b480      	push	{r7}
 8001054:	b085      	sub	sp, #20
 8001056:	af00      	add	r7, sp, #0
 8001058:	60f8      	str	r0, [r7, #12]
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800105e:	2300      	movs	r3, #0
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001074:	4a14      	ldr	r2, [pc, #80]	@ (80010c8 <_sbrk+0x5c>)
 8001076:	4b15      	ldr	r3, [pc, #84]	@ (80010cc <_sbrk+0x60>)
 8001078:	1ad3      	subs	r3, r2, r3
 800107a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001080:	4b13      	ldr	r3, [pc, #76]	@ (80010d0 <_sbrk+0x64>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d102      	bne.n	800108e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001088:	4b11      	ldr	r3, [pc, #68]	@ (80010d0 <_sbrk+0x64>)
 800108a:	4a12      	ldr	r2, [pc, #72]	@ (80010d4 <_sbrk+0x68>)
 800108c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800108e:	4b10      	ldr	r3, [pc, #64]	@ (80010d0 <_sbrk+0x64>)
 8001090:	681a      	ldr	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4413      	add	r3, r2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	429a      	cmp	r2, r3
 800109a:	d207      	bcs.n	80010ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800109c:	f004 ff38 	bl	8005f10 <__errno>
 80010a0:	4603      	mov	r3, r0
 80010a2:	220c      	movs	r2, #12
 80010a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80010aa:	e009      	b.n	80010c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010ac:	4b08      	ldr	r3, [pc, #32]	@ (80010d0 <_sbrk+0x64>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010b2:	4b07      	ldr	r3, [pc, #28]	@ (80010d0 <_sbrk+0x64>)
 80010b4:	681a      	ldr	r2, [r3, #0]
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	4413      	add	r3, r2
 80010ba:	4a05      	ldr	r2, [pc, #20]	@ (80010d0 <_sbrk+0x64>)
 80010bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010be:	68fb      	ldr	r3, [r7, #12]
}
 80010c0:	4618      	mov	r0, r3
 80010c2:	3718      	adds	r7, #24
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	24080000 	.word	0x24080000
 80010cc:	00000400 	.word	0x00000400
 80010d0:	24000220 	.word	0x24000220
 80010d4:	24000418 	.word	0x24000418

080010d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010d8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001110 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80010dc:	f7ff fcc4 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010e0:	480c      	ldr	r0, [pc, #48]	@ (8001114 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010e2:	490d      	ldr	r1, [pc, #52]	@ (8001118 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010e4:	4a0d      	ldr	r2, [pc, #52]	@ (800111c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010e8:	e002      	b.n	80010f0 <LoopCopyDataInit>

080010ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ee:	3304      	adds	r3, #4

080010f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010f4:	d3f9      	bcc.n	80010ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010f6:	4a0a      	ldr	r2, [pc, #40]	@ (8001120 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010f8:	4c0a      	ldr	r4, [pc, #40]	@ (8001124 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010fc:	e001      	b.n	8001102 <LoopFillZerobss>

080010fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001100:	3204      	adds	r2, #4

08001102 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001102:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001104:	d3fb      	bcc.n	80010fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001106:	f004 ff09 	bl	8005f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110a:	f7ff fd43 	bl	8000b94 <main>
  bx  lr
 800110e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001110:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001114:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001118:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 800111c:	08008da4 	.word	0x08008da4
  ldr r2, =_sbss
 8001120:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8001124:	24000414 	.word	0x24000414

08001128 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001128:	e7fe      	b.n	8001128 <ADC3_IRQHandler>
	...

0800112c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b08c      	sub	sp, #48	@ 0x30
 8001130:	af00      	add	r7, sp, #0
 8001132:	4603      	mov	r3, r0
 8001134:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001136:	2300      	movs	r3, #0
 8001138:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d009      	beq.n	8001154 <BSP_LED_Init+0x28>
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	2b01      	cmp	r3, #1
 8001144:	d006      	beq.n	8001154 <BSP_LED_Init+0x28>
 8001146:	79fb      	ldrb	r3, [r7, #7]
 8001148:	2b02      	cmp	r3, #2
 800114a:	d003      	beq.n	8001154 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800114c:	f06f 0301 	mvn.w	r3, #1
 8001150:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001152:	e055      	b.n	8001200 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d10f      	bne.n	800117a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 800115a:	4b2c      	ldr	r3, [pc, #176]	@ (800120c <BSP_LED_Init+0xe0>)
 800115c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001160:	4a2a      	ldr	r2, [pc, #168]	@ (800120c <BSP_LED_Init+0xe0>)
 8001162:	f043 0302 	orr.w	r3, r3, #2
 8001166:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800116a:	4b28      	ldr	r3, [pc, #160]	@ (800120c <BSP_LED_Init+0xe0>)
 800116c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001170:	f003 0302 	and.w	r3, r3, #2
 8001174:	617b      	str	r3, [r7, #20]
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	e021      	b.n	80011be <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b01      	cmp	r3, #1
 800117e:	d10f      	bne.n	80011a0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <BSP_LED_Init+0xe0>)
 8001182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001186:	4a21      	ldr	r2, [pc, #132]	@ (800120c <BSP_LED_Init+0xe0>)
 8001188:	f043 0310 	orr.w	r3, r3, #16
 800118c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001190:	4b1e      	ldr	r3, [pc, #120]	@ (800120c <BSP_LED_Init+0xe0>)
 8001192:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	e00e      	b.n	80011be <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <BSP_LED_Init+0xe0>)
 80011a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011a6:	4a19      	ldr	r2, [pc, #100]	@ (800120c <BSP_LED_Init+0xe0>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b0:	4b16      	ldr	r3, [pc, #88]	@ (800120c <BSP_LED_Init+0xe0>)
 80011b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011b6:	f003 0302 	and.w	r3, r3, #2
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	4a13      	ldr	r2, [pc, #76]	@ (8001210 <BSP_LED_Init+0xe4>)
 80011c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011c6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80011c8:	2301      	movs	r3, #1
 80011ca:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 80011cc:	2300      	movs	r3, #0
 80011ce:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011d0:	2303      	movs	r3, #3
 80011d2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80011d4:	79fb      	ldrb	r3, [r7, #7]
 80011d6:	4a0f      	ldr	r2, [pc, #60]	@ (8001214 <BSP_LED_Init+0xe8>)
 80011d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011dc:	f107 0218 	add.w	r2, r7, #24
 80011e0:	4611      	mov	r1, r2
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 fbb8 	bl	8001958 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	4a0a      	ldr	r2, [pc, #40]	@ (8001214 <BSP_LED_Init+0xe8>)
 80011ec:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80011f0:	79fb      	ldrb	r3, [r7, #7]
 80011f2:	4a07      	ldr	r2, [pc, #28]	@ (8001210 <BSP_LED_Init+0xe4>)
 80011f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80011f8:	2200      	movs	r2, #0
 80011fa:	4619      	mov	r1, r3
 80011fc:	f000 fd5c 	bl	8001cb8 <HAL_GPIO_WritePin>
  }

  return ret;
 8001200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001202:	4618      	mov	r0, r3
 8001204:	3730      	adds	r7, #48	@ 0x30
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	58024400 	.word	0x58024400
 8001210:	08008948 	.word	0x08008948
 8001214:	2400000c 	.word	0x2400000c

08001218 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b088      	sub	sp, #32
 800121c:	af00      	add	r7, sp, #0
 800121e:	4603      	mov	r3, r0
 8001220:	460a      	mov	r2, r1
 8001222:	71fb      	strb	r3, [r7, #7]
 8001224:	4613      	mov	r3, r2
 8001226:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001228:	4b2e      	ldr	r3, [pc, #184]	@ (80012e4 <BSP_PB_Init+0xcc>)
 800122a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800122e:	4a2d      	ldr	r2, [pc, #180]	@ (80012e4 <BSP_PB_Init+0xcc>)
 8001230:	f043 0304 	orr.w	r3, r3, #4
 8001234:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001238:	4b2a      	ldr	r3, [pc, #168]	@ (80012e4 <BSP_PB_Init+0xcc>)
 800123a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800123e:	f003 0304 	and.w	r3, r3, #4
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001246:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800124a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 800124c:	2302      	movs	r3, #2
 800124e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001250:	2302      	movs	r3, #2
 8001252:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001254:	79bb      	ldrb	r3, [r7, #6]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d10c      	bne.n	8001274 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800125e:	79fb      	ldrb	r3, [r7, #7]
 8001260:	4a21      	ldr	r2, [pc, #132]	@ (80012e8 <BSP_PB_Init+0xd0>)
 8001262:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001266:	f107 020c 	add.w	r2, r7, #12
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fb73 	bl	8001958 <HAL_GPIO_Init>
 8001272:	e031      	b.n	80012d8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001274:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001278:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	4a1a      	ldr	r2, [pc, #104]	@ (80012e8 <BSP_PB_Init+0xd0>)
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	f107 020c 	add.w	r2, r7, #12
 8001286:	4611      	mov	r1, r2
 8001288:	4618      	mov	r0, r3
 800128a:	f000 fb65 	bl	8001958 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800128e:	79fb      	ldrb	r3, [r7, #7]
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4a16      	ldr	r2, [pc, #88]	@ (80012ec <BSP_PB_Init+0xd4>)
 8001294:	441a      	add	r2, r3
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	4915      	ldr	r1, [pc, #84]	@ (80012f0 <BSP_PB_Init+0xd8>)
 800129a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800129e:	4619      	mov	r1, r3
 80012a0:	4610      	mov	r0, r2
 80012a2:	f000 fb08 	bl	80018b6 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	00db      	lsls	r3, r3, #3
 80012aa:	4a10      	ldr	r2, [pc, #64]	@ (80012ec <BSP_PB_Init+0xd4>)
 80012ac:	1898      	adds	r0, r3, r2
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	4a10      	ldr	r2, [pc, #64]	@ (80012f4 <BSP_PB_Init+0xdc>)
 80012b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b6:	461a      	mov	r2, r3
 80012b8:	2100      	movs	r1, #0
 80012ba:	f000 fadd 	bl	8001878 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80012be:	2028      	movs	r0, #40	@ 0x28
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	4a0d      	ldr	r2, [pc, #52]	@ (80012f8 <BSP_PB_Init+0xe0>)
 80012c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c8:	2200      	movs	r2, #0
 80012ca:	4619      	mov	r1, r3
 80012cc:	f000 fa8b 	bl	80017e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80012d0:	2328      	movs	r3, #40	@ 0x28
 80012d2:	4618      	mov	r0, r3
 80012d4:	f000 faa1 	bl	800181a <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3720      	adds	r7, #32
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	58024400 	.word	0x58024400
 80012e8:	24000018 	.word	0x24000018
 80012ec:	24000224 	.word	0x24000224
 80012f0:	08008950 	.word	0x08008950
 80012f4:	2400001c 	.word	0x2400001c
 80012f8:	24000020 	.word	0x24000020

080012fc <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	4603      	mov	r3, r0
 8001304:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001306:	79fb      	ldrb	r3, [r7, #7]
 8001308:	00db      	lsls	r3, r3, #3
 800130a:	4a04      	ldr	r2, [pc, #16]	@ (800131c <BSP_PB_IRQHandler+0x20>)
 800130c:	4413      	add	r3, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fae6 	bl	80018e0 <HAL_EXTI_IRQHandler>
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	24000224 	.word	0x24000224

08001320 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001320:	b480      	push	{r7}
 8001322:	b083      	sub	sp, #12
 8001324:	af00      	add	r7, sp, #0
 8001326:	4603      	mov	r3, r0
 8001328:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b084      	sub	sp, #16
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001344:	2300      	movs	r3, #0
 8001346:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001348:	79fb      	ldrb	r3, [r7, #7]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d003      	beq.n	8001356 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800134e:	f06f 0301 	mvn.w	r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	e018      	b.n	8001388 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001356:	79fb      	ldrb	r3, [r7, #7]
 8001358:	2294      	movs	r2, #148	@ 0x94
 800135a:	fb02 f303 	mul.w	r3, r2, r3
 800135e:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <BSP_COM_Init+0x5c>)
 8001360:	4413      	add	r3, r2
 8001362:	4618      	mov	r0, r3
 8001364:	f000 f86e 	bl	8001444 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	2294      	movs	r2, #148	@ 0x94
 800136c:	fb02 f303 	mul.w	r3, r2, r3
 8001370:	4a08      	ldr	r2, [pc, #32]	@ (8001394 <BSP_COM_Init+0x5c>)
 8001372:	4413      	add	r3, r2
 8001374:	6839      	ldr	r1, [r7, #0]
 8001376:	4618      	mov	r0, r3
 8001378:	f000 f80e 	bl	8001398 <MX_USART3_Init>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d002      	beq.n	8001388 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001382:	f06f 0303 	mvn.w	r3, #3
 8001386:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001388:	68fb      	ldr	r3, [r7, #12]
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2400022c 	.word	0x2400022c

08001398 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <MX_USART3_Init+0x60>)
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	681a      	ldr	r2, [r3, #0]
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	220c      	movs	r2, #12
 80013b6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	895b      	ldrh	r3, [r3, #10]
 80013bc:	461a      	mov	r2, r3
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	891b      	ldrh	r3, [r3, #8]
 80013ce:	461a      	mov	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	899b      	ldrh	r3, [r3, #12]
 80013d8:	461a      	mov	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80013e4:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f001 ffac 	bl	8003344 <HAL_UART_Init>
 80013ec:	4603      	mov	r3, r0
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3708      	adds	r7, #8
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	24000008 	.word	0x24000008

080013fc <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001404:	4b09      	ldr	r3, [pc, #36]	@ (800142c <__io_putchar+0x30>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	461a      	mov	r2, r3
 800140a:	2394      	movs	r3, #148	@ 0x94
 800140c:	fb02 f303 	mul.w	r3, r2, r3
 8001410:	4a07      	ldr	r2, [pc, #28]	@ (8001430 <__io_putchar+0x34>)
 8001412:	1898      	adds	r0, r3, r2
 8001414:	1d39      	adds	r1, r7, #4
 8001416:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800141a:	2201      	movs	r2, #1
 800141c:	f001 ffec 	bl	80033f8 <HAL_UART_Transmit>
  return ch;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	240002c0 	.word	0x240002c0
 8001430:	2400022c 	.word	0x2400022c

08001434 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001438:	2000      	movs	r0, #0
 800143a:	f7ff ff71 	bl	8001320 <BSP_PB_Callback>
}
 800143e:	bf00      	nop
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	@ 0x28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 800144c:	4b27      	ldr	r3, [pc, #156]	@ (80014ec <COM1_MspInit+0xa8>)
 800144e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001452:	4a26      	ldr	r2, [pc, #152]	@ (80014ec <COM1_MspInit+0xa8>)
 8001454:	f043 0308 	orr.w	r3, r3, #8
 8001458:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800145c:	4b23      	ldr	r3, [pc, #140]	@ (80014ec <COM1_MspInit+0xa8>)
 800145e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001462:	f003 0308 	and.w	r3, r3, #8
 8001466:	613b      	str	r3, [r7, #16]
 8001468:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800146a:	4b20      	ldr	r3, [pc, #128]	@ (80014ec <COM1_MspInit+0xa8>)
 800146c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001470:	4a1e      	ldr	r2, [pc, #120]	@ (80014ec <COM1_MspInit+0xa8>)
 8001472:	f043 0308 	orr.w	r3, r3, #8
 8001476:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800147a:	4b1c      	ldr	r3, [pc, #112]	@ (80014ec <COM1_MspInit+0xa8>)
 800147c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001480:	f003 0308 	and.w	r3, r3, #8
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001488:	4b18      	ldr	r3, [pc, #96]	@ (80014ec <COM1_MspInit+0xa8>)
 800148a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800148e:	4a17      	ldr	r2, [pc, #92]	@ (80014ec <COM1_MspInit+0xa8>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001494:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001498:	4b14      	ldr	r3, [pc, #80]	@ (80014ec <COM1_MspInit+0xa8>)
 800149a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800149e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80014a2:	60bb      	str	r3, [r7, #8]
 80014a4:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80014a6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014aa:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80014ac:	2302      	movs	r3, #2
 80014ae:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b0:	2302      	movs	r3, #2
 80014b2:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80014b4:	2301      	movs	r3, #1
 80014b6:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80014b8:	2307      	movs	r3, #7
 80014ba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80014bc:	f107 0314 	add.w	r3, r7, #20
 80014c0:	4619      	mov	r1, r3
 80014c2:	480b      	ldr	r0, [pc, #44]	@ (80014f0 <COM1_MspInit+0xac>)
 80014c4:	f000 fa48 	bl	8001958 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80014c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80014cc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80014d2:	2307      	movs	r3, #7
 80014d4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80014d6:	f107 0314 	add.w	r3, r7, #20
 80014da:	4619      	mov	r1, r3
 80014dc:	4804      	ldr	r0, [pc, #16]	@ (80014f0 <COM1_MspInit+0xac>)
 80014de:	f000 fa3b 	bl	8001958 <HAL_GPIO_Init>
}
 80014e2:	bf00      	nop
 80014e4:	3728      	adds	r7, #40	@ 0x28
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd80      	pop	{r7, pc}
 80014ea:	bf00      	nop
 80014ec:	58024400 	.word	0x58024400
 80014f0:	58020c00 	.word	0x58020c00

080014f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014fa:	2003      	movs	r0, #3
 80014fc:	f000 f968 	bl	80017d0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001500:	f001 fa8c 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 8001504:	4602      	mov	r2, r0
 8001506:	4b15      	ldr	r3, [pc, #84]	@ (800155c <HAL_Init+0x68>)
 8001508:	699b      	ldr	r3, [r3, #24]
 800150a:	0a1b      	lsrs	r3, r3, #8
 800150c:	f003 030f 	and.w	r3, r3, #15
 8001510:	4913      	ldr	r1, [pc, #76]	@ (8001560 <HAL_Init+0x6c>)
 8001512:	5ccb      	ldrb	r3, [r1, r3]
 8001514:	f003 031f 	and.w	r3, r3, #31
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
 800151c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800151e:	4b0f      	ldr	r3, [pc, #60]	@ (800155c <HAL_Init+0x68>)
 8001520:	699b      	ldr	r3, [r3, #24]
 8001522:	f003 030f 	and.w	r3, r3, #15
 8001526:	4a0e      	ldr	r2, [pc, #56]	@ (8001560 <HAL_Init+0x6c>)
 8001528:	5cd3      	ldrb	r3, [r2, r3]
 800152a:	f003 031f 	and.w	r3, r3, #31
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	fa22 f303 	lsr.w	r3, r2, r3
 8001534:	4a0b      	ldr	r2, [pc, #44]	@ (8001564 <HAL_Init+0x70>)
 8001536:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001538:	4a0b      	ldr	r2, [pc, #44]	@ (8001568 <HAL_Init+0x74>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800153e:	2000      	movs	r0, #0
 8001540:	f000 f814 	bl	800156c <HAL_InitTick>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800154a:	2301      	movs	r3, #1
 800154c:	e002      	b.n	8001554 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800154e:	f7ff fcad 	bl	8000eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	3708      	adds	r7, #8
 8001558:	46bd      	mov	sp, r7
 800155a:	bd80      	pop	{r7, pc}
 800155c:	58024400 	.word	0x58024400
 8001560:	08008938 	.word	0x08008938
 8001564:	24000004 	.word	0x24000004
 8001568:	24000000 	.word	0x24000000

0800156c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b082      	sub	sp, #8
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_InitTick+0x60>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d101      	bne.n	8001580 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800157c:	2301      	movs	r3, #1
 800157e:	e021      	b.n	80015c4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001580:	4b13      	ldr	r3, [pc, #76]	@ (80015d0 <HAL_InitTick+0x64>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4b11      	ldr	r3, [pc, #68]	@ (80015cc <HAL_InitTick+0x60>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	4619      	mov	r1, r3
 800158a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800158e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001592:	fbb2 f3f3 	udiv	r3, r2, r3
 8001596:	4618      	mov	r0, r3
 8001598:	f000 f94d 	bl	8001836 <HAL_SYSTICK_Config>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00e      	b.n	80015c4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2b0f      	cmp	r3, #15
 80015aa:	d80a      	bhi.n	80015c2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015ac:	2200      	movs	r2, #0
 80015ae:	6879      	ldr	r1, [r7, #4]
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80015b4:	f000 f917 	bl	80017e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015b8:	4a06      	ldr	r2, [pc, #24]	@ (80015d4 <HAL_InitTick+0x68>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
 80015c0:	e000      	b.n	80015c4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
}
 80015c4:	4618      	mov	r0, r3
 80015c6:	3708      	adds	r7, #8
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	24000028 	.word	0x24000028
 80015d0:	24000000 	.word	0x24000000
 80015d4:	24000024 	.word	0x24000024

080015d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015dc:	4b06      	ldr	r3, [pc, #24]	@ (80015f8 <HAL_IncTick+0x20>)
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	461a      	mov	r2, r3
 80015e2:	4b06      	ldr	r3, [pc, #24]	@ (80015fc <HAL_IncTick+0x24>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4413      	add	r3, r2
 80015e8:	4a04      	ldr	r2, [pc, #16]	@ (80015fc <HAL_IncTick+0x24>)
 80015ea:	6013      	str	r3, [r2, #0]
}
 80015ec:	bf00      	nop
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
 80015f6:	bf00      	nop
 80015f8:	24000028 	.word	0x24000028
 80015fc:	240002c4 	.word	0x240002c4

08001600 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  return uwTick;
 8001604:	4b03      	ldr	r3, [pc, #12]	@ (8001614 <HAL_GetTick+0x14>)
 8001606:	681b      	ldr	r3, [r3, #0]
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	240002c4 	.word	0x240002c4

08001618 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800161c:	4b03      	ldr	r3, [pc, #12]	@ (800162c <HAL_GetREVID+0x14>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0c1b      	lsrs	r3, r3, #16
}
 8001622:	4618      	mov	r0, r3
 8001624:	46bd      	mov	sp, r7
 8001626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162a:	4770      	bx	lr
 800162c:	5c001000 	.word	0x5c001000

08001630 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001630:	b480      	push	{r7}
 8001632:	b085      	sub	sp, #20
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001640:	4b0b      	ldr	r3, [pc, #44]	@ (8001670 <__NVIC_SetPriorityGrouping+0x40>)
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001646:	68ba      	ldr	r2, [r7, #8]
 8001648:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800164c:	4013      	ands	r3, r2
 800164e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001658:	4b06      	ldr	r3, [pc, #24]	@ (8001674 <__NVIC_SetPriorityGrouping+0x44>)
 800165a:	4313      	orrs	r3, r2
 800165c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800165e:	4a04      	ldr	r2, [pc, #16]	@ (8001670 <__NVIC_SetPriorityGrouping+0x40>)
 8001660:	68bb      	ldr	r3, [r7, #8]
 8001662:	60d3      	str	r3, [r2, #12]
}
 8001664:	bf00      	nop
 8001666:	3714      	adds	r7, #20
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr
 8001670:	e000ed00 	.word	0xe000ed00
 8001674:	05fa0000 	.word	0x05fa0000

08001678 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800167c:	4b04      	ldr	r3, [pc, #16]	@ (8001690 <__NVIC_GetPriorityGrouping+0x18>)
 800167e:	68db      	ldr	r3, [r3, #12]
 8001680:	0a1b      	lsrs	r3, r3, #8
 8001682:	f003 0307 	and.w	r3, r3, #7
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000ed00 	.word	0xe000ed00

08001694 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	4603      	mov	r3, r0
 800169c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800169e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	db0b      	blt.n	80016be <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016a6:	88fb      	ldrh	r3, [r7, #6]
 80016a8:	f003 021f 	and.w	r2, r3, #31
 80016ac:	4907      	ldr	r1, [pc, #28]	@ (80016cc <__NVIC_EnableIRQ+0x38>)
 80016ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016b2:	095b      	lsrs	r3, r3, #5
 80016b4:	2001      	movs	r0, #1
 80016b6:	fa00 f202 	lsl.w	r2, r0, r2
 80016ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr
 80016ca:	bf00      	nop
 80016cc:	e000e100 	.word	0xe000e100

080016d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b083      	sub	sp, #12
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	4603      	mov	r3, r0
 80016d8:	6039      	str	r1, [r7, #0]
 80016da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80016dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	db0a      	blt.n	80016fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	490c      	ldr	r1, [pc, #48]	@ (800171c <__NVIC_SetPriority+0x4c>)
 80016ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80016ee:	0112      	lsls	r2, r2, #4
 80016f0:	b2d2      	uxtb	r2, r2
 80016f2:	440b      	add	r3, r1
 80016f4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016f8:	e00a      	b.n	8001710 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4908      	ldr	r1, [pc, #32]	@ (8001720 <__NVIC_SetPriority+0x50>)
 8001700:	88fb      	ldrh	r3, [r7, #6]
 8001702:	f003 030f 	and.w	r3, r3, #15
 8001706:	3b04      	subs	r3, #4
 8001708:	0112      	lsls	r2, r2, #4
 800170a:	b2d2      	uxtb	r2, r2
 800170c:	440b      	add	r3, r1
 800170e:	761a      	strb	r2, [r3, #24]
}
 8001710:	bf00      	nop
 8001712:	370c      	adds	r7, #12
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr
 800171c:	e000e100 	.word	0xe000e100
 8001720:	e000ed00 	.word	0xe000ed00

08001724 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	@ 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	60f8      	str	r0, [r7, #12]
 800172c:	60b9      	str	r1, [r7, #8]
 800172e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	f003 0307 	and.w	r3, r3, #7
 8001736:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	f1c3 0307 	rsb	r3, r3, #7
 800173e:	2b04      	cmp	r3, #4
 8001740:	bf28      	it	cs
 8001742:	2304      	movcs	r3, #4
 8001744:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	3304      	adds	r3, #4
 800174a:	2b06      	cmp	r3, #6
 800174c:	d902      	bls.n	8001754 <NVIC_EncodePriority+0x30>
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	3b03      	subs	r3, #3
 8001752:	e000      	b.n	8001756 <NVIC_EncodePriority+0x32>
 8001754:	2300      	movs	r3, #0
 8001756:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001758:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43da      	mvns	r2, r3
 8001764:	68bb      	ldr	r3, [r7, #8]
 8001766:	401a      	ands	r2, r3
 8001768:	697b      	ldr	r3, [r7, #20]
 800176a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800176c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	43d9      	mvns	r1, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800177c:	4313      	orrs	r3, r2
         );
}
 800177e:	4618      	mov	r0, r3
 8001780:	3724      	adds	r7, #36	@ 0x24
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	3b01      	subs	r3, #1
 8001798:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800179c:	d301      	bcc.n	80017a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800179e:	2301      	movs	r3, #1
 80017a0:	e00f      	b.n	80017c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017a2:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <SysTick_Config+0x40>)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017aa:	210f      	movs	r1, #15
 80017ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80017b0:	f7ff ff8e 	bl	80016d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017b4:	4b05      	ldr	r3, [pc, #20]	@ (80017cc <SysTick_Config+0x40>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017ba:	4b04      	ldr	r3, [pc, #16]	@ (80017cc <SysTick_Config+0x40>)
 80017bc:	2207      	movs	r2, #7
 80017be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017c0:	2300      	movs	r3, #0
}
 80017c2:	4618      	mov	r0, r3
 80017c4:	3708      	adds	r7, #8
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	e000e010 	.word	0xe000e010

080017d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ff29 	bl	8001630 <__NVIC_SetPriorityGrouping>
}
 80017de:	bf00      	nop
 80017e0:	3708      	adds	r7, #8
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b086      	sub	sp, #24
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	4603      	mov	r3, r0
 80017ee:	60b9      	str	r1, [r7, #8]
 80017f0:	607a      	str	r2, [r7, #4]
 80017f2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80017f4:	f7ff ff40 	bl	8001678 <__NVIC_GetPriorityGrouping>
 80017f8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	68b9      	ldr	r1, [r7, #8]
 80017fe:	6978      	ldr	r0, [r7, #20]
 8001800:	f7ff ff90 	bl	8001724 <NVIC_EncodePriority>
 8001804:	4602      	mov	r2, r0
 8001806:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800180a:	4611      	mov	r1, r2
 800180c:	4618      	mov	r0, r3
 800180e:	f7ff ff5f 	bl	80016d0 <__NVIC_SetPriority>
}
 8001812:	bf00      	nop
 8001814:	3718      	adds	r7, #24
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}

0800181a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	b082      	sub	sp, #8
 800181e:	af00      	add	r7, sp, #0
 8001820:	4603      	mov	r3, r0
 8001822:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001824:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ff33 	bl	8001694 <__NVIC_EnableIRQ>
}
 800182e:	bf00      	nop
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}

08001836 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001836:	b580      	push	{r7, lr}
 8001838:	b082      	sub	sp, #8
 800183a:	af00      	add	r7, sp, #0
 800183c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	f7ff ffa4 	bl	800178c <SysTick_Config>
 8001844:	4603      	mov	r3, r0
}
 8001846:	4618      	mov	r0, r3
 8001848:	3708      	adds	r7, #8
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
	...

08001850 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001854:	4b07      	ldr	r3, [pc, #28]	@ (8001874 <HAL_GetCurrentCPUID+0x24>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	091b      	lsrs	r3, r3, #4
 800185a:	f003 030f 	and.w	r3, r3, #15
 800185e:	2b07      	cmp	r3, #7
 8001860:	d101      	bne.n	8001866 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001862:	2303      	movs	r3, #3
 8001864:	e000      	b.n	8001868 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001866:	2301      	movs	r3, #1
  }
}
 8001868:	4618      	mov	r0, r3
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr
 8001872:	bf00      	nop
 8001874:	e000ed00 	.word	0xe000ed00

08001878 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001878:	b480      	push	{r7}
 800187a:	b087      	sub	sp, #28
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	460b      	mov	r3, r1
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d101      	bne.n	8001894 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001890:	2301      	movs	r3, #1
 8001892:	e00a      	b.n	80018aa <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001894:	7afb      	ldrb	r3, [r7, #11]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d103      	bne.n	80018a2 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	605a      	str	r2, [r3, #4]
      break;
 80018a0:	e002      	b.n	80018a8 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	75fb      	strb	r3, [r7, #23]
      break;
 80018a6:	bf00      	nop
  }

  return status;
 80018a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	371c      	adds	r7, #28
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80018b6:	b480      	push	{r7}
 80018b8:	b083      	sub	sp, #12
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
 80018be:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e003      	b.n	80018d2 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80018d0:	2300      	movs	r3, #0
  }
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
	...

080018e0 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(EXTI_HandleTypeDef *hexti)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b086      	sub	sp, #24
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	0c1b      	lsrs	r3, r3, #16
 80018ee:	f003 0303 	and.w	r3, r3, #3
 80018f2:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 031f 	and.w	r3, r3, #31
 80018fc:	2201      	movs	r2, #1
 80018fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001902:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001904:	f7ff ffa4 	bl	8001850 <HAL_GetCurrentCPUID>
 8001908:	4603      	mov	r3, r0
 800190a:	2b03      	cmp	r3, #3
 800190c:	d105      	bne.n	800191a <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	011a      	lsls	r2, r3, #4
 8001912:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_EXTI_IRQHandler+0x70>)
 8001914:	4413      	add	r3, r2
 8001916:	617b      	str	r3, [r7, #20]
 8001918:	e004      	b.n	8001924 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	011a      	lsls	r2, r3, #4
 800191e:	4b0d      	ldr	r3, [pc, #52]	@ (8001954 <HAL_EXTI_IRQHandler+0x74>)
 8001920:	4413      	add	r3, r2
 8001922:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	68fa      	ldr	r2, [r7, #12]
 800192a:	4013      	ands	r3, r2
 800192c:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d009      	beq.n	8001948 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d002      	beq.n	8001948 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	4798      	blx	r3
    }
  }
}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	58000088 	.word	0x58000088
 8001954:	580000c8 	.word	0x580000c8

08001958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001958:	b480      	push	{r7}
 800195a:	b089      	sub	sp, #36	@ 0x24
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
 8001960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001962:	2300      	movs	r3, #0
 8001964:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001966:	4b89      	ldr	r3, [pc, #548]	@ (8001b8c <HAL_GPIO_Init+0x234>)
 8001968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800196a:	e194      	b.n	8001c96 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	2101      	movs	r1, #1
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	fa01 f303 	lsl.w	r3, r1, r3
 8001978:	4013      	ands	r3, r2
 800197a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	2b00      	cmp	r3, #0
 8001980:	f000 8186 	beq.w	8001c90 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f003 0303 	and.w	r3, r3, #3
 800198c:	2b01      	cmp	r3, #1
 800198e:	d005      	beq.n	800199c <HAL_GPIO_Init+0x44>
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	f003 0303 	and.w	r3, r3, #3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d130      	bne.n	80019fe <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2203      	movs	r2, #3
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	69ba      	ldr	r2, [r7, #24]
 80019b0:	4013      	ands	r3, r2
 80019b2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	68da      	ldr	r2, [r3, #12]
 80019b8:	69fb      	ldr	r3, [r7, #28]
 80019ba:	005b      	lsls	r3, r3, #1
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	69ba      	ldr	r2, [r7, #24]
 80019ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019d2:	2201      	movs	r2, #1
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	fa02 f303 	lsl.w	r3, r2, r3
 80019da:	43db      	mvns	r3, r3
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	4013      	ands	r3, r2
 80019e0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	091b      	lsrs	r3, r3, #4
 80019e8:	f003 0201 	and.w	r2, r3, #1
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	fa02 f303 	lsl.w	r3, r2, r3
 80019f2:	69ba      	ldr	r2, [r7, #24]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	69ba      	ldr	r2, [r7, #24]
 80019fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f003 0303 	and.w	r3, r3, #3
 8001a06:	2b03      	cmp	r3, #3
 8001a08:	d017      	beq.n	8001a3a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a10:	69fb      	ldr	r3, [r7, #28]
 8001a12:	005b      	lsls	r3, r3, #1
 8001a14:	2203      	movs	r2, #3
 8001a16:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1a:	43db      	mvns	r3, r3
 8001a1c:	69ba      	ldr	r2, [r7, #24]
 8001a1e:	4013      	ands	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a22:	683b      	ldr	r3, [r7, #0]
 8001a24:	689a      	ldr	r2, [r3, #8]
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	69ba      	ldr	r2, [r7, #24]
 8001a30:	4313      	orrs	r3, r2
 8001a32:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	69ba      	ldr	r2, [r7, #24]
 8001a38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	f003 0303 	and.w	r3, r3, #3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d123      	bne.n	8001a8e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	009b      	lsls	r3, r3, #2
 8001a5c:	220f      	movs	r2, #15
 8001a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a62:	43db      	mvns	r3, r3
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4013      	ands	r3, r2
 8001a68:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	691a      	ldr	r2, [r3, #16]
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0307 	and.w	r3, r3, #7
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7a:	69ba      	ldr	r2, [r7, #24]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	08da      	lsrs	r2, r3, #3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	3208      	adds	r2, #8
 8001a88:	69b9      	ldr	r1, [r7, #24]
 8001a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	f003 0203 	and.w	r2, r3, #3
 8001aae:	69fb      	ldr	r3, [r7, #28]
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	69ba      	ldr	r2, [r7, #24]
 8001ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	f000 80e0 	beq.w	8001c90 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	@ (8001b90 <HAL_GPIO_Init+0x238>)
 8001ad2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ad6:	4a2e      	ldr	r2, [pc, #184]	@ (8001b90 <HAL_GPIO_Init+0x238>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001ae0:	4b2b      	ldr	r3, [pc, #172]	@ (8001b90 <HAL_GPIO_Init+0x238>)
 8001ae2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	60fb      	str	r3, [r7, #12]
 8001aec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aee:	4a29      	ldr	r2, [pc, #164]	@ (8001b94 <HAL_GPIO_Init+0x23c>)
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	089b      	lsrs	r3, r3, #2
 8001af4:	3302      	adds	r3, #2
 8001af6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	220f      	movs	r2, #15
 8001b06:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0a:	43db      	mvns	r3, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4013      	ands	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a20      	ldr	r2, [pc, #128]	@ (8001b98 <HAL_GPIO_Init+0x240>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d052      	beq.n	8001bc0 <HAL_GPIO_Init+0x268>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a1f      	ldr	r2, [pc, #124]	@ (8001b9c <HAL_GPIO_Init+0x244>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d031      	beq.n	8001b86 <HAL_GPIO_Init+0x22e>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	4a1e      	ldr	r2, [pc, #120]	@ (8001ba0 <HAL_GPIO_Init+0x248>)
 8001b26:	4293      	cmp	r3, r2
 8001b28:	d02b      	beq.n	8001b82 <HAL_GPIO_Init+0x22a>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001ba4 <HAL_GPIO_Init+0x24c>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d025      	beq.n	8001b7e <HAL_GPIO_Init+0x226>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a1c      	ldr	r2, [pc, #112]	@ (8001ba8 <HAL_GPIO_Init+0x250>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d01f      	beq.n	8001b7a <HAL_GPIO_Init+0x222>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8001bac <HAL_GPIO_Init+0x254>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d019      	beq.n	8001b76 <HAL_GPIO_Init+0x21e>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a1a      	ldr	r2, [pc, #104]	@ (8001bb0 <HAL_GPIO_Init+0x258>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d013      	beq.n	8001b72 <HAL_GPIO_Init+0x21a>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	4a19      	ldr	r2, [pc, #100]	@ (8001bb4 <HAL_GPIO_Init+0x25c>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d00d      	beq.n	8001b6e <HAL_GPIO_Init+0x216>
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	4a18      	ldr	r2, [pc, #96]	@ (8001bb8 <HAL_GPIO_Init+0x260>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d007      	beq.n	8001b6a <HAL_GPIO_Init+0x212>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <HAL_GPIO_Init+0x264>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d101      	bne.n	8001b66 <HAL_GPIO_Init+0x20e>
 8001b62:	2309      	movs	r3, #9
 8001b64:	e02d      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b66:	230a      	movs	r3, #10
 8001b68:	e02b      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b6a:	2308      	movs	r3, #8
 8001b6c:	e029      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b6e:	2307      	movs	r3, #7
 8001b70:	e027      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b72:	2306      	movs	r3, #6
 8001b74:	e025      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b76:	2305      	movs	r3, #5
 8001b78:	e023      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b7a:	2304      	movs	r3, #4
 8001b7c:	e021      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e01f      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b82:	2302      	movs	r3, #2
 8001b84:	e01d      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b86:	2301      	movs	r3, #1
 8001b88:	e01b      	b.n	8001bc2 <HAL_GPIO_Init+0x26a>
 8001b8a:	bf00      	nop
 8001b8c:	58000080 	.word	0x58000080
 8001b90:	58024400 	.word	0x58024400
 8001b94:	58000400 	.word	0x58000400
 8001b98:	58020000 	.word	0x58020000
 8001b9c:	58020400 	.word	0x58020400
 8001ba0:	58020800 	.word	0x58020800
 8001ba4:	58020c00 	.word	0x58020c00
 8001ba8:	58021000 	.word	0x58021000
 8001bac:	58021400 	.word	0x58021400
 8001bb0:	58021800 	.word	0x58021800
 8001bb4:	58021c00 	.word	0x58021c00
 8001bb8:	58022000 	.word	0x58022000
 8001bbc:	58022400 	.word	0x58022400
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	69fa      	ldr	r2, [r7, #28]
 8001bc4:	f002 0203 	and.w	r2, r2, #3
 8001bc8:	0092      	lsls	r2, r2, #2
 8001bca:	4093      	lsls	r3, r2
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001bd2:	4938      	ldr	r1, [pc, #224]	@ (8001cb4 <HAL_GPIO_Init+0x35c>)
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	3302      	adds	r3, #2
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001be8:	693b      	ldr	r3, [r7, #16]
 8001bea:	43db      	mvns	r3, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001bfe:	69ba      	ldr	r2, [r7, #24]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	4313      	orrs	r3, r2
 8001c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001c06:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c0a:	69bb      	ldr	r3, [r7, #24]
 8001c0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001c0e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	43db      	mvns	r3, r3
 8001c1a:	69ba      	ldr	r2, [r7, #24]
 8001c1c:	4013      	ands	r3, r2
 8001c1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d003      	beq.n	8001c34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001c2c:	69ba      	ldr	r2, [r7, #24]
 8001c2e:	693b      	ldr	r3, [r7, #16]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001c34:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c42:	693b      	ldr	r3, [r7, #16]
 8001c44:	43db      	mvns	r3, r3
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d003      	beq.n	8001c60 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d003      	beq.n	8001c8a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001c82:	69ba      	ldr	r2, [r7, #24]
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	3301      	adds	r3, #1
 8001c94:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	f47f ae63 	bne.w	800196c <HAL_GPIO_Init+0x14>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	bf00      	nop
 8001caa:	3724      	adds	r7, #36	@ 0x24
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	58000400 	.word	0x58000400

08001cb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	460b      	mov	r3, r1
 8001cc2:	807b      	strh	r3, [r7, #2]
 8001cc4:	4613      	mov	r3, r2
 8001cc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cc8:	787b      	ldrb	r3, [r7, #1]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d003      	beq.n	8001cd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cce:	887a      	ldrh	r2, [r7, #2]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001cd4:	e003      	b.n	8001cde <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001cd6:	887b      	ldrh	r3, [r7, #2]
 8001cd8:	041a      	lsls	r2, r3, #16
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	619a      	str	r2, [r3, #24]
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b083      	sub	sp, #12
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001cf4:	4a08      	ldr	r2, [pc, #32]	@ (8001d18 <HAL_HSEM_FastTake+0x2c>)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3320      	adds	r3, #32
 8001cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cfe:	4a07      	ldr	r2, [pc, #28]	@ (8001d1c <HAL_HSEM_FastTake+0x30>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d101      	bne.n	8001d08 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e000      	b.n	8001d0a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001d08:	2301      	movs	r3, #1
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	58026400 	.word	0x58026400
 8001d1c:	80000300 	.word	0x80000300

08001d20 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001d2a:	4906      	ldr	r1, [pc, #24]	@ (8001d44 <HAL_HSEM_Release+0x24>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001d38:	bf00      	nop
 8001d3a:	370c      	adds	r7, #12
 8001d3c:	46bd      	mov	sp, r7
 8001d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d42:	4770      	bx	lr
 8001d44:	58026400 	.word	0x58026400

08001d48 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b084      	sub	sp, #16
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001d50:	4b29      	ldr	r3, [pc, #164]	@ (8001df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	2b06      	cmp	r3, #6
 8001d5a:	d00a      	beq.n	8001d72 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001d5c:	4b26      	ldr	r3, [pc, #152]	@ (8001df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001d64:	687a      	ldr	r2, [r7, #4]
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d001      	beq.n	8001d6e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e040      	b.n	8001df0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	e03e      	b.n	8001df0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001d72:	4b21      	ldr	r3, [pc, #132]	@ (8001df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d74:	68db      	ldr	r3, [r3, #12]
 8001d76:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001d7a:	491f      	ldr	r1, [pc, #124]	@ (8001df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001d82:	f7ff fc3d 	bl	8001600 <HAL_GetTick>
 8001d86:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d88:	e009      	b.n	8001d9e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001d8a:	f7ff fc39 	bl	8001600 <HAL_GetTick>
 8001d8e:	4602      	mov	r2, r0
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	1ad3      	subs	r3, r2, r3
 8001d94:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d98:	d901      	bls.n	8001d9e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e028      	b.n	8001df0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001d9e:	4b16      	ldr	r3, [pc, #88]	@ (8001df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001da6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001daa:	d1ee      	bne.n	8001d8a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2b1e      	cmp	r3, #30
 8001db0:	d008      	beq.n	8001dc4 <HAL_PWREx_ConfigSupply+0x7c>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2b2e      	cmp	r3, #46	@ 0x2e
 8001db6:	d005      	beq.n	8001dc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2b1d      	cmp	r3, #29
 8001dbc:	d002      	beq.n	8001dc4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b2d      	cmp	r3, #45	@ 0x2d
 8001dc2:	d114      	bne.n	8001dee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001dc4:	f7ff fc1c 	bl	8001600 <HAL_GetTick>
 8001dc8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001dca:	e009      	b.n	8001de0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001dcc:	f7ff fc18 	bl	8001600 <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dda:	d901      	bls.n	8001de0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e007      	b.n	8001df0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001de0:	4b05      	ldr	r3, [pc, #20]	@ (8001df8 <HAL_PWREx_ConfigSupply+0xb0>)
 8001de2:	68db      	ldr	r3, [r3, #12]
 8001de4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001de8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dec:	d1ee      	bne.n	8001dcc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001dee:	2300      	movs	r3, #0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}
 8001df8:	58024800 	.word	0x58024800

08001dfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b08c      	sub	sp, #48	@ 0x30
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d102      	bne.n	8001e10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	f000 bc48 	b.w	80026a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0301 	and.w	r3, r3, #1
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8088 	beq.w	8001f2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e1e:	4b99      	ldr	r3, [pc, #612]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e28:	4b96      	ldr	r3, [pc, #600]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001e2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e2c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e30:	2b10      	cmp	r3, #16
 8001e32:	d007      	beq.n	8001e44 <HAL_RCC_OscConfig+0x48>
 8001e34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e36:	2b18      	cmp	r3, #24
 8001e38:	d111      	bne.n	8001e5e <HAL_RCC_OscConfig+0x62>
 8001e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3c:	f003 0303 	and.w	r3, r3, #3
 8001e40:	2b02      	cmp	r3, #2
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e44:	4b8f      	ldr	r3, [pc, #572]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d06d      	beq.n	8001f2c <HAL_RCC_OscConfig+0x130>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d169      	bne.n	8001f2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	f000 bc21 	b.w	80026a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e66:	d106      	bne.n	8001e76 <HAL_RCC_OscConfig+0x7a>
 8001e68:	4b86      	ldr	r3, [pc, #536]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	4a85      	ldr	r2, [pc, #532]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001e6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e72:	6013      	str	r3, [r2, #0]
 8001e74:	e02e      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd8>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d10c      	bne.n	8001e98 <HAL_RCC_OscConfig+0x9c>
 8001e7e:	4b81      	ldr	r3, [pc, #516]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a80      	ldr	r2, [pc, #512]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001e84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e88:	6013      	str	r3, [r2, #0]
 8001e8a:	4b7e      	ldr	r3, [pc, #504]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a7d      	ldr	r2, [pc, #500]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001e90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e94:	6013      	str	r3, [r2, #0]
 8001e96:	e01d      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd8>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001ea0:	d10c      	bne.n	8001ebc <HAL_RCC_OscConfig+0xc0>
 8001ea2:	4b78      	ldr	r3, [pc, #480]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a77      	ldr	r2, [pc, #476]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001ea8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001eac:	6013      	str	r3, [r2, #0]
 8001eae:	4b75      	ldr	r3, [pc, #468]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a74      	ldr	r2, [pc, #464]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001eb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e00b      	b.n	8001ed4 <HAL_RCC_OscConfig+0xd8>
 8001ebc:	4b71      	ldr	r3, [pc, #452]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a70      	ldr	r2, [pc, #448]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001ec2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ec6:	6013      	str	r3, [r2, #0]
 8001ec8:	4b6e      	ldr	r3, [pc, #440]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a6d      	ldr	r2, [pc, #436]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001ece:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d013      	beq.n	8001f04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001edc:	f7ff fb90 	bl	8001600 <HAL_GetTick>
 8001ee0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ee4:	f7ff fb8c 	bl	8001600 <HAL_GetTick>
 8001ee8:	4602      	mov	r2, r0
 8001eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b64      	cmp	r3, #100	@ 0x64
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e3d4      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001ef6:	4b63      	ldr	r3, [pc, #396]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d0f0      	beq.n	8001ee4 <HAL_RCC_OscConfig+0xe8>
 8001f02:	e014      	b.n	8001f2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff fb7c 	bl	8001600 <HAL_GetTick>
 8001f08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f0c:	f7ff fb78 	bl	8001600 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b64      	cmp	r3, #100	@ 0x64
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e3c0      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001f1e:	4b59      	ldr	r3, [pc, #356]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x110>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 0302 	and.w	r3, r3, #2
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	f000 80ca 	beq.w	80020d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f3c:	4b51      	ldr	r3, [pc, #324]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001f46:	4b4f      	ldr	r3, [pc, #316]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001f4c:	6a3b      	ldr	r3, [r7, #32]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d007      	beq.n	8001f62 <HAL_RCC_OscConfig+0x166>
 8001f52:	6a3b      	ldr	r3, [r7, #32]
 8001f54:	2b18      	cmp	r3, #24
 8001f56:	d156      	bne.n	8002006 <HAL_RCC_OscConfig+0x20a>
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	f003 0303 	and.w	r3, r3, #3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d151      	bne.n	8002006 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f62:	4b48      	ldr	r3, [pc, #288]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d005      	beq.n	8001f7a <HAL_RCC_OscConfig+0x17e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d101      	bne.n	8001f7a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001f76:	2301      	movs	r3, #1
 8001f78:	e392      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f7a:	4b42      	ldr	r3, [pc, #264]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f023 0219 	bic.w	r2, r3, #25
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	493f      	ldr	r1, [pc, #252]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fb38 	bl	8001600 <HAL_GetTick>
 8001f90:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f94:	f7ff fb34 	bl	8001600 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b02      	cmp	r3, #2
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e37c      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001fa6:	4b37      	ldr	r3, [pc, #220]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0304 	and.w	r3, r3, #4
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb2:	f7ff fb31 	bl	8001618 <HAL_GetREVID>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d817      	bhi.n	8001ff0 <HAL_RCC_OscConfig+0x1f4>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	691b      	ldr	r3, [r3, #16]
 8001fc4:	2b40      	cmp	r3, #64	@ 0x40
 8001fc6:	d108      	bne.n	8001fda <HAL_RCC_OscConfig+0x1de>
 8001fc8:	4b2e      	ldr	r3, [pc, #184]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001fd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001fd2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001fd6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fd8:	e07a      	b.n	80020d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fda:	4b2a      	ldr	r3, [pc, #168]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	691b      	ldr	r3, [r3, #16]
 8001fe6:	031b      	lsls	r3, r3, #12
 8001fe8:	4926      	ldr	r1, [pc, #152]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001fee:	e06f      	b.n	80020d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff0:	4b24      	ldr	r3, [pc, #144]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8001ff2:	685b      	ldr	r3, [r3, #4]
 8001ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691b      	ldr	r3, [r3, #16]
 8001ffc:	061b      	lsls	r3, r3, #24
 8001ffe:	4921      	ldr	r1, [pc, #132]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8002000:	4313      	orrs	r3, r2
 8002002:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002004:	e064      	b.n	80020d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	68db      	ldr	r3, [r3, #12]
 800200a:	2b00      	cmp	r3, #0
 800200c:	d047      	beq.n	800209e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800200e:	4b1d      	ldr	r3, [pc, #116]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f023 0219 	bic.w	r2, r3, #25
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	491a      	ldr	r1, [pc, #104]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 800201c:	4313      	orrs	r3, r2
 800201e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002020:	f7ff faee 	bl	8001600 <HAL_GetTick>
 8002024:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002026:	e008      	b.n	800203a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002028:	f7ff faea 	bl	8001600 <HAL_GetTick>
 800202c:	4602      	mov	r2, r0
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d901      	bls.n	800203a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e332      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800203a:	4b12      	ldr	r3, [pc, #72]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	d0f0      	beq.n	8002028 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002046:	f7ff fae7 	bl	8001618 <HAL_GetREVID>
 800204a:	4603      	mov	r3, r0
 800204c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002050:	4293      	cmp	r3, r2
 8002052:	d819      	bhi.n	8002088 <HAL_RCC_OscConfig+0x28c>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	2b40      	cmp	r3, #64	@ 0x40
 800205a:	d108      	bne.n	800206e <HAL_RCC_OscConfig+0x272>
 800205c:	4b09      	ldr	r3, [pc, #36]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002064:	4a07      	ldr	r2, [pc, #28]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8002066:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800206a:	6053      	str	r3, [r2, #4]
 800206c:	e030      	b.n	80020d0 <HAL_RCC_OscConfig+0x2d4>
 800206e:	4b05      	ldr	r3, [pc, #20]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	691b      	ldr	r3, [r3, #16]
 800207a:	031b      	lsls	r3, r3, #12
 800207c:	4901      	ldr	r1, [pc, #4]	@ (8002084 <HAL_RCC_OscConfig+0x288>)
 800207e:	4313      	orrs	r3, r2
 8002080:	604b      	str	r3, [r1, #4]
 8002082:	e025      	b.n	80020d0 <HAL_RCC_OscConfig+0x2d4>
 8002084:	58024400 	.word	0x58024400
 8002088:	4b9a      	ldr	r3, [pc, #616]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	061b      	lsls	r3, r3, #24
 8002096:	4997      	ldr	r1, [pc, #604]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 8002098:	4313      	orrs	r3, r2
 800209a:	604b      	str	r3, [r1, #4]
 800209c:	e018      	b.n	80020d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800209e:	4b95      	ldr	r3, [pc, #596]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4a94      	ldr	r2, [pc, #592]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020a4:	f023 0301 	bic.w	r3, r3, #1
 80020a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020aa:	f7ff faa9 	bl	8001600 <HAL_GetTick>
 80020ae:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b2:	f7ff faa5 	bl	8001600 <HAL_GetTick>
 80020b6:	4602      	mov	r2, r0
 80020b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e2ed      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80020c4:	4b8b      	ldr	r3, [pc, #556]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f003 0304 	and.w	r3, r3, #4
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d1f0      	bne.n	80020b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0310 	and.w	r3, r3, #16
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 80a9 	beq.w	8002230 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020de:	4b85      	ldr	r3, [pc, #532]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80020e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80020e8:	4b82      	ldr	r3, [pc, #520]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80020ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d007      	beq.n	8002104 <HAL_RCC_OscConfig+0x308>
 80020f4:	69bb      	ldr	r3, [r7, #24]
 80020f6:	2b18      	cmp	r3, #24
 80020f8:	d13a      	bne.n	8002170 <HAL_RCC_OscConfig+0x374>
 80020fa:	697b      	ldr	r3, [r7, #20]
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	2b01      	cmp	r3, #1
 8002102:	d135      	bne.n	8002170 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002104:	4b7b      	ldr	r3, [pc, #492]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800210c:	2b00      	cmp	r3, #0
 800210e:	d005      	beq.n	800211c <HAL_RCC_OscConfig+0x320>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	69db      	ldr	r3, [r3, #28]
 8002114:	2b80      	cmp	r3, #128	@ 0x80
 8002116:	d001      	beq.n	800211c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e2c1      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800211c:	f7ff fa7c 	bl	8001618 <HAL_GetREVID>
 8002120:	4603      	mov	r3, r0
 8002122:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002126:	4293      	cmp	r3, r2
 8002128:	d817      	bhi.n	800215a <HAL_RCC_OscConfig+0x35e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	2b20      	cmp	r3, #32
 8002130:	d108      	bne.n	8002144 <HAL_RCC_OscConfig+0x348>
 8002132:	4b70      	ldr	r3, [pc, #448]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800213a:	4a6e      	ldr	r2, [pc, #440]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 800213c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002140:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002142:	e075      	b.n	8002230 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002144:	4b6b      	ldr	r3, [pc, #428]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6a1b      	ldr	r3, [r3, #32]
 8002150:	069b      	lsls	r3, r3, #26
 8002152:	4968      	ldr	r1, [pc, #416]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 8002154:	4313      	orrs	r3, r2
 8002156:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002158:	e06a      	b.n	8002230 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800215a:	4b66      	ldr	r3, [pc, #408]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 800215c:	68db      	ldr	r3, [r3, #12]
 800215e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6a1b      	ldr	r3, [r3, #32]
 8002166:	061b      	lsls	r3, r3, #24
 8002168:	4962      	ldr	r1, [pc, #392]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 800216a:	4313      	orrs	r3, r2
 800216c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800216e:	e05f      	b.n	8002230 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	69db      	ldr	r3, [r3, #28]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d042      	beq.n	80021fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002178:	4b5e      	ldr	r3, [pc, #376]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a5d      	ldr	r2, [pc, #372]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 800217e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002184:	f7ff fa3c 	bl	8001600 <HAL_GetTick>
 8002188:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800218c:	f7ff fa38 	bl	8001600 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e280      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800219e:	4b55      	ldr	r3, [pc, #340]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80021aa:	f7ff fa35 	bl	8001618 <HAL_GetREVID>
 80021ae:	4603      	mov	r3, r0
 80021b0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d817      	bhi.n	80021e8 <HAL_RCC_OscConfig+0x3ec>
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a1b      	ldr	r3, [r3, #32]
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d108      	bne.n	80021d2 <HAL_RCC_OscConfig+0x3d6>
 80021c0:	4b4c      	ldr	r3, [pc, #304]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80021c2:	685b      	ldr	r3, [r3, #4]
 80021c4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80021c8:	4a4a      	ldr	r2, [pc, #296]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80021ca:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80021ce:	6053      	str	r3, [r2, #4]
 80021d0:	e02e      	b.n	8002230 <HAL_RCC_OscConfig+0x434>
 80021d2:	4b48      	ldr	r3, [pc, #288]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a1b      	ldr	r3, [r3, #32]
 80021de:	069b      	lsls	r3, r3, #26
 80021e0:	4944      	ldr	r1, [pc, #272]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80021e2:	4313      	orrs	r3, r2
 80021e4:	604b      	str	r3, [r1, #4]
 80021e6:	e023      	b.n	8002230 <HAL_RCC_OscConfig+0x434>
 80021e8:	4b42      	ldr	r3, [pc, #264]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6a1b      	ldr	r3, [r3, #32]
 80021f4:	061b      	lsls	r3, r3, #24
 80021f6:	493f      	ldr	r1, [pc, #252]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	60cb      	str	r3, [r1, #12]
 80021fc:	e018      	b.n	8002230 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80021fe:	4b3d      	ldr	r3, [pc, #244]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a3c      	ldr	r2, [pc, #240]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 8002204:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220a:	f7ff f9f9 	bl	8001600 <HAL_GetTick>
 800220e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002210:	e008      	b.n	8002224 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002212:	f7ff f9f5 	bl	8001600 <HAL_GetTick>
 8002216:	4602      	mov	r2, r0
 8002218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800221a:	1ad3      	subs	r3, r2, r3
 800221c:	2b02      	cmp	r3, #2
 800221e:	d901      	bls.n	8002224 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002220:	2303      	movs	r3, #3
 8002222:	e23d      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002224:	4b33      	ldr	r3, [pc, #204]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800222c:	2b00      	cmp	r3, #0
 800222e:	d1f0      	bne.n	8002212 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0308 	and.w	r3, r3, #8
 8002238:	2b00      	cmp	r3, #0
 800223a:	d036      	beq.n	80022aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	695b      	ldr	r3, [r3, #20]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d019      	beq.n	8002278 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002244:	4b2b      	ldr	r3, [pc, #172]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 8002246:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002248:	4a2a      	ldr	r2, [pc, #168]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 800224a:	f043 0301 	orr.w	r3, r3, #1
 800224e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002250:	f7ff f9d6 	bl	8001600 <HAL_GetTick>
 8002254:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002258:	f7ff f9d2 	bl	8001600 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b02      	cmp	r3, #2
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e21a      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800226a:	4b22      	ldr	r3, [pc, #136]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 800226c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0x45c>
 8002276:	e018      	b.n	80022aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002278:	4b1e      	ldr	r3, [pc, #120]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 800227a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800227c:	4a1d      	ldr	r2, [pc, #116]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 800227e:	f023 0301 	bic.w	r3, r3, #1
 8002282:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002284:	f7ff f9bc 	bl	8001600 <HAL_GetTick>
 8002288:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800228a:	e008      	b.n	800229e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800228c:	f7ff f9b8 	bl	8001600 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e200      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800229e:	4b15      	ldr	r3, [pc, #84]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80022a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022a2:	f003 0302 	and.w	r3, r3, #2
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d1f0      	bne.n	800228c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f003 0320 	and.w	r3, r3, #32
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d039      	beq.n	800232a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d01c      	beq.n	80022f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022be:	4b0d      	ldr	r3, [pc, #52]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	4a0c      	ldr	r2, [pc, #48]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80022c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80022c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80022ca:	f7ff f999 	bl	8001600 <HAL_GetTick>
 80022ce:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022d0:	e008      	b.n	80022e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022d2:	f7ff f995 	bl	8001600 <HAL_GetTick>
 80022d6:	4602      	mov	r2, r0
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	1ad3      	subs	r3, r2, r3
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d901      	bls.n	80022e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	e1dd      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80022e4:	4b03      	ldr	r3, [pc, #12]	@ (80022f4 <HAL_RCC_OscConfig+0x4f8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0f0      	beq.n	80022d2 <HAL_RCC_OscConfig+0x4d6>
 80022f0:	e01b      	b.n	800232a <HAL_RCC_OscConfig+0x52e>
 80022f2:	bf00      	nop
 80022f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80022f8:	4b9b      	ldr	r3, [pc, #620]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	4a9a      	ldr	r2, [pc, #616]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80022fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002302:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002304:	f7ff f97c 	bl	8001600 <HAL_GetTick>
 8002308:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800230a:	e008      	b.n	800231e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800230c:	f7ff f978 	bl	8001600 <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	2b02      	cmp	r3, #2
 8002318:	d901      	bls.n	800231e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800231a:	2303      	movs	r3, #3
 800231c:	e1c0      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800231e:	4b92      	ldr	r3, [pc, #584]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f0      	bne.n	800230c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0304 	and.w	r3, r3, #4
 8002332:	2b00      	cmp	r3, #0
 8002334:	f000 8081 	beq.w	800243a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002338:	4b8c      	ldr	r3, [pc, #560]	@ (800256c <HAL_RCC_OscConfig+0x770>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a8b      	ldr	r2, [pc, #556]	@ (800256c <HAL_RCC_OscConfig+0x770>)
 800233e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002342:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002344:	f7ff f95c 	bl	8001600 <HAL_GetTick>
 8002348:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800234a:	e008      	b.n	800235e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800234c:	f7ff f958 	bl	8001600 <HAL_GetTick>
 8002350:	4602      	mov	r2, r0
 8002352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002354:	1ad3      	subs	r3, r2, r3
 8002356:	2b64      	cmp	r3, #100	@ 0x64
 8002358:	d901      	bls.n	800235e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e1a0      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800235e:	4b83      	ldr	r3, [pc, #524]	@ (800256c <HAL_RCC_OscConfig+0x770>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002366:	2b00      	cmp	r3, #0
 8002368:	d0f0      	beq.n	800234c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d106      	bne.n	8002380 <HAL_RCC_OscConfig+0x584>
 8002372:	4b7d      	ldr	r3, [pc, #500]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002376:	4a7c      	ldr	r2, [pc, #496]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002378:	f043 0301 	orr.w	r3, r3, #1
 800237c:	6713      	str	r3, [r2, #112]	@ 0x70
 800237e:	e02d      	b.n	80023dc <HAL_RCC_OscConfig+0x5e0>
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d10c      	bne.n	80023a2 <HAL_RCC_OscConfig+0x5a6>
 8002388:	4b77      	ldr	r3, [pc, #476]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 800238a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800238c:	4a76      	ldr	r2, [pc, #472]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 800238e:	f023 0301 	bic.w	r3, r3, #1
 8002392:	6713      	str	r3, [r2, #112]	@ 0x70
 8002394:	4b74      	ldr	r3, [pc, #464]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002396:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002398:	4a73      	ldr	r2, [pc, #460]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 800239a:	f023 0304 	bic.w	r3, r3, #4
 800239e:	6713      	str	r3, [r2, #112]	@ 0x70
 80023a0:	e01c      	b.n	80023dc <HAL_RCC_OscConfig+0x5e0>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2b05      	cmp	r3, #5
 80023a8:	d10c      	bne.n	80023c4 <HAL_RCC_OscConfig+0x5c8>
 80023aa:	4b6f      	ldr	r3, [pc, #444]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80023ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ae:	4a6e      	ldr	r2, [pc, #440]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80023b0:	f043 0304 	orr.w	r3, r3, #4
 80023b4:	6713      	str	r3, [r2, #112]	@ 0x70
 80023b6:	4b6c      	ldr	r3, [pc, #432]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023ba:	4a6b      	ldr	r2, [pc, #428]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80023bc:	f043 0301 	orr.w	r3, r3, #1
 80023c0:	6713      	str	r3, [r2, #112]	@ 0x70
 80023c2:	e00b      	b.n	80023dc <HAL_RCC_OscConfig+0x5e0>
 80023c4:	4b68      	ldr	r3, [pc, #416]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80023c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023c8:	4a67      	ldr	r2, [pc, #412]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80023ca:	f023 0301 	bic.w	r3, r3, #1
 80023ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80023d0:	4b65      	ldr	r3, [pc, #404]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80023d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80023d4:	4a64      	ldr	r2, [pc, #400]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80023d6:	f023 0304 	bic.w	r3, r3, #4
 80023da:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d015      	beq.n	8002410 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e4:	f7ff f90c 	bl	8001600 <HAL_GetTick>
 80023e8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80023ea:	e00a      	b.n	8002402 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023ec:	f7ff f908 	bl	8001600 <HAL_GetTick>
 80023f0:	4602      	mov	r2, r0
 80023f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f4:	1ad3      	subs	r3, r2, r3
 80023f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d901      	bls.n	8002402 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80023fe:	2303      	movs	r3, #3
 8002400:	e14e      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002402:	4b59      	ldr	r3, [pc, #356]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002404:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002406:	f003 0302 	and.w	r3, r3, #2
 800240a:	2b00      	cmp	r3, #0
 800240c:	d0ee      	beq.n	80023ec <HAL_RCC_OscConfig+0x5f0>
 800240e:	e014      	b.n	800243a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002410:	f7ff f8f6 	bl	8001600 <HAL_GetTick>
 8002414:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002416:	e00a      	b.n	800242e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002418:	f7ff f8f2 	bl	8001600 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002426:	4293      	cmp	r3, r2
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e138      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800242e:	4b4e      	ldr	r3, [pc, #312]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002432:	f003 0302 	and.w	r3, r3, #2
 8002436:	2b00      	cmp	r3, #0
 8002438:	d1ee      	bne.n	8002418 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800243e:	2b00      	cmp	r3, #0
 8002440:	f000 812d 	beq.w	800269e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002444:	4b48      	ldr	r3, [pc, #288]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002446:	691b      	ldr	r3, [r3, #16]
 8002448:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800244c:	2b18      	cmp	r3, #24
 800244e:	f000 80bd 	beq.w	80025cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002456:	2b02      	cmp	r3, #2
 8002458:	f040 809e 	bne.w	8002598 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800245c:	4b42      	ldr	r3, [pc, #264]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	4a41      	ldr	r2, [pc, #260]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002462:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002468:	f7ff f8ca 	bl	8001600 <HAL_GetTick>
 800246c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800246e:	e008      	b.n	8002482 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002470:	f7ff f8c6 	bl	8001600 <HAL_GetTick>
 8002474:	4602      	mov	r2, r0
 8002476:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002478:	1ad3      	subs	r3, r2, r3
 800247a:	2b02      	cmp	r3, #2
 800247c:	d901      	bls.n	8002482 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800247e:	2303      	movs	r3, #3
 8002480:	e10e      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002482:	4b39      	ldr	r3, [pc, #228]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f0      	bne.n	8002470 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800248e:	4b36      	ldr	r3, [pc, #216]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002490:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002492:	4b37      	ldr	r3, [pc, #220]	@ (8002570 <HAL_RCC_OscConfig+0x774>)
 8002494:	4013      	ands	r3, r2
 8002496:	687a      	ldr	r2, [r7, #4]
 8002498:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800249e:	0112      	lsls	r2, r2, #4
 80024a0:	430a      	orrs	r2, r1
 80024a2:	4931      	ldr	r1, [pc, #196]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80024a4:	4313      	orrs	r3, r2
 80024a6:	628b      	str	r3, [r1, #40]	@ 0x28
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ac:	3b01      	subs	r3, #1
 80024ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024b6:	3b01      	subs	r3, #1
 80024b8:	025b      	lsls	r3, r3, #9
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	431a      	orrs	r2, r3
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024c2:	3b01      	subs	r3, #1
 80024c4:	041b      	lsls	r3, r3, #16
 80024c6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d0:	3b01      	subs	r3, #1
 80024d2:	061b      	lsls	r3, r3, #24
 80024d4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80024d8:	4923      	ldr	r1, [pc, #140]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80024de:	4b22      	ldr	r3, [pc, #136]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80024e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024e2:	4a21      	ldr	r2, [pc, #132]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80024ea:	4b1f      	ldr	r3, [pc, #124]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80024ec:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80024ee:	4b21      	ldr	r3, [pc, #132]	@ (8002574 <HAL_RCC_OscConfig+0x778>)
 80024f0:	4013      	ands	r3, r2
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80024f6:	00d2      	lsls	r2, r2, #3
 80024f8:	491b      	ldr	r1, [pc, #108]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80024fe:	4b1a      	ldr	r3, [pc, #104]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	f023 020c 	bic.w	r2, r3, #12
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250a:	4917      	ldr	r1, [pc, #92]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 800250c:	4313      	orrs	r3, r2
 800250e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002510:	4b15      	ldr	r3, [pc, #84]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002514:	f023 0202 	bic.w	r2, r3, #2
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800251c:	4912      	ldr	r1, [pc, #72]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 800251e:	4313      	orrs	r3, r2
 8002520:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002522:	4b11      	ldr	r3, [pc, #68]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002526:	4a10      	ldr	r2, [pc, #64]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800252c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800252e:	4b0e      	ldr	r3, [pc, #56]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002530:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002532:	4a0d      	ldr	r2, [pc, #52]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002534:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002538:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800253a:	4b0b      	ldr	r3, [pc, #44]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 800253c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800253e:	4a0a      	ldr	r2, [pc, #40]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002540:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002544:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002546:	4b08      	ldr	r3, [pc, #32]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254a:	4a07      	ldr	r2, [pc, #28]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 800254c:	f043 0301 	orr.w	r3, r3, #1
 8002550:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002552:	4b05      	ldr	r3, [pc, #20]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a04      	ldr	r2, [pc, #16]	@ (8002568 <HAL_RCC_OscConfig+0x76c>)
 8002558:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800255c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800255e:	f7ff f84f 	bl	8001600 <HAL_GetTick>
 8002562:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002564:	e011      	b.n	800258a <HAL_RCC_OscConfig+0x78e>
 8002566:	bf00      	nop
 8002568:	58024400 	.word	0x58024400
 800256c:	58024800 	.word	0x58024800
 8002570:	fffffc0c 	.word	0xfffffc0c
 8002574:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002578:	f7ff f842 	bl	8001600 <HAL_GetTick>
 800257c:	4602      	mov	r2, r0
 800257e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002580:	1ad3      	subs	r3, r2, r3
 8002582:	2b02      	cmp	r3, #2
 8002584:	d901      	bls.n	800258a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e08a      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800258a:	4b47      	ldr	r3, [pc, #284]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d0f0      	beq.n	8002578 <HAL_RCC_OscConfig+0x77c>
 8002596:	e082      	b.n	800269e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002598:	4b43      	ldr	r3, [pc, #268]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a42      	ldr	r2, [pc, #264]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 800259e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7ff f82c 	bl	8001600 <HAL_GetTick>
 80025a8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ac:	f7ff f828 	bl	8001600 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e070      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80025be:	4b3a      	ldr	r3, [pc, #232]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0x7b0>
 80025ca:	e068      	b.n	800269e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80025cc:	4b36      	ldr	r3, [pc, #216]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 80025ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80025d2:	4b35      	ldr	r3, [pc, #212]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d031      	beq.n	8002644 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	f003 0203 	and.w	r2, r3, #3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d12a      	bne.n	8002644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	091b      	lsrs	r3, r3, #4
 80025f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d122      	bne.n	8002644 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002608:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800260a:	429a      	cmp	r2, r3
 800260c:	d11a      	bne.n	8002644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	0a5b      	lsrs	r3, r3, #9
 8002612:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800261a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800261c:	429a      	cmp	r2, r3
 800261e:	d111      	bne.n	8002644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	0c1b      	lsrs	r3, r3, #16
 8002624:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800262c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800262e:	429a      	cmp	r2, r3
 8002630:	d108      	bne.n	8002644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	0e1b      	lsrs	r3, r3, #24
 8002636:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800263e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002640:	429a      	cmp	r2, r3
 8002642:	d001      	beq.n	8002648 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002644:	2301      	movs	r3, #1
 8002646:	e02b      	b.n	80026a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002648:	4b17      	ldr	r3, [pc, #92]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 800264a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800264c:	08db      	lsrs	r3, r3, #3
 800264e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002652:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002658:	693a      	ldr	r2, [r7, #16]
 800265a:	429a      	cmp	r2, r3
 800265c:	d01f      	beq.n	800269e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800265e:	4b12      	ldr	r3, [pc, #72]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 8002660:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002662:	4a11      	ldr	r2, [pc, #68]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 8002664:	f023 0301 	bic.w	r3, r3, #1
 8002668:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800266a:	f7fe ffc9 	bl	8001600 <HAL_GetTick>
 800266e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002670:	bf00      	nop
 8002672:	f7fe ffc5 	bl	8001600 <HAL_GetTick>
 8002676:	4602      	mov	r2, r0
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	4293      	cmp	r3, r2
 800267c:	d0f9      	beq.n	8002672 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800267e:	4b0a      	ldr	r3, [pc, #40]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 8002680:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002682:	4b0a      	ldr	r3, [pc, #40]	@ (80026ac <HAL_RCC_OscConfig+0x8b0>)
 8002684:	4013      	ands	r3, r2
 8002686:	687a      	ldr	r2, [r7, #4]
 8002688:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800268a:	00d2      	lsls	r2, r2, #3
 800268c:	4906      	ldr	r1, [pc, #24]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 800268e:	4313      	orrs	r3, r2
 8002690:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002692:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 8002694:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002696:	4a04      	ldr	r2, [pc, #16]	@ (80026a8 <HAL_RCC_OscConfig+0x8ac>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3730      	adds	r7, #48	@ 0x30
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	58024400 	.word	0x58024400
 80026ac:	ffff0007 	.word	0xffff0007

080026b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b086      	sub	sp, #24
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
 80026b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e19c      	b.n	80029fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c4:	4b8a      	ldr	r3, [pc, #552]	@ (80028f0 <HAL_RCC_ClockConfig+0x240>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 030f 	and.w	r3, r3, #15
 80026cc:	683a      	ldr	r2, [r7, #0]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d910      	bls.n	80026f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d2:	4b87      	ldr	r3, [pc, #540]	@ (80028f0 <HAL_RCC_ClockConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f023 020f 	bic.w	r2, r3, #15
 80026da:	4985      	ldr	r1, [pc, #532]	@ (80028f0 <HAL_RCC_ClockConfig+0x240>)
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	4313      	orrs	r3, r2
 80026e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b83      	ldr	r3, [pc, #524]	@ (80028f0 <HAL_RCC_ClockConfig+0x240>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e184      	b.n	80029fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0304 	and.w	r3, r3, #4
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d010      	beq.n	8002722 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	691a      	ldr	r2, [r3, #16]
 8002704:	4b7b      	ldr	r3, [pc, #492]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800270c:	429a      	cmp	r2, r3
 800270e:	d908      	bls.n	8002722 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002710:	4b78      	ldr	r3, [pc, #480]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	4975      	ldr	r1, [pc, #468]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 800271e:	4313      	orrs	r3, r2
 8002720:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d010      	beq.n	8002750 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695a      	ldr	r2, [r3, #20]
 8002732:	4b70      	ldr	r3, [pc, #448]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800273a:	429a      	cmp	r2, r3
 800273c:	d908      	bls.n	8002750 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800273e:	4b6d      	ldr	r3, [pc, #436]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	695b      	ldr	r3, [r3, #20]
 800274a:	496a      	ldr	r1, [pc, #424]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 800274c:	4313      	orrs	r3, r2
 800274e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0310 	and.w	r3, r3, #16
 8002758:	2b00      	cmp	r3, #0
 800275a:	d010      	beq.n	800277e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	699a      	ldr	r2, [r3, #24]
 8002760:	4b64      	ldr	r3, [pc, #400]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002768:	429a      	cmp	r2, r3
 800276a:	d908      	bls.n	800277e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800276c:	4b61      	ldr	r3, [pc, #388]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	699b      	ldr	r3, [r3, #24]
 8002778:	495e      	ldr	r1, [pc, #376]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 800277a:	4313      	orrs	r3, r2
 800277c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b00      	cmp	r3, #0
 8002788:	d010      	beq.n	80027ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	69da      	ldr	r2, [r3, #28]
 800278e:	4b59      	ldr	r3, [pc, #356]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 8002790:	6a1b      	ldr	r3, [r3, #32]
 8002792:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002796:	429a      	cmp	r2, r3
 8002798:	d908      	bls.n	80027ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800279a:	4b56      	ldr	r3, [pc, #344]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	4953      	ldr	r1, [pc, #332]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 80027a8:	4313      	orrs	r3, r2
 80027aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0302 	and.w	r3, r3, #2
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d010      	beq.n	80027da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	68da      	ldr	r2, [r3, #12]
 80027bc:	4b4d      	ldr	r3, [pc, #308]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	f003 030f 	and.w	r3, r3, #15
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d908      	bls.n	80027da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027c8:	4b4a      	ldr	r3, [pc, #296]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 80027ca:	699b      	ldr	r3, [r3, #24]
 80027cc:	f023 020f 	bic.w	r2, r3, #15
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	68db      	ldr	r3, [r3, #12]
 80027d4:	4947      	ldr	r1, [pc, #284]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d055      	beq.n	8002892 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80027e6:	4b43      	ldr	r3, [pc, #268]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 80027e8:	699b      	ldr	r3, [r3, #24]
 80027ea:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	4940      	ldr	r1, [pc, #256]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	685b      	ldr	r3, [r3, #4]
 80027fc:	2b02      	cmp	r3, #2
 80027fe:	d107      	bne.n	8002810 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002800:	4b3c      	ldr	r3, [pc, #240]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d121      	bne.n	8002850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e0f6      	b.n	80029fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d107      	bne.n	8002828 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002818:	4b36      	ldr	r3, [pc, #216]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002820:	2b00      	cmp	r3, #0
 8002822:	d115      	bne.n	8002850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e0ea      	b.n	80029fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d107      	bne.n	8002840 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002830:	4b30      	ldr	r3, [pc, #192]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002838:	2b00      	cmp	r3, #0
 800283a:	d109      	bne.n	8002850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e0de      	b.n	80029fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002840:	4b2c      	ldr	r3, [pc, #176]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d101      	bne.n	8002850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800284c:	2301      	movs	r3, #1
 800284e:	e0d6      	b.n	80029fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002850:	4b28      	ldr	r3, [pc, #160]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 8002852:	691b      	ldr	r3, [r3, #16]
 8002854:	f023 0207 	bic.w	r2, r3, #7
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	4925      	ldr	r1, [pc, #148]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 800285e:	4313      	orrs	r3, r2
 8002860:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002862:	f7fe fecd 	bl	8001600 <HAL_GetTick>
 8002866:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002868:	e00a      	b.n	8002880 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800286a:	f7fe fec9 	bl	8001600 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0be      	b.n	80029fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002880:	4b1c      	ldr	r3, [pc, #112]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	00db      	lsls	r3, r3, #3
 800288e:	429a      	cmp	r2, r3
 8002890:	d1eb      	bne.n	800286a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0302 	and.w	r3, r3, #2
 800289a:	2b00      	cmp	r3, #0
 800289c:	d010      	beq.n	80028c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	4b14      	ldr	r3, [pc, #80]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 80028a4:	699b      	ldr	r3, [r3, #24]
 80028a6:	f003 030f 	and.w	r3, r3, #15
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d208      	bcs.n	80028c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028ae:	4b11      	ldr	r3, [pc, #68]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 80028b0:	699b      	ldr	r3, [r3, #24]
 80028b2:	f023 020f 	bic.w	r2, r3, #15
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	490e      	ldr	r1, [pc, #56]	@ (80028f4 <HAL_RCC_ClockConfig+0x244>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028c0:	4b0b      	ldr	r3, [pc, #44]	@ (80028f0 <HAL_RCC_ClockConfig+0x240>)
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 030f 	and.w	r3, r3, #15
 80028c8:	683a      	ldr	r2, [r7, #0]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d214      	bcs.n	80028f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028ce:	4b08      	ldr	r3, [pc, #32]	@ (80028f0 <HAL_RCC_ClockConfig+0x240>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f023 020f 	bic.w	r2, r3, #15
 80028d6:	4906      	ldr	r1, [pc, #24]	@ (80028f0 <HAL_RCC_ClockConfig+0x240>)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	4313      	orrs	r3, r2
 80028dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028de:	4b04      	ldr	r3, [pc, #16]	@ (80028f0 <HAL_RCC_ClockConfig+0x240>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 030f 	and.w	r3, r3, #15
 80028e6:	683a      	ldr	r2, [r7, #0]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d005      	beq.n	80028f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80028ec:	2301      	movs	r3, #1
 80028ee:	e086      	b.n	80029fe <HAL_RCC_ClockConfig+0x34e>
 80028f0:	52002000 	.word	0x52002000
 80028f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f003 0304 	and.w	r3, r3, #4
 8002900:	2b00      	cmp	r3, #0
 8002902:	d010      	beq.n	8002926 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	691a      	ldr	r2, [r3, #16]
 8002908:	4b3f      	ldr	r3, [pc, #252]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 800290a:	699b      	ldr	r3, [r3, #24]
 800290c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002910:	429a      	cmp	r2, r3
 8002912:	d208      	bcs.n	8002926 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002914:	4b3c      	ldr	r3, [pc, #240]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	4939      	ldr	r1, [pc, #228]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 8002922:	4313      	orrs	r3, r2
 8002924:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 0308 	and.w	r3, r3, #8
 800292e:	2b00      	cmp	r3, #0
 8002930:	d010      	beq.n	8002954 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695a      	ldr	r2, [r3, #20]
 8002936:	4b34      	ldr	r3, [pc, #208]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800293e:	429a      	cmp	r2, r3
 8002940:	d208      	bcs.n	8002954 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002942:	4b31      	ldr	r3, [pc, #196]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 8002944:	69db      	ldr	r3, [r3, #28]
 8002946:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	695b      	ldr	r3, [r3, #20]
 800294e:	492e      	ldr	r1, [pc, #184]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 8002950:	4313      	orrs	r3, r2
 8002952:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0310 	and.w	r3, r3, #16
 800295c:	2b00      	cmp	r3, #0
 800295e:	d010      	beq.n	8002982 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	4b28      	ldr	r3, [pc, #160]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800296c:	429a      	cmp	r2, r3
 800296e:	d208      	bcs.n	8002982 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002970:	4b25      	ldr	r3, [pc, #148]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 8002972:	69db      	ldr	r3, [r3, #28]
 8002974:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	4922      	ldr	r1, [pc, #136]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 800297e:	4313      	orrs	r3, r2
 8002980:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 0320 	and.w	r3, r3, #32
 800298a:	2b00      	cmp	r3, #0
 800298c:	d010      	beq.n	80029b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	4b1d      	ldr	r3, [pc, #116]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800299a:	429a      	cmp	r2, r3
 800299c:	d208      	bcs.n	80029b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800299e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 80029a0:	6a1b      	ldr	r3, [r3, #32]
 80029a2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	69db      	ldr	r3, [r3, #28]
 80029aa:	4917      	ldr	r1, [pc, #92]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 80029ac:	4313      	orrs	r3, r2
 80029ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80029b0:	f000 f834 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 80029b4:	4602      	mov	r2, r0
 80029b6:	4b14      	ldr	r3, [pc, #80]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	0a1b      	lsrs	r3, r3, #8
 80029bc:	f003 030f 	and.w	r3, r3, #15
 80029c0:	4912      	ldr	r1, [pc, #72]	@ (8002a0c <HAL_RCC_ClockConfig+0x35c>)
 80029c2:	5ccb      	ldrb	r3, [r1, r3]
 80029c4:	f003 031f 	and.w	r3, r3, #31
 80029c8:	fa22 f303 	lsr.w	r3, r2, r3
 80029cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80029ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002a08 <HAL_RCC_ClockConfig+0x358>)
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f003 030f 	and.w	r3, r3, #15
 80029d6:	4a0d      	ldr	r2, [pc, #52]	@ (8002a0c <HAL_RCC_ClockConfig+0x35c>)
 80029d8:	5cd3      	ldrb	r3, [r2, r3]
 80029da:	f003 031f 	and.w	r3, r3, #31
 80029de:	693a      	ldr	r2, [r7, #16]
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	4a0a      	ldr	r2, [pc, #40]	@ (8002a10 <HAL_RCC_ClockConfig+0x360>)
 80029e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80029e8:	4a0a      	ldr	r2, [pc, #40]	@ (8002a14 <HAL_RCC_ClockConfig+0x364>)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80029ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <HAL_RCC_ClockConfig+0x368>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	4618      	mov	r0, r3
 80029f4:	f7fe fdba 	bl	800156c <HAL_InitTick>
 80029f8:	4603      	mov	r3, r0
 80029fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	58024400 	.word	0x58024400
 8002a0c:	08008938 	.word	0x08008938
 8002a10:	24000004 	.word	0x24000004
 8002a14:	24000000 	.word	0x24000000
 8002a18:	24000024 	.word	0x24000024

08002a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b089      	sub	sp, #36	@ 0x24
 8002a20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a22:	4bb3      	ldr	r3, [pc, #716]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a24:	691b      	ldr	r3, [r3, #16]
 8002a26:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002a2a:	2b18      	cmp	r3, #24
 8002a2c:	f200 8155 	bhi.w	8002cda <HAL_RCC_GetSysClockFreq+0x2be>
 8002a30:	a201      	add	r2, pc, #4	@ (adr r2, 8002a38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a36:	bf00      	nop
 8002a38:	08002a9d 	.word	0x08002a9d
 8002a3c:	08002cdb 	.word	0x08002cdb
 8002a40:	08002cdb 	.word	0x08002cdb
 8002a44:	08002cdb 	.word	0x08002cdb
 8002a48:	08002cdb 	.word	0x08002cdb
 8002a4c:	08002cdb 	.word	0x08002cdb
 8002a50:	08002cdb 	.word	0x08002cdb
 8002a54:	08002cdb 	.word	0x08002cdb
 8002a58:	08002ac3 	.word	0x08002ac3
 8002a5c:	08002cdb 	.word	0x08002cdb
 8002a60:	08002cdb 	.word	0x08002cdb
 8002a64:	08002cdb 	.word	0x08002cdb
 8002a68:	08002cdb 	.word	0x08002cdb
 8002a6c:	08002cdb 	.word	0x08002cdb
 8002a70:	08002cdb 	.word	0x08002cdb
 8002a74:	08002cdb 	.word	0x08002cdb
 8002a78:	08002ac9 	.word	0x08002ac9
 8002a7c:	08002cdb 	.word	0x08002cdb
 8002a80:	08002cdb 	.word	0x08002cdb
 8002a84:	08002cdb 	.word	0x08002cdb
 8002a88:	08002cdb 	.word	0x08002cdb
 8002a8c:	08002cdb 	.word	0x08002cdb
 8002a90:	08002cdb 	.word	0x08002cdb
 8002a94:	08002cdb 	.word	0x08002cdb
 8002a98:	08002acf 	.word	0x08002acf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a9c:	4b94      	ldr	r3, [pc, #592]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0320 	and.w	r3, r3, #32
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d009      	beq.n	8002abc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002aa8:	4b91      	ldr	r3, [pc, #580]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	08db      	lsrs	r3, r3, #3
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	4a90      	ldr	r2, [pc, #576]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ab8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002aba:	e111      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002abc:	4b8d      	ldr	r3, [pc, #564]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002abe:	61bb      	str	r3, [r7, #24]
      break;
 8002ac0:	e10e      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ac2:	4b8d      	ldr	r3, [pc, #564]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ac4:	61bb      	str	r3, [r7, #24]
      break;
 8002ac6:	e10b      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ac8:	4b8c      	ldr	r3, [pc, #560]	@ (8002cfc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002aca:	61bb      	str	r3, [r7, #24]
      break;
 8002acc:	e108      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002ace:	4b88      	ldr	r3, [pc, #544]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ad2:	f003 0303 	and.w	r3, r3, #3
 8002ad6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ad8:	4b85      	ldr	r3, [pc, #532]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ae2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002ae4:	4b82      	ldr	r3, [pc, #520]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002aee:	4b80      	ldr	r3, [pc, #512]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002af0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002af2:	08db      	lsrs	r3, r3, #3
 8002af4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002af8:	68fa      	ldr	r2, [r7, #12]
 8002afa:	fb02 f303 	mul.w	r3, r2, r3
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	f000 80e1 	beq.w	8002cd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2b02      	cmp	r3, #2
 8002b16:	f000 8083 	beq.w	8002c20 <HAL_RCC_GetSysClockFreq+0x204>
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	f200 80a1 	bhi.w	8002c64 <HAL_RCC_GetSysClockFreq+0x248>
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d003      	beq.n	8002b30 <HAL_RCC_GetSysClockFreq+0x114>
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d056      	beq.n	8002bdc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002b2e:	e099      	b.n	8002c64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b30:	4b6f      	ldr	r3, [pc, #444]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0320 	and.w	r3, r3, #32
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d02d      	beq.n	8002b98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b3c:	4b6c      	ldr	r3, [pc, #432]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	08db      	lsrs	r3, r3, #3
 8002b42:	f003 0303 	and.w	r3, r3, #3
 8002b46:	4a6b      	ldr	r2, [pc, #428]	@ (8002cf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
 8002b4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	ee07 3a90 	vmov	s15, r3
 8002b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	ee07 3a90 	vmov	s15, r3
 8002b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b66:	4b62      	ldr	r3, [pc, #392]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b6e:	ee07 3a90 	vmov	s15, r3
 8002b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b7a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002b96:	e087      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	ee07 3a90 	vmov	s15, r3
 8002b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002d04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002baa:	4b51      	ldr	r3, [pc, #324]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bbe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bda:	e065      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002d08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bee:	4b40      	ldr	r3, [pc, #256]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c02:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c1e:	e043      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c20:	693b      	ldr	r3, [r7, #16]
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002d0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8002c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c32:	4b2f      	ldr	r3, [pc, #188]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c46:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002c62:	e021      	b.n	8002ca8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002d08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c76:	4b1e      	ldr	r3, [pc, #120]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8002c8a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ca6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002ca8:	4b11      	ldr	r3, [pc, #68]	@ (8002cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002caa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002cac:	0a5b      	lsrs	r3, r3, #9
 8002cae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	ee07 3a90 	vmov	s15, r3
 8002cbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8002cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ccc:	ee17 3a90 	vmov	r3, s15
 8002cd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002cd2:	e005      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	61bb      	str	r3, [r7, #24]
      break;
 8002cd8:	e002      	b.n	8002ce0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002cda:	4b07      	ldr	r3, [pc, #28]	@ (8002cf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002cdc:	61bb      	str	r3, [r7, #24]
      break;
 8002cde:	bf00      	nop
  }

  return sysclockfreq;
 8002ce0:	69bb      	ldr	r3, [r7, #24]
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3724      	adds	r7, #36	@ 0x24
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	58024400 	.word	0x58024400
 8002cf4:	03d09000 	.word	0x03d09000
 8002cf8:	003d0900 	.word	0x003d0900
 8002cfc:	017d7840 	.word	0x017d7840
 8002d00:	46000000 	.word	0x46000000
 8002d04:	4c742400 	.word	0x4c742400
 8002d08:	4a742400 	.word	0x4a742400
 8002d0c:	4bbebc20 	.word	0x4bbebc20

08002d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b082      	sub	sp, #8
 8002d14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002d16:	f7ff fe81 	bl	8002a1c <HAL_RCC_GetSysClockFreq>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	4b10      	ldr	r3, [pc, #64]	@ (8002d60 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d1e:	699b      	ldr	r3, [r3, #24]
 8002d20:	0a1b      	lsrs	r3, r3, #8
 8002d22:	f003 030f 	and.w	r3, r3, #15
 8002d26:	490f      	ldr	r1, [pc, #60]	@ (8002d64 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d28:	5ccb      	ldrb	r3, [r1, r3]
 8002d2a:	f003 031f 	and.w	r3, r3, #31
 8002d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002d34:	4b0a      	ldr	r3, [pc, #40]	@ (8002d60 <HAL_RCC_GetHCLKFreq+0x50>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f003 030f 	and.w	r3, r3, #15
 8002d3c:	4a09      	ldr	r2, [pc, #36]	@ (8002d64 <HAL_RCC_GetHCLKFreq+0x54>)
 8002d3e:	5cd3      	ldrb	r3, [r2, r3]
 8002d40:	f003 031f 	and.w	r3, r3, #31
 8002d44:	687a      	ldr	r2, [r7, #4]
 8002d46:	fa22 f303 	lsr.w	r3, r2, r3
 8002d4a:	4a07      	ldr	r2, [pc, #28]	@ (8002d68 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002d4e:	4a07      	ldr	r2, [pc, #28]	@ (8002d6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002d54:	4b04      	ldr	r3, [pc, #16]	@ (8002d68 <HAL_RCC_GetHCLKFreq+0x58>)
 8002d56:	681b      	ldr	r3, [r3, #0]
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}
 8002d60:	58024400 	.word	0x58024400
 8002d64:	08008938 	.word	0x08008938
 8002d68:	24000004 	.word	0x24000004
 8002d6c:	24000000 	.word	0x24000000

08002d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002d74:	f7ff ffcc 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	4b06      	ldr	r3, [pc, #24]	@ (8002d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d7c:	69db      	ldr	r3, [r3, #28]
 8002d7e:	091b      	lsrs	r3, r3, #4
 8002d80:	f003 0307 	and.w	r3, r3, #7
 8002d84:	4904      	ldr	r1, [pc, #16]	@ (8002d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d86:	5ccb      	ldrb	r3, [r1, r3]
 8002d88:	f003 031f 	and.w	r3, r3, #31
 8002d8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002d90:	4618      	mov	r0, r3
 8002d92:	bd80      	pop	{r7, pc}
 8002d94:	58024400 	.word	0x58024400
 8002d98:	08008938 	.word	0x08008938

08002d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002da0:	f7ff ffb6 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002da4:	4602      	mov	r2, r0
 8002da6:	4b06      	ldr	r3, [pc, #24]	@ (8002dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002da8:	69db      	ldr	r3, [r3, #28]
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	f003 0307 	and.w	r3, r3, #7
 8002db0:	4904      	ldr	r1, [pc, #16]	@ (8002dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002db2:	5ccb      	ldrb	r3, [r1, r3]
 8002db4:	f003 031f 	and.w	r3, r3, #31
 8002db8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002dbc:	4618      	mov	r0, r3
 8002dbe:	bd80      	pop	{r7, pc}
 8002dc0:	58024400 	.word	0x58024400
 8002dc4:	08008938 	.word	0x08008938

08002dc8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002dcc:	f7ff ffa0 	bl	8002d10 <HAL_RCC_GetHCLKFreq>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	4b06      	ldr	r3, [pc, #24]	@ (8002dec <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	4904      	ldr	r1, [pc, #16]	@ (8002df0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002dde:	5ccb      	ldrb	r3, [r1, r3]
 8002de0:	f003 031f 	and.w	r3, r3, #31
 8002de4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	bd80      	pop	{r7, pc}
 8002dec:	58024400 	.word	0x58024400
 8002df0:	08008938 	.word	0x08008938

08002df4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b089      	sub	sp, #36	@ 0x24
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002dfc:	4ba1      	ldr	r3, [pc, #644]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002e06:	4b9f      	ldr	r3, [pc, #636]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e0a:	0b1b      	lsrs	r3, r3, #12
 8002e0c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e10:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002e12:	4b9c      	ldr	r3, [pc, #624]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e16:	091b      	lsrs	r3, r3, #4
 8002e18:	f003 0301 	and.w	r3, r3, #1
 8002e1c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002e1e:	4b99      	ldr	r3, [pc, #612]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002e22:	08db      	lsrs	r3, r3, #3
 8002e24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e28:	693a      	ldr	r2, [r7, #16]
 8002e2a:	fb02 f303 	mul.w	r3, r2, r3
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e36:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002e3a:	697b      	ldr	r3, [r7, #20]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 8111 	beq.w	8003064 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	2b02      	cmp	r3, #2
 8002e46:	f000 8083 	beq.w	8002f50 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	2b02      	cmp	r3, #2
 8002e4e:	f200 80a1 	bhi.w	8002f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002e52:	69bb      	ldr	r3, [r7, #24]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d003      	beq.n	8002e60 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002e58:	69bb      	ldr	r3, [r7, #24]
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d056      	beq.n	8002f0c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002e5e:	e099      	b.n	8002f94 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e60:	4b88      	ldr	r3, [pc, #544]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f003 0320 	and.w	r3, r3, #32
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d02d      	beq.n	8002ec8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e6c:	4b85      	ldr	r3, [pc, #532]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	08db      	lsrs	r3, r3, #3
 8002e72:	f003 0303 	and.w	r3, r3, #3
 8002e76:	4a84      	ldr	r2, [pc, #528]	@ (8003088 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002e78:	fa22 f303 	lsr.w	r3, r2, r3
 8002e7c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	ee07 3a90 	vmov	s15, r3
 8002e84:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	ee07 3a90 	vmov	s15, r3
 8002e8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e96:	4b7b      	ldr	r3, [pc, #492]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002eaa:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800308c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002ec6:	e087      	b.n	8002fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003090 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eda:	4b6a      	ldr	r3, [pc, #424]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002edc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8002eee:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800308c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f0a:	e065      	b.n	8002fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f16:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1e:	4b59      	ldr	r3, [pc, #356]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f32:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800308c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f4e:	e043      	b.n	8002fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003098 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f62:	4b48      	ldr	r3, [pc, #288]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f76:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800308c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f92:	e021      	b.n	8002fd8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	ee07 3a90 	vmov	s15, r3
 8002f9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f9e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003094 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002fa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fa6:	4b37      	ldr	r3, [pc, #220]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002faa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fae:	ee07 3a90 	vmov	s15, r3
 8002fb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002fba:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800308c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002fbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fd6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002fd8:	4b2a      	ldr	r3, [pc, #168]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002fda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002fdc:	0a5b      	lsrs	r3, r3, #9
 8002fde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fe2:	ee07 3a90 	vmov	s15, r3
 8002fe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ff2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ff6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ffa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ffe:	ee17 2a90 	vmov	r2, s15
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003006:	4b1f      	ldr	r3, [pc, #124]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003008:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300a:	0c1b      	lsrs	r3, r3, #16
 800300c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003010:	ee07 3a90 	vmov	s15, r3
 8003014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003018:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800301c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003020:	edd7 6a07 	vldr	s13, [r7, #28]
 8003024:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003028:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800302c:	ee17 2a90 	vmov	r2, s15
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003034:	4b13      	ldr	r3, [pc, #76]	@ (8003084 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003038:	0e1b      	lsrs	r3, r3, #24
 800303a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800303e:	ee07 3a90 	vmov	s15, r3
 8003042:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003046:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800304a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800304e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003052:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003056:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800305a:	ee17 2a90 	vmov	r2, s15
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003062:	e008      	b.n	8003076 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
}
 8003076:	bf00      	nop
 8003078:	3724      	adds	r7, #36	@ 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	58024400 	.word	0x58024400
 8003088:	03d09000 	.word	0x03d09000
 800308c:	46000000 	.word	0x46000000
 8003090:	4c742400 	.word	0x4c742400
 8003094:	4a742400 	.word	0x4a742400
 8003098:	4bbebc20 	.word	0x4bbebc20

0800309c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800309c:	b480      	push	{r7}
 800309e:	b089      	sub	sp, #36	@ 0x24
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80030a4:	4ba1      	ldr	r3, [pc, #644]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a8:	f003 0303 	and.w	r3, r3, #3
 80030ac:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80030ae:	4b9f      	ldr	r3, [pc, #636]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b2:	0d1b      	lsrs	r3, r3, #20
 80030b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80030b8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80030ba:	4b9c      	ldr	r3, [pc, #624]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030be:	0a1b      	lsrs	r3, r3, #8
 80030c0:	f003 0301 	and.w	r3, r3, #1
 80030c4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80030c6:	4b99      	ldr	r3, [pc, #612]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ca:	08db      	lsrs	r3, r3, #3
 80030cc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	fb02 f303 	mul.w	r3, r2, r3
 80030d6:	ee07 3a90 	vmov	s15, r3
 80030da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030de:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	f000 8111 	beq.w	800330c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	2b02      	cmp	r3, #2
 80030ee:	f000 8083 	beq.w	80031f8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	2b02      	cmp	r3, #2
 80030f6:	f200 80a1 	bhi.w	800323c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2b01      	cmp	r3, #1
 8003104:	d056      	beq.n	80031b4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003106:	e099      	b.n	800323c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003108:	4b88      	ldr	r3, [pc, #544]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f003 0320 	and.w	r3, r3, #32
 8003110:	2b00      	cmp	r3, #0
 8003112:	d02d      	beq.n	8003170 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003114:	4b85      	ldr	r3, [pc, #532]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	08db      	lsrs	r3, r3, #3
 800311a:	f003 0303 	and.w	r3, r3, #3
 800311e:	4a84      	ldr	r2, [pc, #528]	@ (8003330 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003120:	fa22 f303 	lsr.w	r3, r2, r3
 8003124:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	ee07 3a90 	vmov	s15, r3
 800312c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	ee07 3a90 	vmov	s15, r3
 8003136:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800313a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800313e:	4b7b      	ldr	r3, [pc, #492]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003142:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003146:	ee07 3a90 	vmov	s15, r3
 800314a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800314e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003152:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003156:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800315a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800315e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003162:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003166:	ee67 7a27 	vmul.f32	s15, s14, s15
 800316a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800316e:	e087      	b.n	8003280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003170:	697b      	ldr	r3, [r7, #20]
 8003172:	ee07 3a90 	vmov	s15, r3
 8003176:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800317a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003338 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800317e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003182:	4b6a      	ldr	r3, [pc, #424]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003192:	ed97 6a03 	vldr	s12, [r7, #12]
 8003196:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800319a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800319e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031b2:	e065      	b.n	8003280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80031b4:	697b      	ldr	r3, [r7, #20]
 80031b6:	ee07 3a90 	vmov	s15, r3
 80031ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031be:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800333c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80031c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80031c6:	4b59      	ldr	r3, [pc, #356]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80031c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80031ce:	ee07 3a90 	vmov	s15, r3
 80031d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80031d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80031da:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80031de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80031e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80031ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80031ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80031f6:	e043      	b.n	8003280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	ee07 3a90 	vmov	s15, r3
 80031fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003202:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003340 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003206:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800320a:	4b48      	ldr	r3, [pc, #288]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003212:	ee07 3a90 	vmov	s15, r3
 8003216:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800321a:	ed97 6a03 	vldr	s12, [r7, #12]
 800321e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003222:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003226:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800322a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800322e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003236:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800323a:	e021      	b.n	8003280 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	ee07 3a90 	vmov	s15, r3
 8003242:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003246:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800333c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800324a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800324e:	4b37      	ldr	r3, [pc, #220]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003252:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003256:	ee07 3a90 	vmov	s15, r3
 800325a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800325e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003262:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003334 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003266:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800326a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800326e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003272:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800327a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800327e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003280:	4b2a      	ldr	r3, [pc, #168]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003284:	0a5b      	lsrs	r3, r3, #9
 8003286:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003292:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003296:	ee37 7a87 	vadd.f32	s14, s15, s14
 800329a:	edd7 6a07 	vldr	s13, [r7, #28]
 800329e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032a6:	ee17 2a90 	vmov	r2, s15
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80032ae:	4b1f      	ldr	r3, [pc, #124]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032b2:	0c1b      	lsrs	r3, r3, #16
 80032b4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032b8:	ee07 3a90 	vmov	s15, r3
 80032bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80032c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80032cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032d4:	ee17 2a90 	vmov	r2, s15
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80032dc:	4b13      	ldr	r3, [pc, #76]	@ (800332c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80032de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e0:	0e1b      	lsrs	r3, r3, #24
 80032e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80032e6:	ee07 3a90 	vmov	s15, r3
 80032ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ee:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80032f2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80032f6:	edd7 6a07 	vldr	s13, [r7, #28]
 80032fa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80032fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003302:	ee17 2a90 	vmov	r2, s15
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800330a:	e008      	b.n	800331e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2200      	movs	r2, #0
 8003310:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2200      	movs	r2, #0
 8003316:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2200      	movs	r2, #0
 800331c:	609a      	str	r2, [r3, #8]
}
 800331e:	bf00      	nop
 8003320:	3724      	adds	r7, #36	@ 0x24
 8003322:	46bd      	mov	sp, r7
 8003324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003328:	4770      	bx	lr
 800332a:	bf00      	nop
 800332c:	58024400 	.word	0x58024400
 8003330:	03d09000 	.word	0x03d09000
 8003334:	46000000 	.word	0x46000000
 8003338:	4c742400 	.word	0x4c742400
 800333c:	4a742400 	.word	0x4a742400
 8003340:	4bbebc20 	.word	0x4bbebc20

08003344 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d101      	bne.n	8003356 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e042      	b.n	80033dc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335c:	2b00      	cmp	r3, #0
 800335e:	d106      	bne.n	800336e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003368:	6878      	ldr	r0, [r7, #4]
 800336a:	f000 f83b 	bl	80033e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2224      	movs	r2, #36	@ 0x24
 8003372:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	681a      	ldr	r2, [r3, #0]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 fe28 	bl	8003fe4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f000 f8bd 	bl	8003514 <UART_SetConfig>
 800339a:	4603      	mov	r3, r0
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e01b      	b.n	80033dc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80033b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80033c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80033d4:	6878      	ldr	r0, [r7, #4]
 80033d6:	f000 fea7 	bl	8004128 <UART_CheckIdleState>
 80033da:	4603      	mov	r3, r0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80033e4:	b480      	push	{r7}
 80033e6:	b083      	sub	sp, #12
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80033ec:	bf00      	nop
 80033ee:	370c      	adds	r7, #12
 80033f0:	46bd      	mov	sp, r7
 80033f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f6:	4770      	bx	lr

080033f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b08a      	sub	sp, #40	@ 0x28
 80033fc:	af02      	add	r7, sp, #8
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	603b      	str	r3, [r7, #0]
 8003404:	4613      	mov	r3, r2
 8003406:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800340e:	2b20      	cmp	r3, #32
 8003410:	d17b      	bne.n	800350a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <HAL_UART_Transmit+0x26>
 8003418:	88fb      	ldrh	r3, [r7, #6]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d101      	bne.n	8003422 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800341e:	2301      	movs	r3, #1
 8003420:	e074      	b.n	800350c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2221      	movs	r2, #33	@ 0x21
 800342e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003432:	f7fe f8e5 	bl	8001600 <HAL_GetTick>
 8003436:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	88fa      	ldrh	r2, [r7, #6]
 800343c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	88fa      	ldrh	r2, [r7, #6]
 8003444:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003450:	d108      	bne.n	8003464 <HAL_UART_Transmit+0x6c>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	691b      	ldr	r3, [r3, #16]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d104      	bne.n	8003464 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	61bb      	str	r3, [r7, #24]
 8003462:	e003      	b.n	800346c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003468:	2300      	movs	r3, #0
 800346a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800346c:	e030      	b.n	80034d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	2200      	movs	r2, #0
 8003476:	2180      	movs	r1, #128	@ 0x80
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f000 feff 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	2220      	movs	r2, #32
 8003488:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800348c:	2303      	movs	r3, #3
 800348e:	e03d      	b.n	800350c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10b      	bne.n	80034ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003496:	69bb      	ldr	r3, [r7, #24]
 8003498:	881b      	ldrh	r3, [r3, #0]
 800349a:	461a      	mov	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80034a6:	69bb      	ldr	r3, [r7, #24]
 80034a8:	3302      	adds	r3, #2
 80034aa:	61bb      	str	r3, [r7, #24]
 80034ac:	e007      	b.n	80034be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	781a      	ldrb	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80034b8:	69fb      	ldr	r3, [r7, #28]
 80034ba:	3301      	adds	r3, #1
 80034bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80034c4:	b29b      	uxth	r3, r3
 80034c6:	3b01      	subs	r3, #1
 80034c8:	b29a      	uxth	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80034d6:	b29b      	uxth	r3, r3
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d1c8      	bne.n	800346e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	9300      	str	r3, [sp, #0]
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	2200      	movs	r2, #0
 80034e4:	2140      	movs	r1, #64	@ 0x40
 80034e6:	68f8      	ldr	r0, [r7, #12]
 80034e8:	f000 fec8 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 80034ec:	4603      	mov	r3, r0
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d005      	beq.n	80034fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e006      	b.n	800350c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	2220      	movs	r2, #32
 8003502:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003506:	2300      	movs	r3, #0
 8003508:	e000      	b.n	800350c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800350a:	2302      	movs	r3, #2
  }
}
 800350c:	4618      	mov	r0, r3
 800350e:	3720      	adds	r7, #32
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003514:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003518:	b092      	sub	sp, #72	@ 0x48
 800351a:	af00      	add	r7, sp, #0
 800351c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800351e:	2300      	movs	r3, #0
 8003520:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	431a      	orrs	r2, r3
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	695b      	ldr	r3, [r3, #20]
 8003532:	431a      	orrs	r2, r3
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	4313      	orrs	r3, r2
 800353a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	4bbe      	ldr	r3, [pc, #760]	@ (800383c <UART_SetConfig+0x328>)
 8003544:	4013      	ands	r3, r2
 8003546:	697a      	ldr	r2, [r7, #20]
 8003548:	6812      	ldr	r2, [r2, #0]
 800354a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800354c:	430b      	orrs	r3, r1
 800354e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800355a:	697b      	ldr	r3, [r7, #20]
 800355c:	68da      	ldr	r2, [r3, #12]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4ab3      	ldr	r2, [pc, #716]	@ (8003840 <UART_SetConfig+0x32c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d004      	beq.n	8003580 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	6a1b      	ldr	r3, [r3, #32]
 800357a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800357c:	4313      	orrs	r3, r2
 800357e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	689a      	ldr	r2, [r3, #8]
 8003586:	4baf      	ldr	r3, [pc, #700]	@ (8003844 <UART_SetConfig+0x330>)
 8003588:	4013      	ands	r3, r2
 800358a:	697a      	ldr	r2, [r7, #20]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8003590:	430b      	orrs	r3, r1
 8003592:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800359a:	f023 010f 	bic.w	r1, r3, #15
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4aa6      	ldr	r2, [pc, #664]	@ (8003848 <UART_SetConfig+0x334>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d177      	bne.n	80036a4 <UART_SetConfig+0x190>
 80035b4:	4ba5      	ldr	r3, [pc, #660]	@ (800384c <UART_SetConfig+0x338>)
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035bc:	2b28      	cmp	r3, #40	@ 0x28
 80035be:	d86d      	bhi.n	800369c <UART_SetConfig+0x188>
 80035c0:	a201      	add	r2, pc, #4	@ (adr r2, 80035c8 <UART_SetConfig+0xb4>)
 80035c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035c6:	bf00      	nop
 80035c8:	0800366d 	.word	0x0800366d
 80035cc:	0800369d 	.word	0x0800369d
 80035d0:	0800369d 	.word	0x0800369d
 80035d4:	0800369d 	.word	0x0800369d
 80035d8:	0800369d 	.word	0x0800369d
 80035dc:	0800369d 	.word	0x0800369d
 80035e0:	0800369d 	.word	0x0800369d
 80035e4:	0800369d 	.word	0x0800369d
 80035e8:	08003675 	.word	0x08003675
 80035ec:	0800369d 	.word	0x0800369d
 80035f0:	0800369d 	.word	0x0800369d
 80035f4:	0800369d 	.word	0x0800369d
 80035f8:	0800369d 	.word	0x0800369d
 80035fc:	0800369d 	.word	0x0800369d
 8003600:	0800369d 	.word	0x0800369d
 8003604:	0800369d 	.word	0x0800369d
 8003608:	0800367d 	.word	0x0800367d
 800360c:	0800369d 	.word	0x0800369d
 8003610:	0800369d 	.word	0x0800369d
 8003614:	0800369d 	.word	0x0800369d
 8003618:	0800369d 	.word	0x0800369d
 800361c:	0800369d 	.word	0x0800369d
 8003620:	0800369d 	.word	0x0800369d
 8003624:	0800369d 	.word	0x0800369d
 8003628:	08003685 	.word	0x08003685
 800362c:	0800369d 	.word	0x0800369d
 8003630:	0800369d 	.word	0x0800369d
 8003634:	0800369d 	.word	0x0800369d
 8003638:	0800369d 	.word	0x0800369d
 800363c:	0800369d 	.word	0x0800369d
 8003640:	0800369d 	.word	0x0800369d
 8003644:	0800369d 	.word	0x0800369d
 8003648:	0800368d 	.word	0x0800368d
 800364c:	0800369d 	.word	0x0800369d
 8003650:	0800369d 	.word	0x0800369d
 8003654:	0800369d 	.word	0x0800369d
 8003658:	0800369d 	.word	0x0800369d
 800365c:	0800369d 	.word	0x0800369d
 8003660:	0800369d 	.word	0x0800369d
 8003664:	0800369d 	.word	0x0800369d
 8003668:	08003695 	.word	0x08003695
 800366c:	2301      	movs	r3, #1
 800366e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003672:	e222      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003674:	2304      	movs	r3, #4
 8003676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800367a:	e21e      	b.n	8003aba <UART_SetConfig+0x5a6>
 800367c:	2308      	movs	r3, #8
 800367e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003682:	e21a      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003684:	2310      	movs	r3, #16
 8003686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800368a:	e216      	b.n	8003aba <UART_SetConfig+0x5a6>
 800368c:	2320      	movs	r3, #32
 800368e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003692:	e212      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003694:	2340      	movs	r3, #64	@ 0x40
 8003696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800369a:	e20e      	b.n	8003aba <UART_SetConfig+0x5a6>
 800369c:	2380      	movs	r3, #128	@ 0x80
 800369e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036a2:	e20a      	b.n	8003aba <UART_SetConfig+0x5a6>
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	4a69      	ldr	r2, [pc, #420]	@ (8003850 <UART_SetConfig+0x33c>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d130      	bne.n	8003710 <UART_SetConfig+0x1fc>
 80036ae:	4b67      	ldr	r3, [pc, #412]	@ (800384c <UART_SetConfig+0x338>)
 80036b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036b2:	f003 0307 	and.w	r3, r3, #7
 80036b6:	2b05      	cmp	r3, #5
 80036b8:	d826      	bhi.n	8003708 <UART_SetConfig+0x1f4>
 80036ba:	a201      	add	r2, pc, #4	@ (adr r2, 80036c0 <UART_SetConfig+0x1ac>)
 80036bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036c0:	080036d9 	.word	0x080036d9
 80036c4:	080036e1 	.word	0x080036e1
 80036c8:	080036e9 	.word	0x080036e9
 80036cc:	080036f1 	.word	0x080036f1
 80036d0:	080036f9 	.word	0x080036f9
 80036d4:	08003701 	.word	0x08003701
 80036d8:	2300      	movs	r3, #0
 80036da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036de:	e1ec      	b.n	8003aba <UART_SetConfig+0x5a6>
 80036e0:	2304      	movs	r3, #4
 80036e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036e6:	e1e8      	b.n	8003aba <UART_SetConfig+0x5a6>
 80036e8:	2308      	movs	r3, #8
 80036ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036ee:	e1e4      	b.n	8003aba <UART_SetConfig+0x5a6>
 80036f0:	2310      	movs	r3, #16
 80036f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036f6:	e1e0      	b.n	8003aba <UART_SetConfig+0x5a6>
 80036f8:	2320      	movs	r3, #32
 80036fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80036fe:	e1dc      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003700:	2340      	movs	r3, #64	@ 0x40
 8003702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003706:	e1d8      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003708:	2380      	movs	r3, #128	@ 0x80
 800370a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800370e:	e1d4      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a4f      	ldr	r2, [pc, #316]	@ (8003854 <UART_SetConfig+0x340>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d130      	bne.n	800377c <UART_SetConfig+0x268>
 800371a:	4b4c      	ldr	r3, [pc, #304]	@ (800384c <UART_SetConfig+0x338>)
 800371c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371e:	f003 0307 	and.w	r3, r3, #7
 8003722:	2b05      	cmp	r3, #5
 8003724:	d826      	bhi.n	8003774 <UART_SetConfig+0x260>
 8003726:	a201      	add	r2, pc, #4	@ (adr r2, 800372c <UART_SetConfig+0x218>)
 8003728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372c:	08003745 	.word	0x08003745
 8003730:	0800374d 	.word	0x0800374d
 8003734:	08003755 	.word	0x08003755
 8003738:	0800375d 	.word	0x0800375d
 800373c:	08003765 	.word	0x08003765
 8003740:	0800376d 	.word	0x0800376d
 8003744:	2300      	movs	r3, #0
 8003746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800374a:	e1b6      	b.n	8003aba <UART_SetConfig+0x5a6>
 800374c:	2304      	movs	r3, #4
 800374e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003752:	e1b2      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003754:	2308      	movs	r3, #8
 8003756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800375a:	e1ae      	b.n	8003aba <UART_SetConfig+0x5a6>
 800375c:	2310      	movs	r3, #16
 800375e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003762:	e1aa      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003764:	2320      	movs	r3, #32
 8003766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800376a:	e1a6      	b.n	8003aba <UART_SetConfig+0x5a6>
 800376c:	2340      	movs	r3, #64	@ 0x40
 800376e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003772:	e1a2      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003774:	2380      	movs	r3, #128	@ 0x80
 8003776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800377a:	e19e      	b.n	8003aba <UART_SetConfig+0x5a6>
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a35      	ldr	r2, [pc, #212]	@ (8003858 <UART_SetConfig+0x344>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d130      	bne.n	80037e8 <UART_SetConfig+0x2d4>
 8003786:	4b31      	ldr	r3, [pc, #196]	@ (800384c <UART_SetConfig+0x338>)
 8003788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800378a:	f003 0307 	and.w	r3, r3, #7
 800378e:	2b05      	cmp	r3, #5
 8003790:	d826      	bhi.n	80037e0 <UART_SetConfig+0x2cc>
 8003792:	a201      	add	r2, pc, #4	@ (adr r2, 8003798 <UART_SetConfig+0x284>)
 8003794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003798:	080037b1 	.word	0x080037b1
 800379c:	080037b9 	.word	0x080037b9
 80037a0:	080037c1 	.word	0x080037c1
 80037a4:	080037c9 	.word	0x080037c9
 80037a8:	080037d1 	.word	0x080037d1
 80037ac:	080037d9 	.word	0x080037d9
 80037b0:	2300      	movs	r3, #0
 80037b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037b6:	e180      	b.n	8003aba <UART_SetConfig+0x5a6>
 80037b8:	2304      	movs	r3, #4
 80037ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037be:	e17c      	b.n	8003aba <UART_SetConfig+0x5a6>
 80037c0:	2308      	movs	r3, #8
 80037c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037c6:	e178      	b.n	8003aba <UART_SetConfig+0x5a6>
 80037c8:	2310      	movs	r3, #16
 80037ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037ce:	e174      	b.n	8003aba <UART_SetConfig+0x5a6>
 80037d0:	2320      	movs	r3, #32
 80037d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037d6:	e170      	b.n	8003aba <UART_SetConfig+0x5a6>
 80037d8:	2340      	movs	r3, #64	@ 0x40
 80037da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037de:	e16c      	b.n	8003aba <UART_SetConfig+0x5a6>
 80037e0:	2380      	movs	r3, #128	@ 0x80
 80037e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80037e6:	e168      	b.n	8003aba <UART_SetConfig+0x5a6>
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a1b      	ldr	r2, [pc, #108]	@ (800385c <UART_SetConfig+0x348>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d142      	bne.n	8003878 <UART_SetConfig+0x364>
 80037f2:	4b16      	ldr	r3, [pc, #88]	@ (800384c <UART_SetConfig+0x338>)
 80037f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037f6:	f003 0307 	and.w	r3, r3, #7
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d838      	bhi.n	8003870 <UART_SetConfig+0x35c>
 80037fe:	a201      	add	r2, pc, #4	@ (adr r2, 8003804 <UART_SetConfig+0x2f0>)
 8003800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003804:	0800381d 	.word	0x0800381d
 8003808:	08003825 	.word	0x08003825
 800380c:	0800382d 	.word	0x0800382d
 8003810:	08003835 	.word	0x08003835
 8003814:	08003861 	.word	0x08003861
 8003818:	08003869 	.word	0x08003869
 800381c:	2300      	movs	r3, #0
 800381e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003822:	e14a      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003824:	2304      	movs	r3, #4
 8003826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800382a:	e146      	b.n	8003aba <UART_SetConfig+0x5a6>
 800382c:	2308      	movs	r3, #8
 800382e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003832:	e142      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003834:	2310      	movs	r3, #16
 8003836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800383a:	e13e      	b.n	8003aba <UART_SetConfig+0x5a6>
 800383c:	cfff69f3 	.word	0xcfff69f3
 8003840:	58000c00 	.word	0x58000c00
 8003844:	11fff4ff 	.word	0x11fff4ff
 8003848:	40011000 	.word	0x40011000
 800384c:	58024400 	.word	0x58024400
 8003850:	40004400 	.word	0x40004400
 8003854:	40004800 	.word	0x40004800
 8003858:	40004c00 	.word	0x40004c00
 800385c:	40005000 	.word	0x40005000
 8003860:	2320      	movs	r3, #32
 8003862:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003866:	e128      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003868:	2340      	movs	r3, #64	@ 0x40
 800386a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800386e:	e124      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003870:	2380      	movs	r3, #128	@ 0x80
 8003872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003876:	e120      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4acb      	ldr	r2, [pc, #812]	@ (8003bac <UART_SetConfig+0x698>)
 800387e:	4293      	cmp	r3, r2
 8003880:	d176      	bne.n	8003970 <UART_SetConfig+0x45c>
 8003882:	4bcb      	ldr	r3, [pc, #812]	@ (8003bb0 <UART_SetConfig+0x69c>)
 8003884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800388a:	2b28      	cmp	r3, #40	@ 0x28
 800388c:	d86c      	bhi.n	8003968 <UART_SetConfig+0x454>
 800388e:	a201      	add	r2, pc, #4	@ (adr r2, 8003894 <UART_SetConfig+0x380>)
 8003890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003894:	08003939 	.word	0x08003939
 8003898:	08003969 	.word	0x08003969
 800389c:	08003969 	.word	0x08003969
 80038a0:	08003969 	.word	0x08003969
 80038a4:	08003969 	.word	0x08003969
 80038a8:	08003969 	.word	0x08003969
 80038ac:	08003969 	.word	0x08003969
 80038b0:	08003969 	.word	0x08003969
 80038b4:	08003941 	.word	0x08003941
 80038b8:	08003969 	.word	0x08003969
 80038bc:	08003969 	.word	0x08003969
 80038c0:	08003969 	.word	0x08003969
 80038c4:	08003969 	.word	0x08003969
 80038c8:	08003969 	.word	0x08003969
 80038cc:	08003969 	.word	0x08003969
 80038d0:	08003969 	.word	0x08003969
 80038d4:	08003949 	.word	0x08003949
 80038d8:	08003969 	.word	0x08003969
 80038dc:	08003969 	.word	0x08003969
 80038e0:	08003969 	.word	0x08003969
 80038e4:	08003969 	.word	0x08003969
 80038e8:	08003969 	.word	0x08003969
 80038ec:	08003969 	.word	0x08003969
 80038f0:	08003969 	.word	0x08003969
 80038f4:	08003951 	.word	0x08003951
 80038f8:	08003969 	.word	0x08003969
 80038fc:	08003969 	.word	0x08003969
 8003900:	08003969 	.word	0x08003969
 8003904:	08003969 	.word	0x08003969
 8003908:	08003969 	.word	0x08003969
 800390c:	08003969 	.word	0x08003969
 8003910:	08003969 	.word	0x08003969
 8003914:	08003959 	.word	0x08003959
 8003918:	08003969 	.word	0x08003969
 800391c:	08003969 	.word	0x08003969
 8003920:	08003969 	.word	0x08003969
 8003924:	08003969 	.word	0x08003969
 8003928:	08003969 	.word	0x08003969
 800392c:	08003969 	.word	0x08003969
 8003930:	08003969 	.word	0x08003969
 8003934:	08003961 	.word	0x08003961
 8003938:	2301      	movs	r3, #1
 800393a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800393e:	e0bc      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003940:	2304      	movs	r3, #4
 8003942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003946:	e0b8      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003948:	2308      	movs	r3, #8
 800394a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800394e:	e0b4      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003950:	2310      	movs	r3, #16
 8003952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003956:	e0b0      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003958:	2320      	movs	r3, #32
 800395a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800395e:	e0ac      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003960:	2340      	movs	r3, #64	@ 0x40
 8003962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003966:	e0a8      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003968:	2380      	movs	r3, #128	@ 0x80
 800396a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800396e:	e0a4      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a8f      	ldr	r2, [pc, #572]	@ (8003bb4 <UART_SetConfig+0x6a0>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d130      	bne.n	80039dc <UART_SetConfig+0x4c8>
 800397a:	4b8d      	ldr	r3, [pc, #564]	@ (8003bb0 <UART_SetConfig+0x69c>)
 800397c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	2b05      	cmp	r3, #5
 8003984:	d826      	bhi.n	80039d4 <UART_SetConfig+0x4c0>
 8003986:	a201      	add	r2, pc, #4	@ (adr r2, 800398c <UART_SetConfig+0x478>)
 8003988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398c:	080039a5 	.word	0x080039a5
 8003990:	080039ad 	.word	0x080039ad
 8003994:	080039b5 	.word	0x080039b5
 8003998:	080039bd 	.word	0x080039bd
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039cd 	.word	0x080039cd
 80039a4:	2300      	movs	r3, #0
 80039a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80039aa:	e086      	b.n	8003aba <UART_SetConfig+0x5a6>
 80039ac:	2304      	movs	r3, #4
 80039ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80039b2:	e082      	b.n	8003aba <UART_SetConfig+0x5a6>
 80039b4:	2308      	movs	r3, #8
 80039b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80039ba:	e07e      	b.n	8003aba <UART_SetConfig+0x5a6>
 80039bc:	2310      	movs	r3, #16
 80039be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80039c2:	e07a      	b.n	8003aba <UART_SetConfig+0x5a6>
 80039c4:	2320      	movs	r3, #32
 80039c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80039ca:	e076      	b.n	8003aba <UART_SetConfig+0x5a6>
 80039cc:	2340      	movs	r3, #64	@ 0x40
 80039ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80039d2:	e072      	b.n	8003aba <UART_SetConfig+0x5a6>
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80039da:	e06e      	b.n	8003aba <UART_SetConfig+0x5a6>
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a75      	ldr	r2, [pc, #468]	@ (8003bb8 <UART_SetConfig+0x6a4>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d130      	bne.n	8003a48 <UART_SetConfig+0x534>
 80039e6:	4b72      	ldr	r3, [pc, #456]	@ (8003bb0 <UART_SetConfig+0x69c>)
 80039e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80039ea:	f003 0307 	and.w	r3, r3, #7
 80039ee:	2b05      	cmp	r3, #5
 80039f0:	d826      	bhi.n	8003a40 <UART_SetConfig+0x52c>
 80039f2:	a201      	add	r2, pc, #4	@ (adr r2, 80039f8 <UART_SetConfig+0x4e4>)
 80039f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039f8:	08003a11 	.word	0x08003a11
 80039fc:	08003a19 	.word	0x08003a19
 8003a00:	08003a21 	.word	0x08003a21
 8003a04:	08003a29 	.word	0x08003a29
 8003a08:	08003a31 	.word	0x08003a31
 8003a0c:	08003a39 	.word	0x08003a39
 8003a10:	2300      	movs	r3, #0
 8003a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a16:	e050      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a1e:	e04c      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003a20:	2308      	movs	r3, #8
 8003a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a26:	e048      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003a28:	2310      	movs	r3, #16
 8003a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a2e:	e044      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003a30:	2320      	movs	r3, #32
 8003a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a36:	e040      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003a38:	2340      	movs	r3, #64	@ 0x40
 8003a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a3e:	e03c      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003a40:	2380      	movs	r3, #128	@ 0x80
 8003a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a46:	e038      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a5b      	ldr	r2, [pc, #364]	@ (8003bbc <UART_SetConfig+0x6a8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d130      	bne.n	8003ab4 <UART_SetConfig+0x5a0>
 8003a52:	4b57      	ldr	r3, [pc, #348]	@ (8003bb0 <UART_SetConfig+0x69c>)
 8003a54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a56:	f003 0307 	and.w	r3, r3, #7
 8003a5a:	2b05      	cmp	r3, #5
 8003a5c:	d826      	bhi.n	8003aac <UART_SetConfig+0x598>
 8003a5e:	a201      	add	r2, pc, #4	@ (adr r2, 8003a64 <UART_SetConfig+0x550>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a7d 	.word	0x08003a7d
 8003a68:	08003a85 	.word	0x08003a85
 8003a6c:	08003a8d 	.word	0x08003a8d
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003a9d 	.word	0x08003a9d
 8003a78:	08003aa5 	.word	0x08003aa5
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a82:	e01a      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003a84:	2304      	movs	r3, #4
 8003a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a8a:	e016      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003a8c:	2308      	movs	r3, #8
 8003a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a92:	e012      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003a94:	2310      	movs	r3, #16
 8003a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003a9a:	e00e      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003a9c:	2320      	movs	r3, #32
 8003a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003aa2:	e00a      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003aa4:	2340      	movs	r3, #64	@ 0x40
 8003aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003aaa:	e006      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003aac:	2380      	movs	r3, #128	@ 0x80
 8003aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003ab2:	e002      	b.n	8003aba <UART_SetConfig+0x5a6>
 8003ab4:	2380      	movs	r3, #128	@ 0x80
 8003ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a3f      	ldr	r2, [pc, #252]	@ (8003bbc <UART_SetConfig+0x6a8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	f040 80f8 	bne.w	8003cb6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ac6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003aca:	2b20      	cmp	r3, #32
 8003acc:	dc46      	bgt.n	8003b5c <UART_SetConfig+0x648>
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	f2c0 8082 	blt.w	8003bd8 <UART_SetConfig+0x6c4>
 8003ad4:	3b02      	subs	r3, #2
 8003ad6:	2b1e      	cmp	r3, #30
 8003ad8:	d87e      	bhi.n	8003bd8 <UART_SetConfig+0x6c4>
 8003ada:	a201      	add	r2, pc, #4	@ (adr r2, 8003ae0 <UART_SetConfig+0x5cc>)
 8003adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ae0:	08003b63 	.word	0x08003b63
 8003ae4:	08003bd9 	.word	0x08003bd9
 8003ae8:	08003b6b 	.word	0x08003b6b
 8003aec:	08003bd9 	.word	0x08003bd9
 8003af0:	08003bd9 	.word	0x08003bd9
 8003af4:	08003bd9 	.word	0x08003bd9
 8003af8:	08003b7b 	.word	0x08003b7b
 8003afc:	08003bd9 	.word	0x08003bd9
 8003b00:	08003bd9 	.word	0x08003bd9
 8003b04:	08003bd9 	.word	0x08003bd9
 8003b08:	08003bd9 	.word	0x08003bd9
 8003b0c:	08003bd9 	.word	0x08003bd9
 8003b10:	08003bd9 	.word	0x08003bd9
 8003b14:	08003bd9 	.word	0x08003bd9
 8003b18:	08003b8b 	.word	0x08003b8b
 8003b1c:	08003bd9 	.word	0x08003bd9
 8003b20:	08003bd9 	.word	0x08003bd9
 8003b24:	08003bd9 	.word	0x08003bd9
 8003b28:	08003bd9 	.word	0x08003bd9
 8003b2c:	08003bd9 	.word	0x08003bd9
 8003b30:	08003bd9 	.word	0x08003bd9
 8003b34:	08003bd9 	.word	0x08003bd9
 8003b38:	08003bd9 	.word	0x08003bd9
 8003b3c:	08003bd9 	.word	0x08003bd9
 8003b40:	08003bd9 	.word	0x08003bd9
 8003b44:	08003bd9 	.word	0x08003bd9
 8003b48:	08003bd9 	.word	0x08003bd9
 8003b4c:	08003bd9 	.word	0x08003bd9
 8003b50:	08003bd9 	.word	0x08003bd9
 8003b54:	08003bd9 	.word	0x08003bd9
 8003b58:	08003bcb 	.word	0x08003bcb
 8003b5c:	2b40      	cmp	r3, #64	@ 0x40
 8003b5e:	d037      	beq.n	8003bd0 <UART_SetConfig+0x6bc>
 8003b60:	e03a      	b.n	8003bd8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003b62:	f7ff f931 	bl	8002dc8 <HAL_RCCEx_GetD3PCLK1Freq>
 8003b66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003b68:	e03c      	b.n	8003be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003b6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b6e:	4618      	mov	r0, r3
 8003b70:	f7ff f940 	bl	8002df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003b74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003b78:	e034      	b.n	8003be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003b7a:	f107 0318 	add.w	r3, r7, #24
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7ff fa8c 	bl	800309c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003b88:	e02c      	b.n	8003be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b8a:	4b09      	ldr	r3, [pc, #36]	@ (8003bb0 <UART_SetConfig+0x69c>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d016      	beq.n	8003bc4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003b96:	4b06      	ldr	r3, [pc, #24]	@ (8003bb0 <UART_SetConfig+0x69c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	08db      	lsrs	r3, r3, #3
 8003b9c:	f003 0303 	and.w	r3, r3, #3
 8003ba0:	4a07      	ldr	r2, [pc, #28]	@ (8003bc0 <UART_SetConfig+0x6ac>)
 8003ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8003ba6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003ba8:	e01c      	b.n	8003be4 <UART_SetConfig+0x6d0>
 8003baa:	bf00      	nop
 8003bac:	40011400 	.word	0x40011400
 8003bb0:	58024400 	.word	0x58024400
 8003bb4:	40007800 	.word	0x40007800
 8003bb8:	40007c00 	.word	0x40007c00
 8003bbc:	58000c00 	.word	0x58000c00
 8003bc0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8003bc4:	4b9d      	ldr	r3, [pc, #628]	@ (8003e3c <UART_SetConfig+0x928>)
 8003bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003bc8:	e00c      	b.n	8003be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003bca:	4b9d      	ldr	r3, [pc, #628]	@ (8003e40 <UART_SetConfig+0x92c>)
 8003bcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003bce:	e009      	b.n	8003be4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bd0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003bd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003bd6:	e005      	b.n	8003be4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003bdc:	2301      	movs	r3, #1
 8003bde:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003be2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003be4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	f000 81de 	beq.w	8003fa8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003bec:	697b      	ldr	r3, [r7, #20]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	4a94      	ldr	r2, [pc, #592]	@ (8003e44 <UART_SetConfig+0x930>)
 8003bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003bfa:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bfe:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c00:	697b      	ldr	r3, [r7, #20]
 8003c02:	685a      	ldr	r2, [r3, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	005b      	lsls	r3, r3, #1
 8003c08:	4413      	add	r3, r2
 8003c0a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d305      	bcc.n	8003c1c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003c16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c18:	429a      	cmp	r2, r3
 8003c1a:	d903      	bls.n	8003c24 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003c22:	e1c1      	b.n	8003fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003c26:	2200      	movs	r2, #0
 8003c28:	60bb      	str	r3, [r7, #8]
 8003c2a:	60fa      	str	r2, [r7, #12]
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c30:	4a84      	ldr	r2, [pc, #528]	@ (8003e44 <UART_SetConfig+0x930>)
 8003c32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003c36:	b29b      	uxth	r3, r3
 8003c38:	2200      	movs	r2, #0
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	607a      	str	r2, [r7, #4]
 8003c3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c46:	f7fc fd5f 	bl	8000708 <__aeabi_uldivmod>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4610      	mov	r0, r2
 8003c50:	4619      	mov	r1, r3
 8003c52:	f04f 0200 	mov.w	r2, #0
 8003c56:	f04f 0300 	mov.w	r3, #0
 8003c5a:	020b      	lsls	r3, r1, #8
 8003c5c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003c60:	0202      	lsls	r2, r0, #8
 8003c62:	6979      	ldr	r1, [r7, #20]
 8003c64:	6849      	ldr	r1, [r1, #4]
 8003c66:	0849      	lsrs	r1, r1, #1
 8003c68:	2000      	movs	r0, #0
 8003c6a:	460c      	mov	r4, r1
 8003c6c:	4605      	mov	r5, r0
 8003c6e:	eb12 0804 	adds.w	r8, r2, r4
 8003c72:	eb43 0905 	adc.w	r9, r3, r5
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	469a      	mov	sl, r3
 8003c7e:	4693      	mov	fp, r2
 8003c80:	4652      	mov	r2, sl
 8003c82:	465b      	mov	r3, fp
 8003c84:	4640      	mov	r0, r8
 8003c86:	4649      	mov	r1, r9
 8003c88:	f7fc fd3e 	bl	8000708 <__aeabi_uldivmod>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	460b      	mov	r3, r1
 8003c90:	4613      	mov	r3, r2
 8003c92:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c96:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c9a:	d308      	bcc.n	8003cae <UART_SetConfig+0x79a>
 8003c9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ca2:	d204      	bcs.n	8003cae <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003caa:	60da      	str	r2, [r3, #12]
 8003cac:	e17c      	b.n	8003fa8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003cb4:	e178      	b.n	8003fa8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cb6:	697b      	ldr	r3, [r7, #20]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003cbe:	f040 80c5 	bne.w	8003e4c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8003cc2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003cc6:	2b20      	cmp	r3, #32
 8003cc8:	dc48      	bgt.n	8003d5c <UART_SetConfig+0x848>
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	db7b      	blt.n	8003dc6 <UART_SetConfig+0x8b2>
 8003cce:	2b20      	cmp	r3, #32
 8003cd0:	d879      	bhi.n	8003dc6 <UART_SetConfig+0x8b2>
 8003cd2:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd8 <UART_SetConfig+0x7c4>)
 8003cd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd8:	08003d63 	.word	0x08003d63
 8003cdc:	08003d6b 	.word	0x08003d6b
 8003ce0:	08003dc7 	.word	0x08003dc7
 8003ce4:	08003dc7 	.word	0x08003dc7
 8003ce8:	08003d73 	.word	0x08003d73
 8003cec:	08003dc7 	.word	0x08003dc7
 8003cf0:	08003dc7 	.word	0x08003dc7
 8003cf4:	08003dc7 	.word	0x08003dc7
 8003cf8:	08003d83 	.word	0x08003d83
 8003cfc:	08003dc7 	.word	0x08003dc7
 8003d00:	08003dc7 	.word	0x08003dc7
 8003d04:	08003dc7 	.word	0x08003dc7
 8003d08:	08003dc7 	.word	0x08003dc7
 8003d0c:	08003dc7 	.word	0x08003dc7
 8003d10:	08003dc7 	.word	0x08003dc7
 8003d14:	08003dc7 	.word	0x08003dc7
 8003d18:	08003d93 	.word	0x08003d93
 8003d1c:	08003dc7 	.word	0x08003dc7
 8003d20:	08003dc7 	.word	0x08003dc7
 8003d24:	08003dc7 	.word	0x08003dc7
 8003d28:	08003dc7 	.word	0x08003dc7
 8003d2c:	08003dc7 	.word	0x08003dc7
 8003d30:	08003dc7 	.word	0x08003dc7
 8003d34:	08003dc7 	.word	0x08003dc7
 8003d38:	08003dc7 	.word	0x08003dc7
 8003d3c:	08003dc7 	.word	0x08003dc7
 8003d40:	08003dc7 	.word	0x08003dc7
 8003d44:	08003dc7 	.word	0x08003dc7
 8003d48:	08003dc7 	.word	0x08003dc7
 8003d4c:	08003dc7 	.word	0x08003dc7
 8003d50:	08003dc7 	.word	0x08003dc7
 8003d54:	08003dc7 	.word	0x08003dc7
 8003d58:	08003db9 	.word	0x08003db9
 8003d5c:	2b40      	cmp	r3, #64	@ 0x40
 8003d5e:	d02e      	beq.n	8003dbe <UART_SetConfig+0x8aa>
 8003d60:	e031      	b.n	8003dc6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d62:	f7ff f805 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8003d66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003d68:	e033      	b.n	8003dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d6a:	f7ff f817 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 8003d6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003d70:	e02f      	b.n	8003dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003d72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff f83c 	bl	8002df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003d80:	e027      	b.n	8003dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003d82:	f107 0318 	add.w	r3, r7, #24
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7ff f988 	bl	800309c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003d90:	e01f      	b.n	8003dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003d92:	4b2d      	ldr	r3, [pc, #180]	@ (8003e48 <UART_SetConfig+0x934>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0320 	and.w	r3, r3, #32
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d009      	beq.n	8003db2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8003e48 <UART_SetConfig+0x934>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	08db      	lsrs	r3, r3, #3
 8003da4:	f003 0303 	and.w	r3, r3, #3
 8003da8:	4a24      	ldr	r2, [pc, #144]	@ (8003e3c <UART_SetConfig+0x928>)
 8003daa:	fa22 f303 	lsr.w	r3, r2, r3
 8003dae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003db0:	e00f      	b.n	8003dd2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8003db2:	4b22      	ldr	r3, [pc, #136]	@ (8003e3c <UART_SetConfig+0x928>)
 8003db4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003db6:	e00c      	b.n	8003dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003db8:	4b21      	ldr	r3, [pc, #132]	@ (8003e40 <UART_SetConfig+0x92c>)
 8003dba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003dbc:	e009      	b.n	8003dd2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dbe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003dc4:	e005      	b.n	8003dd2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003dd0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003dd2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	f000 80e7 	beq.w	8003fa8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dde:	4a19      	ldr	r2, [pc, #100]	@ (8003e44 <UART_SetConfig+0x930>)
 8003de0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003de4:	461a      	mov	r2, r3
 8003de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003de8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003dec:	005a      	lsls	r2, r3, #1
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	085b      	lsrs	r3, r3, #1
 8003df4:	441a      	add	r2, r3
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e02:	2b0f      	cmp	r3, #15
 8003e04:	d916      	bls.n	8003e34 <UART_SetConfig+0x920>
 8003e06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e08:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e0c:	d212      	bcs.n	8003e34 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e10:	b29b      	uxth	r3, r3
 8003e12:	f023 030f 	bic.w	r3, r3, #15
 8003e16:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e1a:	085b      	lsrs	r3, r3, #1
 8003e1c:	b29b      	uxth	r3, r3
 8003e1e:	f003 0307 	and.w	r3, r3, #7
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8003e26:	4313      	orrs	r3, r2
 8003e28:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003e30:	60da      	str	r2, [r3, #12]
 8003e32:	e0b9      	b.n	8003fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003e3a:	e0b5      	b.n	8003fa8 <UART_SetConfig+0xa94>
 8003e3c:	03d09000 	.word	0x03d09000
 8003e40:	003d0900 	.word	0x003d0900
 8003e44:	08008954 	.word	0x08008954
 8003e48:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e4c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003e50:	2b20      	cmp	r3, #32
 8003e52:	dc49      	bgt.n	8003ee8 <UART_SetConfig+0x9d4>
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	db7c      	blt.n	8003f52 <UART_SetConfig+0xa3e>
 8003e58:	2b20      	cmp	r3, #32
 8003e5a:	d87a      	bhi.n	8003f52 <UART_SetConfig+0xa3e>
 8003e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8003e64 <UART_SetConfig+0x950>)
 8003e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e62:	bf00      	nop
 8003e64:	08003eef 	.word	0x08003eef
 8003e68:	08003ef7 	.word	0x08003ef7
 8003e6c:	08003f53 	.word	0x08003f53
 8003e70:	08003f53 	.word	0x08003f53
 8003e74:	08003eff 	.word	0x08003eff
 8003e78:	08003f53 	.word	0x08003f53
 8003e7c:	08003f53 	.word	0x08003f53
 8003e80:	08003f53 	.word	0x08003f53
 8003e84:	08003f0f 	.word	0x08003f0f
 8003e88:	08003f53 	.word	0x08003f53
 8003e8c:	08003f53 	.word	0x08003f53
 8003e90:	08003f53 	.word	0x08003f53
 8003e94:	08003f53 	.word	0x08003f53
 8003e98:	08003f53 	.word	0x08003f53
 8003e9c:	08003f53 	.word	0x08003f53
 8003ea0:	08003f53 	.word	0x08003f53
 8003ea4:	08003f1f 	.word	0x08003f1f
 8003ea8:	08003f53 	.word	0x08003f53
 8003eac:	08003f53 	.word	0x08003f53
 8003eb0:	08003f53 	.word	0x08003f53
 8003eb4:	08003f53 	.word	0x08003f53
 8003eb8:	08003f53 	.word	0x08003f53
 8003ebc:	08003f53 	.word	0x08003f53
 8003ec0:	08003f53 	.word	0x08003f53
 8003ec4:	08003f53 	.word	0x08003f53
 8003ec8:	08003f53 	.word	0x08003f53
 8003ecc:	08003f53 	.word	0x08003f53
 8003ed0:	08003f53 	.word	0x08003f53
 8003ed4:	08003f53 	.word	0x08003f53
 8003ed8:	08003f53 	.word	0x08003f53
 8003edc:	08003f53 	.word	0x08003f53
 8003ee0:	08003f53 	.word	0x08003f53
 8003ee4:	08003f45 	.word	0x08003f45
 8003ee8:	2b40      	cmp	r3, #64	@ 0x40
 8003eea:	d02e      	beq.n	8003f4a <UART_SetConfig+0xa36>
 8003eec:	e031      	b.n	8003f52 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003eee:	f7fe ff3f 	bl	8002d70 <HAL_RCC_GetPCLK1Freq>
 8003ef2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003ef4:	e033      	b.n	8003f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ef6:	f7fe ff51 	bl	8002d9c <HAL_RCC_GetPCLK2Freq>
 8003efa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003efc:	e02f      	b.n	8003f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003f02:	4618      	mov	r0, r3
 8003f04:	f7fe ff76 	bl	8002df4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f0c:	e027      	b.n	8003f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003f0e:	f107 0318 	add.w	r3, r7, #24
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7ff f8c2 	bl	800309c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003f18:	69fb      	ldr	r3, [r7, #28]
 8003f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f1c:	e01f      	b.n	8003f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003f1e:	4b2d      	ldr	r3, [pc, #180]	@ (8003fd4 <UART_SetConfig+0xac0>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0320 	and.w	r3, r3, #32
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d009      	beq.n	8003f3e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003f2a:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd4 <UART_SetConfig+0xac0>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	08db      	lsrs	r3, r3, #3
 8003f30:	f003 0303 	and.w	r3, r3, #3
 8003f34:	4a28      	ldr	r2, [pc, #160]	@ (8003fd8 <UART_SetConfig+0xac4>)
 8003f36:	fa22 f303 	lsr.w	r3, r2, r3
 8003f3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003f3c:	e00f      	b.n	8003f5e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8003f3e:	4b26      	ldr	r3, [pc, #152]	@ (8003fd8 <UART_SetConfig+0xac4>)
 8003f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f42:	e00c      	b.n	8003f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003f44:	4b25      	ldr	r3, [pc, #148]	@ (8003fdc <UART_SetConfig+0xac8>)
 8003f46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f48:	e009      	b.n	8003f5e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f4a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003f50:	e005      	b.n	8003f5e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8003f52:	2300      	movs	r3, #0
 8003f54:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8003f5c:	bf00      	nop
    }

    if (pclk != 0U)
 8003f5e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d021      	beq.n	8003fa8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f68:	4a1d      	ldr	r2, [pc, #116]	@ (8003fe0 <UART_SetConfig+0xacc>)
 8003f6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f72:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	085b      	lsrs	r3, r3, #1
 8003f7c:	441a      	add	r2, r3
 8003f7e:	697b      	ldr	r3, [r7, #20]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f86:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f8a:	2b0f      	cmp	r3, #15
 8003f8c:	d909      	bls.n	8003fa2 <UART_SetConfig+0xa8e>
 8003f8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f90:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f94:	d205      	bcs.n	8003fa2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f98:	b29a      	uxth	r2, r3
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	60da      	str	r2, [r3, #12]
 8003fa0:	e002      	b.n	8003fa8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fa8:	697b      	ldr	r3, [r7, #20]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003fc4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3748      	adds	r7, #72	@ 0x48
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fd2:	bf00      	nop
 8003fd4:	58024400 	.word	0x58024400
 8003fd8:	03d09000 	.word	0x03d09000
 8003fdc:	003d0900 	.word	0x003d0900
 8003fe0:	08008954 	.word	0x08008954

08003fe4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b083      	sub	sp, #12
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	430a      	orrs	r2, r1
 800400c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004034:	f003 0302 	and.w	r3, r3, #2
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	430a      	orrs	r2, r1
 8004050:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	430a      	orrs	r2, r1
 8004072:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004078:	f003 0310 	and.w	r3, r3, #16
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	430a      	orrs	r2, r1
 8004094:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00a      	beq.n	80040b8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	430a      	orrs	r2, r1
 80040b6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d01a      	beq.n	80040fa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	430a      	orrs	r2, r1
 80040d8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040e2:	d10a      	bne.n	80040fa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	430a      	orrs	r2, r1
 80040f8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004102:	2b00      	cmp	r3, #0
 8004104:	d00a      	beq.n	800411c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	430a      	orrs	r2, r1
 800411a:	605a      	str	r2, [r3, #4]
  }
}
 800411c:	bf00      	nop
 800411e:	370c      	adds	r7, #12
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b098      	sub	sp, #96	@ 0x60
 800412c:	af02      	add	r7, sp, #8
 800412e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2200      	movs	r2, #0
 8004134:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004138:	f7fd fa62 	bl	8001600 <HAL_GetTick>
 800413c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f003 0308 	and.w	r3, r3, #8
 8004148:	2b08      	cmp	r3, #8
 800414a:	d12f      	bne.n	80041ac <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800414c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004150:	9300      	str	r3, [sp, #0]
 8004152:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004154:	2200      	movs	r2, #0
 8004156:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f88e 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 8004160:	4603      	mov	r3, r0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d022      	beq.n	80041ac <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800416c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416e:	e853 3f00 	ldrex	r3, [r3]
 8004172:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004176:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800417a:	653b      	str	r3, [r7, #80]	@ 0x50
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	461a      	mov	r2, r3
 8004182:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004184:	647b      	str	r3, [r7, #68]	@ 0x44
 8004186:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004188:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800418a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800418c:	e841 2300 	strex	r3, r2, [r1]
 8004190:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004192:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004194:	2b00      	cmp	r3, #0
 8004196:	d1e6      	bne.n	8004166 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041a8:	2303      	movs	r3, #3
 80041aa:	e063      	b.n	8004274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0304 	and.w	r3, r3, #4
 80041b6:	2b04      	cmp	r3, #4
 80041b8:	d149      	bne.n	800424e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041ba:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80041c2:	2200      	movs	r2, #0
 80041c4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f857 	bl	800427c <UART_WaitOnFlagUntilTimeout>
 80041ce:	4603      	mov	r3, r0
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d03c      	beq.n	800424e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041dc:	e853 3f00 	ldrex	r3, [r3]
 80041e0:	623b      	str	r3, [r7, #32]
   return(result);
 80041e2:	6a3b      	ldr	r3, [r7, #32]
 80041e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80041e8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	461a      	mov	r2, r3
 80041f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80041f2:	633b      	str	r3, [r7, #48]	@ 0x30
 80041f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80041f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041fa:	e841 2300 	strex	r3, r2, [r1]
 80041fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004200:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1e6      	bne.n	80041d4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	3308      	adds	r3, #8
 800420c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	60fb      	str	r3, [r7, #12]
   return(result);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f023 0301 	bic.w	r3, r3, #1
 800421c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3308      	adds	r3, #8
 8004224:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004226:	61fa      	str	r2, [r7, #28]
 8004228:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422a:	69b9      	ldr	r1, [r7, #24]
 800422c:	69fa      	ldr	r2, [r7, #28]
 800422e:	e841 2300 	strex	r3, r2, [r1]
 8004232:	617b      	str	r3, [r7, #20]
   return(result);
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d1e5      	bne.n	8004206 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2200      	movs	r2, #0
 8004246:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800424a:	2303      	movs	r3, #3
 800424c:	e012      	b.n	8004274 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004272:	2300      	movs	r3, #0
}
 8004274:	4618      	mov	r0, r3
 8004276:	3758      	adds	r7, #88	@ 0x58
 8004278:	46bd      	mov	sp, r7
 800427a:	bd80      	pop	{r7, pc}

0800427c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	603b      	str	r3, [r7, #0]
 8004288:	4613      	mov	r3, r2
 800428a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800428c:	e04f      	b.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800428e:	69bb      	ldr	r3, [r7, #24]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004294:	d04b      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004296:	f7fd f9b3 	bl	8001600 <HAL_GetTick>
 800429a:	4602      	mov	r2, r0
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	1ad3      	subs	r3, r2, r3
 80042a0:	69ba      	ldr	r2, [r7, #24]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d302      	bcc.n	80042ac <UART_WaitOnFlagUntilTimeout+0x30>
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d101      	bne.n	80042b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042ac:	2303      	movs	r3, #3
 80042ae:	e04e      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 0304 	and.w	r3, r3, #4
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d037      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
 80042be:	68bb      	ldr	r3, [r7, #8]
 80042c0:	2b80      	cmp	r3, #128	@ 0x80
 80042c2:	d034      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	2b40      	cmp	r3, #64	@ 0x40
 80042c8:	d031      	beq.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b08      	cmp	r3, #8
 80042d6:	d110      	bne.n	80042fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	2208      	movs	r2, #8
 80042de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 f839 	bl	8004358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2208      	movs	r2, #8
 80042ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e029      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004308:	d111      	bne.n	800432e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f81f 	bl	8004358 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	2220      	movs	r2, #32
 800431e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e00f      	b.n	800434e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	69da      	ldr	r2, [r3, #28]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	4013      	ands	r3, r2
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	429a      	cmp	r2, r3
 800433c:	bf0c      	ite	eq
 800433e:	2301      	moveq	r3, #1
 8004340:	2300      	movne	r3, #0
 8004342:	b2db      	uxtb	r3, r3
 8004344:	461a      	mov	r2, r3
 8004346:	79fb      	ldrb	r3, [r7, #7]
 8004348:	429a      	cmp	r2, r3
 800434a:	d0a0      	beq.n	800428e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3710      	adds	r7, #16
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004358:	b480      	push	{r7}
 800435a:	b095      	sub	sp, #84	@ 0x54
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800436e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004370:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004374:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	461a      	mov	r2, r3
 800437c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800437e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004380:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004384:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800438c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e6      	bne.n	8004360 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3308      	adds	r3, #8
 8004398:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6a3b      	ldr	r3, [r7, #32]
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	61fb      	str	r3, [r7, #28]
   return(result);
 80043a2:	69fa      	ldr	r2, [r7, #28]
 80043a4:	4b1e      	ldr	r3, [pc, #120]	@ (8004420 <UART_EndRxTransfer+0xc8>)
 80043a6:	4013      	ands	r3, r2
 80043a8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	3308      	adds	r3, #8
 80043b0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80043b2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80043b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80043b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80043ba:	e841 2300 	strex	r3, r2, [r1]
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80043c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d1e5      	bne.n	8004392 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d118      	bne.n	8004400 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	e853 3f00 	ldrex	r3, [r3]
 80043da:	60bb      	str	r3, [r7, #8]
   return(result);
 80043dc:	68bb      	ldr	r3, [r7, #8]
 80043de:	f023 0310 	bic.w	r3, r3, #16
 80043e2:	647b      	str	r3, [r7, #68]	@ 0x44
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	461a      	mov	r2, r3
 80043ea:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80043ec:	61bb      	str	r3, [r7, #24]
 80043ee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043f0:	6979      	ldr	r1, [r7, #20]
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	e841 2300 	strex	r3, r2, [r1]
 80043f8:	613b      	str	r3, [r7, #16]
   return(result);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d1e6      	bne.n	80043ce <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2220      	movs	r2, #32
 8004404:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2200      	movs	r2, #0
 8004412:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004414:	bf00      	nop
 8004416:	3754      	adds	r7, #84	@ 0x54
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	effffffe 	.word	0xeffffffe

08004424 <__cvt>:
 8004424:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004426:	ed2d 8b02 	vpush	{d8}
 800442a:	eeb0 8b40 	vmov.f64	d8, d0
 800442e:	b085      	sub	sp, #20
 8004430:	4617      	mov	r7, r2
 8004432:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8004434:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004436:	ee18 2a90 	vmov	r2, s17
 800443a:	f025 0520 	bic.w	r5, r5, #32
 800443e:	2a00      	cmp	r2, #0
 8004440:	bfb6      	itet	lt
 8004442:	222d      	movlt	r2, #45	@ 0x2d
 8004444:	2200      	movge	r2, #0
 8004446:	eeb1 8b40 	vneglt.f64	d8, d0
 800444a:	2d46      	cmp	r5, #70	@ 0x46
 800444c:	460c      	mov	r4, r1
 800444e:	701a      	strb	r2, [r3, #0]
 8004450:	d004      	beq.n	800445c <__cvt+0x38>
 8004452:	2d45      	cmp	r5, #69	@ 0x45
 8004454:	d100      	bne.n	8004458 <__cvt+0x34>
 8004456:	3401      	adds	r4, #1
 8004458:	2102      	movs	r1, #2
 800445a:	e000      	b.n	800445e <__cvt+0x3a>
 800445c:	2103      	movs	r1, #3
 800445e:	ab03      	add	r3, sp, #12
 8004460:	9301      	str	r3, [sp, #4]
 8004462:	ab02      	add	r3, sp, #8
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	4622      	mov	r2, r4
 8004468:	4633      	mov	r3, r6
 800446a:	eeb0 0b48 	vmov.f64	d0, d8
 800446e:	f001 fe23 	bl	80060b8 <_dtoa_r>
 8004472:	2d47      	cmp	r5, #71	@ 0x47
 8004474:	d114      	bne.n	80044a0 <__cvt+0x7c>
 8004476:	07fb      	lsls	r3, r7, #31
 8004478:	d50a      	bpl.n	8004490 <__cvt+0x6c>
 800447a:	1902      	adds	r2, r0, r4
 800447c:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004484:	bf08      	it	eq
 8004486:	9203      	streq	r2, [sp, #12]
 8004488:	2130      	movs	r1, #48	@ 0x30
 800448a:	9b03      	ldr	r3, [sp, #12]
 800448c:	4293      	cmp	r3, r2
 800448e:	d319      	bcc.n	80044c4 <__cvt+0xa0>
 8004490:	9b03      	ldr	r3, [sp, #12]
 8004492:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004494:	1a1b      	subs	r3, r3, r0
 8004496:	6013      	str	r3, [r2, #0]
 8004498:	b005      	add	sp, #20
 800449a:	ecbd 8b02 	vpop	{d8}
 800449e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80044a0:	2d46      	cmp	r5, #70	@ 0x46
 80044a2:	eb00 0204 	add.w	r2, r0, r4
 80044a6:	d1e9      	bne.n	800447c <__cvt+0x58>
 80044a8:	7803      	ldrb	r3, [r0, #0]
 80044aa:	2b30      	cmp	r3, #48	@ 0x30
 80044ac:	d107      	bne.n	80044be <__cvt+0x9a>
 80044ae:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80044b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044b6:	bf1c      	itt	ne
 80044b8:	f1c4 0401 	rsbne	r4, r4, #1
 80044bc:	6034      	strne	r4, [r6, #0]
 80044be:	6833      	ldr	r3, [r6, #0]
 80044c0:	441a      	add	r2, r3
 80044c2:	e7db      	b.n	800447c <__cvt+0x58>
 80044c4:	1c5c      	adds	r4, r3, #1
 80044c6:	9403      	str	r4, [sp, #12]
 80044c8:	7019      	strb	r1, [r3, #0]
 80044ca:	e7de      	b.n	800448a <__cvt+0x66>

080044cc <__exponent>:
 80044cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044ce:	2900      	cmp	r1, #0
 80044d0:	bfba      	itte	lt
 80044d2:	4249      	neglt	r1, r1
 80044d4:	232d      	movlt	r3, #45	@ 0x2d
 80044d6:	232b      	movge	r3, #43	@ 0x2b
 80044d8:	2909      	cmp	r1, #9
 80044da:	7002      	strb	r2, [r0, #0]
 80044dc:	7043      	strb	r3, [r0, #1]
 80044de:	dd29      	ble.n	8004534 <__exponent+0x68>
 80044e0:	f10d 0307 	add.w	r3, sp, #7
 80044e4:	461d      	mov	r5, r3
 80044e6:	270a      	movs	r7, #10
 80044e8:	461a      	mov	r2, r3
 80044ea:	fbb1 f6f7 	udiv	r6, r1, r7
 80044ee:	fb07 1416 	mls	r4, r7, r6, r1
 80044f2:	3430      	adds	r4, #48	@ 0x30
 80044f4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80044f8:	460c      	mov	r4, r1
 80044fa:	2c63      	cmp	r4, #99	@ 0x63
 80044fc:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004500:	4631      	mov	r1, r6
 8004502:	dcf1      	bgt.n	80044e8 <__exponent+0x1c>
 8004504:	3130      	adds	r1, #48	@ 0x30
 8004506:	1e94      	subs	r4, r2, #2
 8004508:	f803 1c01 	strb.w	r1, [r3, #-1]
 800450c:	1c41      	adds	r1, r0, #1
 800450e:	4623      	mov	r3, r4
 8004510:	42ab      	cmp	r3, r5
 8004512:	d30a      	bcc.n	800452a <__exponent+0x5e>
 8004514:	f10d 0309 	add.w	r3, sp, #9
 8004518:	1a9b      	subs	r3, r3, r2
 800451a:	42ac      	cmp	r4, r5
 800451c:	bf88      	it	hi
 800451e:	2300      	movhi	r3, #0
 8004520:	3302      	adds	r3, #2
 8004522:	4403      	add	r3, r0
 8004524:	1a18      	subs	r0, r3, r0
 8004526:	b003      	add	sp, #12
 8004528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800452a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800452e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004532:	e7ed      	b.n	8004510 <__exponent+0x44>
 8004534:	2330      	movs	r3, #48	@ 0x30
 8004536:	3130      	adds	r1, #48	@ 0x30
 8004538:	7083      	strb	r3, [r0, #2]
 800453a:	70c1      	strb	r1, [r0, #3]
 800453c:	1d03      	adds	r3, r0, #4
 800453e:	e7f1      	b.n	8004524 <__exponent+0x58>

08004540 <_printf_float>:
 8004540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004544:	b08d      	sub	sp, #52	@ 0x34
 8004546:	460c      	mov	r4, r1
 8004548:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800454c:	4616      	mov	r6, r2
 800454e:	461f      	mov	r7, r3
 8004550:	4605      	mov	r5, r0
 8004552:	f001 fcd9 	bl	8005f08 <_localeconv_r>
 8004556:	f8d0 b000 	ldr.w	fp, [r0]
 800455a:	4658      	mov	r0, fp
 800455c:	f7fb ff10 	bl	8000380 <strlen>
 8004560:	2300      	movs	r3, #0
 8004562:	930a      	str	r3, [sp, #40]	@ 0x28
 8004564:	f8d8 3000 	ldr.w	r3, [r8]
 8004568:	f894 9018 	ldrb.w	r9, [r4, #24]
 800456c:	6822      	ldr	r2, [r4, #0]
 800456e:	9005      	str	r0, [sp, #20]
 8004570:	3307      	adds	r3, #7
 8004572:	f023 0307 	bic.w	r3, r3, #7
 8004576:	f103 0108 	add.w	r1, r3, #8
 800457a:	f8c8 1000 	str.w	r1, [r8]
 800457e:	ed93 0b00 	vldr	d0, [r3]
 8004582:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 80047e0 <_printf_float+0x2a0>
 8004586:	eeb0 7bc0 	vabs.f64	d7, d0
 800458a:	eeb4 7b46 	vcmp.f64	d7, d6
 800458e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004592:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 8004596:	dd24      	ble.n	80045e2 <_printf_float+0xa2>
 8004598:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800459c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045a0:	d502      	bpl.n	80045a8 <_printf_float+0x68>
 80045a2:	232d      	movs	r3, #45	@ 0x2d
 80045a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80045a8:	498f      	ldr	r1, [pc, #572]	@ (80047e8 <_printf_float+0x2a8>)
 80045aa:	4b90      	ldr	r3, [pc, #576]	@ (80047ec <_printf_float+0x2ac>)
 80045ac:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80045b0:	bf94      	ite	ls
 80045b2:	4688      	movls	r8, r1
 80045b4:	4698      	movhi	r8, r3
 80045b6:	f022 0204 	bic.w	r2, r2, #4
 80045ba:	2303      	movs	r3, #3
 80045bc:	6123      	str	r3, [r4, #16]
 80045be:	6022      	str	r2, [r4, #0]
 80045c0:	f04f 0a00 	mov.w	sl, #0
 80045c4:	9700      	str	r7, [sp, #0]
 80045c6:	4633      	mov	r3, r6
 80045c8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80045ca:	4621      	mov	r1, r4
 80045cc:	4628      	mov	r0, r5
 80045ce:	f000 f9d1 	bl	8004974 <_printf_common>
 80045d2:	3001      	adds	r0, #1
 80045d4:	f040 8089 	bne.w	80046ea <_printf_float+0x1aa>
 80045d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80045dc:	b00d      	add	sp, #52	@ 0x34
 80045de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80045e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045ea:	d709      	bvc.n	8004600 <_printf_float+0xc0>
 80045ec:	ee10 3a90 	vmov	r3, s1
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	bfbc      	itt	lt
 80045f4:	232d      	movlt	r3, #45	@ 0x2d
 80045f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80045fa:	497d      	ldr	r1, [pc, #500]	@ (80047f0 <_printf_float+0x2b0>)
 80045fc:	4b7d      	ldr	r3, [pc, #500]	@ (80047f4 <_printf_float+0x2b4>)
 80045fe:	e7d5      	b.n	80045ac <_printf_float+0x6c>
 8004600:	6863      	ldr	r3, [r4, #4]
 8004602:	1c59      	adds	r1, r3, #1
 8004604:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8004608:	d139      	bne.n	800467e <_printf_float+0x13e>
 800460a:	2306      	movs	r3, #6
 800460c:	6063      	str	r3, [r4, #4]
 800460e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004612:	2300      	movs	r3, #0
 8004614:	6022      	str	r2, [r4, #0]
 8004616:	9303      	str	r3, [sp, #12]
 8004618:	ab0a      	add	r3, sp, #40	@ 0x28
 800461a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800461e:	ab09      	add	r3, sp, #36	@ 0x24
 8004620:	9300      	str	r3, [sp, #0]
 8004622:	6861      	ldr	r1, [r4, #4]
 8004624:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004628:	4628      	mov	r0, r5
 800462a:	f7ff fefb 	bl	8004424 <__cvt>
 800462e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004632:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004634:	4680      	mov	r8, r0
 8004636:	d129      	bne.n	800468c <_printf_float+0x14c>
 8004638:	1cc8      	adds	r0, r1, #3
 800463a:	db02      	blt.n	8004642 <_printf_float+0x102>
 800463c:	6863      	ldr	r3, [r4, #4]
 800463e:	4299      	cmp	r1, r3
 8004640:	dd41      	ble.n	80046c6 <_printf_float+0x186>
 8004642:	f1a9 0902 	sub.w	r9, r9, #2
 8004646:	fa5f f989 	uxtb.w	r9, r9
 800464a:	3901      	subs	r1, #1
 800464c:	464a      	mov	r2, r9
 800464e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004652:	9109      	str	r1, [sp, #36]	@ 0x24
 8004654:	f7ff ff3a 	bl	80044cc <__exponent>
 8004658:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800465a:	1813      	adds	r3, r2, r0
 800465c:	2a01      	cmp	r2, #1
 800465e:	4682      	mov	sl, r0
 8004660:	6123      	str	r3, [r4, #16]
 8004662:	dc02      	bgt.n	800466a <_printf_float+0x12a>
 8004664:	6822      	ldr	r2, [r4, #0]
 8004666:	07d2      	lsls	r2, r2, #31
 8004668:	d501      	bpl.n	800466e <_printf_float+0x12e>
 800466a:	3301      	adds	r3, #1
 800466c:	6123      	str	r3, [r4, #16]
 800466e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004672:	2b00      	cmp	r3, #0
 8004674:	d0a6      	beq.n	80045c4 <_printf_float+0x84>
 8004676:	232d      	movs	r3, #45	@ 0x2d
 8004678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800467c:	e7a2      	b.n	80045c4 <_printf_float+0x84>
 800467e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004682:	d1c4      	bne.n	800460e <_printf_float+0xce>
 8004684:	2b00      	cmp	r3, #0
 8004686:	d1c2      	bne.n	800460e <_printf_float+0xce>
 8004688:	2301      	movs	r3, #1
 800468a:	e7bf      	b.n	800460c <_printf_float+0xcc>
 800468c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004690:	d9db      	bls.n	800464a <_printf_float+0x10a>
 8004692:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8004696:	d118      	bne.n	80046ca <_printf_float+0x18a>
 8004698:	2900      	cmp	r1, #0
 800469a:	6863      	ldr	r3, [r4, #4]
 800469c:	dd0b      	ble.n	80046b6 <_printf_float+0x176>
 800469e:	6121      	str	r1, [r4, #16]
 80046a0:	b913      	cbnz	r3, 80046a8 <_printf_float+0x168>
 80046a2:	6822      	ldr	r2, [r4, #0]
 80046a4:	07d0      	lsls	r0, r2, #31
 80046a6:	d502      	bpl.n	80046ae <_printf_float+0x16e>
 80046a8:	3301      	adds	r3, #1
 80046aa:	440b      	add	r3, r1
 80046ac:	6123      	str	r3, [r4, #16]
 80046ae:	65a1      	str	r1, [r4, #88]	@ 0x58
 80046b0:	f04f 0a00 	mov.w	sl, #0
 80046b4:	e7db      	b.n	800466e <_printf_float+0x12e>
 80046b6:	b913      	cbnz	r3, 80046be <_printf_float+0x17e>
 80046b8:	6822      	ldr	r2, [r4, #0]
 80046ba:	07d2      	lsls	r2, r2, #31
 80046bc:	d501      	bpl.n	80046c2 <_printf_float+0x182>
 80046be:	3302      	adds	r3, #2
 80046c0:	e7f4      	b.n	80046ac <_printf_float+0x16c>
 80046c2:	2301      	movs	r3, #1
 80046c4:	e7f2      	b.n	80046ac <_printf_float+0x16c>
 80046c6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 80046ca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80046cc:	4299      	cmp	r1, r3
 80046ce:	db05      	blt.n	80046dc <_printf_float+0x19c>
 80046d0:	6823      	ldr	r3, [r4, #0]
 80046d2:	6121      	str	r1, [r4, #16]
 80046d4:	07d8      	lsls	r0, r3, #31
 80046d6:	d5ea      	bpl.n	80046ae <_printf_float+0x16e>
 80046d8:	1c4b      	adds	r3, r1, #1
 80046da:	e7e7      	b.n	80046ac <_printf_float+0x16c>
 80046dc:	2900      	cmp	r1, #0
 80046de:	bfd4      	ite	le
 80046e0:	f1c1 0202 	rsble	r2, r1, #2
 80046e4:	2201      	movgt	r2, #1
 80046e6:	4413      	add	r3, r2
 80046e8:	e7e0      	b.n	80046ac <_printf_float+0x16c>
 80046ea:	6823      	ldr	r3, [r4, #0]
 80046ec:	055a      	lsls	r2, r3, #21
 80046ee:	d407      	bmi.n	8004700 <_printf_float+0x1c0>
 80046f0:	6923      	ldr	r3, [r4, #16]
 80046f2:	4642      	mov	r2, r8
 80046f4:	4631      	mov	r1, r6
 80046f6:	4628      	mov	r0, r5
 80046f8:	47b8      	blx	r7
 80046fa:	3001      	adds	r0, #1
 80046fc:	d12a      	bne.n	8004754 <_printf_float+0x214>
 80046fe:	e76b      	b.n	80045d8 <_printf_float+0x98>
 8004700:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8004704:	f240 80e0 	bls.w	80048c8 <_printf_float+0x388>
 8004708:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800470c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004714:	d133      	bne.n	800477e <_printf_float+0x23e>
 8004716:	4a38      	ldr	r2, [pc, #224]	@ (80047f8 <_printf_float+0x2b8>)
 8004718:	2301      	movs	r3, #1
 800471a:	4631      	mov	r1, r6
 800471c:	4628      	mov	r0, r5
 800471e:	47b8      	blx	r7
 8004720:	3001      	adds	r0, #1
 8004722:	f43f af59 	beq.w	80045d8 <_printf_float+0x98>
 8004726:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800472a:	4543      	cmp	r3, r8
 800472c:	db02      	blt.n	8004734 <_printf_float+0x1f4>
 800472e:	6823      	ldr	r3, [r4, #0]
 8004730:	07d8      	lsls	r0, r3, #31
 8004732:	d50f      	bpl.n	8004754 <_printf_float+0x214>
 8004734:	9b05      	ldr	r3, [sp, #20]
 8004736:	465a      	mov	r2, fp
 8004738:	4631      	mov	r1, r6
 800473a:	4628      	mov	r0, r5
 800473c:	47b8      	blx	r7
 800473e:	3001      	adds	r0, #1
 8004740:	f43f af4a 	beq.w	80045d8 <_printf_float+0x98>
 8004744:	f04f 0900 	mov.w	r9, #0
 8004748:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800474c:	f104 0a1a 	add.w	sl, r4, #26
 8004750:	45c8      	cmp	r8, r9
 8004752:	dc09      	bgt.n	8004768 <_printf_float+0x228>
 8004754:	6823      	ldr	r3, [r4, #0]
 8004756:	079b      	lsls	r3, r3, #30
 8004758:	f100 8107 	bmi.w	800496a <_printf_float+0x42a>
 800475c:	68e0      	ldr	r0, [r4, #12]
 800475e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004760:	4298      	cmp	r0, r3
 8004762:	bfb8      	it	lt
 8004764:	4618      	movlt	r0, r3
 8004766:	e739      	b.n	80045dc <_printf_float+0x9c>
 8004768:	2301      	movs	r3, #1
 800476a:	4652      	mov	r2, sl
 800476c:	4631      	mov	r1, r6
 800476e:	4628      	mov	r0, r5
 8004770:	47b8      	blx	r7
 8004772:	3001      	adds	r0, #1
 8004774:	f43f af30 	beq.w	80045d8 <_printf_float+0x98>
 8004778:	f109 0901 	add.w	r9, r9, #1
 800477c:	e7e8      	b.n	8004750 <_printf_float+0x210>
 800477e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004780:	2b00      	cmp	r3, #0
 8004782:	dc3b      	bgt.n	80047fc <_printf_float+0x2bc>
 8004784:	4a1c      	ldr	r2, [pc, #112]	@ (80047f8 <_printf_float+0x2b8>)
 8004786:	2301      	movs	r3, #1
 8004788:	4631      	mov	r1, r6
 800478a:	4628      	mov	r0, r5
 800478c:	47b8      	blx	r7
 800478e:	3001      	adds	r0, #1
 8004790:	f43f af22 	beq.w	80045d8 <_printf_float+0x98>
 8004794:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004798:	ea59 0303 	orrs.w	r3, r9, r3
 800479c:	d102      	bne.n	80047a4 <_printf_float+0x264>
 800479e:	6823      	ldr	r3, [r4, #0]
 80047a0:	07d9      	lsls	r1, r3, #31
 80047a2:	d5d7      	bpl.n	8004754 <_printf_float+0x214>
 80047a4:	9b05      	ldr	r3, [sp, #20]
 80047a6:	465a      	mov	r2, fp
 80047a8:	4631      	mov	r1, r6
 80047aa:	4628      	mov	r0, r5
 80047ac:	47b8      	blx	r7
 80047ae:	3001      	adds	r0, #1
 80047b0:	f43f af12 	beq.w	80045d8 <_printf_float+0x98>
 80047b4:	f04f 0a00 	mov.w	sl, #0
 80047b8:	f104 0b1a 	add.w	fp, r4, #26
 80047bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80047be:	425b      	negs	r3, r3
 80047c0:	4553      	cmp	r3, sl
 80047c2:	dc01      	bgt.n	80047c8 <_printf_float+0x288>
 80047c4:	464b      	mov	r3, r9
 80047c6:	e794      	b.n	80046f2 <_printf_float+0x1b2>
 80047c8:	2301      	movs	r3, #1
 80047ca:	465a      	mov	r2, fp
 80047cc:	4631      	mov	r1, r6
 80047ce:	4628      	mov	r0, r5
 80047d0:	47b8      	blx	r7
 80047d2:	3001      	adds	r0, #1
 80047d4:	f43f af00 	beq.w	80045d8 <_printf_float+0x98>
 80047d8:	f10a 0a01 	add.w	sl, sl, #1
 80047dc:	e7ee      	b.n	80047bc <_printf_float+0x27c>
 80047de:	bf00      	nop
 80047e0:	ffffffff 	.word	0xffffffff
 80047e4:	7fefffff 	.word	0x7fefffff
 80047e8:	0800896c 	.word	0x0800896c
 80047ec:	08008970 	.word	0x08008970
 80047f0:	08008974 	.word	0x08008974
 80047f4:	08008978 	.word	0x08008978
 80047f8:	0800897c 	.word	0x0800897c
 80047fc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80047fe:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004802:	4553      	cmp	r3, sl
 8004804:	bfa8      	it	ge
 8004806:	4653      	movge	r3, sl
 8004808:	2b00      	cmp	r3, #0
 800480a:	4699      	mov	r9, r3
 800480c:	dc37      	bgt.n	800487e <_printf_float+0x33e>
 800480e:	2300      	movs	r3, #0
 8004810:	9307      	str	r3, [sp, #28]
 8004812:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004816:	f104 021a 	add.w	r2, r4, #26
 800481a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800481c:	9907      	ldr	r1, [sp, #28]
 800481e:	9306      	str	r3, [sp, #24]
 8004820:	eba3 0309 	sub.w	r3, r3, r9
 8004824:	428b      	cmp	r3, r1
 8004826:	dc31      	bgt.n	800488c <_printf_float+0x34c>
 8004828:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800482a:	459a      	cmp	sl, r3
 800482c:	dc3b      	bgt.n	80048a6 <_printf_float+0x366>
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	07da      	lsls	r2, r3, #31
 8004832:	d438      	bmi.n	80048a6 <_printf_float+0x366>
 8004834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004836:	ebaa 0903 	sub.w	r9, sl, r3
 800483a:	9b06      	ldr	r3, [sp, #24]
 800483c:	ebaa 0303 	sub.w	r3, sl, r3
 8004840:	4599      	cmp	r9, r3
 8004842:	bfa8      	it	ge
 8004844:	4699      	movge	r9, r3
 8004846:	f1b9 0f00 	cmp.w	r9, #0
 800484a:	dc34      	bgt.n	80048b6 <_printf_float+0x376>
 800484c:	f04f 0800 	mov.w	r8, #0
 8004850:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004854:	f104 0b1a 	add.w	fp, r4, #26
 8004858:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800485a:	ebaa 0303 	sub.w	r3, sl, r3
 800485e:	eba3 0309 	sub.w	r3, r3, r9
 8004862:	4543      	cmp	r3, r8
 8004864:	f77f af76 	ble.w	8004754 <_printf_float+0x214>
 8004868:	2301      	movs	r3, #1
 800486a:	465a      	mov	r2, fp
 800486c:	4631      	mov	r1, r6
 800486e:	4628      	mov	r0, r5
 8004870:	47b8      	blx	r7
 8004872:	3001      	adds	r0, #1
 8004874:	f43f aeb0 	beq.w	80045d8 <_printf_float+0x98>
 8004878:	f108 0801 	add.w	r8, r8, #1
 800487c:	e7ec      	b.n	8004858 <_printf_float+0x318>
 800487e:	4642      	mov	r2, r8
 8004880:	4631      	mov	r1, r6
 8004882:	4628      	mov	r0, r5
 8004884:	47b8      	blx	r7
 8004886:	3001      	adds	r0, #1
 8004888:	d1c1      	bne.n	800480e <_printf_float+0x2ce>
 800488a:	e6a5      	b.n	80045d8 <_printf_float+0x98>
 800488c:	2301      	movs	r3, #1
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	9206      	str	r2, [sp, #24]
 8004894:	47b8      	blx	r7
 8004896:	3001      	adds	r0, #1
 8004898:	f43f ae9e 	beq.w	80045d8 <_printf_float+0x98>
 800489c:	9b07      	ldr	r3, [sp, #28]
 800489e:	9a06      	ldr	r2, [sp, #24]
 80048a0:	3301      	adds	r3, #1
 80048a2:	9307      	str	r3, [sp, #28]
 80048a4:	e7b9      	b.n	800481a <_printf_float+0x2da>
 80048a6:	9b05      	ldr	r3, [sp, #20]
 80048a8:	465a      	mov	r2, fp
 80048aa:	4631      	mov	r1, r6
 80048ac:	4628      	mov	r0, r5
 80048ae:	47b8      	blx	r7
 80048b0:	3001      	adds	r0, #1
 80048b2:	d1bf      	bne.n	8004834 <_printf_float+0x2f4>
 80048b4:	e690      	b.n	80045d8 <_printf_float+0x98>
 80048b6:	9a06      	ldr	r2, [sp, #24]
 80048b8:	464b      	mov	r3, r9
 80048ba:	4442      	add	r2, r8
 80048bc:	4631      	mov	r1, r6
 80048be:	4628      	mov	r0, r5
 80048c0:	47b8      	blx	r7
 80048c2:	3001      	adds	r0, #1
 80048c4:	d1c2      	bne.n	800484c <_printf_float+0x30c>
 80048c6:	e687      	b.n	80045d8 <_printf_float+0x98>
 80048c8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80048cc:	f1b9 0f01 	cmp.w	r9, #1
 80048d0:	dc01      	bgt.n	80048d6 <_printf_float+0x396>
 80048d2:	07db      	lsls	r3, r3, #31
 80048d4:	d536      	bpl.n	8004944 <_printf_float+0x404>
 80048d6:	2301      	movs	r3, #1
 80048d8:	4642      	mov	r2, r8
 80048da:	4631      	mov	r1, r6
 80048dc:	4628      	mov	r0, r5
 80048de:	47b8      	blx	r7
 80048e0:	3001      	adds	r0, #1
 80048e2:	f43f ae79 	beq.w	80045d8 <_printf_float+0x98>
 80048e6:	9b05      	ldr	r3, [sp, #20]
 80048e8:	465a      	mov	r2, fp
 80048ea:	4631      	mov	r1, r6
 80048ec:	4628      	mov	r0, r5
 80048ee:	47b8      	blx	r7
 80048f0:	3001      	adds	r0, #1
 80048f2:	f43f ae71 	beq.w	80045d8 <_printf_float+0x98>
 80048f6:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 80048fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80048fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004902:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8004906:	d018      	beq.n	800493a <_printf_float+0x3fa>
 8004908:	464b      	mov	r3, r9
 800490a:	f108 0201 	add.w	r2, r8, #1
 800490e:	4631      	mov	r1, r6
 8004910:	4628      	mov	r0, r5
 8004912:	47b8      	blx	r7
 8004914:	3001      	adds	r0, #1
 8004916:	d10c      	bne.n	8004932 <_printf_float+0x3f2>
 8004918:	e65e      	b.n	80045d8 <_printf_float+0x98>
 800491a:	2301      	movs	r3, #1
 800491c:	465a      	mov	r2, fp
 800491e:	4631      	mov	r1, r6
 8004920:	4628      	mov	r0, r5
 8004922:	47b8      	blx	r7
 8004924:	3001      	adds	r0, #1
 8004926:	f43f ae57 	beq.w	80045d8 <_printf_float+0x98>
 800492a:	f108 0801 	add.w	r8, r8, #1
 800492e:	45c8      	cmp	r8, r9
 8004930:	dbf3      	blt.n	800491a <_printf_float+0x3da>
 8004932:	4653      	mov	r3, sl
 8004934:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004938:	e6dc      	b.n	80046f4 <_printf_float+0x1b4>
 800493a:	f04f 0800 	mov.w	r8, #0
 800493e:	f104 0b1a 	add.w	fp, r4, #26
 8004942:	e7f4      	b.n	800492e <_printf_float+0x3ee>
 8004944:	2301      	movs	r3, #1
 8004946:	4642      	mov	r2, r8
 8004948:	e7e1      	b.n	800490e <_printf_float+0x3ce>
 800494a:	2301      	movs	r3, #1
 800494c:	464a      	mov	r2, r9
 800494e:	4631      	mov	r1, r6
 8004950:	4628      	mov	r0, r5
 8004952:	47b8      	blx	r7
 8004954:	3001      	adds	r0, #1
 8004956:	f43f ae3f 	beq.w	80045d8 <_printf_float+0x98>
 800495a:	f108 0801 	add.w	r8, r8, #1
 800495e:	68e3      	ldr	r3, [r4, #12]
 8004960:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004962:	1a5b      	subs	r3, r3, r1
 8004964:	4543      	cmp	r3, r8
 8004966:	dcf0      	bgt.n	800494a <_printf_float+0x40a>
 8004968:	e6f8      	b.n	800475c <_printf_float+0x21c>
 800496a:	f04f 0800 	mov.w	r8, #0
 800496e:	f104 0919 	add.w	r9, r4, #25
 8004972:	e7f4      	b.n	800495e <_printf_float+0x41e>

08004974 <_printf_common>:
 8004974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004978:	4616      	mov	r6, r2
 800497a:	4698      	mov	r8, r3
 800497c:	688a      	ldr	r2, [r1, #8]
 800497e:	690b      	ldr	r3, [r1, #16]
 8004980:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004984:	4293      	cmp	r3, r2
 8004986:	bfb8      	it	lt
 8004988:	4613      	movlt	r3, r2
 800498a:	6033      	str	r3, [r6, #0]
 800498c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004990:	4607      	mov	r7, r0
 8004992:	460c      	mov	r4, r1
 8004994:	b10a      	cbz	r2, 800499a <_printf_common+0x26>
 8004996:	3301      	adds	r3, #1
 8004998:	6033      	str	r3, [r6, #0]
 800499a:	6823      	ldr	r3, [r4, #0]
 800499c:	0699      	lsls	r1, r3, #26
 800499e:	bf42      	ittt	mi
 80049a0:	6833      	ldrmi	r3, [r6, #0]
 80049a2:	3302      	addmi	r3, #2
 80049a4:	6033      	strmi	r3, [r6, #0]
 80049a6:	6825      	ldr	r5, [r4, #0]
 80049a8:	f015 0506 	ands.w	r5, r5, #6
 80049ac:	d106      	bne.n	80049bc <_printf_common+0x48>
 80049ae:	f104 0a19 	add.w	sl, r4, #25
 80049b2:	68e3      	ldr	r3, [r4, #12]
 80049b4:	6832      	ldr	r2, [r6, #0]
 80049b6:	1a9b      	subs	r3, r3, r2
 80049b8:	42ab      	cmp	r3, r5
 80049ba:	dc26      	bgt.n	8004a0a <_printf_common+0x96>
 80049bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80049c0:	6822      	ldr	r2, [r4, #0]
 80049c2:	3b00      	subs	r3, #0
 80049c4:	bf18      	it	ne
 80049c6:	2301      	movne	r3, #1
 80049c8:	0692      	lsls	r2, r2, #26
 80049ca:	d42b      	bmi.n	8004a24 <_printf_common+0xb0>
 80049cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80049d0:	4641      	mov	r1, r8
 80049d2:	4638      	mov	r0, r7
 80049d4:	47c8      	blx	r9
 80049d6:	3001      	adds	r0, #1
 80049d8:	d01e      	beq.n	8004a18 <_printf_common+0xa4>
 80049da:	6823      	ldr	r3, [r4, #0]
 80049dc:	6922      	ldr	r2, [r4, #16]
 80049de:	f003 0306 	and.w	r3, r3, #6
 80049e2:	2b04      	cmp	r3, #4
 80049e4:	bf02      	ittt	eq
 80049e6:	68e5      	ldreq	r5, [r4, #12]
 80049e8:	6833      	ldreq	r3, [r6, #0]
 80049ea:	1aed      	subeq	r5, r5, r3
 80049ec:	68a3      	ldr	r3, [r4, #8]
 80049ee:	bf0c      	ite	eq
 80049f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80049f4:	2500      	movne	r5, #0
 80049f6:	4293      	cmp	r3, r2
 80049f8:	bfc4      	itt	gt
 80049fa:	1a9b      	subgt	r3, r3, r2
 80049fc:	18ed      	addgt	r5, r5, r3
 80049fe:	2600      	movs	r6, #0
 8004a00:	341a      	adds	r4, #26
 8004a02:	42b5      	cmp	r5, r6
 8004a04:	d11a      	bne.n	8004a3c <_printf_common+0xc8>
 8004a06:	2000      	movs	r0, #0
 8004a08:	e008      	b.n	8004a1c <_printf_common+0xa8>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	4652      	mov	r2, sl
 8004a0e:	4641      	mov	r1, r8
 8004a10:	4638      	mov	r0, r7
 8004a12:	47c8      	blx	r9
 8004a14:	3001      	adds	r0, #1
 8004a16:	d103      	bne.n	8004a20 <_printf_common+0xac>
 8004a18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004a1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a20:	3501      	adds	r5, #1
 8004a22:	e7c6      	b.n	80049b2 <_printf_common+0x3e>
 8004a24:	18e1      	adds	r1, r4, r3
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	2030      	movs	r0, #48	@ 0x30
 8004a2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004a2e:	4422      	add	r2, r4
 8004a30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004a34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004a38:	3302      	adds	r3, #2
 8004a3a:	e7c7      	b.n	80049cc <_printf_common+0x58>
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	4622      	mov	r2, r4
 8004a40:	4641      	mov	r1, r8
 8004a42:	4638      	mov	r0, r7
 8004a44:	47c8      	blx	r9
 8004a46:	3001      	adds	r0, #1
 8004a48:	d0e6      	beq.n	8004a18 <_printf_common+0xa4>
 8004a4a:	3601      	adds	r6, #1
 8004a4c:	e7d9      	b.n	8004a02 <_printf_common+0x8e>
	...

08004a50 <_printf_i>:
 8004a50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004a54:	7e0f      	ldrb	r7, [r1, #24]
 8004a56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004a58:	2f78      	cmp	r7, #120	@ 0x78
 8004a5a:	4691      	mov	r9, r2
 8004a5c:	4680      	mov	r8, r0
 8004a5e:	460c      	mov	r4, r1
 8004a60:	469a      	mov	sl, r3
 8004a62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004a66:	d807      	bhi.n	8004a78 <_printf_i+0x28>
 8004a68:	2f62      	cmp	r7, #98	@ 0x62
 8004a6a:	d80a      	bhi.n	8004a82 <_printf_i+0x32>
 8004a6c:	2f00      	cmp	r7, #0
 8004a6e:	f000 80d2 	beq.w	8004c16 <_printf_i+0x1c6>
 8004a72:	2f58      	cmp	r7, #88	@ 0x58
 8004a74:	f000 80b9 	beq.w	8004bea <_printf_i+0x19a>
 8004a78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004a80:	e03a      	b.n	8004af8 <_printf_i+0xa8>
 8004a82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004a86:	2b15      	cmp	r3, #21
 8004a88:	d8f6      	bhi.n	8004a78 <_printf_i+0x28>
 8004a8a:	a101      	add	r1, pc, #4	@ (adr r1, 8004a90 <_printf_i+0x40>)
 8004a8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004a90:	08004ae9 	.word	0x08004ae9
 8004a94:	08004afd 	.word	0x08004afd
 8004a98:	08004a79 	.word	0x08004a79
 8004a9c:	08004a79 	.word	0x08004a79
 8004aa0:	08004a79 	.word	0x08004a79
 8004aa4:	08004a79 	.word	0x08004a79
 8004aa8:	08004afd 	.word	0x08004afd
 8004aac:	08004a79 	.word	0x08004a79
 8004ab0:	08004a79 	.word	0x08004a79
 8004ab4:	08004a79 	.word	0x08004a79
 8004ab8:	08004a79 	.word	0x08004a79
 8004abc:	08004bfd 	.word	0x08004bfd
 8004ac0:	08004b27 	.word	0x08004b27
 8004ac4:	08004bb7 	.word	0x08004bb7
 8004ac8:	08004a79 	.word	0x08004a79
 8004acc:	08004a79 	.word	0x08004a79
 8004ad0:	08004c1f 	.word	0x08004c1f
 8004ad4:	08004a79 	.word	0x08004a79
 8004ad8:	08004b27 	.word	0x08004b27
 8004adc:	08004a79 	.word	0x08004a79
 8004ae0:	08004a79 	.word	0x08004a79
 8004ae4:	08004bbf 	.word	0x08004bbf
 8004ae8:	6833      	ldr	r3, [r6, #0]
 8004aea:	1d1a      	adds	r2, r3, #4
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	6032      	str	r2, [r6, #0]
 8004af0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004af4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004af8:	2301      	movs	r3, #1
 8004afa:	e09d      	b.n	8004c38 <_printf_i+0x1e8>
 8004afc:	6833      	ldr	r3, [r6, #0]
 8004afe:	6820      	ldr	r0, [r4, #0]
 8004b00:	1d19      	adds	r1, r3, #4
 8004b02:	6031      	str	r1, [r6, #0]
 8004b04:	0606      	lsls	r6, r0, #24
 8004b06:	d501      	bpl.n	8004b0c <_printf_i+0xbc>
 8004b08:	681d      	ldr	r5, [r3, #0]
 8004b0a:	e003      	b.n	8004b14 <_printf_i+0xc4>
 8004b0c:	0645      	lsls	r5, r0, #25
 8004b0e:	d5fb      	bpl.n	8004b08 <_printf_i+0xb8>
 8004b10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004b14:	2d00      	cmp	r5, #0
 8004b16:	da03      	bge.n	8004b20 <_printf_i+0xd0>
 8004b18:	232d      	movs	r3, #45	@ 0x2d
 8004b1a:	426d      	negs	r5, r5
 8004b1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b20:	4859      	ldr	r0, [pc, #356]	@ (8004c88 <_printf_i+0x238>)
 8004b22:	230a      	movs	r3, #10
 8004b24:	e011      	b.n	8004b4a <_printf_i+0xfa>
 8004b26:	6821      	ldr	r1, [r4, #0]
 8004b28:	6833      	ldr	r3, [r6, #0]
 8004b2a:	0608      	lsls	r0, r1, #24
 8004b2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8004b30:	d402      	bmi.n	8004b38 <_printf_i+0xe8>
 8004b32:	0649      	lsls	r1, r1, #25
 8004b34:	bf48      	it	mi
 8004b36:	b2ad      	uxthmi	r5, r5
 8004b38:	2f6f      	cmp	r7, #111	@ 0x6f
 8004b3a:	4853      	ldr	r0, [pc, #332]	@ (8004c88 <_printf_i+0x238>)
 8004b3c:	6033      	str	r3, [r6, #0]
 8004b3e:	bf14      	ite	ne
 8004b40:	230a      	movne	r3, #10
 8004b42:	2308      	moveq	r3, #8
 8004b44:	2100      	movs	r1, #0
 8004b46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004b4a:	6866      	ldr	r6, [r4, #4]
 8004b4c:	60a6      	str	r6, [r4, #8]
 8004b4e:	2e00      	cmp	r6, #0
 8004b50:	bfa2      	ittt	ge
 8004b52:	6821      	ldrge	r1, [r4, #0]
 8004b54:	f021 0104 	bicge.w	r1, r1, #4
 8004b58:	6021      	strge	r1, [r4, #0]
 8004b5a:	b90d      	cbnz	r5, 8004b60 <_printf_i+0x110>
 8004b5c:	2e00      	cmp	r6, #0
 8004b5e:	d04b      	beq.n	8004bf8 <_printf_i+0x1a8>
 8004b60:	4616      	mov	r6, r2
 8004b62:	fbb5 f1f3 	udiv	r1, r5, r3
 8004b66:	fb03 5711 	mls	r7, r3, r1, r5
 8004b6a:	5dc7      	ldrb	r7, [r0, r7]
 8004b6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004b70:	462f      	mov	r7, r5
 8004b72:	42bb      	cmp	r3, r7
 8004b74:	460d      	mov	r5, r1
 8004b76:	d9f4      	bls.n	8004b62 <_printf_i+0x112>
 8004b78:	2b08      	cmp	r3, #8
 8004b7a:	d10b      	bne.n	8004b94 <_printf_i+0x144>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	07df      	lsls	r7, r3, #31
 8004b80:	d508      	bpl.n	8004b94 <_printf_i+0x144>
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	6861      	ldr	r1, [r4, #4]
 8004b86:	4299      	cmp	r1, r3
 8004b88:	bfde      	ittt	le
 8004b8a:	2330      	movle	r3, #48	@ 0x30
 8004b8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004b90:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8004b94:	1b92      	subs	r2, r2, r6
 8004b96:	6122      	str	r2, [r4, #16]
 8004b98:	f8cd a000 	str.w	sl, [sp]
 8004b9c:	464b      	mov	r3, r9
 8004b9e:	aa03      	add	r2, sp, #12
 8004ba0:	4621      	mov	r1, r4
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	f7ff fee6 	bl	8004974 <_printf_common>
 8004ba8:	3001      	adds	r0, #1
 8004baa:	d14a      	bne.n	8004c42 <_printf_i+0x1f2>
 8004bac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bb0:	b004      	add	sp, #16
 8004bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bb6:	6823      	ldr	r3, [r4, #0]
 8004bb8:	f043 0320 	orr.w	r3, r3, #32
 8004bbc:	6023      	str	r3, [r4, #0]
 8004bbe:	4833      	ldr	r0, [pc, #204]	@ (8004c8c <_printf_i+0x23c>)
 8004bc0:	2778      	movs	r7, #120	@ 0x78
 8004bc2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004bc6:	6823      	ldr	r3, [r4, #0]
 8004bc8:	6831      	ldr	r1, [r6, #0]
 8004bca:	061f      	lsls	r7, r3, #24
 8004bcc:	f851 5b04 	ldr.w	r5, [r1], #4
 8004bd0:	d402      	bmi.n	8004bd8 <_printf_i+0x188>
 8004bd2:	065f      	lsls	r7, r3, #25
 8004bd4:	bf48      	it	mi
 8004bd6:	b2ad      	uxthmi	r5, r5
 8004bd8:	6031      	str	r1, [r6, #0]
 8004bda:	07d9      	lsls	r1, r3, #31
 8004bdc:	bf44      	itt	mi
 8004bde:	f043 0320 	orrmi.w	r3, r3, #32
 8004be2:	6023      	strmi	r3, [r4, #0]
 8004be4:	b11d      	cbz	r5, 8004bee <_printf_i+0x19e>
 8004be6:	2310      	movs	r3, #16
 8004be8:	e7ac      	b.n	8004b44 <_printf_i+0xf4>
 8004bea:	4827      	ldr	r0, [pc, #156]	@ (8004c88 <_printf_i+0x238>)
 8004bec:	e7e9      	b.n	8004bc2 <_printf_i+0x172>
 8004bee:	6823      	ldr	r3, [r4, #0]
 8004bf0:	f023 0320 	bic.w	r3, r3, #32
 8004bf4:	6023      	str	r3, [r4, #0]
 8004bf6:	e7f6      	b.n	8004be6 <_printf_i+0x196>
 8004bf8:	4616      	mov	r6, r2
 8004bfa:	e7bd      	b.n	8004b78 <_printf_i+0x128>
 8004bfc:	6833      	ldr	r3, [r6, #0]
 8004bfe:	6825      	ldr	r5, [r4, #0]
 8004c00:	6961      	ldr	r1, [r4, #20]
 8004c02:	1d18      	adds	r0, r3, #4
 8004c04:	6030      	str	r0, [r6, #0]
 8004c06:	062e      	lsls	r6, r5, #24
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	d501      	bpl.n	8004c10 <_printf_i+0x1c0>
 8004c0c:	6019      	str	r1, [r3, #0]
 8004c0e:	e002      	b.n	8004c16 <_printf_i+0x1c6>
 8004c10:	0668      	lsls	r0, r5, #25
 8004c12:	d5fb      	bpl.n	8004c0c <_printf_i+0x1bc>
 8004c14:	8019      	strh	r1, [r3, #0]
 8004c16:	2300      	movs	r3, #0
 8004c18:	6123      	str	r3, [r4, #16]
 8004c1a:	4616      	mov	r6, r2
 8004c1c:	e7bc      	b.n	8004b98 <_printf_i+0x148>
 8004c1e:	6833      	ldr	r3, [r6, #0]
 8004c20:	1d1a      	adds	r2, r3, #4
 8004c22:	6032      	str	r2, [r6, #0]
 8004c24:	681e      	ldr	r6, [r3, #0]
 8004c26:	6862      	ldr	r2, [r4, #4]
 8004c28:	2100      	movs	r1, #0
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	f7fb fb58 	bl	80002e0 <memchr>
 8004c30:	b108      	cbz	r0, 8004c36 <_printf_i+0x1e6>
 8004c32:	1b80      	subs	r0, r0, r6
 8004c34:	6060      	str	r0, [r4, #4]
 8004c36:	6863      	ldr	r3, [r4, #4]
 8004c38:	6123      	str	r3, [r4, #16]
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c40:	e7aa      	b.n	8004b98 <_printf_i+0x148>
 8004c42:	6923      	ldr	r3, [r4, #16]
 8004c44:	4632      	mov	r2, r6
 8004c46:	4649      	mov	r1, r9
 8004c48:	4640      	mov	r0, r8
 8004c4a:	47d0      	blx	sl
 8004c4c:	3001      	adds	r0, #1
 8004c4e:	d0ad      	beq.n	8004bac <_printf_i+0x15c>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	079b      	lsls	r3, r3, #30
 8004c54:	d413      	bmi.n	8004c7e <_printf_i+0x22e>
 8004c56:	68e0      	ldr	r0, [r4, #12]
 8004c58:	9b03      	ldr	r3, [sp, #12]
 8004c5a:	4298      	cmp	r0, r3
 8004c5c:	bfb8      	it	lt
 8004c5e:	4618      	movlt	r0, r3
 8004c60:	e7a6      	b.n	8004bb0 <_printf_i+0x160>
 8004c62:	2301      	movs	r3, #1
 8004c64:	4632      	mov	r2, r6
 8004c66:	4649      	mov	r1, r9
 8004c68:	4640      	mov	r0, r8
 8004c6a:	47d0      	blx	sl
 8004c6c:	3001      	adds	r0, #1
 8004c6e:	d09d      	beq.n	8004bac <_printf_i+0x15c>
 8004c70:	3501      	adds	r5, #1
 8004c72:	68e3      	ldr	r3, [r4, #12]
 8004c74:	9903      	ldr	r1, [sp, #12]
 8004c76:	1a5b      	subs	r3, r3, r1
 8004c78:	42ab      	cmp	r3, r5
 8004c7a:	dcf2      	bgt.n	8004c62 <_printf_i+0x212>
 8004c7c:	e7eb      	b.n	8004c56 <_printf_i+0x206>
 8004c7e:	2500      	movs	r5, #0
 8004c80:	f104 0619 	add.w	r6, r4, #25
 8004c84:	e7f5      	b.n	8004c72 <_printf_i+0x222>
 8004c86:	bf00      	nop
 8004c88:	0800897e 	.word	0x0800897e
 8004c8c:	0800898f 	.word	0x0800898f

08004c90 <_scanf_float>:
 8004c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c94:	b087      	sub	sp, #28
 8004c96:	4617      	mov	r7, r2
 8004c98:	9303      	str	r3, [sp, #12]
 8004c9a:	688b      	ldr	r3, [r1, #8]
 8004c9c:	1e5a      	subs	r2, r3, #1
 8004c9e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004ca2:	bf81      	itttt	hi
 8004ca4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004ca8:	eb03 0b05 	addhi.w	fp, r3, r5
 8004cac:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004cb0:	608b      	strhi	r3, [r1, #8]
 8004cb2:	680b      	ldr	r3, [r1, #0]
 8004cb4:	460a      	mov	r2, r1
 8004cb6:	f04f 0500 	mov.w	r5, #0
 8004cba:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004cbe:	f842 3b1c 	str.w	r3, [r2], #28
 8004cc2:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004cc6:	4680      	mov	r8, r0
 8004cc8:	460c      	mov	r4, r1
 8004cca:	bf98      	it	ls
 8004ccc:	f04f 0b00 	movls.w	fp, #0
 8004cd0:	9201      	str	r2, [sp, #4]
 8004cd2:	4616      	mov	r6, r2
 8004cd4:	46aa      	mov	sl, r5
 8004cd6:	46a9      	mov	r9, r5
 8004cd8:	9502      	str	r5, [sp, #8]
 8004cda:	68a2      	ldr	r2, [r4, #8]
 8004cdc:	b152      	cbz	r2, 8004cf4 <_scanf_float+0x64>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	781b      	ldrb	r3, [r3, #0]
 8004ce2:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ce4:	d864      	bhi.n	8004db0 <_scanf_float+0x120>
 8004ce6:	2b40      	cmp	r3, #64	@ 0x40
 8004ce8:	d83c      	bhi.n	8004d64 <_scanf_float+0xd4>
 8004cea:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004cee:	b2c8      	uxtb	r0, r1
 8004cf0:	280e      	cmp	r0, #14
 8004cf2:	d93a      	bls.n	8004d6a <_scanf_float+0xda>
 8004cf4:	f1b9 0f00 	cmp.w	r9, #0
 8004cf8:	d003      	beq.n	8004d02 <_scanf_float+0x72>
 8004cfa:	6823      	ldr	r3, [r4, #0]
 8004cfc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d00:	6023      	str	r3, [r4, #0]
 8004d02:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004d06:	f1ba 0f01 	cmp.w	sl, #1
 8004d0a:	f200 8117 	bhi.w	8004f3c <_scanf_float+0x2ac>
 8004d0e:	9b01      	ldr	r3, [sp, #4]
 8004d10:	429e      	cmp	r6, r3
 8004d12:	f200 8108 	bhi.w	8004f26 <_scanf_float+0x296>
 8004d16:	2001      	movs	r0, #1
 8004d18:	b007      	add	sp, #28
 8004d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d1e:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004d22:	2a0d      	cmp	r2, #13
 8004d24:	d8e6      	bhi.n	8004cf4 <_scanf_float+0x64>
 8004d26:	a101      	add	r1, pc, #4	@ (adr r1, 8004d2c <_scanf_float+0x9c>)
 8004d28:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004d2c:	08004e73 	.word	0x08004e73
 8004d30:	08004cf5 	.word	0x08004cf5
 8004d34:	08004cf5 	.word	0x08004cf5
 8004d38:	08004cf5 	.word	0x08004cf5
 8004d3c:	08004ed3 	.word	0x08004ed3
 8004d40:	08004eab 	.word	0x08004eab
 8004d44:	08004cf5 	.word	0x08004cf5
 8004d48:	08004cf5 	.word	0x08004cf5
 8004d4c:	08004e81 	.word	0x08004e81
 8004d50:	08004cf5 	.word	0x08004cf5
 8004d54:	08004cf5 	.word	0x08004cf5
 8004d58:	08004cf5 	.word	0x08004cf5
 8004d5c:	08004cf5 	.word	0x08004cf5
 8004d60:	08004e39 	.word	0x08004e39
 8004d64:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004d68:	e7db      	b.n	8004d22 <_scanf_float+0x92>
 8004d6a:	290e      	cmp	r1, #14
 8004d6c:	d8c2      	bhi.n	8004cf4 <_scanf_float+0x64>
 8004d6e:	a001      	add	r0, pc, #4	@ (adr r0, 8004d74 <_scanf_float+0xe4>)
 8004d70:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004d74:	08004e29 	.word	0x08004e29
 8004d78:	08004cf5 	.word	0x08004cf5
 8004d7c:	08004e29 	.word	0x08004e29
 8004d80:	08004ebf 	.word	0x08004ebf
 8004d84:	08004cf5 	.word	0x08004cf5
 8004d88:	08004dd1 	.word	0x08004dd1
 8004d8c:	08004e0f 	.word	0x08004e0f
 8004d90:	08004e0f 	.word	0x08004e0f
 8004d94:	08004e0f 	.word	0x08004e0f
 8004d98:	08004e0f 	.word	0x08004e0f
 8004d9c:	08004e0f 	.word	0x08004e0f
 8004da0:	08004e0f 	.word	0x08004e0f
 8004da4:	08004e0f 	.word	0x08004e0f
 8004da8:	08004e0f 	.word	0x08004e0f
 8004dac:	08004e0f 	.word	0x08004e0f
 8004db0:	2b6e      	cmp	r3, #110	@ 0x6e
 8004db2:	d809      	bhi.n	8004dc8 <_scanf_float+0x138>
 8004db4:	2b60      	cmp	r3, #96	@ 0x60
 8004db6:	d8b2      	bhi.n	8004d1e <_scanf_float+0x8e>
 8004db8:	2b54      	cmp	r3, #84	@ 0x54
 8004dba:	d07b      	beq.n	8004eb4 <_scanf_float+0x224>
 8004dbc:	2b59      	cmp	r3, #89	@ 0x59
 8004dbe:	d199      	bne.n	8004cf4 <_scanf_float+0x64>
 8004dc0:	2d07      	cmp	r5, #7
 8004dc2:	d197      	bne.n	8004cf4 <_scanf_float+0x64>
 8004dc4:	2508      	movs	r5, #8
 8004dc6:	e02c      	b.n	8004e22 <_scanf_float+0x192>
 8004dc8:	2b74      	cmp	r3, #116	@ 0x74
 8004dca:	d073      	beq.n	8004eb4 <_scanf_float+0x224>
 8004dcc:	2b79      	cmp	r3, #121	@ 0x79
 8004dce:	e7f6      	b.n	8004dbe <_scanf_float+0x12e>
 8004dd0:	6821      	ldr	r1, [r4, #0]
 8004dd2:	05c8      	lsls	r0, r1, #23
 8004dd4:	d51b      	bpl.n	8004e0e <_scanf_float+0x17e>
 8004dd6:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004dda:	6021      	str	r1, [r4, #0]
 8004ddc:	f109 0901 	add.w	r9, r9, #1
 8004de0:	f1bb 0f00 	cmp.w	fp, #0
 8004de4:	d003      	beq.n	8004dee <_scanf_float+0x15e>
 8004de6:	3201      	adds	r2, #1
 8004de8:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004dec:	60a2      	str	r2, [r4, #8]
 8004dee:	68a3      	ldr	r3, [r4, #8]
 8004df0:	3b01      	subs	r3, #1
 8004df2:	60a3      	str	r3, [r4, #8]
 8004df4:	6923      	ldr	r3, [r4, #16]
 8004df6:	3301      	adds	r3, #1
 8004df8:	6123      	str	r3, [r4, #16]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	607b      	str	r3, [r7, #4]
 8004e02:	f340 8087 	ble.w	8004f14 <_scanf_float+0x284>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	603b      	str	r3, [r7, #0]
 8004e0c:	e765      	b.n	8004cda <_scanf_float+0x4a>
 8004e0e:	eb1a 0105 	adds.w	r1, sl, r5
 8004e12:	f47f af6f 	bne.w	8004cf4 <_scanf_float+0x64>
 8004e16:	6822      	ldr	r2, [r4, #0]
 8004e18:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004e1c:	6022      	str	r2, [r4, #0]
 8004e1e:	460d      	mov	r5, r1
 8004e20:	468a      	mov	sl, r1
 8004e22:	f806 3b01 	strb.w	r3, [r6], #1
 8004e26:	e7e2      	b.n	8004dee <_scanf_float+0x15e>
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	0610      	lsls	r0, r2, #24
 8004e2c:	f57f af62 	bpl.w	8004cf4 <_scanf_float+0x64>
 8004e30:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004e34:	6022      	str	r2, [r4, #0]
 8004e36:	e7f4      	b.n	8004e22 <_scanf_float+0x192>
 8004e38:	f1ba 0f00 	cmp.w	sl, #0
 8004e3c:	d10e      	bne.n	8004e5c <_scanf_float+0x1cc>
 8004e3e:	f1b9 0f00 	cmp.w	r9, #0
 8004e42:	d10e      	bne.n	8004e62 <_scanf_float+0x1d2>
 8004e44:	6822      	ldr	r2, [r4, #0]
 8004e46:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004e4a:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004e4e:	d108      	bne.n	8004e62 <_scanf_float+0x1d2>
 8004e50:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004e54:	6022      	str	r2, [r4, #0]
 8004e56:	f04f 0a01 	mov.w	sl, #1
 8004e5a:	e7e2      	b.n	8004e22 <_scanf_float+0x192>
 8004e5c:	f1ba 0f02 	cmp.w	sl, #2
 8004e60:	d055      	beq.n	8004f0e <_scanf_float+0x27e>
 8004e62:	2d01      	cmp	r5, #1
 8004e64:	d002      	beq.n	8004e6c <_scanf_float+0x1dc>
 8004e66:	2d04      	cmp	r5, #4
 8004e68:	f47f af44 	bne.w	8004cf4 <_scanf_float+0x64>
 8004e6c:	3501      	adds	r5, #1
 8004e6e:	b2ed      	uxtb	r5, r5
 8004e70:	e7d7      	b.n	8004e22 <_scanf_float+0x192>
 8004e72:	f1ba 0f01 	cmp.w	sl, #1
 8004e76:	f47f af3d 	bne.w	8004cf4 <_scanf_float+0x64>
 8004e7a:	f04f 0a02 	mov.w	sl, #2
 8004e7e:	e7d0      	b.n	8004e22 <_scanf_float+0x192>
 8004e80:	b97d      	cbnz	r5, 8004ea2 <_scanf_float+0x212>
 8004e82:	f1b9 0f00 	cmp.w	r9, #0
 8004e86:	f47f af38 	bne.w	8004cfa <_scanf_float+0x6a>
 8004e8a:	6822      	ldr	r2, [r4, #0]
 8004e8c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004e90:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004e94:	f040 8101 	bne.w	800509a <_scanf_float+0x40a>
 8004e98:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004e9c:	6022      	str	r2, [r4, #0]
 8004e9e:	2501      	movs	r5, #1
 8004ea0:	e7bf      	b.n	8004e22 <_scanf_float+0x192>
 8004ea2:	2d03      	cmp	r5, #3
 8004ea4:	d0e2      	beq.n	8004e6c <_scanf_float+0x1dc>
 8004ea6:	2d05      	cmp	r5, #5
 8004ea8:	e7de      	b.n	8004e68 <_scanf_float+0x1d8>
 8004eaa:	2d02      	cmp	r5, #2
 8004eac:	f47f af22 	bne.w	8004cf4 <_scanf_float+0x64>
 8004eb0:	2503      	movs	r5, #3
 8004eb2:	e7b6      	b.n	8004e22 <_scanf_float+0x192>
 8004eb4:	2d06      	cmp	r5, #6
 8004eb6:	f47f af1d 	bne.w	8004cf4 <_scanf_float+0x64>
 8004eba:	2507      	movs	r5, #7
 8004ebc:	e7b1      	b.n	8004e22 <_scanf_float+0x192>
 8004ebe:	6822      	ldr	r2, [r4, #0]
 8004ec0:	0591      	lsls	r1, r2, #22
 8004ec2:	f57f af17 	bpl.w	8004cf4 <_scanf_float+0x64>
 8004ec6:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004eca:	6022      	str	r2, [r4, #0]
 8004ecc:	f8cd 9008 	str.w	r9, [sp, #8]
 8004ed0:	e7a7      	b.n	8004e22 <_scanf_float+0x192>
 8004ed2:	6822      	ldr	r2, [r4, #0]
 8004ed4:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004ed8:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004edc:	d006      	beq.n	8004eec <_scanf_float+0x25c>
 8004ede:	0550      	lsls	r0, r2, #21
 8004ee0:	f57f af08 	bpl.w	8004cf4 <_scanf_float+0x64>
 8004ee4:	f1b9 0f00 	cmp.w	r9, #0
 8004ee8:	f000 80d7 	beq.w	800509a <_scanf_float+0x40a>
 8004eec:	0591      	lsls	r1, r2, #22
 8004eee:	bf58      	it	pl
 8004ef0:	9902      	ldrpl	r1, [sp, #8]
 8004ef2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004ef6:	bf58      	it	pl
 8004ef8:	eba9 0101 	subpl.w	r1, r9, r1
 8004efc:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004f00:	bf58      	it	pl
 8004f02:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004f06:	6022      	str	r2, [r4, #0]
 8004f08:	f04f 0900 	mov.w	r9, #0
 8004f0c:	e789      	b.n	8004e22 <_scanf_float+0x192>
 8004f0e:	f04f 0a03 	mov.w	sl, #3
 8004f12:	e786      	b.n	8004e22 <_scanf_float+0x192>
 8004f14:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8004f18:	4639      	mov	r1, r7
 8004f1a:	4640      	mov	r0, r8
 8004f1c:	4798      	blx	r3
 8004f1e:	2800      	cmp	r0, #0
 8004f20:	f43f aedb 	beq.w	8004cda <_scanf_float+0x4a>
 8004f24:	e6e6      	b.n	8004cf4 <_scanf_float+0x64>
 8004f26:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f2a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f2e:	463a      	mov	r2, r7
 8004f30:	4640      	mov	r0, r8
 8004f32:	4798      	blx	r3
 8004f34:	6923      	ldr	r3, [r4, #16]
 8004f36:	3b01      	subs	r3, #1
 8004f38:	6123      	str	r3, [r4, #16]
 8004f3a:	e6e8      	b.n	8004d0e <_scanf_float+0x7e>
 8004f3c:	1e6b      	subs	r3, r5, #1
 8004f3e:	2b06      	cmp	r3, #6
 8004f40:	d824      	bhi.n	8004f8c <_scanf_float+0x2fc>
 8004f42:	2d02      	cmp	r5, #2
 8004f44:	d836      	bhi.n	8004fb4 <_scanf_float+0x324>
 8004f46:	9b01      	ldr	r3, [sp, #4]
 8004f48:	429e      	cmp	r6, r3
 8004f4a:	f67f aee4 	bls.w	8004d16 <_scanf_float+0x86>
 8004f4e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f52:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004f56:	463a      	mov	r2, r7
 8004f58:	4640      	mov	r0, r8
 8004f5a:	4798      	blx	r3
 8004f5c:	6923      	ldr	r3, [r4, #16]
 8004f5e:	3b01      	subs	r3, #1
 8004f60:	6123      	str	r3, [r4, #16]
 8004f62:	e7f0      	b.n	8004f46 <_scanf_float+0x2b6>
 8004f64:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004f68:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8004f6c:	463a      	mov	r2, r7
 8004f6e:	4640      	mov	r0, r8
 8004f70:	4798      	blx	r3
 8004f72:	6923      	ldr	r3, [r4, #16]
 8004f74:	3b01      	subs	r3, #1
 8004f76:	6123      	str	r3, [r4, #16]
 8004f78:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004f7c:	fa5f fa8a 	uxtb.w	sl, sl
 8004f80:	f1ba 0f02 	cmp.w	sl, #2
 8004f84:	d1ee      	bne.n	8004f64 <_scanf_float+0x2d4>
 8004f86:	3d03      	subs	r5, #3
 8004f88:	b2ed      	uxtb	r5, r5
 8004f8a:	1b76      	subs	r6, r6, r5
 8004f8c:	6823      	ldr	r3, [r4, #0]
 8004f8e:	05da      	lsls	r2, r3, #23
 8004f90:	d530      	bpl.n	8004ff4 <_scanf_float+0x364>
 8004f92:	055b      	lsls	r3, r3, #21
 8004f94:	d511      	bpl.n	8004fba <_scanf_float+0x32a>
 8004f96:	9b01      	ldr	r3, [sp, #4]
 8004f98:	429e      	cmp	r6, r3
 8004f9a:	f67f aebc 	bls.w	8004d16 <_scanf_float+0x86>
 8004f9e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004fa2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004fa6:	463a      	mov	r2, r7
 8004fa8:	4640      	mov	r0, r8
 8004faa:	4798      	blx	r3
 8004fac:	6923      	ldr	r3, [r4, #16]
 8004fae:	3b01      	subs	r3, #1
 8004fb0:	6123      	str	r3, [r4, #16]
 8004fb2:	e7f0      	b.n	8004f96 <_scanf_float+0x306>
 8004fb4:	46aa      	mov	sl, r5
 8004fb6:	46b3      	mov	fp, r6
 8004fb8:	e7de      	b.n	8004f78 <_scanf_float+0x2e8>
 8004fba:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004fbe:	6923      	ldr	r3, [r4, #16]
 8004fc0:	2965      	cmp	r1, #101	@ 0x65
 8004fc2:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8004fc6:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8004fca:	6123      	str	r3, [r4, #16]
 8004fcc:	d00c      	beq.n	8004fe8 <_scanf_float+0x358>
 8004fce:	2945      	cmp	r1, #69	@ 0x45
 8004fd0:	d00a      	beq.n	8004fe8 <_scanf_float+0x358>
 8004fd2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004fd6:	463a      	mov	r2, r7
 8004fd8:	4640      	mov	r0, r8
 8004fda:	4798      	blx	r3
 8004fdc:	6923      	ldr	r3, [r4, #16]
 8004fde:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	1eb5      	subs	r5, r6, #2
 8004fe6:	6123      	str	r3, [r4, #16]
 8004fe8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8004fec:	463a      	mov	r2, r7
 8004fee:	4640      	mov	r0, r8
 8004ff0:	4798      	blx	r3
 8004ff2:	462e      	mov	r6, r5
 8004ff4:	6822      	ldr	r2, [r4, #0]
 8004ff6:	f012 0210 	ands.w	r2, r2, #16
 8004ffa:	d001      	beq.n	8005000 <_scanf_float+0x370>
 8004ffc:	2000      	movs	r0, #0
 8004ffe:	e68b      	b.n	8004d18 <_scanf_float+0x88>
 8005000:	7032      	strb	r2, [r6, #0]
 8005002:	6823      	ldr	r3, [r4, #0]
 8005004:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005008:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800500c:	d11a      	bne.n	8005044 <_scanf_float+0x3b4>
 800500e:	9b02      	ldr	r3, [sp, #8]
 8005010:	454b      	cmp	r3, r9
 8005012:	eba3 0209 	sub.w	r2, r3, r9
 8005016:	d121      	bne.n	800505c <_scanf_float+0x3cc>
 8005018:	9901      	ldr	r1, [sp, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	4640      	mov	r0, r8
 800501e:	f000 feb9 	bl	8005d94 <_strtod_r>
 8005022:	9b03      	ldr	r3, [sp, #12]
 8005024:	6821      	ldr	r1, [r4, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f011 0f02 	tst.w	r1, #2
 800502c:	f103 0204 	add.w	r2, r3, #4
 8005030:	d01f      	beq.n	8005072 <_scanf_float+0x3e2>
 8005032:	9903      	ldr	r1, [sp, #12]
 8005034:	600a      	str	r2, [r1, #0]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	ed83 0b00 	vstr	d0, [r3]
 800503c:	68e3      	ldr	r3, [r4, #12]
 800503e:	3301      	adds	r3, #1
 8005040:	60e3      	str	r3, [r4, #12]
 8005042:	e7db      	b.n	8004ffc <_scanf_float+0x36c>
 8005044:	9b04      	ldr	r3, [sp, #16]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0e6      	beq.n	8005018 <_scanf_float+0x388>
 800504a:	9905      	ldr	r1, [sp, #20]
 800504c:	230a      	movs	r3, #10
 800504e:	3101      	adds	r1, #1
 8005050:	4640      	mov	r0, r8
 8005052:	f000 ff1f 	bl	8005e94 <_strtol_r>
 8005056:	9b04      	ldr	r3, [sp, #16]
 8005058:	9e05      	ldr	r6, [sp, #20]
 800505a:	1ac2      	subs	r2, r0, r3
 800505c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005060:	429e      	cmp	r6, r3
 8005062:	bf28      	it	cs
 8005064:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005068:	490d      	ldr	r1, [pc, #52]	@ (80050a0 <_scanf_float+0x410>)
 800506a:	4630      	mov	r0, r6
 800506c:	f000 f81c 	bl	80050a8 <siprintf>
 8005070:	e7d2      	b.n	8005018 <_scanf_float+0x388>
 8005072:	f011 0f04 	tst.w	r1, #4
 8005076:	9903      	ldr	r1, [sp, #12]
 8005078:	600a      	str	r2, [r1, #0]
 800507a:	d1dc      	bne.n	8005036 <_scanf_float+0x3a6>
 800507c:	eeb4 0b40 	vcmp.f64	d0, d0
 8005080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005084:	681d      	ldr	r5, [r3, #0]
 8005086:	d705      	bvc.n	8005094 <_scanf_float+0x404>
 8005088:	4806      	ldr	r0, [pc, #24]	@ (80050a4 <_scanf_float+0x414>)
 800508a:	f000 ff85 	bl	8005f98 <nanf>
 800508e:	ed85 0a00 	vstr	s0, [r5]
 8005092:	e7d3      	b.n	800503c <_scanf_float+0x3ac>
 8005094:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8005098:	e7f9      	b.n	800508e <_scanf_float+0x3fe>
 800509a:	f04f 0900 	mov.w	r9, #0
 800509e:	e630      	b.n	8004d02 <_scanf_float+0x72>
 80050a0:	080089a0 	.word	0x080089a0
 80050a4:	08008d93 	.word	0x08008d93

080050a8 <siprintf>:
 80050a8:	b40e      	push	{r1, r2, r3}
 80050aa:	b500      	push	{lr}
 80050ac:	b09c      	sub	sp, #112	@ 0x70
 80050ae:	ab1d      	add	r3, sp, #116	@ 0x74
 80050b0:	9002      	str	r0, [sp, #8]
 80050b2:	9006      	str	r0, [sp, #24]
 80050b4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80050b8:	4809      	ldr	r0, [pc, #36]	@ (80050e0 <siprintf+0x38>)
 80050ba:	9107      	str	r1, [sp, #28]
 80050bc:	9104      	str	r1, [sp, #16]
 80050be:	4909      	ldr	r1, [pc, #36]	@ (80050e4 <siprintf+0x3c>)
 80050c0:	f853 2b04 	ldr.w	r2, [r3], #4
 80050c4:	9105      	str	r1, [sp, #20]
 80050c6:	6800      	ldr	r0, [r0, #0]
 80050c8:	9301      	str	r3, [sp, #4]
 80050ca:	a902      	add	r1, sp, #8
 80050cc:	f002 f8de 	bl	800728c <_svfiprintf_r>
 80050d0:	9b02      	ldr	r3, [sp, #8]
 80050d2:	2200      	movs	r2, #0
 80050d4:	701a      	strb	r2, [r3, #0]
 80050d6:	b01c      	add	sp, #112	@ 0x70
 80050d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80050dc:	b003      	add	sp, #12
 80050de:	4770      	bx	lr
 80050e0:	240001a4 	.word	0x240001a4
 80050e4:	ffff0208 	.word	0xffff0208

080050e8 <std>:
 80050e8:	2300      	movs	r3, #0
 80050ea:	b510      	push	{r4, lr}
 80050ec:	4604      	mov	r4, r0
 80050ee:	e9c0 3300 	strd	r3, r3, [r0]
 80050f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80050f6:	6083      	str	r3, [r0, #8]
 80050f8:	8181      	strh	r1, [r0, #12]
 80050fa:	6643      	str	r3, [r0, #100]	@ 0x64
 80050fc:	81c2      	strh	r2, [r0, #14]
 80050fe:	6183      	str	r3, [r0, #24]
 8005100:	4619      	mov	r1, r3
 8005102:	2208      	movs	r2, #8
 8005104:	305c      	adds	r0, #92	@ 0x5c
 8005106:	f000 fef7 	bl	8005ef8 <memset>
 800510a:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <std+0x58>)
 800510c:	6263      	str	r3, [r4, #36]	@ 0x24
 800510e:	4b0d      	ldr	r3, [pc, #52]	@ (8005144 <std+0x5c>)
 8005110:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005112:	4b0d      	ldr	r3, [pc, #52]	@ (8005148 <std+0x60>)
 8005114:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005116:	4b0d      	ldr	r3, [pc, #52]	@ (800514c <std+0x64>)
 8005118:	6323      	str	r3, [r4, #48]	@ 0x30
 800511a:	4b0d      	ldr	r3, [pc, #52]	@ (8005150 <std+0x68>)
 800511c:	6224      	str	r4, [r4, #32]
 800511e:	429c      	cmp	r4, r3
 8005120:	d006      	beq.n	8005130 <std+0x48>
 8005122:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005126:	4294      	cmp	r4, r2
 8005128:	d002      	beq.n	8005130 <std+0x48>
 800512a:	33d0      	adds	r3, #208	@ 0xd0
 800512c:	429c      	cmp	r4, r3
 800512e:	d105      	bne.n	800513c <std+0x54>
 8005130:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005138:	f000 bf14 	b.w	8005f64 <__retarget_lock_init_recursive>
 800513c:	bd10      	pop	{r4, pc}
 800513e:	bf00      	nop
 8005140:	080080cb 	.word	0x080080cb
 8005144:	080080ed 	.word	0x080080ed
 8005148:	08008125 	.word	0x08008125
 800514c:	08008149 	.word	0x08008149
 8005150:	240002c8 	.word	0x240002c8

08005154 <stdio_exit_handler>:
 8005154:	4a02      	ldr	r2, [pc, #8]	@ (8005160 <stdio_exit_handler+0xc>)
 8005156:	4903      	ldr	r1, [pc, #12]	@ (8005164 <stdio_exit_handler+0x10>)
 8005158:	4803      	ldr	r0, [pc, #12]	@ (8005168 <stdio_exit_handler+0x14>)
 800515a:	f000 be9d 	b.w	8005e98 <_fwalk_sglue>
 800515e:	bf00      	nop
 8005160:	2400002c 	.word	0x2400002c
 8005164:	08007705 	.word	0x08007705
 8005168:	240001a8 	.word	0x240001a8

0800516c <cleanup_stdio>:
 800516c:	6841      	ldr	r1, [r0, #4]
 800516e:	4b0c      	ldr	r3, [pc, #48]	@ (80051a0 <cleanup_stdio+0x34>)
 8005170:	4299      	cmp	r1, r3
 8005172:	b510      	push	{r4, lr}
 8005174:	4604      	mov	r4, r0
 8005176:	d001      	beq.n	800517c <cleanup_stdio+0x10>
 8005178:	f002 fac4 	bl	8007704 <_fflush_r>
 800517c:	68a1      	ldr	r1, [r4, #8]
 800517e:	4b09      	ldr	r3, [pc, #36]	@ (80051a4 <cleanup_stdio+0x38>)
 8005180:	4299      	cmp	r1, r3
 8005182:	d002      	beq.n	800518a <cleanup_stdio+0x1e>
 8005184:	4620      	mov	r0, r4
 8005186:	f002 fabd 	bl	8007704 <_fflush_r>
 800518a:	68e1      	ldr	r1, [r4, #12]
 800518c:	4b06      	ldr	r3, [pc, #24]	@ (80051a8 <cleanup_stdio+0x3c>)
 800518e:	4299      	cmp	r1, r3
 8005190:	d004      	beq.n	800519c <cleanup_stdio+0x30>
 8005192:	4620      	mov	r0, r4
 8005194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005198:	f002 bab4 	b.w	8007704 <_fflush_r>
 800519c:	bd10      	pop	{r4, pc}
 800519e:	bf00      	nop
 80051a0:	240002c8 	.word	0x240002c8
 80051a4:	24000330 	.word	0x24000330
 80051a8:	24000398 	.word	0x24000398

080051ac <global_stdio_init.part.0>:
 80051ac:	b510      	push	{r4, lr}
 80051ae:	4b0b      	ldr	r3, [pc, #44]	@ (80051dc <global_stdio_init.part.0+0x30>)
 80051b0:	4c0b      	ldr	r4, [pc, #44]	@ (80051e0 <global_stdio_init.part.0+0x34>)
 80051b2:	4a0c      	ldr	r2, [pc, #48]	@ (80051e4 <global_stdio_init.part.0+0x38>)
 80051b4:	601a      	str	r2, [r3, #0]
 80051b6:	4620      	mov	r0, r4
 80051b8:	2200      	movs	r2, #0
 80051ba:	2104      	movs	r1, #4
 80051bc:	f7ff ff94 	bl	80050e8 <std>
 80051c0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80051c4:	2201      	movs	r2, #1
 80051c6:	2109      	movs	r1, #9
 80051c8:	f7ff ff8e 	bl	80050e8 <std>
 80051cc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80051d0:	2202      	movs	r2, #2
 80051d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051d6:	2112      	movs	r1, #18
 80051d8:	f7ff bf86 	b.w	80050e8 <std>
 80051dc:	24000400 	.word	0x24000400
 80051e0:	240002c8 	.word	0x240002c8
 80051e4:	08005155 	.word	0x08005155

080051e8 <__sfp_lock_acquire>:
 80051e8:	4801      	ldr	r0, [pc, #4]	@ (80051f0 <__sfp_lock_acquire+0x8>)
 80051ea:	f000 bebc 	b.w	8005f66 <__retarget_lock_acquire_recursive>
 80051ee:	bf00      	nop
 80051f0:	24000405 	.word	0x24000405

080051f4 <__sfp_lock_release>:
 80051f4:	4801      	ldr	r0, [pc, #4]	@ (80051fc <__sfp_lock_release+0x8>)
 80051f6:	f000 beb7 	b.w	8005f68 <__retarget_lock_release_recursive>
 80051fa:	bf00      	nop
 80051fc:	24000405 	.word	0x24000405

08005200 <__sinit>:
 8005200:	b510      	push	{r4, lr}
 8005202:	4604      	mov	r4, r0
 8005204:	f7ff fff0 	bl	80051e8 <__sfp_lock_acquire>
 8005208:	6a23      	ldr	r3, [r4, #32]
 800520a:	b11b      	cbz	r3, 8005214 <__sinit+0x14>
 800520c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005210:	f7ff bff0 	b.w	80051f4 <__sfp_lock_release>
 8005214:	4b04      	ldr	r3, [pc, #16]	@ (8005228 <__sinit+0x28>)
 8005216:	6223      	str	r3, [r4, #32]
 8005218:	4b04      	ldr	r3, [pc, #16]	@ (800522c <__sinit+0x2c>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d1f5      	bne.n	800520c <__sinit+0xc>
 8005220:	f7ff ffc4 	bl	80051ac <global_stdio_init.part.0>
 8005224:	e7f2      	b.n	800520c <__sinit+0xc>
 8005226:	bf00      	nop
 8005228:	0800516d 	.word	0x0800516d
 800522c:	24000400 	.word	0x24000400

08005230 <sulp>:
 8005230:	b570      	push	{r4, r5, r6, lr}
 8005232:	4604      	mov	r4, r0
 8005234:	460d      	mov	r5, r1
 8005236:	4616      	mov	r6, r2
 8005238:	ec45 4b10 	vmov	d0, r4, r5
 800523c:	f002 fe0a 	bl	8007e54 <__ulp>
 8005240:	b17e      	cbz	r6, 8005262 <sulp+0x32>
 8005242:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005246:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800524a:	2b00      	cmp	r3, #0
 800524c:	dd09      	ble.n	8005262 <sulp+0x32>
 800524e:	051b      	lsls	r3, r3, #20
 8005250:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8005254:	2000      	movs	r0, #0
 8005256:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 800525a:	ec41 0b17 	vmov	d7, r0, r1
 800525e:	ee20 0b07 	vmul.f64	d0, d0, d7
 8005262:	bd70      	pop	{r4, r5, r6, pc}
 8005264:	0000      	movs	r0, r0
	...

08005268 <_strtod_l>:
 8005268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526c:	ed2d 8b0a 	vpush	{d8-d12}
 8005270:	b097      	sub	sp, #92	@ 0x5c
 8005272:	4688      	mov	r8, r1
 8005274:	920e      	str	r2, [sp, #56]	@ 0x38
 8005276:	2200      	movs	r2, #0
 8005278:	9212      	str	r2, [sp, #72]	@ 0x48
 800527a:	9005      	str	r0, [sp, #20]
 800527c:	f04f 0a00 	mov.w	sl, #0
 8005280:	f04f 0b00 	mov.w	fp, #0
 8005284:	460a      	mov	r2, r1
 8005286:	9211      	str	r2, [sp, #68]	@ 0x44
 8005288:	7811      	ldrb	r1, [r2, #0]
 800528a:	292b      	cmp	r1, #43	@ 0x2b
 800528c:	d04c      	beq.n	8005328 <_strtod_l+0xc0>
 800528e:	d839      	bhi.n	8005304 <_strtod_l+0x9c>
 8005290:	290d      	cmp	r1, #13
 8005292:	d833      	bhi.n	80052fc <_strtod_l+0x94>
 8005294:	2908      	cmp	r1, #8
 8005296:	d833      	bhi.n	8005300 <_strtod_l+0x98>
 8005298:	2900      	cmp	r1, #0
 800529a:	d03c      	beq.n	8005316 <_strtod_l+0xae>
 800529c:	2200      	movs	r2, #0
 800529e:	9208      	str	r2, [sp, #32]
 80052a0:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80052a2:	782a      	ldrb	r2, [r5, #0]
 80052a4:	2a30      	cmp	r2, #48	@ 0x30
 80052a6:	f040 80b5 	bne.w	8005414 <_strtod_l+0x1ac>
 80052aa:	786a      	ldrb	r2, [r5, #1]
 80052ac:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80052b0:	2a58      	cmp	r2, #88	@ 0x58
 80052b2:	d170      	bne.n	8005396 <_strtod_l+0x12e>
 80052b4:	9302      	str	r3, [sp, #8]
 80052b6:	9b08      	ldr	r3, [sp, #32]
 80052b8:	9301      	str	r3, [sp, #4]
 80052ba:	ab12      	add	r3, sp, #72	@ 0x48
 80052bc:	9300      	str	r3, [sp, #0]
 80052be:	4a8b      	ldr	r2, [pc, #556]	@ (80054ec <_strtod_l+0x284>)
 80052c0:	9805      	ldr	r0, [sp, #20]
 80052c2:	ab13      	add	r3, sp, #76	@ 0x4c
 80052c4:	a911      	add	r1, sp, #68	@ 0x44
 80052c6:	f001 fcb5 	bl	8006c34 <__gethex>
 80052ca:	f010 060f 	ands.w	r6, r0, #15
 80052ce:	4604      	mov	r4, r0
 80052d0:	d005      	beq.n	80052de <_strtod_l+0x76>
 80052d2:	2e06      	cmp	r6, #6
 80052d4:	d12a      	bne.n	800532c <_strtod_l+0xc4>
 80052d6:	3501      	adds	r5, #1
 80052d8:	2300      	movs	r3, #0
 80052da:	9511      	str	r5, [sp, #68]	@ 0x44
 80052dc:	9308      	str	r3, [sp, #32]
 80052de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	f040 852f 	bne.w	8005d44 <_strtod_l+0xadc>
 80052e6:	9b08      	ldr	r3, [sp, #32]
 80052e8:	ec4b ab10 	vmov	d0, sl, fp
 80052ec:	b1cb      	cbz	r3, 8005322 <_strtod_l+0xba>
 80052ee:	eeb1 0b40 	vneg.f64	d0, d0
 80052f2:	b017      	add	sp, #92	@ 0x5c
 80052f4:	ecbd 8b0a 	vpop	{d8-d12}
 80052f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052fc:	2920      	cmp	r1, #32
 80052fe:	d1cd      	bne.n	800529c <_strtod_l+0x34>
 8005300:	3201      	adds	r2, #1
 8005302:	e7c0      	b.n	8005286 <_strtod_l+0x1e>
 8005304:	292d      	cmp	r1, #45	@ 0x2d
 8005306:	d1c9      	bne.n	800529c <_strtod_l+0x34>
 8005308:	2101      	movs	r1, #1
 800530a:	9108      	str	r1, [sp, #32]
 800530c:	1c51      	adds	r1, r2, #1
 800530e:	9111      	str	r1, [sp, #68]	@ 0x44
 8005310:	7852      	ldrb	r2, [r2, #1]
 8005312:	2a00      	cmp	r2, #0
 8005314:	d1c4      	bne.n	80052a0 <_strtod_l+0x38>
 8005316:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005318:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 800531c:	2b00      	cmp	r3, #0
 800531e:	f040 850f 	bne.w	8005d40 <_strtod_l+0xad8>
 8005322:	ec4b ab10 	vmov	d0, sl, fp
 8005326:	e7e4      	b.n	80052f2 <_strtod_l+0x8a>
 8005328:	2100      	movs	r1, #0
 800532a:	e7ee      	b.n	800530a <_strtod_l+0xa2>
 800532c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800532e:	b13a      	cbz	r2, 8005340 <_strtod_l+0xd8>
 8005330:	2135      	movs	r1, #53	@ 0x35
 8005332:	a814      	add	r0, sp, #80	@ 0x50
 8005334:	f002 fe85 	bl	8008042 <__copybits>
 8005338:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800533a:	9805      	ldr	r0, [sp, #20]
 800533c:	f002 fa56 	bl	80077ec <_Bfree>
 8005340:	1e73      	subs	r3, r6, #1
 8005342:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005344:	2b04      	cmp	r3, #4
 8005346:	d806      	bhi.n	8005356 <_strtod_l+0xee>
 8005348:	e8df f003 	tbb	[pc, r3]
 800534c:	201d0314 	.word	0x201d0314
 8005350:	14          	.byte	0x14
 8005351:	00          	.byte	0x00
 8005352:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8005356:	05e3      	lsls	r3, r4, #23
 8005358:	bf48      	it	mi
 800535a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800535e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005362:	0d1b      	lsrs	r3, r3, #20
 8005364:	051b      	lsls	r3, r3, #20
 8005366:	2b00      	cmp	r3, #0
 8005368:	d1b9      	bne.n	80052de <_strtod_l+0x76>
 800536a:	f000 fdd1 	bl	8005f10 <__errno>
 800536e:	2322      	movs	r3, #34	@ 0x22
 8005370:	6003      	str	r3, [r0, #0]
 8005372:	e7b4      	b.n	80052de <_strtod_l+0x76>
 8005374:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8005378:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800537c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005380:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005384:	e7e7      	b.n	8005356 <_strtod_l+0xee>
 8005386:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 80054f4 <_strtod_l+0x28c>
 800538a:	e7e4      	b.n	8005356 <_strtod_l+0xee>
 800538c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005390:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005394:	e7df      	b.n	8005356 <_strtod_l+0xee>
 8005396:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	9211      	str	r2, [sp, #68]	@ 0x44
 800539c:	785b      	ldrb	r3, [r3, #1]
 800539e:	2b30      	cmp	r3, #48	@ 0x30
 80053a0:	d0f9      	beq.n	8005396 <_strtod_l+0x12e>
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d09b      	beq.n	80052de <_strtod_l+0x76>
 80053a6:	2301      	movs	r3, #1
 80053a8:	2600      	movs	r6, #0
 80053aa:	9307      	str	r3, [sp, #28]
 80053ac:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80053ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80053b0:	46b1      	mov	r9, r6
 80053b2:	4635      	mov	r5, r6
 80053b4:	220a      	movs	r2, #10
 80053b6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 80053b8:	7804      	ldrb	r4, [r0, #0]
 80053ba:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 80053be:	b2d9      	uxtb	r1, r3
 80053c0:	2909      	cmp	r1, #9
 80053c2:	d929      	bls.n	8005418 <_strtod_l+0x1b0>
 80053c4:	494a      	ldr	r1, [pc, #296]	@ (80054f0 <_strtod_l+0x288>)
 80053c6:	2201      	movs	r2, #1
 80053c8:	f000 fd84 	bl	8005ed4 <strncmp>
 80053cc:	b378      	cbz	r0, 800542e <_strtod_l+0x1c6>
 80053ce:	2000      	movs	r0, #0
 80053d0:	4622      	mov	r2, r4
 80053d2:	462b      	mov	r3, r5
 80053d4:	4607      	mov	r7, r0
 80053d6:	9006      	str	r0, [sp, #24]
 80053d8:	2a65      	cmp	r2, #101	@ 0x65
 80053da:	d001      	beq.n	80053e0 <_strtod_l+0x178>
 80053dc:	2a45      	cmp	r2, #69	@ 0x45
 80053de:	d117      	bne.n	8005410 <_strtod_l+0x1a8>
 80053e0:	b91b      	cbnz	r3, 80053ea <_strtod_l+0x182>
 80053e2:	9b07      	ldr	r3, [sp, #28]
 80053e4:	4303      	orrs	r3, r0
 80053e6:	d096      	beq.n	8005316 <_strtod_l+0xae>
 80053e8:	2300      	movs	r3, #0
 80053ea:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 80053ee:	f108 0201 	add.w	r2, r8, #1
 80053f2:	9211      	str	r2, [sp, #68]	@ 0x44
 80053f4:	f898 2001 	ldrb.w	r2, [r8, #1]
 80053f8:	2a2b      	cmp	r2, #43	@ 0x2b
 80053fa:	d06b      	beq.n	80054d4 <_strtod_l+0x26c>
 80053fc:	2a2d      	cmp	r2, #45	@ 0x2d
 80053fe:	d071      	beq.n	80054e4 <_strtod_l+0x27c>
 8005400:	f04f 0e00 	mov.w	lr, #0
 8005404:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8005408:	2c09      	cmp	r4, #9
 800540a:	d979      	bls.n	8005500 <_strtod_l+0x298>
 800540c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8005410:	2400      	movs	r4, #0
 8005412:	e094      	b.n	800553e <_strtod_l+0x2d6>
 8005414:	2300      	movs	r3, #0
 8005416:	e7c7      	b.n	80053a8 <_strtod_l+0x140>
 8005418:	2d08      	cmp	r5, #8
 800541a:	f100 0001 	add.w	r0, r0, #1
 800541e:	bfd4      	ite	le
 8005420:	fb02 3909 	mlale	r9, r2, r9, r3
 8005424:	fb02 3606 	mlagt	r6, r2, r6, r3
 8005428:	3501      	adds	r5, #1
 800542a:	9011      	str	r0, [sp, #68]	@ 0x44
 800542c:	e7c3      	b.n	80053b6 <_strtod_l+0x14e>
 800542e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	9211      	str	r2, [sp, #68]	@ 0x44
 8005434:	785a      	ldrb	r2, [r3, #1]
 8005436:	b375      	cbz	r5, 8005496 <_strtod_l+0x22e>
 8005438:	4607      	mov	r7, r0
 800543a:	462b      	mov	r3, r5
 800543c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005440:	2909      	cmp	r1, #9
 8005442:	d913      	bls.n	800546c <_strtod_l+0x204>
 8005444:	2101      	movs	r1, #1
 8005446:	9106      	str	r1, [sp, #24]
 8005448:	e7c6      	b.n	80053d8 <_strtod_l+0x170>
 800544a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	9211      	str	r2, [sp, #68]	@ 0x44
 8005450:	785a      	ldrb	r2, [r3, #1]
 8005452:	3001      	adds	r0, #1
 8005454:	2a30      	cmp	r2, #48	@ 0x30
 8005456:	d0f8      	beq.n	800544a <_strtod_l+0x1e2>
 8005458:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800545c:	2b08      	cmp	r3, #8
 800545e:	f200 8476 	bhi.w	8005d4e <_strtod_l+0xae6>
 8005462:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005464:	930a      	str	r3, [sp, #40]	@ 0x28
 8005466:	4607      	mov	r7, r0
 8005468:	2000      	movs	r0, #0
 800546a:	4603      	mov	r3, r0
 800546c:	3a30      	subs	r2, #48	@ 0x30
 800546e:	f100 0101 	add.w	r1, r0, #1
 8005472:	d023      	beq.n	80054bc <_strtod_l+0x254>
 8005474:	440f      	add	r7, r1
 8005476:	eb00 0c03 	add.w	ip, r0, r3
 800547a:	4619      	mov	r1, r3
 800547c:	240a      	movs	r4, #10
 800547e:	4561      	cmp	r1, ip
 8005480:	d10b      	bne.n	800549a <_strtod_l+0x232>
 8005482:	1c5c      	adds	r4, r3, #1
 8005484:	4403      	add	r3, r0
 8005486:	2b08      	cmp	r3, #8
 8005488:	4404      	add	r4, r0
 800548a:	dc11      	bgt.n	80054b0 <_strtod_l+0x248>
 800548c:	230a      	movs	r3, #10
 800548e:	fb03 2909 	mla	r9, r3, r9, r2
 8005492:	2100      	movs	r1, #0
 8005494:	e013      	b.n	80054be <_strtod_l+0x256>
 8005496:	4628      	mov	r0, r5
 8005498:	e7dc      	b.n	8005454 <_strtod_l+0x1ec>
 800549a:	2908      	cmp	r1, #8
 800549c:	f101 0101 	add.w	r1, r1, #1
 80054a0:	dc02      	bgt.n	80054a8 <_strtod_l+0x240>
 80054a2:	fb04 f909 	mul.w	r9, r4, r9
 80054a6:	e7ea      	b.n	800547e <_strtod_l+0x216>
 80054a8:	2910      	cmp	r1, #16
 80054aa:	bfd8      	it	le
 80054ac:	4366      	mulle	r6, r4
 80054ae:	e7e6      	b.n	800547e <_strtod_l+0x216>
 80054b0:	2b0f      	cmp	r3, #15
 80054b2:	dcee      	bgt.n	8005492 <_strtod_l+0x22a>
 80054b4:	230a      	movs	r3, #10
 80054b6:	fb03 2606 	mla	r6, r3, r6, r2
 80054ba:	e7ea      	b.n	8005492 <_strtod_l+0x22a>
 80054bc:	461c      	mov	r4, r3
 80054be:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	9211      	str	r2, [sp, #68]	@ 0x44
 80054c4:	785a      	ldrb	r2, [r3, #1]
 80054c6:	4608      	mov	r0, r1
 80054c8:	4623      	mov	r3, r4
 80054ca:	e7b7      	b.n	800543c <_strtod_l+0x1d4>
 80054cc:	2301      	movs	r3, #1
 80054ce:	2700      	movs	r7, #0
 80054d0:	9306      	str	r3, [sp, #24]
 80054d2:	e786      	b.n	80053e2 <_strtod_l+0x17a>
 80054d4:	f04f 0e00 	mov.w	lr, #0
 80054d8:	f108 0202 	add.w	r2, r8, #2
 80054dc:	9211      	str	r2, [sp, #68]	@ 0x44
 80054de:	f898 2002 	ldrb.w	r2, [r8, #2]
 80054e2:	e78f      	b.n	8005404 <_strtod_l+0x19c>
 80054e4:	f04f 0e01 	mov.w	lr, #1
 80054e8:	e7f6      	b.n	80054d8 <_strtod_l+0x270>
 80054ea:	bf00      	nop
 80054ec:	080089bc 	.word	0x080089bc
 80054f0:	080089a5 	.word	0x080089a5
 80054f4:	7ff00000 	.word	0x7ff00000
 80054f8:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80054fa:	1c54      	adds	r4, r2, #1
 80054fc:	9411      	str	r4, [sp, #68]	@ 0x44
 80054fe:	7852      	ldrb	r2, [r2, #1]
 8005500:	2a30      	cmp	r2, #48	@ 0x30
 8005502:	d0f9      	beq.n	80054f8 <_strtod_l+0x290>
 8005504:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8005508:	2c08      	cmp	r4, #8
 800550a:	d881      	bhi.n	8005410 <_strtod_l+0x1a8>
 800550c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8005510:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005512:	9209      	str	r2, [sp, #36]	@ 0x24
 8005514:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005516:	1c51      	adds	r1, r2, #1
 8005518:	9111      	str	r1, [sp, #68]	@ 0x44
 800551a:	7852      	ldrb	r2, [r2, #1]
 800551c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8005520:	2c09      	cmp	r4, #9
 8005522:	d938      	bls.n	8005596 <_strtod_l+0x32e>
 8005524:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8005526:	1b0c      	subs	r4, r1, r4
 8005528:	2c08      	cmp	r4, #8
 800552a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 800552e:	dc02      	bgt.n	8005536 <_strtod_l+0x2ce>
 8005530:	4564      	cmp	r4, ip
 8005532:	bfa8      	it	ge
 8005534:	4664      	movge	r4, ip
 8005536:	f1be 0f00 	cmp.w	lr, #0
 800553a:	d000      	beq.n	800553e <_strtod_l+0x2d6>
 800553c:	4264      	negs	r4, r4
 800553e:	2b00      	cmp	r3, #0
 8005540:	d14e      	bne.n	80055e0 <_strtod_l+0x378>
 8005542:	9b07      	ldr	r3, [sp, #28]
 8005544:	4318      	orrs	r0, r3
 8005546:	f47f aeca 	bne.w	80052de <_strtod_l+0x76>
 800554a:	9b06      	ldr	r3, [sp, #24]
 800554c:	2b00      	cmp	r3, #0
 800554e:	f47f aee2 	bne.w	8005316 <_strtod_l+0xae>
 8005552:	2a69      	cmp	r2, #105	@ 0x69
 8005554:	d027      	beq.n	80055a6 <_strtod_l+0x33e>
 8005556:	dc24      	bgt.n	80055a2 <_strtod_l+0x33a>
 8005558:	2a49      	cmp	r2, #73	@ 0x49
 800555a:	d024      	beq.n	80055a6 <_strtod_l+0x33e>
 800555c:	2a4e      	cmp	r2, #78	@ 0x4e
 800555e:	f47f aeda 	bne.w	8005316 <_strtod_l+0xae>
 8005562:	4997      	ldr	r1, [pc, #604]	@ (80057c0 <_strtod_l+0x558>)
 8005564:	a811      	add	r0, sp, #68	@ 0x44
 8005566:	f001 fd87 	bl	8007078 <__match>
 800556a:	2800      	cmp	r0, #0
 800556c:	f43f aed3 	beq.w	8005316 <_strtod_l+0xae>
 8005570:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005572:	781b      	ldrb	r3, [r3, #0]
 8005574:	2b28      	cmp	r3, #40	@ 0x28
 8005576:	d12d      	bne.n	80055d4 <_strtod_l+0x36c>
 8005578:	4992      	ldr	r1, [pc, #584]	@ (80057c4 <_strtod_l+0x55c>)
 800557a:	aa14      	add	r2, sp, #80	@ 0x50
 800557c:	a811      	add	r0, sp, #68	@ 0x44
 800557e:	f001 fd8f 	bl	80070a0 <__hexnan>
 8005582:	2805      	cmp	r0, #5
 8005584:	d126      	bne.n	80055d4 <_strtod_l+0x36c>
 8005586:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005588:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 800558c:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005590:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005594:	e6a3      	b.n	80052de <_strtod_l+0x76>
 8005596:	240a      	movs	r4, #10
 8005598:	fb04 2c0c 	mla	ip, r4, ip, r2
 800559c:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 80055a0:	e7b8      	b.n	8005514 <_strtod_l+0x2ac>
 80055a2:	2a6e      	cmp	r2, #110	@ 0x6e
 80055a4:	e7db      	b.n	800555e <_strtod_l+0x2f6>
 80055a6:	4988      	ldr	r1, [pc, #544]	@ (80057c8 <_strtod_l+0x560>)
 80055a8:	a811      	add	r0, sp, #68	@ 0x44
 80055aa:	f001 fd65 	bl	8007078 <__match>
 80055ae:	2800      	cmp	r0, #0
 80055b0:	f43f aeb1 	beq.w	8005316 <_strtod_l+0xae>
 80055b4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80055b6:	4985      	ldr	r1, [pc, #532]	@ (80057cc <_strtod_l+0x564>)
 80055b8:	3b01      	subs	r3, #1
 80055ba:	a811      	add	r0, sp, #68	@ 0x44
 80055bc:	9311      	str	r3, [sp, #68]	@ 0x44
 80055be:	f001 fd5b 	bl	8007078 <__match>
 80055c2:	b910      	cbnz	r0, 80055ca <_strtod_l+0x362>
 80055c4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80055c6:	3301      	adds	r3, #1
 80055c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80055ca:	f8df b214 	ldr.w	fp, [pc, #532]	@ 80057e0 <_strtod_l+0x578>
 80055ce:	f04f 0a00 	mov.w	sl, #0
 80055d2:	e684      	b.n	80052de <_strtod_l+0x76>
 80055d4:	487e      	ldr	r0, [pc, #504]	@ (80057d0 <_strtod_l+0x568>)
 80055d6:	f000 fcd7 	bl	8005f88 <nan>
 80055da:	ec5b ab10 	vmov	sl, fp, d0
 80055de:	e67e      	b.n	80052de <_strtod_l+0x76>
 80055e0:	ee07 9a90 	vmov	s15, r9
 80055e4:	1be2      	subs	r2, r4, r7
 80055e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80055ea:	2d00      	cmp	r5, #0
 80055ec:	bf08      	it	eq
 80055ee:	461d      	moveq	r5, r3
 80055f0:	2b10      	cmp	r3, #16
 80055f2:	9209      	str	r2, [sp, #36]	@ 0x24
 80055f4:	461a      	mov	r2, r3
 80055f6:	bfa8      	it	ge
 80055f8:	2210      	movge	r2, #16
 80055fa:	2b09      	cmp	r3, #9
 80055fc:	ec5b ab17 	vmov	sl, fp, d7
 8005600:	dc15      	bgt.n	800562e <_strtod_l+0x3c6>
 8005602:	1be1      	subs	r1, r4, r7
 8005604:	2900      	cmp	r1, #0
 8005606:	f43f ae6a 	beq.w	80052de <_strtod_l+0x76>
 800560a:	eba4 0107 	sub.w	r1, r4, r7
 800560e:	dd72      	ble.n	80056f6 <_strtod_l+0x48e>
 8005610:	2916      	cmp	r1, #22
 8005612:	dc59      	bgt.n	80056c8 <_strtod_l+0x460>
 8005614:	4b6f      	ldr	r3, [pc, #444]	@ (80057d4 <_strtod_l+0x56c>)
 8005616:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005618:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800561c:	ed93 7b00 	vldr	d7, [r3]
 8005620:	ec4b ab16 	vmov	d6, sl, fp
 8005624:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005628:	ec5b ab17 	vmov	sl, fp, d7
 800562c:	e657      	b.n	80052de <_strtod_l+0x76>
 800562e:	4969      	ldr	r1, [pc, #420]	@ (80057d4 <_strtod_l+0x56c>)
 8005630:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8005634:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8005638:	ee06 6a90 	vmov	s13, r6
 800563c:	2b0f      	cmp	r3, #15
 800563e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 8005642:	eea7 6b05 	vfma.f64	d6, d7, d5
 8005646:	ec5b ab16 	vmov	sl, fp, d6
 800564a:	ddda      	ble.n	8005602 <_strtod_l+0x39a>
 800564c:	1a9a      	subs	r2, r3, r2
 800564e:	1be1      	subs	r1, r4, r7
 8005650:	440a      	add	r2, r1
 8005652:	2a00      	cmp	r2, #0
 8005654:	f340 8094 	ble.w	8005780 <_strtod_l+0x518>
 8005658:	f012 000f 	ands.w	r0, r2, #15
 800565c:	d00a      	beq.n	8005674 <_strtod_l+0x40c>
 800565e:	495d      	ldr	r1, [pc, #372]	@ (80057d4 <_strtod_l+0x56c>)
 8005660:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005664:	ed91 7b00 	vldr	d7, [r1]
 8005668:	ec4b ab16 	vmov	d6, sl, fp
 800566c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005670:	ec5b ab17 	vmov	sl, fp, d7
 8005674:	f032 020f 	bics.w	r2, r2, #15
 8005678:	d073      	beq.n	8005762 <_strtod_l+0x4fa>
 800567a:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 800567e:	dd47      	ble.n	8005710 <_strtod_l+0x4a8>
 8005680:	2400      	movs	r4, #0
 8005682:	4625      	mov	r5, r4
 8005684:	9407      	str	r4, [sp, #28]
 8005686:	4626      	mov	r6, r4
 8005688:	9a05      	ldr	r2, [sp, #20]
 800568a:	f8df b154 	ldr.w	fp, [pc, #340]	@ 80057e0 <_strtod_l+0x578>
 800568e:	2322      	movs	r3, #34	@ 0x22
 8005690:	6013      	str	r3, [r2, #0]
 8005692:	f04f 0a00 	mov.w	sl, #0
 8005696:	9b07      	ldr	r3, [sp, #28]
 8005698:	2b00      	cmp	r3, #0
 800569a:	f43f ae20 	beq.w	80052de <_strtod_l+0x76>
 800569e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80056a0:	9805      	ldr	r0, [sp, #20]
 80056a2:	f002 f8a3 	bl	80077ec <_Bfree>
 80056a6:	9805      	ldr	r0, [sp, #20]
 80056a8:	4631      	mov	r1, r6
 80056aa:	f002 f89f 	bl	80077ec <_Bfree>
 80056ae:	9805      	ldr	r0, [sp, #20]
 80056b0:	4629      	mov	r1, r5
 80056b2:	f002 f89b 	bl	80077ec <_Bfree>
 80056b6:	9907      	ldr	r1, [sp, #28]
 80056b8:	9805      	ldr	r0, [sp, #20]
 80056ba:	f002 f897 	bl	80077ec <_Bfree>
 80056be:	9805      	ldr	r0, [sp, #20]
 80056c0:	4621      	mov	r1, r4
 80056c2:	f002 f893 	bl	80077ec <_Bfree>
 80056c6:	e60a      	b.n	80052de <_strtod_l+0x76>
 80056c8:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 80056cc:	1be0      	subs	r0, r4, r7
 80056ce:	4281      	cmp	r1, r0
 80056d0:	dbbc      	blt.n	800564c <_strtod_l+0x3e4>
 80056d2:	4a40      	ldr	r2, [pc, #256]	@ (80057d4 <_strtod_l+0x56c>)
 80056d4:	f1c3 030f 	rsb	r3, r3, #15
 80056d8:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 80056dc:	ed91 7b00 	vldr	d7, [r1]
 80056e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80056e2:	ec4b ab16 	vmov	d6, sl, fp
 80056e6:	1acb      	subs	r3, r1, r3
 80056e8:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 80056ec:	ee27 7b06 	vmul.f64	d7, d7, d6
 80056f0:	ed92 6b00 	vldr	d6, [r2]
 80056f4:	e796      	b.n	8005624 <_strtod_l+0x3bc>
 80056f6:	3116      	adds	r1, #22
 80056f8:	dba8      	blt.n	800564c <_strtod_l+0x3e4>
 80056fa:	4b36      	ldr	r3, [pc, #216]	@ (80057d4 <_strtod_l+0x56c>)
 80056fc:	1b3c      	subs	r4, r7, r4
 80056fe:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8005702:	ed94 7b00 	vldr	d7, [r4]
 8005706:	ec4b ab16 	vmov	d6, sl, fp
 800570a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800570e:	e78b      	b.n	8005628 <_strtod_l+0x3c0>
 8005710:	2000      	movs	r0, #0
 8005712:	ec4b ab17 	vmov	d7, sl, fp
 8005716:	4e30      	ldr	r6, [pc, #192]	@ (80057d8 <_strtod_l+0x570>)
 8005718:	1112      	asrs	r2, r2, #4
 800571a:	4601      	mov	r1, r0
 800571c:	2a01      	cmp	r2, #1
 800571e:	dc23      	bgt.n	8005768 <_strtod_l+0x500>
 8005720:	b108      	cbz	r0, 8005726 <_strtod_l+0x4be>
 8005722:	ec5b ab17 	vmov	sl, fp, d7
 8005726:	4a2c      	ldr	r2, [pc, #176]	@ (80057d8 <_strtod_l+0x570>)
 8005728:	482c      	ldr	r0, [pc, #176]	@ (80057dc <_strtod_l+0x574>)
 800572a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800572e:	ed92 7b00 	vldr	d7, [r2]
 8005732:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005736:	ec4b ab16 	vmov	d6, sl, fp
 800573a:	4a29      	ldr	r2, [pc, #164]	@ (80057e0 <_strtod_l+0x578>)
 800573c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005740:	ee17 1a90 	vmov	r1, s15
 8005744:	400a      	ands	r2, r1
 8005746:	4282      	cmp	r2, r0
 8005748:	ec5b ab17 	vmov	sl, fp, d7
 800574c:	d898      	bhi.n	8005680 <_strtod_l+0x418>
 800574e:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 8005752:	4282      	cmp	r2, r0
 8005754:	bf86      	itte	hi
 8005756:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 80057e4 <_strtod_l+0x57c>
 800575a:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 800575e:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 8005762:	2200      	movs	r2, #0
 8005764:	9206      	str	r2, [sp, #24]
 8005766:	e076      	b.n	8005856 <_strtod_l+0x5ee>
 8005768:	f012 0f01 	tst.w	r2, #1
 800576c:	d004      	beq.n	8005778 <_strtod_l+0x510>
 800576e:	ed96 6b00 	vldr	d6, [r6]
 8005772:	2001      	movs	r0, #1
 8005774:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005778:	3101      	adds	r1, #1
 800577a:	1052      	asrs	r2, r2, #1
 800577c:	3608      	adds	r6, #8
 800577e:	e7cd      	b.n	800571c <_strtod_l+0x4b4>
 8005780:	d0ef      	beq.n	8005762 <_strtod_l+0x4fa>
 8005782:	4252      	negs	r2, r2
 8005784:	f012 000f 	ands.w	r0, r2, #15
 8005788:	d00a      	beq.n	80057a0 <_strtod_l+0x538>
 800578a:	4912      	ldr	r1, [pc, #72]	@ (80057d4 <_strtod_l+0x56c>)
 800578c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005790:	ed91 7b00 	vldr	d7, [r1]
 8005794:	ec4b ab16 	vmov	d6, sl, fp
 8005798:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800579c:	ec5b ab17 	vmov	sl, fp, d7
 80057a0:	1112      	asrs	r2, r2, #4
 80057a2:	d0de      	beq.n	8005762 <_strtod_l+0x4fa>
 80057a4:	2a1f      	cmp	r2, #31
 80057a6:	dd1f      	ble.n	80057e8 <_strtod_l+0x580>
 80057a8:	2400      	movs	r4, #0
 80057aa:	4625      	mov	r5, r4
 80057ac:	9407      	str	r4, [sp, #28]
 80057ae:	4626      	mov	r6, r4
 80057b0:	9a05      	ldr	r2, [sp, #20]
 80057b2:	2322      	movs	r3, #34	@ 0x22
 80057b4:	f04f 0a00 	mov.w	sl, #0
 80057b8:	f04f 0b00 	mov.w	fp, #0
 80057bc:	6013      	str	r3, [r2, #0]
 80057be:	e76a      	b.n	8005696 <_strtod_l+0x42e>
 80057c0:	08008979 	.word	0x08008979
 80057c4:	080089a8 	.word	0x080089a8
 80057c8:	08008971 	.word	0x08008971
 80057cc:	08008b04 	.word	0x08008b04
 80057d0:	08008d93 	.word	0x08008d93
 80057d4:	08008c90 	.word	0x08008c90
 80057d8:	08008c68 	.word	0x08008c68
 80057dc:	7ca00000 	.word	0x7ca00000
 80057e0:	7ff00000 	.word	0x7ff00000
 80057e4:	7fefffff 	.word	0x7fefffff
 80057e8:	f012 0110 	ands.w	r1, r2, #16
 80057ec:	bf18      	it	ne
 80057ee:	216a      	movne	r1, #106	@ 0x6a
 80057f0:	9106      	str	r1, [sp, #24]
 80057f2:	ec4b ab17 	vmov	d7, sl, fp
 80057f6:	49b0      	ldr	r1, [pc, #704]	@ (8005ab8 <_strtod_l+0x850>)
 80057f8:	2000      	movs	r0, #0
 80057fa:	07d6      	lsls	r6, r2, #31
 80057fc:	d504      	bpl.n	8005808 <_strtod_l+0x5a0>
 80057fe:	ed91 6b00 	vldr	d6, [r1]
 8005802:	2001      	movs	r0, #1
 8005804:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005808:	1052      	asrs	r2, r2, #1
 800580a:	f101 0108 	add.w	r1, r1, #8
 800580e:	d1f4      	bne.n	80057fa <_strtod_l+0x592>
 8005810:	b108      	cbz	r0, 8005816 <_strtod_l+0x5ae>
 8005812:	ec5b ab17 	vmov	sl, fp, d7
 8005816:	9a06      	ldr	r2, [sp, #24]
 8005818:	b1b2      	cbz	r2, 8005848 <_strtod_l+0x5e0>
 800581a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800581e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8005822:	2a00      	cmp	r2, #0
 8005824:	4658      	mov	r0, fp
 8005826:	dd0f      	ble.n	8005848 <_strtod_l+0x5e0>
 8005828:	2a1f      	cmp	r2, #31
 800582a:	dd55      	ble.n	80058d8 <_strtod_l+0x670>
 800582c:	2a34      	cmp	r2, #52	@ 0x34
 800582e:	bfde      	ittt	le
 8005830:	f04f 32ff 	movle.w	r2, #4294967295	@ 0xffffffff
 8005834:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8005838:	408a      	lslle	r2, r1
 800583a:	f04f 0a00 	mov.w	sl, #0
 800583e:	bfcc      	ite	gt
 8005840:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005844:	ea02 0b00 	andle.w	fp, r2, r0
 8005848:	ec4b ab17 	vmov	d7, sl, fp
 800584c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8005850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005854:	d0a8      	beq.n	80057a8 <_strtod_l+0x540>
 8005856:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005858:	9805      	ldr	r0, [sp, #20]
 800585a:	f8cd 9000 	str.w	r9, [sp]
 800585e:	462a      	mov	r2, r5
 8005860:	f002 f82c 	bl	80078bc <__s2b>
 8005864:	9007      	str	r0, [sp, #28]
 8005866:	2800      	cmp	r0, #0
 8005868:	f43f af0a 	beq.w	8005680 <_strtod_l+0x418>
 800586c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800586e:	1b3f      	subs	r7, r7, r4
 8005870:	2b00      	cmp	r3, #0
 8005872:	bfb4      	ite	lt
 8005874:	463b      	movlt	r3, r7
 8005876:	2300      	movge	r3, #0
 8005878:	930a      	str	r3, [sp, #40]	@ 0x28
 800587a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800587c:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8005aa8 <_strtod_l+0x840>
 8005880:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005884:	2400      	movs	r4, #0
 8005886:	930d      	str	r3, [sp, #52]	@ 0x34
 8005888:	4625      	mov	r5, r4
 800588a:	9b07      	ldr	r3, [sp, #28]
 800588c:	9805      	ldr	r0, [sp, #20]
 800588e:	6859      	ldr	r1, [r3, #4]
 8005890:	f001 ff6c 	bl	800776c <_Balloc>
 8005894:	4606      	mov	r6, r0
 8005896:	2800      	cmp	r0, #0
 8005898:	f43f aef6 	beq.w	8005688 <_strtod_l+0x420>
 800589c:	9b07      	ldr	r3, [sp, #28]
 800589e:	691a      	ldr	r2, [r3, #16]
 80058a0:	ec4b ab19 	vmov	d9, sl, fp
 80058a4:	3202      	adds	r2, #2
 80058a6:	f103 010c 	add.w	r1, r3, #12
 80058aa:	0092      	lsls	r2, r2, #2
 80058ac:	300c      	adds	r0, #12
 80058ae:	f000 fb5c 	bl	8005f6a <memcpy>
 80058b2:	eeb0 0b49 	vmov.f64	d0, d9
 80058b6:	9805      	ldr	r0, [sp, #20]
 80058b8:	aa14      	add	r2, sp, #80	@ 0x50
 80058ba:	a913      	add	r1, sp, #76	@ 0x4c
 80058bc:	f002 fb3a 	bl	8007f34 <__d2b>
 80058c0:	9012      	str	r0, [sp, #72]	@ 0x48
 80058c2:	2800      	cmp	r0, #0
 80058c4:	f43f aee0 	beq.w	8005688 <_strtod_l+0x420>
 80058c8:	9805      	ldr	r0, [sp, #20]
 80058ca:	2101      	movs	r1, #1
 80058cc:	f002 f88c 	bl	80079e8 <__i2b>
 80058d0:	4605      	mov	r5, r0
 80058d2:	b940      	cbnz	r0, 80058e6 <_strtod_l+0x67e>
 80058d4:	2500      	movs	r5, #0
 80058d6:	e6d7      	b.n	8005688 <_strtod_l+0x420>
 80058d8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80058dc:	fa01 f202 	lsl.w	r2, r1, r2
 80058e0:	ea02 0a0a 	and.w	sl, r2, sl
 80058e4:	e7b0      	b.n	8005848 <_strtod_l+0x5e0>
 80058e6:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 80058e8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80058ea:	2f00      	cmp	r7, #0
 80058ec:	bfab      	itete	ge
 80058ee:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 80058f0:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 80058f2:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 80058f6:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 80058fa:	bfac      	ite	ge
 80058fc:	eb07 0903 	addge.w	r9, r7, r3
 8005900:	eba3 0807 	sublt.w	r8, r3, r7
 8005904:	9b06      	ldr	r3, [sp, #24]
 8005906:	1aff      	subs	r7, r7, r3
 8005908:	4417      	add	r7, r2
 800590a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800590e:	4a6b      	ldr	r2, [pc, #428]	@ (8005abc <_strtod_l+0x854>)
 8005910:	3f01      	subs	r7, #1
 8005912:	4297      	cmp	r7, r2
 8005914:	da51      	bge.n	80059ba <_strtod_l+0x752>
 8005916:	1bd1      	subs	r1, r2, r7
 8005918:	291f      	cmp	r1, #31
 800591a:	eba3 0301 	sub.w	r3, r3, r1
 800591e:	f04f 0201 	mov.w	r2, #1
 8005922:	dc3e      	bgt.n	80059a2 <_strtod_l+0x73a>
 8005924:	408a      	lsls	r2, r1
 8005926:	920c      	str	r2, [sp, #48]	@ 0x30
 8005928:	2200      	movs	r2, #0
 800592a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800592c:	eb09 0703 	add.w	r7, r9, r3
 8005930:	4498      	add	r8, r3
 8005932:	9b06      	ldr	r3, [sp, #24]
 8005934:	45b9      	cmp	r9, r7
 8005936:	4498      	add	r8, r3
 8005938:	464b      	mov	r3, r9
 800593a:	bfa8      	it	ge
 800593c:	463b      	movge	r3, r7
 800593e:	4543      	cmp	r3, r8
 8005940:	bfa8      	it	ge
 8005942:	4643      	movge	r3, r8
 8005944:	2b00      	cmp	r3, #0
 8005946:	bfc2      	ittt	gt
 8005948:	1aff      	subgt	r7, r7, r3
 800594a:	eba8 0803 	subgt.w	r8, r8, r3
 800594e:	eba9 0903 	subgt.w	r9, r9, r3
 8005952:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005954:	2b00      	cmp	r3, #0
 8005956:	dd16      	ble.n	8005986 <_strtod_l+0x71e>
 8005958:	4629      	mov	r1, r5
 800595a:	9805      	ldr	r0, [sp, #20]
 800595c:	461a      	mov	r2, r3
 800595e:	f002 f903 	bl	8007b68 <__pow5mult>
 8005962:	4605      	mov	r5, r0
 8005964:	2800      	cmp	r0, #0
 8005966:	d0b5      	beq.n	80058d4 <_strtod_l+0x66c>
 8005968:	4601      	mov	r1, r0
 800596a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800596c:	9805      	ldr	r0, [sp, #20]
 800596e:	f002 f851 	bl	8007a14 <__multiply>
 8005972:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005974:	2800      	cmp	r0, #0
 8005976:	f43f ae87 	beq.w	8005688 <_strtod_l+0x420>
 800597a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800597c:	9805      	ldr	r0, [sp, #20]
 800597e:	f001 ff35 	bl	80077ec <_Bfree>
 8005982:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005984:	9312      	str	r3, [sp, #72]	@ 0x48
 8005986:	2f00      	cmp	r7, #0
 8005988:	dc1b      	bgt.n	80059c2 <_strtod_l+0x75a>
 800598a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800598c:	2b00      	cmp	r3, #0
 800598e:	dd21      	ble.n	80059d4 <_strtod_l+0x76c>
 8005990:	4631      	mov	r1, r6
 8005992:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005994:	9805      	ldr	r0, [sp, #20]
 8005996:	f002 f8e7 	bl	8007b68 <__pow5mult>
 800599a:	4606      	mov	r6, r0
 800599c:	b9d0      	cbnz	r0, 80059d4 <_strtod_l+0x76c>
 800599e:	2600      	movs	r6, #0
 80059a0:	e672      	b.n	8005688 <_strtod_l+0x420>
 80059a2:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 80059a6:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 80059aa:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 80059ae:	37e2      	adds	r7, #226	@ 0xe2
 80059b0:	fa02 f107 	lsl.w	r1, r2, r7
 80059b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80059b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80059b8:	e7b8      	b.n	800592c <_strtod_l+0x6c4>
 80059ba:	2200      	movs	r2, #0
 80059bc:	920b      	str	r2, [sp, #44]	@ 0x2c
 80059be:	2201      	movs	r2, #1
 80059c0:	e7f9      	b.n	80059b6 <_strtod_l+0x74e>
 80059c2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80059c4:	9805      	ldr	r0, [sp, #20]
 80059c6:	463a      	mov	r2, r7
 80059c8:	f002 f928 	bl	8007c1c <__lshift>
 80059cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80059ce:	2800      	cmp	r0, #0
 80059d0:	d1db      	bne.n	800598a <_strtod_l+0x722>
 80059d2:	e659      	b.n	8005688 <_strtod_l+0x420>
 80059d4:	f1b8 0f00 	cmp.w	r8, #0
 80059d8:	dd07      	ble.n	80059ea <_strtod_l+0x782>
 80059da:	4631      	mov	r1, r6
 80059dc:	9805      	ldr	r0, [sp, #20]
 80059de:	4642      	mov	r2, r8
 80059e0:	f002 f91c 	bl	8007c1c <__lshift>
 80059e4:	4606      	mov	r6, r0
 80059e6:	2800      	cmp	r0, #0
 80059e8:	d0d9      	beq.n	800599e <_strtod_l+0x736>
 80059ea:	f1b9 0f00 	cmp.w	r9, #0
 80059ee:	dd08      	ble.n	8005a02 <_strtod_l+0x79a>
 80059f0:	4629      	mov	r1, r5
 80059f2:	9805      	ldr	r0, [sp, #20]
 80059f4:	464a      	mov	r2, r9
 80059f6:	f002 f911 	bl	8007c1c <__lshift>
 80059fa:	4605      	mov	r5, r0
 80059fc:	2800      	cmp	r0, #0
 80059fe:	f43f ae43 	beq.w	8005688 <_strtod_l+0x420>
 8005a02:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8005a04:	9805      	ldr	r0, [sp, #20]
 8005a06:	4632      	mov	r2, r6
 8005a08:	f002 f990 	bl	8007d2c <__mdiff>
 8005a0c:	4604      	mov	r4, r0
 8005a0e:	2800      	cmp	r0, #0
 8005a10:	f43f ae3a 	beq.w	8005688 <_strtod_l+0x420>
 8005a14:	2300      	movs	r3, #0
 8005a16:	f8d0 800c 	ldr.w	r8, [r0, #12]
 8005a1a:	60c3      	str	r3, [r0, #12]
 8005a1c:	4629      	mov	r1, r5
 8005a1e:	f002 f969 	bl	8007cf4 <__mcmp>
 8005a22:	2800      	cmp	r0, #0
 8005a24:	da4e      	bge.n	8005ac4 <_strtod_l+0x85c>
 8005a26:	ea58 080a 	orrs.w	r8, r8, sl
 8005a2a:	d174      	bne.n	8005b16 <_strtod_l+0x8ae>
 8005a2c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d170      	bne.n	8005b16 <_strtod_l+0x8ae>
 8005a34:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a38:	0d1b      	lsrs	r3, r3, #20
 8005a3a:	051b      	lsls	r3, r3, #20
 8005a3c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005a40:	d969      	bls.n	8005b16 <_strtod_l+0x8ae>
 8005a42:	6963      	ldr	r3, [r4, #20]
 8005a44:	b913      	cbnz	r3, 8005a4c <_strtod_l+0x7e4>
 8005a46:	6923      	ldr	r3, [r4, #16]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	dd64      	ble.n	8005b16 <_strtod_l+0x8ae>
 8005a4c:	4621      	mov	r1, r4
 8005a4e:	2201      	movs	r2, #1
 8005a50:	9805      	ldr	r0, [sp, #20]
 8005a52:	f002 f8e3 	bl	8007c1c <__lshift>
 8005a56:	4629      	mov	r1, r5
 8005a58:	4604      	mov	r4, r0
 8005a5a:	f002 f94b 	bl	8007cf4 <__mcmp>
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	dd59      	ble.n	8005b16 <_strtod_l+0x8ae>
 8005a62:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005a66:	9a06      	ldr	r2, [sp, #24]
 8005a68:	0d1b      	lsrs	r3, r3, #20
 8005a6a:	051b      	lsls	r3, r3, #20
 8005a6c:	2a00      	cmp	r2, #0
 8005a6e:	d070      	beq.n	8005b52 <_strtod_l+0x8ea>
 8005a70:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005a74:	d86d      	bhi.n	8005b52 <_strtod_l+0x8ea>
 8005a76:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005a7a:	f67f ae99 	bls.w	80057b0 <_strtod_l+0x548>
 8005a7e:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8005ab0 <_strtod_l+0x848>
 8005a82:	ec4b ab16 	vmov	d6, sl, fp
 8005a86:	4b0e      	ldr	r3, [pc, #56]	@ (8005ac0 <_strtod_l+0x858>)
 8005a88:	ee26 7b07 	vmul.f64	d7, d6, d7
 8005a8c:	ee17 2a90 	vmov	r2, s15
 8005a90:	4013      	ands	r3, r2
 8005a92:	ec5b ab17 	vmov	sl, fp, d7
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	f47f ae01 	bne.w	800569e <_strtod_l+0x436>
 8005a9c:	9a05      	ldr	r2, [sp, #20]
 8005a9e:	2322      	movs	r3, #34	@ 0x22
 8005aa0:	6013      	str	r3, [r2, #0]
 8005aa2:	e5fc      	b.n	800569e <_strtod_l+0x436>
 8005aa4:	f3af 8000 	nop.w
 8005aa8:	ffc00000 	.word	0xffc00000
 8005aac:	41dfffff 	.word	0x41dfffff
 8005ab0:	00000000 	.word	0x00000000
 8005ab4:	39500000 	.word	0x39500000
 8005ab8:	080089d0 	.word	0x080089d0
 8005abc:	fffffc02 	.word	0xfffffc02
 8005ac0:	7ff00000 	.word	0x7ff00000
 8005ac4:	46d9      	mov	r9, fp
 8005ac6:	d15d      	bne.n	8005b84 <_strtod_l+0x91c>
 8005ac8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005acc:	f1b8 0f00 	cmp.w	r8, #0
 8005ad0:	d02a      	beq.n	8005b28 <_strtod_l+0x8c0>
 8005ad2:	4aab      	ldr	r2, [pc, #684]	@ (8005d80 <_strtod_l+0xb18>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d12a      	bne.n	8005b2e <_strtod_l+0x8c6>
 8005ad8:	9b06      	ldr	r3, [sp, #24]
 8005ada:	4652      	mov	r2, sl
 8005adc:	b1fb      	cbz	r3, 8005b1e <_strtod_l+0x8b6>
 8005ade:	4ba9      	ldr	r3, [pc, #676]	@ (8005d84 <_strtod_l+0xb1c>)
 8005ae0:	ea0b 0303 	and.w	r3, fp, r3
 8005ae4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005ae8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8005aec:	d81a      	bhi.n	8005b24 <_strtod_l+0x8bc>
 8005aee:	0d1b      	lsrs	r3, r3, #20
 8005af0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005af4:	fa01 f303 	lsl.w	r3, r1, r3
 8005af8:	429a      	cmp	r2, r3
 8005afa:	d118      	bne.n	8005b2e <_strtod_l+0x8c6>
 8005afc:	4ba2      	ldr	r3, [pc, #648]	@ (8005d88 <_strtod_l+0xb20>)
 8005afe:	4599      	cmp	r9, r3
 8005b00:	d102      	bne.n	8005b08 <_strtod_l+0x8a0>
 8005b02:	3201      	adds	r2, #1
 8005b04:	f43f adc0 	beq.w	8005688 <_strtod_l+0x420>
 8005b08:	4b9e      	ldr	r3, [pc, #632]	@ (8005d84 <_strtod_l+0xb1c>)
 8005b0a:	ea09 0303 	and.w	r3, r9, r3
 8005b0e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8005b12:	f04f 0a00 	mov.w	sl, #0
 8005b16:	9b06      	ldr	r3, [sp, #24]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1b0      	bne.n	8005a7e <_strtod_l+0x816>
 8005b1c:	e5bf      	b.n	800569e <_strtod_l+0x436>
 8005b1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005b22:	e7e9      	b.n	8005af8 <_strtod_l+0x890>
 8005b24:	460b      	mov	r3, r1
 8005b26:	e7e7      	b.n	8005af8 <_strtod_l+0x890>
 8005b28:	ea53 030a 	orrs.w	r3, r3, sl
 8005b2c:	d099      	beq.n	8005a62 <_strtod_l+0x7fa>
 8005b2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005b30:	b1c3      	cbz	r3, 8005b64 <_strtod_l+0x8fc>
 8005b32:	ea13 0f09 	tst.w	r3, r9
 8005b36:	d0ee      	beq.n	8005b16 <_strtod_l+0x8ae>
 8005b38:	9a06      	ldr	r2, [sp, #24]
 8005b3a:	4650      	mov	r0, sl
 8005b3c:	4659      	mov	r1, fp
 8005b3e:	f1b8 0f00 	cmp.w	r8, #0
 8005b42:	d013      	beq.n	8005b6c <_strtod_l+0x904>
 8005b44:	f7ff fb74 	bl	8005230 <sulp>
 8005b48:	ee39 7b00 	vadd.f64	d7, d9, d0
 8005b4c:	ec5b ab17 	vmov	sl, fp, d7
 8005b50:	e7e1      	b.n	8005b16 <_strtod_l+0x8ae>
 8005b52:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005b56:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005b5a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005b5e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005b62:	e7d8      	b.n	8005b16 <_strtod_l+0x8ae>
 8005b64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005b66:	ea13 0f0a 	tst.w	r3, sl
 8005b6a:	e7e4      	b.n	8005b36 <_strtod_l+0x8ce>
 8005b6c:	f7ff fb60 	bl	8005230 <sulp>
 8005b70:	ee39 0b40 	vsub.f64	d0, d9, d0
 8005b74:	eeb5 0b40 	vcmp.f64	d0, #0.0
 8005b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b7c:	ec5b ab10 	vmov	sl, fp, d0
 8005b80:	d1c9      	bne.n	8005b16 <_strtod_l+0x8ae>
 8005b82:	e615      	b.n	80057b0 <_strtod_l+0x548>
 8005b84:	4629      	mov	r1, r5
 8005b86:	4620      	mov	r0, r4
 8005b88:	f002 fa2c 	bl	8007fe4 <__ratio>
 8005b8c:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 8005b90:	eeb4 0bc7 	vcmpe.f64	d0, d7
 8005b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b98:	d85d      	bhi.n	8005c56 <_strtod_l+0x9ee>
 8005b9a:	f1b8 0f00 	cmp.w	r8, #0
 8005b9e:	d164      	bne.n	8005c6a <_strtod_l+0xa02>
 8005ba0:	f1ba 0f00 	cmp.w	sl, #0
 8005ba4:	d14b      	bne.n	8005c3e <_strtod_l+0x9d6>
 8005ba6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005baa:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d160      	bne.n	8005c74 <_strtod_l+0xa0c>
 8005bb2:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8005bb6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8005bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bbe:	d401      	bmi.n	8005bc4 <_strtod_l+0x95c>
 8005bc0:	ee20 8b08 	vmul.f64	d8, d0, d8
 8005bc4:	eeb1 ab48 	vneg.f64	d10, d8
 8005bc8:	486e      	ldr	r0, [pc, #440]	@ (8005d84 <_strtod_l+0xb1c>)
 8005bca:	4970      	ldr	r1, [pc, #448]	@ (8005d8c <_strtod_l+0xb24>)
 8005bcc:	ea09 0700 	and.w	r7, r9, r0
 8005bd0:	428f      	cmp	r7, r1
 8005bd2:	ec53 2b1a 	vmov	r2, r3, d10
 8005bd6:	d17d      	bne.n	8005cd4 <_strtod_l+0xa6c>
 8005bd8:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 8005bdc:	ec4b ab1c 	vmov	d12, sl, fp
 8005be0:	eeb0 0b4c 	vmov.f64	d0, d12
 8005be4:	f002 f936 	bl	8007e54 <__ulp>
 8005be8:	4866      	ldr	r0, [pc, #408]	@ (8005d84 <_strtod_l+0xb1c>)
 8005bea:	eea0 cb0a 	vfma.f64	d12, d0, d10
 8005bee:	ee1c 3a90 	vmov	r3, s25
 8005bf2:	4a67      	ldr	r2, [pc, #412]	@ (8005d90 <_strtod_l+0xb28>)
 8005bf4:	ea03 0100 	and.w	r1, r3, r0
 8005bf8:	4291      	cmp	r1, r2
 8005bfa:	ec5b ab1c 	vmov	sl, fp, d12
 8005bfe:	d93c      	bls.n	8005c7a <_strtod_l+0xa12>
 8005c00:	ee19 2a90 	vmov	r2, s19
 8005c04:	4b60      	ldr	r3, [pc, #384]	@ (8005d88 <_strtod_l+0xb20>)
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d104      	bne.n	8005c14 <_strtod_l+0x9ac>
 8005c0a:	ee19 3a10 	vmov	r3, s18
 8005c0e:	3301      	adds	r3, #1
 8005c10:	f43f ad3a 	beq.w	8005688 <_strtod_l+0x420>
 8005c14:	f8df b170 	ldr.w	fp, [pc, #368]	@ 8005d88 <_strtod_l+0xb20>
 8005c18:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8005c1c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8005c1e:	9805      	ldr	r0, [sp, #20]
 8005c20:	f001 fde4 	bl	80077ec <_Bfree>
 8005c24:	9805      	ldr	r0, [sp, #20]
 8005c26:	4631      	mov	r1, r6
 8005c28:	f001 fde0 	bl	80077ec <_Bfree>
 8005c2c:	9805      	ldr	r0, [sp, #20]
 8005c2e:	4629      	mov	r1, r5
 8005c30:	f001 fddc 	bl	80077ec <_Bfree>
 8005c34:	9805      	ldr	r0, [sp, #20]
 8005c36:	4621      	mov	r1, r4
 8005c38:	f001 fdd8 	bl	80077ec <_Bfree>
 8005c3c:	e625      	b.n	800588a <_strtod_l+0x622>
 8005c3e:	f1ba 0f01 	cmp.w	sl, #1
 8005c42:	d103      	bne.n	8005c4c <_strtod_l+0x9e4>
 8005c44:	f1bb 0f00 	cmp.w	fp, #0
 8005c48:	f43f adb2 	beq.w	80057b0 <_strtod_l+0x548>
 8005c4c:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8005c50:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 8005c54:	e7b8      	b.n	8005bc8 <_strtod_l+0x960>
 8005c56:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 8005c5a:	ee20 8b08 	vmul.f64	d8, d0, d8
 8005c5e:	f1b8 0f00 	cmp.w	r8, #0
 8005c62:	d0af      	beq.n	8005bc4 <_strtod_l+0x95c>
 8005c64:	eeb0 ab48 	vmov.f64	d10, d8
 8005c68:	e7ae      	b.n	8005bc8 <_strtod_l+0x960>
 8005c6a:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 8005c6e:	eeb0 8b4a 	vmov.f64	d8, d10
 8005c72:	e7a9      	b.n	8005bc8 <_strtod_l+0x960>
 8005c74:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 8005c78:	e7a6      	b.n	8005bc8 <_strtod_l+0x960>
 8005c7a:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005c7e:	9b06      	ldr	r3, [sp, #24]
 8005c80:	46d9      	mov	r9, fp
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d1ca      	bne.n	8005c1c <_strtod_l+0x9b4>
 8005c86:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005c8a:	0d1b      	lsrs	r3, r3, #20
 8005c8c:	051b      	lsls	r3, r3, #20
 8005c8e:	429f      	cmp	r7, r3
 8005c90:	d1c4      	bne.n	8005c1c <_strtod_l+0x9b4>
 8005c92:	ec51 0b18 	vmov	r0, r1, d8
 8005c96:	f7fa fd4f 	bl	8000738 <__aeabi_d2lz>
 8005c9a:	f7fa fd07 	bl	80006ac <__aeabi_l2d>
 8005c9e:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8005ca2:	ec41 0b17 	vmov	d7, r0, r1
 8005ca6:	ea49 090a 	orr.w	r9, r9, sl
 8005caa:	ea59 0908 	orrs.w	r9, r9, r8
 8005cae:	ee38 8b47 	vsub.f64	d8, d8, d7
 8005cb2:	d03c      	beq.n	8005d2e <_strtod_l+0xac6>
 8005cb4:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 8005d68 <_strtod_l+0xb00>
 8005cb8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cc0:	f53f aced 	bmi.w	800569e <_strtod_l+0x436>
 8005cc4:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 8005d70 <_strtod_l+0xb08>
 8005cc8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cd0:	dda4      	ble.n	8005c1c <_strtod_l+0x9b4>
 8005cd2:	e4e4      	b.n	800569e <_strtod_l+0x436>
 8005cd4:	9906      	ldr	r1, [sp, #24]
 8005cd6:	b1e1      	cbz	r1, 8005d12 <_strtod_l+0xaaa>
 8005cd8:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 8005cdc:	d819      	bhi.n	8005d12 <_strtod_l+0xaaa>
 8005cde:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8005ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ce6:	d811      	bhi.n	8005d0c <_strtod_l+0xaa4>
 8005ce8:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 8005cec:	ee18 3a10 	vmov	r3, s16
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	bf38      	it	cc
 8005cf4:	2301      	movcc	r3, #1
 8005cf6:	ee08 3a10 	vmov	s16, r3
 8005cfa:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 8005cfe:	f1b8 0f00 	cmp.w	r8, #0
 8005d02:	d111      	bne.n	8005d28 <_strtod_l+0xac0>
 8005d04:	eeb1 7b48 	vneg.f64	d7, d8
 8005d08:	ec53 2b17 	vmov	r2, r3, d7
 8005d0c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8005d10:	1bcb      	subs	r3, r1, r7
 8005d12:	eeb0 0b49 	vmov.f64	d0, d9
 8005d16:	ec43 2b1a 	vmov	d10, r2, r3
 8005d1a:	f002 f89b 	bl	8007e54 <__ulp>
 8005d1e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8005d22:	ec5b ab19 	vmov	sl, fp, d9
 8005d26:	e7aa      	b.n	8005c7e <_strtod_l+0xa16>
 8005d28:	eeb0 7b48 	vmov.f64	d7, d8
 8005d2c:	e7ec      	b.n	8005d08 <_strtod_l+0xaa0>
 8005d2e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 8005d78 <_strtod_l+0xb10>
 8005d32:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8005d36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d3a:	f57f af6f 	bpl.w	8005c1c <_strtod_l+0x9b4>
 8005d3e:	e4ae      	b.n	800569e <_strtod_l+0x436>
 8005d40:	2300      	movs	r3, #0
 8005d42:	9308      	str	r3, [sp, #32]
 8005d44:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005d46:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005d48:	6013      	str	r3, [r2, #0]
 8005d4a:	f7ff bacc 	b.w	80052e6 <_strtod_l+0x7e>
 8005d4e:	2a65      	cmp	r2, #101	@ 0x65
 8005d50:	f43f abbc 	beq.w	80054cc <_strtod_l+0x264>
 8005d54:	2a45      	cmp	r2, #69	@ 0x45
 8005d56:	f43f abb9 	beq.w	80054cc <_strtod_l+0x264>
 8005d5a:	2301      	movs	r3, #1
 8005d5c:	9306      	str	r3, [sp, #24]
 8005d5e:	f7ff bbf0 	b.w	8005542 <_strtod_l+0x2da>
 8005d62:	bf00      	nop
 8005d64:	f3af 8000 	nop.w
 8005d68:	94a03595 	.word	0x94a03595
 8005d6c:	3fdfffff 	.word	0x3fdfffff
 8005d70:	35afe535 	.word	0x35afe535
 8005d74:	3fe00000 	.word	0x3fe00000
 8005d78:	94a03595 	.word	0x94a03595
 8005d7c:	3fcfffff 	.word	0x3fcfffff
 8005d80:	000fffff 	.word	0x000fffff
 8005d84:	7ff00000 	.word	0x7ff00000
 8005d88:	7fefffff 	.word	0x7fefffff
 8005d8c:	7fe00000 	.word	0x7fe00000
 8005d90:	7c9fffff 	.word	0x7c9fffff

08005d94 <_strtod_r>:
 8005d94:	4b01      	ldr	r3, [pc, #4]	@ (8005d9c <_strtod_r+0x8>)
 8005d96:	f7ff ba67 	b.w	8005268 <_strtod_l>
 8005d9a:	bf00      	nop
 8005d9c:	24000038 	.word	0x24000038

08005da0 <_strtol_l.constprop.0>:
 8005da0:	2b24      	cmp	r3, #36	@ 0x24
 8005da2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005da6:	4686      	mov	lr, r0
 8005da8:	4690      	mov	r8, r2
 8005daa:	d801      	bhi.n	8005db0 <_strtol_l.constprop.0+0x10>
 8005dac:	2b01      	cmp	r3, #1
 8005dae:	d106      	bne.n	8005dbe <_strtol_l.constprop.0+0x1e>
 8005db0:	f000 f8ae 	bl	8005f10 <__errno>
 8005db4:	2316      	movs	r3, #22
 8005db6:	6003      	str	r3, [r0, #0]
 8005db8:	2000      	movs	r0, #0
 8005dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dbe:	4834      	ldr	r0, [pc, #208]	@ (8005e90 <_strtol_l.constprop.0+0xf0>)
 8005dc0:	460d      	mov	r5, r1
 8005dc2:	462a      	mov	r2, r5
 8005dc4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005dc8:	5d06      	ldrb	r6, [r0, r4]
 8005dca:	f016 0608 	ands.w	r6, r6, #8
 8005dce:	d1f8      	bne.n	8005dc2 <_strtol_l.constprop.0+0x22>
 8005dd0:	2c2d      	cmp	r4, #45	@ 0x2d
 8005dd2:	d12d      	bne.n	8005e30 <_strtol_l.constprop.0+0x90>
 8005dd4:	782c      	ldrb	r4, [r5, #0]
 8005dd6:	2601      	movs	r6, #1
 8005dd8:	1c95      	adds	r5, r2, #2
 8005dda:	f033 0210 	bics.w	r2, r3, #16
 8005dde:	d109      	bne.n	8005df4 <_strtol_l.constprop.0+0x54>
 8005de0:	2c30      	cmp	r4, #48	@ 0x30
 8005de2:	d12a      	bne.n	8005e3a <_strtol_l.constprop.0+0x9a>
 8005de4:	782a      	ldrb	r2, [r5, #0]
 8005de6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005dea:	2a58      	cmp	r2, #88	@ 0x58
 8005dec:	d125      	bne.n	8005e3a <_strtol_l.constprop.0+0x9a>
 8005dee:	786c      	ldrb	r4, [r5, #1]
 8005df0:	2310      	movs	r3, #16
 8005df2:	3502      	adds	r5, #2
 8005df4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005df8:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	fbbc f9f3 	udiv	r9, ip, r3
 8005e02:	4610      	mov	r0, r2
 8005e04:	fb03 ca19 	mls	sl, r3, r9, ip
 8005e08:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005e0c:	2f09      	cmp	r7, #9
 8005e0e:	d81b      	bhi.n	8005e48 <_strtol_l.constprop.0+0xa8>
 8005e10:	463c      	mov	r4, r7
 8005e12:	42a3      	cmp	r3, r4
 8005e14:	dd27      	ble.n	8005e66 <_strtol_l.constprop.0+0xc6>
 8005e16:	1c57      	adds	r7, r2, #1
 8005e18:	d007      	beq.n	8005e2a <_strtol_l.constprop.0+0x8a>
 8005e1a:	4581      	cmp	r9, r0
 8005e1c:	d320      	bcc.n	8005e60 <_strtol_l.constprop.0+0xc0>
 8005e1e:	d101      	bne.n	8005e24 <_strtol_l.constprop.0+0x84>
 8005e20:	45a2      	cmp	sl, r4
 8005e22:	db1d      	blt.n	8005e60 <_strtol_l.constprop.0+0xc0>
 8005e24:	fb00 4003 	mla	r0, r0, r3, r4
 8005e28:	2201      	movs	r2, #1
 8005e2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005e2e:	e7eb      	b.n	8005e08 <_strtol_l.constprop.0+0x68>
 8005e30:	2c2b      	cmp	r4, #43	@ 0x2b
 8005e32:	bf04      	itt	eq
 8005e34:	782c      	ldrbeq	r4, [r5, #0]
 8005e36:	1c95      	addeq	r5, r2, #2
 8005e38:	e7cf      	b.n	8005dda <_strtol_l.constprop.0+0x3a>
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d1da      	bne.n	8005df4 <_strtol_l.constprop.0+0x54>
 8005e3e:	2c30      	cmp	r4, #48	@ 0x30
 8005e40:	bf0c      	ite	eq
 8005e42:	2308      	moveq	r3, #8
 8005e44:	230a      	movne	r3, #10
 8005e46:	e7d5      	b.n	8005df4 <_strtol_l.constprop.0+0x54>
 8005e48:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005e4c:	2f19      	cmp	r7, #25
 8005e4e:	d801      	bhi.n	8005e54 <_strtol_l.constprop.0+0xb4>
 8005e50:	3c37      	subs	r4, #55	@ 0x37
 8005e52:	e7de      	b.n	8005e12 <_strtol_l.constprop.0+0x72>
 8005e54:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005e58:	2f19      	cmp	r7, #25
 8005e5a:	d804      	bhi.n	8005e66 <_strtol_l.constprop.0+0xc6>
 8005e5c:	3c57      	subs	r4, #87	@ 0x57
 8005e5e:	e7d8      	b.n	8005e12 <_strtol_l.constprop.0+0x72>
 8005e60:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005e64:	e7e1      	b.n	8005e2a <_strtol_l.constprop.0+0x8a>
 8005e66:	1c53      	adds	r3, r2, #1
 8005e68:	d108      	bne.n	8005e7c <_strtol_l.constprop.0+0xdc>
 8005e6a:	2322      	movs	r3, #34	@ 0x22
 8005e6c:	f8ce 3000 	str.w	r3, [lr]
 8005e70:	4660      	mov	r0, ip
 8005e72:	f1b8 0f00 	cmp.w	r8, #0
 8005e76:	d0a0      	beq.n	8005dba <_strtol_l.constprop.0+0x1a>
 8005e78:	1e69      	subs	r1, r5, #1
 8005e7a:	e006      	b.n	8005e8a <_strtol_l.constprop.0+0xea>
 8005e7c:	b106      	cbz	r6, 8005e80 <_strtol_l.constprop.0+0xe0>
 8005e7e:	4240      	negs	r0, r0
 8005e80:	f1b8 0f00 	cmp.w	r8, #0
 8005e84:	d099      	beq.n	8005dba <_strtol_l.constprop.0+0x1a>
 8005e86:	2a00      	cmp	r2, #0
 8005e88:	d1f6      	bne.n	8005e78 <_strtol_l.constprop.0+0xd8>
 8005e8a:	f8c8 1000 	str.w	r1, [r8]
 8005e8e:	e794      	b.n	8005dba <_strtol_l.constprop.0+0x1a>
 8005e90:	08008a01 	.word	0x08008a01

08005e94 <_strtol_r>:
 8005e94:	f7ff bf84 	b.w	8005da0 <_strtol_l.constprop.0>

08005e98 <_fwalk_sglue>:
 8005e98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e9c:	4607      	mov	r7, r0
 8005e9e:	4688      	mov	r8, r1
 8005ea0:	4614      	mov	r4, r2
 8005ea2:	2600      	movs	r6, #0
 8005ea4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005ea8:	f1b9 0901 	subs.w	r9, r9, #1
 8005eac:	d505      	bpl.n	8005eba <_fwalk_sglue+0x22>
 8005eae:	6824      	ldr	r4, [r4, #0]
 8005eb0:	2c00      	cmp	r4, #0
 8005eb2:	d1f7      	bne.n	8005ea4 <_fwalk_sglue+0xc>
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eba:	89ab      	ldrh	r3, [r5, #12]
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d907      	bls.n	8005ed0 <_fwalk_sglue+0x38>
 8005ec0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	d003      	beq.n	8005ed0 <_fwalk_sglue+0x38>
 8005ec8:	4629      	mov	r1, r5
 8005eca:	4638      	mov	r0, r7
 8005ecc:	47c0      	blx	r8
 8005ece:	4306      	orrs	r6, r0
 8005ed0:	3568      	adds	r5, #104	@ 0x68
 8005ed2:	e7e9      	b.n	8005ea8 <_fwalk_sglue+0x10>

08005ed4 <strncmp>:
 8005ed4:	b510      	push	{r4, lr}
 8005ed6:	b16a      	cbz	r2, 8005ef4 <strncmp+0x20>
 8005ed8:	3901      	subs	r1, #1
 8005eda:	1884      	adds	r4, r0, r2
 8005edc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005ee0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d103      	bne.n	8005ef0 <strncmp+0x1c>
 8005ee8:	42a0      	cmp	r0, r4
 8005eea:	d001      	beq.n	8005ef0 <strncmp+0x1c>
 8005eec:	2a00      	cmp	r2, #0
 8005eee:	d1f5      	bne.n	8005edc <strncmp+0x8>
 8005ef0:	1ad0      	subs	r0, r2, r3
 8005ef2:	bd10      	pop	{r4, pc}
 8005ef4:	4610      	mov	r0, r2
 8005ef6:	e7fc      	b.n	8005ef2 <strncmp+0x1e>

08005ef8 <memset>:
 8005ef8:	4402      	add	r2, r0
 8005efa:	4603      	mov	r3, r0
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d100      	bne.n	8005f02 <memset+0xa>
 8005f00:	4770      	bx	lr
 8005f02:	f803 1b01 	strb.w	r1, [r3], #1
 8005f06:	e7f9      	b.n	8005efc <memset+0x4>

08005f08 <_localeconv_r>:
 8005f08:	4800      	ldr	r0, [pc, #0]	@ (8005f0c <_localeconv_r+0x4>)
 8005f0a:	4770      	bx	lr
 8005f0c:	24000128 	.word	0x24000128

08005f10 <__errno>:
 8005f10:	4b01      	ldr	r3, [pc, #4]	@ (8005f18 <__errno+0x8>)
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	240001a4 	.word	0x240001a4

08005f1c <__libc_init_array>:
 8005f1c:	b570      	push	{r4, r5, r6, lr}
 8005f1e:	4d0d      	ldr	r5, [pc, #52]	@ (8005f54 <__libc_init_array+0x38>)
 8005f20:	4c0d      	ldr	r4, [pc, #52]	@ (8005f58 <__libc_init_array+0x3c>)
 8005f22:	1b64      	subs	r4, r4, r5
 8005f24:	10a4      	asrs	r4, r4, #2
 8005f26:	2600      	movs	r6, #0
 8005f28:	42a6      	cmp	r6, r4
 8005f2a:	d109      	bne.n	8005f40 <__libc_init_array+0x24>
 8005f2c:	4d0b      	ldr	r5, [pc, #44]	@ (8005f5c <__libc_init_array+0x40>)
 8005f2e:	4c0c      	ldr	r4, [pc, #48]	@ (8005f60 <__libc_init_array+0x44>)
 8005f30:	f002 fcf4 	bl	800891c <_init>
 8005f34:	1b64      	subs	r4, r4, r5
 8005f36:	10a4      	asrs	r4, r4, #2
 8005f38:	2600      	movs	r6, #0
 8005f3a:	42a6      	cmp	r6, r4
 8005f3c:	d105      	bne.n	8005f4a <__libc_init_array+0x2e>
 8005f3e:	bd70      	pop	{r4, r5, r6, pc}
 8005f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f44:	4798      	blx	r3
 8005f46:	3601      	adds	r6, #1
 8005f48:	e7ee      	b.n	8005f28 <__libc_init_array+0xc>
 8005f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f4e:	4798      	blx	r3
 8005f50:	3601      	adds	r6, #1
 8005f52:	e7f2      	b.n	8005f3a <__libc_init_array+0x1e>
 8005f54:	08008d9c 	.word	0x08008d9c
 8005f58:	08008d9c 	.word	0x08008d9c
 8005f5c:	08008d9c 	.word	0x08008d9c
 8005f60:	08008da0 	.word	0x08008da0

08005f64 <__retarget_lock_init_recursive>:
 8005f64:	4770      	bx	lr

08005f66 <__retarget_lock_acquire_recursive>:
 8005f66:	4770      	bx	lr

08005f68 <__retarget_lock_release_recursive>:
 8005f68:	4770      	bx	lr

08005f6a <memcpy>:
 8005f6a:	440a      	add	r2, r1
 8005f6c:	4291      	cmp	r1, r2
 8005f6e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8005f72:	d100      	bne.n	8005f76 <memcpy+0xc>
 8005f74:	4770      	bx	lr
 8005f76:	b510      	push	{r4, lr}
 8005f78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005f7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005f80:	4291      	cmp	r1, r2
 8005f82:	d1f9      	bne.n	8005f78 <memcpy+0xe>
 8005f84:	bd10      	pop	{r4, pc}
	...

08005f88 <nan>:
 8005f88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005f90 <nan+0x8>
 8005f8c:	4770      	bx	lr
 8005f8e:	bf00      	nop
 8005f90:	00000000 	.word	0x00000000
 8005f94:	7ff80000 	.word	0x7ff80000

08005f98 <nanf>:
 8005f98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005fa0 <nanf+0x8>
 8005f9c:	4770      	bx	lr
 8005f9e:	bf00      	nop
 8005fa0:	7fc00000 	.word	0x7fc00000

08005fa4 <quorem>:
 8005fa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fa8:	6903      	ldr	r3, [r0, #16]
 8005faa:	690c      	ldr	r4, [r1, #16]
 8005fac:	42a3      	cmp	r3, r4
 8005fae:	4607      	mov	r7, r0
 8005fb0:	db7e      	blt.n	80060b0 <quorem+0x10c>
 8005fb2:	3c01      	subs	r4, #1
 8005fb4:	f101 0814 	add.w	r8, r1, #20
 8005fb8:	00a3      	lsls	r3, r4, #2
 8005fba:	f100 0514 	add.w	r5, r0, #20
 8005fbe:	9300      	str	r3, [sp, #0]
 8005fc0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005fca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005fce:	3301      	adds	r3, #1
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005fd6:	fbb2 f6f3 	udiv	r6, r2, r3
 8005fda:	d32e      	bcc.n	800603a <quorem+0x96>
 8005fdc:	f04f 0a00 	mov.w	sl, #0
 8005fe0:	46c4      	mov	ip, r8
 8005fe2:	46ae      	mov	lr, r5
 8005fe4:	46d3      	mov	fp, sl
 8005fe6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005fea:	b298      	uxth	r0, r3
 8005fec:	fb06 a000 	mla	r0, r6, r0, sl
 8005ff0:	0c02      	lsrs	r2, r0, #16
 8005ff2:	0c1b      	lsrs	r3, r3, #16
 8005ff4:	fb06 2303 	mla	r3, r6, r3, r2
 8005ff8:	f8de 2000 	ldr.w	r2, [lr]
 8005ffc:	b280      	uxth	r0, r0
 8005ffe:	b292      	uxth	r2, r2
 8006000:	1a12      	subs	r2, r2, r0
 8006002:	445a      	add	r2, fp
 8006004:	f8de 0000 	ldr.w	r0, [lr]
 8006008:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800600c:	b29b      	uxth	r3, r3
 800600e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006012:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006016:	b292      	uxth	r2, r2
 8006018:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800601c:	45e1      	cmp	r9, ip
 800601e:	f84e 2b04 	str.w	r2, [lr], #4
 8006022:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006026:	d2de      	bcs.n	8005fe6 <quorem+0x42>
 8006028:	9b00      	ldr	r3, [sp, #0]
 800602a:	58eb      	ldr	r3, [r5, r3]
 800602c:	b92b      	cbnz	r3, 800603a <quorem+0x96>
 800602e:	9b01      	ldr	r3, [sp, #4]
 8006030:	3b04      	subs	r3, #4
 8006032:	429d      	cmp	r5, r3
 8006034:	461a      	mov	r2, r3
 8006036:	d32f      	bcc.n	8006098 <quorem+0xf4>
 8006038:	613c      	str	r4, [r7, #16]
 800603a:	4638      	mov	r0, r7
 800603c:	f001 fe5a 	bl	8007cf4 <__mcmp>
 8006040:	2800      	cmp	r0, #0
 8006042:	db25      	blt.n	8006090 <quorem+0xec>
 8006044:	4629      	mov	r1, r5
 8006046:	2000      	movs	r0, #0
 8006048:	f858 2b04 	ldr.w	r2, [r8], #4
 800604c:	f8d1 c000 	ldr.w	ip, [r1]
 8006050:	fa1f fe82 	uxth.w	lr, r2
 8006054:	fa1f f38c 	uxth.w	r3, ip
 8006058:	eba3 030e 	sub.w	r3, r3, lr
 800605c:	4403      	add	r3, r0
 800605e:	0c12      	lsrs	r2, r2, #16
 8006060:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006064:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006068:	b29b      	uxth	r3, r3
 800606a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800606e:	45c1      	cmp	r9, r8
 8006070:	f841 3b04 	str.w	r3, [r1], #4
 8006074:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006078:	d2e6      	bcs.n	8006048 <quorem+0xa4>
 800607a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800607e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006082:	b922      	cbnz	r2, 800608e <quorem+0xea>
 8006084:	3b04      	subs	r3, #4
 8006086:	429d      	cmp	r5, r3
 8006088:	461a      	mov	r2, r3
 800608a:	d30b      	bcc.n	80060a4 <quorem+0x100>
 800608c:	613c      	str	r4, [r7, #16]
 800608e:	3601      	adds	r6, #1
 8006090:	4630      	mov	r0, r6
 8006092:	b003      	add	sp, #12
 8006094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006098:	6812      	ldr	r2, [r2, #0]
 800609a:	3b04      	subs	r3, #4
 800609c:	2a00      	cmp	r2, #0
 800609e:	d1cb      	bne.n	8006038 <quorem+0x94>
 80060a0:	3c01      	subs	r4, #1
 80060a2:	e7c6      	b.n	8006032 <quorem+0x8e>
 80060a4:	6812      	ldr	r2, [r2, #0]
 80060a6:	3b04      	subs	r3, #4
 80060a8:	2a00      	cmp	r2, #0
 80060aa:	d1ef      	bne.n	800608c <quorem+0xe8>
 80060ac:	3c01      	subs	r4, #1
 80060ae:	e7ea      	b.n	8006086 <quorem+0xe2>
 80060b0:	2000      	movs	r0, #0
 80060b2:	e7ee      	b.n	8006092 <quorem+0xee>
 80060b4:	0000      	movs	r0, r0
	...

080060b8 <_dtoa_r>:
 80060b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060bc:	ed2d 8b02 	vpush	{d8}
 80060c0:	69c7      	ldr	r7, [r0, #28]
 80060c2:	b091      	sub	sp, #68	@ 0x44
 80060c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 80060c8:	ec55 4b10 	vmov	r4, r5, d0
 80060cc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80060ce:	9107      	str	r1, [sp, #28]
 80060d0:	4681      	mov	r9, r0
 80060d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80060d4:	930d      	str	r3, [sp, #52]	@ 0x34
 80060d6:	b97f      	cbnz	r7, 80060f8 <_dtoa_r+0x40>
 80060d8:	2010      	movs	r0, #16
 80060da:	f001 f9d3 	bl	8007484 <malloc>
 80060de:	4602      	mov	r2, r0
 80060e0:	f8c9 001c 	str.w	r0, [r9, #28]
 80060e4:	b920      	cbnz	r0, 80060f0 <_dtoa_r+0x38>
 80060e6:	4ba0      	ldr	r3, [pc, #640]	@ (8006368 <_dtoa_r+0x2b0>)
 80060e8:	21ef      	movs	r1, #239	@ 0xef
 80060ea:	48a0      	ldr	r0, [pc, #640]	@ (800636c <_dtoa_r+0x2b4>)
 80060ec:	f002 f8dc 	bl	80082a8 <__assert_func>
 80060f0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80060f4:	6007      	str	r7, [r0, #0]
 80060f6:	60c7      	str	r7, [r0, #12]
 80060f8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80060fc:	6819      	ldr	r1, [r3, #0]
 80060fe:	b159      	cbz	r1, 8006118 <_dtoa_r+0x60>
 8006100:	685a      	ldr	r2, [r3, #4]
 8006102:	604a      	str	r2, [r1, #4]
 8006104:	2301      	movs	r3, #1
 8006106:	4093      	lsls	r3, r2
 8006108:	608b      	str	r3, [r1, #8]
 800610a:	4648      	mov	r0, r9
 800610c:	f001 fb6e 	bl	80077ec <_Bfree>
 8006110:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8006114:	2200      	movs	r2, #0
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	1e2b      	subs	r3, r5, #0
 800611a:	bfbb      	ittet	lt
 800611c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006120:	9303      	strlt	r3, [sp, #12]
 8006122:	2300      	movge	r3, #0
 8006124:	2201      	movlt	r2, #1
 8006126:	bfac      	ite	ge
 8006128:	6033      	strge	r3, [r6, #0]
 800612a:	6032      	strlt	r2, [r6, #0]
 800612c:	4b90      	ldr	r3, [pc, #576]	@ (8006370 <_dtoa_r+0x2b8>)
 800612e:	9e03      	ldr	r6, [sp, #12]
 8006130:	43b3      	bics	r3, r6
 8006132:	d110      	bne.n	8006156 <_dtoa_r+0x9e>
 8006134:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006136:	f242 730f 	movw	r3, #9999	@ 0x270f
 800613a:	6013      	str	r3, [r2, #0]
 800613c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8006140:	4323      	orrs	r3, r4
 8006142:	f000 84de 	beq.w	8006b02 <_dtoa_r+0xa4a>
 8006146:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006148:	4f8a      	ldr	r7, [pc, #552]	@ (8006374 <_dtoa_r+0x2bc>)
 800614a:	2b00      	cmp	r3, #0
 800614c:	f000 84e0 	beq.w	8006b10 <_dtoa_r+0xa58>
 8006150:	1cfb      	adds	r3, r7, #3
 8006152:	f000 bcdb 	b.w	8006b0c <_dtoa_r+0xa54>
 8006156:	ed9d 8b02 	vldr	d8, [sp, #8]
 800615a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800615e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006162:	d10a      	bne.n	800617a <_dtoa_r+0xc2>
 8006164:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8006166:	2301      	movs	r3, #1
 8006168:	6013      	str	r3, [r2, #0]
 800616a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800616c:	b113      	cbz	r3, 8006174 <_dtoa_r+0xbc>
 800616e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006170:	4b81      	ldr	r3, [pc, #516]	@ (8006378 <_dtoa_r+0x2c0>)
 8006172:	6013      	str	r3, [r2, #0]
 8006174:	4f81      	ldr	r7, [pc, #516]	@ (800637c <_dtoa_r+0x2c4>)
 8006176:	f000 bccb 	b.w	8006b10 <_dtoa_r+0xa58>
 800617a:	aa0e      	add	r2, sp, #56	@ 0x38
 800617c:	a90f      	add	r1, sp, #60	@ 0x3c
 800617e:	4648      	mov	r0, r9
 8006180:	eeb0 0b48 	vmov.f64	d0, d8
 8006184:	f001 fed6 	bl	8007f34 <__d2b>
 8006188:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800618c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800618e:	9001      	str	r0, [sp, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d045      	beq.n	8006220 <_dtoa_r+0x168>
 8006194:	eeb0 7b48 	vmov.f64	d7, d8
 8006198:	ee18 1a90 	vmov	r1, s17
 800619c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80061a0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80061a4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80061a8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80061ac:	2500      	movs	r5, #0
 80061ae:	ee07 1a90 	vmov	s15, r1
 80061b2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80061b6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006350 <_dtoa_r+0x298>
 80061ba:	ee37 7b46 	vsub.f64	d7, d7, d6
 80061be:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8006358 <_dtoa_r+0x2a0>
 80061c2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80061c6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8006360 <_dtoa_r+0x2a8>
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80061d2:	eeb0 7b46 	vmov.f64	d7, d6
 80061d6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80061da:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80061de:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80061e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061e6:	ee16 8a90 	vmov	r8, s13
 80061ea:	d508      	bpl.n	80061fe <_dtoa_r+0x146>
 80061ec:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80061f0:	eeb4 6b47 	vcmp.f64	d6, d7
 80061f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80061f8:	bf18      	it	ne
 80061fa:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 80061fe:	f1b8 0f16 	cmp.w	r8, #22
 8006202:	d82b      	bhi.n	800625c <_dtoa_r+0x1a4>
 8006204:	495e      	ldr	r1, [pc, #376]	@ (8006380 <_dtoa_r+0x2c8>)
 8006206:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800620a:	ed91 7b00 	vldr	d7, [r1]
 800620e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8006212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006216:	d501      	bpl.n	800621c <_dtoa_r+0x164>
 8006218:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800621c:	2100      	movs	r1, #0
 800621e:	e01e      	b.n	800625e <_dtoa_r+0x1a6>
 8006220:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006222:	4413      	add	r3, r2
 8006224:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8006228:	2920      	cmp	r1, #32
 800622a:	bfc1      	itttt	gt
 800622c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8006230:	408e      	lslgt	r6, r1
 8006232:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8006236:	fa24 f101 	lsrgt.w	r1, r4, r1
 800623a:	bfd6      	itet	le
 800623c:	f1c1 0120 	rsble	r1, r1, #32
 8006240:	4331      	orrgt	r1, r6
 8006242:	fa04 f101 	lslle.w	r1, r4, r1
 8006246:	ee07 1a90 	vmov	s15, r1
 800624a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800624e:	3b01      	subs	r3, #1
 8006250:	ee17 1a90 	vmov	r1, s15
 8006254:	2501      	movs	r5, #1
 8006256:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800625a:	e7a8      	b.n	80061ae <_dtoa_r+0xf6>
 800625c:	2101      	movs	r1, #1
 800625e:	1ad2      	subs	r2, r2, r3
 8006260:	1e53      	subs	r3, r2, #1
 8006262:	9306      	str	r3, [sp, #24]
 8006264:	bf45      	ittet	mi
 8006266:	f1c2 0301 	rsbmi	r3, r2, #1
 800626a:	9305      	strmi	r3, [sp, #20]
 800626c:	2300      	movpl	r3, #0
 800626e:	2300      	movmi	r3, #0
 8006270:	bf4c      	ite	mi
 8006272:	9306      	strmi	r3, [sp, #24]
 8006274:	9305      	strpl	r3, [sp, #20]
 8006276:	f1b8 0f00 	cmp.w	r8, #0
 800627a:	910c      	str	r1, [sp, #48]	@ 0x30
 800627c:	db18      	blt.n	80062b0 <_dtoa_r+0x1f8>
 800627e:	9b06      	ldr	r3, [sp, #24]
 8006280:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8006284:	4443      	add	r3, r8
 8006286:	9306      	str	r3, [sp, #24]
 8006288:	2300      	movs	r3, #0
 800628a:	9a07      	ldr	r2, [sp, #28]
 800628c:	2a09      	cmp	r2, #9
 800628e:	d849      	bhi.n	8006324 <_dtoa_r+0x26c>
 8006290:	2a05      	cmp	r2, #5
 8006292:	bfc4      	itt	gt
 8006294:	3a04      	subgt	r2, #4
 8006296:	9207      	strgt	r2, [sp, #28]
 8006298:	9a07      	ldr	r2, [sp, #28]
 800629a:	f1a2 0202 	sub.w	r2, r2, #2
 800629e:	bfcc      	ite	gt
 80062a0:	2400      	movgt	r4, #0
 80062a2:	2401      	movle	r4, #1
 80062a4:	2a03      	cmp	r2, #3
 80062a6:	d848      	bhi.n	800633a <_dtoa_r+0x282>
 80062a8:	e8df f002 	tbb	[pc, r2]
 80062ac:	3a2c2e0b 	.word	0x3a2c2e0b
 80062b0:	9b05      	ldr	r3, [sp, #20]
 80062b2:	2200      	movs	r2, #0
 80062b4:	eba3 0308 	sub.w	r3, r3, r8
 80062b8:	9305      	str	r3, [sp, #20]
 80062ba:	920a      	str	r2, [sp, #40]	@ 0x28
 80062bc:	f1c8 0300 	rsb	r3, r8, #0
 80062c0:	e7e3      	b.n	800628a <_dtoa_r+0x1d2>
 80062c2:	2200      	movs	r2, #0
 80062c4:	9208      	str	r2, [sp, #32]
 80062c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062c8:	2a00      	cmp	r2, #0
 80062ca:	dc39      	bgt.n	8006340 <_dtoa_r+0x288>
 80062cc:	f04f 0b01 	mov.w	fp, #1
 80062d0:	46da      	mov	sl, fp
 80062d2:	465a      	mov	r2, fp
 80062d4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80062d8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80062dc:	2100      	movs	r1, #0
 80062de:	2004      	movs	r0, #4
 80062e0:	f100 0614 	add.w	r6, r0, #20
 80062e4:	4296      	cmp	r6, r2
 80062e6:	d930      	bls.n	800634a <_dtoa_r+0x292>
 80062e8:	6079      	str	r1, [r7, #4]
 80062ea:	4648      	mov	r0, r9
 80062ec:	9304      	str	r3, [sp, #16]
 80062ee:	f001 fa3d 	bl	800776c <_Balloc>
 80062f2:	9b04      	ldr	r3, [sp, #16]
 80062f4:	4607      	mov	r7, r0
 80062f6:	2800      	cmp	r0, #0
 80062f8:	d146      	bne.n	8006388 <_dtoa_r+0x2d0>
 80062fa:	4b22      	ldr	r3, [pc, #136]	@ (8006384 <_dtoa_r+0x2cc>)
 80062fc:	4602      	mov	r2, r0
 80062fe:	f240 11af 	movw	r1, #431	@ 0x1af
 8006302:	e6f2      	b.n	80060ea <_dtoa_r+0x32>
 8006304:	2201      	movs	r2, #1
 8006306:	e7dd      	b.n	80062c4 <_dtoa_r+0x20c>
 8006308:	2200      	movs	r2, #0
 800630a:	9208      	str	r2, [sp, #32]
 800630c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800630e:	eb08 0b02 	add.w	fp, r8, r2
 8006312:	f10b 0a01 	add.w	sl, fp, #1
 8006316:	4652      	mov	r2, sl
 8006318:	2a01      	cmp	r2, #1
 800631a:	bfb8      	it	lt
 800631c:	2201      	movlt	r2, #1
 800631e:	e7db      	b.n	80062d8 <_dtoa_r+0x220>
 8006320:	2201      	movs	r2, #1
 8006322:	e7f2      	b.n	800630a <_dtoa_r+0x252>
 8006324:	2401      	movs	r4, #1
 8006326:	2200      	movs	r2, #0
 8006328:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800632c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8006330:	2100      	movs	r1, #0
 8006332:	46da      	mov	sl, fp
 8006334:	2212      	movs	r2, #18
 8006336:	9109      	str	r1, [sp, #36]	@ 0x24
 8006338:	e7ce      	b.n	80062d8 <_dtoa_r+0x220>
 800633a:	2201      	movs	r2, #1
 800633c:	9208      	str	r2, [sp, #32]
 800633e:	e7f5      	b.n	800632c <_dtoa_r+0x274>
 8006340:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8006344:	46da      	mov	sl, fp
 8006346:	465a      	mov	r2, fp
 8006348:	e7c6      	b.n	80062d8 <_dtoa_r+0x220>
 800634a:	3101      	adds	r1, #1
 800634c:	0040      	lsls	r0, r0, #1
 800634e:	e7c7      	b.n	80062e0 <_dtoa_r+0x228>
 8006350:	636f4361 	.word	0x636f4361
 8006354:	3fd287a7 	.word	0x3fd287a7
 8006358:	8b60c8b3 	.word	0x8b60c8b3
 800635c:	3fc68a28 	.word	0x3fc68a28
 8006360:	509f79fb 	.word	0x509f79fb
 8006364:	3fd34413 	.word	0x3fd34413
 8006368:	08008b0e 	.word	0x08008b0e
 800636c:	08008b25 	.word	0x08008b25
 8006370:	7ff00000 	.word	0x7ff00000
 8006374:	08008b0a 	.word	0x08008b0a
 8006378:	0800897d 	.word	0x0800897d
 800637c:	0800897c 	.word	0x0800897c
 8006380:	08008c90 	.word	0x08008c90
 8006384:	08008b7d 	.word	0x08008b7d
 8006388:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800638c:	f1ba 0f0e 	cmp.w	sl, #14
 8006390:	6010      	str	r0, [r2, #0]
 8006392:	d86f      	bhi.n	8006474 <_dtoa_r+0x3bc>
 8006394:	2c00      	cmp	r4, #0
 8006396:	d06d      	beq.n	8006474 <_dtoa_r+0x3bc>
 8006398:	f1b8 0f00 	cmp.w	r8, #0
 800639c:	f340 80c2 	ble.w	8006524 <_dtoa_r+0x46c>
 80063a0:	4aca      	ldr	r2, [pc, #808]	@ (80066cc <_dtoa_r+0x614>)
 80063a2:	f008 010f 	and.w	r1, r8, #15
 80063a6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80063aa:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80063ae:	ed92 7b00 	vldr	d7, [r2]
 80063b2:	ea4f 1128 	mov.w	r1, r8, asr #4
 80063b6:	f000 80a9 	beq.w	800650c <_dtoa_r+0x454>
 80063ba:	4ac5      	ldr	r2, [pc, #788]	@ (80066d0 <_dtoa_r+0x618>)
 80063bc:	ed92 6b08 	vldr	d6, [r2, #32]
 80063c0:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80063c4:	ed8d 6b02 	vstr	d6, [sp, #8]
 80063c8:	f001 010f 	and.w	r1, r1, #15
 80063cc:	2203      	movs	r2, #3
 80063ce:	48c0      	ldr	r0, [pc, #768]	@ (80066d0 <_dtoa_r+0x618>)
 80063d0:	2900      	cmp	r1, #0
 80063d2:	f040 809d 	bne.w	8006510 <_dtoa_r+0x458>
 80063d6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80063da:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80063de:	ed8d 7b02 	vstr	d7, [sp, #8]
 80063e2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80063e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063e8:	2900      	cmp	r1, #0
 80063ea:	f000 80c1 	beq.w	8006570 <_dtoa_r+0x4b8>
 80063ee:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80063f2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80063f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063fa:	f140 80b9 	bpl.w	8006570 <_dtoa_r+0x4b8>
 80063fe:	f1ba 0f00 	cmp.w	sl, #0
 8006402:	f000 80b5 	beq.w	8006570 <_dtoa_r+0x4b8>
 8006406:	f1bb 0f00 	cmp.w	fp, #0
 800640a:	dd31      	ble.n	8006470 <_dtoa_r+0x3b8>
 800640c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8006410:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006414:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006418:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 800641c:	9104      	str	r1, [sp, #16]
 800641e:	3201      	adds	r2, #1
 8006420:	465c      	mov	r4, fp
 8006422:	ed9d 6b02 	vldr	d6, [sp, #8]
 8006426:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800642a:	ee07 2a90 	vmov	s15, r2
 800642e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006432:	eea7 5b06 	vfma.f64	d5, d7, d6
 8006436:	ee15 2a90 	vmov	r2, s11
 800643a:	ec51 0b15 	vmov	r0, r1, d5
 800643e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8006442:	2c00      	cmp	r4, #0
 8006444:	f040 8098 	bne.w	8006578 <_dtoa_r+0x4c0>
 8006448:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800644c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8006450:	ec41 0b17 	vmov	d7, r0, r1
 8006454:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006458:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800645c:	f300 8261 	bgt.w	8006922 <_dtoa_r+0x86a>
 8006460:	eeb1 7b47 	vneg.f64	d7, d7
 8006464:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800646c:	f100 80f5 	bmi.w	800665a <_dtoa_r+0x5a2>
 8006470:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006474:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8006476:	2a00      	cmp	r2, #0
 8006478:	f2c0 812c 	blt.w	80066d4 <_dtoa_r+0x61c>
 800647c:	f1b8 0f0e 	cmp.w	r8, #14
 8006480:	f300 8128 	bgt.w	80066d4 <_dtoa_r+0x61c>
 8006484:	4b91      	ldr	r3, [pc, #580]	@ (80066cc <_dtoa_r+0x614>)
 8006486:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800648a:	ed93 6b00 	vldr	d6, [r3]
 800648e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006490:	2b00      	cmp	r3, #0
 8006492:	da03      	bge.n	800649c <_dtoa_r+0x3e4>
 8006494:	f1ba 0f00 	cmp.w	sl, #0
 8006498:	f340 80d2 	ble.w	8006640 <_dtoa_r+0x588>
 800649c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 80064a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80064a4:	463e      	mov	r6, r7
 80064a6:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80064aa:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80064ae:	ee15 3a10 	vmov	r3, s10
 80064b2:	3330      	adds	r3, #48	@ 0x30
 80064b4:	f806 3b01 	strb.w	r3, [r6], #1
 80064b8:	1bf3      	subs	r3, r6, r7
 80064ba:	459a      	cmp	sl, r3
 80064bc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80064c0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80064c4:	f040 80f8 	bne.w	80066b8 <_dtoa_r+0x600>
 80064c8:	ee37 7b07 	vadd.f64	d7, d7, d7
 80064cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80064d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064d4:	f300 80dd 	bgt.w	8006692 <_dtoa_r+0x5da>
 80064d8:	eeb4 7b46 	vcmp.f64	d7, d6
 80064dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064e0:	d104      	bne.n	80064ec <_dtoa_r+0x434>
 80064e2:	ee15 3a10 	vmov	r3, s10
 80064e6:	07db      	lsls	r3, r3, #31
 80064e8:	f100 80d3 	bmi.w	8006692 <_dtoa_r+0x5da>
 80064ec:	9901      	ldr	r1, [sp, #4]
 80064ee:	4648      	mov	r0, r9
 80064f0:	f001 f97c 	bl	80077ec <_Bfree>
 80064f4:	2300      	movs	r3, #0
 80064f6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80064f8:	7033      	strb	r3, [r6, #0]
 80064fa:	f108 0301 	add.w	r3, r8, #1
 80064fe:	6013      	str	r3, [r2, #0]
 8006500:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006502:	2b00      	cmp	r3, #0
 8006504:	f000 8304 	beq.w	8006b10 <_dtoa_r+0xa58>
 8006508:	601e      	str	r6, [r3, #0]
 800650a:	e301      	b.n	8006b10 <_dtoa_r+0xa58>
 800650c:	2202      	movs	r2, #2
 800650e:	e75e      	b.n	80063ce <_dtoa_r+0x316>
 8006510:	07cc      	lsls	r4, r1, #31
 8006512:	d504      	bpl.n	800651e <_dtoa_r+0x466>
 8006514:	ed90 6b00 	vldr	d6, [r0]
 8006518:	3201      	adds	r2, #1
 800651a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800651e:	1049      	asrs	r1, r1, #1
 8006520:	3008      	adds	r0, #8
 8006522:	e755      	b.n	80063d0 <_dtoa_r+0x318>
 8006524:	d022      	beq.n	800656c <_dtoa_r+0x4b4>
 8006526:	f1c8 0100 	rsb	r1, r8, #0
 800652a:	4a68      	ldr	r2, [pc, #416]	@ (80066cc <_dtoa_r+0x614>)
 800652c:	f001 000f 	and.w	r0, r1, #15
 8006530:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8006534:	ed92 7b00 	vldr	d7, [r2]
 8006538:	ee28 7b07 	vmul.f64	d7, d8, d7
 800653c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006540:	4863      	ldr	r0, [pc, #396]	@ (80066d0 <_dtoa_r+0x618>)
 8006542:	1109      	asrs	r1, r1, #4
 8006544:	2400      	movs	r4, #0
 8006546:	2202      	movs	r2, #2
 8006548:	b929      	cbnz	r1, 8006556 <_dtoa_r+0x49e>
 800654a:	2c00      	cmp	r4, #0
 800654c:	f43f af49 	beq.w	80063e2 <_dtoa_r+0x32a>
 8006550:	ed8d 7b02 	vstr	d7, [sp, #8]
 8006554:	e745      	b.n	80063e2 <_dtoa_r+0x32a>
 8006556:	07ce      	lsls	r6, r1, #31
 8006558:	d505      	bpl.n	8006566 <_dtoa_r+0x4ae>
 800655a:	ed90 6b00 	vldr	d6, [r0]
 800655e:	3201      	adds	r2, #1
 8006560:	2401      	movs	r4, #1
 8006562:	ee27 7b06 	vmul.f64	d7, d7, d6
 8006566:	1049      	asrs	r1, r1, #1
 8006568:	3008      	adds	r0, #8
 800656a:	e7ed      	b.n	8006548 <_dtoa_r+0x490>
 800656c:	2202      	movs	r2, #2
 800656e:	e738      	b.n	80063e2 <_dtoa_r+0x32a>
 8006570:	f8cd 8010 	str.w	r8, [sp, #16]
 8006574:	4654      	mov	r4, sl
 8006576:	e754      	b.n	8006422 <_dtoa_r+0x36a>
 8006578:	4a54      	ldr	r2, [pc, #336]	@ (80066cc <_dtoa_r+0x614>)
 800657a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800657e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8006582:	9a08      	ldr	r2, [sp, #32]
 8006584:	ec41 0b17 	vmov	d7, r0, r1
 8006588:	443c      	add	r4, r7
 800658a:	b34a      	cbz	r2, 80065e0 <_dtoa_r+0x528>
 800658c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8006590:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8006594:	463e      	mov	r6, r7
 8006596:	ee83 5b04 	vdiv.f64	d5, d3, d4
 800659a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 800659e:	ee35 7b47 	vsub.f64	d7, d5, d7
 80065a2:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80065a6:	ee14 2a90 	vmov	r2, s9
 80065aa:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80065ae:	3230      	adds	r2, #48	@ 0x30
 80065b0:	ee36 6b45 	vsub.f64	d6, d6, d5
 80065b4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80065b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065bc:	f806 2b01 	strb.w	r2, [r6], #1
 80065c0:	d438      	bmi.n	8006634 <_dtoa_r+0x57c>
 80065c2:	ee32 5b46 	vsub.f64	d5, d2, d6
 80065c6:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80065ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065ce:	d462      	bmi.n	8006696 <_dtoa_r+0x5de>
 80065d0:	42a6      	cmp	r6, r4
 80065d2:	f43f af4d 	beq.w	8006470 <_dtoa_r+0x3b8>
 80065d6:	ee27 7b03 	vmul.f64	d7, d7, d3
 80065da:	ee26 6b03 	vmul.f64	d6, d6, d3
 80065de:	e7e0      	b.n	80065a2 <_dtoa_r+0x4ea>
 80065e0:	4621      	mov	r1, r4
 80065e2:	463e      	mov	r6, r7
 80065e4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80065e8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80065ec:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80065f0:	ee14 2a90 	vmov	r2, s9
 80065f4:	3230      	adds	r2, #48	@ 0x30
 80065f6:	f806 2b01 	strb.w	r2, [r6], #1
 80065fa:	42a6      	cmp	r6, r4
 80065fc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8006600:	ee36 6b45 	vsub.f64	d6, d6, d5
 8006604:	d119      	bne.n	800663a <_dtoa_r+0x582>
 8006606:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 800660a:	ee37 4b05 	vadd.f64	d4, d7, d5
 800660e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8006612:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006616:	dc3e      	bgt.n	8006696 <_dtoa_r+0x5de>
 8006618:	ee35 5b47 	vsub.f64	d5, d5, d7
 800661c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8006620:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006624:	f57f af24 	bpl.w	8006470 <_dtoa_r+0x3b8>
 8006628:	460e      	mov	r6, r1
 800662a:	3901      	subs	r1, #1
 800662c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006630:	2b30      	cmp	r3, #48	@ 0x30
 8006632:	d0f9      	beq.n	8006628 <_dtoa_r+0x570>
 8006634:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8006638:	e758      	b.n	80064ec <_dtoa_r+0x434>
 800663a:	ee26 6b03 	vmul.f64	d6, d6, d3
 800663e:	e7d5      	b.n	80065ec <_dtoa_r+0x534>
 8006640:	d10b      	bne.n	800665a <_dtoa_r+0x5a2>
 8006642:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8006646:	ee26 6b07 	vmul.f64	d6, d6, d7
 800664a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800664e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8006652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006656:	f2c0 8161 	blt.w	800691c <_dtoa_r+0x864>
 800665a:	2400      	movs	r4, #0
 800665c:	4625      	mov	r5, r4
 800665e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006660:	43db      	mvns	r3, r3
 8006662:	9304      	str	r3, [sp, #16]
 8006664:	463e      	mov	r6, r7
 8006666:	f04f 0800 	mov.w	r8, #0
 800666a:	4621      	mov	r1, r4
 800666c:	4648      	mov	r0, r9
 800666e:	f001 f8bd 	bl	80077ec <_Bfree>
 8006672:	2d00      	cmp	r5, #0
 8006674:	d0de      	beq.n	8006634 <_dtoa_r+0x57c>
 8006676:	f1b8 0f00 	cmp.w	r8, #0
 800667a:	d005      	beq.n	8006688 <_dtoa_r+0x5d0>
 800667c:	45a8      	cmp	r8, r5
 800667e:	d003      	beq.n	8006688 <_dtoa_r+0x5d0>
 8006680:	4641      	mov	r1, r8
 8006682:	4648      	mov	r0, r9
 8006684:	f001 f8b2 	bl	80077ec <_Bfree>
 8006688:	4629      	mov	r1, r5
 800668a:	4648      	mov	r0, r9
 800668c:	f001 f8ae 	bl	80077ec <_Bfree>
 8006690:	e7d0      	b.n	8006634 <_dtoa_r+0x57c>
 8006692:	f8cd 8010 	str.w	r8, [sp, #16]
 8006696:	4633      	mov	r3, r6
 8006698:	461e      	mov	r6, r3
 800669a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800669e:	2a39      	cmp	r2, #57	@ 0x39
 80066a0:	d106      	bne.n	80066b0 <_dtoa_r+0x5f8>
 80066a2:	429f      	cmp	r7, r3
 80066a4:	d1f8      	bne.n	8006698 <_dtoa_r+0x5e0>
 80066a6:	9a04      	ldr	r2, [sp, #16]
 80066a8:	3201      	adds	r2, #1
 80066aa:	9204      	str	r2, [sp, #16]
 80066ac:	2230      	movs	r2, #48	@ 0x30
 80066ae:	703a      	strb	r2, [r7, #0]
 80066b0:	781a      	ldrb	r2, [r3, #0]
 80066b2:	3201      	adds	r2, #1
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	e7bd      	b.n	8006634 <_dtoa_r+0x57c>
 80066b8:	ee27 7b04 	vmul.f64	d7, d7, d4
 80066bc:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80066c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066c4:	f47f aeef 	bne.w	80064a6 <_dtoa_r+0x3ee>
 80066c8:	e710      	b.n	80064ec <_dtoa_r+0x434>
 80066ca:	bf00      	nop
 80066cc:	08008c90 	.word	0x08008c90
 80066d0:	08008c68 	.word	0x08008c68
 80066d4:	9908      	ldr	r1, [sp, #32]
 80066d6:	2900      	cmp	r1, #0
 80066d8:	f000 80e3 	beq.w	80068a2 <_dtoa_r+0x7ea>
 80066dc:	9907      	ldr	r1, [sp, #28]
 80066de:	2901      	cmp	r1, #1
 80066e0:	f300 80c8 	bgt.w	8006874 <_dtoa_r+0x7bc>
 80066e4:	2d00      	cmp	r5, #0
 80066e6:	f000 80c1 	beq.w	800686c <_dtoa_r+0x7b4>
 80066ea:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80066ee:	9e05      	ldr	r6, [sp, #20]
 80066f0:	461c      	mov	r4, r3
 80066f2:	9304      	str	r3, [sp, #16]
 80066f4:	9b05      	ldr	r3, [sp, #20]
 80066f6:	4413      	add	r3, r2
 80066f8:	9305      	str	r3, [sp, #20]
 80066fa:	9b06      	ldr	r3, [sp, #24]
 80066fc:	2101      	movs	r1, #1
 80066fe:	4413      	add	r3, r2
 8006700:	4648      	mov	r0, r9
 8006702:	9306      	str	r3, [sp, #24]
 8006704:	f001 f970 	bl	80079e8 <__i2b>
 8006708:	9b04      	ldr	r3, [sp, #16]
 800670a:	4605      	mov	r5, r0
 800670c:	b166      	cbz	r6, 8006728 <_dtoa_r+0x670>
 800670e:	9a06      	ldr	r2, [sp, #24]
 8006710:	2a00      	cmp	r2, #0
 8006712:	dd09      	ble.n	8006728 <_dtoa_r+0x670>
 8006714:	42b2      	cmp	r2, r6
 8006716:	9905      	ldr	r1, [sp, #20]
 8006718:	bfa8      	it	ge
 800671a:	4632      	movge	r2, r6
 800671c:	1a89      	subs	r1, r1, r2
 800671e:	9105      	str	r1, [sp, #20]
 8006720:	9906      	ldr	r1, [sp, #24]
 8006722:	1ab6      	subs	r6, r6, r2
 8006724:	1a8a      	subs	r2, r1, r2
 8006726:	9206      	str	r2, [sp, #24]
 8006728:	b1fb      	cbz	r3, 800676a <_dtoa_r+0x6b2>
 800672a:	9a08      	ldr	r2, [sp, #32]
 800672c:	2a00      	cmp	r2, #0
 800672e:	f000 80bc 	beq.w	80068aa <_dtoa_r+0x7f2>
 8006732:	b19c      	cbz	r4, 800675c <_dtoa_r+0x6a4>
 8006734:	4629      	mov	r1, r5
 8006736:	4622      	mov	r2, r4
 8006738:	4648      	mov	r0, r9
 800673a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800673c:	f001 fa14 	bl	8007b68 <__pow5mult>
 8006740:	9a01      	ldr	r2, [sp, #4]
 8006742:	4601      	mov	r1, r0
 8006744:	4605      	mov	r5, r0
 8006746:	4648      	mov	r0, r9
 8006748:	f001 f964 	bl	8007a14 <__multiply>
 800674c:	9901      	ldr	r1, [sp, #4]
 800674e:	9004      	str	r0, [sp, #16]
 8006750:	4648      	mov	r0, r9
 8006752:	f001 f84b 	bl	80077ec <_Bfree>
 8006756:	9a04      	ldr	r2, [sp, #16]
 8006758:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800675a:	9201      	str	r2, [sp, #4]
 800675c:	1b1a      	subs	r2, r3, r4
 800675e:	d004      	beq.n	800676a <_dtoa_r+0x6b2>
 8006760:	9901      	ldr	r1, [sp, #4]
 8006762:	4648      	mov	r0, r9
 8006764:	f001 fa00 	bl	8007b68 <__pow5mult>
 8006768:	9001      	str	r0, [sp, #4]
 800676a:	2101      	movs	r1, #1
 800676c:	4648      	mov	r0, r9
 800676e:	f001 f93b 	bl	80079e8 <__i2b>
 8006772:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006774:	4604      	mov	r4, r0
 8006776:	2b00      	cmp	r3, #0
 8006778:	f000 81d0 	beq.w	8006b1c <_dtoa_r+0xa64>
 800677c:	461a      	mov	r2, r3
 800677e:	4601      	mov	r1, r0
 8006780:	4648      	mov	r0, r9
 8006782:	f001 f9f1 	bl	8007b68 <__pow5mult>
 8006786:	9b07      	ldr	r3, [sp, #28]
 8006788:	2b01      	cmp	r3, #1
 800678a:	4604      	mov	r4, r0
 800678c:	f300 8095 	bgt.w	80068ba <_dtoa_r+0x802>
 8006790:	9b02      	ldr	r3, [sp, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	f040 808b 	bne.w	80068ae <_dtoa_r+0x7f6>
 8006798:	9b03      	ldr	r3, [sp, #12]
 800679a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800679e:	2a00      	cmp	r2, #0
 80067a0:	f040 8087 	bne.w	80068b2 <_dtoa_r+0x7fa>
 80067a4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80067a8:	0d12      	lsrs	r2, r2, #20
 80067aa:	0512      	lsls	r2, r2, #20
 80067ac:	2a00      	cmp	r2, #0
 80067ae:	f000 8082 	beq.w	80068b6 <_dtoa_r+0x7fe>
 80067b2:	9b05      	ldr	r3, [sp, #20]
 80067b4:	3301      	adds	r3, #1
 80067b6:	9305      	str	r3, [sp, #20]
 80067b8:	9b06      	ldr	r3, [sp, #24]
 80067ba:	3301      	adds	r3, #1
 80067bc:	9306      	str	r3, [sp, #24]
 80067be:	2301      	movs	r3, #1
 80067c0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80067c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	f000 81af 	beq.w	8006b28 <_dtoa_r+0xa70>
 80067ca:	6922      	ldr	r2, [r4, #16]
 80067cc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80067d0:	6910      	ldr	r0, [r2, #16]
 80067d2:	f001 f8bd 	bl	8007950 <__hi0bits>
 80067d6:	f1c0 0020 	rsb	r0, r0, #32
 80067da:	9b06      	ldr	r3, [sp, #24]
 80067dc:	4418      	add	r0, r3
 80067de:	f010 001f 	ands.w	r0, r0, #31
 80067e2:	d076      	beq.n	80068d2 <_dtoa_r+0x81a>
 80067e4:	f1c0 0220 	rsb	r2, r0, #32
 80067e8:	2a04      	cmp	r2, #4
 80067ea:	dd69      	ble.n	80068c0 <_dtoa_r+0x808>
 80067ec:	9b05      	ldr	r3, [sp, #20]
 80067ee:	f1c0 001c 	rsb	r0, r0, #28
 80067f2:	4403      	add	r3, r0
 80067f4:	9305      	str	r3, [sp, #20]
 80067f6:	9b06      	ldr	r3, [sp, #24]
 80067f8:	4406      	add	r6, r0
 80067fa:	4403      	add	r3, r0
 80067fc:	9306      	str	r3, [sp, #24]
 80067fe:	9b05      	ldr	r3, [sp, #20]
 8006800:	2b00      	cmp	r3, #0
 8006802:	dd05      	ble.n	8006810 <_dtoa_r+0x758>
 8006804:	9901      	ldr	r1, [sp, #4]
 8006806:	461a      	mov	r2, r3
 8006808:	4648      	mov	r0, r9
 800680a:	f001 fa07 	bl	8007c1c <__lshift>
 800680e:	9001      	str	r0, [sp, #4]
 8006810:	9b06      	ldr	r3, [sp, #24]
 8006812:	2b00      	cmp	r3, #0
 8006814:	dd05      	ble.n	8006822 <_dtoa_r+0x76a>
 8006816:	4621      	mov	r1, r4
 8006818:	461a      	mov	r2, r3
 800681a:	4648      	mov	r0, r9
 800681c:	f001 f9fe 	bl	8007c1c <__lshift>
 8006820:	4604      	mov	r4, r0
 8006822:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006824:	2b00      	cmp	r3, #0
 8006826:	d056      	beq.n	80068d6 <_dtoa_r+0x81e>
 8006828:	9801      	ldr	r0, [sp, #4]
 800682a:	4621      	mov	r1, r4
 800682c:	f001 fa62 	bl	8007cf4 <__mcmp>
 8006830:	2800      	cmp	r0, #0
 8006832:	da50      	bge.n	80068d6 <_dtoa_r+0x81e>
 8006834:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8006838:	9304      	str	r3, [sp, #16]
 800683a:	9901      	ldr	r1, [sp, #4]
 800683c:	2300      	movs	r3, #0
 800683e:	220a      	movs	r2, #10
 8006840:	4648      	mov	r0, r9
 8006842:	f000 fff5 	bl	8007830 <__multadd>
 8006846:	9b08      	ldr	r3, [sp, #32]
 8006848:	9001      	str	r0, [sp, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	f000 816e 	beq.w	8006b2c <_dtoa_r+0xa74>
 8006850:	4629      	mov	r1, r5
 8006852:	2300      	movs	r3, #0
 8006854:	220a      	movs	r2, #10
 8006856:	4648      	mov	r0, r9
 8006858:	f000 ffea 	bl	8007830 <__multadd>
 800685c:	f1bb 0f00 	cmp.w	fp, #0
 8006860:	4605      	mov	r5, r0
 8006862:	dc64      	bgt.n	800692e <_dtoa_r+0x876>
 8006864:	9b07      	ldr	r3, [sp, #28]
 8006866:	2b02      	cmp	r3, #2
 8006868:	dc3e      	bgt.n	80068e8 <_dtoa_r+0x830>
 800686a:	e060      	b.n	800692e <_dtoa_r+0x876>
 800686c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800686e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8006872:	e73c      	b.n	80066ee <_dtoa_r+0x636>
 8006874:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8006878:	42a3      	cmp	r3, r4
 800687a:	bfbf      	itttt	lt
 800687c:	1ae2      	sublt	r2, r4, r3
 800687e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006880:	189b      	addlt	r3, r3, r2
 8006882:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8006884:	bfae      	itee	ge
 8006886:	1b1c      	subge	r4, r3, r4
 8006888:	4623      	movlt	r3, r4
 800688a:	2400      	movlt	r4, #0
 800688c:	f1ba 0f00 	cmp.w	sl, #0
 8006890:	bfb5      	itete	lt
 8006892:	9a05      	ldrlt	r2, [sp, #20]
 8006894:	9e05      	ldrge	r6, [sp, #20]
 8006896:	eba2 060a 	sublt.w	r6, r2, sl
 800689a:	4652      	movge	r2, sl
 800689c:	bfb8      	it	lt
 800689e:	2200      	movlt	r2, #0
 80068a0:	e727      	b.n	80066f2 <_dtoa_r+0x63a>
 80068a2:	9e05      	ldr	r6, [sp, #20]
 80068a4:	9d08      	ldr	r5, [sp, #32]
 80068a6:	461c      	mov	r4, r3
 80068a8:	e730      	b.n	800670c <_dtoa_r+0x654>
 80068aa:	461a      	mov	r2, r3
 80068ac:	e758      	b.n	8006760 <_dtoa_r+0x6a8>
 80068ae:	2300      	movs	r3, #0
 80068b0:	e786      	b.n	80067c0 <_dtoa_r+0x708>
 80068b2:	9b02      	ldr	r3, [sp, #8]
 80068b4:	e784      	b.n	80067c0 <_dtoa_r+0x708>
 80068b6:	920b      	str	r2, [sp, #44]	@ 0x2c
 80068b8:	e783      	b.n	80067c2 <_dtoa_r+0x70a>
 80068ba:	2300      	movs	r3, #0
 80068bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068be:	e784      	b.n	80067ca <_dtoa_r+0x712>
 80068c0:	d09d      	beq.n	80067fe <_dtoa_r+0x746>
 80068c2:	9b05      	ldr	r3, [sp, #20]
 80068c4:	321c      	adds	r2, #28
 80068c6:	4413      	add	r3, r2
 80068c8:	9305      	str	r3, [sp, #20]
 80068ca:	9b06      	ldr	r3, [sp, #24]
 80068cc:	4416      	add	r6, r2
 80068ce:	4413      	add	r3, r2
 80068d0:	e794      	b.n	80067fc <_dtoa_r+0x744>
 80068d2:	4602      	mov	r2, r0
 80068d4:	e7f5      	b.n	80068c2 <_dtoa_r+0x80a>
 80068d6:	f1ba 0f00 	cmp.w	sl, #0
 80068da:	f8cd 8010 	str.w	r8, [sp, #16]
 80068de:	46d3      	mov	fp, sl
 80068e0:	dc21      	bgt.n	8006926 <_dtoa_r+0x86e>
 80068e2:	9b07      	ldr	r3, [sp, #28]
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	dd1e      	ble.n	8006926 <_dtoa_r+0x86e>
 80068e8:	f1bb 0f00 	cmp.w	fp, #0
 80068ec:	f47f aeb7 	bne.w	800665e <_dtoa_r+0x5a6>
 80068f0:	4621      	mov	r1, r4
 80068f2:	465b      	mov	r3, fp
 80068f4:	2205      	movs	r2, #5
 80068f6:	4648      	mov	r0, r9
 80068f8:	f000 ff9a 	bl	8007830 <__multadd>
 80068fc:	4601      	mov	r1, r0
 80068fe:	4604      	mov	r4, r0
 8006900:	9801      	ldr	r0, [sp, #4]
 8006902:	f001 f9f7 	bl	8007cf4 <__mcmp>
 8006906:	2800      	cmp	r0, #0
 8006908:	f77f aea9 	ble.w	800665e <_dtoa_r+0x5a6>
 800690c:	463e      	mov	r6, r7
 800690e:	2331      	movs	r3, #49	@ 0x31
 8006910:	f806 3b01 	strb.w	r3, [r6], #1
 8006914:	9b04      	ldr	r3, [sp, #16]
 8006916:	3301      	adds	r3, #1
 8006918:	9304      	str	r3, [sp, #16]
 800691a:	e6a4      	b.n	8006666 <_dtoa_r+0x5ae>
 800691c:	f8cd 8010 	str.w	r8, [sp, #16]
 8006920:	4654      	mov	r4, sl
 8006922:	4625      	mov	r5, r4
 8006924:	e7f2      	b.n	800690c <_dtoa_r+0x854>
 8006926:	9b08      	ldr	r3, [sp, #32]
 8006928:	2b00      	cmp	r3, #0
 800692a:	f000 8103 	beq.w	8006b34 <_dtoa_r+0xa7c>
 800692e:	2e00      	cmp	r6, #0
 8006930:	dd05      	ble.n	800693e <_dtoa_r+0x886>
 8006932:	4629      	mov	r1, r5
 8006934:	4632      	mov	r2, r6
 8006936:	4648      	mov	r0, r9
 8006938:	f001 f970 	bl	8007c1c <__lshift>
 800693c:	4605      	mov	r5, r0
 800693e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006940:	2b00      	cmp	r3, #0
 8006942:	d058      	beq.n	80069f6 <_dtoa_r+0x93e>
 8006944:	6869      	ldr	r1, [r5, #4]
 8006946:	4648      	mov	r0, r9
 8006948:	f000 ff10 	bl	800776c <_Balloc>
 800694c:	4606      	mov	r6, r0
 800694e:	b928      	cbnz	r0, 800695c <_dtoa_r+0x8a4>
 8006950:	4b82      	ldr	r3, [pc, #520]	@ (8006b5c <_dtoa_r+0xaa4>)
 8006952:	4602      	mov	r2, r0
 8006954:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006958:	f7ff bbc7 	b.w	80060ea <_dtoa_r+0x32>
 800695c:	692a      	ldr	r2, [r5, #16]
 800695e:	3202      	adds	r2, #2
 8006960:	0092      	lsls	r2, r2, #2
 8006962:	f105 010c 	add.w	r1, r5, #12
 8006966:	300c      	adds	r0, #12
 8006968:	f7ff faff 	bl	8005f6a <memcpy>
 800696c:	2201      	movs	r2, #1
 800696e:	4631      	mov	r1, r6
 8006970:	4648      	mov	r0, r9
 8006972:	f001 f953 	bl	8007c1c <__lshift>
 8006976:	1c7b      	adds	r3, r7, #1
 8006978:	9305      	str	r3, [sp, #20]
 800697a:	eb07 030b 	add.w	r3, r7, fp
 800697e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006980:	9b02      	ldr	r3, [sp, #8]
 8006982:	f003 0301 	and.w	r3, r3, #1
 8006986:	46a8      	mov	r8, r5
 8006988:	9308      	str	r3, [sp, #32]
 800698a:	4605      	mov	r5, r0
 800698c:	9b05      	ldr	r3, [sp, #20]
 800698e:	9801      	ldr	r0, [sp, #4]
 8006990:	4621      	mov	r1, r4
 8006992:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8006996:	f7ff fb05 	bl	8005fa4 <quorem>
 800699a:	4641      	mov	r1, r8
 800699c:	9002      	str	r0, [sp, #8]
 800699e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80069a2:	9801      	ldr	r0, [sp, #4]
 80069a4:	f001 f9a6 	bl	8007cf4 <__mcmp>
 80069a8:	462a      	mov	r2, r5
 80069aa:	9006      	str	r0, [sp, #24]
 80069ac:	4621      	mov	r1, r4
 80069ae:	4648      	mov	r0, r9
 80069b0:	f001 f9bc 	bl	8007d2c <__mdiff>
 80069b4:	68c2      	ldr	r2, [r0, #12]
 80069b6:	4606      	mov	r6, r0
 80069b8:	b9fa      	cbnz	r2, 80069fa <_dtoa_r+0x942>
 80069ba:	4601      	mov	r1, r0
 80069bc:	9801      	ldr	r0, [sp, #4]
 80069be:	f001 f999 	bl	8007cf4 <__mcmp>
 80069c2:	4602      	mov	r2, r0
 80069c4:	4631      	mov	r1, r6
 80069c6:	4648      	mov	r0, r9
 80069c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80069ca:	f000 ff0f 	bl	80077ec <_Bfree>
 80069ce:	9b07      	ldr	r3, [sp, #28]
 80069d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069d2:	9e05      	ldr	r6, [sp, #20]
 80069d4:	ea43 0102 	orr.w	r1, r3, r2
 80069d8:	9b08      	ldr	r3, [sp, #32]
 80069da:	4319      	orrs	r1, r3
 80069dc:	d10f      	bne.n	80069fe <_dtoa_r+0x946>
 80069de:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80069e2:	d028      	beq.n	8006a36 <_dtoa_r+0x97e>
 80069e4:	9b06      	ldr	r3, [sp, #24]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	dd02      	ble.n	80069f0 <_dtoa_r+0x938>
 80069ea:	9b02      	ldr	r3, [sp, #8]
 80069ec:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 80069f0:	f88b a000 	strb.w	sl, [fp]
 80069f4:	e639      	b.n	800666a <_dtoa_r+0x5b2>
 80069f6:	4628      	mov	r0, r5
 80069f8:	e7bd      	b.n	8006976 <_dtoa_r+0x8be>
 80069fa:	2201      	movs	r2, #1
 80069fc:	e7e2      	b.n	80069c4 <_dtoa_r+0x90c>
 80069fe:	9b06      	ldr	r3, [sp, #24]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	db04      	blt.n	8006a0e <_dtoa_r+0x956>
 8006a04:	9907      	ldr	r1, [sp, #28]
 8006a06:	430b      	orrs	r3, r1
 8006a08:	9908      	ldr	r1, [sp, #32]
 8006a0a:	430b      	orrs	r3, r1
 8006a0c:	d120      	bne.n	8006a50 <_dtoa_r+0x998>
 8006a0e:	2a00      	cmp	r2, #0
 8006a10:	ddee      	ble.n	80069f0 <_dtoa_r+0x938>
 8006a12:	9901      	ldr	r1, [sp, #4]
 8006a14:	2201      	movs	r2, #1
 8006a16:	4648      	mov	r0, r9
 8006a18:	f001 f900 	bl	8007c1c <__lshift>
 8006a1c:	4621      	mov	r1, r4
 8006a1e:	9001      	str	r0, [sp, #4]
 8006a20:	f001 f968 	bl	8007cf4 <__mcmp>
 8006a24:	2800      	cmp	r0, #0
 8006a26:	dc03      	bgt.n	8006a30 <_dtoa_r+0x978>
 8006a28:	d1e2      	bne.n	80069f0 <_dtoa_r+0x938>
 8006a2a:	f01a 0f01 	tst.w	sl, #1
 8006a2e:	d0df      	beq.n	80069f0 <_dtoa_r+0x938>
 8006a30:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006a34:	d1d9      	bne.n	80069ea <_dtoa_r+0x932>
 8006a36:	2339      	movs	r3, #57	@ 0x39
 8006a38:	f88b 3000 	strb.w	r3, [fp]
 8006a3c:	4633      	mov	r3, r6
 8006a3e:	461e      	mov	r6, r3
 8006a40:	3b01      	subs	r3, #1
 8006a42:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006a46:	2a39      	cmp	r2, #57	@ 0x39
 8006a48:	d053      	beq.n	8006af2 <_dtoa_r+0xa3a>
 8006a4a:	3201      	adds	r2, #1
 8006a4c:	701a      	strb	r2, [r3, #0]
 8006a4e:	e60c      	b.n	800666a <_dtoa_r+0x5b2>
 8006a50:	2a00      	cmp	r2, #0
 8006a52:	dd07      	ble.n	8006a64 <_dtoa_r+0x9ac>
 8006a54:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8006a58:	d0ed      	beq.n	8006a36 <_dtoa_r+0x97e>
 8006a5a:	f10a 0301 	add.w	r3, sl, #1
 8006a5e:	f88b 3000 	strb.w	r3, [fp]
 8006a62:	e602      	b.n	800666a <_dtoa_r+0x5b2>
 8006a64:	9b05      	ldr	r3, [sp, #20]
 8006a66:	9a05      	ldr	r2, [sp, #20]
 8006a68:	f803 ac01 	strb.w	sl, [r3, #-1]
 8006a6c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d029      	beq.n	8006ac6 <_dtoa_r+0xa0e>
 8006a72:	9901      	ldr	r1, [sp, #4]
 8006a74:	2300      	movs	r3, #0
 8006a76:	220a      	movs	r2, #10
 8006a78:	4648      	mov	r0, r9
 8006a7a:	f000 fed9 	bl	8007830 <__multadd>
 8006a7e:	45a8      	cmp	r8, r5
 8006a80:	9001      	str	r0, [sp, #4]
 8006a82:	f04f 0300 	mov.w	r3, #0
 8006a86:	f04f 020a 	mov.w	r2, #10
 8006a8a:	4641      	mov	r1, r8
 8006a8c:	4648      	mov	r0, r9
 8006a8e:	d107      	bne.n	8006aa0 <_dtoa_r+0x9e8>
 8006a90:	f000 fece 	bl	8007830 <__multadd>
 8006a94:	4680      	mov	r8, r0
 8006a96:	4605      	mov	r5, r0
 8006a98:	9b05      	ldr	r3, [sp, #20]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	9305      	str	r3, [sp, #20]
 8006a9e:	e775      	b.n	800698c <_dtoa_r+0x8d4>
 8006aa0:	f000 fec6 	bl	8007830 <__multadd>
 8006aa4:	4629      	mov	r1, r5
 8006aa6:	4680      	mov	r8, r0
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	220a      	movs	r2, #10
 8006aac:	4648      	mov	r0, r9
 8006aae:	f000 febf 	bl	8007830 <__multadd>
 8006ab2:	4605      	mov	r5, r0
 8006ab4:	e7f0      	b.n	8006a98 <_dtoa_r+0x9e0>
 8006ab6:	f1bb 0f00 	cmp.w	fp, #0
 8006aba:	bfcc      	ite	gt
 8006abc:	465e      	movgt	r6, fp
 8006abe:	2601      	movle	r6, #1
 8006ac0:	443e      	add	r6, r7
 8006ac2:	f04f 0800 	mov.w	r8, #0
 8006ac6:	9901      	ldr	r1, [sp, #4]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	4648      	mov	r0, r9
 8006acc:	f001 f8a6 	bl	8007c1c <__lshift>
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	9001      	str	r0, [sp, #4]
 8006ad4:	f001 f90e 	bl	8007cf4 <__mcmp>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	dcaf      	bgt.n	8006a3c <_dtoa_r+0x984>
 8006adc:	d102      	bne.n	8006ae4 <_dtoa_r+0xa2c>
 8006ade:	f01a 0f01 	tst.w	sl, #1
 8006ae2:	d1ab      	bne.n	8006a3c <_dtoa_r+0x984>
 8006ae4:	4633      	mov	r3, r6
 8006ae6:	461e      	mov	r6, r3
 8006ae8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006aec:	2a30      	cmp	r2, #48	@ 0x30
 8006aee:	d0fa      	beq.n	8006ae6 <_dtoa_r+0xa2e>
 8006af0:	e5bb      	b.n	800666a <_dtoa_r+0x5b2>
 8006af2:	429f      	cmp	r7, r3
 8006af4:	d1a3      	bne.n	8006a3e <_dtoa_r+0x986>
 8006af6:	9b04      	ldr	r3, [sp, #16]
 8006af8:	3301      	adds	r3, #1
 8006afa:	9304      	str	r3, [sp, #16]
 8006afc:	2331      	movs	r3, #49	@ 0x31
 8006afe:	703b      	strb	r3, [r7, #0]
 8006b00:	e5b3      	b.n	800666a <_dtoa_r+0x5b2>
 8006b02:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006b04:	4f16      	ldr	r7, [pc, #88]	@ (8006b60 <_dtoa_r+0xaa8>)
 8006b06:	b11b      	cbz	r3, 8006b10 <_dtoa_r+0xa58>
 8006b08:	f107 0308 	add.w	r3, r7, #8
 8006b0c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8006b0e:	6013      	str	r3, [r2, #0]
 8006b10:	4638      	mov	r0, r7
 8006b12:	b011      	add	sp, #68	@ 0x44
 8006b14:	ecbd 8b02 	vpop	{d8}
 8006b18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b1c:	9b07      	ldr	r3, [sp, #28]
 8006b1e:	2b01      	cmp	r3, #1
 8006b20:	f77f ae36 	ble.w	8006790 <_dtoa_r+0x6d8>
 8006b24:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b26:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006b28:	2001      	movs	r0, #1
 8006b2a:	e656      	b.n	80067da <_dtoa_r+0x722>
 8006b2c:	f1bb 0f00 	cmp.w	fp, #0
 8006b30:	f77f aed7 	ble.w	80068e2 <_dtoa_r+0x82a>
 8006b34:	463e      	mov	r6, r7
 8006b36:	9801      	ldr	r0, [sp, #4]
 8006b38:	4621      	mov	r1, r4
 8006b3a:	f7ff fa33 	bl	8005fa4 <quorem>
 8006b3e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8006b42:	f806 ab01 	strb.w	sl, [r6], #1
 8006b46:	1bf2      	subs	r2, r6, r7
 8006b48:	4593      	cmp	fp, r2
 8006b4a:	ddb4      	ble.n	8006ab6 <_dtoa_r+0x9fe>
 8006b4c:	9901      	ldr	r1, [sp, #4]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	220a      	movs	r2, #10
 8006b52:	4648      	mov	r0, r9
 8006b54:	f000 fe6c 	bl	8007830 <__multadd>
 8006b58:	9001      	str	r0, [sp, #4]
 8006b5a:	e7ec      	b.n	8006b36 <_dtoa_r+0xa7e>
 8006b5c:	08008b7d 	.word	0x08008b7d
 8006b60:	08008b01 	.word	0x08008b01

08006b64 <rshift>:
 8006b64:	6903      	ldr	r3, [r0, #16]
 8006b66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8006b6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006b6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8006b72:	f100 0414 	add.w	r4, r0, #20
 8006b76:	dd45      	ble.n	8006c04 <rshift+0xa0>
 8006b78:	f011 011f 	ands.w	r1, r1, #31
 8006b7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8006b80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8006b84:	d10c      	bne.n	8006ba0 <rshift+0x3c>
 8006b86:	f100 0710 	add.w	r7, r0, #16
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	42b1      	cmp	r1, r6
 8006b8e:	d334      	bcc.n	8006bfa <rshift+0x96>
 8006b90:	1a9b      	subs	r3, r3, r2
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	1eea      	subs	r2, r5, #3
 8006b96:	4296      	cmp	r6, r2
 8006b98:	bf38      	it	cc
 8006b9a:	2300      	movcc	r3, #0
 8006b9c:	4423      	add	r3, r4
 8006b9e:	e015      	b.n	8006bcc <rshift+0x68>
 8006ba0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8006ba4:	f1c1 0820 	rsb	r8, r1, #32
 8006ba8:	40cf      	lsrs	r7, r1
 8006baa:	f105 0e04 	add.w	lr, r5, #4
 8006bae:	46a1      	mov	r9, r4
 8006bb0:	4576      	cmp	r6, lr
 8006bb2:	46f4      	mov	ip, lr
 8006bb4:	d815      	bhi.n	8006be2 <rshift+0x7e>
 8006bb6:	1a9a      	subs	r2, r3, r2
 8006bb8:	0092      	lsls	r2, r2, #2
 8006bba:	3a04      	subs	r2, #4
 8006bbc:	3501      	adds	r5, #1
 8006bbe:	42ae      	cmp	r6, r5
 8006bc0:	bf38      	it	cc
 8006bc2:	2200      	movcc	r2, #0
 8006bc4:	18a3      	adds	r3, r4, r2
 8006bc6:	50a7      	str	r7, [r4, r2]
 8006bc8:	b107      	cbz	r7, 8006bcc <rshift+0x68>
 8006bca:	3304      	adds	r3, #4
 8006bcc:	1b1a      	subs	r2, r3, r4
 8006bce:	42a3      	cmp	r3, r4
 8006bd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8006bd4:	bf08      	it	eq
 8006bd6:	2300      	moveq	r3, #0
 8006bd8:	6102      	str	r2, [r0, #16]
 8006bda:	bf08      	it	eq
 8006bdc:	6143      	streq	r3, [r0, #20]
 8006bde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006be2:	f8dc c000 	ldr.w	ip, [ip]
 8006be6:	fa0c fc08 	lsl.w	ip, ip, r8
 8006bea:	ea4c 0707 	orr.w	r7, ip, r7
 8006bee:	f849 7b04 	str.w	r7, [r9], #4
 8006bf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006bf6:	40cf      	lsrs	r7, r1
 8006bf8:	e7da      	b.n	8006bb0 <rshift+0x4c>
 8006bfa:	f851 cb04 	ldr.w	ip, [r1], #4
 8006bfe:	f847 cf04 	str.w	ip, [r7, #4]!
 8006c02:	e7c3      	b.n	8006b8c <rshift+0x28>
 8006c04:	4623      	mov	r3, r4
 8006c06:	e7e1      	b.n	8006bcc <rshift+0x68>

08006c08 <__hexdig_fun>:
 8006c08:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8006c0c:	2b09      	cmp	r3, #9
 8006c0e:	d802      	bhi.n	8006c16 <__hexdig_fun+0xe>
 8006c10:	3820      	subs	r0, #32
 8006c12:	b2c0      	uxtb	r0, r0
 8006c14:	4770      	bx	lr
 8006c16:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8006c1a:	2b05      	cmp	r3, #5
 8006c1c:	d801      	bhi.n	8006c22 <__hexdig_fun+0x1a>
 8006c1e:	3847      	subs	r0, #71	@ 0x47
 8006c20:	e7f7      	b.n	8006c12 <__hexdig_fun+0xa>
 8006c22:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8006c26:	2b05      	cmp	r3, #5
 8006c28:	d801      	bhi.n	8006c2e <__hexdig_fun+0x26>
 8006c2a:	3827      	subs	r0, #39	@ 0x27
 8006c2c:	e7f1      	b.n	8006c12 <__hexdig_fun+0xa>
 8006c2e:	2000      	movs	r0, #0
 8006c30:	4770      	bx	lr
	...

08006c34 <__gethex>:
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	b085      	sub	sp, #20
 8006c3a:	468a      	mov	sl, r1
 8006c3c:	9302      	str	r3, [sp, #8]
 8006c3e:	680b      	ldr	r3, [r1, #0]
 8006c40:	9001      	str	r0, [sp, #4]
 8006c42:	4690      	mov	r8, r2
 8006c44:	1c9c      	adds	r4, r3, #2
 8006c46:	46a1      	mov	r9, r4
 8006c48:	f814 0b01 	ldrb.w	r0, [r4], #1
 8006c4c:	2830      	cmp	r0, #48	@ 0x30
 8006c4e:	d0fa      	beq.n	8006c46 <__gethex+0x12>
 8006c50:	eba9 0303 	sub.w	r3, r9, r3
 8006c54:	f1a3 0b02 	sub.w	fp, r3, #2
 8006c58:	f7ff ffd6 	bl	8006c08 <__hexdig_fun>
 8006c5c:	4605      	mov	r5, r0
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	d168      	bne.n	8006d34 <__gethex+0x100>
 8006c62:	49a0      	ldr	r1, [pc, #640]	@ (8006ee4 <__gethex+0x2b0>)
 8006c64:	2201      	movs	r2, #1
 8006c66:	4648      	mov	r0, r9
 8006c68:	f7ff f934 	bl	8005ed4 <strncmp>
 8006c6c:	4607      	mov	r7, r0
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d167      	bne.n	8006d42 <__gethex+0x10e>
 8006c72:	f899 0001 	ldrb.w	r0, [r9, #1]
 8006c76:	4626      	mov	r6, r4
 8006c78:	f7ff ffc6 	bl	8006c08 <__hexdig_fun>
 8006c7c:	2800      	cmp	r0, #0
 8006c7e:	d062      	beq.n	8006d46 <__gethex+0x112>
 8006c80:	4623      	mov	r3, r4
 8006c82:	7818      	ldrb	r0, [r3, #0]
 8006c84:	2830      	cmp	r0, #48	@ 0x30
 8006c86:	4699      	mov	r9, r3
 8006c88:	f103 0301 	add.w	r3, r3, #1
 8006c8c:	d0f9      	beq.n	8006c82 <__gethex+0x4e>
 8006c8e:	f7ff ffbb 	bl	8006c08 <__hexdig_fun>
 8006c92:	fab0 f580 	clz	r5, r0
 8006c96:	096d      	lsrs	r5, r5, #5
 8006c98:	f04f 0b01 	mov.w	fp, #1
 8006c9c:	464a      	mov	r2, r9
 8006c9e:	4616      	mov	r6, r2
 8006ca0:	3201      	adds	r2, #1
 8006ca2:	7830      	ldrb	r0, [r6, #0]
 8006ca4:	f7ff ffb0 	bl	8006c08 <__hexdig_fun>
 8006ca8:	2800      	cmp	r0, #0
 8006caa:	d1f8      	bne.n	8006c9e <__gethex+0x6a>
 8006cac:	498d      	ldr	r1, [pc, #564]	@ (8006ee4 <__gethex+0x2b0>)
 8006cae:	2201      	movs	r2, #1
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	f7ff f90f 	bl	8005ed4 <strncmp>
 8006cb6:	2800      	cmp	r0, #0
 8006cb8:	d13f      	bne.n	8006d3a <__gethex+0x106>
 8006cba:	b944      	cbnz	r4, 8006cce <__gethex+0x9a>
 8006cbc:	1c74      	adds	r4, r6, #1
 8006cbe:	4622      	mov	r2, r4
 8006cc0:	4616      	mov	r6, r2
 8006cc2:	3201      	adds	r2, #1
 8006cc4:	7830      	ldrb	r0, [r6, #0]
 8006cc6:	f7ff ff9f 	bl	8006c08 <__hexdig_fun>
 8006cca:	2800      	cmp	r0, #0
 8006ccc:	d1f8      	bne.n	8006cc0 <__gethex+0x8c>
 8006cce:	1ba4      	subs	r4, r4, r6
 8006cd0:	00a7      	lsls	r7, r4, #2
 8006cd2:	7833      	ldrb	r3, [r6, #0]
 8006cd4:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8006cd8:	2b50      	cmp	r3, #80	@ 0x50
 8006cda:	d13e      	bne.n	8006d5a <__gethex+0x126>
 8006cdc:	7873      	ldrb	r3, [r6, #1]
 8006cde:	2b2b      	cmp	r3, #43	@ 0x2b
 8006ce0:	d033      	beq.n	8006d4a <__gethex+0x116>
 8006ce2:	2b2d      	cmp	r3, #45	@ 0x2d
 8006ce4:	d034      	beq.n	8006d50 <__gethex+0x11c>
 8006ce6:	1c71      	adds	r1, r6, #1
 8006ce8:	2400      	movs	r4, #0
 8006cea:	7808      	ldrb	r0, [r1, #0]
 8006cec:	f7ff ff8c 	bl	8006c08 <__hexdig_fun>
 8006cf0:	1e43      	subs	r3, r0, #1
 8006cf2:	b2db      	uxtb	r3, r3
 8006cf4:	2b18      	cmp	r3, #24
 8006cf6:	d830      	bhi.n	8006d5a <__gethex+0x126>
 8006cf8:	f1a0 0210 	sub.w	r2, r0, #16
 8006cfc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8006d00:	f7ff ff82 	bl	8006c08 <__hexdig_fun>
 8006d04:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8006d08:	fa5f fc8c 	uxtb.w	ip, ip
 8006d0c:	f1bc 0f18 	cmp.w	ip, #24
 8006d10:	f04f 030a 	mov.w	r3, #10
 8006d14:	d91e      	bls.n	8006d54 <__gethex+0x120>
 8006d16:	b104      	cbz	r4, 8006d1a <__gethex+0xe6>
 8006d18:	4252      	negs	r2, r2
 8006d1a:	4417      	add	r7, r2
 8006d1c:	f8ca 1000 	str.w	r1, [sl]
 8006d20:	b1ed      	cbz	r5, 8006d5e <__gethex+0x12a>
 8006d22:	f1bb 0f00 	cmp.w	fp, #0
 8006d26:	bf0c      	ite	eq
 8006d28:	2506      	moveq	r5, #6
 8006d2a:	2500      	movne	r5, #0
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	b005      	add	sp, #20
 8006d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d34:	2500      	movs	r5, #0
 8006d36:	462c      	mov	r4, r5
 8006d38:	e7b0      	b.n	8006c9c <__gethex+0x68>
 8006d3a:	2c00      	cmp	r4, #0
 8006d3c:	d1c7      	bne.n	8006cce <__gethex+0x9a>
 8006d3e:	4627      	mov	r7, r4
 8006d40:	e7c7      	b.n	8006cd2 <__gethex+0x9e>
 8006d42:	464e      	mov	r6, r9
 8006d44:	462f      	mov	r7, r5
 8006d46:	2501      	movs	r5, #1
 8006d48:	e7c3      	b.n	8006cd2 <__gethex+0x9e>
 8006d4a:	2400      	movs	r4, #0
 8006d4c:	1cb1      	adds	r1, r6, #2
 8006d4e:	e7cc      	b.n	8006cea <__gethex+0xb6>
 8006d50:	2401      	movs	r4, #1
 8006d52:	e7fb      	b.n	8006d4c <__gethex+0x118>
 8006d54:	fb03 0002 	mla	r0, r3, r2, r0
 8006d58:	e7ce      	b.n	8006cf8 <__gethex+0xc4>
 8006d5a:	4631      	mov	r1, r6
 8006d5c:	e7de      	b.n	8006d1c <__gethex+0xe8>
 8006d5e:	eba6 0309 	sub.w	r3, r6, r9
 8006d62:	3b01      	subs	r3, #1
 8006d64:	4629      	mov	r1, r5
 8006d66:	2b07      	cmp	r3, #7
 8006d68:	dc0a      	bgt.n	8006d80 <__gethex+0x14c>
 8006d6a:	9801      	ldr	r0, [sp, #4]
 8006d6c:	f000 fcfe 	bl	800776c <_Balloc>
 8006d70:	4604      	mov	r4, r0
 8006d72:	b940      	cbnz	r0, 8006d86 <__gethex+0x152>
 8006d74:	4b5c      	ldr	r3, [pc, #368]	@ (8006ee8 <__gethex+0x2b4>)
 8006d76:	4602      	mov	r2, r0
 8006d78:	21e4      	movs	r1, #228	@ 0xe4
 8006d7a:	485c      	ldr	r0, [pc, #368]	@ (8006eec <__gethex+0x2b8>)
 8006d7c:	f001 fa94 	bl	80082a8 <__assert_func>
 8006d80:	3101      	adds	r1, #1
 8006d82:	105b      	asrs	r3, r3, #1
 8006d84:	e7ef      	b.n	8006d66 <__gethex+0x132>
 8006d86:	f100 0a14 	add.w	sl, r0, #20
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	4655      	mov	r5, sl
 8006d8e:	469b      	mov	fp, r3
 8006d90:	45b1      	cmp	r9, r6
 8006d92:	d337      	bcc.n	8006e04 <__gethex+0x1d0>
 8006d94:	f845 bb04 	str.w	fp, [r5], #4
 8006d98:	eba5 050a 	sub.w	r5, r5, sl
 8006d9c:	10ad      	asrs	r5, r5, #2
 8006d9e:	6125      	str	r5, [r4, #16]
 8006da0:	4658      	mov	r0, fp
 8006da2:	f000 fdd5 	bl	8007950 <__hi0bits>
 8006da6:	016d      	lsls	r5, r5, #5
 8006da8:	f8d8 6000 	ldr.w	r6, [r8]
 8006dac:	1a2d      	subs	r5, r5, r0
 8006dae:	42b5      	cmp	r5, r6
 8006db0:	dd54      	ble.n	8006e5c <__gethex+0x228>
 8006db2:	1bad      	subs	r5, r5, r6
 8006db4:	4629      	mov	r1, r5
 8006db6:	4620      	mov	r0, r4
 8006db8:	f001 f966 	bl	8008088 <__any_on>
 8006dbc:	4681      	mov	r9, r0
 8006dbe:	b178      	cbz	r0, 8006de0 <__gethex+0x1ac>
 8006dc0:	1e6b      	subs	r3, r5, #1
 8006dc2:	1159      	asrs	r1, r3, #5
 8006dc4:	f003 021f 	and.w	r2, r3, #31
 8006dc8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8006dcc:	f04f 0901 	mov.w	r9, #1
 8006dd0:	fa09 f202 	lsl.w	r2, r9, r2
 8006dd4:	420a      	tst	r2, r1
 8006dd6:	d003      	beq.n	8006de0 <__gethex+0x1ac>
 8006dd8:	454b      	cmp	r3, r9
 8006dda:	dc36      	bgt.n	8006e4a <__gethex+0x216>
 8006ddc:	f04f 0902 	mov.w	r9, #2
 8006de0:	4629      	mov	r1, r5
 8006de2:	4620      	mov	r0, r4
 8006de4:	f7ff febe 	bl	8006b64 <rshift>
 8006de8:	442f      	add	r7, r5
 8006dea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dee:	42bb      	cmp	r3, r7
 8006df0:	da42      	bge.n	8006e78 <__gethex+0x244>
 8006df2:	9801      	ldr	r0, [sp, #4]
 8006df4:	4621      	mov	r1, r4
 8006df6:	f000 fcf9 	bl	80077ec <_Bfree>
 8006dfa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	6013      	str	r3, [r2, #0]
 8006e00:	25a3      	movs	r5, #163	@ 0xa3
 8006e02:	e793      	b.n	8006d2c <__gethex+0xf8>
 8006e04:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8006e08:	2a2e      	cmp	r2, #46	@ 0x2e
 8006e0a:	d012      	beq.n	8006e32 <__gethex+0x1fe>
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d104      	bne.n	8006e1a <__gethex+0x1e6>
 8006e10:	f845 bb04 	str.w	fp, [r5], #4
 8006e14:	f04f 0b00 	mov.w	fp, #0
 8006e18:	465b      	mov	r3, fp
 8006e1a:	7830      	ldrb	r0, [r6, #0]
 8006e1c:	9303      	str	r3, [sp, #12]
 8006e1e:	f7ff fef3 	bl	8006c08 <__hexdig_fun>
 8006e22:	9b03      	ldr	r3, [sp, #12]
 8006e24:	f000 000f 	and.w	r0, r0, #15
 8006e28:	4098      	lsls	r0, r3
 8006e2a:	ea4b 0b00 	orr.w	fp, fp, r0
 8006e2e:	3304      	adds	r3, #4
 8006e30:	e7ae      	b.n	8006d90 <__gethex+0x15c>
 8006e32:	45b1      	cmp	r9, r6
 8006e34:	d8ea      	bhi.n	8006e0c <__gethex+0x1d8>
 8006e36:	492b      	ldr	r1, [pc, #172]	@ (8006ee4 <__gethex+0x2b0>)
 8006e38:	9303      	str	r3, [sp, #12]
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f7ff f849 	bl	8005ed4 <strncmp>
 8006e42:	9b03      	ldr	r3, [sp, #12]
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d1e1      	bne.n	8006e0c <__gethex+0x1d8>
 8006e48:	e7a2      	b.n	8006d90 <__gethex+0x15c>
 8006e4a:	1ea9      	subs	r1, r5, #2
 8006e4c:	4620      	mov	r0, r4
 8006e4e:	f001 f91b 	bl	8008088 <__any_on>
 8006e52:	2800      	cmp	r0, #0
 8006e54:	d0c2      	beq.n	8006ddc <__gethex+0x1a8>
 8006e56:	f04f 0903 	mov.w	r9, #3
 8006e5a:	e7c1      	b.n	8006de0 <__gethex+0x1ac>
 8006e5c:	da09      	bge.n	8006e72 <__gethex+0x23e>
 8006e5e:	1b75      	subs	r5, r6, r5
 8006e60:	4621      	mov	r1, r4
 8006e62:	9801      	ldr	r0, [sp, #4]
 8006e64:	462a      	mov	r2, r5
 8006e66:	f000 fed9 	bl	8007c1c <__lshift>
 8006e6a:	1b7f      	subs	r7, r7, r5
 8006e6c:	4604      	mov	r4, r0
 8006e6e:	f100 0a14 	add.w	sl, r0, #20
 8006e72:	f04f 0900 	mov.w	r9, #0
 8006e76:	e7b8      	b.n	8006dea <__gethex+0x1b6>
 8006e78:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006e7c:	42bd      	cmp	r5, r7
 8006e7e:	dd6f      	ble.n	8006f60 <__gethex+0x32c>
 8006e80:	1bed      	subs	r5, r5, r7
 8006e82:	42ae      	cmp	r6, r5
 8006e84:	dc34      	bgt.n	8006ef0 <__gethex+0x2bc>
 8006e86:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006e8a:	2b02      	cmp	r3, #2
 8006e8c:	d022      	beq.n	8006ed4 <__gethex+0x2a0>
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d024      	beq.n	8006edc <__gethex+0x2a8>
 8006e92:	2b01      	cmp	r3, #1
 8006e94:	d115      	bne.n	8006ec2 <__gethex+0x28e>
 8006e96:	42ae      	cmp	r6, r5
 8006e98:	d113      	bne.n	8006ec2 <__gethex+0x28e>
 8006e9a:	2e01      	cmp	r6, #1
 8006e9c:	d10b      	bne.n	8006eb6 <__gethex+0x282>
 8006e9e:	9a02      	ldr	r2, [sp, #8]
 8006ea0:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006ea4:	6013      	str	r3, [r2, #0]
 8006ea6:	2301      	movs	r3, #1
 8006ea8:	6123      	str	r3, [r4, #16]
 8006eaa:	f8ca 3000 	str.w	r3, [sl]
 8006eae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006eb0:	2562      	movs	r5, #98	@ 0x62
 8006eb2:	601c      	str	r4, [r3, #0]
 8006eb4:	e73a      	b.n	8006d2c <__gethex+0xf8>
 8006eb6:	1e71      	subs	r1, r6, #1
 8006eb8:	4620      	mov	r0, r4
 8006eba:	f001 f8e5 	bl	8008088 <__any_on>
 8006ebe:	2800      	cmp	r0, #0
 8006ec0:	d1ed      	bne.n	8006e9e <__gethex+0x26a>
 8006ec2:	9801      	ldr	r0, [sp, #4]
 8006ec4:	4621      	mov	r1, r4
 8006ec6:	f000 fc91 	bl	80077ec <_Bfree>
 8006eca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006ecc:	2300      	movs	r3, #0
 8006ece:	6013      	str	r3, [r2, #0]
 8006ed0:	2550      	movs	r5, #80	@ 0x50
 8006ed2:	e72b      	b.n	8006d2c <__gethex+0xf8>
 8006ed4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1f3      	bne.n	8006ec2 <__gethex+0x28e>
 8006eda:	e7e0      	b.n	8006e9e <__gethex+0x26a>
 8006edc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d1dd      	bne.n	8006e9e <__gethex+0x26a>
 8006ee2:	e7ee      	b.n	8006ec2 <__gethex+0x28e>
 8006ee4:	080089a5 	.word	0x080089a5
 8006ee8:	08008b7d 	.word	0x08008b7d
 8006eec:	08008b8e 	.word	0x08008b8e
 8006ef0:	1e6f      	subs	r7, r5, #1
 8006ef2:	f1b9 0f00 	cmp.w	r9, #0
 8006ef6:	d130      	bne.n	8006f5a <__gethex+0x326>
 8006ef8:	b127      	cbz	r7, 8006f04 <__gethex+0x2d0>
 8006efa:	4639      	mov	r1, r7
 8006efc:	4620      	mov	r0, r4
 8006efe:	f001 f8c3 	bl	8008088 <__any_on>
 8006f02:	4681      	mov	r9, r0
 8006f04:	117a      	asrs	r2, r7, #5
 8006f06:	2301      	movs	r3, #1
 8006f08:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8006f0c:	f007 071f 	and.w	r7, r7, #31
 8006f10:	40bb      	lsls	r3, r7
 8006f12:	4213      	tst	r3, r2
 8006f14:	4629      	mov	r1, r5
 8006f16:	4620      	mov	r0, r4
 8006f18:	bf18      	it	ne
 8006f1a:	f049 0902 	orrne.w	r9, r9, #2
 8006f1e:	f7ff fe21 	bl	8006b64 <rshift>
 8006f22:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8006f26:	1b76      	subs	r6, r6, r5
 8006f28:	2502      	movs	r5, #2
 8006f2a:	f1b9 0f00 	cmp.w	r9, #0
 8006f2e:	d047      	beq.n	8006fc0 <__gethex+0x38c>
 8006f30:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8006f34:	2b02      	cmp	r3, #2
 8006f36:	d015      	beq.n	8006f64 <__gethex+0x330>
 8006f38:	2b03      	cmp	r3, #3
 8006f3a:	d017      	beq.n	8006f6c <__gethex+0x338>
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d109      	bne.n	8006f54 <__gethex+0x320>
 8006f40:	f019 0f02 	tst.w	r9, #2
 8006f44:	d006      	beq.n	8006f54 <__gethex+0x320>
 8006f46:	f8da 3000 	ldr.w	r3, [sl]
 8006f4a:	ea49 0903 	orr.w	r9, r9, r3
 8006f4e:	f019 0f01 	tst.w	r9, #1
 8006f52:	d10e      	bne.n	8006f72 <__gethex+0x33e>
 8006f54:	f045 0510 	orr.w	r5, r5, #16
 8006f58:	e032      	b.n	8006fc0 <__gethex+0x38c>
 8006f5a:	f04f 0901 	mov.w	r9, #1
 8006f5e:	e7d1      	b.n	8006f04 <__gethex+0x2d0>
 8006f60:	2501      	movs	r5, #1
 8006f62:	e7e2      	b.n	8006f2a <__gethex+0x2f6>
 8006f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f66:	f1c3 0301 	rsb	r3, r3, #1
 8006f6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006f6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0f0      	beq.n	8006f54 <__gethex+0x320>
 8006f72:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006f76:	f104 0314 	add.w	r3, r4, #20
 8006f7a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006f7e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8006f82:	f04f 0c00 	mov.w	ip, #0
 8006f86:	4618      	mov	r0, r3
 8006f88:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f8c:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8006f90:	d01b      	beq.n	8006fca <__gethex+0x396>
 8006f92:	3201      	adds	r2, #1
 8006f94:	6002      	str	r2, [r0, #0]
 8006f96:	2d02      	cmp	r5, #2
 8006f98:	f104 0314 	add.w	r3, r4, #20
 8006f9c:	d13c      	bne.n	8007018 <__gethex+0x3e4>
 8006f9e:	f8d8 2000 	ldr.w	r2, [r8]
 8006fa2:	3a01      	subs	r2, #1
 8006fa4:	42b2      	cmp	r2, r6
 8006fa6:	d109      	bne.n	8006fbc <__gethex+0x388>
 8006fa8:	1171      	asrs	r1, r6, #5
 8006faa:	2201      	movs	r2, #1
 8006fac:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006fb0:	f006 061f 	and.w	r6, r6, #31
 8006fb4:	fa02 f606 	lsl.w	r6, r2, r6
 8006fb8:	421e      	tst	r6, r3
 8006fba:	d13a      	bne.n	8007032 <__gethex+0x3fe>
 8006fbc:	f045 0520 	orr.w	r5, r5, #32
 8006fc0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fc2:	601c      	str	r4, [r3, #0]
 8006fc4:	9b02      	ldr	r3, [sp, #8]
 8006fc6:	601f      	str	r7, [r3, #0]
 8006fc8:	e6b0      	b.n	8006d2c <__gethex+0xf8>
 8006fca:	4299      	cmp	r1, r3
 8006fcc:	f843 cc04 	str.w	ip, [r3, #-4]
 8006fd0:	d8d9      	bhi.n	8006f86 <__gethex+0x352>
 8006fd2:	68a3      	ldr	r3, [r4, #8]
 8006fd4:	459b      	cmp	fp, r3
 8006fd6:	db17      	blt.n	8007008 <__gethex+0x3d4>
 8006fd8:	6861      	ldr	r1, [r4, #4]
 8006fda:	9801      	ldr	r0, [sp, #4]
 8006fdc:	3101      	adds	r1, #1
 8006fde:	f000 fbc5 	bl	800776c <_Balloc>
 8006fe2:	4681      	mov	r9, r0
 8006fe4:	b918      	cbnz	r0, 8006fee <__gethex+0x3ba>
 8006fe6:	4b1a      	ldr	r3, [pc, #104]	@ (8007050 <__gethex+0x41c>)
 8006fe8:	4602      	mov	r2, r0
 8006fea:	2184      	movs	r1, #132	@ 0x84
 8006fec:	e6c5      	b.n	8006d7a <__gethex+0x146>
 8006fee:	6922      	ldr	r2, [r4, #16]
 8006ff0:	3202      	adds	r2, #2
 8006ff2:	f104 010c 	add.w	r1, r4, #12
 8006ff6:	0092      	lsls	r2, r2, #2
 8006ff8:	300c      	adds	r0, #12
 8006ffa:	f7fe ffb6 	bl	8005f6a <memcpy>
 8006ffe:	4621      	mov	r1, r4
 8007000:	9801      	ldr	r0, [sp, #4]
 8007002:	f000 fbf3 	bl	80077ec <_Bfree>
 8007006:	464c      	mov	r4, r9
 8007008:	6923      	ldr	r3, [r4, #16]
 800700a:	1c5a      	adds	r2, r3, #1
 800700c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007010:	6122      	str	r2, [r4, #16]
 8007012:	2201      	movs	r2, #1
 8007014:	615a      	str	r2, [r3, #20]
 8007016:	e7be      	b.n	8006f96 <__gethex+0x362>
 8007018:	6922      	ldr	r2, [r4, #16]
 800701a:	455a      	cmp	r2, fp
 800701c:	dd0b      	ble.n	8007036 <__gethex+0x402>
 800701e:	2101      	movs	r1, #1
 8007020:	4620      	mov	r0, r4
 8007022:	f7ff fd9f 	bl	8006b64 <rshift>
 8007026:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800702a:	3701      	adds	r7, #1
 800702c:	42bb      	cmp	r3, r7
 800702e:	f6ff aee0 	blt.w	8006df2 <__gethex+0x1be>
 8007032:	2501      	movs	r5, #1
 8007034:	e7c2      	b.n	8006fbc <__gethex+0x388>
 8007036:	f016 061f 	ands.w	r6, r6, #31
 800703a:	d0fa      	beq.n	8007032 <__gethex+0x3fe>
 800703c:	4453      	add	r3, sl
 800703e:	f1c6 0620 	rsb	r6, r6, #32
 8007042:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8007046:	f000 fc83 	bl	8007950 <__hi0bits>
 800704a:	42b0      	cmp	r0, r6
 800704c:	dbe7      	blt.n	800701e <__gethex+0x3ea>
 800704e:	e7f0      	b.n	8007032 <__gethex+0x3fe>
 8007050:	08008b7d 	.word	0x08008b7d

08007054 <L_shift>:
 8007054:	f1c2 0208 	rsb	r2, r2, #8
 8007058:	0092      	lsls	r2, r2, #2
 800705a:	b570      	push	{r4, r5, r6, lr}
 800705c:	f1c2 0620 	rsb	r6, r2, #32
 8007060:	6843      	ldr	r3, [r0, #4]
 8007062:	6804      	ldr	r4, [r0, #0]
 8007064:	fa03 f506 	lsl.w	r5, r3, r6
 8007068:	432c      	orrs	r4, r5
 800706a:	40d3      	lsrs	r3, r2
 800706c:	6004      	str	r4, [r0, #0]
 800706e:	f840 3f04 	str.w	r3, [r0, #4]!
 8007072:	4288      	cmp	r0, r1
 8007074:	d3f4      	bcc.n	8007060 <L_shift+0xc>
 8007076:	bd70      	pop	{r4, r5, r6, pc}

08007078 <__match>:
 8007078:	b530      	push	{r4, r5, lr}
 800707a:	6803      	ldr	r3, [r0, #0]
 800707c:	3301      	adds	r3, #1
 800707e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007082:	b914      	cbnz	r4, 800708a <__match+0x12>
 8007084:	6003      	str	r3, [r0, #0]
 8007086:	2001      	movs	r0, #1
 8007088:	bd30      	pop	{r4, r5, pc}
 800708a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800708e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8007092:	2d19      	cmp	r5, #25
 8007094:	bf98      	it	ls
 8007096:	3220      	addls	r2, #32
 8007098:	42a2      	cmp	r2, r4
 800709a:	d0f0      	beq.n	800707e <__match+0x6>
 800709c:	2000      	movs	r0, #0
 800709e:	e7f3      	b.n	8007088 <__match+0x10>

080070a0 <__hexnan>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	680b      	ldr	r3, [r1, #0]
 80070a6:	6801      	ldr	r1, [r0, #0]
 80070a8:	115e      	asrs	r6, r3, #5
 80070aa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80070ae:	f013 031f 	ands.w	r3, r3, #31
 80070b2:	b087      	sub	sp, #28
 80070b4:	bf18      	it	ne
 80070b6:	3604      	addne	r6, #4
 80070b8:	2500      	movs	r5, #0
 80070ba:	1f37      	subs	r7, r6, #4
 80070bc:	4682      	mov	sl, r0
 80070be:	4690      	mov	r8, r2
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	f846 5c04 	str.w	r5, [r6, #-4]
 80070c6:	46b9      	mov	r9, r7
 80070c8:	463c      	mov	r4, r7
 80070ca:	9502      	str	r5, [sp, #8]
 80070cc:	46ab      	mov	fp, r5
 80070ce:	784a      	ldrb	r2, [r1, #1]
 80070d0:	1c4b      	adds	r3, r1, #1
 80070d2:	9303      	str	r3, [sp, #12]
 80070d4:	b342      	cbz	r2, 8007128 <__hexnan+0x88>
 80070d6:	4610      	mov	r0, r2
 80070d8:	9105      	str	r1, [sp, #20]
 80070da:	9204      	str	r2, [sp, #16]
 80070dc:	f7ff fd94 	bl	8006c08 <__hexdig_fun>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d151      	bne.n	8007188 <__hexnan+0xe8>
 80070e4:	9a04      	ldr	r2, [sp, #16]
 80070e6:	9905      	ldr	r1, [sp, #20]
 80070e8:	2a20      	cmp	r2, #32
 80070ea:	d818      	bhi.n	800711e <__hexnan+0x7e>
 80070ec:	9b02      	ldr	r3, [sp, #8]
 80070ee:	459b      	cmp	fp, r3
 80070f0:	dd13      	ble.n	800711a <__hexnan+0x7a>
 80070f2:	454c      	cmp	r4, r9
 80070f4:	d206      	bcs.n	8007104 <__hexnan+0x64>
 80070f6:	2d07      	cmp	r5, #7
 80070f8:	dc04      	bgt.n	8007104 <__hexnan+0x64>
 80070fa:	462a      	mov	r2, r5
 80070fc:	4649      	mov	r1, r9
 80070fe:	4620      	mov	r0, r4
 8007100:	f7ff ffa8 	bl	8007054 <L_shift>
 8007104:	4544      	cmp	r4, r8
 8007106:	d952      	bls.n	80071ae <__hexnan+0x10e>
 8007108:	2300      	movs	r3, #0
 800710a:	f1a4 0904 	sub.w	r9, r4, #4
 800710e:	f844 3c04 	str.w	r3, [r4, #-4]
 8007112:	f8cd b008 	str.w	fp, [sp, #8]
 8007116:	464c      	mov	r4, r9
 8007118:	461d      	mov	r5, r3
 800711a:	9903      	ldr	r1, [sp, #12]
 800711c:	e7d7      	b.n	80070ce <__hexnan+0x2e>
 800711e:	2a29      	cmp	r2, #41	@ 0x29
 8007120:	d157      	bne.n	80071d2 <__hexnan+0x132>
 8007122:	3102      	adds	r1, #2
 8007124:	f8ca 1000 	str.w	r1, [sl]
 8007128:	f1bb 0f00 	cmp.w	fp, #0
 800712c:	d051      	beq.n	80071d2 <__hexnan+0x132>
 800712e:	454c      	cmp	r4, r9
 8007130:	d206      	bcs.n	8007140 <__hexnan+0xa0>
 8007132:	2d07      	cmp	r5, #7
 8007134:	dc04      	bgt.n	8007140 <__hexnan+0xa0>
 8007136:	462a      	mov	r2, r5
 8007138:	4649      	mov	r1, r9
 800713a:	4620      	mov	r0, r4
 800713c:	f7ff ff8a 	bl	8007054 <L_shift>
 8007140:	4544      	cmp	r4, r8
 8007142:	d936      	bls.n	80071b2 <__hexnan+0x112>
 8007144:	f1a8 0204 	sub.w	r2, r8, #4
 8007148:	4623      	mov	r3, r4
 800714a:	f853 1b04 	ldr.w	r1, [r3], #4
 800714e:	f842 1f04 	str.w	r1, [r2, #4]!
 8007152:	429f      	cmp	r7, r3
 8007154:	d2f9      	bcs.n	800714a <__hexnan+0xaa>
 8007156:	1b3b      	subs	r3, r7, r4
 8007158:	f023 0303 	bic.w	r3, r3, #3
 800715c:	3304      	adds	r3, #4
 800715e:	3401      	adds	r4, #1
 8007160:	3e03      	subs	r6, #3
 8007162:	42b4      	cmp	r4, r6
 8007164:	bf88      	it	hi
 8007166:	2304      	movhi	r3, #4
 8007168:	4443      	add	r3, r8
 800716a:	2200      	movs	r2, #0
 800716c:	f843 2b04 	str.w	r2, [r3], #4
 8007170:	429f      	cmp	r7, r3
 8007172:	d2fb      	bcs.n	800716c <__hexnan+0xcc>
 8007174:	683b      	ldr	r3, [r7, #0]
 8007176:	b91b      	cbnz	r3, 8007180 <__hexnan+0xe0>
 8007178:	4547      	cmp	r7, r8
 800717a:	d128      	bne.n	80071ce <__hexnan+0x12e>
 800717c:	2301      	movs	r3, #1
 800717e:	603b      	str	r3, [r7, #0]
 8007180:	2005      	movs	r0, #5
 8007182:	b007      	add	sp, #28
 8007184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007188:	3501      	adds	r5, #1
 800718a:	2d08      	cmp	r5, #8
 800718c:	f10b 0b01 	add.w	fp, fp, #1
 8007190:	dd06      	ble.n	80071a0 <__hexnan+0x100>
 8007192:	4544      	cmp	r4, r8
 8007194:	d9c1      	bls.n	800711a <__hexnan+0x7a>
 8007196:	2300      	movs	r3, #0
 8007198:	f844 3c04 	str.w	r3, [r4, #-4]
 800719c:	2501      	movs	r5, #1
 800719e:	3c04      	subs	r4, #4
 80071a0:	6822      	ldr	r2, [r4, #0]
 80071a2:	f000 000f 	and.w	r0, r0, #15
 80071a6:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 80071aa:	6020      	str	r0, [r4, #0]
 80071ac:	e7b5      	b.n	800711a <__hexnan+0x7a>
 80071ae:	2508      	movs	r5, #8
 80071b0:	e7b3      	b.n	800711a <__hexnan+0x7a>
 80071b2:	9b01      	ldr	r3, [sp, #4]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d0dd      	beq.n	8007174 <__hexnan+0xd4>
 80071b8:	f1c3 0320 	rsb	r3, r3, #32
 80071bc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80071c0:	40da      	lsrs	r2, r3
 80071c2:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80071c6:	4013      	ands	r3, r2
 80071c8:	f846 3c04 	str.w	r3, [r6, #-4]
 80071cc:	e7d2      	b.n	8007174 <__hexnan+0xd4>
 80071ce:	3f04      	subs	r7, #4
 80071d0:	e7d0      	b.n	8007174 <__hexnan+0xd4>
 80071d2:	2004      	movs	r0, #4
 80071d4:	e7d5      	b.n	8007182 <__hexnan+0xe2>

080071d6 <__ssputs_r>:
 80071d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071da:	688e      	ldr	r6, [r1, #8]
 80071dc:	461f      	mov	r7, r3
 80071de:	42be      	cmp	r6, r7
 80071e0:	680b      	ldr	r3, [r1, #0]
 80071e2:	4682      	mov	sl, r0
 80071e4:	460c      	mov	r4, r1
 80071e6:	4690      	mov	r8, r2
 80071e8:	d82d      	bhi.n	8007246 <__ssputs_r+0x70>
 80071ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80071ee:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80071f2:	d026      	beq.n	8007242 <__ssputs_r+0x6c>
 80071f4:	6965      	ldr	r5, [r4, #20]
 80071f6:	6909      	ldr	r1, [r1, #16]
 80071f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071fc:	eba3 0901 	sub.w	r9, r3, r1
 8007200:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007204:	1c7b      	adds	r3, r7, #1
 8007206:	444b      	add	r3, r9
 8007208:	106d      	asrs	r5, r5, #1
 800720a:	429d      	cmp	r5, r3
 800720c:	bf38      	it	cc
 800720e:	461d      	movcc	r5, r3
 8007210:	0553      	lsls	r3, r2, #21
 8007212:	d527      	bpl.n	8007264 <__ssputs_r+0x8e>
 8007214:	4629      	mov	r1, r5
 8007216:	f000 f95f 	bl	80074d8 <_malloc_r>
 800721a:	4606      	mov	r6, r0
 800721c:	b360      	cbz	r0, 8007278 <__ssputs_r+0xa2>
 800721e:	6921      	ldr	r1, [r4, #16]
 8007220:	464a      	mov	r2, r9
 8007222:	f7fe fea2 	bl	8005f6a <memcpy>
 8007226:	89a3      	ldrh	r3, [r4, #12]
 8007228:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800722c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007230:	81a3      	strh	r3, [r4, #12]
 8007232:	6126      	str	r6, [r4, #16]
 8007234:	6165      	str	r5, [r4, #20]
 8007236:	444e      	add	r6, r9
 8007238:	eba5 0509 	sub.w	r5, r5, r9
 800723c:	6026      	str	r6, [r4, #0]
 800723e:	60a5      	str	r5, [r4, #8]
 8007240:	463e      	mov	r6, r7
 8007242:	42be      	cmp	r6, r7
 8007244:	d900      	bls.n	8007248 <__ssputs_r+0x72>
 8007246:	463e      	mov	r6, r7
 8007248:	6820      	ldr	r0, [r4, #0]
 800724a:	4632      	mov	r2, r6
 800724c:	4641      	mov	r1, r8
 800724e:	f000 ffba 	bl	80081c6 <memmove>
 8007252:	68a3      	ldr	r3, [r4, #8]
 8007254:	1b9b      	subs	r3, r3, r6
 8007256:	60a3      	str	r3, [r4, #8]
 8007258:	6823      	ldr	r3, [r4, #0]
 800725a:	4433      	add	r3, r6
 800725c:	6023      	str	r3, [r4, #0]
 800725e:	2000      	movs	r0, #0
 8007260:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007264:	462a      	mov	r2, r5
 8007266:	f000 ff73 	bl	8008150 <_realloc_r>
 800726a:	4606      	mov	r6, r0
 800726c:	2800      	cmp	r0, #0
 800726e:	d1e0      	bne.n	8007232 <__ssputs_r+0x5c>
 8007270:	6921      	ldr	r1, [r4, #16]
 8007272:	4650      	mov	r0, sl
 8007274:	f001 f84a 	bl	800830c <_free_r>
 8007278:	230c      	movs	r3, #12
 800727a:	f8ca 3000 	str.w	r3, [sl]
 800727e:	89a3      	ldrh	r3, [r4, #12]
 8007280:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007284:	81a3      	strh	r3, [r4, #12]
 8007286:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800728a:	e7e9      	b.n	8007260 <__ssputs_r+0x8a>

0800728c <_svfiprintf_r>:
 800728c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007290:	4698      	mov	r8, r3
 8007292:	898b      	ldrh	r3, [r1, #12]
 8007294:	061b      	lsls	r3, r3, #24
 8007296:	b09d      	sub	sp, #116	@ 0x74
 8007298:	4607      	mov	r7, r0
 800729a:	460d      	mov	r5, r1
 800729c:	4614      	mov	r4, r2
 800729e:	d510      	bpl.n	80072c2 <_svfiprintf_r+0x36>
 80072a0:	690b      	ldr	r3, [r1, #16]
 80072a2:	b973      	cbnz	r3, 80072c2 <_svfiprintf_r+0x36>
 80072a4:	2140      	movs	r1, #64	@ 0x40
 80072a6:	f000 f917 	bl	80074d8 <_malloc_r>
 80072aa:	6028      	str	r0, [r5, #0]
 80072ac:	6128      	str	r0, [r5, #16]
 80072ae:	b930      	cbnz	r0, 80072be <_svfiprintf_r+0x32>
 80072b0:	230c      	movs	r3, #12
 80072b2:	603b      	str	r3, [r7, #0]
 80072b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80072b8:	b01d      	add	sp, #116	@ 0x74
 80072ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072be:	2340      	movs	r3, #64	@ 0x40
 80072c0:	616b      	str	r3, [r5, #20]
 80072c2:	2300      	movs	r3, #0
 80072c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c6:	2320      	movs	r3, #32
 80072c8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80072d0:	2330      	movs	r3, #48	@ 0x30
 80072d2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007470 <_svfiprintf_r+0x1e4>
 80072d6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072da:	f04f 0901 	mov.w	r9, #1
 80072de:	4623      	mov	r3, r4
 80072e0:	469a      	mov	sl, r3
 80072e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072e6:	b10a      	cbz	r2, 80072ec <_svfiprintf_r+0x60>
 80072e8:	2a25      	cmp	r2, #37	@ 0x25
 80072ea:	d1f9      	bne.n	80072e0 <_svfiprintf_r+0x54>
 80072ec:	ebba 0b04 	subs.w	fp, sl, r4
 80072f0:	d00b      	beq.n	800730a <_svfiprintf_r+0x7e>
 80072f2:	465b      	mov	r3, fp
 80072f4:	4622      	mov	r2, r4
 80072f6:	4629      	mov	r1, r5
 80072f8:	4638      	mov	r0, r7
 80072fa:	f7ff ff6c 	bl	80071d6 <__ssputs_r>
 80072fe:	3001      	adds	r0, #1
 8007300:	f000 80a7 	beq.w	8007452 <_svfiprintf_r+0x1c6>
 8007304:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007306:	445a      	add	r2, fp
 8007308:	9209      	str	r2, [sp, #36]	@ 0x24
 800730a:	f89a 3000 	ldrb.w	r3, [sl]
 800730e:	2b00      	cmp	r3, #0
 8007310:	f000 809f 	beq.w	8007452 <_svfiprintf_r+0x1c6>
 8007314:	2300      	movs	r3, #0
 8007316:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800731a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800731e:	f10a 0a01 	add.w	sl, sl, #1
 8007322:	9304      	str	r3, [sp, #16]
 8007324:	9307      	str	r3, [sp, #28]
 8007326:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800732a:	931a      	str	r3, [sp, #104]	@ 0x68
 800732c:	4654      	mov	r4, sl
 800732e:	2205      	movs	r2, #5
 8007330:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007334:	484e      	ldr	r0, [pc, #312]	@ (8007470 <_svfiprintf_r+0x1e4>)
 8007336:	f7f8 ffd3 	bl	80002e0 <memchr>
 800733a:	9a04      	ldr	r2, [sp, #16]
 800733c:	b9d8      	cbnz	r0, 8007376 <_svfiprintf_r+0xea>
 800733e:	06d0      	lsls	r0, r2, #27
 8007340:	bf44      	itt	mi
 8007342:	2320      	movmi	r3, #32
 8007344:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007348:	0711      	lsls	r1, r2, #28
 800734a:	bf44      	itt	mi
 800734c:	232b      	movmi	r3, #43	@ 0x2b
 800734e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007352:	f89a 3000 	ldrb.w	r3, [sl]
 8007356:	2b2a      	cmp	r3, #42	@ 0x2a
 8007358:	d015      	beq.n	8007386 <_svfiprintf_r+0xfa>
 800735a:	9a07      	ldr	r2, [sp, #28]
 800735c:	4654      	mov	r4, sl
 800735e:	2000      	movs	r0, #0
 8007360:	f04f 0c0a 	mov.w	ip, #10
 8007364:	4621      	mov	r1, r4
 8007366:	f811 3b01 	ldrb.w	r3, [r1], #1
 800736a:	3b30      	subs	r3, #48	@ 0x30
 800736c:	2b09      	cmp	r3, #9
 800736e:	d94b      	bls.n	8007408 <_svfiprintf_r+0x17c>
 8007370:	b1b0      	cbz	r0, 80073a0 <_svfiprintf_r+0x114>
 8007372:	9207      	str	r2, [sp, #28]
 8007374:	e014      	b.n	80073a0 <_svfiprintf_r+0x114>
 8007376:	eba0 0308 	sub.w	r3, r0, r8
 800737a:	fa09 f303 	lsl.w	r3, r9, r3
 800737e:	4313      	orrs	r3, r2
 8007380:	9304      	str	r3, [sp, #16]
 8007382:	46a2      	mov	sl, r4
 8007384:	e7d2      	b.n	800732c <_svfiprintf_r+0xa0>
 8007386:	9b03      	ldr	r3, [sp, #12]
 8007388:	1d19      	adds	r1, r3, #4
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	9103      	str	r1, [sp, #12]
 800738e:	2b00      	cmp	r3, #0
 8007390:	bfbb      	ittet	lt
 8007392:	425b      	neglt	r3, r3
 8007394:	f042 0202 	orrlt.w	r2, r2, #2
 8007398:	9307      	strge	r3, [sp, #28]
 800739a:	9307      	strlt	r3, [sp, #28]
 800739c:	bfb8      	it	lt
 800739e:	9204      	strlt	r2, [sp, #16]
 80073a0:	7823      	ldrb	r3, [r4, #0]
 80073a2:	2b2e      	cmp	r3, #46	@ 0x2e
 80073a4:	d10a      	bne.n	80073bc <_svfiprintf_r+0x130>
 80073a6:	7863      	ldrb	r3, [r4, #1]
 80073a8:	2b2a      	cmp	r3, #42	@ 0x2a
 80073aa:	d132      	bne.n	8007412 <_svfiprintf_r+0x186>
 80073ac:	9b03      	ldr	r3, [sp, #12]
 80073ae:	1d1a      	adds	r2, r3, #4
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	9203      	str	r2, [sp, #12]
 80073b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073b8:	3402      	adds	r4, #2
 80073ba:	9305      	str	r3, [sp, #20]
 80073bc:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007480 <_svfiprintf_r+0x1f4>
 80073c0:	7821      	ldrb	r1, [r4, #0]
 80073c2:	2203      	movs	r2, #3
 80073c4:	4650      	mov	r0, sl
 80073c6:	f7f8 ff8b 	bl	80002e0 <memchr>
 80073ca:	b138      	cbz	r0, 80073dc <_svfiprintf_r+0x150>
 80073cc:	9b04      	ldr	r3, [sp, #16]
 80073ce:	eba0 000a 	sub.w	r0, r0, sl
 80073d2:	2240      	movs	r2, #64	@ 0x40
 80073d4:	4082      	lsls	r2, r0
 80073d6:	4313      	orrs	r3, r2
 80073d8:	3401      	adds	r4, #1
 80073da:	9304      	str	r3, [sp, #16]
 80073dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e0:	4824      	ldr	r0, [pc, #144]	@ (8007474 <_svfiprintf_r+0x1e8>)
 80073e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073e6:	2206      	movs	r2, #6
 80073e8:	f7f8 ff7a 	bl	80002e0 <memchr>
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d036      	beq.n	800745e <_svfiprintf_r+0x1d2>
 80073f0:	4b21      	ldr	r3, [pc, #132]	@ (8007478 <_svfiprintf_r+0x1ec>)
 80073f2:	bb1b      	cbnz	r3, 800743c <_svfiprintf_r+0x1b0>
 80073f4:	9b03      	ldr	r3, [sp, #12]
 80073f6:	3307      	adds	r3, #7
 80073f8:	f023 0307 	bic.w	r3, r3, #7
 80073fc:	3308      	adds	r3, #8
 80073fe:	9303      	str	r3, [sp, #12]
 8007400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007402:	4433      	add	r3, r6
 8007404:	9309      	str	r3, [sp, #36]	@ 0x24
 8007406:	e76a      	b.n	80072de <_svfiprintf_r+0x52>
 8007408:	fb0c 3202 	mla	r2, ip, r2, r3
 800740c:	460c      	mov	r4, r1
 800740e:	2001      	movs	r0, #1
 8007410:	e7a8      	b.n	8007364 <_svfiprintf_r+0xd8>
 8007412:	2300      	movs	r3, #0
 8007414:	3401      	adds	r4, #1
 8007416:	9305      	str	r3, [sp, #20]
 8007418:	4619      	mov	r1, r3
 800741a:	f04f 0c0a 	mov.w	ip, #10
 800741e:	4620      	mov	r0, r4
 8007420:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007424:	3a30      	subs	r2, #48	@ 0x30
 8007426:	2a09      	cmp	r2, #9
 8007428:	d903      	bls.n	8007432 <_svfiprintf_r+0x1a6>
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0c6      	beq.n	80073bc <_svfiprintf_r+0x130>
 800742e:	9105      	str	r1, [sp, #20]
 8007430:	e7c4      	b.n	80073bc <_svfiprintf_r+0x130>
 8007432:	fb0c 2101 	mla	r1, ip, r1, r2
 8007436:	4604      	mov	r4, r0
 8007438:	2301      	movs	r3, #1
 800743a:	e7f0      	b.n	800741e <_svfiprintf_r+0x192>
 800743c:	ab03      	add	r3, sp, #12
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	462a      	mov	r2, r5
 8007442:	4b0e      	ldr	r3, [pc, #56]	@ (800747c <_svfiprintf_r+0x1f0>)
 8007444:	a904      	add	r1, sp, #16
 8007446:	4638      	mov	r0, r7
 8007448:	f7fd f87a 	bl	8004540 <_printf_float>
 800744c:	1c42      	adds	r2, r0, #1
 800744e:	4606      	mov	r6, r0
 8007450:	d1d6      	bne.n	8007400 <_svfiprintf_r+0x174>
 8007452:	89ab      	ldrh	r3, [r5, #12]
 8007454:	065b      	lsls	r3, r3, #25
 8007456:	f53f af2d 	bmi.w	80072b4 <_svfiprintf_r+0x28>
 800745a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800745c:	e72c      	b.n	80072b8 <_svfiprintf_r+0x2c>
 800745e:	ab03      	add	r3, sp, #12
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	462a      	mov	r2, r5
 8007464:	4b05      	ldr	r3, [pc, #20]	@ (800747c <_svfiprintf_r+0x1f0>)
 8007466:	a904      	add	r1, sp, #16
 8007468:	4638      	mov	r0, r7
 800746a:	f7fd faf1 	bl	8004a50 <_printf_i>
 800746e:	e7ed      	b.n	800744c <_svfiprintf_r+0x1c0>
 8007470:	08008bee 	.word	0x08008bee
 8007474:	08008bf8 	.word	0x08008bf8
 8007478:	08004541 	.word	0x08004541
 800747c:	080071d7 	.word	0x080071d7
 8007480:	08008bf4 	.word	0x08008bf4

08007484 <malloc>:
 8007484:	4b02      	ldr	r3, [pc, #8]	@ (8007490 <malloc+0xc>)
 8007486:	4601      	mov	r1, r0
 8007488:	6818      	ldr	r0, [r3, #0]
 800748a:	f000 b825 	b.w	80074d8 <_malloc_r>
 800748e:	bf00      	nop
 8007490:	240001a4 	.word	0x240001a4

08007494 <sbrk_aligned>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	4e0f      	ldr	r6, [pc, #60]	@ (80074d4 <sbrk_aligned+0x40>)
 8007498:	460c      	mov	r4, r1
 800749a:	6831      	ldr	r1, [r6, #0]
 800749c:	4605      	mov	r5, r0
 800749e:	b911      	cbnz	r1, 80074a6 <sbrk_aligned+0x12>
 80074a0:	f000 fee0 	bl	8008264 <_sbrk_r>
 80074a4:	6030      	str	r0, [r6, #0]
 80074a6:	4621      	mov	r1, r4
 80074a8:	4628      	mov	r0, r5
 80074aa:	f000 fedb 	bl	8008264 <_sbrk_r>
 80074ae:	1c43      	adds	r3, r0, #1
 80074b0:	d103      	bne.n	80074ba <sbrk_aligned+0x26>
 80074b2:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80074b6:	4620      	mov	r0, r4
 80074b8:	bd70      	pop	{r4, r5, r6, pc}
 80074ba:	1cc4      	adds	r4, r0, #3
 80074bc:	f024 0403 	bic.w	r4, r4, #3
 80074c0:	42a0      	cmp	r0, r4
 80074c2:	d0f8      	beq.n	80074b6 <sbrk_aligned+0x22>
 80074c4:	1a21      	subs	r1, r4, r0
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 fecc 	bl	8008264 <_sbrk_r>
 80074cc:	3001      	adds	r0, #1
 80074ce:	d1f2      	bne.n	80074b6 <sbrk_aligned+0x22>
 80074d0:	e7ef      	b.n	80074b2 <sbrk_aligned+0x1e>
 80074d2:	bf00      	nop
 80074d4:	24000408 	.word	0x24000408

080074d8 <_malloc_r>:
 80074d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80074dc:	1ccd      	adds	r5, r1, #3
 80074de:	f025 0503 	bic.w	r5, r5, #3
 80074e2:	3508      	adds	r5, #8
 80074e4:	2d0c      	cmp	r5, #12
 80074e6:	bf38      	it	cc
 80074e8:	250c      	movcc	r5, #12
 80074ea:	2d00      	cmp	r5, #0
 80074ec:	4606      	mov	r6, r0
 80074ee:	db01      	blt.n	80074f4 <_malloc_r+0x1c>
 80074f0:	42a9      	cmp	r1, r5
 80074f2:	d904      	bls.n	80074fe <_malloc_r+0x26>
 80074f4:	230c      	movs	r3, #12
 80074f6:	6033      	str	r3, [r6, #0]
 80074f8:	2000      	movs	r0, #0
 80074fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074fe:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80075d4 <_malloc_r+0xfc>
 8007502:	f000 f927 	bl	8007754 <__malloc_lock>
 8007506:	f8d8 3000 	ldr.w	r3, [r8]
 800750a:	461c      	mov	r4, r3
 800750c:	bb44      	cbnz	r4, 8007560 <_malloc_r+0x88>
 800750e:	4629      	mov	r1, r5
 8007510:	4630      	mov	r0, r6
 8007512:	f7ff ffbf 	bl	8007494 <sbrk_aligned>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	4604      	mov	r4, r0
 800751a:	d158      	bne.n	80075ce <_malloc_r+0xf6>
 800751c:	f8d8 4000 	ldr.w	r4, [r8]
 8007520:	4627      	mov	r7, r4
 8007522:	2f00      	cmp	r7, #0
 8007524:	d143      	bne.n	80075ae <_malloc_r+0xd6>
 8007526:	2c00      	cmp	r4, #0
 8007528:	d04b      	beq.n	80075c2 <_malloc_r+0xea>
 800752a:	6823      	ldr	r3, [r4, #0]
 800752c:	4639      	mov	r1, r7
 800752e:	4630      	mov	r0, r6
 8007530:	eb04 0903 	add.w	r9, r4, r3
 8007534:	f000 fe96 	bl	8008264 <_sbrk_r>
 8007538:	4581      	cmp	r9, r0
 800753a:	d142      	bne.n	80075c2 <_malloc_r+0xea>
 800753c:	6821      	ldr	r1, [r4, #0]
 800753e:	1a6d      	subs	r5, r5, r1
 8007540:	4629      	mov	r1, r5
 8007542:	4630      	mov	r0, r6
 8007544:	f7ff ffa6 	bl	8007494 <sbrk_aligned>
 8007548:	3001      	adds	r0, #1
 800754a:	d03a      	beq.n	80075c2 <_malloc_r+0xea>
 800754c:	6823      	ldr	r3, [r4, #0]
 800754e:	442b      	add	r3, r5
 8007550:	6023      	str	r3, [r4, #0]
 8007552:	f8d8 3000 	ldr.w	r3, [r8]
 8007556:	685a      	ldr	r2, [r3, #4]
 8007558:	bb62      	cbnz	r2, 80075b4 <_malloc_r+0xdc>
 800755a:	f8c8 7000 	str.w	r7, [r8]
 800755e:	e00f      	b.n	8007580 <_malloc_r+0xa8>
 8007560:	6822      	ldr	r2, [r4, #0]
 8007562:	1b52      	subs	r2, r2, r5
 8007564:	d420      	bmi.n	80075a8 <_malloc_r+0xd0>
 8007566:	2a0b      	cmp	r2, #11
 8007568:	d917      	bls.n	800759a <_malloc_r+0xc2>
 800756a:	1961      	adds	r1, r4, r5
 800756c:	42a3      	cmp	r3, r4
 800756e:	6025      	str	r5, [r4, #0]
 8007570:	bf18      	it	ne
 8007572:	6059      	strne	r1, [r3, #4]
 8007574:	6863      	ldr	r3, [r4, #4]
 8007576:	bf08      	it	eq
 8007578:	f8c8 1000 	streq.w	r1, [r8]
 800757c:	5162      	str	r2, [r4, r5]
 800757e:	604b      	str	r3, [r1, #4]
 8007580:	4630      	mov	r0, r6
 8007582:	f000 f8ed 	bl	8007760 <__malloc_unlock>
 8007586:	f104 000b 	add.w	r0, r4, #11
 800758a:	1d23      	adds	r3, r4, #4
 800758c:	f020 0007 	bic.w	r0, r0, #7
 8007590:	1ac2      	subs	r2, r0, r3
 8007592:	bf1c      	itt	ne
 8007594:	1a1b      	subne	r3, r3, r0
 8007596:	50a3      	strne	r3, [r4, r2]
 8007598:	e7af      	b.n	80074fa <_malloc_r+0x22>
 800759a:	6862      	ldr	r2, [r4, #4]
 800759c:	42a3      	cmp	r3, r4
 800759e:	bf0c      	ite	eq
 80075a0:	f8c8 2000 	streq.w	r2, [r8]
 80075a4:	605a      	strne	r2, [r3, #4]
 80075a6:	e7eb      	b.n	8007580 <_malloc_r+0xa8>
 80075a8:	4623      	mov	r3, r4
 80075aa:	6864      	ldr	r4, [r4, #4]
 80075ac:	e7ae      	b.n	800750c <_malloc_r+0x34>
 80075ae:	463c      	mov	r4, r7
 80075b0:	687f      	ldr	r7, [r7, #4]
 80075b2:	e7b6      	b.n	8007522 <_malloc_r+0x4a>
 80075b4:	461a      	mov	r2, r3
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	42a3      	cmp	r3, r4
 80075ba:	d1fb      	bne.n	80075b4 <_malloc_r+0xdc>
 80075bc:	2300      	movs	r3, #0
 80075be:	6053      	str	r3, [r2, #4]
 80075c0:	e7de      	b.n	8007580 <_malloc_r+0xa8>
 80075c2:	230c      	movs	r3, #12
 80075c4:	6033      	str	r3, [r6, #0]
 80075c6:	4630      	mov	r0, r6
 80075c8:	f000 f8ca 	bl	8007760 <__malloc_unlock>
 80075cc:	e794      	b.n	80074f8 <_malloc_r+0x20>
 80075ce:	6005      	str	r5, [r0, #0]
 80075d0:	e7d6      	b.n	8007580 <_malloc_r+0xa8>
 80075d2:	bf00      	nop
 80075d4:	2400040c 	.word	0x2400040c

080075d8 <__ascii_mbtowc>:
 80075d8:	b082      	sub	sp, #8
 80075da:	b901      	cbnz	r1, 80075de <__ascii_mbtowc+0x6>
 80075dc:	a901      	add	r1, sp, #4
 80075de:	b142      	cbz	r2, 80075f2 <__ascii_mbtowc+0x1a>
 80075e0:	b14b      	cbz	r3, 80075f6 <__ascii_mbtowc+0x1e>
 80075e2:	7813      	ldrb	r3, [r2, #0]
 80075e4:	600b      	str	r3, [r1, #0]
 80075e6:	7812      	ldrb	r2, [r2, #0]
 80075e8:	1e10      	subs	r0, r2, #0
 80075ea:	bf18      	it	ne
 80075ec:	2001      	movne	r0, #1
 80075ee:	b002      	add	sp, #8
 80075f0:	4770      	bx	lr
 80075f2:	4610      	mov	r0, r2
 80075f4:	e7fb      	b.n	80075ee <__ascii_mbtowc+0x16>
 80075f6:	f06f 0001 	mvn.w	r0, #1
 80075fa:	e7f8      	b.n	80075ee <__ascii_mbtowc+0x16>

080075fc <__sflush_r>:
 80075fc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007604:	0716      	lsls	r6, r2, #28
 8007606:	4605      	mov	r5, r0
 8007608:	460c      	mov	r4, r1
 800760a:	d454      	bmi.n	80076b6 <__sflush_r+0xba>
 800760c:	684b      	ldr	r3, [r1, #4]
 800760e:	2b00      	cmp	r3, #0
 8007610:	dc02      	bgt.n	8007618 <__sflush_r+0x1c>
 8007612:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007614:	2b00      	cmp	r3, #0
 8007616:	dd48      	ble.n	80076aa <__sflush_r+0xae>
 8007618:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800761a:	2e00      	cmp	r6, #0
 800761c:	d045      	beq.n	80076aa <__sflush_r+0xae>
 800761e:	2300      	movs	r3, #0
 8007620:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007624:	682f      	ldr	r7, [r5, #0]
 8007626:	6a21      	ldr	r1, [r4, #32]
 8007628:	602b      	str	r3, [r5, #0]
 800762a:	d030      	beq.n	800768e <__sflush_r+0x92>
 800762c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800762e:	89a3      	ldrh	r3, [r4, #12]
 8007630:	0759      	lsls	r1, r3, #29
 8007632:	d505      	bpl.n	8007640 <__sflush_r+0x44>
 8007634:	6863      	ldr	r3, [r4, #4]
 8007636:	1ad2      	subs	r2, r2, r3
 8007638:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800763a:	b10b      	cbz	r3, 8007640 <__sflush_r+0x44>
 800763c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800763e:	1ad2      	subs	r2, r2, r3
 8007640:	2300      	movs	r3, #0
 8007642:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007644:	6a21      	ldr	r1, [r4, #32]
 8007646:	4628      	mov	r0, r5
 8007648:	47b0      	blx	r6
 800764a:	1c43      	adds	r3, r0, #1
 800764c:	89a3      	ldrh	r3, [r4, #12]
 800764e:	d106      	bne.n	800765e <__sflush_r+0x62>
 8007650:	6829      	ldr	r1, [r5, #0]
 8007652:	291d      	cmp	r1, #29
 8007654:	d82b      	bhi.n	80076ae <__sflush_r+0xb2>
 8007656:	4a2a      	ldr	r2, [pc, #168]	@ (8007700 <__sflush_r+0x104>)
 8007658:	410a      	asrs	r2, r1
 800765a:	07d6      	lsls	r6, r2, #31
 800765c:	d427      	bmi.n	80076ae <__sflush_r+0xb2>
 800765e:	2200      	movs	r2, #0
 8007660:	6062      	str	r2, [r4, #4]
 8007662:	04d9      	lsls	r1, r3, #19
 8007664:	6922      	ldr	r2, [r4, #16]
 8007666:	6022      	str	r2, [r4, #0]
 8007668:	d504      	bpl.n	8007674 <__sflush_r+0x78>
 800766a:	1c42      	adds	r2, r0, #1
 800766c:	d101      	bne.n	8007672 <__sflush_r+0x76>
 800766e:	682b      	ldr	r3, [r5, #0]
 8007670:	b903      	cbnz	r3, 8007674 <__sflush_r+0x78>
 8007672:	6560      	str	r0, [r4, #84]	@ 0x54
 8007674:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007676:	602f      	str	r7, [r5, #0]
 8007678:	b1b9      	cbz	r1, 80076aa <__sflush_r+0xae>
 800767a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800767e:	4299      	cmp	r1, r3
 8007680:	d002      	beq.n	8007688 <__sflush_r+0x8c>
 8007682:	4628      	mov	r0, r5
 8007684:	f000 fe42 	bl	800830c <_free_r>
 8007688:	2300      	movs	r3, #0
 800768a:	6363      	str	r3, [r4, #52]	@ 0x34
 800768c:	e00d      	b.n	80076aa <__sflush_r+0xae>
 800768e:	2301      	movs	r3, #1
 8007690:	4628      	mov	r0, r5
 8007692:	47b0      	blx	r6
 8007694:	4602      	mov	r2, r0
 8007696:	1c50      	adds	r0, r2, #1
 8007698:	d1c9      	bne.n	800762e <__sflush_r+0x32>
 800769a:	682b      	ldr	r3, [r5, #0]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d0c6      	beq.n	800762e <__sflush_r+0x32>
 80076a0:	2b1d      	cmp	r3, #29
 80076a2:	d001      	beq.n	80076a8 <__sflush_r+0xac>
 80076a4:	2b16      	cmp	r3, #22
 80076a6:	d11e      	bne.n	80076e6 <__sflush_r+0xea>
 80076a8:	602f      	str	r7, [r5, #0]
 80076aa:	2000      	movs	r0, #0
 80076ac:	e022      	b.n	80076f4 <__sflush_r+0xf8>
 80076ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076b2:	b21b      	sxth	r3, r3
 80076b4:	e01b      	b.n	80076ee <__sflush_r+0xf2>
 80076b6:	690f      	ldr	r7, [r1, #16]
 80076b8:	2f00      	cmp	r7, #0
 80076ba:	d0f6      	beq.n	80076aa <__sflush_r+0xae>
 80076bc:	0793      	lsls	r3, r2, #30
 80076be:	680e      	ldr	r6, [r1, #0]
 80076c0:	bf08      	it	eq
 80076c2:	694b      	ldreq	r3, [r1, #20]
 80076c4:	600f      	str	r7, [r1, #0]
 80076c6:	bf18      	it	ne
 80076c8:	2300      	movne	r3, #0
 80076ca:	eba6 0807 	sub.w	r8, r6, r7
 80076ce:	608b      	str	r3, [r1, #8]
 80076d0:	f1b8 0f00 	cmp.w	r8, #0
 80076d4:	dde9      	ble.n	80076aa <__sflush_r+0xae>
 80076d6:	6a21      	ldr	r1, [r4, #32]
 80076d8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80076da:	4643      	mov	r3, r8
 80076dc:	463a      	mov	r2, r7
 80076de:	4628      	mov	r0, r5
 80076e0:	47b0      	blx	r6
 80076e2:	2800      	cmp	r0, #0
 80076e4:	dc08      	bgt.n	80076f8 <__sflush_r+0xfc>
 80076e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80076ee:	81a3      	strh	r3, [r4, #12]
 80076f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80076f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076f8:	4407      	add	r7, r0
 80076fa:	eba8 0800 	sub.w	r8, r8, r0
 80076fe:	e7e7      	b.n	80076d0 <__sflush_r+0xd4>
 8007700:	dfbffffe 	.word	0xdfbffffe

08007704 <_fflush_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	690b      	ldr	r3, [r1, #16]
 8007708:	4605      	mov	r5, r0
 800770a:	460c      	mov	r4, r1
 800770c:	b913      	cbnz	r3, 8007714 <_fflush_r+0x10>
 800770e:	2500      	movs	r5, #0
 8007710:	4628      	mov	r0, r5
 8007712:	bd38      	pop	{r3, r4, r5, pc}
 8007714:	b118      	cbz	r0, 800771e <_fflush_r+0x1a>
 8007716:	6a03      	ldr	r3, [r0, #32]
 8007718:	b90b      	cbnz	r3, 800771e <_fflush_r+0x1a>
 800771a:	f7fd fd71 	bl	8005200 <__sinit>
 800771e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0f3      	beq.n	800770e <_fflush_r+0xa>
 8007726:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007728:	07d0      	lsls	r0, r2, #31
 800772a:	d404      	bmi.n	8007736 <_fflush_r+0x32>
 800772c:	0599      	lsls	r1, r3, #22
 800772e:	d402      	bmi.n	8007736 <_fflush_r+0x32>
 8007730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007732:	f7fe fc18 	bl	8005f66 <__retarget_lock_acquire_recursive>
 8007736:	4628      	mov	r0, r5
 8007738:	4621      	mov	r1, r4
 800773a:	f7ff ff5f 	bl	80075fc <__sflush_r>
 800773e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007740:	07da      	lsls	r2, r3, #31
 8007742:	4605      	mov	r5, r0
 8007744:	d4e4      	bmi.n	8007710 <_fflush_r+0xc>
 8007746:	89a3      	ldrh	r3, [r4, #12]
 8007748:	059b      	lsls	r3, r3, #22
 800774a:	d4e1      	bmi.n	8007710 <_fflush_r+0xc>
 800774c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800774e:	f7fe fc0b 	bl	8005f68 <__retarget_lock_release_recursive>
 8007752:	e7dd      	b.n	8007710 <_fflush_r+0xc>

08007754 <__malloc_lock>:
 8007754:	4801      	ldr	r0, [pc, #4]	@ (800775c <__malloc_lock+0x8>)
 8007756:	f7fe bc06 	b.w	8005f66 <__retarget_lock_acquire_recursive>
 800775a:	bf00      	nop
 800775c:	24000404 	.word	0x24000404

08007760 <__malloc_unlock>:
 8007760:	4801      	ldr	r0, [pc, #4]	@ (8007768 <__malloc_unlock+0x8>)
 8007762:	f7fe bc01 	b.w	8005f68 <__retarget_lock_release_recursive>
 8007766:	bf00      	nop
 8007768:	24000404 	.word	0x24000404

0800776c <_Balloc>:
 800776c:	b570      	push	{r4, r5, r6, lr}
 800776e:	69c6      	ldr	r6, [r0, #28]
 8007770:	4604      	mov	r4, r0
 8007772:	460d      	mov	r5, r1
 8007774:	b976      	cbnz	r6, 8007794 <_Balloc+0x28>
 8007776:	2010      	movs	r0, #16
 8007778:	f7ff fe84 	bl	8007484 <malloc>
 800777c:	4602      	mov	r2, r0
 800777e:	61e0      	str	r0, [r4, #28]
 8007780:	b920      	cbnz	r0, 800778c <_Balloc+0x20>
 8007782:	4b18      	ldr	r3, [pc, #96]	@ (80077e4 <_Balloc+0x78>)
 8007784:	4818      	ldr	r0, [pc, #96]	@ (80077e8 <_Balloc+0x7c>)
 8007786:	216b      	movs	r1, #107	@ 0x6b
 8007788:	f000 fd8e 	bl	80082a8 <__assert_func>
 800778c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007790:	6006      	str	r6, [r0, #0]
 8007792:	60c6      	str	r6, [r0, #12]
 8007794:	69e6      	ldr	r6, [r4, #28]
 8007796:	68f3      	ldr	r3, [r6, #12]
 8007798:	b183      	cbz	r3, 80077bc <_Balloc+0x50>
 800779a:	69e3      	ldr	r3, [r4, #28]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80077a2:	b9b8      	cbnz	r0, 80077d4 <_Balloc+0x68>
 80077a4:	2101      	movs	r1, #1
 80077a6:	fa01 f605 	lsl.w	r6, r1, r5
 80077aa:	1d72      	adds	r2, r6, #5
 80077ac:	0092      	lsls	r2, r2, #2
 80077ae:	4620      	mov	r0, r4
 80077b0:	f000 fd98 	bl	80082e4 <_calloc_r>
 80077b4:	b160      	cbz	r0, 80077d0 <_Balloc+0x64>
 80077b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80077ba:	e00e      	b.n	80077da <_Balloc+0x6e>
 80077bc:	2221      	movs	r2, #33	@ 0x21
 80077be:	2104      	movs	r1, #4
 80077c0:	4620      	mov	r0, r4
 80077c2:	f000 fd8f 	bl	80082e4 <_calloc_r>
 80077c6:	69e3      	ldr	r3, [r4, #28]
 80077c8:	60f0      	str	r0, [r6, #12]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d1e4      	bne.n	800779a <_Balloc+0x2e>
 80077d0:	2000      	movs	r0, #0
 80077d2:	bd70      	pop	{r4, r5, r6, pc}
 80077d4:	6802      	ldr	r2, [r0, #0]
 80077d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80077da:	2300      	movs	r3, #0
 80077dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80077e0:	e7f7      	b.n	80077d2 <_Balloc+0x66>
 80077e2:	bf00      	nop
 80077e4:	08008b0e 	.word	0x08008b0e
 80077e8:	08008bff 	.word	0x08008bff

080077ec <_Bfree>:
 80077ec:	b570      	push	{r4, r5, r6, lr}
 80077ee:	69c6      	ldr	r6, [r0, #28]
 80077f0:	4605      	mov	r5, r0
 80077f2:	460c      	mov	r4, r1
 80077f4:	b976      	cbnz	r6, 8007814 <_Bfree+0x28>
 80077f6:	2010      	movs	r0, #16
 80077f8:	f7ff fe44 	bl	8007484 <malloc>
 80077fc:	4602      	mov	r2, r0
 80077fe:	61e8      	str	r0, [r5, #28]
 8007800:	b920      	cbnz	r0, 800780c <_Bfree+0x20>
 8007802:	4b09      	ldr	r3, [pc, #36]	@ (8007828 <_Bfree+0x3c>)
 8007804:	4809      	ldr	r0, [pc, #36]	@ (800782c <_Bfree+0x40>)
 8007806:	218f      	movs	r1, #143	@ 0x8f
 8007808:	f000 fd4e 	bl	80082a8 <__assert_func>
 800780c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007810:	6006      	str	r6, [r0, #0]
 8007812:	60c6      	str	r6, [r0, #12]
 8007814:	b13c      	cbz	r4, 8007826 <_Bfree+0x3a>
 8007816:	69eb      	ldr	r3, [r5, #28]
 8007818:	6862      	ldr	r2, [r4, #4]
 800781a:	68db      	ldr	r3, [r3, #12]
 800781c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007820:	6021      	str	r1, [r4, #0]
 8007822:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007826:	bd70      	pop	{r4, r5, r6, pc}
 8007828:	08008b0e 	.word	0x08008b0e
 800782c:	08008bff 	.word	0x08008bff

08007830 <__multadd>:
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	690d      	ldr	r5, [r1, #16]
 8007836:	4607      	mov	r7, r0
 8007838:	460c      	mov	r4, r1
 800783a:	461e      	mov	r6, r3
 800783c:	f101 0c14 	add.w	ip, r1, #20
 8007840:	2000      	movs	r0, #0
 8007842:	f8dc 3000 	ldr.w	r3, [ip]
 8007846:	b299      	uxth	r1, r3
 8007848:	fb02 6101 	mla	r1, r2, r1, r6
 800784c:	0c1e      	lsrs	r6, r3, #16
 800784e:	0c0b      	lsrs	r3, r1, #16
 8007850:	fb02 3306 	mla	r3, r2, r6, r3
 8007854:	b289      	uxth	r1, r1
 8007856:	3001      	adds	r0, #1
 8007858:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800785c:	4285      	cmp	r5, r0
 800785e:	f84c 1b04 	str.w	r1, [ip], #4
 8007862:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007866:	dcec      	bgt.n	8007842 <__multadd+0x12>
 8007868:	b30e      	cbz	r6, 80078ae <__multadd+0x7e>
 800786a:	68a3      	ldr	r3, [r4, #8]
 800786c:	42ab      	cmp	r3, r5
 800786e:	dc19      	bgt.n	80078a4 <__multadd+0x74>
 8007870:	6861      	ldr	r1, [r4, #4]
 8007872:	4638      	mov	r0, r7
 8007874:	3101      	adds	r1, #1
 8007876:	f7ff ff79 	bl	800776c <_Balloc>
 800787a:	4680      	mov	r8, r0
 800787c:	b928      	cbnz	r0, 800788a <__multadd+0x5a>
 800787e:	4602      	mov	r2, r0
 8007880:	4b0c      	ldr	r3, [pc, #48]	@ (80078b4 <__multadd+0x84>)
 8007882:	480d      	ldr	r0, [pc, #52]	@ (80078b8 <__multadd+0x88>)
 8007884:	21ba      	movs	r1, #186	@ 0xba
 8007886:	f000 fd0f 	bl	80082a8 <__assert_func>
 800788a:	6922      	ldr	r2, [r4, #16]
 800788c:	3202      	adds	r2, #2
 800788e:	f104 010c 	add.w	r1, r4, #12
 8007892:	0092      	lsls	r2, r2, #2
 8007894:	300c      	adds	r0, #12
 8007896:	f7fe fb68 	bl	8005f6a <memcpy>
 800789a:	4621      	mov	r1, r4
 800789c:	4638      	mov	r0, r7
 800789e:	f7ff ffa5 	bl	80077ec <_Bfree>
 80078a2:	4644      	mov	r4, r8
 80078a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80078a8:	3501      	adds	r5, #1
 80078aa:	615e      	str	r6, [r3, #20]
 80078ac:	6125      	str	r5, [r4, #16]
 80078ae:	4620      	mov	r0, r4
 80078b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b4:	08008b7d 	.word	0x08008b7d
 80078b8:	08008bff 	.word	0x08008bff

080078bc <__s2b>:
 80078bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80078c0:	460c      	mov	r4, r1
 80078c2:	4615      	mov	r5, r2
 80078c4:	461f      	mov	r7, r3
 80078c6:	2209      	movs	r2, #9
 80078c8:	3308      	adds	r3, #8
 80078ca:	4606      	mov	r6, r0
 80078cc:	fb93 f3f2 	sdiv	r3, r3, r2
 80078d0:	2100      	movs	r1, #0
 80078d2:	2201      	movs	r2, #1
 80078d4:	429a      	cmp	r2, r3
 80078d6:	db09      	blt.n	80078ec <__s2b+0x30>
 80078d8:	4630      	mov	r0, r6
 80078da:	f7ff ff47 	bl	800776c <_Balloc>
 80078de:	b940      	cbnz	r0, 80078f2 <__s2b+0x36>
 80078e0:	4602      	mov	r2, r0
 80078e2:	4b19      	ldr	r3, [pc, #100]	@ (8007948 <__s2b+0x8c>)
 80078e4:	4819      	ldr	r0, [pc, #100]	@ (800794c <__s2b+0x90>)
 80078e6:	21d3      	movs	r1, #211	@ 0xd3
 80078e8:	f000 fcde 	bl	80082a8 <__assert_func>
 80078ec:	0052      	lsls	r2, r2, #1
 80078ee:	3101      	adds	r1, #1
 80078f0:	e7f0      	b.n	80078d4 <__s2b+0x18>
 80078f2:	9b08      	ldr	r3, [sp, #32]
 80078f4:	6143      	str	r3, [r0, #20]
 80078f6:	2d09      	cmp	r5, #9
 80078f8:	f04f 0301 	mov.w	r3, #1
 80078fc:	6103      	str	r3, [r0, #16]
 80078fe:	dd16      	ble.n	800792e <__s2b+0x72>
 8007900:	f104 0909 	add.w	r9, r4, #9
 8007904:	46c8      	mov	r8, r9
 8007906:	442c      	add	r4, r5
 8007908:	f818 3b01 	ldrb.w	r3, [r8], #1
 800790c:	4601      	mov	r1, r0
 800790e:	3b30      	subs	r3, #48	@ 0x30
 8007910:	220a      	movs	r2, #10
 8007912:	4630      	mov	r0, r6
 8007914:	f7ff ff8c 	bl	8007830 <__multadd>
 8007918:	45a0      	cmp	r8, r4
 800791a:	d1f5      	bne.n	8007908 <__s2b+0x4c>
 800791c:	f1a5 0408 	sub.w	r4, r5, #8
 8007920:	444c      	add	r4, r9
 8007922:	1b2d      	subs	r5, r5, r4
 8007924:	1963      	adds	r3, r4, r5
 8007926:	42bb      	cmp	r3, r7
 8007928:	db04      	blt.n	8007934 <__s2b+0x78>
 800792a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800792e:	340a      	adds	r4, #10
 8007930:	2509      	movs	r5, #9
 8007932:	e7f6      	b.n	8007922 <__s2b+0x66>
 8007934:	f814 3b01 	ldrb.w	r3, [r4], #1
 8007938:	4601      	mov	r1, r0
 800793a:	3b30      	subs	r3, #48	@ 0x30
 800793c:	220a      	movs	r2, #10
 800793e:	4630      	mov	r0, r6
 8007940:	f7ff ff76 	bl	8007830 <__multadd>
 8007944:	e7ee      	b.n	8007924 <__s2b+0x68>
 8007946:	bf00      	nop
 8007948:	08008b7d 	.word	0x08008b7d
 800794c:	08008bff 	.word	0x08008bff

08007950 <__hi0bits>:
 8007950:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007954:	4603      	mov	r3, r0
 8007956:	bf36      	itet	cc
 8007958:	0403      	lslcc	r3, r0, #16
 800795a:	2000      	movcs	r0, #0
 800795c:	2010      	movcc	r0, #16
 800795e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007962:	bf3c      	itt	cc
 8007964:	021b      	lslcc	r3, r3, #8
 8007966:	3008      	addcc	r0, #8
 8007968:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800796c:	bf3c      	itt	cc
 800796e:	011b      	lslcc	r3, r3, #4
 8007970:	3004      	addcc	r0, #4
 8007972:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007976:	bf3c      	itt	cc
 8007978:	009b      	lslcc	r3, r3, #2
 800797a:	3002      	addcc	r0, #2
 800797c:	2b00      	cmp	r3, #0
 800797e:	db05      	blt.n	800798c <__hi0bits+0x3c>
 8007980:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007984:	f100 0001 	add.w	r0, r0, #1
 8007988:	bf08      	it	eq
 800798a:	2020      	moveq	r0, #32
 800798c:	4770      	bx	lr

0800798e <__lo0bits>:
 800798e:	6803      	ldr	r3, [r0, #0]
 8007990:	4602      	mov	r2, r0
 8007992:	f013 0007 	ands.w	r0, r3, #7
 8007996:	d00b      	beq.n	80079b0 <__lo0bits+0x22>
 8007998:	07d9      	lsls	r1, r3, #31
 800799a:	d421      	bmi.n	80079e0 <__lo0bits+0x52>
 800799c:	0798      	lsls	r0, r3, #30
 800799e:	bf49      	itett	mi
 80079a0:	085b      	lsrmi	r3, r3, #1
 80079a2:	089b      	lsrpl	r3, r3, #2
 80079a4:	2001      	movmi	r0, #1
 80079a6:	6013      	strmi	r3, [r2, #0]
 80079a8:	bf5c      	itt	pl
 80079aa:	6013      	strpl	r3, [r2, #0]
 80079ac:	2002      	movpl	r0, #2
 80079ae:	4770      	bx	lr
 80079b0:	b299      	uxth	r1, r3
 80079b2:	b909      	cbnz	r1, 80079b8 <__lo0bits+0x2a>
 80079b4:	0c1b      	lsrs	r3, r3, #16
 80079b6:	2010      	movs	r0, #16
 80079b8:	b2d9      	uxtb	r1, r3
 80079ba:	b909      	cbnz	r1, 80079c0 <__lo0bits+0x32>
 80079bc:	3008      	adds	r0, #8
 80079be:	0a1b      	lsrs	r3, r3, #8
 80079c0:	0719      	lsls	r1, r3, #28
 80079c2:	bf04      	itt	eq
 80079c4:	091b      	lsreq	r3, r3, #4
 80079c6:	3004      	addeq	r0, #4
 80079c8:	0799      	lsls	r1, r3, #30
 80079ca:	bf04      	itt	eq
 80079cc:	089b      	lsreq	r3, r3, #2
 80079ce:	3002      	addeq	r0, #2
 80079d0:	07d9      	lsls	r1, r3, #31
 80079d2:	d403      	bmi.n	80079dc <__lo0bits+0x4e>
 80079d4:	085b      	lsrs	r3, r3, #1
 80079d6:	f100 0001 	add.w	r0, r0, #1
 80079da:	d003      	beq.n	80079e4 <__lo0bits+0x56>
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	4770      	bx	lr
 80079e0:	2000      	movs	r0, #0
 80079e2:	4770      	bx	lr
 80079e4:	2020      	movs	r0, #32
 80079e6:	4770      	bx	lr

080079e8 <__i2b>:
 80079e8:	b510      	push	{r4, lr}
 80079ea:	460c      	mov	r4, r1
 80079ec:	2101      	movs	r1, #1
 80079ee:	f7ff febd 	bl	800776c <_Balloc>
 80079f2:	4602      	mov	r2, r0
 80079f4:	b928      	cbnz	r0, 8007a02 <__i2b+0x1a>
 80079f6:	4b05      	ldr	r3, [pc, #20]	@ (8007a0c <__i2b+0x24>)
 80079f8:	4805      	ldr	r0, [pc, #20]	@ (8007a10 <__i2b+0x28>)
 80079fa:	f240 1145 	movw	r1, #325	@ 0x145
 80079fe:	f000 fc53 	bl	80082a8 <__assert_func>
 8007a02:	2301      	movs	r3, #1
 8007a04:	6144      	str	r4, [r0, #20]
 8007a06:	6103      	str	r3, [r0, #16]
 8007a08:	bd10      	pop	{r4, pc}
 8007a0a:	bf00      	nop
 8007a0c:	08008b7d 	.word	0x08008b7d
 8007a10:	08008bff 	.word	0x08008bff

08007a14 <__multiply>:
 8007a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a18:	4614      	mov	r4, r2
 8007a1a:	690a      	ldr	r2, [r1, #16]
 8007a1c:	6923      	ldr	r3, [r4, #16]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	bfa8      	it	ge
 8007a22:	4623      	movge	r3, r4
 8007a24:	460f      	mov	r7, r1
 8007a26:	bfa4      	itt	ge
 8007a28:	460c      	movge	r4, r1
 8007a2a:	461f      	movge	r7, r3
 8007a2c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007a30:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007a34:	68a3      	ldr	r3, [r4, #8]
 8007a36:	6861      	ldr	r1, [r4, #4]
 8007a38:	eb0a 0609 	add.w	r6, sl, r9
 8007a3c:	42b3      	cmp	r3, r6
 8007a3e:	b085      	sub	sp, #20
 8007a40:	bfb8      	it	lt
 8007a42:	3101      	addlt	r1, #1
 8007a44:	f7ff fe92 	bl	800776c <_Balloc>
 8007a48:	b930      	cbnz	r0, 8007a58 <__multiply+0x44>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	4b44      	ldr	r3, [pc, #272]	@ (8007b60 <__multiply+0x14c>)
 8007a4e:	4845      	ldr	r0, [pc, #276]	@ (8007b64 <__multiply+0x150>)
 8007a50:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007a54:	f000 fc28 	bl	80082a8 <__assert_func>
 8007a58:	f100 0514 	add.w	r5, r0, #20
 8007a5c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007a60:	462b      	mov	r3, r5
 8007a62:	2200      	movs	r2, #0
 8007a64:	4543      	cmp	r3, r8
 8007a66:	d321      	bcc.n	8007aac <__multiply+0x98>
 8007a68:	f107 0114 	add.w	r1, r7, #20
 8007a6c:	f104 0214 	add.w	r2, r4, #20
 8007a70:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007a74:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007a78:	9302      	str	r3, [sp, #8]
 8007a7a:	1b13      	subs	r3, r2, r4
 8007a7c:	3b15      	subs	r3, #21
 8007a7e:	f023 0303 	bic.w	r3, r3, #3
 8007a82:	3304      	adds	r3, #4
 8007a84:	f104 0715 	add.w	r7, r4, #21
 8007a88:	42ba      	cmp	r2, r7
 8007a8a:	bf38      	it	cc
 8007a8c:	2304      	movcc	r3, #4
 8007a8e:	9301      	str	r3, [sp, #4]
 8007a90:	9b02      	ldr	r3, [sp, #8]
 8007a92:	9103      	str	r1, [sp, #12]
 8007a94:	428b      	cmp	r3, r1
 8007a96:	d80c      	bhi.n	8007ab2 <__multiply+0x9e>
 8007a98:	2e00      	cmp	r6, #0
 8007a9a:	dd03      	ble.n	8007aa4 <__multiply+0x90>
 8007a9c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d05b      	beq.n	8007b5c <__multiply+0x148>
 8007aa4:	6106      	str	r6, [r0, #16]
 8007aa6:	b005      	add	sp, #20
 8007aa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aac:	f843 2b04 	str.w	r2, [r3], #4
 8007ab0:	e7d8      	b.n	8007a64 <__multiply+0x50>
 8007ab2:	f8b1 a000 	ldrh.w	sl, [r1]
 8007ab6:	f1ba 0f00 	cmp.w	sl, #0
 8007aba:	d024      	beq.n	8007b06 <__multiply+0xf2>
 8007abc:	f104 0e14 	add.w	lr, r4, #20
 8007ac0:	46a9      	mov	r9, r5
 8007ac2:	f04f 0c00 	mov.w	ip, #0
 8007ac6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007aca:	f8d9 3000 	ldr.w	r3, [r9]
 8007ace:	fa1f fb87 	uxth.w	fp, r7
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	fb0a 330b 	mla	r3, sl, fp, r3
 8007ad8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007adc:	f8d9 7000 	ldr.w	r7, [r9]
 8007ae0:	4463      	add	r3, ip
 8007ae2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007ae6:	fb0a c70b 	mla	r7, sl, fp, ip
 8007aea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007aee:	b29b      	uxth	r3, r3
 8007af0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007af4:	4572      	cmp	r2, lr
 8007af6:	f849 3b04 	str.w	r3, [r9], #4
 8007afa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007afe:	d8e2      	bhi.n	8007ac6 <__multiply+0xb2>
 8007b00:	9b01      	ldr	r3, [sp, #4]
 8007b02:	f845 c003 	str.w	ip, [r5, r3]
 8007b06:	9b03      	ldr	r3, [sp, #12]
 8007b08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007b0c:	3104      	adds	r1, #4
 8007b0e:	f1b9 0f00 	cmp.w	r9, #0
 8007b12:	d021      	beq.n	8007b58 <__multiply+0x144>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	f104 0c14 	add.w	ip, r4, #20
 8007b1a:	46ae      	mov	lr, r5
 8007b1c:	f04f 0a00 	mov.w	sl, #0
 8007b20:	f8bc b000 	ldrh.w	fp, [ip]
 8007b24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007b28:	fb09 770b 	mla	r7, r9, fp, r7
 8007b2c:	4457      	add	r7, sl
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007b34:	f84e 3b04 	str.w	r3, [lr], #4
 8007b38:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007b3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b40:	f8be 3000 	ldrh.w	r3, [lr]
 8007b44:	fb09 330a 	mla	r3, r9, sl, r3
 8007b48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007b4c:	4562      	cmp	r2, ip
 8007b4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007b52:	d8e5      	bhi.n	8007b20 <__multiply+0x10c>
 8007b54:	9f01      	ldr	r7, [sp, #4]
 8007b56:	51eb      	str	r3, [r5, r7]
 8007b58:	3504      	adds	r5, #4
 8007b5a:	e799      	b.n	8007a90 <__multiply+0x7c>
 8007b5c:	3e01      	subs	r6, #1
 8007b5e:	e79b      	b.n	8007a98 <__multiply+0x84>
 8007b60:	08008b7d 	.word	0x08008b7d
 8007b64:	08008bff 	.word	0x08008bff

08007b68 <__pow5mult>:
 8007b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b6c:	4615      	mov	r5, r2
 8007b6e:	f012 0203 	ands.w	r2, r2, #3
 8007b72:	4607      	mov	r7, r0
 8007b74:	460e      	mov	r6, r1
 8007b76:	d007      	beq.n	8007b88 <__pow5mult+0x20>
 8007b78:	4c25      	ldr	r4, [pc, #148]	@ (8007c10 <__pow5mult+0xa8>)
 8007b7a:	3a01      	subs	r2, #1
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007b82:	f7ff fe55 	bl	8007830 <__multadd>
 8007b86:	4606      	mov	r6, r0
 8007b88:	10ad      	asrs	r5, r5, #2
 8007b8a:	d03d      	beq.n	8007c08 <__pow5mult+0xa0>
 8007b8c:	69fc      	ldr	r4, [r7, #28]
 8007b8e:	b97c      	cbnz	r4, 8007bb0 <__pow5mult+0x48>
 8007b90:	2010      	movs	r0, #16
 8007b92:	f7ff fc77 	bl	8007484 <malloc>
 8007b96:	4602      	mov	r2, r0
 8007b98:	61f8      	str	r0, [r7, #28]
 8007b9a:	b928      	cbnz	r0, 8007ba8 <__pow5mult+0x40>
 8007b9c:	4b1d      	ldr	r3, [pc, #116]	@ (8007c14 <__pow5mult+0xac>)
 8007b9e:	481e      	ldr	r0, [pc, #120]	@ (8007c18 <__pow5mult+0xb0>)
 8007ba0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ba4:	f000 fb80 	bl	80082a8 <__assert_func>
 8007ba8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007bac:	6004      	str	r4, [r0, #0]
 8007bae:	60c4      	str	r4, [r0, #12]
 8007bb0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8007bb4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007bb8:	b94c      	cbnz	r4, 8007bce <__pow5mult+0x66>
 8007bba:	f240 2171 	movw	r1, #625	@ 0x271
 8007bbe:	4638      	mov	r0, r7
 8007bc0:	f7ff ff12 	bl	80079e8 <__i2b>
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	f8c8 0008 	str.w	r0, [r8, #8]
 8007bca:	4604      	mov	r4, r0
 8007bcc:	6003      	str	r3, [r0, #0]
 8007bce:	f04f 0900 	mov.w	r9, #0
 8007bd2:	07eb      	lsls	r3, r5, #31
 8007bd4:	d50a      	bpl.n	8007bec <__pow5mult+0x84>
 8007bd6:	4631      	mov	r1, r6
 8007bd8:	4622      	mov	r2, r4
 8007bda:	4638      	mov	r0, r7
 8007bdc:	f7ff ff1a 	bl	8007a14 <__multiply>
 8007be0:	4631      	mov	r1, r6
 8007be2:	4680      	mov	r8, r0
 8007be4:	4638      	mov	r0, r7
 8007be6:	f7ff fe01 	bl	80077ec <_Bfree>
 8007bea:	4646      	mov	r6, r8
 8007bec:	106d      	asrs	r5, r5, #1
 8007bee:	d00b      	beq.n	8007c08 <__pow5mult+0xa0>
 8007bf0:	6820      	ldr	r0, [r4, #0]
 8007bf2:	b938      	cbnz	r0, 8007c04 <__pow5mult+0x9c>
 8007bf4:	4622      	mov	r2, r4
 8007bf6:	4621      	mov	r1, r4
 8007bf8:	4638      	mov	r0, r7
 8007bfa:	f7ff ff0b 	bl	8007a14 <__multiply>
 8007bfe:	6020      	str	r0, [r4, #0]
 8007c00:	f8c0 9000 	str.w	r9, [r0]
 8007c04:	4604      	mov	r4, r0
 8007c06:	e7e4      	b.n	8007bd2 <__pow5mult+0x6a>
 8007c08:	4630      	mov	r0, r6
 8007c0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c0e:	bf00      	nop
 8007c10:	08008c58 	.word	0x08008c58
 8007c14:	08008b0e 	.word	0x08008b0e
 8007c18:	08008bff 	.word	0x08008bff

08007c1c <__lshift>:
 8007c1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c20:	460c      	mov	r4, r1
 8007c22:	6849      	ldr	r1, [r1, #4]
 8007c24:	6923      	ldr	r3, [r4, #16]
 8007c26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007c2a:	68a3      	ldr	r3, [r4, #8]
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	4691      	mov	r9, r2
 8007c30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007c34:	f108 0601 	add.w	r6, r8, #1
 8007c38:	42b3      	cmp	r3, r6
 8007c3a:	db0b      	blt.n	8007c54 <__lshift+0x38>
 8007c3c:	4638      	mov	r0, r7
 8007c3e:	f7ff fd95 	bl	800776c <_Balloc>
 8007c42:	4605      	mov	r5, r0
 8007c44:	b948      	cbnz	r0, 8007c5a <__lshift+0x3e>
 8007c46:	4602      	mov	r2, r0
 8007c48:	4b28      	ldr	r3, [pc, #160]	@ (8007cec <__lshift+0xd0>)
 8007c4a:	4829      	ldr	r0, [pc, #164]	@ (8007cf0 <__lshift+0xd4>)
 8007c4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007c50:	f000 fb2a 	bl	80082a8 <__assert_func>
 8007c54:	3101      	adds	r1, #1
 8007c56:	005b      	lsls	r3, r3, #1
 8007c58:	e7ee      	b.n	8007c38 <__lshift+0x1c>
 8007c5a:	2300      	movs	r3, #0
 8007c5c:	f100 0114 	add.w	r1, r0, #20
 8007c60:	f100 0210 	add.w	r2, r0, #16
 8007c64:	4618      	mov	r0, r3
 8007c66:	4553      	cmp	r3, sl
 8007c68:	db33      	blt.n	8007cd2 <__lshift+0xb6>
 8007c6a:	6920      	ldr	r0, [r4, #16]
 8007c6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007c70:	f104 0314 	add.w	r3, r4, #20
 8007c74:	f019 091f 	ands.w	r9, r9, #31
 8007c78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007c7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007c80:	d02b      	beq.n	8007cda <__lshift+0xbe>
 8007c82:	f1c9 0e20 	rsb	lr, r9, #32
 8007c86:	468a      	mov	sl, r1
 8007c88:	2200      	movs	r2, #0
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	fa00 f009 	lsl.w	r0, r0, r9
 8007c90:	4310      	orrs	r0, r2
 8007c92:	f84a 0b04 	str.w	r0, [sl], #4
 8007c96:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c9a:	459c      	cmp	ip, r3
 8007c9c:	fa22 f20e 	lsr.w	r2, r2, lr
 8007ca0:	d8f3      	bhi.n	8007c8a <__lshift+0x6e>
 8007ca2:	ebac 0304 	sub.w	r3, ip, r4
 8007ca6:	3b15      	subs	r3, #21
 8007ca8:	f023 0303 	bic.w	r3, r3, #3
 8007cac:	3304      	adds	r3, #4
 8007cae:	f104 0015 	add.w	r0, r4, #21
 8007cb2:	4584      	cmp	ip, r0
 8007cb4:	bf38      	it	cc
 8007cb6:	2304      	movcc	r3, #4
 8007cb8:	50ca      	str	r2, [r1, r3]
 8007cba:	b10a      	cbz	r2, 8007cc0 <__lshift+0xa4>
 8007cbc:	f108 0602 	add.w	r6, r8, #2
 8007cc0:	3e01      	subs	r6, #1
 8007cc2:	4638      	mov	r0, r7
 8007cc4:	612e      	str	r6, [r5, #16]
 8007cc6:	4621      	mov	r1, r4
 8007cc8:	f7ff fd90 	bl	80077ec <_Bfree>
 8007ccc:	4628      	mov	r0, r5
 8007cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cd2:	f842 0f04 	str.w	r0, [r2, #4]!
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	e7c5      	b.n	8007c66 <__lshift+0x4a>
 8007cda:	3904      	subs	r1, #4
 8007cdc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ce0:	f841 2f04 	str.w	r2, [r1, #4]!
 8007ce4:	459c      	cmp	ip, r3
 8007ce6:	d8f9      	bhi.n	8007cdc <__lshift+0xc0>
 8007ce8:	e7ea      	b.n	8007cc0 <__lshift+0xa4>
 8007cea:	bf00      	nop
 8007cec:	08008b7d 	.word	0x08008b7d
 8007cf0:	08008bff 	.word	0x08008bff

08007cf4 <__mcmp>:
 8007cf4:	690a      	ldr	r2, [r1, #16]
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	6900      	ldr	r0, [r0, #16]
 8007cfa:	1a80      	subs	r0, r0, r2
 8007cfc:	b530      	push	{r4, r5, lr}
 8007cfe:	d10e      	bne.n	8007d1e <__mcmp+0x2a>
 8007d00:	3314      	adds	r3, #20
 8007d02:	3114      	adds	r1, #20
 8007d04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007d08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007d0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007d10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007d14:	4295      	cmp	r5, r2
 8007d16:	d003      	beq.n	8007d20 <__mcmp+0x2c>
 8007d18:	d205      	bcs.n	8007d26 <__mcmp+0x32>
 8007d1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007d1e:	bd30      	pop	{r4, r5, pc}
 8007d20:	42a3      	cmp	r3, r4
 8007d22:	d3f3      	bcc.n	8007d0c <__mcmp+0x18>
 8007d24:	e7fb      	b.n	8007d1e <__mcmp+0x2a>
 8007d26:	2001      	movs	r0, #1
 8007d28:	e7f9      	b.n	8007d1e <__mcmp+0x2a>
	...

08007d2c <__mdiff>:
 8007d2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d30:	4689      	mov	r9, r1
 8007d32:	4606      	mov	r6, r0
 8007d34:	4611      	mov	r1, r2
 8007d36:	4648      	mov	r0, r9
 8007d38:	4614      	mov	r4, r2
 8007d3a:	f7ff ffdb 	bl	8007cf4 <__mcmp>
 8007d3e:	1e05      	subs	r5, r0, #0
 8007d40:	d112      	bne.n	8007d68 <__mdiff+0x3c>
 8007d42:	4629      	mov	r1, r5
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7ff fd11 	bl	800776c <_Balloc>
 8007d4a:	4602      	mov	r2, r0
 8007d4c:	b928      	cbnz	r0, 8007d5a <__mdiff+0x2e>
 8007d4e:	4b3f      	ldr	r3, [pc, #252]	@ (8007e4c <__mdiff+0x120>)
 8007d50:	f240 2137 	movw	r1, #567	@ 0x237
 8007d54:	483e      	ldr	r0, [pc, #248]	@ (8007e50 <__mdiff+0x124>)
 8007d56:	f000 faa7 	bl	80082a8 <__assert_func>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007d60:	4610      	mov	r0, r2
 8007d62:	b003      	add	sp, #12
 8007d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d68:	bfbc      	itt	lt
 8007d6a:	464b      	movlt	r3, r9
 8007d6c:	46a1      	movlt	r9, r4
 8007d6e:	4630      	mov	r0, r6
 8007d70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007d74:	bfba      	itte	lt
 8007d76:	461c      	movlt	r4, r3
 8007d78:	2501      	movlt	r5, #1
 8007d7a:	2500      	movge	r5, #0
 8007d7c:	f7ff fcf6 	bl	800776c <_Balloc>
 8007d80:	4602      	mov	r2, r0
 8007d82:	b918      	cbnz	r0, 8007d8c <__mdiff+0x60>
 8007d84:	4b31      	ldr	r3, [pc, #196]	@ (8007e4c <__mdiff+0x120>)
 8007d86:	f240 2145 	movw	r1, #581	@ 0x245
 8007d8a:	e7e3      	b.n	8007d54 <__mdiff+0x28>
 8007d8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007d90:	6926      	ldr	r6, [r4, #16]
 8007d92:	60c5      	str	r5, [r0, #12]
 8007d94:	f109 0310 	add.w	r3, r9, #16
 8007d98:	f109 0514 	add.w	r5, r9, #20
 8007d9c:	f104 0e14 	add.w	lr, r4, #20
 8007da0:	f100 0b14 	add.w	fp, r0, #20
 8007da4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007da8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007dac:	9301      	str	r3, [sp, #4]
 8007dae:	46d9      	mov	r9, fp
 8007db0:	f04f 0c00 	mov.w	ip, #0
 8007db4:	9b01      	ldr	r3, [sp, #4]
 8007db6:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007dba:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007dbe:	9301      	str	r3, [sp, #4]
 8007dc0:	fa1f f38a 	uxth.w	r3, sl
 8007dc4:	4619      	mov	r1, r3
 8007dc6:	b283      	uxth	r3, r0
 8007dc8:	1acb      	subs	r3, r1, r3
 8007dca:	0c00      	lsrs	r0, r0, #16
 8007dcc:	4463      	add	r3, ip
 8007dce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007dd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8007dd6:	b29b      	uxth	r3, r3
 8007dd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007ddc:	4576      	cmp	r6, lr
 8007dde:	f849 3b04 	str.w	r3, [r9], #4
 8007de2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007de6:	d8e5      	bhi.n	8007db4 <__mdiff+0x88>
 8007de8:	1b33      	subs	r3, r6, r4
 8007dea:	3b15      	subs	r3, #21
 8007dec:	f023 0303 	bic.w	r3, r3, #3
 8007df0:	3415      	adds	r4, #21
 8007df2:	3304      	adds	r3, #4
 8007df4:	42a6      	cmp	r6, r4
 8007df6:	bf38      	it	cc
 8007df8:	2304      	movcc	r3, #4
 8007dfa:	441d      	add	r5, r3
 8007dfc:	445b      	add	r3, fp
 8007dfe:	461e      	mov	r6, r3
 8007e00:	462c      	mov	r4, r5
 8007e02:	4544      	cmp	r4, r8
 8007e04:	d30e      	bcc.n	8007e24 <__mdiff+0xf8>
 8007e06:	f108 0103 	add.w	r1, r8, #3
 8007e0a:	1b49      	subs	r1, r1, r5
 8007e0c:	f021 0103 	bic.w	r1, r1, #3
 8007e10:	3d03      	subs	r5, #3
 8007e12:	45a8      	cmp	r8, r5
 8007e14:	bf38      	it	cc
 8007e16:	2100      	movcc	r1, #0
 8007e18:	440b      	add	r3, r1
 8007e1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007e1e:	b191      	cbz	r1, 8007e46 <__mdiff+0x11a>
 8007e20:	6117      	str	r7, [r2, #16]
 8007e22:	e79d      	b.n	8007d60 <__mdiff+0x34>
 8007e24:	f854 1b04 	ldr.w	r1, [r4], #4
 8007e28:	46e6      	mov	lr, ip
 8007e2a:	0c08      	lsrs	r0, r1, #16
 8007e2c:	fa1c fc81 	uxtah	ip, ip, r1
 8007e30:	4471      	add	r1, lr
 8007e32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8007e36:	b289      	uxth	r1, r1
 8007e38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007e3c:	f846 1b04 	str.w	r1, [r6], #4
 8007e40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007e44:	e7dd      	b.n	8007e02 <__mdiff+0xd6>
 8007e46:	3f01      	subs	r7, #1
 8007e48:	e7e7      	b.n	8007e1a <__mdiff+0xee>
 8007e4a:	bf00      	nop
 8007e4c:	08008b7d 	.word	0x08008b7d
 8007e50:	08008bff 	.word	0x08008bff

08007e54 <__ulp>:
 8007e54:	b082      	sub	sp, #8
 8007e56:	ed8d 0b00 	vstr	d0, [sp]
 8007e5a:	9a01      	ldr	r2, [sp, #4]
 8007e5c:	4b0f      	ldr	r3, [pc, #60]	@ (8007e9c <__ulp+0x48>)
 8007e5e:	4013      	ands	r3, r2
 8007e60:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	dc08      	bgt.n	8007e7a <__ulp+0x26>
 8007e68:	425b      	negs	r3, r3
 8007e6a:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007e6e:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007e72:	da04      	bge.n	8007e7e <__ulp+0x2a>
 8007e74:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8007e78:	4113      	asrs	r3, r2
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	e008      	b.n	8007e90 <__ulp+0x3c>
 8007e7e:	f1a2 0314 	sub.w	r3, r2, #20
 8007e82:	2b1e      	cmp	r3, #30
 8007e84:	bfda      	itte	le
 8007e86:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8007e8a:	40da      	lsrle	r2, r3
 8007e8c:	2201      	movgt	r2, #1
 8007e8e:	2300      	movs	r3, #0
 8007e90:	4619      	mov	r1, r3
 8007e92:	4610      	mov	r0, r2
 8007e94:	ec41 0b10 	vmov	d0, r0, r1
 8007e98:	b002      	add	sp, #8
 8007e9a:	4770      	bx	lr
 8007e9c:	7ff00000 	.word	0x7ff00000

08007ea0 <__b2d>:
 8007ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea4:	6906      	ldr	r6, [r0, #16]
 8007ea6:	f100 0814 	add.w	r8, r0, #20
 8007eaa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8007eae:	1f37      	subs	r7, r6, #4
 8007eb0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007eb4:	4610      	mov	r0, r2
 8007eb6:	f7ff fd4b 	bl	8007950 <__hi0bits>
 8007eba:	f1c0 0320 	rsb	r3, r0, #32
 8007ebe:	280a      	cmp	r0, #10
 8007ec0:	600b      	str	r3, [r1, #0]
 8007ec2:	491b      	ldr	r1, [pc, #108]	@ (8007f30 <__b2d+0x90>)
 8007ec4:	dc15      	bgt.n	8007ef2 <__b2d+0x52>
 8007ec6:	f1c0 0c0b 	rsb	ip, r0, #11
 8007eca:	fa22 f30c 	lsr.w	r3, r2, ip
 8007ece:	45b8      	cmp	r8, r7
 8007ed0:	ea43 0501 	orr.w	r5, r3, r1
 8007ed4:	bf34      	ite	cc
 8007ed6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007eda:	2300      	movcs	r3, #0
 8007edc:	3015      	adds	r0, #21
 8007ede:	fa02 f000 	lsl.w	r0, r2, r0
 8007ee2:	fa23 f30c 	lsr.w	r3, r3, ip
 8007ee6:	4303      	orrs	r3, r0
 8007ee8:	461c      	mov	r4, r3
 8007eea:	ec45 4b10 	vmov	d0, r4, r5
 8007eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ef2:	45b8      	cmp	r8, r7
 8007ef4:	bf3a      	itte	cc
 8007ef6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8007efa:	f1a6 0708 	subcc.w	r7, r6, #8
 8007efe:	2300      	movcs	r3, #0
 8007f00:	380b      	subs	r0, #11
 8007f02:	d012      	beq.n	8007f2a <__b2d+0x8a>
 8007f04:	f1c0 0120 	rsb	r1, r0, #32
 8007f08:	fa23 f401 	lsr.w	r4, r3, r1
 8007f0c:	4082      	lsls	r2, r0
 8007f0e:	4322      	orrs	r2, r4
 8007f10:	4547      	cmp	r7, r8
 8007f12:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8007f16:	bf8c      	ite	hi
 8007f18:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007f1c:	2200      	movls	r2, #0
 8007f1e:	4083      	lsls	r3, r0
 8007f20:	40ca      	lsrs	r2, r1
 8007f22:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8007f26:	4313      	orrs	r3, r2
 8007f28:	e7de      	b.n	8007ee8 <__b2d+0x48>
 8007f2a:	ea42 0501 	orr.w	r5, r2, r1
 8007f2e:	e7db      	b.n	8007ee8 <__b2d+0x48>
 8007f30:	3ff00000 	.word	0x3ff00000

08007f34 <__d2b>:
 8007f34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007f38:	460f      	mov	r7, r1
 8007f3a:	2101      	movs	r1, #1
 8007f3c:	ec59 8b10 	vmov	r8, r9, d0
 8007f40:	4616      	mov	r6, r2
 8007f42:	f7ff fc13 	bl	800776c <_Balloc>
 8007f46:	4604      	mov	r4, r0
 8007f48:	b930      	cbnz	r0, 8007f58 <__d2b+0x24>
 8007f4a:	4602      	mov	r2, r0
 8007f4c:	4b23      	ldr	r3, [pc, #140]	@ (8007fdc <__d2b+0xa8>)
 8007f4e:	4824      	ldr	r0, [pc, #144]	@ (8007fe0 <__d2b+0xac>)
 8007f50:	f240 310f 	movw	r1, #783	@ 0x30f
 8007f54:	f000 f9a8 	bl	80082a8 <__assert_func>
 8007f58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007f5c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007f60:	b10d      	cbz	r5, 8007f66 <__d2b+0x32>
 8007f62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007f66:	9301      	str	r3, [sp, #4]
 8007f68:	f1b8 0300 	subs.w	r3, r8, #0
 8007f6c:	d023      	beq.n	8007fb6 <__d2b+0x82>
 8007f6e:	4668      	mov	r0, sp
 8007f70:	9300      	str	r3, [sp, #0]
 8007f72:	f7ff fd0c 	bl	800798e <__lo0bits>
 8007f76:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007f7a:	b1d0      	cbz	r0, 8007fb2 <__d2b+0x7e>
 8007f7c:	f1c0 0320 	rsb	r3, r0, #32
 8007f80:	fa02 f303 	lsl.w	r3, r2, r3
 8007f84:	430b      	orrs	r3, r1
 8007f86:	40c2      	lsrs	r2, r0
 8007f88:	6163      	str	r3, [r4, #20]
 8007f8a:	9201      	str	r2, [sp, #4]
 8007f8c:	9b01      	ldr	r3, [sp, #4]
 8007f8e:	61a3      	str	r3, [r4, #24]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	bf0c      	ite	eq
 8007f94:	2201      	moveq	r2, #1
 8007f96:	2202      	movne	r2, #2
 8007f98:	6122      	str	r2, [r4, #16]
 8007f9a:	b1a5      	cbz	r5, 8007fc6 <__d2b+0x92>
 8007f9c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007fa0:	4405      	add	r5, r0
 8007fa2:	603d      	str	r5, [r7, #0]
 8007fa4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007fa8:	6030      	str	r0, [r6, #0]
 8007faa:	4620      	mov	r0, r4
 8007fac:	b003      	add	sp, #12
 8007fae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007fb2:	6161      	str	r1, [r4, #20]
 8007fb4:	e7ea      	b.n	8007f8c <__d2b+0x58>
 8007fb6:	a801      	add	r0, sp, #4
 8007fb8:	f7ff fce9 	bl	800798e <__lo0bits>
 8007fbc:	9b01      	ldr	r3, [sp, #4]
 8007fbe:	6163      	str	r3, [r4, #20]
 8007fc0:	3020      	adds	r0, #32
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	e7e8      	b.n	8007f98 <__d2b+0x64>
 8007fc6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007fca:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007fce:	6038      	str	r0, [r7, #0]
 8007fd0:	6918      	ldr	r0, [r3, #16]
 8007fd2:	f7ff fcbd 	bl	8007950 <__hi0bits>
 8007fd6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007fda:	e7e5      	b.n	8007fa8 <__d2b+0x74>
 8007fdc:	08008b7d 	.word	0x08008b7d
 8007fe0:	08008bff 	.word	0x08008bff

08007fe4 <__ratio>:
 8007fe4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fe8:	4688      	mov	r8, r1
 8007fea:	4669      	mov	r1, sp
 8007fec:	4681      	mov	r9, r0
 8007fee:	f7ff ff57 	bl	8007ea0 <__b2d>
 8007ff2:	a901      	add	r1, sp, #4
 8007ff4:	4640      	mov	r0, r8
 8007ff6:	ec55 4b10 	vmov	r4, r5, d0
 8007ffa:	f7ff ff51 	bl	8007ea0 <__b2d>
 8007ffe:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008002:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008006:	1ad2      	subs	r2, r2, r3
 8008008:	e9dd 3100 	ldrd	r3, r1, [sp]
 800800c:	1a5b      	subs	r3, r3, r1
 800800e:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008012:	ec57 6b10 	vmov	r6, r7, d0
 8008016:	2b00      	cmp	r3, #0
 8008018:	bfd6      	itet	le
 800801a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800801e:	462a      	movgt	r2, r5
 8008020:	463a      	movle	r2, r7
 8008022:	46ab      	mov	fp, r5
 8008024:	46a2      	mov	sl, r4
 8008026:	bfce      	itee	gt
 8008028:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 800802c:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8008030:	ee00 3a90 	vmovle	s1, r3
 8008034:	ec4b ab17 	vmov	d7, sl, fp
 8008038:	ee87 0b00 	vdiv.f64	d0, d7, d0
 800803c:	b003      	add	sp, #12
 800803e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008042 <__copybits>:
 8008042:	3901      	subs	r1, #1
 8008044:	b570      	push	{r4, r5, r6, lr}
 8008046:	1149      	asrs	r1, r1, #5
 8008048:	6914      	ldr	r4, [r2, #16]
 800804a:	3101      	adds	r1, #1
 800804c:	f102 0314 	add.w	r3, r2, #20
 8008050:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008054:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008058:	1f05      	subs	r5, r0, #4
 800805a:	42a3      	cmp	r3, r4
 800805c:	d30c      	bcc.n	8008078 <__copybits+0x36>
 800805e:	1aa3      	subs	r3, r4, r2
 8008060:	3b11      	subs	r3, #17
 8008062:	f023 0303 	bic.w	r3, r3, #3
 8008066:	3211      	adds	r2, #17
 8008068:	42a2      	cmp	r2, r4
 800806a:	bf88      	it	hi
 800806c:	2300      	movhi	r3, #0
 800806e:	4418      	add	r0, r3
 8008070:	2300      	movs	r3, #0
 8008072:	4288      	cmp	r0, r1
 8008074:	d305      	bcc.n	8008082 <__copybits+0x40>
 8008076:	bd70      	pop	{r4, r5, r6, pc}
 8008078:	f853 6b04 	ldr.w	r6, [r3], #4
 800807c:	f845 6f04 	str.w	r6, [r5, #4]!
 8008080:	e7eb      	b.n	800805a <__copybits+0x18>
 8008082:	f840 3b04 	str.w	r3, [r0], #4
 8008086:	e7f4      	b.n	8008072 <__copybits+0x30>

08008088 <__any_on>:
 8008088:	f100 0214 	add.w	r2, r0, #20
 800808c:	6900      	ldr	r0, [r0, #16]
 800808e:	114b      	asrs	r3, r1, #5
 8008090:	4298      	cmp	r0, r3
 8008092:	b510      	push	{r4, lr}
 8008094:	db11      	blt.n	80080ba <__any_on+0x32>
 8008096:	dd0a      	ble.n	80080ae <__any_on+0x26>
 8008098:	f011 011f 	ands.w	r1, r1, #31
 800809c:	d007      	beq.n	80080ae <__any_on+0x26>
 800809e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80080a2:	fa24 f001 	lsr.w	r0, r4, r1
 80080a6:	fa00 f101 	lsl.w	r1, r0, r1
 80080aa:	428c      	cmp	r4, r1
 80080ac:	d10b      	bne.n	80080c6 <__any_on+0x3e>
 80080ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d803      	bhi.n	80080be <__any_on+0x36>
 80080b6:	2000      	movs	r0, #0
 80080b8:	bd10      	pop	{r4, pc}
 80080ba:	4603      	mov	r3, r0
 80080bc:	e7f7      	b.n	80080ae <__any_on+0x26>
 80080be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80080c2:	2900      	cmp	r1, #0
 80080c4:	d0f5      	beq.n	80080b2 <__any_on+0x2a>
 80080c6:	2001      	movs	r0, #1
 80080c8:	e7f6      	b.n	80080b8 <__any_on+0x30>

080080ca <__sread>:
 80080ca:	b510      	push	{r4, lr}
 80080cc:	460c      	mov	r4, r1
 80080ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80080d2:	f000 f8b5 	bl	8008240 <_read_r>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	bfab      	itete	ge
 80080da:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80080dc:	89a3      	ldrhlt	r3, [r4, #12]
 80080de:	181b      	addge	r3, r3, r0
 80080e0:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80080e4:	bfac      	ite	ge
 80080e6:	6563      	strge	r3, [r4, #84]	@ 0x54
 80080e8:	81a3      	strhlt	r3, [r4, #12]
 80080ea:	bd10      	pop	{r4, pc}

080080ec <__swrite>:
 80080ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80080f0:	461f      	mov	r7, r3
 80080f2:	898b      	ldrh	r3, [r1, #12]
 80080f4:	05db      	lsls	r3, r3, #23
 80080f6:	4605      	mov	r5, r0
 80080f8:	460c      	mov	r4, r1
 80080fa:	4616      	mov	r6, r2
 80080fc:	d505      	bpl.n	800810a <__swrite+0x1e>
 80080fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008102:	2302      	movs	r3, #2
 8008104:	2200      	movs	r2, #0
 8008106:	f000 f889 	bl	800821c <_lseek_r>
 800810a:	89a3      	ldrh	r3, [r4, #12]
 800810c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008110:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008114:	81a3      	strh	r3, [r4, #12]
 8008116:	4632      	mov	r2, r6
 8008118:	463b      	mov	r3, r7
 800811a:	4628      	mov	r0, r5
 800811c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008120:	f000 b8b0 	b.w	8008284 <_write_r>

08008124 <__sseek>:
 8008124:	b510      	push	{r4, lr}
 8008126:	460c      	mov	r4, r1
 8008128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800812c:	f000 f876 	bl	800821c <_lseek_r>
 8008130:	1c43      	adds	r3, r0, #1
 8008132:	89a3      	ldrh	r3, [r4, #12]
 8008134:	bf15      	itete	ne
 8008136:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008138:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800813c:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008140:	81a3      	strheq	r3, [r4, #12]
 8008142:	bf18      	it	ne
 8008144:	81a3      	strhne	r3, [r4, #12]
 8008146:	bd10      	pop	{r4, pc}

08008148 <__sclose>:
 8008148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800814c:	f000 b856 	b.w	80081fc <_close_r>

08008150 <_realloc_r>:
 8008150:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008154:	4680      	mov	r8, r0
 8008156:	4615      	mov	r5, r2
 8008158:	460c      	mov	r4, r1
 800815a:	b921      	cbnz	r1, 8008166 <_realloc_r+0x16>
 800815c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008160:	4611      	mov	r1, r2
 8008162:	f7ff b9b9 	b.w	80074d8 <_malloc_r>
 8008166:	b92a      	cbnz	r2, 8008174 <_realloc_r+0x24>
 8008168:	f000 f8d0 	bl	800830c <_free_r>
 800816c:	2400      	movs	r4, #0
 800816e:	4620      	mov	r0, r4
 8008170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008174:	f000 f914 	bl	80083a0 <_malloc_usable_size_r>
 8008178:	4285      	cmp	r5, r0
 800817a:	4606      	mov	r6, r0
 800817c:	d802      	bhi.n	8008184 <_realloc_r+0x34>
 800817e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008182:	d8f4      	bhi.n	800816e <_realloc_r+0x1e>
 8008184:	4629      	mov	r1, r5
 8008186:	4640      	mov	r0, r8
 8008188:	f7ff f9a6 	bl	80074d8 <_malloc_r>
 800818c:	4607      	mov	r7, r0
 800818e:	2800      	cmp	r0, #0
 8008190:	d0ec      	beq.n	800816c <_realloc_r+0x1c>
 8008192:	42b5      	cmp	r5, r6
 8008194:	462a      	mov	r2, r5
 8008196:	4621      	mov	r1, r4
 8008198:	bf28      	it	cs
 800819a:	4632      	movcs	r2, r6
 800819c:	f7fd fee5 	bl	8005f6a <memcpy>
 80081a0:	4621      	mov	r1, r4
 80081a2:	4640      	mov	r0, r8
 80081a4:	f000 f8b2 	bl	800830c <_free_r>
 80081a8:	463c      	mov	r4, r7
 80081aa:	e7e0      	b.n	800816e <_realloc_r+0x1e>

080081ac <__ascii_wctomb>:
 80081ac:	4603      	mov	r3, r0
 80081ae:	4608      	mov	r0, r1
 80081b0:	b141      	cbz	r1, 80081c4 <__ascii_wctomb+0x18>
 80081b2:	2aff      	cmp	r2, #255	@ 0xff
 80081b4:	d904      	bls.n	80081c0 <__ascii_wctomb+0x14>
 80081b6:	228a      	movs	r2, #138	@ 0x8a
 80081b8:	601a      	str	r2, [r3, #0]
 80081ba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80081be:	4770      	bx	lr
 80081c0:	700a      	strb	r2, [r1, #0]
 80081c2:	2001      	movs	r0, #1
 80081c4:	4770      	bx	lr

080081c6 <memmove>:
 80081c6:	4288      	cmp	r0, r1
 80081c8:	b510      	push	{r4, lr}
 80081ca:	eb01 0402 	add.w	r4, r1, r2
 80081ce:	d902      	bls.n	80081d6 <memmove+0x10>
 80081d0:	4284      	cmp	r4, r0
 80081d2:	4623      	mov	r3, r4
 80081d4:	d807      	bhi.n	80081e6 <memmove+0x20>
 80081d6:	1e43      	subs	r3, r0, #1
 80081d8:	42a1      	cmp	r1, r4
 80081da:	d008      	beq.n	80081ee <memmove+0x28>
 80081dc:	f811 2b01 	ldrb.w	r2, [r1], #1
 80081e0:	f803 2f01 	strb.w	r2, [r3, #1]!
 80081e4:	e7f8      	b.n	80081d8 <memmove+0x12>
 80081e6:	4402      	add	r2, r0
 80081e8:	4601      	mov	r1, r0
 80081ea:	428a      	cmp	r2, r1
 80081ec:	d100      	bne.n	80081f0 <memmove+0x2a>
 80081ee:	bd10      	pop	{r4, pc}
 80081f0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80081f4:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80081f8:	e7f7      	b.n	80081ea <memmove+0x24>
	...

080081fc <_close_r>:
 80081fc:	b538      	push	{r3, r4, r5, lr}
 80081fe:	4d06      	ldr	r5, [pc, #24]	@ (8008218 <_close_r+0x1c>)
 8008200:	2300      	movs	r3, #0
 8008202:	4604      	mov	r4, r0
 8008204:	4608      	mov	r0, r1
 8008206:	602b      	str	r3, [r5, #0]
 8008208:	f7f8 fefc 	bl	8001004 <_close>
 800820c:	1c43      	adds	r3, r0, #1
 800820e:	d102      	bne.n	8008216 <_close_r+0x1a>
 8008210:	682b      	ldr	r3, [r5, #0]
 8008212:	b103      	cbz	r3, 8008216 <_close_r+0x1a>
 8008214:	6023      	str	r3, [r4, #0]
 8008216:	bd38      	pop	{r3, r4, r5, pc}
 8008218:	24000410 	.word	0x24000410

0800821c <_lseek_r>:
 800821c:	b538      	push	{r3, r4, r5, lr}
 800821e:	4d07      	ldr	r5, [pc, #28]	@ (800823c <_lseek_r+0x20>)
 8008220:	4604      	mov	r4, r0
 8008222:	4608      	mov	r0, r1
 8008224:	4611      	mov	r1, r2
 8008226:	2200      	movs	r2, #0
 8008228:	602a      	str	r2, [r5, #0]
 800822a:	461a      	mov	r2, r3
 800822c:	f7f8 ff11 	bl	8001052 <_lseek>
 8008230:	1c43      	adds	r3, r0, #1
 8008232:	d102      	bne.n	800823a <_lseek_r+0x1e>
 8008234:	682b      	ldr	r3, [r5, #0]
 8008236:	b103      	cbz	r3, 800823a <_lseek_r+0x1e>
 8008238:	6023      	str	r3, [r4, #0]
 800823a:	bd38      	pop	{r3, r4, r5, pc}
 800823c:	24000410 	.word	0x24000410

08008240 <_read_r>:
 8008240:	b538      	push	{r3, r4, r5, lr}
 8008242:	4d07      	ldr	r5, [pc, #28]	@ (8008260 <_read_r+0x20>)
 8008244:	4604      	mov	r4, r0
 8008246:	4608      	mov	r0, r1
 8008248:	4611      	mov	r1, r2
 800824a:	2200      	movs	r2, #0
 800824c:	602a      	str	r2, [r5, #0]
 800824e:	461a      	mov	r2, r3
 8008250:	f7f8 fe9f 	bl	8000f92 <_read>
 8008254:	1c43      	adds	r3, r0, #1
 8008256:	d102      	bne.n	800825e <_read_r+0x1e>
 8008258:	682b      	ldr	r3, [r5, #0]
 800825a:	b103      	cbz	r3, 800825e <_read_r+0x1e>
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	bd38      	pop	{r3, r4, r5, pc}
 8008260:	24000410 	.word	0x24000410

08008264 <_sbrk_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	4d06      	ldr	r5, [pc, #24]	@ (8008280 <_sbrk_r+0x1c>)
 8008268:	2300      	movs	r3, #0
 800826a:	4604      	mov	r4, r0
 800826c:	4608      	mov	r0, r1
 800826e:	602b      	str	r3, [r5, #0]
 8008270:	f7f8 fefc 	bl	800106c <_sbrk>
 8008274:	1c43      	adds	r3, r0, #1
 8008276:	d102      	bne.n	800827e <_sbrk_r+0x1a>
 8008278:	682b      	ldr	r3, [r5, #0]
 800827a:	b103      	cbz	r3, 800827e <_sbrk_r+0x1a>
 800827c:	6023      	str	r3, [r4, #0]
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	24000410 	.word	0x24000410

08008284 <_write_r>:
 8008284:	b538      	push	{r3, r4, r5, lr}
 8008286:	4d07      	ldr	r5, [pc, #28]	@ (80082a4 <_write_r+0x20>)
 8008288:	4604      	mov	r4, r0
 800828a:	4608      	mov	r0, r1
 800828c:	4611      	mov	r1, r2
 800828e:	2200      	movs	r2, #0
 8008290:	602a      	str	r2, [r5, #0]
 8008292:	461a      	mov	r2, r3
 8008294:	f7f8 fe9a 	bl	8000fcc <_write>
 8008298:	1c43      	adds	r3, r0, #1
 800829a:	d102      	bne.n	80082a2 <_write_r+0x1e>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	b103      	cbz	r3, 80082a2 <_write_r+0x1e>
 80082a0:	6023      	str	r3, [r4, #0]
 80082a2:	bd38      	pop	{r3, r4, r5, pc}
 80082a4:	24000410 	.word	0x24000410

080082a8 <__assert_func>:
 80082a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082aa:	4614      	mov	r4, r2
 80082ac:	461a      	mov	r2, r3
 80082ae:	4b09      	ldr	r3, [pc, #36]	@ (80082d4 <__assert_func+0x2c>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	4605      	mov	r5, r0
 80082b4:	68d8      	ldr	r0, [r3, #12]
 80082b6:	b954      	cbnz	r4, 80082ce <__assert_func+0x26>
 80082b8:	4b07      	ldr	r3, [pc, #28]	@ (80082d8 <__assert_func+0x30>)
 80082ba:	461c      	mov	r4, r3
 80082bc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80082c0:	9100      	str	r1, [sp, #0]
 80082c2:	462b      	mov	r3, r5
 80082c4:	4905      	ldr	r1, [pc, #20]	@ (80082dc <__assert_func+0x34>)
 80082c6:	f000 f873 	bl	80083b0 <fiprintf>
 80082ca:	f000 f883 	bl	80083d4 <abort>
 80082ce:	4b04      	ldr	r3, [pc, #16]	@ (80082e0 <__assert_func+0x38>)
 80082d0:	e7f4      	b.n	80082bc <__assert_func+0x14>
 80082d2:	bf00      	nop
 80082d4:	240001a4 	.word	0x240001a4
 80082d8:	08008d93 	.word	0x08008d93
 80082dc:	08008d65 	.word	0x08008d65
 80082e0:	08008d58 	.word	0x08008d58

080082e4 <_calloc_r>:
 80082e4:	b570      	push	{r4, r5, r6, lr}
 80082e6:	fba1 5402 	umull	r5, r4, r1, r2
 80082ea:	b93c      	cbnz	r4, 80082fc <_calloc_r+0x18>
 80082ec:	4629      	mov	r1, r5
 80082ee:	f7ff f8f3 	bl	80074d8 <_malloc_r>
 80082f2:	4606      	mov	r6, r0
 80082f4:	b928      	cbnz	r0, 8008302 <_calloc_r+0x1e>
 80082f6:	2600      	movs	r6, #0
 80082f8:	4630      	mov	r0, r6
 80082fa:	bd70      	pop	{r4, r5, r6, pc}
 80082fc:	220c      	movs	r2, #12
 80082fe:	6002      	str	r2, [r0, #0]
 8008300:	e7f9      	b.n	80082f6 <_calloc_r+0x12>
 8008302:	462a      	mov	r2, r5
 8008304:	4621      	mov	r1, r4
 8008306:	f7fd fdf7 	bl	8005ef8 <memset>
 800830a:	e7f5      	b.n	80082f8 <_calloc_r+0x14>

0800830c <_free_r>:
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4605      	mov	r5, r0
 8008310:	2900      	cmp	r1, #0
 8008312:	d041      	beq.n	8008398 <_free_r+0x8c>
 8008314:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008318:	1f0c      	subs	r4, r1, #4
 800831a:	2b00      	cmp	r3, #0
 800831c:	bfb8      	it	lt
 800831e:	18e4      	addlt	r4, r4, r3
 8008320:	f7ff fa18 	bl	8007754 <__malloc_lock>
 8008324:	4a1d      	ldr	r2, [pc, #116]	@ (800839c <_free_r+0x90>)
 8008326:	6813      	ldr	r3, [r2, #0]
 8008328:	b933      	cbnz	r3, 8008338 <_free_r+0x2c>
 800832a:	6063      	str	r3, [r4, #4]
 800832c:	6014      	str	r4, [r2, #0]
 800832e:	4628      	mov	r0, r5
 8008330:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008334:	f7ff ba14 	b.w	8007760 <__malloc_unlock>
 8008338:	42a3      	cmp	r3, r4
 800833a:	d908      	bls.n	800834e <_free_r+0x42>
 800833c:	6820      	ldr	r0, [r4, #0]
 800833e:	1821      	adds	r1, r4, r0
 8008340:	428b      	cmp	r3, r1
 8008342:	bf01      	itttt	eq
 8008344:	6819      	ldreq	r1, [r3, #0]
 8008346:	685b      	ldreq	r3, [r3, #4]
 8008348:	1809      	addeq	r1, r1, r0
 800834a:	6021      	streq	r1, [r4, #0]
 800834c:	e7ed      	b.n	800832a <_free_r+0x1e>
 800834e:	461a      	mov	r2, r3
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	b10b      	cbz	r3, 8008358 <_free_r+0x4c>
 8008354:	42a3      	cmp	r3, r4
 8008356:	d9fa      	bls.n	800834e <_free_r+0x42>
 8008358:	6811      	ldr	r1, [r2, #0]
 800835a:	1850      	adds	r0, r2, r1
 800835c:	42a0      	cmp	r0, r4
 800835e:	d10b      	bne.n	8008378 <_free_r+0x6c>
 8008360:	6820      	ldr	r0, [r4, #0]
 8008362:	4401      	add	r1, r0
 8008364:	1850      	adds	r0, r2, r1
 8008366:	4283      	cmp	r3, r0
 8008368:	6011      	str	r1, [r2, #0]
 800836a:	d1e0      	bne.n	800832e <_free_r+0x22>
 800836c:	6818      	ldr	r0, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	6053      	str	r3, [r2, #4]
 8008372:	4408      	add	r0, r1
 8008374:	6010      	str	r0, [r2, #0]
 8008376:	e7da      	b.n	800832e <_free_r+0x22>
 8008378:	d902      	bls.n	8008380 <_free_r+0x74>
 800837a:	230c      	movs	r3, #12
 800837c:	602b      	str	r3, [r5, #0]
 800837e:	e7d6      	b.n	800832e <_free_r+0x22>
 8008380:	6820      	ldr	r0, [r4, #0]
 8008382:	1821      	adds	r1, r4, r0
 8008384:	428b      	cmp	r3, r1
 8008386:	bf04      	itt	eq
 8008388:	6819      	ldreq	r1, [r3, #0]
 800838a:	685b      	ldreq	r3, [r3, #4]
 800838c:	6063      	str	r3, [r4, #4]
 800838e:	bf04      	itt	eq
 8008390:	1809      	addeq	r1, r1, r0
 8008392:	6021      	streq	r1, [r4, #0]
 8008394:	6054      	str	r4, [r2, #4]
 8008396:	e7ca      	b.n	800832e <_free_r+0x22>
 8008398:	bd38      	pop	{r3, r4, r5, pc}
 800839a:	bf00      	nop
 800839c:	2400040c 	.word	0x2400040c

080083a0 <_malloc_usable_size_r>:
 80083a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083a4:	1f18      	subs	r0, r3, #4
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	bfbc      	itt	lt
 80083aa:	580b      	ldrlt	r3, [r1, r0]
 80083ac:	18c0      	addlt	r0, r0, r3
 80083ae:	4770      	bx	lr

080083b0 <fiprintf>:
 80083b0:	b40e      	push	{r1, r2, r3}
 80083b2:	b503      	push	{r0, r1, lr}
 80083b4:	4601      	mov	r1, r0
 80083b6:	ab03      	add	r3, sp, #12
 80083b8:	4805      	ldr	r0, [pc, #20]	@ (80083d0 <fiprintf+0x20>)
 80083ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80083be:	6800      	ldr	r0, [r0, #0]
 80083c0:	9301      	str	r3, [sp, #4]
 80083c2:	f000 f837 	bl	8008434 <_vfiprintf_r>
 80083c6:	b002      	add	sp, #8
 80083c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80083cc:	b003      	add	sp, #12
 80083ce:	4770      	bx	lr
 80083d0:	240001a4 	.word	0x240001a4

080083d4 <abort>:
 80083d4:	b508      	push	{r3, lr}
 80083d6:	2006      	movs	r0, #6
 80083d8:	f000 fa84 	bl	80088e4 <raise>
 80083dc:	2001      	movs	r0, #1
 80083de:	f7f8 fdcd 	bl	8000f7c <_exit>

080083e2 <__sfputc_r>:
 80083e2:	6893      	ldr	r3, [r2, #8]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	2b00      	cmp	r3, #0
 80083e8:	b410      	push	{r4}
 80083ea:	6093      	str	r3, [r2, #8]
 80083ec:	da08      	bge.n	8008400 <__sfputc_r+0x1e>
 80083ee:	6994      	ldr	r4, [r2, #24]
 80083f0:	42a3      	cmp	r3, r4
 80083f2:	db01      	blt.n	80083f8 <__sfputc_r+0x16>
 80083f4:	290a      	cmp	r1, #10
 80083f6:	d103      	bne.n	8008400 <__sfputc_r+0x1e>
 80083f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80083fc:	f000 b932 	b.w	8008664 <__swbuf_r>
 8008400:	6813      	ldr	r3, [r2, #0]
 8008402:	1c58      	adds	r0, r3, #1
 8008404:	6010      	str	r0, [r2, #0]
 8008406:	7019      	strb	r1, [r3, #0]
 8008408:	4608      	mov	r0, r1
 800840a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800840e:	4770      	bx	lr

08008410 <__sfputs_r>:
 8008410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008412:	4606      	mov	r6, r0
 8008414:	460f      	mov	r7, r1
 8008416:	4614      	mov	r4, r2
 8008418:	18d5      	adds	r5, r2, r3
 800841a:	42ac      	cmp	r4, r5
 800841c:	d101      	bne.n	8008422 <__sfputs_r+0x12>
 800841e:	2000      	movs	r0, #0
 8008420:	e007      	b.n	8008432 <__sfputs_r+0x22>
 8008422:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008426:	463a      	mov	r2, r7
 8008428:	4630      	mov	r0, r6
 800842a:	f7ff ffda 	bl	80083e2 <__sfputc_r>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	d1f3      	bne.n	800841a <__sfputs_r+0xa>
 8008432:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008434 <_vfiprintf_r>:
 8008434:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008438:	460d      	mov	r5, r1
 800843a:	b09d      	sub	sp, #116	@ 0x74
 800843c:	4614      	mov	r4, r2
 800843e:	4698      	mov	r8, r3
 8008440:	4606      	mov	r6, r0
 8008442:	b118      	cbz	r0, 800844c <_vfiprintf_r+0x18>
 8008444:	6a03      	ldr	r3, [r0, #32]
 8008446:	b90b      	cbnz	r3, 800844c <_vfiprintf_r+0x18>
 8008448:	f7fc feda 	bl	8005200 <__sinit>
 800844c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800844e:	07d9      	lsls	r1, r3, #31
 8008450:	d405      	bmi.n	800845e <_vfiprintf_r+0x2a>
 8008452:	89ab      	ldrh	r3, [r5, #12]
 8008454:	059a      	lsls	r2, r3, #22
 8008456:	d402      	bmi.n	800845e <_vfiprintf_r+0x2a>
 8008458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800845a:	f7fd fd84 	bl	8005f66 <__retarget_lock_acquire_recursive>
 800845e:	89ab      	ldrh	r3, [r5, #12]
 8008460:	071b      	lsls	r3, r3, #28
 8008462:	d501      	bpl.n	8008468 <_vfiprintf_r+0x34>
 8008464:	692b      	ldr	r3, [r5, #16]
 8008466:	b99b      	cbnz	r3, 8008490 <_vfiprintf_r+0x5c>
 8008468:	4629      	mov	r1, r5
 800846a:	4630      	mov	r0, r6
 800846c:	f000 f938 	bl	80086e0 <__swsetup_r>
 8008470:	b170      	cbz	r0, 8008490 <_vfiprintf_r+0x5c>
 8008472:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008474:	07dc      	lsls	r4, r3, #31
 8008476:	d504      	bpl.n	8008482 <_vfiprintf_r+0x4e>
 8008478:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800847c:	b01d      	add	sp, #116	@ 0x74
 800847e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008482:	89ab      	ldrh	r3, [r5, #12]
 8008484:	0598      	lsls	r0, r3, #22
 8008486:	d4f7      	bmi.n	8008478 <_vfiprintf_r+0x44>
 8008488:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800848a:	f7fd fd6d 	bl	8005f68 <__retarget_lock_release_recursive>
 800848e:	e7f3      	b.n	8008478 <_vfiprintf_r+0x44>
 8008490:	2300      	movs	r3, #0
 8008492:	9309      	str	r3, [sp, #36]	@ 0x24
 8008494:	2320      	movs	r3, #32
 8008496:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800849a:	f8cd 800c 	str.w	r8, [sp, #12]
 800849e:	2330      	movs	r3, #48	@ 0x30
 80084a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008650 <_vfiprintf_r+0x21c>
 80084a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80084a8:	f04f 0901 	mov.w	r9, #1
 80084ac:	4623      	mov	r3, r4
 80084ae:	469a      	mov	sl, r3
 80084b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084b4:	b10a      	cbz	r2, 80084ba <_vfiprintf_r+0x86>
 80084b6:	2a25      	cmp	r2, #37	@ 0x25
 80084b8:	d1f9      	bne.n	80084ae <_vfiprintf_r+0x7a>
 80084ba:	ebba 0b04 	subs.w	fp, sl, r4
 80084be:	d00b      	beq.n	80084d8 <_vfiprintf_r+0xa4>
 80084c0:	465b      	mov	r3, fp
 80084c2:	4622      	mov	r2, r4
 80084c4:	4629      	mov	r1, r5
 80084c6:	4630      	mov	r0, r6
 80084c8:	f7ff ffa2 	bl	8008410 <__sfputs_r>
 80084cc:	3001      	adds	r0, #1
 80084ce:	f000 80a7 	beq.w	8008620 <_vfiprintf_r+0x1ec>
 80084d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80084d4:	445a      	add	r2, fp
 80084d6:	9209      	str	r2, [sp, #36]	@ 0x24
 80084d8:	f89a 3000 	ldrb.w	r3, [sl]
 80084dc:	2b00      	cmp	r3, #0
 80084de:	f000 809f 	beq.w	8008620 <_vfiprintf_r+0x1ec>
 80084e2:	2300      	movs	r3, #0
 80084e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80084e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084ec:	f10a 0a01 	add.w	sl, sl, #1
 80084f0:	9304      	str	r3, [sp, #16]
 80084f2:	9307      	str	r3, [sp, #28]
 80084f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084f8:	931a      	str	r3, [sp, #104]	@ 0x68
 80084fa:	4654      	mov	r4, sl
 80084fc:	2205      	movs	r2, #5
 80084fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008502:	4853      	ldr	r0, [pc, #332]	@ (8008650 <_vfiprintf_r+0x21c>)
 8008504:	f7f7 feec 	bl	80002e0 <memchr>
 8008508:	9a04      	ldr	r2, [sp, #16]
 800850a:	b9d8      	cbnz	r0, 8008544 <_vfiprintf_r+0x110>
 800850c:	06d1      	lsls	r1, r2, #27
 800850e:	bf44      	itt	mi
 8008510:	2320      	movmi	r3, #32
 8008512:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008516:	0713      	lsls	r3, r2, #28
 8008518:	bf44      	itt	mi
 800851a:	232b      	movmi	r3, #43	@ 0x2b
 800851c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008520:	f89a 3000 	ldrb.w	r3, [sl]
 8008524:	2b2a      	cmp	r3, #42	@ 0x2a
 8008526:	d015      	beq.n	8008554 <_vfiprintf_r+0x120>
 8008528:	9a07      	ldr	r2, [sp, #28]
 800852a:	4654      	mov	r4, sl
 800852c:	2000      	movs	r0, #0
 800852e:	f04f 0c0a 	mov.w	ip, #10
 8008532:	4621      	mov	r1, r4
 8008534:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008538:	3b30      	subs	r3, #48	@ 0x30
 800853a:	2b09      	cmp	r3, #9
 800853c:	d94b      	bls.n	80085d6 <_vfiprintf_r+0x1a2>
 800853e:	b1b0      	cbz	r0, 800856e <_vfiprintf_r+0x13a>
 8008540:	9207      	str	r2, [sp, #28]
 8008542:	e014      	b.n	800856e <_vfiprintf_r+0x13a>
 8008544:	eba0 0308 	sub.w	r3, r0, r8
 8008548:	fa09 f303 	lsl.w	r3, r9, r3
 800854c:	4313      	orrs	r3, r2
 800854e:	9304      	str	r3, [sp, #16]
 8008550:	46a2      	mov	sl, r4
 8008552:	e7d2      	b.n	80084fa <_vfiprintf_r+0xc6>
 8008554:	9b03      	ldr	r3, [sp, #12]
 8008556:	1d19      	adds	r1, r3, #4
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	9103      	str	r1, [sp, #12]
 800855c:	2b00      	cmp	r3, #0
 800855e:	bfbb      	ittet	lt
 8008560:	425b      	neglt	r3, r3
 8008562:	f042 0202 	orrlt.w	r2, r2, #2
 8008566:	9307      	strge	r3, [sp, #28]
 8008568:	9307      	strlt	r3, [sp, #28]
 800856a:	bfb8      	it	lt
 800856c:	9204      	strlt	r2, [sp, #16]
 800856e:	7823      	ldrb	r3, [r4, #0]
 8008570:	2b2e      	cmp	r3, #46	@ 0x2e
 8008572:	d10a      	bne.n	800858a <_vfiprintf_r+0x156>
 8008574:	7863      	ldrb	r3, [r4, #1]
 8008576:	2b2a      	cmp	r3, #42	@ 0x2a
 8008578:	d132      	bne.n	80085e0 <_vfiprintf_r+0x1ac>
 800857a:	9b03      	ldr	r3, [sp, #12]
 800857c:	1d1a      	adds	r2, r3, #4
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	9203      	str	r2, [sp, #12]
 8008582:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008586:	3402      	adds	r4, #2
 8008588:	9305      	str	r3, [sp, #20]
 800858a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008660 <_vfiprintf_r+0x22c>
 800858e:	7821      	ldrb	r1, [r4, #0]
 8008590:	2203      	movs	r2, #3
 8008592:	4650      	mov	r0, sl
 8008594:	f7f7 fea4 	bl	80002e0 <memchr>
 8008598:	b138      	cbz	r0, 80085aa <_vfiprintf_r+0x176>
 800859a:	9b04      	ldr	r3, [sp, #16]
 800859c:	eba0 000a 	sub.w	r0, r0, sl
 80085a0:	2240      	movs	r2, #64	@ 0x40
 80085a2:	4082      	lsls	r2, r0
 80085a4:	4313      	orrs	r3, r2
 80085a6:	3401      	adds	r4, #1
 80085a8:	9304      	str	r3, [sp, #16]
 80085aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085ae:	4829      	ldr	r0, [pc, #164]	@ (8008654 <_vfiprintf_r+0x220>)
 80085b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80085b4:	2206      	movs	r2, #6
 80085b6:	f7f7 fe93 	bl	80002e0 <memchr>
 80085ba:	2800      	cmp	r0, #0
 80085bc:	d03f      	beq.n	800863e <_vfiprintf_r+0x20a>
 80085be:	4b26      	ldr	r3, [pc, #152]	@ (8008658 <_vfiprintf_r+0x224>)
 80085c0:	bb1b      	cbnz	r3, 800860a <_vfiprintf_r+0x1d6>
 80085c2:	9b03      	ldr	r3, [sp, #12]
 80085c4:	3307      	adds	r3, #7
 80085c6:	f023 0307 	bic.w	r3, r3, #7
 80085ca:	3308      	adds	r3, #8
 80085cc:	9303      	str	r3, [sp, #12]
 80085ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80085d0:	443b      	add	r3, r7
 80085d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80085d4:	e76a      	b.n	80084ac <_vfiprintf_r+0x78>
 80085d6:	fb0c 3202 	mla	r2, ip, r2, r3
 80085da:	460c      	mov	r4, r1
 80085dc:	2001      	movs	r0, #1
 80085de:	e7a8      	b.n	8008532 <_vfiprintf_r+0xfe>
 80085e0:	2300      	movs	r3, #0
 80085e2:	3401      	adds	r4, #1
 80085e4:	9305      	str	r3, [sp, #20]
 80085e6:	4619      	mov	r1, r3
 80085e8:	f04f 0c0a 	mov.w	ip, #10
 80085ec:	4620      	mov	r0, r4
 80085ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085f2:	3a30      	subs	r2, #48	@ 0x30
 80085f4:	2a09      	cmp	r2, #9
 80085f6:	d903      	bls.n	8008600 <_vfiprintf_r+0x1cc>
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d0c6      	beq.n	800858a <_vfiprintf_r+0x156>
 80085fc:	9105      	str	r1, [sp, #20]
 80085fe:	e7c4      	b.n	800858a <_vfiprintf_r+0x156>
 8008600:	fb0c 2101 	mla	r1, ip, r1, r2
 8008604:	4604      	mov	r4, r0
 8008606:	2301      	movs	r3, #1
 8008608:	e7f0      	b.n	80085ec <_vfiprintf_r+0x1b8>
 800860a:	ab03      	add	r3, sp, #12
 800860c:	9300      	str	r3, [sp, #0]
 800860e:	462a      	mov	r2, r5
 8008610:	4b12      	ldr	r3, [pc, #72]	@ (800865c <_vfiprintf_r+0x228>)
 8008612:	a904      	add	r1, sp, #16
 8008614:	4630      	mov	r0, r6
 8008616:	f7fb ff93 	bl	8004540 <_printf_float>
 800861a:	4607      	mov	r7, r0
 800861c:	1c78      	adds	r0, r7, #1
 800861e:	d1d6      	bne.n	80085ce <_vfiprintf_r+0x19a>
 8008620:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008622:	07d9      	lsls	r1, r3, #31
 8008624:	d405      	bmi.n	8008632 <_vfiprintf_r+0x1fe>
 8008626:	89ab      	ldrh	r3, [r5, #12]
 8008628:	059a      	lsls	r2, r3, #22
 800862a:	d402      	bmi.n	8008632 <_vfiprintf_r+0x1fe>
 800862c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800862e:	f7fd fc9b 	bl	8005f68 <__retarget_lock_release_recursive>
 8008632:	89ab      	ldrh	r3, [r5, #12]
 8008634:	065b      	lsls	r3, r3, #25
 8008636:	f53f af1f 	bmi.w	8008478 <_vfiprintf_r+0x44>
 800863a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800863c:	e71e      	b.n	800847c <_vfiprintf_r+0x48>
 800863e:	ab03      	add	r3, sp, #12
 8008640:	9300      	str	r3, [sp, #0]
 8008642:	462a      	mov	r2, r5
 8008644:	4b05      	ldr	r3, [pc, #20]	@ (800865c <_vfiprintf_r+0x228>)
 8008646:	a904      	add	r1, sp, #16
 8008648:	4630      	mov	r0, r6
 800864a:	f7fc fa01 	bl	8004a50 <_printf_i>
 800864e:	e7e4      	b.n	800861a <_vfiprintf_r+0x1e6>
 8008650:	08008bee 	.word	0x08008bee
 8008654:	08008bf8 	.word	0x08008bf8
 8008658:	08004541 	.word	0x08004541
 800865c:	08008411 	.word	0x08008411
 8008660:	08008bf4 	.word	0x08008bf4

08008664 <__swbuf_r>:
 8008664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008666:	460e      	mov	r6, r1
 8008668:	4614      	mov	r4, r2
 800866a:	4605      	mov	r5, r0
 800866c:	b118      	cbz	r0, 8008676 <__swbuf_r+0x12>
 800866e:	6a03      	ldr	r3, [r0, #32]
 8008670:	b90b      	cbnz	r3, 8008676 <__swbuf_r+0x12>
 8008672:	f7fc fdc5 	bl	8005200 <__sinit>
 8008676:	69a3      	ldr	r3, [r4, #24]
 8008678:	60a3      	str	r3, [r4, #8]
 800867a:	89a3      	ldrh	r3, [r4, #12]
 800867c:	071a      	lsls	r2, r3, #28
 800867e:	d501      	bpl.n	8008684 <__swbuf_r+0x20>
 8008680:	6923      	ldr	r3, [r4, #16]
 8008682:	b943      	cbnz	r3, 8008696 <__swbuf_r+0x32>
 8008684:	4621      	mov	r1, r4
 8008686:	4628      	mov	r0, r5
 8008688:	f000 f82a 	bl	80086e0 <__swsetup_r>
 800868c:	b118      	cbz	r0, 8008696 <__swbuf_r+0x32>
 800868e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008692:	4638      	mov	r0, r7
 8008694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008696:	6823      	ldr	r3, [r4, #0]
 8008698:	6922      	ldr	r2, [r4, #16]
 800869a:	1a98      	subs	r0, r3, r2
 800869c:	6963      	ldr	r3, [r4, #20]
 800869e:	b2f6      	uxtb	r6, r6
 80086a0:	4283      	cmp	r3, r0
 80086a2:	4637      	mov	r7, r6
 80086a4:	dc05      	bgt.n	80086b2 <__swbuf_r+0x4e>
 80086a6:	4621      	mov	r1, r4
 80086a8:	4628      	mov	r0, r5
 80086aa:	f7ff f82b 	bl	8007704 <_fflush_r>
 80086ae:	2800      	cmp	r0, #0
 80086b0:	d1ed      	bne.n	800868e <__swbuf_r+0x2a>
 80086b2:	68a3      	ldr	r3, [r4, #8]
 80086b4:	3b01      	subs	r3, #1
 80086b6:	60a3      	str	r3, [r4, #8]
 80086b8:	6823      	ldr	r3, [r4, #0]
 80086ba:	1c5a      	adds	r2, r3, #1
 80086bc:	6022      	str	r2, [r4, #0]
 80086be:	701e      	strb	r6, [r3, #0]
 80086c0:	6962      	ldr	r2, [r4, #20]
 80086c2:	1c43      	adds	r3, r0, #1
 80086c4:	429a      	cmp	r2, r3
 80086c6:	d004      	beq.n	80086d2 <__swbuf_r+0x6e>
 80086c8:	89a3      	ldrh	r3, [r4, #12]
 80086ca:	07db      	lsls	r3, r3, #31
 80086cc:	d5e1      	bpl.n	8008692 <__swbuf_r+0x2e>
 80086ce:	2e0a      	cmp	r6, #10
 80086d0:	d1df      	bne.n	8008692 <__swbuf_r+0x2e>
 80086d2:	4621      	mov	r1, r4
 80086d4:	4628      	mov	r0, r5
 80086d6:	f7ff f815 	bl	8007704 <_fflush_r>
 80086da:	2800      	cmp	r0, #0
 80086dc:	d0d9      	beq.n	8008692 <__swbuf_r+0x2e>
 80086de:	e7d6      	b.n	800868e <__swbuf_r+0x2a>

080086e0 <__swsetup_r>:
 80086e0:	b538      	push	{r3, r4, r5, lr}
 80086e2:	4b29      	ldr	r3, [pc, #164]	@ (8008788 <__swsetup_r+0xa8>)
 80086e4:	4605      	mov	r5, r0
 80086e6:	6818      	ldr	r0, [r3, #0]
 80086e8:	460c      	mov	r4, r1
 80086ea:	b118      	cbz	r0, 80086f4 <__swsetup_r+0x14>
 80086ec:	6a03      	ldr	r3, [r0, #32]
 80086ee:	b90b      	cbnz	r3, 80086f4 <__swsetup_r+0x14>
 80086f0:	f7fc fd86 	bl	8005200 <__sinit>
 80086f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086f8:	0719      	lsls	r1, r3, #28
 80086fa:	d422      	bmi.n	8008742 <__swsetup_r+0x62>
 80086fc:	06da      	lsls	r2, r3, #27
 80086fe:	d407      	bmi.n	8008710 <__swsetup_r+0x30>
 8008700:	2209      	movs	r2, #9
 8008702:	602a      	str	r2, [r5, #0]
 8008704:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008708:	81a3      	strh	r3, [r4, #12]
 800870a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800870e:	e033      	b.n	8008778 <__swsetup_r+0x98>
 8008710:	0758      	lsls	r0, r3, #29
 8008712:	d512      	bpl.n	800873a <__swsetup_r+0x5a>
 8008714:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008716:	b141      	cbz	r1, 800872a <__swsetup_r+0x4a>
 8008718:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800871c:	4299      	cmp	r1, r3
 800871e:	d002      	beq.n	8008726 <__swsetup_r+0x46>
 8008720:	4628      	mov	r0, r5
 8008722:	f7ff fdf3 	bl	800830c <_free_r>
 8008726:	2300      	movs	r3, #0
 8008728:	6363      	str	r3, [r4, #52]	@ 0x34
 800872a:	89a3      	ldrh	r3, [r4, #12]
 800872c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008730:	81a3      	strh	r3, [r4, #12]
 8008732:	2300      	movs	r3, #0
 8008734:	6063      	str	r3, [r4, #4]
 8008736:	6923      	ldr	r3, [r4, #16]
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	89a3      	ldrh	r3, [r4, #12]
 800873c:	f043 0308 	orr.w	r3, r3, #8
 8008740:	81a3      	strh	r3, [r4, #12]
 8008742:	6923      	ldr	r3, [r4, #16]
 8008744:	b94b      	cbnz	r3, 800875a <__swsetup_r+0x7a>
 8008746:	89a3      	ldrh	r3, [r4, #12]
 8008748:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800874c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008750:	d003      	beq.n	800875a <__swsetup_r+0x7a>
 8008752:	4621      	mov	r1, r4
 8008754:	4628      	mov	r0, r5
 8008756:	f000 f83f 	bl	80087d8 <__smakebuf_r>
 800875a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800875e:	f013 0201 	ands.w	r2, r3, #1
 8008762:	d00a      	beq.n	800877a <__swsetup_r+0x9a>
 8008764:	2200      	movs	r2, #0
 8008766:	60a2      	str	r2, [r4, #8]
 8008768:	6962      	ldr	r2, [r4, #20]
 800876a:	4252      	negs	r2, r2
 800876c:	61a2      	str	r2, [r4, #24]
 800876e:	6922      	ldr	r2, [r4, #16]
 8008770:	b942      	cbnz	r2, 8008784 <__swsetup_r+0xa4>
 8008772:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008776:	d1c5      	bne.n	8008704 <__swsetup_r+0x24>
 8008778:	bd38      	pop	{r3, r4, r5, pc}
 800877a:	0799      	lsls	r1, r3, #30
 800877c:	bf58      	it	pl
 800877e:	6962      	ldrpl	r2, [r4, #20]
 8008780:	60a2      	str	r2, [r4, #8]
 8008782:	e7f4      	b.n	800876e <__swsetup_r+0x8e>
 8008784:	2000      	movs	r0, #0
 8008786:	e7f7      	b.n	8008778 <__swsetup_r+0x98>
 8008788:	240001a4 	.word	0x240001a4

0800878c <__swhatbuf_r>:
 800878c:	b570      	push	{r4, r5, r6, lr}
 800878e:	460c      	mov	r4, r1
 8008790:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008794:	2900      	cmp	r1, #0
 8008796:	b096      	sub	sp, #88	@ 0x58
 8008798:	4615      	mov	r5, r2
 800879a:	461e      	mov	r6, r3
 800879c:	da0d      	bge.n	80087ba <__swhatbuf_r+0x2e>
 800879e:	89a3      	ldrh	r3, [r4, #12]
 80087a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80087a4:	f04f 0100 	mov.w	r1, #0
 80087a8:	bf14      	ite	ne
 80087aa:	2340      	movne	r3, #64	@ 0x40
 80087ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80087b0:	2000      	movs	r0, #0
 80087b2:	6031      	str	r1, [r6, #0]
 80087b4:	602b      	str	r3, [r5, #0]
 80087b6:	b016      	add	sp, #88	@ 0x58
 80087b8:	bd70      	pop	{r4, r5, r6, pc}
 80087ba:	466a      	mov	r2, sp
 80087bc:	f000 f848 	bl	8008850 <_fstat_r>
 80087c0:	2800      	cmp	r0, #0
 80087c2:	dbec      	blt.n	800879e <__swhatbuf_r+0x12>
 80087c4:	9901      	ldr	r1, [sp, #4]
 80087c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80087ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80087ce:	4259      	negs	r1, r3
 80087d0:	4159      	adcs	r1, r3
 80087d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80087d6:	e7eb      	b.n	80087b0 <__swhatbuf_r+0x24>

080087d8 <__smakebuf_r>:
 80087d8:	898b      	ldrh	r3, [r1, #12]
 80087da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087dc:	079d      	lsls	r5, r3, #30
 80087de:	4606      	mov	r6, r0
 80087e0:	460c      	mov	r4, r1
 80087e2:	d507      	bpl.n	80087f4 <__smakebuf_r+0x1c>
 80087e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80087e8:	6023      	str	r3, [r4, #0]
 80087ea:	6123      	str	r3, [r4, #16]
 80087ec:	2301      	movs	r3, #1
 80087ee:	6163      	str	r3, [r4, #20]
 80087f0:	b003      	add	sp, #12
 80087f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087f4:	ab01      	add	r3, sp, #4
 80087f6:	466a      	mov	r2, sp
 80087f8:	f7ff ffc8 	bl	800878c <__swhatbuf_r>
 80087fc:	9f00      	ldr	r7, [sp, #0]
 80087fe:	4605      	mov	r5, r0
 8008800:	4639      	mov	r1, r7
 8008802:	4630      	mov	r0, r6
 8008804:	f7fe fe68 	bl	80074d8 <_malloc_r>
 8008808:	b948      	cbnz	r0, 800881e <__smakebuf_r+0x46>
 800880a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800880e:	059a      	lsls	r2, r3, #22
 8008810:	d4ee      	bmi.n	80087f0 <__smakebuf_r+0x18>
 8008812:	f023 0303 	bic.w	r3, r3, #3
 8008816:	f043 0302 	orr.w	r3, r3, #2
 800881a:	81a3      	strh	r3, [r4, #12]
 800881c:	e7e2      	b.n	80087e4 <__smakebuf_r+0xc>
 800881e:	89a3      	ldrh	r3, [r4, #12]
 8008820:	6020      	str	r0, [r4, #0]
 8008822:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008826:	81a3      	strh	r3, [r4, #12]
 8008828:	9b01      	ldr	r3, [sp, #4]
 800882a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800882e:	b15b      	cbz	r3, 8008848 <__smakebuf_r+0x70>
 8008830:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008834:	4630      	mov	r0, r6
 8008836:	f000 f81d 	bl	8008874 <_isatty_r>
 800883a:	b128      	cbz	r0, 8008848 <__smakebuf_r+0x70>
 800883c:	89a3      	ldrh	r3, [r4, #12]
 800883e:	f023 0303 	bic.w	r3, r3, #3
 8008842:	f043 0301 	orr.w	r3, r3, #1
 8008846:	81a3      	strh	r3, [r4, #12]
 8008848:	89a3      	ldrh	r3, [r4, #12]
 800884a:	431d      	orrs	r5, r3
 800884c:	81a5      	strh	r5, [r4, #12]
 800884e:	e7cf      	b.n	80087f0 <__smakebuf_r+0x18>

08008850 <_fstat_r>:
 8008850:	b538      	push	{r3, r4, r5, lr}
 8008852:	4d07      	ldr	r5, [pc, #28]	@ (8008870 <_fstat_r+0x20>)
 8008854:	2300      	movs	r3, #0
 8008856:	4604      	mov	r4, r0
 8008858:	4608      	mov	r0, r1
 800885a:	4611      	mov	r1, r2
 800885c:	602b      	str	r3, [r5, #0]
 800885e:	f7f8 fbdd 	bl	800101c <_fstat>
 8008862:	1c43      	adds	r3, r0, #1
 8008864:	d102      	bne.n	800886c <_fstat_r+0x1c>
 8008866:	682b      	ldr	r3, [r5, #0]
 8008868:	b103      	cbz	r3, 800886c <_fstat_r+0x1c>
 800886a:	6023      	str	r3, [r4, #0]
 800886c:	bd38      	pop	{r3, r4, r5, pc}
 800886e:	bf00      	nop
 8008870:	24000410 	.word	0x24000410

08008874 <_isatty_r>:
 8008874:	b538      	push	{r3, r4, r5, lr}
 8008876:	4d06      	ldr	r5, [pc, #24]	@ (8008890 <_isatty_r+0x1c>)
 8008878:	2300      	movs	r3, #0
 800887a:	4604      	mov	r4, r0
 800887c:	4608      	mov	r0, r1
 800887e:	602b      	str	r3, [r5, #0]
 8008880:	f7f8 fbdc 	bl	800103c <_isatty>
 8008884:	1c43      	adds	r3, r0, #1
 8008886:	d102      	bne.n	800888e <_isatty_r+0x1a>
 8008888:	682b      	ldr	r3, [r5, #0]
 800888a:	b103      	cbz	r3, 800888e <_isatty_r+0x1a>
 800888c:	6023      	str	r3, [r4, #0]
 800888e:	bd38      	pop	{r3, r4, r5, pc}
 8008890:	24000410 	.word	0x24000410

08008894 <_raise_r>:
 8008894:	291f      	cmp	r1, #31
 8008896:	b538      	push	{r3, r4, r5, lr}
 8008898:	4605      	mov	r5, r0
 800889a:	460c      	mov	r4, r1
 800889c:	d904      	bls.n	80088a8 <_raise_r+0x14>
 800889e:	2316      	movs	r3, #22
 80088a0:	6003      	str	r3, [r0, #0]
 80088a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088a6:	bd38      	pop	{r3, r4, r5, pc}
 80088a8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088aa:	b112      	cbz	r2, 80088b2 <_raise_r+0x1e>
 80088ac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80088b0:	b94b      	cbnz	r3, 80088c6 <_raise_r+0x32>
 80088b2:	4628      	mov	r0, r5
 80088b4:	f000 f830 	bl	8008918 <_getpid_r>
 80088b8:	4622      	mov	r2, r4
 80088ba:	4601      	mov	r1, r0
 80088bc:	4628      	mov	r0, r5
 80088be:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80088c2:	f000 b817 	b.w	80088f4 <_kill_r>
 80088c6:	2b01      	cmp	r3, #1
 80088c8:	d00a      	beq.n	80088e0 <_raise_r+0x4c>
 80088ca:	1c59      	adds	r1, r3, #1
 80088cc:	d103      	bne.n	80088d6 <_raise_r+0x42>
 80088ce:	2316      	movs	r3, #22
 80088d0:	6003      	str	r3, [r0, #0]
 80088d2:	2001      	movs	r0, #1
 80088d4:	e7e7      	b.n	80088a6 <_raise_r+0x12>
 80088d6:	2100      	movs	r1, #0
 80088d8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80088dc:	4620      	mov	r0, r4
 80088de:	4798      	blx	r3
 80088e0:	2000      	movs	r0, #0
 80088e2:	e7e0      	b.n	80088a6 <_raise_r+0x12>

080088e4 <raise>:
 80088e4:	4b02      	ldr	r3, [pc, #8]	@ (80088f0 <raise+0xc>)
 80088e6:	4601      	mov	r1, r0
 80088e8:	6818      	ldr	r0, [r3, #0]
 80088ea:	f7ff bfd3 	b.w	8008894 <_raise_r>
 80088ee:	bf00      	nop
 80088f0:	240001a4 	.word	0x240001a4

080088f4 <_kill_r>:
 80088f4:	b538      	push	{r3, r4, r5, lr}
 80088f6:	4d07      	ldr	r5, [pc, #28]	@ (8008914 <_kill_r+0x20>)
 80088f8:	2300      	movs	r3, #0
 80088fa:	4604      	mov	r4, r0
 80088fc:	4608      	mov	r0, r1
 80088fe:	4611      	mov	r1, r2
 8008900:	602b      	str	r3, [r5, #0]
 8008902:	f7f8 fb2b 	bl	8000f5c <_kill>
 8008906:	1c43      	adds	r3, r0, #1
 8008908:	d102      	bne.n	8008910 <_kill_r+0x1c>
 800890a:	682b      	ldr	r3, [r5, #0]
 800890c:	b103      	cbz	r3, 8008910 <_kill_r+0x1c>
 800890e:	6023      	str	r3, [r4, #0]
 8008910:	bd38      	pop	{r3, r4, r5, pc}
 8008912:	bf00      	nop
 8008914:	24000410 	.word	0x24000410

08008918 <_getpid_r>:
 8008918:	f7f8 bb18 	b.w	8000f4c <_getpid>

0800891c <_init>:
 800891c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800891e:	bf00      	nop
 8008920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008922:	bc08      	pop	{r3}
 8008924:	469e      	mov	lr, r3
 8008926:	4770      	bx	lr

08008928 <_fini>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	bf00      	nop
 800892c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800892e:	bc08      	pop	{r3}
 8008930:	469e      	mov	lr, r3
 8008932:	4770      	bx	lr
