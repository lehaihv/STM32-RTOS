
RTOS_E1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a80c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  0800aab0  0800aab0  0000bab0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800af48  0800af48  0000c1f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800af48  0800af48  0000bf48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800af50  0800af50  0000c1f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800af50  0800af50  0000bf50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800af54  0800af54  0000bf54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f4  24000000  0800af58  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000039c  240001f4  0800b14c  0000c1f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000590  0800b14c  0000c590  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000c1f4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161a9  00000000  00000000  0000c222  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b41  00000000  00000000  000223cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff0  00000000  00000000  00024f10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c4d  00000000  00000000  00025f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b11d  00000000  00000000  00026b4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001672b  00000000  00000000  00061c6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017f129  00000000  00000000  00078395  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001f74be  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000556c  00000000  00000000  001f7504  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001fca70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240001f4 	.word	0x240001f4
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800aa94 	.word	0x0800aa94

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240001f8 	.word	0x240001f8
 80002dc:	0800aa94 	.word	0x0800aa94

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b9a2 	b.w	8000a64 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f83e 	bl	80007a8 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__aeabi_d2lz>:
 8000738:	b508      	push	{r3, lr}
 800073a:	4602      	mov	r2, r0
 800073c:	460b      	mov	r3, r1
 800073e:	ec43 2b17 	vmov	d7, r2, r3
 8000742:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800074a:	d403      	bmi.n	8000754 <__aeabi_d2lz+0x1c>
 800074c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000750:	f000 b80a 	b.w	8000768 <__aeabi_d2ulz>
 8000754:	eeb1 7b47 	vneg.f64	d7, d7
 8000758:	ec51 0b17 	vmov	r0, r1, d7
 800075c:	f000 f804 	bl	8000768 <__aeabi_d2ulz>
 8000760:	4240      	negs	r0, r0
 8000762:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000766:	bd08      	pop	{r3, pc}

08000768 <__aeabi_d2ulz>:
 8000768:	ed9f 6b0b 	vldr	d6, [pc, #44]	@ 8000798 <__aeabi_d2ulz+0x30>
 800076c:	ec41 0b17 	vmov	d7, r0, r1
 8000770:	ed9f 5b0b 	vldr	d5, [pc, #44]	@ 80007a0 <__aeabi_d2ulz+0x38>
 8000774:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000778:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800077c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000780:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000784:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000788:	ee16 1a10 	vmov	r1, s12
 800078c:	ee17 0a90 	vmov	r0, s15
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	f3af 8000 	nop.w
 8000798:	00000000 	.word	0x00000000
 800079c:	3df00000 	.word	0x3df00000
 80007a0:	00000000 	.word	0x00000000
 80007a4:	41f00000 	.word	0x41f00000

080007a8 <__udivmoddi4>:
 80007a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007ac:	9d08      	ldr	r5, [sp, #32]
 80007ae:	460c      	mov	r4, r1
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d14e      	bne.n	8000852 <__udivmoddi4+0xaa>
 80007b4:	4694      	mov	ip, r2
 80007b6:	458c      	cmp	ip, r1
 80007b8:	4686      	mov	lr, r0
 80007ba:	fab2 f282 	clz	r2, r2
 80007be:	d962      	bls.n	8000886 <__udivmoddi4+0xde>
 80007c0:	b14a      	cbz	r2, 80007d6 <__udivmoddi4+0x2e>
 80007c2:	f1c2 0320 	rsb	r3, r2, #32
 80007c6:	4091      	lsls	r1, r2
 80007c8:	fa20 f303 	lsr.w	r3, r0, r3
 80007cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80007d0:	4319      	orrs	r1, r3
 80007d2:	fa00 fe02 	lsl.w	lr, r0, r2
 80007d6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80007da:	fa1f f68c 	uxth.w	r6, ip
 80007de:	fbb1 f4f7 	udiv	r4, r1, r7
 80007e2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80007e6:	fb07 1114 	mls	r1, r7, r4, r1
 80007ea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ee:	fb04 f106 	mul.w	r1, r4, r6
 80007f2:	4299      	cmp	r1, r3
 80007f4:	d90a      	bls.n	800080c <__udivmoddi4+0x64>
 80007f6:	eb1c 0303 	adds.w	r3, ip, r3
 80007fa:	f104 30ff 	add.w	r0, r4, #4294967295
 80007fe:	f080 8112 	bcs.w	8000a26 <__udivmoddi4+0x27e>
 8000802:	4299      	cmp	r1, r3
 8000804:	f240 810f 	bls.w	8000a26 <__udivmoddi4+0x27e>
 8000808:	3c02      	subs	r4, #2
 800080a:	4463      	add	r3, ip
 800080c:	1a59      	subs	r1, r3, r1
 800080e:	fa1f f38e 	uxth.w	r3, lr
 8000812:	fbb1 f0f7 	udiv	r0, r1, r7
 8000816:	fb07 1110 	mls	r1, r7, r0, r1
 800081a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800081e:	fb00 f606 	mul.w	r6, r0, r6
 8000822:	429e      	cmp	r6, r3
 8000824:	d90a      	bls.n	800083c <__udivmoddi4+0x94>
 8000826:	eb1c 0303 	adds.w	r3, ip, r3
 800082a:	f100 31ff 	add.w	r1, r0, #4294967295
 800082e:	f080 80fc 	bcs.w	8000a2a <__udivmoddi4+0x282>
 8000832:	429e      	cmp	r6, r3
 8000834:	f240 80f9 	bls.w	8000a2a <__udivmoddi4+0x282>
 8000838:	4463      	add	r3, ip
 800083a:	3802      	subs	r0, #2
 800083c:	1b9b      	subs	r3, r3, r6
 800083e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000842:	2100      	movs	r1, #0
 8000844:	b11d      	cbz	r5, 800084e <__udivmoddi4+0xa6>
 8000846:	40d3      	lsrs	r3, r2
 8000848:	2200      	movs	r2, #0
 800084a:	e9c5 3200 	strd	r3, r2, [r5]
 800084e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000852:	428b      	cmp	r3, r1
 8000854:	d905      	bls.n	8000862 <__udivmoddi4+0xba>
 8000856:	b10d      	cbz	r5, 800085c <__udivmoddi4+0xb4>
 8000858:	e9c5 0100 	strd	r0, r1, [r5]
 800085c:	2100      	movs	r1, #0
 800085e:	4608      	mov	r0, r1
 8000860:	e7f5      	b.n	800084e <__udivmoddi4+0xa6>
 8000862:	fab3 f183 	clz	r1, r3
 8000866:	2900      	cmp	r1, #0
 8000868:	d146      	bne.n	80008f8 <__udivmoddi4+0x150>
 800086a:	42a3      	cmp	r3, r4
 800086c:	d302      	bcc.n	8000874 <__udivmoddi4+0xcc>
 800086e:	4290      	cmp	r0, r2
 8000870:	f0c0 80f0 	bcc.w	8000a54 <__udivmoddi4+0x2ac>
 8000874:	1a86      	subs	r6, r0, r2
 8000876:	eb64 0303 	sbc.w	r3, r4, r3
 800087a:	2001      	movs	r0, #1
 800087c:	2d00      	cmp	r5, #0
 800087e:	d0e6      	beq.n	800084e <__udivmoddi4+0xa6>
 8000880:	e9c5 6300 	strd	r6, r3, [r5]
 8000884:	e7e3      	b.n	800084e <__udivmoddi4+0xa6>
 8000886:	2a00      	cmp	r2, #0
 8000888:	f040 8090 	bne.w	80009ac <__udivmoddi4+0x204>
 800088c:	eba1 040c 	sub.w	r4, r1, ip
 8000890:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000894:	fa1f f78c 	uxth.w	r7, ip
 8000898:	2101      	movs	r1, #1
 800089a:	fbb4 f6f8 	udiv	r6, r4, r8
 800089e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008a2:	fb08 4416 	mls	r4, r8, r6, r4
 80008a6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008aa:	fb07 f006 	mul.w	r0, r7, r6
 80008ae:	4298      	cmp	r0, r3
 80008b0:	d908      	bls.n	80008c4 <__udivmoddi4+0x11c>
 80008b2:	eb1c 0303 	adds.w	r3, ip, r3
 80008b6:	f106 34ff 	add.w	r4, r6, #4294967295
 80008ba:	d202      	bcs.n	80008c2 <__udivmoddi4+0x11a>
 80008bc:	4298      	cmp	r0, r3
 80008be:	f200 80cd 	bhi.w	8000a5c <__udivmoddi4+0x2b4>
 80008c2:	4626      	mov	r6, r4
 80008c4:	1a1c      	subs	r4, r3, r0
 80008c6:	fa1f f38e 	uxth.w	r3, lr
 80008ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80008ce:	fb08 4410 	mls	r4, r8, r0, r4
 80008d2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80008d6:	fb00 f707 	mul.w	r7, r0, r7
 80008da:	429f      	cmp	r7, r3
 80008dc:	d908      	bls.n	80008f0 <__udivmoddi4+0x148>
 80008de:	eb1c 0303 	adds.w	r3, ip, r3
 80008e2:	f100 34ff 	add.w	r4, r0, #4294967295
 80008e6:	d202      	bcs.n	80008ee <__udivmoddi4+0x146>
 80008e8:	429f      	cmp	r7, r3
 80008ea:	f200 80b0 	bhi.w	8000a4e <__udivmoddi4+0x2a6>
 80008ee:	4620      	mov	r0, r4
 80008f0:	1bdb      	subs	r3, r3, r7
 80008f2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008f6:	e7a5      	b.n	8000844 <__udivmoddi4+0x9c>
 80008f8:	f1c1 0620 	rsb	r6, r1, #32
 80008fc:	408b      	lsls	r3, r1
 80008fe:	fa22 f706 	lsr.w	r7, r2, r6
 8000902:	431f      	orrs	r7, r3
 8000904:	fa20 fc06 	lsr.w	ip, r0, r6
 8000908:	fa04 f301 	lsl.w	r3, r4, r1
 800090c:	ea43 030c 	orr.w	r3, r3, ip
 8000910:	40f4      	lsrs	r4, r6
 8000912:	fa00 f801 	lsl.w	r8, r0, r1
 8000916:	0c38      	lsrs	r0, r7, #16
 8000918:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800091c:	fbb4 fef0 	udiv	lr, r4, r0
 8000920:	fa1f fc87 	uxth.w	ip, r7
 8000924:	fb00 441e 	mls	r4, r0, lr, r4
 8000928:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800092c:	fb0e f90c 	mul.w	r9, lr, ip
 8000930:	45a1      	cmp	r9, r4
 8000932:	fa02 f201 	lsl.w	r2, r2, r1
 8000936:	d90a      	bls.n	800094e <__udivmoddi4+0x1a6>
 8000938:	193c      	adds	r4, r7, r4
 800093a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800093e:	f080 8084 	bcs.w	8000a4a <__udivmoddi4+0x2a2>
 8000942:	45a1      	cmp	r9, r4
 8000944:	f240 8081 	bls.w	8000a4a <__udivmoddi4+0x2a2>
 8000948:	f1ae 0e02 	sub.w	lr, lr, #2
 800094c:	443c      	add	r4, r7
 800094e:	eba4 0409 	sub.w	r4, r4, r9
 8000952:	fa1f f983 	uxth.w	r9, r3
 8000956:	fbb4 f3f0 	udiv	r3, r4, r0
 800095a:	fb00 4413 	mls	r4, r0, r3, r4
 800095e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000962:	fb03 fc0c 	mul.w	ip, r3, ip
 8000966:	45a4      	cmp	ip, r4
 8000968:	d907      	bls.n	800097a <__udivmoddi4+0x1d2>
 800096a:	193c      	adds	r4, r7, r4
 800096c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000970:	d267      	bcs.n	8000a42 <__udivmoddi4+0x29a>
 8000972:	45a4      	cmp	ip, r4
 8000974:	d965      	bls.n	8000a42 <__udivmoddi4+0x29a>
 8000976:	3b02      	subs	r3, #2
 8000978:	443c      	add	r4, r7
 800097a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800097e:	fba0 9302 	umull	r9, r3, r0, r2
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	429c      	cmp	r4, r3
 8000988:	46ce      	mov	lr, r9
 800098a:	469c      	mov	ip, r3
 800098c:	d351      	bcc.n	8000a32 <__udivmoddi4+0x28a>
 800098e:	d04e      	beq.n	8000a2e <__udivmoddi4+0x286>
 8000990:	b155      	cbz	r5, 80009a8 <__udivmoddi4+0x200>
 8000992:	ebb8 030e 	subs.w	r3, r8, lr
 8000996:	eb64 040c 	sbc.w	r4, r4, ip
 800099a:	fa04 f606 	lsl.w	r6, r4, r6
 800099e:	40cb      	lsrs	r3, r1
 80009a0:	431e      	orrs	r6, r3
 80009a2:	40cc      	lsrs	r4, r1
 80009a4:	e9c5 6400 	strd	r6, r4, [r5]
 80009a8:	2100      	movs	r1, #0
 80009aa:	e750      	b.n	800084e <__udivmoddi4+0xa6>
 80009ac:	f1c2 0320 	rsb	r3, r2, #32
 80009b0:	fa20 f103 	lsr.w	r1, r0, r3
 80009b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80009b8:	fa24 f303 	lsr.w	r3, r4, r3
 80009bc:	4094      	lsls	r4, r2
 80009be:	430c      	orrs	r4, r1
 80009c0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009c4:	fa00 fe02 	lsl.w	lr, r0, r2
 80009c8:	fa1f f78c 	uxth.w	r7, ip
 80009cc:	fbb3 f0f8 	udiv	r0, r3, r8
 80009d0:	fb08 3110 	mls	r1, r8, r0, r3
 80009d4:	0c23      	lsrs	r3, r4, #16
 80009d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80009da:	fb00 f107 	mul.w	r1, r0, r7
 80009de:	4299      	cmp	r1, r3
 80009e0:	d908      	bls.n	80009f4 <__udivmoddi4+0x24c>
 80009e2:	eb1c 0303 	adds.w	r3, ip, r3
 80009e6:	f100 36ff 	add.w	r6, r0, #4294967295
 80009ea:	d22c      	bcs.n	8000a46 <__udivmoddi4+0x29e>
 80009ec:	4299      	cmp	r1, r3
 80009ee:	d92a      	bls.n	8000a46 <__udivmoddi4+0x29e>
 80009f0:	3802      	subs	r0, #2
 80009f2:	4463      	add	r3, ip
 80009f4:	1a5b      	subs	r3, r3, r1
 80009f6:	b2a4      	uxth	r4, r4
 80009f8:	fbb3 f1f8 	udiv	r1, r3, r8
 80009fc:	fb08 3311 	mls	r3, r8, r1, r3
 8000a00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a04:	fb01 f307 	mul.w	r3, r1, r7
 8000a08:	42a3      	cmp	r3, r4
 8000a0a:	d908      	bls.n	8000a1e <__udivmoddi4+0x276>
 8000a0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a10:	f101 36ff 	add.w	r6, r1, #4294967295
 8000a14:	d213      	bcs.n	8000a3e <__udivmoddi4+0x296>
 8000a16:	42a3      	cmp	r3, r4
 8000a18:	d911      	bls.n	8000a3e <__udivmoddi4+0x296>
 8000a1a:	3902      	subs	r1, #2
 8000a1c:	4464      	add	r4, ip
 8000a1e:	1ae4      	subs	r4, r4, r3
 8000a20:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000a24:	e739      	b.n	800089a <__udivmoddi4+0xf2>
 8000a26:	4604      	mov	r4, r0
 8000a28:	e6f0      	b.n	800080c <__udivmoddi4+0x64>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e706      	b.n	800083c <__udivmoddi4+0x94>
 8000a2e:	45c8      	cmp	r8, r9
 8000a30:	d2ae      	bcs.n	8000990 <__udivmoddi4+0x1e8>
 8000a32:	ebb9 0e02 	subs.w	lr, r9, r2
 8000a36:	eb63 0c07 	sbc.w	ip, r3, r7
 8000a3a:	3801      	subs	r0, #1
 8000a3c:	e7a8      	b.n	8000990 <__udivmoddi4+0x1e8>
 8000a3e:	4631      	mov	r1, r6
 8000a40:	e7ed      	b.n	8000a1e <__udivmoddi4+0x276>
 8000a42:	4603      	mov	r3, r0
 8000a44:	e799      	b.n	800097a <__udivmoddi4+0x1d2>
 8000a46:	4630      	mov	r0, r6
 8000a48:	e7d4      	b.n	80009f4 <__udivmoddi4+0x24c>
 8000a4a:	46d6      	mov	lr, sl
 8000a4c:	e77f      	b.n	800094e <__udivmoddi4+0x1a6>
 8000a4e:	4463      	add	r3, ip
 8000a50:	3802      	subs	r0, #2
 8000a52:	e74d      	b.n	80008f0 <__udivmoddi4+0x148>
 8000a54:	4606      	mov	r6, r0
 8000a56:	4623      	mov	r3, r4
 8000a58:	4608      	mov	r0, r1
 8000a5a:	e70f      	b.n	800087c <__udivmoddi4+0xd4>
 8000a5c:	3e02      	subs	r6, #2
 8000a5e:	4463      	add	r3, ip
 8000a60:	e730      	b.n	80008c4 <__udivmoddi4+0x11c>
 8000a62:	bf00      	nop

08000a64 <__aeabi_idiv0>:
 8000a64:	4770      	bx	lr
 8000a66:	bf00      	nop

08000a68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a6c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b64 <SystemInit+0xfc>)
 8000a6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a72:	4a3c      	ldr	r2, [pc, #240]	@ (8000b64 <SystemInit+0xfc>)
 8000a74:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a78:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a7c:	4b39      	ldr	r3, [pc, #228]	@ (8000b64 <SystemInit+0xfc>)
 8000a7e:	691b      	ldr	r3, [r3, #16]
 8000a80:	4a38      	ldr	r2, [pc, #224]	@ (8000b64 <SystemInit+0xfc>)
 8000a82:	f043 0310 	orr.w	r3, r3, #16
 8000a86:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a88:	4b37      	ldr	r3, [pc, #220]	@ (8000b68 <SystemInit+0x100>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	f003 030f 	and.w	r3, r3, #15
 8000a90:	2b06      	cmp	r3, #6
 8000a92:	d807      	bhi.n	8000aa4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a94:	4b34      	ldr	r3, [pc, #208]	@ (8000b68 <SystemInit+0x100>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f023 030f 	bic.w	r3, r3, #15
 8000a9c:	4a32      	ldr	r2, [pc, #200]	@ (8000b68 <SystemInit+0x100>)
 8000a9e:	f043 0307 	orr.w	r3, r3, #7
 8000aa2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000aa4:	4b31      	ldr	r3, [pc, #196]	@ (8000b6c <SystemInit+0x104>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a30      	ldr	r2, [pc, #192]	@ (8000b6c <SystemInit+0x104>)
 8000aaa:	f043 0301 	orr.w	r3, r3, #1
 8000aae:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000ab0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b6c <SystemInit+0x104>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000ab6:	4b2d      	ldr	r3, [pc, #180]	@ (8000b6c <SystemInit+0x104>)
 8000ab8:	681a      	ldr	r2, [r3, #0]
 8000aba:	492c      	ldr	r1, [pc, #176]	@ (8000b6c <SystemInit+0x104>)
 8000abc:	4b2c      	ldr	r3, [pc, #176]	@ (8000b70 <SystemInit+0x108>)
 8000abe:	4013      	ands	r3, r2
 8000ac0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000ac2:	4b29      	ldr	r3, [pc, #164]	@ (8000b68 <SystemInit+0x100>)
 8000ac4:	681b      	ldr	r3, [r3, #0]
 8000ac6:	f003 0308 	and.w	r3, r3, #8
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d007      	beq.n	8000ade <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000ace:	4b26      	ldr	r3, [pc, #152]	@ (8000b68 <SystemInit+0x100>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f023 030f 	bic.w	r3, r3, #15
 8000ad6:	4a24      	ldr	r2, [pc, #144]	@ (8000b68 <SystemInit+0x100>)
 8000ad8:	f043 0307 	orr.w	r3, r3, #7
 8000adc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000ade:	4b23      	ldr	r3, [pc, #140]	@ (8000b6c <SystemInit+0x104>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ae4:	4b21      	ldr	r3, [pc, #132]	@ (8000b6c <SystemInit+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000aea:	4b20      	ldr	r3, [pc, #128]	@ (8000b6c <SystemInit+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000af0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b6c <SystemInit+0x104>)
 8000af2:	4a20      	ldr	r2, [pc, #128]	@ (8000b74 <SystemInit+0x10c>)
 8000af4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000af6:	4b1d      	ldr	r3, [pc, #116]	@ (8000b6c <SystemInit+0x104>)
 8000af8:	4a1f      	ldr	r2, [pc, #124]	@ (8000b78 <SystemInit+0x110>)
 8000afa:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000afc:	4b1b      	ldr	r3, [pc, #108]	@ (8000b6c <SystemInit+0x104>)
 8000afe:	4a1f      	ldr	r2, [pc, #124]	@ (8000b7c <SystemInit+0x114>)
 8000b00:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000b02:	4b1a      	ldr	r3, [pc, #104]	@ (8000b6c <SystemInit+0x104>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000b08:	4b18      	ldr	r3, [pc, #96]	@ (8000b6c <SystemInit+0x104>)
 8000b0a:	4a1c      	ldr	r2, [pc, #112]	@ (8000b7c <SystemInit+0x114>)
 8000b0c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000b0e:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <SystemInit+0x104>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b14:	4b15      	ldr	r3, [pc, #84]	@ (8000b6c <SystemInit+0x104>)
 8000b16:	4a19      	ldr	r2, [pc, #100]	@ (8000b7c <SystemInit+0x114>)
 8000b18:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <SystemInit+0x104>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <SystemInit+0x104>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	4a11      	ldr	r2, [pc, #68]	@ (8000b6c <SystemInit+0x104>)
 8000b26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b2a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <SystemInit+0x104>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <SystemInit+0x118>)
 8000b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b36:	4a12      	ldr	r2, [pc, #72]	@ (8000b80 <SystemInit+0x118>)
 8000b38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b3c:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b3e:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <SystemInit+0x11c>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <SystemInit+0x120>)
 8000b44:	4013      	ands	r3, r2
 8000b46:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b4a:	d202      	bcs.n	8000b52 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <SystemInit+0x124>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b52:	4b0f      	ldr	r3, [pc, #60]	@ (8000b90 <SystemInit+0x128>)
 8000b54:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b58:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b5a:	bf00      	nop
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b62:	4770      	bx	lr
 8000b64:	e000ed00 	.word	0xe000ed00
 8000b68:	52002000 	.word	0x52002000
 8000b6c:	58024400 	.word	0x58024400
 8000b70:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b74:	02020200 	.word	0x02020200
 8000b78:	01ff0000 	.word	0x01ff0000
 8000b7c:	01010280 	.word	0x01010280
 8000b80:	580000c0 	.word	0x580000c0
 8000b84:	5c001000 	.word	0x5c001000
 8000b88:	ffff0000 	.word	0xffff0000
 8000b8c:	51008108 	.word	0x51008108
 8000b90:	52004000 	.word	0x52004000

08000b94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	@ 0x30
 8000b98:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000b9a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000ba0:	bf00      	nop
 8000ba2:	4b58      	ldr	r3, [pc, #352]	@ (8000d04 <main+0x170>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d004      	beq.n	8000bb8 <main+0x24>
 8000bae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bb0:	1e5a      	subs	r2, r3, #1
 8000bb2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	dcf4      	bgt.n	8000ba2 <main+0xe>
  if ( timeout < 0 )
 8000bb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <main+0x2e>
  {
  Error_Handler();
 8000bbe:	f000 faa7 	bl	8001110 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bc2:	f000 ff91 	bl	8001ae8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bc6:	f000 f8a9 	bl	8000d1c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000bca:	4b4e      	ldr	r3, [pc, #312]	@ (8000d04 <main+0x170>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8000d04 <main+0x170>)
 8000bd2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000bd6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bda:	4b4a      	ldr	r3, [pc, #296]	@ (8000d04 <main+0x170>)
 8000bdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000be4:	603b      	str	r3, [r7, #0]
 8000be6:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000be8:	2000      	movs	r0, #0
 8000bea:	f001 fb9d 	bl	8002328 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000bee:	2100      	movs	r1, #0
 8000bf0:	2000      	movs	r0, #0
 8000bf2:	f001 fbb3 	bl	800235c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000bf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bfa:	62fb      	str	r3, [r7, #44]	@ 0x2c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000bfc:	bf00      	nop
 8000bfe:	4b41      	ldr	r3, [pc, #260]	@ (8000d04 <main+0x170>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d104      	bne.n	8000c14 <main+0x80>
 8000c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c0c:	1e5a      	subs	r2, r3, #1
 8000c0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	dcf4      	bgt.n	8000bfe <main+0x6a>
if ( timeout < 0 )
 8000c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	da01      	bge.n	8000c1e <main+0x8a>
{
Error_Handler();
 8000c1a:	f000 fa79 	bl	8001110 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c1e:	f000 f9bf 	bl	8000fa0 <MX_GPIO_Init>
  MX_I2C2_Init();
 8000c22:	f000 f8e5 	bl	8000df0 <MX_I2C2_Init>
  MX_UART4_Init();
 8000c26:	f000 f923 	bl	8000e70 <MX_UART4_Init>
  MX_USART2_UART_Init();
 8000c2a:	f000 f96d 	bl	8000f08 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000c2e:	2000      	movs	r0, #0
 8000c30:	f000 fd22 	bl	8001678 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000c34:	2001      	movs	r0, #1
 8000c36:	f000 fd1f 	bl	8001678 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8000c3a:	2002      	movs	r0, #2
 8000c3c:	f000 fd1c 	bl	8001678 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 8000c40:	2101      	movs	r1, #1
 8000c42:	2000      	movs	r0, #0
 8000c44:	f000 fde2 	bl	800180c <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 8000c48:	4b2f      	ldr	r3, [pc, #188]	@ (8000d08 <main+0x174>)
 8000c4a:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c4e:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 8000c50:	4b2d      	ldr	r3, [pc, #180]	@ (8000d08 <main+0x174>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 8000c56:	4b2c      	ldr	r3, [pc, #176]	@ (8000d08 <main+0x174>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 8000c5c:	4b2a      	ldr	r3, [pc, #168]	@ (8000d08 <main+0x174>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 8000c62:	4b29      	ldr	r3, [pc, #164]	@ (8000d08 <main+0x174>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 8000c68:	4927      	ldr	r1, [pc, #156]	@ (8000d08 <main+0x174>)
 8000c6a:	2000      	movs	r0, #0
 8000c6c:	f000 fe5e 	bl	800192c <BSP_COM_Init>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <main+0xe6>
  {
    Error_Handler();
 8000c76:	f000 fa4b 	bl	8001110 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  char msg[20] = "ABC\n\r";
 8000c7a:	4a24      	ldr	r2, [pc, #144]	@ (8000d0c <main+0x178>)
 8000c7c:	f107 0318 	add.w	r3, r7, #24
 8000c80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c84:	6018      	str	r0, [r3, #0]
 8000c86:	3304      	adds	r3, #4
 8000c88:	8019      	strh	r1, [r3, #0]
 8000c8a:	f107 031e 	add.w	r3, r7, #30
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
 8000c92:	605a      	str	r2, [r3, #4]
 8000c94:	609a      	str	r2, [r3, #8]
 8000c96:	819a      	strh	r2, [r3, #12]
  char msg1[20] = "ABCdef\n\r";
 8000c98:	4a1d      	ldr	r2, [pc, #116]	@ (8000d10 <main+0x17c>)
 8000c9a:	1d3b      	adds	r3, r7, #4
 8000c9c:	ca07      	ldmia	r2, {r0, r1, r2}
 8000c9e:	c303      	stmia	r3!, {r0, r1}
 8000ca0:	701a      	strb	r2, [r3, #0]
 8000ca2:	f107 030d 	add.w	r3, r7, #13
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
 8000caa:	605a      	str	r2, [r3, #4]
 8000cac:	f8c3 2007 	str.w	r2, [r3, #7]
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
	HAL_Delay(500);
	// LED OFF
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
	HAL_Delay(500);*/
	HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY); //&huart2
 8000cb0:	f107 0318 	add.w	r3, r7, #24
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	f7ff fb63 	bl	8000380 <strlen>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	f107 0118 	add.w	r1, r7, #24
 8000cc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cc6:	4813      	ldr	r0, [pc, #76]	@ (8000d14 <main+0x180>)
 8000cc8:	f004 fb4c 	bl	8005364 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*)msg1, strlen(msg1), HAL_MAX_DELAY);
 8000ccc:	1d3b      	adds	r3, r7, #4
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fb56 	bl	8000380 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	b29a      	uxth	r2, r3
 8000cd8:	1d39      	adds	r1, r7, #4
 8000cda:	f04f 33ff 	mov.w	r3, #4294967295
 8000cde:	480e      	ldr	r0, [pc, #56]	@ (8000d18 <main+0x184>)
 8000ce0:	f004 fb40 	bl	8005364 <HAL_UART_Transmit>
	//printf("stm32");
	HAL_Delay(500);
 8000ce4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000ce8:	f000 ff90 	bl	8001c0c <HAL_Delay>
	/* Turn LED1 off */
	BSP_LED_Off(LED_GREEN);
 8000cec:	2000      	movs	r0, #0
 8000cee:	f000 fd63 	bl	80017b8 <BSP_LED_Off>
	HAL_Delay(500);
 8000cf2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000cf6:	f000 ff89 	bl	8001c0c <HAL_Delay>
	/* Turn LED1 on */
	BSP_LED_On(LED_GREEN);
 8000cfa:	2000      	movs	r0, #0
 8000cfc:	f000 fd32 	bl	8001764 <BSP_LED_On>
	HAL_UART_Transmit(&huart4, (uint8_t*)msg, strlen(msg), HAL_MAX_DELAY); //&huart2
 8000d00:	bf00      	nop
 8000d02:	e7d5      	b.n	8000cb0 <main+0x11c>
 8000d04:	58024400 	.word	0x58024400
 8000d08:	24000210 	.word	0x24000210
 8000d0c:	0800aab0 	.word	0x0800aab0
 8000d10:	0800aac4 	.word	0x0800aac4
 8000d14:	24000274 	.word	0x24000274
 8000d18:	24000308 	.word	0x24000308

08000d1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b09c      	sub	sp, #112	@ 0x70
 8000d20:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d22:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d26:	224c      	movs	r2, #76	@ 0x4c
 8000d28:	2100      	movs	r1, #0
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f006 fb9d 	bl	800746a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d30:	1d3b      	adds	r3, r7, #4
 8000d32:	2220      	movs	r2, #32
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f006 fb97 	bl	800746a <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000d3c:	2004      	movs	r0, #4
 8000d3e:	f001 fc55 	bl	80025ec <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d42:	2300      	movs	r3, #0
 8000d44:	603b      	str	r3, [r7, #0]
 8000d46:	4b28      	ldr	r3, [pc, #160]	@ (8000de8 <SystemClock_Config+0xcc>)
 8000d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d4a:	4a27      	ldr	r2, [pc, #156]	@ (8000de8 <SystemClock_Config+0xcc>)
 8000d4c:	f023 0301 	bic.w	r3, r3, #1
 8000d50:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000d52:	4b25      	ldr	r3, [pc, #148]	@ (8000de8 <SystemClock_Config+0xcc>)
 8000d54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d56:	f003 0301 	and.w	r3, r3, #1
 8000d5a:	603b      	str	r3, [r7, #0]
 8000d5c:	4b23      	ldr	r3, [pc, #140]	@ (8000dec <SystemClock_Config+0xd0>)
 8000d5e:	699b      	ldr	r3, [r3, #24]
 8000d60:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000d64:	4a21      	ldr	r2, [pc, #132]	@ (8000dec <SystemClock_Config+0xd0>)
 8000d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000d6a:	6193      	str	r3, [r2, #24]
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	@ (8000dec <SystemClock_Config+0xd0>)
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000d74:	603b      	str	r3, [r7, #0]
 8000d76:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000d78:	bf00      	nop
 8000d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8000dec <SystemClock_Config+0xd0>)
 8000d7c:	699b      	ldr	r3, [r3, #24]
 8000d7e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000d86:	d1f8      	bne.n	8000d7a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d88:	2302      	movs	r3, #2
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV2;
 8000d8c:	2309      	movs	r3, #9
 8000d8e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d90:	2340      	movs	r3, #64	@ 0x40
 8000d92:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d94:	2300      	movs	r3, #0
 8000d96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f001 fc7f 	bl	80026a0 <HAL_RCC_OscConfig>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000da8:	f000 f9b2 	bl	8001110 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dac:	233f      	movs	r3, #63	@ 0x3f
 8000dae:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000db0:	2300      	movs	r3, #0
 8000db2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000db8:	2300      	movs	r3, #0
 8000dba:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000dc0:	2340      	movs	r3, #64	@ 0x40
 8000dc2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f002 f8bf 	bl	8002f54 <HAL_RCC_ClockConfig>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d001      	beq.n	8000de0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000ddc:	f000 f998 	bl	8001110 <Error_Handler>
  }
}
 8000de0:	bf00      	nop
 8000de2:	3770      	adds	r7, #112	@ 0x70
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	58000400 	.word	0x58000400
 8000dec:	58024800 	.word	0x58024800

08000df0 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000df4:	4b1b      	ldr	r3, [pc, #108]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000df6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e68 <MX_I2C2_Init+0x78>)
 8000df8:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00303D5B;
 8000dfa:	4b1a      	ldr	r3, [pc, #104]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000dfc:	4a1b      	ldr	r2, [pc, #108]	@ (8000e6c <MX_I2C2_Init+0x7c>)
 8000dfe:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000e00:	4b18      	ldr	r3, [pc, #96]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e06:	4b17      	ldr	r3, [pc, #92]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000e08:	2201      	movs	r2, #1
 8000e0a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e0c:	4b15      	ldr	r3, [pc, #84]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000e12:	4b14      	ldr	r3, [pc, #80]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e18:	4b12      	ldr	r3, [pc, #72]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1e:	4b11      	ldr	r3, [pc, #68]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e24:	4b0f      	ldr	r3, [pc, #60]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000e2a:	480e      	ldr	r0, [pc, #56]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000e2c:	f001 faaa 	bl	8002384 <HAL_I2C_Init>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000e36:	f000 f96b 	bl	8001110 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	4809      	ldr	r0, [pc, #36]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000e3e:	f001 fb3d 	bl	80024bc <HAL_I2CEx_ConfigAnalogFilter>
 8000e42:	4603      	mov	r3, r0
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d001      	beq.n	8000e4c <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000e48:	f000 f962 	bl	8001110 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	4805      	ldr	r0, [pc, #20]	@ (8000e64 <MX_I2C2_Init+0x74>)
 8000e50:	f001 fb7f 	bl	8002552 <HAL_I2CEx_ConfigDigitalFilter>
 8000e54:	4603      	mov	r3, r0
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d001      	beq.n	8000e5e <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000e5a:	f000 f959 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000e5e:	bf00      	nop
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	24000220 	.word	0x24000220
 8000e68:	40005800 	.word	0x40005800
 8000e6c:	00303d5b 	.word	0x00303d5b

08000e70 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8000e74:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000e76:	4a23      	ldr	r2, [pc, #140]	@ (8000f04 <MX_UART4_Init+0x94>)
 8000e78:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8000e7a:	4b21      	ldr	r3, [pc, #132]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000e7c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e80:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8000e82:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8000e8e:	4b1c      	ldr	r3, [pc, #112]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8000e94:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000e96:	220c      	movs	r2, #12
 8000e98:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e9a:	4b19      	ldr	r3, [pc, #100]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ea0:	4b17      	ldr	r3, [pc, #92]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ea6:	4b16      	ldr	r3, [pc, #88]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000eac:	4b14      	ldr	r3, [pc, #80]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eb2:	4b13      	ldr	r3, [pc, #76]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8000eb8:	4811      	ldr	r0, [pc, #68]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000eba:	f004 fa03 	bl	80052c4 <HAL_UART_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8000ec4:	f000 f924 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ec8:	2100      	movs	r1, #0
 8000eca:	480d      	ldr	r0, [pc, #52]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000ecc:	f005 fa99 	bl	8006402 <HAL_UARTEx_SetTxFifoThreshold>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8000ed6:	f000 f91b 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000eda:	2100      	movs	r1, #0
 8000edc:	4808      	ldr	r0, [pc, #32]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000ede:	f005 face 	bl	800647e <HAL_UARTEx_SetRxFifoThreshold>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8000ee8:	f000 f912 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8000eec:	4804      	ldr	r0, [pc, #16]	@ (8000f00 <MX_UART4_Init+0x90>)
 8000eee:	f005 fa4f 	bl	8006390 <HAL_UARTEx_DisableFifoMode>
 8000ef2:	4603      	mov	r3, r0
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d001      	beq.n	8000efc <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8000ef8:	f000 f90a 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000efc:	bf00      	nop
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	24000274 	.word	0x24000274
 8000f04:	40004c00 	.word	0x40004c00

08000f08 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f0c:	4b22      	ldr	r3, [pc, #136]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f0e:	4a23      	ldr	r2, [pc, #140]	@ (8000f9c <MX_USART2_UART_Init+0x94>)
 8000f10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f12:	4b21      	ldr	r3, [pc, #132]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f14:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f1a:	4b1f      	ldr	r3, [pc, #124]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f20:	4b1d      	ldr	r3, [pc, #116]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f2e:	220c      	movs	r2, #12
 8000f30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f32:	4b19      	ldr	r3, [pc, #100]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f38:	4b17      	ldr	r3, [pc, #92]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f3e:	4b16      	ldr	r3, [pc, #88]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f44:	4b14      	ldr	r3, [pc, #80]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f50:	4811      	ldr	r0, [pc, #68]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f52:	f004 f9b7 	bl	80052c4 <HAL_UART_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000f5c:	f000 f8d8 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f60:	2100      	movs	r1, #0
 8000f62:	480d      	ldr	r0, [pc, #52]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f64:	f005 fa4d 	bl	8006402 <HAL_UARTEx_SetTxFifoThreshold>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000f6e:	f000 f8cf 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f72:	2100      	movs	r1, #0
 8000f74:	4808      	ldr	r0, [pc, #32]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f76:	f005 fa82 	bl	800647e <HAL_UARTEx_SetRxFifoThreshold>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000f80:	f000 f8c6 	bl	8001110 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000f84:	4804      	ldr	r0, [pc, #16]	@ (8000f98 <MX_USART2_UART_Init+0x90>)
 8000f86:	f005 fa03 	bl	8006390 <HAL_UARTEx_DisableFifoMode>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d001      	beq.n	8000f94 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000f90:	f000 f8be 	bl	8001110 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f94:	bf00      	nop
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	24000308 	.word	0x24000308
 8000f9c:	40004400 	.word	0x40004400

08000fa0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	@ 0x28
 8000fa4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fa6:	f107 0314 	add.w	r3, r7, #20
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
 8000fb0:	609a      	str	r2, [r3, #8]
 8000fb2:	60da      	str	r2, [r3, #12]
 8000fb4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b51      	ldr	r3, [pc, #324]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8000fb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fbc:	4a4f      	ldr	r2, [pc, #316]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8000fbe:	f043 0304 	orr.w	r3, r3, #4
 8000fc2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fc6:	4b4d      	ldr	r3, [pc, #308]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8000fc8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd4:	4b49      	ldr	r3, [pc, #292]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8000fd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fda:	4a48      	ldr	r2, [pc, #288]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8000fdc:	f043 0301 	orr.w	r3, r3, #1
 8000fe0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fe4:	4b45      	ldr	r3, [pc, #276]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	f003 0301 	and.w	r3, r3, #1
 8000fee:	60fb      	str	r3, [r7, #12]
 8000ff0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	4b42      	ldr	r3, [pc, #264]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8000ff4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ff8:	4a40      	ldr	r2, [pc, #256]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8000ffa:	f043 0302 	orr.w	r3, r3, #2
 8000ffe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001002:	4b3e      	ldr	r3, [pc, #248]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8001004:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001008:	f003 0302 	and.w	r3, r3, #2
 800100c:	60bb      	str	r3, [r7, #8]
 800100e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001010:	4b3a      	ldr	r3, [pc, #232]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8001012:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001016:	4a39      	ldr	r2, [pc, #228]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8001018:	f043 0308 	orr.w	r3, r3, #8
 800101c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001020:	4b36      	ldr	r3, [pc, #216]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8001022:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001026:	f003 0308 	and.w	r3, r3, #8
 800102a:	607b      	str	r3, [r7, #4]
 800102c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800102e:	4b33      	ldr	r3, [pc, #204]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8001030:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001034:	4a31      	ldr	r2, [pc, #196]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8001036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800103a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800103e:	4b2f      	ldr	r3, [pc, #188]	@ (80010fc <MX_GPIO_Init+0x15c>)
 8001040:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001044:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800104c:	2332      	movs	r3, #50	@ 0x32
 800104e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	2302      	movs	r3, #2
 8001052:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	2300      	movs	r3, #0
 8001056:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001058:	2300      	movs	r3, #0
 800105a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800105c:	230b      	movs	r3, #11
 800105e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001060:	f107 0314 	add.w	r3, r7, #20
 8001064:	4619      	mov	r1, r3
 8001066:	4826      	ldr	r0, [pc, #152]	@ (8001100 <MX_GPIO_Init+0x160>)
 8001068:	f000 ff94 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800106c:	2386      	movs	r3, #134	@ 0x86
 800106e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001070:	2302      	movs	r3, #2
 8001072:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001078:	2300      	movs	r3, #0
 800107a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800107c:	230b      	movs	r3, #11
 800107e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4619      	mov	r1, r3
 8001086:	481f      	ldr	r0, [pc, #124]	@ (8001104 <MX_GPIO_Init+0x164>)
 8001088:	f000 ff84 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800108c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001092:	2302      	movs	r3, #2
 8001094:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001096:	2300      	movs	r3, #0
 8001098:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109a:	2300      	movs	r3, #0
 800109c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800109e:	230b      	movs	r3, #11
 80010a0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a2:	f107 0314 	add.w	r3, r7, #20
 80010a6:	4619      	mov	r1, r3
 80010a8:	4817      	ldr	r0, [pc, #92]	@ (8001108 <MX_GPIO_Init+0x168>)
 80010aa:	f000 ff73 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010ae:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80010b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b4:	2302      	movs	r3, #2
 80010b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b8:	2300      	movs	r3, #0
 80010ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010c0:	230a      	movs	r3, #10
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	480e      	ldr	r0, [pc, #56]	@ (8001104 <MX_GPIO_Init+0x164>)
 80010cc:	f000 ff62 	bl	8001f94 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80010d0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 80010d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d6:	2302      	movs	r3, #2
 80010d8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010da:	2300      	movs	r3, #0
 80010dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80010e2:	230b      	movs	r3, #11
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	4807      	ldr	r0, [pc, #28]	@ (800110c <MX_GPIO_Init+0x16c>)
 80010ee:	f000 ff51 	bl	8001f94 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010f2:	bf00      	nop
 80010f4:	3728      	adds	r7, #40	@ 0x28
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	58024400 	.word	0x58024400
 8001100:	58020800 	.word	0x58020800
 8001104:	58020000 	.word	0x58020000
 8001108:	58020400 	.word	0x58020400
 800110c:	58021800 	.word	0x58021800

08001110 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001114:	b672      	cpsid	i
}
 8001116:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001118:	bf00      	nop
 800111a:	e7fd      	b.n	8001118 <Error_Handler+0x8>

0800111c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800111c:	b480      	push	{r7}
 800111e:	b083      	sub	sp, #12
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001122:	4b0a      	ldr	r3, [pc, #40]	@ (800114c <HAL_MspInit+0x30>)
 8001124:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001128:	4a08      	ldr	r2, [pc, #32]	@ (800114c <HAL_MspInit+0x30>)
 800112a:	f043 0302 	orr.w	r3, r3, #2
 800112e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001132:	4b06      	ldr	r3, [pc, #24]	@ (800114c <HAL_MspInit+0x30>)
 8001134:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001138:	f003 0302 	and.w	r3, r3, #2
 800113c:	607b      	str	r3, [r7, #4]
 800113e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001140:	bf00      	nop
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	58024400 	.word	0x58024400

08001150 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b0ba      	sub	sp, #232	@ 0xe8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001158:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 800115c:	2200      	movs	r2, #0
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	605a      	str	r2, [r3, #4]
 8001162:	609a      	str	r2, [r3, #8]
 8001164:	60da      	str	r2, [r3, #12]
 8001166:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001168:	f107 0310 	add.w	r3, r7, #16
 800116c:	22c0      	movs	r2, #192	@ 0xc0
 800116e:	2100      	movs	r1, #0
 8001170:	4618      	mov	r0, r3
 8001172:	f006 f97a 	bl	800746a <memset>
  if(hi2c->Instance==I2C2)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	4a27      	ldr	r2, [pc, #156]	@ (8001218 <HAL_I2C_MspInit+0xc8>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d146      	bne.n	800120e <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001180:	f04f 0208 	mov.w	r2, #8
 8001184:	f04f 0300 	mov.w	r3, #0
 8001188:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4618      	mov	r0, r3
 8001198:	f002 fa68 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80011a2:	f7ff ffb5 	bl	8001110 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a6:	4b1d      	ldr	r3, [pc, #116]	@ (800121c <HAL_I2C_MspInit+0xcc>)
 80011a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011ac:	4a1b      	ldr	r2, [pc, #108]	@ (800121c <HAL_I2C_MspInit+0xcc>)
 80011ae:	f043 0302 	orr.w	r3, r3, #2
 80011b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80011b6:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_I2C_MspInit+0xcc>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80011bc:	f003 0302 	and.w	r3, r3, #2
 80011c0:	60fb      	str	r3, [r7, #12]
 80011c2:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80011c4:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80011c8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011cc:	2312      	movs	r3, #18
 80011ce:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80011de:	2304      	movs	r3, #4
 80011e0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011e4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80011e8:	4619      	mov	r1, r3
 80011ea:	480d      	ldr	r0, [pc, #52]	@ (8001220 <HAL_I2C_MspInit+0xd0>)
 80011ec:	f000 fed2 	bl	8001f94 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80011f0:	4b0a      	ldr	r3, [pc, #40]	@ (800121c <HAL_I2C_MspInit+0xcc>)
 80011f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80011f6:	4a09      	ldr	r2, [pc, #36]	@ (800121c <HAL_I2C_MspInit+0xcc>)
 80011f8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80011fc:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001200:	4b06      	ldr	r3, [pc, #24]	@ (800121c <HAL_I2C_MspInit+0xcc>)
 8001202:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 800120e:	bf00      	nop
 8001210:	37e8      	adds	r7, #232	@ 0xe8
 8001212:	46bd      	mov	sp, r7
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40005800 	.word	0x40005800
 800121c:	58024400 	.word	0x58024400
 8001220:	58020400 	.word	0x58020400

08001224 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b0be      	sub	sp, #248	@ 0xf8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800122c:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001230:	2200      	movs	r2, #0
 8001232:	601a      	str	r2, [r3, #0]
 8001234:	605a      	str	r2, [r3, #4]
 8001236:	609a      	str	r2, [r3, #8]
 8001238:	60da      	str	r2, [r3, #12]
 800123a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	22c0      	movs	r2, #192	@ 0xc0
 8001242:	2100      	movs	r1, #0
 8001244:	4618      	mov	r0, r3
 8001246:	f006 f910 	bl	800746a <memset>
  if(huart->Instance==UART4)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a71      	ldr	r2, [pc, #452]	@ (8001414 <HAL_UART_MspInit+0x1f0>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d16b      	bne.n	800132c <HAL_UART_MspInit+0x108>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8001254:	f04f 0202 	mov.w	r2, #2
 8001258:	f04f 0300 	mov.w	r3, #0
 800125c:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8001260:	2303      	movs	r3, #3
 8001262:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001266:	f107 0320 	add.w	r3, r7, #32
 800126a:	4618      	mov	r0, r3
 800126c:	f002 f9fe 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001276:	f7ff ff4b 	bl	8001110 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800127a:	4b67      	ldr	r3, [pc, #412]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 800127c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001280:	4a65      	ldr	r2, [pc, #404]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 8001282:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8001286:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800128a:	4b63      	ldr	r3, [pc, #396]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 800128c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001290:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001298:	4b5f      	ldr	r3, [pc, #380]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 800129a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800129e:	4a5e      	ldr	r2, [pc, #376]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012a8:	4b5b      	ldr	r3, [pc, #364]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 80012aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ae:	f003 0301 	and.w	r3, r3, #1
 80012b2:	61bb      	str	r3, [r7, #24]
 80012b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	4b58      	ldr	r3, [pc, #352]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 80012b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012bc:	4a56      	ldr	r2, [pc, #344]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 80012be:	f043 0304 	orr.w	r3, r3, #4
 80012c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c6:	4b54      	ldr	r3, [pc, #336]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 80012c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	617b      	str	r3, [r7, #20]
 80012d2:	697b      	ldr	r3, [r7, #20]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80012d4:	2301      	movs	r3, #1
 80012d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e6:	2300      	movs	r3, #0
 80012e8:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012ec:	2308      	movs	r3, #8
 80012ee:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012f2:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80012f6:	4619      	mov	r1, r3
 80012f8:	4848      	ldr	r0, [pc, #288]	@ (800141c <HAL_UART_MspInit+0x1f8>)
 80012fa:	f000 fe4b 	bl	8001f94 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80012fe:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001302:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001306:	2302      	movs	r3, #2
 8001308:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8001318:	2308      	movs	r3, #8
 800131a:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800131e:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001322:	4619      	mov	r1, r3
 8001324:	483e      	ldr	r0, [pc, #248]	@ (8001420 <HAL_UART_MspInit+0x1fc>)
 8001326:	f000 fe35 	bl	8001f94 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800132a:	e06e      	b.n	800140a <HAL_UART_MspInit+0x1e6>
  else if(huart->Instance==USART2)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a3c      	ldr	r2, [pc, #240]	@ (8001424 <HAL_UART_MspInit+0x200>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d169      	bne.n	800140a <HAL_UART_MspInit+0x1e6>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001336:	f04f 0202 	mov.w	r2, #2
 800133a:	f04f 0300 	mov.w	r3, #0
 800133e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_HSI;
 8001342:	2303      	movs	r3, #3
 8001344:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001348:	f107 0320 	add.w	r3, r7, #32
 800134c:	4618      	mov	r0, r3
 800134e:	f002 f98d 	bl	800366c <HAL_RCCEx_PeriphCLKConfig>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <HAL_UART_MspInit+0x138>
      Error_Handler();
 8001358:	f7ff feda 	bl	8001110 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 800135c:	4b2e      	ldr	r3, [pc, #184]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 800135e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001362:	4a2d      	ldr	r2, [pc, #180]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 8001364:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001368:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800136c:	4b2a      	ldr	r3, [pc, #168]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 800136e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001372:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001376:	613b      	str	r3, [r7, #16]
 8001378:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800137a:	4b27      	ldr	r3, [pc, #156]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 800137c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001380:	4a25      	ldr	r2, [pc, #148]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 8001382:	f043 0301 	orr.w	r3, r3, #1
 8001386:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800138a:	4b23      	ldr	r3, [pc, #140]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 800138c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001390:	f003 0301 	and.w	r3, r3, #1
 8001394:	60fb      	str	r3, [r7, #12]
 8001396:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001398:	4b1f      	ldr	r3, [pc, #124]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 800139a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800139e:	4a1e      	ldr	r2, [pc, #120]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 80013a0:	f043 0308 	orr.w	r3, r3, #8
 80013a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001418 <HAL_UART_MspInit+0x1f4>)
 80013aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ae:	f003 0308 	and.w	r3, r3, #8
 80013b2:	60bb      	str	r3, [r7, #8]
 80013b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013b6:	2308      	movs	r3, #8
 80013b8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013bc:	2302      	movs	r3, #2
 80013be:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c2:	2300      	movs	r3, #0
 80013c4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c8:	2300      	movs	r3, #0
 80013ca:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013ce:	2307      	movs	r3, #7
 80013d0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d4:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 80013d8:	4619      	mov	r1, r3
 80013da:	4810      	ldr	r0, [pc, #64]	@ (800141c <HAL_UART_MspInit+0x1f8>)
 80013dc:	f000 fdda 	bl	8001f94 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013e0:	2320      	movs	r3, #32
 80013e2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80013f8:	2307      	movs	r3, #7
 80013fa:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	f107 03e4 	add.w	r3, r7, #228	@ 0xe4
 8001402:	4619      	mov	r1, r3
 8001404:	4808      	ldr	r0, [pc, #32]	@ (8001428 <HAL_UART_MspInit+0x204>)
 8001406:	f000 fdc5 	bl	8001f94 <HAL_GPIO_Init>
}
 800140a:	bf00      	nop
 800140c:	37f8      	adds	r7, #248	@ 0xf8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40004c00 	.word	0x40004c00
 8001418:	58024400 	.word	0x58024400
 800141c:	58020000 	.word	0x58020000
 8001420:	58020800 	.word	0x58020800
 8001424:	40004400 	.word	0x40004400
 8001428:	58020c00 	.word	0x58020c00

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001430:	bf00      	nop
 8001432:	e7fd      	b.n	8001430 <NMI_Handler+0x4>

08001434 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001438:	bf00      	nop
 800143a:	e7fd      	b.n	8001438 <HardFault_Handler+0x4>

0800143c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001440:	bf00      	nop
 8001442:	e7fd      	b.n	8001440 <MemManage_Handler+0x4>

08001444 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001448:	bf00      	nop
 800144a:	e7fd      	b.n	8001448 <BusFault_Handler+0x4>

0800144c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001450:	bf00      	nop
 8001452:	e7fd      	b.n	8001450 <UsageFault_Handler+0x4>

08001454 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001482:	f000 fba3 	bl	8001bcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	bd80      	pop	{r7, pc}

0800148a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800148a:	b580      	push	{r7, lr}
 800148c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 800148e:	2000      	movs	r0, #0
 8001490:	f000 fa2e 	bl	80018f0 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	bd80      	pop	{r7, pc}

08001498 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  return 1;
 800149c:	2301      	movs	r3, #1
}
 800149e:	4618      	mov	r0, r3
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <_kill>:

int _kill(int pid, int sig)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80014b2:	f006 f82d 	bl	8007510 <__errno>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2216      	movs	r2, #22
 80014ba:	601a      	str	r2, [r3, #0]
  return -1;
 80014bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}

080014c8 <_exit>:

void _exit (int status)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b082      	sub	sp, #8
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80014d0:	f04f 31ff 	mov.w	r1, #4294967295
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ffe7 	bl	80014a8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80014da:	bf00      	nop
 80014dc:	e7fd      	b.n	80014da <_exit+0x12>

080014de <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014de:	b580      	push	{r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	60f8      	str	r0, [r7, #12]
 80014e6:	60b9      	str	r1, [r7, #8]
 80014e8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014ea:	2300      	movs	r3, #0
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e00a      	b.n	8001506 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80014f0:	f3af 8000 	nop.w
 80014f4:	4601      	mov	r1, r0
 80014f6:	68bb      	ldr	r3, [r7, #8]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	60ba      	str	r2, [r7, #8]
 80014fc:	b2ca      	uxtb	r2, r1
 80014fe:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	3301      	adds	r3, #1
 8001504:	617b      	str	r3, [r7, #20]
 8001506:	697a      	ldr	r2, [r7, #20]
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	429a      	cmp	r2, r3
 800150c:	dbf0      	blt.n	80014f0 <_read+0x12>
  }

  return len;
 800150e:	687b      	ldr	r3, [r7, #4]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3718      	adds	r7, #24
 8001514:	46bd      	mov	sp, r7
 8001516:	bd80      	pop	{r7, pc}

08001518 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b086      	sub	sp, #24
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001524:	2300      	movs	r3, #0
 8001526:	617b      	str	r3, [r7, #20]
 8001528:	e009      	b.n	800153e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	60ba      	str	r2, [r7, #8]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 fa5c 	bl	80019f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	3301      	adds	r3, #1
 800153c:	617b      	str	r3, [r7, #20]
 800153e:	697a      	ldr	r2, [r7, #20]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	429a      	cmp	r2, r3
 8001544:	dbf1      	blt.n	800152a <_write+0x12>
  }
  return len;
 8001546:	687b      	ldr	r3, [r7, #4]
}
 8001548:	4618      	mov	r0, r3
 800154a:	3718      	adds	r7, #24
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}

08001550 <_close>:

int _close(int file)
{
 8001550:	b480      	push	{r7}
 8001552:	b083      	sub	sp, #12
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001558:	f04f 33ff 	mov.w	r3, #4294967295
}
 800155c:	4618      	mov	r0, r3
 800155e:	370c      	adds	r7, #12
 8001560:	46bd      	mov	sp, r7
 8001562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001566:	4770      	bx	lr

08001568 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
 8001570:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001578:	605a      	str	r2, [r3, #4]
  return 0;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <_isatty>:

int _isatty(int file)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001590:	2301      	movs	r3, #1
}
 8001592:	4618      	mov	r0, r3
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr

0800159e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800159e:	b480      	push	{r7}
 80015a0:	b085      	sub	sp, #20
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	60f8      	str	r0, [r7, #12]
 80015a6:	60b9      	str	r1, [r7, #8]
 80015a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80015aa:	2300      	movs	r3, #0
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr

080015b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b086      	sub	sp, #24
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015c0:	4a14      	ldr	r2, [pc, #80]	@ (8001614 <_sbrk+0x5c>)
 80015c2:	4b15      	ldr	r3, [pc, #84]	@ (8001618 <_sbrk+0x60>)
 80015c4:	1ad3      	subs	r3, r2, r3
 80015c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015cc:	4b13      	ldr	r3, [pc, #76]	@ (800161c <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d102      	bne.n	80015da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <_sbrk+0x64>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <_sbrk+0x68>)
 80015d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <_sbrk+0x64>)
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4413      	add	r3, r2
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d207      	bcs.n	80015f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015e8:	f005 ff92 	bl	8007510 <__errno>
 80015ec:	4603      	mov	r3, r0
 80015ee:	220c      	movs	r2, #12
 80015f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	e009      	b.n	800160c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <_sbrk+0x64>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015fe:	4b07      	ldr	r3, [pc, #28]	@ (800161c <_sbrk+0x64>)
 8001600:	681a      	ldr	r2, [r3, #0]
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4413      	add	r3, r2
 8001606:	4a05      	ldr	r2, [pc, #20]	@ (800161c <_sbrk+0x64>)
 8001608:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800160a:	68fb      	ldr	r3, [r7, #12]
}
 800160c:	4618      	mov	r0, r3
 800160e:	3718      	adds	r7, #24
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	24080000 	.word	0x24080000
 8001618:	00000400 	.word	0x00000400
 800161c:	2400039c 	.word	0x2400039c
 8001620:	24000590 	.word	0x24000590

08001624 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001624:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800165c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001628:	f7ff fa1e 	bl	8000a68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800162c:	480c      	ldr	r0, [pc, #48]	@ (8001660 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800162e:	490d      	ldr	r1, [pc, #52]	@ (8001664 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001630:	4a0d      	ldr	r2, [pc, #52]	@ (8001668 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001632:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001634:	e002      	b.n	800163c <LoopCopyDataInit>

08001636 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001636:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001638:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800163a:	3304      	adds	r3, #4

0800163c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800163c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800163e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001640:	d3f9      	bcc.n	8001636 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001642:	4a0a      	ldr	r2, [pc, #40]	@ (800166c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001644:	4c0a      	ldr	r4, [pc, #40]	@ (8001670 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001646:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001648:	e001      	b.n	800164e <LoopFillZerobss>

0800164a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800164a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800164c:	3204      	adds	r2, #4

0800164e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800164e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001650:	d3fb      	bcc.n	800164a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001652:	f005 ff63 	bl	800751c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001656:	f7ff fa9d 	bl	8000b94 <main>
  bx  lr
 800165a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800165c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001660:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001664:	240001f4 	.word	0x240001f4
  ldr r2, =_sidata
 8001668:	0800af58 	.word	0x0800af58
  ldr r2, =_sbss
 800166c:	240001f4 	.word	0x240001f4
  ldr r4, =_ebss
 8001670:	24000590 	.word	0x24000590

08001674 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001674:	e7fe      	b.n	8001674 <ADC3_IRQHandler>
	...

08001678 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b08c      	sub	sp, #48	@ 0x30
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001682:	2300      	movs	r3, #0
 8001684:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d009      	beq.n	80016a0 <BSP_LED_Init+0x28>
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	2b01      	cmp	r3, #1
 8001690:	d006      	beq.n	80016a0 <BSP_LED_Init+0x28>
 8001692:	79fb      	ldrb	r3, [r7, #7]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d003      	beq.n	80016a0 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001698:	f06f 0301 	mvn.w	r3, #1
 800169c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800169e:	e055      	b.n	800174c <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 80016a0:	79fb      	ldrb	r3, [r7, #7]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d10f      	bne.n	80016c6 <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 80016a6:	4b2c      	ldr	r3, [pc, #176]	@ (8001758 <BSP_LED_Init+0xe0>)
 80016a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016ac:	4a2a      	ldr	r2, [pc, #168]	@ (8001758 <BSP_LED_Init+0xe0>)
 80016ae:	f043 0302 	orr.w	r3, r3, #2
 80016b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016b6:	4b28      	ldr	r3, [pc, #160]	@ (8001758 <BSP_LED_Init+0xe0>)
 80016b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	e021      	b.n	800170a <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	2b01      	cmp	r3, #1
 80016ca:	d10f      	bne.n	80016ec <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 80016cc:	4b22      	ldr	r3, [pc, #136]	@ (8001758 <BSP_LED_Init+0xe0>)
 80016ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016d2:	4a21      	ldr	r2, [pc, #132]	@ (8001758 <BSP_LED_Init+0xe0>)
 80016d4:	f043 0310 	orr.w	r3, r3, #16
 80016d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001758 <BSP_LED_Init+0xe0>)
 80016de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016e2:	f003 0310 	and.w	r3, r3, #16
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	e00e      	b.n	800170a <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 80016ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001758 <BSP_LED_Init+0xe0>)
 80016ee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80016f2:	4a19      	ldr	r2, [pc, #100]	@ (8001758 <BSP_LED_Init+0xe0>)
 80016f4:	f043 0302 	orr.w	r3, r3, #2
 80016f8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80016fc:	4b16      	ldr	r3, [pc, #88]	@ (8001758 <BSP_LED_Init+0xe0>)
 80016fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001702:	f003 0302 	and.w	r3, r3, #2
 8001706:	60fb      	str	r3, [r7, #12]
 8001708:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 800170a:	79fb      	ldrb	r3, [r7, #7]
 800170c:	4a13      	ldr	r2, [pc, #76]	@ (800175c <BSP_LED_Init+0xe4>)
 800170e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001712:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800171c:	2303      	movs	r3, #3
 800171e:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001720:	79fb      	ldrb	r3, [r7, #7]
 8001722:	4a0f      	ldr	r2, [pc, #60]	@ (8001760 <BSP_LED_Init+0xe8>)
 8001724:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001728:	f107 0218 	add.w	r2, r7, #24
 800172c:	4611      	mov	r1, r2
 800172e:	4618      	mov	r0, r3
 8001730:	f000 fc30 	bl	8001f94 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8001734:	79fb      	ldrb	r3, [r7, #7]
 8001736:	4a0a      	ldr	r2, [pc, #40]	@ (8001760 <BSP_LED_Init+0xe8>)
 8001738:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800173c:	79fb      	ldrb	r3, [r7, #7]
 800173e:	4a07      	ldr	r2, [pc, #28]	@ (800175c <BSP_LED_Init+0xe4>)
 8001740:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001744:	2200      	movs	r2, #0
 8001746:	4619      	mov	r1, r3
 8001748:	f000 fdd4 	bl	80022f4 <HAL_GPIO_WritePin>
  }

  return ret;
 800174c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800174e:	4618      	mov	r0, r3
 8001750:	3730      	adds	r7, #48	@ 0x30
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	58024400 	.word	0x58024400
 800175c:	0800aae8 	.word	0x0800aae8
 8001760:	2400000c 	.word	0x2400000c

08001764 <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b084      	sub	sp, #16
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800176e:	2300      	movs	r3, #0
 8001770:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8001772:	79fb      	ldrb	r3, [r7, #7]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d009      	beq.n	800178c <BSP_LED_On+0x28>
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d006      	beq.n	800178c <BSP_LED_On+0x28>
 800177e:	79fb      	ldrb	r3, [r7, #7]
 8001780:	2b02      	cmp	r3, #2
 8001782:	d003      	beq.n	800178c <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001784:	f06f 0301 	mvn.w	r3, #1
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e00b      	b.n	80017a4 <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800178c:	79fb      	ldrb	r3, [r7, #7]
 800178e:	4a08      	ldr	r2, [pc, #32]	@ (80017b0 <BSP_LED_On+0x4c>)
 8001790:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001794:	79fb      	ldrb	r3, [r7, #7]
 8001796:	4a07      	ldr	r2, [pc, #28]	@ (80017b4 <BSP_LED_On+0x50>)
 8001798:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800179c:	2201      	movs	r2, #1
 800179e:	4619      	mov	r1, r3
 80017a0:	f000 fda8 	bl	80022f4 <HAL_GPIO_WritePin>
  }

  return ret;
 80017a4:	68fb      	ldr	r3, [r7, #12]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3710      	adds	r7, #16
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	2400000c 	.word	0x2400000c
 80017b4:	0800aae8 	.word	0x0800aae8

080017b8 <BSP_LED_Off>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Off(Led_TypeDef Led)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b084      	sub	sp, #16
 80017bc:	af00      	add	r7, sp, #0
 80017be:	4603      	mov	r3, r0
 80017c0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d009      	beq.n	80017e0 <BSP_LED_Off+0x28>
 80017cc:	79fb      	ldrb	r3, [r7, #7]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d006      	beq.n	80017e0 <BSP_LED_Off+0x28>
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d003      	beq.n	80017e0 <BSP_LED_Off+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80017d8:	f06f 0301 	mvn.w	r3, #1
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e00b      	b.n	80017f8 <BSP_LED_Off+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017e0:	79fb      	ldrb	r3, [r7, #7]
 80017e2:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <BSP_LED_Off+0x4c>)
 80017e4:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <BSP_LED_Off+0x50>)
 80017ec:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80017f0:	2200      	movs	r2, #0
 80017f2:	4619      	mov	r1, r3
 80017f4:	f000 fd7e 	bl	80022f4 <HAL_GPIO_WritePin>
  }

  return ret;
 80017f8:	68fb      	ldr	r3, [r7, #12]
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	2400000c 	.word	0x2400000c
 8001808:	0800aae8 	.word	0x0800aae8

0800180c <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b088      	sub	sp, #32
 8001810:	af00      	add	r7, sp, #0
 8001812:	4603      	mov	r3, r0
 8001814:	460a      	mov	r2, r1
 8001816:	71fb      	strb	r3, [r7, #7]
 8001818:	4613      	mov	r3, r2
 800181a:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 800181c:	4b2e      	ldr	r3, [pc, #184]	@ (80018d8 <BSP_PB_Init+0xcc>)
 800181e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001822:	4a2d      	ldr	r2, [pc, #180]	@ (80018d8 <BSP_PB_Init+0xcc>)
 8001824:	f043 0304 	orr.w	r3, r3, #4
 8001828:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800182c:	4b2a      	ldr	r3, [pc, #168]	@ (80018d8 <BSP_PB_Init+0xcc>)
 800182e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001832:	f003 0304 	and.w	r3, r3, #4
 8001836:	60bb      	str	r3, [r7, #8]
 8001838:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800183a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800183e:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001840:	2302      	movs	r3, #2
 8001842:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001844:	2302      	movs	r3, #2
 8001846:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001848:	79bb      	ldrb	r3, [r7, #6]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d10c      	bne.n	8001868 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800184e:	2300      	movs	r3, #0
 8001850:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	4a21      	ldr	r2, [pc, #132]	@ (80018dc <BSP_PB_Init+0xd0>)
 8001856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185a:	f107 020c 	add.w	r2, r7, #12
 800185e:	4611      	mov	r1, r2
 8001860:	4618      	mov	r0, r3
 8001862:	f000 fb97 	bl	8001f94 <HAL_GPIO_Init>
 8001866:	e031      	b.n	80018cc <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001868:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800186c:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	4a1a      	ldr	r2, [pc, #104]	@ (80018dc <BSP_PB_Init+0xd0>)
 8001872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001876:	f107 020c 	add.w	r2, r7, #12
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fb89 	bl	8001f94 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8001882:	79fb      	ldrb	r3, [r7, #7]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4a16      	ldr	r2, [pc, #88]	@ (80018e0 <BSP_PB_Init+0xd4>)
 8001888:	441a      	add	r2, r3
 800188a:	79fb      	ldrb	r3, [r7, #7]
 800188c:	4915      	ldr	r1, [pc, #84]	@ (80018e4 <BSP_PB_Init+0xd8>)
 800188e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001892:	4619      	mov	r1, r3
 8001894:	4610      	mov	r0, r2
 8001896:	f000 fb2c 	bl	8001ef2 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	00db      	lsls	r3, r3, #3
 800189e:	4a10      	ldr	r2, [pc, #64]	@ (80018e0 <BSP_PB_Init+0xd4>)
 80018a0:	1898      	adds	r0, r3, r2
 80018a2:	79fb      	ldrb	r3, [r7, #7]
 80018a4:	4a10      	ldr	r2, [pc, #64]	@ (80018e8 <BSP_PB_Init+0xdc>)
 80018a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018aa:	461a      	mov	r2, r3
 80018ac:	2100      	movs	r1, #0
 80018ae:	f000 fb01 	bl	8001eb4 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80018b2:	2028      	movs	r0, #40	@ 0x28
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4a0d      	ldr	r2, [pc, #52]	@ (80018ec <BSP_PB_Init+0xe0>)
 80018b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018bc:	2200      	movs	r2, #0
 80018be:	4619      	mov	r1, r3
 80018c0:	f000 faaf 	bl	8001e22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80018c4:	2328      	movs	r3, #40	@ 0x28
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 fac5 	bl	8001e56 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3720      	adds	r7, #32
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	58024400 	.word	0x58024400
 80018dc:	24000018 	.word	0x24000018
 80018e0:	240003a0 	.word	0x240003a0
 80018e4:	0800aaf0 	.word	0x0800aaf0
 80018e8:	2400001c 	.word	0x2400001c
 80018ec:	24000020 	.word	0x24000020

080018f0 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4a04      	ldr	r2, [pc, #16]	@ (8001910 <BSP_PB_IRQHandler+0x20>)
 8001900:	4413      	add	r3, r2
 8001902:	4618      	mov	r0, r3
 8001904:	f000 fb0a 	bl	8001f1c <HAL_EXTI_IRQHandler>
}
 8001908:	bf00      	nop
 800190a:	3708      	adds	r7, #8
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	240003a0 	.word	0x240003a0

08001914 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 800191e:	bf00      	nop
 8001920:	370c      	adds	r7, #12
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
	...

0800192c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001938:	2300      	movs	r3, #0
 800193a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800193c:	79fb      	ldrb	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d003      	beq.n	800194a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001942:	f06f 0301 	mvn.w	r3, #1
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	e018      	b.n	800197c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800194a:	79fb      	ldrb	r3, [r7, #7]
 800194c:	2294      	movs	r2, #148	@ 0x94
 800194e:	fb02 f303 	mul.w	r3, r2, r3
 8001952:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <BSP_COM_Init+0x5c>)
 8001954:	4413      	add	r3, r2
 8001956:	4618      	mov	r0, r3
 8001958:	f000 f86e 	bl	8001a38 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	2294      	movs	r2, #148	@ 0x94
 8001960:	fb02 f303 	mul.w	r3, r2, r3
 8001964:	4a08      	ldr	r2, [pc, #32]	@ (8001988 <BSP_COM_Init+0x5c>)
 8001966:	4413      	add	r3, r2
 8001968:	6839      	ldr	r1, [r7, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f80e 	bl	800198c <MX_USART3_Init>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d002      	beq.n	800197c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001976:	f06f 0303 	mvn.w	r3, #3
 800197a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800197c:	68fb      	ldr	r3, [r7, #12]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3710      	adds	r7, #16
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	240003a8 	.word	0x240003a8

0800198c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001996:	4b15      	ldr	r3, [pc, #84]	@ (80019ec <MX_USART3_Init+0x60>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681a      	ldr	r2, [r3, #0]
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	220c      	movs	r2, #12
 80019aa:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	895b      	ldrh	r3, [r3, #10]
 80019b0:	461a      	mov	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	891b      	ldrh	r3, [r3, #8]
 80019c2:	461a      	mov	r2, r3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	899b      	ldrh	r3, [r3, #12]
 80019cc:	461a      	mov	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80019d8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80019da:	6878      	ldr	r0, [r7, #4]
 80019dc:	f003 fc72 	bl	80052c4 <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	24000008 	.word	0x24000008

080019f0 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b082      	sub	sp, #8
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <__io_putchar+0x30>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	461a      	mov	r2, r3
 80019fe:	2394      	movs	r3, #148	@ 0x94
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	4a07      	ldr	r2, [pc, #28]	@ (8001a24 <__io_putchar+0x34>)
 8001a06:	1898      	adds	r0, r3, r2
 8001a08:	1d39      	adds	r1, r7, #4
 8001a0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f003 fca8 	bl	8005364 <HAL_UART_Transmit>
  return ch;
 8001a14:	687b      	ldr	r3, [r7, #4]
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	2400043c 	.word	0x2400043c
 8001a24:	240003a8 	.word	0x240003a8

08001a28 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8001a2c:	2000      	movs	r0, #0
 8001a2e:	f7ff ff71 	bl	8001914 <BSP_PB_Callback>
}
 8001a32:	bf00      	nop
 8001a34:	bd80      	pop	{r7, pc}
	...

08001a38 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b08a      	sub	sp, #40	@ 0x28
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001a40:	4b27      	ldr	r3, [pc, #156]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a46:	4a26      	ldr	r2, [pc, #152]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a48:	f043 0308 	orr.w	r3, r3, #8
 8001a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a50:	4b23      	ldr	r3, [pc, #140]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a56:	f003 0308 	and.w	r3, r3, #8
 8001a5a:	613b      	str	r3, [r7, #16]
 8001a5c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001a5e:	4b20      	ldr	r3, [pc, #128]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a64:	4a1e      	ldr	r2, [pc, #120]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a66:	f043 0308 	orr.w	r3, r3, #8
 8001a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a6e:	4b1c      	ldr	r3, [pc, #112]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a74:	f003 0308 	and.w	r3, r3, #8
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001a7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a82:	4a17      	ldr	r2, [pc, #92]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a84:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a88:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001a8c:	4b14      	ldr	r3, [pc, #80]	@ (8001ae0 <COM1_MspInit+0xa8>)
 8001a8e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001a92:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a96:	60bb      	str	r3, [r7, #8]
 8001a98:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001a9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a9e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001aac:	2307      	movs	r3, #7
 8001aae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	480b      	ldr	r0, [pc, #44]	@ (8001ae4 <COM1_MspInit+0xac>)
 8001ab8:	f000 fa6c 	bl	8001f94 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001abc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001ac0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001ac2:	2302      	movs	r3, #2
 8001ac4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4804      	ldr	r0, [pc, #16]	@ (8001ae4 <COM1_MspInit+0xac>)
 8001ad2:	f000 fa5f 	bl	8001f94 <HAL_GPIO_Init>
}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	@ 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	58024400 	.word	0x58024400
 8001ae4:	58020c00 	.word	0x58020c00

08001ae8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001aee:	2003      	movs	r0, #3
 8001af0:	f000 f98c 	bl	8001e0c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001af4:	f001 fbe4 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8001af8:	4602      	mov	r2, r0
 8001afa:	4b15      	ldr	r3, [pc, #84]	@ (8001b50 <HAL_Init+0x68>)
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	0a1b      	lsrs	r3, r3, #8
 8001b00:	f003 030f 	and.w	r3, r3, #15
 8001b04:	4913      	ldr	r1, [pc, #76]	@ (8001b54 <HAL_Init+0x6c>)
 8001b06:	5ccb      	ldrb	r3, [r1, r3]
 8001b08:	f003 031f 	and.w	r3, r3, #31
 8001b0c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b10:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001b12:	4b0f      	ldr	r3, [pc, #60]	@ (8001b50 <HAL_Init+0x68>)
 8001b14:	699b      	ldr	r3, [r3, #24]
 8001b16:	f003 030f 	and.w	r3, r3, #15
 8001b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001b54 <HAL_Init+0x6c>)
 8001b1c:	5cd3      	ldrb	r3, [r2, r3]
 8001b1e:	f003 031f 	and.w	r3, r3, #31
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	fa22 f303 	lsr.w	r3, r2, r3
 8001b28:	4a0b      	ldr	r2, [pc, #44]	@ (8001b58 <HAL_Init+0x70>)
 8001b2a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001b2c:	4a0b      	ldr	r2, [pc, #44]	@ (8001b5c <HAL_Init+0x74>)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001b32:	2000      	movs	r0, #0
 8001b34:	f000 f814 	bl	8001b60 <HAL_InitTick>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e002      	b.n	8001b48 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001b42:	f7ff faeb 	bl	800111c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3708      	adds	r7, #8
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	bd80      	pop	{r7, pc}
 8001b50:	58024400 	.word	0x58024400
 8001b54:	0800aad8 	.word	0x0800aad8
 8001b58:	24000004 	.word	0x24000004
 8001b5c:	24000000 	.word	0x24000000

08001b60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001b68:	4b15      	ldr	r3, [pc, #84]	@ (8001bc0 <HAL_InitTick+0x60>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d101      	bne.n	8001b74 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001b70:	2301      	movs	r3, #1
 8001b72:	e021      	b.n	8001bb8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001b74:	4b13      	ldr	r3, [pc, #76]	@ (8001bc4 <HAL_InitTick+0x64>)
 8001b76:	681a      	ldr	r2, [r3, #0]
 8001b78:	4b11      	ldr	r3, [pc, #68]	@ (8001bc0 <HAL_InitTick+0x60>)
 8001b7a:	781b      	ldrb	r3, [r3, #0]
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b82:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b8a:	4618      	mov	r0, r3
 8001b8c:	f000 f971 	bl	8001e72 <HAL_SYSTICK_Config>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e00e      	b.n	8001bb8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2b0f      	cmp	r3, #15
 8001b9e:	d80a      	bhi.n	8001bb6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	6879      	ldr	r1, [r7, #4]
 8001ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8001ba8:	f000 f93b 	bl	8001e22 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bac:	4a06      	ldr	r2, [pc, #24]	@ (8001bc8 <HAL_InitTick+0x68>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	e000      	b.n	8001bb8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3708      	adds	r7, #8
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	24000028 	.word	0x24000028
 8001bc4:	24000000 	.word	0x24000000
 8001bc8:	24000024 	.word	0x24000024

08001bcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001bd0:	4b06      	ldr	r3, [pc, #24]	@ (8001bec <HAL_IncTick+0x20>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	461a      	mov	r2, r3
 8001bd6:	4b06      	ldr	r3, [pc, #24]	@ (8001bf0 <HAL_IncTick+0x24>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4413      	add	r3, r2
 8001bdc:	4a04      	ldr	r2, [pc, #16]	@ (8001bf0 <HAL_IncTick+0x24>)
 8001bde:	6013      	str	r3, [r2, #0]
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
 8001bea:	bf00      	nop
 8001bec:	24000028 	.word	0x24000028
 8001bf0:	24000440 	.word	0x24000440

08001bf4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return uwTick;
 8001bf8:	4b03      	ldr	r3, [pc, #12]	@ (8001c08 <HAL_GetTick+0x14>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	24000440 	.word	0x24000440

08001c0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b084      	sub	sp, #16
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c14:	f7ff ffee 	bl	8001bf4 <HAL_GetTick>
 8001c18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c24:	d005      	beq.n	8001c32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c26:	4b0a      	ldr	r3, [pc, #40]	@ (8001c50 <HAL_Delay+0x44>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	461a      	mov	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	4413      	add	r3, r2
 8001c30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001c32:	bf00      	nop
 8001c34:	f7ff ffde 	bl	8001bf4 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	68fa      	ldr	r2, [r7, #12]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d8f7      	bhi.n	8001c34 <HAL_Delay+0x28>
  {
  }
}
 8001c44:	bf00      	nop
 8001c46:	bf00      	nop
 8001c48:	3710      	adds	r7, #16
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}
 8001c4e:	bf00      	nop
 8001c50:	24000028 	.word	0x24000028

08001c54 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001c54:	b480      	push	{r7}
 8001c56:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001c58:	4b03      	ldr	r3, [pc, #12]	@ (8001c68 <HAL_GetREVID+0x14>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	0c1b      	lsrs	r3, r3, #16
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr
 8001c68:	5c001000 	.word	0x5c001000

08001c6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f003 0307 	and.w	r3, r3, #7
 8001c7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001cac <__NVIC_SetPriorityGrouping+0x40>)
 8001c7e:	68db      	ldr	r3, [r3, #12]
 8001c80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c82:	68ba      	ldr	r2, [r7, #8]
 8001c84:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c88:	4013      	ands	r3, r2
 8001c8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c94:	4b06      	ldr	r3, [pc, #24]	@ (8001cb0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c96:	4313      	orrs	r3, r2
 8001c98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c9a:	4a04      	ldr	r2, [pc, #16]	@ (8001cac <__NVIC_SetPriorityGrouping+0x40>)
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	60d3      	str	r3, [r2, #12]
}
 8001ca0:	bf00      	nop
 8001ca2:	3714      	adds	r7, #20
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001caa:	4770      	bx	lr
 8001cac:	e000ed00 	.word	0xe000ed00
 8001cb0:	05fa0000 	.word	0x05fa0000

08001cb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cb8:	4b04      	ldr	r3, [pc, #16]	@ (8001ccc <__NVIC_GetPriorityGrouping+0x18>)
 8001cba:	68db      	ldr	r3, [r3, #12]
 8001cbc:	0a1b      	lsrs	r3, r3, #8
 8001cbe:	f003 0307 	and.w	r3, r3, #7
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cca:	4770      	bx	lr
 8001ccc:	e000ed00 	.word	0xe000ed00

08001cd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	b083      	sub	sp, #12
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001cda:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	db0b      	blt.n	8001cfa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ce2:	88fb      	ldrh	r3, [r7, #6]
 8001ce4:	f003 021f 	and.w	r2, r3, #31
 8001ce8:	4907      	ldr	r1, [pc, #28]	@ (8001d08 <__NVIC_EnableIRQ+0x38>)
 8001cea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001cee:	095b      	lsrs	r3, r3, #5
 8001cf0:	2001      	movs	r0, #1
 8001cf2:	fa00 f202 	lsl.w	r2, r0, r2
 8001cf6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	e000e100 	.word	0xe000e100

08001d0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	4603      	mov	r3, r0
 8001d14:	6039      	str	r1, [r7, #0]
 8001d16:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001d18:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	db0a      	blt.n	8001d36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	b2da      	uxtb	r2, r3
 8001d24:	490c      	ldr	r1, [pc, #48]	@ (8001d58 <__NVIC_SetPriority+0x4c>)
 8001d26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001d2a:	0112      	lsls	r2, r2, #4
 8001d2c:	b2d2      	uxtb	r2, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d34:	e00a      	b.n	8001d4c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	b2da      	uxtb	r2, r3
 8001d3a:	4908      	ldr	r1, [pc, #32]	@ (8001d5c <__NVIC_SetPriority+0x50>)
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	f003 030f 	and.w	r3, r3, #15
 8001d42:	3b04      	subs	r3, #4
 8001d44:	0112      	lsls	r2, r2, #4
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	440b      	add	r3, r1
 8001d4a:	761a      	strb	r2, [r3, #24]
}
 8001d4c:	bf00      	nop
 8001d4e:	370c      	adds	r7, #12
 8001d50:	46bd      	mov	sp, r7
 8001d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d56:	4770      	bx	lr
 8001d58:	e000e100 	.word	0xe000e100
 8001d5c:	e000ed00 	.word	0xe000ed00

08001d60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b089      	sub	sp, #36	@ 0x24
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	60f8      	str	r0, [r7, #12]
 8001d68:	60b9      	str	r1, [r7, #8]
 8001d6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d74:	69fb      	ldr	r3, [r7, #28]
 8001d76:	f1c3 0307 	rsb	r3, r3, #7
 8001d7a:	2b04      	cmp	r3, #4
 8001d7c:	bf28      	it	cs
 8001d7e:	2304      	movcs	r3, #4
 8001d80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d82:	69fb      	ldr	r3, [r7, #28]
 8001d84:	3304      	adds	r3, #4
 8001d86:	2b06      	cmp	r3, #6
 8001d88:	d902      	bls.n	8001d90 <NVIC_EncodePriority+0x30>
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3b03      	subs	r3, #3
 8001d8e:	e000      	b.n	8001d92 <NVIC_EncodePriority+0x32>
 8001d90:	2300      	movs	r3, #0
 8001d92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d94:	f04f 32ff 	mov.w	r2, #4294967295
 8001d98:	69bb      	ldr	r3, [r7, #24]
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	401a      	ands	r2, r3
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001da8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	fa01 f303 	lsl.w	r3, r1, r3
 8001db2:	43d9      	mvns	r1, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001db8:	4313      	orrs	r3, r2
         );
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	3724      	adds	r7, #36	@ 0x24
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001dd8:	d301      	bcc.n	8001dde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e00f      	b.n	8001dfe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dde:	4a0a      	ldr	r2, [pc, #40]	@ (8001e08 <SysTick_Config+0x40>)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	3b01      	subs	r3, #1
 8001de4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001de6:	210f      	movs	r1, #15
 8001de8:	f04f 30ff 	mov.w	r0, #4294967295
 8001dec:	f7ff ff8e 	bl	8001d0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df0:	4b05      	ldr	r3, [pc, #20]	@ (8001e08 <SysTick_Config+0x40>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001df6:	4b04      	ldr	r3, [pc, #16]	@ (8001e08 <SysTick_Config+0x40>)
 8001df8:	2207      	movs	r2, #7
 8001dfa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3708      	adds	r7, #8
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	e000e010 	.word	0xe000e010

08001e0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f7ff ff29 	bl	8001c6c <__NVIC_SetPriorityGrouping>
}
 8001e1a:	bf00      	nop
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af00      	add	r7, sp, #0
 8001e28:	4603      	mov	r3, r0
 8001e2a:	60b9      	str	r1, [r7, #8]
 8001e2c:	607a      	str	r2, [r7, #4]
 8001e2e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001e30:	f7ff ff40 	bl	8001cb4 <__NVIC_GetPriorityGrouping>
 8001e34:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e36:	687a      	ldr	r2, [r7, #4]
 8001e38:	68b9      	ldr	r1, [r7, #8]
 8001e3a:	6978      	ldr	r0, [r7, #20]
 8001e3c:	f7ff ff90 	bl	8001d60 <NVIC_EncodePriority>
 8001e40:	4602      	mov	r2, r0
 8001e42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001e46:	4611      	mov	r1, r2
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7ff ff5f 	bl	8001d0c <__NVIC_SetPriority>
}
 8001e4e:	bf00      	nop
 8001e50:	3718      	adds	r7, #24
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b082      	sub	sp, #8
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e60:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff ff33 	bl	8001cd0 <__NVIC_EnableIRQ>
}
 8001e6a:	bf00      	nop
 8001e6c:	3708      	adds	r7, #8
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	b082      	sub	sp, #8
 8001e76:	af00      	add	r7, sp, #0
 8001e78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff ffa4 	bl	8001dc8 <SysTick_Config>
 8001e80:	4603      	mov	r3, r0
}
 8001e82:	4618      	mov	r0, r3
 8001e84:	3708      	adds	r7, #8
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001e90:	4b07      	ldr	r3, [pc, #28]	@ (8001eb0 <HAL_GetCurrentCPUID+0x24>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	091b      	lsrs	r3, r3, #4
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	2b07      	cmp	r3, #7
 8001e9c:	d101      	bne.n	8001ea2 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e000      	b.n	8001ea4 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8001ea2:	2301      	movs	r3, #1
  }
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr
 8001eae:	bf00      	nop
 8001eb0:	e000ed00 	.word	0xe000ed00

08001eb4 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b087      	sub	sp, #28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d101      	bne.n	8001ed0 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e00a      	b.n	8001ee6 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001ed0:	7afb      	ldrb	r3, [r7, #11]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d103      	bne.n	8001ede <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	605a      	str	r2, [r3, #4]
      break;
 8001edc:	e002      	b.n	8001ee4 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8001ee2:	bf00      	nop
  }

  return status;
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	371c      	adds	r7, #28
 8001eea:	46bd      	mov	sp, r7
 8001eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef0:	4770      	bx	lr

08001ef2 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8001ef2:	b480      	push	{r7}
 8001ef4:	b083      	sub	sp, #12
 8001ef6:	af00      	add	r7, sp, #0
 8001ef8:	6078      	str	r0, [r7, #4]
 8001efa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d101      	bne.n	8001f06 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e003      	b.n	8001f0e <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	683a      	ldr	r2, [r7, #0]
 8001f0a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001f0c:	2300      	movs	r3, #0
  }
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	0c1b      	lsrs	r3, r3, #16
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2201      	movs	r2, #1
 8001f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3e:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 8001f40:	f7ff ffa4 	bl	8001e8c <HAL_GetCurrentCPUID>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d105      	bne.n	8001f56 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	011a      	lsls	r2, r3, #4
 8001f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8001f8c <HAL_EXTI_IRQHandler+0x70>)
 8001f50:	4413      	add	r3, r2
 8001f52:	617b      	str	r3, [r7, #20]
 8001f54:	e004      	b.n	8001f60 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	011a      	lsls	r2, r3, #4
 8001f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8001f90 <HAL_EXTI_IRQHandler+0x74>)
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	68fa      	ldr	r2, [r7, #12]
 8001f66:	4013      	ands	r3, r2
 8001f68:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d009      	beq.n	8001f84 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	68fa      	ldr	r2, [r7, #12]
 8001f74:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4798      	blx	r3
    }
  }
}
 8001f84:	bf00      	nop
 8001f86:	3718      	adds	r7, #24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	58000088 	.word	0x58000088
 8001f90:	580000c8 	.word	0x580000c8

08001f94 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001f94:	b480      	push	{r7}
 8001f96:	b089      	sub	sp, #36	@ 0x24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
 8001f9c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001fa2:	4b89      	ldr	r3, [pc, #548]	@ (80021c8 <HAL_GPIO_Init+0x234>)
 8001fa4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001fa6:	e194      	b.n	80022d2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	2101      	movs	r1, #1
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	f000 8186 	beq.w	80022cc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0303 	and.w	r3, r3, #3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d005      	beq.n	8001fd8 <HAL_GPIO_Init+0x44>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	f003 0303 	and.w	r3, r3, #3
 8001fd4:	2b02      	cmp	r3, #2
 8001fd6:	d130      	bne.n	800203a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	005b      	lsls	r3, r3, #1
 8001fe2:	2203      	movs	r2, #3
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43db      	mvns	r3, r3
 8001fea:	69ba      	ldr	r2, [r7, #24]
 8001fec:	4013      	ands	r3, r2
 8001fee:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	69fb      	ldr	r3, [r7, #28]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800200e:	2201      	movs	r2, #1
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43db      	mvns	r3, r3
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	4013      	ands	r3, r2
 800201c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	091b      	lsrs	r3, r3, #4
 8002024:	f003 0201 	and.w	r2, r3, #1
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	fa02 f303 	lsl.w	r3, r2, r3
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	69ba      	ldr	r2, [r7, #24]
 8002038:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	2b03      	cmp	r3, #3
 8002044:	d017      	beq.n	8002076 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800204c:	69fb      	ldr	r3, [r7, #28]
 800204e:	005b      	lsls	r3, r3, #1
 8002050:	2203      	movs	r2, #3
 8002052:	fa02 f303 	lsl.w	r3, r2, r3
 8002056:	43db      	mvns	r3, r3
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	4013      	ands	r3, r2
 800205c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	689a      	ldr	r2, [r3, #8]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	005b      	lsls	r3, r3, #1
 8002066:	fa02 f303 	lsl.w	r3, r2, r3
 800206a:	69ba      	ldr	r2, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002076:	683b      	ldr	r3, [r7, #0]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	2b02      	cmp	r3, #2
 8002080:	d123      	bne.n	80020ca <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3208      	adds	r2, #8
 800208a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	220f      	movs	r2, #15
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	691a      	ldr	r2, [r3, #16]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	08da      	lsrs	r2, r3, #3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	3208      	adds	r2, #8
 80020c4:	69b9      	ldr	r1, [r7, #24]
 80020c6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	2203      	movs	r2, #3
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43db      	mvns	r3, r3
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	4013      	ands	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	685b      	ldr	r3, [r3, #4]
 80020e6:	f003 0203 	and.w	r2, r3, #3
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002106:	2b00      	cmp	r3, #0
 8002108:	f000 80e0 	beq.w	80022cc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800210c:	4b2f      	ldr	r3, [pc, #188]	@ (80021cc <HAL_GPIO_Init+0x238>)
 800210e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002112:	4a2e      	ldr	r2, [pc, #184]	@ (80021cc <HAL_GPIO_Init+0x238>)
 8002114:	f043 0302 	orr.w	r3, r3, #2
 8002118:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800211c:	4b2b      	ldr	r3, [pc, #172]	@ (80021cc <HAL_GPIO_Init+0x238>)
 800211e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002122:	f003 0302 	and.w	r3, r3, #2
 8002126:	60fb      	str	r3, [r7, #12]
 8002128:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800212a:	4a29      	ldr	r2, [pc, #164]	@ (80021d0 <HAL_GPIO_Init+0x23c>)
 800212c:	69fb      	ldr	r3, [r7, #28]
 800212e:	089b      	lsrs	r3, r3, #2
 8002130:	3302      	adds	r3, #2
 8002132:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	220f      	movs	r2, #15
 8002142:	fa02 f303 	lsl.w	r3, r2, r3
 8002146:	43db      	mvns	r3, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4013      	ands	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a20      	ldr	r2, [pc, #128]	@ (80021d4 <HAL_GPIO_Init+0x240>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d052      	beq.n	80021fc <HAL_GPIO_Init+0x268>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a1f      	ldr	r2, [pc, #124]	@ (80021d8 <HAL_GPIO_Init+0x244>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d031      	beq.n	80021c2 <HAL_GPIO_Init+0x22e>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a1e      	ldr	r2, [pc, #120]	@ (80021dc <HAL_GPIO_Init+0x248>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d02b      	beq.n	80021be <HAL_GPIO_Init+0x22a>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a1d      	ldr	r2, [pc, #116]	@ (80021e0 <HAL_GPIO_Init+0x24c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d025      	beq.n	80021ba <HAL_GPIO_Init+0x226>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a1c      	ldr	r2, [pc, #112]	@ (80021e4 <HAL_GPIO_Init+0x250>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d01f      	beq.n	80021b6 <HAL_GPIO_Init+0x222>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a1b      	ldr	r2, [pc, #108]	@ (80021e8 <HAL_GPIO_Init+0x254>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d019      	beq.n	80021b2 <HAL_GPIO_Init+0x21e>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1a      	ldr	r2, [pc, #104]	@ (80021ec <HAL_GPIO_Init+0x258>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d013      	beq.n	80021ae <HAL_GPIO_Init+0x21a>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a19      	ldr	r2, [pc, #100]	@ (80021f0 <HAL_GPIO_Init+0x25c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d00d      	beq.n	80021aa <HAL_GPIO_Init+0x216>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a18      	ldr	r2, [pc, #96]	@ (80021f4 <HAL_GPIO_Init+0x260>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d007      	beq.n	80021a6 <HAL_GPIO_Init+0x212>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a17      	ldr	r2, [pc, #92]	@ (80021f8 <HAL_GPIO_Init+0x264>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d101      	bne.n	80021a2 <HAL_GPIO_Init+0x20e>
 800219e:	2309      	movs	r3, #9
 80021a0:	e02d      	b.n	80021fe <HAL_GPIO_Init+0x26a>
 80021a2:	230a      	movs	r3, #10
 80021a4:	e02b      	b.n	80021fe <HAL_GPIO_Init+0x26a>
 80021a6:	2308      	movs	r3, #8
 80021a8:	e029      	b.n	80021fe <HAL_GPIO_Init+0x26a>
 80021aa:	2307      	movs	r3, #7
 80021ac:	e027      	b.n	80021fe <HAL_GPIO_Init+0x26a>
 80021ae:	2306      	movs	r3, #6
 80021b0:	e025      	b.n	80021fe <HAL_GPIO_Init+0x26a>
 80021b2:	2305      	movs	r3, #5
 80021b4:	e023      	b.n	80021fe <HAL_GPIO_Init+0x26a>
 80021b6:	2304      	movs	r3, #4
 80021b8:	e021      	b.n	80021fe <HAL_GPIO_Init+0x26a>
 80021ba:	2303      	movs	r3, #3
 80021bc:	e01f      	b.n	80021fe <HAL_GPIO_Init+0x26a>
 80021be:	2302      	movs	r3, #2
 80021c0:	e01d      	b.n	80021fe <HAL_GPIO_Init+0x26a>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e01b      	b.n	80021fe <HAL_GPIO_Init+0x26a>
 80021c6:	bf00      	nop
 80021c8:	58000080 	.word	0x58000080
 80021cc:	58024400 	.word	0x58024400
 80021d0:	58000400 	.word	0x58000400
 80021d4:	58020000 	.word	0x58020000
 80021d8:	58020400 	.word	0x58020400
 80021dc:	58020800 	.word	0x58020800
 80021e0:	58020c00 	.word	0x58020c00
 80021e4:	58021000 	.word	0x58021000
 80021e8:	58021400 	.word	0x58021400
 80021ec:	58021800 	.word	0x58021800
 80021f0:	58021c00 	.word	0x58021c00
 80021f4:	58022000 	.word	0x58022000
 80021f8:	58022400 	.word	0x58022400
 80021fc:	2300      	movs	r3, #0
 80021fe:	69fa      	ldr	r2, [r7, #28]
 8002200:	f002 0203 	and.w	r2, r2, #3
 8002204:	0092      	lsls	r2, r2, #2
 8002206:	4093      	lsls	r3, r2
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4313      	orrs	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800220e:	4938      	ldr	r1, [pc, #224]	@ (80022f0 <HAL_GPIO_Init+0x35c>)
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	089b      	lsrs	r3, r3, #2
 8002214:	3302      	adds	r3, #2
 8002216:	69ba      	ldr	r2, [r7, #24]
 8002218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800221c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	43db      	mvns	r3, r3
 8002228:	69ba      	ldr	r2, [r7, #24]
 800222a:	4013      	ands	r3, r2
 800222c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d003      	beq.n	8002242 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800223a:	69ba      	ldr	r2, [r7, #24]
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002242:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800224a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	43db      	mvns	r3, r3
 8002256:	69ba      	ldr	r2, [r7, #24]
 8002258:	4013      	ands	r3, r2
 800225a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d003      	beq.n	8002270 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002270:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002278:	697b      	ldr	r3, [r7, #20]
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	43db      	mvns	r3, r3
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4013      	ands	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002290:	2b00      	cmp	r3, #0
 8002292:	d003      	beq.n	800229c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4313      	orrs	r3, r2
 800229a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	685b      	ldr	r3, [r3, #4]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d003      	beq.n	80022c6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80022c6:	697b      	ldr	r3, [r7, #20]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	3301      	adds	r3, #1
 80022d0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	681a      	ldr	r2, [r3, #0]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	fa22 f303 	lsr.w	r3, r2, r3
 80022dc:	2b00      	cmp	r3, #0
 80022de:	f47f ae63 	bne.w	8001fa8 <HAL_GPIO_Init+0x14>
  }
}
 80022e2:	bf00      	nop
 80022e4:	bf00      	nop
 80022e6:	3724      	adds	r7, #36	@ 0x24
 80022e8:	46bd      	mov	sp, r7
 80022ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ee:	4770      	bx	lr
 80022f0:	58000400 	.word	0x58000400

080022f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
 8002300:	4613      	mov	r3, r2
 8002302:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002304:	787b      	ldrb	r3, [r7, #1]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d003      	beq.n	8002312 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230a:	887a      	ldrh	r2, [r7, #2]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002310:	e003      	b.n	800231a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002312:	887b      	ldrh	r3, [r7, #2]
 8002314:	041a      	lsls	r2, r3, #16
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	370c      	adds	r7, #12
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002330:	4a08      	ldr	r2, [pc, #32]	@ (8002354 <HAL_HSEM_FastTake+0x2c>)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	3320      	adds	r3, #32
 8002336:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233a:	4a07      	ldr	r2, [pc, #28]	@ (8002358 <HAL_HSEM_FastTake+0x30>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d101      	bne.n	8002344 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002340:	2300      	movs	r3, #0
 8002342:	e000      	b.n	8002346 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
}
 8002346:	4618      	mov	r0, r3
 8002348:	370c      	adds	r7, #12
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	58026400 	.word	0x58026400
 8002358:	80000300 	.word	0x80000300

0800235c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
 8002364:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002366:	4906      	ldr	r1, [pc, #24]	@ (8002380 <HAL_HSEM_Release+0x24>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002374:	bf00      	nop
 8002376:	370c      	adds	r7, #12
 8002378:	46bd      	mov	sp, r7
 800237a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237e:	4770      	bx	lr
 8002380:	58026400 	.word	0x58026400

08002384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d101      	bne.n	8002396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e08b      	b.n	80024ae <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d106      	bne.n	80023b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7fe fed0 	bl	8001150 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2224      	movs	r2, #36	@ 0x24
 80023b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	685a      	ldr	r2, [r3, #4]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023d4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023e4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d107      	bne.n	80023fe <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689a      	ldr	r2, [r3, #8]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	e006      	b.n	800240c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	689a      	ldr	r2, [r3, #8]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800240a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	68db      	ldr	r3, [r3, #12]
 8002410:	2b02      	cmp	r3, #2
 8002412:	d108      	bne.n	8002426 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	685a      	ldr	r2, [r3, #4]
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002422:	605a      	str	r2, [r3, #4]
 8002424:	e007      	b.n	8002436 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	685a      	ldr	r2, [r3, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002434:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6859      	ldr	r1, [r3, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b1d      	ldr	r3, [pc, #116]	@ (80024b8 <HAL_I2C_Init+0x134>)
 8002442:	430b      	orrs	r3, r1
 8002444:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002454:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	699b      	ldr	r3, [r3, #24]
 8002466:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69d9      	ldr	r1, [r3, #28]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6a1a      	ldr	r2, [r3, #32]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	430a      	orrs	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f042 0201 	orr.w	r2, r2, #1
 800248e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2200      	movs	r2, #0
 8002494:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2220      	movs	r2, #32
 800249a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2200      	movs	r2, #0
 80024a2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3708      	adds	r7, #8
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	02008000 	.word	0x02008000

080024bc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024bc:	b480      	push	{r7}
 80024be:	b083      	sub	sp, #12
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d138      	bne.n	8002544 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d101      	bne.n	80024e0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024dc:	2302      	movs	r3, #2
 80024de:	e032      	b.n	8002546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2224      	movs	r2, #36	@ 0x24
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f022 0201 	bic.w	r2, r2, #1
 80024fe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	681a      	ldr	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800250e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	6819      	ldr	r1, [r3, #0]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	681a      	ldr	r2, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f042 0201 	orr.w	r2, r2, #1
 800252e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2220      	movs	r2, #32
 8002534:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002540:	2300      	movs	r3, #0
 8002542:	e000      	b.n	8002546 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002544:	2302      	movs	r3, #2
  }
}
 8002546:	4618      	mov	r0, r3
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002552:	b480      	push	{r7}
 8002554:	b085      	sub	sp, #20
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
 800255a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002562:	b2db      	uxtb	r3, r3
 8002564:	2b20      	cmp	r3, #32
 8002566:	d139      	bne.n	80025dc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800256e:	2b01      	cmp	r3, #1
 8002570:	d101      	bne.n	8002576 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002572:	2302      	movs	r3, #2
 8002574:	e033      	b.n	80025de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2201      	movs	r2, #1
 800257a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2224      	movs	r2, #36	@ 0x24
 8002582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f022 0201 	bic.w	r2, r2, #1
 8002594:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025a4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	021b      	lsls	r3, r3, #8
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	68fa      	ldr	r2, [r7, #12]
 80025b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f042 0201 	orr.w	r2, r2, #1
 80025c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2220      	movs	r2, #32
 80025cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2200      	movs	r2, #0
 80025d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	e000      	b.n	80025de <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025dc:	2302      	movs	r3, #2
  }
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3714      	adds	r7, #20
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80025f4:	4b29      	ldr	r3, [pc, #164]	@ (800269c <HAL_PWREx_ConfigSupply+0xb0>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	2b06      	cmp	r3, #6
 80025fe:	d00a      	beq.n	8002616 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002600:	4b26      	ldr	r3, [pc, #152]	@ (800269c <HAL_PWREx_ConfigSupply+0xb0>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002608:	687a      	ldr	r2, [r7, #4]
 800260a:	429a      	cmp	r2, r3
 800260c:	d001      	beq.n	8002612 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e040      	b.n	8002694 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e03e      	b.n	8002694 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002616:	4b21      	ldr	r3, [pc, #132]	@ (800269c <HAL_PWREx_ConfigSupply+0xb0>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800261e:	491f      	ldr	r1, [pc, #124]	@ (800269c <HAL_PWREx_ConfigSupply+0xb0>)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4313      	orrs	r3, r2
 8002624:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002626:	f7ff fae5 	bl	8001bf4 <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800262c:	e009      	b.n	8002642 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800262e:	f7ff fae1 	bl	8001bf4 <HAL_GetTick>
 8002632:	4602      	mov	r2, r0
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	1ad3      	subs	r3, r2, r3
 8002638:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800263c:	d901      	bls.n	8002642 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e028      	b.n	8002694 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002642:	4b16      	ldr	r3, [pc, #88]	@ (800269c <HAL_PWREx_ConfigSupply+0xb0>)
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800264a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800264e:	d1ee      	bne.n	800262e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2b1e      	cmp	r3, #30
 8002654:	d008      	beq.n	8002668 <HAL_PWREx_ConfigSupply+0x7c>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2b2e      	cmp	r3, #46	@ 0x2e
 800265a:	d005      	beq.n	8002668 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b1d      	cmp	r3, #29
 8002660:	d002      	beq.n	8002668 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2b2d      	cmp	r3, #45	@ 0x2d
 8002666:	d114      	bne.n	8002692 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002668:	f7ff fac4 	bl	8001bf4 <HAL_GetTick>
 800266c:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800266e:	e009      	b.n	8002684 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002670:	f7ff fac0 	bl	8001bf4 <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800267e:	d901      	bls.n	8002684 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e007      	b.n	8002694 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002684:	4b05      	ldr	r3, [pc, #20]	@ (800269c <HAL_PWREx_ConfigSupply+0xb0>)
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800268c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002690:	d1ee      	bne.n	8002670 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002692:	2300      	movs	r3, #0
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	58024800 	.word	0x58024800

080026a0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b08c      	sub	sp, #48	@ 0x30
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d102      	bne.n	80026b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	f000 bc48 	b.w	8002f44 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0301 	and.w	r3, r3, #1
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8088 	beq.w	80027d2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026c2:	4b99      	ldr	r3, [pc, #612]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80026ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026cc:	4b96      	ldr	r3, [pc, #600]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 80026ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d0:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026d4:	2b10      	cmp	r3, #16
 80026d6:	d007      	beq.n	80026e8 <HAL_RCC_OscConfig+0x48>
 80026d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026da:	2b18      	cmp	r3, #24
 80026dc:	d111      	bne.n	8002702 <HAL_RCC_OscConfig+0x62>
 80026de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026e0:	f003 0303 	and.w	r3, r3, #3
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d10c      	bne.n	8002702 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e8:	4b8f      	ldr	r3, [pc, #572]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d06d      	beq.n	80027d0 <HAL_RCC_OscConfig+0x130>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d169      	bne.n	80027d0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026fc:	2301      	movs	r3, #1
 80026fe:	f000 bc21 	b.w	8002f44 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	685b      	ldr	r3, [r3, #4]
 8002706:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800270a:	d106      	bne.n	800271a <HAL_RCC_OscConfig+0x7a>
 800270c:	4b86      	ldr	r3, [pc, #536]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a85      	ldr	r2, [pc, #532]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002712:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002716:	6013      	str	r3, [r2, #0]
 8002718:	e02e      	b.n	8002778 <HAL_RCC_OscConfig+0xd8>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d10c      	bne.n	800273c <HAL_RCC_OscConfig+0x9c>
 8002722:	4b81      	ldr	r3, [pc, #516]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4a80      	ldr	r2, [pc, #512]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002728:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272c:	6013      	str	r3, [r2, #0]
 800272e:	4b7e      	ldr	r3, [pc, #504]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a7d      	ldr	r2, [pc, #500]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002734:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002738:	6013      	str	r3, [r2, #0]
 800273a:	e01d      	b.n	8002778 <HAL_RCC_OscConfig+0xd8>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002744:	d10c      	bne.n	8002760 <HAL_RCC_OscConfig+0xc0>
 8002746:	4b78      	ldr	r3, [pc, #480]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a77      	ldr	r2, [pc, #476]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 800274c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002750:	6013      	str	r3, [r2, #0]
 8002752:	4b75      	ldr	r3, [pc, #468]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a74      	ldr	r2, [pc, #464]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002758:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	e00b      	b.n	8002778 <HAL_RCC_OscConfig+0xd8>
 8002760:	4b71      	ldr	r3, [pc, #452]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4a70      	ldr	r2, [pc, #448]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002766:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800276a:	6013      	str	r3, [r2, #0]
 800276c:	4b6e      	ldr	r3, [pc, #440]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a6d      	ldr	r2, [pc, #436]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002772:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002776:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d013      	beq.n	80027a8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002780:	f7ff fa38 	bl	8001bf4 <HAL_GetTick>
 8002784:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002786:	e008      	b.n	800279a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002788:	f7ff fa34 	bl	8001bf4 <HAL_GetTick>
 800278c:	4602      	mov	r2, r0
 800278e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002790:	1ad3      	subs	r3, r2, r3
 8002792:	2b64      	cmp	r3, #100	@ 0x64
 8002794:	d901      	bls.n	800279a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002796:	2303      	movs	r3, #3
 8002798:	e3d4      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800279a:	4b63      	ldr	r3, [pc, #396]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0f0      	beq.n	8002788 <HAL_RCC_OscConfig+0xe8>
 80027a6:	e014      	b.n	80027d2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a8:	f7ff fa24 	bl	8001bf4 <HAL_GetTick>
 80027ac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b0:	f7ff fa20 	bl	8001bf4 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b64      	cmp	r3, #100	@ 0x64
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e3c0      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027c2:	4b59      	ldr	r3, [pc, #356]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d1f0      	bne.n	80027b0 <HAL_RCC_OscConfig+0x110>
 80027ce:	e000      	b.n	80027d2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f000 80ca 	beq.w	8002974 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027e0:	4b51      	ldr	r3, [pc, #324]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 80027e2:	691b      	ldr	r3, [r3, #16]
 80027e4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027e8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027ea:	4b4f      	ldr	r3, [pc, #316]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 80027ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ee:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027f0:	6a3b      	ldr	r3, [r7, #32]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d007      	beq.n	8002806 <HAL_RCC_OscConfig+0x166>
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	2b18      	cmp	r3, #24
 80027fa:	d156      	bne.n	80028aa <HAL_RCC_OscConfig+0x20a>
 80027fc:	69fb      	ldr	r3, [r7, #28]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d151      	bne.n	80028aa <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002806:	4b48      	ldr	r3, [pc, #288]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0304 	and.w	r3, r3, #4
 800280e:	2b00      	cmp	r3, #0
 8002810:	d005      	beq.n	800281e <HAL_RCC_OscConfig+0x17e>
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	68db      	ldr	r3, [r3, #12]
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e392      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800281e:	4b42      	ldr	r3, [pc, #264]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f023 0219 	bic.w	r2, r3, #25
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	493f      	ldr	r1, [pc, #252]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 800282c:	4313      	orrs	r3, r2
 800282e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002830:	f7ff f9e0 	bl	8001bf4 <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002836:	e008      	b.n	800284a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002838:	f7ff f9dc 	bl	8001bf4 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	2b02      	cmp	r3, #2
 8002844:	d901      	bls.n	800284a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002846:	2303      	movs	r3, #3
 8002848:	e37c      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800284a:	4b37      	ldr	r3, [pc, #220]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f003 0304 	and.w	r3, r3, #4
 8002852:	2b00      	cmp	r3, #0
 8002854:	d0f0      	beq.n	8002838 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002856:	f7ff f9fd 	bl	8001c54 <HAL_GetREVID>
 800285a:	4603      	mov	r3, r0
 800285c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002860:	4293      	cmp	r3, r2
 8002862:	d817      	bhi.n	8002894 <HAL_RCC_OscConfig+0x1f4>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	2b40      	cmp	r3, #64	@ 0x40
 800286a:	d108      	bne.n	800287e <HAL_RCC_OscConfig+0x1de>
 800286c:	4b2e      	ldr	r3, [pc, #184]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 800286e:	685b      	ldr	r3, [r3, #4]
 8002870:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002874:	4a2c      	ldr	r2, [pc, #176]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800287a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800287c:	e07a      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287e:	4b2a      	ldr	r3, [pc, #168]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	691b      	ldr	r3, [r3, #16]
 800288a:	031b      	lsls	r3, r3, #12
 800288c:	4926      	ldr	r1, [pc, #152]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 800288e:	4313      	orrs	r3, r2
 8002890:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002892:	e06f      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b24      	ldr	r3, [pc, #144]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	691b      	ldr	r3, [r3, #16]
 80028a0:	061b      	lsls	r3, r3, #24
 80028a2:	4921      	ldr	r1, [pc, #132]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a8:	e064      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68db      	ldr	r3, [r3, #12]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d047      	beq.n	8002942 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028b2:	4b1d      	ldr	r3, [pc, #116]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f023 0219 	bic.w	r2, r3, #25
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	491a      	ldr	r1, [pc, #104]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c4:	f7ff f996 	bl	8001bf4 <HAL_GetTick>
 80028c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028ca:	e008      	b.n	80028de <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028cc:	f7ff f992 	bl	8001bf4 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d901      	bls.n	80028de <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80028da:	2303      	movs	r3, #3
 80028dc:	e332      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028de:	4b12      	ldr	r3, [pc, #72]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 0304 	and.w	r3, r3, #4
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d0f0      	beq.n	80028cc <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ea:	f7ff f9b3 	bl	8001c54 <HAL_GetREVID>
 80028ee:	4603      	mov	r3, r0
 80028f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d819      	bhi.n	800292c <HAL_RCC_OscConfig+0x28c>
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	691b      	ldr	r3, [r3, #16]
 80028fc:	2b40      	cmp	r3, #64	@ 0x40
 80028fe:	d108      	bne.n	8002912 <HAL_RCC_OscConfig+0x272>
 8002900:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8002908:	4a07      	ldr	r2, [pc, #28]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 800290a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800290e:	6053      	str	r3, [r2, #4]
 8002910:	e030      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
 8002912:	4b05      	ldr	r3, [pc, #20]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	691b      	ldr	r3, [r3, #16]
 800291e:	031b      	lsls	r3, r3, #12
 8002920:	4901      	ldr	r1, [pc, #4]	@ (8002928 <HAL_RCC_OscConfig+0x288>)
 8002922:	4313      	orrs	r3, r2
 8002924:	604b      	str	r3, [r1, #4]
 8002926:	e025      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
 8002928:	58024400 	.word	0x58024400
 800292c:	4b9a      	ldr	r3, [pc, #616]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	691b      	ldr	r3, [r3, #16]
 8002938:	061b      	lsls	r3, r3, #24
 800293a:	4997      	ldr	r1, [pc, #604]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 800293c:	4313      	orrs	r3, r2
 800293e:	604b      	str	r3, [r1, #4]
 8002940:	e018      	b.n	8002974 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002942:	4b95      	ldr	r3, [pc, #596]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a94      	ldr	r2, [pc, #592]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002948:	f023 0301 	bic.w	r3, r3, #1
 800294c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7ff f951 	bl	8001bf4 <HAL_GetTick>
 8002952:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002956:	f7ff f94d 	bl	8001bf4 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e2ed      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002968:	4b8b      	ldr	r3, [pc, #556]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0304 	and.w	r3, r3, #4
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1f0      	bne.n	8002956 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f003 0310 	and.w	r3, r3, #16
 800297c:	2b00      	cmp	r3, #0
 800297e:	f000 80a9 	beq.w	8002ad4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002982:	4b85      	ldr	r3, [pc, #532]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002984:	691b      	ldr	r3, [r3, #16]
 8002986:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800298a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800298c:	4b82      	ldr	r3, [pc, #520]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 800298e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002990:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	2b08      	cmp	r3, #8
 8002996:	d007      	beq.n	80029a8 <HAL_RCC_OscConfig+0x308>
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	2b18      	cmp	r3, #24
 800299c:	d13a      	bne.n	8002a14 <HAL_RCC_OscConfig+0x374>
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	f003 0303 	and.w	r3, r3, #3
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d135      	bne.n	8002a14 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a8:	4b7b      	ldr	r3, [pc, #492]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d005      	beq.n	80029c0 <HAL_RCC_OscConfig+0x320>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	2b80      	cmp	r3, #128	@ 0x80
 80029ba:	d001      	beq.n	80029c0 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	e2c1      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029c0:	f7ff f948 	bl	8001c54 <HAL_GetREVID>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f241 0203 	movw	r2, #4099	@ 0x1003
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d817      	bhi.n	80029fe <HAL_RCC_OscConfig+0x35e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	6a1b      	ldr	r3, [r3, #32]
 80029d2:	2b20      	cmp	r3, #32
 80029d4:	d108      	bne.n	80029e8 <HAL_RCC_OscConfig+0x348>
 80029d6:	4b70      	ldr	r3, [pc, #448]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80029de:	4a6e      	ldr	r2, [pc, #440]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 80029e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80029e4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029e6:	e075      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	069b      	lsls	r3, r3, #26
 80029f6:	4968      	ldr	r1, [pc, #416]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029fc:	e06a      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029fe:	4b66      	ldr	r3, [pc, #408]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	68db      	ldr	r3, [r3, #12]
 8002a02:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a1b      	ldr	r3, [r3, #32]
 8002a0a:	061b      	lsls	r3, r3, #24
 8002a0c:	4962      	ldr	r1, [pc, #392]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a12:	e05f      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d042      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a1c:	4b5e      	ldr	r3, [pc, #376]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	4a5d      	ldr	r2, [pc, #372]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002a26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a28:	f7ff f8e4 	bl	8001bf4 <HAL_GetTick>
 8002a2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a2e:	e008      	b.n	8002a42 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a30:	f7ff f8e0 	bl	8001bf4 <HAL_GetTick>
 8002a34:	4602      	mov	r2, r0
 8002a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a38:	1ad3      	subs	r3, r2, r3
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d901      	bls.n	8002a42 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a3e:	2303      	movs	r3, #3
 8002a40:	e280      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a42:	4b55      	ldr	r3, [pc, #340]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d0f0      	beq.n	8002a30 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a4e:	f7ff f901 	bl	8001c54 <HAL_GetREVID>
 8002a52:	4603      	mov	r3, r0
 8002a54:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d817      	bhi.n	8002a8c <HAL_RCC_OscConfig+0x3ec>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a1b      	ldr	r3, [r3, #32]
 8002a60:	2b20      	cmp	r3, #32
 8002a62:	d108      	bne.n	8002a76 <HAL_RCC_OscConfig+0x3d6>
 8002a64:	4b4c      	ldr	r3, [pc, #304]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002a6c:	4a4a      	ldr	r2, [pc, #296]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a6e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002a72:	6053      	str	r3, [r2, #4]
 8002a74:	e02e      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
 8002a76:	4b48      	ldr	r3, [pc, #288]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6a1b      	ldr	r3, [r3, #32]
 8002a82:	069b      	lsls	r3, r3, #26
 8002a84:	4944      	ldr	r1, [pc, #272]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a86:	4313      	orrs	r3, r2
 8002a88:	604b      	str	r3, [r1, #4]
 8002a8a:	e023      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
 8002a8c:	4b42      	ldr	r3, [pc, #264]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	061b      	lsls	r3, r3, #24
 8002a9a:	493f      	ldr	r1, [pc, #252]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
 8002aa0:	e018      	b.n	8002ad4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002aa2:	4b3d      	ldr	r3, [pc, #244]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a3c      	ldr	r2, [pc, #240]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002aa8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aae:	f7ff f8a1 	bl	8001bf4 <HAL_GetTick>
 8002ab2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ab4:	e008      	b.n	8002ac8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ab6:	f7ff f89d 	bl	8001bf4 <HAL_GetTick>
 8002aba:	4602      	mov	r2, r0
 8002abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002abe:	1ad3      	subs	r3, r2, r3
 8002ac0:	2b02      	cmp	r3, #2
 8002ac2:	d901      	bls.n	8002ac8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ac4:	2303      	movs	r3, #3
 8002ac6:	e23d      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ac8:	4b33      	ldr	r3, [pc, #204]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d1f0      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0308 	and.w	r3, r3, #8
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d036      	beq.n	8002b4e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	695b      	ldr	r3, [r3, #20]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d019      	beq.n	8002b1c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae8:	4b2b      	ldr	r3, [pc, #172]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002aea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002aec:	4a2a      	ldr	r2, [pc, #168]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002aee:	f043 0301 	orr.w	r3, r3, #1
 8002af2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af4:	f7ff f87e 	bl	8001bf4 <HAL_GetTick>
 8002af8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002afa:	e008      	b.n	8002b0e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002afc:	f7ff f87a 	bl	8001bf4 <HAL_GetTick>
 8002b00:	4602      	mov	r2, r0
 8002b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b04:	1ad3      	subs	r3, r2, r3
 8002b06:	2b02      	cmp	r3, #2
 8002b08:	d901      	bls.n	8002b0e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b0a:	2303      	movs	r3, #3
 8002b0c:	e21a      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b0e:	4b22      	ldr	r3, [pc, #136]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b10:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d0f0      	beq.n	8002afc <HAL_RCC_OscConfig+0x45c>
 8002b1a:	e018      	b.n	8002b4e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b20:	4a1d      	ldr	r2, [pc, #116]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b22:	f023 0301 	bic.w	r3, r3, #1
 8002b26:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b28:	f7ff f864 	bl	8001bf4 <HAL_GetTick>
 8002b2c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b30:	f7ff f860 	bl	8001bf4 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e200      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b42:	4b15      	ldr	r3, [pc, #84]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b44:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0320 	and.w	r3, r3, #32
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d039      	beq.n	8002bce <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d01c      	beq.n	8002b9c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b62:	4b0d      	ldr	r3, [pc, #52]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a0c      	ldr	r2, [pc, #48]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b68:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b6c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b6e:	f7ff f841 	bl	8001bf4 <HAL_GetTick>
 8002b72:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b74:	e008      	b.n	8002b88 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b76:	f7ff f83d 	bl	8001bf4 <HAL_GetTick>
 8002b7a:	4602      	mov	r2, r0
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d901      	bls.n	8002b88 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b84:	2303      	movs	r3, #3
 8002b86:	e1dd      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b88:	4b03      	ldr	r3, [pc, #12]	@ (8002b98 <HAL_RCC_OscConfig+0x4f8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d0f0      	beq.n	8002b76 <HAL_RCC_OscConfig+0x4d6>
 8002b94:	e01b      	b.n	8002bce <HAL_RCC_OscConfig+0x52e>
 8002b96:	bf00      	nop
 8002b98:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b9c:	4b9b      	ldr	r3, [pc, #620]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a9a      	ldr	r2, [pc, #616]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002ba2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ba6:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ba8:	f7ff f824 	bl	8001bf4 <HAL_GetTick>
 8002bac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bae:	e008      	b.n	8002bc2 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bb0:	f7ff f820 	bl	8001bf4 <HAL_GetTick>
 8002bb4:	4602      	mov	r2, r0
 8002bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bb8:	1ad3      	subs	r3, r2, r3
 8002bba:	2b02      	cmp	r3, #2
 8002bbc:	d901      	bls.n	8002bc2 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e1c0      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bc2:	4b92      	ldr	r3, [pc, #584]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d1f0      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	f000 8081 	beq.w	8002cde <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bdc:	4b8c      	ldr	r3, [pc, #560]	@ (8002e10 <HAL_RCC_OscConfig+0x770>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	4a8b      	ldr	r2, [pc, #556]	@ (8002e10 <HAL_RCC_OscConfig+0x770>)
 8002be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002be6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002be8:	f7ff f804 	bl	8001bf4 <HAL_GetTick>
 8002bec:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bee:	e008      	b.n	8002c02 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bf0:	f7ff f800 	bl	8001bf4 <HAL_GetTick>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	2b64      	cmp	r3, #100	@ 0x64
 8002bfc:	d901      	bls.n	8002c02 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e1a0      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c02:	4b83      	ldr	r3, [pc, #524]	@ (8002e10 <HAL_RCC_OscConfig+0x770>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d0f0      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d106      	bne.n	8002c24 <HAL_RCC_OscConfig+0x584>
 8002c16:	4b7d      	ldr	r3, [pc, #500]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c1a:	4a7c      	ldr	r2, [pc, #496]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	f043 0301 	orr.w	r3, r3, #1
 8002c20:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c22:	e02d      	b.n	8002c80 <HAL_RCC_OscConfig+0x5e0>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d10c      	bne.n	8002c46 <HAL_RCC_OscConfig+0x5a6>
 8002c2c:	4b77      	ldr	r3, [pc, #476]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c30:	4a76      	ldr	r2, [pc, #472]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c32:	f023 0301 	bic.w	r3, r3, #1
 8002c36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c38:	4b74      	ldr	r3, [pc, #464]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c3c:	4a73      	ldr	r2, [pc, #460]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c3e:	f023 0304 	bic.w	r3, r3, #4
 8002c42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c44:	e01c      	b.n	8002c80 <HAL_RCC_OscConfig+0x5e0>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	689b      	ldr	r3, [r3, #8]
 8002c4a:	2b05      	cmp	r3, #5
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x5c8>
 8002c4e:	4b6f      	ldr	r3, [pc, #444]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c52:	4a6e      	ldr	r2, [pc, #440]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c5a:	4b6c      	ldr	r3, [pc, #432]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c5e:	4a6b      	ldr	r2, [pc, #428]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c60:	f043 0301 	orr.w	r3, r3, #1
 8002c64:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0x5e0>
 8002c68:	4b68      	ldr	r3, [pc, #416]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c6c:	4a67      	ldr	r2, [pc, #412]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c6e:	f023 0301 	bic.w	r3, r3, #1
 8002c72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002c74:	4b65      	ldr	r3, [pc, #404]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002c78:	4a64      	ldr	r2, [pc, #400]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002c7a:	f023 0304 	bic.w	r3, r3, #4
 8002c7e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d015      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c88:	f7fe ffb4 	bl	8001bf4 <HAL_GetTick>
 8002c8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe ffb0 	bl	8001bf4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e14e      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ca6:	4b59      	ldr	r3, [pc, #356]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0ee      	beq.n	8002c90 <HAL_RCC_OscConfig+0x5f0>
 8002cb2:	e014      	b.n	8002cde <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb4:	f7fe ff9e 	bl	8001bf4 <HAL_GetTick>
 8002cb8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe ff9a 	bl	8001bf4 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e138      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cd2:	4b4e      	ldr	r3, [pc, #312]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002cd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1ee      	bne.n	8002cbc <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	f000 812d 	beq.w	8002f42 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ce8:	4b48      	ldr	r3, [pc, #288]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cf0:	2b18      	cmp	r3, #24
 8002cf2:	f000 80bd 	beq.w	8002e70 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	f040 809e 	bne.w	8002e3c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d00:	4b42      	ldr	r3, [pc, #264]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a41      	ldr	r2, [pc, #260]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d0c:	f7fe ff72 	bl	8001bf4 <HAL_GetTick>
 8002d10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d12:	e008      	b.n	8002d26 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d14:	f7fe ff6e 	bl	8001bf4 <HAL_GetTick>
 8002d18:	4602      	mov	r2, r0
 8002d1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d1c:	1ad3      	subs	r3, r2, r3
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d901      	bls.n	8002d26 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d22:	2303      	movs	r3, #3
 8002d24:	e10e      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d26:	4b39      	ldr	r3, [pc, #228]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d1f0      	bne.n	8002d14 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d32:	4b36      	ldr	r3, [pc, #216]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d34:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002d36:	4b37      	ldr	r3, [pc, #220]	@ (8002e14 <HAL_RCC_OscConfig+0x774>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002d3e:	687a      	ldr	r2, [r7, #4]
 8002d40:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002d42:	0112      	lsls	r2, r2, #4
 8002d44:	430a      	orrs	r2, r1
 8002d46:	4931      	ldr	r1, [pc, #196]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	628b      	str	r3, [r1, #40]	@ 0x28
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d50:	3b01      	subs	r3, #1
 8002d52:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d5a:	3b01      	subs	r3, #1
 8002d5c:	025b      	lsls	r3, r3, #9
 8002d5e:	b29b      	uxth	r3, r3
 8002d60:	431a      	orrs	r2, r3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d66:	3b01      	subs	r3, #1
 8002d68:	041b      	lsls	r3, r3, #16
 8002d6a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d74:	3b01      	subs	r3, #1
 8002d76:	061b      	lsls	r3, r3, #24
 8002d78:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002d7c:	4923      	ldr	r1, [pc, #140]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d82:	4b22      	ldr	r3, [pc, #136]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d86:	4a21      	ldr	r2, [pc, #132]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002d92:	4b21      	ldr	r3, [pc, #132]	@ (8002e18 <HAL_RCC_OscConfig+0x778>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002d9a:	00d2      	lsls	r2, r2, #3
 8002d9c:	491b      	ldr	r1, [pc, #108]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002da2:	4b1a      	ldr	r3, [pc, #104]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002da4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002da6:	f023 020c 	bic.w	r2, r3, #12
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dae:	4917      	ldr	r1, [pc, #92]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002db0:	4313      	orrs	r3, r2
 8002db2:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002db4:	4b15      	ldr	r3, [pc, #84]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002db8:	f023 0202 	bic.w	r2, r3, #2
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dc0:	4912      	ldr	r1, [pc, #72]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dc6:	4b11      	ldr	r3, [pc, #68]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dca:	4a10      	ldr	r2, [pc, #64]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dcc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002dd0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd6:	4a0d      	ldr	r2, [pc, #52]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ddc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dde:	4b0b      	ldr	r3, [pc, #44]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002de2:	4a0a      	ldr	r2, [pc, #40]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002de4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002de8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002dea:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dee:	4a07      	ldr	r2, [pc, #28]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002df0:	f043 0301 	orr.w	r3, r3, #1
 8002df4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df6:	4b05      	ldr	r3, [pc, #20]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a04      	ldr	r2, [pc, #16]	@ (8002e0c <HAL_RCC_OscConfig+0x76c>)
 8002dfc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe fef7 	bl	8001bf4 <HAL_GetTick>
 8002e06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e08:	e011      	b.n	8002e2e <HAL_RCC_OscConfig+0x78e>
 8002e0a:	bf00      	nop
 8002e0c:	58024400 	.word	0x58024400
 8002e10:	58024800 	.word	0x58024800
 8002e14:	fffffc0c 	.word	0xfffffc0c
 8002e18:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e1c:	f7fe feea 	bl	8001bf4 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b02      	cmp	r3, #2
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e08a      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e2e:	4b47      	ldr	r3, [pc, #284]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0x77c>
 8002e3a:	e082      	b.n	8002f42 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e3c:	4b43      	ldr	r3, [pc, #268]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a42      	ldr	r2, [pc, #264]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e42:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002e46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fed4 	bl	8001bf4 <HAL_GetTick>
 8002e4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fed0 	bl	8001bf4 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e070      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e62:	4b3a      	ldr	r3, [pc, #232]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d1f0      	bne.n	8002e50 <HAL_RCC_OscConfig+0x7b0>
 8002e6e:	e068      	b.n	8002f42 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e70:	4b36      	ldr	r3, [pc, #216]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e76:	4b35      	ldr	r3, [pc, #212]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002e78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e7a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d031      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	f003 0203 	and.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d12a      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	091b      	lsrs	r3, r3, #4
 8002e96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d122      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eac:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d11a      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	0a5b      	lsrs	r3, r3, #9
 8002eb6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ebe:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d111      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	0c1b      	lsrs	r3, r3, #16
 8002ec8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d108      	bne.n	8002ee8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	0e1b      	lsrs	r3, r3, #24
 8002eda:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ee2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d001      	beq.n	8002eec <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	e02b      	b.n	8002f44 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002eec:	4b17      	ldr	r3, [pc, #92]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002eee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002ef0:	08db      	lsrs	r3, r3, #3
 8002ef2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ef6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002efc:	693a      	ldr	r2, [r7, #16]
 8002efe:	429a      	cmp	r2, r3
 8002f00:	d01f      	beq.n	8002f42 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002f02:	4b12      	ldr	r3, [pc, #72]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f06:	4a11      	ldr	r2, [pc, #68]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f08:	f023 0301 	bic.w	r3, r3, #1
 8002f0c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f0e:	f7fe fe71 	bl	8001bf4 <HAL_GetTick>
 8002f12:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f14:	bf00      	nop
 8002f16:	f7fe fe6d 	bl	8001bf4 <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d0f9      	beq.n	8002f16 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f22:	4b0a      	ldr	r3, [pc, #40]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f26:	4b0a      	ldr	r3, [pc, #40]	@ (8002f50 <HAL_RCC_OscConfig+0x8b0>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f2e:	00d2      	lsls	r2, r2, #3
 8002f30:	4906      	ldr	r1, [pc, #24]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f36:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f3a:	4a04      	ldr	r2, [pc, #16]	@ (8002f4c <HAL_RCC_OscConfig+0x8ac>)
 8002f3c:	f043 0301 	orr.w	r3, r3, #1
 8002f40:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3730      	adds	r7, #48	@ 0x30
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	58024400 	.word	0x58024400
 8002f50:	ffff0007 	.word	0xffff0007

08002f54 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d101      	bne.n	8002f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e19c      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f68:	4b8a      	ldr	r3, [pc, #552]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 030f 	and.w	r3, r3, #15
 8002f70:	683a      	ldr	r2, [r7, #0]
 8002f72:	429a      	cmp	r2, r3
 8002f74:	d910      	bls.n	8002f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f76:	4b87      	ldr	r3, [pc, #540]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 020f 	bic.w	r2, r3, #15
 8002f7e:	4985      	ldr	r1, [pc, #532]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f86:	4b83      	ldr	r3, [pc, #524]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	683a      	ldr	r2, [r7, #0]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d001      	beq.n	8002f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e184      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f003 0304 	and.w	r3, r3, #4
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d010      	beq.n	8002fc6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	691a      	ldr	r2, [r3, #16]
 8002fa8:	4b7b      	ldr	r3, [pc, #492]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d908      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fb4:	4b78      	ldr	r3, [pc, #480]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	4975      	ldr	r1, [pc, #468]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fc2:	4313      	orrs	r3, r2
 8002fc4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0308 	and.w	r3, r3, #8
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d010      	beq.n	8002ff4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	695a      	ldr	r2, [r3, #20]
 8002fd6:	4b70      	ldr	r3, [pc, #448]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fd8:	69db      	ldr	r3, [r3, #28]
 8002fda:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002fde:	429a      	cmp	r2, r3
 8002fe0:	d908      	bls.n	8002ff4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fe2:	4b6d      	ldr	r3, [pc, #436]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	695b      	ldr	r3, [r3, #20]
 8002fee:	496a      	ldr	r1, [pc, #424]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f003 0310 	and.w	r3, r3, #16
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d010      	beq.n	8003022 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	699a      	ldr	r2, [r3, #24]
 8003004:	4b64      	ldr	r3, [pc, #400]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003006:	69db      	ldr	r3, [r3, #28]
 8003008:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800300c:	429a      	cmp	r2, r3
 800300e:	d908      	bls.n	8003022 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003010:	4b61      	ldr	r3, [pc, #388]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003012:	69db      	ldr	r3, [r3, #28]
 8003014:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	699b      	ldr	r3, [r3, #24]
 800301c:	495e      	ldr	r1, [pc, #376]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 800301e:	4313      	orrs	r3, r2
 8003020:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0320 	and.w	r3, r3, #32
 800302a:	2b00      	cmp	r3, #0
 800302c:	d010      	beq.n	8003050 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	69da      	ldr	r2, [r3, #28]
 8003032:	4b59      	ldr	r3, [pc, #356]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003034:	6a1b      	ldr	r3, [r3, #32]
 8003036:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800303a:	429a      	cmp	r2, r3
 800303c:	d908      	bls.n	8003050 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800303e:	4b56      	ldr	r3, [pc, #344]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003040:	6a1b      	ldr	r3, [r3, #32]
 8003042:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69db      	ldr	r3, [r3, #28]
 800304a:	4953      	ldr	r1, [pc, #332]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 800304c:	4313      	orrs	r3, r2
 800304e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0302 	and.w	r3, r3, #2
 8003058:	2b00      	cmp	r3, #0
 800305a:	d010      	beq.n	800307e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	68da      	ldr	r2, [r3, #12]
 8003060:	4b4d      	ldr	r3, [pc, #308]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	429a      	cmp	r2, r3
 800306a:	d908      	bls.n	800307e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800306c:	4b4a      	ldr	r3, [pc, #296]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 800306e:	699b      	ldr	r3, [r3, #24]
 8003070:	f023 020f 	bic.w	r2, r3, #15
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	4947      	ldr	r1, [pc, #284]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 800307a:	4313      	orrs	r3, r2
 800307c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	2b00      	cmp	r3, #0
 8003088:	d055      	beq.n	8003136 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800308a:	4b43      	ldr	r3, [pc, #268]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	4940      	ldr	r1, [pc, #256]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003098:	4313      	orrs	r3, r2
 800309a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d107      	bne.n	80030b4 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a4:	4b3c      	ldr	r3, [pc, #240]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d121      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e0f6      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	2b03      	cmp	r3, #3
 80030ba:	d107      	bne.n	80030cc <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030bc:	4b36      	ldr	r3, [pc, #216]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d115      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0ea      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d107      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030d4:	4b30      	ldr	r3, [pc, #192]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d109      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0de      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e4:	4b2c      	ldr	r3, [pc, #176]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0304 	and.w	r3, r3, #4
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d101      	bne.n	80030f4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0d6      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f4:	4b28      	ldr	r3, [pc, #160]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 80030f6:	691b      	ldr	r3, [r3, #16]
 80030f8:	f023 0207 	bic.w	r2, r3, #7
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	685b      	ldr	r3, [r3, #4]
 8003100:	4925      	ldr	r1, [pc, #148]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003102:	4313      	orrs	r3, r2
 8003104:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003106:	f7fe fd75 	bl	8001bf4 <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800310c:	e00a      	b.n	8003124 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310e:	f7fe fd71 	bl	8001bf4 <HAL_GetTick>
 8003112:	4602      	mov	r2, r0
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	f241 3288 	movw	r2, #5000	@ 0x1388
 800311c:	4293      	cmp	r3, r2
 800311e:	d901      	bls.n	8003124 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003120:	2303      	movs	r3, #3
 8003122:	e0be      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003124:	4b1c      	ldr	r3, [pc, #112]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003126:	691b      	ldr	r3, [r3, #16]
 8003128:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	429a      	cmp	r2, r3
 8003134:	d1eb      	bne.n	800310e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f003 0302 	and.w	r3, r3, #2
 800313e:	2b00      	cmp	r3, #0
 8003140:	d010      	beq.n	8003164 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	68da      	ldr	r2, [r3, #12]
 8003146:	4b14      	ldr	r3, [pc, #80]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003148:	699b      	ldr	r3, [r3, #24]
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	429a      	cmp	r2, r3
 8003150:	d208      	bcs.n	8003164 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003152:	4b11      	ldr	r3, [pc, #68]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003154:	699b      	ldr	r3, [r3, #24]
 8003156:	f023 020f 	bic.w	r2, r3, #15
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	490e      	ldr	r1, [pc, #56]	@ (8003198 <HAL_RCC_ClockConfig+0x244>)
 8003160:	4313      	orrs	r3, r2
 8003162:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003164:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 030f 	and.w	r3, r3, #15
 800316c:	683a      	ldr	r2, [r7, #0]
 800316e:	429a      	cmp	r2, r3
 8003170:	d214      	bcs.n	800319c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003172:	4b08      	ldr	r3, [pc, #32]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	f023 020f 	bic.w	r2, r3, #15
 800317a:	4906      	ldr	r1, [pc, #24]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	4313      	orrs	r3, r2
 8003180:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003182:	4b04      	ldr	r3, [pc, #16]	@ (8003194 <HAL_RCC_ClockConfig+0x240>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f003 030f 	and.w	r3, r3, #15
 800318a:	683a      	ldr	r2, [r7, #0]
 800318c:	429a      	cmp	r2, r3
 800318e:	d005      	beq.n	800319c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e086      	b.n	80032a2 <HAL_RCC_ClockConfig+0x34e>
 8003194:	52002000 	.word	0x52002000
 8003198:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f003 0304 	and.w	r3, r3, #4
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	691a      	ldr	r2, [r3, #16]
 80031ac:	4b3f      	ldr	r3, [pc, #252]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031ae:	699b      	ldr	r3, [r3, #24]
 80031b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d208      	bcs.n	80031ca <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b8:	4b3c      	ldr	r3, [pc, #240]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	691b      	ldr	r3, [r3, #16]
 80031c4:	4939      	ldr	r1, [pc, #228]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0308 	and.w	r3, r3, #8
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	695a      	ldr	r2, [r3, #20]
 80031da:	4b34      	ldr	r3, [pc, #208]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d208      	bcs.n	80031f8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031e6:	4b31      	ldr	r3, [pc, #196]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031e8:	69db      	ldr	r3, [r3, #28]
 80031ea:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	695b      	ldr	r3, [r3, #20]
 80031f2:	492e      	ldr	r1, [pc, #184]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 80031f4:	4313      	orrs	r3, r2
 80031f6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0310 	and.w	r3, r3, #16
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	699a      	ldr	r2, [r3, #24]
 8003208:	4b28      	ldr	r3, [pc, #160]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 800320a:	69db      	ldr	r3, [r3, #28]
 800320c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003210:	429a      	cmp	r2, r3
 8003212:	d208      	bcs.n	8003226 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003214:	4b25      	ldr	r3, [pc, #148]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003216:	69db      	ldr	r3, [r3, #28]
 8003218:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	4922      	ldr	r1, [pc, #136]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003222:	4313      	orrs	r3, r2
 8003224:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 0320 	and.w	r3, r3, #32
 800322e:	2b00      	cmp	r3, #0
 8003230:	d010      	beq.n	8003254 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	69da      	ldr	r2, [r3, #28]
 8003236:	4b1d      	ldr	r3, [pc, #116]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800323e:	429a      	cmp	r2, r3
 8003240:	d208      	bcs.n	8003254 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003242:	4b1a      	ldr	r3, [pc, #104]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	69db      	ldr	r3, [r3, #28]
 800324e:	4917      	ldr	r1, [pc, #92]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003250:	4313      	orrs	r3, r2
 8003252:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003254:	f000 f834 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 8003258:	4602      	mov	r2, r0
 800325a:	4b14      	ldr	r3, [pc, #80]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	0a1b      	lsrs	r3, r3, #8
 8003260:	f003 030f 	and.w	r3, r3, #15
 8003264:	4912      	ldr	r1, [pc, #72]	@ (80032b0 <HAL_RCC_ClockConfig+0x35c>)
 8003266:	5ccb      	ldrb	r3, [r1, r3]
 8003268:	f003 031f 	and.w	r3, r3, #31
 800326c:	fa22 f303 	lsr.w	r3, r2, r3
 8003270:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003272:	4b0e      	ldr	r3, [pc, #56]	@ (80032ac <HAL_RCC_ClockConfig+0x358>)
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	4a0d      	ldr	r2, [pc, #52]	@ (80032b0 <HAL_RCC_ClockConfig+0x35c>)
 800327c:	5cd3      	ldrb	r3, [r2, r3]
 800327e:	f003 031f 	and.w	r3, r3, #31
 8003282:	693a      	ldr	r2, [r7, #16]
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	4a0a      	ldr	r2, [pc, #40]	@ (80032b4 <HAL_RCC_ClockConfig+0x360>)
 800328a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800328c:	4a0a      	ldr	r2, [pc, #40]	@ (80032b8 <HAL_RCC_ClockConfig+0x364>)
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003292:	4b0a      	ldr	r3, [pc, #40]	@ (80032bc <HAL_RCC_ClockConfig+0x368>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f7fe fc62 	bl	8001b60 <HAL_InitTick>
 800329c:	4603      	mov	r3, r0
 800329e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80032a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3718      	adds	r7, #24
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	58024400 	.word	0x58024400
 80032b0:	0800aad8 	.word	0x0800aad8
 80032b4:	24000004 	.word	0x24000004
 80032b8:	24000000 	.word	0x24000000
 80032bc:	24000024 	.word	0x24000024

080032c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032c0:	b480      	push	{r7}
 80032c2:	b089      	sub	sp, #36	@ 0x24
 80032c4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c6:	4bb3      	ldr	r3, [pc, #716]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80032ce:	2b18      	cmp	r3, #24
 80032d0:	f200 8155 	bhi.w	800357e <HAL_RCC_GetSysClockFreq+0x2be>
 80032d4:	a201      	add	r2, pc, #4	@ (adr r2, 80032dc <HAL_RCC_GetSysClockFreq+0x1c>)
 80032d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032da:	bf00      	nop
 80032dc:	08003341 	.word	0x08003341
 80032e0:	0800357f 	.word	0x0800357f
 80032e4:	0800357f 	.word	0x0800357f
 80032e8:	0800357f 	.word	0x0800357f
 80032ec:	0800357f 	.word	0x0800357f
 80032f0:	0800357f 	.word	0x0800357f
 80032f4:	0800357f 	.word	0x0800357f
 80032f8:	0800357f 	.word	0x0800357f
 80032fc:	08003367 	.word	0x08003367
 8003300:	0800357f 	.word	0x0800357f
 8003304:	0800357f 	.word	0x0800357f
 8003308:	0800357f 	.word	0x0800357f
 800330c:	0800357f 	.word	0x0800357f
 8003310:	0800357f 	.word	0x0800357f
 8003314:	0800357f 	.word	0x0800357f
 8003318:	0800357f 	.word	0x0800357f
 800331c:	0800336d 	.word	0x0800336d
 8003320:	0800357f 	.word	0x0800357f
 8003324:	0800357f 	.word	0x0800357f
 8003328:	0800357f 	.word	0x0800357f
 800332c:	0800357f 	.word	0x0800357f
 8003330:	0800357f 	.word	0x0800357f
 8003334:	0800357f 	.word	0x0800357f
 8003338:	0800357f 	.word	0x0800357f
 800333c:	08003373 	.word	0x08003373
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003340:	4b94      	ldr	r3, [pc, #592]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 0320 	and.w	r3, r3, #32
 8003348:	2b00      	cmp	r3, #0
 800334a:	d009      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800334c:	4b91      	ldr	r3, [pc, #580]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	08db      	lsrs	r3, r3, #3
 8003352:	f003 0303 	and.w	r3, r3, #3
 8003356:	4a90      	ldr	r2, [pc, #576]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003358:	fa22 f303 	lsr.w	r3, r2, r3
 800335c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800335e:	e111      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003360:	4b8d      	ldr	r3, [pc, #564]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003362:	61bb      	str	r3, [r7, #24]
      break;
 8003364:	e10e      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003366:	4b8d      	ldr	r3, [pc, #564]	@ (800359c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003368:	61bb      	str	r3, [r7, #24]
      break;
 800336a:	e10b      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800336c:	4b8c      	ldr	r3, [pc, #560]	@ (80035a0 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800336e:	61bb      	str	r3, [r7, #24]
      break;
 8003370:	e108      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003372:	4b88      	ldr	r3, [pc, #544]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003374:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003376:	f003 0303 	and.w	r3, r3, #3
 800337a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800337c:	4b85      	ldr	r3, [pc, #532]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003380:	091b      	lsrs	r3, r3, #4
 8003382:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003386:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003388:	4b82      	ldr	r3, [pc, #520]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800338a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003392:	4b80      	ldr	r3, [pc, #512]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003396:	08db      	lsrs	r3, r3, #3
 8003398:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	fb02 f303 	mul.w	r3, r2, r3
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 80e1 	beq.w	8003578 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	2b02      	cmp	r3, #2
 80033ba:	f000 8083 	beq.w	80034c4 <HAL_RCC_GetSysClockFreq+0x204>
 80033be:	697b      	ldr	r3, [r7, #20]
 80033c0:	2b02      	cmp	r3, #2
 80033c2:	f200 80a1 	bhi.w	8003508 <HAL_RCC_GetSysClockFreq+0x248>
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d003      	beq.n	80033d4 <HAL_RCC_GetSysClockFreq+0x114>
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d056      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x1c0>
 80033d2:	e099      	b.n	8003508 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d02d      	beq.n	800343c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033e0:	4b6c      	ldr	r3, [pc, #432]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	08db      	lsrs	r3, r3, #3
 80033e6:	f003 0303 	and.w	r3, r3, #3
 80033ea:	4a6b      	ldr	r2, [pc, #428]	@ (8003598 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	ee07 3a90 	vmov	s15, r3
 8003402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003406:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800340a:	4b62      	ldr	r3, [pc, #392]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800340e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003412:	ee07 3a90 	vmov	s15, r3
 8003416:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800341a:	ed97 6a02 	vldr	s12, [r7, #8]
 800341e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003422:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003426:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800342a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800342e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003432:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003436:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800343a:	e087      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800343c:	693b      	ldr	r3, [r7, #16]
 800343e:	ee07 3a90 	vmov	s15, r3
 8003442:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003446:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80035a8 <HAL_RCC_GetSysClockFreq+0x2e8>
 800344a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344e:	4b51      	ldr	r3, [pc, #324]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003452:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003456:	ee07 3a90 	vmov	s15, r3
 800345a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003462:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003466:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800346a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003472:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003476:	ee67 7a27 	vmul.f32	s15, s14, s15
 800347a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800347e:	e065      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	ee07 3a90 	vmov	s15, r3
 8003486:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800348a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80035ac <HAL_RCC_GetSysClockFreq+0x2ec>
 800348e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003492:	4b40      	ldr	r3, [pc, #256]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003496:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800349a:	ee07 3a90 	vmov	s15, r3
 800349e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a6:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034b2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034c2:	e043      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c4:	693b      	ldr	r3, [r7, #16]
 80034c6:	ee07 3a90 	vmov	s15, r3
 80034ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ce:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80035b0 <HAL_RCC_GetSysClockFreq+0x2f0>
 80034d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d6:	4b2f      	ldr	r3, [pc, #188]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e6:	ed97 6a02 	vldr	s12, [r7, #8]
 80034ea:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80034fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003502:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003506:	e021      	b.n	800354c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	ee07 3a90 	vmov	s15, r3
 800350e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003512:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80035ac <HAL_RCC_GetSysClockFreq+0x2ec>
 8003516:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800351a:	4b1e      	ldr	r3, [pc, #120]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800351c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800351e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003522:	ee07 3a90 	vmov	s15, r3
 8003526:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800352a:	ed97 6a02 	vldr	s12, [r7, #8]
 800352e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80035a4 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003532:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003536:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800353a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800353e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003542:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003546:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800354a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800354c:	4b11      	ldr	r3, [pc, #68]	@ (8003594 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003550:	0a5b      	lsrs	r3, r3, #9
 8003552:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003556:	3301      	adds	r3, #1
 8003558:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003564:	edd7 6a07 	vldr	s13, [r7, #28]
 8003568:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800356c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003570:	ee17 3a90 	vmov	r3, s15
 8003574:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003576:	e005      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003578:	2300      	movs	r3, #0
 800357a:	61bb      	str	r3, [r7, #24]
      break;
 800357c:	e002      	b.n	8003584 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800357e:	4b07      	ldr	r3, [pc, #28]	@ (800359c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003580:	61bb      	str	r3, [r7, #24]
      break;
 8003582:	bf00      	nop
  }

  return sysclockfreq;
 8003584:	69bb      	ldr	r3, [r7, #24]
}
 8003586:	4618      	mov	r0, r3
 8003588:	3724      	adds	r7, #36	@ 0x24
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr
 8003592:	bf00      	nop
 8003594:	58024400 	.word	0x58024400
 8003598:	03d09000 	.word	0x03d09000
 800359c:	003d0900 	.word	0x003d0900
 80035a0:	017d7840 	.word	0x017d7840
 80035a4:	46000000 	.word	0x46000000
 80035a8:	4c742400 	.word	0x4c742400
 80035ac:	4a742400 	.word	0x4a742400
 80035b0:	4bbebc20 	.word	0x4bbebc20

080035b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80035ba:	f7ff fe81 	bl	80032c0 <HAL_RCC_GetSysClockFreq>
 80035be:	4602      	mov	r2, r0
 80035c0:	4b10      	ldr	r3, [pc, #64]	@ (8003604 <HAL_RCC_GetHCLKFreq+0x50>)
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 030f 	and.w	r3, r3, #15
 80035ca:	490f      	ldr	r1, [pc, #60]	@ (8003608 <HAL_RCC_GetHCLKFreq+0x54>)
 80035cc:	5ccb      	ldrb	r3, [r1, r3]
 80035ce:	f003 031f 	and.w	r3, r3, #31
 80035d2:	fa22 f303 	lsr.w	r3, r2, r3
 80035d6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80035d8:	4b0a      	ldr	r3, [pc, #40]	@ (8003604 <HAL_RCC_GetHCLKFreq+0x50>)
 80035da:	699b      	ldr	r3, [r3, #24]
 80035dc:	f003 030f 	and.w	r3, r3, #15
 80035e0:	4a09      	ldr	r2, [pc, #36]	@ (8003608 <HAL_RCC_GetHCLKFreq+0x54>)
 80035e2:	5cd3      	ldrb	r3, [r2, r3]
 80035e4:	f003 031f 	and.w	r3, r3, #31
 80035e8:	687a      	ldr	r2, [r7, #4]
 80035ea:	fa22 f303 	lsr.w	r3, r2, r3
 80035ee:	4a07      	ldr	r2, [pc, #28]	@ (800360c <HAL_RCC_GetHCLKFreq+0x58>)
 80035f0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80035f2:	4a07      	ldr	r2, [pc, #28]	@ (8003610 <HAL_RCC_GetHCLKFreq+0x5c>)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80035f8:	4b04      	ldr	r3, [pc, #16]	@ (800360c <HAL_RCC_GetHCLKFreq+0x58>)
 80035fa:	681b      	ldr	r3, [r3, #0]
}
 80035fc:	4618      	mov	r0, r3
 80035fe:	3708      	adds	r7, #8
 8003600:	46bd      	mov	sp, r7
 8003602:	bd80      	pop	{r7, pc}
 8003604:	58024400 	.word	0x58024400
 8003608:	0800aad8 	.word	0x0800aad8
 800360c:	24000004 	.word	0x24000004
 8003610:	24000000 	.word	0x24000000

08003614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003618:	f7ff ffcc 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 800361c:	4602      	mov	r2, r0
 800361e:	4b06      	ldr	r3, [pc, #24]	@ (8003638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003620:	69db      	ldr	r3, [r3, #28]
 8003622:	091b      	lsrs	r3, r3, #4
 8003624:	f003 0307 	and.w	r3, r3, #7
 8003628:	4904      	ldr	r1, [pc, #16]	@ (800363c <HAL_RCC_GetPCLK1Freq+0x28>)
 800362a:	5ccb      	ldrb	r3, [r1, r3]
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003634:	4618      	mov	r0, r3
 8003636:	bd80      	pop	{r7, pc}
 8003638:	58024400 	.word	0x58024400
 800363c:	0800aad8 	.word	0x0800aad8

08003640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003644:	f7ff ffb6 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8003648:	4602      	mov	r2, r0
 800364a:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800364c:	69db      	ldr	r3, [r3, #28]
 800364e:	0a1b      	lsrs	r3, r3, #8
 8003650:	f003 0307 	and.w	r3, r3, #7
 8003654:	4904      	ldr	r1, [pc, #16]	@ (8003668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003656:	5ccb      	ldrb	r3, [r1, r3]
 8003658:	f003 031f 	and.w	r3, r3, #31
 800365c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003660:	4618      	mov	r0, r3
 8003662:	bd80      	pop	{r7, pc}
 8003664:	58024400 	.word	0x58024400
 8003668:	0800aad8 	.word	0x0800aad8

0800366c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800366c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003670:	b0ca      	sub	sp, #296	@ 0x128
 8003672:	af00      	add	r7, sp, #0
 8003674:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003678:	2300      	movs	r3, #0
 800367a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800367e:	2300      	movs	r3, #0
 8003680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003688:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8003690:	2500      	movs	r5, #0
 8003692:	ea54 0305 	orrs.w	r3, r4, r5
 8003696:	d049      	beq.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003698:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800369c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800369e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036a2:	d02f      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80036a4:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80036a8:	d828      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036aa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036ae:	d01a      	beq.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80036b0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80036b4:	d822      	bhi.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80036ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036be:	d007      	beq.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80036c0:	e01c      	b.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036c2:	4bb8      	ldr	r3, [pc, #736]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c6:	4ab7      	ldr	r2, [pc, #732]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80036cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036ce:	e01a      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80036d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036d4:	3308      	adds	r3, #8
 80036d6:	2102      	movs	r1, #2
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 fc8f 	bl	8004ffc <RCCEx_PLL2_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036e4:	e00f      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80036e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ea:	3328      	adds	r3, #40	@ 0x28
 80036ec:	2102      	movs	r1, #2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f001 fd36 	bl	8005160 <RCCEx_PLL3_Config>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80036fa:	e004      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003702:	e000      	b.n	8003706 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003704:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003706:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800370a:	2b00      	cmp	r3, #0
 800370c:	d10a      	bne.n	8003724 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800370e:	4ba5      	ldr	r3, [pc, #660]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003710:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003712:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003716:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800371a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800371c:	4aa1      	ldr	r2, [pc, #644]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800371e:	430b      	orrs	r3, r1
 8003720:	6513      	str	r3, [r2, #80]	@ 0x50
 8003722:	e003      	b.n	800372c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003724:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003728:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800372c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8003738:	f04f 0900 	mov.w	r9, #0
 800373c:	ea58 0309 	orrs.w	r3, r8, r9
 8003740:	d047      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003746:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003748:	2b04      	cmp	r3, #4
 800374a:	d82a      	bhi.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800374c:	a201      	add	r2, pc, #4	@ (adr r2, 8003754 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800374e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003752:	bf00      	nop
 8003754:	08003769 	.word	0x08003769
 8003758:	08003777 	.word	0x08003777
 800375c:	0800378d 	.word	0x0800378d
 8003760:	080037ab 	.word	0x080037ab
 8003764:	080037ab 	.word	0x080037ab
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003768:	4b8e      	ldr	r3, [pc, #568]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800376a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800376c:	4a8d      	ldr	r2, [pc, #564]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800376e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003772:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003774:	e01a      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003776:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800377a:	3308      	adds	r3, #8
 800377c:	2100      	movs	r1, #0
 800377e:	4618      	mov	r0, r3
 8003780:	f001 fc3c 	bl	8004ffc <RCCEx_PLL2_Config>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800378a:	e00f      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003790:	3328      	adds	r3, #40	@ 0x28
 8003792:	2100      	movs	r1, #0
 8003794:	4618      	mov	r0, r3
 8003796:	f001 fce3 	bl	8005160 <RCCEx_PLL3_Config>
 800379a:	4603      	mov	r3, r0
 800379c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037a0:	e004      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037a2:	2301      	movs	r3, #1
 80037a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037a8:	e000      	b.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80037aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d10a      	bne.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80037b4:	4b7b      	ldr	r3, [pc, #492]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037b8:	f023 0107 	bic.w	r1, r3, #7
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80037c2:	4a78      	ldr	r2, [pc, #480]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037c4:	430b      	orrs	r3, r1
 80037c6:	6513      	str	r3, [r2, #80]	@ 0x50
 80037c8:	e003      	b.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80037d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 80037de:	f04f 0b00 	mov.w	fp, #0
 80037e2:	ea5a 030b 	orrs.w	r3, sl, fp
 80037e6:	d04c      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80037e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037f2:	d030      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80037f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80037f8:	d829      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80037fa:	2bc0      	cmp	r3, #192	@ 0xc0
 80037fc:	d02d      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80037fe:	2bc0      	cmp	r3, #192	@ 0xc0
 8003800:	d825      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003802:	2b80      	cmp	r3, #128	@ 0x80
 8003804:	d018      	beq.n	8003838 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003806:	2b80      	cmp	r3, #128	@ 0x80
 8003808:	d821      	bhi.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800380a:	2b00      	cmp	r3, #0
 800380c:	d002      	beq.n	8003814 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800380e:	2b40      	cmp	r3, #64	@ 0x40
 8003810:	d007      	beq.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003812:	e01c      	b.n	800384e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003814:	4b63      	ldr	r3, [pc, #396]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	4a62      	ldr	r2, [pc, #392]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800381a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800381e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003820:	e01c      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003826:	3308      	adds	r3, #8
 8003828:	2100      	movs	r1, #0
 800382a:	4618      	mov	r0, r3
 800382c:	f001 fbe6 	bl	8004ffc <RCCEx_PLL2_Config>
 8003830:	4603      	mov	r3, r0
 8003832:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003836:	e011      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	3328      	adds	r3, #40	@ 0x28
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f001 fc8d 	bl	8005160 <RCCEx_PLL3_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800384c:	e006      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800384e:	2301      	movs	r3, #1
 8003850:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003854:	e002      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003856:	bf00      	nop
 8003858:	e000      	b.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800385a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800385c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003860:	2b00      	cmp	r3, #0
 8003862:	d10a      	bne.n	800387a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003864:	4b4f      	ldr	r3, [pc, #316]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003868:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003872:	4a4c      	ldr	r2, [pc, #304]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003874:	430b      	orrs	r3, r1
 8003876:	6513      	str	r3, [r2, #80]	@ 0x50
 8003878:	e003      	b.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800387a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800387e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800388e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8003898:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800389c:	460b      	mov	r3, r1
 800389e:	4313      	orrs	r3, r2
 80038a0:	d053      	beq.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80038a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80038aa:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038ae:	d035      	beq.n	800391c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80038b0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80038b4:	d82e      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038b6:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80038ba:	d031      	beq.n	8003920 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80038bc:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80038c0:	d828      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038c6:	d01a      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x292>
 80038c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80038cc:	d822      	bhi.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d003      	beq.n	80038da <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80038d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80038d6:	d007      	beq.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80038d8:	e01c      	b.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038da:	4b32      	ldr	r3, [pc, #200]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038de:	4a31      	ldr	r2, [pc, #196]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80038e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038e6:	e01c      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ec:	3308      	adds	r3, #8
 80038ee:	2100      	movs	r1, #0
 80038f0:	4618      	mov	r0, r3
 80038f2:	f001 fb83 	bl	8004ffc <RCCEx_PLL2_Config>
 80038f6:	4603      	mov	r3, r0
 80038f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80038fc:	e011      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003902:	3328      	adds	r3, #40	@ 0x28
 8003904:	2100      	movs	r1, #0
 8003906:	4618      	mov	r0, r3
 8003908:	f001 fc2a 	bl	8005160 <RCCEx_PLL3_Config>
 800390c:	4603      	mov	r3, r0
 800390e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003912:	e006      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003914:	2301      	movs	r3, #1
 8003916:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800391a:	e002      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800391c:	bf00      	nop
 800391e:	e000      	b.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003920:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003922:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003926:	2b00      	cmp	r3, #0
 8003928:	d10b      	bne.n	8003942 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800392a:	4b1e      	ldr	r3, [pc, #120]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8003932:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003936:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800393a:	4a1a      	ldr	r2, [pc, #104]	@ (80039a4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800393c:	430b      	orrs	r3, r1
 800393e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003940:	e003      	b.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003942:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003946:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003952:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8003956:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800395a:	2300      	movs	r3, #0
 800395c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8003960:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d056      	beq.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800396a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800396e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003972:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003976:	d038      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003978:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800397c:	d831      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800397e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003982:	d034      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003984:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003988:	d82b      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800398a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800398e:	d01d      	beq.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003990:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003994:	d825      	bhi.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003996:	2b00      	cmp	r3, #0
 8003998:	d006      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800399a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800399e:	d00a      	beq.n	80039b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80039a0:	e01f      	b.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80039a2:	bf00      	nop
 80039a4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80039a8:	4ba2      	ldr	r3, [pc, #648]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039ac:	4aa1      	ldr	r2, [pc, #644]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80039b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039b4:	e01c      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039ba:	3308      	adds	r3, #8
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f001 fb1c 	bl	8004ffc <RCCEx_PLL2_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80039ca:	e011      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039d0:	3328      	adds	r3, #40	@ 0x28
 80039d2:	2100      	movs	r1, #0
 80039d4:	4618      	mov	r0, r3
 80039d6:	f001 fbc3 	bl	8005160 <RCCEx_PLL3_Config>
 80039da:	4603      	mov	r3, r0
 80039dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80039e0:	e006      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039e8:	e002      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039ea:	bf00      	nop
 80039ec:	e000      	b.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80039ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d10b      	bne.n	8003a10 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80039f8:	4b8e      	ldr	r3, [pc, #568]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80039fc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003a00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a04:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8003a08:	4a8a      	ldr	r2, [pc, #552]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a0a:	430b      	orrs	r3, r1
 8003a0c:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a0e:	e003      	b.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a14:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003a18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a20:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8003a24:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8003a28:	2300      	movs	r3, #0
 8003a2a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8003a2e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8003a32:	460b      	mov	r3, r1
 8003a34:	4313      	orrs	r3, r2
 8003a36:	d03a      	beq.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003a38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a3e:	2b30      	cmp	r3, #48	@ 0x30
 8003a40:	d01f      	beq.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003a42:	2b30      	cmp	r3, #48	@ 0x30
 8003a44:	d819      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a46:	2b20      	cmp	r3, #32
 8003a48:	d00c      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8003a4a:	2b20      	cmp	r3, #32
 8003a4c:	d815      	bhi.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d019      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003a52:	2b10      	cmp	r3, #16
 8003a54:	d111      	bne.n	8003a7a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a56:	4b77      	ldr	r3, [pc, #476]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a5a:	4a76      	ldr	r2, [pc, #472]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003a60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a62:	e011      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a68:	3308      	adds	r3, #8
 8003a6a:	2102      	movs	r1, #2
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f001 fac5 	bl	8004ffc <RCCEx_PLL2_Config>
 8003a72:	4603      	mov	r3, r0
 8003a74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003a78:	e006      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003a80:	e002      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a82:	bf00      	nop
 8003a84:	e000      	b.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003a86:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003a90:	4b68      	ldr	r3, [pc, #416]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a94:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8003a98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003a9e:	4a65      	ldr	r2, [pc, #404]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa0:	430b      	orrs	r3, r1
 8003aa2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003aa4:	e003      	b.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003aaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003aae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ab6:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8003aba:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003abe:	2300      	movs	r3, #0
 8003ac0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003ac4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4313      	orrs	r3, r2
 8003acc:	d051      	beq.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003ad4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ad8:	d035      	beq.n	8003b46 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003ada:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ade:	d82e      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003ae0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003ae4:	d031      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003ae6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003aea:	d828      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003aec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af0:	d01a      	beq.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003af2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af6:	d822      	bhi.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b00:	d007      	beq.n	8003b12 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003b02:	e01c      	b.n	8003b3e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b04:	4b4b      	ldr	r3, [pc, #300]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b08:	4a4a      	ldr	r2, [pc, #296]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b0a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b0e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b10:	e01c      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b16:	3308      	adds	r3, #8
 8003b18:	2100      	movs	r1, #0
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f001 fa6e 	bl	8004ffc <RCCEx_PLL2_Config>
 8003b20:	4603      	mov	r3, r0
 8003b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b26:	e011      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b2c:	3328      	adds	r3, #40	@ 0x28
 8003b2e:	2100      	movs	r1, #0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f001 fb15 	bl	8005160 <RCCEx_PLL3_Config>
 8003b36:	4603      	mov	r3, r0
 8003b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003b3c:	e006      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003b44:	e002      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b46:	bf00      	nop
 8003b48:	e000      	b.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003b4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d10a      	bne.n	8003b6a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003b54:	4b37      	ldr	r3, [pc, #220]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b58:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8003b5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b62:	4a34      	ldr	r2, [pc, #208]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b64:	430b      	orrs	r3, r1
 8003b66:	6513      	str	r3, [r2, #80]	@ 0x50
 8003b68:	e003      	b.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b6a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003b6e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003b72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003b7e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b82:	2300      	movs	r3, #0
 8003b84:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8003b88:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003b8c:	460b      	mov	r3, r1
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	d056      	beq.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b96:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b9c:	d033      	beq.n	8003c06 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003b9e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ba2:	d82c      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ba4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003ba8:	d02f      	beq.n	8003c0a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003baa:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003bae:	d826      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bb4:	d02b      	beq.n	8003c0e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003bb6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003bba:	d820      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bbc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bc0:	d012      	beq.n	8003be8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003bc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bc6:	d81a      	bhi.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d022      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003bcc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bd0:	d115      	bne.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003bd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bd6:	3308      	adds	r3, #8
 8003bd8:	2101      	movs	r1, #1
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f001 fa0e 	bl	8004ffc <RCCEx_PLL2_Config>
 8003be0:	4603      	mov	r3, r0
 8003be2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003be6:	e015      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bec:	3328      	adds	r3, #40	@ 0x28
 8003bee:	2101      	movs	r1, #1
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 fab5 	bl	8005160 <RCCEx_PLL3_Config>
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003bfc:	e00a      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003bfe:	2301      	movs	r3, #1
 8003c00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c04:	e006      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c06:	bf00      	nop
 8003c08:	e004      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c0a:	bf00      	nop
 8003c0c:	e002      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c0e:	bf00      	nop
 8003c10:	e000      	b.n	8003c14 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003c12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10d      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003c1c:	4b05      	ldr	r3, [pc, #20]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003c20:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8003c24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003c2a:	4a02      	ldr	r2, [pc, #8]	@ (8003c34 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6513      	str	r3, [r2, #80]	@ 0x50
 8003c30:	e006      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003c32:	bf00      	nop
 8003c34:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c3c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8003c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003c56:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	d055      	beq.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c64:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003c68:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c6c:	d033      	beq.n	8003cd6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003c6e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003c72:	d82c      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c78:	d02f      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c7e:	d826      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c80:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c84:	d02b      	beq.n	8003cde <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003c86:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003c8a:	d820      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c8c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c90:	d012      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003c92:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003c96:	d81a      	bhi.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d022      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003c9c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003ca0:	d115      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003ca2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ca6:	3308      	adds	r3, #8
 8003ca8:	2101      	movs	r1, #1
 8003caa:	4618      	mov	r0, r3
 8003cac:	f001 f9a6 	bl	8004ffc <RCCEx_PLL2_Config>
 8003cb0:	4603      	mov	r3, r0
 8003cb2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003cb6:	e015      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003cb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cbc:	3328      	adds	r3, #40	@ 0x28
 8003cbe:	2101      	movs	r1, #1
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	f001 fa4d 	bl	8005160 <RCCEx_PLL3_Config>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003ccc:	e00a      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cd4:	e006      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cd6:	bf00      	nop
 8003cd8:	e004      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cda:	bf00      	nop
 8003cdc:	e002      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ce2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ce4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d10b      	bne.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003cec:	4ba3      	ldr	r3, [pc, #652]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003cf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003cfc:	4a9f      	ldr	r2, [pc, #636]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cfe:	430b      	orrs	r3, r1
 8003d00:	6593      	str	r3, [r2, #88]	@ 0x58
 8003d02:	e003      	b.n	8003d0c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003d0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d14:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8003d18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8003d22:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d26:	460b      	mov	r3, r1
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	d037      	beq.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003d2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d36:	d00e      	beq.n	8003d56 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003d38:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d3c:	d816      	bhi.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d018      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003d42:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d46:	d111      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d48:	4b8c      	ldr	r3, [pc, #560]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d4c:	4a8b      	ldr	r2, [pc, #556]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d52:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d54:	e00f      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5a:	3308      	adds	r3, #8
 8003d5c:	2101      	movs	r1, #1
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f001 f94c 	bl	8004ffc <RCCEx_PLL2_Config>
 8003d64:	4603      	mov	r3, r0
 8003d66:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003d6a:	e004      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d72:	e000      	b.n	8003d76 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003d74:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d10a      	bne.n	8003d94 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003d7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d80:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d82:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003d86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8c:	4a7b      	ldr	r2, [pc, #492]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d8e:	430b      	orrs	r3, r1
 8003d90:	6513      	str	r3, [r2, #80]	@ 0x50
 8003d92:	e003      	b.n	8003d9c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d94:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d98:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003d9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da4:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8003da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dac:	2300      	movs	r3, #0
 8003dae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003db2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8003db6:	460b      	mov	r3, r1
 8003db8:	4313      	orrs	r3, r2
 8003dba:	d039      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003dbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dc0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003dc2:	2b03      	cmp	r3, #3
 8003dc4:	d81c      	bhi.n	8003e00 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003dc6:	a201      	add	r2, pc, #4	@ (adr r2, 8003dcc <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003e09 	.word	0x08003e09
 8003dd0:	08003ddd 	.word	0x08003ddd
 8003dd4:	08003deb 	.word	0x08003deb
 8003dd8:	08003e09 	.word	0x08003e09
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ddc:	4b67      	ldr	r3, [pc, #412]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003de0:	4a66      	ldr	r2, [pc, #408]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003de6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003de8:	e00f      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003dea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dee:	3308      	adds	r3, #8
 8003df0:	2102      	movs	r1, #2
 8003df2:	4618      	mov	r0, r3
 8003df4:	f001 f902 	bl	8004ffc <RCCEx_PLL2_Config>
 8003df8:	4603      	mov	r3, r0
 8003dfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003dfe:	e004      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e06:	e000      	b.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003e08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10a      	bne.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003e12:	4b5a      	ldr	r3, [pc, #360]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003e16:	f023 0103 	bic.w	r1, r3, #3
 8003e1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003e20:	4a56      	ldr	r2, [pc, #344]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e22:	430b      	orrs	r3, r1
 8003e24:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003e26:	e003      	b.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e38:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8003e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e40:	2300      	movs	r3, #0
 8003e42:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e46:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8003e4a:	460b      	mov	r3, r1
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	f000 809f 	beq.w	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e52:	4b4b      	ldr	r3, [pc, #300]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a4a      	ldr	r2, [pc, #296]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003e5e:	f7fd fec9 	bl	8001bf4 <HAL_GetTick>
 8003e62:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e66:	e00b      	b.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e68:	f7fd fec4 	bl	8001bf4 <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	2b64      	cmp	r3, #100	@ 0x64
 8003e76:	d903      	bls.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003e78:	2303      	movs	r3, #3
 8003e7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e7e:	e005      	b.n	8003e8c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003e80:	4b3f      	ldr	r3, [pc, #252]	@ (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d0ed      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003e8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d179      	bne.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003e94:	4b39      	ldr	r3, [pc, #228]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e96:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ea0:	4053      	eors	r3, r2
 8003ea2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d015      	beq.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003eaa:	4b34      	ldr	r3, [pc, #208]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003eb2:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003eb6:	4b31      	ldr	r3, [pc, #196]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	4a30      	ldr	r2, [pc, #192]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ec0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ec2:	4b2e      	ldr	r3, [pc, #184]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ec6:	4a2d      	ldr	r2, [pc, #180]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ec8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ecc:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003ece:	4a2b      	ldr	r2, [pc, #172]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ed0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003ed4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003ed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003eda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003ede:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ee2:	d118      	bne.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee4:	f7fd fe86 	bl	8001bf4 <HAL_GetTick>
 8003ee8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003eec:	e00d      	b.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003eee:	f7fd fe81 	bl	8001bf4 <HAL_GetTick>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8003ef8:	1ad2      	subs	r2, r2, r3
 8003efa:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003efe:	429a      	cmp	r2, r3
 8003f00:	d903      	bls.n	8003f0a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8003f08:	e005      	b.n	8003f16 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f0a:	4b1c      	ldr	r3, [pc, #112]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f0e:	f003 0302 	and.w	r3, r3, #2
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d0eb      	beq.n	8003eee <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003f16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d129      	bne.n	8003f72 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f22:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f2a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f2e:	d10e      	bne.n	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003f30:	4b12      	ldr	r3, [pc, #72]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8003f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f3c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f40:	091a      	lsrs	r2, r3, #4
 8003f42:	4b10      	ldr	r3, [pc, #64]	@ (8003f84 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003f44:	4013      	ands	r3, r2
 8003f46:	4a0d      	ldr	r2, [pc, #52]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f48:	430b      	orrs	r3, r1
 8003f4a:	6113      	str	r3, [r2, #16]
 8003f4c:	e005      	b.n	8003f5a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003f4e:	4b0b      	ldr	r3, [pc, #44]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	4a0a      	ldr	r2, [pc, #40]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f54:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003f58:	6113      	str	r3, [r2, #16]
 8003f5a:	4b08      	ldr	r3, [pc, #32]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f5c:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8003f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f62:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f6a:	4a04      	ldr	r2, [pc, #16]	@ (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003f6c:	430b      	orrs	r3, r1
 8003f6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003f70:	e00e      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f72:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f76:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8003f7a:	e009      	b.n	8003f90 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003f7c:	58024400 	.word	0x58024400
 8003f80:	58024800 	.word	0x58024800
 8003f84:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f88:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f8c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003f90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f98:	f002 0301 	and.w	r3, r2, #1
 8003f9c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003fa6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003faa:	460b      	mov	r3, r1
 8003fac:	4313      	orrs	r3, r2
 8003fae:	f000 8089 	beq.w	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003fb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fb6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003fb8:	2b28      	cmp	r3, #40	@ 0x28
 8003fba:	d86b      	bhi.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003fbc:	a201      	add	r2, pc, #4	@ (adr r2, 8003fc4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003fc2:	bf00      	nop
 8003fc4:	0800409d 	.word	0x0800409d
 8003fc8:	08004095 	.word	0x08004095
 8003fcc:	08004095 	.word	0x08004095
 8003fd0:	08004095 	.word	0x08004095
 8003fd4:	08004095 	.word	0x08004095
 8003fd8:	08004095 	.word	0x08004095
 8003fdc:	08004095 	.word	0x08004095
 8003fe0:	08004095 	.word	0x08004095
 8003fe4:	08004069 	.word	0x08004069
 8003fe8:	08004095 	.word	0x08004095
 8003fec:	08004095 	.word	0x08004095
 8003ff0:	08004095 	.word	0x08004095
 8003ff4:	08004095 	.word	0x08004095
 8003ff8:	08004095 	.word	0x08004095
 8003ffc:	08004095 	.word	0x08004095
 8004000:	08004095 	.word	0x08004095
 8004004:	0800407f 	.word	0x0800407f
 8004008:	08004095 	.word	0x08004095
 800400c:	08004095 	.word	0x08004095
 8004010:	08004095 	.word	0x08004095
 8004014:	08004095 	.word	0x08004095
 8004018:	08004095 	.word	0x08004095
 800401c:	08004095 	.word	0x08004095
 8004020:	08004095 	.word	0x08004095
 8004024:	0800409d 	.word	0x0800409d
 8004028:	08004095 	.word	0x08004095
 800402c:	08004095 	.word	0x08004095
 8004030:	08004095 	.word	0x08004095
 8004034:	08004095 	.word	0x08004095
 8004038:	08004095 	.word	0x08004095
 800403c:	08004095 	.word	0x08004095
 8004040:	08004095 	.word	0x08004095
 8004044:	0800409d 	.word	0x0800409d
 8004048:	08004095 	.word	0x08004095
 800404c:	08004095 	.word	0x08004095
 8004050:	08004095 	.word	0x08004095
 8004054:	08004095 	.word	0x08004095
 8004058:	08004095 	.word	0x08004095
 800405c:	08004095 	.word	0x08004095
 8004060:	08004095 	.word	0x08004095
 8004064:	0800409d 	.word	0x0800409d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	3308      	adds	r3, #8
 800406e:	2101      	movs	r1, #1
 8004070:	4618      	mov	r0, r3
 8004072:	f000 ffc3 	bl	8004ffc <RCCEx_PLL2_Config>
 8004076:	4603      	mov	r3, r0
 8004078:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800407c:	e00f      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800407e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004082:	3328      	adds	r3, #40	@ 0x28
 8004084:	2101      	movs	r1, #1
 8004086:	4618      	mov	r0, r3
 8004088:	f001 f86a 	bl	8005160 <RCCEx_PLL3_Config>
 800408c:	4603      	mov	r3, r0
 800408e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004092:	e004      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004094:	2301      	movs	r3, #1
 8004096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800409a:	e000      	b.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800409c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d10a      	bne.n	80040bc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80040a6:	4bbf      	ldr	r3, [pc, #764]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040aa:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80040ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040b2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80040b4:	4abb      	ldr	r2, [pc, #748]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040b6:	430b      	orrs	r3, r1
 80040b8:	6553      	str	r3, [r2, #84]	@ 0x54
 80040ba:	e003      	b.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80040c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040cc:	f002 0302 	and.w	r3, r2, #2
 80040d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040d4:	2300      	movs	r3, #0
 80040d6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80040da:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80040de:	460b      	mov	r3, r1
 80040e0:	4313      	orrs	r3, r2
 80040e2:	d041      	beq.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80040e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040e8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80040ea:	2b05      	cmp	r3, #5
 80040ec:	d824      	bhi.n	8004138 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80040ee:	a201      	add	r2, pc, #4	@ (adr r2, 80040f4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80040f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f4:	08004141 	.word	0x08004141
 80040f8:	0800410d 	.word	0x0800410d
 80040fc:	08004123 	.word	0x08004123
 8004100:	08004141 	.word	0x08004141
 8004104:	08004141 	.word	0x08004141
 8004108:	08004141 	.word	0x08004141
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800410c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004110:	3308      	adds	r3, #8
 8004112:	2101      	movs	r1, #1
 8004114:	4618      	mov	r0, r3
 8004116:	f000 ff71 	bl	8004ffc <RCCEx_PLL2_Config>
 800411a:	4603      	mov	r3, r0
 800411c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004120:	e00f      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004122:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004126:	3328      	adds	r3, #40	@ 0x28
 8004128:	2101      	movs	r1, #1
 800412a:	4618      	mov	r0, r3
 800412c:	f001 f818 	bl	8005160 <RCCEx_PLL3_Config>
 8004130:	4603      	mov	r3, r0
 8004132:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004136:	e004      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800413e:	e000      	b.n	8004142 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004140:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004142:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800414a:	4b96      	ldr	r3, [pc, #600]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800414c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800414e:	f023 0107 	bic.w	r1, r3, #7
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004156:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004158:	4a92      	ldr	r2, [pc, #584]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800415a:	430b      	orrs	r3, r1
 800415c:	6553      	str	r3, [r2, #84]	@ 0x54
 800415e:	e003      	b.n	8004168 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004160:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004164:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004168:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800416c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004170:	f002 0304 	and.w	r3, r2, #4
 8004174:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004178:	2300      	movs	r3, #0
 800417a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800417e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8004182:	460b      	mov	r3, r1
 8004184:	4313      	orrs	r3, r2
 8004186:	d044      	beq.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004188:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800418c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004190:	2b05      	cmp	r3, #5
 8004192:	d825      	bhi.n	80041e0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8004194:	a201      	add	r2, pc, #4	@ (adr r2, 800419c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8004196:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800419a:	bf00      	nop
 800419c:	080041e9 	.word	0x080041e9
 80041a0:	080041b5 	.word	0x080041b5
 80041a4:	080041cb 	.word	0x080041cb
 80041a8:	080041e9 	.word	0x080041e9
 80041ac:	080041e9 	.word	0x080041e9
 80041b0:	080041e9 	.word	0x080041e9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80041b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041b8:	3308      	adds	r3, #8
 80041ba:	2101      	movs	r1, #1
 80041bc:	4618      	mov	r0, r3
 80041be:	f000 ff1d 	bl	8004ffc <RCCEx_PLL2_Config>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041c8:	e00f      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80041ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041ce:	3328      	adds	r3, #40	@ 0x28
 80041d0:	2101      	movs	r1, #1
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 ffc4 	bl	8005160 <RCCEx_PLL3_Config>
 80041d8:	4603      	mov	r3, r0
 80041da:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80041de:	e004      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80041e6:	e000      	b.n	80041ea <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80041e8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d10b      	bne.n	800420a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80041f2:	4b6c      	ldr	r3, [pc, #432]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80041f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041f6:	f023 0107 	bic.w	r1, r3, #7
 80041fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80041fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004202:	4a68      	ldr	r2, [pc, #416]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004204:	430b      	orrs	r3, r1
 8004206:	6593      	str	r3, [r2, #88]	@ 0x58
 8004208:	e003      	b.n	8004212 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800420a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800420e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004212:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800421a:	f002 0320 	and.w	r3, r2, #32
 800421e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004222:	2300      	movs	r3, #0
 8004224:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004228:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800422c:	460b      	mov	r3, r1
 800422e:	4313      	orrs	r3, r2
 8004230:	d055      	beq.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004232:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004236:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800423a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800423e:	d033      	beq.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004240:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004244:	d82c      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004246:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800424a:	d02f      	beq.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800424c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004250:	d826      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004252:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004256:	d02b      	beq.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004258:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800425c:	d820      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800425e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004262:	d012      	beq.n	800428a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004264:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004268:	d81a      	bhi.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800426a:	2b00      	cmp	r3, #0
 800426c:	d022      	beq.n	80042b4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800426e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004272:	d115      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004274:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004278:	3308      	adds	r3, #8
 800427a:	2100      	movs	r1, #0
 800427c:	4618      	mov	r0, r3
 800427e:	f000 febd 	bl	8004ffc <RCCEx_PLL2_Config>
 8004282:	4603      	mov	r3, r0
 8004284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004288:	e015      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800428a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800428e:	3328      	adds	r3, #40	@ 0x28
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 ff64 	bl	8005160 <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800429e:	e00a      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80042a6:	e006      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042a8:	bf00      	nop
 80042aa:	e004      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042ac:	bf00      	nop
 80042ae:	e002      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042b0:	bf00      	nop
 80042b2:	e000      	b.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80042b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10b      	bne.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80042be:	4b39      	ldr	r3, [pc, #228]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042c2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80042c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042ce:	4a35      	ldr	r2, [pc, #212]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042d0:	430b      	orrs	r3, r1
 80042d2:	6553      	str	r3, [r2, #84]	@ 0x54
 80042d4:	e003      	b.n	80042de <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80042da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80042de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80042ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80042ee:	2300      	movs	r3, #0
 80042f0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80042f4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4313      	orrs	r3, r2
 80042fc:	d058      	beq.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80042fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004302:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8004306:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800430a:	d033      	beq.n	8004374 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800430c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8004310:	d82c      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004312:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004316:	d02f      	beq.n	8004378 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004318:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800431c:	d826      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800431e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004322:	d02b      	beq.n	800437c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004324:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004328:	d820      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800432a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800432e:	d012      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004330:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004334:	d81a      	bhi.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004336:	2b00      	cmp	r3, #0
 8004338:	d022      	beq.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800433a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800433e:	d115      	bne.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004344:	3308      	adds	r3, #8
 8004346:	2100      	movs	r1, #0
 8004348:	4618      	mov	r0, r3
 800434a:	f000 fe57 	bl	8004ffc <RCCEx_PLL2_Config>
 800434e:	4603      	mov	r3, r0
 8004350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004354:	e015      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004356:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800435a:	3328      	adds	r3, #40	@ 0x28
 800435c:	2102      	movs	r1, #2
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fefe 	bl	8005160 <RCCEx_PLL3_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800436a:	e00a      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004372:	e006      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004374:	bf00      	nop
 8004376:	e004      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004378:	bf00      	nop
 800437a:	e002      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800437c:	bf00      	nop
 800437e:	e000      	b.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004380:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004382:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10e      	bne.n	80043a8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800438a:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800438c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800438e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004396:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800439a:	4a02      	ldr	r2, [pc, #8]	@ (80043a4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800439c:	430b      	orrs	r3, r1
 800439e:	6593      	str	r3, [r2, #88]	@ 0x58
 80043a0:	e006      	b.n	80043b0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80043a2:	bf00      	nop
 80043a4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043a8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80043ac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80043b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b8:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80043bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043c0:	2300      	movs	r3, #0
 80043c2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043c6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80043ca:	460b      	mov	r3, r1
 80043cc:	4313      	orrs	r3, r2
 80043ce:	d055      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80043d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80043d4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80043d8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80043dc:	d033      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80043de:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80043e2:	d82c      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043e8:	d02f      	beq.n	800444a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80043ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043ee:	d826      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043f0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043f4:	d02b      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80043f6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80043fa:	d820      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80043fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004400:	d012      	beq.n	8004428 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004402:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004406:	d81a      	bhi.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d022      	beq.n	8004452 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800440c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004410:	d115      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004412:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004416:	3308      	adds	r3, #8
 8004418:	2100      	movs	r1, #0
 800441a:	4618      	mov	r0, r3
 800441c:	f000 fdee 	bl	8004ffc <RCCEx_PLL2_Config>
 8004420:	4603      	mov	r3, r0
 8004422:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004426:	e015      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004428:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800442c:	3328      	adds	r3, #40	@ 0x28
 800442e:	2102      	movs	r1, #2
 8004430:	4618      	mov	r0, r3
 8004432:	f000 fe95 	bl	8005160 <RCCEx_PLL3_Config>
 8004436:	4603      	mov	r3, r0
 8004438:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800443c:	e00a      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004444:	e006      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004446:	bf00      	nop
 8004448:	e004      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800444a:	bf00      	nop
 800444c:	e002      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800444e:	bf00      	nop
 8004450:	e000      	b.n	8004454 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004452:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004454:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004458:	2b00      	cmp	r3, #0
 800445a:	d10b      	bne.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800445c:	4ba1      	ldr	r3, [pc, #644]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800445e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004460:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8004464:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004468:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800446c:	4a9d      	ldr	r2, [pc, #628]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800446e:	430b      	orrs	r3, r1
 8004470:	6593      	str	r3, [r2, #88]	@ 0x58
 8004472:	e003      	b.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004474:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004478:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800447c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f002 0308 	and.w	r3, r2, #8
 8004488:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800448c:	2300      	movs	r3, #0
 800448e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004492:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8004496:	460b      	mov	r3, r1
 8004498:	4313      	orrs	r3, r2
 800449a:	d01e      	beq.n	80044da <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800449c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044a8:	d10c      	bne.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80044aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044ae:	3328      	adds	r3, #40	@ 0x28
 80044b0:	2102      	movs	r1, #2
 80044b2:	4618      	mov	r0, r3
 80044b4:	f000 fe54 	bl	8005160 <RCCEx_PLL3_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d002      	beq.n	80044c4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80044c4:	4b87      	ldr	r3, [pc, #540]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044c8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044d4:	4a83      	ldr	r2, [pc, #524]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80044d6:	430b      	orrs	r3, r1
 80044d8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80044da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e2:	f002 0310 	and.w	r3, r2, #16
 80044e6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80044ea:	2300      	movs	r3, #0
 80044ec:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80044f0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d01e      	beq.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80044fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004506:	d10c      	bne.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800450c:	3328      	adds	r3, #40	@ 0x28
 800450e:	2102      	movs	r1, #2
 8004510:	4618      	mov	r0, r3
 8004512:	f000 fe25 	bl	8005160 <RCCEx_PLL3_Config>
 8004516:	4603      	mov	r3, r0
 8004518:	2b00      	cmp	r3, #0
 800451a:	d002      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800451c:	2301      	movs	r3, #1
 800451e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004522:	4b70      	ldr	r3, [pc, #448]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004526:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800452a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800452e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004532:	4a6c      	ldr	r2, [pc, #432]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004534:	430b      	orrs	r3, r1
 8004536:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004538:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800453c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004540:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8004544:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004548:	2300      	movs	r3, #0
 800454a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800454e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8004552:	460b      	mov	r3, r1
 8004554:	4313      	orrs	r3, r2
 8004556:	d03e      	beq.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004558:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800455c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004560:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004564:	d022      	beq.n	80045ac <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004566:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800456a:	d81b      	bhi.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800456c:	2b00      	cmp	r3, #0
 800456e:	d003      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004574:	d00b      	beq.n	800458e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004576:	e015      	b.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800457c:	3308      	adds	r3, #8
 800457e:	2100      	movs	r1, #0
 8004580:	4618      	mov	r0, r3
 8004582:	f000 fd3b 	bl	8004ffc <RCCEx_PLL2_Config>
 8004586:	4603      	mov	r3, r0
 8004588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800458c:	e00f      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800458e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004592:	3328      	adds	r3, #40	@ 0x28
 8004594:	2102      	movs	r1, #2
 8004596:	4618      	mov	r0, r3
 8004598:	f000 fde2 	bl	8005160 <RCCEx_PLL3_Config>
 800459c:	4603      	mov	r3, r0
 800459e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80045a2:	e004      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80045aa:	e000      	b.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80045ac:	bf00      	nop
    }

    if (ret == HAL_OK)
 80045ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10b      	bne.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045b6:	4b4b      	ldr	r3, [pc, #300]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80045ba:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80045be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045c2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045c6:	4a47      	ldr	r2, [pc, #284]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80045c8:	430b      	orrs	r3, r1
 80045ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80045cc:	e003      	b.n	80045d6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80045d2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045de:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80045e2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80045e4:	2300      	movs	r3, #0
 80045e6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80045e8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80045ec:	460b      	mov	r3, r1
 80045ee:	4313      	orrs	r3, r2
 80045f0:	d03b      	beq.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80045f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80045f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045fa:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80045fe:	d01f      	beq.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004600:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004604:	d818      	bhi.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004606:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800460a:	d003      	beq.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800460c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004610:	d007      	beq.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004612:	e011      	b.n	8004638 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004614:	4b33      	ldr	r3, [pc, #204]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004616:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004618:	4a32      	ldr	r2, [pc, #200]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800461a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800461e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004620:	e00f      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004626:	3328      	adds	r3, #40	@ 0x28
 8004628:	2101      	movs	r1, #1
 800462a:	4618      	mov	r0, r3
 800462c:	f000 fd98 	bl	8005160 <RCCEx_PLL3_Config>
 8004630:	4603      	mov	r3, r0
 8004632:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004636:	e004      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800463e:	e000      	b.n	8004642 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004640:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004642:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004646:	2b00      	cmp	r3, #0
 8004648:	d10b      	bne.n	8004662 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800464a:	4b26      	ldr	r3, [pc, #152]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800464c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800464e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8004652:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004656:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465a:	4a22      	ldr	r2, [pc, #136]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800465c:	430b      	orrs	r3, r1
 800465e:	6553      	str	r3, [r2, #84]	@ 0x54
 8004660:	e003      	b.n	800466a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004662:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004666:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800466a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800466e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004672:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8004676:	673b      	str	r3, [r7, #112]	@ 0x70
 8004678:	2300      	movs	r3, #0
 800467a:	677b      	str	r3, [r7, #116]	@ 0x74
 800467c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d034      	beq.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800468a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800468c:	2b00      	cmp	r3, #0
 800468e:	d003      	beq.n	8004698 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004690:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004694:	d007      	beq.n	80046a6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004696:	e011      	b.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004698:	4b12      	ldr	r3, [pc, #72]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800469a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800469c:	4a11      	ldr	r2, [pc, #68]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800469e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80046a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046a4:	e00e      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80046a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046aa:	3308      	adds	r3, #8
 80046ac:	2102      	movs	r1, #2
 80046ae:	4618      	mov	r0, r3
 80046b0:	f000 fca4 	bl	8004ffc <RCCEx_PLL2_Config>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80046ba:	e003      	b.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80046c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80046c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d10d      	bne.n	80046e8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80046cc:	4b05      	ldr	r3, [pc, #20]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80046d0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80046d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046da:	4a02      	ldr	r2, [pc, #8]	@ (80046e4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80046dc:	430b      	orrs	r3, r1
 80046de:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80046e0:	e006      	b.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 80046e2:	bf00      	nop
 80046e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80046ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80046f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80046f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80046fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80046fe:	2300      	movs	r3, #0
 8004700:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004702:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8004706:	460b      	mov	r3, r1
 8004708:	4313      	orrs	r3, r2
 800470a:	d00c      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800470c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004710:	3328      	adds	r3, #40	@ 0x28
 8004712:	2102      	movs	r1, #2
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fd23 	bl	8005160 <RCCEx_PLL3_Config>
 800471a:	4603      	mov	r3, r0
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004720:	2301      	movs	r3, #1
 8004722:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800472a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800472e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8004732:	663b      	str	r3, [r7, #96]	@ 0x60
 8004734:	2300      	movs	r3, #0
 8004736:	667b      	str	r3, [r7, #100]	@ 0x64
 8004738:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800473c:	460b      	mov	r3, r1
 800473e:	4313      	orrs	r3, r2
 8004740:	d038      	beq.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004742:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004746:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800474a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800474e:	d018      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004750:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004754:	d811      	bhi.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004756:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800475a:	d014      	beq.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800475c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004760:	d80b      	bhi.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004762:	2b00      	cmp	r3, #0
 8004764:	d011      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004766:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800476a:	d106      	bne.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800476c:	4bc3      	ldr	r3, [pc, #780]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800476e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004770:	4ac2      	ldr	r2, [pc, #776]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004772:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004776:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004778:	e008      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8004780:	e004      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004782:	bf00      	nop
 8004784:	e002      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004786:	bf00      	nop
 8004788:	e000      	b.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800478a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800478c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10b      	bne.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004794:	4bb9      	ldr	r3, [pc, #740]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004796:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004798:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800479c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80047a4:	4ab5      	ldr	r2, [pc, #724]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047a6:	430b      	orrs	r3, r1
 80047a8:	6553      	str	r3, [r2, #84]	@ 0x54
 80047aa:	e003      	b.n	80047b4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80047b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80047b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047bc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80047c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80047c2:	2300      	movs	r3, #0
 80047c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047c6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80047ca:	460b      	mov	r3, r1
 80047cc:	4313      	orrs	r3, r2
 80047ce:	d009      	beq.n	80047e4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80047d0:	4baa      	ldr	r3, [pc, #680]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047d4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80047d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80047de:	4aa7      	ldr	r2, [pc, #668]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80047e0:	430b      	orrs	r3, r1
 80047e2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80047e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80047e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047ec:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80047f0:	653b      	str	r3, [r7, #80]	@ 0x50
 80047f2:	2300      	movs	r3, #0
 80047f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80047f6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80047fa:	460b      	mov	r3, r1
 80047fc:	4313      	orrs	r3, r2
 80047fe:	d00a      	beq.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004800:	4b9e      	ldr	r3, [pc, #632]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8004808:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800480c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8004810:	4a9a      	ldr	r2, [pc, #616]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004812:	430b      	orrs	r3, r1
 8004814:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800481a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800481e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8004822:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004824:	2300      	movs	r3, #0
 8004826:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004828:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800482c:	460b      	mov	r3, r1
 800482e:	4313      	orrs	r3, r2
 8004830:	d009      	beq.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004832:	4b92      	ldr	r3, [pc, #584]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004834:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004836:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800483a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800483e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004840:	4a8e      	ldr	r2, [pc, #568]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004842:	430b      	orrs	r3, r1
 8004844:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004846:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800484a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800484e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8004852:	643b      	str	r3, [r7, #64]	@ 0x40
 8004854:	2300      	movs	r3, #0
 8004856:	647b      	str	r3, [r7, #68]	@ 0x44
 8004858:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800485c:	460b      	mov	r3, r1
 800485e:	4313      	orrs	r3, r2
 8004860:	d00e      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004862:	4b86      	ldr	r3, [pc, #536]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	4a85      	ldr	r2, [pc, #532]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004868:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800486c:	6113      	str	r3, [r2, #16]
 800486e:	4b83      	ldr	r3, [pc, #524]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004870:	6919      	ldr	r1, [r3, #16]
 8004872:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004876:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800487a:	4a80      	ldr	r2, [pc, #512]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800487c:	430b      	orrs	r3, r1
 800487e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004880:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004888:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800488c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800488e:	2300      	movs	r3, #0
 8004890:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004892:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8004896:	460b      	mov	r3, r1
 8004898:	4313      	orrs	r3, r2
 800489a:	d009      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800489c:	4b77      	ldr	r3, [pc, #476]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800489e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80048a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048aa:	4a74      	ldr	r2, [pc, #464]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ac:	430b      	orrs	r3, r1
 80048ae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80048b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80048bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80048be:	2300      	movs	r3, #0
 80048c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80048c2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80048c6:	460b      	mov	r3, r1
 80048c8:	4313      	orrs	r3, r2
 80048ca:	d00a      	beq.n	80048e2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80048cc:	4b6b      	ldr	r3, [pc, #428]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80048d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80048dc:	4a67      	ldr	r2, [pc, #412]	@ (8004a7c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80048de:	430b      	orrs	r3, r1
 80048e0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80048e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80048e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ea:	2100      	movs	r1, #0
 80048ec:	62b9      	str	r1, [r7, #40]	@ 0x28
 80048ee:	f003 0301 	and.w	r3, r3, #1
 80048f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048f4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80048f8:	460b      	mov	r3, r1
 80048fa:	4313      	orrs	r3, r2
 80048fc:	d011      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80048fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004902:	3308      	adds	r3, #8
 8004904:	2100      	movs	r1, #0
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fb78 	bl	8004ffc <RCCEx_PLL2_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004912:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004916:	2b00      	cmp	r3, #0
 8004918:	d003      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800491a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800491e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8004922:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800492a:	2100      	movs	r1, #0
 800492c:	6239      	str	r1, [r7, #32]
 800492e:	f003 0302 	and.w	r3, r3, #2
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
 8004934:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004938:	460b      	mov	r3, r1
 800493a:	4313      	orrs	r3, r2
 800493c:	d011      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800493e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004942:	3308      	adds	r3, #8
 8004944:	2101      	movs	r1, #1
 8004946:	4618      	mov	r0, r3
 8004948:	f000 fb58 	bl	8004ffc <RCCEx_PLL2_Config>
 800494c:	4603      	mov	r3, r0
 800494e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004952:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800495a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800495e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	2100      	movs	r1, #0
 800496c:	61b9      	str	r1, [r7, #24]
 800496e:	f003 0304 	and.w	r3, r3, #4
 8004972:	61fb      	str	r3, [r7, #28]
 8004974:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004978:	460b      	mov	r3, r1
 800497a:	4313      	orrs	r3, r2
 800497c:	d011      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800497e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004982:	3308      	adds	r3, #8
 8004984:	2102      	movs	r1, #2
 8004986:	4618      	mov	r0, r3
 8004988:	f000 fb38 	bl	8004ffc <RCCEx_PLL2_Config>
 800498c:	4603      	mov	r3, r0
 800498e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004992:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800499a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800499e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80049a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049aa:	2100      	movs	r1, #0
 80049ac:	6139      	str	r1, [r7, #16]
 80049ae:	f003 0308 	and.w	r3, r3, #8
 80049b2:	617b      	str	r3, [r7, #20]
 80049b4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80049b8:	460b      	mov	r3, r1
 80049ba:	4313      	orrs	r3, r2
 80049bc:	d011      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80049be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049c2:	3328      	adds	r3, #40	@ 0x28
 80049c4:	2100      	movs	r1, #0
 80049c6:	4618      	mov	r0, r3
 80049c8:	f000 fbca 	bl	8005160 <RCCEx_PLL3_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 80049d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d003      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80049da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80049de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80049e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80049e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ea:	2100      	movs	r1, #0
 80049ec:	60b9      	str	r1, [r7, #8]
 80049ee:	f003 0310 	and.w	r3, r3, #16
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80049f8:	460b      	mov	r3, r1
 80049fa:	4313      	orrs	r3, r2
 80049fc:	d011      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80049fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a02:	3328      	adds	r3, #40	@ 0x28
 8004a04:	2101      	movs	r1, #1
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 fbaa 	bl	8005160 <RCCEx_PLL3_Config>
 8004a0c:	4603      	mov	r3, r0
 8004a0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a1a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a1e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	6039      	str	r1, [r7, #0]
 8004a2e:	f003 0320 	and.w	r3, r3, #32
 8004a32:	607b      	str	r3, [r7, #4]
 8004a34:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	d011      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004a42:	3328      	adds	r3, #40	@ 0x28
 8004a44:	2102      	movs	r1, #2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fb8a 	bl	8005160 <RCCEx_PLL3_Config>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004a52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d003      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a5a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004a5e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8004a62:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d101      	bne.n	8004a6e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	e000      	b.n	8004a70 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8004a76:	46bd      	mov	sp, r7
 8004a78:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a7c:	58024400 	.word	0x58024400

08004a80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004a84:	f7fe fd96 	bl	80035b4 <HAL_RCC_GetHCLKFreq>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	4b06      	ldr	r3, [pc, #24]	@ (8004aa4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	091b      	lsrs	r3, r3, #4
 8004a90:	f003 0307 	and.w	r3, r3, #7
 8004a94:	4904      	ldr	r1, [pc, #16]	@ (8004aa8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004a96:	5ccb      	ldrb	r3, [r1, r3]
 8004a98:	f003 031f 	and.w	r3, r3, #31
 8004a9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004aa0:	4618      	mov	r0, r3
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	58024400 	.word	0x58024400
 8004aa8:	0800aad8 	.word	0x0800aad8

08004aac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b089      	sub	sp, #36	@ 0x24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004ab4:	4ba1      	ldr	r3, [pc, #644]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004abe:	4b9f      	ldr	r3, [pc, #636]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac2:	0b1b      	lsrs	r3, r3, #12
 8004ac4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004ac8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004aca:	4b9c      	ldr	r3, [pc, #624]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004acc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ace:	091b      	lsrs	r3, r3, #4
 8004ad0:	f003 0301 	and.w	r3, r3, #1
 8004ad4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004ad6:	4b99      	ldr	r3, [pc, #612]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ada:	08db      	lsrs	r3, r3, #3
 8004adc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004ae0:	693a      	ldr	r2, [r7, #16]
 8004ae2:	fb02 f303 	mul.w	r3, r2, r3
 8004ae6:	ee07 3a90 	vmov	s15, r3
 8004aea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004af2:	697b      	ldr	r3, [r7, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f000 8111 	beq.w	8004d1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	f000 8083 	beq.w	8004c08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b02      	cmp	r3, #2
 8004b06:	f200 80a1 	bhi.w	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004b0a:	69bb      	ldr	r3, [r7, #24]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d003      	beq.n	8004b18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004b10:	69bb      	ldr	r3, [r7, #24]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d056      	beq.n	8004bc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004b16:	e099      	b.n	8004c4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b18:	4b88      	ldr	r3, [pc, #544]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0320 	and.w	r3, r3, #32
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d02d      	beq.n	8004b80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004b24:	4b85      	ldr	r3, [pc, #532]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	08db      	lsrs	r3, r3, #3
 8004b2a:	f003 0303 	and.w	r3, r3, #3
 8004b2e:	4a84      	ldr	r2, [pc, #528]	@ (8004d40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004b30:	fa22 f303 	lsr.w	r3, r2, r3
 8004b34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	ee07 3a90 	vmov	s15, r3
 8004b3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	ee07 3a90 	vmov	s15, r3
 8004b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b4e:	4b7b      	ldr	r3, [pc, #492]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b56:	ee07 3a90 	vmov	s15, r3
 8004b5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004b5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004b62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004b66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004b6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004b6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004b72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004b76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004b7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004b7e:	e087      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004b80:	697b      	ldr	r3, [r7, #20]
 8004b82:	ee07 3a90 	vmov	s15, r3
 8004b86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004d48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004b8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004b92:	4b6a      	ldr	r3, [pc, #424]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b9a:	ee07 3a90 	vmov	s15, r3
 8004b9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ba2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ba6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004baa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bb2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004bbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004bc2:	e065      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	ee07 3a90 	vmov	s15, r3
 8004bca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004bce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004bd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004bd6:	4b59      	ldr	r3, [pc, #356]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004bde:	ee07 3a90 	vmov	s15, r3
 8004be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004be6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004bea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004bf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c06:	e043      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	ee07 3a90 	vmov	s15, r3
 8004c0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004d50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004c16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c1a:	4b48      	ldr	r3, [pc, #288]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c22:	ee07 3a90 	vmov	s15, r3
 8004c26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c4a:	e021      	b.n	8004c90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	ee07 3a90 	vmov	s15, r3
 8004c52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004c56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004d4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004c5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004c5e:	4b37      	ldr	r3, [pc, #220]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c66:	ee07 3a90 	vmov	s15, r3
 8004c6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004c6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004c72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004d44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004c76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004c7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004c7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004c86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004c8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004c90:	4b2a      	ldr	r3, [pc, #168]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004c92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004c94:	0a5b      	lsrs	r3, r3, #9
 8004c96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c9a:	ee07 3a90 	vmov	s15, r3
 8004c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ca2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004ca6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004caa:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004cb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cb6:	ee17 2a90 	vmov	r2, s15
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004cbe:	4b1f      	ldr	r3, [pc, #124]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cc2:	0c1b      	lsrs	r3, r3, #16
 8004cc4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cc8:	ee07 3a90 	vmov	s15, r3
 8004ccc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cd0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004cd4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004cd8:	edd7 6a07 	vldr	s13, [r7, #28]
 8004cdc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ce0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ce4:	ee17 2a90 	vmov	r2, s15
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004cec:	4b13      	ldr	r3, [pc, #76]	@ (8004d3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cf0:	0e1b      	lsrs	r3, r3, #24
 8004cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cf6:	ee07 3a90 	vmov	s15, r3
 8004cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8004d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d12:	ee17 2a90 	vmov	r2, s15
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004d1a:	e008      	b.n	8004d2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]
}
 8004d2e:	bf00      	nop
 8004d30:	3724      	adds	r7, #36	@ 0x24
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	58024400 	.word	0x58024400
 8004d40:	03d09000 	.word	0x03d09000
 8004d44:	46000000 	.word	0x46000000
 8004d48:	4c742400 	.word	0x4c742400
 8004d4c:	4a742400 	.word	0x4a742400
 8004d50:	4bbebc20 	.word	0x4bbebc20

08004d54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b089      	sub	sp, #36	@ 0x24
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d5c:	4ba1      	ldr	r3, [pc, #644]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d60:	f003 0303 	and.w	r3, r3, #3
 8004d64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8004d66:	4b9f      	ldr	r3, [pc, #636]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d6a:	0d1b      	lsrs	r3, r3, #20
 8004d6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004d70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8004d72:	4b9c      	ldr	r3, [pc, #624]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d76:	0a1b      	lsrs	r3, r3, #8
 8004d78:	f003 0301 	and.w	r3, r3, #1
 8004d7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004d7e:	4b99      	ldr	r3, [pc, #612]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004d80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d82:	08db      	lsrs	r3, r3, #3
 8004d84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004d88:	693a      	ldr	r2, [r7, #16]
 8004d8a:	fb02 f303 	mul.w	r3, r2, r3
 8004d8e:	ee07 3a90 	vmov	s15, r3
 8004d92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	f000 8111 	beq.w	8004fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004da2:	69bb      	ldr	r3, [r7, #24]
 8004da4:	2b02      	cmp	r3, #2
 8004da6:	f000 8083 	beq.w	8004eb0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	2b02      	cmp	r3, #2
 8004dae:	f200 80a1 	bhi.w	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004db8:	69bb      	ldr	r3, [r7, #24]
 8004dba:	2b01      	cmp	r3, #1
 8004dbc:	d056      	beq.n	8004e6c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004dbe:	e099      	b.n	8004ef4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004dc0:	4b88      	ldr	r3, [pc, #544]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0320 	and.w	r3, r3, #32
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d02d      	beq.n	8004e28 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004dcc:	4b85      	ldr	r3, [pc, #532]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	08db      	lsrs	r3, r3, #3
 8004dd2:	f003 0303 	and.w	r3, r3, #3
 8004dd6:	4a84      	ldr	r2, [pc, #528]	@ (8004fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8004ddc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	ee07 3a90 	vmov	s15, r3
 8004de4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	ee07 3a90 	vmov	s15, r3
 8004dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004df2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004df6:	4b7b      	ldr	r3, [pc, #492]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004df8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dfe:	ee07 3a90 	vmov	s15, r3
 8004e02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e06:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e0a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e22:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004e26:	e087      	b.n	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	ee07 3a90 	vmov	s15, r3
 8004e2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e32:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8004e36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e3a:	4b6a      	ldr	r3, [pc, #424]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e42:	ee07 3a90 	vmov	s15, r3
 8004e46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e4e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004e5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004e6a:	e065      	b.n	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004e6c:	697b      	ldr	r3, [r7, #20]
 8004e6e:	ee07 3a90 	vmov	s15, r3
 8004e72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e76:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004e7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e7e:	4b59      	ldr	r3, [pc, #356]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e86:	ee07 3a90 	vmov	s15, r3
 8004e8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e92:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004e96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ea2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004ea6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eaa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004eae:	e043      	b.n	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	ee07 3a90 	vmov	s15, r3
 8004eb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004eba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8004ff8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004ebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ec2:	4b48      	ldr	r3, [pc, #288]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eca:	ee07 3a90 	vmov	s15, r3
 8004ece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ed2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004ed6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004eda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ee2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004ee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004eee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ef2:	e021      	b.n	8004f38 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004efe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004f02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f06:	4b37      	ldr	r3, [pc, #220]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f16:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f1a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004fec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004f1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004f2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004f36:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004f38:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f3c:	0a5b      	lsrs	r3, r3, #9
 8004f3e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f42:	ee07 3a90 	vmov	s15, r3
 8004f46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f4a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f4e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f52:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f5a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f5e:	ee17 2a90 	vmov	r2, s15
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004f66:	4b1f      	ldr	r3, [pc, #124]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f6a:	0c1b      	lsrs	r3, r3, #16
 8004f6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f70:	ee07 3a90 	vmov	s15, r3
 8004f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f78:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f7c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f80:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f84:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f8c:	ee17 2a90 	vmov	r2, s15
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004f94:	4b13      	ldr	r3, [pc, #76]	@ (8004fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f98:	0e1b      	lsrs	r3, r3, #24
 8004f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004f9e:	ee07 3a90 	vmov	s15, r3
 8004fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fba:	ee17 2a90 	vmov	r2, s15
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004fc2:	e008      	b.n	8004fd6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	609a      	str	r2, [r3, #8]
}
 8004fd6:	bf00      	nop
 8004fd8:	3724      	adds	r7, #36	@ 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	58024400 	.word	0x58024400
 8004fe8:	03d09000 	.word	0x03d09000
 8004fec:	46000000 	.word	0x46000000
 8004ff0:	4c742400 	.word	0x4c742400
 8004ff4:	4a742400 	.word	0x4a742400
 8004ff8:	4bbebc20 	.word	0x4bbebc20

08004ffc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b084      	sub	sp, #16
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
 8005004:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005006:	2300      	movs	r3, #0
 8005008:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800500a:	4b53      	ldr	r3, [pc, #332]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 800500c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b03      	cmp	r3, #3
 8005014:	d101      	bne.n	800501a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8005016:	2301      	movs	r3, #1
 8005018:	e099      	b.n	800514e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800501a:	4b4f      	ldr	r3, [pc, #316]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	4a4e      	ldr	r2, [pc, #312]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005020:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8005024:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005026:	f7fc fde5 	bl	8001bf4 <HAL_GetTick>
 800502a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800502c:	e008      	b.n	8005040 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800502e:	f7fc fde1 	bl	8001bf4 <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	2b02      	cmp	r3, #2
 800503a:	d901      	bls.n	8005040 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800503c:	2303      	movs	r3, #3
 800503e:	e086      	b.n	800514e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8005040:	4b45      	ldr	r3, [pc, #276]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f0      	bne.n	800502e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800504c:	4b42      	ldr	r3, [pc, #264]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 800504e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005050:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	031b      	lsls	r3, r3, #12
 800505a:	493f      	ldr	r1, [pc, #252]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 800505c:	4313      	orrs	r3, r2
 800505e:	628b      	str	r3, [r1, #40]	@ 0x28
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	3b01      	subs	r3, #1
 8005066:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	689b      	ldr	r3, [r3, #8]
 800506e:	3b01      	subs	r3, #1
 8005070:	025b      	lsls	r3, r3, #9
 8005072:	b29b      	uxth	r3, r3
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	68db      	ldr	r3, [r3, #12]
 800507a:	3b01      	subs	r3, #1
 800507c:	041b      	lsls	r3, r3, #16
 800507e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8005082:	431a      	orrs	r2, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	3b01      	subs	r3, #1
 800508a:	061b      	lsls	r3, r3, #24
 800508c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8005090:	4931      	ldr	r1, [pc, #196]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005092:	4313      	orrs	r3, r2
 8005094:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005096:	4b30      	ldr	r3, [pc, #192]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	695b      	ldr	r3, [r3, #20]
 80050a2:	492d      	ldr	r1, [pc, #180]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050a4:	4313      	orrs	r3, r2
 80050a6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80050a8:	4b2b      	ldr	r3, [pc, #172]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050ac:	f023 0220 	bic.w	r2, r3, #32
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	699b      	ldr	r3, [r3, #24]
 80050b4:	4928      	ldr	r1, [pc, #160]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80050ba:	4b27      	ldr	r3, [pc, #156]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050be:	4a26      	ldr	r2, [pc, #152]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050c0:	f023 0310 	bic.w	r3, r3, #16
 80050c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80050c6:	4b24      	ldr	r3, [pc, #144]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050c8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050ca:	4b24      	ldr	r3, [pc, #144]	@ (800515c <RCCEx_PLL2_Config+0x160>)
 80050cc:	4013      	ands	r3, r2
 80050ce:	687a      	ldr	r2, [r7, #4]
 80050d0:	69d2      	ldr	r2, [r2, #28]
 80050d2:	00d2      	lsls	r2, r2, #3
 80050d4:	4920      	ldr	r1, [pc, #128]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80050da:	4b1f      	ldr	r3, [pc, #124]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050de:	4a1e      	ldr	r2, [pc, #120]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050e0:	f043 0310 	orr.w	r3, r3, #16
 80050e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d106      	bne.n	80050fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80050ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f0:	4a19      	ldr	r2, [pc, #100]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 80050f2:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80050f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80050f8:	e00f      	b.n	800511a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d106      	bne.n	800510e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8005100:	4b15      	ldr	r3, [pc, #84]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005104:	4a14      	ldr	r2, [pc, #80]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005106:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800510a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800510c:	e005      	b.n	800511a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800510e:	4b12      	ldr	r3, [pc, #72]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005110:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005112:	4a11      	ldr	r2, [pc, #68]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005114:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005118:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800511a:	4b0f      	ldr	r3, [pc, #60]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a0e      	ldr	r2, [pc, #56]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005120:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005124:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005126:	f7fc fd65 	bl	8001bf4 <HAL_GetTick>
 800512a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800512c:	e008      	b.n	8005140 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800512e:	f7fc fd61 	bl	8001bf4 <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	2b02      	cmp	r3, #2
 800513a:	d901      	bls.n	8005140 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800513c:	2303      	movs	r3, #3
 800513e:	e006      	b.n	800514e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8005140:	4b05      	ldr	r3, [pc, #20]	@ (8005158 <RCCEx_PLL2_Config+0x15c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0f0      	beq.n	800512e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800514c:	7bfb      	ldrb	r3, [r7, #15]
}
 800514e:	4618      	mov	r0, r3
 8005150:	3710      	adds	r7, #16
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	58024400 	.word	0x58024400
 800515c:	ffff0007 	.word	0xffff0007

08005160 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b084      	sub	sp, #16
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
 8005168:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800516e:	4b53      	ldr	r3, [pc, #332]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005170:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005172:	f003 0303 	and.w	r3, r3, #3
 8005176:	2b03      	cmp	r3, #3
 8005178:	d101      	bne.n	800517e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e099      	b.n	80052b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800517e:	4b4f      	ldr	r3, [pc, #316]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a4e      	ldr	r2, [pc, #312]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005184:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005188:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800518a:	f7fc fd33 	bl	8001bf4 <HAL_GetTick>
 800518e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005190:	e008      	b.n	80051a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005192:	f7fc fd2f 	bl	8001bf4 <HAL_GetTick>
 8005196:	4602      	mov	r2, r0
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	1ad3      	subs	r3, r2, r3
 800519c:	2b02      	cmp	r3, #2
 800519e:	d901      	bls.n	80051a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e086      	b.n	80052b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80051a4:	4b45      	ldr	r3, [pc, #276]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d1f0      	bne.n	8005192 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80051b0:	4b42      	ldr	r3, [pc, #264]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 80051b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	051b      	lsls	r3, r3, #20
 80051be:	493f      	ldr	r1, [pc, #252]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 80051c0:	4313      	orrs	r3, r2
 80051c2:	628b      	str	r3, [r1, #40]	@ 0x28
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	3b01      	subs	r3, #1
 80051ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	689b      	ldr	r3, [r3, #8]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	025b      	lsls	r3, r3, #9
 80051d6:	b29b      	uxth	r3, r3
 80051d8:	431a      	orrs	r2, r3
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	68db      	ldr	r3, [r3, #12]
 80051de:	3b01      	subs	r3, #1
 80051e0:	041b      	lsls	r3, r3, #16
 80051e2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80051e6:	431a      	orrs	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	691b      	ldr	r3, [r3, #16]
 80051ec:	3b01      	subs	r3, #1
 80051ee:	061b      	lsls	r3, r3, #24
 80051f0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80051f4:	4931      	ldr	r1, [pc, #196]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 80051f6:	4313      	orrs	r3, r2
 80051f8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80051fa:	4b30      	ldr	r3, [pc, #192]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 80051fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fe:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	492d      	ldr	r1, [pc, #180]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005208:	4313      	orrs	r3, r2
 800520a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800520c:	4b2b      	ldr	r3, [pc, #172]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 800520e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005210:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	699b      	ldr	r3, [r3, #24]
 8005218:	4928      	ldr	r1, [pc, #160]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 800521a:	4313      	orrs	r3, r2
 800521c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800521e:	4b27      	ldr	r3, [pc, #156]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	4a26      	ldr	r2, [pc, #152]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005224:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005228:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800522a:	4b24      	ldr	r3, [pc, #144]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 800522c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800522e:	4b24      	ldr	r3, [pc, #144]	@ (80052c0 <RCCEx_PLL3_Config+0x160>)
 8005230:	4013      	ands	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	69d2      	ldr	r2, [r2, #28]
 8005236:	00d2      	lsls	r2, r2, #3
 8005238:	4920      	ldr	r1, [pc, #128]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 800523a:	4313      	orrs	r3, r2
 800523c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800523e:	4b1f      	ldr	r3, [pc, #124]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005240:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005242:	4a1e      	ldr	r2, [pc, #120]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005244:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005248:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d106      	bne.n	800525e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8005250:	4b1a      	ldr	r3, [pc, #104]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005254:	4a19      	ldr	r2, [pc, #100]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005256:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800525a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800525c:	e00f      	b.n	800527e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d106      	bne.n	8005272 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005264:	4b15      	ldr	r3, [pc, #84]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005268:	4a14      	ldr	r2, [pc, #80]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 800526a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800526e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8005270:	e005      	b.n	800527e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8005272:	4b12      	ldr	r3, [pc, #72]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005276:	4a11      	ldr	r2, [pc, #68]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005278:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800527c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800527e:	4b0f      	ldr	r3, [pc, #60]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a0e      	ldr	r2, [pc, #56]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 8005284:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005288:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800528a:	f7fc fcb3 	bl	8001bf4 <HAL_GetTick>
 800528e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005290:	e008      	b.n	80052a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8005292:	f7fc fcaf 	bl	8001bf4 <HAL_GetTick>
 8005296:	4602      	mov	r2, r0
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	1ad3      	subs	r3, r2, r3
 800529c:	2b02      	cmp	r3, #2
 800529e:	d901      	bls.n	80052a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80052a0:	2303      	movs	r3, #3
 80052a2:	e006      	b.n	80052b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80052a4:	4b05      	ldr	r3, [pc, #20]	@ (80052bc <RCCEx_PLL3_Config+0x15c>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d0f0      	beq.n	8005292 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80052b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
 80052ba:	bf00      	nop
 80052bc:	58024400 	.word	0x58024400
 80052c0:	ffff0007 	.word	0xffff0007

080052c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b082      	sub	sp, #8
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e042      	b.n	800535c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d106      	bne.n	80052ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052e8:	6878      	ldr	r0, [r7, #4]
 80052ea:	f7fb ff9b 	bl	8001224 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2224      	movs	r2, #36	@ 0x24
 80052f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	681a      	ldr	r2, [r3, #0]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f022 0201 	bic.w	r2, r2, #1
 8005304:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800530a:	2b00      	cmp	r3, #0
 800530c:	d002      	beq.n	8005314 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f000 fe1e 	bl	8005f50 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f8b3 	bl	8005480 <UART_SetConfig>
 800531a:	4603      	mov	r3, r0
 800531c:	2b01      	cmp	r3, #1
 800531e:	d101      	bne.n	8005324 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005320:	2301      	movs	r3, #1
 8005322:	e01b      	b.n	800535c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	685a      	ldr	r2, [r3, #4]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	689a      	ldr	r2, [r3, #8]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f042 0201 	orr.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005354:	6878      	ldr	r0, [r7, #4]
 8005356:	f000 fe9d 	bl	8006094 <UART_CheckIdleState>
 800535a:	4603      	mov	r3, r0
}
 800535c:	4618      	mov	r0, r3
 800535e:	3708      	adds	r7, #8
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b08a      	sub	sp, #40	@ 0x28
 8005368:	af02      	add	r7, sp, #8
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	603b      	str	r3, [r7, #0]
 8005370:	4613      	mov	r3, r2
 8005372:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800537a:	2b20      	cmp	r3, #32
 800537c:	d17b      	bne.n	8005476 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d002      	beq.n	800538a <HAL_UART_Transmit+0x26>
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d101      	bne.n	800538e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	e074      	b.n	8005478 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2221      	movs	r2, #33	@ 0x21
 800539a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800539e:	f7fc fc29 	bl	8001bf4 <HAL_GetTick>
 80053a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	88fa      	ldrh	r2, [r7, #6]
 80053a8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	88fa      	ldrh	r2, [r7, #6]
 80053b0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053bc:	d108      	bne.n	80053d0 <HAL_UART_Transmit+0x6c>
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d104      	bne.n	80053d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80053c6:	2300      	movs	r3, #0
 80053c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80053ca:	68bb      	ldr	r3, [r7, #8]
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	e003      	b.n	80053d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053d4:	2300      	movs	r3, #0
 80053d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80053d8:	e030      	b.n	800543c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	9300      	str	r3, [sp, #0]
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2200      	movs	r2, #0
 80053e2:	2180      	movs	r1, #128	@ 0x80
 80053e4:	68f8      	ldr	r0, [r7, #12]
 80053e6:	f000 feff 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d005      	beq.n	80053fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2220      	movs	r2, #32
 80053f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e03d      	b.n	8005478 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80053fc:	69fb      	ldr	r3, [r7, #28]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005402:	69bb      	ldr	r3, [r7, #24]
 8005404:	881b      	ldrh	r3, [r3, #0]
 8005406:	461a      	mov	r2, r3
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005410:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	3302      	adds	r3, #2
 8005416:	61bb      	str	r3, [r7, #24]
 8005418:	e007      	b.n	800542a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800541a:	69fb      	ldr	r3, [r7, #28]
 800541c:	781a      	ldrb	r2, [r3, #0]
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	3301      	adds	r3, #1
 8005428:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005430:	b29b      	uxth	r3, r3
 8005432:	3b01      	subs	r3, #1
 8005434:	b29a      	uxth	r2, r3
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005442:	b29b      	uxth	r3, r3
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1c8      	bne.n	80053da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	697b      	ldr	r3, [r7, #20]
 800544e:	2200      	movs	r2, #0
 8005450:	2140      	movs	r1, #64	@ 0x40
 8005452:	68f8      	ldr	r0, [r7, #12]
 8005454:	f000 fec8 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d005      	beq.n	800546a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2220      	movs	r2, #32
 8005462:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005466:	2303      	movs	r3, #3
 8005468:	e006      	b.n	8005478 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2220      	movs	r2, #32
 800546e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	e000      	b.n	8005478 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005476:	2302      	movs	r3, #2
  }
}
 8005478:	4618      	mov	r0, r3
 800547a:	3720      	adds	r7, #32
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005480:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005484:	b092      	sub	sp, #72	@ 0x48
 8005486:	af00      	add	r7, sp, #0
 8005488:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800548a:	2300      	movs	r3, #0
 800548c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	697b      	ldr	r3, [r7, #20]
 8005496:	691b      	ldr	r3, [r3, #16]
 8005498:	431a      	orrs	r2, r3
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	695b      	ldr	r3, [r3, #20]
 800549e:	431a      	orrs	r2, r3
 80054a0:	697b      	ldr	r3, [r7, #20]
 80054a2:	69db      	ldr	r3, [r3, #28]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	4bbe      	ldr	r3, [pc, #760]	@ (80057a8 <UART_SetConfig+0x328>)
 80054b0:	4013      	ands	r3, r2
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	6812      	ldr	r2, [r2, #0]
 80054b6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80054b8:	430b      	orrs	r3, r1
 80054ba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80054c6:	697b      	ldr	r3, [r7, #20]
 80054c8:	68da      	ldr	r2, [r3, #12]
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	699b      	ldr	r3, [r3, #24]
 80054d6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4ab3      	ldr	r2, [pc, #716]	@ (80057ac <UART_SetConfig+0x32c>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d004      	beq.n	80054ec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054e8:	4313      	orrs	r3, r2
 80054ea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	689a      	ldr	r2, [r3, #8]
 80054f2:	4baf      	ldr	r3, [pc, #700]	@ (80057b0 <UART_SetConfig+0x330>)
 80054f4:	4013      	ands	r3, r2
 80054f6:	697a      	ldr	r2, [r7, #20]
 80054f8:	6812      	ldr	r2, [r2, #0]
 80054fa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80054fc:	430b      	orrs	r3, r1
 80054fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005500:	697b      	ldr	r3, [r7, #20]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005506:	f023 010f 	bic.w	r1, r3, #15
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	430a      	orrs	r2, r1
 8005514:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4aa6      	ldr	r2, [pc, #664]	@ (80057b4 <UART_SetConfig+0x334>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d177      	bne.n	8005610 <UART_SetConfig+0x190>
 8005520:	4ba5      	ldr	r3, [pc, #660]	@ (80057b8 <UART_SetConfig+0x338>)
 8005522:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005524:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005528:	2b28      	cmp	r3, #40	@ 0x28
 800552a:	d86d      	bhi.n	8005608 <UART_SetConfig+0x188>
 800552c:	a201      	add	r2, pc, #4	@ (adr r2, 8005534 <UART_SetConfig+0xb4>)
 800552e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005532:	bf00      	nop
 8005534:	080055d9 	.word	0x080055d9
 8005538:	08005609 	.word	0x08005609
 800553c:	08005609 	.word	0x08005609
 8005540:	08005609 	.word	0x08005609
 8005544:	08005609 	.word	0x08005609
 8005548:	08005609 	.word	0x08005609
 800554c:	08005609 	.word	0x08005609
 8005550:	08005609 	.word	0x08005609
 8005554:	080055e1 	.word	0x080055e1
 8005558:	08005609 	.word	0x08005609
 800555c:	08005609 	.word	0x08005609
 8005560:	08005609 	.word	0x08005609
 8005564:	08005609 	.word	0x08005609
 8005568:	08005609 	.word	0x08005609
 800556c:	08005609 	.word	0x08005609
 8005570:	08005609 	.word	0x08005609
 8005574:	080055e9 	.word	0x080055e9
 8005578:	08005609 	.word	0x08005609
 800557c:	08005609 	.word	0x08005609
 8005580:	08005609 	.word	0x08005609
 8005584:	08005609 	.word	0x08005609
 8005588:	08005609 	.word	0x08005609
 800558c:	08005609 	.word	0x08005609
 8005590:	08005609 	.word	0x08005609
 8005594:	080055f1 	.word	0x080055f1
 8005598:	08005609 	.word	0x08005609
 800559c:	08005609 	.word	0x08005609
 80055a0:	08005609 	.word	0x08005609
 80055a4:	08005609 	.word	0x08005609
 80055a8:	08005609 	.word	0x08005609
 80055ac:	08005609 	.word	0x08005609
 80055b0:	08005609 	.word	0x08005609
 80055b4:	080055f9 	.word	0x080055f9
 80055b8:	08005609 	.word	0x08005609
 80055bc:	08005609 	.word	0x08005609
 80055c0:	08005609 	.word	0x08005609
 80055c4:	08005609 	.word	0x08005609
 80055c8:	08005609 	.word	0x08005609
 80055cc:	08005609 	.word	0x08005609
 80055d0:	08005609 	.word	0x08005609
 80055d4:	08005601 	.word	0x08005601
 80055d8:	2301      	movs	r3, #1
 80055da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055de:	e222      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80055e0:	2304      	movs	r3, #4
 80055e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055e6:	e21e      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80055e8:	2308      	movs	r3, #8
 80055ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055ee:	e21a      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80055f0:	2310      	movs	r3, #16
 80055f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055f6:	e216      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80055f8:	2320      	movs	r3, #32
 80055fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80055fe:	e212      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005600:	2340      	movs	r3, #64	@ 0x40
 8005602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005606:	e20e      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005608:	2380      	movs	r3, #128	@ 0x80
 800560a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800560e:	e20a      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	4a69      	ldr	r2, [pc, #420]	@ (80057bc <UART_SetConfig+0x33c>)
 8005616:	4293      	cmp	r3, r2
 8005618:	d130      	bne.n	800567c <UART_SetConfig+0x1fc>
 800561a:	4b67      	ldr	r3, [pc, #412]	@ (80057b8 <UART_SetConfig+0x338>)
 800561c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800561e:	f003 0307 	and.w	r3, r3, #7
 8005622:	2b05      	cmp	r3, #5
 8005624:	d826      	bhi.n	8005674 <UART_SetConfig+0x1f4>
 8005626:	a201      	add	r2, pc, #4	@ (adr r2, 800562c <UART_SetConfig+0x1ac>)
 8005628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800562c:	08005645 	.word	0x08005645
 8005630:	0800564d 	.word	0x0800564d
 8005634:	08005655 	.word	0x08005655
 8005638:	0800565d 	.word	0x0800565d
 800563c:	08005665 	.word	0x08005665
 8005640:	0800566d 	.word	0x0800566d
 8005644:	2300      	movs	r3, #0
 8005646:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800564a:	e1ec      	b.n	8005a26 <UART_SetConfig+0x5a6>
 800564c:	2304      	movs	r3, #4
 800564e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005652:	e1e8      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005654:	2308      	movs	r3, #8
 8005656:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800565a:	e1e4      	b.n	8005a26 <UART_SetConfig+0x5a6>
 800565c:	2310      	movs	r3, #16
 800565e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005662:	e1e0      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005664:	2320      	movs	r3, #32
 8005666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800566a:	e1dc      	b.n	8005a26 <UART_SetConfig+0x5a6>
 800566c:	2340      	movs	r3, #64	@ 0x40
 800566e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005672:	e1d8      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005674:	2380      	movs	r3, #128	@ 0x80
 8005676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800567a:	e1d4      	b.n	8005a26 <UART_SetConfig+0x5a6>
 800567c:	697b      	ldr	r3, [r7, #20]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a4f      	ldr	r2, [pc, #316]	@ (80057c0 <UART_SetConfig+0x340>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d130      	bne.n	80056e8 <UART_SetConfig+0x268>
 8005686:	4b4c      	ldr	r3, [pc, #304]	@ (80057b8 <UART_SetConfig+0x338>)
 8005688:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800568a:	f003 0307 	and.w	r3, r3, #7
 800568e:	2b05      	cmp	r3, #5
 8005690:	d826      	bhi.n	80056e0 <UART_SetConfig+0x260>
 8005692:	a201      	add	r2, pc, #4	@ (adr r2, 8005698 <UART_SetConfig+0x218>)
 8005694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005698:	080056b1 	.word	0x080056b1
 800569c:	080056b9 	.word	0x080056b9
 80056a0:	080056c1 	.word	0x080056c1
 80056a4:	080056c9 	.word	0x080056c9
 80056a8:	080056d1 	.word	0x080056d1
 80056ac:	080056d9 	.word	0x080056d9
 80056b0:	2300      	movs	r3, #0
 80056b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056b6:	e1b6      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80056b8:	2304      	movs	r3, #4
 80056ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056be:	e1b2      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80056c0:	2308      	movs	r3, #8
 80056c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056c6:	e1ae      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80056c8:	2310      	movs	r3, #16
 80056ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056ce:	e1aa      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80056d0:	2320      	movs	r3, #32
 80056d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056d6:	e1a6      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80056d8:	2340      	movs	r3, #64	@ 0x40
 80056da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056de:	e1a2      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80056e0:	2380      	movs	r3, #128	@ 0x80
 80056e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80056e6:	e19e      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a35      	ldr	r2, [pc, #212]	@ (80057c4 <UART_SetConfig+0x344>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d130      	bne.n	8005754 <UART_SetConfig+0x2d4>
 80056f2:	4b31      	ldr	r3, [pc, #196]	@ (80057b8 <UART_SetConfig+0x338>)
 80056f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056f6:	f003 0307 	and.w	r3, r3, #7
 80056fa:	2b05      	cmp	r3, #5
 80056fc:	d826      	bhi.n	800574c <UART_SetConfig+0x2cc>
 80056fe:	a201      	add	r2, pc, #4	@ (adr r2, 8005704 <UART_SetConfig+0x284>)
 8005700:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005704:	0800571d 	.word	0x0800571d
 8005708:	08005725 	.word	0x08005725
 800570c:	0800572d 	.word	0x0800572d
 8005710:	08005735 	.word	0x08005735
 8005714:	0800573d 	.word	0x0800573d
 8005718:	08005745 	.word	0x08005745
 800571c:	2300      	movs	r3, #0
 800571e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005722:	e180      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005724:	2304      	movs	r3, #4
 8005726:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800572a:	e17c      	b.n	8005a26 <UART_SetConfig+0x5a6>
 800572c:	2308      	movs	r3, #8
 800572e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005732:	e178      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005734:	2310      	movs	r3, #16
 8005736:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800573a:	e174      	b.n	8005a26 <UART_SetConfig+0x5a6>
 800573c:	2320      	movs	r3, #32
 800573e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005742:	e170      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005744:	2340      	movs	r3, #64	@ 0x40
 8005746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800574a:	e16c      	b.n	8005a26 <UART_SetConfig+0x5a6>
 800574c:	2380      	movs	r3, #128	@ 0x80
 800574e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005752:	e168      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005754:	697b      	ldr	r3, [r7, #20]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4a1b      	ldr	r2, [pc, #108]	@ (80057c8 <UART_SetConfig+0x348>)
 800575a:	4293      	cmp	r3, r2
 800575c:	d142      	bne.n	80057e4 <UART_SetConfig+0x364>
 800575e:	4b16      	ldr	r3, [pc, #88]	@ (80057b8 <UART_SetConfig+0x338>)
 8005760:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005762:	f003 0307 	and.w	r3, r3, #7
 8005766:	2b05      	cmp	r3, #5
 8005768:	d838      	bhi.n	80057dc <UART_SetConfig+0x35c>
 800576a:	a201      	add	r2, pc, #4	@ (adr r2, 8005770 <UART_SetConfig+0x2f0>)
 800576c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005770:	08005789 	.word	0x08005789
 8005774:	08005791 	.word	0x08005791
 8005778:	08005799 	.word	0x08005799
 800577c:	080057a1 	.word	0x080057a1
 8005780:	080057cd 	.word	0x080057cd
 8005784:	080057d5 	.word	0x080057d5
 8005788:	2300      	movs	r3, #0
 800578a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800578e:	e14a      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005790:	2304      	movs	r3, #4
 8005792:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005796:	e146      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005798:	2308      	movs	r3, #8
 800579a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800579e:	e142      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80057a0:	2310      	movs	r3, #16
 80057a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057a6:	e13e      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80057a8:	cfff69f3 	.word	0xcfff69f3
 80057ac:	58000c00 	.word	0x58000c00
 80057b0:	11fff4ff 	.word	0x11fff4ff
 80057b4:	40011000 	.word	0x40011000
 80057b8:	58024400 	.word	0x58024400
 80057bc:	40004400 	.word	0x40004400
 80057c0:	40004800 	.word	0x40004800
 80057c4:	40004c00 	.word	0x40004c00
 80057c8:	40005000 	.word	0x40005000
 80057cc:	2320      	movs	r3, #32
 80057ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057d2:	e128      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80057d4:	2340      	movs	r3, #64	@ 0x40
 80057d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057da:	e124      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80057dc:	2380      	movs	r3, #128	@ 0x80
 80057de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80057e2:	e120      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4acb      	ldr	r2, [pc, #812]	@ (8005b18 <UART_SetConfig+0x698>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d176      	bne.n	80058dc <UART_SetConfig+0x45c>
 80057ee:	4bcb      	ldr	r3, [pc, #812]	@ (8005b1c <UART_SetConfig+0x69c>)
 80057f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80057f6:	2b28      	cmp	r3, #40	@ 0x28
 80057f8:	d86c      	bhi.n	80058d4 <UART_SetConfig+0x454>
 80057fa:	a201      	add	r2, pc, #4	@ (adr r2, 8005800 <UART_SetConfig+0x380>)
 80057fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005800:	080058a5 	.word	0x080058a5
 8005804:	080058d5 	.word	0x080058d5
 8005808:	080058d5 	.word	0x080058d5
 800580c:	080058d5 	.word	0x080058d5
 8005810:	080058d5 	.word	0x080058d5
 8005814:	080058d5 	.word	0x080058d5
 8005818:	080058d5 	.word	0x080058d5
 800581c:	080058d5 	.word	0x080058d5
 8005820:	080058ad 	.word	0x080058ad
 8005824:	080058d5 	.word	0x080058d5
 8005828:	080058d5 	.word	0x080058d5
 800582c:	080058d5 	.word	0x080058d5
 8005830:	080058d5 	.word	0x080058d5
 8005834:	080058d5 	.word	0x080058d5
 8005838:	080058d5 	.word	0x080058d5
 800583c:	080058d5 	.word	0x080058d5
 8005840:	080058b5 	.word	0x080058b5
 8005844:	080058d5 	.word	0x080058d5
 8005848:	080058d5 	.word	0x080058d5
 800584c:	080058d5 	.word	0x080058d5
 8005850:	080058d5 	.word	0x080058d5
 8005854:	080058d5 	.word	0x080058d5
 8005858:	080058d5 	.word	0x080058d5
 800585c:	080058d5 	.word	0x080058d5
 8005860:	080058bd 	.word	0x080058bd
 8005864:	080058d5 	.word	0x080058d5
 8005868:	080058d5 	.word	0x080058d5
 800586c:	080058d5 	.word	0x080058d5
 8005870:	080058d5 	.word	0x080058d5
 8005874:	080058d5 	.word	0x080058d5
 8005878:	080058d5 	.word	0x080058d5
 800587c:	080058d5 	.word	0x080058d5
 8005880:	080058c5 	.word	0x080058c5
 8005884:	080058d5 	.word	0x080058d5
 8005888:	080058d5 	.word	0x080058d5
 800588c:	080058d5 	.word	0x080058d5
 8005890:	080058d5 	.word	0x080058d5
 8005894:	080058d5 	.word	0x080058d5
 8005898:	080058d5 	.word	0x080058d5
 800589c:	080058d5 	.word	0x080058d5
 80058a0:	080058cd 	.word	0x080058cd
 80058a4:	2301      	movs	r3, #1
 80058a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058aa:	e0bc      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80058ac:	2304      	movs	r3, #4
 80058ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058b2:	e0b8      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80058b4:	2308      	movs	r3, #8
 80058b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ba:	e0b4      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80058bc:	2310      	movs	r3, #16
 80058be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058c2:	e0b0      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80058c4:	2320      	movs	r3, #32
 80058c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058ca:	e0ac      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80058cc:	2340      	movs	r3, #64	@ 0x40
 80058ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058d2:	e0a8      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80058d4:	2380      	movs	r3, #128	@ 0x80
 80058d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80058da:	e0a4      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a8f      	ldr	r2, [pc, #572]	@ (8005b20 <UART_SetConfig+0x6a0>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d130      	bne.n	8005948 <UART_SetConfig+0x4c8>
 80058e6:	4b8d      	ldr	r3, [pc, #564]	@ (8005b1c <UART_SetConfig+0x69c>)
 80058e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80058ea:	f003 0307 	and.w	r3, r3, #7
 80058ee:	2b05      	cmp	r3, #5
 80058f0:	d826      	bhi.n	8005940 <UART_SetConfig+0x4c0>
 80058f2:	a201      	add	r2, pc, #4	@ (adr r2, 80058f8 <UART_SetConfig+0x478>)
 80058f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058f8:	08005911 	.word	0x08005911
 80058fc:	08005919 	.word	0x08005919
 8005900:	08005921 	.word	0x08005921
 8005904:	08005929 	.word	0x08005929
 8005908:	08005931 	.word	0x08005931
 800590c:	08005939 	.word	0x08005939
 8005910:	2300      	movs	r3, #0
 8005912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005916:	e086      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005918:	2304      	movs	r3, #4
 800591a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800591e:	e082      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005920:	2308      	movs	r3, #8
 8005922:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005926:	e07e      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005928:	2310      	movs	r3, #16
 800592a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800592e:	e07a      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005930:	2320      	movs	r3, #32
 8005932:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005936:	e076      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005938:	2340      	movs	r3, #64	@ 0x40
 800593a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800593e:	e072      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005940:	2380      	movs	r3, #128	@ 0x80
 8005942:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005946:	e06e      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a75      	ldr	r2, [pc, #468]	@ (8005b24 <UART_SetConfig+0x6a4>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d130      	bne.n	80059b4 <UART_SetConfig+0x534>
 8005952:	4b72      	ldr	r3, [pc, #456]	@ (8005b1c <UART_SetConfig+0x69c>)
 8005954:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b05      	cmp	r3, #5
 800595c:	d826      	bhi.n	80059ac <UART_SetConfig+0x52c>
 800595e:	a201      	add	r2, pc, #4	@ (adr r2, 8005964 <UART_SetConfig+0x4e4>)
 8005960:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005964:	0800597d 	.word	0x0800597d
 8005968:	08005985 	.word	0x08005985
 800596c:	0800598d 	.word	0x0800598d
 8005970:	08005995 	.word	0x08005995
 8005974:	0800599d 	.word	0x0800599d
 8005978:	080059a5 	.word	0x080059a5
 800597c:	2300      	movs	r3, #0
 800597e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005982:	e050      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005984:	2304      	movs	r3, #4
 8005986:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800598a:	e04c      	b.n	8005a26 <UART_SetConfig+0x5a6>
 800598c:	2308      	movs	r3, #8
 800598e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005992:	e048      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005994:	2310      	movs	r3, #16
 8005996:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800599a:	e044      	b.n	8005a26 <UART_SetConfig+0x5a6>
 800599c:	2320      	movs	r3, #32
 800599e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059a2:	e040      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80059a4:	2340      	movs	r3, #64	@ 0x40
 80059a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059aa:	e03c      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80059ac:	2380      	movs	r3, #128	@ 0x80
 80059ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059b2:	e038      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a5b      	ldr	r2, [pc, #364]	@ (8005b28 <UART_SetConfig+0x6a8>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d130      	bne.n	8005a20 <UART_SetConfig+0x5a0>
 80059be:	4b57      	ldr	r3, [pc, #348]	@ (8005b1c <UART_SetConfig+0x69c>)
 80059c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80059c2:	f003 0307 	and.w	r3, r3, #7
 80059c6:	2b05      	cmp	r3, #5
 80059c8:	d826      	bhi.n	8005a18 <UART_SetConfig+0x598>
 80059ca:	a201      	add	r2, pc, #4	@ (adr r2, 80059d0 <UART_SetConfig+0x550>)
 80059cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059d0:	080059e9 	.word	0x080059e9
 80059d4:	080059f1 	.word	0x080059f1
 80059d8:	080059f9 	.word	0x080059f9
 80059dc:	08005a01 	.word	0x08005a01
 80059e0:	08005a09 	.word	0x08005a09
 80059e4:	08005a11 	.word	0x08005a11
 80059e8:	2302      	movs	r3, #2
 80059ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059ee:	e01a      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80059f0:	2304      	movs	r3, #4
 80059f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059f6:	e016      	b.n	8005a26 <UART_SetConfig+0x5a6>
 80059f8:	2308      	movs	r3, #8
 80059fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80059fe:	e012      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005a00:	2310      	movs	r3, #16
 8005a02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a06:	e00e      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005a08:	2320      	movs	r3, #32
 8005a0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a0e:	e00a      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005a10:	2340      	movs	r3, #64	@ 0x40
 8005a12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a16:	e006      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005a18:	2380      	movs	r3, #128	@ 0x80
 8005a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005a1e:	e002      	b.n	8005a26 <UART_SetConfig+0x5a6>
 8005a20:	2380      	movs	r3, #128	@ 0x80
 8005a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	4a3f      	ldr	r2, [pc, #252]	@ (8005b28 <UART_SetConfig+0x6a8>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	f040 80f8 	bne.w	8005c22 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005a32:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005a36:	2b20      	cmp	r3, #32
 8005a38:	dc46      	bgt.n	8005ac8 <UART_SetConfig+0x648>
 8005a3a:	2b02      	cmp	r3, #2
 8005a3c:	f2c0 8082 	blt.w	8005b44 <UART_SetConfig+0x6c4>
 8005a40:	3b02      	subs	r3, #2
 8005a42:	2b1e      	cmp	r3, #30
 8005a44:	d87e      	bhi.n	8005b44 <UART_SetConfig+0x6c4>
 8005a46:	a201      	add	r2, pc, #4	@ (adr r2, 8005a4c <UART_SetConfig+0x5cc>)
 8005a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a4c:	08005acf 	.word	0x08005acf
 8005a50:	08005b45 	.word	0x08005b45
 8005a54:	08005ad7 	.word	0x08005ad7
 8005a58:	08005b45 	.word	0x08005b45
 8005a5c:	08005b45 	.word	0x08005b45
 8005a60:	08005b45 	.word	0x08005b45
 8005a64:	08005ae7 	.word	0x08005ae7
 8005a68:	08005b45 	.word	0x08005b45
 8005a6c:	08005b45 	.word	0x08005b45
 8005a70:	08005b45 	.word	0x08005b45
 8005a74:	08005b45 	.word	0x08005b45
 8005a78:	08005b45 	.word	0x08005b45
 8005a7c:	08005b45 	.word	0x08005b45
 8005a80:	08005b45 	.word	0x08005b45
 8005a84:	08005af7 	.word	0x08005af7
 8005a88:	08005b45 	.word	0x08005b45
 8005a8c:	08005b45 	.word	0x08005b45
 8005a90:	08005b45 	.word	0x08005b45
 8005a94:	08005b45 	.word	0x08005b45
 8005a98:	08005b45 	.word	0x08005b45
 8005a9c:	08005b45 	.word	0x08005b45
 8005aa0:	08005b45 	.word	0x08005b45
 8005aa4:	08005b45 	.word	0x08005b45
 8005aa8:	08005b45 	.word	0x08005b45
 8005aac:	08005b45 	.word	0x08005b45
 8005ab0:	08005b45 	.word	0x08005b45
 8005ab4:	08005b45 	.word	0x08005b45
 8005ab8:	08005b45 	.word	0x08005b45
 8005abc:	08005b45 	.word	0x08005b45
 8005ac0:	08005b45 	.word	0x08005b45
 8005ac4:	08005b37 	.word	0x08005b37
 8005ac8:	2b40      	cmp	r3, #64	@ 0x40
 8005aca:	d037      	beq.n	8005b3c <UART_SetConfig+0x6bc>
 8005acc:	e03a      	b.n	8005b44 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005ace:	f7fe ffd7 	bl	8004a80 <HAL_RCCEx_GetD3PCLK1Freq>
 8005ad2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005ad4:	e03c      	b.n	8005b50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ada:	4618      	mov	r0, r3
 8005adc:	f7fe ffe6 	bl	8004aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ae4:	e034      	b.n	8005b50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ae6:	f107 0318 	add.w	r3, r7, #24
 8005aea:	4618      	mov	r0, r3
 8005aec:	f7ff f932 	bl	8004d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005af4:	e02c      	b.n	8005b50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005af6:	4b09      	ldr	r3, [pc, #36]	@ (8005b1c <UART_SetConfig+0x69c>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005b02:	4b06      	ldr	r3, [pc, #24]	@ (8005b1c <UART_SetConfig+0x69c>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	08db      	lsrs	r3, r3, #3
 8005b08:	f003 0303 	and.w	r3, r3, #3
 8005b0c:	4a07      	ldr	r2, [pc, #28]	@ (8005b2c <UART_SetConfig+0x6ac>)
 8005b0e:	fa22 f303 	lsr.w	r3, r2, r3
 8005b12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005b14:	e01c      	b.n	8005b50 <UART_SetConfig+0x6d0>
 8005b16:	bf00      	nop
 8005b18:	40011400 	.word	0x40011400
 8005b1c:	58024400 	.word	0x58024400
 8005b20:	40007800 	.word	0x40007800
 8005b24:	40007c00 	.word	0x40007c00
 8005b28:	58000c00 	.word	0x58000c00
 8005b2c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005b30:	4b9d      	ldr	r3, [pc, #628]	@ (8005da8 <UART_SetConfig+0x928>)
 8005b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b34:	e00c      	b.n	8005b50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005b36:	4b9d      	ldr	r3, [pc, #628]	@ (8005dac <UART_SetConfig+0x92c>)
 8005b38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b3a:	e009      	b.n	8005b50 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005b3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005b42:	e005      	b.n	8005b50 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8005b44:	2300      	movs	r3, #0
 8005b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005b4e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	f000 81de 	beq.w	8005f14 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b5c:	4a94      	ldr	r2, [pc, #592]	@ (8005db0 <UART_SetConfig+0x930>)
 8005b5e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005b62:	461a      	mov	r2, r3
 8005b64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b66:	fbb3 f3f2 	udiv	r3, r3, r2
 8005b6a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b6c:	697b      	ldr	r3, [r7, #20]
 8005b6e:	685a      	ldr	r2, [r3, #4]
 8005b70:	4613      	mov	r3, r2
 8005b72:	005b      	lsls	r3, r3, #1
 8005b74:	4413      	add	r3, r2
 8005b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d305      	bcc.n	8005b88 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	685b      	ldr	r3, [r3, #4]
 8005b80:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005b82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d903      	bls.n	8005b90 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005b8e:	e1c1      	b.n	8005f14 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005b90:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b92:	2200      	movs	r2, #0
 8005b94:	60bb      	str	r3, [r7, #8]
 8005b96:	60fa      	str	r2, [r7, #12]
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b9c:	4a84      	ldr	r2, [pc, #528]	@ (8005db0 <UART_SetConfig+0x930>)
 8005b9e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	607a      	str	r2, [r7, #4]
 8005baa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005bae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005bb2:	f7fa fda9 	bl	8000708 <__aeabi_uldivmod>
 8005bb6:	4602      	mov	r2, r0
 8005bb8:	460b      	mov	r3, r1
 8005bba:	4610      	mov	r0, r2
 8005bbc:	4619      	mov	r1, r3
 8005bbe:	f04f 0200 	mov.w	r2, #0
 8005bc2:	f04f 0300 	mov.w	r3, #0
 8005bc6:	020b      	lsls	r3, r1, #8
 8005bc8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005bcc:	0202      	lsls	r2, r0, #8
 8005bce:	6979      	ldr	r1, [r7, #20]
 8005bd0:	6849      	ldr	r1, [r1, #4]
 8005bd2:	0849      	lsrs	r1, r1, #1
 8005bd4:	2000      	movs	r0, #0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	4605      	mov	r5, r0
 8005bda:	eb12 0804 	adds.w	r8, r2, r4
 8005bde:	eb43 0905 	adc.w	r9, r3, r5
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	685b      	ldr	r3, [r3, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	469a      	mov	sl, r3
 8005bea:	4693      	mov	fp, r2
 8005bec:	4652      	mov	r2, sl
 8005bee:	465b      	mov	r3, fp
 8005bf0:	4640      	mov	r0, r8
 8005bf2:	4649      	mov	r1, r9
 8005bf4:	f7fa fd88 	bl	8000708 <__aeabi_uldivmod>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005c00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c02:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c06:	d308      	bcc.n	8005c1a <UART_SetConfig+0x79a>
 8005c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c0a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005c0e:	d204      	bcs.n	8005c1a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005c10:	697b      	ldr	r3, [r7, #20]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c16:	60da      	str	r2, [r3, #12]
 8005c18:	e17c      	b.n	8005f14 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005c20:	e178      	b.n	8005f14 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	69db      	ldr	r3, [r3, #28]
 8005c26:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c2a:	f040 80c5 	bne.w	8005db8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005c2e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005c32:	2b20      	cmp	r3, #32
 8005c34:	dc48      	bgt.n	8005cc8 <UART_SetConfig+0x848>
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	db7b      	blt.n	8005d32 <UART_SetConfig+0x8b2>
 8005c3a:	2b20      	cmp	r3, #32
 8005c3c:	d879      	bhi.n	8005d32 <UART_SetConfig+0x8b2>
 8005c3e:	a201      	add	r2, pc, #4	@ (adr r2, 8005c44 <UART_SetConfig+0x7c4>)
 8005c40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c44:	08005ccf 	.word	0x08005ccf
 8005c48:	08005cd7 	.word	0x08005cd7
 8005c4c:	08005d33 	.word	0x08005d33
 8005c50:	08005d33 	.word	0x08005d33
 8005c54:	08005cdf 	.word	0x08005cdf
 8005c58:	08005d33 	.word	0x08005d33
 8005c5c:	08005d33 	.word	0x08005d33
 8005c60:	08005d33 	.word	0x08005d33
 8005c64:	08005cef 	.word	0x08005cef
 8005c68:	08005d33 	.word	0x08005d33
 8005c6c:	08005d33 	.word	0x08005d33
 8005c70:	08005d33 	.word	0x08005d33
 8005c74:	08005d33 	.word	0x08005d33
 8005c78:	08005d33 	.word	0x08005d33
 8005c7c:	08005d33 	.word	0x08005d33
 8005c80:	08005d33 	.word	0x08005d33
 8005c84:	08005cff 	.word	0x08005cff
 8005c88:	08005d33 	.word	0x08005d33
 8005c8c:	08005d33 	.word	0x08005d33
 8005c90:	08005d33 	.word	0x08005d33
 8005c94:	08005d33 	.word	0x08005d33
 8005c98:	08005d33 	.word	0x08005d33
 8005c9c:	08005d33 	.word	0x08005d33
 8005ca0:	08005d33 	.word	0x08005d33
 8005ca4:	08005d33 	.word	0x08005d33
 8005ca8:	08005d33 	.word	0x08005d33
 8005cac:	08005d33 	.word	0x08005d33
 8005cb0:	08005d33 	.word	0x08005d33
 8005cb4:	08005d33 	.word	0x08005d33
 8005cb8:	08005d33 	.word	0x08005d33
 8005cbc:	08005d33 	.word	0x08005d33
 8005cc0:	08005d33 	.word	0x08005d33
 8005cc4:	08005d25 	.word	0x08005d25
 8005cc8:	2b40      	cmp	r3, #64	@ 0x40
 8005cca:	d02e      	beq.n	8005d2a <UART_SetConfig+0x8aa>
 8005ccc:	e031      	b.n	8005d32 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cce:	f7fd fca1 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8005cd2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cd4:	e033      	b.n	8005d3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005cd6:	f7fd fcb3 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 8005cda:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005cdc:	e02f      	b.n	8005d3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005cde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f7fe fee2 	bl	8004aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005ce8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cec:	e027      	b.n	8005d3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005cee:	f107 0318 	add.w	r3, r7, #24
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff f82e 	bl	8004d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005cf8:	69fb      	ldr	r3, [r7, #28]
 8005cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005cfc:	e01f      	b.n	8005d3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005cfe:	4b2d      	ldr	r3, [pc, #180]	@ (8005db4 <UART_SetConfig+0x934>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 0320 	and.w	r3, r3, #32
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d009      	beq.n	8005d1e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005d0a:	4b2a      	ldr	r3, [pc, #168]	@ (8005db4 <UART_SetConfig+0x934>)
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	08db      	lsrs	r3, r3, #3
 8005d10:	f003 0303 	and.w	r3, r3, #3
 8005d14:	4a24      	ldr	r2, [pc, #144]	@ (8005da8 <UART_SetConfig+0x928>)
 8005d16:	fa22 f303 	lsr.w	r3, r2, r3
 8005d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005d1c:	e00f      	b.n	8005d3e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8005d1e:	4b22      	ldr	r3, [pc, #136]	@ (8005da8 <UART_SetConfig+0x928>)
 8005d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d22:	e00c      	b.n	8005d3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005d24:	4b21      	ldr	r3, [pc, #132]	@ (8005dac <UART_SetConfig+0x92c>)
 8005d26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d28:	e009      	b.n	8005d3e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005d2a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005d30:	e005      	b.n	8005d3e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005d3c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	f000 80e7 	beq.w	8005f14 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d4a:	4a19      	ldr	r2, [pc, #100]	@ (8005db0 <UART_SetConfig+0x930>)
 8005d4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005d50:	461a      	mov	r2, r3
 8005d52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d54:	fbb3 f3f2 	udiv	r3, r3, r2
 8005d58:	005a      	lsls	r2, r3, #1
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	085b      	lsrs	r3, r3, #1
 8005d60:	441a      	add	r2, r3
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d6e:	2b0f      	cmp	r3, #15
 8005d70:	d916      	bls.n	8005da0 <UART_SetConfig+0x920>
 8005d72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d78:	d212      	bcs.n	8005da0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f023 030f 	bic.w	r3, r3, #15
 8005d82:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d86:	085b      	lsrs	r3, r3, #1
 8005d88:	b29b      	uxth	r3, r3
 8005d8a:	f003 0307 	and.w	r3, r3, #7
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005d92:	4313      	orrs	r3, r2
 8005d94:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005d9c:	60da      	str	r2, [r3, #12]
 8005d9e:	e0b9      	b.n	8005f14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005da6:	e0b5      	b.n	8005f14 <UART_SetConfig+0xa94>
 8005da8:	03d09000 	.word	0x03d09000
 8005dac:	003d0900 	.word	0x003d0900
 8005db0:	0800aaf4 	.word	0x0800aaf4
 8005db4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005db8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005dbc:	2b20      	cmp	r3, #32
 8005dbe:	dc49      	bgt.n	8005e54 <UART_SetConfig+0x9d4>
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	db7c      	blt.n	8005ebe <UART_SetConfig+0xa3e>
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d87a      	bhi.n	8005ebe <UART_SetConfig+0xa3e>
 8005dc8:	a201      	add	r2, pc, #4	@ (adr r2, 8005dd0 <UART_SetConfig+0x950>)
 8005dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dce:	bf00      	nop
 8005dd0:	08005e5b 	.word	0x08005e5b
 8005dd4:	08005e63 	.word	0x08005e63
 8005dd8:	08005ebf 	.word	0x08005ebf
 8005ddc:	08005ebf 	.word	0x08005ebf
 8005de0:	08005e6b 	.word	0x08005e6b
 8005de4:	08005ebf 	.word	0x08005ebf
 8005de8:	08005ebf 	.word	0x08005ebf
 8005dec:	08005ebf 	.word	0x08005ebf
 8005df0:	08005e7b 	.word	0x08005e7b
 8005df4:	08005ebf 	.word	0x08005ebf
 8005df8:	08005ebf 	.word	0x08005ebf
 8005dfc:	08005ebf 	.word	0x08005ebf
 8005e00:	08005ebf 	.word	0x08005ebf
 8005e04:	08005ebf 	.word	0x08005ebf
 8005e08:	08005ebf 	.word	0x08005ebf
 8005e0c:	08005ebf 	.word	0x08005ebf
 8005e10:	08005e8b 	.word	0x08005e8b
 8005e14:	08005ebf 	.word	0x08005ebf
 8005e18:	08005ebf 	.word	0x08005ebf
 8005e1c:	08005ebf 	.word	0x08005ebf
 8005e20:	08005ebf 	.word	0x08005ebf
 8005e24:	08005ebf 	.word	0x08005ebf
 8005e28:	08005ebf 	.word	0x08005ebf
 8005e2c:	08005ebf 	.word	0x08005ebf
 8005e30:	08005ebf 	.word	0x08005ebf
 8005e34:	08005ebf 	.word	0x08005ebf
 8005e38:	08005ebf 	.word	0x08005ebf
 8005e3c:	08005ebf 	.word	0x08005ebf
 8005e40:	08005ebf 	.word	0x08005ebf
 8005e44:	08005ebf 	.word	0x08005ebf
 8005e48:	08005ebf 	.word	0x08005ebf
 8005e4c:	08005ebf 	.word	0x08005ebf
 8005e50:	08005eb1 	.word	0x08005eb1
 8005e54:	2b40      	cmp	r3, #64	@ 0x40
 8005e56:	d02e      	beq.n	8005eb6 <UART_SetConfig+0xa36>
 8005e58:	e031      	b.n	8005ebe <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005e5a:	f7fd fbdb 	bl	8003614 <HAL_RCC_GetPCLK1Freq>
 8005e5e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e60:	e033      	b.n	8005eca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005e62:	f7fd fbed 	bl	8003640 <HAL_RCC_GetPCLK2Freq>
 8005e66:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005e68:	e02f      	b.n	8005eca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005e6a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7fe fe1c 	bl	8004aac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e78:	e027      	b.n	8005eca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e7a:	f107 0318 	add.w	r3, r7, #24
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7fe ff68 	bl	8004d54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005e84:	69fb      	ldr	r3, [r7, #28]
 8005e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005e88:	e01f      	b.n	8005eca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005e8a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f40 <UART_SetConfig+0xac0>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f003 0320 	and.w	r3, r3, #32
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d009      	beq.n	8005eaa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005e96:	4b2a      	ldr	r3, [pc, #168]	@ (8005f40 <UART_SetConfig+0xac0>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	08db      	lsrs	r3, r3, #3
 8005e9c:	f003 0303 	and.w	r3, r3, #3
 8005ea0:	4a28      	ldr	r2, [pc, #160]	@ (8005f44 <UART_SetConfig+0xac4>)
 8005ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8005ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005ea8:	e00f      	b.n	8005eca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005eaa:	4b26      	ldr	r3, [pc, #152]	@ (8005f44 <UART_SetConfig+0xac4>)
 8005eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eae:	e00c      	b.n	8005eca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005eb0:	4b25      	ldr	r3, [pc, #148]	@ (8005f48 <UART_SetConfig+0xac8>)
 8005eb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005eb4:	e009      	b.n	8005eca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005eb6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005ebc:	e005      	b.n	8005eca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005ec8:	bf00      	nop
    }

    if (pclk != 0U)
 8005eca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d021      	beq.n	8005f14 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005ed0:	697b      	ldr	r3, [r7, #20]
 8005ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed4:	4a1d      	ldr	r2, [pc, #116]	@ (8005f4c <UART_SetConfig+0xacc>)
 8005ed6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005eda:	461a      	mov	r2, r3
 8005edc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ede:	fbb3 f2f2 	udiv	r2, r3, r2
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	085b      	lsrs	r3, r3, #1
 8005ee8:	441a      	add	r2, r3
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	685b      	ldr	r3, [r3, #4]
 8005eee:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005ef4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ef6:	2b0f      	cmp	r3, #15
 8005ef8:	d909      	bls.n	8005f0e <UART_SetConfig+0xa8e>
 8005efa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f00:	d205      	bcs.n	8005f0e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f04:	b29a      	uxth	r2, r3
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	60da      	str	r2, [r3, #12]
 8005f0c:	e002      	b.n	8005f14 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005f14:	697b      	ldr	r3, [r7, #20]
 8005f16:	2201      	movs	r2, #1
 8005f18:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8005f1c:	697b      	ldr	r3, [r7, #20]
 8005f1e:	2201      	movs	r2, #1
 8005f20:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	2200      	movs	r2, #0
 8005f28:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8005f2a:	697b      	ldr	r3, [r7, #20]
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005f30:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3748      	adds	r7, #72	@ 0x48
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005f3e:	bf00      	nop
 8005f40:	58024400 	.word	0x58024400
 8005f44:	03d09000 	.word	0x03d09000
 8005f48:	003d0900 	.word	0x003d0900
 8005f4c:	0800aaf4 	.word	0x0800aaf4

08005f50 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b083      	sub	sp, #12
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f5c:	f003 0308 	and.w	r3, r3, #8
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d00a      	beq.n	8005f7a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	685b      	ldr	r3, [r3, #4]
 8005f6a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	430a      	orrs	r2, r1
 8005f78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f7e:	f003 0301 	and.w	r3, r3, #1
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d00a      	beq.n	8005f9c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	430a      	orrs	r2, r1
 8005f9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fa0:	f003 0302 	and.w	r3, r3, #2
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00a      	beq.n	8005fbe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	430a      	orrs	r2, r1
 8005fbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fc2:	f003 0304 	and.w	r3, r3, #4
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00a      	beq.n	8005fe0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	430a      	orrs	r2, r1
 8005fde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fe4:	f003 0310 	and.w	r3, r3, #16
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d00a      	beq.n	8006002 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	689b      	ldr	r3, [r3, #8]
 8005ff2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	430a      	orrs	r2, r1
 8006000:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006006:	f003 0320 	and.w	r3, r3, #32
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	689b      	ldr	r3, [r3, #8]
 8006014:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	430a      	orrs	r2, r1
 8006022:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01a      	beq.n	8006066 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	430a      	orrs	r2, r1
 8006044:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800604a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800604e:	d10a      	bne.n	8006066 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800606a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00a      	beq.n	8006088 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685b      	ldr	r3, [r3, #4]
 8006078:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	430a      	orrs	r2, r1
 8006086:	605a      	str	r2, [r3, #4]
  }
}
 8006088:	bf00      	nop
 800608a:	370c      	adds	r7, #12
 800608c:	46bd      	mov	sp, r7
 800608e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006092:	4770      	bx	lr

08006094 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b098      	sub	sp, #96	@ 0x60
 8006098:	af02      	add	r7, sp, #8
 800609a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2200      	movs	r2, #0
 80060a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80060a4:	f7fb fda6 	bl	8001bf4 <HAL_GetTick>
 80060a8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0308 	and.w	r3, r3, #8
 80060b4:	2b08      	cmp	r3, #8
 80060b6:	d12f      	bne.n	8006118 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80060b8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80060c0:	2200      	movs	r2, #0
 80060c2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80060c6:	6878      	ldr	r0, [r7, #4]
 80060c8:	f000 f88e 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d022      	beq.n	8006118 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060da:	e853 3f00 	ldrex	r3, [r3]
 80060de:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80060e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	461a      	mov	r2, r3
 80060ee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80060f2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80060f6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80060f8:	e841 2300 	strex	r3, r2, [r1]
 80060fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80060fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006100:	2b00      	cmp	r3, #0
 8006102:	d1e6      	bne.n	80060d2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2220      	movs	r2, #32
 8006108:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2200      	movs	r2, #0
 8006110:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006114:	2303      	movs	r3, #3
 8006116:	e063      	b.n	80061e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	f003 0304 	and.w	r3, r3, #4
 8006122:	2b04      	cmp	r3, #4
 8006124:	d149      	bne.n	80061ba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006126:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800612a:	9300      	str	r3, [sp, #0]
 800612c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800612e:	2200      	movs	r2, #0
 8006130:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 f857 	bl	80061e8 <UART_WaitOnFlagUntilTimeout>
 800613a:	4603      	mov	r3, r0
 800613c:	2b00      	cmp	r3, #0
 800613e:	d03c      	beq.n	80061ba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006148:	e853 3f00 	ldrex	r3, [r3]
 800614c:	623b      	str	r3, [r7, #32]
   return(result);
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006154:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	461a      	mov	r2, r3
 800615c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800615e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006160:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006162:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006164:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006166:	e841 2300 	strex	r3, r2, [r1]
 800616a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800616c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800616e:	2b00      	cmp	r3, #0
 8006170:	d1e6      	bne.n	8006140 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	3308      	adds	r3, #8
 8006178:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	e853 3f00 	ldrex	r3, [r3]
 8006180:	60fb      	str	r3, [r7, #12]
   return(result);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	f023 0301 	bic.w	r3, r3, #1
 8006188:	64bb      	str	r3, [r7, #72]	@ 0x48
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	3308      	adds	r3, #8
 8006190:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006192:	61fa      	str	r2, [r7, #28]
 8006194:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006196:	69b9      	ldr	r1, [r7, #24]
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	e841 2300 	strex	r3, r2, [r1]
 800619e:	617b      	str	r3, [r7, #20]
   return(result);
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d1e5      	bne.n	8006172 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2220      	movs	r2, #32
 80061aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80061b6:	2303      	movs	r3, #3
 80061b8:	e012      	b.n	80061e0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	2220      	movs	r2, #32
 80061be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2220      	movs	r2, #32
 80061c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3758      	adds	r7, #88	@ 0x58
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	60f8      	str	r0, [r7, #12]
 80061f0:	60b9      	str	r1, [r7, #8]
 80061f2:	603b      	str	r3, [r7, #0]
 80061f4:	4613      	mov	r3, r2
 80061f6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80061f8:	e04f      	b.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061fa:	69bb      	ldr	r3, [r7, #24]
 80061fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006200:	d04b      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006202:	f7fb fcf7 	bl	8001bf4 <HAL_GetTick>
 8006206:	4602      	mov	r2, r0
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	1ad3      	subs	r3, r2, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	429a      	cmp	r2, r3
 8006210:	d302      	bcc.n	8006218 <UART_WaitOnFlagUntilTimeout+0x30>
 8006212:	69bb      	ldr	r3, [r7, #24]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d101      	bne.n	800621c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e04e      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f003 0304 	and.w	r3, r3, #4
 8006226:	2b00      	cmp	r3, #0
 8006228:	d037      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	2b80      	cmp	r3, #128	@ 0x80
 800622e:	d034      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	2b40      	cmp	r3, #64	@ 0x40
 8006234:	d031      	beq.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	69db      	ldr	r3, [r3, #28]
 800623c:	f003 0308 	and.w	r3, r3, #8
 8006240:	2b08      	cmp	r3, #8
 8006242:	d110      	bne.n	8006266 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2208      	movs	r2, #8
 800624a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f000 f839 	bl	80062c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	2208      	movs	r2, #8
 8006256:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2200      	movs	r2, #0
 800625e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e029      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69db      	ldr	r3, [r3, #28]
 800626c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006270:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006274:	d111      	bne.n	800629a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800627e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006280:	68f8      	ldr	r0, [r7, #12]
 8006282:	f000 f81f 	bl	80062c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	2220      	movs	r2, #32
 800628a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	2200      	movs	r2, #0
 8006292:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e00f      	b.n	80062ba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	69da      	ldr	r2, [r3, #28]
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	4013      	ands	r3, r2
 80062a4:	68ba      	ldr	r2, [r7, #8]
 80062a6:	429a      	cmp	r2, r3
 80062a8:	bf0c      	ite	eq
 80062aa:	2301      	moveq	r3, #1
 80062ac:	2300      	movne	r3, #0
 80062ae:	b2db      	uxtb	r3, r3
 80062b0:	461a      	mov	r2, r3
 80062b2:	79fb      	ldrb	r3, [r7, #7]
 80062b4:	429a      	cmp	r2, r3
 80062b6:	d0a0      	beq.n	80061fa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80062b8:	2300      	movs	r3, #0
}
 80062ba:	4618      	mov	r0, r3
 80062bc:	3710      	adds	r7, #16
 80062be:	46bd      	mov	sp, r7
 80062c0:	bd80      	pop	{r7, pc}
	...

080062c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062c4:	b480      	push	{r7}
 80062c6:	b095      	sub	sp, #84	@ 0x54
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d4:	e853 3f00 	ldrex	r3, [r3]
 80062d8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80062da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062dc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062e0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	461a      	mov	r2, r3
 80062e8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ea:	643b      	str	r3, [r7, #64]	@ 0x40
 80062ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80062f0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80062f2:	e841 2300 	strex	r3, r2, [r1]
 80062f6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80062f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d1e6      	bne.n	80062cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	3308      	adds	r3, #8
 8006304:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	6a3b      	ldr	r3, [r7, #32]
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	61fb      	str	r3, [r7, #28]
   return(result);
 800630e:	69fa      	ldr	r2, [r7, #28]
 8006310:	4b1e      	ldr	r3, [pc, #120]	@ (800638c <UART_EndRxTransfer+0xc8>)
 8006312:	4013      	ands	r3, r2
 8006314:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	3308      	adds	r3, #8
 800631c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800631e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006320:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006322:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006324:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006326:	e841 2300 	strex	r3, r2, [r1]
 800632a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800632c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800632e:	2b00      	cmp	r3, #0
 8006330:	d1e5      	bne.n	80062fe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006336:	2b01      	cmp	r3, #1
 8006338:	d118      	bne.n	800636c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	e853 3f00 	ldrex	r3, [r3]
 8006346:	60bb      	str	r3, [r7, #8]
   return(result);
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f023 0310 	bic.w	r3, r3, #16
 800634e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	461a      	mov	r2, r3
 8006356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006358:	61bb      	str	r3, [r7, #24]
 800635a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635c:	6979      	ldr	r1, [r7, #20]
 800635e:	69ba      	ldr	r2, [r7, #24]
 8006360:	e841 2300 	strex	r3, r2, [r1]
 8006364:	613b      	str	r3, [r7, #16]
   return(result);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d1e6      	bne.n	800633a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2220      	movs	r2, #32
 8006370:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2200      	movs	r2, #0
 800637e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006380:	bf00      	nop
 8006382:	3754      	adds	r7, #84	@ 0x54
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	effffffe 	.word	0xeffffffe

08006390 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006390:	b480      	push	{r7}
 8006392:	b085      	sub	sp, #20
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d101      	bne.n	80063a6 <HAL_UARTEx_DisableFifoMode+0x16>
 80063a2:	2302      	movs	r3, #2
 80063a4:	e027      	b.n	80063f6 <HAL_UARTEx_DisableFifoMode+0x66>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2201      	movs	r2, #1
 80063aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2224      	movs	r2, #36	@ 0x24
 80063b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	681a      	ldr	r2, [r3, #0]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f022 0201 	bic.w	r2, r2, #1
 80063cc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80063d4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68fa      	ldr	r2, [r7, #12]
 80063e2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2220      	movs	r2, #32
 80063e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	2200      	movs	r2, #0
 80063f0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b084      	sub	sp, #16
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
 800640a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006412:	2b01      	cmp	r3, #1
 8006414:	d101      	bne.n	800641a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006416:	2302      	movs	r3, #2
 8006418:	e02d      	b.n	8006476 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2201      	movs	r2, #1
 800641e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2224      	movs	r2, #36	@ 0x24
 8006426:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0201 	bic.w	r2, r2, #1
 8006440:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	689b      	ldr	r3, [r3, #8]
 8006448:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	683a      	ldr	r2, [r7, #0]
 8006452:	430a      	orrs	r2, r1
 8006454:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 f850 	bl	80064fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	68fa      	ldr	r2, [r7, #12]
 8006462:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2220      	movs	r2, #32
 8006468:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2200      	movs	r2, #0
 8006470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006474:	2300      	movs	r3, #0
}
 8006476:	4618      	mov	r0, r3
 8006478:	3710      	adds	r7, #16
 800647a:	46bd      	mov	sp, r7
 800647c:	bd80      	pop	{r7, pc}

0800647e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800647e:	b580      	push	{r7, lr}
 8006480:	b084      	sub	sp, #16
 8006482:	af00      	add	r7, sp, #0
 8006484:	6078      	str	r0, [r7, #4]
 8006486:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800648e:	2b01      	cmp	r3, #1
 8006490:	d101      	bne.n	8006496 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006492:	2302      	movs	r3, #2
 8006494:	e02d      	b.n	80064f2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2224      	movs	r2, #36	@ 0x24
 80064a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	681a      	ldr	r2, [r3, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f022 0201 	bic.w	r2, r2, #1
 80064bc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	689b      	ldr	r3, [r3, #8]
 80064c4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	430a      	orrs	r2, r1
 80064d0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f000 f812 	bl	80064fc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2220      	movs	r2, #32
 80064e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80064f0:	2300      	movs	r3, #0
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
	...

080064fc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006508:	2b00      	cmp	r3, #0
 800650a:	d108      	bne.n	800651e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2201      	movs	r2, #1
 8006518:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800651c:	e031      	b.n	8006582 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800651e:	2310      	movs	r3, #16
 8006520:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006522:	2310      	movs	r3, #16
 8006524:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	689b      	ldr	r3, [r3, #8]
 800652c:	0e5b      	lsrs	r3, r3, #25
 800652e:	b2db      	uxtb	r3, r3
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	689b      	ldr	r3, [r3, #8]
 800653c:	0f5b      	lsrs	r3, r3, #29
 800653e:	b2db      	uxtb	r3, r3
 8006540:	f003 0307 	and.w	r3, r3, #7
 8006544:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006546:	7bbb      	ldrb	r3, [r7, #14]
 8006548:	7b3a      	ldrb	r2, [r7, #12]
 800654a:	4911      	ldr	r1, [pc, #68]	@ (8006590 <UARTEx_SetNbDataToProcess+0x94>)
 800654c:	5c8a      	ldrb	r2, [r1, r2]
 800654e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006552:	7b3a      	ldrb	r2, [r7, #12]
 8006554:	490f      	ldr	r1, [pc, #60]	@ (8006594 <UARTEx_SetNbDataToProcess+0x98>)
 8006556:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006558:	fb93 f3f2 	sdiv	r3, r3, r2
 800655c:	b29a      	uxth	r2, r3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	7b7a      	ldrb	r2, [r7, #13]
 8006568:	4909      	ldr	r1, [pc, #36]	@ (8006590 <UARTEx_SetNbDataToProcess+0x94>)
 800656a:	5c8a      	ldrb	r2, [r1, r2]
 800656c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006570:	7b7a      	ldrb	r2, [r7, #13]
 8006572:	4908      	ldr	r1, [pc, #32]	@ (8006594 <UARTEx_SetNbDataToProcess+0x98>)
 8006574:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006576:	fb93 f3f2 	sdiv	r3, r3, r2
 800657a:	b29a      	uxth	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006582:	bf00      	nop
 8006584:	3714      	adds	r7, #20
 8006586:	46bd      	mov	sp, r7
 8006588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658c:	4770      	bx	lr
 800658e:	bf00      	nop
 8006590:	0800ab0c 	.word	0x0800ab0c
 8006594:	0800ab14 	.word	0x0800ab14

08006598 <__cvt>:
 8006598:	b5f0      	push	{r4, r5, r6, r7, lr}
 800659a:	ed2d 8b02 	vpush	{d8}
 800659e:	eeb0 8b40 	vmov.f64	d8, d0
 80065a2:	b085      	sub	sp, #20
 80065a4:	4617      	mov	r7, r2
 80065a6:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80065a8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80065aa:	ee18 2a90 	vmov	r2, s17
 80065ae:	f025 0520 	bic.w	r5, r5, #32
 80065b2:	2a00      	cmp	r2, #0
 80065b4:	bfb6      	itet	lt
 80065b6:	222d      	movlt	r2, #45	@ 0x2d
 80065b8:	2200      	movge	r2, #0
 80065ba:	eeb1 8b40 	vneglt.f64	d8, d0
 80065be:	2d46      	cmp	r5, #70	@ 0x46
 80065c0:	460c      	mov	r4, r1
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	d004      	beq.n	80065d0 <__cvt+0x38>
 80065c6:	2d45      	cmp	r5, #69	@ 0x45
 80065c8:	d100      	bne.n	80065cc <__cvt+0x34>
 80065ca:	3401      	adds	r4, #1
 80065cc:	2102      	movs	r1, #2
 80065ce:	e000      	b.n	80065d2 <__cvt+0x3a>
 80065d0:	2103      	movs	r1, #3
 80065d2:	ab03      	add	r3, sp, #12
 80065d4:	9301      	str	r3, [sp, #4]
 80065d6:	ab02      	add	r3, sp, #8
 80065d8:	9300      	str	r3, [sp, #0]
 80065da:	4622      	mov	r2, r4
 80065dc:	4633      	mov	r3, r6
 80065de:	eeb0 0b48 	vmov.f64	d0, d8
 80065e2:	f001 f851 	bl	8007688 <_dtoa_r>
 80065e6:	2d47      	cmp	r5, #71	@ 0x47
 80065e8:	d114      	bne.n	8006614 <__cvt+0x7c>
 80065ea:	07fb      	lsls	r3, r7, #31
 80065ec:	d50a      	bpl.n	8006604 <__cvt+0x6c>
 80065ee:	1902      	adds	r2, r0, r4
 80065f0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80065f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065f8:	bf08      	it	eq
 80065fa:	9203      	streq	r2, [sp, #12]
 80065fc:	2130      	movs	r1, #48	@ 0x30
 80065fe:	9b03      	ldr	r3, [sp, #12]
 8006600:	4293      	cmp	r3, r2
 8006602:	d319      	bcc.n	8006638 <__cvt+0xa0>
 8006604:	9b03      	ldr	r3, [sp, #12]
 8006606:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006608:	1a1b      	subs	r3, r3, r0
 800660a:	6013      	str	r3, [r2, #0]
 800660c:	b005      	add	sp, #20
 800660e:	ecbd 8b02 	vpop	{d8}
 8006612:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006614:	2d46      	cmp	r5, #70	@ 0x46
 8006616:	eb00 0204 	add.w	r2, r0, r4
 800661a:	d1e9      	bne.n	80065f0 <__cvt+0x58>
 800661c:	7803      	ldrb	r3, [r0, #0]
 800661e:	2b30      	cmp	r3, #48	@ 0x30
 8006620:	d107      	bne.n	8006632 <__cvt+0x9a>
 8006622:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006626:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800662a:	bf1c      	itt	ne
 800662c:	f1c4 0401 	rsbne	r4, r4, #1
 8006630:	6034      	strne	r4, [r6, #0]
 8006632:	6833      	ldr	r3, [r6, #0]
 8006634:	441a      	add	r2, r3
 8006636:	e7db      	b.n	80065f0 <__cvt+0x58>
 8006638:	1c5c      	adds	r4, r3, #1
 800663a:	9403      	str	r4, [sp, #12]
 800663c:	7019      	strb	r1, [r3, #0]
 800663e:	e7de      	b.n	80065fe <__cvt+0x66>

08006640 <__exponent>:
 8006640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006642:	2900      	cmp	r1, #0
 8006644:	bfba      	itte	lt
 8006646:	4249      	neglt	r1, r1
 8006648:	232d      	movlt	r3, #45	@ 0x2d
 800664a:	232b      	movge	r3, #43	@ 0x2b
 800664c:	2909      	cmp	r1, #9
 800664e:	7002      	strb	r2, [r0, #0]
 8006650:	7043      	strb	r3, [r0, #1]
 8006652:	dd29      	ble.n	80066a8 <__exponent+0x68>
 8006654:	f10d 0307 	add.w	r3, sp, #7
 8006658:	461d      	mov	r5, r3
 800665a:	270a      	movs	r7, #10
 800665c:	461a      	mov	r2, r3
 800665e:	fbb1 f6f7 	udiv	r6, r1, r7
 8006662:	fb07 1416 	mls	r4, r7, r6, r1
 8006666:	3430      	adds	r4, #48	@ 0x30
 8006668:	f802 4c01 	strb.w	r4, [r2, #-1]
 800666c:	460c      	mov	r4, r1
 800666e:	2c63      	cmp	r4, #99	@ 0x63
 8006670:	f103 33ff 	add.w	r3, r3, #4294967295
 8006674:	4631      	mov	r1, r6
 8006676:	dcf1      	bgt.n	800665c <__exponent+0x1c>
 8006678:	3130      	adds	r1, #48	@ 0x30
 800667a:	1e94      	subs	r4, r2, #2
 800667c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006680:	1c41      	adds	r1, r0, #1
 8006682:	4623      	mov	r3, r4
 8006684:	42ab      	cmp	r3, r5
 8006686:	d30a      	bcc.n	800669e <__exponent+0x5e>
 8006688:	f10d 0309 	add.w	r3, sp, #9
 800668c:	1a9b      	subs	r3, r3, r2
 800668e:	42ac      	cmp	r4, r5
 8006690:	bf88      	it	hi
 8006692:	2300      	movhi	r3, #0
 8006694:	3302      	adds	r3, #2
 8006696:	4403      	add	r3, r0
 8006698:	1a18      	subs	r0, r3, r0
 800669a:	b003      	add	sp, #12
 800669c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800669e:	f813 6b01 	ldrb.w	r6, [r3], #1
 80066a2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80066a6:	e7ed      	b.n	8006684 <__exponent+0x44>
 80066a8:	2330      	movs	r3, #48	@ 0x30
 80066aa:	3130      	adds	r1, #48	@ 0x30
 80066ac:	7083      	strb	r3, [r0, #2]
 80066ae:	70c1      	strb	r1, [r0, #3]
 80066b0:	1d03      	adds	r3, r0, #4
 80066b2:	e7f1      	b.n	8006698 <__exponent+0x58>
 80066b4:	0000      	movs	r0, r0
	...

080066b8 <_printf_float>:
 80066b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066bc:	b08d      	sub	sp, #52	@ 0x34
 80066be:	460c      	mov	r4, r1
 80066c0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80066c4:	4616      	mov	r6, r2
 80066c6:	461f      	mov	r7, r3
 80066c8:	4605      	mov	r5, r0
 80066ca:	f000 fed7 	bl	800747c <_localeconv_r>
 80066ce:	f8d0 b000 	ldr.w	fp, [r0]
 80066d2:	4658      	mov	r0, fp
 80066d4:	f7f9 fe54 	bl	8000380 <strlen>
 80066d8:	2300      	movs	r3, #0
 80066da:	930a      	str	r3, [sp, #40]	@ 0x28
 80066dc:	f8d8 3000 	ldr.w	r3, [r8]
 80066e0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80066e4:	6822      	ldr	r2, [r4, #0]
 80066e6:	9005      	str	r0, [sp, #20]
 80066e8:	3307      	adds	r3, #7
 80066ea:	f023 0307 	bic.w	r3, r3, #7
 80066ee:	f103 0108 	add.w	r1, r3, #8
 80066f2:	f8c8 1000 	str.w	r1, [r8]
 80066f6:	ed93 0b00 	vldr	d0, [r3]
 80066fa:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8006958 <_printf_float+0x2a0>
 80066fe:	eeb0 7bc0 	vabs.f64	d7, d0
 8006702:	eeb4 7b46 	vcmp.f64	d7, d6
 8006706:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800670a:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800670e:	dd24      	ble.n	800675a <_printf_float+0xa2>
 8006710:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8006714:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006718:	d502      	bpl.n	8006720 <_printf_float+0x68>
 800671a:	232d      	movs	r3, #45	@ 0x2d
 800671c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006720:	498f      	ldr	r1, [pc, #572]	@ (8006960 <_printf_float+0x2a8>)
 8006722:	4b90      	ldr	r3, [pc, #576]	@ (8006964 <_printf_float+0x2ac>)
 8006724:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 8006728:	bf94      	ite	ls
 800672a:	4688      	movls	r8, r1
 800672c:	4698      	movhi	r8, r3
 800672e:	f022 0204 	bic.w	r2, r2, #4
 8006732:	2303      	movs	r3, #3
 8006734:	6123      	str	r3, [r4, #16]
 8006736:	6022      	str	r2, [r4, #0]
 8006738:	f04f 0a00 	mov.w	sl, #0
 800673c:	9700      	str	r7, [sp, #0]
 800673e:	4633      	mov	r3, r6
 8006740:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006742:	4621      	mov	r1, r4
 8006744:	4628      	mov	r0, r5
 8006746:	f000 f9d1 	bl	8006aec <_printf_common>
 800674a:	3001      	adds	r0, #1
 800674c:	f040 8089 	bne.w	8006862 <_printf_float+0x1aa>
 8006750:	f04f 30ff 	mov.w	r0, #4294967295
 8006754:	b00d      	add	sp, #52	@ 0x34
 8006756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800675a:	eeb4 0b40 	vcmp.f64	d0, d0
 800675e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006762:	d709      	bvc.n	8006778 <_printf_float+0xc0>
 8006764:	ee10 3a90 	vmov	r3, s1
 8006768:	2b00      	cmp	r3, #0
 800676a:	bfbc      	itt	lt
 800676c:	232d      	movlt	r3, #45	@ 0x2d
 800676e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006772:	497d      	ldr	r1, [pc, #500]	@ (8006968 <_printf_float+0x2b0>)
 8006774:	4b7d      	ldr	r3, [pc, #500]	@ (800696c <_printf_float+0x2b4>)
 8006776:	e7d5      	b.n	8006724 <_printf_float+0x6c>
 8006778:	6863      	ldr	r3, [r4, #4]
 800677a:	1c59      	adds	r1, r3, #1
 800677c:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8006780:	d139      	bne.n	80067f6 <_printf_float+0x13e>
 8006782:	2306      	movs	r3, #6
 8006784:	6063      	str	r3, [r4, #4]
 8006786:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800678a:	2300      	movs	r3, #0
 800678c:	6022      	str	r2, [r4, #0]
 800678e:	9303      	str	r3, [sp, #12]
 8006790:	ab0a      	add	r3, sp, #40	@ 0x28
 8006792:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006796:	ab09      	add	r3, sp, #36	@ 0x24
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	6861      	ldr	r1, [r4, #4]
 800679c:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80067a0:	4628      	mov	r0, r5
 80067a2:	f7ff fef9 	bl	8006598 <__cvt>
 80067a6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80067ac:	4680      	mov	r8, r0
 80067ae:	d129      	bne.n	8006804 <_printf_float+0x14c>
 80067b0:	1cc8      	adds	r0, r1, #3
 80067b2:	db02      	blt.n	80067ba <_printf_float+0x102>
 80067b4:	6863      	ldr	r3, [r4, #4]
 80067b6:	4299      	cmp	r1, r3
 80067b8:	dd41      	ble.n	800683e <_printf_float+0x186>
 80067ba:	f1a9 0902 	sub.w	r9, r9, #2
 80067be:	fa5f f989 	uxtb.w	r9, r9
 80067c2:	3901      	subs	r1, #1
 80067c4:	464a      	mov	r2, r9
 80067c6:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067ca:	9109      	str	r1, [sp, #36]	@ 0x24
 80067cc:	f7ff ff38 	bl	8006640 <__exponent>
 80067d0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067d2:	1813      	adds	r3, r2, r0
 80067d4:	2a01      	cmp	r2, #1
 80067d6:	4682      	mov	sl, r0
 80067d8:	6123      	str	r3, [r4, #16]
 80067da:	dc02      	bgt.n	80067e2 <_printf_float+0x12a>
 80067dc:	6822      	ldr	r2, [r4, #0]
 80067de:	07d2      	lsls	r2, r2, #31
 80067e0:	d501      	bpl.n	80067e6 <_printf_float+0x12e>
 80067e2:	3301      	adds	r3, #1
 80067e4:	6123      	str	r3, [r4, #16]
 80067e6:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d0a6      	beq.n	800673c <_printf_float+0x84>
 80067ee:	232d      	movs	r3, #45	@ 0x2d
 80067f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067f4:	e7a2      	b.n	800673c <_printf_float+0x84>
 80067f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067fa:	d1c4      	bne.n	8006786 <_printf_float+0xce>
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d1c2      	bne.n	8006786 <_printf_float+0xce>
 8006800:	2301      	movs	r3, #1
 8006802:	e7bf      	b.n	8006784 <_printf_float+0xcc>
 8006804:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8006808:	d9db      	bls.n	80067c2 <_printf_float+0x10a>
 800680a:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800680e:	d118      	bne.n	8006842 <_printf_float+0x18a>
 8006810:	2900      	cmp	r1, #0
 8006812:	6863      	ldr	r3, [r4, #4]
 8006814:	dd0b      	ble.n	800682e <_printf_float+0x176>
 8006816:	6121      	str	r1, [r4, #16]
 8006818:	b913      	cbnz	r3, 8006820 <_printf_float+0x168>
 800681a:	6822      	ldr	r2, [r4, #0]
 800681c:	07d0      	lsls	r0, r2, #31
 800681e:	d502      	bpl.n	8006826 <_printf_float+0x16e>
 8006820:	3301      	adds	r3, #1
 8006822:	440b      	add	r3, r1
 8006824:	6123      	str	r3, [r4, #16]
 8006826:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006828:	f04f 0a00 	mov.w	sl, #0
 800682c:	e7db      	b.n	80067e6 <_printf_float+0x12e>
 800682e:	b913      	cbnz	r3, 8006836 <_printf_float+0x17e>
 8006830:	6822      	ldr	r2, [r4, #0]
 8006832:	07d2      	lsls	r2, r2, #31
 8006834:	d501      	bpl.n	800683a <_printf_float+0x182>
 8006836:	3302      	adds	r3, #2
 8006838:	e7f4      	b.n	8006824 <_printf_float+0x16c>
 800683a:	2301      	movs	r3, #1
 800683c:	e7f2      	b.n	8006824 <_printf_float+0x16c>
 800683e:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8006842:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006844:	4299      	cmp	r1, r3
 8006846:	db05      	blt.n	8006854 <_printf_float+0x19c>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	6121      	str	r1, [r4, #16]
 800684c:	07d8      	lsls	r0, r3, #31
 800684e:	d5ea      	bpl.n	8006826 <_printf_float+0x16e>
 8006850:	1c4b      	adds	r3, r1, #1
 8006852:	e7e7      	b.n	8006824 <_printf_float+0x16c>
 8006854:	2900      	cmp	r1, #0
 8006856:	bfd4      	ite	le
 8006858:	f1c1 0202 	rsble	r2, r1, #2
 800685c:	2201      	movgt	r2, #1
 800685e:	4413      	add	r3, r2
 8006860:	e7e0      	b.n	8006824 <_printf_float+0x16c>
 8006862:	6823      	ldr	r3, [r4, #0]
 8006864:	055a      	lsls	r2, r3, #21
 8006866:	d407      	bmi.n	8006878 <_printf_float+0x1c0>
 8006868:	6923      	ldr	r3, [r4, #16]
 800686a:	4642      	mov	r2, r8
 800686c:	4631      	mov	r1, r6
 800686e:	4628      	mov	r0, r5
 8006870:	47b8      	blx	r7
 8006872:	3001      	adds	r0, #1
 8006874:	d12a      	bne.n	80068cc <_printf_float+0x214>
 8006876:	e76b      	b.n	8006750 <_printf_float+0x98>
 8006878:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800687c:	f240 80e0 	bls.w	8006a40 <_printf_float+0x388>
 8006880:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006884:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006888:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688c:	d133      	bne.n	80068f6 <_printf_float+0x23e>
 800688e:	4a38      	ldr	r2, [pc, #224]	@ (8006970 <_printf_float+0x2b8>)
 8006890:	2301      	movs	r3, #1
 8006892:	4631      	mov	r1, r6
 8006894:	4628      	mov	r0, r5
 8006896:	47b8      	blx	r7
 8006898:	3001      	adds	r0, #1
 800689a:	f43f af59 	beq.w	8006750 <_printf_float+0x98>
 800689e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80068a2:	4543      	cmp	r3, r8
 80068a4:	db02      	blt.n	80068ac <_printf_float+0x1f4>
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	07d8      	lsls	r0, r3, #31
 80068aa:	d50f      	bpl.n	80068cc <_printf_float+0x214>
 80068ac:	9b05      	ldr	r3, [sp, #20]
 80068ae:	465a      	mov	r2, fp
 80068b0:	4631      	mov	r1, r6
 80068b2:	4628      	mov	r0, r5
 80068b4:	47b8      	blx	r7
 80068b6:	3001      	adds	r0, #1
 80068b8:	f43f af4a 	beq.w	8006750 <_printf_float+0x98>
 80068bc:	f04f 0900 	mov.w	r9, #0
 80068c0:	f108 38ff 	add.w	r8, r8, #4294967295
 80068c4:	f104 0a1a 	add.w	sl, r4, #26
 80068c8:	45c8      	cmp	r8, r9
 80068ca:	dc09      	bgt.n	80068e0 <_printf_float+0x228>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	079b      	lsls	r3, r3, #30
 80068d0:	f100 8107 	bmi.w	8006ae2 <_printf_float+0x42a>
 80068d4:	68e0      	ldr	r0, [r4, #12]
 80068d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068d8:	4298      	cmp	r0, r3
 80068da:	bfb8      	it	lt
 80068dc:	4618      	movlt	r0, r3
 80068de:	e739      	b.n	8006754 <_printf_float+0x9c>
 80068e0:	2301      	movs	r3, #1
 80068e2:	4652      	mov	r2, sl
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af30 	beq.w	8006750 <_printf_float+0x98>
 80068f0:	f109 0901 	add.w	r9, r9, #1
 80068f4:	e7e8      	b.n	80068c8 <_printf_float+0x210>
 80068f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	dc3b      	bgt.n	8006974 <_printf_float+0x2bc>
 80068fc:	4a1c      	ldr	r2, [pc, #112]	@ (8006970 <_printf_float+0x2b8>)
 80068fe:	2301      	movs	r3, #1
 8006900:	4631      	mov	r1, r6
 8006902:	4628      	mov	r0, r5
 8006904:	47b8      	blx	r7
 8006906:	3001      	adds	r0, #1
 8006908:	f43f af22 	beq.w	8006750 <_printf_float+0x98>
 800690c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006910:	ea59 0303 	orrs.w	r3, r9, r3
 8006914:	d102      	bne.n	800691c <_printf_float+0x264>
 8006916:	6823      	ldr	r3, [r4, #0]
 8006918:	07d9      	lsls	r1, r3, #31
 800691a:	d5d7      	bpl.n	80068cc <_printf_float+0x214>
 800691c:	9b05      	ldr	r3, [sp, #20]
 800691e:	465a      	mov	r2, fp
 8006920:	4631      	mov	r1, r6
 8006922:	4628      	mov	r0, r5
 8006924:	47b8      	blx	r7
 8006926:	3001      	adds	r0, #1
 8006928:	f43f af12 	beq.w	8006750 <_printf_float+0x98>
 800692c:	f04f 0a00 	mov.w	sl, #0
 8006930:	f104 0b1a 	add.w	fp, r4, #26
 8006934:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006936:	425b      	negs	r3, r3
 8006938:	4553      	cmp	r3, sl
 800693a:	dc01      	bgt.n	8006940 <_printf_float+0x288>
 800693c:	464b      	mov	r3, r9
 800693e:	e794      	b.n	800686a <_printf_float+0x1b2>
 8006940:	2301      	movs	r3, #1
 8006942:	465a      	mov	r2, fp
 8006944:	4631      	mov	r1, r6
 8006946:	4628      	mov	r0, r5
 8006948:	47b8      	blx	r7
 800694a:	3001      	adds	r0, #1
 800694c:	f43f af00 	beq.w	8006750 <_printf_float+0x98>
 8006950:	f10a 0a01 	add.w	sl, sl, #1
 8006954:	e7ee      	b.n	8006934 <_printf_float+0x27c>
 8006956:	bf00      	nop
 8006958:	ffffffff 	.word	0xffffffff
 800695c:	7fefffff 	.word	0x7fefffff
 8006960:	0800ab1c 	.word	0x0800ab1c
 8006964:	0800ab20 	.word	0x0800ab20
 8006968:	0800ab24 	.word	0x0800ab24
 800696c:	0800ab28 	.word	0x0800ab28
 8006970:	0800ab2c 	.word	0x0800ab2c
 8006974:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006976:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800697a:	4553      	cmp	r3, sl
 800697c:	bfa8      	it	ge
 800697e:	4653      	movge	r3, sl
 8006980:	2b00      	cmp	r3, #0
 8006982:	4699      	mov	r9, r3
 8006984:	dc37      	bgt.n	80069f6 <_printf_float+0x33e>
 8006986:	2300      	movs	r3, #0
 8006988:	9307      	str	r3, [sp, #28]
 800698a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800698e:	f104 021a 	add.w	r2, r4, #26
 8006992:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006994:	9907      	ldr	r1, [sp, #28]
 8006996:	9306      	str	r3, [sp, #24]
 8006998:	eba3 0309 	sub.w	r3, r3, r9
 800699c:	428b      	cmp	r3, r1
 800699e:	dc31      	bgt.n	8006a04 <_printf_float+0x34c>
 80069a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069a2:	459a      	cmp	sl, r3
 80069a4:	dc3b      	bgt.n	8006a1e <_printf_float+0x366>
 80069a6:	6823      	ldr	r3, [r4, #0]
 80069a8:	07da      	lsls	r2, r3, #31
 80069aa:	d438      	bmi.n	8006a1e <_printf_float+0x366>
 80069ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069ae:	ebaa 0903 	sub.w	r9, sl, r3
 80069b2:	9b06      	ldr	r3, [sp, #24]
 80069b4:	ebaa 0303 	sub.w	r3, sl, r3
 80069b8:	4599      	cmp	r9, r3
 80069ba:	bfa8      	it	ge
 80069bc:	4699      	movge	r9, r3
 80069be:	f1b9 0f00 	cmp.w	r9, #0
 80069c2:	dc34      	bgt.n	8006a2e <_printf_float+0x376>
 80069c4:	f04f 0800 	mov.w	r8, #0
 80069c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069cc:	f104 0b1a 	add.w	fp, r4, #26
 80069d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069d2:	ebaa 0303 	sub.w	r3, sl, r3
 80069d6:	eba3 0309 	sub.w	r3, r3, r9
 80069da:	4543      	cmp	r3, r8
 80069dc:	f77f af76 	ble.w	80068cc <_printf_float+0x214>
 80069e0:	2301      	movs	r3, #1
 80069e2:	465a      	mov	r2, fp
 80069e4:	4631      	mov	r1, r6
 80069e6:	4628      	mov	r0, r5
 80069e8:	47b8      	blx	r7
 80069ea:	3001      	adds	r0, #1
 80069ec:	f43f aeb0 	beq.w	8006750 <_printf_float+0x98>
 80069f0:	f108 0801 	add.w	r8, r8, #1
 80069f4:	e7ec      	b.n	80069d0 <_printf_float+0x318>
 80069f6:	4642      	mov	r2, r8
 80069f8:	4631      	mov	r1, r6
 80069fa:	4628      	mov	r0, r5
 80069fc:	47b8      	blx	r7
 80069fe:	3001      	adds	r0, #1
 8006a00:	d1c1      	bne.n	8006986 <_printf_float+0x2ce>
 8006a02:	e6a5      	b.n	8006750 <_printf_float+0x98>
 8006a04:	2301      	movs	r3, #1
 8006a06:	4631      	mov	r1, r6
 8006a08:	4628      	mov	r0, r5
 8006a0a:	9206      	str	r2, [sp, #24]
 8006a0c:	47b8      	blx	r7
 8006a0e:	3001      	adds	r0, #1
 8006a10:	f43f ae9e 	beq.w	8006750 <_printf_float+0x98>
 8006a14:	9b07      	ldr	r3, [sp, #28]
 8006a16:	9a06      	ldr	r2, [sp, #24]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	9307      	str	r3, [sp, #28]
 8006a1c:	e7b9      	b.n	8006992 <_printf_float+0x2da>
 8006a1e:	9b05      	ldr	r3, [sp, #20]
 8006a20:	465a      	mov	r2, fp
 8006a22:	4631      	mov	r1, r6
 8006a24:	4628      	mov	r0, r5
 8006a26:	47b8      	blx	r7
 8006a28:	3001      	adds	r0, #1
 8006a2a:	d1bf      	bne.n	80069ac <_printf_float+0x2f4>
 8006a2c:	e690      	b.n	8006750 <_printf_float+0x98>
 8006a2e:	9a06      	ldr	r2, [sp, #24]
 8006a30:	464b      	mov	r3, r9
 8006a32:	4442      	add	r2, r8
 8006a34:	4631      	mov	r1, r6
 8006a36:	4628      	mov	r0, r5
 8006a38:	47b8      	blx	r7
 8006a3a:	3001      	adds	r0, #1
 8006a3c:	d1c2      	bne.n	80069c4 <_printf_float+0x30c>
 8006a3e:	e687      	b.n	8006750 <_printf_float+0x98>
 8006a40:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8006a44:	f1b9 0f01 	cmp.w	r9, #1
 8006a48:	dc01      	bgt.n	8006a4e <_printf_float+0x396>
 8006a4a:	07db      	lsls	r3, r3, #31
 8006a4c:	d536      	bpl.n	8006abc <_printf_float+0x404>
 8006a4e:	2301      	movs	r3, #1
 8006a50:	4642      	mov	r2, r8
 8006a52:	4631      	mov	r1, r6
 8006a54:	4628      	mov	r0, r5
 8006a56:	47b8      	blx	r7
 8006a58:	3001      	adds	r0, #1
 8006a5a:	f43f ae79 	beq.w	8006750 <_printf_float+0x98>
 8006a5e:	9b05      	ldr	r3, [sp, #20]
 8006a60:	465a      	mov	r2, fp
 8006a62:	4631      	mov	r1, r6
 8006a64:	4628      	mov	r0, r5
 8006a66:	47b8      	blx	r7
 8006a68:	3001      	adds	r0, #1
 8006a6a:	f43f ae71 	beq.w	8006750 <_printf_float+0x98>
 8006a6e:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8006a72:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a7a:	f109 39ff 	add.w	r9, r9, #4294967295
 8006a7e:	d018      	beq.n	8006ab2 <_printf_float+0x3fa>
 8006a80:	464b      	mov	r3, r9
 8006a82:	f108 0201 	add.w	r2, r8, #1
 8006a86:	4631      	mov	r1, r6
 8006a88:	4628      	mov	r0, r5
 8006a8a:	47b8      	blx	r7
 8006a8c:	3001      	adds	r0, #1
 8006a8e:	d10c      	bne.n	8006aaa <_printf_float+0x3f2>
 8006a90:	e65e      	b.n	8006750 <_printf_float+0x98>
 8006a92:	2301      	movs	r3, #1
 8006a94:	465a      	mov	r2, fp
 8006a96:	4631      	mov	r1, r6
 8006a98:	4628      	mov	r0, r5
 8006a9a:	47b8      	blx	r7
 8006a9c:	3001      	adds	r0, #1
 8006a9e:	f43f ae57 	beq.w	8006750 <_printf_float+0x98>
 8006aa2:	f108 0801 	add.w	r8, r8, #1
 8006aa6:	45c8      	cmp	r8, r9
 8006aa8:	dbf3      	blt.n	8006a92 <_printf_float+0x3da>
 8006aaa:	4653      	mov	r3, sl
 8006aac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006ab0:	e6dc      	b.n	800686c <_printf_float+0x1b4>
 8006ab2:	f04f 0800 	mov.w	r8, #0
 8006ab6:	f104 0b1a 	add.w	fp, r4, #26
 8006aba:	e7f4      	b.n	8006aa6 <_printf_float+0x3ee>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4642      	mov	r2, r8
 8006ac0:	e7e1      	b.n	8006a86 <_printf_float+0x3ce>
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	464a      	mov	r2, r9
 8006ac6:	4631      	mov	r1, r6
 8006ac8:	4628      	mov	r0, r5
 8006aca:	47b8      	blx	r7
 8006acc:	3001      	adds	r0, #1
 8006ace:	f43f ae3f 	beq.w	8006750 <_printf_float+0x98>
 8006ad2:	f108 0801 	add.w	r8, r8, #1
 8006ad6:	68e3      	ldr	r3, [r4, #12]
 8006ad8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006ada:	1a5b      	subs	r3, r3, r1
 8006adc:	4543      	cmp	r3, r8
 8006ade:	dcf0      	bgt.n	8006ac2 <_printf_float+0x40a>
 8006ae0:	e6f8      	b.n	80068d4 <_printf_float+0x21c>
 8006ae2:	f04f 0800 	mov.w	r8, #0
 8006ae6:	f104 0919 	add.w	r9, r4, #25
 8006aea:	e7f4      	b.n	8006ad6 <_printf_float+0x41e>

08006aec <_printf_common>:
 8006aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006af0:	4616      	mov	r6, r2
 8006af2:	4698      	mov	r8, r3
 8006af4:	688a      	ldr	r2, [r1, #8]
 8006af6:	690b      	ldr	r3, [r1, #16]
 8006af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006afc:	4293      	cmp	r3, r2
 8006afe:	bfb8      	it	lt
 8006b00:	4613      	movlt	r3, r2
 8006b02:	6033      	str	r3, [r6, #0]
 8006b04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006b08:	4607      	mov	r7, r0
 8006b0a:	460c      	mov	r4, r1
 8006b0c:	b10a      	cbz	r2, 8006b12 <_printf_common+0x26>
 8006b0e:	3301      	adds	r3, #1
 8006b10:	6033      	str	r3, [r6, #0]
 8006b12:	6823      	ldr	r3, [r4, #0]
 8006b14:	0699      	lsls	r1, r3, #26
 8006b16:	bf42      	ittt	mi
 8006b18:	6833      	ldrmi	r3, [r6, #0]
 8006b1a:	3302      	addmi	r3, #2
 8006b1c:	6033      	strmi	r3, [r6, #0]
 8006b1e:	6825      	ldr	r5, [r4, #0]
 8006b20:	f015 0506 	ands.w	r5, r5, #6
 8006b24:	d106      	bne.n	8006b34 <_printf_common+0x48>
 8006b26:	f104 0a19 	add.w	sl, r4, #25
 8006b2a:	68e3      	ldr	r3, [r4, #12]
 8006b2c:	6832      	ldr	r2, [r6, #0]
 8006b2e:	1a9b      	subs	r3, r3, r2
 8006b30:	42ab      	cmp	r3, r5
 8006b32:	dc26      	bgt.n	8006b82 <_printf_common+0x96>
 8006b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b38:	6822      	ldr	r2, [r4, #0]
 8006b3a:	3b00      	subs	r3, #0
 8006b3c:	bf18      	it	ne
 8006b3e:	2301      	movne	r3, #1
 8006b40:	0692      	lsls	r2, r2, #26
 8006b42:	d42b      	bmi.n	8006b9c <_printf_common+0xb0>
 8006b44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b48:	4641      	mov	r1, r8
 8006b4a:	4638      	mov	r0, r7
 8006b4c:	47c8      	blx	r9
 8006b4e:	3001      	adds	r0, #1
 8006b50:	d01e      	beq.n	8006b90 <_printf_common+0xa4>
 8006b52:	6823      	ldr	r3, [r4, #0]
 8006b54:	6922      	ldr	r2, [r4, #16]
 8006b56:	f003 0306 	and.w	r3, r3, #6
 8006b5a:	2b04      	cmp	r3, #4
 8006b5c:	bf02      	ittt	eq
 8006b5e:	68e5      	ldreq	r5, [r4, #12]
 8006b60:	6833      	ldreq	r3, [r6, #0]
 8006b62:	1aed      	subeq	r5, r5, r3
 8006b64:	68a3      	ldr	r3, [r4, #8]
 8006b66:	bf0c      	ite	eq
 8006b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b6c:	2500      	movne	r5, #0
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	bfc4      	itt	gt
 8006b72:	1a9b      	subgt	r3, r3, r2
 8006b74:	18ed      	addgt	r5, r5, r3
 8006b76:	2600      	movs	r6, #0
 8006b78:	341a      	adds	r4, #26
 8006b7a:	42b5      	cmp	r5, r6
 8006b7c:	d11a      	bne.n	8006bb4 <_printf_common+0xc8>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	e008      	b.n	8006b94 <_printf_common+0xa8>
 8006b82:	2301      	movs	r3, #1
 8006b84:	4652      	mov	r2, sl
 8006b86:	4641      	mov	r1, r8
 8006b88:	4638      	mov	r0, r7
 8006b8a:	47c8      	blx	r9
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d103      	bne.n	8006b98 <_printf_common+0xac>
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b98:	3501      	adds	r5, #1
 8006b9a:	e7c6      	b.n	8006b2a <_printf_common+0x3e>
 8006b9c:	18e1      	adds	r1, r4, r3
 8006b9e:	1c5a      	adds	r2, r3, #1
 8006ba0:	2030      	movs	r0, #48	@ 0x30
 8006ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006ba6:	4422      	add	r2, r4
 8006ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006bac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006bb0:	3302      	adds	r3, #2
 8006bb2:	e7c7      	b.n	8006b44 <_printf_common+0x58>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	4641      	mov	r1, r8
 8006bba:	4638      	mov	r0, r7
 8006bbc:	47c8      	blx	r9
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d0e6      	beq.n	8006b90 <_printf_common+0xa4>
 8006bc2:	3601      	adds	r6, #1
 8006bc4:	e7d9      	b.n	8006b7a <_printf_common+0x8e>
	...

08006bc8 <_printf_i>:
 8006bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	7e0f      	ldrb	r7, [r1, #24]
 8006bce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bd0:	2f78      	cmp	r7, #120	@ 0x78
 8006bd2:	4691      	mov	r9, r2
 8006bd4:	4680      	mov	r8, r0
 8006bd6:	460c      	mov	r4, r1
 8006bd8:	469a      	mov	sl, r3
 8006bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006bde:	d807      	bhi.n	8006bf0 <_printf_i+0x28>
 8006be0:	2f62      	cmp	r7, #98	@ 0x62
 8006be2:	d80a      	bhi.n	8006bfa <_printf_i+0x32>
 8006be4:	2f00      	cmp	r7, #0
 8006be6:	f000 80d2 	beq.w	8006d8e <_printf_i+0x1c6>
 8006bea:	2f58      	cmp	r7, #88	@ 0x58
 8006bec:	f000 80b9 	beq.w	8006d62 <_printf_i+0x19a>
 8006bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bf8:	e03a      	b.n	8006c70 <_printf_i+0xa8>
 8006bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bfe:	2b15      	cmp	r3, #21
 8006c00:	d8f6      	bhi.n	8006bf0 <_printf_i+0x28>
 8006c02:	a101      	add	r1, pc, #4	@ (adr r1, 8006c08 <_printf_i+0x40>)
 8006c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c08:	08006c61 	.word	0x08006c61
 8006c0c:	08006c75 	.word	0x08006c75
 8006c10:	08006bf1 	.word	0x08006bf1
 8006c14:	08006bf1 	.word	0x08006bf1
 8006c18:	08006bf1 	.word	0x08006bf1
 8006c1c:	08006bf1 	.word	0x08006bf1
 8006c20:	08006c75 	.word	0x08006c75
 8006c24:	08006bf1 	.word	0x08006bf1
 8006c28:	08006bf1 	.word	0x08006bf1
 8006c2c:	08006bf1 	.word	0x08006bf1
 8006c30:	08006bf1 	.word	0x08006bf1
 8006c34:	08006d75 	.word	0x08006d75
 8006c38:	08006c9f 	.word	0x08006c9f
 8006c3c:	08006d2f 	.word	0x08006d2f
 8006c40:	08006bf1 	.word	0x08006bf1
 8006c44:	08006bf1 	.word	0x08006bf1
 8006c48:	08006d97 	.word	0x08006d97
 8006c4c:	08006bf1 	.word	0x08006bf1
 8006c50:	08006c9f 	.word	0x08006c9f
 8006c54:	08006bf1 	.word	0x08006bf1
 8006c58:	08006bf1 	.word	0x08006bf1
 8006c5c:	08006d37 	.word	0x08006d37
 8006c60:	6833      	ldr	r3, [r6, #0]
 8006c62:	1d1a      	adds	r2, r3, #4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	6032      	str	r2, [r6, #0]
 8006c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c70:	2301      	movs	r3, #1
 8006c72:	e09d      	b.n	8006db0 <_printf_i+0x1e8>
 8006c74:	6833      	ldr	r3, [r6, #0]
 8006c76:	6820      	ldr	r0, [r4, #0]
 8006c78:	1d19      	adds	r1, r3, #4
 8006c7a:	6031      	str	r1, [r6, #0]
 8006c7c:	0606      	lsls	r6, r0, #24
 8006c7e:	d501      	bpl.n	8006c84 <_printf_i+0xbc>
 8006c80:	681d      	ldr	r5, [r3, #0]
 8006c82:	e003      	b.n	8006c8c <_printf_i+0xc4>
 8006c84:	0645      	lsls	r5, r0, #25
 8006c86:	d5fb      	bpl.n	8006c80 <_printf_i+0xb8>
 8006c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c8c:	2d00      	cmp	r5, #0
 8006c8e:	da03      	bge.n	8006c98 <_printf_i+0xd0>
 8006c90:	232d      	movs	r3, #45	@ 0x2d
 8006c92:	426d      	negs	r5, r5
 8006c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c98:	4859      	ldr	r0, [pc, #356]	@ (8006e00 <_printf_i+0x238>)
 8006c9a:	230a      	movs	r3, #10
 8006c9c:	e011      	b.n	8006cc2 <_printf_i+0xfa>
 8006c9e:	6821      	ldr	r1, [r4, #0]
 8006ca0:	6833      	ldr	r3, [r6, #0]
 8006ca2:	0608      	lsls	r0, r1, #24
 8006ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8006ca8:	d402      	bmi.n	8006cb0 <_printf_i+0xe8>
 8006caa:	0649      	lsls	r1, r1, #25
 8006cac:	bf48      	it	mi
 8006cae:	b2ad      	uxthmi	r5, r5
 8006cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8006cb2:	4853      	ldr	r0, [pc, #332]	@ (8006e00 <_printf_i+0x238>)
 8006cb4:	6033      	str	r3, [r6, #0]
 8006cb6:	bf14      	ite	ne
 8006cb8:	230a      	movne	r3, #10
 8006cba:	2308      	moveq	r3, #8
 8006cbc:	2100      	movs	r1, #0
 8006cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006cc2:	6866      	ldr	r6, [r4, #4]
 8006cc4:	60a6      	str	r6, [r4, #8]
 8006cc6:	2e00      	cmp	r6, #0
 8006cc8:	bfa2      	ittt	ge
 8006cca:	6821      	ldrge	r1, [r4, #0]
 8006ccc:	f021 0104 	bicge.w	r1, r1, #4
 8006cd0:	6021      	strge	r1, [r4, #0]
 8006cd2:	b90d      	cbnz	r5, 8006cd8 <_printf_i+0x110>
 8006cd4:	2e00      	cmp	r6, #0
 8006cd6:	d04b      	beq.n	8006d70 <_printf_i+0x1a8>
 8006cd8:	4616      	mov	r6, r2
 8006cda:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cde:	fb03 5711 	mls	r7, r3, r1, r5
 8006ce2:	5dc7      	ldrb	r7, [r0, r7]
 8006ce4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ce8:	462f      	mov	r7, r5
 8006cea:	42bb      	cmp	r3, r7
 8006cec:	460d      	mov	r5, r1
 8006cee:	d9f4      	bls.n	8006cda <_printf_i+0x112>
 8006cf0:	2b08      	cmp	r3, #8
 8006cf2:	d10b      	bne.n	8006d0c <_printf_i+0x144>
 8006cf4:	6823      	ldr	r3, [r4, #0]
 8006cf6:	07df      	lsls	r7, r3, #31
 8006cf8:	d508      	bpl.n	8006d0c <_printf_i+0x144>
 8006cfa:	6923      	ldr	r3, [r4, #16]
 8006cfc:	6861      	ldr	r1, [r4, #4]
 8006cfe:	4299      	cmp	r1, r3
 8006d00:	bfde      	ittt	le
 8006d02:	2330      	movle	r3, #48	@ 0x30
 8006d04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006d08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006d0c:	1b92      	subs	r2, r2, r6
 8006d0e:	6122      	str	r2, [r4, #16]
 8006d10:	f8cd a000 	str.w	sl, [sp]
 8006d14:	464b      	mov	r3, r9
 8006d16:	aa03      	add	r2, sp, #12
 8006d18:	4621      	mov	r1, r4
 8006d1a:	4640      	mov	r0, r8
 8006d1c:	f7ff fee6 	bl	8006aec <_printf_common>
 8006d20:	3001      	adds	r0, #1
 8006d22:	d14a      	bne.n	8006dba <_printf_i+0x1f2>
 8006d24:	f04f 30ff 	mov.w	r0, #4294967295
 8006d28:	b004      	add	sp, #16
 8006d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	f043 0320 	orr.w	r3, r3, #32
 8006d34:	6023      	str	r3, [r4, #0]
 8006d36:	4833      	ldr	r0, [pc, #204]	@ (8006e04 <_printf_i+0x23c>)
 8006d38:	2778      	movs	r7, #120	@ 0x78
 8006d3a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d3e:	6823      	ldr	r3, [r4, #0]
 8006d40:	6831      	ldr	r1, [r6, #0]
 8006d42:	061f      	lsls	r7, r3, #24
 8006d44:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d48:	d402      	bmi.n	8006d50 <_printf_i+0x188>
 8006d4a:	065f      	lsls	r7, r3, #25
 8006d4c:	bf48      	it	mi
 8006d4e:	b2ad      	uxthmi	r5, r5
 8006d50:	6031      	str	r1, [r6, #0]
 8006d52:	07d9      	lsls	r1, r3, #31
 8006d54:	bf44      	itt	mi
 8006d56:	f043 0320 	orrmi.w	r3, r3, #32
 8006d5a:	6023      	strmi	r3, [r4, #0]
 8006d5c:	b11d      	cbz	r5, 8006d66 <_printf_i+0x19e>
 8006d5e:	2310      	movs	r3, #16
 8006d60:	e7ac      	b.n	8006cbc <_printf_i+0xf4>
 8006d62:	4827      	ldr	r0, [pc, #156]	@ (8006e00 <_printf_i+0x238>)
 8006d64:	e7e9      	b.n	8006d3a <_printf_i+0x172>
 8006d66:	6823      	ldr	r3, [r4, #0]
 8006d68:	f023 0320 	bic.w	r3, r3, #32
 8006d6c:	6023      	str	r3, [r4, #0]
 8006d6e:	e7f6      	b.n	8006d5e <_printf_i+0x196>
 8006d70:	4616      	mov	r6, r2
 8006d72:	e7bd      	b.n	8006cf0 <_printf_i+0x128>
 8006d74:	6833      	ldr	r3, [r6, #0]
 8006d76:	6825      	ldr	r5, [r4, #0]
 8006d78:	6961      	ldr	r1, [r4, #20]
 8006d7a:	1d18      	adds	r0, r3, #4
 8006d7c:	6030      	str	r0, [r6, #0]
 8006d7e:	062e      	lsls	r6, r5, #24
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	d501      	bpl.n	8006d88 <_printf_i+0x1c0>
 8006d84:	6019      	str	r1, [r3, #0]
 8006d86:	e002      	b.n	8006d8e <_printf_i+0x1c6>
 8006d88:	0668      	lsls	r0, r5, #25
 8006d8a:	d5fb      	bpl.n	8006d84 <_printf_i+0x1bc>
 8006d8c:	8019      	strh	r1, [r3, #0]
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6123      	str	r3, [r4, #16]
 8006d92:	4616      	mov	r6, r2
 8006d94:	e7bc      	b.n	8006d10 <_printf_i+0x148>
 8006d96:	6833      	ldr	r3, [r6, #0]
 8006d98:	1d1a      	adds	r2, r3, #4
 8006d9a:	6032      	str	r2, [r6, #0]
 8006d9c:	681e      	ldr	r6, [r3, #0]
 8006d9e:	6862      	ldr	r2, [r4, #4]
 8006da0:	2100      	movs	r1, #0
 8006da2:	4630      	mov	r0, r6
 8006da4:	f7f9 fa9c 	bl	80002e0 <memchr>
 8006da8:	b108      	cbz	r0, 8006dae <_printf_i+0x1e6>
 8006daa:	1b80      	subs	r0, r0, r6
 8006dac:	6060      	str	r0, [r4, #4]
 8006dae:	6863      	ldr	r3, [r4, #4]
 8006db0:	6123      	str	r3, [r4, #16]
 8006db2:	2300      	movs	r3, #0
 8006db4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006db8:	e7aa      	b.n	8006d10 <_printf_i+0x148>
 8006dba:	6923      	ldr	r3, [r4, #16]
 8006dbc:	4632      	mov	r2, r6
 8006dbe:	4649      	mov	r1, r9
 8006dc0:	4640      	mov	r0, r8
 8006dc2:	47d0      	blx	sl
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d0ad      	beq.n	8006d24 <_printf_i+0x15c>
 8006dc8:	6823      	ldr	r3, [r4, #0]
 8006dca:	079b      	lsls	r3, r3, #30
 8006dcc:	d413      	bmi.n	8006df6 <_printf_i+0x22e>
 8006dce:	68e0      	ldr	r0, [r4, #12]
 8006dd0:	9b03      	ldr	r3, [sp, #12]
 8006dd2:	4298      	cmp	r0, r3
 8006dd4:	bfb8      	it	lt
 8006dd6:	4618      	movlt	r0, r3
 8006dd8:	e7a6      	b.n	8006d28 <_printf_i+0x160>
 8006dda:	2301      	movs	r3, #1
 8006ddc:	4632      	mov	r2, r6
 8006dde:	4649      	mov	r1, r9
 8006de0:	4640      	mov	r0, r8
 8006de2:	47d0      	blx	sl
 8006de4:	3001      	adds	r0, #1
 8006de6:	d09d      	beq.n	8006d24 <_printf_i+0x15c>
 8006de8:	3501      	adds	r5, #1
 8006dea:	68e3      	ldr	r3, [r4, #12]
 8006dec:	9903      	ldr	r1, [sp, #12]
 8006dee:	1a5b      	subs	r3, r3, r1
 8006df0:	42ab      	cmp	r3, r5
 8006df2:	dcf2      	bgt.n	8006dda <_printf_i+0x212>
 8006df4:	e7eb      	b.n	8006dce <_printf_i+0x206>
 8006df6:	2500      	movs	r5, #0
 8006df8:	f104 0619 	add.w	r6, r4, #25
 8006dfc:	e7f5      	b.n	8006dea <_printf_i+0x222>
 8006dfe:	bf00      	nop
 8006e00:	0800ab2e 	.word	0x0800ab2e
 8006e04:	0800ab3f 	.word	0x0800ab3f

08006e08 <_scanf_float>:
 8006e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e0c:	b087      	sub	sp, #28
 8006e0e:	4617      	mov	r7, r2
 8006e10:	9303      	str	r3, [sp, #12]
 8006e12:	688b      	ldr	r3, [r1, #8]
 8006e14:	1e5a      	subs	r2, r3, #1
 8006e16:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006e1a:	bf81      	itttt	hi
 8006e1c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006e20:	eb03 0b05 	addhi.w	fp, r3, r5
 8006e24:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006e28:	608b      	strhi	r3, [r1, #8]
 8006e2a:	680b      	ldr	r3, [r1, #0]
 8006e2c:	460a      	mov	r2, r1
 8006e2e:	f04f 0500 	mov.w	r5, #0
 8006e32:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006e36:	f842 3b1c 	str.w	r3, [r2], #28
 8006e3a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e3e:	4680      	mov	r8, r0
 8006e40:	460c      	mov	r4, r1
 8006e42:	bf98      	it	ls
 8006e44:	f04f 0b00 	movls.w	fp, #0
 8006e48:	9201      	str	r2, [sp, #4]
 8006e4a:	4616      	mov	r6, r2
 8006e4c:	46aa      	mov	sl, r5
 8006e4e:	46a9      	mov	r9, r5
 8006e50:	9502      	str	r5, [sp, #8]
 8006e52:	68a2      	ldr	r2, [r4, #8]
 8006e54:	b152      	cbz	r2, 8006e6c <_scanf_float+0x64>
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	781b      	ldrb	r3, [r3, #0]
 8006e5a:	2b4e      	cmp	r3, #78	@ 0x4e
 8006e5c:	d864      	bhi.n	8006f28 <_scanf_float+0x120>
 8006e5e:	2b40      	cmp	r3, #64	@ 0x40
 8006e60:	d83c      	bhi.n	8006edc <_scanf_float+0xd4>
 8006e62:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006e66:	b2c8      	uxtb	r0, r1
 8006e68:	280e      	cmp	r0, #14
 8006e6a:	d93a      	bls.n	8006ee2 <_scanf_float+0xda>
 8006e6c:	f1b9 0f00 	cmp.w	r9, #0
 8006e70:	d003      	beq.n	8006e7a <_scanf_float+0x72>
 8006e72:	6823      	ldr	r3, [r4, #0]
 8006e74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e78:	6023      	str	r3, [r4, #0]
 8006e7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e7e:	f1ba 0f01 	cmp.w	sl, #1
 8006e82:	f200 8117 	bhi.w	80070b4 <_scanf_float+0x2ac>
 8006e86:	9b01      	ldr	r3, [sp, #4]
 8006e88:	429e      	cmp	r6, r3
 8006e8a:	f200 8108 	bhi.w	800709e <_scanf_float+0x296>
 8006e8e:	2001      	movs	r0, #1
 8006e90:	b007      	add	sp, #28
 8006e92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e96:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006e9a:	2a0d      	cmp	r2, #13
 8006e9c:	d8e6      	bhi.n	8006e6c <_scanf_float+0x64>
 8006e9e:	a101      	add	r1, pc, #4	@ (adr r1, 8006ea4 <_scanf_float+0x9c>)
 8006ea0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006ea4:	08006feb 	.word	0x08006feb
 8006ea8:	08006e6d 	.word	0x08006e6d
 8006eac:	08006e6d 	.word	0x08006e6d
 8006eb0:	08006e6d 	.word	0x08006e6d
 8006eb4:	0800704b 	.word	0x0800704b
 8006eb8:	08007023 	.word	0x08007023
 8006ebc:	08006e6d 	.word	0x08006e6d
 8006ec0:	08006e6d 	.word	0x08006e6d
 8006ec4:	08006ff9 	.word	0x08006ff9
 8006ec8:	08006e6d 	.word	0x08006e6d
 8006ecc:	08006e6d 	.word	0x08006e6d
 8006ed0:	08006e6d 	.word	0x08006e6d
 8006ed4:	08006e6d 	.word	0x08006e6d
 8006ed8:	08006fb1 	.word	0x08006fb1
 8006edc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006ee0:	e7db      	b.n	8006e9a <_scanf_float+0x92>
 8006ee2:	290e      	cmp	r1, #14
 8006ee4:	d8c2      	bhi.n	8006e6c <_scanf_float+0x64>
 8006ee6:	a001      	add	r0, pc, #4	@ (adr r0, 8006eec <_scanf_float+0xe4>)
 8006ee8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006eec:	08006fa1 	.word	0x08006fa1
 8006ef0:	08006e6d 	.word	0x08006e6d
 8006ef4:	08006fa1 	.word	0x08006fa1
 8006ef8:	08007037 	.word	0x08007037
 8006efc:	08006e6d 	.word	0x08006e6d
 8006f00:	08006f49 	.word	0x08006f49
 8006f04:	08006f87 	.word	0x08006f87
 8006f08:	08006f87 	.word	0x08006f87
 8006f0c:	08006f87 	.word	0x08006f87
 8006f10:	08006f87 	.word	0x08006f87
 8006f14:	08006f87 	.word	0x08006f87
 8006f18:	08006f87 	.word	0x08006f87
 8006f1c:	08006f87 	.word	0x08006f87
 8006f20:	08006f87 	.word	0x08006f87
 8006f24:	08006f87 	.word	0x08006f87
 8006f28:	2b6e      	cmp	r3, #110	@ 0x6e
 8006f2a:	d809      	bhi.n	8006f40 <_scanf_float+0x138>
 8006f2c:	2b60      	cmp	r3, #96	@ 0x60
 8006f2e:	d8b2      	bhi.n	8006e96 <_scanf_float+0x8e>
 8006f30:	2b54      	cmp	r3, #84	@ 0x54
 8006f32:	d07b      	beq.n	800702c <_scanf_float+0x224>
 8006f34:	2b59      	cmp	r3, #89	@ 0x59
 8006f36:	d199      	bne.n	8006e6c <_scanf_float+0x64>
 8006f38:	2d07      	cmp	r5, #7
 8006f3a:	d197      	bne.n	8006e6c <_scanf_float+0x64>
 8006f3c:	2508      	movs	r5, #8
 8006f3e:	e02c      	b.n	8006f9a <_scanf_float+0x192>
 8006f40:	2b74      	cmp	r3, #116	@ 0x74
 8006f42:	d073      	beq.n	800702c <_scanf_float+0x224>
 8006f44:	2b79      	cmp	r3, #121	@ 0x79
 8006f46:	e7f6      	b.n	8006f36 <_scanf_float+0x12e>
 8006f48:	6821      	ldr	r1, [r4, #0]
 8006f4a:	05c8      	lsls	r0, r1, #23
 8006f4c:	d51b      	bpl.n	8006f86 <_scanf_float+0x17e>
 8006f4e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006f52:	6021      	str	r1, [r4, #0]
 8006f54:	f109 0901 	add.w	r9, r9, #1
 8006f58:	f1bb 0f00 	cmp.w	fp, #0
 8006f5c:	d003      	beq.n	8006f66 <_scanf_float+0x15e>
 8006f5e:	3201      	adds	r2, #1
 8006f60:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f64:	60a2      	str	r2, [r4, #8]
 8006f66:	68a3      	ldr	r3, [r4, #8]
 8006f68:	3b01      	subs	r3, #1
 8006f6a:	60a3      	str	r3, [r4, #8]
 8006f6c:	6923      	ldr	r3, [r4, #16]
 8006f6e:	3301      	adds	r3, #1
 8006f70:	6123      	str	r3, [r4, #16]
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	607b      	str	r3, [r7, #4]
 8006f7a:	f340 8087 	ble.w	800708c <_scanf_float+0x284>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	603b      	str	r3, [r7, #0]
 8006f84:	e765      	b.n	8006e52 <_scanf_float+0x4a>
 8006f86:	eb1a 0105 	adds.w	r1, sl, r5
 8006f8a:	f47f af6f 	bne.w	8006e6c <_scanf_float+0x64>
 8006f8e:	6822      	ldr	r2, [r4, #0]
 8006f90:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006f94:	6022      	str	r2, [r4, #0]
 8006f96:	460d      	mov	r5, r1
 8006f98:	468a      	mov	sl, r1
 8006f9a:	f806 3b01 	strb.w	r3, [r6], #1
 8006f9e:	e7e2      	b.n	8006f66 <_scanf_float+0x15e>
 8006fa0:	6822      	ldr	r2, [r4, #0]
 8006fa2:	0610      	lsls	r0, r2, #24
 8006fa4:	f57f af62 	bpl.w	8006e6c <_scanf_float+0x64>
 8006fa8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006fac:	6022      	str	r2, [r4, #0]
 8006fae:	e7f4      	b.n	8006f9a <_scanf_float+0x192>
 8006fb0:	f1ba 0f00 	cmp.w	sl, #0
 8006fb4:	d10e      	bne.n	8006fd4 <_scanf_float+0x1cc>
 8006fb6:	f1b9 0f00 	cmp.w	r9, #0
 8006fba:	d10e      	bne.n	8006fda <_scanf_float+0x1d2>
 8006fbc:	6822      	ldr	r2, [r4, #0]
 8006fbe:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006fc2:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006fc6:	d108      	bne.n	8006fda <_scanf_float+0x1d2>
 8006fc8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006fcc:	6022      	str	r2, [r4, #0]
 8006fce:	f04f 0a01 	mov.w	sl, #1
 8006fd2:	e7e2      	b.n	8006f9a <_scanf_float+0x192>
 8006fd4:	f1ba 0f02 	cmp.w	sl, #2
 8006fd8:	d055      	beq.n	8007086 <_scanf_float+0x27e>
 8006fda:	2d01      	cmp	r5, #1
 8006fdc:	d002      	beq.n	8006fe4 <_scanf_float+0x1dc>
 8006fde:	2d04      	cmp	r5, #4
 8006fe0:	f47f af44 	bne.w	8006e6c <_scanf_float+0x64>
 8006fe4:	3501      	adds	r5, #1
 8006fe6:	b2ed      	uxtb	r5, r5
 8006fe8:	e7d7      	b.n	8006f9a <_scanf_float+0x192>
 8006fea:	f1ba 0f01 	cmp.w	sl, #1
 8006fee:	f47f af3d 	bne.w	8006e6c <_scanf_float+0x64>
 8006ff2:	f04f 0a02 	mov.w	sl, #2
 8006ff6:	e7d0      	b.n	8006f9a <_scanf_float+0x192>
 8006ff8:	b97d      	cbnz	r5, 800701a <_scanf_float+0x212>
 8006ffa:	f1b9 0f00 	cmp.w	r9, #0
 8006ffe:	f47f af38 	bne.w	8006e72 <_scanf_float+0x6a>
 8007002:	6822      	ldr	r2, [r4, #0]
 8007004:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007008:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800700c:	f040 8101 	bne.w	8007212 <_scanf_float+0x40a>
 8007010:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007014:	6022      	str	r2, [r4, #0]
 8007016:	2501      	movs	r5, #1
 8007018:	e7bf      	b.n	8006f9a <_scanf_float+0x192>
 800701a:	2d03      	cmp	r5, #3
 800701c:	d0e2      	beq.n	8006fe4 <_scanf_float+0x1dc>
 800701e:	2d05      	cmp	r5, #5
 8007020:	e7de      	b.n	8006fe0 <_scanf_float+0x1d8>
 8007022:	2d02      	cmp	r5, #2
 8007024:	f47f af22 	bne.w	8006e6c <_scanf_float+0x64>
 8007028:	2503      	movs	r5, #3
 800702a:	e7b6      	b.n	8006f9a <_scanf_float+0x192>
 800702c:	2d06      	cmp	r5, #6
 800702e:	f47f af1d 	bne.w	8006e6c <_scanf_float+0x64>
 8007032:	2507      	movs	r5, #7
 8007034:	e7b1      	b.n	8006f9a <_scanf_float+0x192>
 8007036:	6822      	ldr	r2, [r4, #0]
 8007038:	0591      	lsls	r1, r2, #22
 800703a:	f57f af17 	bpl.w	8006e6c <_scanf_float+0x64>
 800703e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007042:	6022      	str	r2, [r4, #0]
 8007044:	f8cd 9008 	str.w	r9, [sp, #8]
 8007048:	e7a7      	b.n	8006f9a <_scanf_float+0x192>
 800704a:	6822      	ldr	r2, [r4, #0]
 800704c:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007050:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007054:	d006      	beq.n	8007064 <_scanf_float+0x25c>
 8007056:	0550      	lsls	r0, r2, #21
 8007058:	f57f af08 	bpl.w	8006e6c <_scanf_float+0x64>
 800705c:	f1b9 0f00 	cmp.w	r9, #0
 8007060:	f000 80d7 	beq.w	8007212 <_scanf_float+0x40a>
 8007064:	0591      	lsls	r1, r2, #22
 8007066:	bf58      	it	pl
 8007068:	9902      	ldrpl	r1, [sp, #8]
 800706a:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800706e:	bf58      	it	pl
 8007070:	eba9 0101 	subpl.w	r1, r9, r1
 8007074:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007078:	bf58      	it	pl
 800707a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800707e:	6022      	str	r2, [r4, #0]
 8007080:	f04f 0900 	mov.w	r9, #0
 8007084:	e789      	b.n	8006f9a <_scanf_float+0x192>
 8007086:	f04f 0a03 	mov.w	sl, #3
 800708a:	e786      	b.n	8006f9a <_scanf_float+0x192>
 800708c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007090:	4639      	mov	r1, r7
 8007092:	4640      	mov	r0, r8
 8007094:	4798      	blx	r3
 8007096:	2800      	cmp	r0, #0
 8007098:	f43f aedb 	beq.w	8006e52 <_scanf_float+0x4a>
 800709c:	e6e6      	b.n	8006e6c <_scanf_float+0x64>
 800709e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070a6:	463a      	mov	r2, r7
 80070a8:	4640      	mov	r0, r8
 80070aa:	4798      	blx	r3
 80070ac:	6923      	ldr	r3, [r4, #16]
 80070ae:	3b01      	subs	r3, #1
 80070b0:	6123      	str	r3, [r4, #16]
 80070b2:	e6e8      	b.n	8006e86 <_scanf_float+0x7e>
 80070b4:	1e6b      	subs	r3, r5, #1
 80070b6:	2b06      	cmp	r3, #6
 80070b8:	d824      	bhi.n	8007104 <_scanf_float+0x2fc>
 80070ba:	2d02      	cmp	r5, #2
 80070bc:	d836      	bhi.n	800712c <_scanf_float+0x324>
 80070be:	9b01      	ldr	r3, [sp, #4]
 80070c0:	429e      	cmp	r6, r3
 80070c2:	f67f aee4 	bls.w	8006e8e <_scanf_float+0x86>
 80070c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070ce:	463a      	mov	r2, r7
 80070d0:	4640      	mov	r0, r8
 80070d2:	4798      	blx	r3
 80070d4:	6923      	ldr	r3, [r4, #16]
 80070d6:	3b01      	subs	r3, #1
 80070d8:	6123      	str	r3, [r4, #16]
 80070da:	e7f0      	b.n	80070be <_scanf_float+0x2b6>
 80070dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070e0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80070e4:	463a      	mov	r2, r7
 80070e6:	4640      	mov	r0, r8
 80070e8:	4798      	blx	r3
 80070ea:	6923      	ldr	r3, [r4, #16]
 80070ec:	3b01      	subs	r3, #1
 80070ee:	6123      	str	r3, [r4, #16]
 80070f0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070f4:	fa5f fa8a 	uxtb.w	sl, sl
 80070f8:	f1ba 0f02 	cmp.w	sl, #2
 80070fc:	d1ee      	bne.n	80070dc <_scanf_float+0x2d4>
 80070fe:	3d03      	subs	r5, #3
 8007100:	b2ed      	uxtb	r5, r5
 8007102:	1b76      	subs	r6, r6, r5
 8007104:	6823      	ldr	r3, [r4, #0]
 8007106:	05da      	lsls	r2, r3, #23
 8007108:	d530      	bpl.n	800716c <_scanf_float+0x364>
 800710a:	055b      	lsls	r3, r3, #21
 800710c:	d511      	bpl.n	8007132 <_scanf_float+0x32a>
 800710e:	9b01      	ldr	r3, [sp, #4]
 8007110:	429e      	cmp	r6, r3
 8007112:	f67f aebc 	bls.w	8006e8e <_scanf_float+0x86>
 8007116:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800711a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800711e:	463a      	mov	r2, r7
 8007120:	4640      	mov	r0, r8
 8007122:	4798      	blx	r3
 8007124:	6923      	ldr	r3, [r4, #16]
 8007126:	3b01      	subs	r3, #1
 8007128:	6123      	str	r3, [r4, #16]
 800712a:	e7f0      	b.n	800710e <_scanf_float+0x306>
 800712c:	46aa      	mov	sl, r5
 800712e:	46b3      	mov	fp, r6
 8007130:	e7de      	b.n	80070f0 <_scanf_float+0x2e8>
 8007132:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007136:	6923      	ldr	r3, [r4, #16]
 8007138:	2965      	cmp	r1, #101	@ 0x65
 800713a:	f103 33ff 	add.w	r3, r3, #4294967295
 800713e:	f106 35ff 	add.w	r5, r6, #4294967295
 8007142:	6123      	str	r3, [r4, #16]
 8007144:	d00c      	beq.n	8007160 <_scanf_float+0x358>
 8007146:	2945      	cmp	r1, #69	@ 0x45
 8007148:	d00a      	beq.n	8007160 <_scanf_float+0x358>
 800714a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800714e:	463a      	mov	r2, r7
 8007150:	4640      	mov	r0, r8
 8007152:	4798      	blx	r3
 8007154:	6923      	ldr	r3, [r4, #16]
 8007156:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800715a:	3b01      	subs	r3, #1
 800715c:	1eb5      	subs	r5, r6, #2
 800715e:	6123      	str	r3, [r4, #16]
 8007160:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007164:	463a      	mov	r2, r7
 8007166:	4640      	mov	r0, r8
 8007168:	4798      	blx	r3
 800716a:	462e      	mov	r6, r5
 800716c:	6822      	ldr	r2, [r4, #0]
 800716e:	f012 0210 	ands.w	r2, r2, #16
 8007172:	d001      	beq.n	8007178 <_scanf_float+0x370>
 8007174:	2000      	movs	r0, #0
 8007176:	e68b      	b.n	8006e90 <_scanf_float+0x88>
 8007178:	7032      	strb	r2, [r6, #0]
 800717a:	6823      	ldr	r3, [r4, #0]
 800717c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007180:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007184:	d11a      	bne.n	80071bc <_scanf_float+0x3b4>
 8007186:	9b02      	ldr	r3, [sp, #8]
 8007188:	454b      	cmp	r3, r9
 800718a:	eba3 0209 	sub.w	r2, r3, r9
 800718e:	d121      	bne.n	80071d4 <_scanf_float+0x3cc>
 8007190:	9901      	ldr	r1, [sp, #4]
 8007192:	2200      	movs	r2, #0
 8007194:	4640      	mov	r0, r8
 8007196:	f002 fb2d 	bl	80097f4 <_strtod_r>
 800719a:	9b03      	ldr	r3, [sp, #12]
 800719c:	6821      	ldr	r1, [r4, #0]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f011 0f02 	tst.w	r1, #2
 80071a4:	f103 0204 	add.w	r2, r3, #4
 80071a8:	d01f      	beq.n	80071ea <_scanf_float+0x3e2>
 80071aa:	9903      	ldr	r1, [sp, #12]
 80071ac:	600a      	str	r2, [r1, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	ed83 0b00 	vstr	d0, [r3]
 80071b4:	68e3      	ldr	r3, [r4, #12]
 80071b6:	3301      	adds	r3, #1
 80071b8:	60e3      	str	r3, [r4, #12]
 80071ba:	e7db      	b.n	8007174 <_scanf_float+0x36c>
 80071bc:	9b04      	ldr	r3, [sp, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d0e6      	beq.n	8007190 <_scanf_float+0x388>
 80071c2:	9905      	ldr	r1, [sp, #20]
 80071c4:	230a      	movs	r3, #10
 80071c6:	3101      	adds	r1, #1
 80071c8:	4640      	mov	r0, r8
 80071ca:	f002 fb93 	bl	80098f4 <_strtol_r>
 80071ce:	9b04      	ldr	r3, [sp, #16]
 80071d0:	9e05      	ldr	r6, [sp, #20]
 80071d2:	1ac2      	subs	r2, r0, r3
 80071d4:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80071d8:	429e      	cmp	r6, r3
 80071da:	bf28      	it	cs
 80071dc:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80071e0:	490d      	ldr	r1, [pc, #52]	@ (8007218 <_scanf_float+0x410>)
 80071e2:	4630      	mov	r0, r6
 80071e4:	f000 f8de 	bl	80073a4 <siprintf>
 80071e8:	e7d2      	b.n	8007190 <_scanf_float+0x388>
 80071ea:	f011 0f04 	tst.w	r1, #4
 80071ee:	9903      	ldr	r1, [sp, #12]
 80071f0:	600a      	str	r2, [r1, #0]
 80071f2:	d1dc      	bne.n	80071ae <_scanf_float+0x3a6>
 80071f4:	eeb4 0b40 	vcmp.f64	d0, d0
 80071f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80071fc:	681d      	ldr	r5, [r3, #0]
 80071fe:	d705      	bvc.n	800720c <_scanf_float+0x404>
 8007200:	4806      	ldr	r0, [pc, #24]	@ (800721c <_scanf_float+0x414>)
 8007202:	f000 f9b3 	bl	800756c <nanf>
 8007206:	ed85 0a00 	vstr	s0, [r5]
 800720a:	e7d3      	b.n	80071b4 <_scanf_float+0x3ac>
 800720c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8007210:	e7f9      	b.n	8007206 <_scanf_float+0x3fe>
 8007212:	f04f 0900 	mov.w	r9, #0
 8007216:	e630      	b.n	8006e7a <_scanf_float+0x72>
 8007218:	0800ab50 	.word	0x0800ab50
 800721c:	0800aee5 	.word	0x0800aee5

08007220 <std>:
 8007220:	2300      	movs	r3, #0
 8007222:	b510      	push	{r4, lr}
 8007224:	4604      	mov	r4, r0
 8007226:	e9c0 3300 	strd	r3, r3, [r0]
 800722a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800722e:	6083      	str	r3, [r0, #8]
 8007230:	8181      	strh	r1, [r0, #12]
 8007232:	6643      	str	r3, [r0, #100]	@ 0x64
 8007234:	81c2      	strh	r2, [r0, #14]
 8007236:	6183      	str	r3, [r0, #24]
 8007238:	4619      	mov	r1, r3
 800723a:	2208      	movs	r2, #8
 800723c:	305c      	adds	r0, #92	@ 0x5c
 800723e:	f000 f914 	bl	800746a <memset>
 8007242:	4b0d      	ldr	r3, [pc, #52]	@ (8007278 <std+0x58>)
 8007244:	6263      	str	r3, [r4, #36]	@ 0x24
 8007246:	4b0d      	ldr	r3, [pc, #52]	@ (800727c <std+0x5c>)
 8007248:	62a3      	str	r3, [r4, #40]	@ 0x28
 800724a:	4b0d      	ldr	r3, [pc, #52]	@ (8007280 <std+0x60>)
 800724c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800724e:	4b0d      	ldr	r3, [pc, #52]	@ (8007284 <std+0x64>)
 8007250:	6323      	str	r3, [r4, #48]	@ 0x30
 8007252:	4b0d      	ldr	r3, [pc, #52]	@ (8007288 <std+0x68>)
 8007254:	6224      	str	r4, [r4, #32]
 8007256:	429c      	cmp	r4, r3
 8007258:	d006      	beq.n	8007268 <std+0x48>
 800725a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800725e:	4294      	cmp	r4, r2
 8007260:	d002      	beq.n	8007268 <std+0x48>
 8007262:	33d0      	adds	r3, #208	@ 0xd0
 8007264:	429c      	cmp	r4, r3
 8007266:	d105      	bne.n	8007274 <std+0x54>
 8007268:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800726c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007270:	f000 b978 	b.w	8007564 <__retarget_lock_init_recursive>
 8007274:	bd10      	pop	{r4, pc}
 8007276:	bf00      	nop
 8007278:	080073e5 	.word	0x080073e5
 800727c:	08007407 	.word	0x08007407
 8007280:	0800743f 	.word	0x0800743f
 8007284:	08007463 	.word	0x08007463
 8007288:	24000444 	.word	0x24000444

0800728c <stdio_exit_handler>:
 800728c:	4a02      	ldr	r2, [pc, #8]	@ (8007298 <stdio_exit_handler+0xc>)
 800728e:	4903      	ldr	r1, [pc, #12]	@ (800729c <stdio_exit_handler+0x10>)
 8007290:	4803      	ldr	r0, [pc, #12]	@ (80072a0 <stdio_exit_handler+0x14>)
 8007292:	f000 b869 	b.w	8007368 <_fwalk_sglue>
 8007296:	bf00      	nop
 8007298:	2400002c 	.word	0x2400002c
 800729c:	08009cb1 	.word	0x08009cb1
 80072a0:	2400003c 	.word	0x2400003c

080072a4 <cleanup_stdio>:
 80072a4:	6841      	ldr	r1, [r0, #4]
 80072a6:	4b0c      	ldr	r3, [pc, #48]	@ (80072d8 <cleanup_stdio+0x34>)
 80072a8:	4299      	cmp	r1, r3
 80072aa:	b510      	push	{r4, lr}
 80072ac:	4604      	mov	r4, r0
 80072ae:	d001      	beq.n	80072b4 <cleanup_stdio+0x10>
 80072b0:	f002 fcfe 	bl	8009cb0 <_fflush_r>
 80072b4:	68a1      	ldr	r1, [r4, #8]
 80072b6:	4b09      	ldr	r3, [pc, #36]	@ (80072dc <cleanup_stdio+0x38>)
 80072b8:	4299      	cmp	r1, r3
 80072ba:	d002      	beq.n	80072c2 <cleanup_stdio+0x1e>
 80072bc:	4620      	mov	r0, r4
 80072be:	f002 fcf7 	bl	8009cb0 <_fflush_r>
 80072c2:	68e1      	ldr	r1, [r4, #12]
 80072c4:	4b06      	ldr	r3, [pc, #24]	@ (80072e0 <cleanup_stdio+0x3c>)
 80072c6:	4299      	cmp	r1, r3
 80072c8:	d004      	beq.n	80072d4 <cleanup_stdio+0x30>
 80072ca:	4620      	mov	r0, r4
 80072cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072d0:	f002 bcee 	b.w	8009cb0 <_fflush_r>
 80072d4:	bd10      	pop	{r4, pc}
 80072d6:	bf00      	nop
 80072d8:	24000444 	.word	0x24000444
 80072dc:	240004ac 	.word	0x240004ac
 80072e0:	24000514 	.word	0x24000514

080072e4 <global_stdio_init.part.0>:
 80072e4:	b510      	push	{r4, lr}
 80072e6:	4b0b      	ldr	r3, [pc, #44]	@ (8007314 <global_stdio_init.part.0+0x30>)
 80072e8:	4c0b      	ldr	r4, [pc, #44]	@ (8007318 <global_stdio_init.part.0+0x34>)
 80072ea:	4a0c      	ldr	r2, [pc, #48]	@ (800731c <global_stdio_init.part.0+0x38>)
 80072ec:	601a      	str	r2, [r3, #0]
 80072ee:	4620      	mov	r0, r4
 80072f0:	2200      	movs	r2, #0
 80072f2:	2104      	movs	r1, #4
 80072f4:	f7ff ff94 	bl	8007220 <std>
 80072f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072fc:	2201      	movs	r2, #1
 80072fe:	2109      	movs	r1, #9
 8007300:	f7ff ff8e 	bl	8007220 <std>
 8007304:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007308:	2202      	movs	r2, #2
 800730a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800730e:	2112      	movs	r1, #18
 8007310:	f7ff bf86 	b.w	8007220 <std>
 8007314:	2400057c 	.word	0x2400057c
 8007318:	24000444 	.word	0x24000444
 800731c:	0800728d 	.word	0x0800728d

08007320 <__sfp_lock_acquire>:
 8007320:	4801      	ldr	r0, [pc, #4]	@ (8007328 <__sfp_lock_acquire+0x8>)
 8007322:	f000 b920 	b.w	8007566 <__retarget_lock_acquire_recursive>
 8007326:	bf00      	nop
 8007328:	24000585 	.word	0x24000585

0800732c <__sfp_lock_release>:
 800732c:	4801      	ldr	r0, [pc, #4]	@ (8007334 <__sfp_lock_release+0x8>)
 800732e:	f000 b91b 	b.w	8007568 <__retarget_lock_release_recursive>
 8007332:	bf00      	nop
 8007334:	24000585 	.word	0x24000585

08007338 <__sinit>:
 8007338:	b510      	push	{r4, lr}
 800733a:	4604      	mov	r4, r0
 800733c:	f7ff fff0 	bl	8007320 <__sfp_lock_acquire>
 8007340:	6a23      	ldr	r3, [r4, #32]
 8007342:	b11b      	cbz	r3, 800734c <__sinit+0x14>
 8007344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007348:	f7ff bff0 	b.w	800732c <__sfp_lock_release>
 800734c:	4b04      	ldr	r3, [pc, #16]	@ (8007360 <__sinit+0x28>)
 800734e:	6223      	str	r3, [r4, #32]
 8007350:	4b04      	ldr	r3, [pc, #16]	@ (8007364 <__sinit+0x2c>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d1f5      	bne.n	8007344 <__sinit+0xc>
 8007358:	f7ff ffc4 	bl	80072e4 <global_stdio_init.part.0>
 800735c:	e7f2      	b.n	8007344 <__sinit+0xc>
 800735e:	bf00      	nop
 8007360:	080072a5 	.word	0x080072a5
 8007364:	2400057c 	.word	0x2400057c

08007368 <_fwalk_sglue>:
 8007368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800736c:	4607      	mov	r7, r0
 800736e:	4688      	mov	r8, r1
 8007370:	4614      	mov	r4, r2
 8007372:	2600      	movs	r6, #0
 8007374:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007378:	f1b9 0901 	subs.w	r9, r9, #1
 800737c:	d505      	bpl.n	800738a <_fwalk_sglue+0x22>
 800737e:	6824      	ldr	r4, [r4, #0]
 8007380:	2c00      	cmp	r4, #0
 8007382:	d1f7      	bne.n	8007374 <_fwalk_sglue+0xc>
 8007384:	4630      	mov	r0, r6
 8007386:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800738a:	89ab      	ldrh	r3, [r5, #12]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d907      	bls.n	80073a0 <_fwalk_sglue+0x38>
 8007390:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007394:	3301      	adds	r3, #1
 8007396:	d003      	beq.n	80073a0 <_fwalk_sglue+0x38>
 8007398:	4629      	mov	r1, r5
 800739a:	4638      	mov	r0, r7
 800739c:	47c0      	blx	r8
 800739e:	4306      	orrs	r6, r0
 80073a0:	3568      	adds	r5, #104	@ 0x68
 80073a2:	e7e9      	b.n	8007378 <_fwalk_sglue+0x10>

080073a4 <siprintf>:
 80073a4:	b40e      	push	{r1, r2, r3}
 80073a6:	b500      	push	{lr}
 80073a8:	b09c      	sub	sp, #112	@ 0x70
 80073aa:	ab1d      	add	r3, sp, #116	@ 0x74
 80073ac:	9002      	str	r0, [sp, #8]
 80073ae:	9006      	str	r0, [sp, #24]
 80073b0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80073b4:	4809      	ldr	r0, [pc, #36]	@ (80073dc <siprintf+0x38>)
 80073b6:	9107      	str	r1, [sp, #28]
 80073b8:	9104      	str	r1, [sp, #16]
 80073ba:	4909      	ldr	r1, [pc, #36]	@ (80073e0 <siprintf+0x3c>)
 80073bc:	f853 2b04 	ldr.w	r2, [r3], #4
 80073c0:	9105      	str	r1, [sp, #20]
 80073c2:	6800      	ldr	r0, [r0, #0]
 80073c4:	9301      	str	r3, [sp, #4]
 80073c6:	a902      	add	r1, sp, #8
 80073c8:	f002 faf2 	bl	80099b0 <_svfiprintf_r>
 80073cc:	9b02      	ldr	r3, [sp, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	701a      	strb	r2, [r3, #0]
 80073d2:	b01c      	add	sp, #112	@ 0x70
 80073d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073d8:	b003      	add	sp, #12
 80073da:	4770      	bx	lr
 80073dc:	24000038 	.word	0x24000038
 80073e0:	ffff0208 	.word	0xffff0208

080073e4 <__sread>:
 80073e4:	b510      	push	{r4, lr}
 80073e6:	460c      	mov	r4, r1
 80073e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073ec:	f000 f86c 	bl	80074c8 <_read_r>
 80073f0:	2800      	cmp	r0, #0
 80073f2:	bfab      	itete	ge
 80073f4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80073f6:	89a3      	ldrhlt	r3, [r4, #12]
 80073f8:	181b      	addge	r3, r3, r0
 80073fa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80073fe:	bfac      	ite	ge
 8007400:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007402:	81a3      	strhlt	r3, [r4, #12]
 8007404:	bd10      	pop	{r4, pc}

08007406 <__swrite>:
 8007406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800740a:	461f      	mov	r7, r3
 800740c:	898b      	ldrh	r3, [r1, #12]
 800740e:	05db      	lsls	r3, r3, #23
 8007410:	4605      	mov	r5, r0
 8007412:	460c      	mov	r4, r1
 8007414:	4616      	mov	r6, r2
 8007416:	d505      	bpl.n	8007424 <__swrite+0x1e>
 8007418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800741c:	2302      	movs	r3, #2
 800741e:	2200      	movs	r2, #0
 8007420:	f000 f840 	bl	80074a4 <_lseek_r>
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800742a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800742e:	81a3      	strh	r3, [r4, #12]
 8007430:	4632      	mov	r2, r6
 8007432:	463b      	mov	r3, r7
 8007434:	4628      	mov	r0, r5
 8007436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800743a:	f000 b857 	b.w	80074ec <_write_r>

0800743e <__sseek>:
 800743e:	b510      	push	{r4, lr}
 8007440:	460c      	mov	r4, r1
 8007442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007446:	f000 f82d 	bl	80074a4 <_lseek_r>
 800744a:	1c43      	adds	r3, r0, #1
 800744c:	89a3      	ldrh	r3, [r4, #12]
 800744e:	bf15      	itete	ne
 8007450:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007452:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007456:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800745a:	81a3      	strheq	r3, [r4, #12]
 800745c:	bf18      	it	ne
 800745e:	81a3      	strhne	r3, [r4, #12]
 8007460:	bd10      	pop	{r4, pc}

08007462 <__sclose>:
 8007462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007466:	f000 b80d 	b.w	8007484 <_close_r>

0800746a <memset>:
 800746a:	4402      	add	r2, r0
 800746c:	4603      	mov	r3, r0
 800746e:	4293      	cmp	r3, r2
 8007470:	d100      	bne.n	8007474 <memset+0xa>
 8007472:	4770      	bx	lr
 8007474:	f803 1b01 	strb.w	r1, [r3], #1
 8007478:	e7f9      	b.n	800746e <memset+0x4>
	...

0800747c <_localeconv_r>:
 800747c:	4800      	ldr	r0, [pc, #0]	@ (8007480 <_localeconv_r+0x4>)
 800747e:	4770      	bx	lr
 8007480:	24000178 	.word	0x24000178

08007484 <_close_r>:
 8007484:	b538      	push	{r3, r4, r5, lr}
 8007486:	4d06      	ldr	r5, [pc, #24]	@ (80074a0 <_close_r+0x1c>)
 8007488:	2300      	movs	r3, #0
 800748a:	4604      	mov	r4, r0
 800748c:	4608      	mov	r0, r1
 800748e:	602b      	str	r3, [r5, #0]
 8007490:	f7fa f85e 	bl	8001550 <_close>
 8007494:	1c43      	adds	r3, r0, #1
 8007496:	d102      	bne.n	800749e <_close_r+0x1a>
 8007498:	682b      	ldr	r3, [r5, #0]
 800749a:	b103      	cbz	r3, 800749e <_close_r+0x1a>
 800749c:	6023      	str	r3, [r4, #0]
 800749e:	bd38      	pop	{r3, r4, r5, pc}
 80074a0:	24000580 	.word	0x24000580

080074a4 <_lseek_r>:
 80074a4:	b538      	push	{r3, r4, r5, lr}
 80074a6:	4d07      	ldr	r5, [pc, #28]	@ (80074c4 <_lseek_r+0x20>)
 80074a8:	4604      	mov	r4, r0
 80074aa:	4608      	mov	r0, r1
 80074ac:	4611      	mov	r1, r2
 80074ae:	2200      	movs	r2, #0
 80074b0:	602a      	str	r2, [r5, #0]
 80074b2:	461a      	mov	r2, r3
 80074b4:	f7fa f873 	bl	800159e <_lseek>
 80074b8:	1c43      	adds	r3, r0, #1
 80074ba:	d102      	bne.n	80074c2 <_lseek_r+0x1e>
 80074bc:	682b      	ldr	r3, [r5, #0]
 80074be:	b103      	cbz	r3, 80074c2 <_lseek_r+0x1e>
 80074c0:	6023      	str	r3, [r4, #0]
 80074c2:	bd38      	pop	{r3, r4, r5, pc}
 80074c4:	24000580 	.word	0x24000580

080074c8 <_read_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	4d07      	ldr	r5, [pc, #28]	@ (80074e8 <_read_r+0x20>)
 80074cc:	4604      	mov	r4, r0
 80074ce:	4608      	mov	r0, r1
 80074d0:	4611      	mov	r1, r2
 80074d2:	2200      	movs	r2, #0
 80074d4:	602a      	str	r2, [r5, #0]
 80074d6:	461a      	mov	r2, r3
 80074d8:	f7fa f801 	bl	80014de <_read>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	d102      	bne.n	80074e6 <_read_r+0x1e>
 80074e0:	682b      	ldr	r3, [r5, #0]
 80074e2:	b103      	cbz	r3, 80074e6 <_read_r+0x1e>
 80074e4:	6023      	str	r3, [r4, #0]
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	24000580 	.word	0x24000580

080074ec <_write_r>:
 80074ec:	b538      	push	{r3, r4, r5, lr}
 80074ee:	4d07      	ldr	r5, [pc, #28]	@ (800750c <_write_r+0x20>)
 80074f0:	4604      	mov	r4, r0
 80074f2:	4608      	mov	r0, r1
 80074f4:	4611      	mov	r1, r2
 80074f6:	2200      	movs	r2, #0
 80074f8:	602a      	str	r2, [r5, #0]
 80074fa:	461a      	mov	r2, r3
 80074fc:	f7fa f80c 	bl	8001518 <_write>
 8007500:	1c43      	adds	r3, r0, #1
 8007502:	d102      	bne.n	800750a <_write_r+0x1e>
 8007504:	682b      	ldr	r3, [r5, #0]
 8007506:	b103      	cbz	r3, 800750a <_write_r+0x1e>
 8007508:	6023      	str	r3, [r4, #0]
 800750a:	bd38      	pop	{r3, r4, r5, pc}
 800750c:	24000580 	.word	0x24000580

08007510 <__errno>:
 8007510:	4b01      	ldr	r3, [pc, #4]	@ (8007518 <__errno+0x8>)
 8007512:	6818      	ldr	r0, [r3, #0]
 8007514:	4770      	bx	lr
 8007516:	bf00      	nop
 8007518:	24000038 	.word	0x24000038

0800751c <__libc_init_array>:
 800751c:	b570      	push	{r4, r5, r6, lr}
 800751e:	4d0d      	ldr	r5, [pc, #52]	@ (8007554 <__libc_init_array+0x38>)
 8007520:	4c0d      	ldr	r4, [pc, #52]	@ (8007558 <__libc_init_array+0x3c>)
 8007522:	1b64      	subs	r4, r4, r5
 8007524:	10a4      	asrs	r4, r4, #2
 8007526:	2600      	movs	r6, #0
 8007528:	42a6      	cmp	r6, r4
 800752a:	d109      	bne.n	8007540 <__libc_init_array+0x24>
 800752c:	4d0b      	ldr	r5, [pc, #44]	@ (800755c <__libc_init_array+0x40>)
 800752e:	4c0c      	ldr	r4, [pc, #48]	@ (8007560 <__libc_init_array+0x44>)
 8007530:	f003 fab0 	bl	800aa94 <_init>
 8007534:	1b64      	subs	r4, r4, r5
 8007536:	10a4      	asrs	r4, r4, #2
 8007538:	2600      	movs	r6, #0
 800753a:	42a6      	cmp	r6, r4
 800753c:	d105      	bne.n	800754a <__libc_init_array+0x2e>
 800753e:	bd70      	pop	{r4, r5, r6, pc}
 8007540:	f855 3b04 	ldr.w	r3, [r5], #4
 8007544:	4798      	blx	r3
 8007546:	3601      	adds	r6, #1
 8007548:	e7ee      	b.n	8007528 <__libc_init_array+0xc>
 800754a:	f855 3b04 	ldr.w	r3, [r5], #4
 800754e:	4798      	blx	r3
 8007550:	3601      	adds	r6, #1
 8007552:	e7f2      	b.n	800753a <__libc_init_array+0x1e>
 8007554:	0800af50 	.word	0x0800af50
 8007558:	0800af50 	.word	0x0800af50
 800755c:	0800af50 	.word	0x0800af50
 8007560:	0800af54 	.word	0x0800af54

08007564 <__retarget_lock_init_recursive>:
 8007564:	4770      	bx	lr

08007566 <__retarget_lock_acquire_recursive>:
 8007566:	4770      	bx	lr

08007568 <__retarget_lock_release_recursive>:
 8007568:	4770      	bx	lr
	...

0800756c <nanf>:
 800756c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007574 <nanf+0x8>
 8007570:	4770      	bx	lr
 8007572:	bf00      	nop
 8007574:	7fc00000 	.word	0x7fc00000

08007578 <quorem>:
 8007578:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800757c:	6903      	ldr	r3, [r0, #16]
 800757e:	690c      	ldr	r4, [r1, #16]
 8007580:	42a3      	cmp	r3, r4
 8007582:	4607      	mov	r7, r0
 8007584:	db7e      	blt.n	8007684 <quorem+0x10c>
 8007586:	3c01      	subs	r4, #1
 8007588:	f101 0814 	add.w	r8, r1, #20
 800758c:	00a3      	lsls	r3, r4, #2
 800758e:	f100 0514 	add.w	r5, r0, #20
 8007592:	9300      	str	r3, [sp, #0]
 8007594:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007598:	9301      	str	r3, [sp, #4]
 800759a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800759e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80075a2:	3301      	adds	r3, #1
 80075a4:	429a      	cmp	r2, r3
 80075a6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80075aa:	fbb2 f6f3 	udiv	r6, r2, r3
 80075ae:	d32e      	bcc.n	800760e <quorem+0x96>
 80075b0:	f04f 0a00 	mov.w	sl, #0
 80075b4:	46c4      	mov	ip, r8
 80075b6:	46ae      	mov	lr, r5
 80075b8:	46d3      	mov	fp, sl
 80075ba:	f85c 3b04 	ldr.w	r3, [ip], #4
 80075be:	b298      	uxth	r0, r3
 80075c0:	fb06 a000 	mla	r0, r6, r0, sl
 80075c4:	0c02      	lsrs	r2, r0, #16
 80075c6:	0c1b      	lsrs	r3, r3, #16
 80075c8:	fb06 2303 	mla	r3, r6, r3, r2
 80075cc:	f8de 2000 	ldr.w	r2, [lr]
 80075d0:	b280      	uxth	r0, r0
 80075d2:	b292      	uxth	r2, r2
 80075d4:	1a12      	subs	r2, r2, r0
 80075d6:	445a      	add	r2, fp
 80075d8:	f8de 0000 	ldr.w	r0, [lr]
 80075dc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80075e0:	b29b      	uxth	r3, r3
 80075e2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80075e6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80075ea:	b292      	uxth	r2, r2
 80075ec:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80075f0:	45e1      	cmp	r9, ip
 80075f2:	f84e 2b04 	str.w	r2, [lr], #4
 80075f6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80075fa:	d2de      	bcs.n	80075ba <quorem+0x42>
 80075fc:	9b00      	ldr	r3, [sp, #0]
 80075fe:	58eb      	ldr	r3, [r5, r3]
 8007600:	b92b      	cbnz	r3, 800760e <quorem+0x96>
 8007602:	9b01      	ldr	r3, [sp, #4]
 8007604:	3b04      	subs	r3, #4
 8007606:	429d      	cmp	r5, r3
 8007608:	461a      	mov	r2, r3
 800760a:	d32f      	bcc.n	800766c <quorem+0xf4>
 800760c:	613c      	str	r4, [r7, #16]
 800760e:	4638      	mov	r0, r7
 8007610:	f001 f954 	bl	80088bc <__mcmp>
 8007614:	2800      	cmp	r0, #0
 8007616:	db25      	blt.n	8007664 <quorem+0xec>
 8007618:	4629      	mov	r1, r5
 800761a:	2000      	movs	r0, #0
 800761c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007620:	f8d1 c000 	ldr.w	ip, [r1]
 8007624:	fa1f fe82 	uxth.w	lr, r2
 8007628:	fa1f f38c 	uxth.w	r3, ip
 800762c:	eba3 030e 	sub.w	r3, r3, lr
 8007630:	4403      	add	r3, r0
 8007632:	0c12      	lsrs	r2, r2, #16
 8007634:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007638:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800763c:	b29b      	uxth	r3, r3
 800763e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007642:	45c1      	cmp	r9, r8
 8007644:	f841 3b04 	str.w	r3, [r1], #4
 8007648:	ea4f 4022 	mov.w	r0, r2, asr #16
 800764c:	d2e6      	bcs.n	800761c <quorem+0xa4>
 800764e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007652:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007656:	b922      	cbnz	r2, 8007662 <quorem+0xea>
 8007658:	3b04      	subs	r3, #4
 800765a:	429d      	cmp	r5, r3
 800765c:	461a      	mov	r2, r3
 800765e:	d30b      	bcc.n	8007678 <quorem+0x100>
 8007660:	613c      	str	r4, [r7, #16]
 8007662:	3601      	adds	r6, #1
 8007664:	4630      	mov	r0, r6
 8007666:	b003      	add	sp, #12
 8007668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800766c:	6812      	ldr	r2, [r2, #0]
 800766e:	3b04      	subs	r3, #4
 8007670:	2a00      	cmp	r2, #0
 8007672:	d1cb      	bne.n	800760c <quorem+0x94>
 8007674:	3c01      	subs	r4, #1
 8007676:	e7c6      	b.n	8007606 <quorem+0x8e>
 8007678:	6812      	ldr	r2, [r2, #0]
 800767a:	3b04      	subs	r3, #4
 800767c:	2a00      	cmp	r2, #0
 800767e:	d1ef      	bne.n	8007660 <quorem+0xe8>
 8007680:	3c01      	subs	r4, #1
 8007682:	e7ea      	b.n	800765a <quorem+0xe2>
 8007684:	2000      	movs	r0, #0
 8007686:	e7ee      	b.n	8007666 <quorem+0xee>

08007688 <_dtoa_r>:
 8007688:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768c:	ed2d 8b02 	vpush	{d8}
 8007690:	69c7      	ldr	r7, [r0, #28]
 8007692:	b091      	sub	sp, #68	@ 0x44
 8007694:	ed8d 0b02 	vstr	d0, [sp, #8]
 8007698:	ec55 4b10 	vmov	r4, r5, d0
 800769c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800769e:	9107      	str	r1, [sp, #28]
 80076a0:	4681      	mov	r9, r0
 80076a2:	9209      	str	r2, [sp, #36]	@ 0x24
 80076a4:	930d      	str	r3, [sp, #52]	@ 0x34
 80076a6:	b97f      	cbnz	r7, 80076c8 <_dtoa_r+0x40>
 80076a8:	2010      	movs	r0, #16
 80076aa:	f000 fd8d 	bl	80081c8 <malloc>
 80076ae:	4602      	mov	r2, r0
 80076b0:	f8c9 001c 	str.w	r0, [r9, #28]
 80076b4:	b920      	cbnz	r0, 80076c0 <_dtoa_r+0x38>
 80076b6:	4ba0      	ldr	r3, [pc, #640]	@ (8007938 <_dtoa_r+0x2b0>)
 80076b8:	21ef      	movs	r1, #239	@ 0xef
 80076ba:	48a0      	ldr	r0, [pc, #640]	@ (800793c <_dtoa_r+0x2b4>)
 80076bc:	f002 fb74 	bl	8009da8 <__assert_func>
 80076c0:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80076c4:	6007      	str	r7, [r0, #0]
 80076c6:	60c7      	str	r7, [r0, #12]
 80076c8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80076cc:	6819      	ldr	r1, [r3, #0]
 80076ce:	b159      	cbz	r1, 80076e8 <_dtoa_r+0x60>
 80076d0:	685a      	ldr	r2, [r3, #4]
 80076d2:	604a      	str	r2, [r1, #4]
 80076d4:	2301      	movs	r3, #1
 80076d6:	4093      	lsls	r3, r2
 80076d8:	608b      	str	r3, [r1, #8]
 80076da:	4648      	mov	r0, r9
 80076dc:	f000 fe6a 	bl	80083b4 <_Bfree>
 80076e0:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80076e4:	2200      	movs	r2, #0
 80076e6:	601a      	str	r2, [r3, #0]
 80076e8:	1e2b      	subs	r3, r5, #0
 80076ea:	bfbb      	ittet	lt
 80076ec:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80076f0:	9303      	strlt	r3, [sp, #12]
 80076f2:	2300      	movge	r3, #0
 80076f4:	2201      	movlt	r2, #1
 80076f6:	bfac      	ite	ge
 80076f8:	6033      	strge	r3, [r6, #0]
 80076fa:	6032      	strlt	r2, [r6, #0]
 80076fc:	4b90      	ldr	r3, [pc, #576]	@ (8007940 <_dtoa_r+0x2b8>)
 80076fe:	9e03      	ldr	r6, [sp, #12]
 8007700:	43b3      	bics	r3, r6
 8007702:	d110      	bne.n	8007726 <_dtoa_r+0x9e>
 8007704:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007706:	f242 730f 	movw	r3, #9999	@ 0x270f
 800770a:	6013      	str	r3, [r2, #0]
 800770c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8007710:	4323      	orrs	r3, r4
 8007712:	f000 84de 	beq.w	80080d2 <_dtoa_r+0xa4a>
 8007716:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007718:	4f8a      	ldr	r7, [pc, #552]	@ (8007944 <_dtoa_r+0x2bc>)
 800771a:	2b00      	cmp	r3, #0
 800771c:	f000 84e0 	beq.w	80080e0 <_dtoa_r+0xa58>
 8007720:	1cfb      	adds	r3, r7, #3
 8007722:	f000 bcdb 	b.w	80080dc <_dtoa_r+0xa54>
 8007726:	ed9d 8b02 	vldr	d8, [sp, #8]
 800772a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800772e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007732:	d10a      	bne.n	800774a <_dtoa_r+0xc2>
 8007734:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007736:	2301      	movs	r3, #1
 8007738:	6013      	str	r3, [r2, #0]
 800773a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800773c:	b113      	cbz	r3, 8007744 <_dtoa_r+0xbc>
 800773e:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8007740:	4b81      	ldr	r3, [pc, #516]	@ (8007948 <_dtoa_r+0x2c0>)
 8007742:	6013      	str	r3, [r2, #0]
 8007744:	4f81      	ldr	r7, [pc, #516]	@ (800794c <_dtoa_r+0x2c4>)
 8007746:	f000 bccb 	b.w	80080e0 <_dtoa_r+0xa58>
 800774a:	aa0e      	add	r2, sp, #56	@ 0x38
 800774c:	a90f      	add	r1, sp, #60	@ 0x3c
 800774e:	4648      	mov	r0, r9
 8007750:	eeb0 0b48 	vmov.f64	d0, d8
 8007754:	f001 f9d2 	bl	8008afc <__d2b>
 8007758:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800775c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800775e:	9001      	str	r0, [sp, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d045      	beq.n	80077f0 <_dtoa_r+0x168>
 8007764:	eeb0 7b48 	vmov.f64	d7, d8
 8007768:	ee18 1a90 	vmov	r1, s17
 800776c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8007770:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 8007774:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8007778:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800777c:	2500      	movs	r5, #0
 800777e:	ee07 1a90 	vmov	s15, r1
 8007782:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 8007786:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007920 <_dtoa_r+0x298>
 800778a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800778e:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8007928 <_dtoa_r+0x2a0>
 8007792:	eea7 6b05 	vfma.f64	d6, d7, d5
 8007796:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8007930 <_dtoa_r+0x2a8>
 800779a:	ee07 3a90 	vmov	s15, r3
 800779e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80077a2:	eeb0 7b46 	vmov.f64	d7, d6
 80077a6:	eea4 7b05 	vfma.f64	d7, d4, d5
 80077aa:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 80077ae:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 80077b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077b6:	ee16 8a90 	vmov	r8, s13
 80077ba:	d508      	bpl.n	80077ce <_dtoa_r+0x146>
 80077bc:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 80077c0:	eeb4 6b47 	vcmp.f64	d6, d7
 80077c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077c8:	bf18      	it	ne
 80077ca:	f108 38ff 	addne.w	r8, r8, #4294967295
 80077ce:	f1b8 0f16 	cmp.w	r8, #22
 80077d2:	d82b      	bhi.n	800782c <_dtoa_r+0x1a4>
 80077d4:	495e      	ldr	r1, [pc, #376]	@ (8007950 <_dtoa_r+0x2c8>)
 80077d6:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 80077da:	ed91 7b00 	vldr	d7, [r1]
 80077de:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80077e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e6:	d501      	bpl.n	80077ec <_dtoa_r+0x164>
 80077e8:	f108 38ff 	add.w	r8, r8, #4294967295
 80077ec:	2100      	movs	r1, #0
 80077ee:	e01e      	b.n	800782e <_dtoa_r+0x1a6>
 80077f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80077f2:	4413      	add	r3, r2
 80077f4:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 80077f8:	2920      	cmp	r1, #32
 80077fa:	bfc1      	itttt	gt
 80077fc:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8007800:	408e      	lslgt	r6, r1
 8007802:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 8007806:	fa24 f101 	lsrgt.w	r1, r4, r1
 800780a:	bfd6      	itet	le
 800780c:	f1c1 0120 	rsble	r1, r1, #32
 8007810:	4331      	orrgt	r1, r6
 8007812:	fa04 f101 	lslle.w	r1, r4, r1
 8007816:	ee07 1a90 	vmov	s15, r1
 800781a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800781e:	3b01      	subs	r3, #1
 8007820:	ee17 1a90 	vmov	r1, s15
 8007824:	2501      	movs	r5, #1
 8007826:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800782a:	e7a8      	b.n	800777e <_dtoa_r+0xf6>
 800782c:	2101      	movs	r1, #1
 800782e:	1ad2      	subs	r2, r2, r3
 8007830:	1e53      	subs	r3, r2, #1
 8007832:	9306      	str	r3, [sp, #24]
 8007834:	bf45      	ittet	mi
 8007836:	f1c2 0301 	rsbmi	r3, r2, #1
 800783a:	9305      	strmi	r3, [sp, #20]
 800783c:	2300      	movpl	r3, #0
 800783e:	2300      	movmi	r3, #0
 8007840:	bf4c      	ite	mi
 8007842:	9306      	strmi	r3, [sp, #24]
 8007844:	9305      	strpl	r3, [sp, #20]
 8007846:	f1b8 0f00 	cmp.w	r8, #0
 800784a:	910c      	str	r1, [sp, #48]	@ 0x30
 800784c:	db18      	blt.n	8007880 <_dtoa_r+0x1f8>
 800784e:	9b06      	ldr	r3, [sp, #24]
 8007850:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007854:	4443      	add	r3, r8
 8007856:	9306      	str	r3, [sp, #24]
 8007858:	2300      	movs	r3, #0
 800785a:	9a07      	ldr	r2, [sp, #28]
 800785c:	2a09      	cmp	r2, #9
 800785e:	d849      	bhi.n	80078f4 <_dtoa_r+0x26c>
 8007860:	2a05      	cmp	r2, #5
 8007862:	bfc4      	itt	gt
 8007864:	3a04      	subgt	r2, #4
 8007866:	9207      	strgt	r2, [sp, #28]
 8007868:	9a07      	ldr	r2, [sp, #28]
 800786a:	f1a2 0202 	sub.w	r2, r2, #2
 800786e:	bfcc      	ite	gt
 8007870:	2400      	movgt	r4, #0
 8007872:	2401      	movle	r4, #1
 8007874:	2a03      	cmp	r2, #3
 8007876:	d848      	bhi.n	800790a <_dtoa_r+0x282>
 8007878:	e8df f002 	tbb	[pc, r2]
 800787c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007880:	9b05      	ldr	r3, [sp, #20]
 8007882:	2200      	movs	r2, #0
 8007884:	eba3 0308 	sub.w	r3, r3, r8
 8007888:	9305      	str	r3, [sp, #20]
 800788a:	920a      	str	r2, [sp, #40]	@ 0x28
 800788c:	f1c8 0300 	rsb	r3, r8, #0
 8007890:	e7e3      	b.n	800785a <_dtoa_r+0x1d2>
 8007892:	2200      	movs	r2, #0
 8007894:	9208      	str	r2, [sp, #32]
 8007896:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007898:	2a00      	cmp	r2, #0
 800789a:	dc39      	bgt.n	8007910 <_dtoa_r+0x288>
 800789c:	f04f 0b01 	mov.w	fp, #1
 80078a0:	46da      	mov	sl, fp
 80078a2:	465a      	mov	r2, fp
 80078a4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80078a8:	f8d9 701c 	ldr.w	r7, [r9, #28]
 80078ac:	2100      	movs	r1, #0
 80078ae:	2004      	movs	r0, #4
 80078b0:	f100 0614 	add.w	r6, r0, #20
 80078b4:	4296      	cmp	r6, r2
 80078b6:	d930      	bls.n	800791a <_dtoa_r+0x292>
 80078b8:	6079      	str	r1, [r7, #4]
 80078ba:	4648      	mov	r0, r9
 80078bc:	9304      	str	r3, [sp, #16]
 80078be:	f000 fd39 	bl	8008334 <_Balloc>
 80078c2:	9b04      	ldr	r3, [sp, #16]
 80078c4:	4607      	mov	r7, r0
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d146      	bne.n	8007958 <_dtoa_r+0x2d0>
 80078ca:	4b22      	ldr	r3, [pc, #136]	@ (8007954 <_dtoa_r+0x2cc>)
 80078cc:	4602      	mov	r2, r0
 80078ce:	f240 11af 	movw	r1, #431	@ 0x1af
 80078d2:	e6f2      	b.n	80076ba <_dtoa_r+0x32>
 80078d4:	2201      	movs	r2, #1
 80078d6:	e7dd      	b.n	8007894 <_dtoa_r+0x20c>
 80078d8:	2200      	movs	r2, #0
 80078da:	9208      	str	r2, [sp, #32]
 80078dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078de:	eb08 0b02 	add.w	fp, r8, r2
 80078e2:	f10b 0a01 	add.w	sl, fp, #1
 80078e6:	4652      	mov	r2, sl
 80078e8:	2a01      	cmp	r2, #1
 80078ea:	bfb8      	it	lt
 80078ec:	2201      	movlt	r2, #1
 80078ee:	e7db      	b.n	80078a8 <_dtoa_r+0x220>
 80078f0:	2201      	movs	r2, #1
 80078f2:	e7f2      	b.n	80078da <_dtoa_r+0x252>
 80078f4:	2401      	movs	r4, #1
 80078f6:	2200      	movs	r2, #0
 80078f8:	e9cd 2407 	strd	r2, r4, [sp, #28]
 80078fc:	f04f 3bff 	mov.w	fp, #4294967295
 8007900:	2100      	movs	r1, #0
 8007902:	46da      	mov	sl, fp
 8007904:	2212      	movs	r2, #18
 8007906:	9109      	str	r1, [sp, #36]	@ 0x24
 8007908:	e7ce      	b.n	80078a8 <_dtoa_r+0x220>
 800790a:	2201      	movs	r2, #1
 800790c:	9208      	str	r2, [sp, #32]
 800790e:	e7f5      	b.n	80078fc <_dtoa_r+0x274>
 8007910:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 8007914:	46da      	mov	sl, fp
 8007916:	465a      	mov	r2, fp
 8007918:	e7c6      	b.n	80078a8 <_dtoa_r+0x220>
 800791a:	3101      	adds	r1, #1
 800791c:	0040      	lsls	r0, r0, #1
 800791e:	e7c7      	b.n	80078b0 <_dtoa_r+0x228>
 8007920:	636f4361 	.word	0x636f4361
 8007924:	3fd287a7 	.word	0x3fd287a7
 8007928:	8b60c8b3 	.word	0x8b60c8b3
 800792c:	3fc68a28 	.word	0x3fc68a28
 8007930:	509f79fb 	.word	0x509f79fb
 8007934:	3fd34413 	.word	0x3fd34413
 8007938:	0800ab62 	.word	0x0800ab62
 800793c:	0800ab79 	.word	0x0800ab79
 8007940:	7ff00000 	.word	0x7ff00000
 8007944:	0800ab5e 	.word	0x0800ab5e
 8007948:	0800ab2d 	.word	0x0800ab2d
 800794c:	0800ab2c 	.word	0x0800ab2c
 8007950:	0800ac70 	.word	0x0800ac70
 8007954:	0800abd1 	.word	0x0800abd1
 8007958:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800795c:	f1ba 0f0e 	cmp.w	sl, #14
 8007960:	6010      	str	r0, [r2, #0]
 8007962:	d86f      	bhi.n	8007a44 <_dtoa_r+0x3bc>
 8007964:	2c00      	cmp	r4, #0
 8007966:	d06d      	beq.n	8007a44 <_dtoa_r+0x3bc>
 8007968:	f1b8 0f00 	cmp.w	r8, #0
 800796c:	f340 80c2 	ble.w	8007af4 <_dtoa_r+0x46c>
 8007970:	4aca      	ldr	r2, [pc, #808]	@ (8007c9c <_dtoa_r+0x614>)
 8007972:	f008 010f 	and.w	r1, r8, #15
 8007976:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800797a:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800797e:	ed92 7b00 	vldr	d7, [r2]
 8007982:	ea4f 1128 	mov.w	r1, r8, asr #4
 8007986:	f000 80a9 	beq.w	8007adc <_dtoa_r+0x454>
 800798a:	4ac5      	ldr	r2, [pc, #788]	@ (8007ca0 <_dtoa_r+0x618>)
 800798c:	ed92 6b08 	vldr	d6, [r2, #32]
 8007990:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8007994:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007998:	f001 010f 	and.w	r1, r1, #15
 800799c:	2203      	movs	r2, #3
 800799e:	48c0      	ldr	r0, [pc, #768]	@ (8007ca0 <_dtoa_r+0x618>)
 80079a0:	2900      	cmp	r1, #0
 80079a2:	f040 809d 	bne.w	8007ae0 <_dtoa_r+0x458>
 80079a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80079aa:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80079ae:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079b2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80079b4:	ed9d 7b02 	vldr	d7, [sp, #8]
 80079b8:	2900      	cmp	r1, #0
 80079ba:	f000 80c1 	beq.w	8007b40 <_dtoa_r+0x4b8>
 80079be:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 80079c2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80079c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80079ca:	f140 80b9 	bpl.w	8007b40 <_dtoa_r+0x4b8>
 80079ce:	f1ba 0f00 	cmp.w	sl, #0
 80079d2:	f000 80b5 	beq.w	8007b40 <_dtoa_r+0x4b8>
 80079d6:	f1bb 0f00 	cmp.w	fp, #0
 80079da:	dd31      	ble.n	8007a40 <_dtoa_r+0x3b8>
 80079dc:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 80079e0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80079e4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80079e8:	f108 31ff 	add.w	r1, r8, #4294967295
 80079ec:	9104      	str	r1, [sp, #16]
 80079ee:	3201      	adds	r2, #1
 80079f0:	465c      	mov	r4, fp
 80079f2:	ed9d 6b02 	vldr	d6, [sp, #8]
 80079f6:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 80079fa:	ee07 2a90 	vmov	s15, r2
 80079fe:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8007a02:	eea7 5b06 	vfma.f64	d5, d7, d6
 8007a06:	ee15 2a90 	vmov	r2, s11
 8007a0a:	ec51 0b15 	vmov	r0, r1, d5
 8007a0e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 8007a12:	2c00      	cmp	r4, #0
 8007a14:	f040 8098 	bne.w	8007b48 <_dtoa_r+0x4c0>
 8007a18:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007a1c:	ee36 6b47 	vsub.f64	d6, d6, d7
 8007a20:	ec41 0b17 	vmov	d7, r0, r1
 8007a24:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a2c:	f300 8261 	bgt.w	8007ef2 <_dtoa_r+0x86a>
 8007a30:	eeb1 7b47 	vneg.f64	d7, d7
 8007a34:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007a3c:	f100 80f5 	bmi.w	8007c2a <_dtoa_r+0x5a2>
 8007a40:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007a44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007a46:	2a00      	cmp	r2, #0
 8007a48:	f2c0 812c 	blt.w	8007ca4 <_dtoa_r+0x61c>
 8007a4c:	f1b8 0f0e 	cmp.w	r8, #14
 8007a50:	f300 8128 	bgt.w	8007ca4 <_dtoa_r+0x61c>
 8007a54:	4b91      	ldr	r3, [pc, #580]	@ (8007c9c <_dtoa_r+0x614>)
 8007a56:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8007a5a:	ed93 6b00 	vldr	d6, [r3]
 8007a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	da03      	bge.n	8007a6c <_dtoa_r+0x3e4>
 8007a64:	f1ba 0f00 	cmp.w	sl, #0
 8007a68:	f340 80d2 	ble.w	8007c10 <_dtoa_r+0x588>
 8007a6c:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8007a70:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007a74:	463e      	mov	r6, r7
 8007a76:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8007a7a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8007a7e:	ee15 3a10 	vmov	r3, s10
 8007a82:	3330      	adds	r3, #48	@ 0x30
 8007a84:	f806 3b01 	strb.w	r3, [r6], #1
 8007a88:	1bf3      	subs	r3, r6, r7
 8007a8a:	459a      	cmp	sl, r3
 8007a8c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8007a90:	eea3 7b46 	vfms.f64	d7, d3, d6
 8007a94:	f040 80f8 	bne.w	8007c88 <_dtoa_r+0x600>
 8007a98:	ee37 7b07 	vadd.f64	d7, d7, d7
 8007a9c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8007aa0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007aa4:	f300 80dd 	bgt.w	8007c62 <_dtoa_r+0x5da>
 8007aa8:	eeb4 7b46 	vcmp.f64	d7, d6
 8007aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ab0:	d104      	bne.n	8007abc <_dtoa_r+0x434>
 8007ab2:	ee15 3a10 	vmov	r3, s10
 8007ab6:	07db      	lsls	r3, r3, #31
 8007ab8:	f100 80d3 	bmi.w	8007c62 <_dtoa_r+0x5da>
 8007abc:	9901      	ldr	r1, [sp, #4]
 8007abe:	4648      	mov	r0, r9
 8007ac0:	f000 fc78 	bl	80083b4 <_Bfree>
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ac8:	7033      	strb	r3, [r6, #0]
 8007aca:	f108 0301 	add.w	r3, r8, #1
 8007ace:	6013      	str	r3, [r2, #0]
 8007ad0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	f000 8304 	beq.w	80080e0 <_dtoa_r+0xa58>
 8007ad8:	601e      	str	r6, [r3, #0]
 8007ada:	e301      	b.n	80080e0 <_dtoa_r+0xa58>
 8007adc:	2202      	movs	r2, #2
 8007ade:	e75e      	b.n	800799e <_dtoa_r+0x316>
 8007ae0:	07cc      	lsls	r4, r1, #31
 8007ae2:	d504      	bpl.n	8007aee <_dtoa_r+0x466>
 8007ae4:	ed90 6b00 	vldr	d6, [r0]
 8007ae8:	3201      	adds	r2, #1
 8007aea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007aee:	1049      	asrs	r1, r1, #1
 8007af0:	3008      	adds	r0, #8
 8007af2:	e755      	b.n	80079a0 <_dtoa_r+0x318>
 8007af4:	d022      	beq.n	8007b3c <_dtoa_r+0x4b4>
 8007af6:	f1c8 0100 	rsb	r1, r8, #0
 8007afa:	4a68      	ldr	r2, [pc, #416]	@ (8007c9c <_dtoa_r+0x614>)
 8007afc:	f001 000f 	and.w	r0, r1, #15
 8007b00:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007b04:	ed92 7b00 	vldr	d7, [r2]
 8007b08:	ee28 7b07 	vmul.f64	d7, d8, d7
 8007b0c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b10:	4863      	ldr	r0, [pc, #396]	@ (8007ca0 <_dtoa_r+0x618>)
 8007b12:	1109      	asrs	r1, r1, #4
 8007b14:	2400      	movs	r4, #0
 8007b16:	2202      	movs	r2, #2
 8007b18:	b929      	cbnz	r1, 8007b26 <_dtoa_r+0x49e>
 8007b1a:	2c00      	cmp	r4, #0
 8007b1c:	f43f af49 	beq.w	80079b2 <_dtoa_r+0x32a>
 8007b20:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007b24:	e745      	b.n	80079b2 <_dtoa_r+0x32a>
 8007b26:	07ce      	lsls	r6, r1, #31
 8007b28:	d505      	bpl.n	8007b36 <_dtoa_r+0x4ae>
 8007b2a:	ed90 6b00 	vldr	d6, [r0]
 8007b2e:	3201      	adds	r2, #1
 8007b30:	2401      	movs	r4, #1
 8007b32:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007b36:	1049      	asrs	r1, r1, #1
 8007b38:	3008      	adds	r0, #8
 8007b3a:	e7ed      	b.n	8007b18 <_dtoa_r+0x490>
 8007b3c:	2202      	movs	r2, #2
 8007b3e:	e738      	b.n	80079b2 <_dtoa_r+0x32a>
 8007b40:	f8cd 8010 	str.w	r8, [sp, #16]
 8007b44:	4654      	mov	r4, sl
 8007b46:	e754      	b.n	80079f2 <_dtoa_r+0x36a>
 8007b48:	4a54      	ldr	r2, [pc, #336]	@ (8007c9c <_dtoa_r+0x614>)
 8007b4a:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8007b4e:	ed12 4b02 	vldr	d4, [r2, #-8]
 8007b52:	9a08      	ldr	r2, [sp, #32]
 8007b54:	ec41 0b17 	vmov	d7, r0, r1
 8007b58:	443c      	add	r4, r7
 8007b5a:	b34a      	cbz	r2, 8007bb0 <_dtoa_r+0x528>
 8007b5c:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 8007b60:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 8007b64:	463e      	mov	r6, r7
 8007b66:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007b6a:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007b6e:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007b72:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007b76:	ee14 2a90 	vmov	r2, s9
 8007b7a:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007b7e:	3230      	adds	r2, #48	@ 0x30
 8007b80:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007b84:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b8c:	f806 2b01 	strb.w	r2, [r6], #1
 8007b90:	d438      	bmi.n	8007c04 <_dtoa_r+0x57c>
 8007b92:	ee32 5b46 	vsub.f64	d5, d2, d6
 8007b96:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007b9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007b9e:	d462      	bmi.n	8007c66 <_dtoa_r+0x5de>
 8007ba0:	42a6      	cmp	r6, r4
 8007ba2:	f43f af4d 	beq.w	8007a40 <_dtoa_r+0x3b8>
 8007ba6:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007baa:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007bae:	e7e0      	b.n	8007b72 <_dtoa_r+0x4ea>
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	463e      	mov	r6, r7
 8007bb4:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007bb8:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8007bbc:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007bc0:	ee14 2a90 	vmov	r2, s9
 8007bc4:	3230      	adds	r2, #48	@ 0x30
 8007bc6:	f806 2b01 	strb.w	r2, [r6], #1
 8007bca:	42a6      	cmp	r6, r4
 8007bcc:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007bd0:	ee36 6b45 	vsub.f64	d6, d6, d5
 8007bd4:	d119      	bne.n	8007c0a <_dtoa_r+0x582>
 8007bd6:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8007bda:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007bde:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8007be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007be6:	dc3e      	bgt.n	8007c66 <_dtoa_r+0x5de>
 8007be8:	ee35 5b47 	vsub.f64	d5, d5, d7
 8007bec:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8007bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007bf4:	f57f af24 	bpl.w	8007a40 <_dtoa_r+0x3b8>
 8007bf8:	460e      	mov	r6, r1
 8007bfa:	3901      	subs	r1, #1
 8007bfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007c00:	2b30      	cmp	r3, #48	@ 0x30
 8007c02:	d0f9      	beq.n	8007bf8 <_dtoa_r+0x570>
 8007c04:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007c08:	e758      	b.n	8007abc <_dtoa_r+0x434>
 8007c0a:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007c0e:	e7d5      	b.n	8007bbc <_dtoa_r+0x534>
 8007c10:	d10b      	bne.n	8007c2a <_dtoa_r+0x5a2>
 8007c12:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8007c16:	ee26 6b07 	vmul.f64	d6, d6, d7
 8007c1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007c1e:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c26:	f2c0 8161 	blt.w	8007eec <_dtoa_r+0x864>
 8007c2a:	2400      	movs	r4, #0
 8007c2c:	4625      	mov	r5, r4
 8007c2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c30:	43db      	mvns	r3, r3
 8007c32:	9304      	str	r3, [sp, #16]
 8007c34:	463e      	mov	r6, r7
 8007c36:	f04f 0800 	mov.w	r8, #0
 8007c3a:	4621      	mov	r1, r4
 8007c3c:	4648      	mov	r0, r9
 8007c3e:	f000 fbb9 	bl	80083b4 <_Bfree>
 8007c42:	2d00      	cmp	r5, #0
 8007c44:	d0de      	beq.n	8007c04 <_dtoa_r+0x57c>
 8007c46:	f1b8 0f00 	cmp.w	r8, #0
 8007c4a:	d005      	beq.n	8007c58 <_dtoa_r+0x5d0>
 8007c4c:	45a8      	cmp	r8, r5
 8007c4e:	d003      	beq.n	8007c58 <_dtoa_r+0x5d0>
 8007c50:	4641      	mov	r1, r8
 8007c52:	4648      	mov	r0, r9
 8007c54:	f000 fbae 	bl	80083b4 <_Bfree>
 8007c58:	4629      	mov	r1, r5
 8007c5a:	4648      	mov	r0, r9
 8007c5c:	f000 fbaa 	bl	80083b4 <_Bfree>
 8007c60:	e7d0      	b.n	8007c04 <_dtoa_r+0x57c>
 8007c62:	f8cd 8010 	str.w	r8, [sp, #16]
 8007c66:	4633      	mov	r3, r6
 8007c68:	461e      	mov	r6, r3
 8007c6a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007c6e:	2a39      	cmp	r2, #57	@ 0x39
 8007c70:	d106      	bne.n	8007c80 <_dtoa_r+0x5f8>
 8007c72:	429f      	cmp	r7, r3
 8007c74:	d1f8      	bne.n	8007c68 <_dtoa_r+0x5e0>
 8007c76:	9a04      	ldr	r2, [sp, #16]
 8007c78:	3201      	adds	r2, #1
 8007c7a:	9204      	str	r2, [sp, #16]
 8007c7c:	2230      	movs	r2, #48	@ 0x30
 8007c7e:	703a      	strb	r2, [r7, #0]
 8007c80:	781a      	ldrb	r2, [r3, #0]
 8007c82:	3201      	adds	r2, #1
 8007c84:	701a      	strb	r2, [r3, #0]
 8007c86:	e7bd      	b.n	8007c04 <_dtoa_r+0x57c>
 8007c88:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007c8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007c90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007c94:	f47f aeef 	bne.w	8007a76 <_dtoa_r+0x3ee>
 8007c98:	e710      	b.n	8007abc <_dtoa_r+0x434>
 8007c9a:	bf00      	nop
 8007c9c:	0800ac70 	.word	0x0800ac70
 8007ca0:	0800ac48 	.word	0x0800ac48
 8007ca4:	9908      	ldr	r1, [sp, #32]
 8007ca6:	2900      	cmp	r1, #0
 8007ca8:	f000 80e3 	beq.w	8007e72 <_dtoa_r+0x7ea>
 8007cac:	9907      	ldr	r1, [sp, #28]
 8007cae:	2901      	cmp	r1, #1
 8007cb0:	f300 80c8 	bgt.w	8007e44 <_dtoa_r+0x7bc>
 8007cb4:	2d00      	cmp	r5, #0
 8007cb6:	f000 80c1 	beq.w	8007e3c <_dtoa_r+0x7b4>
 8007cba:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007cbe:	9e05      	ldr	r6, [sp, #20]
 8007cc0:	461c      	mov	r4, r3
 8007cc2:	9304      	str	r3, [sp, #16]
 8007cc4:	9b05      	ldr	r3, [sp, #20]
 8007cc6:	4413      	add	r3, r2
 8007cc8:	9305      	str	r3, [sp, #20]
 8007cca:	9b06      	ldr	r3, [sp, #24]
 8007ccc:	2101      	movs	r1, #1
 8007cce:	4413      	add	r3, r2
 8007cd0:	4648      	mov	r0, r9
 8007cd2:	9306      	str	r3, [sp, #24]
 8007cd4:	f000 fc6c 	bl	80085b0 <__i2b>
 8007cd8:	9b04      	ldr	r3, [sp, #16]
 8007cda:	4605      	mov	r5, r0
 8007cdc:	b166      	cbz	r6, 8007cf8 <_dtoa_r+0x670>
 8007cde:	9a06      	ldr	r2, [sp, #24]
 8007ce0:	2a00      	cmp	r2, #0
 8007ce2:	dd09      	ble.n	8007cf8 <_dtoa_r+0x670>
 8007ce4:	42b2      	cmp	r2, r6
 8007ce6:	9905      	ldr	r1, [sp, #20]
 8007ce8:	bfa8      	it	ge
 8007cea:	4632      	movge	r2, r6
 8007cec:	1a89      	subs	r1, r1, r2
 8007cee:	9105      	str	r1, [sp, #20]
 8007cf0:	9906      	ldr	r1, [sp, #24]
 8007cf2:	1ab6      	subs	r6, r6, r2
 8007cf4:	1a8a      	subs	r2, r1, r2
 8007cf6:	9206      	str	r2, [sp, #24]
 8007cf8:	b1fb      	cbz	r3, 8007d3a <_dtoa_r+0x6b2>
 8007cfa:	9a08      	ldr	r2, [sp, #32]
 8007cfc:	2a00      	cmp	r2, #0
 8007cfe:	f000 80bc 	beq.w	8007e7a <_dtoa_r+0x7f2>
 8007d02:	b19c      	cbz	r4, 8007d2c <_dtoa_r+0x6a4>
 8007d04:	4629      	mov	r1, r5
 8007d06:	4622      	mov	r2, r4
 8007d08:	4648      	mov	r0, r9
 8007d0a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d0c:	f000 fd10 	bl	8008730 <__pow5mult>
 8007d10:	9a01      	ldr	r2, [sp, #4]
 8007d12:	4601      	mov	r1, r0
 8007d14:	4605      	mov	r5, r0
 8007d16:	4648      	mov	r0, r9
 8007d18:	f000 fc60 	bl	80085dc <__multiply>
 8007d1c:	9901      	ldr	r1, [sp, #4]
 8007d1e:	9004      	str	r0, [sp, #16]
 8007d20:	4648      	mov	r0, r9
 8007d22:	f000 fb47 	bl	80083b4 <_Bfree>
 8007d26:	9a04      	ldr	r2, [sp, #16]
 8007d28:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d2a:	9201      	str	r2, [sp, #4]
 8007d2c:	1b1a      	subs	r2, r3, r4
 8007d2e:	d004      	beq.n	8007d3a <_dtoa_r+0x6b2>
 8007d30:	9901      	ldr	r1, [sp, #4]
 8007d32:	4648      	mov	r0, r9
 8007d34:	f000 fcfc 	bl	8008730 <__pow5mult>
 8007d38:	9001      	str	r0, [sp, #4]
 8007d3a:	2101      	movs	r1, #1
 8007d3c:	4648      	mov	r0, r9
 8007d3e:	f000 fc37 	bl	80085b0 <__i2b>
 8007d42:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d44:	4604      	mov	r4, r0
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	f000 81d0 	beq.w	80080ec <_dtoa_r+0xa64>
 8007d4c:	461a      	mov	r2, r3
 8007d4e:	4601      	mov	r1, r0
 8007d50:	4648      	mov	r0, r9
 8007d52:	f000 fced 	bl	8008730 <__pow5mult>
 8007d56:	9b07      	ldr	r3, [sp, #28]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	4604      	mov	r4, r0
 8007d5c:	f300 8095 	bgt.w	8007e8a <_dtoa_r+0x802>
 8007d60:	9b02      	ldr	r3, [sp, #8]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	f040 808b 	bne.w	8007e7e <_dtoa_r+0x7f6>
 8007d68:	9b03      	ldr	r3, [sp, #12]
 8007d6a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8007d6e:	2a00      	cmp	r2, #0
 8007d70:	f040 8087 	bne.w	8007e82 <_dtoa_r+0x7fa>
 8007d74:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007d78:	0d12      	lsrs	r2, r2, #20
 8007d7a:	0512      	lsls	r2, r2, #20
 8007d7c:	2a00      	cmp	r2, #0
 8007d7e:	f000 8082 	beq.w	8007e86 <_dtoa_r+0x7fe>
 8007d82:	9b05      	ldr	r3, [sp, #20]
 8007d84:	3301      	adds	r3, #1
 8007d86:	9305      	str	r3, [sp, #20]
 8007d88:	9b06      	ldr	r3, [sp, #24]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	9306      	str	r3, [sp, #24]
 8007d8e:	2301      	movs	r3, #1
 8007d90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007d92:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	f000 81af 	beq.w	80080f8 <_dtoa_r+0xa70>
 8007d9a:	6922      	ldr	r2, [r4, #16]
 8007d9c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007da0:	6910      	ldr	r0, [r2, #16]
 8007da2:	f000 fbb9 	bl	8008518 <__hi0bits>
 8007da6:	f1c0 0020 	rsb	r0, r0, #32
 8007daa:	9b06      	ldr	r3, [sp, #24]
 8007dac:	4418      	add	r0, r3
 8007dae:	f010 001f 	ands.w	r0, r0, #31
 8007db2:	d076      	beq.n	8007ea2 <_dtoa_r+0x81a>
 8007db4:	f1c0 0220 	rsb	r2, r0, #32
 8007db8:	2a04      	cmp	r2, #4
 8007dba:	dd69      	ble.n	8007e90 <_dtoa_r+0x808>
 8007dbc:	9b05      	ldr	r3, [sp, #20]
 8007dbe:	f1c0 001c 	rsb	r0, r0, #28
 8007dc2:	4403      	add	r3, r0
 8007dc4:	9305      	str	r3, [sp, #20]
 8007dc6:	9b06      	ldr	r3, [sp, #24]
 8007dc8:	4406      	add	r6, r0
 8007dca:	4403      	add	r3, r0
 8007dcc:	9306      	str	r3, [sp, #24]
 8007dce:	9b05      	ldr	r3, [sp, #20]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	dd05      	ble.n	8007de0 <_dtoa_r+0x758>
 8007dd4:	9901      	ldr	r1, [sp, #4]
 8007dd6:	461a      	mov	r2, r3
 8007dd8:	4648      	mov	r0, r9
 8007dda:	f000 fd03 	bl	80087e4 <__lshift>
 8007dde:	9001      	str	r0, [sp, #4]
 8007de0:	9b06      	ldr	r3, [sp, #24]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	dd05      	ble.n	8007df2 <_dtoa_r+0x76a>
 8007de6:	4621      	mov	r1, r4
 8007de8:	461a      	mov	r2, r3
 8007dea:	4648      	mov	r0, r9
 8007dec:	f000 fcfa 	bl	80087e4 <__lshift>
 8007df0:	4604      	mov	r4, r0
 8007df2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d056      	beq.n	8007ea6 <_dtoa_r+0x81e>
 8007df8:	9801      	ldr	r0, [sp, #4]
 8007dfa:	4621      	mov	r1, r4
 8007dfc:	f000 fd5e 	bl	80088bc <__mcmp>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	da50      	bge.n	8007ea6 <_dtoa_r+0x81e>
 8007e04:	f108 33ff 	add.w	r3, r8, #4294967295
 8007e08:	9304      	str	r3, [sp, #16]
 8007e0a:	9901      	ldr	r1, [sp, #4]
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	220a      	movs	r2, #10
 8007e10:	4648      	mov	r0, r9
 8007e12:	f000 faf1 	bl	80083f8 <__multadd>
 8007e16:	9b08      	ldr	r3, [sp, #32]
 8007e18:	9001      	str	r0, [sp, #4]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 816e 	beq.w	80080fc <_dtoa_r+0xa74>
 8007e20:	4629      	mov	r1, r5
 8007e22:	2300      	movs	r3, #0
 8007e24:	220a      	movs	r2, #10
 8007e26:	4648      	mov	r0, r9
 8007e28:	f000 fae6 	bl	80083f8 <__multadd>
 8007e2c:	f1bb 0f00 	cmp.w	fp, #0
 8007e30:	4605      	mov	r5, r0
 8007e32:	dc64      	bgt.n	8007efe <_dtoa_r+0x876>
 8007e34:	9b07      	ldr	r3, [sp, #28]
 8007e36:	2b02      	cmp	r3, #2
 8007e38:	dc3e      	bgt.n	8007eb8 <_dtoa_r+0x830>
 8007e3a:	e060      	b.n	8007efe <_dtoa_r+0x876>
 8007e3c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e3e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007e42:	e73c      	b.n	8007cbe <_dtoa_r+0x636>
 8007e44:	f10a 34ff 	add.w	r4, sl, #4294967295
 8007e48:	42a3      	cmp	r3, r4
 8007e4a:	bfbf      	itttt	lt
 8007e4c:	1ae2      	sublt	r2, r4, r3
 8007e4e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007e50:	189b      	addlt	r3, r3, r2
 8007e52:	930a      	strlt	r3, [sp, #40]	@ 0x28
 8007e54:	bfae      	itee	ge
 8007e56:	1b1c      	subge	r4, r3, r4
 8007e58:	4623      	movlt	r3, r4
 8007e5a:	2400      	movlt	r4, #0
 8007e5c:	f1ba 0f00 	cmp.w	sl, #0
 8007e60:	bfb5      	itete	lt
 8007e62:	9a05      	ldrlt	r2, [sp, #20]
 8007e64:	9e05      	ldrge	r6, [sp, #20]
 8007e66:	eba2 060a 	sublt.w	r6, r2, sl
 8007e6a:	4652      	movge	r2, sl
 8007e6c:	bfb8      	it	lt
 8007e6e:	2200      	movlt	r2, #0
 8007e70:	e727      	b.n	8007cc2 <_dtoa_r+0x63a>
 8007e72:	9e05      	ldr	r6, [sp, #20]
 8007e74:	9d08      	ldr	r5, [sp, #32]
 8007e76:	461c      	mov	r4, r3
 8007e78:	e730      	b.n	8007cdc <_dtoa_r+0x654>
 8007e7a:	461a      	mov	r2, r3
 8007e7c:	e758      	b.n	8007d30 <_dtoa_r+0x6a8>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	e786      	b.n	8007d90 <_dtoa_r+0x708>
 8007e82:	9b02      	ldr	r3, [sp, #8]
 8007e84:	e784      	b.n	8007d90 <_dtoa_r+0x708>
 8007e86:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007e88:	e783      	b.n	8007d92 <_dtoa_r+0x70a>
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007e8e:	e784      	b.n	8007d9a <_dtoa_r+0x712>
 8007e90:	d09d      	beq.n	8007dce <_dtoa_r+0x746>
 8007e92:	9b05      	ldr	r3, [sp, #20]
 8007e94:	321c      	adds	r2, #28
 8007e96:	4413      	add	r3, r2
 8007e98:	9305      	str	r3, [sp, #20]
 8007e9a:	9b06      	ldr	r3, [sp, #24]
 8007e9c:	4416      	add	r6, r2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	e794      	b.n	8007dcc <_dtoa_r+0x744>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	e7f5      	b.n	8007e92 <_dtoa_r+0x80a>
 8007ea6:	f1ba 0f00 	cmp.w	sl, #0
 8007eaa:	f8cd 8010 	str.w	r8, [sp, #16]
 8007eae:	46d3      	mov	fp, sl
 8007eb0:	dc21      	bgt.n	8007ef6 <_dtoa_r+0x86e>
 8007eb2:	9b07      	ldr	r3, [sp, #28]
 8007eb4:	2b02      	cmp	r3, #2
 8007eb6:	dd1e      	ble.n	8007ef6 <_dtoa_r+0x86e>
 8007eb8:	f1bb 0f00 	cmp.w	fp, #0
 8007ebc:	f47f aeb7 	bne.w	8007c2e <_dtoa_r+0x5a6>
 8007ec0:	4621      	mov	r1, r4
 8007ec2:	465b      	mov	r3, fp
 8007ec4:	2205      	movs	r2, #5
 8007ec6:	4648      	mov	r0, r9
 8007ec8:	f000 fa96 	bl	80083f8 <__multadd>
 8007ecc:	4601      	mov	r1, r0
 8007ece:	4604      	mov	r4, r0
 8007ed0:	9801      	ldr	r0, [sp, #4]
 8007ed2:	f000 fcf3 	bl	80088bc <__mcmp>
 8007ed6:	2800      	cmp	r0, #0
 8007ed8:	f77f aea9 	ble.w	8007c2e <_dtoa_r+0x5a6>
 8007edc:	463e      	mov	r6, r7
 8007ede:	2331      	movs	r3, #49	@ 0x31
 8007ee0:	f806 3b01 	strb.w	r3, [r6], #1
 8007ee4:	9b04      	ldr	r3, [sp, #16]
 8007ee6:	3301      	adds	r3, #1
 8007ee8:	9304      	str	r3, [sp, #16]
 8007eea:	e6a4      	b.n	8007c36 <_dtoa_r+0x5ae>
 8007eec:	f8cd 8010 	str.w	r8, [sp, #16]
 8007ef0:	4654      	mov	r4, sl
 8007ef2:	4625      	mov	r5, r4
 8007ef4:	e7f2      	b.n	8007edc <_dtoa_r+0x854>
 8007ef6:	9b08      	ldr	r3, [sp, #32]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	f000 8103 	beq.w	8008104 <_dtoa_r+0xa7c>
 8007efe:	2e00      	cmp	r6, #0
 8007f00:	dd05      	ble.n	8007f0e <_dtoa_r+0x886>
 8007f02:	4629      	mov	r1, r5
 8007f04:	4632      	mov	r2, r6
 8007f06:	4648      	mov	r0, r9
 8007f08:	f000 fc6c 	bl	80087e4 <__lshift>
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d058      	beq.n	8007fc6 <_dtoa_r+0x93e>
 8007f14:	6869      	ldr	r1, [r5, #4]
 8007f16:	4648      	mov	r0, r9
 8007f18:	f000 fa0c 	bl	8008334 <_Balloc>
 8007f1c:	4606      	mov	r6, r0
 8007f1e:	b928      	cbnz	r0, 8007f2c <_dtoa_r+0x8a4>
 8007f20:	4b82      	ldr	r3, [pc, #520]	@ (800812c <_dtoa_r+0xaa4>)
 8007f22:	4602      	mov	r2, r0
 8007f24:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007f28:	f7ff bbc7 	b.w	80076ba <_dtoa_r+0x32>
 8007f2c:	692a      	ldr	r2, [r5, #16]
 8007f2e:	3202      	adds	r2, #2
 8007f30:	0092      	lsls	r2, r2, #2
 8007f32:	f105 010c 	add.w	r1, r5, #12
 8007f36:	300c      	adds	r0, #12
 8007f38:	f001 ff1e 	bl	8009d78 <memcpy>
 8007f3c:	2201      	movs	r2, #1
 8007f3e:	4631      	mov	r1, r6
 8007f40:	4648      	mov	r0, r9
 8007f42:	f000 fc4f 	bl	80087e4 <__lshift>
 8007f46:	1c7b      	adds	r3, r7, #1
 8007f48:	9305      	str	r3, [sp, #20]
 8007f4a:	eb07 030b 	add.w	r3, r7, fp
 8007f4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f50:	9b02      	ldr	r3, [sp, #8]
 8007f52:	f003 0301 	and.w	r3, r3, #1
 8007f56:	46a8      	mov	r8, r5
 8007f58:	9308      	str	r3, [sp, #32]
 8007f5a:	4605      	mov	r5, r0
 8007f5c:	9b05      	ldr	r3, [sp, #20]
 8007f5e:	9801      	ldr	r0, [sp, #4]
 8007f60:	4621      	mov	r1, r4
 8007f62:	f103 3bff 	add.w	fp, r3, #4294967295
 8007f66:	f7ff fb07 	bl	8007578 <quorem>
 8007f6a:	4641      	mov	r1, r8
 8007f6c:	9002      	str	r0, [sp, #8]
 8007f6e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8007f72:	9801      	ldr	r0, [sp, #4]
 8007f74:	f000 fca2 	bl	80088bc <__mcmp>
 8007f78:	462a      	mov	r2, r5
 8007f7a:	9006      	str	r0, [sp, #24]
 8007f7c:	4621      	mov	r1, r4
 8007f7e:	4648      	mov	r0, r9
 8007f80:	f000 fcb8 	bl	80088f4 <__mdiff>
 8007f84:	68c2      	ldr	r2, [r0, #12]
 8007f86:	4606      	mov	r6, r0
 8007f88:	b9fa      	cbnz	r2, 8007fca <_dtoa_r+0x942>
 8007f8a:	4601      	mov	r1, r0
 8007f8c:	9801      	ldr	r0, [sp, #4]
 8007f8e:	f000 fc95 	bl	80088bc <__mcmp>
 8007f92:	4602      	mov	r2, r0
 8007f94:	4631      	mov	r1, r6
 8007f96:	4648      	mov	r0, r9
 8007f98:	920a      	str	r2, [sp, #40]	@ 0x28
 8007f9a:	f000 fa0b 	bl	80083b4 <_Bfree>
 8007f9e:	9b07      	ldr	r3, [sp, #28]
 8007fa0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007fa2:	9e05      	ldr	r6, [sp, #20]
 8007fa4:	ea43 0102 	orr.w	r1, r3, r2
 8007fa8:	9b08      	ldr	r3, [sp, #32]
 8007faa:	4319      	orrs	r1, r3
 8007fac:	d10f      	bne.n	8007fce <_dtoa_r+0x946>
 8007fae:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8007fb2:	d028      	beq.n	8008006 <_dtoa_r+0x97e>
 8007fb4:	9b06      	ldr	r3, [sp, #24]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	dd02      	ble.n	8007fc0 <_dtoa_r+0x938>
 8007fba:	9b02      	ldr	r3, [sp, #8]
 8007fbc:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8007fc0:	f88b a000 	strb.w	sl, [fp]
 8007fc4:	e639      	b.n	8007c3a <_dtoa_r+0x5b2>
 8007fc6:	4628      	mov	r0, r5
 8007fc8:	e7bd      	b.n	8007f46 <_dtoa_r+0x8be>
 8007fca:	2201      	movs	r2, #1
 8007fcc:	e7e2      	b.n	8007f94 <_dtoa_r+0x90c>
 8007fce:	9b06      	ldr	r3, [sp, #24]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	db04      	blt.n	8007fde <_dtoa_r+0x956>
 8007fd4:	9907      	ldr	r1, [sp, #28]
 8007fd6:	430b      	orrs	r3, r1
 8007fd8:	9908      	ldr	r1, [sp, #32]
 8007fda:	430b      	orrs	r3, r1
 8007fdc:	d120      	bne.n	8008020 <_dtoa_r+0x998>
 8007fde:	2a00      	cmp	r2, #0
 8007fe0:	ddee      	ble.n	8007fc0 <_dtoa_r+0x938>
 8007fe2:	9901      	ldr	r1, [sp, #4]
 8007fe4:	2201      	movs	r2, #1
 8007fe6:	4648      	mov	r0, r9
 8007fe8:	f000 fbfc 	bl	80087e4 <__lshift>
 8007fec:	4621      	mov	r1, r4
 8007fee:	9001      	str	r0, [sp, #4]
 8007ff0:	f000 fc64 	bl	80088bc <__mcmp>
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	dc03      	bgt.n	8008000 <_dtoa_r+0x978>
 8007ff8:	d1e2      	bne.n	8007fc0 <_dtoa_r+0x938>
 8007ffa:	f01a 0f01 	tst.w	sl, #1
 8007ffe:	d0df      	beq.n	8007fc0 <_dtoa_r+0x938>
 8008000:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008004:	d1d9      	bne.n	8007fba <_dtoa_r+0x932>
 8008006:	2339      	movs	r3, #57	@ 0x39
 8008008:	f88b 3000 	strb.w	r3, [fp]
 800800c:	4633      	mov	r3, r6
 800800e:	461e      	mov	r6, r3
 8008010:	3b01      	subs	r3, #1
 8008012:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008016:	2a39      	cmp	r2, #57	@ 0x39
 8008018:	d053      	beq.n	80080c2 <_dtoa_r+0xa3a>
 800801a:	3201      	adds	r2, #1
 800801c:	701a      	strb	r2, [r3, #0]
 800801e:	e60c      	b.n	8007c3a <_dtoa_r+0x5b2>
 8008020:	2a00      	cmp	r2, #0
 8008022:	dd07      	ble.n	8008034 <_dtoa_r+0x9ac>
 8008024:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8008028:	d0ed      	beq.n	8008006 <_dtoa_r+0x97e>
 800802a:	f10a 0301 	add.w	r3, sl, #1
 800802e:	f88b 3000 	strb.w	r3, [fp]
 8008032:	e602      	b.n	8007c3a <_dtoa_r+0x5b2>
 8008034:	9b05      	ldr	r3, [sp, #20]
 8008036:	9a05      	ldr	r2, [sp, #20]
 8008038:	f803 ac01 	strb.w	sl, [r3, #-1]
 800803c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800803e:	4293      	cmp	r3, r2
 8008040:	d029      	beq.n	8008096 <_dtoa_r+0xa0e>
 8008042:	9901      	ldr	r1, [sp, #4]
 8008044:	2300      	movs	r3, #0
 8008046:	220a      	movs	r2, #10
 8008048:	4648      	mov	r0, r9
 800804a:	f000 f9d5 	bl	80083f8 <__multadd>
 800804e:	45a8      	cmp	r8, r5
 8008050:	9001      	str	r0, [sp, #4]
 8008052:	f04f 0300 	mov.w	r3, #0
 8008056:	f04f 020a 	mov.w	r2, #10
 800805a:	4641      	mov	r1, r8
 800805c:	4648      	mov	r0, r9
 800805e:	d107      	bne.n	8008070 <_dtoa_r+0x9e8>
 8008060:	f000 f9ca 	bl	80083f8 <__multadd>
 8008064:	4680      	mov	r8, r0
 8008066:	4605      	mov	r5, r0
 8008068:	9b05      	ldr	r3, [sp, #20]
 800806a:	3301      	adds	r3, #1
 800806c:	9305      	str	r3, [sp, #20]
 800806e:	e775      	b.n	8007f5c <_dtoa_r+0x8d4>
 8008070:	f000 f9c2 	bl	80083f8 <__multadd>
 8008074:	4629      	mov	r1, r5
 8008076:	4680      	mov	r8, r0
 8008078:	2300      	movs	r3, #0
 800807a:	220a      	movs	r2, #10
 800807c:	4648      	mov	r0, r9
 800807e:	f000 f9bb 	bl	80083f8 <__multadd>
 8008082:	4605      	mov	r5, r0
 8008084:	e7f0      	b.n	8008068 <_dtoa_r+0x9e0>
 8008086:	f1bb 0f00 	cmp.w	fp, #0
 800808a:	bfcc      	ite	gt
 800808c:	465e      	movgt	r6, fp
 800808e:	2601      	movle	r6, #1
 8008090:	443e      	add	r6, r7
 8008092:	f04f 0800 	mov.w	r8, #0
 8008096:	9901      	ldr	r1, [sp, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	4648      	mov	r0, r9
 800809c:	f000 fba2 	bl	80087e4 <__lshift>
 80080a0:	4621      	mov	r1, r4
 80080a2:	9001      	str	r0, [sp, #4]
 80080a4:	f000 fc0a 	bl	80088bc <__mcmp>
 80080a8:	2800      	cmp	r0, #0
 80080aa:	dcaf      	bgt.n	800800c <_dtoa_r+0x984>
 80080ac:	d102      	bne.n	80080b4 <_dtoa_r+0xa2c>
 80080ae:	f01a 0f01 	tst.w	sl, #1
 80080b2:	d1ab      	bne.n	800800c <_dtoa_r+0x984>
 80080b4:	4633      	mov	r3, r6
 80080b6:	461e      	mov	r6, r3
 80080b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80080bc:	2a30      	cmp	r2, #48	@ 0x30
 80080be:	d0fa      	beq.n	80080b6 <_dtoa_r+0xa2e>
 80080c0:	e5bb      	b.n	8007c3a <_dtoa_r+0x5b2>
 80080c2:	429f      	cmp	r7, r3
 80080c4:	d1a3      	bne.n	800800e <_dtoa_r+0x986>
 80080c6:	9b04      	ldr	r3, [sp, #16]
 80080c8:	3301      	adds	r3, #1
 80080ca:	9304      	str	r3, [sp, #16]
 80080cc:	2331      	movs	r3, #49	@ 0x31
 80080ce:	703b      	strb	r3, [r7, #0]
 80080d0:	e5b3      	b.n	8007c3a <_dtoa_r+0x5b2>
 80080d2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80080d4:	4f16      	ldr	r7, [pc, #88]	@ (8008130 <_dtoa_r+0xaa8>)
 80080d6:	b11b      	cbz	r3, 80080e0 <_dtoa_r+0xa58>
 80080d8:	f107 0308 	add.w	r3, r7, #8
 80080dc:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 80080de:	6013      	str	r3, [r2, #0]
 80080e0:	4638      	mov	r0, r7
 80080e2:	b011      	add	sp, #68	@ 0x44
 80080e4:	ecbd 8b02 	vpop	{d8}
 80080e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ec:	9b07      	ldr	r3, [sp, #28]
 80080ee:	2b01      	cmp	r3, #1
 80080f0:	f77f ae36 	ble.w	8007d60 <_dtoa_r+0x6d8>
 80080f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80080f6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80080f8:	2001      	movs	r0, #1
 80080fa:	e656      	b.n	8007daa <_dtoa_r+0x722>
 80080fc:	f1bb 0f00 	cmp.w	fp, #0
 8008100:	f77f aed7 	ble.w	8007eb2 <_dtoa_r+0x82a>
 8008104:	463e      	mov	r6, r7
 8008106:	9801      	ldr	r0, [sp, #4]
 8008108:	4621      	mov	r1, r4
 800810a:	f7ff fa35 	bl	8007578 <quorem>
 800810e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8008112:	f806 ab01 	strb.w	sl, [r6], #1
 8008116:	1bf2      	subs	r2, r6, r7
 8008118:	4593      	cmp	fp, r2
 800811a:	ddb4      	ble.n	8008086 <_dtoa_r+0x9fe>
 800811c:	9901      	ldr	r1, [sp, #4]
 800811e:	2300      	movs	r3, #0
 8008120:	220a      	movs	r2, #10
 8008122:	4648      	mov	r0, r9
 8008124:	f000 f968 	bl	80083f8 <__multadd>
 8008128:	9001      	str	r0, [sp, #4]
 800812a:	e7ec      	b.n	8008106 <_dtoa_r+0xa7e>
 800812c:	0800abd1 	.word	0x0800abd1
 8008130:	0800ab55 	.word	0x0800ab55

08008134 <_free_r>:
 8008134:	b538      	push	{r3, r4, r5, lr}
 8008136:	4605      	mov	r5, r0
 8008138:	2900      	cmp	r1, #0
 800813a:	d041      	beq.n	80081c0 <_free_r+0x8c>
 800813c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008140:	1f0c      	subs	r4, r1, #4
 8008142:	2b00      	cmp	r3, #0
 8008144:	bfb8      	it	lt
 8008146:	18e4      	addlt	r4, r4, r3
 8008148:	f000 f8e8 	bl	800831c <__malloc_lock>
 800814c:	4a1d      	ldr	r2, [pc, #116]	@ (80081c4 <_free_r+0x90>)
 800814e:	6813      	ldr	r3, [r2, #0]
 8008150:	b933      	cbnz	r3, 8008160 <_free_r+0x2c>
 8008152:	6063      	str	r3, [r4, #4]
 8008154:	6014      	str	r4, [r2, #0]
 8008156:	4628      	mov	r0, r5
 8008158:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800815c:	f000 b8e4 	b.w	8008328 <__malloc_unlock>
 8008160:	42a3      	cmp	r3, r4
 8008162:	d908      	bls.n	8008176 <_free_r+0x42>
 8008164:	6820      	ldr	r0, [r4, #0]
 8008166:	1821      	adds	r1, r4, r0
 8008168:	428b      	cmp	r3, r1
 800816a:	bf01      	itttt	eq
 800816c:	6819      	ldreq	r1, [r3, #0]
 800816e:	685b      	ldreq	r3, [r3, #4]
 8008170:	1809      	addeq	r1, r1, r0
 8008172:	6021      	streq	r1, [r4, #0]
 8008174:	e7ed      	b.n	8008152 <_free_r+0x1e>
 8008176:	461a      	mov	r2, r3
 8008178:	685b      	ldr	r3, [r3, #4]
 800817a:	b10b      	cbz	r3, 8008180 <_free_r+0x4c>
 800817c:	42a3      	cmp	r3, r4
 800817e:	d9fa      	bls.n	8008176 <_free_r+0x42>
 8008180:	6811      	ldr	r1, [r2, #0]
 8008182:	1850      	adds	r0, r2, r1
 8008184:	42a0      	cmp	r0, r4
 8008186:	d10b      	bne.n	80081a0 <_free_r+0x6c>
 8008188:	6820      	ldr	r0, [r4, #0]
 800818a:	4401      	add	r1, r0
 800818c:	1850      	adds	r0, r2, r1
 800818e:	4283      	cmp	r3, r0
 8008190:	6011      	str	r1, [r2, #0]
 8008192:	d1e0      	bne.n	8008156 <_free_r+0x22>
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	6053      	str	r3, [r2, #4]
 800819a:	4408      	add	r0, r1
 800819c:	6010      	str	r0, [r2, #0]
 800819e:	e7da      	b.n	8008156 <_free_r+0x22>
 80081a0:	d902      	bls.n	80081a8 <_free_r+0x74>
 80081a2:	230c      	movs	r3, #12
 80081a4:	602b      	str	r3, [r5, #0]
 80081a6:	e7d6      	b.n	8008156 <_free_r+0x22>
 80081a8:	6820      	ldr	r0, [r4, #0]
 80081aa:	1821      	adds	r1, r4, r0
 80081ac:	428b      	cmp	r3, r1
 80081ae:	bf04      	itt	eq
 80081b0:	6819      	ldreq	r1, [r3, #0]
 80081b2:	685b      	ldreq	r3, [r3, #4]
 80081b4:	6063      	str	r3, [r4, #4]
 80081b6:	bf04      	itt	eq
 80081b8:	1809      	addeq	r1, r1, r0
 80081ba:	6021      	streq	r1, [r4, #0]
 80081bc:	6054      	str	r4, [r2, #4]
 80081be:	e7ca      	b.n	8008156 <_free_r+0x22>
 80081c0:	bd38      	pop	{r3, r4, r5, pc}
 80081c2:	bf00      	nop
 80081c4:	2400058c 	.word	0x2400058c

080081c8 <malloc>:
 80081c8:	4b02      	ldr	r3, [pc, #8]	@ (80081d4 <malloc+0xc>)
 80081ca:	4601      	mov	r1, r0
 80081cc:	6818      	ldr	r0, [r3, #0]
 80081ce:	f000 b825 	b.w	800821c <_malloc_r>
 80081d2:	bf00      	nop
 80081d4:	24000038 	.word	0x24000038

080081d8 <sbrk_aligned>:
 80081d8:	b570      	push	{r4, r5, r6, lr}
 80081da:	4e0f      	ldr	r6, [pc, #60]	@ (8008218 <sbrk_aligned+0x40>)
 80081dc:	460c      	mov	r4, r1
 80081de:	6831      	ldr	r1, [r6, #0]
 80081e0:	4605      	mov	r5, r0
 80081e2:	b911      	cbnz	r1, 80081ea <sbrk_aligned+0x12>
 80081e4:	f001 fdb8 	bl	8009d58 <_sbrk_r>
 80081e8:	6030      	str	r0, [r6, #0]
 80081ea:	4621      	mov	r1, r4
 80081ec:	4628      	mov	r0, r5
 80081ee:	f001 fdb3 	bl	8009d58 <_sbrk_r>
 80081f2:	1c43      	adds	r3, r0, #1
 80081f4:	d103      	bne.n	80081fe <sbrk_aligned+0x26>
 80081f6:	f04f 34ff 	mov.w	r4, #4294967295
 80081fa:	4620      	mov	r0, r4
 80081fc:	bd70      	pop	{r4, r5, r6, pc}
 80081fe:	1cc4      	adds	r4, r0, #3
 8008200:	f024 0403 	bic.w	r4, r4, #3
 8008204:	42a0      	cmp	r0, r4
 8008206:	d0f8      	beq.n	80081fa <sbrk_aligned+0x22>
 8008208:	1a21      	subs	r1, r4, r0
 800820a:	4628      	mov	r0, r5
 800820c:	f001 fda4 	bl	8009d58 <_sbrk_r>
 8008210:	3001      	adds	r0, #1
 8008212:	d1f2      	bne.n	80081fa <sbrk_aligned+0x22>
 8008214:	e7ef      	b.n	80081f6 <sbrk_aligned+0x1e>
 8008216:	bf00      	nop
 8008218:	24000588 	.word	0x24000588

0800821c <_malloc_r>:
 800821c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008220:	1ccd      	adds	r5, r1, #3
 8008222:	f025 0503 	bic.w	r5, r5, #3
 8008226:	3508      	adds	r5, #8
 8008228:	2d0c      	cmp	r5, #12
 800822a:	bf38      	it	cc
 800822c:	250c      	movcc	r5, #12
 800822e:	2d00      	cmp	r5, #0
 8008230:	4606      	mov	r6, r0
 8008232:	db01      	blt.n	8008238 <_malloc_r+0x1c>
 8008234:	42a9      	cmp	r1, r5
 8008236:	d904      	bls.n	8008242 <_malloc_r+0x26>
 8008238:	230c      	movs	r3, #12
 800823a:	6033      	str	r3, [r6, #0]
 800823c:	2000      	movs	r0, #0
 800823e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008242:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008318 <_malloc_r+0xfc>
 8008246:	f000 f869 	bl	800831c <__malloc_lock>
 800824a:	f8d8 3000 	ldr.w	r3, [r8]
 800824e:	461c      	mov	r4, r3
 8008250:	bb44      	cbnz	r4, 80082a4 <_malloc_r+0x88>
 8008252:	4629      	mov	r1, r5
 8008254:	4630      	mov	r0, r6
 8008256:	f7ff ffbf 	bl	80081d8 <sbrk_aligned>
 800825a:	1c43      	adds	r3, r0, #1
 800825c:	4604      	mov	r4, r0
 800825e:	d158      	bne.n	8008312 <_malloc_r+0xf6>
 8008260:	f8d8 4000 	ldr.w	r4, [r8]
 8008264:	4627      	mov	r7, r4
 8008266:	2f00      	cmp	r7, #0
 8008268:	d143      	bne.n	80082f2 <_malloc_r+0xd6>
 800826a:	2c00      	cmp	r4, #0
 800826c:	d04b      	beq.n	8008306 <_malloc_r+0xea>
 800826e:	6823      	ldr	r3, [r4, #0]
 8008270:	4639      	mov	r1, r7
 8008272:	4630      	mov	r0, r6
 8008274:	eb04 0903 	add.w	r9, r4, r3
 8008278:	f001 fd6e 	bl	8009d58 <_sbrk_r>
 800827c:	4581      	cmp	r9, r0
 800827e:	d142      	bne.n	8008306 <_malloc_r+0xea>
 8008280:	6821      	ldr	r1, [r4, #0]
 8008282:	1a6d      	subs	r5, r5, r1
 8008284:	4629      	mov	r1, r5
 8008286:	4630      	mov	r0, r6
 8008288:	f7ff ffa6 	bl	80081d8 <sbrk_aligned>
 800828c:	3001      	adds	r0, #1
 800828e:	d03a      	beq.n	8008306 <_malloc_r+0xea>
 8008290:	6823      	ldr	r3, [r4, #0]
 8008292:	442b      	add	r3, r5
 8008294:	6023      	str	r3, [r4, #0]
 8008296:	f8d8 3000 	ldr.w	r3, [r8]
 800829a:	685a      	ldr	r2, [r3, #4]
 800829c:	bb62      	cbnz	r2, 80082f8 <_malloc_r+0xdc>
 800829e:	f8c8 7000 	str.w	r7, [r8]
 80082a2:	e00f      	b.n	80082c4 <_malloc_r+0xa8>
 80082a4:	6822      	ldr	r2, [r4, #0]
 80082a6:	1b52      	subs	r2, r2, r5
 80082a8:	d420      	bmi.n	80082ec <_malloc_r+0xd0>
 80082aa:	2a0b      	cmp	r2, #11
 80082ac:	d917      	bls.n	80082de <_malloc_r+0xc2>
 80082ae:	1961      	adds	r1, r4, r5
 80082b0:	42a3      	cmp	r3, r4
 80082b2:	6025      	str	r5, [r4, #0]
 80082b4:	bf18      	it	ne
 80082b6:	6059      	strne	r1, [r3, #4]
 80082b8:	6863      	ldr	r3, [r4, #4]
 80082ba:	bf08      	it	eq
 80082bc:	f8c8 1000 	streq.w	r1, [r8]
 80082c0:	5162      	str	r2, [r4, r5]
 80082c2:	604b      	str	r3, [r1, #4]
 80082c4:	4630      	mov	r0, r6
 80082c6:	f000 f82f 	bl	8008328 <__malloc_unlock>
 80082ca:	f104 000b 	add.w	r0, r4, #11
 80082ce:	1d23      	adds	r3, r4, #4
 80082d0:	f020 0007 	bic.w	r0, r0, #7
 80082d4:	1ac2      	subs	r2, r0, r3
 80082d6:	bf1c      	itt	ne
 80082d8:	1a1b      	subne	r3, r3, r0
 80082da:	50a3      	strne	r3, [r4, r2]
 80082dc:	e7af      	b.n	800823e <_malloc_r+0x22>
 80082de:	6862      	ldr	r2, [r4, #4]
 80082e0:	42a3      	cmp	r3, r4
 80082e2:	bf0c      	ite	eq
 80082e4:	f8c8 2000 	streq.w	r2, [r8]
 80082e8:	605a      	strne	r2, [r3, #4]
 80082ea:	e7eb      	b.n	80082c4 <_malloc_r+0xa8>
 80082ec:	4623      	mov	r3, r4
 80082ee:	6864      	ldr	r4, [r4, #4]
 80082f0:	e7ae      	b.n	8008250 <_malloc_r+0x34>
 80082f2:	463c      	mov	r4, r7
 80082f4:	687f      	ldr	r7, [r7, #4]
 80082f6:	e7b6      	b.n	8008266 <_malloc_r+0x4a>
 80082f8:	461a      	mov	r2, r3
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	42a3      	cmp	r3, r4
 80082fe:	d1fb      	bne.n	80082f8 <_malloc_r+0xdc>
 8008300:	2300      	movs	r3, #0
 8008302:	6053      	str	r3, [r2, #4]
 8008304:	e7de      	b.n	80082c4 <_malloc_r+0xa8>
 8008306:	230c      	movs	r3, #12
 8008308:	6033      	str	r3, [r6, #0]
 800830a:	4630      	mov	r0, r6
 800830c:	f000 f80c 	bl	8008328 <__malloc_unlock>
 8008310:	e794      	b.n	800823c <_malloc_r+0x20>
 8008312:	6005      	str	r5, [r0, #0]
 8008314:	e7d6      	b.n	80082c4 <_malloc_r+0xa8>
 8008316:	bf00      	nop
 8008318:	2400058c 	.word	0x2400058c

0800831c <__malloc_lock>:
 800831c:	4801      	ldr	r0, [pc, #4]	@ (8008324 <__malloc_lock+0x8>)
 800831e:	f7ff b922 	b.w	8007566 <__retarget_lock_acquire_recursive>
 8008322:	bf00      	nop
 8008324:	24000584 	.word	0x24000584

08008328 <__malloc_unlock>:
 8008328:	4801      	ldr	r0, [pc, #4]	@ (8008330 <__malloc_unlock+0x8>)
 800832a:	f7ff b91d 	b.w	8007568 <__retarget_lock_release_recursive>
 800832e:	bf00      	nop
 8008330:	24000584 	.word	0x24000584

08008334 <_Balloc>:
 8008334:	b570      	push	{r4, r5, r6, lr}
 8008336:	69c6      	ldr	r6, [r0, #28]
 8008338:	4604      	mov	r4, r0
 800833a:	460d      	mov	r5, r1
 800833c:	b976      	cbnz	r6, 800835c <_Balloc+0x28>
 800833e:	2010      	movs	r0, #16
 8008340:	f7ff ff42 	bl	80081c8 <malloc>
 8008344:	4602      	mov	r2, r0
 8008346:	61e0      	str	r0, [r4, #28]
 8008348:	b920      	cbnz	r0, 8008354 <_Balloc+0x20>
 800834a:	4b18      	ldr	r3, [pc, #96]	@ (80083ac <_Balloc+0x78>)
 800834c:	4818      	ldr	r0, [pc, #96]	@ (80083b0 <_Balloc+0x7c>)
 800834e:	216b      	movs	r1, #107	@ 0x6b
 8008350:	f001 fd2a 	bl	8009da8 <__assert_func>
 8008354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008358:	6006      	str	r6, [r0, #0]
 800835a:	60c6      	str	r6, [r0, #12]
 800835c:	69e6      	ldr	r6, [r4, #28]
 800835e:	68f3      	ldr	r3, [r6, #12]
 8008360:	b183      	cbz	r3, 8008384 <_Balloc+0x50>
 8008362:	69e3      	ldr	r3, [r4, #28]
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800836a:	b9b8      	cbnz	r0, 800839c <_Balloc+0x68>
 800836c:	2101      	movs	r1, #1
 800836e:	fa01 f605 	lsl.w	r6, r1, r5
 8008372:	1d72      	adds	r2, r6, #5
 8008374:	0092      	lsls	r2, r2, #2
 8008376:	4620      	mov	r0, r4
 8008378:	f001 fd34 	bl	8009de4 <_calloc_r>
 800837c:	b160      	cbz	r0, 8008398 <_Balloc+0x64>
 800837e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008382:	e00e      	b.n	80083a2 <_Balloc+0x6e>
 8008384:	2221      	movs	r2, #33	@ 0x21
 8008386:	2104      	movs	r1, #4
 8008388:	4620      	mov	r0, r4
 800838a:	f001 fd2b 	bl	8009de4 <_calloc_r>
 800838e:	69e3      	ldr	r3, [r4, #28]
 8008390:	60f0      	str	r0, [r6, #12]
 8008392:	68db      	ldr	r3, [r3, #12]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d1e4      	bne.n	8008362 <_Balloc+0x2e>
 8008398:	2000      	movs	r0, #0
 800839a:	bd70      	pop	{r4, r5, r6, pc}
 800839c:	6802      	ldr	r2, [r0, #0]
 800839e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80083a2:	2300      	movs	r3, #0
 80083a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80083a8:	e7f7      	b.n	800839a <_Balloc+0x66>
 80083aa:	bf00      	nop
 80083ac:	0800ab62 	.word	0x0800ab62
 80083b0:	0800abe2 	.word	0x0800abe2

080083b4 <_Bfree>:
 80083b4:	b570      	push	{r4, r5, r6, lr}
 80083b6:	69c6      	ldr	r6, [r0, #28]
 80083b8:	4605      	mov	r5, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	b976      	cbnz	r6, 80083dc <_Bfree+0x28>
 80083be:	2010      	movs	r0, #16
 80083c0:	f7ff ff02 	bl	80081c8 <malloc>
 80083c4:	4602      	mov	r2, r0
 80083c6:	61e8      	str	r0, [r5, #28]
 80083c8:	b920      	cbnz	r0, 80083d4 <_Bfree+0x20>
 80083ca:	4b09      	ldr	r3, [pc, #36]	@ (80083f0 <_Bfree+0x3c>)
 80083cc:	4809      	ldr	r0, [pc, #36]	@ (80083f4 <_Bfree+0x40>)
 80083ce:	218f      	movs	r1, #143	@ 0x8f
 80083d0:	f001 fcea 	bl	8009da8 <__assert_func>
 80083d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80083d8:	6006      	str	r6, [r0, #0]
 80083da:	60c6      	str	r6, [r0, #12]
 80083dc:	b13c      	cbz	r4, 80083ee <_Bfree+0x3a>
 80083de:	69eb      	ldr	r3, [r5, #28]
 80083e0:	6862      	ldr	r2, [r4, #4]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80083e8:	6021      	str	r1, [r4, #0]
 80083ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80083ee:	bd70      	pop	{r4, r5, r6, pc}
 80083f0:	0800ab62 	.word	0x0800ab62
 80083f4:	0800abe2 	.word	0x0800abe2

080083f8 <__multadd>:
 80083f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083fc:	690d      	ldr	r5, [r1, #16]
 80083fe:	4607      	mov	r7, r0
 8008400:	460c      	mov	r4, r1
 8008402:	461e      	mov	r6, r3
 8008404:	f101 0c14 	add.w	ip, r1, #20
 8008408:	2000      	movs	r0, #0
 800840a:	f8dc 3000 	ldr.w	r3, [ip]
 800840e:	b299      	uxth	r1, r3
 8008410:	fb02 6101 	mla	r1, r2, r1, r6
 8008414:	0c1e      	lsrs	r6, r3, #16
 8008416:	0c0b      	lsrs	r3, r1, #16
 8008418:	fb02 3306 	mla	r3, r2, r6, r3
 800841c:	b289      	uxth	r1, r1
 800841e:	3001      	adds	r0, #1
 8008420:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008424:	4285      	cmp	r5, r0
 8008426:	f84c 1b04 	str.w	r1, [ip], #4
 800842a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800842e:	dcec      	bgt.n	800840a <__multadd+0x12>
 8008430:	b30e      	cbz	r6, 8008476 <__multadd+0x7e>
 8008432:	68a3      	ldr	r3, [r4, #8]
 8008434:	42ab      	cmp	r3, r5
 8008436:	dc19      	bgt.n	800846c <__multadd+0x74>
 8008438:	6861      	ldr	r1, [r4, #4]
 800843a:	4638      	mov	r0, r7
 800843c:	3101      	adds	r1, #1
 800843e:	f7ff ff79 	bl	8008334 <_Balloc>
 8008442:	4680      	mov	r8, r0
 8008444:	b928      	cbnz	r0, 8008452 <__multadd+0x5a>
 8008446:	4602      	mov	r2, r0
 8008448:	4b0c      	ldr	r3, [pc, #48]	@ (800847c <__multadd+0x84>)
 800844a:	480d      	ldr	r0, [pc, #52]	@ (8008480 <__multadd+0x88>)
 800844c:	21ba      	movs	r1, #186	@ 0xba
 800844e:	f001 fcab 	bl	8009da8 <__assert_func>
 8008452:	6922      	ldr	r2, [r4, #16]
 8008454:	3202      	adds	r2, #2
 8008456:	f104 010c 	add.w	r1, r4, #12
 800845a:	0092      	lsls	r2, r2, #2
 800845c:	300c      	adds	r0, #12
 800845e:	f001 fc8b 	bl	8009d78 <memcpy>
 8008462:	4621      	mov	r1, r4
 8008464:	4638      	mov	r0, r7
 8008466:	f7ff ffa5 	bl	80083b4 <_Bfree>
 800846a:	4644      	mov	r4, r8
 800846c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008470:	3501      	adds	r5, #1
 8008472:	615e      	str	r6, [r3, #20]
 8008474:	6125      	str	r5, [r4, #16]
 8008476:	4620      	mov	r0, r4
 8008478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800847c:	0800abd1 	.word	0x0800abd1
 8008480:	0800abe2 	.word	0x0800abe2

08008484 <__s2b>:
 8008484:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008488:	460c      	mov	r4, r1
 800848a:	4615      	mov	r5, r2
 800848c:	461f      	mov	r7, r3
 800848e:	2209      	movs	r2, #9
 8008490:	3308      	adds	r3, #8
 8008492:	4606      	mov	r6, r0
 8008494:	fb93 f3f2 	sdiv	r3, r3, r2
 8008498:	2100      	movs	r1, #0
 800849a:	2201      	movs	r2, #1
 800849c:	429a      	cmp	r2, r3
 800849e:	db09      	blt.n	80084b4 <__s2b+0x30>
 80084a0:	4630      	mov	r0, r6
 80084a2:	f7ff ff47 	bl	8008334 <_Balloc>
 80084a6:	b940      	cbnz	r0, 80084ba <__s2b+0x36>
 80084a8:	4602      	mov	r2, r0
 80084aa:	4b19      	ldr	r3, [pc, #100]	@ (8008510 <__s2b+0x8c>)
 80084ac:	4819      	ldr	r0, [pc, #100]	@ (8008514 <__s2b+0x90>)
 80084ae:	21d3      	movs	r1, #211	@ 0xd3
 80084b0:	f001 fc7a 	bl	8009da8 <__assert_func>
 80084b4:	0052      	lsls	r2, r2, #1
 80084b6:	3101      	adds	r1, #1
 80084b8:	e7f0      	b.n	800849c <__s2b+0x18>
 80084ba:	9b08      	ldr	r3, [sp, #32]
 80084bc:	6143      	str	r3, [r0, #20]
 80084be:	2d09      	cmp	r5, #9
 80084c0:	f04f 0301 	mov.w	r3, #1
 80084c4:	6103      	str	r3, [r0, #16]
 80084c6:	dd16      	ble.n	80084f6 <__s2b+0x72>
 80084c8:	f104 0909 	add.w	r9, r4, #9
 80084cc:	46c8      	mov	r8, r9
 80084ce:	442c      	add	r4, r5
 80084d0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80084d4:	4601      	mov	r1, r0
 80084d6:	3b30      	subs	r3, #48	@ 0x30
 80084d8:	220a      	movs	r2, #10
 80084da:	4630      	mov	r0, r6
 80084dc:	f7ff ff8c 	bl	80083f8 <__multadd>
 80084e0:	45a0      	cmp	r8, r4
 80084e2:	d1f5      	bne.n	80084d0 <__s2b+0x4c>
 80084e4:	f1a5 0408 	sub.w	r4, r5, #8
 80084e8:	444c      	add	r4, r9
 80084ea:	1b2d      	subs	r5, r5, r4
 80084ec:	1963      	adds	r3, r4, r5
 80084ee:	42bb      	cmp	r3, r7
 80084f0:	db04      	blt.n	80084fc <__s2b+0x78>
 80084f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084f6:	340a      	adds	r4, #10
 80084f8:	2509      	movs	r5, #9
 80084fa:	e7f6      	b.n	80084ea <__s2b+0x66>
 80084fc:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008500:	4601      	mov	r1, r0
 8008502:	3b30      	subs	r3, #48	@ 0x30
 8008504:	220a      	movs	r2, #10
 8008506:	4630      	mov	r0, r6
 8008508:	f7ff ff76 	bl	80083f8 <__multadd>
 800850c:	e7ee      	b.n	80084ec <__s2b+0x68>
 800850e:	bf00      	nop
 8008510:	0800abd1 	.word	0x0800abd1
 8008514:	0800abe2 	.word	0x0800abe2

08008518 <__hi0bits>:
 8008518:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800851c:	4603      	mov	r3, r0
 800851e:	bf36      	itet	cc
 8008520:	0403      	lslcc	r3, r0, #16
 8008522:	2000      	movcs	r0, #0
 8008524:	2010      	movcc	r0, #16
 8008526:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800852a:	bf3c      	itt	cc
 800852c:	021b      	lslcc	r3, r3, #8
 800852e:	3008      	addcc	r0, #8
 8008530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008534:	bf3c      	itt	cc
 8008536:	011b      	lslcc	r3, r3, #4
 8008538:	3004      	addcc	r0, #4
 800853a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800853e:	bf3c      	itt	cc
 8008540:	009b      	lslcc	r3, r3, #2
 8008542:	3002      	addcc	r0, #2
 8008544:	2b00      	cmp	r3, #0
 8008546:	db05      	blt.n	8008554 <__hi0bits+0x3c>
 8008548:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800854c:	f100 0001 	add.w	r0, r0, #1
 8008550:	bf08      	it	eq
 8008552:	2020      	moveq	r0, #32
 8008554:	4770      	bx	lr

08008556 <__lo0bits>:
 8008556:	6803      	ldr	r3, [r0, #0]
 8008558:	4602      	mov	r2, r0
 800855a:	f013 0007 	ands.w	r0, r3, #7
 800855e:	d00b      	beq.n	8008578 <__lo0bits+0x22>
 8008560:	07d9      	lsls	r1, r3, #31
 8008562:	d421      	bmi.n	80085a8 <__lo0bits+0x52>
 8008564:	0798      	lsls	r0, r3, #30
 8008566:	bf49      	itett	mi
 8008568:	085b      	lsrmi	r3, r3, #1
 800856a:	089b      	lsrpl	r3, r3, #2
 800856c:	2001      	movmi	r0, #1
 800856e:	6013      	strmi	r3, [r2, #0]
 8008570:	bf5c      	itt	pl
 8008572:	6013      	strpl	r3, [r2, #0]
 8008574:	2002      	movpl	r0, #2
 8008576:	4770      	bx	lr
 8008578:	b299      	uxth	r1, r3
 800857a:	b909      	cbnz	r1, 8008580 <__lo0bits+0x2a>
 800857c:	0c1b      	lsrs	r3, r3, #16
 800857e:	2010      	movs	r0, #16
 8008580:	b2d9      	uxtb	r1, r3
 8008582:	b909      	cbnz	r1, 8008588 <__lo0bits+0x32>
 8008584:	3008      	adds	r0, #8
 8008586:	0a1b      	lsrs	r3, r3, #8
 8008588:	0719      	lsls	r1, r3, #28
 800858a:	bf04      	itt	eq
 800858c:	091b      	lsreq	r3, r3, #4
 800858e:	3004      	addeq	r0, #4
 8008590:	0799      	lsls	r1, r3, #30
 8008592:	bf04      	itt	eq
 8008594:	089b      	lsreq	r3, r3, #2
 8008596:	3002      	addeq	r0, #2
 8008598:	07d9      	lsls	r1, r3, #31
 800859a:	d403      	bmi.n	80085a4 <__lo0bits+0x4e>
 800859c:	085b      	lsrs	r3, r3, #1
 800859e:	f100 0001 	add.w	r0, r0, #1
 80085a2:	d003      	beq.n	80085ac <__lo0bits+0x56>
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	4770      	bx	lr
 80085a8:	2000      	movs	r0, #0
 80085aa:	4770      	bx	lr
 80085ac:	2020      	movs	r0, #32
 80085ae:	4770      	bx	lr

080085b0 <__i2b>:
 80085b0:	b510      	push	{r4, lr}
 80085b2:	460c      	mov	r4, r1
 80085b4:	2101      	movs	r1, #1
 80085b6:	f7ff febd 	bl	8008334 <_Balloc>
 80085ba:	4602      	mov	r2, r0
 80085bc:	b928      	cbnz	r0, 80085ca <__i2b+0x1a>
 80085be:	4b05      	ldr	r3, [pc, #20]	@ (80085d4 <__i2b+0x24>)
 80085c0:	4805      	ldr	r0, [pc, #20]	@ (80085d8 <__i2b+0x28>)
 80085c2:	f240 1145 	movw	r1, #325	@ 0x145
 80085c6:	f001 fbef 	bl	8009da8 <__assert_func>
 80085ca:	2301      	movs	r3, #1
 80085cc:	6144      	str	r4, [r0, #20]
 80085ce:	6103      	str	r3, [r0, #16]
 80085d0:	bd10      	pop	{r4, pc}
 80085d2:	bf00      	nop
 80085d4:	0800abd1 	.word	0x0800abd1
 80085d8:	0800abe2 	.word	0x0800abe2

080085dc <__multiply>:
 80085dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085e0:	4614      	mov	r4, r2
 80085e2:	690a      	ldr	r2, [r1, #16]
 80085e4:	6923      	ldr	r3, [r4, #16]
 80085e6:	429a      	cmp	r2, r3
 80085e8:	bfa8      	it	ge
 80085ea:	4623      	movge	r3, r4
 80085ec:	460f      	mov	r7, r1
 80085ee:	bfa4      	itt	ge
 80085f0:	460c      	movge	r4, r1
 80085f2:	461f      	movge	r7, r3
 80085f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80085f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80085fc:	68a3      	ldr	r3, [r4, #8]
 80085fe:	6861      	ldr	r1, [r4, #4]
 8008600:	eb0a 0609 	add.w	r6, sl, r9
 8008604:	42b3      	cmp	r3, r6
 8008606:	b085      	sub	sp, #20
 8008608:	bfb8      	it	lt
 800860a:	3101      	addlt	r1, #1
 800860c:	f7ff fe92 	bl	8008334 <_Balloc>
 8008610:	b930      	cbnz	r0, 8008620 <__multiply+0x44>
 8008612:	4602      	mov	r2, r0
 8008614:	4b44      	ldr	r3, [pc, #272]	@ (8008728 <__multiply+0x14c>)
 8008616:	4845      	ldr	r0, [pc, #276]	@ (800872c <__multiply+0x150>)
 8008618:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800861c:	f001 fbc4 	bl	8009da8 <__assert_func>
 8008620:	f100 0514 	add.w	r5, r0, #20
 8008624:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008628:	462b      	mov	r3, r5
 800862a:	2200      	movs	r2, #0
 800862c:	4543      	cmp	r3, r8
 800862e:	d321      	bcc.n	8008674 <__multiply+0x98>
 8008630:	f107 0114 	add.w	r1, r7, #20
 8008634:	f104 0214 	add.w	r2, r4, #20
 8008638:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800863c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008640:	9302      	str	r3, [sp, #8]
 8008642:	1b13      	subs	r3, r2, r4
 8008644:	3b15      	subs	r3, #21
 8008646:	f023 0303 	bic.w	r3, r3, #3
 800864a:	3304      	adds	r3, #4
 800864c:	f104 0715 	add.w	r7, r4, #21
 8008650:	42ba      	cmp	r2, r7
 8008652:	bf38      	it	cc
 8008654:	2304      	movcc	r3, #4
 8008656:	9301      	str	r3, [sp, #4]
 8008658:	9b02      	ldr	r3, [sp, #8]
 800865a:	9103      	str	r1, [sp, #12]
 800865c:	428b      	cmp	r3, r1
 800865e:	d80c      	bhi.n	800867a <__multiply+0x9e>
 8008660:	2e00      	cmp	r6, #0
 8008662:	dd03      	ble.n	800866c <__multiply+0x90>
 8008664:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008668:	2b00      	cmp	r3, #0
 800866a:	d05b      	beq.n	8008724 <__multiply+0x148>
 800866c:	6106      	str	r6, [r0, #16]
 800866e:	b005      	add	sp, #20
 8008670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008674:	f843 2b04 	str.w	r2, [r3], #4
 8008678:	e7d8      	b.n	800862c <__multiply+0x50>
 800867a:	f8b1 a000 	ldrh.w	sl, [r1]
 800867e:	f1ba 0f00 	cmp.w	sl, #0
 8008682:	d024      	beq.n	80086ce <__multiply+0xf2>
 8008684:	f104 0e14 	add.w	lr, r4, #20
 8008688:	46a9      	mov	r9, r5
 800868a:	f04f 0c00 	mov.w	ip, #0
 800868e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008692:	f8d9 3000 	ldr.w	r3, [r9]
 8008696:	fa1f fb87 	uxth.w	fp, r7
 800869a:	b29b      	uxth	r3, r3
 800869c:	fb0a 330b 	mla	r3, sl, fp, r3
 80086a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80086a4:	f8d9 7000 	ldr.w	r7, [r9]
 80086a8:	4463      	add	r3, ip
 80086aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80086ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80086b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086bc:	4572      	cmp	r2, lr
 80086be:	f849 3b04 	str.w	r3, [r9], #4
 80086c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80086c6:	d8e2      	bhi.n	800868e <__multiply+0xb2>
 80086c8:	9b01      	ldr	r3, [sp, #4]
 80086ca:	f845 c003 	str.w	ip, [r5, r3]
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80086d4:	3104      	adds	r1, #4
 80086d6:	f1b9 0f00 	cmp.w	r9, #0
 80086da:	d021      	beq.n	8008720 <__multiply+0x144>
 80086dc:	682b      	ldr	r3, [r5, #0]
 80086de:	f104 0c14 	add.w	ip, r4, #20
 80086e2:	46ae      	mov	lr, r5
 80086e4:	f04f 0a00 	mov.w	sl, #0
 80086e8:	f8bc b000 	ldrh.w	fp, [ip]
 80086ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80086f0:	fb09 770b 	mla	r7, r9, fp, r7
 80086f4:	4457      	add	r7, sl
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80086fc:	f84e 3b04 	str.w	r3, [lr], #4
 8008700:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008704:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008708:	f8be 3000 	ldrh.w	r3, [lr]
 800870c:	fb09 330a 	mla	r3, r9, sl, r3
 8008710:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8008714:	4562      	cmp	r2, ip
 8008716:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800871a:	d8e5      	bhi.n	80086e8 <__multiply+0x10c>
 800871c:	9f01      	ldr	r7, [sp, #4]
 800871e:	51eb      	str	r3, [r5, r7]
 8008720:	3504      	adds	r5, #4
 8008722:	e799      	b.n	8008658 <__multiply+0x7c>
 8008724:	3e01      	subs	r6, #1
 8008726:	e79b      	b.n	8008660 <__multiply+0x84>
 8008728:	0800abd1 	.word	0x0800abd1
 800872c:	0800abe2 	.word	0x0800abe2

08008730 <__pow5mult>:
 8008730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008734:	4615      	mov	r5, r2
 8008736:	f012 0203 	ands.w	r2, r2, #3
 800873a:	4607      	mov	r7, r0
 800873c:	460e      	mov	r6, r1
 800873e:	d007      	beq.n	8008750 <__pow5mult+0x20>
 8008740:	4c25      	ldr	r4, [pc, #148]	@ (80087d8 <__pow5mult+0xa8>)
 8008742:	3a01      	subs	r2, #1
 8008744:	2300      	movs	r3, #0
 8008746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800874a:	f7ff fe55 	bl	80083f8 <__multadd>
 800874e:	4606      	mov	r6, r0
 8008750:	10ad      	asrs	r5, r5, #2
 8008752:	d03d      	beq.n	80087d0 <__pow5mult+0xa0>
 8008754:	69fc      	ldr	r4, [r7, #28]
 8008756:	b97c      	cbnz	r4, 8008778 <__pow5mult+0x48>
 8008758:	2010      	movs	r0, #16
 800875a:	f7ff fd35 	bl	80081c8 <malloc>
 800875e:	4602      	mov	r2, r0
 8008760:	61f8      	str	r0, [r7, #28]
 8008762:	b928      	cbnz	r0, 8008770 <__pow5mult+0x40>
 8008764:	4b1d      	ldr	r3, [pc, #116]	@ (80087dc <__pow5mult+0xac>)
 8008766:	481e      	ldr	r0, [pc, #120]	@ (80087e0 <__pow5mult+0xb0>)
 8008768:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800876c:	f001 fb1c 	bl	8009da8 <__assert_func>
 8008770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008774:	6004      	str	r4, [r0, #0]
 8008776:	60c4      	str	r4, [r0, #12]
 8008778:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800877c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008780:	b94c      	cbnz	r4, 8008796 <__pow5mult+0x66>
 8008782:	f240 2171 	movw	r1, #625	@ 0x271
 8008786:	4638      	mov	r0, r7
 8008788:	f7ff ff12 	bl	80085b0 <__i2b>
 800878c:	2300      	movs	r3, #0
 800878e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008792:	4604      	mov	r4, r0
 8008794:	6003      	str	r3, [r0, #0]
 8008796:	f04f 0900 	mov.w	r9, #0
 800879a:	07eb      	lsls	r3, r5, #31
 800879c:	d50a      	bpl.n	80087b4 <__pow5mult+0x84>
 800879e:	4631      	mov	r1, r6
 80087a0:	4622      	mov	r2, r4
 80087a2:	4638      	mov	r0, r7
 80087a4:	f7ff ff1a 	bl	80085dc <__multiply>
 80087a8:	4631      	mov	r1, r6
 80087aa:	4680      	mov	r8, r0
 80087ac:	4638      	mov	r0, r7
 80087ae:	f7ff fe01 	bl	80083b4 <_Bfree>
 80087b2:	4646      	mov	r6, r8
 80087b4:	106d      	asrs	r5, r5, #1
 80087b6:	d00b      	beq.n	80087d0 <__pow5mult+0xa0>
 80087b8:	6820      	ldr	r0, [r4, #0]
 80087ba:	b938      	cbnz	r0, 80087cc <__pow5mult+0x9c>
 80087bc:	4622      	mov	r2, r4
 80087be:	4621      	mov	r1, r4
 80087c0:	4638      	mov	r0, r7
 80087c2:	f7ff ff0b 	bl	80085dc <__multiply>
 80087c6:	6020      	str	r0, [r4, #0]
 80087c8:	f8c0 9000 	str.w	r9, [r0]
 80087cc:	4604      	mov	r4, r0
 80087ce:	e7e4      	b.n	800879a <__pow5mult+0x6a>
 80087d0:	4630      	mov	r0, r6
 80087d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087d6:	bf00      	nop
 80087d8:	0800ac3c 	.word	0x0800ac3c
 80087dc:	0800ab62 	.word	0x0800ab62
 80087e0:	0800abe2 	.word	0x0800abe2

080087e4 <__lshift>:
 80087e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087e8:	460c      	mov	r4, r1
 80087ea:	6849      	ldr	r1, [r1, #4]
 80087ec:	6923      	ldr	r3, [r4, #16]
 80087ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80087f2:	68a3      	ldr	r3, [r4, #8]
 80087f4:	4607      	mov	r7, r0
 80087f6:	4691      	mov	r9, r2
 80087f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80087fc:	f108 0601 	add.w	r6, r8, #1
 8008800:	42b3      	cmp	r3, r6
 8008802:	db0b      	blt.n	800881c <__lshift+0x38>
 8008804:	4638      	mov	r0, r7
 8008806:	f7ff fd95 	bl	8008334 <_Balloc>
 800880a:	4605      	mov	r5, r0
 800880c:	b948      	cbnz	r0, 8008822 <__lshift+0x3e>
 800880e:	4602      	mov	r2, r0
 8008810:	4b28      	ldr	r3, [pc, #160]	@ (80088b4 <__lshift+0xd0>)
 8008812:	4829      	ldr	r0, [pc, #164]	@ (80088b8 <__lshift+0xd4>)
 8008814:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008818:	f001 fac6 	bl	8009da8 <__assert_func>
 800881c:	3101      	adds	r1, #1
 800881e:	005b      	lsls	r3, r3, #1
 8008820:	e7ee      	b.n	8008800 <__lshift+0x1c>
 8008822:	2300      	movs	r3, #0
 8008824:	f100 0114 	add.w	r1, r0, #20
 8008828:	f100 0210 	add.w	r2, r0, #16
 800882c:	4618      	mov	r0, r3
 800882e:	4553      	cmp	r3, sl
 8008830:	db33      	blt.n	800889a <__lshift+0xb6>
 8008832:	6920      	ldr	r0, [r4, #16]
 8008834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008838:	f104 0314 	add.w	r3, r4, #20
 800883c:	f019 091f 	ands.w	r9, r9, #31
 8008840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008844:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008848:	d02b      	beq.n	80088a2 <__lshift+0xbe>
 800884a:	f1c9 0e20 	rsb	lr, r9, #32
 800884e:	468a      	mov	sl, r1
 8008850:	2200      	movs	r2, #0
 8008852:	6818      	ldr	r0, [r3, #0]
 8008854:	fa00 f009 	lsl.w	r0, r0, r9
 8008858:	4310      	orrs	r0, r2
 800885a:	f84a 0b04 	str.w	r0, [sl], #4
 800885e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008862:	459c      	cmp	ip, r3
 8008864:	fa22 f20e 	lsr.w	r2, r2, lr
 8008868:	d8f3      	bhi.n	8008852 <__lshift+0x6e>
 800886a:	ebac 0304 	sub.w	r3, ip, r4
 800886e:	3b15      	subs	r3, #21
 8008870:	f023 0303 	bic.w	r3, r3, #3
 8008874:	3304      	adds	r3, #4
 8008876:	f104 0015 	add.w	r0, r4, #21
 800887a:	4584      	cmp	ip, r0
 800887c:	bf38      	it	cc
 800887e:	2304      	movcc	r3, #4
 8008880:	50ca      	str	r2, [r1, r3]
 8008882:	b10a      	cbz	r2, 8008888 <__lshift+0xa4>
 8008884:	f108 0602 	add.w	r6, r8, #2
 8008888:	3e01      	subs	r6, #1
 800888a:	4638      	mov	r0, r7
 800888c:	612e      	str	r6, [r5, #16]
 800888e:	4621      	mov	r1, r4
 8008890:	f7ff fd90 	bl	80083b4 <_Bfree>
 8008894:	4628      	mov	r0, r5
 8008896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800889a:	f842 0f04 	str.w	r0, [r2, #4]!
 800889e:	3301      	adds	r3, #1
 80088a0:	e7c5      	b.n	800882e <__lshift+0x4a>
 80088a2:	3904      	subs	r1, #4
 80088a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80088a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80088ac:	459c      	cmp	ip, r3
 80088ae:	d8f9      	bhi.n	80088a4 <__lshift+0xc0>
 80088b0:	e7ea      	b.n	8008888 <__lshift+0xa4>
 80088b2:	bf00      	nop
 80088b4:	0800abd1 	.word	0x0800abd1
 80088b8:	0800abe2 	.word	0x0800abe2

080088bc <__mcmp>:
 80088bc:	690a      	ldr	r2, [r1, #16]
 80088be:	4603      	mov	r3, r0
 80088c0:	6900      	ldr	r0, [r0, #16]
 80088c2:	1a80      	subs	r0, r0, r2
 80088c4:	b530      	push	{r4, r5, lr}
 80088c6:	d10e      	bne.n	80088e6 <__mcmp+0x2a>
 80088c8:	3314      	adds	r3, #20
 80088ca:	3114      	adds	r1, #20
 80088cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80088d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80088d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80088d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80088dc:	4295      	cmp	r5, r2
 80088de:	d003      	beq.n	80088e8 <__mcmp+0x2c>
 80088e0:	d205      	bcs.n	80088ee <__mcmp+0x32>
 80088e2:	f04f 30ff 	mov.w	r0, #4294967295
 80088e6:	bd30      	pop	{r4, r5, pc}
 80088e8:	42a3      	cmp	r3, r4
 80088ea:	d3f3      	bcc.n	80088d4 <__mcmp+0x18>
 80088ec:	e7fb      	b.n	80088e6 <__mcmp+0x2a>
 80088ee:	2001      	movs	r0, #1
 80088f0:	e7f9      	b.n	80088e6 <__mcmp+0x2a>
	...

080088f4 <__mdiff>:
 80088f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088f8:	4689      	mov	r9, r1
 80088fa:	4606      	mov	r6, r0
 80088fc:	4611      	mov	r1, r2
 80088fe:	4648      	mov	r0, r9
 8008900:	4614      	mov	r4, r2
 8008902:	f7ff ffdb 	bl	80088bc <__mcmp>
 8008906:	1e05      	subs	r5, r0, #0
 8008908:	d112      	bne.n	8008930 <__mdiff+0x3c>
 800890a:	4629      	mov	r1, r5
 800890c:	4630      	mov	r0, r6
 800890e:	f7ff fd11 	bl	8008334 <_Balloc>
 8008912:	4602      	mov	r2, r0
 8008914:	b928      	cbnz	r0, 8008922 <__mdiff+0x2e>
 8008916:	4b3f      	ldr	r3, [pc, #252]	@ (8008a14 <__mdiff+0x120>)
 8008918:	f240 2137 	movw	r1, #567	@ 0x237
 800891c:	483e      	ldr	r0, [pc, #248]	@ (8008a18 <__mdiff+0x124>)
 800891e:	f001 fa43 	bl	8009da8 <__assert_func>
 8008922:	2301      	movs	r3, #1
 8008924:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008928:	4610      	mov	r0, r2
 800892a:	b003      	add	sp, #12
 800892c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008930:	bfbc      	itt	lt
 8008932:	464b      	movlt	r3, r9
 8008934:	46a1      	movlt	r9, r4
 8008936:	4630      	mov	r0, r6
 8008938:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800893c:	bfba      	itte	lt
 800893e:	461c      	movlt	r4, r3
 8008940:	2501      	movlt	r5, #1
 8008942:	2500      	movge	r5, #0
 8008944:	f7ff fcf6 	bl	8008334 <_Balloc>
 8008948:	4602      	mov	r2, r0
 800894a:	b918      	cbnz	r0, 8008954 <__mdiff+0x60>
 800894c:	4b31      	ldr	r3, [pc, #196]	@ (8008a14 <__mdiff+0x120>)
 800894e:	f240 2145 	movw	r1, #581	@ 0x245
 8008952:	e7e3      	b.n	800891c <__mdiff+0x28>
 8008954:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008958:	6926      	ldr	r6, [r4, #16]
 800895a:	60c5      	str	r5, [r0, #12]
 800895c:	f109 0310 	add.w	r3, r9, #16
 8008960:	f109 0514 	add.w	r5, r9, #20
 8008964:	f104 0e14 	add.w	lr, r4, #20
 8008968:	f100 0b14 	add.w	fp, r0, #20
 800896c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008970:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008974:	9301      	str	r3, [sp, #4]
 8008976:	46d9      	mov	r9, fp
 8008978:	f04f 0c00 	mov.w	ip, #0
 800897c:	9b01      	ldr	r3, [sp, #4]
 800897e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008982:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008986:	9301      	str	r3, [sp, #4]
 8008988:	fa1f f38a 	uxth.w	r3, sl
 800898c:	4619      	mov	r1, r3
 800898e:	b283      	uxth	r3, r0
 8008990:	1acb      	subs	r3, r1, r3
 8008992:	0c00      	lsrs	r0, r0, #16
 8008994:	4463      	add	r3, ip
 8008996:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800899a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800899e:	b29b      	uxth	r3, r3
 80089a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80089a4:	4576      	cmp	r6, lr
 80089a6:	f849 3b04 	str.w	r3, [r9], #4
 80089aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80089ae:	d8e5      	bhi.n	800897c <__mdiff+0x88>
 80089b0:	1b33      	subs	r3, r6, r4
 80089b2:	3b15      	subs	r3, #21
 80089b4:	f023 0303 	bic.w	r3, r3, #3
 80089b8:	3415      	adds	r4, #21
 80089ba:	3304      	adds	r3, #4
 80089bc:	42a6      	cmp	r6, r4
 80089be:	bf38      	it	cc
 80089c0:	2304      	movcc	r3, #4
 80089c2:	441d      	add	r5, r3
 80089c4:	445b      	add	r3, fp
 80089c6:	461e      	mov	r6, r3
 80089c8:	462c      	mov	r4, r5
 80089ca:	4544      	cmp	r4, r8
 80089cc:	d30e      	bcc.n	80089ec <__mdiff+0xf8>
 80089ce:	f108 0103 	add.w	r1, r8, #3
 80089d2:	1b49      	subs	r1, r1, r5
 80089d4:	f021 0103 	bic.w	r1, r1, #3
 80089d8:	3d03      	subs	r5, #3
 80089da:	45a8      	cmp	r8, r5
 80089dc:	bf38      	it	cc
 80089de:	2100      	movcc	r1, #0
 80089e0:	440b      	add	r3, r1
 80089e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089e6:	b191      	cbz	r1, 8008a0e <__mdiff+0x11a>
 80089e8:	6117      	str	r7, [r2, #16]
 80089ea:	e79d      	b.n	8008928 <__mdiff+0x34>
 80089ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80089f0:	46e6      	mov	lr, ip
 80089f2:	0c08      	lsrs	r0, r1, #16
 80089f4:	fa1c fc81 	uxtah	ip, ip, r1
 80089f8:	4471      	add	r1, lr
 80089fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80089fe:	b289      	uxth	r1, r1
 8008a00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008a04:	f846 1b04 	str.w	r1, [r6], #4
 8008a08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008a0c:	e7dd      	b.n	80089ca <__mdiff+0xd6>
 8008a0e:	3f01      	subs	r7, #1
 8008a10:	e7e7      	b.n	80089e2 <__mdiff+0xee>
 8008a12:	bf00      	nop
 8008a14:	0800abd1 	.word	0x0800abd1
 8008a18:	0800abe2 	.word	0x0800abe2

08008a1c <__ulp>:
 8008a1c:	b082      	sub	sp, #8
 8008a1e:	ed8d 0b00 	vstr	d0, [sp]
 8008a22:	9a01      	ldr	r2, [sp, #4]
 8008a24:	4b0f      	ldr	r3, [pc, #60]	@ (8008a64 <__ulp+0x48>)
 8008a26:	4013      	ands	r3, r2
 8008a28:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dc08      	bgt.n	8008a42 <__ulp+0x26>
 8008a30:	425b      	negs	r3, r3
 8008a32:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008a36:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008a3a:	da04      	bge.n	8008a46 <__ulp+0x2a>
 8008a3c:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008a40:	4113      	asrs	r3, r2
 8008a42:	2200      	movs	r2, #0
 8008a44:	e008      	b.n	8008a58 <__ulp+0x3c>
 8008a46:	f1a2 0314 	sub.w	r3, r2, #20
 8008a4a:	2b1e      	cmp	r3, #30
 8008a4c:	bfda      	itte	le
 8008a4e:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008a52:	40da      	lsrle	r2, r3
 8008a54:	2201      	movgt	r2, #1
 8008a56:	2300      	movs	r3, #0
 8008a58:	4619      	mov	r1, r3
 8008a5a:	4610      	mov	r0, r2
 8008a5c:	ec41 0b10 	vmov	d0, r0, r1
 8008a60:	b002      	add	sp, #8
 8008a62:	4770      	bx	lr
 8008a64:	7ff00000 	.word	0x7ff00000

08008a68 <__b2d>:
 8008a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6c:	6906      	ldr	r6, [r0, #16]
 8008a6e:	f100 0814 	add.w	r8, r0, #20
 8008a72:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008a76:	1f37      	subs	r7, r6, #4
 8008a78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	f7ff fd4b 	bl	8008518 <__hi0bits>
 8008a82:	f1c0 0320 	rsb	r3, r0, #32
 8008a86:	280a      	cmp	r0, #10
 8008a88:	600b      	str	r3, [r1, #0]
 8008a8a:	491b      	ldr	r1, [pc, #108]	@ (8008af8 <__b2d+0x90>)
 8008a8c:	dc15      	bgt.n	8008aba <__b2d+0x52>
 8008a8e:	f1c0 0c0b 	rsb	ip, r0, #11
 8008a92:	fa22 f30c 	lsr.w	r3, r2, ip
 8008a96:	45b8      	cmp	r8, r7
 8008a98:	ea43 0501 	orr.w	r5, r3, r1
 8008a9c:	bf34      	ite	cc
 8008a9e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008aa2:	2300      	movcs	r3, #0
 8008aa4:	3015      	adds	r0, #21
 8008aa6:	fa02 f000 	lsl.w	r0, r2, r0
 8008aaa:	fa23 f30c 	lsr.w	r3, r3, ip
 8008aae:	4303      	orrs	r3, r0
 8008ab0:	461c      	mov	r4, r3
 8008ab2:	ec45 4b10 	vmov	d0, r4, r5
 8008ab6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008aba:	45b8      	cmp	r8, r7
 8008abc:	bf3a      	itte	cc
 8008abe:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008ac2:	f1a6 0708 	subcc.w	r7, r6, #8
 8008ac6:	2300      	movcs	r3, #0
 8008ac8:	380b      	subs	r0, #11
 8008aca:	d012      	beq.n	8008af2 <__b2d+0x8a>
 8008acc:	f1c0 0120 	rsb	r1, r0, #32
 8008ad0:	fa23 f401 	lsr.w	r4, r3, r1
 8008ad4:	4082      	lsls	r2, r0
 8008ad6:	4322      	orrs	r2, r4
 8008ad8:	4547      	cmp	r7, r8
 8008ada:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008ade:	bf8c      	ite	hi
 8008ae0:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008ae4:	2200      	movls	r2, #0
 8008ae6:	4083      	lsls	r3, r0
 8008ae8:	40ca      	lsrs	r2, r1
 8008aea:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008aee:	4313      	orrs	r3, r2
 8008af0:	e7de      	b.n	8008ab0 <__b2d+0x48>
 8008af2:	ea42 0501 	orr.w	r5, r2, r1
 8008af6:	e7db      	b.n	8008ab0 <__b2d+0x48>
 8008af8:	3ff00000 	.word	0x3ff00000

08008afc <__d2b>:
 8008afc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008b00:	460f      	mov	r7, r1
 8008b02:	2101      	movs	r1, #1
 8008b04:	ec59 8b10 	vmov	r8, r9, d0
 8008b08:	4616      	mov	r6, r2
 8008b0a:	f7ff fc13 	bl	8008334 <_Balloc>
 8008b0e:	4604      	mov	r4, r0
 8008b10:	b930      	cbnz	r0, 8008b20 <__d2b+0x24>
 8008b12:	4602      	mov	r2, r0
 8008b14:	4b23      	ldr	r3, [pc, #140]	@ (8008ba4 <__d2b+0xa8>)
 8008b16:	4824      	ldr	r0, [pc, #144]	@ (8008ba8 <__d2b+0xac>)
 8008b18:	f240 310f 	movw	r1, #783	@ 0x30f
 8008b1c:	f001 f944 	bl	8009da8 <__assert_func>
 8008b20:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008b24:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008b28:	b10d      	cbz	r5, 8008b2e <__d2b+0x32>
 8008b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008b2e:	9301      	str	r3, [sp, #4]
 8008b30:	f1b8 0300 	subs.w	r3, r8, #0
 8008b34:	d023      	beq.n	8008b7e <__d2b+0x82>
 8008b36:	4668      	mov	r0, sp
 8008b38:	9300      	str	r3, [sp, #0]
 8008b3a:	f7ff fd0c 	bl	8008556 <__lo0bits>
 8008b3e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008b42:	b1d0      	cbz	r0, 8008b7a <__d2b+0x7e>
 8008b44:	f1c0 0320 	rsb	r3, r0, #32
 8008b48:	fa02 f303 	lsl.w	r3, r2, r3
 8008b4c:	430b      	orrs	r3, r1
 8008b4e:	40c2      	lsrs	r2, r0
 8008b50:	6163      	str	r3, [r4, #20]
 8008b52:	9201      	str	r2, [sp, #4]
 8008b54:	9b01      	ldr	r3, [sp, #4]
 8008b56:	61a3      	str	r3, [r4, #24]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	bf0c      	ite	eq
 8008b5c:	2201      	moveq	r2, #1
 8008b5e:	2202      	movne	r2, #2
 8008b60:	6122      	str	r2, [r4, #16]
 8008b62:	b1a5      	cbz	r5, 8008b8e <__d2b+0x92>
 8008b64:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008b68:	4405      	add	r5, r0
 8008b6a:	603d      	str	r5, [r7, #0]
 8008b6c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008b70:	6030      	str	r0, [r6, #0]
 8008b72:	4620      	mov	r0, r4
 8008b74:	b003      	add	sp, #12
 8008b76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008b7a:	6161      	str	r1, [r4, #20]
 8008b7c:	e7ea      	b.n	8008b54 <__d2b+0x58>
 8008b7e:	a801      	add	r0, sp, #4
 8008b80:	f7ff fce9 	bl	8008556 <__lo0bits>
 8008b84:	9b01      	ldr	r3, [sp, #4]
 8008b86:	6163      	str	r3, [r4, #20]
 8008b88:	3020      	adds	r0, #32
 8008b8a:	2201      	movs	r2, #1
 8008b8c:	e7e8      	b.n	8008b60 <__d2b+0x64>
 8008b8e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008b92:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008b96:	6038      	str	r0, [r7, #0]
 8008b98:	6918      	ldr	r0, [r3, #16]
 8008b9a:	f7ff fcbd 	bl	8008518 <__hi0bits>
 8008b9e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008ba2:	e7e5      	b.n	8008b70 <__d2b+0x74>
 8008ba4:	0800abd1 	.word	0x0800abd1
 8008ba8:	0800abe2 	.word	0x0800abe2

08008bac <__ratio>:
 8008bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bb0:	4688      	mov	r8, r1
 8008bb2:	4669      	mov	r1, sp
 8008bb4:	4681      	mov	r9, r0
 8008bb6:	f7ff ff57 	bl	8008a68 <__b2d>
 8008bba:	a901      	add	r1, sp, #4
 8008bbc:	4640      	mov	r0, r8
 8008bbe:	ec55 4b10 	vmov	r4, r5, d0
 8008bc2:	f7ff ff51 	bl	8008a68 <__b2d>
 8008bc6:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8008bca:	f8d9 2010 	ldr.w	r2, [r9, #16]
 8008bce:	1ad2      	subs	r2, r2, r3
 8008bd0:	e9dd 3100 	ldrd	r3, r1, [sp]
 8008bd4:	1a5b      	subs	r3, r3, r1
 8008bd6:	eb03 1342 	add.w	r3, r3, r2, lsl #5
 8008bda:	ec57 6b10 	vmov	r6, r7, d0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	bfd6      	itet	le
 8008be2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008be6:	462a      	movgt	r2, r5
 8008be8:	463a      	movle	r2, r7
 8008bea:	46ab      	mov	fp, r5
 8008bec:	46a2      	mov	sl, r4
 8008bee:	bfce      	itee	gt
 8008bf0:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8008bf4:	eb02 5303 	addle.w	r3, r2, r3, lsl #20
 8008bf8:	ee00 3a90 	vmovle	s1, r3
 8008bfc:	ec4b ab17 	vmov	d7, sl, fp
 8008c00:	ee87 0b00 	vdiv.f64	d0, d7, d0
 8008c04:	b003      	add	sp, #12
 8008c06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008c0a <__copybits>:
 8008c0a:	3901      	subs	r1, #1
 8008c0c:	b570      	push	{r4, r5, r6, lr}
 8008c0e:	1149      	asrs	r1, r1, #5
 8008c10:	6914      	ldr	r4, [r2, #16]
 8008c12:	3101      	adds	r1, #1
 8008c14:	f102 0314 	add.w	r3, r2, #20
 8008c18:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008c1c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008c20:	1f05      	subs	r5, r0, #4
 8008c22:	42a3      	cmp	r3, r4
 8008c24:	d30c      	bcc.n	8008c40 <__copybits+0x36>
 8008c26:	1aa3      	subs	r3, r4, r2
 8008c28:	3b11      	subs	r3, #17
 8008c2a:	f023 0303 	bic.w	r3, r3, #3
 8008c2e:	3211      	adds	r2, #17
 8008c30:	42a2      	cmp	r2, r4
 8008c32:	bf88      	it	hi
 8008c34:	2300      	movhi	r3, #0
 8008c36:	4418      	add	r0, r3
 8008c38:	2300      	movs	r3, #0
 8008c3a:	4288      	cmp	r0, r1
 8008c3c:	d305      	bcc.n	8008c4a <__copybits+0x40>
 8008c3e:	bd70      	pop	{r4, r5, r6, pc}
 8008c40:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c44:	f845 6f04 	str.w	r6, [r5, #4]!
 8008c48:	e7eb      	b.n	8008c22 <__copybits+0x18>
 8008c4a:	f840 3b04 	str.w	r3, [r0], #4
 8008c4e:	e7f4      	b.n	8008c3a <__copybits+0x30>

08008c50 <__any_on>:
 8008c50:	f100 0214 	add.w	r2, r0, #20
 8008c54:	6900      	ldr	r0, [r0, #16]
 8008c56:	114b      	asrs	r3, r1, #5
 8008c58:	4298      	cmp	r0, r3
 8008c5a:	b510      	push	{r4, lr}
 8008c5c:	db11      	blt.n	8008c82 <__any_on+0x32>
 8008c5e:	dd0a      	ble.n	8008c76 <__any_on+0x26>
 8008c60:	f011 011f 	ands.w	r1, r1, #31
 8008c64:	d007      	beq.n	8008c76 <__any_on+0x26>
 8008c66:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008c6a:	fa24 f001 	lsr.w	r0, r4, r1
 8008c6e:	fa00 f101 	lsl.w	r1, r0, r1
 8008c72:	428c      	cmp	r4, r1
 8008c74:	d10b      	bne.n	8008c8e <__any_on+0x3e>
 8008c76:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008c7a:	4293      	cmp	r3, r2
 8008c7c:	d803      	bhi.n	8008c86 <__any_on+0x36>
 8008c7e:	2000      	movs	r0, #0
 8008c80:	bd10      	pop	{r4, pc}
 8008c82:	4603      	mov	r3, r0
 8008c84:	e7f7      	b.n	8008c76 <__any_on+0x26>
 8008c86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008c8a:	2900      	cmp	r1, #0
 8008c8c:	d0f5      	beq.n	8008c7a <__any_on+0x2a>
 8008c8e:	2001      	movs	r0, #1
 8008c90:	e7f6      	b.n	8008c80 <__any_on+0x30>

08008c92 <sulp>:
 8008c92:	b570      	push	{r4, r5, r6, lr}
 8008c94:	4604      	mov	r4, r0
 8008c96:	460d      	mov	r5, r1
 8008c98:	4616      	mov	r6, r2
 8008c9a:	ec45 4b10 	vmov	d0, r4, r5
 8008c9e:	f7ff febd 	bl	8008a1c <__ulp>
 8008ca2:	b17e      	cbz	r6, 8008cc4 <sulp+0x32>
 8008ca4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008ca8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	dd09      	ble.n	8008cc4 <sulp+0x32>
 8008cb0:	051b      	lsls	r3, r3, #20
 8008cb2:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 8008cb6:	2000      	movs	r0, #0
 8008cb8:	f501 1140 	add.w	r1, r1, #3145728	@ 0x300000
 8008cbc:	ec41 0b17 	vmov	d7, r0, r1
 8008cc0:	ee20 0b07 	vmul.f64	d0, d0, d7
 8008cc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08008cc8 <_strtod_l>:
 8008cc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ccc:	ed2d 8b0a 	vpush	{d8-d12}
 8008cd0:	b097      	sub	sp, #92	@ 0x5c
 8008cd2:	4688      	mov	r8, r1
 8008cd4:	920e      	str	r2, [sp, #56]	@ 0x38
 8008cd6:	2200      	movs	r2, #0
 8008cd8:	9212      	str	r2, [sp, #72]	@ 0x48
 8008cda:	9005      	str	r0, [sp, #20]
 8008cdc:	f04f 0a00 	mov.w	sl, #0
 8008ce0:	f04f 0b00 	mov.w	fp, #0
 8008ce4:	460a      	mov	r2, r1
 8008ce6:	9211      	str	r2, [sp, #68]	@ 0x44
 8008ce8:	7811      	ldrb	r1, [r2, #0]
 8008cea:	292b      	cmp	r1, #43	@ 0x2b
 8008cec:	d04c      	beq.n	8008d88 <_strtod_l+0xc0>
 8008cee:	d839      	bhi.n	8008d64 <_strtod_l+0x9c>
 8008cf0:	290d      	cmp	r1, #13
 8008cf2:	d833      	bhi.n	8008d5c <_strtod_l+0x94>
 8008cf4:	2908      	cmp	r1, #8
 8008cf6:	d833      	bhi.n	8008d60 <_strtod_l+0x98>
 8008cf8:	2900      	cmp	r1, #0
 8008cfa:	d03c      	beq.n	8008d76 <_strtod_l+0xae>
 8008cfc:	2200      	movs	r2, #0
 8008cfe:	9208      	str	r2, [sp, #32]
 8008d00:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8008d02:	782a      	ldrb	r2, [r5, #0]
 8008d04:	2a30      	cmp	r2, #48	@ 0x30
 8008d06:	f040 80b5 	bne.w	8008e74 <_strtod_l+0x1ac>
 8008d0a:	786a      	ldrb	r2, [r5, #1]
 8008d0c:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008d10:	2a58      	cmp	r2, #88	@ 0x58
 8008d12:	d170      	bne.n	8008df6 <_strtod_l+0x12e>
 8008d14:	9302      	str	r3, [sp, #8]
 8008d16:	9b08      	ldr	r3, [sp, #32]
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	ab12      	add	r3, sp, #72	@ 0x48
 8008d1c:	9300      	str	r3, [sp, #0]
 8008d1e:	4a8b      	ldr	r2, [pc, #556]	@ (8008f4c <_strtod_l+0x284>)
 8008d20:	9805      	ldr	r0, [sp, #20]
 8008d22:	ab13      	add	r3, sp, #76	@ 0x4c
 8008d24:	a911      	add	r1, sp, #68	@ 0x44
 8008d26:	f001 f8d9 	bl	8009edc <__gethex>
 8008d2a:	f010 060f 	ands.w	r6, r0, #15
 8008d2e:	4604      	mov	r4, r0
 8008d30:	d005      	beq.n	8008d3e <_strtod_l+0x76>
 8008d32:	2e06      	cmp	r6, #6
 8008d34:	d12a      	bne.n	8008d8c <_strtod_l+0xc4>
 8008d36:	3501      	adds	r5, #1
 8008d38:	2300      	movs	r3, #0
 8008d3a:	9511      	str	r5, [sp, #68]	@ 0x44
 8008d3c:	9308      	str	r3, [sp, #32]
 8008d3e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	f040 852f 	bne.w	80097a4 <_strtod_l+0xadc>
 8008d46:	9b08      	ldr	r3, [sp, #32]
 8008d48:	ec4b ab10 	vmov	d0, sl, fp
 8008d4c:	b1cb      	cbz	r3, 8008d82 <_strtod_l+0xba>
 8008d4e:	eeb1 0b40 	vneg.f64	d0, d0
 8008d52:	b017      	add	sp, #92	@ 0x5c
 8008d54:	ecbd 8b0a 	vpop	{d8-d12}
 8008d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d5c:	2920      	cmp	r1, #32
 8008d5e:	d1cd      	bne.n	8008cfc <_strtod_l+0x34>
 8008d60:	3201      	adds	r2, #1
 8008d62:	e7c0      	b.n	8008ce6 <_strtod_l+0x1e>
 8008d64:	292d      	cmp	r1, #45	@ 0x2d
 8008d66:	d1c9      	bne.n	8008cfc <_strtod_l+0x34>
 8008d68:	2101      	movs	r1, #1
 8008d6a:	9108      	str	r1, [sp, #32]
 8008d6c:	1c51      	adds	r1, r2, #1
 8008d6e:	9111      	str	r1, [sp, #68]	@ 0x44
 8008d70:	7852      	ldrb	r2, [r2, #1]
 8008d72:	2a00      	cmp	r2, #0
 8008d74:	d1c4      	bne.n	8008d00 <_strtod_l+0x38>
 8008d76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d78:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f040 850f 	bne.w	80097a0 <_strtod_l+0xad8>
 8008d82:	ec4b ab10 	vmov	d0, sl, fp
 8008d86:	e7e4      	b.n	8008d52 <_strtod_l+0x8a>
 8008d88:	2100      	movs	r1, #0
 8008d8a:	e7ee      	b.n	8008d6a <_strtod_l+0xa2>
 8008d8c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008d8e:	b13a      	cbz	r2, 8008da0 <_strtod_l+0xd8>
 8008d90:	2135      	movs	r1, #53	@ 0x35
 8008d92:	a814      	add	r0, sp, #80	@ 0x50
 8008d94:	f7ff ff39 	bl	8008c0a <__copybits>
 8008d98:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8008d9a:	9805      	ldr	r0, [sp, #20]
 8008d9c:	f7ff fb0a 	bl	80083b4 <_Bfree>
 8008da0:	1e73      	subs	r3, r6, #1
 8008da2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8008da4:	2b04      	cmp	r3, #4
 8008da6:	d806      	bhi.n	8008db6 <_strtod_l+0xee>
 8008da8:	e8df f003 	tbb	[pc, r3]
 8008dac:	201d0314 	.word	0x201d0314
 8008db0:	14          	.byte	0x14
 8008db1:	00          	.byte	0x00
 8008db2:	e9dd ab14 	ldrd	sl, fp, [sp, #80]	@ 0x50
 8008db6:	05e3      	lsls	r3, r4, #23
 8008db8:	bf48      	it	mi
 8008dba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008dbe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008dc2:	0d1b      	lsrs	r3, r3, #20
 8008dc4:	051b      	lsls	r3, r3, #20
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1b9      	bne.n	8008d3e <_strtod_l+0x76>
 8008dca:	f7fe fba1 	bl	8007510 <__errno>
 8008dce:	2322      	movs	r3, #34	@ 0x22
 8008dd0:	6003      	str	r3, [r0, #0]
 8008dd2:	e7b4      	b.n	8008d3e <_strtod_l+0x76>
 8008dd4:	e9dd a314 	ldrd	sl, r3, [sp, #80]	@ 0x50
 8008dd8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008ddc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008de0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008de4:	e7e7      	b.n	8008db6 <_strtod_l+0xee>
 8008de6:	f8df b16c 	ldr.w	fp, [pc, #364]	@ 8008f54 <_strtod_l+0x28c>
 8008dea:	e7e4      	b.n	8008db6 <_strtod_l+0xee>
 8008dec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008df0:	f04f 3aff 	mov.w	sl, #4294967295
 8008df4:	e7df      	b.n	8008db6 <_strtod_l+0xee>
 8008df6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008df8:	1c5a      	adds	r2, r3, #1
 8008dfa:	9211      	str	r2, [sp, #68]	@ 0x44
 8008dfc:	785b      	ldrb	r3, [r3, #1]
 8008dfe:	2b30      	cmp	r3, #48	@ 0x30
 8008e00:	d0f9      	beq.n	8008df6 <_strtod_l+0x12e>
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d09b      	beq.n	8008d3e <_strtod_l+0x76>
 8008e06:	2301      	movs	r3, #1
 8008e08:	2600      	movs	r6, #0
 8008e0a:	9307      	str	r3, [sp, #28]
 8008e0c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e0e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e10:	46b1      	mov	r9, r6
 8008e12:	4635      	mov	r5, r6
 8008e14:	220a      	movs	r2, #10
 8008e16:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8008e18:	7804      	ldrb	r4, [r0, #0]
 8008e1a:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8008e1e:	b2d9      	uxtb	r1, r3
 8008e20:	2909      	cmp	r1, #9
 8008e22:	d929      	bls.n	8008e78 <_strtod_l+0x1b0>
 8008e24:	494a      	ldr	r1, [pc, #296]	@ (8008f50 <_strtod_l+0x288>)
 8008e26:	2201      	movs	r2, #1
 8008e28:	f000 ff84 	bl	8009d34 <strncmp>
 8008e2c:	b378      	cbz	r0, 8008e8e <_strtod_l+0x1c6>
 8008e2e:	2000      	movs	r0, #0
 8008e30:	4622      	mov	r2, r4
 8008e32:	462b      	mov	r3, r5
 8008e34:	4607      	mov	r7, r0
 8008e36:	9006      	str	r0, [sp, #24]
 8008e38:	2a65      	cmp	r2, #101	@ 0x65
 8008e3a:	d001      	beq.n	8008e40 <_strtod_l+0x178>
 8008e3c:	2a45      	cmp	r2, #69	@ 0x45
 8008e3e:	d117      	bne.n	8008e70 <_strtod_l+0x1a8>
 8008e40:	b91b      	cbnz	r3, 8008e4a <_strtod_l+0x182>
 8008e42:	9b07      	ldr	r3, [sp, #28]
 8008e44:	4303      	orrs	r3, r0
 8008e46:	d096      	beq.n	8008d76 <_strtod_l+0xae>
 8008e48:	2300      	movs	r3, #0
 8008e4a:	f8dd 8044 	ldr.w	r8, [sp, #68]	@ 0x44
 8008e4e:	f108 0201 	add.w	r2, r8, #1
 8008e52:	9211      	str	r2, [sp, #68]	@ 0x44
 8008e54:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008e58:	2a2b      	cmp	r2, #43	@ 0x2b
 8008e5a:	d06b      	beq.n	8008f34 <_strtod_l+0x26c>
 8008e5c:	2a2d      	cmp	r2, #45	@ 0x2d
 8008e5e:	d071      	beq.n	8008f44 <_strtod_l+0x27c>
 8008e60:	f04f 0e00 	mov.w	lr, #0
 8008e64:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8008e68:	2c09      	cmp	r4, #9
 8008e6a:	d979      	bls.n	8008f60 <_strtod_l+0x298>
 8008e6c:	f8cd 8044 	str.w	r8, [sp, #68]	@ 0x44
 8008e70:	2400      	movs	r4, #0
 8008e72:	e094      	b.n	8008f9e <_strtod_l+0x2d6>
 8008e74:	2300      	movs	r3, #0
 8008e76:	e7c7      	b.n	8008e08 <_strtod_l+0x140>
 8008e78:	2d08      	cmp	r5, #8
 8008e7a:	f100 0001 	add.w	r0, r0, #1
 8008e7e:	bfd4      	ite	le
 8008e80:	fb02 3909 	mlale	r9, r2, r9, r3
 8008e84:	fb02 3606 	mlagt	r6, r2, r6, r3
 8008e88:	3501      	adds	r5, #1
 8008e8a:	9011      	str	r0, [sp, #68]	@ 0x44
 8008e8c:	e7c3      	b.n	8008e16 <_strtod_l+0x14e>
 8008e8e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008e90:	1c5a      	adds	r2, r3, #1
 8008e92:	9211      	str	r2, [sp, #68]	@ 0x44
 8008e94:	785a      	ldrb	r2, [r3, #1]
 8008e96:	b375      	cbz	r5, 8008ef6 <_strtod_l+0x22e>
 8008e98:	4607      	mov	r7, r0
 8008e9a:	462b      	mov	r3, r5
 8008e9c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008ea0:	2909      	cmp	r1, #9
 8008ea2:	d913      	bls.n	8008ecc <_strtod_l+0x204>
 8008ea4:	2101      	movs	r1, #1
 8008ea6:	9106      	str	r1, [sp, #24]
 8008ea8:	e7c6      	b.n	8008e38 <_strtod_l+0x170>
 8008eaa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008eac:	1c5a      	adds	r2, r3, #1
 8008eae:	9211      	str	r2, [sp, #68]	@ 0x44
 8008eb0:	785a      	ldrb	r2, [r3, #1]
 8008eb2:	3001      	adds	r0, #1
 8008eb4:	2a30      	cmp	r2, #48	@ 0x30
 8008eb6:	d0f8      	beq.n	8008eaa <_strtod_l+0x1e2>
 8008eb8:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008ebc:	2b08      	cmp	r3, #8
 8008ebe:	f200 8476 	bhi.w	80097ae <_strtod_l+0xae6>
 8008ec2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008ec4:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ec6:	4607      	mov	r7, r0
 8008ec8:	2000      	movs	r0, #0
 8008eca:	4603      	mov	r3, r0
 8008ecc:	3a30      	subs	r2, #48	@ 0x30
 8008ece:	f100 0101 	add.w	r1, r0, #1
 8008ed2:	d023      	beq.n	8008f1c <_strtod_l+0x254>
 8008ed4:	440f      	add	r7, r1
 8008ed6:	eb00 0c03 	add.w	ip, r0, r3
 8008eda:	4619      	mov	r1, r3
 8008edc:	240a      	movs	r4, #10
 8008ede:	4561      	cmp	r1, ip
 8008ee0:	d10b      	bne.n	8008efa <_strtod_l+0x232>
 8008ee2:	1c5c      	adds	r4, r3, #1
 8008ee4:	4403      	add	r3, r0
 8008ee6:	2b08      	cmp	r3, #8
 8008ee8:	4404      	add	r4, r0
 8008eea:	dc11      	bgt.n	8008f10 <_strtod_l+0x248>
 8008eec:	230a      	movs	r3, #10
 8008eee:	fb03 2909 	mla	r9, r3, r9, r2
 8008ef2:	2100      	movs	r1, #0
 8008ef4:	e013      	b.n	8008f1e <_strtod_l+0x256>
 8008ef6:	4628      	mov	r0, r5
 8008ef8:	e7dc      	b.n	8008eb4 <_strtod_l+0x1ec>
 8008efa:	2908      	cmp	r1, #8
 8008efc:	f101 0101 	add.w	r1, r1, #1
 8008f00:	dc02      	bgt.n	8008f08 <_strtod_l+0x240>
 8008f02:	fb04 f909 	mul.w	r9, r4, r9
 8008f06:	e7ea      	b.n	8008ede <_strtod_l+0x216>
 8008f08:	2910      	cmp	r1, #16
 8008f0a:	bfd8      	it	le
 8008f0c:	4366      	mulle	r6, r4
 8008f0e:	e7e6      	b.n	8008ede <_strtod_l+0x216>
 8008f10:	2b0f      	cmp	r3, #15
 8008f12:	dcee      	bgt.n	8008ef2 <_strtod_l+0x22a>
 8008f14:	230a      	movs	r3, #10
 8008f16:	fb03 2606 	mla	r6, r3, r6, r2
 8008f1a:	e7ea      	b.n	8008ef2 <_strtod_l+0x22a>
 8008f1c:	461c      	mov	r4, r3
 8008f1e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	9211      	str	r2, [sp, #68]	@ 0x44
 8008f24:	785a      	ldrb	r2, [r3, #1]
 8008f26:	4608      	mov	r0, r1
 8008f28:	4623      	mov	r3, r4
 8008f2a:	e7b7      	b.n	8008e9c <_strtod_l+0x1d4>
 8008f2c:	2301      	movs	r3, #1
 8008f2e:	2700      	movs	r7, #0
 8008f30:	9306      	str	r3, [sp, #24]
 8008f32:	e786      	b.n	8008e42 <_strtod_l+0x17a>
 8008f34:	f04f 0e00 	mov.w	lr, #0
 8008f38:	f108 0202 	add.w	r2, r8, #2
 8008f3c:	9211      	str	r2, [sp, #68]	@ 0x44
 8008f3e:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008f42:	e78f      	b.n	8008e64 <_strtod_l+0x19c>
 8008f44:	f04f 0e01 	mov.w	lr, #1
 8008f48:	e7f6      	b.n	8008f38 <_strtod_l+0x270>
 8008f4a:	bf00      	nop
 8008f4c:	0800ad50 	.word	0x0800ad50
 8008f50:	0800ad38 	.word	0x0800ad38
 8008f54:	7ff00000 	.word	0x7ff00000
 8008f58:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008f5a:	1c54      	adds	r4, r2, #1
 8008f5c:	9411      	str	r4, [sp, #68]	@ 0x44
 8008f5e:	7852      	ldrb	r2, [r2, #1]
 8008f60:	2a30      	cmp	r2, #48	@ 0x30
 8008f62:	d0f9      	beq.n	8008f58 <_strtod_l+0x290>
 8008f64:	f1a2 0431 	sub.w	r4, r2, #49	@ 0x31
 8008f68:	2c08      	cmp	r4, #8
 8008f6a:	d881      	bhi.n	8008e70 <_strtod_l+0x1a8>
 8008f6c:	f1a2 0c30 	sub.w	ip, r2, #48	@ 0x30
 8008f70:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008f72:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f74:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008f76:	1c51      	adds	r1, r2, #1
 8008f78:	9111      	str	r1, [sp, #68]	@ 0x44
 8008f7a:	7852      	ldrb	r2, [r2, #1]
 8008f7c:	f1a2 0430 	sub.w	r4, r2, #48	@ 0x30
 8008f80:	2c09      	cmp	r4, #9
 8008f82:	d938      	bls.n	8008ff6 <_strtod_l+0x32e>
 8008f84:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8008f86:	1b0c      	subs	r4, r1, r4
 8008f88:	2c08      	cmp	r4, #8
 8008f8a:	f644 641f 	movw	r4, #19999	@ 0x4e1f
 8008f8e:	dc02      	bgt.n	8008f96 <_strtod_l+0x2ce>
 8008f90:	4564      	cmp	r4, ip
 8008f92:	bfa8      	it	ge
 8008f94:	4664      	movge	r4, ip
 8008f96:	f1be 0f00 	cmp.w	lr, #0
 8008f9a:	d000      	beq.n	8008f9e <_strtod_l+0x2d6>
 8008f9c:	4264      	negs	r4, r4
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d14e      	bne.n	8009040 <_strtod_l+0x378>
 8008fa2:	9b07      	ldr	r3, [sp, #28]
 8008fa4:	4318      	orrs	r0, r3
 8008fa6:	f47f aeca 	bne.w	8008d3e <_strtod_l+0x76>
 8008faa:	9b06      	ldr	r3, [sp, #24]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	f47f aee2 	bne.w	8008d76 <_strtod_l+0xae>
 8008fb2:	2a69      	cmp	r2, #105	@ 0x69
 8008fb4:	d027      	beq.n	8009006 <_strtod_l+0x33e>
 8008fb6:	dc24      	bgt.n	8009002 <_strtod_l+0x33a>
 8008fb8:	2a49      	cmp	r2, #73	@ 0x49
 8008fba:	d024      	beq.n	8009006 <_strtod_l+0x33e>
 8008fbc:	2a4e      	cmp	r2, #78	@ 0x4e
 8008fbe:	f47f aeda 	bne.w	8008d76 <_strtod_l+0xae>
 8008fc2:	4997      	ldr	r1, [pc, #604]	@ (8009220 <_strtod_l+0x558>)
 8008fc4:	a811      	add	r0, sp, #68	@ 0x44
 8008fc6:	f001 f9ab 	bl	800a320 <__match>
 8008fca:	2800      	cmp	r0, #0
 8008fcc:	f43f aed3 	beq.w	8008d76 <_strtod_l+0xae>
 8008fd0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008fd2:	781b      	ldrb	r3, [r3, #0]
 8008fd4:	2b28      	cmp	r3, #40	@ 0x28
 8008fd6:	d12d      	bne.n	8009034 <_strtod_l+0x36c>
 8008fd8:	4992      	ldr	r1, [pc, #584]	@ (8009224 <_strtod_l+0x55c>)
 8008fda:	aa14      	add	r2, sp, #80	@ 0x50
 8008fdc:	a811      	add	r0, sp, #68	@ 0x44
 8008fde:	f001 f9b3 	bl	800a348 <__hexnan>
 8008fe2:	2805      	cmp	r0, #5
 8008fe4:	d126      	bne.n	8009034 <_strtod_l+0x36c>
 8008fe6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008fe8:	f8dd a050 	ldr.w	sl, [sp, #80]	@ 0x50
 8008fec:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008ff0:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008ff4:	e6a3      	b.n	8008d3e <_strtod_l+0x76>
 8008ff6:	240a      	movs	r4, #10
 8008ff8:	fb04 2c0c 	mla	ip, r4, ip, r2
 8008ffc:	f1ac 0c30 	sub.w	ip, ip, #48	@ 0x30
 8009000:	e7b8      	b.n	8008f74 <_strtod_l+0x2ac>
 8009002:	2a6e      	cmp	r2, #110	@ 0x6e
 8009004:	e7db      	b.n	8008fbe <_strtod_l+0x2f6>
 8009006:	4988      	ldr	r1, [pc, #544]	@ (8009228 <_strtod_l+0x560>)
 8009008:	a811      	add	r0, sp, #68	@ 0x44
 800900a:	f001 f989 	bl	800a320 <__match>
 800900e:	2800      	cmp	r0, #0
 8009010:	f43f aeb1 	beq.w	8008d76 <_strtod_l+0xae>
 8009014:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009016:	4985      	ldr	r1, [pc, #532]	@ (800922c <_strtod_l+0x564>)
 8009018:	3b01      	subs	r3, #1
 800901a:	a811      	add	r0, sp, #68	@ 0x44
 800901c:	9311      	str	r3, [sp, #68]	@ 0x44
 800901e:	f001 f97f 	bl	800a320 <__match>
 8009022:	b910      	cbnz	r0, 800902a <_strtod_l+0x362>
 8009024:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009026:	3301      	adds	r3, #1
 8009028:	9311      	str	r3, [sp, #68]	@ 0x44
 800902a:	f8df b214 	ldr.w	fp, [pc, #532]	@ 8009240 <_strtod_l+0x578>
 800902e:	f04f 0a00 	mov.w	sl, #0
 8009032:	e684      	b.n	8008d3e <_strtod_l+0x76>
 8009034:	487e      	ldr	r0, [pc, #504]	@ (8009230 <_strtod_l+0x568>)
 8009036:	f000 feaf 	bl	8009d98 <nan>
 800903a:	ec5b ab10 	vmov	sl, fp, d0
 800903e:	e67e      	b.n	8008d3e <_strtod_l+0x76>
 8009040:	ee07 9a90 	vmov	s15, r9
 8009044:	1be2      	subs	r2, r4, r7
 8009046:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800904a:	2d00      	cmp	r5, #0
 800904c:	bf08      	it	eq
 800904e:	461d      	moveq	r5, r3
 8009050:	2b10      	cmp	r3, #16
 8009052:	9209      	str	r2, [sp, #36]	@ 0x24
 8009054:	461a      	mov	r2, r3
 8009056:	bfa8      	it	ge
 8009058:	2210      	movge	r2, #16
 800905a:	2b09      	cmp	r3, #9
 800905c:	ec5b ab17 	vmov	sl, fp, d7
 8009060:	dc15      	bgt.n	800908e <_strtod_l+0x3c6>
 8009062:	1be1      	subs	r1, r4, r7
 8009064:	2900      	cmp	r1, #0
 8009066:	f43f ae6a 	beq.w	8008d3e <_strtod_l+0x76>
 800906a:	eba4 0107 	sub.w	r1, r4, r7
 800906e:	dd72      	ble.n	8009156 <_strtod_l+0x48e>
 8009070:	2916      	cmp	r1, #22
 8009072:	dc59      	bgt.n	8009128 <_strtod_l+0x460>
 8009074:	4b6f      	ldr	r3, [pc, #444]	@ (8009234 <_strtod_l+0x56c>)
 8009076:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009078:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800907c:	ed93 7b00 	vldr	d7, [r3]
 8009080:	ec4b ab16 	vmov	d6, sl, fp
 8009084:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009088:	ec5b ab17 	vmov	sl, fp, d7
 800908c:	e657      	b.n	8008d3e <_strtod_l+0x76>
 800908e:	4969      	ldr	r1, [pc, #420]	@ (8009234 <_strtod_l+0x56c>)
 8009090:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8009094:	ed11 5b12 	vldr	d5, [r1, #-72]	@ 0xffffffb8
 8009098:	ee06 6a90 	vmov	s13, r6
 800909c:	2b0f      	cmp	r3, #15
 800909e:	eeb8 6b66 	vcvt.f64.u32	d6, s13
 80090a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80090a6:	ec5b ab16 	vmov	sl, fp, d6
 80090aa:	ddda      	ble.n	8009062 <_strtod_l+0x39a>
 80090ac:	1a9a      	subs	r2, r3, r2
 80090ae:	1be1      	subs	r1, r4, r7
 80090b0:	440a      	add	r2, r1
 80090b2:	2a00      	cmp	r2, #0
 80090b4:	f340 8094 	ble.w	80091e0 <_strtod_l+0x518>
 80090b8:	f012 000f 	ands.w	r0, r2, #15
 80090bc:	d00a      	beq.n	80090d4 <_strtod_l+0x40c>
 80090be:	495d      	ldr	r1, [pc, #372]	@ (8009234 <_strtod_l+0x56c>)
 80090c0:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80090c4:	ed91 7b00 	vldr	d7, [r1]
 80090c8:	ec4b ab16 	vmov	d6, sl, fp
 80090cc:	ee27 7b06 	vmul.f64	d7, d7, d6
 80090d0:	ec5b ab17 	vmov	sl, fp, d7
 80090d4:	f032 020f 	bics.w	r2, r2, #15
 80090d8:	d073      	beq.n	80091c2 <_strtod_l+0x4fa>
 80090da:	f5b2 7f9a 	cmp.w	r2, #308	@ 0x134
 80090de:	dd47      	ble.n	8009170 <_strtod_l+0x4a8>
 80090e0:	2400      	movs	r4, #0
 80090e2:	4625      	mov	r5, r4
 80090e4:	9407      	str	r4, [sp, #28]
 80090e6:	4626      	mov	r6, r4
 80090e8:	9a05      	ldr	r2, [sp, #20]
 80090ea:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8009240 <_strtod_l+0x578>
 80090ee:	2322      	movs	r3, #34	@ 0x22
 80090f0:	6013      	str	r3, [r2, #0]
 80090f2:	f04f 0a00 	mov.w	sl, #0
 80090f6:	9b07      	ldr	r3, [sp, #28]
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	f43f ae20 	beq.w	8008d3e <_strtod_l+0x76>
 80090fe:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009100:	9805      	ldr	r0, [sp, #20]
 8009102:	f7ff f957 	bl	80083b4 <_Bfree>
 8009106:	9805      	ldr	r0, [sp, #20]
 8009108:	4631      	mov	r1, r6
 800910a:	f7ff f953 	bl	80083b4 <_Bfree>
 800910e:	9805      	ldr	r0, [sp, #20]
 8009110:	4629      	mov	r1, r5
 8009112:	f7ff f94f 	bl	80083b4 <_Bfree>
 8009116:	9907      	ldr	r1, [sp, #28]
 8009118:	9805      	ldr	r0, [sp, #20]
 800911a:	f7ff f94b 	bl	80083b4 <_Bfree>
 800911e:	9805      	ldr	r0, [sp, #20]
 8009120:	4621      	mov	r1, r4
 8009122:	f7ff f947 	bl	80083b4 <_Bfree>
 8009126:	e60a      	b.n	8008d3e <_strtod_l+0x76>
 8009128:	f1c3 0125 	rsb	r1, r3, #37	@ 0x25
 800912c:	1be0      	subs	r0, r4, r7
 800912e:	4281      	cmp	r1, r0
 8009130:	dbbc      	blt.n	80090ac <_strtod_l+0x3e4>
 8009132:	4a40      	ldr	r2, [pc, #256]	@ (8009234 <_strtod_l+0x56c>)
 8009134:	f1c3 030f 	rsb	r3, r3, #15
 8009138:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
 800913c:	ed91 7b00 	vldr	d7, [r1]
 8009140:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009142:	ec4b ab16 	vmov	d6, sl, fp
 8009146:	1acb      	subs	r3, r1, r3
 8009148:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 800914c:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009150:	ed92 6b00 	vldr	d6, [r2]
 8009154:	e796      	b.n	8009084 <_strtod_l+0x3bc>
 8009156:	3116      	adds	r1, #22
 8009158:	dba8      	blt.n	80090ac <_strtod_l+0x3e4>
 800915a:	4b36      	ldr	r3, [pc, #216]	@ (8009234 <_strtod_l+0x56c>)
 800915c:	1b3c      	subs	r4, r7, r4
 800915e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8009162:	ed94 7b00 	vldr	d7, [r4]
 8009166:	ec4b ab16 	vmov	d6, sl, fp
 800916a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800916e:	e78b      	b.n	8009088 <_strtod_l+0x3c0>
 8009170:	2000      	movs	r0, #0
 8009172:	ec4b ab17 	vmov	d7, sl, fp
 8009176:	4e30      	ldr	r6, [pc, #192]	@ (8009238 <_strtod_l+0x570>)
 8009178:	1112      	asrs	r2, r2, #4
 800917a:	4601      	mov	r1, r0
 800917c:	2a01      	cmp	r2, #1
 800917e:	dc23      	bgt.n	80091c8 <_strtod_l+0x500>
 8009180:	b108      	cbz	r0, 8009186 <_strtod_l+0x4be>
 8009182:	ec5b ab17 	vmov	sl, fp, d7
 8009186:	4a2c      	ldr	r2, [pc, #176]	@ (8009238 <_strtod_l+0x570>)
 8009188:	482c      	ldr	r0, [pc, #176]	@ (800923c <_strtod_l+0x574>)
 800918a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800918e:	ed92 7b00 	vldr	d7, [r2]
 8009192:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009196:	ec4b ab16 	vmov	d6, sl, fp
 800919a:	4a29      	ldr	r2, [pc, #164]	@ (8009240 <_strtod_l+0x578>)
 800919c:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091a0:	ee17 1a90 	vmov	r1, s15
 80091a4:	400a      	ands	r2, r1
 80091a6:	4282      	cmp	r2, r0
 80091a8:	ec5b ab17 	vmov	sl, fp, d7
 80091ac:	d898      	bhi.n	80090e0 <_strtod_l+0x418>
 80091ae:	f5a0 1080 	sub.w	r0, r0, #1048576	@ 0x100000
 80091b2:	4282      	cmp	r2, r0
 80091b4:	bf86      	itte	hi
 80091b6:	f8df b08c 	ldrhi.w	fp, [pc, #140]	@ 8009244 <_strtod_l+0x57c>
 80091ba:	f04f 3aff 	movhi.w	sl, #4294967295
 80091be:	f101 7b54 	addls.w	fp, r1, #55574528	@ 0x3500000
 80091c2:	2200      	movs	r2, #0
 80091c4:	9206      	str	r2, [sp, #24]
 80091c6:	e076      	b.n	80092b6 <_strtod_l+0x5ee>
 80091c8:	f012 0f01 	tst.w	r2, #1
 80091cc:	d004      	beq.n	80091d8 <_strtod_l+0x510>
 80091ce:	ed96 6b00 	vldr	d6, [r6]
 80091d2:	2001      	movs	r0, #1
 80091d4:	ee27 7b06 	vmul.f64	d7, d7, d6
 80091d8:	3101      	adds	r1, #1
 80091da:	1052      	asrs	r2, r2, #1
 80091dc:	3608      	adds	r6, #8
 80091de:	e7cd      	b.n	800917c <_strtod_l+0x4b4>
 80091e0:	d0ef      	beq.n	80091c2 <_strtod_l+0x4fa>
 80091e2:	4252      	negs	r2, r2
 80091e4:	f012 000f 	ands.w	r0, r2, #15
 80091e8:	d00a      	beq.n	8009200 <_strtod_l+0x538>
 80091ea:	4912      	ldr	r1, [pc, #72]	@ (8009234 <_strtod_l+0x56c>)
 80091ec:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 80091f0:	ed91 7b00 	vldr	d7, [r1]
 80091f4:	ec4b ab16 	vmov	d6, sl, fp
 80091f8:	ee86 7b07 	vdiv.f64	d7, d6, d7
 80091fc:	ec5b ab17 	vmov	sl, fp, d7
 8009200:	1112      	asrs	r2, r2, #4
 8009202:	d0de      	beq.n	80091c2 <_strtod_l+0x4fa>
 8009204:	2a1f      	cmp	r2, #31
 8009206:	dd1f      	ble.n	8009248 <_strtod_l+0x580>
 8009208:	2400      	movs	r4, #0
 800920a:	4625      	mov	r5, r4
 800920c:	9407      	str	r4, [sp, #28]
 800920e:	4626      	mov	r6, r4
 8009210:	9a05      	ldr	r2, [sp, #20]
 8009212:	2322      	movs	r3, #34	@ 0x22
 8009214:	f04f 0a00 	mov.w	sl, #0
 8009218:	f04f 0b00 	mov.w	fp, #0
 800921c:	6013      	str	r3, [r2, #0]
 800921e:	e76a      	b.n	80090f6 <_strtod_l+0x42e>
 8009220:	0800ab29 	.word	0x0800ab29
 8009224:	0800ad3c 	.word	0x0800ad3c
 8009228:	0800ab21 	.word	0x0800ab21
 800922c:	0800ab58 	.word	0x0800ab58
 8009230:	0800aee5 	.word	0x0800aee5
 8009234:	0800ac70 	.word	0x0800ac70
 8009238:	0800ac48 	.word	0x0800ac48
 800923c:	7ca00000 	.word	0x7ca00000
 8009240:	7ff00000 	.word	0x7ff00000
 8009244:	7fefffff 	.word	0x7fefffff
 8009248:	f012 0110 	ands.w	r1, r2, #16
 800924c:	bf18      	it	ne
 800924e:	216a      	movne	r1, #106	@ 0x6a
 8009250:	9106      	str	r1, [sp, #24]
 8009252:	ec4b ab17 	vmov	d7, sl, fp
 8009256:	49b0      	ldr	r1, [pc, #704]	@ (8009518 <_strtod_l+0x850>)
 8009258:	2000      	movs	r0, #0
 800925a:	07d6      	lsls	r6, r2, #31
 800925c:	d504      	bpl.n	8009268 <_strtod_l+0x5a0>
 800925e:	ed91 6b00 	vldr	d6, [r1]
 8009262:	2001      	movs	r0, #1
 8009264:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009268:	1052      	asrs	r2, r2, #1
 800926a:	f101 0108 	add.w	r1, r1, #8
 800926e:	d1f4      	bne.n	800925a <_strtod_l+0x592>
 8009270:	b108      	cbz	r0, 8009276 <_strtod_l+0x5ae>
 8009272:	ec5b ab17 	vmov	sl, fp, d7
 8009276:	9a06      	ldr	r2, [sp, #24]
 8009278:	b1b2      	cbz	r2, 80092a8 <_strtod_l+0x5e0>
 800927a:	f3cb 510a 	ubfx	r1, fp, #20, #11
 800927e:	f1c1 026b 	rsb	r2, r1, #107	@ 0x6b
 8009282:	2a00      	cmp	r2, #0
 8009284:	4658      	mov	r0, fp
 8009286:	dd0f      	ble.n	80092a8 <_strtod_l+0x5e0>
 8009288:	2a1f      	cmp	r2, #31
 800928a:	dd55      	ble.n	8009338 <_strtod_l+0x670>
 800928c:	2a34      	cmp	r2, #52	@ 0x34
 800928e:	bfde      	ittt	le
 8009290:	f04f 32ff 	movle.w	r2, #4294967295
 8009294:	f1c1 014b 	rsble	r1, r1, #75	@ 0x4b
 8009298:	408a      	lslle	r2, r1
 800929a:	f04f 0a00 	mov.w	sl, #0
 800929e:	bfcc      	ite	gt
 80092a0:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80092a4:	ea02 0b00 	andle.w	fp, r2, r0
 80092a8:	ec4b ab17 	vmov	d7, sl, fp
 80092ac:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80092b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80092b4:	d0a8      	beq.n	8009208 <_strtod_l+0x540>
 80092b6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80092b8:	9805      	ldr	r0, [sp, #20]
 80092ba:	f8cd 9000 	str.w	r9, [sp]
 80092be:	462a      	mov	r2, r5
 80092c0:	f7ff f8e0 	bl	8008484 <__s2b>
 80092c4:	9007      	str	r0, [sp, #28]
 80092c6:	2800      	cmp	r0, #0
 80092c8:	f43f af0a 	beq.w	80090e0 <_strtod_l+0x418>
 80092cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092ce:	1b3f      	subs	r7, r7, r4
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	bfb4      	ite	lt
 80092d4:	463b      	movlt	r3, r7
 80092d6:	2300      	movge	r3, #0
 80092d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80092da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092dc:	ed9f bb8a 	vldr	d11, [pc, #552]	@ 8009508 <_strtod_l+0x840>
 80092e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80092e4:	2400      	movs	r4, #0
 80092e6:	930d      	str	r3, [sp, #52]	@ 0x34
 80092e8:	4625      	mov	r5, r4
 80092ea:	9b07      	ldr	r3, [sp, #28]
 80092ec:	9805      	ldr	r0, [sp, #20]
 80092ee:	6859      	ldr	r1, [r3, #4]
 80092f0:	f7ff f820 	bl	8008334 <_Balloc>
 80092f4:	4606      	mov	r6, r0
 80092f6:	2800      	cmp	r0, #0
 80092f8:	f43f aef6 	beq.w	80090e8 <_strtod_l+0x420>
 80092fc:	9b07      	ldr	r3, [sp, #28]
 80092fe:	691a      	ldr	r2, [r3, #16]
 8009300:	ec4b ab19 	vmov	d9, sl, fp
 8009304:	3202      	adds	r2, #2
 8009306:	f103 010c 	add.w	r1, r3, #12
 800930a:	0092      	lsls	r2, r2, #2
 800930c:	300c      	adds	r0, #12
 800930e:	f000 fd33 	bl	8009d78 <memcpy>
 8009312:	eeb0 0b49 	vmov.f64	d0, d9
 8009316:	9805      	ldr	r0, [sp, #20]
 8009318:	aa14      	add	r2, sp, #80	@ 0x50
 800931a:	a913      	add	r1, sp, #76	@ 0x4c
 800931c:	f7ff fbee 	bl	8008afc <__d2b>
 8009320:	9012      	str	r0, [sp, #72]	@ 0x48
 8009322:	2800      	cmp	r0, #0
 8009324:	f43f aee0 	beq.w	80090e8 <_strtod_l+0x420>
 8009328:	9805      	ldr	r0, [sp, #20]
 800932a:	2101      	movs	r1, #1
 800932c:	f7ff f940 	bl	80085b0 <__i2b>
 8009330:	4605      	mov	r5, r0
 8009332:	b940      	cbnz	r0, 8009346 <_strtod_l+0x67e>
 8009334:	2500      	movs	r5, #0
 8009336:	e6d7      	b.n	80090e8 <_strtod_l+0x420>
 8009338:	f04f 31ff 	mov.w	r1, #4294967295
 800933c:	fa01 f202 	lsl.w	r2, r1, r2
 8009340:	ea02 0a0a 	and.w	sl, r2, sl
 8009344:	e7b0      	b.n	80092a8 <_strtod_l+0x5e0>
 8009346:	9f13      	ldr	r7, [sp, #76]	@ 0x4c
 8009348:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800934a:	2f00      	cmp	r7, #0
 800934c:	bfab      	itete	ge
 800934e:	9b0a      	ldrge	r3, [sp, #40]	@ 0x28
 8009350:	9b0d      	ldrlt	r3, [sp, #52]	@ 0x34
 8009352:	f8dd 8034 	ldrge.w	r8, [sp, #52]	@ 0x34
 8009356:	f8dd 9028 	ldrlt.w	r9, [sp, #40]	@ 0x28
 800935a:	bfac      	ite	ge
 800935c:	eb07 0903 	addge.w	r9, r7, r3
 8009360:	eba3 0807 	sublt.w	r8, r3, r7
 8009364:	9b06      	ldr	r3, [sp, #24]
 8009366:	1aff      	subs	r7, r7, r3
 8009368:	4417      	add	r7, r2
 800936a:	f1c2 0336 	rsb	r3, r2, #54	@ 0x36
 800936e:	4a6b      	ldr	r2, [pc, #428]	@ (800951c <_strtod_l+0x854>)
 8009370:	3f01      	subs	r7, #1
 8009372:	4297      	cmp	r7, r2
 8009374:	da51      	bge.n	800941a <_strtod_l+0x752>
 8009376:	1bd1      	subs	r1, r2, r7
 8009378:	291f      	cmp	r1, #31
 800937a:	eba3 0301 	sub.w	r3, r3, r1
 800937e:	f04f 0201 	mov.w	r2, #1
 8009382:	dc3e      	bgt.n	8009402 <_strtod_l+0x73a>
 8009384:	408a      	lsls	r2, r1
 8009386:	920c      	str	r2, [sp, #48]	@ 0x30
 8009388:	2200      	movs	r2, #0
 800938a:	920b      	str	r2, [sp, #44]	@ 0x2c
 800938c:	eb09 0703 	add.w	r7, r9, r3
 8009390:	4498      	add	r8, r3
 8009392:	9b06      	ldr	r3, [sp, #24]
 8009394:	45b9      	cmp	r9, r7
 8009396:	4498      	add	r8, r3
 8009398:	464b      	mov	r3, r9
 800939a:	bfa8      	it	ge
 800939c:	463b      	movge	r3, r7
 800939e:	4543      	cmp	r3, r8
 80093a0:	bfa8      	it	ge
 80093a2:	4643      	movge	r3, r8
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	bfc2      	ittt	gt
 80093a8:	1aff      	subgt	r7, r7, r3
 80093aa:	eba8 0803 	subgt.w	r8, r8, r3
 80093ae:	eba9 0903 	subgt.w	r9, r9, r3
 80093b2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	dd16      	ble.n	80093e6 <_strtod_l+0x71e>
 80093b8:	4629      	mov	r1, r5
 80093ba:	9805      	ldr	r0, [sp, #20]
 80093bc:	461a      	mov	r2, r3
 80093be:	f7ff f9b7 	bl	8008730 <__pow5mult>
 80093c2:	4605      	mov	r5, r0
 80093c4:	2800      	cmp	r0, #0
 80093c6:	d0b5      	beq.n	8009334 <_strtod_l+0x66c>
 80093c8:	4601      	mov	r1, r0
 80093ca:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80093cc:	9805      	ldr	r0, [sp, #20]
 80093ce:	f7ff f905 	bl	80085dc <__multiply>
 80093d2:	900f      	str	r0, [sp, #60]	@ 0x3c
 80093d4:	2800      	cmp	r0, #0
 80093d6:	f43f ae87 	beq.w	80090e8 <_strtod_l+0x420>
 80093da:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80093dc:	9805      	ldr	r0, [sp, #20]
 80093de:	f7fe ffe9 	bl	80083b4 <_Bfree>
 80093e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80093e4:	9312      	str	r3, [sp, #72]	@ 0x48
 80093e6:	2f00      	cmp	r7, #0
 80093e8:	dc1b      	bgt.n	8009422 <_strtod_l+0x75a>
 80093ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	dd21      	ble.n	8009434 <_strtod_l+0x76c>
 80093f0:	4631      	mov	r1, r6
 80093f2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093f4:	9805      	ldr	r0, [sp, #20]
 80093f6:	f7ff f99b 	bl	8008730 <__pow5mult>
 80093fa:	4606      	mov	r6, r0
 80093fc:	b9d0      	cbnz	r0, 8009434 <_strtod_l+0x76c>
 80093fe:	2600      	movs	r6, #0
 8009400:	e672      	b.n	80090e8 <_strtod_l+0x420>
 8009402:	f1c7 477f 	rsb	r7, r7, #4278190080	@ 0xff000000
 8009406:	f507 077f 	add.w	r7, r7, #16711680	@ 0xff0000
 800940a:	f507 477b 	add.w	r7, r7, #64256	@ 0xfb00
 800940e:	37e2      	adds	r7, #226	@ 0xe2
 8009410:	fa02 f107 	lsl.w	r1, r2, r7
 8009414:	910b      	str	r1, [sp, #44]	@ 0x2c
 8009416:	920c      	str	r2, [sp, #48]	@ 0x30
 8009418:	e7b8      	b.n	800938c <_strtod_l+0x6c4>
 800941a:	2200      	movs	r2, #0
 800941c:	920b      	str	r2, [sp, #44]	@ 0x2c
 800941e:	2201      	movs	r2, #1
 8009420:	e7f9      	b.n	8009416 <_strtod_l+0x74e>
 8009422:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009424:	9805      	ldr	r0, [sp, #20]
 8009426:	463a      	mov	r2, r7
 8009428:	f7ff f9dc 	bl	80087e4 <__lshift>
 800942c:	9012      	str	r0, [sp, #72]	@ 0x48
 800942e:	2800      	cmp	r0, #0
 8009430:	d1db      	bne.n	80093ea <_strtod_l+0x722>
 8009432:	e659      	b.n	80090e8 <_strtod_l+0x420>
 8009434:	f1b8 0f00 	cmp.w	r8, #0
 8009438:	dd07      	ble.n	800944a <_strtod_l+0x782>
 800943a:	4631      	mov	r1, r6
 800943c:	9805      	ldr	r0, [sp, #20]
 800943e:	4642      	mov	r2, r8
 8009440:	f7ff f9d0 	bl	80087e4 <__lshift>
 8009444:	4606      	mov	r6, r0
 8009446:	2800      	cmp	r0, #0
 8009448:	d0d9      	beq.n	80093fe <_strtod_l+0x736>
 800944a:	f1b9 0f00 	cmp.w	r9, #0
 800944e:	dd08      	ble.n	8009462 <_strtod_l+0x79a>
 8009450:	4629      	mov	r1, r5
 8009452:	9805      	ldr	r0, [sp, #20]
 8009454:	464a      	mov	r2, r9
 8009456:	f7ff f9c5 	bl	80087e4 <__lshift>
 800945a:	4605      	mov	r5, r0
 800945c:	2800      	cmp	r0, #0
 800945e:	f43f ae43 	beq.w	80090e8 <_strtod_l+0x420>
 8009462:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8009464:	9805      	ldr	r0, [sp, #20]
 8009466:	4632      	mov	r2, r6
 8009468:	f7ff fa44 	bl	80088f4 <__mdiff>
 800946c:	4604      	mov	r4, r0
 800946e:	2800      	cmp	r0, #0
 8009470:	f43f ae3a 	beq.w	80090e8 <_strtod_l+0x420>
 8009474:	2300      	movs	r3, #0
 8009476:	f8d0 800c 	ldr.w	r8, [r0, #12]
 800947a:	60c3      	str	r3, [r0, #12]
 800947c:	4629      	mov	r1, r5
 800947e:	f7ff fa1d 	bl	80088bc <__mcmp>
 8009482:	2800      	cmp	r0, #0
 8009484:	da4e      	bge.n	8009524 <_strtod_l+0x85c>
 8009486:	ea58 080a 	orrs.w	r8, r8, sl
 800948a:	d174      	bne.n	8009576 <_strtod_l+0x8ae>
 800948c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009490:	2b00      	cmp	r3, #0
 8009492:	d170      	bne.n	8009576 <_strtod_l+0x8ae>
 8009494:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009498:	0d1b      	lsrs	r3, r3, #20
 800949a:	051b      	lsls	r3, r3, #20
 800949c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80094a0:	d969      	bls.n	8009576 <_strtod_l+0x8ae>
 80094a2:	6963      	ldr	r3, [r4, #20]
 80094a4:	b913      	cbnz	r3, 80094ac <_strtod_l+0x7e4>
 80094a6:	6923      	ldr	r3, [r4, #16]
 80094a8:	2b01      	cmp	r3, #1
 80094aa:	dd64      	ble.n	8009576 <_strtod_l+0x8ae>
 80094ac:	4621      	mov	r1, r4
 80094ae:	2201      	movs	r2, #1
 80094b0:	9805      	ldr	r0, [sp, #20]
 80094b2:	f7ff f997 	bl	80087e4 <__lshift>
 80094b6:	4629      	mov	r1, r5
 80094b8:	4604      	mov	r4, r0
 80094ba:	f7ff f9ff 	bl	80088bc <__mcmp>
 80094be:	2800      	cmp	r0, #0
 80094c0:	dd59      	ble.n	8009576 <_strtod_l+0x8ae>
 80094c2:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80094c6:	9a06      	ldr	r2, [sp, #24]
 80094c8:	0d1b      	lsrs	r3, r3, #20
 80094ca:	051b      	lsls	r3, r3, #20
 80094cc:	2a00      	cmp	r2, #0
 80094ce:	d070      	beq.n	80095b2 <_strtod_l+0x8ea>
 80094d0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80094d4:	d86d      	bhi.n	80095b2 <_strtod_l+0x8ea>
 80094d6:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80094da:	f67f ae99 	bls.w	8009210 <_strtod_l+0x548>
 80094de:	ed9f 7b0c 	vldr	d7, [pc, #48]	@ 8009510 <_strtod_l+0x848>
 80094e2:	ec4b ab16 	vmov	d6, sl, fp
 80094e6:	4b0e      	ldr	r3, [pc, #56]	@ (8009520 <_strtod_l+0x858>)
 80094e8:	ee26 7b07 	vmul.f64	d7, d6, d7
 80094ec:	ee17 2a90 	vmov	r2, s15
 80094f0:	4013      	ands	r3, r2
 80094f2:	ec5b ab17 	vmov	sl, fp, d7
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	f47f ae01 	bne.w	80090fe <_strtod_l+0x436>
 80094fc:	9a05      	ldr	r2, [sp, #20]
 80094fe:	2322      	movs	r3, #34	@ 0x22
 8009500:	6013      	str	r3, [r2, #0]
 8009502:	e5fc      	b.n	80090fe <_strtod_l+0x436>
 8009504:	f3af 8000 	nop.w
 8009508:	ffc00000 	.word	0xffc00000
 800950c:	41dfffff 	.word	0x41dfffff
 8009510:	00000000 	.word	0x00000000
 8009514:	39500000 	.word	0x39500000
 8009518:	0800ad68 	.word	0x0800ad68
 800951c:	fffffc02 	.word	0xfffffc02
 8009520:	7ff00000 	.word	0x7ff00000
 8009524:	46d9      	mov	r9, fp
 8009526:	d15d      	bne.n	80095e4 <_strtod_l+0x91c>
 8009528:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800952c:	f1b8 0f00 	cmp.w	r8, #0
 8009530:	d02a      	beq.n	8009588 <_strtod_l+0x8c0>
 8009532:	4aab      	ldr	r2, [pc, #684]	@ (80097e0 <_strtod_l+0xb18>)
 8009534:	4293      	cmp	r3, r2
 8009536:	d12a      	bne.n	800958e <_strtod_l+0x8c6>
 8009538:	9b06      	ldr	r3, [sp, #24]
 800953a:	4652      	mov	r2, sl
 800953c:	b1fb      	cbz	r3, 800957e <_strtod_l+0x8b6>
 800953e:	4ba9      	ldr	r3, [pc, #676]	@ (80097e4 <_strtod_l+0xb1c>)
 8009540:	ea0b 0303 	and.w	r3, fp, r3
 8009544:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009548:	f04f 31ff 	mov.w	r1, #4294967295
 800954c:	d81a      	bhi.n	8009584 <_strtod_l+0x8bc>
 800954e:	0d1b      	lsrs	r3, r3, #20
 8009550:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009554:	fa01 f303 	lsl.w	r3, r1, r3
 8009558:	429a      	cmp	r2, r3
 800955a:	d118      	bne.n	800958e <_strtod_l+0x8c6>
 800955c:	4ba2      	ldr	r3, [pc, #648]	@ (80097e8 <_strtod_l+0xb20>)
 800955e:	4599      	cmp	r9, r3
 8009560:	d102      	bne.n	8009568 <_strtod_l+0x8a0>
 8009562:	3201      	adds	r2, #1
 8009564:	f43f adc0 	beq.w	80090e8 <_strtod_l+0x420>
 8009568:	4b9e      	ldr	r3, [pc, #632]	@ (80097e4 <_strtod_l+0xb1c>)
 800956a:	ea09 0303 	and.w	r3, r9, r3
 800956e:	f503 1b80 	add.w	fp, r3, #1048576	@ 0x100000
 8009572:	f04f 0a00 	mov.w	sl, #0
 8009576:	9b06      	ldr	r3, [sp, #24]
 8009578:	2b00      	cmp	r3, #0
 800957a:	d1b0      	bne.n	80094de <_strtod_l+0x816>
 800957c:	e5bf      	b.n	80090fe <_strtod_l+0x436>
 800957e:	f04f 33ff 	mov.w	r3, #4294967295
 8009582:	e7e9      	b.n	8009558 <_strtod_l+0x890>
 8009584:	460b      	mov	r3, r1
 8009586:	e7e7      	b.n	8009558 <_strtod_l+0x890>
 8009588:	ea53 030a 	orrs.w	r3, r3, sl
 800958c:	d099      	beq.n	80094c2 <_strtod_l+0x7fa>
 800958e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009590:	b1c3      	cbz	r3, 80095c4 <_strtod_l+0x8fc>
 8009592:	ea13 0f09 	tst.w	r3, r9
 8009596:	d0ee      	beq.n	8009576 <_strtod_l+0x8ae>
 8009598:	9a06      	ldr	r2, [sp, #24]
 800959a:	4650      	mov	r0, sl
 800959c:	4659      	mov	r1, fp
 800959e:	f1b8 0f00 	cmp.w	r8, #0
 80095a2:	d013      	beq.n	80095cc <_strtod_l+0x904>
 80095a4:	f7ff fb75 	bl	8008c92 <sulp>
 80095a8:	ee39 7b00 	vadd.f64	d7, d9, d0
 80095ac:	ec5b ab17 	vmov	sl, fp, d7
 80095b0:	e7e1      	b.n	8009576 <_strtod_l+0x8ae>
 80095b2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80095b6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80095ba:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80095be:	f04f 3aff 	mov.w	sl, #4294967295
 80095c2:	e7d8      	b.n	8009576 <_strtod_l+0x8ae>
 80095c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80095c6:	ea13 0f0a 	tst.w	r3, sl
 80095ca:	e7e4      	b.n	8009596 <_strtod_l+0x8ce>
 80095cc:	f7ff fb61 	bl	8008c92 <sulp>
 80095d0:	ee39 0b40 	vsub.f64	d0, d9, d0
 80095d4:	eeb5 0b40 	vcmp.f64	d0, #0.0
 80095d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095dc:	ec5b ab10 	vmov	sl, fp, d0
 80095e0:	d1c9      	bne.n	8009576 <_strtod_l+0x8ae>
 80095e2:	e615      	b.n	8009210 <_strtod_l+0x548>
 80095e4:	4629      	mov	r1, r5
 80095e6:	4620      	mov	r0, r4
 80095e8:	f7ff fae0 	bl	8008bac <__ratio>
 80095ec:	eeb0 7b00 	vmov.f64	d7, #0	@ 0x40000000  2.0
 80095f0:	eeb4 0bc7 	vcmpe.f64	d0, d7
 80095f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80095f8:	d85d      	bhi.n	80096b6 <_strtod_l+0x9ee>
 80095fa:	f1b8 0f00 	cmp.w	r8, #0
 80095fe:	d164      	bne.n	80096ca <_strtod_l+0xa02>
 8009600:	f1ba 0f00 	cmp.w	sl, #0
 8009604:	d14b      	bne.n	800969e <_strtod_l+0x9d6>
 8009606:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800960a:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 800960e:	2b00      	cmp	r3, #0
 8009610:	d160      	bne.n	80096d4 <_strtod_l+0xa0c>
 8009612:	eeb4 0bc8 	vcmpe.f64	d0, d8
 8009616:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 800961a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800961e:	d401      	bmi.n	8009624 <_strtod_l+0x95c>
 8009620:	ee20 8b08 	vmul.f64	d8, d0, d8
 8009624:	eeb1 ab48 	vneg.f64	d10, d8
 8009628:	486e      	ldr	r0, [pc, #440]	@ (80097e4 <_strtod_l+0xb1c>)
 800962a:	4970      	ldr	r1, [pc, #448]	@ (80097ec <_strtod_l+0xb24>)
 800962c:	ea09 0700 	and.w	r7, r9, r0
 8009630:	428f      	cmp	r7, r1
 8009632:	ec53 2b1a 	vmov	r2, r3, d10
 8009636:	d17d      	bne.n	8009734 <_strtod_l+0xa6c>
 8009638:	f1a9 7b54 	sub.w	fp, r9, #55574528	@ 0x3500000
 800963c:	ec4b ab1c 	vmov	d12, sl, fp
 8009640:	eeb0 0b4c 	vmov.f64	d0, d12
 8009644:	f7ff f9ea 	bl	8008a1c <__ulp>
 8009648:	4866      	ldr	r0, [pc, #408]	@ (80097e4 <_strtod_l+0xb1c>)
 800964a:	eea0 cb0a 	vfma.f64	d12, d0, d10
 800964e:	ee1c 3a90 	vmov	r3, s25
 8009652:	4a67      	ldr	r2, [pc, #412]	@ (80097f0 <_strtod_l+0xb28>)
 8009654:	ea03 0100 	and.w	r1, r3, r0
 8009658:	4291      	cmp	r1, r2
 800965a:	ec5b ab1c 	vmov	sl, fp, d12
 800965e:	d93c      	bls.n	80096da <_strtod_l+0xa12>
 8009660:	ee19 2a90 	vmov	r2, s19
 8009664:	4b60      	ldr	r3, [pc, #384]	@ (80097e8 <_strtod_l+0xb20>)
 8009666:	429a      	cmp	r2, r3
 8009668:	d104      	bne.n	8009674 <_strtod_l+0x9ac>
 800966a:	ee19 3a10 	vmov	r3, s18
 800966e:	3301      	adds	r3, #1
 8009670:	f43f ad3a 	beq.w	80090e8 <_strtod_l+0x420>
 8009674:	f8df b170 	ldr.w	fp, [pc, #368]	@ 80097e8 <_strtod_l+0xb20>
 8009678:	f04f 3aff 	mov.w	sl, #4294967295
 800967c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 800967e:	9805      	ldr	r0, [sp, #20]
 8009680:	f7fe fe98 	bl	80083b4 <_Bfree>
 8009684:	9805      	ldr	r0, [sp, #20]
 8009686:	4631      	mov	r1, r6
 8009688:	f7fe fe94 	bl	80083b4 <_Bfree>
 800968c:	9805      	ldr	r0, [sp, #20]
 800968e:	4629      	mov	r1, r5
 8009690:	f7fe fe90 	bl	80083b4 <_Bfree>
 8009694:	9805      	ldr	r0, [sp, #20]
 8009696:	4621      	mov	r1, r4
 8009698:	f7fe fe8c 	bl	80083b4 <_Bfree>
 800969c:	e625      	b.n	80092ea <_strtod_l+0x622>
 800969e:	f1ba 0f01 	cmp.w	sl, #1
 80096a2:	d103      	bne.n	80096ac <_strtod_l+0x9e4>
 80096a4:	f1bb 0f00 	cmp.w	fp, #0
 80096a8:	f43f adb2 	beq.w	8009210 <_strtod_l+0x548>
 80096ac:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80096b0:	eeb7 8b00 	vmov.f64	d8, #112	@ 0x3f800000  1.0
 80096b4:	e7b8      	b.n	8009628 <_strtod_l+0x960>
 80096b6:	eeb6 8b00 	vmov.f64	d8, #96	@ 0x3f000000  0.5
 80096ba:	ee20 8b08 	vmul.f64	d8, d0, d8
 80096be:	f1b8 0f00 	cmp.w	r8, #0
 80096c2:	d0af      	beq.n	8009624 <_strtod_l+0x95c>
 80096c4:	eeb0 ab48 	vmov.f64	d10, d8
 80096c8:	e7ae      	b.n	8009628 <_strtod_l+0x960>
 80096ca:	eeb7 ab00 	vmov.f64	d10, #112	@ 0x3f800000  1.0
 80096ce:	eeb0 8b4a 	vmov.f64	d8, d10
 80096d2:	e7a9      	b.n	8009628 <_strtod_l+0x960>
 80096d4:	eebf ab00 	vmov.f64	d10, #240	@ 0xbf800000 -1.0
 80096d8:	e7a6      	b.n	8009628 <_strtod_l+0x960>
 80096da:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80096de:	9b06      	ldr	r3, [sp, #24]
 80096e0:	46d9      	mov	r9, fp
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d1ca      	bne.n	800967c <_strtod_l+0x9b4>
 80096e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80096ea:	0d1b      	lsrs	r3, r3, #20
 80096ec:	051b      	lsls	r3, r3, #20
 80096ee:	429f      	cmp	r7, r3
 80096f0:	d1c4      	bne.n	800967c <_strtod_l+0x9b4>
 80096f2:	ec51 0b18 	vmov	r0, r1, d8
 80096f6:	f7f7 f81f 	bl	8000738 <__aeabi_d2lz>
 80096fa:	f7f6 ffd7 	bl	80006ac <__aeabi_l2d>
 80096fe:	f3cb 0913 	ubfx	r9, fp, #0, #20
 8009702:	ec41 0b17 	vmov	d7, r0, r1
 8009706:	ea49 090a 	orr.w	r9, r9, sl
 800970a:	ea59 0908 	orrs.w	r9, r9, r8
 800970e:	ee38 8b47 	vsub.f64	d8, d8, d7
 8009712:	d03c      	beq.n	800978e <_strtod_l+0xac6>
 8009714:	ed9f 7b2c 	vldr	d7, [pc, #176]	@ 80097c8 <_strtod_l+0xb00>
 8009718:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800971c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009720:	f53f aced 	bmi.w	80090fe <_strtod_l+0x436>
 8009724:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 80097d0 <_strtod_l+0xb08>
 8009728:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800972c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009730:	dda4      	ble.n	800967c <_strtod_l+0x9b4>
 8009732:	e4e4      	b.n	80090fe <_strtod_l+0x436>
 8009734:	9906      	ldr	r1, [sp, #24]
 8009736:	b1e1      	cbz	r1, 8009772 <_strtod_l+0xaaa>
 8009738:	f1b7 6fd4 	cmp.w	r7, #111149056	@ 0x6a00000
 800973c:	d819      	bhi.n	8009772 <_strtod_l+0xaaa>
 800973e:	eeb4 8bcb 	vcmpe.f64	d8, d11
 8009742:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009746:	d811      	bhi.n	800976c <_strtod_l+0xaa4>
 8009748:	eebc 8bc8 	vcvt.u32.f64	s16, d8
 800974c:	ee18 3a10 	vmov	r3, s16
 8009750:	2b01      	cmp	r3, #1
 8009752:	bf38      	it	cc
 8009754:	2301      	movcc	r3, #1
 8009756:	ee08 3a10 	vmov	s16, r3
 800975a:	eeb8 8b48 	vcvt.f64.u32	d8, s16
 800975e:	f1b8 0f00 	cmp.w	r8, #0
 8009762:	d111      	bne.n	8009788 <_strtod_l+0xac0>
 8009764:	eeb1 7b48 	vneg.f64	d7, d8
 8009768:	ec53 2b17 	vmov	r2, r3, d7
 800976c:	f103 61d6 	add.w	r1, r3, #112197632	@ 0x6b00000
 8009770:	1bcb      	subs	r3, r1, r7
 8009772:	eeb0 0b49 	vmov.f64	d0, d9
 8009776:	ec43 2b1a 	vmov	d10, r2, r3
 800977a:	f7ff f94f 	bl	8008a1c <__ulp>
 800977e:	eeaa 9b00 	vfma.f64	d9, d10, d0
 8009782:	ec5b ab19 	vmov	sl, fp, d9
 8009786:	e7aa      	b.n	80096de <_strtod_l+0xa16>
 8009788:	eeb0 7b48 	vmov.f64	d7, d8
 800978c:	e7ec      	b.n	8009768 <_strtod_l+0xaa0>
 800978e:	ed9f 7b12 	vldr	d7, [pc, #72]	@ 80097d8 <_strtod_l+0xb10>
 8009792:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8009796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800979a:	f57f af6f 	bpl.w	800967c <_strtod_l+0x9b4>
 800979e:	e4ae      	b.n	80090fe <_strtod_l+0x436>
 80097a0:	2300      	movs	r3, #0
 80097a2:	9308      	str	r3, [sp, #32]
 80097a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80097a6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80097a8:	6013      	str	r3, [r2, #0]
 80097aa:	f7ff bacc 	b.w	8008d46 <_strtod_l+0x7e>
 80097ae:	2a65      	cmp	r2, #101	@ 0x65
 80097b0:	f43f abbc 	beq.w	8008f2c <_strtod_l+0x264>
 80097b4:	2a45      	cmp	r2, #69	@ 0x45
 80097b6:	f43f abb9 	beq.w	8008f2c <_strtod_l+0x264>
 80097ba:	2301      	movs	r3, #1
 80097bc:	9306      	str	r3, [sp, #24]
 80097be:	f7ff bbf0 	b.w	8008fa2 <_strtod_l+0x2da>
 80097c2:	bf00      	nop
 80097c4:	f3af 8000 	nop.w
 80097c8:	94a03595 	.word	0x94a03595
 80097cc:	3fdfffff 	.word	0x3fdfffff
 80097d0:	35afe535 	.word	0x35afe535
 80097d4:	3fe00000 	.word	0x3fe00000
 80097d8:	94a03595 	.word	0x94a03595
 80097dc:	3fcfffff 	.word	0x3fcfffff
 80097e0:	000fffff 	.word	0x000fffff
 80097e4:	7ff00000 	.word	0x7ff00000
 80097e8:	7fefffff 	.word	0x7fefffff
 80097ec:	7fe00000 	.word	0x7fe00000
 80097f0:	7c9fffff 	.word	0x7c9fffff

080097f4 <_strtod_r>:
 80097f4:	4b01      	ldr	r3, [pc, #4]	@ (80097fc <_strtod_r+0x8>)
 80097f6:	f7ff ba67 	b.w	8008cc8 <_strtod_l>
 80097fa:	bf00      	nop
 80097fc:	24000088 	.word	0x24000088

08009800 <_strtol_l.constprop.0>:
 8009800:	2b24      	cmp	r3, #36	@ 0x24
 8009802:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009806:	4686      	mov	lr, r0
 8009808:	4690      	mov	r8, r2
 800980a:	d801      	bhi.n	8009810 <_strtol_l.constprop.0+0x10>
 800980c:	2b01      	cmp	r3, #1
 800980e:	d106      	bne.n	800981e <_strtol_l.constprop.0+0x1e>
 8009810:	f7fd fe7e 	bl	8007510 <__errno>
 8009814:	2316      	movs	r3, #22
 8009816:	6003      	str	r3, [r0, #0]
 8009818:	2000      	movs	r0, #0
 800981a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800981e:	4834      	ldr	r0, [pc, #208]	@ (80098f0 <_strtol_l.constprop.0+0xf0>)
 8009820:	460d      	mov	r5, r1
 8009822:	462a      	mov	r2, r5
 8009824:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009828:	5d06      	ldrb	r6, [r0, r4]
 800982a:	f016 0608 	ands.w	r6, r6, #8
 800982e:	d1f8      	bne.n	8009822 <_strtol_l.constprop.0+0x22>
 8009830:	2c2d      	cmp	r4, #45	@ 0x2d
 8009832:	d12d      	bne.n	8009890 <_strtol_l.constprop.0+0x90>
 8009834:	782c      	ldrb	r4, [r5, #0]
 8009836:	2601      	movs	r6, #1
 8009838:	1c95      	adds	r5, r2, #2
 800983a:	f033 0210 	bics.w	r2, r3, #16
 800983e:	d109      	bne.n	8009854 <_strtol_l.constprop.0+0x54>
 8009840:	2c30      	cmp	r4, #48	@ 0x30
 8009842:	d12a      	bne.n	800989a <_strtol_l.constprop.0+0x9a>
 8009844:	782a      	ldrb	r2, [r5, #0]
 8009846:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800984a:	2a58      	cmp	r2, #88	@ 0x58
 800984c:	d125      	bne.n	800989a <_strtol_l.constprop.0+0x9a>
 800984e:	786c      	ldrb	r4, [r5, #1]
 8009850:	2310      	movs	r3, #16
 8009852:	3502      	adds	r5, #2
 8009854:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009858:	f10c 3cff 	add.w	ip, ip, #4294967295
 800985c:	2200      	movs	r2, #0
 800985e:	fbbc f9f3 	udiv	r9, ip, r3
 8009862:	4610      	mov	r0, r2
 8009864:	fb03 ca19 	mls	sl, r3, r9, ip
 8009868:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800986c:	2f09      	cmp	r7, #9
 800986e:	d81b      	bhi.n	80098a8 <_strtol_l.constprop.0+0xa8>
 8009870:	463c      	mov	r4, r7
 8009872:	42a3      	cmp	r3, r4
 8009874:	dd27      	ble.n	80098c6 <_strtol_l.constprop.0+0xc6>
 8009876:	1c57      	adds	r7, r2, #1
 8009878:	d007      	beq.n	800988a <_strtol_l.constprop.0+0x8a>
 800987a:	4581      	cmp	r9, r0
 800987c:	d320      	bcc.n	80098c0 <_strtol_l.constprop.0+0xc0>
 800987e:	d101      	bne.n	8009884 <_strtol_l.constprop.0+0x84>
 8009880:	45a2      	cmp	sl, r4
 8009882:	db1d      	blt.n	80098c0 <_strtol_l.constprop.0+0xc0>
 8009884:	fb00 4003 	mla	r0, r0, r3, r4
 8009888:	2201      	movs	r2, #1
 800988a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800988e:	e7eb      	b.n	8009868 <_strtol_l.constprop.0+0x68>
 8009890:	2c2b      	cmp	r4, #43	@ 0x2b
 8009892:	bf04      	itt	eq
 8009894:	782c      	ldrbeq	r4, [r5, #0]
 8009896:	1c95      	addeq	r5, r2, #2
 8009898:	e7cf      	b.n	800983a <_strtol_l.constprop.0+0x3a>
 800989a:	2b00      	cmp	r3, #0
 800989c:	d1da      	bne.n	8009854 <_strtol_l.constprop.0+0x54>
 800989e:	2c30      	cmp	r4, #48	@ 0x30
 80098a0:	bf0c      	ite	eq
 80098a2:	2308      	moveq	r3, #8
 80098a4:	230a      	movne	r3, #10
 80098a6:	e7d5      	b.n	8009854 <_strtol_l.constprop.0+0x54>
 80098a8:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80098ac:	2f19      	cmp	r7, #25
 80098ae:	d801      	bhi.n	80098b4 <_strtol_l.constprop.0+0xb4>
 80098b0:	3c37      	subs	r4, #55	@ 0x37
 80098b2:	e7de      	b.n	8009872 <_strtol_l.constprop.0+0x72>
 80098b4:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80098b8:	2f19      	cmp	r7, #25
 80098ba:	d804      	bhi.n	80098c6 <_strtol_l.constprop.0+0xc6>
 80098bc:	3c57      	subs	r4, #87	@ 0x57
 80098be:	e7d8      	b.n	8009872 <_strtol_l.constprop.0+0x72>
 80098c0:	f04f 32ff 	mov.w	r2, #4294967295
 80098c4:	e7e1      	b.n	800988a <_strtol_l.constprop.0+0x8a>
 80098c6:	1c53      	adds	r3, r2, #1
 80098c8:	d108      	bne.n	80098dc <_strtol_l.constprop.0+0xdc>
 80098ca:	2322      	movs	r3, #34	@ 0x22
 80098cc:	f8ce 3000 	str.w	r3, [lr]
 80098d0:	4660      	mov	r0, ip
 80098d2:	f1b8 0f00 	cmp.w	r8, #0
 80098d6:	d0a0      	beq.n	800981a <_strtol_l.constprop.0+0x1a>
 80098d8:	1e69      	subs	r1, r5, #1
 80098da:	e006      	b.n	80098ea <_strtol_l.constprop.0+0xea>
 80098dc:	b106      	cbz	r6, 80098e0 <_strtol_l.constprop.0+0xe0>
 80098de:	4240      	negs	r0, r0
 80098e0:	f1b8 0f00 	cmp.w	r8, #0
 80098e4:	d099      	beq.n	800981a <_strtol_l.constprop.0+0x1a>
 80098e6:	2a00      	cmp	r2, #0
 80098e8:	d1f6      	bne.n	80098d8 <_strtol_l.constprop.0+0xd8>
 80098ea:	f8c8 1000 	str.w	r1, [r8]
 80098ee:	e794      	b.n	800981a <_strtol_l.constprop.0+0x1a>
 80098f0:	0800ad91 	.word	0x0800ad91

080098f4 <_strtol_r>:
 80098f4:	f7ff bf84 	b.w	8009800 <_strtol_l.constprop.0>

080098f8 <__ssputs_r>:
 80098f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098fc:	688e      	ldr	r6, [r1, #8]
 80098fe:	461f      	mov	r7, r3
 8009900:	42be      	cmp	r6, r7
 8009902:	680b      	ldr	r3, [r1, #0]
 8009904:	4682      	mov	sl, r0
 8009906:	460c      	mov	r4, r1
 8009908:	4690      	mov	r8, r2
 800990a:	d82d      	bhi.n	8009968 <__ssputs_r+0x70>
 800990c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009910:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009914:	d026      	beq.n	8009964 <__ssputs_r+0x6c>
 8009916:	6965      	ldr	r5, [r4, #20]
 8009918:	6909      	ldr	r1, [r1, #16]
 800991a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800991e:	eba3 0901 	sub.w	r9, r3, r1
 8009922:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009926:	1c7b      	adds	r3, r7, #1
 8009928:	444b      	add	r3, r9
 800992a:	106d      	asrs	r5, r5, #1
 800992c:	429d      	cmp	r5, r3
 800992e:	bf38      	it	cc
 8009930:	461d      	movcc	r5, r3
 8009932:	0553      	lsls	r3, r2, #21
 8009934:	d527      	bpl.n	8009986 <__ssputs_r+0x8e>
 8009936:	4629      	mov	r1, r5
 8009938:	f7fe fc70 	bl	800821c <_malloc_r>
 800993c:	4606      	mov	r6, r0
 800993e:	b360      	cbz	r0, 800999a <__ssputs_r+0xa2>
 8009940:	6921      	ldr	r1, [r4, #16]
 8009942:	464a      	mov	r2, r9
 8009944:	f000 fa18 	bl	8009d78 <memcpy>
 8009948:	89a3      	ldrh	r3, [r4, #12]
 800994a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800994e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009952:	81a3      	strh	r3, [r4, #12]
 8009954:	6126      	str	r6, [r4, #16]
 8009956:	6165      	str	r5, [r4, #20]
 8009958:	444e      	add	r6, r9
 800995a:	eba5 0509 	sub.w	r5, r5, r9
 800995e:	6026      	str	r6, [r4, #0]
 8009960:	60a5      	str	r5, [r4, #8]
 8009962:	463e      	mov	r6, r7
 8009964:	42be      	cmp	r6, r7
 8009966:	d900      	bls.n	800996a <__ssputs_r+0x72>
 8009968:	463e      	mov	r6, r7
 800996a:	6820      	ldr	r0, [r4, #0]
 800996c:	4632      	mov	r2, r6
 800996e:	4641      	mov	r1, r8
 8009970:	f000 f9c6 	bl	8009d00 <memmove>
 8009974:	68a3      	ldr	r3, [r4, #8]
 8009976:	1b9b      	subs	r3, r3, r6
 8009978:	60a3      	str	r3, [r4, #8]
 800997a:	6823      	ldr	r3, [r4, #0]
 800997c:	4433      	add	r3, r6
 800997e:	6023      	str	r3, [r4, #0]
 8009980:	2000      	movs	r0, #0
 8009982:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009986:	462a      	mov	r2, r5
 8009988:	f000 fd8b 	bl	800a4a2 <_realloc_r>
 800998c:	4606      	mov	r6, r0
 800998e:	2800      	cmp	r0, #0
 8009990:	d1e0      	bne.n	8009954 <__ssputs_r+0x5c>
 8009992:	6921      	ldr	r1, [r4, #16]
 8009994:	4650      	mov	r0, sl
 8009996:	f7fe fbcd 	bl	8008134 <_free_r>
 800999a:	230c      	movs	r3, #12
 800999c:	f8ca 3000 	str.w	r3, [sl]
 80099a0:	89a3      	ldrh	r3, [r4, #12]
 80099a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80099a6:	81a3      	strh	r3, [r4, #12]
 80099a8:	f04f 30ff 	mov.w	r0, #4294967295
 80099ac:	e7e9      	b.n	8009982 <__ssputs_r+0x8a>
	...

080099b0 <_svfiprintf_r>:
 80099b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099b4:	4698      	mov	r8, r3
 80099b6:	898b      	ldrh	r3, [r1, #12]
 80099b8:	061b      	lsls	r3, r3, #24
 80099ba:	b09d      	sub	sp, #116	@ 0x74
 80099bc:	4607      	mov	r7, r0
 80099be:	460d      	mov	r5, r1
 80099c0:	4614      	mov	r4, r2
 80099c2:	d510      	bpl.n	80099e6 <_svfiprintf_r+0x36>
 80099c4:	690b      	ldr	r3, [r1, #16]
 80099c6:	b973      	cbnz	r3, 80099e6 <_svfiprintf_r+0x36>
 80099c8:	2140      	movs	r1, #64	@ 0x40
 80099ca:	f7fe fc27 	bl	800821c <_malloc_r>
 80099ce:	6028      	str	r0, [r5, #0]
 80099d0:	6128      	str	r0, [r5, #16]
 80099d2:	b930      	cbnz	r0, 80099e2 <_svfiprintf_r+0x32>
 80099d4:	230c      	movs	r3, #12
 80099d6:	603b      	str	r3, [r7, #0]
 80099d8:	f04f 30ff 	mov.w	r0, #4294967295
 80099dc:	b01d      	add	sp, #116	@ 0x74
 80099de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80099e2:	2340      	movs	r3, #64	@ 0x40
 80099e4:	616b      	str	r3, [r5, #20]
 80099e6:	2300      	movs	r3, #0
 80099e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ea:	2320      	movs	r3, #32
 80099ec:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80099f0:	f8cd 800c 	str.w	r8, [sp, #12]
 80099f4:	2330      	movs	r3, #48	@ 0x30
 80099f6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009b94 <_svfiprintf_r+0x1e4>
 80099fa:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80099fe:	f04f 0901 	mov.w	r9, #1
 8009a02:	4623      	mov	r3, r4
 8009a04:	469a      	mov	sl, r3
 8009a06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009a0a:	b10a      	cbz	r2, 8009a10 <_svfiprintf_r+0x60>
 8009a0c:	2a25      	cmp	r2, #37	@ 0x25
 8009a0e:	d1f9      	bne.n	8009a04 <_svfiprintf_r+0x54>
 8009a10:	ebba 0b04 	subs.w	fp, sl, r4
 8009a14:	d00b      	beq.n	8009a2e <_svfiprintf_r+0x7e>
 8009a16:	465b      	mov	r3, fp
 8009a18:	4622      	mov	r2, r4
 8009a1a:	4629      	mov	r1, r5
 8009a1c:	4638      	mov	r0, r7
 8009a1e:	f7ff ff6b 	bl	80098f8 <__ssputs_r>
 8009a22:	3001      	adds	r0, #1
 8009a24:	f000 80a7 	beq.w	8009b76 <_svfiprintf_r+0x1c6>
 8009a28:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009a2a:	445a      	add	r2, fp
 8009a2c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009a2e:	f89a 3000 	ldrb.w	r3, [sl]
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	f000 809f 	beq.w	8009b76 <_svfiprintf_r+0x1c6>
 8009a38:	2300      	movs	r3, #0
 8009a3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009a3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009a42:	f10a 0a01 	add.w	sl, sl, #1
 8009a46:	9304      	str	r3, [sp, #16]
 8009a48:	9307      	str	r3, [sp, #28]
 8009a4a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009a4e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009a50:	4654      	mov	r4, sl
 8009a52:	2205      	movs	r2, #5
 8009a54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a58:	484e      	ldr	r0, [pc, #312]	@ (8009b94 <_svfiprintf_r+0x1e4>)
 8009a5a:	f7f6 fc41 	bl	80002e0 <memchr>
 8009a5e:	9a04      	ldr	r2, [sp, #16]
 8009a60:	b9d8      	cbnz	r0, 8009a9a <_svfiprintf_r+0xea>
 8009a62:	06d0      	lsls	r0, r2, #27
 8009a64:	bf44      	itt	mi
 8009a66:	2320      	movmi	r3, #32
 8009a68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a6c:	0711      	lsls	r1, r2, #28
 8009a6e:	bf44      	itt	mi
 8009a70:	232b      	movmi	r3, #43	@ 0x2b
 8009a72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009a76:	f89a 3000 	ldrb.w	r3, [sl]
 8009a7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009a7c:	d015      	beq.n	8009aaa <_svfiprintf_r+0xfa>
 8009a7e:	9a07      	ldr	r2, [sp, #28]
 8009a80:	4654      	mov	r4, sl
 8009a82:	2000      	movs	r0, #0
 8009a84:	f04f 0c0a 	mov.w	ip, #10
 8009a88:	4621      	mov	r1, r4
 8009a8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a8e:	3b30      	subs	r3, #48	@ 0x30
 8009a90:	2b09      	cmp	r3, #9
 8009a92:	d94b      	bls.n	8009b2c <_svfiprintf_r+0x17c>
 8009a94:	b1b0      	cbz	r0, 8009ac4 <_svfiprintf_r+0x114>
 8009a96:	9207      	str	r2, [sp, #28]
 8009a98:	e014      	b.n	8009ac4 <_svfiprintf_r+0x114>
 8009a9a:	eba0 0308 	sub.w	r3, r0, r8
 8009a9e:	fa09 f303 	lsl.w	r3, r9, r3
 8009aa2:	4313      	orrs	r3, r2
 8009aa4:	9304      	str	r3, [sp, #16]
 8009aa6:	46a2      	mov	sl, r4
 8009aa8:	e7d2      	b.n	8009a50 <_svfiprintf_r+0xa0>
 8009aaa:	9b03      	ldr	r3, [sp, #12]
 8009aac:	1d19      	adds	r1, r3, #4
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	9103      	str	r1, [sp, #12]
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	bfbb      	ittet	lt
 8009ab6:	425b      	neglt	r3, r3
 8009ab8:	f042 0202 	orrlt.w	r2, r2, #2
 8009abc:	9307      	strge	r3, [sp, #28]
 8009abe:	9307      	strlt	r3, [sp, #28]
 8009ac0:	bfb8      	it	lt
 8009ac2:	9204      	strlt	r2, [sp, #16]
 8009ac4:	7823      	ldrb	r3, [r4, #0]
 8009ac6:	2b2e      	cmp	r3, #46	@ 0x2e
 8009ac8:	d10a      	bne.n	8009ae0 <_svfiprintf_r+0x130>
 8009aca:	7863      	ldrb	r3, [r4, #1]
 8009acc:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ace:	d132      	bne.n	8009b36 <_svfiprintf_r+0x186>
 8009ad0:	9b03      	ldr	r3, [sp, #12]
 8009ad2:	1d1a      	adds	r2, r3, #4
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	9203      	str	r2, [sp, #12]
 8009ad8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009adc:	3402      	adds	r4, #2
 8009ade:	9305      	str	r3, [sp, #20]
 8009ae0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009ba4 <_svfiprintf_r+0x1f4>
 8009ae4:	7821      	ldrb	r1, [r4, #0]
 8009ae6:	2203      	movs	r2, #3
 8009ae8:	4650      	mov	r0, sl
 8009aea:	f7f6 fbf9 	bl	80002e0 <memchr>
 8009aee:	b138      	cbz	r0, 8009b00 <_svfiprintf_r+0x150>
 8009af0:	9b04      	ldr	r3, [sp, #16]
 8009af2:	eba0 000a 	sub.w	r0, r0, sl
 8009af6:	2240      	movs	r2, #64	@ 0x40
 8009af8:	4082      	lsls	r2, r0
 8009afa:	4313      	orrs	r3, r2
 8009afc:	3401      	adds	r4, #1
 8009afe:	9304      	str	r3, [sp, #16]
 8009b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b04:	4824      	ldr	r0, [pc, #144]	@ (8009b98 <_svfiprintf_r+0x1e8>)
 8009b06:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009b0a:	2206      	movs	r2, #6
 8009b0c:	f7f6 fbe8 	bl	80002e0 <memchr>
 8009b10:	2800      	cmp	r0, #0
 8009b12:	d036      	beq.n	8009b82 <_svfiprintf_r+0x1d2>
 8009b14:	4b21      	ldr	r3, [pc, #132]	@ (8009b9c <_svfiprintf_r+0x1ec>)
 8009b16:	bb1b      	cbnz	r3, 8009b60 <_svfiprintf_r+0x1b0>
 8009b18:	9b03      	ldr	r3, [sp, #12]
 8009b1a:	3307      	adds	r3, #7
 8009b1c:	f023 0307 	bic.w	r3, r3, #7
 8009b20:	3308      	adds	r3, #8
 8009b22:	9303      	str	r3, [sp, #12]
 8009b24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b26:	4433      	add	r3, r6
 8009b28:	9309      	str	r3, [sp, #36]	@ 0x24
 8009b2a:	e76a      	b.n	8009a02 <_svfiprintf_r+0x52>
 8009b2c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009b30:	460c      	mov	r4, r1
 8009b32:	2001      	movs	r0, #1
 8009b34:	e7a8      	b.n	8009a88 <_svfiprintf_r+0xd8>
 8009b36:	2300      	movs	r3, #0
 8009b38:	3401      	adds	r4, #1
 8009b3a:	9305      	str	r3, [sp, #20]
 8009b3c:	4619      	mov	r1, r3
 8009b3e:	f04f 0c0a 	mov.w	ip, #10
 8009b42:	4620      	mov	r0, r4
 8009b44:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009b48:	3a30      	subs	r2, #48	@ 0x30
 8009b4a:	2a09      	cmp	r2, #9
 8009b4c:	d903      	bls.n	8009b56 <_svfiprintf_r+0x1a6>
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d0c6      	beq.n	8009ae0 <_svfiprintf_r+0x130>
 8009b52:	9105      	str	r1, [sp, #20]
 8009b54:	e7c4      	b.n	8009ae0 <_svfiprintf_r+0x130>
 8009b56:	fb0c 2101 	mla	r1, ip, r1, r2
 8009b5a:	4604      	mov	r4, r0
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	e7f0      	b.n	8009b42 <_svfiprintf_r+0x192>
 8009b60:	ab03      	add	r3, sp, #12
 8009b62:	9300      	str	r3, [sp, #0]
 8009b64:	462a      	mov	r2, r5
 8009b66:	4b0e      	ldr	r3, [pc, #56]	@ (8009ba0 <_svfiprintf_r+0x1f0>)
 8009b68:	a904      	add	r1, sp, #16
 8009b6a:	4638      	mov	r0, r7
 8009b6c:	f7fc fda4 	bl	80066b8 <_printf_float>
 8009b70:	1c42      	adds	r2, r0, #1
 8009b72:	4606      	mov	r6, r0
 8009b74:	d1d6      	bne.n	8009b24 <_svfiprintf_r+0x174>
 8009b76:	89ab      	ldrh	r3, [r5, #12]
 8009b78:	065b      	lsls	r3, r3, #25
 8009b7a:	f53f af2d 	bmi.w	80099d8 <_svfiprintf_r+0x28>
 8009b7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009b80:	e72c      	b.n	80099dc <_svfiprintf_r+0x2c>
 8009b82:	ab03      	add	r3, sp, #12
 8009b84:	9300      	str	r3, [sp, #0]
 8009b86:	462a      	mov	r2, r5
 8009b88:	4b05      	ldr	r3, [pc, #20]	@ (8009ba0 <_svfiprintf_r+0x1f0>)
 8009b8a:	a904      	add	r1, sp, #16
 8009b8c:	4638      	mov	r0, r7
 8009b8e:	f7fd f81b 	bl	8006bc8 <_printf_i>
 8009b92:	e7ed      	b.n	8009b70 <_svfiprintf_r+0x1c0>
 8009b94:	0800ae91 	.word	0x0800ae91
 8009b98:	0800ae9b 	.word	0x0800ae9b
 8009b9c:	080066b9 	.word	0x080066b9
 8009ba0:	080098f9 	.word	0x080098f9
 8009ba4:	0800ae97 	.word	0x0800ae97

08009ba8 <__sflush_r>:
 8009ba8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009bac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009bb0:	0716      	lsls	r6, r2, #28
 8009bb2:	4605      	mov	r5, r0
 8009bb4:	460c      	mov	r4, r1
 8009bb6:	d454      	bmi.n	8009c62 <__sflush_r+0xba>
 8009bb8:	684b      	ldr	r3, [r1, #4]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	dc02      	bgt.n	8009bc4 <__sflush_r+0x1c>
 8009bbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009bc0:	2b00      	cmp	r3, #0
 8009bc2:	dd48      	ble.n	8009c56 <__sflush_r+0xae>
 8009bc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bc6:	2e00      	cmp	r6, #0
 8009bc8:	d045      	beq.n	8009c56 <__sflush_r+0xae>
 8009bca:	2300      	movs	r3, #0
 8009bcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009bd0:	682f      	ldr	r7, [r5, #0]
 8009bd2:	6a21      	ldr	r1, [r4, #32]
 8009bd4:	602b      	str	r3, [r5, #0]
 8009bd6:	d030      	beq.n	8009c3a <__sflush_r+0x92>
 8009bd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009bda:	89a3      	ldrh	r3, [r4, #12]
 8009bdc:	0759      	lsls	r1, r3, #29
 8009bde:	d505      	bpl.n	8009bec <__sflush_r+0x44>
 8009be0:	6863      	ldr	r3, [r4, #4]
 8009be2:	1ad2      	subs	r2, r2, r3
 8009be4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009be6:	b10b      	cbz	r3, 8009bec <__sflush_r+0x44>
 8009be8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009bea:	1ad2      	subs	r2, r2, r3
 8009bec:	2300      	movs	r3, #0
 8009bee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009bf0:	6a21      	ldr	r1, [r4, #32]
 8009bf2:	4628      	mov	r0, r5
 8009bf4:	47b0      	blx	r6
 8009bf6:	1c43      	adds	r3, r0, #1
 8009bf8:	89a3      	ldrh	r3, [r4, #12]
 8009bfa:	d106      	bne.n	8009c0a <__sflush_r+0x62>
 8009bfc:	6829      	ldr	r1, [r5, #0]
 8009bfe:	291d      	cmp	r1, #29
 8009c00:	d82b      	bhi.n	8009c5a <__sflush_r+0xb2>
 8009c02:	4a2a      	ldr	r2, [pc, #168]	@ (8009cac <__sflush_r+0x104>)
 8009c04:	410a      	asrs	r2, r1
 8009c06:	07d6      	lsls	r6, r2, #31
 8009c08:	d427      	bmi.n	8009c5a <__sflush_r+0xb2>
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	6062      	str	r2, [r4, #4]
 8009c0e:	04d9      	lsls	r1, r3, #19
 8009c10:	6922      	ldr	r2, [r4, #16]
 8009c12:	6022      	str	r2, [r4, #0]
 8009c14:	d504      	bpl.n	8009c20 <__sflush_r+0x78>
 8009c16:	1c42      	adds	r2, r0, #1
 8009c18:	d101      	bne.n	8009c1e <__sflush_r+0x76>
 8009c1a:	682b      	ldr	r3, [r5, #0]
 8009c1c:	b903      	cbnz	r3, 8009c20 <__sflush_r+0x78>
 8009c1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8009c20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8009c22:	602f      	str	r7, [r5, #0]
 8009c24:	b1b9      	cbz	r1, 8009c56 <__sflush_r+0xae>
 8009c26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009c2a:	4299      	cmp	r1, r3
 8009c2c:	d002      	beq.n	8009c34 <__sflush_r+0x8c>
 8009c2e:	4628      	mov	r0, r5
 8009c30:	f7fe fa80 	bl	8008134 <_free_r>
 8009c34:	2300      	movs	r3, #0
 8009c36:	6363      	str	r3, [r4, #52]	@ 0x34
 8009c38:	e00d      	b.n	8009c56 <__sflush_r+0xae>
 8009c3a:	2301      	movs	r3, #1
 8009c3c:	4628      	mov	r0, r5
 8009c3e:	47b0      	blx	r6
 8009c40:	4602      	mov	r2, r0
 8009c42:	1c50      	adds	r0, r2, #1
 8009c44:	d1c9      	bne.n	8009bda <__sflush_r+0x32>
 8009c46:	682b      	ldr	r3, [r5, #0]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d0c6      	beq.n	8009bda <__sflush_r+0x32>
 8009c4c:	2b1d      	cmp	r3, #29
 8009c4e:	d001      	beq.n	8009c54 <__sflush_r+0xac>
 8009c50:	2b16      	cmp	r3, #22
 8009c52:	d11e      	bne.n	8009c92 <__sflush_r+0xea>
 8009c54:	602f      	str	r7, [r5, #0]
 8009c56:	2000      	movs	r0, #0
 8009c58:	e022      	b.n	8009ca0 <__sflush_r+0xf8>
 8009c5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c5e:	b21b      	sxth	r3, r3
 8009c60:	e01b      	b.n	8009c9a <__sflush_r+0xf2>
 8009c62:	690f      	ldr	r7, [r1, #16]
 8009c64:	2f00      	cmp	r7, #0
 8009c66:	d0f6      	beq.n	8009c56 <__sflush_r+0xae>
 8009c68:	0793      	lsls	r3, r2, #30
 8009c6a:	680e      	ldr	r6, [r1, #0]
 8009c6c:	bf08      	it	eq
 8009c6e:	694b      	ldreq	r3, [r1, #20]
 8009c70:	600f      	str	r7, [r1, #0]
 8009c72:	bf18      	it	ne
 8009c74:	2300      	movne	r3, #0
 8009c76:	eba6 0807 	sub.w	r8, r6, r7
 8009c7a:	608b      	str	r3, [r1, #8]
 8009c7c:	f1b8 0f00 	cmp.w	r8, #0
 8009c80:	dde9      	ble.n	8009c56 <__sflush_r+0xae>
 8009c82:	6a21      	ldr	r1, [r4, #32]
 8009c84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009c86:	4643      	mov	r3, r8
 8009c88:	463a      	mov	r2, r7
 8009c8a:	4628      	mov	r0, r5
 8009c8c:	47b0      	blx	r6
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	dc08      	bgt.n	8009ca4 <__sflush_r+0xfc>
 8009c92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009c9a:	81a3      	strh	r3, [r4, #12]
 8009c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ca0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ca4:	4407      	add	r7, r0
 8009ca6:	eba8 0800 	sub.w	r8, r8, r0
 8009caa:	e7e7      	b.n	8009c7c <__sflush_r+0xd4>
 8009cac:	dfbffffe 	.word	0xdfbffffe

08009cb0 <_fflush_r>:
 8009cb0:	b538      	push	{r3, r4, r5, lr}
 8009cb2:	690b      	ldr	r3, [r1, #16]
 8009cb4:	4605      	mov	r5, r0
 8009cb6:	460c      	mov	r4, r1
 8009cb8:	b913      	cbnz	r3, 8009cc0 <_fflush_r+0x10>
 8009cba:	2500      	movs	r5, #0
 8009cbc:	4628      	mov	r0, r5
 8009cbe:	bd38      	pop	{r3, r4, r5, pc}
 8009cc0:	b118      	cbz	r0, 8009cca <_fflush_r+0x1a>
 8009cc2:	6a03      	ldr	r3, [r0, #32]
 8009cc4:	b90b      	cbnz	r3, 8009cca <_fflush_r+0x1a>
 8009cc6:	f7fd fb37 	bl	8007338 <__sinit>
 8009cca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d0f3      	beq.n	8009cba <_fflush_r+0xa>
 8009cd2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009cd4:	07d0      	lsls	r0, r2, #31
 8009cd6:	d404      	bmi.n	8009ce2 <_fflush_r+0x32>
 8009cd8:	0599      	lsls	r1, r3, #22
 8009cda:	d402      	bmi.n	8009ce2 <_fflush_r+0x32>
 8009cdc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cde:	f7fd fc42 	bl	8007566 <__retarget_lock_acquire_recursive>
 8009ce2:	4628      	mov	r0, r5
 8009ce4:	4621      	mov	r1, r4
 8009ce6:	f7ff ff5f 	bl	8009ba8 <__sflush_r>
 8009cea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009cec:	07da      	lsls	r2, r3, #31
 8009cee:	4605      	mov	r5, r0
 8009cf0:	d4e4      	bmi.n	8009cbc <_fflush_r+0xc>
 8009cf2:	89a3      	ldrh	r3, [r4, #12]
 8009cf4:	059b      	lsls	r3, r3, #22
 8009cf6:	d4e1      	bmi.n	8009cbc <_fflush_r+0xc>
 8009cf8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009cfa:	f7fd fc35 	bl	8007568 <__retarget_lock_release_recursive>
 8009cfe:	e7dd      	b.n	8009cbc <_fflush_r+0xc>

08009d00 <memmove>:
 8009d00:	4288      	cmp	r0, r1
 8009d02:	b510      	push	{r4, lr}
 8009d04:	eb01 0402 	add.w	r4, r1, r2
 8009d08:	d902      	bls.n	8009d10 <memmove+0x10>
 8009d0a:	4284      	cmp	r4, r0
 8009d0c:	4623      	mov	r3, r4
 8009d0e:	d807      	bhi.n	8009d20 <memmove+0x20>
 8009d10:	1e43      	subs	r3, r0, #1
 8009d12:	42a1      	cmp	r1, r4
 8009d14:	d008      	beq.n	8009d28 <memmove+0x28>
 8009d16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009d1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009d1e:	e7f8      	b.n	8009d12 <memmove+0x12>
 8009d20:	4402      	add	r2, r0
 8009d22:	4601      	mov	r1, r0
 8009d24:	428a      	cmp	r2, r1
 8009d26:	d100      	bne.n	8009d2a <memmove+0x2a>
 8009d28:	bd10      	pop	{r4, pc}
 8009d2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009d2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009d32:	e7f7      	b.n	8009d24 <memmove+0x24>

08009d34 <strncmp>:
 8009d34:	b510      	push	{r4, lr}
 8009d36:	b16a      	cbz	r2, 8009d54 <strncmp+0x20>
 8009d38:	3901      	subs	r1, #1
 8009d3a:	1884      	adds	r4, r0, r2
 8009d3c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009d40:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009d44:	429a      	cmp	r2, r3
 8009d46:	d103      	bne.n	8009d50 <strncmp+0x1c>
 8009d48:	42a0      	cmp	r0, r4
 8009d4a:	d001      	beq.n	8009d50 <strncmp+0x1c>
 8009d4c:	2a00      	cmp	r2, #0
 8009d4e:	d1f5      	bne.n	8009d3c <strncmp+0x8>
 8009d50:	1ad0      	subs	r0, r2, r3
 8009d52:	bd10      	pop	{r4, pc}
 8009d54:	4610      	mov	r0, r2
 8009d56:	e7fc      	b.n	8009d52 <strncmp+0x1e>

08009d58 <_sbrk_r>:
 8009d58:	b538      	push	{r3, r4, r5, lr}
 8009d5a:	4d06      	ldr	r5, [pc, #24]	@ (8009d74 <_sbrk_r+0x1c>)
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	4604      	mov	r4, r0
 8009d60:	4608      	mov	r0, r1
 8009d62:	602b      	str	r3, [r5, #0]
 8009d64:	f7f7 fc28 	bl	80015b8 <_sbrk>
 8009d68:	1c43      	adds	r3, r0, #1
 8009d6a:	d102      	bne.n	8009d72 <_sbrk_r+0x1a>
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	b103      	cbz	r3, 8009d72 <_sbrk_r+0x1a>
 8009d70:	6023      	str	r3, [r4, #0]
 8009d72:	bd38      	pop	{r3, r4, r5, pc}
 8009d74:	24000580 	.word	0x24000580

08009d78 <memcpy>:
 8009d78:	440a      	add	r2, r1
 8009d7a:	4291      	cmp	r1, r2
 8009d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d80:	d100      	bne.n	8009d84 <memcpy+0xc>
 8009d82:	4770      	bx	lr
 8009d84:	b510      	push	{r4, lr}
 8009d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d8a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d8e:	4291      	cmp	r1, r2
 8009d90:	d1f9      	bne.n	8009d86 <memcpy+0xe>
 8009d92:	bd10      	pop	{r4, pc}
 8009d94:	0000      	movs	r0, r0
	...

08009d98 <nan>:
 8009d98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009da0 <nan+0x8>
 8009d9c:	4770      	bx	lr
 8009d9e:	bf00      	nop
 8009da0:	00000000 	.word	0x00000000
 8009da4:	7ff80000 	.word	0x7ff80000

08009da8 <__assert_func>:
 8009da8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009daa:	4614      	mov	r4, r2
 8009dac:	461a      	mov	r2, r3
 8009dae:	4b09      	ldr	r3, [pc, #36]	@ (8009dd4 <__assert_func+0x2c>)
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4605      	mov	r5, r0
 8009db4:	68d8      	ldr	r0, [r3, #12]
 8009db6:	b954      	cbnz	r4, 8009dce <__assert_func+0x26>
 8009db8:	4b07      	ldr	r3, [pc, #28]	@ (8009dd8 <__assert_func+0x30>)
 8009dba:	461c      	mov	r4, r3
 8009dbc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009dc0:	9100      	str	r1, [sp, #0]
 8009dc2:	462b      	mov	r3, r5
 8009dc4:	4905      	ldr	r1, [pc, #20]	@ (8009ddc <__assert_func+0x34>)
 8009dc6:	f000 fba7 	bl	800a518 <fiprintf>
 8009dca:	f000 fbb7 	bl	800a53c <abort>
 8009dce:	4b04      	ldr	r3, [pc, #16]	@ (8009de0 <__assert_func+0x38>)
 8009dd0:	e7f4      	b.n	8009dbc <__assert_func+0x14>
 8009dd2:	bf00      	nop
 8009dd4:	24000038 	.word	0x24000038
 8009dd8:	0800aee5 	.word	0x0800aee5
 8009ddc:	0800aeb7 	.word	0x0800aeb7
 8009de0:	0800aeaa 	.word	0x0800aeaa

08009de4 <_calloc_r>:
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	fba1 5402 	umull	r5, r4, r1, r2
 8009dea:	b93c      	cbnz	r4, 8009dfc <_calloc_r+0x18>
 8009dec:	4629      	mov	r1, r5
 8009dee:	f7fe fa15 	bl	800821c <_malloc_r>
 8009df2:	4606      	mov	r6, r0
 8009df4:	b928      	cbnz	r0, 8009e02 <_calloc_r+0x1e>
 8009df6:	2600      	movs	r6, #0
 8009df8:	4630      	mov	r0, r6
 8009dfa:	bd70      	pop	{r4, r5, r6, pc}
 8009dfc:	220c      	movs	r2, #12
 8009dfe:	6002      	str	r2, [r0, #0]
 8009e00:	e7f9      	b.n	8009df6 <_calloc_r+0x12>
 8009e02:	462a      	mov	r2, r5
 8009e04:	4621      	mov	r1, r4
 8009e06:	f7fd fb30 	bl	800746a <memset>
 8009e0a:	e7f5      	b.n	8009df8 <_calloc_r+0x14>

08009e0c <rshift>:
 8009e0c:	6903      	ldr	r3, [r0, #16]
 8009e0e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009e12:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009e16:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009e1a:	f100 0414 	add.w	r4, r0, #20
 8009e1e:	dd45      	ble.n	8009eac <rshift+0xa0>
 8009e20:	f011 011f 	ands.w	r1, r1, #31
 8009e24:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009e28:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009e2c:	d10c      	bne.n	8009e48 <rshift+0x3c>
 8009e2e:	f100 0710 	add.w	r7, r0, #16
 8009e32:	4629      	mov	r1, r5
 8009e34:	42b1      	cmp	r1, r6
 8009e36:	d334      	bcc.n	8009ea2 <rshift+0x96>
 8009e38:	1a9b      	subs	r3, r3, r2
 8009e3a:	009b      	lsls	r3, r3, #2
 8009e3c:	1eea      	subs	r2, r5, #3
 8009e3e:	4296      	cmp	r6, r2
 8009e40:	bf38      	it	cc
 8009e42:	2300      	movcc	r3, #0
 8009e44:	4423      	add	r3, r4
 8009e46:	e015      	b.n	8009e74 <rshift+0x68>
 8009e48:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009e4c:	f1c1 0820 	rsb	r8, r1, #32
 8009e50:	40cf      	lsrs	r7, r1
 8009e52:	f105 0e04 	add.w	lr, r5, #4
 8009e56:	46a1      	mov	r9, r4
 8009e58:	4576      	cmp	r6, lr
 8009e5a:	46f4      	mov	ip, lr
 8009e5c:	d815      	bhi.n	8009e8a <rshift+0x7e>
 8009e5e:	1a9a      	subs	r2, r3, r2
 8009e60:	0092      	lsls	r2, r2, #2
 8009e62:	3a04      	subs	r2, #4
 8009e64:	3501      	adds	r5, #1
 8009e66:	42ae      	cmp	r6, r5
 8009e68:	bf38      	it	cc
 8009e6a:	2200      	movcc	r2, #0
 8009e6c:	18a3      	adds	r3, r4, r2
 8009e6e:	50a7      	str	r7, [r4, r2]
 8009e70:	b107      	cbz	r7, 8009e74 <rshift+0x68>
 8009e72:	3304      	adds	r3, #4
 8009e74:	1b1a      	subs	r2, r3, r4
 8009e76:	42a3      	cmp	r3, r4
 8009e78:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009e7c:	bf08      	it	eq
 8009e7e:	2300      	moveq	r3, #0
 8009e80:	6102      	str	r2, [r0, #16]
 8009e82:	bf08      	it	eq
 8009e84:	6143      	streq	r3, [r0, #20]
 8009e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009e8a:	f8dc c000 	ldr.w	ip, [ip]
 8009e8e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009e92:	ea4c 0707 	orr.w	r7, ip, r7
 8009e96:	f849 7b04 	str.w	r7, [r9], #4
 8009e9a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009e9e:	40cf      	lsrs	r7, r1
 8009ea0:	e7da      	b.n	8009e58 <rshift+0x4c>
 8009ea2:	f851 cb04 	ldr.w	ip, [r1], #4
 8009ea6:	f847 cf04 	str.w	ip, [r7, #4]!
 8009eaa:	e7c3      	b.n	8009e34 <rshift+0x28>
 8009eac:	4623      	mov	r3, r4
 8009eae:	e7e1      	b.n	8009e74 <rshift+0x68>

08009eb0 <__hexdig_fun>:
 8009eb0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009eb4:	2b09      	cmp	r3, #9
 8009eb6:	d802      	bhi.n	8009ebe <__hexdig_fun+0xe>
 8009eb8:	3820      	subs	r0, #32
 8009eba:	b2c0      	uxtb	r0, r0
 8009ebc:	4770      	bx	lr
 8009ebe:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009ec2:	2b05      	cmp	r3, #5
 8009ec4:	d801      	bhi.n	8009eca <__hexdig_fun+0x1a>
 8009ec6:	3847      	subs	r0, #71	@ 0x47
 8009ec8:	e7f7      	b.n	8009eba <__hexdig_fun+0xa>
 8009eca:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009ece:	2b05      	cmp	r3, #5
 8009ed0:	d801      	bhi.n	8009ed6 <__hexdig_fun+0x26>
 8009ed2:	3827      	subs	r0, #39	@ 0x27
 8009ed4:	e7f1      	b.n	8009eba <__hexdig_fun+0xa>
 8009ed6:	2000      	movs	r0, #0
 8009ed8:	4770      	bx	lr
	...

08009edc <__gethex>:
 8009edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ee0:	b085      	sub	sp, #20
 8009ee2:	468a      	mov	sl, r1
 8009ee4:	9302      	str	r3, [sp, #8]
 8009ee6:	680b      	ldr	r3, [r1, #0]
 8009ee8:	9001      	str	r0, [sp, #4]
 8009eea:	4690      	mov	r8, r2
 8009eec:	1c9c      	adds	r4, r3, #2
 8009eee:	46a1      	mov	r9, r4
 8009ef0:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009ef4:	2830      	cmp	r0, #48	@ 0x30
 8009ef6:	d0fa      	beq.n	8009eee <__gethex+0x12>
 8009ef8:	eba9 0303 	sub.w	r3, r9, r3
 8009efc:	f1a3 0b02 	sub.w	fp, r3, #2
 8009f00:	f7ff ffd6 	bl	8009eb0 <__hexdig_fun>
 8009f04:	4605      	mov	r5, r0
 8009f06:	2800      	cmp	r0, #0
 8009f08:	d168      	bne.n	8009fdc <__gethex+0x100>
 8009f0a:	49a0      	ldr	r1, [pc, #640]	@ (800a18c <__gethex+0x2b0>)
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	4648      	mov	r0, r9
 8009f10:	f7ff ff10 	bl	8009d34 <strncmp>
 8009f14:	4607      	mov	r7, r0
 8009f16:	2800      	cmp	r0, #0
 8009f18:	d167      	bne.n	8009fea <__gethex+0x10e>
 8009f1a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009f1e:	4626      	mov	r6, r4
 8009f20:	f7ff ffc6 	bl	8009eb0 <__hexdig_fun>
 8009f24:	2800      	cmp	r0, #0
 8009f26:	d062      	beq.n	8009fee <__gethex+0x112>
 8009f28:	4623      	mov	r3, r4
 8009f2a:	7818      	ldrb	r0, [r3, #0]
 8009f2c:	2830      	cmp	r0, #48	@ 0x30
 8009f2e:	4699      	mov	r9, r3
 8009f30:	f103 0301 	add.w	r3, r3, #1
 8009f34:	d0f9      	beq.n	8009f2a <__gethex+0x4e>
 8009f36:	f7ff ffbb 	bl	8009eb0 <__hexdig_fun>
 8009f3a:	fab0 f580 	clz	r5, r0
 8009f3e:	096d      	lsrs	r5, r5, #5
 8009f40:	f04f 0b01 	mov.w	fp, #1
 8009f44:	464a      	mov	r2, r9
 8009f46:	4616      	mov	r6, r2
 8009f48:	3201      	adds	r2, #1
 8009f4a:	7830      	ldrb	r0, [r6, #0]
 8009f4c:	f7ff ffb0 	bl	8009eb0 <__hexdig_fun>
 8009f50:	2800      	cmp	r0, #0
 8009f52:	d1f8      	bne.n	8009f46 <__gethex+0x6a>
 8009f54:	498d      	ldr	r1, [pc, #564]	@ (800a18c <__gethex+0x2b0>)
 8009f56:	2201      	movs	r2, #1
 8009f58:	4630      	mov	r0, r6
 8009f5a:	f7ff feeb 	bl	8009d34 <strncmp>
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d13f      	bne.n	8009fe2 <__gethex+0x106>
 8009f62:	b944      	cbnz	r4, 8009f76 <__gethex+0x9a>
 8009f64:	1c74      	adds	r4, r6, #1
 8009f66:	4622      	mov	r2, r4
 8009f68:	4616      	mov	r6, r2
 8009f6a:	3201      	adds	r2, #1
 8009f6c:	7830      	ldrb	r0, [r6, #0]
 8009f6e:	f7ff ff9f 	bl	8009eb0 <__hexdig_fun>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	d1f8      	bne.n	8009f68 <__gethex+0x8c>
 8009f76:	1ba4      	subs	r4, r4, r6
 8009f78:	00a7      	lsls	r7, r4, #2
 8009f7a:	7833      	ldrb	r3, [r6, #0]
 8009f7c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009f80:	2b50      	cmp	r3, #80	@ 0x50
 8009f82:	d13e      	bne.n	800a002 <__gethex+0x126>
 8009f84:	7873      	ldrb	r3, [r6, #1]
 8009f86:	2b2b      	cmp	r3, #43	@ 0x2b
 8009f88:	d033      	beq.n	8009ff2 <__gethex+0x116>
 8009f8a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009f8c:	d034      	beq.n	8009ff8 <__gethex+0x11c>
 8009f8e:	1c71      	adds	r1, r6, #1
 8009f90:	2400      	movs	r4, #0
 8009f92:	7808      	ldrb	r0, [r1, #0]
 8009f94:	f7ff ff8c 	bl	8009eb0 <__hexdig_fun>
 8009f98:	1e43      	subs	r3, r0, #1
 8009f9a:	b2db      	uxtb	r3, r3
 8009f9c:	2b18      	cmp	r3, #24
 8009f9e:	d830      	bhi.n	800a002 <__gethex+0x126>
 8009fa0:	f1a0 0210 	sub.w	r2, r0, #16
 8009fa4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009fa8:	f7ff ff82 	bl	8009eb0 <__hexdig_fun>
 8009fac:	f100 3cff 	add.w	ip, r0, #4294967295
 8009fb0:	fa5f fc8c 	uxtb.w	ip, ip
 8009fb4:	f1bc 0f18 	cmp.w	ip, #24
 8009fb8:	f04f 030a 	mov.w	r3, #10
 8009fbc:	d91e      	bls.n	8009ffc <__gethex+0x120>
 8009fbe:	b104      	cbz	r4, 8009fc2 <__gethex+0xe6>
 8009fc0:	4252      	negs	r2, r2
 8009fc2:	4417      	add	r7, r2
 8009fc4:	f8ca 1000 	str.w	r1, [sl]
 8009fc8:	b1ed      	cbz	r5, 800a006 <__gethex+0x12a>
 8009fca:	f1bb 0f00 	cmp.w	fp, #0
 8009fce:	bf0c      	ite	eq
 8009fd0:	2506      	moveq	r5, #6
 8009fd2:	2500      	movne	r5, #0
 8009fd4:	4628      	mov	r0, r5
 8009fd6:	b005      	add	sp, #20
 8009fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fdc:	2500      	movs	r5, #0
 8009fde:	462c      	mov	r4, r5
 8009fe0:	e7b0      	b.n	8009f44 <__gethex+0x68>
 8009fe2:	2c00      	cmp	r4, #0
 8009fe4:	d1c7      	bne.n	8009f76 <__gethex+0x9a>
 8009fe6:	4627      	mov	r7, r4
 8009fe8:	e7c7      	b.n	8009f7a <__gethex+0x9e>
 8009fea:	464e      	mov	r6, r9
 8009fec:	462f      	mov	r7, r5
 8009fee:	2501      	movs	r5, #1
 8009ff0:	e7c3      	b.n	8009f7a <__gethex+0x9e>
 8009ff2:	2400      	movs	r4, #0
 8009ff4:	1cb1      	adds	r1, r6, #2
 8009ff6:	e7cc      	b.n	8009f92 <__gethex+0xb6>
 8009ff8:	2401      	movs	r4, #1
 8009ffa:	e7fb      	b.n	8009ff4 <__gethex+0x118>
 8009ffc:	fb03 0002 	mla	r0, r3, r2, r0
 800a000:	e7ce      	b.n	8009fa0 <__gethex+0xc4>
 800a002:	4631      	mov	r1, r6
 800a004:	e7de      	b.n	8009fc4 <__gethex+0xe8>
 800a006:	eba6 0309 	sub.w	r3, r6, r9
 800a00a:	3b01      	subs	r3, #1
 800a00c:	4629      	mov	r1, r5
 800a00e:	2b07      	cmp	r3, #7
 800a010:	dc0a      	bgt.n	800a028 <__gethex+0x14c>
 800a012:	9801      	ldr	r0, [sp, #4]
 800a014:	f7fe f98e 	bl	8008334 <_Balloc>
 800a018:	4604      	mov	r4, r0
 800a01a:	b940      	cbnz	r0, 800a02e <__gethex+0x152>
 800a01c:	4b5c      	ldr	r3, [pc, #368]	@ (800a190 <__gethex+0x2b4>)
 800a01e:	4602      	mov	r2, r0
 800a020:	21e4      	movs	r1, #228	@ 0xe4
 800a022:	485c      	ldr	r0, [pc, #368]	@ (800a194 <__gethex+0x2b8>)
 800a024:	f7ff fec0 	bl	8009da8 <__assert_func>
 800a028:	3101      	adds	r1, #1
 800a02a:	105b      	asrs	r3, r3, #1
 800a02c:	e7ef      	b.n	800a00e <__gethex+0x132>
 800a02e:	f100 0a14 	add.w	sl, r0, #20
 800a032:	2300      	movs	r3, #0
 800a034:	4655      	mov	r5, sl
 800a036:	469b      	mov	fp, r3
 800a038:	45b1      	cmp	r9, r6
 800a03a:	d337      	bcc.n	800a0ac <__gethex+0x1d0>
 800a03c:	f845 bb04 	str.w	fp, [r5], #4
 800a040:	eba5 050a 	sub.w	r5, r5, sl
 800a044:	10ad      	asrs	r5, r5, #2
 800a046:	6125      	str	r5, [r4, #16]
 800a048:	4658      	mov	r0, fp
 800a04a:	f7fe fa65 	bl	8008518 <__hi0bits>
 800a04e:	016d      	lsls	r5, r5, #5
 800a050:	f8d8 6000 	ldr.w	r6, [r8]
 800a054:	1a2d      	subs	r5, r5, r0
 800a056:	42b5      	cmp	r5, r6
 800a058:	dd54      	ble.n	800a104 <__gethex+0x228>
 800a05a:	1bad      	subs	r5, r5, r6
 800a05c:	4629      	mov	r1, r5
 800a05e:	4620      	mov	r0, r4
 800a060:	f7fe fdf6 	bl	8008c50 <__any_on>
 800a064:	4681      	mov	r9, r0
 800a066:	b178      	cbz	r0, 800a088 <__gethex+0x1ac>
 800a068:	1e6b      	subs	r3, r5, #1
 800a06a:	1159      	asrs	r1, r3, #5
 800a06c:	f003 021f 	and.w	r2, r3, #31
 800a070:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a074:	f04f 0901 	mov.w	r9, #1
 800a078:	fa09 f202 	lsl.w	r2, r9, r2
 800a07c:	420a      	tst	r2, r1
 800a07e:	d003      	beq.n	800a088 <__gethex+0x1ac>
 800a080:	454b      	cmp	r3, r9
 800a082:	dc36      	bgt.n	800a0f2 <__gethex+0x216>
 800a084:	f04f 0902 	mov.w	r9, #2
 800a088:	4629      	mov	r1, r5
 800a08a:	4620      	mov	r0, r4
 800a08c:	f7ff febe 	bl	8009e0c <rshift>
 800a090:	442f      	add	r7, r5
 800a092:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a096:	42bb      	cmp	r3, r7
 800a098:	da42      	bge.n	800a120 <__gethex+0x244>
 800a09a:	9801      	ldr	r0, [sp, #4]
 800a09c:	4621      	mov	r1, r4
 800a09e:	f7fe f989 	bl	80083b4 <_Bfree>
 800a0a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	6013      	str	r3, [r2, #0]
 800a0a8:	25a3      	movs	r5, #163	@ 0xa3
 800a0aa:	e793      	b.n	8009fd4 <__gethex+0xf8>
 800a0ac:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a0b0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a0b2:	d012      	beq.n	800a0da <__gethex+0x1fe>
 800a0b4:	2b20      	cmp	r3, #32
 800a0b6:	d104      	bne.n	800a0c2 <__gethex+0x1e6>
 800a0b8:	f845 bb04 	str.w	fp, [r5], #4
 800a0bc:	f04f 0b00 	mov.w	fp, #0
 800a0c0:	465b      	mov	r3, fp
 800a0c2:	7830      	ldrb	r0, [r6, #0]
 800a0c4:	9303      	str	r3, [sp, #12]
 800a0c6:	f7ff fef3 	bl	8009eb0 <__hexdig_fun>
 800a0ca:	9b03      	ldr	r3, [sp, #12]
 800a0cc:	f000 000f 	and.w	r0, r0, #15
 800a0d0:	4098      	lsls	r0, r3
 800a0d2:	ea4b 0b00 	orr.w	fp, fp, r0
 800a0d6:	3304      	adds	r3, #4
 800a0d8:	e7ae      	b.n	800a038 <__gethex+0x15c>
 800a0da:	45b1      	cmp	r9, r6
 800a0dc:	d8ea      	bhi.n	800a0b4 <__gethex+0x1d8>
 800a0de:	492b      	ldr	r1, [pc, #172]	@ (800a18c <__gethex+0x2b0>)
 800a0e0:	9303      	str	r3, [sp, #12]
 800a0e2:	2201      	movs	r2, #1
 800a0e4:	4630      	mov	r0, r6
 800a0e6:	f7ff fe25 	bl	8009d34 <strncmp>
 800a0ea:	9b03      	ldr	r3, [sp, #12]
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d1e1      	bne.n	800a0b4 <__gethex+0x1d8>
 800a0f0:	e7a2      	b.n	800a038 <__gethex+0x15c>
 800a0f2:	1ea9      	subs	r1, r5, #2
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	f7fe fdab 	bl	8008c50 <__any_on>
 800a0fa:	2800      	cmp	r0, #0
 800a0fc:	d0c2      	beq.n	800a084 <__gethex+0x1a8>
 800a0fe:	f04f 0903 	mov.w	r9, #3
 800a102:	e7c1      	b.n	800a088 <__gethex+0x1ac>
 800a104:	da09      	bge.n	800a11a <__gethex+0x23e>
 800a106:	1b75      	subs	r5, r6, r5
 800a108:	4621      	mov	r1, r4
 800a10a:	9801      	ldr	r0, [sp, #4]
 800a10c:	462a      	mov	r2, r5
 800a10e:	f7fe fb69 	bl	80087e4 <__lshift>
 800a112:	1b7f      	subs	r7, r7, r5
 800a114:	4604      	mov	r4, r0
 800a116:	f100 0a14 	add.w	sl, r0, #20
 800a11a:	f04f 0900 	mov.w	r9, #0
 800a11e:	e7b8      	b.n	800a092 <__gethex+0x1b6>
 800a120:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a124:	42bd      	cmp	r5, r7
 800a126:	dd6f      	ble.n	800a208 <__gethex+0x32c>
 800a128:	1bed      	subs	r5, r5, r7
 800a12a:	42ae      	cmp	r6, r5
 800a12c:	dc34      	bgt.n	800a198 <__gethex+0x2bc>
 800a12e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a132:	2b02      	cmp	r3, #2
 800a134:	d022      	beq.n	800a17c <__gethex+0x2a0>
 800a136:	2b03      	cmp	r3, #3
 800a138:	d024      	beq.n	800a184 <__gethex+0x2a8>
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d115      	bne.n	800a16a <__gethex+0x28e>
 800a13e:	42ae      	cmp	r6, r5
 800a140:	d113      	bne.n	800a16a <__gethex+0x28e>
 800a142:	2e01      	cmp	r6, #1
 800a144:	d10b      	bne.n	800a15e <__gethex+0x282>
 800a146:	9a02      	ldr	r2, [sp, #8]
 800a148:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a14c:	6013      	str	r3, [r2, #0]
 800a14e:	2301      	movs	r3, #1
 800a150:	6123      	str	r3, [r4, #16]
 800a152:	f8ca 3000 	str.w	r3, [sl]
 800a156:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a158:	2562      	movs	r5, #98	@ 0x62
 800a15a:	601c      	str	r4, [r3, #0]
 800a15c:	e73a      	b.n	8009fd4 <__gethex+0xf8>
 800a15e:	1e71      	subs	r1, r6, #1
 800a160:	4620      	mov	r0, r4
 800a162:	f7fe fd75 	bl	8008c50 <__any_on>
 800a166:	2800      	cmp	r0, #0
 800a168:	d1ed      	bne.n	800a146 <__gethex+0x26a>
 800a16a:	9801      	ldr	r0, [sp, #4]
 800a16c:	4621      	mov	r1, r4
 800a16e:	f7fe f921 	bl	80083b4 <_Bfree>
 800a172:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a174:	2300      	movs	r3, #0
 800a176:	6013      	str	r3, [r2, #0]
 800a178:	2550      	movs	r5, #80	@ 0x50
 800a17a:	e72b      	b.n	8009fd4 <__gethex+0xf8>
 800a17c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d1f3      	bne.n	800a16a <__gethex+0x28e>
 800a182:	e7e0      	b.n	800a146 <__gethex+0x26a>
 800a184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a186:	2b00      	cmp	r3, #0
 800a188:	d1dd      	bne.n	800a146 <__gethex+0x26a>
 800a18a:	e7ee      	b.n	800a16a <__gethex+0x28e>
 800a18c:	0800ad38 	.word	0x0800ad38
 800a190:	0800abd1 	.word	0x0800abd1
 800a194:	0800aee6 	.word	0x0800aee6
 800a198:	1e6f      	subs	r7, r5, #1
 800a19a:	f1b9 0f00 	cmp.w	r9, #0
 800a19e:	d130      	bne.n	800a202 <__gethex+0x326>
 800a1a0:	b127      	cbz	r7, 800a1ac <__gethex+0x2d0>
 800a1a2:	4639      	mov	r1, r7
 800a1a4:	4620      	mov	r0, r4
 800a1a6:	f7fe fd53 	bl	8008c50 <__any_on>
 800a1aa:	4681      	mov	r9, r0
 800a1ac:	117a      	asrs	r2, r7, #5
 800a1ae:	2301      	movs	r3, #1
 800a1b0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a1b4:	f007 071f 	and.w	r7, r7, #31
 800a1b8:	40bb      	lsls	r3, r7
 800a1ba:	4213      	tst	r3, r2
 800a1bc:	4629      	mov	r1, r5
 800a1be:	4620      	mov	r0, r4
 800a1c0:	bf18      	it	ne
 800a1c2:	f049 0902 	orrne.w	r9, r9, #2
 800a1c6:	f7ff fe21 	bl	8009e0c <rshift>
 800a1ca:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a1ce:	1b76      	subs	r6, r6, r5
 800a1d0:	2502      	movs	r5, #2
 800a1d2:	f1b9 0f00 	cmp.w	r9, #0
 800a1d6:	d047      	beq.n	800a268 <__gethex+0x38c>
 800a1d8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d015      	beq.n	800a20c <__gethex+0x330>
 800a1e0:	2b03      	cmp	r3, #3
 800a1e2:	d017      	beq.n	800a214 <__gethex+0x338>
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	d109      	bne.n	800a1fc <__gethex+0x320>
 800a1e8:	f019 0f02 	tst.w	r9, #2
 800a1ec:	d006      	beq.n	800a1fc <__gethex+0x320>
 800a1ee:	f8da 3000 	ldr.w	r3, [sl]
 800a1f2:	ea49 0903 	orr.w	r9, r9, r3
 800a1f6:	f019 0f01 	tst.w	r9, #1
 800a1fa:	d10e      	bne.n	800a21a <__gethex+0x33e>
 800a1fc:	f045 0510 	orr.w	r5, r5, #16
 800a200:	e032      	b.n	800a268 <__gethex+0x38c>
 800a202:	f04f 0901 	mov.w	r9, #1
 800a206:	e7d1      	b.n	800a1ac <__gethex+0x2d0>
 800a208:	2501      	movs	r5, #1
 800a20a:	e7e2      	b.n	800a1d2 <__gethex+0x2f6>
 800a20c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a20e:	f1c3 0301 	rsb	r3, r3, #1
 800a212:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a216:	2b00      	cmp	r3, #0
 800a218:	d0f0      	beq.n	800a1fc <__gethex+0x320>
 800a21a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a21e:	f104 0314 	add.w	r3, r4, #20
 800a222:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a226:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a22a:	f04f 0c00 	mov.w	ip, #0
 800a22e:	4618      	mov	r0, r3
 800a230:	f853 2b04 	ldr.w	r2, [r3], #4
 800a234:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a238:	d01b      	beq.n	800a272 <__gethex+0x396>
 800a23a:	3201      	adds	r2, #1
 800a23c:	6002      	str	r2, [r0, #0]
 800a23e:	2d02      	cmp	r5, #2
 800a240:	f104 0314 	add.w	r3, r4, #20
 800a244:	d13c      	bne.n	800a2c0 <__gethex+0x3e4>
 800a246:	f8d8 2000 	ldr.w	r2, [r8]
 800a24a:	3a01      	subs	r2, #1
 800a24c:	42b2      	cmp	r2, r6
 800a24e:	d109      	bne.n	800a264 <__gethex+0x388>
 800a250:	1171      	asrs	r1, r6, #5
 800a252:	2201      	movs	r2, #1
 800a254:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a258:	f006 061f 	and.w	r6, r6, #31
 800a25c:	fa02 f606 	lsl.w	r6, r2, r6
 800a260:	421e      	tst	r6, r3
 800a262:	d13a      	bne.n	800a2da <__gethex+0x3fe>
 800a264:	f045 0520 	orr.w	r5, r5, #32
 800a268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a26a:	601c      	str	r4, [r3, #0]
 800a26c:	9b02      	ldr	r3, [sp, #8]
 800a26e:	601f      	str	r7, [r3, #0]
 800a270:	e6b0      	b.n	8009fd4 <__gethex+0xf8>
 800a272:	4299      	cmp	r1, r3
 800a274:	f843 cc04 	str.w	ip, [r3, #-4]
 800a278:	d8d9      	bhi.n	800a22e <__gethex+0x352>
 800a27a:	68a3      	ldr	r3, [r4, #8]
 800a27c:	459b      	cmp	fp, r3
 800a27e:	db17      	blt.n	800a2b0 <__gethex+0x3d4>
 800a280:	6861      	ldr	r1, [r4, #4]
 800a282:	9801      	ldr	r0, [sp, #4]
 800a284:	3101      	adds	r1, #1
 800a286:	f7fe f855 	bl	8008334 <_Balloc>
 800a28a:	4681      	mov	r9, r0
 800a28c:	b918      	cbnz	r0, 800a296 <__gethex+0x3ba>
 800a28e:	4b1a      	ldr	r3, [pc, #104]	@ (800a2f8 <__gethex+0x41c>)
 800a290:	4602      	mov	r2, r0
 800a292:	2184      	movs	r1, #132	@ 0x84
 800a294:	e6c5      	b.n	800a022 <__gethex+0x146>
 800a296:	6922      	ldr	r2, [r4, #16]
 800a298:	3202      	adds	r2, #2
 800a29a:	f104 010c 	add.w	r1, r4, #12
 800a29e:	0092      	lsls	r2, r2, #2
 800a2a0:	300c      	adds	r0, #12
 800a2a2:	f7ff fd69 	bl	8009d78 <memcpy>
 800a2a6:	4621      	mov	r1, r4
 800a2a8:	9801      	ldr	r0, [sp, #4]
 800a2aa:	f7fe f883 	bl	80083b4 <_Bfree>
 800a2ae:	464c      	mov	r4, r9
 800a2b0:	6923      	ldr	r3, [r4, #16]
 800a2b2:	1c5a      	adds	r2, r3, #1
 800a2b4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a2b8:	6122      	str	r2, [r4, #16]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	615a      	str	r2, [r3, #20]
 800a2be:	e7be      	b.n	800a23e <__gethex+0x362>
 800a2c0:	6922      	ldr	r2, [r4, #16]
 800a2c2:	455a      	cmp	r2, fp
 800a2c4:	dd0b      	ble.n	800a2de <__gethex+0x402>
 800a2c6:	2101      	movs	r1, #1
 800a2c8:	4620      	mov	r0, r4
 800a2ca:	f7ff fd9f 	bl	8009e0c <rshift>
 800a2ce:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a2d2:	3701      	adds	r7, #1
 800a2d4:	42bb      	cmp	r3, r7
 800a2d6:	f6ff aee0 	blt.w	800a09a <__gethex+0x1be>
 800a2da:	2501      	movs	r5, #1
 800a2dc:	e7c2      	b.n	800a264 <__gethex+0x388>
 800a2de:	f016 061f 	ands.w	r6, r6, #31
 800a2e2:	d0fa      	beq.n	800a2da <__gethex+0x3fe>
 800a2e4:	4453      	add	r3, sl
 800a2e6:	f1c6 0620 	rsb	r6, r6, #32
 800a2ea:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a2ee:	f7fe f913 	bl	8008518 <__hi0bits>
 800a2f2:	42b0      	cmp	r0, r6
 800a2f4:	dbe7      	blt.n	800a2c6 <__gethex+0x3ea>
 800a2f6:	e7f0      	b.n	800a2da <__gethex+0x3fe>
 800a2f8:	0800abd1 	.word	0x0800abd1

0800a2fc <L_shift>:
 800a2fc:	f1c2 0208 	rsb	r2, r2, #8
 800a300:	0092      	lsls	r2, r2, #2
 800a302:	b570      	push	{r4, r5, r6, lr}
 800a304:	f1c2 0620 	rsb	r6, r2, #32
 800a308:	6843      	ldr	r3, [r0, #4]
 800a30a:	6804      	ldr	r4, [r0, #0]
 800a30c:	fa03 f506 	lsl.w	r5, r3, r6
 800a310:	432c      	orrs	r4, r5
 800a312:	40d3      	lsrs	r3, r2
 800a314:	6004      	str	r4, [r0, #0]
 800a316:	f840 3f04 	str.w	r3, [r0, #4]!
 800a31a:	4288      	cmp	r0, r1
 800a31c:	d3f4      	bcc.n	800a308 <L_shift+0xc>
 800a31e:	bd70      	pop	{r4, r5, r6, pc}

0800a320 <__match>:
 800a320:	b530      	push	{r4, r5, lr}
 800a322:	6803      	ldr	r3, [r0, #0]
 800a324:	3301      	adds	r3, #1
 800a326:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a32a:	b914      	cbnz	r4, 800a332 <__match+0x12>
 800a32c:	6003      	str	r3, [r0, #0]
 800a32e:	2001      	movs	r0, #1
 800a330:	bd30      	pop	{r4, r5, pc}
 800a332:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a336:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a33a:	2d19      	cmp	r5, #25
 800a33c:	bf98      	it	ls
 800a33e:	3220      	addls	r2, #32
 800a340:	42a2      	cmp	r2, r4
 800a342:	d0f0      	beq.n	800a326 <__match+0x6>
 800a344:	2000      	movs	r0, #0
 800a346:	e7f3      	b.n	800a330 <__match+0x10>

0800a348 <__hexnan>:
 800a348:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a34c:	680b      	ldr	r3, [r1, #0]
 800a34e:	6801      	ldr	r1, [r0, #0]
 800a350:	115e      	asrs	r6, r3, #5
 800a352:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a356:	f013 031f 	ands.w	r3, r3, #31
 800a35a:	b087      	sub	sp, #28
 800a35c:	bf18      	it	ne
 800a35e:	3604      	addne	r6, #4
 800a360:	2500      	movs	r5, #0
 800a362:	1f37      	subs	r7, r6, #4
 800a364:	4682      	mov	sl, r0
 800a366:	4690      	mov	r8, r2
 800a368:	9301      	str	r3, [sp, #4]
 800a36a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a36e:	46b9      	mov	r9, r7
 800a370:	463c      	mov	r4, r7
 800a372:	9502      	str	r5, [sp, #8]
 800a374:	46ab      	mov	fp, r5
 800a376:	784a      	ldrb	r2, [r1, #1]
 800a378:	1c4b      	adds	r3, r1, #1
 800a37a:	9303      	str	r3, [sp, #12]
 800a37c:	b342      	cbz	r2, 800a3d0 <__hexnan+0x88>
 800a37e:	4610      	mov	r0, r2
 800a380:	9105      	str	r1, [sp, #20]
 800a382:	9204      	str	r2, [sp, #16]
 800a384:	f7ff fd94 	bl	8009eb0 <__hexdig_fun>
 800a388:	2800      	cmp	r0, #0
 800a38a:	d151      	bne.n	800a430 <__hexnan+0xe8>
 800a38c:	9a04      	ldr	r2, [sp, #16]
 800a38e:	9905      	ldr	r1, [sp, #20]
 800a390:	2a20      	cmp	r2, #32
 800a392:	d818      	bhi.n	800a3c6 <__hexnan+0x7e>
 800a394:	9b02      	ldr	r3, [sp, #8]
 800a396:	459b      	cmp	fp, r3
 800a398:	dd13      	ble.n	800a3c2 <__hexnan+0x7a>
 800a39a:	454c      	cmp	r4, r9
 800a39c:	d206      	bcs.n	800a3ac <__hexnan+0x64>
 800a39e:	2d07      	cmp	r5, #7
 800a3a0:	dc04      	bgt.n	800a3ac <__hexnan+0x64>
 800a3a2:	462a      	mov	r2, r5
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	4620      	mov	r0, r4
 800a3a8:	f7ff ffa8 	bl	800a2fc <L_shift>
 800a3ac:	4544      	cmp	r4, r8
 800a3ae:	d952      	bls.n	800a456 <__hexnan+0x10e>
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	f1a4 0904 	sub.w	r9, r4, #4
 800a3b6:	f844 3c04 	str.w	r3, [r4, #-4]
 800a3ba:	f8cd b008 	str.w	fp, [sp, #8]
 800a3be:	464c      	mov	r4, r9
 800a3c0:	461d      	mov	r5, r3
 800a3c2:	9903      	ldr	r1, [sp, #12]
 800a3c4:	e7d7      	b.n	800a376 <__hexnan+0x2e>
 800a3c6:	2a29      	cmp	r2, #41	@ 0x29
 800a3c8:	d157      	bne.n	800a47a <__hexnan+0x132>
 800a3ca:	3102      	adds	r1, #2
 800a3cc:	f8ca 1000 	str.w	r1, [sl]
 800a3d0:	f1bb 0f00 	cmp.w	fp, #0
 800a3d4:	d051      	beq.n	800a47a <__hexnan+0x132>
 800a3d6:	454c      	cmp	r4, r9
 800a3d8:	d206      	bcs.n	800a3e8 <__hexnan+0xa0>
 800a3da:	2d07      	cmp	r5, #7
 800a3dc:	dc04      	bgt.n	800a3e8 <__hexnan+0xa0>
 800a3de:	462a      	mov	r2, r5
 800a3e0:	4649      	mov	r1, r9
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f7ff ff8a 	bl	800a2fc <L_shift>
 800a3e8:	4544      	cmp	r4, r8
 800a3ea:	d936      	bls.n	800a45a <__hexnan+0x112>
 800a3ec:	f1a8 0204 	sub.w	r2, r8, #4
 800a3f0:	4623      	mov	r3, r4
 800a3f2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a3f6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a3fa:	429f      	cmp	r7, r3
 800a3fc:	d2f9      	bcs.n	800a3f2 <__hexnan+0xaa>
 800a3fe:	1b3b      	subs	r3, r7, r4
 800a400:	f023 0303 	bic.w	r3, r3, #3
 800a404:	3304      	adds	r3, #4
 800a406:	3401      	adds	r4, #1
 800a408:	3e03      	subs	r6, #3
 800a40a:	42b4      	cmp	r4, r6
 800a40c:	bf88      	it	hi
 800a40e:	2304      	movhi	r3, #4
 800a410:	4443      	add	r3, r8
 800a412:	2200      	movs	r2, #0
 800a414:	f843 2b04 	str.w	r2, [r3], #4
 800a418:	429f      	cmp	r7, r3
 800a41a:	d2fb      	bcs.n	800a414 <__hexnan+0xcc>
 800a41c:	683b      	ldr	r3, [r7, #0]
 800a41e:	b91b      	cbnz	r3, 800a428 <__hexnan+0xe0>
 800a420:	4547      	cmp	r7, r8
 800a422:	d128      	bne.n	800a476 <__hexnan+0x12e>
 800a424:	2301      	movs	r3, #1
 800a426:	603b      	str	r3, [r7, #0]
 800a428:	2005      	movs	r0, #5
 800a42a:	b007      	add	sp, #28
 800a42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a430:	3501      	adds	r5, #1
 800a432:	2d08      	cmp	r5, #8
 800a434:	f10b 0b01 	add.w	fp, fp, #1
 800a438:	dd06      	ble.n	800a448 <__hexnan+0x100>
 800a43a:	4544      	cmp	r4, r8
 800a43c:	d9c1      	bls.n	800a3c2 <__hexnan+0x7a>
 800a43e:	2300      	movs	r3, #0
 800a440:	f844 3c04 	str.w	r3, [r4, #-4]
 800a444:	2501      	movs	r5, #1
 800a446:	3c04      	subs	r4, #4
 800a448:	6822      	ldr	r2, [r4, #0]
 800a44a:	f000 000f 	and.w	r0, r0, #15
 800a44e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a452:	6020      	str	r0, [r4, #0]
 800a454:	e7b5      	b.n	800a3c2 <__hexnan+0x7a>
 800a456:	2508      	movs	r5, #8
 800a458:	e7b3      	b.n	800a3c2 <__hexnan+0x7a>
 800a45a:	9b01      	ldr	r3, [sp, #4]
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d0dd      	beq.n	800a41c <__hexnan+0xd4>
 800a460:	f1c3 0320 	rsb	r3, r3, #32
 800a464:	f04f 32ff 	mov.w	r2, #4294967295
 800a468:	40da      	lsrs	r2, r3
 800a46a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a46e:	4013      	ands	r3, r2
 800a470:	f846 3c04 	str.w	r3, [r6, #-4]
 800a474:	e7d2      	b.n	800a41c <__hexnan+0xd4>
 800a476:	3f04      	subs	r7, #4
 800a478:	e7d0      	b.n	800a41c <__hexnan+0xd4>
 800a47a:	2004      	movs	r0, #4
 800a47c:	e7d5      	b.n	800a42a <__hexnan+0xe2>

0800a47e <__ascii_mbtowc>:
 800a47e:	b082      	sub	sp, #8
 800a480:	b901      	cbnz	r1, 800a484 <__ascii_mbtowc+0x6>
 800a482:	a901      	add	r1, sp, #4
 800a484:	b142      	cbz	r2, 800a498 <__ascii_mbtowc+0x1a>
 800a486:	b14b      	cbz	r3, 800a49c <__ascii_mbtowc+0x1e>
 800a488:	7813      	ldrb	r3, [r2, #0]
 800a48a:	600b      	str	r3, [r1, #0]
 800a48c:	7812      	ldrb	r2, [r2, #0]
 800a48e:	1e10      	subs	r0, r2, #0
 800a490:	bf18      	it	ne
 800a492:	2001      	movne	r0, #1
 800a494:	b002      	add	sp, #8
 800a496:	4770      	bx	lr
 800a498:	4610      	mov	r0, r2
 800a49a:	e7fb      	b.n	800a494 <__ascii_mbtowc+0x16>
 800a49c:	f06f 0001 	mvn.w	r0, #1
 800a4a0:	e7f8      	b.n	800a494 <__ascii_mbtowc+0x16>

0800a4a2 <_realloc_r>:
 800a4a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a6:	4680      	mov	r8, r0
 800a4a8:	4615      	mov	r5, r2
 800a4aa:	460c      	mov	r4, r1
 800a4ac:	b921      	cbnz	r1, 800a4b8 <_realloc_r+0x16>
 800a4ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4b2:	4611      	mov	r1, r2
 800a4b4:	f7fd beb2 	b.w	800821c <_malloc_r>
 800a4b8:	b92a      	cbnz	r2, 800a4c6 <_realloc_r+0x24>
 800a4ba:	f7fd fe3b 	bl	8008134 <_free_r>
 800a4be:	2400      	movs	r4, #0
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4c6:	f000 f840 	bl	800a54a <_malloc_usable_size_r>
 800a4ca:	4285      	cmp	r5, r0
 800a4cc:	4606      	mov	r6, r0
 800a4ce:	d802      	bhi.n	800a4d6 <_realloc_r+0x34>
 800a4d0:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a4d4:	d8f4      	bhi.n	800a4c0 <_realloc_r+0x1e>
 800a4d6:	4629      	mov	r1, r5
 800a4d8:	4640      	mov	r0, r8
 800a4da:	f7fd fe9f 	bl	800821c <_malloc_r>
 800a4de:	4607      	mov	r7, r0
 800a4e0:	2800      	cmp	r0, #0
 800a4e2:	d0ec      	beq.n	800a4be <_realloc_r+0x1c>
 800a4e4:	42b5      	cmp	r5, r6
 800a4e6:	462a      	mov	r2, r5
 800a4e8:	4621      	mov	r1, r4
 800a4ea:	bf28      	it	cs
 800a4ec:	4632      	movcs	r2, r6
 800a4ee:	f7ff fc43 	bl	8009d78 <memcpy>
 800a4f2:	4621      	mov	r1, r4
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	f7fd fe1d 	bl	8008134 <_free_r>
 800a4fa:	463c      	mov	r4, r7
 800a4fc:	e7e0      	b.n	800a4c0 <_realloc_r+0x1e>

0800a4fe <__ascii_wctomb>:
 800a4fe:	4603      	mov	r3, r0
 800a500:	4608      	mov	r0, r1
 800a502:	b141      	cbz	r1, 800a516 <__ascii_wctomb+0x18>
 800a504:	2aff      	cmp	r2, #255	@ 0xff
 800a506:	d904      	bls.n	800a512 <__ascii_wctomb+0x14>
 800a508:	228a      	movs	r2, #138	@ 0x8a
 800a50a:	601a      	str	r2, [r3, #0]
 800a50c:	f04f 30ff 	mov.w	r0, #4294967295
 800a510:	4770      	bx	lr
 800a512:	700a      	strb	r2, [r1, #0]
 800a514:	2001      	movs	r0, #1
 800a516:	4770      	bx	lr

0800a518 <fiprintf>:
 800a518:	b40e      	push	{r1, r2, r3}
 800a51a:	b503      	push	{r0, r1, lr}
 800a51c:	4601      	mov	r1, r0
 800a51e:	ab03      	add	r3, sp, #12
 800a520:	4805      	ldr	r0, [pc, #20]	@ (800a538 <fiprintf+0x20>)
 800a522:	f853 2b04 	ldr.w	r2, [r3], #4
 800a526:	6800      	ldr	r0, [r0, #0]
 800a528:	9301      	str	r3, [sp, #4]
 800a52a:	f000 f83f 	bl	800a5ac <_vfiprintf_r>
 800a52e:	b002      	add	sp, #8
 800a530:	f85d eb04 	ldr.w	lr, [sp], #4
 800a534:	b003      	add	sp, #12
 800a536:	4770      	bx	lr
 800a538:	24000038 	.word	0x24000038

0800a53c <abort>:
 800a53c:	b508      	push	{r3, lr}
 800a53e:	2006      	movs	r0, #6
 800a540:	f000 fa08 	bl	800a954 <raise>
 800a544:	2001      	movs	r0, #1
 800a546:	f7f6 ffbf 	bl	80014c8 <_exit>

0800a54a <_malloc_usable_size_r>:
 800a54a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a54e:	1f18      	subs	r0, r3, #4
 800a550:	2b00      	cmp	r3, #0
 800a552:	bfbc      	itt	lt
 800a554:	580b      	ldrlt	r3, [r1, r0]
 800a556:	18c0      	addlt	r0, r0, r3
 800a558:	4770      	bx	lr

0800a55a <__sfputc_r>:
 800a55a:	6893      	ldr	r3, [r2, #8]
 800a55c:	3b01      	subs	r3, #1
 800a55e:	2b00      	cmp	r3, #0
 800a560:	b410      	push	{r4}
 800a562:	6093      	str	r3, [r2, #8]
 800a564:	da08      	bge.n	800a578 <__sfputc_r+0x1e>
 800a566:	6994      	ldr	r4, [r2, #24]
 800a568:	42a3      	cmp	r3, r4
 800a56a:	db01      	blt.n	800a570 <__sfputc_r+0x16>
 800a56c:	290a      	cmp	r1, #10
 800a56e:	d103      	bne.n	800a578 <__sfputc_r+0x1e>
 800a570:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a574:	f000 b932 	b.w	800a7dc <__swbuf_r>
 800a578:	6813      	ldr	r3, [r2, #0]
 800a57a:	1c58      	adds	r0, r3, #1
 800a57c:	6010      	str	r0, [r2, #0]
 800a57e:	7019      	strb	r1, [r3, #0]
 800a580:	4608      	mov	r0, r1
 800a582:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a586:	4770      	bx	lr

0800a588 <__sfputs_r>:
 800a588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a58a:	4606      	mov	r6, r0
 800a58c:	460f      	mov	r7, r1
 800a58e:	4614      	mov	r4, r2
 800a590:	18d5      	adds	r5, r2, r3
 800a592:	42ac      	cmp	r4, r5
 800a594:	d101      	bne.n	800a59a <__sfputs_r+0x12>
 800a596:	2000      	movs	r0, #0
 800a598:	e007      	b.n	800a5aa <__sfputs_r+0x22>
 800a59a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a59e:	463a      	mov	r2, r7
 800a5a0:	4630      	mov	r0, r6
 800a5a2:	f7ff ffda 	bl	800a55a <__sfputc_r>
 800a5a6:	1c43      	adds	r3, r0, #1
 800a5a8:	d1f3      	bne.n	800a592 <__sfputs_r+0xa>
 800a5aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a5ac <_vfiprintf_r>:
 800a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b0:	460d      	mov	r5, r1
 800a5b2:	b09d      	sub	sp, #116	@ 0x74
 800a5b4:	4614      	mov	r4, r2
 800a5b6:	4698      	mov	r8, r3
 800a5b8:	4606      	mov	r6, r0
 800a5ba:	b118      	cbz	r0, 800a5c4 <_vfiprintf_r+0x18>
 800a5bc:	6a03      	ldr	r3, [r0, #32]
 800a5be:	b90b      	cbnz	r3, 800a5c4 <_vfiprintf_r+0x18>
 800a5c0:	f7fc feba 	bl	8007338 <__sinit>
 800a5c4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5c6:	07d9      	lsls	r1, r3, #31
 800a5c8:	d405      	bmi.n	800a5d6 <_vfiprintf_r+0x2a>
 800a5ca:	89ab      	ldrh	r3, [r5, #12]
 800a5cc:	059a      	lsls	r2, r3, #22
 800a5ce:	d402      	bmi.n	800a5d6 <_vfiprintf_r+0x2a>
 800a5d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a5d2:	f7fc ffc8 	bl	8007566 <__retarget_lock_acquire_recursive>
 800a5d6:	89ab      	ldrh	r3, [r5, #12]
 800a5d8:	071b      	lsls	r3, r3, #28
 800a5da:	d501      	bpl.n	800a5e0 <_vfiprintf_r+0x34>
 800a5dc:	692b      	ldr	r3, [r5, #16]
 800a5de:	b99b      	cbnz	r3, 800a608 <_vfiprintf_r+0x5c>
 800a5e0:	4629      	mov	r1, r5
 800a5e2:	4630      	mov	r0, r6
 800a5e4:	f000 f938 	bl	800a858 <__swsetup_r>
 800a5e8:	b170      	cbz	r0, 800a608 <_vfiprintf_r+0x5c>
 800a5ea:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a5ec:	07dc      	lsls	r4, r3, #31
 800a5ee:	d504      	bpl.n	800a5fa <_vfiprintf_r+0x4e>
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a5f4:	b01d      	add	sp, #116	@ 0x74
 800a5f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5fa:	89ab      	ldrh	r3, [r5, #12]
 800a5fc:	0598      	lsls	r0, r3, #22
 800a5fe:	d4f7      	bmi.n	800a5f0 <_vfiprintf_r+0x44>
 800a600:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a602:	f7fc ffb1 	bl	8007568 <__retarget_lock_release_recursive>
 800a606:	e7f3      	b.n	800a5f0 <_vfiprintf_r+0x44>
 800a608:	2300      	movs	r3, #0
 800a60a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a60c:	2320      	movs	r3, #32
 800a60e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a612:	f8cd 800c 	str.w	r8, [sp, #12]
 800a616:	2330      	movs	r3, #48	@ 0x30
 800a618:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a7c8 <_vfiprintf_r+0x21c>
 800a61c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a620:	f04f 0901 	mov.w	r9, #1
 800a624:	4623      	mov	r3, r4
 800a626:	469a      	mov	sl, r3
 800a628:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a62c:	b10a      	cbz	r2, 800a632 <_vfiprintf_r+0x86>
 800a62e:	2a25      	cmp	r2, #37	@ 0x25
 800a630:	d1f9      	bne.n	800a626 <_vfiprintf_r+0x7a>
 800a632:	ebba 0b04 	subs.w	fp, sl, r4
 800a636:	d00b      	beq.n	800a650 <_vfiprintf_r+0xa4>
 800a638:	465b      	mov	r3, fp
 800a63a:	4622      	mov	r2, r4
 800a63c:	4629      	mov	r1, r5
 800a63e:	4630      	mov	r0, r6
 800a640:	f7ff ffa2 	bl	800a588 <__sfputs_r>
 800a644:	3001      	adds	r0, #1
 800a646:	f000 80a7 	beq.w	800a798 <_vfiprintf_r+0x1ec>
 800a64a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a64c:	445a      	add	r2, fp
 800a64e:	9209      	str	r2, [sp, #36]	@ 0x24
 800a650:	f89a 3000 	ldrb.w	r3, [sl]
 800a654:	2b00      	cmp	r3, #0
 800a656:	f000 809f 	beq.w	800a798 <_vfiprintf_r+0x1ec>
 800a65a:	2300      	movs	r3, #0
 800a65c:	f04f 32ff 	mov.w	r2, #4294967295
 800a660:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a664:	f10a 0a01 	add.w	sl, sl, #1
 800a668:	9304      	str	r3, [sp, #16]
 800a66a:	9307      	str	r3, [sp, #28]
 800a66c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a670:	931a      	str	r3, [sp, #104]	@ 0x68
 800a672:	4654      	mov	r4, sl
 800a674:	2205      	movs	r2, #5
 800a676:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a67a:	4853      	ldr	r0, [pc, #332]	@ (800a7c8 <_vfiprintf_r+0x21c>)
 800a67c:	f7f5 fe30 	bl	80002e0 <memchr>
 800a680:	9a04      	ldr	r2, [sp, #16]
 800a682:	b9d8      	cbnz	r0, 800a6bc <_vfiprintf_r+0x110>
 800a684:	06d1      	lsls	r1, r2, #27
 800a686:	bf44      	itt	mi
 800a688:	2320      	movmi	r3, #32
 800a68a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a68e:	0713      	lsls	r3, r2, #28
 800a690:	bf44      	itt	mi
 800a692:	232b      	movmi	r3, #43	@ 0x2b
 800a694:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a698:	f89a 3000 	ldrb.w	r3, [sl]
 800a69c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a69e:	d015      	beq.n	800a6cc <_vfiprintf_r+0x120>
 800a6a0:	9a07      	ldr	r2, [sp, #28]
 800a6a2:	4654      	mov	r4, sl
 800a6a4:	2000      	movs	r0, #0
 800a6a6:	f04f 0c0a 	mov.w	ip, #10
 800a6aa:	4621      	mov	r1, r4
 800a6ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a6b0:	3b30      	subs	r3, #48	@ 0x30
 800a6b2:	2b09      	cmp	r3, #9
 800a6b4:	d94b      	bls.n	800a74e <_vfiprintf_r+0x1a2>
 800a6b6:	b1b0      	cbz	r0, 800a6e6 <_vfiprintf_r+0x13a>
 800a6b8:	9207      	str	r2, [sp, #28]
 800a6ba:	e014      	b.n	800a6e6 <_vfiprintf_r+0x13a>
 800a6bc:	eba0 0308 	sub.w	r3, r0, r8
 800a6c0:	fa09 f303 	lsl.w	r3, r9, r3
 800a6c4:	4313      	orrs	r3, r2
 800a6c6:	9304      	str	r3, [sp, #16]
 800a6c8:	46a2      	mov	sl, r4
 800a6ca:	e7d2      	b.n	800a672 <_vfiprintf_r+0xc6>
 800a6cc:	9b03      	ldr	r3, [sp, #12]
 800a6ce:	1d19      	adds	r1, r3, #4
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	9103      	str	r1, [sp, #12]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	bfbb      	ittet	lt
 800a6d8:	425b      	neglt	r3, r3
 800a6da:	f042 0202 	orrlt.w	r2, r2, #2
 800a6de:	9307      	strge	r3, [sp, #28]
 800a6e0:	9307      	strlt	r3, [sp, #28]
 800a6e2:	bfb8      	it	lt
 800a6e4:	9204      	strlt	r2, [sp, #16]
 800a6e6:	7823      	ldrb	r3, [r4, #0]
 800a6e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800a6ea:	d10a      	bne.n	800a702 <_vfiprintf_r+0x156>
 800a6ec:	7863      	ldrb	r3, [r4, #1]
 800a6ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800a6f0:	d132      	bne.n	800a758 <_vfiprintf_r+0x1ac>
 800a6f2:	9b03      	ldr	r3, [sp, #12]
 800a6f4:	1d1a      	adds	r2, r3, #4
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	9203      	str	r2, [sp, #12]
 800a6fa:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6fe:	3402      	adds	r4, #2
 800a700:	9305      	str	r3, [sp, #20]
 800a702:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a7d8 <_vfiprintf_r+0x22c>
 800a706:	7821      	ldrb	r1, [r4, #0]
 800a708:	2203      	movs	r2, #3
 800a70a:	4650      	mov	r0, sl
 800a70c:	f7f5 fde8 	bl	80002e0 <memchr>
 800a710:	b138      	cbz	r0, 800a722 <_vfiprintf_r+0x176>
 800a712:	9b04      	ldr	r3, [sp, #16]
 800a714:	eba0 000a 	sub.w	r0, r0, sl
 800a718:	2240      	movs	r2, #64	@ 0x40
 800a71a:	4082      	lsls	r2, r0
 800a71c:	4313      	orrs	r3, r2
 800a71e:	3401      	adds	r4, #1
 800a720:	9304      	str	r3, [sp, #16]
 800a722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a726:	4829      	ldr	r0, [pc, #164]	@ (800a7cc <_vfiprintf_r+0x220>)
 800a728:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a72c:	2206      	movs	r2, #6
 800a72e:	f7f5 fdd7 	bl	80002e0 <memchr>
 800a732:	2800      	cmp	r0, #0
 800a734:	d03f      	beq.n	800a7b6 <_vfiprintf_r+0x20a>
 800a736:	4b26      	ldr	r3, [pc, #152]	@ (800a7d0 <_vfiprintf_r+0x224>)
 800a738:	bb1b      	cbnz	r3, 800a782 <_vfiprintf_r+0x1d6>
 800a73a:	9b03      	ldr	r3, [sp, #12]
 800a73c:	3307      	adds	r3, #7
 800a73e:	f023 0307 	bic.w	r3, r3, #7
 800a742:	3308      	adds	r3, #8
 800a744:	9303      	str	r3, [sp, #12]
 800a746:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a748:	443b      	add	r3, r7
 800a74a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a74c:	e76a      	b.n	800a624 <_vfiprintf_r+0x78>
 800a74e:	fb0c 3202 	mla	r2, ip, r2, r3
 800a752:	460c      	mov	r4, r1
 800a754:	2001      	movs	r0, #1
 800a756:	e7a8      	b.n	800a6aa <_vfiprintf_r+0xfe>
 800a758:	2300      	movs	r3, #0
 800a75a:	3401      	adds	r4, #1
 800a75c:	9305      	str	r3, [sp, #20]
 800a75e:	4619      	mov	r1, r3
 800a760:	f04f 0c0a 	mov.w	ip, #10
 800a764:	4620      	mov	r0, r4
 800a766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a76a:	3a30      	subs	r2, #48	@ 0x30
 800a76c:	2a09      	cmp	r2, #9
 800a76e:	d903      	bls.n	800a778 <_vfiprintf_r+0x1cc>
 800a770:	2b00      	cmp	r3, #0
 800a772:	d0c6      	beq.n	800a702 <_vfiprintf_r+0x156>
 800a774:	9105      	str	r1, [sp, #20]
 800a776:	e7c4      	b.n	800a702 <_vfiprintf_r+0x156>
 800a778:	fb0c 2101 	mla	r1, ip, r1, r2
 800a77c:	4604      	mov	r4, r0
 800a77e:	2301      	movs	r3, #1
 800a780:	e7f0      	b.n	800a764 <_vfiprintf_r+0x1b8>
 800a782:	ab03      	add	r3, sp, #12
 800a784:	9300      	str	r3, [sp, #0]
 800a786:	462a      	mov	r2, r5
 800a788:	4b12      	ldr	r3, [pc, #72]	@ (800a7d4 <_vfiprintf_r+0x228>)
 800a78a:	a904      	add	r1, sp, #16
 800a78c:	4630      	mov	r0, r6
 800a78e:	f7fb ff93 	bl	80066b8 <_printf_float>
 800a792:	4607      	mov	r7, r0
 800a794:	1c78      	adds	r0, r7, #1
 800a796:	d1d6      	bne.n	800a746 <_vfiprintf_r+0x19a>
 800a798:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a79a:	07d9      	lsls	r1, r3, #31
 800a79c:	d405      	bmi.n	800a7aa <_vfiprintf_r+0x1fe>
 800a79e:	89ab      	ldrh	r3, [r5, #12]
 800a7a0:	059a      	lsls	r2, r3, #22
 800a7a2:	d402      	bmi.n	800a7aa <_vfiprintf_r+0x1fe>
 800a7a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7a6:	f7fc fedf 	bl	8007568 <__retarget_lock_release_recursive>
 800a7aa:	89ab      	ldrh	r3, [r5, #12]
 800a7ac:	065b      	lsls	r3, r3, #25
 800a7ae:	f53f af1f 	bmi.w	800a5f0 <_vfiprintf_r+0x44>
 800a7b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a7b4:	e71e      	b.n	800a5f4 <_vfiprintf_r+0x48>
 800a7b6:	ab03      	add	r3, sp, #12
 800a7b8:	9300      	str	r3, [sp, #0]
 800a7ba:	462a      	mov	r2, r5
 800a7bc:	4b05      	ldr	r3, [pc, #20]	@ (800a7d4 <_vfiprintf_r+0x228>)
 800a7be:	a904      	add	r1, sp, #16
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f7fc fa01 	bl	8006bc8 <_printf_i>
 800a7c6:	e7e4      	b.n	800a792 <_vfiprintf_r+0x1e6>
 800a7c8:	0800ae91 	.word	0x0800ae91
 800a7cc:	0800ae9b 	.word	0x0800ae9b
 800a7d0:	080066b9 	.word	0x080066b9
 800a7d4:	0800a589 	.word	0x0800a589
 800a7d8:	0800ae97 	.word	0x0800ae97

0800a7dc <__swbuf_r>:
 800a7dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7de:	460e      	mov	r6, r1
 800a7e0:	4614      	mov	r4, r2
 800a7e2:	4605      	mov	r5, r0
 800a7e4:	b118      	cbz	r0, 800a7ee <__swbuf_r+0x12>
 800a7e6:	6a03      	ldr	r3, [r0, #32]
 800a7e8:	b90b      	cbnz	r3, 800a7ee <__swbuf_r+0x12>
 800a7ea:	f7fc fda5 	bl	8007338 <__sinit>
 800a7ee:	69a3      	ldr	r3, [r4, #24]
 800a7f0:	60a3      	str	r3, [r4, #8]
 800a7f2:	89a3      	ldrh	r3, [r4, #12]
 800a7f4:	071a      	lsls	r2, r3, #28
 800a7f6:	d501      	bpl.n	800a7fc <__swbuf_r+0x20>
 800a7f8:	6923      	ldr	r3, [r4, #16]
 800a7fa:	b943      	cbnz	r3, 800a80e <__swbuf_r+0x32>
 800a7fc:	4621      	mov	r1, r4
 800a7fe:	4628      	mov	r0, r5
 800a800:	f000 f82a 	bl	800a858 <__swsetup_r>
 800a804:	b118      	cbz	r0, 800a80e <__swbuf_r+0x32>
 800a806:	f04f 37ff 	mov.w	r7, #4294967295
 800a80a:	4638      	mov	r0, r7
 800a80c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a80e:	6823      	ldr	r3, [r4, #0]
 800a810:	6922      	ldr	r2, [r4, #16]
 800a812:	1a98      	subs	r0, r3, r2
 800a814:	6963      	ldr	r3, [r4, #20]
 800a816:	b2f6      	uxtb	r6, r6
 800a818:	4283      	cmp	r3, r0
 800a81a:	4637      	mov	r7, r6
 800a81c:	dc05      	bgt.n	800a82a <__swbuf_r+0x4e>
 800a81e:	4621      	mov	r1, r4
 800a820:	4628      	mov	r0, r5
 800a822:	f7ff fa45 	bl	8009cb0 <_fflush_r>
 800a826:	2800      	cmp	r0, #0
 800a828:	d1ed      	bne.n	800a806 <__swbuf_r+0x2a>
 800a82a:	68a3      	ldr	r3, [r4, #8]
 800a82c:	3b01      	subs	r3, #1
 800a82e:	60a3      	str	r3, [r4, #8]
 800a830:	6823      	ldr	r3, [r4, #0]
 800a832:	1c5a      	adds	r2, r3, #1
 800a834:	6022      	str	r2, [r4, #0]
 800a836:	701e      	strb	r6, [r3, #0]
 800a838:	6962      	ldr	r2, [r4, #20]
 800a83a:	1c43      	adds	r3, r0, #1
 800a83c:	429a      	cmp	r2, r3
 800a83e:	d004      	beq.n	800a84a <__swbuf_r+0x6e>
 800a840:	89a3      	ldrh	r3, [r4, #12]
 800a842:	07db      	lsls	r3, r3, #31
 800a844:	d5e1      	bpl.n	800a80a <__swbuf_r+0x2e>
 800a846:	2e0a      	cmp	r6, #10
 800a848:	d1df      	bne.n	800a80a <__swbuf_r+0x2e>
 800a84a:	4621      	mov	r1, r4
 800a84c:	4628      	mov	r0, r5
 800a84e:	f7ff fa2f 	bl	8009cb0 <_fflush_r>
 800a852:	2800      	cmp	r0, #0
 800a854:	d0d9      	beq.n	800a80a <__swbuf_r+0x2e>
 800a856:	e7d6      	b.n	800a806 <__swbuf_r+0x2a>

0800a858 <__swsetup_r>:
 800a858:	b538      	push	{r3, r4, r5, lr}
 800a85a:	4b29      	ldr	r3, [pc, #164]	@ (800a900 <__swsetup_r+0xa8>)
 800a85c:	4605      	mov	r5, r0
 800a85e:	6818      	ldr	r0, [r3, #0]
 800a860:	460c      	mov	r4, r1
 800a862:	b118      	cbz	r0, 800a86c <__swsetup_r+0x14>
 800a864:	6a03      	ldr	r3, [r0, #32]
 800a866:	b90b      	cbnz	r3, 800a86c <__swsetup_r+0x14>
 800a868:	f7fc fd66 	bl	8007338 <__sinit>
 800a86c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a870:	0719      	lsls	r1, r3, #28
 800a872:	d422      	bmi.n	800a8ba <__swsetup_r+0x62>
 800a874:	06da      	lsls	r2, r3, #27
 800a876:	d407      	bmi.n	800a888 <__swsetup_r+0x30>
 800a878:	2209      	movs	r2, #9
 800a87a:	602a      	str	r2, [r5, #0]
 800a87c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a880:	81a3      	strh	r3, [r4, #12]
 800a882:	f04f 30ff 	mov.w	r0, #4294967295
 800a886:	e033      	b.n	800a8f0 <__swsetup_r+0x98>
 800a888:	0758      	lsls	r0, r3, #29
 800a88a:	d512      	bpl.n	800a8b2 <__swsetup_r+0x5a>
 800a88c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a88e:	b141      	cbz	r1, 800a8a2 <__swsetup_r+0x4a>
 800a890:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a894:	4299      	cmp	r1, r3
 800a896:	d002      	beq.n	800a89e <__swsetup_r+0x46>
 800a898:	4628      	mov	r0, r5
 800a89a:	f7fd fc4b 	bl	8008134 <_free_r>
 800a89e:	2300      	movs	r3, #0
 800a8a0:	6363      	str	r3, [r4, #52]	@ 0x34
 800a8a2:	89a3      	ldrh	r3, [r4, #12]
 800a8a4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a8a8:	81a3      	strh	r3, [r4, #12]
 800a8aa:	2300      	movs	r3, #0
 800a8ac:	6063      	str	r3, [r4, #4]
 800a8ae:	6923      	ldr	r3, [r4, #16]
 800a8b0:	6023      	str	r3, [r4, #0]
 800a8b2:	89a3      	ldrh	r3, [r4, #12]
 800a8b4:	f043 0308 	orr.w	r3, r3, #8
 800a8b8:	81a3      	strh	r3, [r4, #12]
 800a8ba:	6923      	ldr	r3, [r4, #16]
 800a8bc:	b94b      	cbnz	r3, 800a8d2 <__swsetup_r+0x7a>
 800a8be:	89a3      	ldrh	r3, [r4, #12]
 800a8c0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a8c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8c8:	d003      	beq.n	800a8d2 <__swsetup_r+0x7a>
 800a8ca:	4621      	mov	r1, r4
 800a8cc:	4628      	mov	r0, r5
 800a8ce:	f000 f883 	bl	800a9d8 <__smakebuf_r>
 800a8d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a8d6:	f013 0201 	ands.w	r2, r3, #1
 800a8da:	d00a      	beq.n	800a8f2 <__swsetup_r+0x9a>
 800a8dc:	2200      	movs	r2, #0
 800a8de:	60a2      	str	r2, [r4, #8]
 800a8e0:	6962      	ldr	r2, [r4, #20]
 800a8e2:	4252      	negs	r2, r2
 800a8e4:	61a2      	str	r2, [r4, #24]
 800a8e6:	6922      	ldr	r2, [r4, #16]
 800a8e8:	b942      	cbnz	r2, 800a8fc <__swsetup_r+0xa4>
 800a8ea:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a8ee:	d1c5      	bne.n	800a87c <__swsetup_r+0x24>
 800a8f0:	bd38      	pop	{r3, r4, r5, pc}
 800a8f2:	0799      	lsls	r1, r3, #30
 800a8f4:	bf58      	it	pl
 800a8f6:	6962      	ldrpl	r2, [r4, #20]
 800a8f8:	60a2      	str	r2, [r4, #8]
 800a8fa:	e7f4      	b.n	800a8e6 <__swsetup_r+0x8e>
 800a8fc:	2000      	movs	r0, #0
 800a8fe:	e7f7      	b.n	800a8f0 <__swsetup_r+0x98>
 800a900:	24000038 	.word	0x24000038

0800a904 <_raise_r>:
 800a904:	291f      	cmp	r1, #31
 800a906:	b538      	push	{r3, r4, r5, lr}
 800a908:	4605      	mov	r5, r0
 800a90a:	460c      	mov	r4, r1
 800a90c:	d904      	bls.n	800a918 <_raise_r+0x14>
 800a90e:	2316      	movs	r3, #22
 800a910:	6003      	str	r3, [r0, #0]
 800a912:	f04f 30ff 	mov.w	r0, #4294967295
 800a916:	bd38      	pop	{r3, r4, r5, pc}
 800a918:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a91a:	b112      	cbz	r2, 800a922 <_raise_r+0x1e>
 800a91c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a920:	b94b      	cbnz	r3, 800a936 <_raise_r+0x32>
 800a922:	4628      	mov	r0, r5
 800a924:	f000 f830 	bl	800a988 <_getpid_r>
 800a928:	4622      	mov	r2, r4
 800a92a:	4601      	mov	r1, r0
 800a92c:	4628      	mov	r0, r5
 800a92e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a932:	f000 b817 	b.w	800a964 <_kill_r>
 800a936:	2b01      	cmp	r3, #1
 800a938:	d00a      	beq.n	800a950 <_raise_r+0x4c>
 800a93a:	1c59      	adds	r1, r3, #1
 800a93c:	d103      	bne.n	800a946 <_raise_r+0x42>
 800a93e:	2316      	movs	r3, #22
 800a940:	6003      	str	r3, [r0, #0]
 800a942:	2001      	movs	r0, #1
 800a944:	e7e7      	b.n	800a916 <_raise_r+0x12>
 800a946:	2100      	movs	r1, #0
 800a948:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a94c:	4620      	mov	r0, r4
 800a94e:	4798      	blx	r3
 800a950:	2000      	movs	r0, #0
 800a952:	e7e0      	b.n	800a916 <_raise_r+0x12>

0800a954 <raise>:
 800a954:	4b02      	ldr	r3, [pc, #8]	@ (800a960 <raise+0xc>)
 800a956:	4601      	mov	r1, r0
 800a958:	6818      	ldr	r0, [r3, #0]
 800a95a:	f7ff bfd3 	b.w	800a904 <_raise_r>
 800a95e:	bf00      	nop
 800a960:	24000038 	.word	0x24000038

0800a964 <_kill_r>:
 800a964:	b538      	push	{r3, r4, r5, lr}
 800a966:	4d07      	ldr	r5, [pc, #28]	@ (800a984 <_kill_r+0x20>)
 800a968:	2300      	movs	r3, #0
 800a96a:	4604      	mov	r4, r0
 800a96c:	4608      	mov	r0, r1
 800a96e:	4611      	mov	r1, r2
 800a970:	602b      	str	r3, [r5, #0]
 800a972:	f7f6 fd99 	bl	80014a8 <_kill>
 800a976:	1c43      	adds	r3, r0, #1
 800a978:	d102      	bne.n	800a980 <_kill_r+0x1c>
 800a97a:	682b      	ldr	r3, [r5, #0]
 800a97c:	b103      	cbz	r3, 800a980 <_kill_r+0x1c>
 800a97e:	6023      	str	r3, [r4, #0]
 800a980:	bd38      	pop	{r3, r4, r5, pc}
 800a982:	bf00      	nop
 800a984:	24000580 	.word	0x24000580

0800a988 <_getpid_r>:
 800a988:	f7f6 bd86 	b.w	8001498 <_getpid>

0800a98c <__swhatbuf_r>:
 800a98c:	b570      	push	{r4, r5, r6, lr}
 800a98e:	460c      	mov	r4, r1
 800a990:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a994:	2900      	cmp	r1, #0
 800a996:	b096      	sub	sp, #88	@ 0x58
 800a998:	4615      	mov	r5, r2
 800a99a:	461e      	mov	r6, r3
 800a99c:	da0d      	bge.n	800a9ba <__swhatbuf_r+0x2e>
 800a99e:	89a3      	ldrh	r3, [r4, #12]
 800a9a0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a9a4:	f04f 0100 	mov.w	r1, #0
 800a9a8:	bf14      	ite	ne
 800a9aa:	2340      	movne	r3, #64	@ 0x40
 800a9ac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	6031      	str	r1, [r6, #0]
 800a9b4:	602b      	str	r3, [r5, #0]
 800a9b6:	b016      	add	sp, #88	@ 0x58
 800a9b8:	bd70      	pop	{r4, r5, r6, pc}
 800a9ba:	466a      	mov	r2, sp
 800a9bc:	f000 f848 	bl	800aa50 <_fstat_r>
 800a9c0:	2800      	cmp	r0, #0
 800a9c2:	dbec      	blt.n	800a99e <__swhatbuf_r+0x12>
 800a9c4:	9901      	ldr	r1, [sp, #4]
 800a9c6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a9ca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a9ce:	4259      	negs	r1, r3
 800a9d0:	4159      	adcs	r1, r3
 800a9d2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a9d6:	e7eb      	b.n	800a9b0 <__swhatbuf_r+0x24>

0800a9d8 <__smakebuf_r>:
 800a9d8:	898b      	ldrh	r3, [r1, #12]
 800a9da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9dc:	079d      	lsls	r5, r3, #30
 800a9de:	4606      	mov	r6, r0
 800a9e0:	460c      	mov	r4, r1
 800a9e2:	d507      	bpl.n	800a9f4 <__smakebuf_r+0x1c>
 800a9e4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a9e8:	6023      	str	r3, [r4, #0]
 800a9ea:	6123      	str	r3, [r4, #16]
 800a9ec:	2301      	movs	r3, #1
 800a9ee:	6163      	str	r3, [r4, #20]
 800a9f0:	b003      	add	sp, #12
 800a9f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9f4:	ab01      	add	r3, sp, #4
 800a9f6:	466a      	mov	r2, sp
 800a9f8:	f7ff ffc8 	bl	800a98c <__swhatbuf_r>
 800a9fc:	9f00      	ldr	r7, [sp, #0]
 800a9fe:	4605      	mov	r5, r0
 800aa00:	4639      	mov	r1, r7
 800aa02:	4630      	mov	r0, r6
 800aa04:	f7fd fc0a 	bl	800821c <_malloc_r>
 800aa08:	b948      	cbnz	r0, 800aa1e <__smakebuf_r+0x46>
 800aa0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa0e:	059a      	lsls	r2, r3, #22
 800aa10:	d4ee      	bmi.n	800a9f0 <__smakebuf_r+0x18>
 800aa12:	f023 0303 	bic.w	r3, r3, #3
 800aa16:	f043 0302 	orr.w	r3, r3, #2
 800aa1a:	81a3      	strh	r3, [r4, #12]
 800aa1c:	e7e2      	b.n	800a9e4 <__smakebuf_r+0xc>
 800aa1e:	89a3      	ldrh	r3, [r4, #12]
 800aa20:	6020      	str	r0, [r4, #0]
 800aa22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800aa26:	81a3      	strh	r3, [r4, #12]
 800aa28:	9b01      	ldr	r3, [sp, #4]
 800aa2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800aa2e:	b15b      	cbz	r3, 800aa48 <__smakebuf_r+0x70>
 800aa30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa34:	4630      	mov	r0, r6
 800aa36:	f000 f81d 	bl	800aa74 <_isatty_r>
 800aa3a:	b128      	cbz	r0, 800aa48 <__smakebuf_r+0x70>
 800aa3c:	89a3      	ldrh	r3, [r4, #12]
 800aa3e:	f023 0303 	bic.w	r3, r3, #3
 800aa42:	f043 0301 	orr.w	r3, r3, #1
 800aa46:	81a3      	strh	r3, [r4, #12]
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	431d      	orrs	r5, r3
 800aa4c:	81a5      	strh	r5, [r4, #12]
 800aa4e:	e7cf      	b.n	800a9f0 <__smakebuf_r+0x18>

0800aa50 <_fstat_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d07      	ldr	r5, [pc, #28]	@ (800aa70 <_fstat_r+0x20>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	4611      	mov	r1, r2
 800aa5c:	602b      	str	r3, [r5, #0]
 800aa5e:	f7f6 fd83 	bl	8001568 <_fstat>
 800aa62:	1c43      	adds	r3, r0, #1
 800aa64:	d102      	bne.n	800aa6c <_fstat_r+0x1c>
 800aa66:	682b      	ldr	r3, [r5, #0]
 800aa68:	b103      	cbz	r3, 800aa6c <_fstat_r+0x1c>
 800aa6a:	6023      	str	r3, [r4, #0]
 800aa6c:	bd38      	pop	{r3, r4, r5, pc}
 800aa6e:	bf00      	nop
 800aa70:	24000580 	.word	0x24000580

0800aa74 <_isatty_r>:
 800aa74:	b538      	push	{r3, r4, r5, lr}
 800aa76:	4d06      	ldr	r5, [pc, #24]	@ (800aa90 <_isatty_r+0x1c>)
 800aa78:	2300      	movs	r3, #0
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	4608      	mov	r0, r1
 800aa7e:	602b      	str	r3, [r5, #0]
 800aa80:	f7f6 fd82 	bl	8001588 <_isatty>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_isatty_r+0x1a>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_isatty_r+0x1a>
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	24000580 	.word	0x24000580

0800aa94 <_init>:
 800aa94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa96:	bf00      	nop
 800aa98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa9a:	bc08      	pop	{r3}
 800aa9c:	469e      	mov	lr, r3
 800aa9e:	4770      	bx	lr

0800aaa0 <_fini>:
 800aaa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaa2:	bf00      	nop
 800aaa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaa6:	bc08      	pop	{r3}
 800aaa8:	469e      	mov	lr, r3
 800aaaa:	4770      	bx	lr
