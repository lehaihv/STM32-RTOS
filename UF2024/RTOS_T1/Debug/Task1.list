
Task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006350  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  080064e0  080064e0  000074e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065c8  080065c8  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080065c8  080065c8  000075c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065d0  080065d0  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065d0  080065d0  000075d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080065d4  080065d4  000075d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080065d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001bdc  20000068  08006640  00008068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c44  08006640  00008c44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ada9  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003605  00000000  00000000  00022e41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001668  00000000  00000000  00026448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001171  00000000  00000000  00027ab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000330e  00000000  00000000  00028c21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b00  00000000  00000000  0002bf2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fc80d  00000000  00000000  00043a2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014023c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000061b4  00000000  00000000  00140280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00146434  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080064c8 	.word	0x080064c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080064c8 	.word	0x080064c8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000504:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000508:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 800050c:	f003 0301 	and.w	r3, r3, #1
 8000510:	2b00      	cmp	r3, #0
 8000512:	d013      	beq.n	800053c <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000514:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000518:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 800051c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000520:	2b00      	cmp	r3, #0
 8000522:	d00b      	beq.n	800053c <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000524:	e000      	b.n	8000528 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000526:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000528:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b00      	cmp	r3, #0
 8000530:	d0f9      	beq.n	8000526 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8000532:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000536:	687a      	ldr	r2, [r7, #4]
 8000538:	b2d2      	uxtb	r2, r2
 800053a:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 800053c:	687b      	ldr	r3, [r7, #4]
}
 800053e:	4618      	mov	r0, r3
 8000540:	370c      	adds	r7, #12
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
	...

0800054c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000550:	f000 fabc 	bl	8000acc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000554:	f000 f82e 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000558:	f000 f8ae 	bl	80006b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800055c:	f000 f87c 	bl	8000658 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000560:	f003 f916 	bl	8003790 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, (void*) msg1, &Task1_attributes);
 8000564:	4b0b      	ldr	r3, [pc, #44]	@ (8000594 <main+0x48>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a0b      	ldr	r2, [pc, #44]	@ (8000598 <main+0x4c>)
 800056a:	4619      	mov	r1, r3
 800056c:	480b      	ldr	r0, [pc, #44]	@ (800059c <main+0x50>)
 800056e:	f003 f959 	bl	8003824 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0a      	ldr	r2, [pc, #40]	@ (80005a0 <main+0x54>)
 8000576:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, (void*) msg2, &Task2_attributes);
 8000578:	4b0a      	ldr	r3, [pc, #40]	@ (80005a4 <main+0x58>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a0a      	ldr	r2, [pc, #40]	@ (80005a8 <main+0x5c>)
 800057e:	4619      	mov	r1, r3
 8000580:	480a      	ldr	r0, [pc, #40]	@ (80005ac <main+0x60>)
 8000582:	f003 f94f 	bl	8003824 <osThreadNew>
 8000586:	4603      	mov	r3, r0
 8000588:	4a09      	ldr	r2, [pc, #36]	@ (80005b0 <main+0x64>)
 800058a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800058c:	f003 f924 	bl	80037d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000590:	bf00      	nop
 8000592:	e7fd      	b.n	8000590 <main+0x44>
 8000594:	20000000 	.word	0x20000000
 8000598:	08006538 	.word	0x08006538
 800059c:	080007a5 	.word	0x080007a5
 80005a0:	2000010c 	.word	0x2000010c
 80005a4:	20000004 	.word	0x20000004
 80005a8:	0800655c 	.word	0x0800655c
 80005ac:	080007c1 	.word	0x080007c1
 80005b0:	20000110 	.word	0x20000110

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b096      	sub	sp, #88	@ 0x58
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0314 	add.w	r3, r7, #20
 80005be:	2244      	movs	r2, #68	@ 0x44
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f005 fe90 	bl	80062e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	463b      	mov	r3, r7
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005d6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80005da:	f000 fd69 	bl	80010b0 <HAL_PWREx_ControlVoltageScaling>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005e4:	f000 f90c 	bl	8000800 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80005f0:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f2:	2310      	movs	r3, #16
 80005f4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f6:	2302      	movs	r3, #2
 80005f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005fa:	2302      	movs	r3, #2
 80005fc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80005fe:	2301      	movs	r3, #1
 8000600:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000602:	230a      	movs	r3, #10
 8000604:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000606:	2307      	movs	r3, #7
 8000608:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800060a:	2302      	movs	r3, #2
 800060c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800060e:	2302      	movs	r3, #2
 8000610:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000612:	f107 0314 	add.w	r3, r7, #20
 8000616:	4618      	mov	r0, r3
 8000618:	f000 fda0 	bl	800115c <HAL_RCC_OscConfig>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000622:	f000 f8ed 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000626:	230f      	movs	r3, #15
 8000628:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2303      	movs	r3, #3
 800062c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000632:	2300      	movs	r3, #0
 8000634:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000636:	2300      	movs	r3, #0
 8000638:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	2104      	movs	r1, #4
 800063e:	4618      	mov	r0, r3
 8000640:	f001 f968 	bl	8001914 <HAL_RCC_ClockConfig>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800064a:	f000 f8d9 	bl	8000800 <Error_Handler>
  }
}
 800064e:	bf00      	nop
 8000650:	3758      	adds	r7, #88	@ 0x58
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
	...

08000658 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800065c:	4b14      	ldr	r3, [pc, #80]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800065e:	4a15      	ldr	r2, [pc, #84]	@ (80006b4 <MX_USART2_UART_Init+0x5c>)
 8000660:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000662:	4b13      	ldr	r3, [pc, #76]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000664:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000668:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800066a:	4b11      	ldr	r3, [pc, #68]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000670:	4b0f      	ldr	r3, [pc, #60]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000672:	2200      	movs	r2, #0
 8000674:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000676:	4b0e      	ldr	r3, [pc, #56]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800067c:	4b0c      	ldr	r3, [pc, #48]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800067e:	220c      	movs	r2, #12
 8000680:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000682:	4b0b      	ldr	r3, [pc, #44]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000684:	2200      	movs	r2, #0
 8000686:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000688:	4b09      	ldr	r3, [pc, #36]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800068a:	2200      	movs	r2, #0
 800068c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800068e:	4b08      	ldr	r3, [pc, #32]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000690:	2200      	movs	r2, #0
 8000692:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000694:	4b06      	ldr	r3, [pc, #24]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 8000696:	2200      	movs	r2, #0
 8000698:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800069a:	4805      	ldr	r0, [pc, #20]	@ (80006b0 <MX_USART2_UART_Init+0x58>)
 800069c:	f002 fb12 	bl	8002cc4 <HAL_UART_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006a6:	f000 f8ab 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006aa:	bf00      	nop
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	20000084 	.word	0x20000084
 80006b4:	40004400 	.word	0x40004400

080006b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b08a      	sub	sp, #40	@ 0x28
 80006bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	f107 0314 	add.w	r3, r7, #20
 80006c2:	2200      	movs	r2, #0
 80006c4:	601a      	str	r2, [r3, #0]
 80006c6:	605a      	str	r2, [r3, #4]
 80006c8:	609a      	str	r2, [r3, #8]
 80006ca:	60da      	str	r2, [r3, #12]
 80006cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ce:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <MX_GPIO_Init+0xc4>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	4a2a      	ldr	r2, [pc, #168]	@ (800077c <MX_GPIO_Init+0xc4>)
 80006d4:	f043 0304 	orr.w	r3, r3, #4
 80006d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006da:	4b28      	ldr	r3, [pc, #160]	@ (800077c <MX_GPIO_Init+0xc4>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	f003 0304 	and.w	r3, r3, #4
 80006e2:	613b      	str	r3, [r7, #16]
 80006e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006e6:	4b25      	ldr	r3, [pc, #148]	@ (800077c <MX_GPIO_Init+0xc4>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	4a24      	ldr	r2, [pc, #144]	@ (800077c <MX_GPIO_Init+0xc4>)
 80006ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006f2:	4b22      	ldr	r3, [pc, #136]	@ (800077c <MX_GPIO_Init+0xc4>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006fa:	60fb      	str	r3, [r7, #12]
 80006fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b1f      	ldr	r3, [pc, #124]	@ (800077c <MX_GPIO_Init+0xc4>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	4a1e      	ldr	r2, [pc, #120]	@ (800077c <MX_GPIO_Init+0xc4>)
 8000704:	f043 0301 	orr.w	r3, r3, #1
 8000708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800070a:	4b1c      	ldr	r3, [pc, #112]	@ (800077c <MX_GPIO_Init+0xc4>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	f003 0301 	and.w	r3, r3, #1
 8000712:	60bb      	str	r3, [r7, #8]
 8000714:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	4b19      	ldr	r3, [pc, #100]	@ (800077c <MX_GPIO_Init+0xc4>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	4a18      	ldr	r2, [pc, #96]	@ (800077c <MX_GPIO_Init+0xc4>)
 800071c:	f043 0302 	orr.w	r3, r3, #2
 8000720:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000722:	4b16      	ldr	r3, [pc, #88]	@ (800077c <MX_GPIO_Init+0xc4>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	f003 0302 	and.w	r3, r3, #2
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2120      	movs	r1, #32
 8000732:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000736:	f000 fc95 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800073a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800073e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000740:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000744:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	4619      	mov	r1, r3
 8000750:	480b      	ldr	r0, [pc, #44]	@ (8000780 <MX_GPIO_Init+0xc8>)
 8000752:	f000 fadd 	bl	8000d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000756:	2320      	movs	r3, #32
 8000758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075a:	2301      	movs	r3, #1
 800075c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075e:	2300      	movs	r3, #0
 8000760:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000762:	2300      	movs	r3, #0
 8000764:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000766:	f107 0314 	add.w	r3, r7, #20
 800076a:	4619      	mov	r1, r3
 800076c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000770:	f000 face 	bl	8000d10 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000774:	bf00      	nop
 8000776:	3728      	adds	r7, #40	@ 0x28
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	48000800 	.word	0x48000800

08000784 <send_msg>:

/* USER CODE BEGIN 4 */
void send_msg(char msg)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
   ITM_SendChar(msg);
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	4618      	mov	r0, r3
 8000792:	f7ff feb3 	bl	80004fc <ITM_SendChar>
   ITM_SendChar('\n');
 8000796:	200a      	movs	r0, #10
 8000798:	f7ff feb0 	bl	80004fc <ITM_SendChar>
}
 800079c:	bf00      	nop
 800079e:	3708      	adds	r7, #8
 80007a0:	46bd      	mov	sp, r7
 80007a2:	bd80      	pop	{r7, pc}

080007a4 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	send_msg((char*) argument);
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff ffe7 	bl	8000784 <send_msg>
    osDelay(1);
 80007b6:	2001      	movs	r0, #1
 80007b8:	f003 f8c6 	bl	8003948 <osDelay>
	send_msg((char*) argument);
 80007bc:	bf00      	nop
 80007be:	e7f5      	b.n	80007ac <StartTask1+0x8>

080007c0 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  //char *buffer;
  /* Infinite loop */
  for(;;)
  {
	send_msg((char*) argument);
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff ffd9 	bl	8000784 <send_msg>
    osDelay(1);
 80007d2:	2001      	movs	r0, #1
 80007d4:	f003 f8b8 	bl	8003948 <osDelay>
	send_msg((char*) argument);
 80007d8:	bf00      	nop
 80007da:	e7f5      	b.n	80007c8 <StartTask2+0x8>

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	@ (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 f98d 	bl	8000b0c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40001000 	.word	0x40001000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	bf00      	nop
 800080a:	e7fd      	b.n	8000808 <Error_Handler+0x8>

0800080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000812:	4b11      	ldr	r3, [pc, #68]	@ (8000858 <HAL_MspInit+0x4c>)
 8000814:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000816:	4a10      	ldr	r2, [pc, #64]	@ (8000858 <HAL_MspInit+0x4c>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6613      	str	r3, [r2, #96]	@ 0x60
 800081e:	4b0e      	ldr	r3, [pc, #56]	@ (8000858 <HAL_MspInit+0x4c>)
 8000820:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800082a:	4b0b      	ldr	r3, [pc, #44]	@ (8000858 <HAL_MspInit+0x4c>)
 800082c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800082e:	4a0a      	ldr	r2, [pc, #40]	@ (8000858 <HAL_MspInit+0x4c>)
 8000830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000834:	6593      	str	r3, [r2, #88]	@ 0x58
 8000836:	4b08      	ldr	r3, [pc, #32]	@ (8000858 <HAL_MspInit+0x4c>)
 8000838:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800083a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800083e:	603b      	str	r3, [r7, #0]
 8000840:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000842:	2200      	movs	r2, #0
 8000844:	210f      	movs	r1, #15
 8000846:	f06f 0001 	mvn.w	r0, #1
 800084a:	f000 fa37 	bl	8000cbc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084e:	bf00      	nop
 8000850:	3708      	adds	r7, #8
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	bf00      	nop
 8000858:	40021000 	.word	0x40021000

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b0ac      	sub	sp, #176	@ 0xb0
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2288      	movs	r2, #136	@ 0x88
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f005 fd33 	bl	80062e8 <memset>
  if(huart->Instance==USART2)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a21      	ldr	r2, [pc, #132]	@ (800090c <HAL_UART_MspInit+0xb0>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d13b      	bne.n	8000904 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800088c:	2302      	movs	r3, #2
 800088e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000890:	2300      	movs	r3, #0
 8000892:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4618      	mov	r0, r3
 800089a:	f001 fa91 	bl	8001dc0 <HAL_RCCEx_PeriphCLKConfig>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80008a4:	f7ff ffac 	bl	8000800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008a8:	4b19      	ldr	r3, [pc, #100]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008ac:	4a18      	ldr	r2, [pc, #96]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008b2:	6593      	str	r3, [r2, #88]	@ 0x58
 80008b4:	4b16      	ldr	r3, [pc, #88]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80008b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80008bc:	613b      	str	r3, [r7, #16]
 80008be:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c0:	4b13      	ldr	r3, [pc, #76]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008c4:	4a12      	ldr	r2, [pc, #72]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008c6:	f043 0301 	orr.w	r3, r3, #1
 80008ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008cc:	4b10      	ldr	r3, [pc, #64]	@ (8000910 <HAL_UART_MspInit+0xb4>)
 80008ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80008d8:	230c      	movs	r3, #12
 80008da:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e4:	2300      	movs	r3, #0
 80008e6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ea:	2303      	movs	r3, #3
 80008ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f0:	2307      	movs	r3, #7
 80008f2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80008fa:	4619      	mov	r1, r3
 80008fc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000900:	f000 fa06 	bl	8000d10 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000904:	bf00      	nop
 8000906:	37b0      	adds	r7, #176	@ 0xb0
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40004400 	.word	0x40004400
 8000910:	40021000 	.word	0x40021000

08000914 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08e      	sub	sp, #56	@ 0x38
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800091c:	2300      	movs	r3, #0
 800091e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000922:	4b34      	ldr	r3, [pc, #208]	@ (80009f4 <HAL_InitTick+0xe0>)
 8000924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000926:	4a33      	ldr	r2, [pc, #204]	@ (80009f4 <HAL_InitTick+0xe0>)
 8000928:	f043 0310 	orr.w	r3, r3, #16
 800092c:	6593      	str	r3, [r2, #88]	@ 0x58
 800092e:	4b31      	ldr	r3, [pc, #196]	@ (80009f4 <HAL_InitTick+0xe0>)
 8000930:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000932:	f003 0310 	and.w	r3, r3, #16
 8000936:	60fb      	str	r3, [r7, #12]
 8000938:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800093a:	f107 0210 	add.w	r2, r7, #16
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f001 f9a9 	bl	8001c9c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800094a:	6a3b      	ldr	r3, [r7, #32]
 800094c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800094e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000950:	2b00      	cmp	r3, #0
 8000952:	d103      	bne.n	800095c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000954:	f001 f976 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8000958:	6378      	str	r0, [r7, #52]	@ 0x34
 800095a:	e004      	b.n	8000966 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800095c:	f001 f972 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8000960:	4603      	mov	r3, r0
 8000962:	005b      	lsls	r3, r3, #1
 8000964:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000968:	4a23      	ldr	r2, [pc, #140]	@ (80009f8 <HAL_InitTick+0xe4>)
 800096a:	fba2 2303 	umull	r2, r3, r2, r3
 800096e:	0c9b      	lsrs	r3, r3, #18
 8000970:	3b01      	subs	r3, #1
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000974:	4b21      	ldr	r3, [pc, #132]	@ (80009fc <HAL_InitTick+0xe8>)
 8000976:	4a22      	ldr	r2, [pc, #136]	@ (8000a00 <HAL_InitTick+0xec>)
 8000978:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800097a:	4b20      	ldr	r3, [pc, #128]	@ (80009fc <HAL_InitTick+0xe8>)
 800097c:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000980:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000982:	4a1e      	ldr	r2, [pc, #120]	@ (80009fc <HAL_InitTick+0xe8>)
 8000984:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000986:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000988:	4b1c      	ldr	r3, [pc, #112]	@ (80009fc <HAL_InitTick+0xe8>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098e:	4b1b      	ldr	r3, [pc, #108]	@ (80009fc <HAL_InitTick+0xe8>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000994:	4b19      	ldr	r3, [pc, #100]	@ (80009fc <HAL_InitTick+0xe8>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800099a:	4818      	ldr	r0, [pc, #96]	@ (80009fc <HAL_InitTick+0xe8>)
 800099c:	f001 fecc 	bl	8002738 <HAL_TIM_Base_Init>
 80009a0:	4603      	mov	r3, r0
 80009a2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80009a6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d11b      	bne.n	80009e6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009ae:	4813      	ldr	r0, [pc, #76]	@ (80009fc <HAL_InitTick+0xe8>)
 80009b0:	f001 ff24 	bl	80027fc <HAL_TIM_Base_Start_IT>
 80009b4:	4603      	mov	r3, r0
 80009b6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80009ba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d111      	bne.n	80009e6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009c2:	2036      	movs	r0, #54	@ 0x36
 80009c4:	f000 f996 	bl	8000cf4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009c8:	687b      	ldr	r3, [r7, #4]
 80009ca:	2b0f      	cmp	r3, #15
 80009cc:	d808      	bhi.n	80009e0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009ce:	2200      	movs	r2, #0
 80009d0:	6879      	ldr	r1, [r7, #4]
 80009d2:	2036      	movs	r0, #54	@ 0x36
 80009d4:	f000 f972 	bl	8000cbc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009d8:	4a0a      	ldr	r2, [pc, #40]	@ (8000a04 <HAL_InitTick+0xf0>)
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	6013      	str	r3, [r2, #0]
 80009de:	e002      	b.n	80009e6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009e0:	2301      	movs	r3, #1
 80009e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80009ea:	4618      	mov	r0, r3
 80009ec:	3738      	adds	r7, #56	@ 0x38
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000
 80009f8:	431bde83 	.word	0x431bde83
 80009fc:	20000114 	.word	0x20000114
 8000a00:	40001000 	.word	0x40001000
 8000a04:	2000000c 	.word	0x2000000c

08000a08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a0c:	bf00      	nop
 8000a0e:	e7fd      	b.n	8000a0c <NMI_Handler+0x4>

08000a10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <HardFault_Handler+0x4>

08000a18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <MemManage_Handler+0x4>

08000a20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <BusFault_Handler+0x4>

08000a28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <UsageFault_Handler+0x4>

08000a30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr
	...

08000a40 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a44:	4802      	ldr	r0, [pc, #8]	@ (8000a50 <TIM6_DAC_IRQHandler+0x10>)
 8000a46:	f001 ff49 	bl	80028dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	20000114 	.word	0x20000114

08000a54 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a58:	4b06      	ldr	r3, [pc, #24]	@ (8000a74 <SystemInit+0x20>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5e:	4a05      	ldr	r2, [pc, #20]	@ (8000a74 <SystemInit+0x20>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr
 8000a72:	bf00      	nop
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ab0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a7c:	f7ff ffea 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a80:	480c      	ldr	r0, [pc, #48]	@ (8000ab4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a82:	490d      	ldr	r1, [pc, #52]	@ (8000ab8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a84:	4a0d      	ldr	r2, [pc, #52]	@ (8000abc <LoopForever+0xe>)
  movs r3, #0
 8000a86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a88:	e002      	b.n	8000a90 <LoopCopyDataInit>

08000a8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a8e:	3304      	adds	r3, #4

08000a90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a94:	d3f9      	bcc.n	8000a8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a96:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a98:	4c0a      	ldr	r4, [pc, #40]	@ (8000ac4 <LoopForever+0x16>)
  movs r3, #0
 8000a9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a9c:	e001      	b.n	8000aa2 <LoopFillZerobss>

08000a9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000aa0:	3204      	adds	r2, #4

08000aa2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000aa2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000aa4:	d3fb      	bcc.n	8000a9e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000aa6:	f005 fc85 	bl	80063b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aaa:	f7ff fd4f 	bl	800054c <main>

08000aae <LoopForever>:

LoopForever:
    b LoopForever
 8000aae:	e7fe      	b.n	8000aae <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ab0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000ab4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ab8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000abc:	080065d8 	.word	0x080065d8
  ldr r2, =_sbss
 8000ac0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ac4:	20001c44 	.word	0x20001c44

08000ac8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000ac8:	e7fe      	b.n	8000ac8 <ADC1_2_IRQHandler>
	...

08000acc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8000b08 <HAL_Init+0x3c>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a0b      	ldr	r2, [pc, #44]	@ (8000b08 <HAL_Init+0x3c>)
 8000adc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000ae0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ae2:	2003      	movs	r0, #3
 8000ae4:	f000 f8df 	bl	8000ca6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ae8:	200f      	movs	r0, #15
 8000aea:	f7ff ff13 	bl	8000914 <HAL_InitTick>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000af4:	2301      	movs	r3, #1
 8000af6:	71fb      	strb	r3, [r7, #7]
 8000af8:	e001      	b.n	8000afe <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000afa:	f7ff fe87 	bl	800080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000afe:	79fb      	ldrb	r3, [r7, #7]
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40022000 	.word	0x40022000

08000b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b10:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <HAL_IncTick+0x20>)
 8000b12:	781b      	ldrb	r3, [r3, #0]
 8000b14:	461a      	mov	r2, r3
 8000b16:	4b06      	ldr	r3, [pc, #24]	@ (8000b30 <HAL_IncTick+0x24>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4a04      	ldr	r2, [pc, #16]	@ (8000b30 <HAL_IncTick+0x24>)
 8000b1e:	6013      	str	r3, [r2, #0]
}
 8000b20:	bf00      	nop
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr
 8000b2a:	bf00      	nop
 8000b2c:	20000010 	.word	0x20000010
 8000b30:	20000160 	.word	0x20000160

08000b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  return uwTick;
 8000b38:	4b03      	ldr	r3, [pc, #12]	@ (8000b48 <HAL_GetTick+0x14>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	20000160 	.word	0x20000160

08000b4c <__NVIC_SetPriorityGrouping>:
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	f003 0307 	and.w	r3, r3, #7
 8000b5a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b5e:	68db      	ldr	r3, [r3, #12]
 8000b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b62:	68ba      	ldr	r2, [r7, #8]
 8000b64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000b78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b7e:	4a04      	ldr	r2, [pc, #16]	@ (8000b90 <__NVIC_SetPriorityGrouping+0x44>)
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	60d3      	str	r3, [r2, #12]
}
 8000b84:	bf00      	nop
 8000b86:	3714      	adds	r7, #20
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	e000ed00 	.word	0xe000ed00

08000b94 <__NVIC_GetPriorityGrouping>:
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b98:	4b04      	ldr	r3, [pc, #16]	@ (8000bac <__NVIC_GetPriorityGrouping+0x18>)
 8000b9a:	68db      	ldr	r3, [r3, #12]
 8000b9c:	0a1b      	lsrs	r3, r3, #8
 8000b9e:	f003 0307 	and.w	r3, r3, #7
}
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <__NVIC_EnableIRQ>:
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	4603      	mov	r3, r0
 8000bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	db0b      	blt.n	8000bda <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bc2:	79fb      	ldrb	r3, [r7, #7]
 8000bc4:	f003 021f 	and.w	r2, r3, #31
 8000bc8:	4907      	ldr	r1, [pc, #28]	@ (8000be8 <__NVIC_EnableIRQ+0x38>)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	095b      	lsrs	r3, r3, #5
 8000bd0:	2001      	movs	r0, #1
 8000bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000bda:	bf00      	nop
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000e100 	.word	0xe000e100

08000bec <__NVIC_SetPriority>:
{
 8000bec:	b480      	push	{r7}
 8000bee:	b083      	sub	sp, #12
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	6039      	str	r1, [r7, #0]
 8000bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	db0a      	blt.n	8000c16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c00:	683b      	ldr	r3, [r7, #0]
 8000c02:	b2da      	uxtb	r2, r3
 8000c04:	490c      	ldr	r1, [pc, #48]	@ (8000c38 <__NVIC_SetPriority+0x4c>)
 8000c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c0a:	0112      	lsls	r2, r2, #4
 8000c0c:	b2d2      	uxtb	r2, r2
 8000c0e:	440b      	add	r3, r1
 8000c10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8000c14:	e00a      	b.n	8000c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4908      	ldr	r1, [pc, #32]	@ (8000c3c <__NVIC_SetPriority+0x50>)
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	f003 030f 	and.w	r3, r3, #15
 8000c22:	3b04      	subs	r3, #4
 8000c24:	0112      	lsls	r2, r2, #4
 8000c26:	b2d2      	uxtb	r2, r2
 8000c28:	440b      	add	r3, r1
 8000c2a:	761a      	strb	r2, [r3, #24]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr
 8000c38:	e000e100 	.word	0xe000e100
 8000c3c:	e000ed00 	.word	0xe000ed00

08000c40 <NVIC_EncodePriority>:
{
 8000c40:	b480      	push	{r7}
 8000c42:	b089      	sub	sp, #36	@ 0x24
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	60f8      	str	r0, [r7, #12]
 8000c48:	60b9      	str	r1, [r7, #8]
 8000c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	f003 0307 	and.w	r3, r3, #7
 8000c52:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	f1c3 0307 	rsb	r3, r3, #7
 8000c5a:	2b04      	cmp	r3, #4
 8000c5c:	bf28      	it	cs
 8000c5e:	2304      	movcs	r3, #4
 8000c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c62:	69fb      	ldr	r3, [r7, #28]
 8000c64:	3304      	adds	r3, #4
 8000c66:	2b06      	cmp	r3, #6
 8000c68:	d902      	bls.n	8000c70 <NVIC_EncodePriority+0x30>
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	3b03      	subs	r3, #3
 8000c6e:	e000      	b.n	8000c72 <NVIC_EncodePriority+0x32>
 8000c70:	2300      	movs	r3, #0
 8000c72:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000c78:	69bb      	ldr	r3, [r7, #24]
 8000c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	401a      	ands	r2, r3
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c88:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	43d9      	mvns	r1, r3
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c98:	4313      	orrs	r3, r2
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3724      	adds	r7, #36	@ 0x24
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca6:	b580      	push	{r7, lr}
 8000ca8:	b082      	sub	sp, #8
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cae:	6878      	ldr	r0, [r7, #4]
 8000cb0:	f7ff ff4c 	bl	8000b4c <__NVIC_SetPriorityGrouping>
}
 8000cb4:	bf00      	nop
 8000cb6:	3708      	adds	r7, #8
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
 8000cc8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cce:	f7ff ff61 	bl	8000b94 <__NVIC_GetPriorityGrouping>
 8000cd2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cd4:	687a      	ldr	r2, [r7, #4]
 8000cd6:	68b9      	ldr	r1, [r7, #8]
 8000cd8:	6978      	ldr	r0, [r7, #20]
 8000cda:	f7ff ffb1 	bl	8000c40 <NVIC_EncodePriority>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ce4:	4611      	mov	r1, r2
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f7ff ff80 	bl	8000bec <__NVIC_SetPriority>
}
 8000cec:	bf00      	nop
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d02:	4618      	mov	r0, r3
 8000d04:	f7ff ff54 	bl	8000bb0 <__NVIC_EnableIRQ>
}
 8000d08:	bf00      	nop
 8000d0a:	3708      	adds	r7, #8
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b087      	sub	sp, #28
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d1e:	e17f      	b.n	8001020 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d20:	683b      	ldr	r3, [r7, #0]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	2101      	movs	r1, #1
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 8171 	beq.w	800101a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	685b      	ldr	r3, [r3, #4]
 8000d3c:	f003 0303 	and.w	r3, r3, #3
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d005      	beq.n	8000d50 <HAL_GPIO_Init+0x40>
 8000d44:	683b      	ldr	r3, [r7, #0]
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	2b02      	cmp	r3, #2
 8000d4e:	d130      	bne.n	8000db2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	689b      	ldr	r3, [r3, #8]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	005b      	lsls	r3, r3, #1
 8000d5a:	2203      	movs	r2, #3
 8000d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d60:	43db      	mvns	r3, r3
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4013      	ands	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	68da      	ldr	r2, [r3, #12]
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	005b      	lsls	r3, r3, #1
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	693a      	ldr	r2, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	693a      	ldr	r2, [r7, #16]
 8000d7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000d86:	2201      	movs	r2, #1
 8000d88:	697b      	ldr	r3, [r7, #20]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4013      	ands	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	091b      	lsrs	r3, r3, #4
 8000d9c:	f003 0201 	and.w	r2, r3, #1
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	f003 0303 	and.w	r3, r3, #3
 8000dba:	2b03      	cmp	r3, #3
 8000dbc:	d118      	bne.n	8000df0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000dc2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	08db      	lsrs	r3, r3, #3
 8000dda:	f003 0201 	and.w	r2, r3, #1
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b03      	cmp	r3, #3
 8000dfa:	d017      	beq.n	8000e2c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	68db      	ldr	r3, [r3, #12]
 8000e00:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	2203      	movs	r2, #3
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	693a      	ldr	r2, [r7, #16]
 8000e10:	4013      	ands	r3, r2
 8000e12:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	689a      	ldr	r2, [r3, #8]
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	005b      	lsls	r3, r3, #1
 8000e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e20:	693a      	ldr	r2, [r7, #16]
 8000e22:	4313      	orrs	r3, r2
 8000e24:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2c:	683b      	ldr	r3, [r7, #0]
 8000e2e:	685b      	ldr	r3, [r3, #4]
 8000e30:	f003 0303 	and.w	r3, r3, #3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d123      	bne.n	8000e80 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	08da      	lsrs	r2, r3, #3
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	3208      	adds	r2, #8
 8000e40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e44:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	220f      	movs	r2, #15
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	691a      	ldr	r2, [r3, #16]
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	f003 0307 	and.w	r3, r3, #7
 8000e66:	009b      	lsls	r3, r3, #2
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e72:	697b      	ldr	r3, [r7, #20]
 8000e74:	08da      	lsrs	r2, r3, #3
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	3208      	adds	r2, #8
 8000e7a:	6939      	ldr	r1, [r7, #16]
 8000e7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	005b      	lsls	r3, r3, #1
 8000e8a:	2203      	movs	r2, #3
 8000e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e90:	43db      	mvns	r3, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4013      	ands	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e98:	683b      	ldr	r3, [r7, #0]
 8000e9a:	685b      	ldr	r3, [r3, #4]
 8000e9c:	f003 0203 	and.w	r2, r3, #3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	f000 80ac 	beq.w	800101a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec2:	4b5f      	ldr	r3, [pc, #380]	@ (8001040 <HAL_GPIO_Init+0x330>)
 8000ec4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ec6:	4a5e      	ldr	r2, [pc, #376]	@ (8001040 <HAL_GPIO_Init+0x330>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ece:	4b5c      	ldr	r3, [pc, #368]	@ (8001040 <HAL_GPIO_Init+0x330>)
 8000ed0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000eda:	4a5a      	ldr	r2, [pc, #360]	@ (8001044 <HAL_GPIO_Init+0x334>)
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	089b      	lsrs	r3, r3, #2
 8000ee0:	3302      	adds	r3, #2
 8000ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ee6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	f003 0303 	and.w	r3, r3, #3
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	220f      	movs	r2, #15
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000f04:	d025      	beq.n	8000f52 <HAL_GPIO_Init+0x242>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a4f      	ldr	r2, [pc, #316]	@ (8001048 <HAL_GPIO_Init+0x338>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d01f      	beq.n	8000f4e <HAL_GPIO_Init+0x23e>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a4e      	ldr	r2, [pc, #312]	@ (800104c <HAL_GPIO_Init+0x33c>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d019      	beq.n	8000f4a <HAL_GPIO_Init+0x23a>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a4d      	ldr	r2, [pc, #308]	@ (8001050 <HAL_GPIO_Init+0x340>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d013      	beq.n	8000f46 <HAL_GPIO_Init+0x236>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a4c      	ldr	r2, [pc, #304]	@ (8001054 <HAL_GPIO_Init+0x344>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d00d      	beq.n	8000f42 <HAL_GPIO_Init+0x232>
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	4a4b      	ldr	r2, [pc, #300]	@ (8001058 <HAL_GPIO_Init+0x348>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d007      	beq.n	8000f3e <HAL_GPIO_Init+0x22e>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a4a      	ldr	r2, [pc, #296]	@ (800105c <HAL_GPIO_Init+0x34c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_GPIO_Init+0x22a>
 8000f36:	2306      	movs	r3, #6
 8000f38:	e00c      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f3a:	2307      	movs	r3, #7
 8000f3c:	e00a      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f3e:	2305      	movs	r3, #5
 8000f40:	e008      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f42:	2304      	movs	r3, #4
 8000f44:	e006      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f46:	2303      	movs	r3, #3
 8000f48:	e004      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f4a:	2302      	movs	r3, #2
 8000f4c:	e002      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f4e:	2301      	movs	r3, #1
 8000f50:	e000      	b.n	8000f54 <HAL_GPIO_Init+0x244>
 8000f52:	2300      	movs	r3, #0
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	f002 0203 	and.w	r2, r2, #3
 8000f5a:	0092      	lsls	r2, r2, #2
 8000f5c:	4093      	lsls	r3, r2
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f64:	4937      	ldr	r1, [pc, #220]	@ (8001044 <HAL_GPIO_Init+0x334>)
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	3302      	adds	r3, #2
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f72:	4b3b      	ldr	r3, [pc, #236]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d003      	beq.n	8000f96 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f96:	4a32      	ldr	r2, [pc, #200]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000f98:	693b      	ldr	r3, [r7, #16]
 8000f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f9c:	4b30      	ldr	r3, [pc, #192]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	43db      	mvns	r3, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4013      	ands	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	685b      	ldr	r3, [r3, #4]
 8000fb0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d003      	beq.n	8000fc0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000fb8:	693a      	ldr	r2, [r7, #16]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fc0:	4a27      	ldr	r2, [pc, #156]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000fc2:	693b      	ldr	r3, [r7, #16]
 8000fc4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fc6:	4b26      	ldr	r3, [pc, #152]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	43db      	mvns	r3, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d003      	beq.n	8000fea <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fea:	4a1d      	ldr	r2, [pc, #116]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000fec:	693b      	ldr	r3, [r7, #16]
 8000fee:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	43db      	mvns	r3, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001000:	683b      	ldr	r3, [r7, #0]
 8001002:	685b      	ldr	r3, [r3, #4]
 8001004:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001008:	2b00      	cmp	r3, #0
 800100a:	d003      	beq.n	8001014 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	4313      	orrs	r3, r2
 8001012:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001014:	4a12      	ldr	r2, [pc, #72]	@ (8001060 <HAL_GPIO_Init+0x350>)
 8001016:	693b      	ldr	r3, [r7, #16]
 8001018:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	3301      	adds	r3, #1
 800101e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	681a      	ldr	r2, [r3, #0]
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa22 f303 	lsr.w	r3, r2, r3
 800102a:	2b00      	cmp	r3, #0
 800102c:	f47f ae78 	bne.w	8000d20 <HAL_GPIO_Init+0x10>
  }
}
 8001030:	bf00      	nop
 8001032:	bf00      	nop
 8001034:	371c      	adds	r7, #28
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop
 8001040:	40021000 	.word	0x40021000
 8001044:	40010000 	.word	0x40010000
 8001048:	48000400 	.word	0x48000400
 800104c:	48000800 	.word	0x48000800
 8001050:	48000c00 	.word	0x48000c00
 8001054:	48001000 	.word	0x48001000
 8001058:	48001400 	.word	0x48001400
 800105c:	48001800 	.word	0x48001800
 8001060:	40010400 	.word	0x40010400

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	460b      	mov	r3, r1
 800106e:	807b      	strh	r3, [r7, #2]
 8001070:	4613      	mov	r3, r2
 8001072:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001074:	787b      	ldrb	r3, [r7, #1]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d003      	beq.n	8001082 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001080:	e002      	b.n	8001088 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001088:	bf00      	nop
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001098:	4b04      	ldr	r3, [pc, #16]	@ (80010ac <HAL_PWREx_GetVoltageRange+0x18>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	40007000 	.word	0x40007000

080010b0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010be:	d130      	bne.n	8001122 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010c0:	4b23      	ldr	r3, [pc, #140]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80010c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80010cc:	d038      	beq.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010ce:	4b20      	ldr	r3, [pc, #128]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80010d6:	4a1e      	ldr	r2, [pc, #120]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010dc:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010de:	4b1d      	ldr	r3, [pc, #116]	@ (8001154 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	2232      	movs	r2, #50	@ 0x32
 80010e4:	fb02 f303 	mul.w	r3, r2, r3
 80010e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001158 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010ea:	fba2 2303 	umull	r2, r3, r2, r3
 80010ee:	0c9b      	lsrs	r3, r3, #18
 80010f0:	3301      	adds	r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010f4:	e002      	b.n	80010fc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80010fc:	4b14      	ldr	r3, [pc, #80]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010fe:	695b      	ldr	r3, [r3, #20]
 8001100:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001104:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001108:	d102      	bne.n	8001110 <HAL_PWREx_ControlVoltageScaling+0x60>
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d1f2      	bne.n	80010f6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001110:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001118:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800111c:	d110      	bne.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800111e:	2303      	movs	r3, #3
 8001120:	e00f      	b.n	8001142 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001122:	4b0b      	ldr	r3, [pc, #44]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800112a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800112e:	d007      	beq.n	8001140 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001130:	4b07      	ldr	r3, [pc, #28]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001138:	4a05      	ldr	r2, [pc, #20]	@ (8001150 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800113a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800113e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	3714      	adds	r7, #20
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40007000 	.word	0x40007000
 8001154:	20000008 	.word	0x20000008
 8001158:	431bde83 	.word	0x431bde83

0800115c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b088      	sub	sp, #32
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e3ca      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800116e:	4b97      	ldr	r3, [pc, #604]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 030c 	and.w	r3, r3, #12
 8001176:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001178:	4b94      	ldr	r3, [pc, #592]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800117a:	68db      	ldr	r3, [r3, #12]
 800117c:	f003 0303 	and.w	r3, r3, #3
 8001180:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f003 0310 	and.w	r3, r3, #16
 800118a:	2b00      	cmp	r3, #0
 800118c:	f000 80e4 	beq.w	8001358 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001190:	69bb      	ldr	r3, [r7, #24]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d007      	beq.n	80011a6 <HAL_RCC_OscConfig+0x4a>
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2b0c      	cmp	r3, #12
 800119a:	f040 808b 	bne.w	80012b4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800119e:	697b      	ldr	r3, [r7, #20]
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	f040 8087 	bne.w	80012b4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011a6:	4b89      	ldr	r3, [pc, #548]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x62>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	699b      	ldr	r3, [r3, #24]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d101      	bne.n	80011be <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e3a2      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a1a      	ldr	r2, [r3, #32]
 80011c2:	4b82      	ldr	r3, [pc, #520]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f003 0308 	and.w	r3, r3, #8
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d004      	beq.n	80011d8 <HAL_RCC_OscConfig+0x7c>
 80011ce:	4b7f      	ldr	r3, [pc, #508]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011d6:	e005      	b.n	80011e4 <HAL_RCC_OscConfig+0x88>
 80011d8:	4b7c      	ldr	r3, [pc, #496]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80011da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80011de:	091b      	lsrs	r3, r3, #4
 80011e0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80011e4:	4293      	cmp	r3, r2
 80011e6:	d223      	bcs.n	8001230 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6a1b      	ldr	r3, [r3, #32]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fd87 	bl	8001d00 <RCC_SetFlashLatencyFromMSIRange>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80011f8:	2301      	movs	r3, #1
 80011fa:	e383      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011fc:	4b73      	ldr	r3, [pc, #460]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a72      	ldr	r2, [pc, #456]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001202:	f043 0308 	orr.w	r3, r3, #8
 8001206:	6013      	str	r3, [r2, #0]
 8001208:	4b70      	ldr	r3, [pc, #448]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	496d      	ldr	r1, [pc, #436]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001216:	4313      	orrs	r3, r2
 8001218:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800121a:	4b6c      	ldr	r3, [pc, #432]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800121c:	685b      	ldr	r3, [r3, #4]
 800121e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	69db      	ldr	r3, [r3, #28]
 8001226:	021b      	lsls	r3, r3, #8
 8001228:	4968      	ldr	r1, [pc, #416]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800122a:	4313      	orrs	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
 800122e:	e025      	b.n	800127c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001230:	4b66      	ldr	r3, [pc, #408]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a65      	ldr	r2, [pc, #404]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001236:	f043 0308 	orr.w	r3, r3, #8
 800123a:	6013      	str	r3, [r2, #0]
 800123c:	4b63      	ldr	r3, [pc, #396]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6a1b      	ldr	r3, [r3, #32]
 8001248:	4960      	ldr	r1, [pc, #384]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800124a:	4313      	orrs	r3, r2
 800124c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800124e:	4b5f      	ldr	r3, [pc, #380]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	021b      	lsls	r3, r3, #8
 800125c:	495b      	ldr	r1, [pc, #364]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800125e:	4313      	orrs	r3, r2
 8001260:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001262:	69bb      	ldr	r3, [r7, #24]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d109      	bne.n	800127c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6a1b      	ldr	r3, [r3, #32]
 800126c:	4618      	mov	r0, r3
 800126e:	f000 fd47 	bl	8001d00 <RCC_SetFlashLatencyFromMSIRange>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	e343      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800127c:	f000 fc4a 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001280:	4602      	mov	r2, r0
 8001282:	4b52      	ldr	r3, [pc, #328]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	091b      	lsrs	r3, r3, #4
 8001288:	f003 030f 	and.w	r3, r3, #15
 800128c:	4950      	ldr	r1, [pc, #320]	@ (80013d0 <HAL_RCC_OscConfig+0x274>)
 800128e:	5ccb      	ldrb	r3, [r1, r3]
 8001290:	f003 031f 	and.w	r3, r3, #31
 8001294:	fa22 f303 	lsr.w	r3, r2, r3
 8001298:	4a4e      	ldr	r2, [pc, #312]	@ (80013d4 <HAL_RCC_OscConfig+0x278>)
 800129a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800129c:	4b4e      	ldr	r3, [pc, #312]	@ (80013d8 <HAL_RCC_OscConfig+0x27c>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4618      	mov	r0, r3
 80012a2:	f7ff fb37 	bl	8000914 <HAL_InitTick>
 80012a6:	4603      	mov	r3, r0
 80012a8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012aa:	7bfb      	ldrb	r3, [r7, #15]
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d052      	beq.n	8001356 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80012b0:	7bfb      	ldrb	r3, [r7, #15]
 80012b2:	e327      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	699b      	ldr	r3, [r3, #24]
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d032      	beq.n	8001322 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012bc:	4b43      	ldr	r3, [pc, #268]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a42      	ldr	r2, [pc, #264]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012c8:	f7ff fc34 	bl	8000b34 <HAL_GetTick>
 80012cc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012ce:	e008      	b.n	80012e2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012d0:	f7ff fc30 	bl	8000b34 <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	1ad3      	subs	r3, r2, r3
 80012da:	2b02      	cmp	r3, #2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e310      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e2:	4b3a      	ldr	r3, [pc, #232]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d0f0      	beq.n	80012d0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012ee:	4b37      	ldr	r3, [pc, #220]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	4a36      	ldr	r2, [pc, #216]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6013      	str	r3, [r2, #0]
 80012fa:	4b34      	ldr	r3, [pc, #208]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6a1b      	ldr	r3, [r3, #32]
 8001306:	4931      	ldr	r1, [pc, #196]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001308:	4313      	orrs	r3, r2
 800130a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800130c:	4b2f      	ldr	r3, [pc, #188]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	021b      	lsls	r3, r3, #8
 800131a:	492c      	ldr	r1, [pc, #176]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800131c:	4313      	orrs	r3, r2
 800131e:	604b      	str	r3, [r1, #4]
 8001320:	e01a      	b.n	8001358 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001322:	4b2a      	ldr	r3, [pc, #168]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a29      	ldr	r2, [pc, #164]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001328:	f023 0301 	bic.w	r3, r3, #1
 800132c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800132e:	f7ff fc01 	bl	8000b34 <HAL_GetTick>
 8001332:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001336:	f7ff fbfd 	bl	8000b34 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	693b      	ldr	r3, [r7, #16]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e2dd      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001348:	4b20      	ldr	r3, [pc, #128]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	2b00      	cmp	r3, #0
 8001352:	d1f0      	bne.n	8001336 <HAL_RCC_OscConfig+0x1da>
 8001354:	e000      	b.n	8001358 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001356:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	2b00      	cmp	r3, #0
 8001362:	d074      	beq.n	800144e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001364:	69bb      	ldr	r3, [r7, #24]
 8001366:	2b08      	cmp	r3, #8
 8001368:	d005      	beq.n	8001376 <HAL_RCC_OscConfig+0x21a>
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2b0c      	cmp	r3, #12
 800136e:	d10e      	bne.n	800138e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	2b03      	cmp	r3, #3
 8001374:	d10b      	bne.n	800138e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800137e:	2b00      	cmp	r3, #0
 8001380:	d064      	beq.n	800144c <HAL_RCC_OscConfig+0x2f0>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d160      	bne.n	800144c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800138a:	2301      	movs	r3, #1
 800138c:	e2ba      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001396:	d106      	bne.n	80013a6 <HAL_RCC_OscConfig+0x24a>
 8001398:	4b0c      	ldr	r3, [pc, #48]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	4a0b      	ldr	r2, [pc, #44]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 800139e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013a2:	6013      	str	r3, [r2, #0]
 80013a4:	e026      	b.n	80013f4 <HAL_RCC_OscConfig+0x298>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013ae:	d115      	bne.n	80013dc <HAL_RCC_OscConfig+0x280>
 80013b0:	4b06      	ldr	r3, [pc, #24]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a05      	ldr	r2, [pc, #20]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80013b6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b03      	ldr	r3, [pc, #12]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a02      	ldr	r2, [pc, #8]	@ (80013cc <HAL_RCC_OscConfig+0x270>)
 80013c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c6:	6013      	str	r3, [r2, #0]
 80013c8:	e014      	b.n	80013f4 <HAL_RCC_OscConfig+0x298>
 80013ca:	bf00      	nop
 80013cc:	40021000 	.word	0x40021000
 80013d0:	08006580 	.word	0x08006580
 80013d4:	20000008 	.word	0x20000008
 80013d8:	2000000c 	.word	0x2000000c
 80013dc:	4ba0      	ldr	r3, [pc, #640]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a9f      	ldr	r2, [pc, #636]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80013e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b9d      	ldr	r3, [pc, #628]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a9c      	ldr	r2, [pc, #624]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80013ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d013      	beq.n	8001424 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fb9a 	bl	8000b34 <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001404:	f7ff fb96 	bl	8000b34 <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b64      	cmp	r3, #100	@ 0x64
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e276      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001416:	4b92      	ldr	r3, [pc, #584]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d0f0      	beq.n	8001404 <HAL_RCC_OscConfig+0x2a8>
 8001422:	e014      	b.n	800144e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001424:	f7ff fb86 	bl	8000b34 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800142c:	f7ff fb82 	bl	8000b34 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b64      	cmp	r3, #100	@ 0x64
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e262      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143e:	4b88      	ldr	r3, [pc, #544]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x2d0>
 800144a:	e000      	b.n	800144e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800144c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0302 	and.w	r3, r3, #2
 8001456:	2b00      	cmp	r3, #0
 8001458:	d060      	beq.n	800151c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	2b04      	cmp	r3, #4
 800145e:	d005      	beq.n	800146c <HAL_RCC_OscConfig+0x310>
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	2b0c      	cmp	r3, #12
 8001464:	d119      	bne.n	800149a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	2b02      	cmp	r3, #2
 800146a:	d116      	bne.n	800149a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800146c:	4b7c      	ldr	r3, [pc, #496]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001474:	2b00      	cmp	r3, #0
 8001476:	d005      	beq.n	8001484 <HAL_RCC_OscConfig+0x328>
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d101      	bne.n	8001484 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001480:	2301      	movs	r3, #1
 8001482:	e23f      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001484:	4b76      	ldr	r3, [pc, #472]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	061b      	lsls	r3, r3, #24
 8001492:	4973      	ldr	r1, [pc, #460]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001498:	e040      	b.n	800151c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	68db      	ldr	r3, [r3, #12]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d023      	beq.n	80014ea <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fb41 	bl	8000b34 <HAL_GetTick>
 80014b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014b4:	e008      	b.n	80014c8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014b6:	f7ff fb3d 	bl	8000b34 <HAL_GetTick>
 80014ba:	4602      	mov	r2, r0
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	1ad3      	subs	r3, r2, r3
 80014c0:	2b02      	cmp	r3, #2
 80014c2:	d901      	bls.n	80014c8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014c4:	2303      	movs	r3, #3
 80014c6:	e21d      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c8:	4b65      	ldr	r3, [pc, #404]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d0f0      	beq.n	80014b6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014d4:	4b62      	ldr	r3, [pc, #392]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	691b      	ldr	r3, [r3, #16]
 80014e0:	061b      	lsls	r3, r3, #24
 80014e2:	495f      	ldr	r1, [pc, #380]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014e4:	4313      	orrs	r3, r2
 80014e6:	604b      	str	r3, [r1, #4]
 80014e8:	e018      	b.n	800151c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80014f0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014f6:	f7ff fb1d 	bl	8000b34 <HAL_GetTick>
 80014fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80014fc:	e008      	b.n	8001510 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014fe:	f7ff fb19 	bl	8000b34 <HAL_GetTick>
 8001502:	4602      	mov	r2, r0
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	2b02      	cmp	r3, #2
 800150a:	d901      	bls.n	8001510 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800150c:	2303      	movs	r3, #3
 800150e:	e1f9      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001510:	4b53      	ldr	r3, [pc, #332]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001518:	2b00      	cmp	r3, #0
 800151a:	d1f0      	bne.n	80014fe <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0308 	and.w	r3, r3, #8
 8001524:	2b00      	cmp	r3, #0
 8001526:	d03c      	beq.n	80015a2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	695b      	ldr	r3, [r3, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d01c      	beq.n	800156a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001530:	4b4b      	ldr	r3, [pc, #300]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001532:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001536:	4a4a      	ldr	r2, [pc, #296]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001540:	f7ff faf8 	bl	8000b34 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001546:	e008      	b.n	800155a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001548:	f7ff faf4 	bl	8000b34 <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	693b      	ldr	r3, [r7, #16]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	2b02      	cmp	r3, #2
 8001554:	d901      	bls.n	800155a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001556:	2303      	movs	r3, #3
 8001558:	e1d4      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800155a:	4b41      	ldr	r3, [pc, #260]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800155c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001560:	f003 0302 	and.w	r3, r3, #2
 8001564:	2b00      	cmp	r3, #0
 8001566:	d0ef      	beq.n	8001548 <HAL_RCC_OscConfig+0x3ec>
 8001568:	e01b      	b.n	80015a2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800156a:	4b3d      	ldr	r3, [pc, #244]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800156c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001570:	4a3b      	ldr	r2, [pc, #236]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001572:	f023 0301 	bic.w	r3, r3, #1
 8001576:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800157a:	f7ff fadb 	bl	8000b34 <HAL_GetTick>
 800157e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001580:	e008      	b.n	8001594 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001582:	f7ff fad7 	bl	8000b34 <HAL_GetTick>
 8001586:	4602      	mov	r2, r0
 8001588:	693b      	ldr	r3, [r7, #16]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	2b02      	cmp	r3, #2
 800158e:	d901      	bls.n	8001594 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e1b7      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001594:	4b32      	ldr	r3, [pc, #200]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001596:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d1ef      	bne.n	8001582 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0304 	and.w	r3, r3, #4
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	f000 80a6 	beq.w	80016fc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015b0:	2300      	movs	r3, #0
 80015b2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80015b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d10d      	bne.n	80015dc <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015c0:	4b27      	ldr	r3, [pc, #156]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80015c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015c4:	4a26      	ldr	r2, [pc, #152]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80015c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	6593      	str	r3, [r2, #88]	@ 0x58
 80015cc:	4b24      	ldr	r3, [pc, #144]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 80015ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015d8:	2301      	movs	r3, #1
 80015da:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015dc:	4b21      	ldr	r3, [pc, #132]	@ (8001664 <HAL_RCC_OscConfig+0x508>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d118      	bne.n	800161a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015e8:	4b1e      	ldr	r3, [pc, #120]	@ (8001664 <HAL_RCC_OscConfig+0x508>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001664 <HAL_RCC_OscConfig+0x508>)
 80015ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015f4:	f7ff fa9e 	bl	8000b34 <HAL_GetTick>
 80015f8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015fa:	e008      	b.n	800160e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015fc:	f7ff fa9a 	bl	8000b34 <HAL_GetTick>
 8001600:	4602      	mov	r2, r0
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e17a      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160e:	4b15      	ldr	r3, [pc, #84]	@ (8001664 <HAL_RCC_OscConfig+0x508>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001616:	2b00      	cmp	r3, #0
 8001618:	d0f0      	beq.n	80015fc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	2b01      	cmp	r3, #1
 8001620:	d108      	bne.n	8001634 <HAL_RCC_OscConfig+0x4d8>
 8001622:	4b0f      	ldr	r3, [pc, #60]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001628:	4a0d      	ldr	r2, [pc, #52]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800162a:	f043 0301 	orr.w	r3, r3, #1
 800162e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001632:	e029      	b.n	8001688 <HAL_RCC_OscConfig+0x52c>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b05      	cmp	r3, #5
 800163a:	d115      	bne.n	8001668 <HAL_RCC_OscConfig+0x50c>
 800163c:	4b08      	ldr	r3, [pc, #32]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800163e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001642:	4a07      	ldr	r2, [pc, #28]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001644:	f043 0304 	orr.w	r3, r3, #4
 8001648:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800164c:	4b04      	ldr	r3, [pc, #16]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 800164e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001652:	4a03      	ldr	r2, [pc, #12]	@ (8001660 <HAL_RCC_OscConfig+0x504>)
 8001654:	f043 0301 	orr.w	r3, r3, #1
 8001658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800165c:	e014      	b.n	8001688 <HAL_RCC_OscConfig+0x52c>
 800165e:	bf00      	nop
 8001660:	40021000 	.word	0x40021000
 8001664:	40007000 	.word	0x40007000
 8001668:	4b9c      	ldr	r3, [pc, #624]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800166a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800166e:	4a9b      	ldr	r2, [pc, #620]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001670:	f023 0301 	bic.w	r3, r3, #1
 8001674:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001678:	4b98      	ldr	r3, [pc, #608]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800167a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800167e:	4a97      	ldr	r2, [pc, #604]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001680:	f023 0304 	bic.w	r3, r3, #4
 8001684:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d016      	beq.n	80016be <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001690:	f7ff fa50 	bl	8000b34 <HAL_GetTick>
 8001694:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001696:	e00a      	b.n	80016ae <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001698:	f7ff fa4c 	bl	8000b34 <HAL_GetTick>
 800169c:	4602      	mov	r2, r0
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	1ad3      	subs	r3, r2, r3
 80016a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d901      	bls.n	80016ae <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016aa:	2303      	movs	r3, #3
 80016ac:	e12a      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016ae:	4b8b      	ldr	r3, [pc, #556]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80016b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d0ed      	beq.n	8001698 <HAL_RCC_OscConfig+0x53c>
 80016bc:	e015      	b.n	80016ea <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016be:	f7ff fa39 	bl	8000b34 <HAL_GetTick>
 80016c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016c4:	e00a      	b.n	80016dc <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016c6:	f7ff fa35 	bl	8000b34 <HAL_GetTick>
 80016ca:	4602      	mov	r2, r0
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e113      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016dc:	4b7f      	ldr	r3, [pc, #508]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80016de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80016e2:	f003 0302 	and.w	r3, r3, #2
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d1ed      	bne.n	80016c6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016ea:	7ffb      	ldrb	r3, [r7, #31]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d105      	bne.n	80016fc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016f0:	4b7a      	ldr	r3, [pc, #488]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80016f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f4:	4a79      	ldr	r2, [pc, #484]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80016f6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016fa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80fe 	beq.w	8001902 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	2b02      	cmp	r3, #2
 800170c:	f040 80d0 	bne.w	80018b0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001710:	4b72      	ldr	r3, [pc, #456]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	f003 0203 	and.w	r2, r3, #3
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001720:	429a      	cmp	r2, r3
 8001722:	d130      	bne.n	8001786 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	3b01      	subs	r3, #1
 8001730:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001732:	429a      	cmp	r2, r3
 8001734:	d127      	bne.n	8001786 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001740:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001742:	429a      	cmp	r2, r3
 8001744:	d11f      	bne.n	8001786 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800174c:	687a      	ldr	r2, [r7, #4]
 800174e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001750:	2a07      	cmp	r2, #7
 8001752:	bf14      	ite	ne
 8001754:	2201      	movne	r2, #1
 8001756:	2200      	moveq	r2, #0
 8001758:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800175a:	4293      	cmp	r3, r2
 800175c:	d113      	bne.n	8001786 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800175e:	697b      	ldr	r3, [r7, #20]
 8001760:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001768:	085b      	lsrs	r3, r3, #1
 800176a:	3b01      	subs	r3, #1
 800176c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d109      	bne.n	8001786 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177c:	085b      	lsrs	r3, r3, #1
 800177e:	3b01      	subs	r3, #1
 8001780:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001782:	429a      	cmp	r2, r3
 8001784:	d06e      	beq.n	8001864 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b0c      	cmp	r3, #12
 800178a:	d069      	beq.n	8001860 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800178c:	4b53      	ldr	r3, [pc, #332]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d105      	bne.n	80017a4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001798:	4b50      	ldr	r3, [pc, #320]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e0ad      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80017a8:	4b4c      	ldr	r3, [pc, #304]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a4b      	ldr	r2, [pc, #300]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80017ae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017b2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80017b4:	f7ff f9be 	bl	8000b34 <HAL_GetTick>
 80017b8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ba:	e008      	b.n	80017ce <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017bc:	f7ff f9ba 	bl	8000b34 <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	693b      	ldr	r3, [r7, #16]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	2b02      	cmp	r3, #2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e09a      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ce:	4b43      	ldr	r3, [pc, #268]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f0      	bne.n	80017bc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80017da:	4b40      	ldr	r3, [pc, #256]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	4b40      	ldr	r3, [pc, #256]	@ (80018e0 <HAL_RCC_OscConfig+0x784>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	687a      	ldr	r2, [r7, #4]
 80017e4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80017e6:	687a      	ldr	r2, [r7, #4]
 80017e8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80017ea:	3a01      	subs	r2, #1
 80017ec:	0112      	lsls	r2, r2, #4
 80017ee:	4311      	orrs	r1, r2
 80017f0:	687a      	ldr	r2, [r7, #4]
 80017f2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80017f4:	0212      	lsls	r2, r2, #8
 80017f6:	4311      	orrs	r1, r2
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80017fc:	0852      	lsrs	r2, r2, #1
 80017fe:	3a01      	subs	r2, #1
 8001800:	0552      	lsls	r2, r2, #21
 8001802:	4311      	orrs	r1, r2
 8001804:	687a      	ldr	r2, [r7, #4]
 8001806:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001808:	0852      	lsrs	r2, r2, #1
 800180a:	3a01      	subs	r2, #1
 800180c:	0652      	lsls	r2, r2, #25
 800180e:	4311      	orrs	r1, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001814:	0912      	lsrs	r2, r2, #4
 8001816:	0452      	lsls	r2, r2, #17
 8001818:	430a      	orrs	r2, r1
 800181a:	4930      	ldr	r1, [pc, #192]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800181c:	4313      	orrs	r3, r2
 800181e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001820:	4b2e      	ldr	r3, [pc, #184]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	4a2d      	ldr	r2, [pc, #180]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001826:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800182a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800182c:	4b2b      	ldr	r3, [pc, #172]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800182e:	68db      	ldr	r3, [r3, #12]
 8001830:	4a2a      	ldr	r2, [pc, #168]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001832:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001836:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001838:	f7ff f97c 	bl	8000b34 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001840:	f7ff f978 	bl	8000b34 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e058      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001852:	4b22      	ldr	r3, [pc, #136]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800185e:	e050      	b.n	8001902 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e04f      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001864:	4b1d      	ldr	r3, [pc, #116]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800186c:	2b00      	cmp	r3, #0
 800186e:	d148      	bne.n	8001902 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001870:	4b1a      	ldr	r3, [pc, #104]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a19      	ldr	r2, [pc, #100]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001876:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800187a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800187c:	4b17      	ldr	r3, [pc, #92]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	4a16      	ldr	r2, [pc, #88]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 8001882:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001886:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001888:	f7ff f954 	bl	8000b34 <HAL_GetTick>
 800188c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800188e:	e008      	b.n	80018a2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001890:	f7ff f950 	bl	8000b34 <HAL_GetTick>
 8001894:	4602      	mov	r2, r0
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	2b02      	cmp	r3, #2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e030      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a2:	4b0e      	ldr	r3, [pc, #56]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0f0      	beq.n	8001890 <HAL_RCC_OscConfig+0x734>
 80018ae:	e028      	b.n	8001902 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	2b0c      	cmp	r3, #12
 80018b4:	d023      	beq.n	80018fe <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b6:	4b09      	ldr	r3, [pc, #36]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a08      	ldr	r2, [pc, #32]	@ (80018dc <HAL_RCC_OscConfig+0x780>)
 80018bc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff f937 	bl	8000b34 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018c8:	e00c      	b.n	80018e4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018ca:	f7ff f933 	bl	8000b34 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d905      	bls.n	80018e4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e013      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
 80018dc:	40021000 	.word	0x40021000
 80018e0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018e4:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_RCC_OscConfig+0x7b0>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d1ec      	bne.n	80018ca <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80018f0:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_RCC_OscConfig+0x7b0>)
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	4905      	ldr	r1, [pc, #20]	@ (800190c <HAL_RCC_OscConfig+0x7b0>)
 80018f6:	4b06      	ldr	r3, [pc, #24]	@ (8001910 <HAL_RCC_OscConfig+0x7b4>)
 80018f8:	4013      	ands	r3, r2
 80018fa:	60cb      	str	r3, [r1, #12]
 80018fc:	e001      	b.n	8001902 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80018fe:	2301      	movs	r3, #1
 8001900:	e000      	b.n	8001904 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8001902:	2300      	movs	r3, #0
}
 8001904:	4618      	mov	r0, r3
 8001906:	3720      	adds	r7, #32
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40021000 	.word	0x40021000
 8001910:	feeefffc 	.word	0xfeeefffc

08001914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0e7      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b75      	ldr	r3, [pc, #468]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d910      	bls.n	8001958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b72      	ldr	r3, [pc, #456]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 0207 	bic.w	r2, r3, #7
 800193e:	4970      	ldr	r1, [pc, #448]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b6e      	ldr	r3, [pc, #440]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0cf      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d010      	beq.n	8001986 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 800196a:	689b      	ldr	r3, [r3, #8]
 800196c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001970:	429a      	cmp	r2, r3
 8001972:	d908      	bls.n	8001986 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001974:	4b63      	ldr	r3, [pc, #396]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4960      	ldr	r1, [pc, #384]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001982:	4313      	orrs	r3, r2
 8001984:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d04c      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	2b03      	cmp	r3, #3
 8001998:	d107      	bne.n	80019aa <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800199a:	4b5a      	ldr	r3, [pc, #360]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d121      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e0a6      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d107      	bne.n	80019c2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019b2:	4b54      	ldr	r3, [pc, #336]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d115      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e09a      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d107      	bne.n	80019da <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ca:	4b4e      	ldr	r3, [pc, #312]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d109      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019d6:	2301      	movs	r3, #1
 80019d8:	e08e      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019da:	4b4a      	ldr	r3, [pc, #296]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d101      	bne.n	80019ea <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e086      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019ea:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	f023 0203 	bic.w	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	4943      	ldr	r1, [pc, #268]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80019fc:	f7ff f89a 	bl	8000b34 <HAL_GetTick>
 8001a00:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a02:	e00a      	b.n	8001a1a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a04:	f7ff f896 	bl	8000b34 <HAL_GetTick>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e06e      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a1a:	4b3a      	ldr	r3, [pc, #232]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 020c 	and.w	r2, r3, #12
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d1eb      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d010      	beq.n	8001a5a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	4b31      	ldr	r3, [pc, #196]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d208      	bcs.n	8001a5a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a48:	4b2e      	ldr	r3, [pc, #184]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	689b      	ldr	r3, [r3, #8]
 8001a54:	492b      	ldr	r1, [pc, #172]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a56:	4313      	orrs	r3, r2
 8001a58:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001a5a:	4b29      	ldr	r3, [pc, #164]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0307 	and.w	r3, r3, #7
 8001a62:	683a      	ldr	r2, [r7, #0]
 8001a64:	429a      	cmp	r2, r3
 8001a66:	d210      	bcs.n	8001a8a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a68:	4b25      	ldr	r3, [pc, #148]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f023 0207 	bic.w	r2, r3, #7
 8001a70:	4923      	ldr	r1, [pc, #140]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a78:	4b21      	ldr	r3, [pc, #132]	@ (8001b00 <HAL_RCC_ClockConfig+0x1ec>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f003 0307 	and.w	r3, r3, #7
 8001a80:	683a      	ldr	r2, [r7, #0]
 8001a82:	429a      	cmp	r2, r3
 8001a84:	d001      	beq.n	8001a8a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	e036      	b.n	8001af8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0304 	and.w	r3, r3, #4
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	68db      	ldr	r3, [r3, #12]
 8001aa2:	4918      	ldr	r1, [pc, #96]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0308 	and.w	r3, r3, #8
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d009      	beq.n	8001ac8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001ab4:	4b13      	ldr	r3, [pc, #76]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	691b      	ldr	r3, [r3, #16]
 8001ac0:	00db      	lsls	r3, r3, #3
 8001ac2:	4910      	ldr	r1, [pc, #64]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac4:	4313      	orrs	r3, r2
 8001ac6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ac8:	f000 f824 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8001acc:	4602      	mov	r2, r0
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <HAL_RCC_ClockConfig+0x1f0>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	091b      	lsrs	r3, r3, #4
 8001ad4:	f003 030f 	and.w	r3, r3, #15
 8001ad8:	490b      	ldr	r1, [pc, #44]	@ (8001b08 <HAL_RCC_ClockConfig+0x1f4>)
 8001ada:	5ccb      	ldrb	r3, [r1, r3]
 8001adc:	f003 031f 	and.w	r3, r3, #31
 8001ae0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ae4:	4a09      	ldr	r2, [pc, #36]	@ (8001b0c <HAL_RCC_ClockConfig+0x1f8>)
 8001ae6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ae8:	4b09      	ldr	r3, [pc, #36]	@ (8001b10 <HAL_RCC_ClockConfig+0x1fc>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe ff11 	bl	8000914 <HAL_InitTick>
 8001af2:	4603      	mov	r3, r0
 8001af4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001af6:	7afb      	ldrb	r3, [r7, #11]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3710      	adds	r7, #16
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}
 8001b00:	40022000 	.word	0x40022000
 8001b04:	40021000 	.word	0x40021000
 8001b08:	08006580 	.word	0x08006580
 8001b0c:	20000008 	.word	0x20000008
 8001b10:	2000000c 	.word	0x2000000c

08001b14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b089      	sub	sp, #36	@ 0x24
 8001b18:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b22:	4b3e      	ldr	r3, [pc, #248]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f003 030c 	and.w	r3, r3, #12
 8001b2a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b2c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_GetSysClockFreq+0x34>
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d121      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b01      	cmp	r3, #1
 8001b46:	d11e      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001b48:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 0308 	and.w	r3, r3, #8
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d107      	bne.n	8001b64 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001b54:	4b31      	ldr	r3, [pc, #196]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b56:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	61fb      	str	r3, [r7, #28]
 8001b62:	e005      	b.n	8001b70 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001b64:	4b2d      	ldr	r3, [pc, #180]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	091b      	lsrs	r3, r3, #4
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001b70:	4a2b      	ldr	r2, [pc, #172]	@ (8001c20 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b78:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10d      	bne.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b84:	e00a      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	2b04      	cmp	r3, #4
 8001b8a:	d102      	bne.n	8001b92 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001b8c:	4b25      	ldr	r3, [pc, #148]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	e004      	b.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	2b08      	cmp	r3, #8
 8001b96:	d101      	bne.n	8001b9c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b98:	4b23      	ldr	r3, [pc, #140]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001b9a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b0c      	cmp	r3, #12
 8001ba0:	d134      	bne.n	8001c0c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ba2:	4b1e      	ldr	r3, [pc, #120]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	f003 0303 	and.w	r3, r3, #3
 8001baa:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2b02      	cmp	r3, #2
 8001bb0:	d003      	beq.n	8001bba <HAL_RCC_GetSysClockFreq+0xa6>
 8001bb2:	68bb      	ldr	r3, [r7, #8]
 8001bb4:	2b03      	cmp	r3, #3
 8001bb6:	d003      	beq.n	8001bc0 <HAL_RCC_GetSysClockFreq+0xac>
 8001bb8:	e005      	b.n	8001bc6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001bba:	4b1a      	ldr	r3, [pc, #104]	@ (8001c24 <HAL_RCC_GetSysClockFreq+0x110>)
 8001bbc:	617b      	str	r3, [r7, #20]
      break;
 8001bbe:	e005      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001bc0:	4b19      	ldr	r3, [pc, #100]	@ (8001c28 <HAL_RCC_GetSysClockFreq+0x114>)
 8001bc2:	617b      	str	r3, [r7, #20]
      break;
 8001bc4:	e002      	b.n	8001bcc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	617b      	str	r3, [r7, #20]
      break;
 8001bca:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001bcc:	4b13      	ldr	r3, [pc, #76]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	091b      	lsrs	r3, r3, #4
 8001bd2:	f003 0307 	and.w	r3, r3, #7
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001bda:	4b10      	ldr	r3, [pc, #64]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001be4:	697a      	ldr	r2, [r7, #20]
 8001be6:	fb03 f202 	mul.w	r2, r3, r2
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bf0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001bf2:	4b0a      	ldr	r3, [pc, #40]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x108>)
 8001bf4:	68db      	ldr	r3, [r3, #12]
 8001bf6:	0e5b      	lsrs	r3, r3, #25
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c0c:	69bb      	ldr	r3, [r7, #24]
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3724      	adds	r7, #36	@ 0x24
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40021000 	.word	0x40021000
 8001c20:	08006598 	.word	0x08006598
 8001c24:	00f42400 	.word	0x00f42400
 8001c28:	007a1200 	.word	0x007a1200

08001c2c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b03      	ldr	r3, [pc, #12]	@ (8001c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000008 	.word	0x20000008

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	4b06      	ldr	r3, [pc, #24]	@ (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0a1b      	lsrs	r3, r3, #8
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4904      	ldr	r1, [pc, #16]	@ (8001c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001c5a:	5ccb      	ldrb	r3, [r1, r3]
 8001c5c:	f003 031f 	and.w	r3, r3, #31
 8001c60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	bd80      	pop	{r7, pc}
 8001c68:	40021000 	.word	0x40021000
 8001c6c:	08006590 	.word	0x08006590

08001c70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001c74:	f7ff ffda 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	4b06      	ldr	r3, [pc, #24]	@ (8001c94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	0adb      	lsrs	r3, r3, #11
 8001c80:	f003 0307 	and.w	r3, r3, #7
 8001c84:	4904      	ldr	r1, [pc, #16]	@ (8001c98 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001c86:	5ccb      	ldrb	r3, [r1, r3]
 8001c88:	f003 031f 	and.w	r3, r3, #31
 8001c8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	08006590 	.word	0x08006590

08001c9c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	220f      	movs	r2, #15
 8001caa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 0203 	and.w	r2, r3, #3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cba:	689b      	ldr	r3, [r3, #8]
 8001cbc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001cd0:	4b09      	ldr	r3, [pc, #36]	@ (8001cf8 <HAL_RCC_GetClockConfig+0x5c>)
 8001cd2:	689b      	ldr	r3, [r3, #8]
 8001cd4:	08db      	lsrs	r3, r3, #3
 8001cd6:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001cde:	4b07      	ldr	r3, [pc, #28]	@ (8001cfc <HAL_RCC_GetClockConfig+0x60>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0207 	and.w	r2, r3, #7
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	601a      	str	r2, [r3, #0]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	40021000 	.word	0x40021000
 8001cfc:	40022000 	.word	0x40022000

08001d00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b086      	sub	sp, #24
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d08:	2300      	movs	r3, #0
 8001d0a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d0c:	4b2a      	ldr	r3, [pc, #168]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d10:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d18:	f7ff f9bc 	bl	8001094 <HAL_PWREx_GetVoltageRange>
 8001d1c:	6178      	str	r0, [r7, #20]
 8001d1e:	e014      	b.n	8001d4a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d20:	4b25      	ldr	r3, [pc, #148]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d24:	4a24      	ldr	r2, [pc, #144]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d2a:	6593      	str	r3, [r2, #88]	@ 0x58
 8001d2c:	4b22      	ldr	r3, [pc, #136]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001d38:	f7ff f9ac 	bl	8001094 <HAL_PWREx_GetVoltageRange>
 8001d3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001d3e:	4b1e      	ldr	r3, [pc, #120]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001d42:	4a1d      	ldr	r2, [pc, #116]	@ (8001db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d44:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001d48:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d50:	d10b      	bne.n	8001d6a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2b80      	cmp	r3, #128	@ 0x80
 8001d56:	d919      	bls.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2ba0      	cmp	r3, #160	@ 0xa0
 8001d5c:	d902      	bls.n	8001d64 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d5e:	2302      	movs	r3, #2
 8001d60:	613b      	str	r3, [r7, #16]
 8001d62:	e013      	b.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d64:	2301      	movs	r3, #1
 8001d66:	613b      	str	r3, [r7, #16]
 8001d68:	e010      	b.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2b80      	cmp	r3, #128	@ 0x80
 8001d6e:	d902      	bls.n	8001d76 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001d70:	2303      	movs	r3, #3
 8001d72:	613b      	str	r3, [r7, #16]
 8001d74:	e00a      	b.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b80      	cmp	r3, #128	@ 0x80
 8001d7a:	d102      	bne.n	8001d82 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	e004      	b.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2b70      	cmp	r3, #112	@ 0x70
 8001d86:	d101      	bne.n	8001d8c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001d88:	2301      	movs	r3, #1
 8001d8a:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001d8c:	4b0b      	ldr	r3, [pc, #44]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f023 0207 	bic.w	r2, r3, #7
 8001d94:	4909      	ldr	r1, [pc, #36]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001d9c:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	693a      	ldr	r2, [r7, #16]
 8001da6:	429a      	cmp	r2, r3
 8001da8:	d001      	beq.n	8001dae <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3718      	adds	r7, #24
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	40022000 	.word	0x40022000

08001dc0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001dc8:	2300      	movs	r3, #0
 8001dca:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001dcc:	2300      	movs	r3, #0
 8001dce:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d041      	beq.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001de0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001de4:	d02a      	beq.n	8001e3c <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001de6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001dea:	d824      	bhi.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001dec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001df0:	d008      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001df2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001df6:	d81e      	bhi.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00a      	beq.n	8001e12 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001dfc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001e00:	d010      	beq.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001e02:	e018      	b.n	8001e36 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e04:	4b86      	ldr	r3, [pc, #536]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	4a85      	ldr	r2, [pc, #532]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e0e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e10:	e015      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	3304      	adds	r3, #4
 8001e16:	2100      	movs	r1, #0
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f000 fabb 	bl	8002394 <RCCEx_PLLSAI1_Config>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e22:	e00c      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	3320      	adds	r3, #32
 8001e28:	2100      	movs	r1, #0
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f000 fba6 	bl	800257c <RCCEx_PLLSAI2_Config>
 8001e30:	4603      	mov	r3, r0
 8001e32:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e34:	e003      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e36:	2301      	movs	r3, #1
 8001e38:	74fb      	strb	r3, [r7, #19]
      break;
 8001e3a:	e000      	b.n	8001e3e <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001e3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001e3e:	7cfb      	ldrb	r3, [r7, #19]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d10b      	bne.n	8001e5c <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001e44:	4b76      	ldr	r3, [pc, #472]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001e4a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001e52:	4973      	ldr	r1, [pc, #460]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e54:	4313      	orrs	r3, r2
 8001e56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001e5a:	e001      	b.n	8001e60 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e5c:	7cfb      	ldrb	r3, [r7, #19]
 8001e5e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d041      	beq.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001e70:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e74:	d02a      	beq.n	8001ecc <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001e76:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001e7a:	d824      	bhi.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e7c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e80:	d008      	beq.n	8001e94 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001e82:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001e86:	d81e      	bhi.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00a      	beq.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001e8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e90:	d010      	beq.n	8001eb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001e92:	e018      	b.n	8001ec6 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001e94:	4b62      	ldr	r3, [pc, #392]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e96:	68db      	ldr	r3, [r3, #12]
 8001e98:	4a61      	ldr	r2, [pc, #388]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e9e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ea0:	e015      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	2100      	movs	r1, #0
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f000 fa73 	bl	8002394 <RCCEx_PLLSAI1_Config>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001eb2:	e00c      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	3320      	adds	r3, #32
 8001eb8:	2100      	movs	r1, #0
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f000 fb5e 	bl	800257c <RCCEx_PLLSAI2_Config>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001ec4:	e003      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	74fb      	strb	r3, [r7, #19]
      break;
 8001eca:	e000      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001ecc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ece:	7cfb      	ldrb	r3, [r7, #19]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10b      	bne.n	8001eec <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001ed4:	4b52      	ldr	r3, [pc, #328]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001eda:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001ee2:	494f      	ldr	r1, [pc, #316]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001eea:	e001      	b.n	8001ef0 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001eec:	7cfb      	ldrb	r3, [r7, #19]
 8001eee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	f000 80a0 	beq.w	800203e <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001efe:	2300      	movs	r3, #0
 8001f00:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f02:	4b47      	ldr	r3, [pc, #284]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e000      	b.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001f12:	2300      	movs	r3, #0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d00d      	beq.n	8001f34 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f18:	4b41      	ldr	r3, [pc, #260]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1c:	4a40      	ldr	r2, [pc, #256]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f1e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f22:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f24:	4b3e      	ldr	r3, [pc, #248]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f2c:	60bb      	str	r3, [r7, #8]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f30:	2301      	movs	r3, #1
 8001f32:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f34:	4b3b      	ldr	r3, [pc, #236]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a3a      	ldr	r2, [pc, #232]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f3e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f40:	f7fe fdf8 	bl	8000b34 <HAL_GetTick>
 8001f44:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f46:	e009      	b.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f48:	f7fe fdf4 	bl	8000b34 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d902      	bls.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	74fb      	strb	r3, [r7, #19]
        break;
 8001f5a:	e005      	b.n	8001f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f5c:	4b31      	ldr	r3, [pc, #196]	@ (8002024 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d0ef      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001f68:	7cfb      	ldrb	r3, [r7, #19]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d15c      	bne.n	8002028 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f6e:	4b2c      	ldr	r3, [pc, #176]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f74:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f78:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f7a:	697b      	ldr	r3, [r7, #20]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d01f      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001f86:	697a      	ldr	r2, [r7, #20]
 8001f88:	429a      	cmp	r2, r3
 8001f8a:	d019      	beq.n	8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f8c:	4b24      	ldr	r3, [pc, #144]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001f96:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f98:	4b21      	ldr	r3, [pc, #132]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001f9e:	4a20      	ldr	r2, [pc, #128]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fa4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001fa8:	4b1d      	ldr	r3, [pc, #116]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001faa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001fae:	4a1c      	ldr	r2, [pc, #112]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fb4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001fb8:	4a19      	ldr	r2, [pc, #100]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fba:	697b      	ldr	r3, [r7, #20]
 8001fbc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d016      	beq.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7fe fdb3 	bl	8000b34 <HAL_GetTick>
 8001fce:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fd0:	e00b      	b.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fd2:	f7fe fdaf 	bl	8000b34 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d902      	bls.n	8001fea <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	74fb      	strb	r3, [r7, #19]
            break;
 8001fe8:	e006      	b.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fea:	4b0d      	ldr	r3, [pc, #52]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ff0:	f003 0302 	and.w	r3, r3, #2
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0ec      	beq.n	8001fd2 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10c      	bne.n	8002018 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ffe:	4b08      	ldr	r3, [pc, #32]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002000:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002004:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800200e:	4904      	ldr	r1, [pc, #16]	@ (8002020 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002010:	4313      	orrs	r3, r2
 8002012:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002016:	e009      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002018:	7cfb      	ldrb	r3, [r7, #19]
 800201a:	74bb      	strb	r3, [r7, #18]
 800201c:	e006      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002028:	7cfb      	ldrb	r3, [r7, #19]
 800202a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800202c:	7c7b      	ldrb	r3, [r7, #17]
 800202e:	2b01      	cmp	r3, #1
 8002030:	d105      	bne.n	800203e <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002032:	4b9e      	ldr	r3, [pc, #632]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002036:	4a9d      	ldr	r2, [pc, #628]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002038:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800203c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0301 	and.w	r3, r3, #1
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800204a:	4b98      	ldr	r3, [pc, #608]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002050:	f023 0203 	bic.w	r2, r3, #3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002058:	4994      	ldr	r1, [pc, #592]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800205a:	4313      	orrs	r3, r2
 800205c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f003 0302 	and.w	r3, r3, #2
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00a      	beq.n	8002082 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800206c:	4b8f      	ldr	r3, [pc, #572]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800206e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002072:	f023 020c 	bic.w	r2, r3, #12
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800207a:	498c      	ldr	r1, [pc, #560]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800207c:	4313      	orrs	r3, r2
 800207e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f003 0304 	and.w	r3, r3, #4
 800208a:	2b00      	cmp	r3, #0
 800208c:	d00a      	beq.n	80020a4 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800208e:	4b87      	ldr	r3, [pc, #540]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002090:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002094:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800209c:	4983      	ldr	r1, [pc, #524]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800209e:	4313      	orrs	r3, r2
 80020a0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0308 	and.w	r3, r3, #8
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00a      	beq.n	80020c6 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80020b0:	4b7e      	ldr	r3, [pc, #504]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020b6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020be:	497b      	ldr	r1, [pc, #492]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80020d2:	4b76      	ldr	r3, [pc, #472]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020d8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80020e0:	4972      	ldr	r1, [pc, #456]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020e2:	4313      	orrs	r3, r2
 80020e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0320 	and.w	r3, r3, #32
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00a      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80020f4:	4b6d      	ldr	r3, [pc, #436]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020fa:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002102:	496a      	ldr	r1, [pc, #424]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002116:	4b65      	ldr	r3, [pc, #404]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002118:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800211c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002124:	4961      	ldr	r1, [pc, #388]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002126:	4313      	orrs	r3, r2
 8002128:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002134:	2b00      	cmp	r3, #0
 8002136:	d00a      	beq.n	800214e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002138:	4b5c      	ldr	r3, [pc, #368]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800213a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800213e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002146:	4959      	ldr	r1, [pc, #356]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002148:	4313      	orrs	r3, r2
 800214a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00a      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800215a:	4b54      	ldr	r3, [pc, #336]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800215c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002160:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002168:	4950      	ldr	r1, [pc, #320]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800216a:	4313      	orrs	r3, r2
 800216c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00a      	beq.n	8002192 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800217c:	4b4b      	ldr	r3, [pc, #300]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800217e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002182:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800218a:	4948      	ldr	r1, [pc, #288]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800218c:	4313      	orrs	r3, r2
 800218e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219a:	2b00      	cmp	r3, #0
 800219c:	d00a      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800219e:	4b43      	ldr	r3, [pc, #268]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021a4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ac:	493f      	ldr	r1, [pc, #252]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d028      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021c0:	4b3a      	ldr	r3, [pc, #232]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021c6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021ce:	4937      	ldr	r1, [pc, #220]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021da:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80021de:	d106      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021e0:	4b32      	ldr	r3, [pc, #200]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	4a31      	ldr	r2, [pc, #196]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80021e6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80021ea:	60d3      	str	r3, [r2, #12]
 80021ec:	e011      	b.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80021f2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80021f6:	d10c      	bne.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	3304      	adds	r3, #4
 80021fc:	2101      	movs	r1, #1
 80021fe:	4618      	mov	r0, r3
 8002200:	f000 f8c8 	bl	8002394 <RCCEx_PLLSAI1_Config>
 8002204:	4603      	mov	r3, r0
 8002206:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002208:	7cfb      	ldrb	r3, [r7, #19]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800220e:	7cfb      	ldrb	r3, [r7, #19]
 8002210:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d028      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800221e:	4b23      	ldr	r3, [pc, #140]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002220:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002224:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222c:	491f      	ldr	r1, [pc, #124]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800222e:	4313      	orrs	r3, r2
 8002230:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002238:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800223c:	d106      	bne.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800223e:	4b1b      	ldr	r3, [pc, #108]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	4a1a      	ldr	r2, [pc, #104]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002244:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002248:	60d3      	str	r3, [r2, #12]
 800224a:	e011      	b.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002250:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002254:	d10c      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	3304      	adds	r3, #4
 800225a:	2101      	movs	r1, #1
 800225c:	4618      	mov	r0, r3
 800225e:	f000 f899 	bl	8002394 <RCCEx_PLLSAI1_Config>
 8002262:	4603      	mov	r3, r0
 8002264:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002266:	7cfb      	ldrb	r3, [r7, #19]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 800226c:	7cfb      	ldrb	r3, [r7, #19]
 800226e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d02b      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800227c:	4b0b      	ldr	r3, [pc, #44]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800227e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002282:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800228a:	4908      	ldr	r1, [pc, #32]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800228c:	4313      	orrs	r3, r2
 800228e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002296:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800229a:	d109      	bne.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800229c:	4b03      	ldr	r3, [pc, #12]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	4a02      	ldr	r2, [pc, #8]	@ (80022ac <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80022a2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80022a6:	60d3      	str	r3, [r2, #12]
 80022a8:	e014      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80022b4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80022b8:	d10c      	bne.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	3304      	adds	r3, #4
 80022be:	2101      	movs	r1, #1
 80022c0:	4618      	mov	r0, r3
 80022c2:	f000 f867 	bl	8002394 <RCCEx_PLLSAI1_Config>
 80022c6:	4603      	mov	r3, r0
 80022c8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80022d0:	7cfb      	ldrb	r3, [r7, #19]
 80022d2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d02f      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022e0:	4b2b      	ldr	r3, [pc, #172]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80022e6:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022ee:	4928      	ldr	r1, [pc, #160]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80022fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80022fe:	d10d      	bne.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	3304      	adds	r3, #4
 8002304:	2102      	movs	r1, #2
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f844 	bl	8002394 <RCCEx_PLLSAI1_Config>
 800230c:	4603      	mov	r3, r0
 800230e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002310:	7cfb      	ldrb	r3, [r7, #19]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d014      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002316:	7cfb      	ldrb	r3, [r7, #19]
 8002318:	74bb      	strb	r3, [r7, #18]
 800231a:	e011      	b.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002320:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002324:	d10c      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	3320      	adds	r3, #32
 800232a:	2102      	movs	r1, #2
 800232c:	4618      	mov	r0, r3
 800232e:	f000 f925 	bl	800257c <RCCEx_PLLSAI2_Config>
 8002332:	4603      	mov	r3, r0
 8002334:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002336:	7cfb      	ldrb	r3, [r7, #19]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800233c:	7cfb      	ldrb	r3, [r7, #19]
 800233e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002348:	2b00      	cmp	r3, #0
 800234a:	d00a      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800234c:	4b10      	ldr	r3, [pc, #64]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800234e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002352:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800235a:	490d      	ldr	r1, [pc, #52]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800235c:	4313      	orrs	r3, r2
 800235e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d00b      	beq.n	8002386 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800236e:	4b08      	ldr	r3, [pc, #32]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002374:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800237e:	4904      	ldr	r1, [pc, #16]	@ (8002390 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002380:	4313      	orrs	r3, r2
 8002382:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002386:	7cbb      	ldrb	r3, [r7, #18]
}
 8002388:	4618      	mov	r0, r3
 800238a:	3718      	adds	r7, #24
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000

08002394 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800239e:	2300      	movs	r3, #0
 80023a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80023a2:	4b75      	ldr	r3, [pc, #468]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	f003 0303 	and.w	r3, r3, #3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d018      	beq.n	80023e0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80023ae:	4b72      	ldr	r3, [pc, #456]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	f003 0203 	and.w	r2, r3, #3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d10d      	bne.n	80023da <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
       ||
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d009      	beq.n	80023da <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023c6:	4b6c      	ldr	r3, [pc, #432]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	1c5a      	adds	r2, r3, #1
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
       ||
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d047      	beq.n	800246a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	73fb      	strb	r3, [r7, #15]
 80023de:	e044      	b.n	800246a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d018      	beq.n	800241a <RCCEx_PLLSAI1_Config+0x86>
 80023e8:	2b03      	cmp	r3, #3
 80023ea:	d825      	bhi.n	8002438 <RCCEx_PLLSAI1_Config+0xa4>
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d002      	beq.n	80023f6 <RCCEx_PLLSAI1_Config+0x62>
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d009      	beq.n	8002408 <RCCEx_PLLSAI1_Config+0x74>
 80023f4:	e020      	b.n	8002438 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023f6:	4b60      	ldr	r3, [pc, #384]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d11d      	bne.n	800243e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002402:	2301      	movs	r3, #1
 8002404:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002406:	e01a      	b.n	800243e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002408:	4b5b      	ldr	r3, [pc, #364]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d116      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002418:	e013      	b.n	8002442 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800241a:	4b57      	ldr	r3, [pc, #348]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10f      	bne.n	8002446 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002426:	4b54      	ldr	r3, [pc, #336]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800242e:	2b00      	cmp	r3, #0
 8002430:	d109      	bne.n	8002446 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002436:	e006      	b.n	8002446 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	73fb      	strb	r3, [r7, #15]
      break;
 800243c:	e004      	b.n	8002448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800243e:	bf00      	nop
 8002440:	e002      	b.n	8002448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002442:	bf00      	nop
 8002444:	e000      	b.n	8002448 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002446:	bf00      	nop
    }

    if(status == HAL_OK)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d10d      	bne.n	800246a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800244e:	4b4a      	ldr	r3, [pc, #296]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002450:	68db      	ldr	r3, [r3, #12]
 8002452:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6819      	ldr	r1, [r3, #0]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	3b01      	subs	r3, #1
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	430b      	orrs	r3, r1
 8002464:	4944      	ldr	r1, [pc, #272]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800246a:	7bfb      	ldrb	r3, [r7, #15]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d17d      	bne.n	800256c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002470:	4b41      	ldr	r3, [pc, #260]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a40      	ldr	r2, [pc, #256]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002476:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800247a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800247c:	f7fe fb5a 	bl	8000b34 <HAL_GetTick>
 8002480:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002482:	e009      	b.n	8002498 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002484:	f7fe fb56 	bl	8000b34 <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	2b02      	cmp	r3, #2
 8002490:	d902      	bls.n	8002498 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002492:	2303      	movs	r3, #3
 8002494:	73fb      	strb	r3, [r7, #15]
        break;
 8002496:	e005      	b.n	80024a4 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002498:	4b37      	ldr	r3, [pc, #220]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d1ef      	bne.n	8002484 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80024a4:	7bfb      	ldrb	r3, [r7, #15]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d160      	bne.n	800256c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d111      	bne.n	80024d4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b0:	4b31      	ldr	r3, [pc, #196]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80024b8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6892      	ldr	r2, [r2, #8]
 80024c0:	0211      	lsls	r1, r2, #8
 80024c2:	687a      	ldr	r2, [r7, #4]
 80024c4:	68d2      	ldr	r2, [r2, #12]
 80024c6:	0912      	lsrs	r2, r2, #4
 80024c8:	0452      	lsls	r2, r2, #17
 80024ca:	430a      	orrs	r2, r1
 80024cc:	492a      	ldr	r1, [pc, #168]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	610b      	str	r3, [r1, #16]
 80024d2:	e027      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d112      	bne.n	8002500 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024da:	4b27      	ldr	r3, [pc, #156]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80024e2:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	6892      	ldr	r2, [r2, #8]
 80024ea:	0211      	lsls	r1, r2, #8
 80024ec:	687a      	ldr	r2, [r7, #4]
 80024ee:	6912      	ldr	r2, [r2, #16]
 80024f0:	0852      	lsrs	r2, r2, #1
 80024f2:	3a01      	subs	r2, #1
 80024f4:	0552      	lsls	r2, r2, #21
 80024f6:	430a      	orrs	r2, r1
 80024f8:	491f      	ldr	r1, [pc, #124]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	610b      	str	r3, [r1, #16]
 80024fe:	e011      	b.n	8002524 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002500:	4b1d      	ldr	r3, [pc, #116]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8002508:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6892      	ldr	r2, [r2, #8]
 8002510:	0211      	lsls	r1, r2, #8
 8002512:	687a      	ldr	r2, [r7, #4]
 8002514:	6952      	ldr	r2, [r2, #20]
 8002516:	0852      	lsrs	r2, r2, #1
 8002518:	3a01      	subs	r2, #1
 800251a:	0652      	lsls	r2, r2, #25
 800251c:	430a      	orrs	r2, r1
 800251e:	4916      	ldr	r1, [pc, #88]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002520:	4313      	orrs	r3, r2
 8002522:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002524:	4b14      	ldr	r3, [pc, #80]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a13      	ldr	r2, [pc, #76]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800252a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800252e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002530:	f7fe fb00 	bl	8000b34 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002536:	e009      	b.n	800254c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002538:	f7fe fafc 	bl	8000b34 <HAL_GetTick>
 800253c:	4602      	mov	r2, r0
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	1ad3      	subs	r3, r2, r3
 8002542:	2b02      	cmp	r3, #2
 8002544:	d902      	bls.n	800254c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	73fb      	strb	r3, [r7, #15]
          break;
 800254a:	e005      	b.n	8002558 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800254c:	4b0a      	ldr	r3, [pc, #40]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0ef      	beq.n	8002538 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002558:	7bfb      	ldrb	r3, [r7, #15]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d106      	bne.n	800256c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800255e:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002560:	691a      	ldr	r2, [r3, #16]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	4904      	ldr	r1, [pc, #16]	@ (8002578 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800256c:	7bfb      	ldrb	r3, [r7, #15]
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000

0800257c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
 8002584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002586:	2300      	movs	r3, #0
 8002588:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800258a:	4b6a      	ldr	r3, [pc, #424]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800258c:	68db      	ldr	r3, [r3, #12]
 800258e:	f003 0303 	and.w	r3, r3, #3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d018      	beq.n	80025c8 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002596:	4b67      	ldr	r3, [pc, #412]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	f003 0203 	and.w	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d10d      	bne.n	80025c2 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
       ||
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80025ae:	4b61      	ldr	r3, [pc, #388]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	091b      	lsrs	r3, r3, #4
 80025b4:	f003 0307 	and.w	r3, r3, #7
 80025b8:	1c5a      	adds	r2, r3, #1
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
       ||
 80025be:	429a      	cmp	r2, r3
 80025c0:	d047      	beq.n	8002652 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	73fb      	strb	r3, [r7, #15]
 80025c6:	e044      	b.n	8002652 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b03      	cmp	r3, #3
 80025ce:	d018      	beq.n	8002602 <RCCEx_PLLSAI2_Config+0x86>
 80025d0:	2b03      	cmp	r3, #3
 80025d2:	d825      	bhi.n	8002620 <RCCEx_PLLSAI2_Config+0xa4>
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d002      	beq.n	80025de <RCCEx_PLLSAI2_Config+0x62>
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d009      	beq.n	80025f0 <RCCEx_PLLSAI2_Config+0x74>
 80025dc:	e020      	b.n	8002620 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80025de:	4b55      	ldr	r3, [pc, #340]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 0302 	and.w	r3, r3, #2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d11d      	bne.n	8002626 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025ee:	e01a      	b.n	8002626 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80025f0:	4b50      	ldr	r3, [pc, #320]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d116      	bne.n	800262a <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80025fc:	2301      	movs	r3, #1
 80025fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002600:	e013      	b.n	800262a <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002602:	4b4c      	ldr	r3, [pc, #304]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800260a:	2b00      	cmp	r3, #0
 800260c:	d10f      	bne.n	800262e <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800260e:	4b49      	ldr	r3, [pc, #292]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d109      	bne.n	800262e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800261e:	e006      	b.n	800262e <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002620:	2301      	movs	r3, #1
 8002622:	73fb      	strb	r3, [r7, #15]
      break;
 8002624:	e004      	b.n	8002630 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002626:	bf00      	nop
 8002628:	e002      	b.n	8002630 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800262e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10d      	bne.n	8002652 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002636:	4b3f      	ldr	r3, [pc, #252]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6819      	ldr	r1, [r3, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	3b01      	subs	r3, #1
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	430b      	orrs	r3, r1
 800264c:	4939      	ldr	r1, [pc, #228]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002652:	7bfb      	ldrb	r3, [r7, #15]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d167      	bne.n	8002728 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002658:	4b36      	ldr	r3, [pc, #216]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	4a35      	ldr	r2, [pc, #212]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800265e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002662:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002664:	f7fe fa66 	bl	8000b34 <HAL_GetTick>
 8002668:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800266a:	e009      	b.n	8002680 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800266c:	f7fe fa62 	bl	8000b34 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b02      	cmp	r3, #2
 8002678:	d902      	bls.n	8002680 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800267a:	2303      	movs	r3, #3
 800267c:	73fb      	strb	r3, [r7, #15]
        break;
 800267e:	e005      	b.n	800268c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002680:	4b2c      	ldr	r3, [pc, #176]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d1ef      	bne.n	800266c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d14a      	bne.n	8002728 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d111      	bne.n	80026bc <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002698:	4b26      	ldr	r3, [pc, #152]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800269a:	695b      	ldr	r3, [r3, #20]
 800269c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80026a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	6892      	ldr	r2, [r2, #8]
 80026a8:	0211      	lsls	r1, r2, #8
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	68d2      	ldr	r2, [r2, #12]
 80026ae:	0912      	lsrs	r2, r2, #4
 80026b0:	0452      	lsls	r2, r2, #17
 80026b2:	430a      	orrs	r2, r1
 80026b4:	491f      	ldr	r1, [pc, #124]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	614b      	str	r3, [r1, #20]
 80026ba:	e011      	b.n	80026e0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80026bc:	4b1d      	ldr	r3, [pc, #116]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026be:	695b      	ldr	r3, [r3, #20]
 80026c0:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80026c4:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	6892      	ldr	r2, [r2, #8]
 80026cc:	0211      	lsls	r1, r2, #8
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	6912      	ldr	r2, [r2, #16]
 80026d2:	0852      	lsrs	r2, r2, #1
 80026d4:	3a01      	subs	r2, #1
 80026d6:	0652      	lsls	r2, r2, #25
 80026d8:	430a      	orrs	r2, r1
 80026da:	4916      	ldr	r1, [pc, #88]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026dc:	4313      	orrs	r3, r2
 80026de:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80026e0:	4b14      	ldr	r3, [pc, #80]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a13      	ldr	r2, [pc, #76]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 80026e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ec:	f7fe fa22 	bl	8000b34 <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80026f2:	e009      	b.n	8002708 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80026f4:	f7fe fa1e 	bl	8000b34 <HAL_GetTick>
 80026f8:	4602      	mov	r2, r0
 80026fa:	68bb      	ldr	r3, [r7, #8]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	2b02      	cmp	r3, #2
 8002700:	d902      	bls.n	8002708 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	73fb      	strb	r3, [r7, #15]
          break;
 8002706:	e005      	b.n	8002714 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002708:	4b0a      	ldr	r3, [pc, #40]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002710:	2b00      	cmp	r3, #0
 8002712:	d0ef      	beq.n	80026f4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002714:	7bfb      	ldrb	r3, [r7, #15]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d106      	bne.n	8002728 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800271a:	4b06      	ldr	r3, [pc, #24]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 800271c:	695a      	ldr	r2, [r3, #20]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	4904      	ldr	r1, [pc, #16]	@ (8002734 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002724:	4313      	orrs	r3, r2
 8002726:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3710      	adds	r7, #16
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	40021000 	.word	0x40021000

08002738 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b082      	sub	sp, #8
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d101      	bne.n	800274a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e049      	b.n	80027de <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002750:	b2db      	uxtb	r3, r3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d106      	bne.n	8002764 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f841 	bl	80027e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2202      	movs	r2, #2
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681a      	ldr	r2, [r3, #0]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	3304      	adds	r3, #4
 8002774:	4619      	mov	r1, r3
 8002776:	4610      	mov	r0, r2
 8002778:	f000 f9e0 	bl	8002b3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2201      	movs	r2, #1
 8002780:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2201      	movs	r2, #1
 8002788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80027fc:	b480      	push	{r7}
 80027fe:	b085      	sub	sp, #20
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b01      	cmp	r3, #1
 800280e:	d001      	beq.n	8002814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e04f      	b.n	80028b4 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0201 	orr.w	r2, r2, #1
 800282a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a23      	ldr	r2, [pc, #140]	@ (80028c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d01d      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800283e:	d018      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a1f      	ldr	r2, [pc, #124]	@ (80028c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d013      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a1e      	ldr	r2, [pc, #120]	@ (80028c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d00e      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a1c      	ldr	r2, [pc, #112]	@ (80028cc <HAL_TIM_Base_Start_IT+0xd0>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d009      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a1b      	ldr	r2, [pc, #108]	@ (80028d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d004      	beq.n	8002872 <HAL_TIM_Base_Start_IT+0x76>
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a19      	ldr	r2, [pc, #100]	@ (80028d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d115      	bne.n	800289e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	689a      	ldr	r2, [r3, #8]
 8002878:	4b17      	ldr	r3, [pc, #92]	@ (80028d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800287a:	4013      	ands	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	2b06      	cmp	r3, #6
 8002882:	d015      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0xb4>
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800288a:	d011      	beq.n	80028b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f042 0201 	orr.w	r2, r2, #1
 800289a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289c:	e008      	b.n	80028b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f042 0201 	orr.w	r2, r2, #1
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	e000      	b.n	80028b2 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028b2:	2300      	movs	r3, #0
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	3714      	adds	r7, #20
 80028b8:	46bd      	mov	sp, r7
 80028ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028be:	4770      	bx	lr
 80028c0:	40012c00 	.word	0x40012c00
 80028c4:	40000400 	.word	0x40000400
 80028c8:	40000800 	.word	0x40000800
 80028cc:	40000c00 	.word	0x40000c00
 80028d0:	40013400 	.word	0x40013400
 80028d4:	40014000 	.word	0x40014000
 80028d8:	00010007 	.word	0x00010007

080028dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b084      	sub	sp, #16
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	691b      	ldr	r3, [r3, #16]
 80028f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d020      	beq.n	8002940 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d01b      	beq.n	8002940 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0202 	mvn.w	r2, #2
 8002910:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	2201      	movs	r2, #1
 8002916:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f003 0303 	and.w	r3, r3, #3
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f000 f8e9 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 800292c:	e005      	b.n	800293a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f000 f8db 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002934:	6878      	ldr	r0, [r7, #4]
 8002936:	f000 f8ec 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	2200      	movs	r2, #0
 800293e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b00      	cmp	r3, #0
 8002948:	d020      	beq.n	800298c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f06f 0204 	mvn.w	r2, #4
 800295c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	2202      	movs	r2, #2
 8002962:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800296e:	2b00      	cmp	r3, #0
 8002970:	d003      	beq.n	800297a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002972:	6878      	ldr	r0, [r7, #4]
 8002974:	f000 f8c3 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 8002978:	e005      	b.n	8002986 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f000 f8b5 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 f8c6 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	2200      	movs	r2, #0
 800298a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	f003 0308 	and.w	r3, r3, #8
 8002992:	2b00      	cmp	r3, #0
 8002994:	d020      	beq.n	80029d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	f003 0308 	and.w	r3, r3, #8
 800299c:	2b00      	cmp	r3, #0
 800299e:	d01b      	beq.n	80029d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f06f 0208 	mvn.w	r2, #8
 80029a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2204      	movs	r2, #4
 80029ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	69db      	ldr	r3, [r3, #28]
 80029b6:	f003 0303 	and.w	r3, r3, #3
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d003      	beq.n	80029c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	f000 f89d 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 80029c4:	e005      	b.n	80029d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 f88f 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8a0 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	f003 0310 	and.w	r3, r3, #16
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d020      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	f003 0310 	and.w	r3, r3, #16
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d01b      	beq.n	8002a24 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0210 	mvn.w	r2, #16
 80029f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2208      	movs	r2, #8
 80029fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f877 	bl	8002afe <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f869 	bl	8002aea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f87a 	bl	8002b12 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00c      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f003 0301 	and.w	r3, r3, #1
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d007      	beq.n	8002a48 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f06f 0201 	mvn.w	r2, #1
 8002a40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7fd feca 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d104      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d00c      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d007      	beq.n	8002a76 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002a6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a70:	6878      	ldr	r0, [r7, #4]
 8002a72:	f000 f913 	bl	8002c9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d00c      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d007      	beq.n	8002a9a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002a92:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f90b 	bl	8002cb0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00c      	beq.n	8002abe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d007      	beq.n	8002abe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f834 	bl	8002b26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	f003 0320 	and.w	r3, r3, #32
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d00c      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f003 0320 	and.w	r3, r3, #32
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d007      	beq.n	8002ae2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f06f 0220 	mvn.w	r2, #32
 8002ada:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f8d3 	bl	8002c88 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002aea:	b480      	push	{r7}
 8002aec:	b083      	sub	sp, #12
 8002aee:	af00      	add	r7, sp, #0
 8002af0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr

08002afe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002afe:	b480      	push	{r7}
 8002b00:	b083      	sub	sp, #12
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr

08002b12 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b12:	b480      	push	{r7}
 8002b14:	b083      	sub	sp, #12
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr

08002b26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b26:	b480      	push	{r7}
 8002b28:	b083      	sub	sp, #12
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b2e:	bf00      	nop
 8002b30:	370c      	adds	r7, #12
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
	...

08002b3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a46      	ldr	r2, [pc, #280]	@ (8002c68 <TIM_Base_SetConfig+0x12c>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d013      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b5a:	d00f      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a43      	ldr	r2, [pc, #268]	@ (8002c6c <TIM_Base_SetConfig+0x130>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a42      	ldr	r2, [pc, #264]	@ (8002c70 <TIM_Base_SetConfig+0x134>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d007      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a41      	ldr	r2, [pc, #260]	@ (8002c74 <TIM_Base_SetConfig+0x138>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d003      	beq.n	8002b7c <TIM_Base_SetConfig+0x40>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a40      	ldr	r2, [pc, #256]	@ (8002c78 <TIM_Base_SetConfig+0x13c>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d108      	bne.n	8002b8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	68fa      	ldr	r2, [r7, #12]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a35      	ldr	r2, [pc, #212]	@ (8002c68 <TIM_Base_SetConfig+0x12c>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01f      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9c:	d01b      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a32      	ldr	r2, [pc, #200]	@ (8002c6c <TIM_Base_SetConfig+0x130>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d017      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a31      	ldr	r2, [pc, #196]	@ (8002c70 <TIM_Base_SetConfig+0x134>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a30      	ldr	r2, [pc, #192]	@ (8002c74 <TIM_Base_SetConfig+0x138>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00f      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2f      	ldr	r2, [pc, #188]	@ (8002c78 <TIM_Base_SetConfig+0x13c>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2e      	ldr	r2, [pc, #184]	@ (8002c7c <TIM_Base_SetConfig+0x140>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2d      	ldr	r2, [pc, #180]	@ (8002c80 <TIM_Base_SetConfig+0x144>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_Base_SetConfig+0x9a>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a2c      	ldr	r2, [pc, #176]	@ (8002c84 <TIM_Base_SetConfig+0x148>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d108      	bne.n	8002be8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a16      	ldr	r2, [pc, #88]	@ (8002c68 <TIM_Base_SetConfig+0x12c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00f      	beq.n	8002c34 <TIM_Base_SetConfig+0xf8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a18      	ldr	r2, [pc, #96]	@ (8002c78 <TIM_Base_SetConfig+0x13c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00b      	beq.n	8002c34 <TIM_Base_SetConfig+0xf8>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a17      	ldr	r2, [pc, #92]	@ (8002c7c <TIM_Base_SetConfig+0x140>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d007      	beq.n	8002c34 <TIM_Base_SetConfig+0xf8>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a16      	ldr	r2, [pc, #88]	@ (8002c80 <TIM_Base_SetConfig+0x144>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_Base_SetConfig+0xf8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a15      	ldr	r2, [pc, #84]	@ (8002c84 <TIM_Base_SetConfig+0x148>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d103      	bne.n	8002c3c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d105      	bne.n	8002c5a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	691b      	ldr	r3, [r3, #16]
 8002c52:	f023 0201 	bic.w	r2, r3, #1
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	611a      	str	r2, [r3, #16]
  }
}
 8002c5a:	bf00      	nop
 8002c5c:	3714      	adds	r7, #20
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	40012c00 	.word	0x40012c00
 8002c6c:	40000400 	.word	0x40000400
 8002c70:	40000800 	.word	0x40000800
 8002c74:	40000c00 	.word	0x40000c00
 8002c78:	40013400 	.word	0x40013400
 8002c7c:	40014000 	.word	0x40014000
 8002c80:	40014400 	.word	0x40014400
 8002c84:	40014800 	.word	0x40014800

08002c88 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002cb8:	bf00      	nop
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b082      	sub	sp, #8
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e040      	b.n	8002d58 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d106      	bne.n	8002cec <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ce6:	6878      	ldr	r0, [r7, #4]
 8002ce8:	f7fd fdb8 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2224      	movs	r2, #36	@ 0x24
 8002cf0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	681a      	ldr	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f022 0201 	bic.w	r2, r2, #1
 8002d00:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fae0 	bl	80032d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 f825 	bl	8002d60 <UART_SetConfig>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d101      	bne.n	8002d20 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e01b      	b.n	8002d58 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002d2e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689a      	ldr	r2, [r3, #8]
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d3e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 fb5f 	bl	8003414 <UART_CheckIdleState>
 8002d56:	4603      	mov	r3, r0
}
 8002d58:	4618      	mov	r0, r3
 8002d5a:	3708      	adds	r7, #8
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	bd80      	pop	{r7, pc}

08002d60 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d64:	b08a      	sub	sp, #40	@ 0x28
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	689a      	ldr	r2, [r3, #8]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	695b      	ldr	r3, [r3, #20]
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	69db      	ldr	r3, [r3, #28]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	4ba4      	ldr	r3, [pc, #656]	@ (8003020 <UART_SetConfig+0x2c0>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	68fa      	ldr	r2, [r7, #12]
 8002d94:	6812      	ldr	r2, [r2, #0]
 8002d96:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002d98:	430b      	orrs	r3, r1
 8002d9a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	699b      	ldr	r3, [r3, #24]
 8002db6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a99      	ldr	r2, [pc, #612]	@ (8003024 <UART_SetConfig+0x2c4>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d004      	beq.n	8002dcc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	6a1b      	ldr	r3, [r3, #32]
 8002dc6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002ddc:	430a      	orrs	r2, r1
 8002dde:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a90      	ldr	r2, [pc, #576]	@ (8003028 <UART_SetConfig+0x2c8>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d126      	bne.n	8002e38 <UART_SetConfig+0xd8>
 8002dea:	4b90      	ldr	r3, [pc, #576]	@ (800302c <UART_SetConfig+0x2cc>)
 8002dec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002df0:	f003 0303 	and.w	r3, r3, #3
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d81b      	bhi.n	8002e30 <UART_SetConfig+0xd0>
 8002df8:	a201      	add	r2, pc, #4	@ (adr r2, 8002e00 <UART_SetConfig+0xa0>)
 8002dfa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dfe:	bf00      	nop
 8002e00:	08002e11 	.word	0x08002e11
 8002e04:	08002e21 	.word	0x08002e21
 8002e08:	08002e19 	.word	0x08002e19
 8002e0c:	08002e29 	.word	0x08002e29
 8002e10:	2301      	movs	r3, #1
 8002e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e16:	e116      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e18:	2302      	movs	r3, #2
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e1e:	e112      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e20:	2304      	movs	r3, #4
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e26:	e10e      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e28:	2308      	movs	r3, #8
 8002e2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e2e:	e10a      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e30:	2310      	movs	r3, #16
 8002e32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e36:	e106      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a7c      	ldr	r2, [pc, #496]	@ (8003030 <UART_SetConfig+0x2d0>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d138      	bne.n	8002eb4 <UART_SetConfig+0x154>
 8002e42:	4b7a      	ldr	r3, [pc, #488]	@ (800302c <UART_SetConfig+0x2cc>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b0c      	cmp	r3, #12
 8002e4e:	d82d      	bhi.n	8002eac <UART_SetConfig+0x14c>
 8002e50:	a201      	add	r2, pc, #4	@ (adr r2, 8002e58 <UART_SetConfig+0xf8>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002e8d 	.word	0x08002e8d
 8002e5c:	08002ead 	.word	0x08002ead
 8002e60:	08002ead 	.word	0x08002ead
 8002e64:	08002ead 	.word	0x08002ead
 8002e68:	08002e9d 	.word	0x08002e9d
 8002e6c:	08002ead 	.word	0x08002ead
 8002e70:	08002ead 	.word	0x08002ead
 8002e74:	08002ead 	.word	0x08002ead
 8002e78:	08002e95 	.word	0x08002e95
 8002e7c:	08002ead 	.word	0x08002ead
 8002e80:	08002ead 	.word	0x08002ead
 8002e84:	08002ead 	.word	0x08002ead
 8002e88:	08002ea5 	.word	0x08002ea5
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e92:	e0d8      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e94:	2302      	movs	r3, #2
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e9a:	e0d4      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002e9c:	2304      	movs	r3, #4
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ea2:	e0d0      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002ea4:	2308      	movs	r3, #8
 8002ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eaa:	e0cc      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002eac:	2310      	movs	r3, #16
 8002eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eb2:	e0c8      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a5e      	ldr	r2, [pc, #376]	@ (8003034 <UART_SetConfig+0x2d4>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d125      	bne.n	8002f0a <UART_SetConfig+0x1aa>
 8002ebe:	4b5b      	ldr	r3, [pc, #364]	@ (800302c <UART_SetConfig+0x2cc>)
 8002ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ec4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002ec8:	2b30      	cmp	r3, #48	@ 0x30
 8002eca:	d016      	beq.n	8002efa <UART_SetConfig+0x19a>
 8002ecc:	2b30      	cmp	r3, #48	@ 0x30
 8002ece:	d818      	bhi.n	8002f02 <UART_SetConfig+0x1a2>
 8002ed0:	2b20      	cmp	r3, #32
 8002ed2:	d00a      	beq.n	8002eea <UART_SetConfig+0x18a>
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d814      	bhi.n	8002f02 <UART_SetConfig+0x1a2>
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <UART_SetConfig+0x182>
 8002edc:	2b10      	cmp	r3, #16
 8002ede:	d008      	beq.n	8002ef2 <UART_SetConfig+0x192>
 8002ee0:	e00f      	b.n	8002f02 <UART_SetConfig+0x1a2>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ee8:	e0ad      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002eea:	2302      	movs	r3, #2
 8002eec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ef0:	e0a9      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002ef2:	2304      	movs	r3, #4
 8002ef4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ef8:	e0a5      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002efa:	2308      	movs	r3, #8
 8002efc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f00:	e0a1      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f02:	2310      	movs	r3, #16
 8002f04:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f08:	e09d      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a4a      	ldr	r2, [pc, #296]	@ (8003038 <UART_SetConfig+0x2d8>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d125      	bne.n	8002f60 <UART_SetConfig+0x200>
 8002f14:	4b45      	ldr	r3, [pc, #276]	@ (800302c <UART_SetConfig+0x2cc>)
 8002f16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f1a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002f1e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f20:	d016      	beq.n	8002f50 <UART_SetConfig+0x1f0>
 8002f22:	2bc0      	cmp	r3, #192	@ 0xc0
 8002f24:	d818      	bhi.n	8002f58 <UART_SetConfig+0x1f8>
 8002f26:	2b80      	cmp	r3, #128	@ 0x80
 8002f28:	d00a      	beq.n	8002f40 <UART_SetConfig+0x1e0>
 8002f2a:	2b80      	cmp	r3, #128	@ 0x80
 8002f2c:	d814      	bhi.n	8002f58 <UART_SetConfig+0x1f8>
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d002      	beq.n	8002f38 <UART_SetConfig+0x1d8>
 8002f32:	2b40      	cmp	r3, #64	@ 0x40
 8002f34:	d008      	beq.n	8002f48 <UART_SetConfig+0x1e8>
 8002f36:	e00f      	b.n	8002f58 <UART_SetConfig+0x1f8>
 8002f38:	2300      	movs	r3, #0
 8002f3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f3e:	e082      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f40:	2302      	movs	r3, #2
 8002f42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f46:	e07e      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f4e:	e07a      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f50:	2308      	movs	r3, #8
 8002f52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f56:	e076      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f58:	2310      	movs	r3, #16
 8002f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f5e:	e072      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a35      	ldr	r2, [pc, #212]	@ (800303c <UART_SetConfig+0x2dc>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d12a      	bne.n	8002fc0 <UART_SetConfig+0x260>
 8002f6a:	4b30      	ldr	r3, [pc, #192]	@ (800302c <UART_SetConfig+0x2cc>)
 8002f6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f74:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f78:	d01a      	beq.n	8002fb0 <UART_SetConfig+0x250>
 8002f7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f7e:	d81b      	bhi.n	8002fb8 <UART_SetConfig+0x258>
 8002f80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f84:	d00c      	beq.n	8002fa0 <UART_SetConfig+0x240>
 8002f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002f8a:	d815      	bhi.n	8002fb8 <UART_SetConfig+0x258>
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <UART_SetConfig+0x238>
 8002f90:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002f94:	d008      	beq.n	8002fa8 <UART_SetConfig+0x248>
 8002f96:	e00f      	b.n	8002fb8 <UART_SetConfig+0x258>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f9e:	e052      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002fa0:	2302      	movs	r3, #2
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fa6:	e04e      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002fa8:	2304      	movs	r3, #4
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fae:	e04a      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002fb0:	2308      	movs	r3, #8
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fb6:	e046      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002fb8:	2310      	movs	r3, #16
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002fbe:	e042      	b.n	8003046 <UART_SetConfig+0x2e6>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a17      	ldr	r2, [pc, #92]	@ (8003024 <UART_SetConfig+0x2c4>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d13a      	bne.n	8003040 <UART_SetConfig+0x2e0>
 8002fca:	4b18      	ldr	r3, [pc, #96]	@ (800302c <UART_SetConfig+0x2cc>)
 8002fcc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fd0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002fd4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fd8:	d01a      	beq.n	8003010 <UART_SetConfig+0x2b0>
 8002fda:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002fde:	d81b      	bhi.n	8003018 <UART_SetConfig+0x2b8>
 8002fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fe4:	d00c      	beq.n	8003000 <UART_SetConfig+0x2a0>
 8002fe6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002fea:	d815      	bhi.n	8003018 <UART_SetConfig+0x2b8>
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d003      	beq.n	8002ff8 <UART_SetConfig+0x298>
 8002ff0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ff4:	d008      	beq.n	8003008 <UART_SetConfig+0x2a8>
 8002ff6:	e00f      	b.n	8003018 <UART_SetConfig+0x2b8>
 8002ff8:	2300      	movs	r3, #0
 8002ffa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ffe:	e022      	b.n	8003046 <UART_SetConfig+0x2e6>
 8003000:	2302      	movs	r3, #2
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003006:	e01e      	b.n	8003046 <UART_SetConfig+0x2e6>
 8003008:	2304      	movs	r3, #4
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800300e:	e01a      	b.n	8003046 <UART_SetConfig+0x2e6>
 8003010:	2308      	movs	r3, #8
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8003016:	e016      	b.n	8003046 <UART_SetConfig+0x2e6>
 8003018:	2310      	movs	r3, #16
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800301e:	e012      	b.n	8003046 <UART_SetConfig+0x2e6>
 8003020:	efff69f3 	.word	0xefff69f3
 8003024:	40008000 	.word	0x40008000
 8003028:	40013800 	.word	0x40013800
 800302c:	40021000 	.word	0x40021000
 8003030:	40004400 	.word	0x40004400
 8003034:	40004800 	.word	0x40004800
 8003038:	40004c00 	.word	0x40004c00
 800303c:	40005000 	.word	0x40005000
 8003040:	2310      	movs	r3, #16
 8003042:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a9f      	ldr	r2, [pc, #636]	@ (80032c8 <UART_SetConfig+0x568>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d17a      	bne.n	8003146 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003050:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003054:	2b08      	cmp	r3, #8
 8003056:	d824      	bhi.n	80030a2 <UART_SetConfig+0x342>
 8003058:	a201      	add	r2, pc, #4	@ (adr r2, 8003060 <UART_SetConfig+0x300>)
 800305a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800305e:	bf00      	nop
 8003060:	08003085 	.word	0x08003085
 8003064:	080030a3 	.word	0x080030a3
 8003068:	0800308d 	.word	0x0800308d
 800306c:	080030a3 	.word	0x080030a3
 8003070:	08003093 	.word	0x08003093
 8003074:	080030a3 	.word	0x080030a3
 8003078:	080030a3 	.word	0x080030a3
 800307c:	080030a3 	.word	0x080030a3
 8003080:	0800309b 	.word	0x0800309b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003084:	f7fe fdde 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8003088:	61f8      	str	r0, [r7, #28]
        break;
 800308a:	e010      	b.n	80030ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800308c:	4b8f      	ldr	r3, [pc, #572]	@ (80032cc <UART_SetConfig+0x56c>)
 800308e:	61fb      	str	r3, [r7, #28]
        break;
 8003090:	e00d      	b.n	80030ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003092:	f7fe fd3f 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 8003096:	61f8      	str	r0, [r7, #28]
        break;
 8003098:	e009      	b.n	80030ae <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800309a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800309e:	61fb      	str	r3, [r7, #28]
        break;
 80030a0:	e005      	b.n	80030ae <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80030a2:	2300      	movs	r3, #0
 80030a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80030ac:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	f000 80fb 	beq.w	80032ac <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	685a      	ldr	r2, [r3, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	4413      	add	r3, r2
 80030c0:	69fa      	ldr	r2, [r7, #28]
 80030c2:	429a      	cmp	r2, r3
 80030c4:	d305      	bcc.n	80030d2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030cc:	69fa      	ldr	r2, [r7, #28]
 80030ce:	429a      	cmp	r2, r3
 80030d0:	d903      	bls.n	80030da <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030d8:	e0e8      	b.n	80032ac <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030da:	69fb      	ldr	r3, [r7, #28]
 80030dc:	2200      	movs	r2, #0
 80030de:	461c      	mov	r4, r3
 80030e0:	4615      	mov	r5, r2
 80030e2:	f04f 0200 	mov.w	r2, #0
 80030e6:	f04f 0300 	mov.w	r3, #0
 80030ea:	022b      	lsls	r3, r5, #8
 80030ec:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80030f0:	0222      	lsls	r2, r4, #8
 80030f2:	68f9      	ldr	r1, [r7, #12]
 80030f4:	6849      	ldr	r1, [r1, #4]
 80030f6:	0849      	lsrs	r1, r1, #1
 80030f8:	2000      	movs	r0, #0
 80030fa:	4688      	mov	r8, r1
 80030fc:	4681      	mov	r9, r0
 80030fe:	eb12 0a08 	adds.w	sl, r2, r8
 8003102:	eb43 0b09 	adc.w	fp, r3, r9
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	685b      	ldr	r3, [r3, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	603b      	str	r3, [r7, #0]
 800310e:	607a      	str	r2, [r7, #4]
 8003110:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003114:	4650      	mov	r0, sl
 8003116:	4659      	mov	r1, fp
 8003118:	f7fd f85a 	bl	80001d0 <__aeabi_uldivmod>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4613      	mov	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800312a:	d308      	bcc.n	800313e <UART_SetConfig+0x3de>
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003132:	d204      	bcs.n	800313e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	60da      	str	r2, [r3, #12]
 800313c:	e0b6      	b.n	80032ac <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003144:	e0b2      	b.n	80032ac <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800314e:	d15e      	bne.n	800320e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003150:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003154:	2b08      	cmp	r3, #8
 8003156:	d828      	bhi.n	80031aa <UART_SetConfig+0x44a>
 8003158:	a201      	add	r2, pc, #4	@ (adr r2, 8003160 <UART_SetConfig+0x400>)
 800315a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800315e:	bf00      	nop
 8003160:	08003185 	.word	0x08003185
 8003164:	0800318d 	.word	0x0800318d
 8003168:	08003195 	.word	0x08003195
 800316c:	080031ab 	.word	0x080031ab
 8003170:	0800319b 	.word	0x0800319b
 8003174:	080031ab 	.word	0x080031ab
 8003178:	080031ab 	.word	0x080031ab
 800317c:	080031ab 	.word	0x080031ab
 8003180:	080031a3 	.word	0x080031a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003184:	f7fe fd5e 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8003188:	61f8      	str	r0, [r7, #28]
        break;
 800318a:	e014      	b.n	80031b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800318c:	f7fe fd70 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 8003190:	61f8      	str	r0, [r7, #28]
        break;
 8003192:	e010      	b.n	80031b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003194:	4b4d      	ldr	r3, [pc, #308]	@ (80032cc <UART_SetConfig+0x56c>)
 8003196:	61fb      	str	r3, [r7, #28]
        break;
 8003198:	e00d      	b.n	80031b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319a:	f7fe fcbb 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 800319e:	61f8      	str	r0, [r7, #28]
        break;
 80031a0:	e009      	b.n	80031b6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80031a6:	61fb      	str	r3, [r7, #28]
        break;
 80031a8:	e005      	b.n	80031b6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80031b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d077      	beq.n	80032ac <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005a      	lsls	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	441a      	add	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d916      	bls.n	8003206 <UART_SetConfig+0x4a6>
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031de:	d212      	bcs.n	8003206 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f023 030f 	bic.w	r3, r3, #15
 80031e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	8afb      	ldrh	r3, [r7, #22]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	8afa      	ldrh	r2, [r7, #22]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	e052      	b.n	80032ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800320c:	e04e      	b.n	80032ac <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800320e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003212:	2b08      	cmp	r3, #8
 8003214:	d827      	bhi.n	8003266 <UART_SetConfig+0x506>
 8003216:	a201      	add	r2, pc, #4	@ (adr r2, 800321c <UART_SetConfig+0x4bc>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003241 	.word	0x08003241
 8003220:	08003249 	.word	0x08003249
 8003224:	08003251 	.word	0x08003251
 8003228:	08003267 	.word	0x08003267
 800322c:	08003257 	.word	0x08003257
 8003230:	08003267 	.word	0x08003267
 8003234:	08003267 	.word	0x08003267
 8003238:	08003267 	.word	0x08003267
 800323c:	0800325f 	.word	0x0800325f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003240:	f7fe fd00 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8003244:	61f8      	str	r0, [r7, #28]
        break;
 8003246:	e014      	b.n	8003272 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003248:	f7fe fd12 	bl	8001c70 <HAL_RCC_GetPCLK2Freq>
 800324c:	61f8      	str	r0, [r7, #28]
        break;
 800324e:	e010      	b.n	8003272 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003250:	4b1e      	ldr	r3, [pc, #120]	@ (80032cc <UART_SetConfig+0x56c>)
 8003252:	61fb      	str	r3, [r7, #28]
        break;
 8003254:	e00d      	b.n	8003272 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003256:	f7fe fc5d 	bl	8001b14 <HAL_RCC_GetSysClockFreq>
 800325a:	61f8      	str	r0, [r7, #28]
        break;
 800325c:	e009      	b.n	8003272 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003262:	61fb      	str	r3, [r7, #28]
        break;
 8003264:	e005      	b.n	8003272 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003270:	bf00      	nop
    }

    if (pclk != 0U)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d019      	beq.n	80032ac <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	085a      	lsrs	r2, r3, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	441a      	add	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b0f      	cmp	r3, #15
 8003290:	d909      	bls.n	80032a6 <UART_SetConfig+0x546>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003298:	d205      	bcs.n	80032a6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60da      	str	r2, [r3, #12]
 80032a4:	e002      	b.n	80032ac <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80032b8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3728      	adds	r7, #40	@ 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c6:	bf00      	nop
 80032c8:	40008000 	.word	0x40008000
 80032cc:	00f42400 	.word	0x00f42400

080032d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032dc:	f003 0308 	and.w	r3, r3, #8
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d00a      	beq.n	80032fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032fe:	f003 0301 	and.w	r3, r3, #1
 8003302:	2b00      	cmp	r3, #0
 8003304:	d00a      	beq.n	800331c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	430a      	orrs	r2, r1
 800331a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003320:	f003 0302 	and.w	r3, r3, #2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00a      	beq.n	800333e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	430a      	orrs	r2, r1
 800333c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d00a      	beq.n	8003360 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003364:	f003 0310 	and.w	r3, r3, #16
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00a      	beq.n	8003382 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	430a      	orrs	r2, r1
 8003380:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	f003 0320 	and.w	r3, r3, #32
 800338a:	2b00      	cmp	r3, #0
 800338c:	d00a      	beq.n	80033a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d01a      	beq.n	80033e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	430a      	orrs	r2, r1
 80033c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033ce:	d10a      	bne.n	80033e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]
  }
}
 8003408:	bf00      	nop
 800340a:	370c      	adds	r7, #12
 800340c:	46bd      	mov	sp, r7
 800340e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003412:	4770      	bx	lr

08003414 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b098      	sub	sp, #96	@ 0x60
 8003418:	af02      	add	r7, sp, #8
 800341a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2200      	movs	r2, #0
 8003420:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003424:	f7fd fb86 	bl	8000b34 <HAL_GetTick>
 8003428:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0308 	and.w	r3, r3, #8
 8003434:	2b08      	cmp	r3, #8
 8003436:	d12e      	bne.n	8003496 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003438:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800343c:	9300      	str	r3, [sp, #0]
 800343e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003440:	2200      	movs	r2, #0
 8003442:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f88c 	bl	8003564 <UART_WaitOnFlagUntilTimeout>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d021      	beq.n	8003496 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003462:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003466:	653b      	str	r3, [r7, #80]	@ 0x50
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003470:	647b      	str	r3, [r7, #68]	@ 0x44
 8003472:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003476:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800347e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e6      	bne.n	8003452 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003492:	2303      	movs	r3, #3
 8003494:	e062      	b.n	800355c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0304 	and.w	r3, r3, #4
 80034a0:	2b04      	cmp	r3, #4
 80034a2:	d149      	bne.n	8003538 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80034a8:	9300      	str	r3, [sp, #0]
 80034aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80034ac:	2200      	movs	r2, #0
 80034ae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f856 	bl	8003564 <UART_WaitOnFlagUntilTimeout>
 80034b8:	4603      	mov	r3, r0
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d03c      	beq.n	8003538 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c6:	e853 3f00 	ldrex	r3, [r3]
 80034ca:	623b      	str	r3, [r7, #32]
   return(result);
 80034cc:	6a3b      	ldr	r3, [r7, #32]
 80034ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80034d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	461a      	mov	r2, r3
 80034da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80034dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80034de:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80034e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034e4:	e841 2300 	strex	r3, r2, [r1]
 80034e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80034ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d1e6      	bne.n	80034be <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	3308      	adds	r3, #8
 80034f6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034f8:	693b      	ldr	r3, [r7, #16]
 80034fa:	e853 3f00 	ldrex	r3, [r3]
 80034fe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f023 0301 	bic.w	r3, r3, #1
 8003506:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	3308      	adds	r3, #8
 800350e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003510:	61fa      	str	r2, [r7, #28]
 8003512:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003514:	69b9      	ldr	r1, [r7, #24]
 8003516:	69fa      	ldr	r2, [r7, #28]
 8003518:	e841 2300 	strex	r3, r2, [r1]
 800351c:	617b      	str	r3, [r7, #20]
   return(result);
 800351e:	697b      	ldr	r3, [r7, #20]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d1e5      	bne.n	80034f0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2220      	movs	r2, #32
 8003528:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003534:	2303      	movs	r3, #3
 8003536:	e011      	b.n	800355c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2220      	movs	r2, #32
 800353c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800355a:	2300      	movs	r3, #0
}
 800355c:	4618      	mov	r0, r3
 800355e:	3758      	adds	r7, #88	@ 0x58
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	60f8      	str	r0, [r7, #12]
 800356c:	60b9      	str	r1, [r7, #8]
 800356e:	603b      	str	r3, [r7, #0]
 8003570:	4613      	mov	r3, r2
 8003572:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003574:	e04f      	b.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800357c:	d04b      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800357e:	f7fd fad9 	bl	8000b34 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	429a      	cmp	r2, r3
 800358c:	d302      	bcc.n	8003594 <UART_WaitOnFlagUntilTimeout+0x30>
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003594:	2303      	movs	r3, #3
 8003596:	e04e      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f003 0304 	and.w	r3, r3, #4
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d037      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b80      	cmp	r3, #128	@ 0x80
 80035aa:	d034      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	2b40      	cmp	r3, #64	@ 0x40
 80035b0:	d031      	beq.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69db      	ldr	r3, [r3, #28]
 80035b8:	f003 0308 	and.w	r3, r3, #8
 80035bc:	2b08      	cmp	r3, #8
 80035be:	d110      	bne.n	80035e2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	2208      	movs	r2, #8
 80035c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 f838 	bl	800363e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2208      	movs	r2, #8
 80035d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2200      	movs	r2, #0
 80035da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e029      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69db      	ldr	r3, [r3, #28]
 80035e8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80035ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035f0:	d111      	bne.n	8003616 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80035fa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f000 f81e 	bl	800363e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	2220      	movs	r2, #32
 8003606:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	2200      	movs	r2, #0
 800360e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8003612:	2303      	movs	r3, #3
 8003614:	e00f      	b.n	8003636 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	69da      	ldr	r2, [r3, #28]
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	4013      	ands	r3, r2
 8003620:	68ba      	ldr	r2, [r7, #8]
 8003622:	429a      	cmp	r2, r3
 8003624:	bf0c      	ite	eq
 8003626:	2301      	moveq	r3, #1
 8003628:	2300      	movne	r3, #0
 800362a:	b2db      	uxtb	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	79fb      	ldrb	r3, [r7, #7]
 8003630:	429a      	cmp	r2, r3
 8003632:	d0a0      	beq.n	8003576 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}

0800363e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800363e:	b480      	push	{r7}
 8003640:	b095      	sub	sp, #84	@ 0x54
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800364e:	e853 3f00 	ldrex	r3, [r3]
 8003652:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003654:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003656:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800365a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003664:	643b      	str	r3, [r7, #64]	@ 0x40
 8003666:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003668:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800366a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800366c:	e841 2300 	strex	r3, r2, [r1]
 8003670:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003674:	2b00      	cmp	r3, #0
 8003676:	d1e6      	bne.n	8003646 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	3308      	adds	r3, #8
 800367e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	e853 3f00 	ldrex	r3, [r3]
 8003686:	61fb      	str	r3, [r7, #28]
   return(result);
 8003688:	69fb      	ldr	r3, [r7, #28]
 800368a:	f023 0301 	bic.w	r3, r3, #1
 800368e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	3308      	adds	r3, #8
 8003696:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003698:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800369a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800369c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800369e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036a0:	e841 2300 	strex	r3, r2, [r1]
 80036a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1e5      	bne.n	8003678 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d118      	bne.n	80036e6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	e853 3f00 	ldrex	r3, [r3]
 80036c0:	60bb      	str	r3, [r7, #8]
   return(result);
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	f023 0310 	bic.w	r3, r3, #16
 80036c8:	647b      	str	r3, [r7, #68]	@ 0x44
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	461a      	mov	r2, r3
 80036d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036d2:	61bb      	str	r3, [r7, #24]
 80036d4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036d6:	6979      	ldr	r1, [r7, #20]
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	e841 2300 	strex	r3, r2, [r1]
 80036de:	613b      	str	r3, [r7, #16]
   return(result);
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1e6      	bne.n	80036b4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80036fa:	bf00      	nop
 80036fc:	3754      	adds	r7, #84	@ 0x54
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
	...

08003708 <__NVIC_SetPriority>:
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	6039      	str	r1, [r7, #0]
 8003712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003718:	2b00      	cmp	r3, #0
 800371a:	db0a      	blt.n	8003732 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	b2da      	uxtb	r2, r3
 8003720:	490c      	ldr	r1, [pc, #48]	@ (8003754 <__NVIC_SetPriority+0x4c>)
 8003722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003726:	0112      	lsls	r2, r2, #4
 8003728:	b2d2      	uxtb	r2, r2
 800372a:	440b      	add	r3, r1
 800372c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003730:	e00a      	b.n	8003748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	b2da      	uxtb	r2, r3
 8003736:	4908      	ldr	r1, [pc, #32]	@ (8003758 <__NVIC_SetPriority+0x50>)
 8003738:	79fb      	ldrb	r3, [r7, #7]
 800373a:	f003 030f 	and.w	r3, r3, #15
 800373e:	3b04      	subs	r3, #4
 8003740:	0112      	lsls	r2, r2, #4
 8003742:	b2d2      	uxtb	r2, r2
 8003744:	440b      	add	r3, r1
 8003746:	761a      	strb	r2, [r3, #24]
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr
 8003754:	e000e100 	.word	0xe000e100
 8003758:	e000ed00 	.word	0xe000ed00

0800375c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800375c:	b580      	push	{r7, lr}
 800375e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003760:	4b05      	ldr	r3, [pc, #20]	@ (8003778 <SysTick_Handler+0x1c>)
 8003762:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003764:	f001 fd46 	bl	80051f4 <xTaskGetSchedulerState>
 8003768:	4603      	mov	r3, r0
 800376a:	2b01      	cmp	r3, #1
 800376c:	d001      	beq.n	8003772 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800376e:	f002 fb3b 	bl	8005de8 <xPortSysTickHandler>
  }
}
 8003772:	bf00      	nop
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	e000e010 	.word	0xe000e010

0800377c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800377c:	b580      	push	{r7, lr}
 800377e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003780:	2100      	movs	r1, #0
 8003782:	f06f 0004 	mvn.w	r0, #4
 8003786:	f7ff ffbf 	bl	8003708 <__NVIC_SetPriority>
#endif
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003796:	f3ef 8305 	mrs	r3, IPSR
 800379a:	603b      	str	r3, [r7, #0]
  return(result);
 800379c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80037a2:	f06f 0305 	mvn.w	r3, #5
 80037a6:	607b      	str	r3, [r7, #4]
 80037a8:	e00c      	b.n	80037c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80037aa:	4b0a      	ldr	r3, [pc, #40]	@ (80037d4 <osKernelInitialize+0x44>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d105      	bne.n	80037be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037b2:	4b08      	ldr	r3, [pc, #32]	@ (80037d4 <osKernelInitialize+0x44>)
 80037b4:	2201      	movs	r2, #1
 80037b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037b8:	2300      	movs	r3, #0
 80037ba:	607b      	str	r3, [r7, #4]
 80037bc:	e002      	b.n	80037c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80037be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037c4:	687b      	ldr	r3, [r7, #4]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	370c      	adds	r7, #12
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	20000164 	.word	0x20000164

080037d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037de:	f3ef 8305 	mrs	r3, IPSR
 80037e2:	603b      	str	r3, [r7, #0]
  return(result);
 80037e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d003      	beq.n	80037f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80037ea:	f06f 0305 	mvn.w	r3, #5
 80037ee:	607b      	str	r3, [r7, #4]
 80037f0:	e010      	b.n	8003814 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003820 <osKernelStart+0x48>)
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d109      	bne.n	800380e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037fa:	f7ff ffbf 	bl	800377c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037fe:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <osKernelStart+0x48>)
 8003800:	2202      	movs	r2, #2
 8003802:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003804:	f001 f892 	bl	800492c <vTaskStartScheduler>
      stat = osOK;
 8003808:	2300      	movs	r3, #0
 800380a:	607b      	str	r3, [r7, #4]
 800380c:	e002      	b.n	8003814 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800380e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003812:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003814:	687b      	ldr	r3, [r7, #4]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	20000164 	.word	0x20000164

08003824 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003824:	b580      	push	{r7, lr}
 8003826:	b08e      	sub	sp, #56	@ 0x38
 8003828:	af04      	add	r7, sp, #16
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003834:	f3ef 8305 	mrs	r3, IPSR
 8003838:	617b      	str	r3, [r7, #20]
  return(result);
 800383a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800383c:	2b00      	cmp	r3, #0
 800383e:	d17e      	bne.n	800393e <osThreadNew+0x11a>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d07b      	beq.n	800393e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003846:	2380      	movs	r3, #128	@ 0x80
 8003848:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800384a:	2318      	movs	r3, #24
 800384c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003852:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003856:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d045      	beq.n	80038ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d002      	beq.n	800386c <osThreadNew+0x48>
        name = attr->name;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	699b      	ldr	r3, [r3, #24]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	699b      	ldr	r3, [r3, #24]
 8003878:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d008      	beq.n	8003892 <osThreadNew+0x6e>
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	2b38      	cmp	r3, #56	@ 0x38
 8003884:	d805      	bhi.n	8003892 <osThreadNew+0x6e>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0301 	and.w	r3, r3, #1
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <osThreadNew+0x72>
        return (NULL);
 8003892:	2300      	movs	r3, #0
 8003894:	e054      	b.n	8003940 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	695b      	ldr	r3, [r3, #20]
 80038a2:	089b      	lsrs	r3, r3, #2
 80038a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	689b      	ldr	r3, [r3, #8]
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d00e      	beq.n	80038cc <osThreadNew+0xa8>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	2ba7      	cmp	r3, #167	@ 0xa7
 80038b4:	d90a      	bls.n	80038cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d006      	beq.n	80038cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	695b      	ldr	r3, [r3, #20]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d002      	beq.n	80038cc <osThreadNew+0xa8>
        mem = 1;
 80038c6:	2301      	movs	r3, #1
 80038c8:	61bb      	str	r3, [r7, #24]
 80038ca:	e010      	b.n	80038ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d10c      	bne.n	80038ee <osThreadNew+0xca>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d108      	bne.n	80038ee <osThreadNew+0xca>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d104      	bne.n	80038ee <osThreadNew+0xca>
          mem = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
 80038e8:	e001      	b.n	80038ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d110      	bne.n	8003916 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038fc:	9202      	str	r2, [sp, #8]
 80038fe:	9301      	str	r3, [sp, #4]
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	9300      	str	r3, [sp, #0]
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	6a3a      	ldr	r2, [r7, #32]
 8003908:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f000 fe1a 	bl	8004544 <xTaskCreateStatic>
 8003910:	4603      	mov	r3, r0
 8003912:	613b      	str	r3, [r7, #16]
 8003914:	e013      	b.n	800393e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003916:	69bb      	ldr	r3, [r7, #24]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d110      	bne.n	800393e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800391c:	6a3b      	ldr	r3, [r7, #32]
 800391e:	b29a      	uxth	r2, r3
 8003920:	f107 0310 	add.w	r3, r7, #16
 8003924:	9301      	str	r3, [sp, #4]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fe68 	bl	8004604 <xTaskCreate>
 8003934:	4603      	mov	r3, r0
 8003936:	2b01      	cmp	r3, #1
 8003938:	d001      	beq.n	800393e <osThreadNew+0x11a>
            hTask = NULL;
 800393a:	2300      	movs	r3, #0
 800393c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800393e:	693b      	ldr	r3, [r7, #16]
}
 8003940:	4618      	mov	r0, r3
 8003942:	3728      	adds	r7, #40	@ 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}

08003948 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003950:	f3ef 8305 	mrs	r3, IPSR
 8003954:	60bb      	str	r3, [r7, #8]
  return(result);
 8003956:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003958:	2b00      	cmp	r3, #0
 800395a:	d003      	beq.n	8003964 <osDelay+0x1c>
    stat = osErrorISR;
 800395c:	f06f 0305 	mvn.w	r3, #5
 8003960:	60fb      	str	r3, [r7, #12]
 8003962:	e007      	b.n	8003974 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003964:	2300      	movs	r3, #0
 8003966:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d002      	beq.n	8003974 <osDelay+0x2c>
      vTaskDelay(ticks);
 800396e:	6878      	ldr	r0, [r7, #4]
 8003970:	f000 ffa6 	bl	80048c0 <vTaskDelay>
    }
  }

  return (stat);
 8003974:	68fb      	ldr	r3, [r7, #12]
}
 8003976:	4618      	mov	r0, r3
 8003978:	3710      	adds	r7, #16
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}
	...

08003980 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003980:	b480      	push	{r7}
 8003982:	b085      	sub	sp, #20
 8003984:	af00      	add	r7, sp, #0
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	60b9      	str	r1, [r7, #8]
 800398a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4a07      	ldr	r2, [pc, #28]	@ (80039ac <vApplicationGetIdleTaskMemory+0x2c>)
 8003990:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	4a06      	ldr	r2, [pc, #24]	@ (80039b0 <vApplicationGetIdleTaskMemory+0x30>)
 8003996:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2280      	movs	r2, #128	@ 0x80
 800399c:	601a      	str	r2, [r3, #0]
}
 800399e:	bf00      	nop
 80039a0:	3714      	adds	r7, #20
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	20000168 	.word	0x20000168
 80039b0:	20000210 	.word	0x20000210

080039b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4a07      	ldr	r2, [pc, #28]	@ (80039e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80039c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4a06      	ldr	r2, [pc, #24]	@ (80039e4 <vApplicationGetTimerTaskMemory+0x30>)
 80039ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039d2:	601a      	str	r2, [r3, #0]
}
 80039d4:	bf00      	nop
 80039d6:	3714      	adds	r7, #20
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr
 80039e0:	20000410 	.word	0x20000410
 80039e4:	200004b8 	.word	0x200004b8

080039e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f103 0208 	add.w	r2, r3, #8
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003a00:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	f103 0208 	add.w	r2, r3, #8
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	f103 0208 	add.w	r2, r3, #8
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr

08003a28 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a36:	bf00      	nop
 8003a38:	370c      	adds	r7, #12
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a42:	b480      	push	{r7}
 8003a44:	b085      	sub	sp, #20
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	68fa      	ldr	r2, [r7, #12]
 8003a56:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	689a      	ldr	r2, [r3, #8]
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	683a      	ldr	r2, [r7, #0]
 8003a6c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	687a      	ldr	r2, [r7, #4]
 8003a72:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	1c5a      	adds	r2, r3, #1
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	601a      	str	r2, [r3, #0]
}
 8003a7e:	bf00      	nop
 8003a80:	3714      	adds	r7, #20
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	b085      	sub	sp, #20
 8003a8e:	af00      	add	r7, sp, #0
 8003a90:	6078      	str	r0, [r7, #4]
 8003a92:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003aa0:	d103      	bne.n	8003aaa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	691b      	ldr	r3, [r3, #16]
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	e00c      	b.n	8003ac4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	3308      	adds	r3, #8
 8003aae:	60fb      	str	r3, [r7, #12]
 8003ab0:	e002      	b.n	8003ab8 <vListInsert+0x2e>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	60fb      	str	r3, [r7, #12]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d2f6      	bcs.n	8003ab2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	685a      	ldr	r2, [r3, #4]
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	683a      	ldr	r2, [r7, #0]
 8003ad2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	687a      	ldr	r2, [r7, #4]
 8003ae4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	1c5a      	adds	r2, r3, #1
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	601a      	str	r2, [r3, #0]
}
 8003af0:	bf00      	nop
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	691b      	ldr	r3, [r3, #16]
 8003b08:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	6892      	ldr	r2, [r2, #8]
 8003b12:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6852      	ldr	r2, [r2, #4]
 8003b1c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d103      	bne.n	8003b30 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689a      	ldr	r2, [r3, #8]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	1e5a      	subs	r2, r3, #1
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d10b      	bne.n	8003b7c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b68:	f383 8811 	msr	BASEPRI, r3
 8003b6c:	f3bf 8f6f 	isb	sy
 8003b70:	f3bf 8f4f 	dsb	sy
 8003b74:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b76:	bf00      	nop
 8003b78:	bf00      	nop
 8003b7a:	e7fd      	b.n	8003b78 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b7c:	f002 f8a4 	bl	8005cc8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b88:	68f9      	ldr	r1, [r7, #12]
 8003b8a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b8c:	fb01 f303 	mul.w	r3, r1, r3
 8003b90:	441a      	add	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681a      	ldr	r2, [r3, #0]
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681a      	ldr	r2, [r3, #0]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bac:	3b01      	subs	r3, #1
 8003bae:	68f9      	ldr	r1, [r7, #12]
 8003bb0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003bb2:	fb01 f303 	mul.w	r3, r1, r3
 8003bb6:	441a      	add	r2, r3
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	22ff      	movs	r2, #255	@ 0xff
 8003bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	22ff      	movs	r2, #255	@ 0xff
 8003bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d114      	bne.n	8003bfc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d01a      	beq.n	8003c10 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	3310      	adds	r3, #16
 8003bde:	4618      	mov	r0, r3
 8003be0:	f001 f942 	bl	8004e68 <xTaskRemoveFromEventList>
 8003be4:	4603      	mov	r3, r0
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d012      	beq.n	8003c10 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bea:	4b0d      	ldr	r3, [pc, #52]	@ (8003c20 <xQueueGenericReset+0xd0>)
 8003bec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bf0:	601a      	str	r2, [r3, #0]
 8003bf2:	f3bf 8f4f 	dsb	sy
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	e009      	b.n	8003c10 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3310      	adds	r3, #16
 8003c00:	4618      	mov	r0, r3
 8003c02:	f7ff fef1 	bl	80039e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3324      	adds	r3, #36	@ 0x24
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f7ff feec 	bl	80039e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c10:	f002 f88c 	bl	8005d2c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c14:	2301      	movs	r3, #1
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3710      	adds	r7, #16
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	e000ed04 	.word	0xe000ed04

08003c24 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b08e      	sub	sp, #56	@ 0x38
 8003c28:	af02      	add	r7, sp, #8
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	607a      	str	r2, [r7, #4]
 8003c30:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d10b      	bne.n	8003c50 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3c:	f383 8811 	msr	BASEPRI, r3
 8003c40:	f3bf 8f6f 	isb	sy
 8003c44:	f3bf 8f4f 	dsb	sy
 8003c48:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c4a:	bf00      	nop
 8003c4c:	bf00      	nop
 8003c4e:	e7fd      	b.n	8003c4c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10b      	bne.n	8003c6e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c68:	bf00      	nop
 8003c6a:	bf00      	nop
 8003c6c:	e7fd      	b.n	8003c6a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d002      	beq.n	8003c7a <xQueueGenericCreateStatic+0x56>
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d001      	beq.n	8003c7e <xQueueGenericCreateStatic+0x5a>
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e000      	b.n	8003c80 <xQueueGenericCreateStatic+0x5c>
 8003c7e:	2300      	movs	r3, #0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d10b      	bne.n	8003c9c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003c84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c88:	f383 8811 	msr	BASEPRI, r3
 8003c8c:	f3bf 8f6f 	isb	sy
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	623b      	str	r3, [r7, #32]
}
 8003c96:	bf00      	nop
 8003c98:	bf00      	nop
 8003c9a:	e7fd      	b.n	8003c98 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d102      	bne.n	8003ca8 <xQueueGenericCreateStatic+0x84>
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d101      	bne.n	8003cac <xQueueGenericCreateStatic+0x88>
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e000      	b.n	8003cae <xQueueGenericCreateStatic+0x8a>
 8003cac:	2300      	movs	r3, #0
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10b      	bne.n	8003cca <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	61fb      	str	r3, [r7, #28]
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	e7fd      	b.n	8003cc6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003cca:	2350      	movs	r3, #80	@ 0x50
 8003ccc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	2b50      	cmp	r3, #80	@ 0x50
 8003cd2:	d00b      	beq.n	8003cec <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	61bb      	str	r3, [r7, #24]
}
 8003ce6:	bf00      	nop
 8003ce8:	bf00      	nop
 8003cea:	e7fd      	b.n	8003ce8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003cec:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003cf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d00d      	beq.n	8003d14 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d00:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003d04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003d06:	9300      	str	r3, [sp, #0]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	68b9      	ldr	r1, [r7, #8]
 8003d0e:	68f8      	ldr	r0, [r7, #12]
 8003d10:	f000 f805 	bl	8003d1e <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3730      	adds	r7, #48	@ 0x30
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d103      	bne.n	8003d3a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d32:	69bb      	ldr	r3, [r7, #24]
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	601a      	str	r2, [r3, #0]
 8003d38:	e002      	b.n	8003d40 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d3a:	69bb      	ldr	r3, [r7, #24]
 8003d3c:	687a      	ldr	r2, [r7, #4]
 8003d3e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	68ba      	ldr	r2, [r7, #8]
 8003d4a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	69b8      	ldr	r0, [r7, #24]
 8003d50:	f7ff fefe 	bl	8003b50 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d5c:	bf00      	nop
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08e      	sub	sp, #56	@ 0x38
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	607a      	str	r2, [r7, #4]
 8003d70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d72:	2300      	movs	r3, #0
 8003d74:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d10b      	bne.n	8003d98 <xQueueGenericSend+0x34>
	__asm volatile
 8003d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d84:	f383 8811 	msr	BASEPRI, r3
 8003d88:	f3bf 8f6f 	isb	sy
 8003d8c:	f3bf 8f4f 	dsb	sy
 8003d90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d92:	bf00      	nop
 8003d94:	bf00      	nop
 8003d96:	e7fd      	b.n	8003d94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d103      	bne.n	8003da6 <xQueueGenericSend+0x42>
 8003d9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d101      	bne.n	8003daa <xQueueGenericSend+0x46>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <xQueueGenericSend+0x48>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d10b      	bne.n	8003dc8 <xQueueGenericSend+0x64>
	__asm volatile
 8003db0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db4:	f383 8811 	msr	BASEPRI, r3
 8003db8:	f3bf 8f6f 	isb	sy
 8003dbc:	f3bf 8f4f 	dsb	sy
 8003dc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003dc2:	bf00      	nop
 8003dc4:	bf00      	nop
 8003dc6:	e7fd      	b.n	8003dc4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	2b02      	cmp	r3, #2
 8003dcc:	d103      	bne.n	8003dd6 <xQueueGenericSend+0x72>
 8003dce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd2:	2b01      	cmp	r3, #1
 8003dd4:	d101      	bne.n	8003dda <xQueueGenericSend+0x76>
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e000      	b.n	8003ddc <xQueueGenericSend+0x78>
 8003dda:	2300      	movs	r3, #0
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d10b      	bne.n	8003df8 <xQueueGenericSend+0x94>
	__asm volatile
 8003de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003de4:	f383 8811 	msr	BASEPRI, r3
 8003de8:	f3bf 8f6f 	isb	sy
 8003dec:	f3bf 8f4f 	dsb	sy
 8003df0:	623b      	str	r3, [r7, #32]
}
 8003df2:	bf00      	nop
 8003df4:	bf00      	nop
 8003df6:	e7fd      	b.n	8003df4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003df8:	f001 f9fc 	bl	80051f4 <xTaskGetSchedulerState>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d102      	bne.n	8003e08 <xQueueGenericSend+0xa4>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <xQueueGenericSend+0xa8>
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e000      	b.n	8003e0e <xQueueGenericSend+0xaa>
 8003e0c:	2300      	movs	r3, #0
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d10b      	bne.n	8003e2a <xQueueGenericSend+0xc6>
	__asm volatile
 8003e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e16:	f383 8811 	msr	BASEPRI, r3
 8003e1a:	f3bf 8f6f 	isb	sy
 8003e1e:	f3bf 8f4f 	dsb	sy
 8003e22:	61fb      	str	r3, [r7, #28]
}
 8003e24:	bf00      	nop
 8003e26:	bf00      	nop
 8003e28:	e7fd      	b.n	8003e26 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e2a:	f001 ff4d 	bl	8005cc8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d302      	bcc.n	8003e40 <xQueueGenericSend+0xdc>
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	2b02      	cmp	r3, #2
 8003e3e:	d129      	bne.n	8003e94 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e40:	683a      	ldr	r2, [r7, #0]
 8003e42:	68b9      	ldr	r1, [r7, #8]
 8003e44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e46:	f000 fa0f 	bl	8004268 <prvCopyDataToQueue>
 8003e4a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d010      	beq.n	8003e76 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e56:	3324      	adds	r3, #36	@ 0x24
 8003e58:	4618      	mov	r0, r3
 8003e5a:	f001 f805 	bl	8004e68 <xTaskRemoveFromEventList>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d013      	beq.n	8003e8c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e64:	4b3f      	ldr	r3, [pc, #252]	@ (8003f64 <xQueueGenericSend+0x200>)
 8003e66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e6a:	601a      	str	r2, [r3, #0]
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	f3bf 8f6f 	isb	sy
 8003e74:	e00a      	b.n	8003e8c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d007      	beq.n	8003e8c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e7c:	4b39      	ldr	r3, [pc, #228]	@ (8003f64 <xQueueGenericSend+0x200>)
 8003e7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e82:	601a      	str	r2, [r3, #0]
 8003e84:	f3bf 8f4f 	dsb	sy
 8003e88:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e8c:	f001 ff4e 	bl	8005d2c <vPortExitCritical>
				return pdPASS;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e063      	b.n	8003f5c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e9a:	f001 ff47 	bl	8005d2c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	e05c      	b.n	8003f5c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d106      	bne.n	8003eb6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ea8:	f107 0314 	add.w	r3, r7, #20
 8003eac:	4618      	mov	r0, r3
 8003eae:	f001 f83f 	bl	8004f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eb6:	f001 ff39 	bl	8005d2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003eba:	f000 fda7 	bl	8004a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ebe:	f001 ff03 	bl	8005cc8 <vPortEnterCritical>
 8003ec2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ec8:	b25b      	sxtb	r3, r3
 8003eca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ece:	d103      	bne.n	8003ed8 <xQueueGenericSend+0x174>
 8003ed0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ede:	b25b      	sxtb	r3, r3
 8003ee0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003ee4:	d103      	bne.n	8003eee <xQueueGenericSend+0x18a>
 8003ee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ee8:	2200      	movs	r2, #0
 8003eea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003eee:	f001 ff1d 	bl	8005d2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ef2:	1d3a      	adds	r2, r7, #4
 8003ef4:	f107 0314 	add.w	r3, r7, #20
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f001 f82e 	bl	8004f5c <xTaskCheckForTimeOut>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d124      	bne.n	8003f50 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003f06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f08:	f000 faa6 	bl	8004458 <prvIsQueueFull>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d018      	beq.n	8003f44 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f14:	3310      	adds	r3, #16
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	4611      	mov	r1, r2
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f000 ff52 	bl	8004dc4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f22:	f000 fa31 	bl	8004388 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f26:	f000 fd7f 	bl	8004a28 <xTaskResumeAll>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	f47f af7c 	bne.w	8003e2a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003f32:	4b0c      	ldr	r3, [pc, #48]	@ (8003f64 <xQueueGenericSend+0x200>)
 8003f34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f38:	601a      	str	r2, [r3, #0]
 8003f3a:	f3bf 8f4f 	dsb	sy
 8003f3e:	f3bf 8f6f 	isb	sy
 8003f42:	e772      	b.n	8003e2a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f44:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f46:	f000 fa1f 	bl	8004388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f4a:	f000 fd6d 	bl	8004a28 <xTaskResumeAll>
 8003f4e:	e76c      	b.n	8003e2a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f50:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f52:	f000 fa19 	bl	8004388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f56:	f000 fd67 	bl	8004a28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f5a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	3738      	adds	r7, #56	@ 0x38
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}
 8003f64:	e000ed04 	.word	0xe000ed04

08003f68 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b090      	sub	sp, #64	@ 0x40
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
 8003f74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003f7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d10b      	bne.n	8003f98 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f84:	f383 8811 	msr	BASEPRI, r3
 8003f88:	f3bf 8f6f 	isb	sy
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f92:	bf00      	nop
 8003f94:	bf00      	nop
 8003f96:	e7fd      	b.n	8003f94 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d103      	bne.n	8003fa6 <xQueueGenericSendFromISR+0x3e>
 8003f9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d101      	bne.n	8003faa <xQueueGenericSendFromISR+0x42>
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <xQueueGenericSendFromISR+0x44>
 8003faa:	2300      	movs	r3, #0
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d10b      	bne.n	8003fc8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fb4:	f383 8811 	msr	BASEPRI, r3
 8003fb8:	f3bf 8f6f 	isb	sy
 8003fbc:	f3bf 8f4f 	dsb	sy
 8003fc0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003fc2:	bf00      	nop
 8003fc4:	bf00      	nop
 8003fc6:	e7fd      	b.n	8003fc4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d103      	bne.n	8003fd6 <xQueueGenericSendFromISR+0x6e>
 8003fce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d101      	bne.n	8003fda <xQueueGenericSendFromISR+0x72>
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e000      	b.n	8003fdc <xQueueGenericSendFromISR+0x74>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10b      	bne.n	8003ff8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	623b      	str	r3, [r7, #32]
}
 8003ff2:	bf00      	nop
 8003ff4:	bf00      	nop
 8003ff6:	e7fd      	b.n	8003ff4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ff8:	f001 ff46 	bl	8005e88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ffc:	f3ef 8211 	mrs	r2, BASEPRI
 8004000:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	61fa      	str	r2, [r7, #28]
 8004012:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004014:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004016:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800401c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800401e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004020:	429a      	cmp	r2, r3
 8004022:	d302      	bcc.n	800402a <xQueueGenericSendFromISR+0xc2>
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d12f      	bne.n	800408a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800402a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800402c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004030:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004036:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004038:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	68b9      	ldr	r1, [r7, #8]
 800403e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004040:	f000 f912 	bl	8004268 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004044:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004048:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800404c:	d112      	bne.n	8004074 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800404e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004052:	2b00      	cmp	r3, #0
 8004054:	d016      	beq.n	8004084 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004056:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004058:	3324      	adds	r3, #36	@ 0x24
 800405a:	4618      	mov	r0, r3
 800405c:	f000 ff04 	bl	8004e68 <xTaskRemoveFromEventList>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d00e      	beq.n	8004084 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d00b      	beq.n	8004084 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2201      	movs	r2, #1
 8004070:	601a      	str	r2, [r3, #0]
 8004072:	e007      	b.n	8004084 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004074:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004078:	3301      	adds	r3, #1
 800407a:	b2db      	uxtb	r3, r3
 800407c:	b25a      	sxtb	r2, r3
 800407e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004080:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004084:	2301      	movs	r3, #1
 8004086:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004088:	e001      	b.n	800408e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800408a:	2300      	movs	r3, #0
 800408c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800408e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004090:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004098:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800409a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800409c:	4618      	mov	r0, r3
 800409e:	3740      	adds	r7, #64	@ 0x40
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b08c      	sub	sp, #48	@ 0x30
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	60f8      	str	r0, [r7, #12]
 80040ac:	60b9      	str	r1, [r7, #8]
 80040ae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80040b0:	2300      	movs	r3, #0
 80040b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80040b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d10b      	bne.n	80040d6 <xQueueReceive+0x32>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	623b      	str	r3, [r7, #32]
}
 80040d0:	bf00      	nop
 80040d2:	bf00      	nop
 80040d4:	e7fd      	b.n	80040d2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d103      	bne.n	80040e4 <xQueueReceive+0x40>
 80040dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d101      	bne.n	80040e8 <xQueueReceive+0x44>
 80040e4:	2301      	movs	r3, #1
 80040e6:	e000      	b.n	80040ea <xQueueReceive+0x46>
 80040e8:	2300      	movs	r3, #0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d10b      	bne.n	8004106 <xQueueReceive+0x62>
	__asm volatile
 80040ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040f2:	f383 8811 	msr	BASEPRI, r3
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	f3bf 8f4f 	dsb	sy
 80040fe:	61fb      	str	r3, [r7, #28]
}
 8004100:	bf00      	nop
 8004102:	bf00      	nop
 8004104:	e7fd      	b.n	8004102 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004106:	f001 f875 	bl	80051f4 <xTaskGetSchedulerState>
 800410a:	4603      	mov	r3, r0
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <xQueueReceive+0x72>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d101      	bne.n	800411a <xQueueReceive+0x76>
 8004116:	2301      	movs	r3, #1
 8004118:	e000      	b.n	800411c <xQueueReceive+0x78>
 800411a:	2300      	movs	r3, #0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d10b      	bne.n	8004138 <xQueueReceive+0x94>
	__asm volatile
 8004120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004124:	f383 8811 	msr	BASEPRI, r3
 8004128:	f3bf 8f6f 	isb	sy
 800412c:	f3bf 8f4f 	dsb	sy
 8004130:	61bb      	str	r3, [r7, #24]
}
 8004132:	bf00      	nop
 8004134:	bf00      	nop
 8004136:	e7fd      	b.n	8004134 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004138:	f001 fdc6 	bl	8005cc8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800413c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004142:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	d01f      	beq.n	8004188 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800414c:	f000 f8f6 	bl	800433c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004152:	1e5a      	subs	r2, r3, #1
 8004154:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004156:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800415a:	691b      	ldr	r3, [r3, #16]
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00f      	beq.n	8004180 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004162:	3310      	adds	r3, #16
 8004164:	4618      	mov	r0, r3
 8004166:	f000 fe7f 	bl	8004e68 <xTaskRemoveFromEventList>
 800416a:	4603      	mov	r3, r0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004170:	4b3c      	ldr	r3, [pc, #240]	@ (8004264 <xQueueReceive+0x1c0>)
 8004172:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	f3bf 8f4f 	dsb	sy
 800417c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004180:	f001 fdd4 	bl	8005d2c <vPortExitCritical>
				return pdPASS;
 8004184:	2301      	movs	r3, #1
 8004186:	e069      	b.n	800425c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d103      	bne.n	8004196 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800418e:	f001 fdcd 	bl	8005d2c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004192:	2300      	movs	r3, #0
 8004194:	e062      	b.n	800425c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004196:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d106      	bne.n	80041aa <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800419c:	f107 0310 	add.w	r3, r7, #16
 80041a0:	4618      	mov	r0, r3
 80041a2:	f000 fec5 	bl	8004f30 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80041a6:	2301      	movs	r3, #1
 80041a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80041aa:	f001 fdbf 	bl	8005d2c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80041ae:	f000 fc2d 	bl	8004a0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80041b2:	f001 fd89 	bl	8005cc8 <vPortEnterCritical>
 80041b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80041bc:	b25b      	sxtb	r3, r3
 80041be:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041c2:	d103      	bne.n	80041cc <xQueueReceive+0x128>
 80041c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041c6:	2200      	movs	r2, #0
 80041c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041d2:	b25b      	sxtb	r3, r3
 80041d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80041d8:	d103      	bne.n	80041e2 <xQueueReceive+0x13e>
 80041da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041e2:	f001 fda3 	bl	8005d2c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041e6:	1d3a      	adds	r2, r7, #4
 80041e8:	f107 0310 	add.w	r3, r7, #16
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 feb4 	bl	8004f5c <xTaskCheckForTimeOut>
 80041f4:	4603      	mov	r3, r0
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d123      	bne.n	8004242 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041fa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041fc:	f000 f916 	bl	800442c <prvIsQueueEmpty>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d017      	beq.n	8004236 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004206:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004208:	3324      	adds	r3, #36	@ 0x24
 800420a:	687a      	ldr	r2, [r7, #4]
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f000 fdd8 	bl	8004dc4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004214:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004216:	f000 f8b7 	bl	8004388 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800421a:	f000 fc05 	bl	8004a28 <xTaskResumeAll>
 800421e:	4603      	mov	r3, r0
 8004220:	2b00      	cmp	r3, #0
 8004222:	d189      	bne.n	8004138 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004224:	4b0f      	ldr	r3, [pc, #60]	@ (8004264 <xQueueReceive+0x1c0>)
 8004226:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800422a:	601a      	str	r2, [r3, #0]
 800422c:	f3bf 8f4f 	dsb	sy
 8004230:	f3bf 8f6f 	isb	sy
 8004234:	e780      	b.n	8004138 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004236:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004238:	f000 f8a6 	bl	8004388 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800423c:	f000 fbf4 	bl	8004a28 <xTaskResumeAll>
 8004240:	e77a      	b.n	8004138 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004242:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004244:	f000 f8a0 	bl	8004388 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004248:	f000 fbee 	bl	8004a28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800424c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800424e:	f000 f8ed 	bl	800442c <prvIsQueueEmpty>
 8004252:	4603      	mov	r3, r0
 8004254:	2b00      	cmp	r3, #0
 8004256:	f43f af6f 	beq.w	8004138 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800425a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800425c:	4618      	mov	r0, r3
 800425e:	3730      	adds	r7, #48	@ 0x30
 8004260:	46bd      	mov	sp, r7
 8004262:	bd80      	pop	{r7, pc}
 8004264:	e000ed04 	.word	0xe000ed04

08004268 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b086      	sub	sp, #24
 800426c:	af00      	add	r7, sp, #0
 800426e:	60f8      	str	r0, [r7, #12]
 8004270:	60b9      	str	r1, [r7, #8]
 8004272:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004274:	2300      	movs	r3, #0
 8004276:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800427c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d10d      	bne.n	80042a2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d14d      	bne.n	800432a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	4618      	mov	r0, r3
 8004294:	f000 ffcc 	bl	8005230 <xTaskPriorityDisinherit>
 8004298:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	609a      	str	r2, [r3, #8]
 80042a0:	e043      	b.n	800432a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d119      	bne.n	80042dc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	6858      	ldr	r0, [r3, #4]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b0:	461a      	mov	r2, r3
 80042b2:	68b9      	ldr	r1, [r7, #8]
 80042b4:	f002 f8a4 	bl	8006400 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	441a      	add	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	685a      	ldr	r2, [r3, #4]
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d32b      	bcc.n	800432a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	605a      	str	r2, [r3, #4]
 80042da:	e026      	b.n	800432a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68d8      	ldr	r0, [r3, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042e4:	461a      	mov	r2, r3
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	f002 f88a 	bl	8006400 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	68da      	ldr	r2, [r3, #12]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f4:	425b      	negs	r3, r3
 80042f6:	441a      	add	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	68da      	ldr	r2, [r3, #12]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	429a      	cmp	r2, r3
 8004306:	d207      	bcs.n	8004318 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	689a      	ldr	r2, [r3, #8]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004310:	425b      	negs	r3, r3
 8004312:	441a      	add	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b02      	cmp	r3, #2
 800431c:	d105      	bne.n	800432a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d002      	beq.n	800432a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	3b01      	subs	r3, #1
 8004328:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004332:	697b      	ldr	r3, [r7, #20]
}
 8004334:	4618      	mov	r0, r3
 8004336:	3718      	adds	r7, #24
 8004338:	46bd      	mov	sp, r7
 800433a:	bd80      	pop	{r7, pc}

0800433c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800433c:	b580      	push	{r7, lr}
 800433e:	b082      	sub	sp, #8
 8004340:	af00      	add	r7, sp, #0
 8004342:	6078      	str	r0, [r7, #4]
 8004344:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800434a:	2b00      	cmp	r3, #0
 800434c:	d018      	beq.n	8004380 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004356:	441a      	add	r2, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	429a      	cmp	r2, r3
 8004366:	d303      	bcc.n	8004370 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681a      	ldr	r2, [r3, #0]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	68d9      	ldr	r1, [r3, #12]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	461a      	mov	r2, r3
 800437a:	6838      	ldr	r0, [r7, #0]
 800437c:	f002 f840 	bl	8006400 <memcpy>
	}
}
 8004380:	bf00      	nop
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004390:	f001 fc9a 	bl	8005cc8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800439a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800439c:	e011      	b.n	80043c2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d012      	beq.n	80043cc <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	3324      	adds	r3, #36	@ 0x24
 80043aa:	4618      	mov	r0, r3
 80043ac:	f000 fd5c 	bl	8004e68 <xTaskRemoveFromEventList>
 80043b0:	4603      	mov	r3, r0
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d001      	beq.n	80043ba <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80043b6:	f000 fe35 	bl	8005024 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80043ba:	7bfb      	ldrb	r3, [r7, #15]
 80043bc:	3b01      	subs	r3, #1
 80043be:	b2db      	uxtb	r3, r3
 80043c0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	dce9      	bgt.n	800439e <prvUnlockQueue+0x16>
 80043ca:	e000      	b.n	80043ce <prvUnlockQueue+0x46>
					break;
 80043cc:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	22ff      	movs	r2, #255	@ 0xff
 80043d2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80043d6:	f001 fca9 	bl	8005d2c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043da:	f001 fc75 	bl	8005cc8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043e4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043e6:	e011      	b.n	800440c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	691b      	ldr	r3, [r3, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d012      	beq.n	8004416 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	3310      	adds	r3, #16
 80043f4:	4618      	mov	r0, r3
 80043f6:	f000 fd37 	bl	8004e68 <xTaskRemoveFromEventList>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004400:	f000 fe10 	bl	8005024 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004404:	7bbb      	ldrb	r3, [r7, #14]
 8004406:	3b01      	subs	r3, #1
 8004408:	b2db      	uxtb	r3, r3
 800440a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800440c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004410:	2b00      	cmp	r3, #0
 8004412:	dce9      	bgt.n	80043e8 <prvUnlockQueue+0x60>
 8004414:	e000      	b.n	8004418 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004416:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	22ff      	movs	r2, #255	@ 0xff
 800441c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004420:	f001 fc84 	bl	8005d2c <vPortExitCritical>
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b084      	sub	sp, #16
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004434:	f001 fc48 	bl	8005cc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800443c:	2b00      	cmp	r3, #0
 800443e:	d102      	bne.n	8004446 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004440:	2301      	movs	r3, #1
 8004442:	60fb      	str	r3, [r7, #12]
 8004444:	e001      	b.n	800444a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004446:	2300      	movs	r3, #0
 8004448:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800444a:	f001 fc6f 	bl	8005d2c <vPortExitCritical>

	return xReturn;
 800444e:	68fb      	ldr	r3, [r7, #12]
}
 8004450:	4618      	mov	r0, r3
 8004452:	3710      	adds	r7, #16
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}

08004458 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004460:	f001 fc32 	bl	8005cc8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800446c:	429a      	cmp	r2, r3
 800446e:	d102      	bne.n	8004476 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004470:	2301      	movs	r3, #1
 8004472:	60fb      	str	r3, [r7, #12]
 8004474:	e001      	b.n	800447a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004476:	2300      	movs	r3, #0
 8004478:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800447a:	f001 fc57 	bl	8005d2c <vPortExitCritical>

	return xReturn;
 800447e:	68fb      	ldr	r3, [r7, #12]
}
 8004480:	4618      	mov	r0, r3
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004488:	b480      	push	{r7}
 800448a:	b085      	sub	sp, #20
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004492:	2300      	movs	r3, #0
 8004494:	60fb      	str	r3, [r7, #12]
 8004496:	e014      	b.n	80044c2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004498:	4a0f      	ldr	r2, [pc, #60]	@ (80044d8 <vQueueAddToRegistry+0x50>)
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d10b      	bne.n	80044bc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80044a4:	490c      	ldr	r1, [pc, #48]	@ (80044d8 <vQueueAddToRegistry+0x50>)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	683a      	ldr	r2, [r7, #0]
 80044aa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80044ae:	4a0a      	ldr	r2, [pc, #40]	@ (80044d8 <vQueueAddToRegistry+0x50>)
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	00db      	lsls	r3, r3, #3
 80044b4:	4413      	add	r3, r2
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80044ba:	e006      	b.n	80044ca <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	3301      	adds	r3, #1
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2b07      	cmp	r3, #7
 80044c6:	d9e7      	bls.n	8004498 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	3714      	adds	r7, #20
 80044ce:	46bd      	mov	sp, r7
 80044d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d4:	4770      	bx	lr
 80044d6:	bf00      	nop
 80044d8:	200008b8 	.word	0x200008b8

080044dc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	60f8      	str	r0, [r7, #12]
 80044e4:	60b9      	str	r1, [r7, #8]
 80044e6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044ec:	f001 fbec 	bl	8005cc8 <vPortEnterCritical>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044f6:	b25b      	sxtb	r3, r3
 80044f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044fc:	d103      	bne.n	8004506 <vQueueWaitForMessageRestricted+0x2a>
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	2200      	movs	r2, #0
 8004502:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800450c:	b25b      	sxtb	r3, r3
 800450e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004512:	d103      	bne.n	800451c <vQueueWaitForMessageRestricted+0x40>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	2200      	movs	r2, #0
 8004518:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800451c:	f001 fc06 	bl	8005d2c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004524:	2b00      	cmp	r3, #0
 8004526:	d106      	bne.n	8004536 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	3324      	adds	r3, #36	@ 0x24
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	4618      	mov	r0, r3
 8004532:	f000 fc6d 	bl	8004e10 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004536:	6978      	ldr	r0, [r7, #20]
 8004538:	f7ff ff26 	bl	8004388 <prvUnlockQueue>
	}
 800453c:	bf00      	nop
 800453e:	3718      	adds	r7, #24
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08e      	sub	sp, #56	@ 0x38
 8004548:	af04      	add	r7, sp, #16
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
 8004550:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004554:	2b00      	cmp	r3, #0
 8004556:	d10b      	bne.n	8004570 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800455c:	f383 8811 	msr	BASEPRI, r3
 8004560:	f3bf 8f6f 	isb	sy
 8004564:	f3bf 8f4f 	dsb	sy
 8004568:	623b      	str	r3, [r7, #32]
}
 800456a:	bf00      	nop
 800456c:	bf00      	nop
 800456e:	e7fd      	b.n	800456c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004572:	2b00      	cmp	r3, #0
 8004574:	d10b      	bne.n	800458e <xTaskCreateStatic+0x4a>
	__asm volatile
 8004576:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800457a:	f383 8811 	msr	BASEPRI, r3
 800457e:	f3bf 8f6f 	isb	sy
 8004582:	f3bf 8f4f 	dsb	sy
 8004586:	61fb      	str	r3, [r7, #28]
}
 8004588:	bf00      	nop
 800458a:	bf00      	nop
 800458c:	e7fd      	b.n	800458a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800458e:	23a8      	movs	r3, #168	@ 0xa8
 8004590:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	2ba8      	cmp	r3, #168	@ 0xa8
 8004596:	d00b      	beq.n	80045b0 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800459c:	f383 8811 	msr	BASEPRI, r3
 80045a0:	f3bf 8f6f 	isb	sy
 80045a4:	f3bf 8f4f 	dsb	sy
 80045a8:	61bb      	str	r3, [r7, #24]
}
 80045aa:	bf00      	nop
 80045ac:	bf00      	nop
 80045ae:	e7fd      	b.n	80045ac <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80045b0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80045b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d01e      	beq.n	80045f6 <xTaskCreateStatic+0xb2>
 80045b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d01b      	beq.n	80045f6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80045be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c0:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80045c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045c6:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ca:	2202      	movs	r2, #2
 80045cc:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045d0:	2300      	movs	r3, #0
 80045d2:	9303      	str	r3, [sp, #12]
 80045d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045d6:	9302      	str	r3, [sp, #8]
 80045d8:	f107 0314 	add.w	r3, r7, #20
 80045dc:	9301      	str	r3, [sp, #4]
 80045de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045e0:	9300      	str	r3, [sp, #0]
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	68b9      	ldr	r1, [r7, #8]
 80045e8:	68f8      	ldr	r0, [r7, #12]
 80045ea:	f000 f851 	bl	8004690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045ee:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045f0:	f000 f8f6 	bl	80047e0 <prvAddNewTaskToReadyList>
 80045f4:	e001      	b.n	80045fa <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045fa:	697b      	ldr	r3, [r7, #20]
	}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3728      	adds	r7, #40	@ 0x28
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}

08004604 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004604:	b580      	push	{r7, lr}
 8004606:	b08c      	sub	sp, #48	@ 0x30
 8004608:	af04      	add	r7, sp, #16
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	603b      	str	r3, [r7, #0]
 8004610:	4613      	mov	r3, r2
 8004612:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004614:	88fb      	ldrh	r3, [r7, #6]
 8004616:	009b      	lsls	r3, r3, #2
 8004618:	4618      	mov	r0, r3
 800461a:	f001 fc77 	bl	8005f0c <pvPortMalloc>
 800461e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00e      	beq.n	8004644 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004626:	20a8      	movs	r0, #168	@ 0xa8
 8004628:	f001 fc70 	bl	8005f0c <pvPortMalloc>
 800462c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	631a      	str	r2, [r3, #48]	@ 0x30
 800463a:	e005      	b.n	8004648 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800463c:	6978      	ldr	r0, [r7, #20]
 800463e:	f001 fd33 	bl	80060a8 <vPortFree>
 8004642:	e001      	b.n	8004648 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004644:	2300      	movs	r3, #0
 8004646:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d017      	beq.n	800467e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	2200      	movs	r2, #0
 8004652:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	2300      	movs	r3, #0
 800465a:	9303      	str	r3, [sp, #12]
 800465c:	69fb      	ldr	r3, [r7, #28]
 800465e:	9302      	str	r3, [sp, #8]
 8004660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004662:	9301      	str	r3, [sp, #4]
 8004664:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004666:	9300      	str	r3, [sp, #0]
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	68b9      	ldr	r1, [r7, #8]
 800466c:	68f8      	ldr	r0, [r7, #12]
 800466e:	f000 f80f 	bl	8004690 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004672:	69f8      	ldr	r0, [r7, #28]
 8004674:	f000 f8b4 	bl	80047e0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004678:	2301      	movs	r3, #1
 800467a:	61bb      	str	r3, [r7, #24]
 800467c:	e002      	b.n	8004684 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800467e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004682:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004684:	69bb      	ldr	r3, [r7, #24]
	}
 8004686:	4618      	mov	r0, r3
 8004688:	3720      	adds	r7, #32
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}
	...

08004690 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b088      	sub	sp, #32
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800469e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	461a      	mov	r2, r3
 80046a8:	21a5      	movs	r1, #165	@ 0xa5
 80046aa:	f001 fe1d 	bl	80062e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80046ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80046b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80046b8:	3b01      	subs	r3, #1
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80046c0:	69bb      	ldr	r3, [r7, #24]
 80046c2:	f023 0307 	bic.w	r3, r3, #7
 80046c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046c8:	69bb      	ldr	r3, [r7, #24]
 80046ca:	f003 0307 	and.w	r3, r3, #7
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00b      	beq.n	80046ea <prvInitialiseNewTask+0x5a>
	__asm volatile
 80046d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d6:	f383 8811 	msr	BASEPRI, r3
 80046da:	f3bf 8f6f 	isb	sy
 80046de:	f3bf 8f4f 	dsb	sy
 80046e2:	617b      	str	r3, [r7, #20]
}
 80046e4:	bf00      	nop
 80046e6:	bf00      	nop
 80046e8:	e7fd      	b.n	80046e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046ea:	68bb      	ldr	r3, [r7, #8]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d01f      	beq.n	8004730 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046f0:	2300      	movs	r3, #0
 80046f2:	61fb      	str	r3, [r7, #28]
 80046f4:	e012      	b.n	800471c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046f6:	68ba      	ldr	r2, [r7, #8]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	4413      	add	r3, r2
 80046fc:	7819      	ldrb	r1, [r3, #0]
 80046fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	4413      	add	r3, r2
 8004704:	3334      	adds	r3, #52	@ 0x34
 8004706:	460a      	mov	r2, r1
 8004708:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800470a:	68ba      	ldr	r2, [r7, #8]
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	4413      	add	r3, r2
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d006      	beq.n	8004724 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	3301      	adds	r3, #1
 800471a:	61fb      	str	r3, [r7, #28]
 800471c:	69fb      	ldr	r3, [r7, #28]
 800471e:	2b0f      	cmp	r3, #15
 8004720:	d9e9      	bls.n	80046f6 <prvInitialiseNewTask+0x66>
 8004722:	e000      	b.n	8004726 <prvInitialiseNewTask+0x96>
			{
				break;
 8004724:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800472e:	e003      	b.n	8004738 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004732:	2200      	movs	r2, #0
 8004734:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800473a:	2b37      	cmp	r3, #55	@ 0x37
 800473c:	d901      	bls.n	8004742 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800473e:	2337      	movs	r3, #55	@ 0x37
 8004740:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004744:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004746:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004748:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800474a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800474c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800474e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004750:	2200      	movs	r2, #0
 8004752:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004756:	3304      	adds	r3, #4
 8004758:	4618      	mov	r0, r3
 800475a:	f7ff f965 	bl	8003a28 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800475e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004760:	3318      	adds	r3, #24
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff f960 	bl	8003a28 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004768:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800476c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004770:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004776:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800477c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	2200      	movs	r2, #0
 8004782:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004788:	2200      	movs	r2, #0
 800478a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800478e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004790:	3354      	adds	r3, #84	@ 0x54
 8004792:	224c      	movs	r2, #76	@ 0x4c
 8004794:	2100      	movs	r1, #0
 8004796:	4618      	mov	r0, r3
 8004798:	f001 fda6 	bl	80062e8 <memset>
 800479c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800479e:	4a0d      	ldr	r2, [pc, #52]	@ (80047d4 <prvInitialiseNewTask+0x144>)
 80047a0:	659a      	str	r2, [r3, #88]	@ 0x58
 80047a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a4:	4a0c      	ldr	r2, [pc, #48]	@ (80047d8 <prvInitialiseNewTask+0x148>)
 80047a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80047a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047aa:	4a0c      	ldr	r2, [pc, #48]	@ (80047dc <prvInitialiseNewTask+0x14c>)
 80047ac:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80047ae:	683a      	ldr	r2, [r7, #0]
 80047b0:	68f9      	ldr	r1, [r7, #12]
 80047b2:	69b8      	ldr	r0, [r7, #24]
 80047b4:	f001 f95a 	bl	8005a6c <pxPortInitialiseStack>
 80047b8:	4602      	mov	r2, r0
 80047ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047bc:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80047be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d002      	beq.n	80047ca <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047ca:	bf00      	nop
 80047cc:	3720      	adds	r7, #32
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20001b04 	.word	0x20001b04
 80047d8:	20001b6c 	.word	0x20001b6c
 80047dc:	20001bd4 	.word	0x20001bd4

080047e0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b082      	sub	sp, #8
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047e8:	f001 fa6e 	bl	8005cc8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047ec:	4b2d      	ldr	r3, [pc, #180]	@ (80048a4 <prvAddNewTaskToReadyList+0xc4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	3301      	adds	r3, #1
 80047f2:	4a2c      	ldr	r2, [pc, #176]	@ (80048a4 <prvAddNewTaskToReadyList+0xc4>)
 80047f4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047f6:	4b2c      	ldr	r3, [pc, #176]	@ (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d109      	bne.n	8004812 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047fe:	4a2a      	ldr	r2, [pc, #168]	@ (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004804:	4b27      	ldr	r3, [pc, #156]	@ (80048a4 <prvAddNewTaskToReadyList+0xc4>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d110      	bne.n	800482e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800480c:	f000 fc2e 	bl	800506c <prvInitialiseTaskLists>
 8004810:	e00d      	b.n	800482e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004812:	4b26      	ldr	r3, [pc, #152]	@ (80048ac <prvAddNewTaskToReadyList+0xcc>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800481a:	4b23      	ldr	r3, [pc, #140]	@ (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004824:	429a      	cmp	r2, r3
 8004826:	d802      	bhi.n	800482e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004828:	4a1f      	ldr	r2, [pc, #124]	@ (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800482e:	4b20      	ldr	r3, [pc, #128]	@ (80048b0 <prvAddNewTaskToReadyList+0xd0>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	3301      	adds	r3, #1
 8004834:	4a1e      	ldr	r2, [pc, #120]	@ (80048b0 <prvAddNewTaskToReadyList+0xd0>)
 8004836:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004838:	4b1d      	ldr	r3, [pc, #116]	@ (80048b0 <prvAddNewTaskToReadyList+0xd0>)
 800483a:	681a      	ldr	r2, [r3, #0]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004844:	4b1b      	ldr	r3, [pc, #108]	@ (80048b4 <prvAddNewTaskToReadyList+0xd4>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d903      	bls.n	8004854 <prvAddNewTaskToReadyList+0x74>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004850:	4a18      	ldr	r2, [pc, #96]	@ (80048b4 <prvAddNewTaskToReadyList+0xd4>)
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004858:	4613      	mov	r3, r2
 800485a:	009b      	lsls	r3, r3, #2
 800485c:	4413      	add	r3, r2
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	4a15      	ldr	r2, [pc, #84]	@ (80048b8 <prvAddNewTaskToReadyList+0xd8>)
 8004862:	441a      	add	r2, r3
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	3304      	adds	r3, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4610      	mov	r0, r2
 800486c:	f7ff f8e9 	bl	8003a42 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004870:	f001 fa5c 	bl	8005d2c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004874:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <prvAddNewTaskToReadyList+0xcc>)
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d00e      	beq.n	800489a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800487c:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <prvAddNewTaskToReadyList+0xc8>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004886:	429a      	cmp	r2, r3
 8004888:	d207      	bcs.n	800489a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800488a:	4b0c      	ldr	r3, [pc, #48]	@ (80048bc <prvAddNewTaskToReadyList+0xdc>)
 800488c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004890:	601a      	str	r2, [r3, #0]
 8004892:	f3bf 8f4f 	dsb	sy
 8004896:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800489a:	bf00      	nop
 800489c:	3708      	adds	r7, #8
 800489e:	46bd      	mov	sp, r7
 80048a0:	bd80      	pop	{r7, pc}
 80048a2:	bf00      	nop
 80048a4:	20000dcc 	.word	0x20000dcc
 80048a8:	200008f8 	.word	0x200008f8
 80048ac:	20000dd8 	.word	0x20000dd8
 80048b0:	20000de8 	.word	0x20000de8
 80048b4:	20000dd4 	.word	0x20000dd4
 80048b8:	200008fc 	.word	0x200008fc
 80048bc:	e000ed04 	.word	0xe000ed04

080048c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048c8:	2300      	movs	r3, #0
 80048ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d018      	beq.n	8004904 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048d2:	4b14      	ldr	r3, [pc, #80]	@ (8004924 <vTaskDelay+0x64>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d00b      	beq.n	80048f2 <vTaskDelay+0x32>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	60bb      	str	r3, [r7, #8]
}
 80048ec:	bf00      	nop
 80048ee:	bf00      	nop
 80048f0:	e7fd      	b.n	80048ee <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048f2:	f000 f88b 	bl	8004a0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048f6:	2100      	movs	r1, #0
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 fd09 	bl	8005310 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048fe:	f000 f893 	bl	8004a28 <xTaskResumeAll>
 8004902:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d107      	bne.n	800491a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800490a:	4b07      	ldr	r3, [pc, #28]	@ (8004928 <vTaskDelay+0x68>)
 800490c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	f3bf 8f4f 	dsb	sy
 8004916:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800491a:	bf00      	nop
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
 8004922:	bf00      	nop
 8004924:	20000df4 	.word	0x20000df4
 8004928:	e000ed04 	.word	0xe000ed04

0800492c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b08a      	sub	sp, #40	@ 0x28
 8004930:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004936:	2300      	movs	r3, #0
 8004938:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800493a:	463a      	mov	r2, r7
 800493c:	1d39      	adds	r1, r7, #4
 800493e:	f107 0308 	add.w	r3, r7, #8
 8004942:	4618      	mov	r0, r3
 8004944:	f7ff f81c 	bl	8003980 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004948:	6839      	ldr	r1, [r7, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68ba      	ldr	r2, [r7, #8]
 800494e:	9202      	str	r2, [sp, #8]
 8004950:	9301      	str	r3, [sp, #4]
 8004952:	2300      	movs	r3, #0
 8004954:	9300      	str	r3, [sp, #0]
 8004956:	2300      	movs	r3, #0
 8004958:	460a      	mov	r2, r1
 800495a:	4924      	ldr	r1, [pc, #144]	@ (80049ec <vTaskStartScheduler+0xc0>)
 800495c:	4824      	ldr	r0, [pc, #144]	@ (80049f0 <vTaskStartScheduler+0xc4>)
 800495e:	f7ff fdf1 	bl	8004544 <xTaskCreateStatic>
 8004962:	4603      	mov	r3, r0
 8004964:	4a23      	ldr	r2, [pc, #140]	@ (80049f4 <vTaskStartScheduler+0xc8>)
 8004966:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004968:	4b22      	ldr	r3, [pc, #136]	@ (80049f4 <vTaskStartScheduler+0xc8>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004970:	2301      	movs	r3, #1
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e001      	b.n	800497a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004976:	2300      	movs	r3, #0
 8004978:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d102      	bne.n	8004986 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004980:	f000 fd1a 	bl	80053b8 <xTimerCreateTimerTask>
 8004984:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d11b      	bne.n	80049c4 <vTaskStartScheduler+0x98>
	__asm volatile
 800498c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004990:	f383 8811 	msr	BASEPRI, r3
 8004994:	f3bf 8f6f 	isb	sy
 8004998:	f3bf 8f4f 	dsb	sy
 800499c:	613b      	str	r3, [r7, #16]
}
 800499e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80049a0:	4b15      	ldr	r3, [pc, #84]	@ (80049f8 <vTaskStartScheduler+0xcc>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	3354      	adds	r3, #84	@ 0x54
 80049a6:	4a15      	ldr	r2, [pc, #84]	@ (80049fc <vTaskStartScheduler+0xd0>)
 80049a8:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80049aa:	4b15      	ldr	r3, [pc, #84]	@ (8004a00 <vTaskStartScheduler+0xd4>)
 80049ac:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80049b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80049b2:	4b14      	ldr	r3, [pc, #80]	@ (8004a04 <vTaskStartScheduler+0xd8>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80049b8:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <vTaskStartScheduler+0xdc>)
 80049ba:	2200      	movs	r2, #0
 80049bc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80049be:	f001 f8df 	bl	8005b80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049c2:	e00f      	b.n	80049e4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80049ca:	d10b      	bne.n	80049e4 <vTaskStartScheduler+0xb8>
	__asm volatile
 80049cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049d0:	f383 8811 	msr	BASEPRI, r3
 80049d4:	f3bf 8f6f 	isb	sy
 80049d8:	f3bf 8f4f 	dsb	sy
 80049dc:	60fb      	str	r3, [r7, #12]
}
 80049de:	bf00      	nop
 80049e0:	bf00      	nop
 80049e2:	e7fd      	b.n	80049e0 <vTaskStartScheduler+0xb4>
}
 80049e4:	bf00      	nop
 80049e6:	3718      	adds	r7, #24
 80049e8:	46bd      	mov	sp, r7
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	08006520 	.word	0x08006520
 80049f0:	0800503d 	.word	0x0800503d
 80049f4:	20000df0 	.word	0x20000df0
 80049f8:	200008f8 	.word	0x200008f8
 80049fc:	20000018 	.word	0x20000018
 8004a00:	20000dec 	.word	0x20000dec
 8004a04:	20000dd8 	.word	0x20000dd8
 8004a08:	20000dd0 	.word	0x20000dd0

08004a0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004a10:	4b04      	ldr	r3, [pc, #16]	@ (8004a24 <vTaskSuspendAll+0x18>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	3301      	adds	r3, #1
 8004a16:	4a03      	ldr	r2, [pc, #12]	@ (8004a24 <vTaskSuspendAll+0x18>)
 8004a18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004a1a:	bf00      	nop
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr
 8004a24:	20000df4 	.word	0x20000df4

08004a28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b084      	sub	sp, #16
 8004a2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a32:	2300      	movs	r3, #0
 8004a34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a36:	4b42      	ldr	r3, [pc, #264]	@ (8004b40 <xTaskResumeAll+0x118>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10b      	bne.n	8004a56 <xTaskResumeAll+0x2e>
	__asm volatile
 8004a3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a42:	f383 8811 	msr	BASEPRI, r3
 8004a46:	f3bf 8f6f 	isb	sy
 8004a4a:	f3bf 8f4f 	dsb	sy
 8004a4e:	603b      	str	r3, [r7, #0]
}
 8004a50:	bf00      	nop
 8004a52:	bf00      	nop
 8004a54:	e7fd      	b.n	8004a52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a56:	f001 f937 	bl	8005cc8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a5a:	4b39      	ldr	r3, [pc, #228]	@ (8004b40 <xTaskResumeAll+0x118>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	3b01      	subs	r3, #1
 8004a60:	4a37      	ldr	r2, [pc, #220]	@ (8004b40 <xTaskResumeAll+0x118>)
 8004a62:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a64:	4b36      	ldr	r3, [pc, #216]	@ (8004b40 <xTaskResumeAll+0x118>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d162      	bne.n	8004b32 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a6c:	4b35      	ldr	r3, [pc, #212]	@ (8004b44 <xTaskResumeAll+0x11c>)
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d05e      	beq.n	8004b32 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a74:	e02f      	b.n	8004ad6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a76:	4b34      	ldr	r3, [pc, #208]	@ (8004b48 <xTaskResumeAll+0x120>)
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	3318      	adds	r3, #24
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7ff f83a 	bl	8003afc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	3304      	adds	r3, #4
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f7ff f835 	bl	8003afc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a96:	4b2d      	ldr	r3, [pc, #180]	@ (8004b4c <xTaskResumeAll+0x124>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	d903      	bls.n	8004aa6 <xTaskResumeAll+0x7e>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa2:	4a2a      	ldr	r2, [pc, #168]	@ (8004b4c <xTaskResumeAll+0x124>)
 8004aa4:	6013      	str	r3, [r2, #0]
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aaa:	4613      	mov	r3, r2
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4a27      	ldr	r2, [pc, #156]	@ (8004b50 <xTaskResumeAll+0x128>)
 8004ab4:	441a      	add	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	3304      	adds	r3, #4
 8004aba:	4619      	mov	r1, r3
 8004abc:	4610      	mov	r0, r2
 8004abe:	f7fe ffc0 	bl	8003a42 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ac6:	4b23      	ldr	r3, [pc, #140]	@ (8004b54 <xTaskResumeAll+0x12c>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004ad0:	4b21      	ldr	r3, [pc, #132]	@ (8004b58 <xTaskResumeAll+0x130>)
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8004b48 <xTaskResumeAll+0x120>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1cb      	bne.n	8004a76 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d001      	beq.n	8004ae8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ae4:	f000 fb66 	bl	80051b4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ae8:	4b1c      	ldr	r3, [pc, #112]	@ (8004b5c <xTaskResumeAll+0x134>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d010      	beq.n	8004b16 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004af4:	f000 f846 	bl	8004b84 <xTaskIncrementTick>
 8004af8:	4603      	mov	r3, r0
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d002      	beq.n	8004b04 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004afe:	4b16      	ldr	r3, [pc, #88]	@ (8004b58 <xTaskResumeAll+0x130>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	3b01      	subs	r3, #1
 8004b08:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d1f1      	bne.n	8004af4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004b10:	4b12      	ldr	r3, [pc, #72]	@ (8004b5c <xTaskResumeAll+0x134>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004b16:	4b10      	ldr	r3, [pc, #64]	@ (8004b58 <xTaskResumeAll+0x130>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d009      	beq.n	8004b32 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b22:	4b0f      	ldr	r3, [pc, #60]	@ (8004b60 <xTaskResumeAll+0x138>)
 8004b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b32:	f001 f8fb 	bl	8005d2c <vPortExitCritical>

	return xAlreadyYielded;
 8004b36:	68bb      	ldr	r3, [r7, #8]
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}
 8004b40:	20000df4 	.word	0x20000df4
 8004b44:	20000dcc 	.word	0x20000dcc
 8004b48:	20000d8c 	.word	0x20000d8c
 8004b4c:	20000dd4 	.word	0x20000dd4
 8004b50:	200008fc 	.word	0x200008fc
 8004b54:	200008f8 	.word	0x200008f8
 8004b58:	20000de0 	.word	0x20000de0
 8004b5c:	20000ddc 	.word	0x20000ddc
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b6a:	4b05      	ldr	r3, [pc, #20]	@ (8004b80 <xTaskGetTickCount+0x1c>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b70:	687b      	ldr	r3, [r7, #4]
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000dd0 	.word	0x20000dd0

08004b84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b086      	sub	sp, #24
 8004b88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b8e:	4b4f      	ldr	r3, [pc, #316]	@ (8004ccc <xTaskIncrementTick+0x148>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f040 8090 	bne.w	8004cb8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b98:	4b4d      	ldr	r3, [pc, #308]	@ (8004cd0 <xTaskIncrementTick+0x14c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004ba0:	4a4b      	ldr	r2, [pc, #300]	@ (8004cd0 <xTaskIncrementTick+0x14c>)
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d121      	bne.n	8004bf0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004bac:	4b49      	ldr	r3, [pc, #292]	@ (8004cd4 <xTaskIncrementTick+0x150>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d00b      	beq.n	8004bce <xTaskIncrementTick+0x4a>
	__asm volatile
 8004bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bba:	f383 8811 	msr	BASEPRI, r3
 8004bbe:	f3bf 8f6f 	isb	sy
 8004bc2:	f3bf 8f4f 	dsb	sy
 8004bc6:	603b      	str	r3, [r7, #0]
}
 8004bc8:	bf00      	nop
 8004bca:	bf00      	nop
 8004bcc:	e7fd      	b.n	8004bca <xTaskIncrementTick+0x46>
 8004bce:	4b41      	ldr	r3, [pc, #260]	@ (8004cd4 <xTaskIncrementTick+0x150>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	60fb      	str	r3, [r7, #12]
 8004bd4:	4b40      	ldr	r3, [pc, #256]	@ (8004cd8 <xTaskIncrementTick+0x154>)
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a3e      	ldr	r2, [pc, #248]	@ (8004cd4 <xTaskIncrementTick+0x150>)
 8004bda:	6013      	str	r3, [r2, #0]
 8004bdc:	4a3e      	ldr	r2, [pc, #248]	@ (8004cd8 <xTaskIncrementTick+0x154>)
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6013      	str	r3, [r2, #0]
 8004be2:	4b3e      	ldr	r3, [pc, #248]	@ (8004cdc <xTaskIncrementTick+0x158>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3301      	adds	r3, #1
 8004be8:	4a3c      	ldr	r2, [pc, #240]	@ (8004cdc <xTaskIncrementTick+0x158>)
 8004bea:	6013      	str	r3, [r2, #0]
 8004bec:	f000 fae2 	bl	80051b4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bf0:	4b3b      	ldr	r3, [pc, #236]	@ (8004ce0 <xTaskIncrementTick+0x15c>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	429a      	cmp	r2, r3
 8004bf8:	d349      	bcc.n	8004c8e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bfa:	4b36      	ldr	r3, [pc, #216]	@ (8004cd4 <xTaskIncrementTick+0x150>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d104      	bne.n	8004c0e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c04:	4b36      	ldr	r3, [pc, #216]	@ (8004ce0 <xTaskIncrementTick+0x15c>)
 8004c06:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c0a:	601a      	str	r2, [r3, #0]
					break;
 8004c0c:	e03f      	b.n	8004c8e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c0e:	4b31      	ldr	r3, [pc, #196]	@ (8004cd4 <xTaskIncrementTick+0x150>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	68db      	ldr	r3, [r3, #12]
 8004c16:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	429a      	cmp	r2, r3
 8004c24:	d203      	bcs.n	8004c2e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c26:	4a2e      	ldr	r2, [pc, #184]	@ (8004ce0 <xTaskIncrementTick+0x15c>)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c2c:	e02f      	b.n	8004c8e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	3304      	adds	r3, #4
 8004c32:	4618      	mov	r0, r3
 8004c34:	f7fe ff62 	bl	8003afc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d004      	beq.n	8004c4a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c40:	68bb      	ldr	r3, [r7, #8]
 8004c42:	3318      	adds	r3, #24
 8004c44:	4618      	mov	r0, r3
 8004c46:	f7fe ff59 	bl	8003afc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c4e:	4b25      	ldr	r3, [pc, #148]	@ (8004ce4 <xTaskIncrementTick+0x160>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d903      	bls.n	8004c5e <xTaskIncrementTick+0xda>
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5a:	4a22      	ldr	r2, [pc, #136]	@ (8004ce4 <xTaskIncrementTick+0x160>)
 8004c5c:	6013      	str	r3, [r2, #0]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c62:	4613      	mov	r3, r2
 8004c64:	009b      	lsls	r3, r3, #2
 8004c66:	4413      	add	r3, r2
 8004c68:	009b      	lsls	r3, r3, #2
 8004c6a:	4a1f      	ldr	r2, [pc, #124]	@ (8004ce8 <xTaskIncrementTick+0x164>)
 8004c6c:	441a      	add	r2, r3
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	3304      	adds	r3, #4
 8004c72:	4619      	mov	r1, r3
 8004c74:	4610      	mov	r0, r2
 8004c76:	f7fe fee4 	bl	8003a42 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004cec <xTaskIncrementTick+0x168>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d3b8      	bcc.n	8004bfa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c8c:	e7b5      	b.n	8004bfa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c8e:	4b17      	ldr	r3, [pc, #92]	@ (8004cec <xTaskIncrementTick+0x168>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c94:	4914      	ldr	r1, [pc, #80]	@ (8004ce8 <xTaskIncrementTick+0x164>)
 8004c96:	4613      	mov	r3, r2
 8004c98:	009b      	lsls	r3, r3, #2
 8004c9a:	4413      	add	r3, r2
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	440b      	add	r3, r1
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d901      	bls.n	8004caa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004caa:	4b11      	ldr	r3, [pc, #68]	@ (8004cf0 <xTaskIncrementTick+0x16c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d007      	beq.n	8004cc2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	e004      	b.n	8004cc2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004cf4 <xTaskIncrementTick+0x170>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	3301      	adds	r3, #1
 8004cbe:	4a0d      	ldr	r2, [pc, #52]	@ (8004cf4 <xTaskIncrementTick+0x170>)
 8004cc0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004cc2:	697b      	ldr	r3, [r7, #20]
}
 8004cc4:	4618      	mov	r0, r3
 8004cc6:	3718      	adds	r7, #24
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}
 8004ccc:	20000df4 	.word	0x20000df4
 8004cd0:	20000dd0 	.word	0x20000dd0
 8004cd4:	20000d84 	.word	0x20000d84
 8004cd8:	20000d88 	.word	0x20000d88
 8004cdc:	20000de4 	.word	0x20000de4
 8004ce0:	20000dec 	.word	0x20000dec
 8004ce4:	20000dd4 	.word	0x20000dd4
 8004ce8:	200008fc 	.word	0x200008fc
 8004cec:	200008f8 	.word	0x200008f8
 8004cf0:	20000de0 	.word	0x20000de0
 8004cf4:	20000ddc 	.word	0x20000ddc

08004cf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cfe:	4b2b      	ldr	r3, [pc, #172]	@ (8004dac <vTaskSwitchContext+0xb4>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d003      	beq.n	8004d0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004d06:	4b2a      	ldr	r3, [pc, #168]	@ (8004db0 <vTaskSwitchContext+0xb8>)
 8004d08:	2201      	movs	r2, #1
 8004d0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004d0c:	e047      	b.n	8004d9e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004d0e:	4b28      	ldr	r3, [pc, #160]	@ (8004db0 <vTaskSwitchContext+0xb8>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d14:	4b27      	ldr	r3, [pc, #156]	@ (8004db4 <vTaskSwitchContext+0xbc>)
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	60fb      	str	r3, [r7, #12]
 8004d1a:	e011      	b.n	8004d40 <vTaskSwitchContext+0x48>
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10b      	bne.n	8004d3a <vTaskSwitchContext+0x42>
	__asm volatile
 8004d22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d26:	f383 8811 	msr	BASEPRI, r3
 8004d2a:	f3bf 8f6f 	isb	sy
 8004d2e:	f3bf 8f4f 	dsb	sy
 8004d32:	607b      	str	r3, [r7, #4]
}
 8004d34:	bf00      	nop
 8004d36:	bf00      	nop
 8004d38:	e7fd      	b.n	8004d36 <vTaskSwitchContext+0x3e>
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	491d      	ldr	r1, [pc, #116]	@ (8004db8 <vTaskSwitchContext+0xc0>)
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	4613      	mov	r3, r2
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	4413      	add	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d0e3      	beq.n	8004d1c <vTaskSwitchContext+0x24>
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4613      	mov	r3, r2
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	4413      	add	r3, r2
 8004d5c:	009b      	lsls	r3, r3, #2
 8004d5e:	4a16      	ldr	r2, [pc, #88]	@ (8004db8 <vTaskSwitchContext+0xc0>)
 8004d60:	4413      	add	r3, r2
 8004d62:	60bb      	str	r3, [r7, #8]
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	685a      	ldr	r2, [r3, #4]
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	605a      	str	r2, [r3, #4]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	3308      	adds	r3, #8
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d104      	bne.n	8004d84 <vTaskSwitchContext+0x8c>
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	685a      	ldr	r2, [r3, #4]
 8004d80:	68bb      	ldr	r3, [r7, #8]
 8004d82:	605a      	str	r2, [r3, #4]
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	4a0c      	ldr	r2, [pc, #48]	@ (8004dbc <vTaskSwitchContext+0xc4>)
 8004d8c:	6013      	str	r3, [r2, #0]
 8004d8e:	4a09      	ldr	r2, [pc, #36]	@ (8004db4 <vTaskSwitchContext+0xbc>)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d94:	4b09      	ldr	r3, [pc, #36]	@ (8004dbc <vTaskSwitchContext+0xc4>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	3354      	adds	r3, #84	@ 0x54
 8004d9a:	4a09      	ldr	r2, [pc, #36]	@ (8004dc0 <vTaskSwitchContext+0xc8>)
 8004d9c:	6013      	str	r3, [r2, #0]
}
 8004d9e:	bf00      	nop
 8004da0:	3714      	adds	r7, #20
 8004da2:	46bd      	mov	sp, r7
 8004da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da8:	4770      	bx	lr
 8004daa:	bf00      	nop
 8004dac:	20000df4 	.word	0x20000df4
 8004db0:	20000de0 	.word	0x20000de0
 8004db4:	20000dd4 	.word	0x20000dd4
 8004db8:	200008fc 	.word	0x200008fc
 8004dbc:	200008f8 	.word	0x200008f8
 8004dc0:	20000018 	.word	0x20000018

08004dc4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b084      	sub	sp, #16
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d10b      	bne.n	8004dec <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004dd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dd8:	f383 8811 	msr	BASEPRI, r3
 8004ddc:	f3bf 8f6f 	isb	sy
 8004de0:	f3bf 8f4f 	dsb	sy
 8004de4:	60fb      	str	r3, [r7, #12]
}
 8004de6:	bf00      	nop
 8004de8:	bf00      	nop
 8004dea:	e7fd      	b.n	8004de8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dec:	4b07      	ldr	r3, [pc, #28]	@ (8004e0c <vTaskPlaceOnEventList+0x48>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	3318      	adds	r3, #24
 8004df2:	4619      	mov	r1, r3
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f7fe fe48 	bl	8003a8a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dfa:	2101      	movs	r1, #1
 8004dfc:	6838      	ldr	r0, [r7, #0]
 8004dfe:	f000 fa87 	bl	8005310 <prvAddCurrentTaskToDelayedList>
}
 8004e02:	bf00      	nop
 8004e04:	3710      	adds	r7, #16
 8004e06:	46bd      	mov	sp, r7
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	bf00      	nop
 8004e0c:	200008f8 	.word	0x200008f8

08004e10 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d10b      	bne.n	8004e3a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004e22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e26:	f383 8811 	msr	BASEPRI, r3
 8004e2a:	f3bf 8f6f 	isb	sy
 8004e2e:	f3bf 8f4f 	dsb	sy
 8004e32:	617b      	str	r3, [r7, #20]
}
 8004e34:	bf00      	nop
 8004e36:	bf00      	nop
 8004e38:	e7fd      	b.n	8004e36 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e3a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e64 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	3318      	adds	r3, #24
 8004e40:	4619      	mov	r1, r3
 8004e42:	68f8      	ldr	r0, [r7, #12]
 8004e44:	f7fe fdfd 	bl	8003a42 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d002      	beq.n	8004e54 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004e4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e52:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e54:	6879      	ldr	r1, [r7, #4]
 8004e56:	68b8      	ldr	r0, [r7, #8]
 8004e58:	f000 fa5a 	bl	8005310 <prvAddCurrentTaskToDelayedList>
	}
 8004e5c:	bf00      	nop
 8004e5e:	3718      	adds	r7, #24
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	200008f8 	.word	0x200008f8

08004e68 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	68db      	ldr	r3, [r3, #12]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d10b      	bne.n	8004e96 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004e7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e82:	f383 8811 	msr	BASEPRI, r3
 8004e86:	f3bf 8f6f 	isb	sy
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	60fb      	str	r3, [r7, #12]
}
 8004e90:	bf00      	nop
 8004e92:	bf00      	nop
 8004e94:	e7fd      	b.n	8004e92 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e96:	693b      	ldr	r3, [r7, #16]
 8004e98:	3318      	adds	r3, #24
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	f7fe fe2e 	bl	8003afc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8004f18 <xTaskRemoveFromEventList+0xb0>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d11d      	bne.n	8004ee4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	3304      	adds	r3, #4
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fe fe25 	bl	8003afc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004eb2:	693b      	ldr	r3, [r7, #16]
 8004eb4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb6:	4b19      	ldr	r3, [pc, #100]	@ (8004f1c <xTaskRemoveFromEventList+0xb4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d903      	bls.n	8004ec6 <xTaskRemoveFromEventList+0x5e>
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ec2:	4a16      	ldr	r2, [pc, #88]	@ (8004f1c <xTaskRemoveFromEventList+0xb4>)
 8004ec4:	6013      	str	r3, [r2, #0]
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	4a13      	ldr	r2, [pc, #76]	@ (8004f20 <xTaskRemoveFromEventList+0xb8>)
 8004ed4:	441a      	add	r2, r3
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	3304      	adds	r3, #4
 8004eda:	4619      	mov	r1, r3
 8004edc:	4610      	mov	r0, r2
 8004ede:	f7fe fdb0 	bl	8003a42 <vListInsertEnd>
 8004ee2:	e005      	b.n	8004ef0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004ee4:	693b      	ldr	r3, [r7, #16]
 8004ee6:	3318      	adds	r3, #24
 8004ee8:	4619      	mov	r1, r3
 8004eea:	480e      	ldr	r0, [pc, #56]	@ (8004f24 <xTaskRemoveFromEventList+0xbc>)
 8004eec:	f7fe fda9 	bl	8003a42 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8004f28 <xTaskRemoveFromEventList+0xc0>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d905      	bls.n	8004f0a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004efe:	2301      	movs	r3, #1
 8004f00:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004f02:	4b0a      	ldr	r3, [pc, #40]	@ (8004f2c <xTaskRemoveFromEventList+0xc4>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]
 8004f08:	e001      	b.n	8004f0e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004f0e:	697b      	ldr	r3, [r7, #20]
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3718      	adds	r7, #24
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}
 8004f18:	20000df4 	.word	0x20000df4
 8004f1c:	20000dd4 	.word	0x20000dd4
 8004f20:	200008fc 	.word	0x200008fc
 8004f24:	20000d8c 	.word	0x20000d8c
 8004f28:	200008f8 	.word	0x200008f8
 8004f2c:	20000de0 	.word	0x20000de0

08004f30 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f30:	b480      	push	{r7}
 8004f32:	b083      	sub	sp, #12
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f38:	4b06      	ldr	r3, [pc, #24]	@ (8004f54 <vTaskInternalSetTimeOutState+0x24>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f40:	4b05      	ldr	r3, [pc, #20]	@ (8004f58 <vTaskInternalSetTimeOutState+0x28>)
 8004f42:	681a      	ldr	r2, [r3, #0]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	605a      	str	r2, [r3, #4]
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	20000de4 	.word	0x20000de4
 8004f58:	20000dd0 	.word	0x20000dd0

08004f5c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f5c:	b580      	push	{r7, lr}
 8004f5e:	b088      	sub	sp, #32
 8004f60:	af00      	add	r7, sp, #0
 8004f62:	6078      	str	r0, [r7, #4]
 8004f64:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d10b      	bne.n	8004f84 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	613b      	str	r3, [r7, #16]
}
 8004f7e:	bf00      	nop
 8004f80:	bf00      	nop
 8004f82:	e7fd      	b.n	8004f80 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d10b      	bne.n	8004fa2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	60fb      	str	r3, [r7, #12]
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	e7fd      	b.n	8004f9e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004fa2:	f000 fe91 	bl	8005cc8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004fa6:	4b1d      	ldr	r3, [pc, #116]	@ (800501c <xTaskCheckForTimeOut+0xc0>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fbe:	d102      	bne.n	8004fc6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	61fb      	str	r3, [r7, #28]
 8004fc4:	e023      	b.n	800500e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b15      	ldr	r3, [pc, #84]	@ (8005020 <xTaskCheckForTimeOut+0xc4>)
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d007      	beq.n	8004fe2 <xTaskCheckForTimeOut+0x86>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	69ba      	ldr	r2, [r7, #24]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d302      	bcc.n	8004fe2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	61fb      	str	r3, [r7, #28]
 8004fe0:	e015      	b.n	800500e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	697a      	ldr	r2, [r7, #20]
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d20b      	bcs.n	8005004 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f7ff ff99 	bl	8004f30 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004ffe:	2300      	movs	r3, #0
 8005000:	61fb      	str	r3, [r7, #28]
 8005002:	e004      	b.n	800500e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2200      	movs	r2, #0
 8005008:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800500a:	2301      	movs	r3, #1
 800500c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800500e:	f000 fe8d 	bl	8005d2c <vPortExitCritical>

	return xReturn;
 8005012:	69fb      	ldr	r3, [r7, #28]
}
 8005014:	4618      	mov	r0, r3
 8005016:	3720      	adds	r7, #32
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	20000dd0 	.word	0x20000dd0
 8005020:	20000de4 	.word	0x20000de4

08005024 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005024:	b480      	push	{r7}
 8005026:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005028:	4b03      	ldr	r3, [pc, #12]	@ (8005038 <vTaskMissedYield+0x14>)
 800502a:	2201      	movs	r2, #1
 800502c:	601a      	str	r2, [r3, #0]
}
 800502e:	bf00      	nop
 8005030:	46bd      	mov	sp, r7
 8005032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005036:	4770      	bx	lr
 8005038:	20000de0 	.word	0x20000de0

0800503c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b082      	sub	sp, #8
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005044:	f000 f852 	bl	80050ec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005048:	4b06      	ldr	r3, [pc, #24]	@ (8005064 <prvIdleTask+0x28>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d9f9      	bls.n	8005044 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005050:	4b05      	ldr	r3, [pc, #20]	@ (8005068 <prvIdleTask+0x2c>)
 8005052:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005056:	601a      	str	r2, [r3, #0]
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005060:	e7f0      	b.n	8005044 <prvIdleTask+0x8>
 8005062:	bf00      	nop
 8005064:	200008fc 	.word	0x200008fc
 8005068:	e000ed04 	.word	0xe000ed04

0800506c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800506c:	b580      	push	{r7, lr}
 800506e:	b082      	sub	sp, #8
 8005070:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005072:	2300      	movs	r3, #0
 8005074:	607b      	str	r3, [r7, #4]
 8005076:	e00c      	b.n	8005092 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	4613      	mov	r3, r2
 800507c:	009b      	lsls	r3, r3, #2
 800507e:	4413      	add	r3, r2
 8005080:	009b      	lsls	r3, r3, #2
 8005082:	4a12      	ldr	r2, [pc, #72]	@ (80050cc <prvInitialiseTaskLists+0x60>)
 8005084:	4413      	add	r3, r2
 8005086:	4618      	mov	r0, r3
 8005088:	f7fe fcae 	bl	80039e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	3301      	adds	r3, #1
 8005090:	607b      	str	r3, [r7, #4]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b37      	cmp	r3, #55	@ 0x37
 8005096:	d9ef      	bls.n	8005078 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005098:	480d      	ldr	r0, [pc, #52]	@ (80050d0 <prvInitialiseTaskLists+0x64>)
 800509a:	f7fe fca5 	bl	80039e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800509e:	480d      	ldr	r0, [pc, #52]	@ (80050d4 <prvInitialiseTaskLists+0x68>)
 80050a0:	f7fe fca2 	bl	80039e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80050a4:	480c      	ldr	r0, [pc, #48]	@ (80050d8 <prvInitialiseTaskLists+0x6c>)
 80050a6:	f7fe fc9f 	bl	80039e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80050aa:	480c      	ldr	r0, [pc, #48]	@ (80050dc <prvInitialiseTaskLists+0x70>)
 80050ac:	f7fe fc9c 	bl	80039e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80050b0:	480b      	ldr	r0, [pc, #44]	@ (80050e0 <prvInitialiseTaskLists+0x74>)
 80050b2:	f7fe fc99 	bl	80039e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80050b6:	4b0b      	ldr	r3, [pc, #44]	@ (80050e4 <prvInitialiseTaskLists+0x78>)
 80050b8:	4a05      	ldr	r2, [pc, #20]	@ (80050d0 <prvInitialiseTaskLists+0x64>)
 80050ba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80050bc:	4b0a      	ldr	r3, [pc, #40]	@ (80050e8 <prvInitialiseTaskLists+0x7c>)
 80050be:	4a05      	ldr	r2, [pc, #20]	@ (80050d4 <prvInitialiseTaskLists+0x68>)
 80050c0:	601a      	str	r2, [r3, #0]
}
 80050c2:	bf00      	nop
 80050c4:	3708      	adds	r7, #8
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	200008fc 	.word	0x200008fc
 80050d0:	20000d5c 	.word	0x20000d5c
 80050d4:	20000d70 	.word	0x20000d70
 80050d8:	20000d8c 	.word	0x20000d8c
 80050dc:	20000da0 	.word	0x20000da0
 80050e0:	20000db8 	.word	0x20000db8
 80050e4:	20000d84 	.word	0x20000d84
 80050e8:	20000d88 	.word	0x20000d88

080050ec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b082      	sub	sp, #8
 80050f0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050f2:	e019      	b.n	8005128 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050f4:	f000 fde8 	bl	8005cc8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050f8:	4b10      	ldr	r3, [pc, #64]	@ (800513c <prvCheckTasksWaitingTermination+0x50>)
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	3304      	adds	r3, #4
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fcf9 	bl	8003afc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800510a:	4b0d      	ldr	r3, [pc, #52]	@ (8005140 <prvCheckTasksWaitingTermination+0x54>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	3b01      	subs	r3, #1
 8005110:	4a0b      	ldr	r2, [pc, #44]	@ (8005140 <prvCheckTasksWaitingTermination+0x54>)
 8005112:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005114:	4b0b      	ldr	r3, [pc, #44]	@ (8005144 <prvCheckTasksWaitingTermination+0x58>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	3b01      	subs	r3, #1
 800511a:	4a0a      	ldr	r2, [pc, #40]	@ (8005144 <prvCheckTasksWaitingTermination+0x58>)
 800511c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800511e:	f000 fe05 	bl	8005d2c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f000 f810 	bl	8005148 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005128:	4b06      	ldr	r3, [pc, #24]	@ (8005144 <prvCheckTasksWaitingTermination+0x58>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d1e1      	bne.n	80050f4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005130:	bf00      	nop
 8005132:	bf00      	nop
 8005134:	3708      	adds	r7, #8
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
 800513a:	bf00      	nop
 800513c:	20000da0 	.word	0x20000da0
 8005140:	20000dcc 	.word	0x20000dcc
 8005144:	20000db4 	.word	0x20000db4

08005148 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005148:	b580      	push	{r7, lr}
 800514a:	b084      	sub	sp, #16
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3354      	adds	r3, #84	@ 0x54
 8005154:	4618      	mov	r0, r3
 8005156:	f001 f8cf 	bl	80062f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005160:	2b00      	cmp	r3, #0
 8005162:	d108      	bne.n	8005176 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005168:	4618      	mov	r0, r3
 800516a:	f000 ff9d 	bl	80060a8 <vPortFree>
				vPortFree( pxTCB );
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 ff9a 	bl	80060a8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005174:	e019      	b.n	80051aa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800517c:	2b01      	cmp	r3, #1
 800517e:	d103      	bne.n	8005188 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 ff91 	bl	80060a8 <vPortFree>
	}
 8005186:	e010      	b.n	80051aa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800518e:	2b02      	cmp	r3, #2
 8005190:	d00b      	beq.n	80051aa <prvDeleteTCB+0x62>
	__asm volatile
 8005192:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005196:	f383 8811 	msr	BASEPRI, r3
 800519a:	f3bf 8f6f 	isb	sy
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	60fb      	str	r3, [r7, #12]
}
 80051a4:	bf00      	nop
 80051a6:	bf00      	nop
 80051a8:	e7fd      	b.n	80051a6 <prvDeleteTCB+0x5e>
	}
 80051aa:	bf00      	nop
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80051ba:	4b0c      	ldr	r3, [pc, #48]	@ (80051ec <prvResetNextTaskUnblockTime+0x38>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80051c4:	4b0a      	ldr	r3, [pc, #40]	@ (80051f0 <prvResetNextTaskUnblockTime+0x3c>)
 80051c6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80051ca:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051cc:	e008      	b.n	80051e0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051ce:	4b07      	ldr	r3, [pc, #28]	@ (80051ec <prvResetNextTaskUnblockTime+0x38>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68db      	ldr	r3, [r3, #12]
 80051d4:	68db      	ldr	r3, [r3, #12]
 80051d6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	685b      	ldr	r3, [r3, #4]
 80051dc:	4a04      	ldr	r2, [pc, #16]	@ (80051f0 <prvResetNextTaskUnblockTime+0x3c>)
 80051de:	6013      	str	r3, [r2, #0]
}
 80051e0:	bf00      	nop
 80051e2:	370c      	adds	r7, #12
 80051e4:	46bd      	mov	sp, r7
 80051e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ea:	4770      	bx	lr
 80051ec:	20000d84 	.word	0x20000d84
 80051f0:	20000dec 	.word	0x20000dec

080051f4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051f4:	b480      	push	{r7}
 80051f6:	b083      	sub	sp, #12
 80051f8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051fa:	4b0b      	ldr	r3, [pc, #44]	@ (8005228 <xTaskGetSchedulerState+0x34>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d102      	bne.n	8005208 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005202:	2301      	movs	r3, #1
 8005204:	607b      	str	r3, [r7, #4]
 8005206:	e008      	b.n	800521a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005208:	4b08      	ldr	r3, [pc, #32]	@ (800522c <xTaskGetSchedulerState+0x38>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d102      	bne.n	8005216 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005210:	2302      	movs	r3, #2
 8005212:	607b      	str	r3, [r7, #4]
 8005214:	e001      	b.n	800521a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005216:	2300      	movs	r3, #0
 8005218:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800521a:	687b      	ldr	r3, [r7, #4]
	}
 800521c:	4618      	mov	r0, r3
 800521e:	370c      	adds	r7, #12
 8005220:	46bd      	mov	sp, r7
 8005222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005226:	4770      	bx	lr
 8005228:	20000dd8 	.word	0x20000dd8
 800522c:	20000df4 	.word	0x20000df4

08005230 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d058      	beq.n	80052f8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005246:	4b2f      	ldr	r3, [pc, #188]	@ (8005304 <xTaskPriorityDisinherit+0xd4>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	693a      	ldr	r2, [r7, #16]
 800524c:	429a      	cmp	r2, r3
 800524e:	d00b      	beq.n	8005268 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	60fb      	str	r3, [r7, #12]
}
 8005262:	bf00      	nop
 8005264:	bf00      	nop
 8005266:	e7fd      	b.n	8005264 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10b      	bne.n	8005288 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	60bb      	str	r3, [r7, #8]
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800528c:	1e5a      	subs	r2, r3, #1
 800528e:	693b      	ldr	r3, [r7, #16]
 8005290:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800529a:	429a      	cmp	r2, r3
 800529c:	d02c      	beq.n	80052f8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800529e:	693b      	ldr	r3, [r7, #16]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d128      	bne.n	80052f8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3304      	adds	r3, #4
 80052aa:	4618      	mov	r0, r3
 80052ac:	f7fe fc26 	bl	8003afc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052b8:	693b      	ldr	r3, [r7, #16]
 80052ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052bc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052c8:	4b0f      	ldr	r3, [pc, #60]	@ (8005308 <xTaskPriorityDisinherit+0xd8>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d903      	bls.n	80052d8 <xTaskPriorityDisinherit+0xa8>
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d4:	4a0c      	ldr	r2, [pc, #48]	@ (8005308 <xTaskPriorityDisinherit+0xd8>)
 80052d6:	6013      	str	r3, [r2, #0]
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052dc:	4613      	mov	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	4413      	add	r3, r2
 80052e2:	009b      	lsls	r3, r3, #2
 80052e4:	4a09      	ldr	r2, [pc, #36]	@ (800530c <xTaskPriorityDisinherit+0xdc>)
 80052e6:	441a      	add	r2, r3
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	3304      	adds	r3, #4
 80052ec:	4619      	mov	r1, r3
 80052ee:	4610      	mov	r0, r2
 80052f0:	f7fe fba7 	bl	8003a42 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052f8:	697b      	ldr	r3, [r7, #20]
	}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3718      	adds	r7, #24
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	200008f8 	.word	0x200008f8
 8005308:	20000dd4 	.word	0x20000dd4
 800530c:	200008fc 	.word	0x200008fc

08005310 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
 8005318:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800531a:	4b21      	ldr	r3, [pc, #132]	@ (80053a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005320:	4b20      	ldr	r3, [pc, #128]	@ (80053a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	3304      	adds	r3, #4
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe fbe8 	bl	8003afc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005332:	d10a      	bne.n	800534a <prvAddCurrentTaskToDelayedList+0x3a>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d007      	beq.n	800534a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800533a:	4b1a      	ldr	r3, [pc, #104]	@ (80053a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4819      	ldr	r0, [pc, #100]	@ (80053a8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005344:	f7fe fb7d 	bl	8003a42 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005348:	e026      	b.n	8005398 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4413      	add	r3, r2
 8005350:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005352:	4b14      	ldr	r3, [pc, #80]	@ (80053a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	68ba      	ldr	r2, [r7, #8]
 8005358:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	429a      	cmp	r2, r3
 8005360:	d209      	bcs.n	8005376 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005362:	4b12      	ldr	r3, [pc, #72]	@ (80053ac <prvAddCurrentTaskToDelayedList+0x9c>)
 8005364:	681a      	ldr	r2, [r3, #0]
 8005366:	4b0f      	ldr	r3, [pc, #60]	@ (80053a4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	3304      	adds	r3, #4
 800536c:	4619      	mov	r1, r3
 800536e:	4610      	mov	r0, r2
 8005370:	f7fe fb8b 	bl	8003a8a <vListInsert>
}
 8005374:	e010      	b.n	8005398 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005376:	4b0e      	ldr	r3, [pc, #56]	@ (80053b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	4b0a      	ldr	r3, [pc, #40]	@ (80053a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3304      	adds	r3, #4
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f7fe fb81 	bl	8003a8a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005388:	4b0a      	ldr	r3, [pc, #40]	@ (80053b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	68ba      	ldr	r2, [r7, #8]
 800538e:	429a      	cmp	r2, r3
 8005390:	d202      	bcs.n	8005398 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005392:	4a08      	ldr	r2, [pc, #32]	@ (80053b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	6013      	str	r3, [r2, #0]
}
 8005398:	bf00      	nop
 800539a:	3710      	adds	r7, #16
 800539c:	46bd      	mov	sp, r7
 800539e:	bd80      	pop	{r7, pc}
 80053a0:	20000dd0 	.word	0x20000dd0
 80053a4:	200008f8 	.word	0x200008f8
 80053a8:	20000db8 	.word	0x20000db8
 80053ac:	20000d88 	.word	0x20000d88
 80053b0:	20000d84 	.word	0x20000d84
 80053b4:	20000dec 	.word	0x20000dec

080053b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08a      	sub	sp, #40	@ 0x28
 80053bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80053be:	2300      	movs	r3, #0
 80053c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80053c2:	f000 fb13 	bl	80059ec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80053c6:	4b1d      	ldr	r3, [pc, #116]	@ (800543c <xTimerCreateTimerTask+0x84>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d021      	beq.n	8005412 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053ce:	2300      	movs	r3, #0
 80053d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053d6:	1d3a      	adds	r2, r7, #4
 80053d8:	f107 0108 	add.w	r1, r7, #8
 80053dc:	f107 030c 	add.w	r3, r7, #12
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fe fae7 	bl	80039b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053e6:	6879      	ldr	r1, [r7, #4]
 80053e8:	68bb      	ldr	r3, [r7, #8]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	9202      	str	r2, [sp, #8]
 80053ee:	9301      	str	r3, [sp, #4]
 80053f0:	2302      	movs	r3, #2
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	2300      	movs	r3, #0
 80053f6:	460a      	mov	r2, r1
 80053f8:	4911      	ldr	r1, [pc, #68]	@ (8005440 <xTimerCreateTimerTask+0x88>)
 80053fa:	4812      	ldr	r0, [pc, #72]	@ (8005444 <xTimerCreateTimerTask+0x8c>)
 80053fc:	f7ff f8a2 	bl	8004544 <xTaskCreateStatic>
 8005400:	4603      	mov	r3, r0
 8005402:	4a11      	ldr	r2, [pc, #68]	@ (8005448 <xTimerCreateTimerTask+0x90>)
 8005404:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005406:	4b10      	ldr	r3, [pc, #64]	@ (8005448 <xTimerCreateTimerTask+0x90>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d001      	beq.n	8005412 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800540e:	2301      	movs	r3, #1
 8005410:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10b      	bne.n	8005430 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005418:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800541c:	f383 8811 	msr	BASEPRI, r3
 8005420:	f3bf 8f6f 	isb	sy
 8005424:	f3bf 8f4f 	dsb	sy
 8005428:	613b      	str	r3, [r7, #16]
}
 800542a:	bf00      	nop
 800542c:	bf00      	nop
 800542e:	e7fd      	b.n	800542c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005430:	697b      	ldr	r3, [r7, #20]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3718      	adds	r7, #24
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	20000e28 	.word	0x20000e28
 8005440:	08006528 	.word	0x08006528
 8005444:	08005585 	.word	0x08005585
 8005448:	20000e2c 	.word	0x20000e2c

0800544c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b08a      	sub	sp, #40	@ 0x28
 8005450:	af00      	add	r7, sp, #0
 8005452:	60f8      	str	r0, [r7, #12]
 8005454:	60b9      	str	r1, [r7, #8]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800545a:	2300      	movs	r3, #0
 800545c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2b00      	cmp	r3, #0
 8005462:	d10b      	bne.n	800547c <xTimerGenericCommand+0x30>
	__asm volatile
 8005464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005468:	f383 8811 	msr	BASEPRI, r3
 800546c:	f3bf 8f6f 	isb	sy
 8005470:	f3bf 8f4f 	dsb	sy
 8005474:	623b      	str	r3, [r7, #32]
}
 8005476:	bf00      	nop
 8005478:	bf00      	nop
 800547a:	e7fd      	b.n	8005478 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800547c:	4b19      	ldr	r3, [pc, #100]	@ (80054e4 <xTimerGenericCommand+0x98>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d02a      	beq.n	80054da <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	2b05      	cmp	r3, #5
 8005494:	dc18      	bgt.n	80054c8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005496:	f7ff fead 	bl	80051f4 <xTaskGetSchedulerState>
 800549a:	4603      	mov	r3, r0
 800549c:	2b02      	cmp	r3, #2
 800549e:	d109      	bne.n	80054b4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80054a0:	4b10      	ldr	r3, [pc, #64]	@ (80054e4 <xTimerGenericCommand+0x98>)
 80054a2:	6818      	ldr	r0, [r3, #0]
 80054a4:	f107 0110 	add.w	r1, r7, #16
 80054a8:	2300      	movs	r3, #0
 80054aa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80054ac:	f7fe fc5a 	bl	8003d64 <xQueueGenericSend>
 80054b0:	6278      	str	r0, [r7, #36]	@ 0x24
 80054b2:	e012      	b.n	80054da <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80054b4:	4b0b      	ldr	r3, [pc, #44]	@ (80054e4 <xTimerGenericCommand+0x98>)
 80054b6:	6818      	ldr	r0, [r3, #0]
 80054b8:	f107 0110 	add.w	r1, r7, #16
 80054bc:	2300      	movs	r3, #0
 80054be:	2200      	movs	r2, #0
 80054c0:	f7fe fc50 	bl	8003d64 <xQueueGenericSend>
 80054c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80054c6:	e008      	b.n	80054da <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80054c8:	4b06      	ldr	r3, [pc, #24]	@ (80054e4 <xTimerGenericCommand+0x98>)
 80054ca:	6818      	ldr	r0, [r3, #0]
 80054cc:	f107 0110 	add.w	r1, r7, #16
 80054d0:	2300      	movs	r3, #0
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	f7fe fd48 	bl	8003f68 <xQueueGenericSendFromISR>
 80054d8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3728      	adds	r7, #40	@ 0x28
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	20000e28 	.word	0x20000e28

080054e8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b088      	sub	sp, #32
 80054ec:	af02      	add	r7, sp, #8
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054f2:	4b23      	ldr	r3, [pc, #140]	@ (8005580 <prvProcessExpiredTimer+0x98>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	68db      	ldr	r3, [r3, #12]
 80054fa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	3304      	adds	r3, #4
 8005500:	4618      	mov	r0, r3
 8005502:	f7fe fafb 	bl	8003afc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005506:	697b      	ldr	r3, [r7, #20]
 8005508:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800550c:	f003 0304 	and.w	r3, r3, #4
 8005510:	2b00      	cmp	r3, #0
 8005512:	d023      	beq.n	800555c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005514:	697b      	ldr	r3, [r7, #20]
 8005516:	699a      	ldr	r2, [r3, #24]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	18d1      	adds	r1, r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	683a      	ldr	r2, [r7, #0]
 8005520:	6978      	ldr	r0, [r7, #20]
 8005522:	f000 f8d5 	bl	80056d0 <prvInsertTimerInActiveList>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d020      	beq.n	800556e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800552c:	2300      	movs	r3, #0
 800552e:	9300      	str	r3, [sp, #0]
 8005530:	2300      	movs	r3, #0
 8005532:	687a      	ldr	r2, [r7, #4]
 8005534:	2100      	movs	r1, #0
 8005536:	6978      	ldr	r0, [r7, #20]
 8005538:	f7ff ff88 	bl	800544c <xTimerGenericCommand>
 800553c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d114      	bne.n	800556e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005548:	f383 8811 	msr	BASEPRI, r3
 800554c:	f3bf 8f6f 	isb	sy
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	60fb      	str	r3, [r7, #12]
}
 8005556:	bf00      	nop
 8005558:	bf00      	nop
 800555a:	e7fd      	b.n	8005558 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005562:	f023 0301 	bic.w	r3, r3, #1
 8005566:	b2da      	uxtb	r2, r3
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	6978      	ldr	r0, [r7, #20]
 8005574:	4798      	blx	r3
}
 8005576:	bf00      	nop
 8005578:	3718      	adds	r7, #24
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}
 800557e:	bf00      	nop
 8005580:	20000e20 	.word	0x20000e20

08005584 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800558c:	f107 0308 	add.w	r3, r7, #8
 8005590:	4618      	mov	r0, r3
 8005592:	f000 f859 	bl	8005648 <prvGetNextExpireTime>
 8005596:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	4619      	mov	r1, r3
 800559c:	68f8      	ldr	r0, [r7, #12]
 800559e:	f000 f805 	bl	80055ac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80055a2:	f000 f8d7 	bl	8005754 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80055a6:	bf00      	nop
 80055a8:	e7f0      	b.n	800558c <prvTimerTask+0x8>
	...

080055ac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b084      	sub	sp, #16
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80055b6:	f7ff fa29 	bl	8004a0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80055ba:	f107 0308 	add.w	r3, r7, #8
 80055be:	4618      	mov	r0, r3
 80055c0:	f000 f866 	bl	8005690 <prvSampleTimeNow>
 80055c4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d130      	bne.n	800562e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d10a      	bne.n	80055e8 <prvProcessTimerOrBlockTask+0x3c>
 80055d2:	687a      	ldr	r2, [r7, #4]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d806      	bhi.n	80055e8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055da:	f7ff fa25 	bl	8004a28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055de:	68f9      	ldr	r1, [r7, #12]
 80055e0:	6878      	ldr	r0, [r7, #4]
 80055e2:	f7ff ff81 	bl	80054e8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055e6:	e024      	b.n	8005632 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055e8:	683b      	ldr	r3, [r7, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d008      	beq.n	8005600 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055ee:	4b13      	ldr	r3, [pc, #76]	@ (800563c <prvProcessTimerOrBlockTask+0x90>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d101      	bne.n	80055fc <prvProcessTimerOrBlockTask+0x50>
 80055f8:	2301      	movs	r3, #1
 80055fa:	e000      	b.n	80055fe <prvProcessTimerOrBlockTask+0x52>
 80055fc:	2300      	movs	r3, #0
 80055fe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005600:	4b0f      	ldr	r3, [pc, #60]	@ (8005640 <prvProcessTimerOrBlockTask+0x94>)
 8005602:	6818      	ldr	r0, [r3, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	1ad3      	subs	r3, r2, r3
 800560a:	683a      	ldr	r2, [r7, #0]
 800560c:	4619      	mov	r1, r3
 800560e:	f7fe ff65 	bl	80044dc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005612:	f7ff fa09 	bl	8004a28 <xTaskResumeAll>
 8005616:	4603      	mov	r3, r0
 8005618:	2b00      	cmp	r3, #0
 800561a:	d10a      	bne.n	8005632 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800561c:	4b09      	ldr	r3, [pc, #36]	@ (8005644 <prvProcessTimerOrBlockTask+0x98>)
 800561e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005622:	601a      	str	r2, [r3, #0]
 8005624:	f3bf 8f4f 	dsb	sy
 8005628:	f3bf 8f6f 	isb	sy
}
 800562c:	e001      	b.n	8005632 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800562e:	f7ff f9fb 	bl	8004a28 <xTaskResumeAll>
}
 8005632:	bf00      	nop
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	20000e24 	.word	0x20000e24
 8005640:	20000e28 	.word	0x20000e28
 8005644:	e000ed04 	.word	0xe000ed04

08005648 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005648:	b480      	push	{r7}
 800564a:	b085      	sub	sp, #20
 800564c:	af00      	add	r7, sp, #0
 800564e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005650:	4b0e      	ldr	r3, [pc, #56]	@ (800568c <prvGetNextExpireTime+0x44>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d101      	bne.n	800565e <prvGetNextExpireTime+0x16>
 800565a:	2201      	movs	r2, #1
 800565c:	e000      	b.n	8005660 <prvGetNextExpireTime+0x18>
 800565e:	2200      	movs	r2, #0
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d105      	bne.n	8005678 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800566c:	4b07      	ldr	r3, [pc, #28]	@ (800568c <prvGetNextExpireTime+0x44>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	60fb      	str	r3, [r7, #12]
 8005676:	e001      	b.n	800567c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005678:	2300      	movs	r3, #0
 800567a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800567c:	68fb      	ldr	r3, [r7, #12]
}
 800567e:	4618      	mov	r0, r3
 8005680:	3714      	adds	r7, #20
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	20000e20 	.word	0x20000e20

08005690 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b084      	sub	sp, #16
 8005694:	af00      	add	r7, sp, #0
 8005696:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005698:	f7ff fa64 	bl	8004b64 <xTaskGetTickCount>
 800569c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800569e:	4b0b      	ldr	r3, [pc, #44]	@ (80056cc <prvSampleTimeNow+0x3c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d205      	bcs.n	80056b4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80056a8:	f000 f93a 	bl	8005920 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	601a      	str	r2, [r3, #0]
 80056b2:	e002      	b.n	80056ba <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2200      	movs	r2, #0
 80056b8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80056ba:	4a04      	ldr	r2, [pc, #16]	@ (80056cc <prvSampleTimeNow+0x3c>)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80056c0:	68fb      	ldr	r3, [r7, #12]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3710      	adds	r7, #16
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	20000e30 	.word	0x20000e30

080056d0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d812      	bhi.n	800571c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	1ad2      	subs	r2, r2, r3
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	429a      	cmp	r2, r3
 8005702:	d302      	bcc.n	800570a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005704:	2301      	movs	r3, #1
 8005706:	617b      	str	r3, [r7, #20]
 8005708:	e01b      	b.n	8005742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800570a:	4b10      	ldr	r3, [pc, #64]	@ (800574c <prvInsertTimerInActiveList+0x7c>)
 800570c:	681a      	ldr	r2, [r3, #0]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	3304      	adds	r3, #4
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f7fe f9b8 	bl	8003a8a <vListInsert>
 800571a:	e012      	b.n	8005742 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800571c:	687a      	ldr	r2, [r7, #4]
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	429a      	cmp	r2, r3
 8005722:	d206      	bcs.n	8005732 <prvInsertTimerInActiveList+0x62>
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	429a      	cmp	r2, r3
 800572a:	d302      	bcc.n	8005732 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800572c:	2301      	movs	r3, #1
 800572e:	617b      	str	r3, [r7, #20]
 8005730:	e007      	b.n	8005742 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005732:	4b07      	ldr	r3, [pc, #28]	@ (8005750 <prvInsertTimerInActiveList+0x80>)
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	3304      	adds	r3, #4
 800573a:	4619      	mov	r1, r3
 800573c:	4610      	mov	r0, r2
 800573e:	f7fe f9a4 	bl	8003a8a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005742:	697b      	ldr	r3, [r7, #20]
}
 8005744:	4618      	mov	r0, r3
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20000e24 	.word	0x20000e24
 8005750:	20000e20 	.word	0x20000e20

08005754 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08e      	sub	sp, #56	@ 0x38
 8005758:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800575a:	e0ce      	b.n	80058fa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2b00      	cmp	r3, #0
 8005760:	da19      	bge.n	8005796 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005762:	1d3b      	adds	r3, r7, #4
 8005764:	3304      	adds	r3, #4
 8005766:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d10b      	bne.n	8005786 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800576e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005772:	f383 8811 	msr	BASEPRI, r3
 8005776:	f3bf 8f6f 	isb	sy
 800577a:	f3bf 8f4f 	dsb	sy
 800577e:	61fb      	str	r3, [r7, #28]
}
 8005780:	bf00      	nop
 8005782:	bf00      	nop
 8005784:	e7fd      	b.n	8005782 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005786:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800578c:	6850      	ldr	r0, [r2, #4]
 800578e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005790:	6892      	ldr	r2, [r2, #8]
 8005792:	4611      	mov	r1, r2
 8005794:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	f2c0 80ae 	blt.w	80058fa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80057a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a4:	695b      	ldr	r3, [r3, #20]
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d004      	beq.n	80057b4 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80057aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ac:	3304      	adds	r3, #4
 80057ae:	4618      	mov	r0, r3
 80057b0:	f7fe f9a4 	bl	8003afc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80057b4:	463b      	mov	r3, r7
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7ff ff6a 	bl	8005690 <prvSampleTimeNow>
 80057bc:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2b09      	cmp	r3, #9
 80057c2:	f200 8097 	bhi.w	80058f4 <prvProcessReceivedCommands+0x1a0>
 80057c6:	a201      	add	r2, pc, #4	@ (adr r2, 80057cc <prvProcessReceivedCommands+0x78>)
 80057c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057cc:	080057f5 	.word	0x080057f5
 80057d0:	080057f5 	.word	0x080057f5
 80057d4:	080057f5 	.word	0x080057f5
 80057d8:	0800586b 	.word	0x0800586b
 80057dc:	0800587f 	.word	0x0800587f
 80057e0:	080058cb 	.word	0x080058cb
 80057e4:	080057f5 	.word	0x080057f5
 80057e8:	080057f5 	.word	0x080057f5
 80057ec:	0800586b 	.word	0x0800586b
 80057f0:	0800587f 	.word	0x0800587f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057fa:	f043 0301 	orr.w	r3, r3, #1
 80057fe:	b2da      	uxtb	r2, r3
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580a:	699b      	ldr	r3, [r3, #24]
 800580c:	18d1      	adds	r1, r2, r3
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005814:	f7ff ff5c 	bl	80056d0 <prvInsertTimerInActiveList>
 8005818:	4603      	mov	r3, r0
 800581a:	2b00      	cmp	r3, #0
 800581c:	d06c      	beq.n	80058f8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800581e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005820:	6a1b      	ldr	r3, [r3, #32]
 8005822:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005824:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005828:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800582c:	f003 0304 	and.w	r3, r3, #4
 8005830:	2b00      	cmp	r3, #0
 8005832:	d061      	beq.n	80058f8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005834:	68ba      	ldr	r2, [r7, #8]
 8005836:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005838:	699b      	ldr	r3, [r3, #24]
 800583a:	441a      	add	r2, r3
 800583c:	2300      	movs	r3, #0
 800583e:	9300      	str	r3, [sp, #0]
 8005840:	2300      	movs	r3, #0
 8005842:	2100      	movs	r1, #0
 8005844:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005846:	f7ff fe01 	bl	800544c <xTimerGenericCommand>
 800584a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800584c:	6a3b      	ldr	r3, [r7, #32]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d152      	bne.n	80058f8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005852:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005856:	f383 8811 	msr	BASEPRI, r3
 800585a:	f3bf 8f6f 	isb	sy
 800585e:	f3bf 8f4f 	dsb	sy
 8005862:	61bb      	str	r3, [r7, #24]
}
 8005864:	bf00      	nop
 8005866:	bf00      	nop
 8005868:	e7fd      	b.n	8005866 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800586a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800586c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005870:	f023 0301 	bic.w	r3, r3, #1
 8005874:	b2da      	uxtb	r2, r3
 8005876:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005878:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800587c:	e03d      	b.n	80058fa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800587e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005880:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005884:	f043 0301 	orr.w	r3, r3, #1
 8005888:	b2da      	uxtb	r2, r3
 800588a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800588c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005890:	68ba      	ldr	r2, [r7, #8]
 8005892:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005894:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005896:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d10b      	bne.n	80058b6 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	617b      	str	r3, [r7, #20]
}
 80058b0:	bf00      	nop
 80058b2:	bf00      	nop
 80058b4:	e7fd      	b.n	80058b2 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80058b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	18d1      	adds	r1, r2, r3
 80058be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058c4:	f7ff ff04 	bl	80056d0 <prvInsertTimerInActiveList>
					break;
 80058c8:	e017      	b.n	80058fa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80058ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058d0:	f003 0302 	and.w	r3, r3, #2
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d103      	bne.n	80058e0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80058d8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058da:	f000 fbe5 	bl	80060a8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058de:	e00c      	b.n	80058fa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058e2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058e6:	f023 0301 	bic.w	r3, r3, #1
 80058ea:	b2da      	uxtb	r2, r3
 80058ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058ee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80058f2:	e002      	b.n	80058fa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80058f4:	bf00      	nop
 80058f6:	e000      	b.n	80058fa <prvProcessReceivedCommands+0x1a6>
					break;
 80058f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058fa:	4b08      	ldr	r3, [pc, #32]	@ (800591c <prvProcessReceivedCommands+0x1c8>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	1d39      	adds	r1, r7, #4
 8005900:	2200      	movs	r2, #0
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe fbce 	bl	80040a4 <xQueueReceive>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	f47f af26 	bne.w	800575c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005910:	bf00      	nop
 8005912:	bf00      	nop
 8005914:	3730      	adds	r7, #48	@ 0x30
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}
 800591a:	bf00      	nop
 800591c:	20000e28 	.word	0x20000e28

08005920 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b088      	sub	sp, #32
 8005924:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005926:	e049      	b.n	80059bc <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005928:	4b2e      	ldr	r3, [pc, #184]	@ (80059e4 <prvSwitchTimerLists+0xc4>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005932:	4b2c      	ldr	r3, [pc, #176]	@ (80059e4 <prvSwitchTimerLists+0xc4>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	3304      	adds	r3, #4
 8005940:	4618      	mov	r0, r3
 8005942:	f7fe f8db 	bl	8003afc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	6a1b      	ldr	r3, [r3, #32]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005954:	f003 0304 	and.w	r3, r3, #4
 8005958:	2b00      	cmp	r3, #0
 800595a:	d02f      	beq.n	80059bc <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	693a      	ldr	r2, [r7, #16]
 8005962:	4413      	add	r3, r2
 8005964:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005966:	68ba      	ldr	r2, [r7, #8]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	429a      	cmp	r2, r3
 800596c:	d90e      	bls.n	800598c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	68ba      	ldr	r2, [r7, #8]
 8005972:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800597a:	4b1a      	ldr	r3, [pc, #104]	@ (80059e4 <prvSwitchTimerLists+0xc4>)
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3304      	adds	r3, #4
 8005982:	4619      	mov	r1, r3
 8005984:	4610      	mov	r0, r2
 8005986:	f7fe f880 	bl	8003a8a <vListInsert>
 800598a:	e017      	b.n	80059bc <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800598c:	2300      	movs	r3, #0
 800598e:	9300      	str	r3, [sp, #0]
 8005990:	2300      	movs	r3, #0
 8005992:	693a      	ldr	r2, [r7, #16]
 8005994:	2100      	movs	r1, #0
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f7ff fd58 	bl	800544c <xTimerGenericCommand>
 800599c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d10b      	bne.n	80059bc <prvSwitchTimerLists+0x9c>
	__asm volatile
 80059a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059a8:	f383 8811 	msr	BASEPRI, r3
 80059ac:	f3bf 8f6f 	isb	sy
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	603b      	str	r3, [r7, #0]
}
 80059b6:	bf00      	nop
 80059b8:	bf00      	nop
 80059ba:	e7fd      	b.n	80059b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80059bc:	4b09      	ldr	r3, [pc, #36]	@ (80059e4 <prvSwitchTimerLists+0xc4>)
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d1b0      	bne.n	8005928 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80059c6:	4b07      	ldr	r3, [pc, #28]	@ (80059e4 <prvSwitchTimerLists+0xc4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80059cc:	4b06      	ldr	r3, [pc, #24]	@ (80059e8 <prvSwitchTimerLists+0xc8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	4a04      	ldr	r2, [pc, #16]	@ (80059e4 <prvSwitchTimerLists+0xc4>)
 80059d2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059d4:	4a04      	ldr	r2, [pc, #16]	@ (80059e8 <prvSwitchTimerLists+0xc8>)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	6013      	str	r3, [r2, #0]
}
 80059da:	bf00      	nop
 80059dc:	3718      	adds	r7, #24
 80059de:	46bd      	mov	sp, r7
 80059e0:	bd80      	pop	{r7, pc}
 80059e2:	bf00      	nop
 80059e4:	20000e20 	.word	0x20000e20
 80059e8:	20000e24 	.word	0x20000e24

080059ec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059f2:	f000 f969 	bl	8005cc8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059f6:	4b15      	ldr	r3, [pc, #84]	@ (8005a4c <prvCheckForValidListAndQueue+0x60>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d120      	bne.n	8005a40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059fe:	4814      	ldr	r0, [pc, #80]	@ (8005a50 <prvCheckForValidListAndQueue+0x64>)
 8005a00:	f7fd fff2 	bl	80039e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005a04:	4813      	ldr	r0, [pc, #76]	@ (8005a54 <prvCheckForValidListAndQueue+0x68>)
 8005a06:	f7fd ffef 	bl	80039e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005a0a:	4b13      	ldr	r3, [pc, #76]	@ (8005a58 <prvCheckForValidListAndQueue+0x6c>)
 8005a0c:	4a10      	ldr	r2, [pc, #64]	@ (8005a50 <prvCheckForValidListAndQueue+0x64>)
 8005a0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005a10:	4b12      	ldr	r3, [pc, #72]	@ (8005a5c <prvCheckForValidListAndQueue+0x70>)
 8005a12:	4a10      	ldr	r2, [pc, #64]	@ (8005a54 <prvCheckForValidListAndQueue+0x68>)
 8005a14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005a16:	2300      	movs	r3, #0
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	4b11      	ldr	r3, [pc, #68]	@ (8005a60 <prvCheckForValidListAndQueue+0x74>)
 8005a1c:	4a11      	ldr	r2, [pc, #68]	@ (8005a64 <prvCheckForValidListAndQueue+0x78>)
 8005a1e:	2110      	movs	r1, #16
 8005a20:	200a      	movs	r0, #10
 8005a22:	f7fe f8ff 	bl	8003c24 <xQueueGenericCreateStatic>
 8005a26:	4603      	mov	r3, r0
 8005a28:	4a08      	ldr	r2, [pc, #32]	@ (8005a4c <prvCheckForValidListAndQueue+0x60>)
 8005a2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005a2c:	4b07      	ldr	r3, [pc, #28]	@ (8005a4c <prvCheckForValidListAndQueue+0x60>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a34:	4b05      	ldr	r3, [pc, #20]	@ (8005a4c <prvCheckForValidListAndQueue+0x60>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	490b      	ldr	r1, [pc, #44]	@ (8005a68 <prvCheckForValidListAndQueue+0x7c>)
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fd24 	bl	8004488 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a40:	f000 f974 	bl	8005d2c <vPortExitCritical>
}
 8005a44:	bf00      	nop
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000e28 	.word	0x20000e28
 8005a50:	20000df8 	.word	0x20000df8
 8005a54:	20000e0c 	.word	0x20000e0c
 8005a58:	20000e20 	.word	0x20000e20
 8005a5c:	20000e24 	.word	0x20000e24
 8005a60:	20000ed4 	.word	0x20000ed4
 8005a64:	20000e34 	.word	0x20000e34
 8005a68:	08006530 	.word	0x08006530

08005a6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b085      	sub	sp, #20
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	60b9      	str	r1, [r7, #8]
 8005a76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	3b04      	subs	r3, #4
 8005a7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	3b04      	subs	r3, #4
 8005a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a8c:	68bb      	ldr	r3, [r7, #8]
 8005a8e:	f023 0201 	bic.w	r2, r3, #1
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	3b04      	subs	r3, #4
 8005a9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8005ad0 <pxPortInitialiseStack+0x64>)
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	3b14      	subs	r3, #20
 8005aa6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	3b04      	subs	r3, #4
 8005ab2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f06f 0202 	mvn.w	r2, #2
 8005aba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	3b20      	subs	r3, #32
 8005ac0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
}
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	3714      	adds	r7, #20
 8005ac8:	46bd      	mov	sp, r7
 8005aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ace:	4770      	bx	lr
 8005ad0:	08005ad5 	.word	0x08005ad5

08005ad4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b085      	sub	sp, #20
 8005ad8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005ade:	4b13      	ldr	r3, [pc, #76]	@ (8005b2c <prvTaskExitError+0x58>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005ae6:	d00b      	beq.n	8005b00 <prvTaskExitError+0x2c>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	60fb      	str	r3, [r7, #12]
}
 8005afa:	bf00      	nop
 8005afc:	bf00      	nop
 8005afe:	e7fd      	b.n	8005afc <prvTaskExitError+0x28>
	__asm volatile
 8005b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	60bb      	str	r3, [r7, #8]
}
 8005b12:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005b14:	bf00      	nop
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d0fc      	beq.n	8005b16 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005b1c:	bf00      	nop
 8005b1e:	bf00      	nop
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	20000014 	.word	0x20000014

08005b30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005b30:	4b07      	ldr	r3, [pc, #28]	@ (8005b50 <pxCurrentTCBConst2>)
 8005b32:	6819      	ldr	r1, [r3, #0]
 8005b34:	6808      	ldr	r0, [r1, #0]
 8005b36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b3a:	f380 8809 	msr	PSP, r0
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f04f 0000 	mov.w	r0, #0
 8005b46:	f380 8811 	msr	BASEPRI, r0
 8005b4a:	4770      	bx	lr
 8005b4c:	f3af 8000 	nop.w

08005b50 <pxCurrentTCBConst2>:
 8005b50:	200008f8 	.word	0x200008f8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b54:	bf00      	nop
 8005b56:	bf00      	nop

08005b58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b58:	4808      	ldr	r0, [pc, #32]	@ (8005b7c <prvPortStartFirstTask+0x24>)
 8005b5a:	6800      	ldr	r0, [r0, #0]
 8005b5c:	6800      	ldr	r0, [r0, #0]
 8005b5e:	f380 8808 	msr	MSP, r0
 8005b62:	f04f 0000 	mov.w	r0, #0
 8005b66:	f380 8814 	msr	CONTROL, r0
 8005b6a:	b662      	cpsie	i
 8005b6c:	b661      	cpsie	f
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	f3bf 8f6f 	isb	sy
 8005b76:	df00      	svc	0
 8005b78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b7a:	bf00      	nop
 8005b7c:	e000ed08 	.word	0xe000ed08

08005b80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b086      	sub	sp, #24
 8005b84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b86:	4b47      	ldr	r3, [pc, #284]	@ (8005ca4 <xPortStartScheduler+0x124>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	4a47      	ldr	r2, [pc, #284]	@ (8005ca8 <xPortStartScheduler+0x128>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d10b      	bne.n	8005ba8 <xPortStartScheduler+0x28>
	__asm volatile
 8005b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b94:	f383 8811 	msr	BASEPRI, r3
 8005b98:	f3bf 8f6f 	isb	sy
 8005b9c:	f3bf 8f4f 	dsb	sy
 8005ba0:	60fb      	str	r3, [r7, #12]
}
 8005ba2:	bf00      	nop
 8005ba4:	bf00      	nop
 8005ba6:	e7fd      	b.n	8005ba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005ba8:	4b3e      	ldr	r3, [pc, #248]	@ (8005ca4 <xPortStartScheduler+0x124>)
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a3f      	ldr	r2, [pc, #252]	@ (8005cac <xPortStartScheduler+0x12c>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d10b      	bne.n	8005bca <xPortStartScheduler+0x4a>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	613b      	str	r3, [r7, #16]
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	e7fd      	b.n	8005bc6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005bca:	4b39      	ldr	r3, [pc, #228]	@ (8005cb0 <xPortStartScheduler+0x130>)
 8005bcc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005bce:	697b      	ldr	r3, [r7, #20]
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005bd6:	697b      	ldr	r3, [r7, #20]
 8005bd8:	22ff      	movs	r2, #255	@ 0xff
 8005bda:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	781b      	ldrb	r3, [r3, #0]
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005be4:	78fb      	ldrb	r3, [r7, #3]
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005bec:	b2da      	uxtb	r2, r3
 8005bee:	4b31      	ldr	r3, [pc, #196]	@ (8005cb4 <xPortStartScheduler+0x134>)
 8005bf0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005bf2:	4b31      	ldr	r3, [pc, #196]	@ (8005cb8 <xPortStartScheduler+0x138>)
 8005bf4:	2207      	movs	r2, #7
 8005bf6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bf8:	e009      	b.n	8005c0e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8005bfa:	4b2f      	ldr	r3, [pc, #188]	@ (8005cb8 <xPortStartScheduler+0x138>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3b01      	subs	r3, #1
 8005c00:	4a2d      	ldr	r2, [pc, #180]	@ (8005cb8 <xPortStartScheduler+0x138>)
 8005c02:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005c04:	78fb      	ldrb	r3, [r7, #3]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	005b      	lsls	r3, r3, #1
 8005c0a:	b2db      	uxtb	r3, r3
 8005c0c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005c0e:	78fb      	ldrb	r3, [r7, #3]
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c16:	2b80      	cmp	r3, #128	@ 0x80
 8005c18:	d0ef      	beq.n	8005bfa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005c1a:	4b27      	ldr	r3, [pc, #156]	@ (8005cb8 <xPortStartScheduler+0x138>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f1c3 0307 	rsb	r3, r3, #7
 8005c22:	2b04      	cmp	r3, #4
 8005c24:	d00b      	beq.n	8005c3e <xPortStartScheduler+0xbe>
	__asm volatile
 8005c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2a:	f383 8811 	msr	BASEPRI, r3
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f3bf 8f4f 	dsb	sy
 8005c36:	60bb      	str	r3, [r7, #8]
}
 8005c38:	bf00      	nop
 8005c3a:	bf00      	nop
 8005c3c:	e7fd      	b.n	8005c3a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005c3e:	4b1e      	ldr	r3, [pc, #120]	@ (8005cb8 <xPortStartScheduler+0x138>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	021b      	lsls	r3, r3, #8
 8005c44:	4a1c      	ldr	r2, [pc, #112]	@ (8005cb8 <xPortStartScheduler+0x138>)
 8005c46:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005c48:	4b1b      	ldr	r3, [pc, #108]	@ (8005cb8 <xPortStartScheduler+0x138>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005c50:	4a19      	ldr	r2, [pc, #100]	@ (8005cb8 <xPortStartScheduler+0x138>)
 8005c52:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	b2da      	uxtb	r2, r3
 8005c58:	697b      	ldr	r3, [r7, #20]
 8005c5a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c5c:	4b17      	ldr	r3, [pc, #92]	@ (8005cbc <xPortStartScheduler+0x13c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a16      	ldr	r2, [pc, #88]	@ (8005cbc <xPortStartScheduler+0x13c>)
 8005c62:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005c66:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c68:	4b14      	ldr	r3, [pc, #80]	@ (8005cbc <xPortStartScheduler+0x13c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4a13      	ldr	r2, [pc, #76]	@ (8005cbc <xPortStartScheduler+0x13c>)
 8005c6e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005c72:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c74:	f000 f8da 	bl	8005e2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c78:	4b11      	ldr	r3, [pc, #68]	@ (8005cc0 <xPortStartScheduler+0x140>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c7e:	f000 f8f9 	bl	8005e74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c82:	4b10      	ldr	r3, [pc, #64]	@ (8005cc4 <xPortStartScheduler+0x144>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a0f      	ldr	r2, [pc, #60]	@ (8005cc4 <xPortStartScheduler+0x144>)
 8005c88:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005c8c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c8e:	f7ff ff63 	bl	8005b58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c92:	f7ff f831 	bl	8004cf8 <vTaskSwitchContext>
	prvTaskExitError();
 8005c96:	f7ff ff1d 	bl	8005ad4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c9a:	2300      	movs	r3, #0
}
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	3718      	adds	r7, #24
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	e000ed00 	.word	0xe000ed00
 8005ca8:	410fc271 	.word	0x410fc271
 8005cac:	410fc270 	.word	0x410fc270
 8005cb0:	e000e400 	.word	0xe000e400
 8005cb4:	20000f24 	.word	0x20000f24
 8005cb8:	20000f28 	.word	0x20000f28
 8005cbc:	e000ed20 	.word	0xe000ed20
 8005cc0:	20000014 	.word	0x20000014
 8005cc4:	e000ef34 	.word	0xe000ef34

08005cc8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005cc8:	b480      	push	{r7}
 8005cca:	b083      	sub	sp, #12
 8005ccc:	af00      	add	r7, sp, #0
	__asm volatile
 8005cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	607b      	str	r3, [r7, #4]
}
 8005ce0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ce2:	4b10      	ldr	r3, [pc, #64]	@ (8005d24 <vPortEnterCritical+0x5c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	4a0e      	ldr	r2, [pc, #56]	@ (8005d24 <vPortEnterCritical+0x5c>)
 8005cea:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005cec:	4b0d      	ldr	r3, [pc, #52]	@ (8005d24 <vPortEnterCritical+0x5c>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d110      	bne.n	8005d16 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005cf4:	4b0c      	ldr	r3, [pc, #48]	@ (8005d28 <vPortEnterCritical+0x60>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00b      	beq.n	8005d16 <vPortEnterCritical+0x4e>
	__asm volatile
 8005cfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	603b      	str	r3, [r7, #0]
}
 8005d10:	bf00      	nop
 8005d12:	bf00      	nop
 8005d14:	e7fd      	b.n	8005d12 <vPortEnterCritical+0x4a>
	}
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000014 	.word	0x20000014
 8005d28:	e000ed04 	.word	0xe000ed04

08005d2c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005d32:	4b12      	ldr	r3, [pc, #72]	@ (8005d7c <vPortExitCritical+0x50>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10b      	bne.n	8005d52 <vPortExitCritical+0x26>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	607b      	str	r3, [r7, #4]
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	e7fd      	b.n	8005d4e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005d52:	4b0a      	ldr	r3, [pc, #40]	@ (8005d7c <vPortExitCritical+0x50>)
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	3b01      	subs	r3, #1
 8005d58:	4a08      	ldr	r2, [pc, #32]	@ (8005d7c <vPortExitCritical+0x50>)
 8005d5a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d5c:	4b07      	ldr	r3, [pc, #28]	@ (8005d7c <vPortExitCritical+0x50>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d105      	bne.n	8005d70 <vPortExitCritical+0x44>
 8005d64:	2300      	movs	r3, #0
 8005d66:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	f383 8811 	msr	BASEPRI, r3
}
 8005d6e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d70:	bf00      	nop
 8005d72:	370c      	adds	r7, #12
 8005d74:	46bd      	mov	sp, r7
 8005d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7a:	4770      	bx	lr
 8005d7c:	20000014 	.word	0x20000014

08005d80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d80:	f3ef 8009 	mrs	r0, PSP
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	4b15      	ldr	r3, [pc, #84]	@ (8005de0 <pxCurrentTCBConst>)
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	f01e 0f10 	tst.w	lr, #16
 8005d90:	bf08      	it	eq
 8005d92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d9a:	6010      	str	r0, [r2, #0]
 8005d9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005da0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005da4:	f380 8811 	msr	BASEPRI, r0
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f7fe ffa2 	bl	8004cf8 <vTaskSwitchContext>
 8005db4:	f04f 0000 	mov.w	r0, #0
 8005db8:	f380 8811 	msr	BASEPRI, r0
 8005dbc:	bc09      	pop	{r0, r3}
 8005dbe:	6819      	ldr	r1, [r3, #0]
 8005dc0:	6808      	ldr	r0, [r1, #0]
 8005dc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dc6:	f01e 0f10 	tst.w	lr, #16
 8005dca:	bf08      	it	eq
 8005dcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005dd0:	f380 8809 	msr	PSP, r0
 8005dd4:	f3bf 8f6f 	isb	sy
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	f3af 8000 	nop.w

08005de0 <pxCurrentTCBConst>:
 8005de0:	200008f8 	.word	0x200008f8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005de4:	bf00      	nop
 8005de6:	bf00      	nop

08005de8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005de8:	b580      	push	{r7, lr}
 8005dea:	b082      	sub	sp, #8
 8005dec:	af00      	add	r7, sp, #0
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	607b      	str	r3, [r7, #4]
}
 8005e00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005e02:	f7fe febf 	bl	8004b84 <xTaskIncrementTick>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d003      	beq.n	8005e14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005e0c:	4b06      	ldr	r3, [pc, #24]	@ (8005e28 <xPortSysTickHandler+0x40>)
 8005e0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e12:	601a      	str	r2, [r3, #0]
 8005e14:	2300      	movs	r3, #0
 8005e16:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	f383 8811 	msr	BASEPRI, r3
}
 8005e1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005e20:	bf00      	nop
 8005e22:	3708      	adds	r7, #8
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}
 8005e28:	e000ed04 	.word	0xe000ed04

08005e2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005e30:	4b0b      	ldr	r3, [pc, #44]	@ (8005e60 <vPortSetupTimerInterrupt+0x34>)
 8005e32:	2200      	movs	r2, #0
 8005e34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005e36:	4b0b      	ldr	r3, [pc, #44]	@ (8005e64 <vPortSetupTimerInterrupt+0x38>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005e3c:	4b0a      	ldr	r3, [pc, #40]	@ (8005e68 <vPortSetupTimerInterrupt+0x3c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a0a      	ldr	r2, [pc, #40]	@ (8005e6c <vPortSetupTimerInterrupt+0x40>)
 8005e42:	fba2 2303 	umull	r2, r3, r2, r3
 8005e46:	099b      	lsrs	r3, r3, #6
 8005e48:	4a09      	ldr	r2, [pc, #36]	@ (8005e70 <vPortSetupTimerInterrupt+0x44>)
 8005e4a:	3b01      	subs	r3, #1
 8005e4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005e4e:	4b04      	ldr	r3, [pc, #16]	@ (8005e60 <vPortSetupTimerInterrupt+0x34>)
 8005e50:	2207      	movs	r2, #7
 8005e52:	601a      	str	r2, [r3, #0]
}
 8005e54:	bf00      	nop
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr
 8005e5e:	bf00      	nop
 8005e60:	e000e010 	.word	0xe000e010
 8005e64:	e000e018 	.word	0xe000e018
 8005e68:	20000008 	.word	0x20000008
 8005e6c:	10624dd3 	.word	0x10624dd3
 8005e70:	e000e014 	.word	0xe000e014

08005e74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e74:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8005e84 <vPortEnableVFP+0x10>
 8005e78:	6801      	ldr	r1, [r0, #0]
 8005e7a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8005e7e:	6001      	str	r1, [r0, #0]
 8005e80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e82:	bf00      	nop
 8005e84:	e000ed88 	.word	0xe000ed88

08005e88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e8e:	f3ef 8305 	mrs	r3, IPSR
 8005e92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b0f      	cmp	r3, #15
 8005e98:	d915      	bls.n	8005ec6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e9a:	4a18      	ldr	r2, [pc, #96]	@ (8005efc <vPortValidateInterruptPriority+0x74>)
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	4413      	add	r3, r2
 8005ea0:	781b      	ldrb	r3, [r3, #0]
 8005ea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ea4:	4b16      	ldr	r3, [pc, #88]	@ (8005f00 <vPortValidateInterruptPriority+0x78>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	7afa      	ldrb	r2, [r7, #11]
 8005eaa:	429a      	cmp	r2, r3
 8005eac:	d20b      	bcs.n	8005ec6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	607b      	str	r3, [r7, #4]
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop
 8005ec4:	e7fd      	b.n	8005ec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f04 <vPortValidateInterruptPriority+0x7c>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005ece:	4b0e      	ldr	r3, [pc, #56]	@ (8005f08 <vPortValidateInterruptPriority+0x80>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d90b      	bls.n	8005eee <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	603b      	str	r3, [r7, #0]
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	e7fd      	b.n	8005eea <vPortValidateInterruptPriority+0x62>
	}
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	e000e3f0 	.word	0xe000e3f0
 8005f00:	20000f24 	.word	0x20000f24
 8005f04:	e000ed0c 	.word	0xe000ed0c
 8005f08:	20000f28 	.word	0x20000f28

08005f0c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b08a      	sub	sp, #40	@ 0x28
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005f14:	2300      	movs	r3, #0
 8005f16:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005f18:	f7fe fd78 	bl	8004a0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005f1c:	4b5c      	ldr	r3, [pc, #368]	@ (8006090 <pvPortMalloc+0x184>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d101      	bne.n	8005f28 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005f24:	f000 f924 	bl	8006170 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005f28:	4b5a      	ldr	r3, [pc, #360]	@ (8006094 <pvPortMalloc+0x188>)
 8005f2a:	681a      	ldr	r2, [r3, #0]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	4013      	ands	r3, r2
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	f040 8095 	bne.w	8006060 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d01e      	beq.n	8005f7a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4413      	add	r3, r2
 8005f42:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d015      	beq.n	8005f7a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f023 0307 	bic.w	r3, r3, #7
 8005f54:	3308      	adds	r3, #8
 8005f56:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f003 0307 	and.w	r3, r3, #7
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d00b      	beq.n	8005f7a <pvPortMalloc+0x6e>
	__asm volatile
 8005f62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f66:	f383 8811 	msr	BASEPRI, r3
 8005f6a:	f3bf 8f6f 	isb	sy
 8005f6e:	f3bf 8f4f 	dsb	sy
 8005f72:	617b      	str	r3, [r7, #20]
}
 8005f74:	bf00      	nop
 8005f76:	bf00      	nop
 8005f78:	e7fd      	b.n	8005f76 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d06f      	beq.n	8006060 <pvPortMalloc+0x154>
 8005f80:	4b45      	ldr	r3, [pc, #276]	@ (8006098 <pvPortMalloc+0x18c>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	687a      	ldr	r2, [r7, #4]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d86a      	bhi.n	8006060 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f8a:	4b44      	ldr	r3, [pc, #272]	@ (800609c <pvPortMalloc+0x190>)
 8005f8c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f8e:	4b43      	ldr	r3, [pc, #268]	@ (800609c <pvPortMalloc+0x190>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f94:	e004      	b.n	8005fa0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f98:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	685b      	ldr	r3, [r3, #4]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	429a      	cmp	r2, r3
 8005fa8:	d903      	bls.n	8005fb2 <pvPortMalloc+0xa6>
 8005faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f1      	bne.n	8005f96 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005fb2:	4b37      	ldr	r3, [pc, #220]	@ (8006090 <pvPortMalloc+0x184>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d051      	beq.n	8006060 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	2208      	movs	r2, #8
 8005fc2:	4413      	add	r3, r2
 8005fc4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	6a3b      	ldr	r3, [r7, #32]
 8005fcc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fd0:	685a      	ldr	r2, [r3, #4]
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	1ad2      	subs	r2, r2, r3
 8005fd6:	2308      	movs	r3, #8
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d920      	bls.n	8006020 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	4413      	add	r3, r2
 8005fe4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	f003 0307 	and.w	r3, r3, #7
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d00b      	beq.n	8006008 <pvPortMalloc+0xfc>
	__asm volatile
 8005ff0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ff4:	f383 8811 	msr	BASEPRI, r3
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	f3bf 8f4f 	dsb	sy
 8006000:	613b      	str	r3, [r7, #16]
}
 8006002:	bf00      	nop
 8006004:	bf00      	nop
 8006006:	e7fd      	b.n	8006004 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800600a:	685a      	ldr	r2, [r3, #4]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	1ad2      	subs	r2, r2, r3
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006016:	687a      	ldr	r2, [r7, #4]
 8006018:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800601a:	69b8      	ldr	r0, [r7, #24]
 800601c:	f000 f90a 	bl	8006234 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006020:	4b1d      	ldr	r3, [pc, #116]	@ (8006098 <pvPortMalloc+0x18c>)
 8006022:	681a      	ldr	r2, [r3, #0]
 8006024:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	4a1b      	ldr	r2, [pc, #108]	@ (8006098 <pvPortMalloc+0x18c>)
 800602c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800602e:	4b1a      	ldr	r3, [pc, #104]	@ (8006098 <pvPortMalloc+0x18c>)
 8006030:	681a      	ldr	r2, [r3, #0]
 8006032:	4b1b      	ldr	r3, [pc, #108]	@ (80060a0 <pvPortMalloc+0x194>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	429a      	cmp	r2, r3
 8006038:	d203      	bcs.n	8006042 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800603a:	4b17      	ldr	r3, [pc, #92]	@ (8006098 <pvPortMalloc+0x18c>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a18      	ldr	r2, [pc, #96]	@ (80060a0 <pvPortMalloc+0x194>)
 8006040:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	4b13      	ldr	r3, [pc, #76]	@ (8006094 <pvPortMalloc+0x188>)
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	431a      	orrs	r2, r3
 800604c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800604e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006052:	2200      	movs	r2, #0
 8006054:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006056:	4b13      	ldr	r3, [pc, #76]	@ (80060a4 <pvPortMalloc+0x198>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	3301      	adds	r3, #1
 800605c:	4a11      	ldr	r2, [pc, #68]	@ (80060a4 <pvPortMalloc+0x198>)
 800605e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006060:	f7fe fce2 	bl	8004a28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006064:	69fb      	ldr	r3, [r7, #28]
 8006066:	f003 0307 	and.w	r3, r3, #7
 800606a:	2b00      	cmp	r3, #0
 800606c:	d00b      	beq.n	8006086 <pvPortMalloc+0x17a>
	__asm volatile
 800606e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006072:	f383 8811 	msr	BASEPRI, r3
 8006076:	f3bf 8f6f 	isb	sy
 800607a:	f3bf 8f4f 	dsb	sy
 800607e:	60fb      	str	r3, [r7, #12]
}
 8006080:	bf00      	nop
 8006082:	bf00      	nop
 8006084:	e7fd      	b.n	8006082 <pvPortMalloc+0x176>
	return pvReturn;
 8006086:	69fb      	ldr	r3, [r7, #28]
}
 8006088:	4618      	mov	r0, r3
 800608a:	3728      	adds	r7, #40	@ 0x28
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	20001aec 	.word	0x20001aec
 8006094:	20001b00 	.word	0x20001b00
 8006098:	20001af0 	.word	0x20001af0
 800609c:	20001ae4 	.word	0x20001ae4
 80060a0:	20001af4 	.word	0x20001af4
 80060a4:	20001af8 	.word	0x20001af8

080060a8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d04f      	beq.n	800615a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80060ba:	2308      	movs	r3, #8
 80060bc:	425b      	negs	r3, r3
 80060be:	697a      	ldr	r2, [r7, #20]
 80060c0:	4413      	add	r3, r2
 80060c2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	4b25      	ldr	r3, [pc, #148]	@ (8006164 <vPortFree+0xbc>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	4013      	ands	r3, r2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10b      	bne.n	80060ee <vPortFree+0x46>
	__asm volatile
 80060d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060da:	f383 8811 	msr	BASEPRI, r3
 80060de:	f3bf 8f6f 	isb	sy
 80060e2:	f3bf 8f4f 	dsb	sy
 80060e6:	60fb      	str	r3, [r7, #12]
}
 80060e8:	bf00      	nop
 80060ea:	bf00      	nop
 80060ec:	e7fd      	b.n	80060ea <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00b      	beq.n	800610e <vPortFree+0x66>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	60bb      	str	r3, [r7, #8]
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	e7fd      	b.n	800610a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	4b14      	ldr	r3, [pc, #80]	@ (8006164 <vPortFree+0xbc>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4013      	ands	r3, r2
 8006118:	2b00      	cmp	r3, #0
 800611a:	d01e      	beq.n	800615a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d11a      	bne.n	800615a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006124:	693b      	ldr	r3, [r7, #16]
 8006126:	685a      	ldr	r2, [r3, #4]
 8006128:	4b0e      	ldr	r3, [pc, #56]	@ (8006164 <vPortFree+0xbc>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	43db      	mvns	r3, r3
 800612e:	401a      	ands	r2, r3
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006134:	f7fe fc6a 	bl	8004a0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006138:	693b      	ldr	r3, [r7, #16]
 800613a:	685a      	ldr	r2, [r3, #4]
 800613c:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <vPortFree+0xc0>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4413      	add	r3, r2
 8006142:	4a09      	ldr	r2, [pc, #36]	@ (8006168 <vPortFree+0xc0>)
 8006144:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006146:	6938      	ldr	r0, [r7, #16]
 8006148:	f000 f874 	bl	8006234 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800614c:	4b07      	ldr	r3, [pc, #28]	@ (800616c <vPortFree+0xc4>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	3301      	adds	r3, #1
 8006152:	4a06      	ldr	r2, [pc, #24]	@ (800616c <vPortFree+0xc4>)
 8006154:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006156:	f7fe fc67 	bl	8004a28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800615a:	bf00      	nop
 800615c:	3718      	adds	r7, #24
 800615e:	46bd      	mov	sp, r7
 8006160:	bd80      	pop	{r7, pc}
 8006162:	bf00      	nop
 8006164:	20001b00 	.word	0x20001b00
 8006168:	20001af0 	.word	0x20001af0
 800616c:	20001afc 	.word	0x20001afc

08006170 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006170:	b480      	push	{r7}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006176:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 800617a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800617c:	4b27      	ldr	r3, [pc, #156]	@ (800621c <prvHeapInit+0xac>)
 800617e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	f003 0307 	and.w	r3, r3, #7
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00c      	beq.n	80061a4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3307      	adds	r3, #7
 800618e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	f023 0307 	bic.w	r3, r3, #7
 8006196:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006198:	68ba      	ldr	r2, [r7, #8]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	1ad3      	subs	r3, r2, r3
 800619e:	4a1f      	ldr	r2, [pc, #124]	@ (800621c <prvHeapInit+0xac>)
 80061a0:	4413      	add	r3, r2
 80061a2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80061a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006220 <prvHeapInit+0xb0>)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80061ae:	4b1c      	ldr	r3, [pc, #112]	@ (8006220 <prvHeapInit+0xb0>)
 80061b0:	2200      	movs	r2, #0
 80061b2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	68ba      	ldr	r2, [r7, #8]
 80061b8:	4413      	add	r3, r2
 80061ba:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80061bc:	2208      	movs	r2, #8
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	1a9b      	subs	r3, r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	f023 0307 	bic.w	r3, r3, #7
 80061ca:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	4a15      	ldr	r2, [pc, #84]	@ (8006224 <prvHeapInit+0xb4>)
 80061d0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80061d2:	4b14      	ldr	r3, [pc, #80]	@ (8006224 <prvHeapInit+0xb4>)
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	2200      	movs	r2, #0
 80061d8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80061da:	4b12      	ldr	r3, [pc, #72]	@ (8006224 <prvHeapInit+0xb4>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	2200      	movs	r2, #0
 80061e0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	68fa      	ldr	r2, [r7, #12]
 80061ea:	1ad2      	subs	r2, r2, r3
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80061f0:	4b0c      	ldr	r3, [pc, #48]	@ (8006224 <prvHeapInit+0xb4>)
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	4a0a      	ldr	r2, [pc, #40]	@ (8006228 <prvHeapInit+0xb8>)
 80061fe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	4a09      	ldr	r2, [pc, #36]	@ (800622c <prvHeapInit+0xbc>)
 8006206:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006208:	4b09      	ldr	r3, [pc, #36]	@ (8006230 <prvHeapInit+0xc0>)
 800620a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800620e:	601a      	str	r2, [r3, #0]
}
 8006210:	bf00      	nop
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr
 800621c:	20000f2c 	.word	0x20000f2c
 8006220:	20001ae4 	.word	0x20001ae4
 8006224:	20001aec 	.word	0x20001aec
 8006228:	20001af4 	.word	0x20001af4
 800622c:	20001af0 	.word	0x20001af0
 8006230:	20001b00 	.word	0x20001b00

08006234 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006234:	b480      	push	{r7}
 8006236:	b085      	sub	sp, #20
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800623c:	4b28      	ldr	r3, [pc, #160]	@ (80062e0 <prvInsertBlockIntoFreeList+0xac>)
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e002      	b.n	8006248 <prvInsertBlockIntoFreeList+0x14>
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60fb      	str	r3, [r7, #12]
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	687a      	ldr	r2, [r7, #4]
 800624e:	429a      	cmp	r2, r3
 8006250:	d8f7      	bhi.n	8006242 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4413      	add	r3, r2
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	429a      	cmp	r2, r3
 8006262:	d108      	bne.n	8006276 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	685a      	ldr	r2, [r3, #4]
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	685b      	ldr	r3, [r3, #4]
 800626c:	441a      	add	r2, r3
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	68ba      	ldr	r2, [r7, #8]
 8006280:	441a      	add	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	429a      	cmp	r2, r3
 8006288:	d118      	bne.n	80062bc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681a      	ldr	r2, [r3, #0]
 800628e:	4b15      	ldr	r3, [pc, #84]	@ (80062e4 <prvInsertBlockIntoFreeList+0xb0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	429a      	cmp	r2, r3
 8006294:	d00d      	beq.n	80062b2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	685a      	ldr	r2, [r3, #4]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	441a      	add	r2, r3
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681a      	ldr	r2, [r3, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	601a      	str	r2, [r3, #0]
 80062b0:	e008      	b.n	80062c4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80062b2:	4b0c      	ldr	r3, [pc, #48]	@ (80062e4 <prvInsertBlockIntoFreeList+0xb0>)
 80062b4:	681a      	ldr	r2, [r3, #0]
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	601a      	str	r2, [r3, #0]
 80062ba:	e003      	b.n	80062c4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80062c4:	68fa      	ldr	r2, [r7, #12]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d002      	beq.n	80062d2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	687a      	ldr	r2, [r7, #4]
 80062d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80062d2:	bf00      	nop
 80062d4:	3714      	adds	r7, #20
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20001ae4 	.word	0x20001ae4
 80062e4:	20001aec 	.word	0x20001aec

080062e8 <memset>:
 80062e8:	4402      	add	r2, r0
 80062ea:	4603      	mov	r3, r0
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d100      	bne.n	80062f2 <memset+0xa>
 80062f0:	4770      	bx	lr
 80062f2:	f803 1b01 	strb.w	r1, [r3], #1
 80062f6:	e7f9      	b.n	80062ec <memset+0x4>

080062f8 <_reclaim_reent>:
 80062f8:	4b2d      	ldr	r3, [pc, #180]	@ (80063b0 <_reclaim_reent+0xb8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4283      	cmp	r3, r0
 80062fe:	b570      	push	{r4, r5, r6, lr}
 8006300:	4604      	mov	r4, r0
 8006302:	d053      	beq.n	80063ac <_reclaim_reent+0xb4>
 8006304:	69c3      	ldr	r3, [r0, #28]
 8006306:	b31b      	cbz	r3, 8006350 <_reclaim_reent+0x58>
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	b163      	cbz	r3, 8006326 <_reclaim_reent+0x2e>
 800630c:	2500      	movs	r5, #0
 800630e:	69e3      	ldr	r3, [r4, #28]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	5959      	ldr	r1, [r3, r5]
 8006314:	b9b1      	cbnz	r1, 8006344 <_reclaim_reent+0x4c>
 8006316:	3504      	adds	r5, #4
 8006318:	2d80      	cmp	r5, #128	@ 0x80
 800631a:	d1f8      	bne.n	800630e <_reclaim_reent+0x16>
 800631c:	69e3      	ldr	r3, [r4, #28]
 800631e:	4620      	mov	r0, r4
 8006320:	68d9      	ldr	r1, [r3, #12]
 8006322:	f000 f87b 	bl	800641c <_free_r>
 8006326:	69e3      	ldr	r3, [r4, #28]
 8006328:	6819      	ldr	r1, [r3, #0]
 800632a:	b111      	cbz	r1, 8006332 <_reclaim_reent+0x3a>
 800632c:	4620      	mov	r0, r4
 800632e:	f000 f875 	bl	800641c <_free_r>
 8006332:	69e3      	ldr	r3, [r4, #28]
 8006334:	689d      	ldr	r5, [r3, #8]
 8006336:	b15d      	cbz	r5, 8006350 <_reclaim_reent+0x58>
 8006338:	4629      	mov	r1, r5
 800633a:	4620      	mov	r0, r4
 800633c:	682d      	ldr	r5, [r5, #0]
 800633e:	f000 f86d 	bl	800641c <_free_r>
 8006342:	e7f8      	b.n	8006336 <_reclaim_reent+0x3e>
 8006344:	680e      	ldr	r6, [r1, #0]
 8006346:	4620      	mov	r0, r4
 8006348:	f000 f868 	bl	800641c <_free_r>
 800634c:	4631      	mov	r1, r6
 800634e:	e7e1      	b.n	8006314 <_reclaim_reent+0x1c>
 8006350:	6961      	ldr	r1, [r4, #20]
 8006352:	b111      	cbz	r1, 800635a <_reclaim_reent+0x62>
 8006354:	4620      	mov	r0, r4
 8006356:	f000 f861 	bl	800641c <_free_r>
 800635a:	69e1      	ldr	r1, [r4, #28]
 800635c:	b111      	cbz	r1, 8006364 <_reclaim_reent+0x6c>
 800635e:	4620      	mov	r0, r4
 8006360:	f000 f85c 	bl	800641c <_free_r>
 8006364:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006366:	b111      	cbz	r1, 800636e <_reclaim_reent+0x76>
 8006368:	4620      	mov	r0, r4
 800636a:	f000 f857 	bl	800641c <_free_r>
 800636e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006370:	b111      	cbz	r1, 8006378 <_reclaim_reent+0x80>
 8006372:	4620      	mov	r0, r4
 8006374:	f000 f852 	bl	800641c <_free_r>
 8006378:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800637a:	b111      	cbz	r1, 8006382 <_reclaim_reent+0x8a>
 800637c:	4620      	mov	r0, r4
 800637e:	f000 f84d 	bl	800641c <_free_r>
 8006382:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006384:	b111      	cbz	r1, 800638c <_reclaim_reent+0x94>
 8006386:	4620      	mov	r0, r4
 8006388:	f000 f848 	bl	800641c <_free_r>
 800638c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800638e:	b111      	cbz	r1, 8006396 <_reclaim_reent+0x9e>
 8006390:	4620      	mov	r0, r4
 8006392:	f000 f843 	bl	800641c <_free_r>
 8006396:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006398:	b111      	cbz	r1, 80063a0 <_reclaim_reent+0xa8>
 800639a:	4620      	mov	r0, r4
 800639c:	f000 f83e 	bl	800641c <_free_r>
 80063a0:	6a23      	ldr	r3, [r4, #32]
 80063a2:	b11b      	cbz	r3, 80063ac <_reclaim_reent+0xb4>
 80063a4:	4620      	mov	r0, r4
 80063a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063aa:	4718      	bx	r3
 80063ac:	bd70      	pop	{r4, r5, r6, pc}
 80063ae:	bf00      	nop
 80063b0:	20000018 	.word	0x20000018

080063b4 <__libc_init_array>:
 80063b4:	b570      	push	{r4, r5, r6, lr}
 80063b6:	4d0d      	ldr	r5, [pc, #52]	@ (80063ec <__libc_init_array+0x38>)
 80063b8:	4c0d      	ldr	r4, [pc, #52]	@ (80063f0 <__libc_init_array+0x3c>)
 80063ba:	1b64      	subs	r4, r4, r5
 80063bc:	10a4      	asrs	r4, r4, #2
 80063be:	2600      	movs	r6, #0
 80063c0:	42a6      	cmp	r6, r4
 80063c2:	d109      	bne.n	80063d8 <__libc_init_array+0x24>
 80063c4:	4d0b      	ldr	r5, [pc, #44]	@ (80063f4 <__libc_init_array+0x40>)
 80063c6:	4c0c      	ldr	r4, [pc, #48]	@ (80063f8 <__libc_init_array+0x44>)
 80063c8:	f000 f87e 	bl	80064c8 <_init>
 80063cc:	1b64      	subs	r4, r4, r5
 80063ce:	10a4      	asrs	r4, r4, #2
 80063d0:	2600      	movs	r6, #0
 80063d2:	42a6      	cmp	r6, r4
 80063d4:	d105      	bne.n	80063e2 <__libc_init_array+0x2e>
 80063d6:	bd70      	pop	{r4, r5, r6, pc}
 80063d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80063dc:	4798      	blx	r3
 80063de:	3601      	adds	r6, #1
 80063e0:	e7ee      	b.n	80063c0 <__libc_init_array+0xc>
 80063e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80063e6:	4798      	blx	r3
 80063e8:	3601      	adds	r6, #1
 80063ea:	e7f2      	b.n	80063d2 <__libc_init_array+0x1e>
 80063ec:	080065d0 	.word	0x080065d0
 80063f0:	080065d0 	.word	0x080065d0
 80063f4:	080065d0 	.word	0x080065d0
 80063f8:	080065d4 	.word	0x080065d4

080063fc <__retarget_lock_acquire_recursive>:
 80063fc:	4770      	bx	lr

080063fe <__retarget_lock_release_recursive>:
 80063fe:	4770      	bx	lr

08006400 <memcpy>:
 8006400:	440a      	add	r2, r1
 8006402:	4291      	cmp	r1, r2
 8006404:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8006408:	d100      	bne.n	800640c <memcpy+0xc>
 800640a:	4770      	bx	lr
 800640c:	b510      	push	{r4, lr}
 800640e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006412:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006416:	4291      	cmp	r1, r2
 8006418:	d1f9      	bne.n	800640e <memcpy+0xe>
 800641a:	bd10      	pop	{r4, pc}

0800641c <_free_r>:
 800641c:	b538      	push	{r3, r4, r5, lr}
 800641e:	4605      	mov	r5, r0
 8006420:	2900      	cmp	r1, #0
 8006422:	d041      	beq.n	80064a8 <_free_r+0x8c>
 8006424:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006428:	1f0c      	subs	r4, r1, #4
 800642a:	2b00      	cmp	r3, #0
 800642c:	bfb8      	it	lt
 800642e:	18e4      	addlt	r4, r4, r3
 8006430:	f000 f83e 	bl	80064b0 <__malloc_lock>
 8006434:	4a1d      	ldr	r2, [pc, #116]	@ (80064ac <_free_r+0x90>)
 8006436:	6813      	ldr	r3, [r2, #0]
 8006438:	b933      	cbnz	r3, 8006448 <_free_r+0x2c>
 800643a:	6063      	str	r3, [r4, #4]
 800643c:	6014      	str	r4, [r2, #0]
 800643e:	4628      	mov	r0, r5
 8006440:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006444:	f000 b83a 	b.w	80064bc <__malloc_unlock>
 8006448:	42a3      	cmp	r3, r4
 800644a:	d908      	bls.n	800645e <_free_r+0x42>
 800644c:	6820      	ldr	r0, [r4, #0]
 800644e:	1821      	adds	r1, r4, r0
 8006450:	428b      	cmp	r3, r1
 8006452:	bf01      	itttt	eq
 8006454:	6819      	ldreq	r1, [r3, #0]
 8006456:	685b      	ldreq	r3, [r3, #4]
 8006458:	1809      	addeq	r1, r1, r0
 800645a:	6021      	streq	r1, [r4, #0]
 800645c:	e7ed      	b.n	800643a <_free_r+0x1e>
 800645e:	461a      	mov	r2, r3
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	b10b      	cbz	r3, 8006468 <_free_r+0x4c>
 8006464:	42a3      	cmp	r3, r4
 8006466:	d9fa      	bls.n	800645e <_free_r+0x42>
 8006468:	6811      	ldr	r1, [r2, #0]
 800646a:	1850      	adds	r0, r2, r1
 800646c:	42a0      	cmp	r0, r4
 800646e:	d10b      	bne.n	8006488 <_free_r+0x6c>
 8006470:	6820      	ldr	r0, [r4, #0]
 8006472:	4401      	add	r1, r0
 8006474:	1850      	adds	r0, r2, r1
 8006476:	4283      	cmp	r3, r0
 8006478:	6011      	str	r1, [r2, #0]
 800647a:	d1e0      	bne.n	800643e <_free_r+0x22>
 800647c:	6818      	ldr	r0, [r3, #0]
 800647e:	685b      	ldr	r3, [r3, #4]
 8006480:	6053      	str	r3, [r2, #4]
 8006482:	4408      	add	r0, r1
 8006484:	6010      	str	r0, [r2, #0]
 8006486:	e7da      	b.n	800643e <_free_r+0x22>
 8006488:	d902      	bls.n	8006490 <_free_r+0x74>
 800648a:	230c      	movs	r3, #12
 800648c:	602b      	str	r3, [r5, #0]
 800648e:	e7d6      	b.n	800643e <_free_r+0x22>
 8006490:	6820      	ldr	r0, [r4, #0]
 8006492:	1821      	adds	r1, r4, r0
 8006494:	428b      	cmp	r3, r1
 8006496:	bf04      	itt	eq
 8006498:	6819      	ldreq	r1, [r3, #0]
 800649a:	685b      	ldreq	r3, [r3, #4]
 800649c:	6063      	str	r3, [r4, #4]
 800649e:	bf04      	itt	eq
 80064a0:	1809      	addeq	r1, r1, r0
 80064a2:	6021      	streq	r1, [r4, #0]
 80064a4:	6054      	str	r4, [r2, #4]
 80064a6:	e7ca      	b.n	800643e <_free_r+0x22>
 80064a8:	bd38      	pop	{r3, r4, r5, pc}
 80064aa:	bf00      	nop
 80064ac:	20001c40 	.word	0x20001c40

080064b0 <__malloc_lock>:
 80064b0:	4801      	ldr	r0, [pc, #4]	@ (80064b8 <__malloc_lock+0x8>)
 80064b2:	f7ff bfa3 	b.w	80063fc <__retarget_lock_acquire_recursive>
 80064b6:	bf00      	nop
 80064b8:	20001c3c 	.word	0x20001c3c

080064bc <__malloc_unlock>:
 80064bc:	4801      	ldr	r0, [pc, #4]	@ (80064c4 <__malloc_unlock+0x8>)
 80064be:	f7ff bf9e 	b.w	80063fe <__retarget_lock_release_recursive>
 80064c2:	bf00      	nop
 80064c4:	20001c3c 	.word	0x20001c3c

080064c8 <_init>:
 80064c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064ca:	bf00      	nop
 80064cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064ce:	bc08      	pop	{r3}
 80064d0:	469e      	mov	lr, r3
 80064d2:	4770      	bx	lr

080064d4 <_fini>:
 80064d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80064d6:	bf00      	nop
 80064d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80064da:	bc08      	pop	{r3}
 80064dc:	469e      	mov	lr, r3
 80064de:	4770      	bx	lr
