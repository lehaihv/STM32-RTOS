
Task1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000034d4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  0800365c  0800365c  0000465c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080036a4  080036a4  0000500c  2**0
                  CONTENTS
  4 .ARM          00000008  080036a4  080036a4  000046a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080036ac  080036ac  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080036ac  080036ac  000046ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080036b0  080036b0  000046b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080036b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  2000000c  080036c0  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000100  080036c0  00005100  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8b0  00000000  00000000  0000503c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f61  00000000  00000000  000148ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e48  00000000  00000000  00016850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b2e  00000000  00000000  00017698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025eee  00000000  00000000  000181c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000105b4  00000000  00000000  0003e0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee89e  00000000  00000000  0004e668  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013cf06  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c14  00000000  00000000  0013cf4c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00140b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003644 	.word	0x08003644

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003644 	.word	0x08003644

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fa78 	bl	80009b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f806 	bl	80004d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f886 	bl	80005d4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004c8:	f000 f854 	bl	8000574 <MX_USART2_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80004cc:	bf00      	nop
 80004ce:	e7fd      	b.n	80004cc <main+0x14>

080004d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b096      	sub	sp, #88	@ 0x58
 80004d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004d6:	f107 0314 	add.w	r3, r7, #20
 80004da:	2244      	movs	r2, #68	@ 0x44
 80004dc:	2100      	movs	r1, #0
 80004de:	4618      	mov	r0, r3
 80004e0:	f003 f883 	bl	80035ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004e4:	463b      	mov	r3, r7
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
 80004f0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80004f2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80004f6:	f000 fd4d 	bl	8000f94 <HAL_PWREx_ControlVoltageScaling>
 80004fa:	4603      	mov	r3, r0
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d001      	beq.n	8000504 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000500:	f000 f8e0 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000504:	2302      	movs	r3, #2
 8000506:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000508:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800050c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800050e:	2310      	movs	r3, #16
 8000510:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000512:	2302      	movs	r3, #2
 8000514:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000516:	2302      	movs	r3, #2
 8000518:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800051a:	2301      	movs	r3, #1
 800051c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800051e:	230a      	movs	r3, #10
 8000520:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000522:	2307      	movs	r3, #7
 8000524:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000526:	2302      	movs	r3, #2
 8000528:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800052a:	2302      	movs	r3, #2
 800052c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	4618      	mov	r0, r3
 8000534:	f000 fd84 	bl	8001040 <HAL_RCC_OscConfig>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d001      	beq.n	8000542 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800053e:	f000 f8c1 	bl	80006c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000542:	230f      	movs	r3, #15
 8000544:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000546:	2303      	movs	r3, #3
 8000548:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800054a:	2300      	movs	r3, #0
 800054c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800054e:	2300      	movs	r3, #0
 8000550:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000552:	2300      	movs	r3, #0
 8000554:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000556:	463b      	mov	r3, r7
 8000558:	2104      	movs	r1, #4
 800055a:	4618      	mov	r0, r3
 800055c:	f001 f94c 	bl	80017f8 <HAL_RCC_ClockConfig>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000566:	f000 f8ad 	bl	80006c4 <Error_Handler>
  }
}
 800056a:	bf00      	nop
 800056c:	3758      	adds	r7, #88	@ 0x58
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}
	...

08000574 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000578:	4b14      	ldr	r3, [pc, #80]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 800057a:	4a15      	ldr	r2, [pc, #84]	@ (80005d0 <MX_USART2_UART_Init+0x5c>)
 800057c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800057e:	4b13      	ldr	r3, [pc, #76]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 8000580:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000584:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000586:	4b11      	ldr	r3, [pc, #68]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 8000588:	2200      	movs	r2, #0
 800058a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800058c:	4b0f      	ldr	r3, [pc, #60]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 800058e:	2200      	movs	r2, #0
 8000590:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000592:	4b0e      	ldr	r3, [pc, #56]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000598:	4b0c      	ldr	r3, [pc, #48]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 800059a:	220c      	movs	r2, #12
 800059c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800059e:	4b0b      	ldr	r3, [pc, #44]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005a4:	4b09      	ldr	r3, [pc, #36]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005aa:	4b08      	ldr	r3, [pc, #32]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005b0:	4b06      	ldr	r3, [pc, #24]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005b6:	4805      	ldr	r0, [pc, #20]	@ (80005cc <MX_USART2_UART_Init+0x58>)
 80005b8:	f002 faf6 	bl	8002ba8 <HAL_UART_Init>
 80005bc:	4603      	mov	r3, r0
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d001      	beq.n	80005c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80005c2:	f000 f87f 	bl	80006c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005c6:	bf00      	nop
 80005c8:	bd80      	pop	{r7, pc}
 80005ca:	bf00      	nop
 80005cc:	20000028 	.word	0x20000028
 80005d0:	40004400 	.word	0x40004400

080005d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b08a      	sub	sp, #40	@ 0x28
 80005d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005da:	f107 0314 	add.w	r3, r7, #20
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]
 80005e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ea:	4b2b      	ldr	r3, [pc, #172]	@ (8000698 <MX_GPIO_Init+0xc4>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000698 <MX_GPIO_Init+0xc4>)
 80005f0:	f043 0304 	orr.w	r3, r3, #4
 80005f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005f6:	4b28      	ldr	r3, [pc, #160]	@ (8000698 <MX_GPIO_Init+0xc4>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005fa:	f003 0304 	and.w	r3, r3, #4
 80005fe:	613b      	str	r3, [r7, #16]
 8000600:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000602:	4b25      	ldr	r3, [pc, #148]	@ (8000698 <MX_GPIO_Init+0xc4>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000606:	4a24      	ldr	r2, [pc, #144]	@ (8000698 <MX_GPIO_Init+0xc4>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800060c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800060e:	4b22      	ldr	r3, [pc, #136]	@ (8000698 <MX_GPIO_Init+0xc4>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	4b1f      	ldr	r3, [pc, #124]	@ (8000698 <MX_GPIO_Init+0xc4>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800061e:	4a1e      	ldr	r2, [pc, #120]	@ (8000698 <MX_GPIO_Init+0xc4>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <MX_GPIO_Init+0xc4>)
 8000628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60bb      	str	r3, [r7, #8]
 8000630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	4b19      	ldr	r3, [pc, #100]	@ (8000698 <MX_GPIO_Init+0xc4>)
 8000634:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000636:	4a18      	ldr	r2, [pc, #96]	@ (8000698 <MX_GPIO_Init+0xc4>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800063e:	4b16      	ldr	r3, [pc, #88]	@ (8000698 <MX_GPIO_Init+0xc4>)
 8000640:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2120      	movs	r1, #32
 800064e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000652:	f000 fc79 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000656:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800065c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	4619      	mov	r1, r3
 800066c:	480b      	ldr	r0, [pc, #44]	@ (800069c <MX_GPIO_Init+0xc8>)
 800066e:	f000 fac1 	bl	8000bf4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000672:	2320      	movs	r3, #32
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800068c:	f000 fab2 	bl	8000bf4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000690:	bf00      	nop
 8000692:	3728      	adds	r7, #40	@ 0x28
 8000694:	46bd      	mov	sp, r7
 8000696:	bd80      	pop	{r7, pc}
 8000698:	40021000 	.word	0x40021000
 800069c:	48000800 	.word	0x48000800

080006a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a04      	ldr	r2, [pc, #16]	@ (80006c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d101      	bne.n	80006b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006b2:	f000 f99d 	bl	80009f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006b6:	bf00      	nop
 80006b8:	3708      	adds	r7, #8
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	40001000 	.word	0x40001000

080006c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006c4:	b480      	push	{r7}
 80006c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c8:	b672      	cpsid	i
}
 80006ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006cc:	bf00      	nop
 80006ce:	e7fd      	b.n	80006cc <Error_Handler+0x8>

080006d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	b083      	sub	sp, #12
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <HAL_MspInit+0x44>)
 80006d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006da:	4a0e      	ldr	r2, [pc, #56]	@ (8000714 <HAL_MspInit+0x44>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80006e2:	4b0c      	ldr	r3, [pc, #48]	@ (8000714 <HAL_MspInit+0x44>)
 80006e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ee:	4b09      	ldr	r3, [pc, #36]	@ (8000714 <HAL_MspInit+0x44>)
 80006f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006f2:	4a08      	ldr	r2, [pc, #32]	@ (8000714 <HAL_MspInit+0x44>)
 80006f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80006fa:	4b06      	ldr	r3, [pc, #24]	@ (8000714 <HAL_MspInit+0x44>)
 80006fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80006fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000702:	603b      	str	r3, [r7, #0]
 8000704:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000706:	bf00      	nop
 8000708:	370c      	adds	r7, #12
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	b0ac      	sub	sp, #176	@ 0xb0
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000720:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000724:	2200      	movs	r2, #0
 8000726:	601a      	str	r2, [r3, #0]
 8000728:	605a      	str	r2, [r3, #4]
 800072a:	609a      	str	r2, [r3, #8]
 800072c:	60da      	str	r2, [r3, #12]
 800072e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000730:	f107 0314 	add.w	r3, r7, #20
 8000734:	2288      	movs	r2, #136	@ 0x88
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f002 ff56 	bl	80035ea <memset>
  if(huart->Instance==USART2)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a21      	ldr	r2, [pc, #132]	@ (80007c8 <HAL_UART_MspInit+0xb0>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d13b      	bne.n	80007c0 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000748:	2302      	movs	r3, #2
 800074a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800074c:	2300      	movs	r3, #0
 800074e:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000750:	f107 0314 	add.w	r3, r7, #20
 8000754:	4618      	mov	r0, r3
 8000756:	f001 faa5 	bl	8001ca4 <HAL_RCCEx_PeriphCLKConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000760:	f7ff ffb0 	bl	80006c4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000764:	4b19      	ldr	r3, [pc, #100]	@ (80007cc <HAL_UART_MspInit+0xb4>)
 8000766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000768:	4a18      	ldr	r2, [pc, #96]	@ (80007cc <HAL_UART_MspInit+0xb4>)
 800076a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800076e:	6593      	str	r3, [r2, #88]	@ 0x58
 8000770:	4b16      	ldr	r3, [pc, #88]	@ (80007cc <HAL_UART_MspInit+0xb4>)
 8000772:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000774:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b13      	ldr	r3, [pc, #76]	@ (80007cc <HAL_UART_MspInit+0xb4>)
 800077e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000780:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <HAL_UART_MspInit+0xb4>)
 8000782:	f043 0301 	orr.w	r3, r3, #1
 8000786:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000788:	4b10      	ldr	r3, [pc, #64]	@ (80007cc <HAL_UART_MspInit+0xb4>)
 800078a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800078c:	f003 0301 	and.w	r3, r3, #1
 8000790:	60fb      	str	r3, [r7, #12]
 8000792:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000794:	230c      	movs	r3, #12
 8000796:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800079a:	2302      	movs	r3, #2
 800079c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a0:	2300      	movs	r3, #0
 80007a2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a6:	2303      	movs	r3, #3
 80007a8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ac:	2307      	movs	r3, #7
 80007ae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80007b6:	4619      	mov	r1, r3
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80007bc:	f000 fa1a 	bl	8000bf4 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80007c0:	bf00      	nop
 80007c2:	37b0      	adds	r7, #176	@ 0xb0
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40004400 	.word	0x40004400
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b08e      	sub	sp, #56	@ 0x38
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80007d8:	2300      	movs	r3, #0
 80007da:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007de:	4b34      	ldr	r3, [pc, #208]	@ (80008b0 <HAL_InitTick+0xe0>)
 80007e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007e2:	4a33      	ldr	r2, [pc, #204]	@ (80008b0 <HAL_InitTick+0xe0>)
 80007e4:	f043 0310 	orr.w	r3, r3, #16
 80007e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80007ea:	4b31      	ldr	r3, [pc, #196]	@ (80008b0 <HAL_InitTick+0xe0>)
 80007ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80007ee:	f003 0310 	and.w	r3, r3, #16
 80007f2:	60fb      	str	r3, [r7, #12]
 80007f4:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007f6:	f107 0210 	add.w	r2, r7, #16
 80007fa:	f107 0314 	add.w	r3, r7, #20
 80007fe:	4611      	mov	r1, r2
 8000800:	4618      	mov	r0, r3
 8000802:	f001 f9bd 	bl	8001b80 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000806:	6a3b      	ldr	r3, [r7, #32]
 8000808:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800080a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800080c:	2b00      	cmp	r3, #0
 800080e:	d103      	bne.n	8000818 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000810:	f001 f98a 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8000814:	6378      	str	r0, [r7, #52]	@ 0x34
 8000816:	e004      	b.n	8000822 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000818:	f001 f986 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 800081c:	4603      	mov	r3, r0
 800081e:	005b      	lsls	r3, r3, #1
 8000820:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000822:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000824:	4a23      	ldr	r2, [pc, #140]	@ (80008b4 <HAL_InitTick+0xe4>)
 8000826:	fba2 2303 	umull	r2, r3, r2, r3
 800082a:	0c9b      	lsrs	r3, r3, #18
 800082c:	3b01      	subs	r3, #1
 800082e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000830:	4b21      	ldr	r3, [pc, #132]	@ (80008b8 <HAL_InitTick+0xe8>)
 8000832:	4a22      	ldr	r2, [pc, #136]	@ (80008bc <HAL_InitTick+0xec>)
 8000834:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000836:	4b20      	ldr	r3, [pc, #128]	@ (80008b8 <HAL_InitTick+0xe8>)
 8000838:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800083c:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800083e:	4a1e      	ldr	r2, [pc, #120]	@ (80008b8 <HAL_InitTick+0xe8>)
 8000840:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000842:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000844:	4b1c      	ldr	r3, [pc, #112]	@ (80008b8 <HAL_InitTick+0xe8>)
 8000846:	2200      	movs	r2, #0
 8000848:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800084a:	4b1b      	ldr	r3, [pc, #108]	@ (80008b8 <HAL_InitTick+0xe8>)
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000850:	4b19      	ldr	r3, [pc, #100]	@ (80008b8 <HAL_InitTick+0xe8>)
 8000852:	2200      	movs	r2, #0
 8000854:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000856:	4818      	ldr	r0, [pc, #96]	@ (80008b8 <HAL_InitTick+0xe8>)
 8000858:	f001 fee0 	bl	800261c <HAL_TIM_Base_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000862:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000866:	2b00      	cmp	r3, #0
 8000868:	d11b      	bne.n	80008a2 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800086a:	4813      	ldr	r0, [pc, #76]	@ (80008b8 <HAL_InitTick+0xe8>)
 800086c:	f001 ff38 	bl	80026e0 <HAL_TIM_Base_Start_IT>
 8000870:	4603      	mov	r3, r0
 8000872:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000876:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800087a:	2b00      	cmp	r3, #0
 800087c:	d111      	bne.n	80008a2 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800087e:	2036      	movs	r0, #54	@ 0x36
 8000880:	f000 f9aa 	bl	8000bd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	2b0f      	cmp	r3, #15
 8000888:	d808      	bhi.n	800089c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800088a:	2200      	movs	r2, #0
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	2036      	movs	r0, #54	@ 0x36
 8000890:	f000 f986 	bl	8000ba0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000894:	4a0a      	ldr	r2, [pc, #40]	@ (80008c0 <HAL_InitTick+0xf0>)
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	6013      	str	r3, [r2, #0]
 800089a:	e002      	b.n	80008a2 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800089c:	2301      	movs	r3, #1
 800089e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	3738      	adds	r7, #56	@ 0x38
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40021000 	.word	0x40021000
 80008b4:	431bde83 	.word	0x431bde83
 80008b8:	200000b0 	.word	0x200000b0
 80008bc:	40001000 	.word	0x40001000
 80008c0:	20000004 	.word	0x20000004

080008c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c4:	b480      	push	{r7}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80008c8:	bf00      	nop
 80008ca:	e7fd      	b.n	80008c8 <NMI_Handler+0x4>

080008cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d0:	bf00      	nop
 80008d2:	e7fd      	b.n	80008d0 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	bf00      	nop
 80008da:	e7fd      	b.n	80008d8 <MemManage_Handler+0x4>

080008dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008e0:	bf00      	nop
 80008e2:	e7fd      	b.n	80008e0 <BusFault_Handler+0x4>

080008e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <UsageFault_Handler+0x4>

080008ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008f0:	bf00      	nop
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008fa:	b480      	push	{r7}
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800091a:	bf00      	nop
 800091c:	46bd      	mov	sp, r7
 800091e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000922:	4770      	bx	lr

08000924 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000928:	4802      	ldr	r0, [pc, #8]	@ (8000934 <TIM6_DAC_IRQHandler+0x10>)
 800092a:	f001 ff49 	bl	80027c0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800092e:	bf00      	nop
 8000930:	bd80      	pop	{r7, pc}
 8000932:	bf00      	nop
 8000934:	200000b0 	.word	0x200000b0

08000938 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800093c:	4b06      	ldr	r3, [pc, #24]	@ (8000958 <SystemInit+0x20>)
 800093e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000942:	4a05      	ldr	r2, [pc, #20]	@ (8000958 <SystemInit+0x20>)
 8000944:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000948:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	e000ed00 	.word	0xe000ed00

0800095c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800095c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000994 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000960:	f7ff ffea 	bl	8000938 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000964:	480c      	ldr	r0, [pc, #48]	@ (8000998 <LoopForever+0x6>)
  ldr r1, =_edata
 8000966:	490d      	ldr	r1, [pc, #52]	@ (800099c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000968:	4a0d      	ldr	r2, [pc, #52]	@ (80009a0 <LoopForever+0xe>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0a      	ldr	r2, [pc, #40]	@ (80009a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800097c:	4c0a      	ldr	r4, [pc, #40]	@ (80009a8 <LoopForever+0x16>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800098a:	f002 fe37 	bl	80035fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800098e:	f7ff fd93 	bl	80004b8 <main>

08000992 <LoopForever>:

LoopForever:
    b LoopForever
 8000992:	e7fe      	b.n	8000992 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000994:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800099c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009a0:	080036b4 	.word	0x080036b4
  ldr r2, =_sbss
 80009a4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009a8:	20000100 	.word	0x20000100

080009ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009ac:	e7fe      	b.n	80009ac <ADC1_2_IRQHandler>
	...

080009b0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ba:	4b0c      	ldr	r3, [pc, #48]	@ (80009ec <HAL_Init+0x3c>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	4a0b      	ldr	r2, [pc, #44]	@ (80009ec <HAL_Init+0x3c>)
 80009c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80009c4:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009c6:	2003      	movs	r0, #3
 80009c8:	f000 f8df 	bl	8000b8a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009cc:	200f      	movs	r0, #15
 80009ce:	f7ff feff 	bl	80007d0 <HAL_InitTick>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d002      	beq.n	80009de <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	71fb      	strb	r3, [r7, #7]
 80009dc:	e001      	b.n	80009e2 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009de:	f7ff fe77 	bl	80006d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009e2:	79fb      	ldrb	r3, [r7, #7]
}
 80009e4:	4618      	mov	r0, r3
 80009e6:	3708      	adds	r7, #8
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	40022000 	.word	0x40022000

080009f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f0:	b480      	push	{r7}
 80009f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009f4:	4b06      	ldr	r3, [pc, #24]	@ (8000a10 <HAL_IncTick+0x20>)
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	461a      	mov	r2, r3
 80009fa:	4b06      	ldr	r3, [pc, #24]	@ (8000a14 <HAL_IncTick+0x24>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	4413      	add	r3, r2
 8000a00:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <HAL_IncTick+0x24>)
 8000a02:	6013      	str	r3, [r2, #0]
}
 8000a04:	bf00      	nop
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	20000008 	.word	0x20000008
 8000a14:	200000fc 	.word	0x200000fc

08000a18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a1c:	4b03      	ldr	r3, [pc, #12]	@ (8000a2c <HAL_GetTick+0x14>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	46bd      	mov	sp, r7
 8000a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	200000fc 	.word	0x200000fc

08000a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a30:	b480      	push	{r7}
 8000a32:	b085      	sub	sp, #20
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	f003 0307 	and.w	r3, r3, #7
 8000a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a40:	4b0c      	ldr	r3, [pc, #48]	@ (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a42:	68db      	ldr	r3, [r3, #12]
 8000a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a46:	68ba      	ldr	r2, [r7, #8]
 8000a48:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a58:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a5c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a62:	4a04      	ldr	r2, [pc, #16]	@ (8000a74 <__NVIC_SetPriorityGrouping+0x44>)
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	60d3      	str	r3, [r2, #12]
}
 8000a68:	bf00      	nop
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	e000ed00 	.word	0xe000ed00

08000a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a7c:	4b04      	ldr	r3, [pc, #16]	@ (8000a90 <__NVIC_GetPriorityGrouping+0x18>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	0a1b      	lsrs	r3, r3, #8
 8000a82:	f003 0307 	and.w	r3, r3, #7
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	@ (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	@ (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	@ (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	@ 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	60f8      	str	r0, [r7, #12]
 8000b2c:	60b9      	str	r1, [r7, #8]
 8000b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b30:	68fb      	ldr	r3, [r7, #12]
 8000b32:	f003 0307 	and.w	r3, r3, #7
 8000b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b38:	69fb      	ldr	r3, [r7, #28]
 8000b3a:	f1c3 0307 	rsb	r3, r3, #7
 8000b3e:	2b04      	cmp	r3, #4
 8000b40:	bf28      	it	cs
 8000b42:	2304      	movcs	r3, #4
 8000b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b46:	69fb      	ldr	r3, [r7, #28]
 8000b48:	3304      	adds	r3, #4
 8000b4a:	2b06      	cmp	r3, #6
 8000b4c:	d902      	bls.n	8000b54 <NVIC_EncodePriority+0x30>
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3b03      	subs	r3, #3
 8000b52:	e000      	b.n	8000b56 <NVIC_EncodePriority+0x32>
 8000b54:	2300      	movs	r3, #0
 8000b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b58:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000b5c:	69bb      	ldr	r3, [r7, #24]
 8000b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b62:	43da      	mvns	r2, r3
 8000b64:	68bb      	ldr	r3, [r7, #8]
 8000b66:	401a      	ands	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b6c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	fa01 f303 	lsl.w	r3, r1, r3
 8000b76:	43d9      	mvns	r1, r3
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b7c:	4313      	orrs	r3, r2
         );
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3724      	adds	r7, #36	@ 0x24
 8000b82:	46bd      	mov	sp, r7
 8000b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b88:	4770      	bx	lr

08000b8a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b8a:	b580      	push	{r7, lr}
 8000b8c:	b082      	sub	sp, #8
 8000b8e:	af00      	add	r7, sp, #0
 8000b90:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b92:	6878      	ldr	r0, [r7, #4]
 8000b94:	f7ff ff4c 	bl	8000a30 <__NVIC_SetPriorityGrouping>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bb2:	f7ff ff61 	bl	8000a78 <__NVIC_GetPriorityGrouping>
 8000bb6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bb8:	687a      	ldr	r2, [r7, #4]
 8000bba:	68b9      	ldr	r1, [r7, #8]
 8000bbc:	6978      	ldr	r0, [r7, #20]
 8000bbe:	f7ff ffb1 	bl	8000b24 <NVIC_EncodePriority>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bc8:	4611      	mov	r1, r2
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff ff80 	bl	8000ad0 <__NVIC_SetPriority>
}
 8000bd0:	bf00      	nop
 8000bd2:	3718      	adds	r7, #24
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}

08000bd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	4603      	mov	r3, r0
 8000be0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff54 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000bec:	bf00      	nop
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}

08000bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b087      	sub	sp, #28
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]
 8000bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c02:	e17f      	b.n	8000f04 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c04:	683b      	ldr	r3, [r7, #0]
 8000c06:	681a      	ldr	r2, [r3, #0]
 8000c08:	2101      	movs	r1, #1
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8000c10:	4013      	ands	r3, r2
 8000c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c14:	68fb      	ldr	r3, [r7, #12]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	f000 8171 	beq.w	8000efe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	685b      	ldr	r3, [r3, #4]
 8000c20:	f003 0303 	and.w	r3, r3, #3
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d005      	beq.n	8000c34 <HAL_GPIO_Init+0x40>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	f003 0303 	and.w	r3, r3, #3
 8000c30:	2b02      	cmp	r3, #2
 8000c32:	d130      	bne.n	8000c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	689b      	ldr	r3, [r3, #8]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	005b      	lsls	r3, r3, #1
 8000c3e:	2203      	movs	r2, #3
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	43db      	mvns	r3, r3
 8000c46:	693a      	ldr	r2, [r7, #16]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	68da      	ldr	r2, [r3, #12]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	005b      	lsls	r3, r3, #1
 8000c54:	fa02 f303 	lsl.w	r3, r2, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4313      	orrs	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	693a      	ldr	r2, [r7, #16]
 8000c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	43db      	mvns	r3, r3
 8000c74:	693a      	ldr	r2, [r7, #16]
 8000c76:	4013      	ands	r3, r2
 8000c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	685b      	ldr	r3, [r3, #4]
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	f003 0201 	and.w	r2, r3, #1
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	693a      	ldr	r2, [r7, #16]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	f003 0303 	and.w	r3, r3, #3
 8000c9e:	2b03      	cmp	r3, #3
 8000ca0:	d118      	bne.n	8000cd4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000ca8:	2201      	movs	r2, #1
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	693a      	ldr	r2, [r7, #16]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	08db      	lsrs	r3, r3, #3
 8000cbe:	f003 0201 	and.w	r2, r3, #1
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	693a      	ldr	r2, [r7, #16]
 8000cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d017      	beq.n	8000d10 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	693a      	ldr	r2, [r7, #16]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	693a      	ldr	r2, [r7, #16]
 8000d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d123      	bne.n	8000d64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	08da      	lsrs	r2, r3, #3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d2a:	697b      	ldr	r3, [r7, #20]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	693a      	ldr	r2, [r7, #16]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	08da      	lsrs	r2, r3, #3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3208      	adds	r2, #8
 8000d5e:	6939      	ldr	r1, [r7, #16]
 8000d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	693a      	ldr	r2, [r7, #16]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0203 	and.w	r2, r3, #3
 8000d84:	697b      	ldr	r3, [r7, #20]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	693a      	ldr	r2, [r7, #16]
 8000d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 80ac 	beq.w	8000efe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	4b5f      	ldr	r3, [pc, #380]	@ (8000f24 <HAL_GPIO_Init+0x330>)
 8000da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000daa:	4a5e      	ldr	r2, [pc, #376]	@ (8000f24 <HAL_GPIO_Init+0x330>)
 8000dac:	f043 0301 	orr.w	r3, r3, #1
 8000db0:	6613      	str	r3, [r2, #96]	@ 0x60
 8000db2:	4b5c      	ldr	r3, [pc, #368]	@ (8000f24 <HAL_GPIO_Init+0x330>)
 8000db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000db6:	f003 0301 	and.w	r3, r3, #1
 8000dba:	60bb      	str	r3, [r7, #8]
 8000dbc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8000f28 <HAL_GPIO_Init+0x334>)
 8000dc0:	697b      	ldr	r3, [r7, #20]
 8000dc2:	089b      	lsrs	r3, r3, #2
 8000dc4:	3302      	adds	r3, #2
 8000dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	f003 0303 	and.w	r3, r3, #3
 8000dd2:	009b      	lsls	r3, r3, #2
 8000dd4:	220f      	movs	r2, #15
 8000dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dda:	43db      	mvns	r3, r3
 8000ddc:	693a      	ldr	r2, [r7, #16]
 8000dde:	4013      	ands	r3, r2
 8000de0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8000de8:	d025      	beq.n	8000e36 <HAL_GPIO_Init+0x242>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4f      	ldr	r2, [pc, #316]	@ (8000f2c <HAL_GPIO_Init+0x338>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01f      	beq.n	8000e32 <HAL_GPIO_Init+0x23e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4e      	ldr	r2, [pc, #312]	@ (8000f30 <HAL_GPIO_Init+0x33c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d019      	beq.n	8000e2e <HAL_GPIO_Init+0x23a>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4d      	ldr	r2, [pc, #308]	@ (8000f34 <HAL_GPIO_Init+0x340>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0x236>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4c      	ldr	r2, [pc, #304]	@ (8000f38 <HAL_GPIO_Init+0x344>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d00d      	beq.n	8000e26 <HAL_GPIO_Init+0x232>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8000f3c <HAL_GPIO_Init+0x348>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d007      	beq.n	8000e22 <HAL_GPIO_Init+0x22e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4a      	ldr	r2, [pc, #296]	@ (8000f40 <HAL_GPIO_Init+0x34c>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_GPIO_Init+0x22a>
 8000e1a:	2306      	movs	r3, #6
 8000e1c:	e00c      	b.n	8000e38 <HAL_GPIO_Init+0x244>
 8000e1e:	2307      	movs	r3, #7
 8000e20:	e00a      	b.n	8000e38 <HAL_GPIO_Init+0x244>
 8000e22:	2305      	movs	r3, #5
 8000e24:	e008      	b.n	8000e38 <HAL_GPIO_Init+0x244>
 8000e26:	2304      	movs	r3, #4
 8000e28:	e006      	b.n	8000e38 <HAL_GPIO_Init+0x244>
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	e004      	b.n	8000e38 <HAL_GPIO_Init+0x244>
 8000e2e:	2302      	movs	r3, #2
 8000e30:	e002      	b.n	8000e38 <HAL_GPIO_Init+0x244>
 8000e32:	2301      	movs	r3, #1
 8000e34:	e000      	b.n	8000e38 <HAL_GPIO_Init+0x244>
 8000e36:	2300      	movs	r3, #0
 8000e38:	697a      	ldr	r2, [r7, #20]
 8000e3a:	f002 0203 	and.w	r2, r2, #3
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	4093      	lsls	r3, r2
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e48:	4937      	ldr	r1, [pc, #220]	@ (8000f28 <HAL_GPIO_Init+0x334>)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	089b      	lsrs	r3, r3, #2
 8000e4e:	3302      	adds	r3, #2
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e56:	4b3b      	ldr	r3, [pc, #236]	@ (8000f44 <HAL_GPIO_Init+0x350>)
 8000e58:	689b      	ldr	r3, [r3, #8]
 8000e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	43db      	mvns	r3, r3
 8000e60:	693a      	ldr	r2, [r7, #16]
 8000e62:	4013      	ands	r3, r2
 8000e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	685b      	ldr	r3, [r3, #4]
 8000e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d003      	beq.n	8000e7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000e72:	693a      	ldr	r2, [r7, #16]
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	4313      	orrs	r3, r2
 8000e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e7a:	4a32      	ldr	r2, [pc, #200]	@ (8000f44 <HAL_GPIO_Init+0x350>)
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e80:	4b30      	ldr	r3, [pc, #192]	@ (8000f44 <HAL_GPIO_Init+0x350>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e86:	68fb      	ldr	r3, [r7, #12]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ea4:	4a27      	ldr	r2, [pc, #156]	@ (8000f44 <HAL_GPIO_Init+0x350>)
 8000ea6:	693b      	ldr	r3, [r7, #16]
 8000ea8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000eaa:	4b26      	ldr	r3, [pc, #152]	@ (8000f44 <HAL_GPIO_Init+0x350>)
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	43db      	mvns	r3, r3
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d003      	beq.n	8000ece <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000ece:	4a1d      	ldr	r2, [pc, #116]	@ (8000f44 <HAL_GPIO_Init+0x350>)
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8000f44 <HAL_GPIO_Init+0x350>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	43db      	mvns	r3, r3
 8000ede:	693a      	ldr	r2, [r7, #16]
 8000ee0:	4013      	ands	r3, r2
 8000ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ee4:	683b      	ldr	r3, [r7, #0]
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000ef0:	693a      	ldr	r2, [r7, #16]
 8000ef2:	68fb      	ldr	r3, [r7, #12]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ef8:	4a12      	ldr	r2, [pc, #72]	@ (8000f44 <HAL_GPIO_Init+0x350>)
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	3301      	adds	r3, #1
 8000f02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	f47f ae78 	bne.w	8000c04 <HAL_GPIO_Init+0x10>
  }
}
 8000f14:	bf00      	nop
 8000f16:	bf00      	nop
 8000f18:	371c      	adds	r7, #28
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	40021000 	.word	0x40021000
 8000f28:	40010000 	.word	0x40010000
 8000f2c:	48000400 	.word	0x48000400
 8000f30:	48000800 	.word	0x48000800
 8000f34:	48000c00 	.word	0x48000c00
 8000f38:	48001000 	.word	0x48001000
 8000f3c:	48001400 	.word	0x48001400
 8000f40:	48001800 	.word	0x48001800
 8000f44:	40010400 	.word	0x40010400

08000f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	4613      	mov	r3, r2
 8000f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f58:	787b      	ldrb	r3, [r7, #1]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f66:	887a      	ldrh	r2, [r7, #2]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f7c:	4b04      	ldr	r3, [pc, #16]	@ (8000f90 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8000f84:	4618      	mov	r0, r3
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	40007000 	.word	0x40007000

08000f94 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b085      	sub	sp, #20
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fa2:	d130      	bne.n	8001006 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000fa4:	4b23      	ldr	r3, [pc, #140]	@ (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8000fac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000fb0:	d038      	beq.n	8001024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb2:	4b20      	ldr	r3, [pc, #128]	@ (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8000fba:	4a1e      	ldr	r2, [pc, #120]	@ (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fbc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000fc0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000fc2:	4b1d      	ldr	r3, [pc, #116]	@ (8001038 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	2232      	movs	r2, #50	@ 0x32
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	4a1b      	ldr	r2, [pc, #108]	@ (800103c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000fce:	fba2 2303 	umull	r2, r3, r2, r3
 8000fd2:	0c9b      	lsrs	r3, r3, #18
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fd8:	e002      	b.n	8000fe0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	3b01      	subs	r3, #1
 8000fde:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fe2:	695b      	ldr	r3, [r3, #20]
 8000fe4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000fec:	d102      	bne.n	8000ff4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d1f2      	bne.n	8000fda <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000ff6:	695b      	ldr	r3, [r3, #20]
 8000ff8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ffc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001000:	d110      	bne.n	8001024 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	e00f      	b.n	8001026 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800100e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001012:	d007      	beq.n	8001024 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001014:	4b07      	ldr	r3, [pc, #28]	@ (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800101c:	4a05      	ldr	r2, [pc, #20]	@ (8001034 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800101e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001022:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	3714      	adds	r7, #20
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	40007000 	.word	0x40007000
 8001038:	20000000 	.word	0x20000000
 800103c:	431bde83 	.word	0x431bde83

08001040 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b088      	sub	sp, #32
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d101      	bne.n	8001052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e3ca      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001052:	4b97      	ldr	r3, [pc, #604]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001054:	689b      	ldr	r3, [r3, #8]
 8001056:	f003 030c 	and.w	r3, r3, #12
 800105a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800105c:	4b94      	ldr	r3, [pc, #592]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	f003 0303 	and.w	r3, r3, #3
 8001064:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	f003 0310 	and.w	r3, r3, #16
 800106e:	2b00      	cmp	r3, #0
 8001070:	f000 80e4 	beq.w	800123c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001074:	69bb      	ldr	r3, [r7, #24]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d007      	beq.n	800108a <HAL_RCC_OscConfig+0x4a>
 800107a:	69bb      	ldr	r3, [r7, #24]
 800107c:	2b0c      	cmp	r3, #12
 800107e:	f040 808b 	bne.w	8001198 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	2b01      	cmp	r3, #1
 8001086:	f040 8087 	bne.w	8001198 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800108a:	4b89      	ldr	r3, [pc, #548]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b00      	cmp	r3, #0
 8001094:	d005      	beq.n	80010a2 <HAL_RCC_OscConfig+0x62>
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	699b      	ldr	r3, [r3, #24]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d101      	bne.n	80010a2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
 80010a0:	e3a2      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	6a1a      	ldr	r2, [r3, #32]
 80010a6:	4b82      	ldr	r3, [pc, #520]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f003 0308 	and.w	r3, r3, #8
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d004      	beq.n	80010bc <HAL_RCC_OscConfig+0x7c>
 80010b2:	4b7f      	ldr	r3, [pc, #508]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010ba:	e005      	b.n	80010c8 <HAL_RCC_OscConfig+0x88>
 80010bc:	4b7c      	ldr	r3, [pc, #496]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80010be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80010c2:	091b      	lsrs	r3, r3, #4
 80010c4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80010c8:	4293      	cmp	r3, r2
 80010ca:	d223      	bcs.n	8001114 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	6a1b      	ldr	r3, [r3, #32]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 fd87 	bl	8001be4 <RCC_SetFlashLatencyFromMSIRange>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80010dc:	2301      	movs	r3, #1
 80010de:	e383      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010e0:	4b73      	ldr	r3, [pc, #460]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a72      	ldr	r2, [pc, #456]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80010e6:	f043 0308 	orr.w	r3, r3, #8
 80010ea:	6013      	str	r3, [r2, #0]
 80010ec:	4b70      	ldr	r3, [pc, #448]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6a1b      	ldr	r3, [r3, #32]
 80010f8:	496d      	ldr	r1, [pc, #436]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010fe:	4b6c      	ldr	r3, [pc, #432]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69db      	ldr	r3, [r3, #28]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	4968      	ldr	r1, [pc, #416]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 800110e:	4313      	orrs	r3, r2
 8001110:	604b      	str	r3, [r1, #4]
 8001112:	e025      	b.n	8001160 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001114:	4b66      	ldr	r3, [pc, #408]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a65      	ldr	r2, [pc, #404]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6013      	str	r3, [r2, #0]
 8001120:	4b63      	ldr	r3, [pc, #396]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	6a1b      	ldr	r3, [r3, #32]
 800112c:	4960      	ldr	r1, [pc, #384]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 800112e:	4313      	orrs	r3, r2
 8001130:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001132:	4b5f      	ldr	r3, [pc, #380]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	69db      	ldr	r3, [r3, #28]
 800113e:	021b      	lsls	r3, r3, #8
 8001140:	495b      	ldr	r1, [pc, #364]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001142:	4313      	orrs	r3, r2
 8001144:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d109      	bne.n	8001160 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a1b      	ldr	r3, [r3, #32]
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fd47 	bl	8001be4 <RCC_SetFlashLatencyFromMSIRange>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d001      	beq.n	8001160 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800115c:	2301      	movs	r3, #1
 800115e:	e343      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001160:	f000 fc4a 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 8001164:	4602      	mov	r2, r0
 8001166:	4b52      	ldr	r3, [pc, #328]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	091b      	lsrs	r3, r3, #4
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	4950      	ldr	r1, [pc, #320]	@ (80012b4 <HAL_RCC_OscConfig+0x274>)
 8001172:	5ccb      	ldrb	r3, [r1, r3]
 8001174:	f003 031f 	and.w	r3, r3, #31
 8001178:	fa22 f303 	lsr.w	r3, r2, r3
 800117c:	4a4e      	ldr	r2, [pc, #312]	@ (80012b8 <HAL_RCC_OscConfig+0x278>)
 800117e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001180:	4b4e      	ldr	r3, [pc, #312]	@ (80012bc <HAL_RCC_OscConfig+0x27c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff fb23 	bl	80007d0 <HAL_InitTick>
 800118a:	4603      	mov	r3, r0
 800118c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	2b00      	cmp	r3, #0
 8001192:	d052      	beq.n	800123a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	e327      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	699b      	ldr	r3, [r3, #24]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d032      	beq.n	8001206 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011a0:	4b43      	ldr	r3, [pc, #268]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a42      	ldr	r2, [pc, #264]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80011a6:	f043 0301 	orr.w	r3, r3, #1
 80011aa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011ac:	f7ff fc34 	bl	8000a18 <HAL_GetTick>
 80011b0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011b2:	e008      	b.n	80011c6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011b4:	f7ff fc30 	bl	8000a18 <HAL_GetTick>
 80011b8:	4602      	mov	r2, r0
 80011ba:	693b      	ldr	r3, [r7, #16]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	2b02      	cmp	r3, #2
 80011c0:	d901      	bls.n	80011c6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80011c2:	2303      	movs	r3, #3
 80011c4:	e310      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80011c6:	4b3a      	ldr	r3, [pc, #232]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0302 	and.w	r3, r3, #2
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f0      	beq.n	80011b4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d2:	4b37      	ldr	r3, [pc, #220]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	4a36      	ldr	r2, [pc, #216]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80011d8:	f043 0308 	orr.w	r3, r3, #8
 80011dc:	6013      	str	r3, [r2, #0]
 80011de:	4b34      	ldr	r3, [pc, #208]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6a1b      	ldr	r3, [r3, #32]
 80011ea:	4931      	ldr	r1, [pc, #196]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80011ec:	4313      	orrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011f0:	4b2f      	ldr	r3, [pc, #188]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69db      	ldr	r3, [r3, #28]
 80011fc:	021b      	lsls	r3, r3, #8
 80011fe:	492c      	ldr	r1, [pc, #176]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
 8001204:	e01a      	b.n	800123c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001206:	4b2a      	ldr	r3, [pc, #168]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a29      	ldr	r2, [pc, #164]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 800120c:	f023 0301 	bic.w	r3, r3, #1
 8001210:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001212:	f7ff fc01 	bl	8000a18 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800121a:	f7ff fbfd 	bl	8000a18 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e2dd      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800122c:	4b20      	ldr	r3, [pc, #128]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d1f0      	bne.n	800121a <HAL_RCC_OscConfig+0x1da>
 8001238:	e000      	b.n	800123c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800123a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f003 0301 	and.w	r3, r3, #1
 8001244:	2b00      	cmp	r3, #0
 8001246:	d074      	beq.n	8001332 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001248:	69bb      	ldr	r3, [r7, #24]
 800124a:	2b08      	cmp	r3, #8
 800124c:	d005      	beq.n	800125a <HAL_RCC_OscConfig+0x21a>
 800124e:	69bb      	ldr	r3, [r7, #24]
 8001250:	2b0c      	cmp	r3, #12
 8001252:	d10e      	bne.n	8001272 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001254:	697b      	ldr	r3, [r7, #20]
 8001256:	2b03      	cmp	r3, #3
 8001258:	d10b      	bne.n	8001272 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800125a:	4b15      	ldr	r3, [pc, #84]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001262:	2b00      	cmp	r3, #0
 8001264:	d064      	beq.n	8001330 <HAL_RCC_OscConfig+0x2f0>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d160      	bne.n	8001330 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800126e:	2301      	movs	r3, #1
 8001270:	e2ba      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800127a:	d106      	bne.n	800128a <HAL_RCC_OscConfig+0x24a>
 800127c:	4b0c      	ldr	r3, [pc, #48]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	4a0b      	ldr	r2, [pc, #44]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001282:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001286:	6013      	str	r3, [r2, #0]
 8001288:	e026      	b.n	80012d8 <HAL_RCC_OscConfig+0x298>
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001292:	d115      	bne.n	80012c0 <HAL_RCC_OscConfig+0x280>
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 800129a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800129e:	6013      	str	r3, [r2, #0]
 80012a0:	4b03      	ldr	r3, [pc, #12]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a02      	ldr	r2, [pc, #8]	@ (80012b0 <HAL_RCC_OscConfig+0x270>)
 80012a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80012aa:	6013      	str	r3, [r2, #0]
 80012ac:	e014      	b.n	80012d8 <HAL_RCC_OscConfig+0x298>
 80012ae:	bf00      	nop
 80012b0:	40021000 	.word	0x40021000
 80012b4:	0800365c 	.word	0x0800365c
 80012b8:	20000000 	.word	0x20000000
 80012bc:	20000004 	.word	0x20000004
 80012c0:	4ba0      	ldr	r3, [pc, #640]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	4a9f      	ldr	r2, [pc, #636]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80012c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80012ca:	6013      	str	r3, [r2, #0]
 80012cc:	4b9d      	ldr	r3, [pc, #628]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a9c      	ldr	r2, [pc, #624]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80012d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80012d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d013      	beq.n	8001308 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012e0:	f7ff fb9a 	bl	8000a18 <HAL_GetTick>
 80012e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012e6:	e008      	b.n	80012fa <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012e8:	f7ff fb96 	bl	8000a18 <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	2b64      	cmp	r3, #100	@ 0x64
 80012f4:	d901      	bls.n	80012fa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012f6:	2303      	movs	r3, #3
 80012f8:	e276      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012fa:	4b92      	ldr	r3, [pc, #584]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001302:	2b00      	cmp	r3, #0
 8001304:	d0f0      	beq.n	80012e8 <HAL_RCC_OscConfig+0x2a8>
 8001306:	e014      	b.n	8001332 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fb86 	bl	8000a18 <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001310:	f7ff fb82 	bl	8000a18 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b64      	cmp	r3, #100	@ 0x64
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e262      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001322:	4b88      	ldr	r3, [pc, #544]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800132a:	2b00      	cmp	r3, #0
 800132c:	d1f0      	bne.n	8001310 <HAL_RCC_OscConfig+0x2d0>
 800132e:	e000      	b.n	8001332 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001330:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 0302 	and.w	r3, r3, #2
 800133a:	2b00      	cmp	r3, #0
 800133c:	d060      	beq.n	8001400 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800133e:	69bb      	ldr	r3, [r7, #24]
 8001340:	2b04      	cmp	r3, #4
 8001342:	d005      	beq.n	8001350 <HAL_RCC_OscConfig+0x310>
 8001344:	69bb      	ldr	r3, [r7, #24]
 8001346:	2b0c      	cmp	r3, #12
 8001348:	d119      	bne.n	800137e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800134a:	697b      	ldr	r3, [r7, #20]
 800134c:	2b02      	cmp	r3, #2
 800134e:	d116      	bne.n	800137e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001350:	4b7c      	ldr	r3, [pc, #496]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001358:	2b00      	cmp	r3, #0
 800135a:	d005      	beq.n	8001368 <HAL_RCC_OscConfig+0x328>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d101      	bne.n	8001368 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001364:	2301      	movs	r3, #1
 8001366:	e23f      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001368:	4b76      	ldr	r3, [pc, #472]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691b      	ldr	r3, [r3, #16]
 8001374:	061b      	lsls	r3, r3, #24
 8001376:	4973      	ldr	r1, [pc, #460]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001378:	4313      	orrs	r3, r2
 800137a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800137c:	e040      	b.n	8001400 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	68db      	ldr	r3, [r3, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d023      	beq.n	80013ce <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001386:	4b6f      	ldr	r3, [pc, #444]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a6e      	ldr	r2, [pc, #440]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 800138c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fb41 	bl	8000a18 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fb3d 	bl	8000a18 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e21d      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80013ac:	4b65      	ldr	r3, [pc, #404]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b8:	4b62      	ldr	r3, [pc, #392]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	691b      	ldr	r3, [r3, #16]
 80013c4:	061b      	lsls	r3, r3, #24
 80013c6:	495f      	ldr	r1, [pc, #380]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80013c8:	4313      	orrs	r3, r2
 80013ca:	604b      	str	r3, [r1, #4]
 80013cc:	e018      	b.n	8001400 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80013d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80013d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013da:	f7ff fb1d 	bl	8000a18 <HAL_GetTick>
 80013de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013e0:	e008      	b.n	80013f4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80013e2:	f7ff fb19 	bl	8000a18 <HAL_GetTick>
 80013e6:	4602      	mov	r2, r0
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	1ad3      	subs	r3, r2, r3
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d901      	bls.n	80013f4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013f0:	2303      	movs	r3, #3
 80013f2:	e1f9      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013f4:	4b53      	ldr	r3, [pc, #332]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1f0      	bne.n	80013e2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	2b00      	cmp	r3, #0
 800140a:	d03c      	beq.n	8001486 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	695b      	ldr	r3, [r3, #20]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d01c      	beq.n	800144e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001414:	4b4b      	ldr	r3, [pc, #300]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001416:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800141a:	4a4a      	ldr	r2, [pc, #296]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001424:	f7ff faf8 	bl	8000a18 <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800142c:	f7ff faf4 	bl	8000a18 <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e1d4      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800143e:	4b41      	ldr	r3, [pc, #260]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001440:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d0ef      	beq.n	800142c <HAL_RCC_OscConfig+0x3ec>
 800144c:	e01b      	b.n	8001486 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800144e:	4b3d      	ldr	r3, [pc, #244]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001450:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001454:	4a3b      	ldr	r2, [pc, #236]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800145e:	f7ff fadb 	bl	8000a18 <HAL_GetTick>
 8001462:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001464:	e008      	b.n	8001478 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001466:	f7ff fad7 	bl	8000a18 <HAL_GetTick>
 800146a:	4602      	mov	r2, r0
 800146c:	693b      	ldr	r3, [r7, #16]
 800146e:	1ad3      	subs	r3, r2, r3
 8001470:	2b02      	cmp	r3, #2
 8001472:	d901      	bls.n	8001478 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001474:	2303      	movs	r3, #3
 8001476:	e1b7      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001478:	4b32      	ldr	r3, [pc, #200]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 800147a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800147e:	f003 0302 	and.w	r3, r3, #2
 8001482:	2b00      	cmp	r3, #0
 8001484:	d1ef      	bne.n	8001466 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f003 0304 	and.w	r3, r3, #4
 800148e:	2b00      	cmp	r3, #0
 8001490:	f000 80a6 	beq.w	80015e0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001494:	2300      	movs	r3, #0
 8001496:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001498:	4b2a      	ldr	r3, [pc, #168]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 800149a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800149c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d10d      	bne.n	80014c0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014a4:	4b27      	ldr	r3, [pc, #156]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80014a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014a8:	4a26      	ldr	r2, [pc, #152]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80014aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80014b0:	4b24      	ldr	r3, [pc, #144]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 80014b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	60bb      	str	r3, [r7, #8]
 80014ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014bc:	2301      	movs	r3, #1
 80014be:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014c0:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <HAL_RCC_OscConfig+0x508>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d118      	bne.n	80014fe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014cc:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <HAL_RCC_OscConfig+0x508>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a1d      	ldr	r2, [pc, #116]	@ (8001548 <HAL_RCC_OscConfig+0x508>)
 80014d2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80014d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014d8:	f7ff fa9e 	bl	8000a18 <HAL_GetTick>
 80014dc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014de:	e008      	b.n	80014f2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014e0:	f7ff fa9a 	bl	8000a18 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d901      	bls.n	80014f2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014ee:	2303      	movs	r3, #3
 80014f0:	e17a      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014f2:	4b15      	ldr	r3, [pc, #84]	@ (8001548 <HAL_RCC_OscConfig+0x508>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d0f0      	beq.n	80014e0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d108      	bne.n	8001518 <HAL_RCC_OscConfig+0x4d8>
 8001506:	4b0f      	ldr	r3, [pc, #60]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001508:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800150c:	4a0d      	ldr	r2, [pc, #52]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001516:	e029      	b.n	800156c <HAL_RCC_OscConfig+0x52c>
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b05      	cmp	r3, #5
 800151e:	d115      	bne.n	800154c <HAL_RCC_OscConfig+0x50c>
 8001520:	4b08      	ldr	r3, [pc, #32]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001522:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001526:	4a07      	ldr	r2, [pc, #28]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001530:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001532:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001536:	4a03      	ldr	r2, [pc, #12]	@ (8001544 <HAL_RCC_OscConfig+0x504>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001540:	e014      	b.n	800156c <HAL_RCC_OscConfig+0x52c>
 8001542:	bf00      	nop
 8001544:	40021000 	.word	0x40021000
 8001548:	40007000 	.word	0x40007000
 800154c:	4b9c      	ldr	r3, [pc, #624]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 800154e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001552:	4a9b      	ldr	r2, [pc, #620]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001554:	f023 0301 	bic.w	r3, r3, #1
 8001558:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800155c:	4b98      	ldr	r3, [pc, #608]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 800155e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001562:	4a97      	ldr	r2, [pc, #604]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001564:	f023 0304 	bic.w	r3, r3, #4
 8001568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d016      	beq.n	80015a2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001574:	f7ff fa50 	bl	8000a18 <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800157a:	e00a      	b.n	8001592 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800157c:	f7ff fa4c 	bl	8000a18 <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	f241 3288 	movw	r2, #5000	@ 0x1388
 800158a:	4293      	cmp	r3, r2
 800158c:	d901      	bls.n	8001592 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e12a      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001592:	4b8b      	ldr	r3, [pc, #556]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001594:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001598:	f003 0302 	and.w	r3, r3, #2
 800159c:	2b00      	cmp	r3, #0
 800159e:	d0ed      	beq.n	800157c <HAL_RCC_OscConfig+0x53c>
 80015a0:	e015      	b.n	80015ce <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015a2:	f7ff fa39 	bl	8000a18 <HAL_GetTick>
 80015a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015a8:	e00a      	b.n	80015c0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015aa:	f7ff fa35 	bl	8000a18 <HAL_GetTick>
 80015ae:	4602      	mov	r2, r0
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	1ad3      	subs	r3, r2, r3
 80015b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015b8:	4293      	cmp	r3, r2
 80015ba:	d901      	bls.n	80015c0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80015bc:	2303      	movs	r3, #3
 80015be:	e113      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80015c0:	4b7f      	ldr	r3, [pc, #508]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 80015c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80015c6:	f003 0302 	and.w	r3, r3, #2
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d1ed      	bne.n	80015aa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015ce:	7ffb      	ldrb	r3, [r7, #31]
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d105      	bne.n	80015e0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015d4:	4b7a      	ldr	r3, [pc, #488]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d8:	4a79      	ldr	r2, [pc, #484]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 80015da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80015de:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f000 80fe 	beq.w	80017e6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	f040 80d0 	bne.w	8001794 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80015f4:	4b72      	ldr	r3, [pc, #456]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 80015f6:	68db      	ldr	r3, [r3, #12]
 80015f8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	f003 0203 	and.w	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001604:	429a      	cmp	r2, r3
 8001606:	d130      	bne.n	800166a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	3b01      	subs	r3, #1
 8001614:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001616:	429a      	cmp	r2, r3
 8001618:	d127      	bne.n	800166a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001624:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001626:	429a      	cmp	r2, r3
 8001628:	d11f      	bne.n	800166a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001630:	687a      	ldr	r2, [r7, #4]
 8001632:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001634:	2a07      	cmp	r2, #7
 8001636:	bf14      	ite	ne
 8001638:	2201      	movne	r2, #1
 800163a:	2200      	moveq	r2, #0
 800163c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800163e:	4293      	cmp	r3, r2
 8001640:	d113      	bne.n	800166a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800164c:	085b      	lsrs	r3, r3, #1
 800164e:	3b01      	subs	r3, #1
 8001650:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001652:	429a      	cmp	r2, r3
 8001654:	d109      	bne.n	800166a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001660:	085b      	lsrs	r3, r3, #1
 8001662:	3b01      	subs	r3, #1
 8001664:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001666:	429a      	cmp	r2, r3
 8001668:	d06e      	beq.n	8001748 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	2b0c      	cmp	r3, #12
 800166e:	d069      	beq.n	8001744 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001670:	4b53      	ldr	r3, [pc, #332]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001678:	2b00      	cmp	r3, #0
 800167a:	d105      	bne.n	8001688 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800167c:	4b50      	ldr	r3, [pc, #320]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001688:	2301      	movs	r3, #1
 800168a:	e0ad      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800168c:	4b4c      	ldr	r3, [pc, #304]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a4b      	ldr	r2, [pc, #300]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001692:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001696:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001698:	f7ff f9be 	bl	8000a18 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016a0:	f7ff f9ba 	bl	8000a18 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e09a      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016b2:	4b43      	ldr	r3, [pc, #268]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016be:	4b40      	ldr	r3, [pc, #256]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	4b40      	ldr	r3, [pc, #256]	@ (80017c4 <HAL_RCC_OscConfig+0x784>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	687a      	ldr	r2, [r7, #4]
 80016c8:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80016ce:	3a01      	subs	r2, #1
 80016d0:	0112      	lsls	r2, r2, #4
 80016d2:	4311      	orrs	r1, r2
 80016d4:	687a      	ldr	r2, [r7, #4]
 80016d6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016d8:	0212      	lsls	r2, r2, #8
 80016da:	4311      	orrs	r1, r2
 80016dc:	687a      	ldr	r2, [r7, #4]
 80016de:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80016e0:	0852      	lsrs	r2, r2, #1
 80016e2:	3a01      	subs	r2, #1
 80016e4:	0552      	lsls	r2, r2, #21
 80016e6:	4311      	orrs	r1, r2
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80016ec:	0852      	lsrs	r2, r2, #1
 80016ee:	3a01      	subs	r2, #1
 80016f0:	0652      	lsls	r2, r2, #25
 80016f2:	4311      	orrs	r1, r2
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80016f8:	0912      	lsrs	r2, r2, #4
 80016fa:	0452      	lsls	r2, r2, #17
 80016fc:	430a      	orrs	r2, r1
 80016fe:	4930      	ldr	r1, [pc, #192]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001700:	4313      	orrs	r3, r2
 8001702:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001704:	4b2e      	ldr	r3, [pc, #184]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	4a2d      	ldr	r2, [pc, #180]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 800170a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800170e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001710:	4b2b      	ldr	r3, [pc, #172]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001712:	68db      	ldr	r3, [r3, #12]
 8001714:	4a2a      	ldr	r2, [pc, #168]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001716:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800171a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800171c:	f7ff f97c 	bl	8000a18 <HAL_GetTick>
 8001720:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001722:	e008      	b.n	8001736 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001724:	f7ff f978 	bl	8000a18 <HAL_GetTick>
 8001728:	4602      	mov	r2, r0
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	1ad3      	subs	r3, r2, r3
 800172e:	2b02      	cmp	r3, #2
 8001730:	d901      	bls.n	8001736 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001732:	2303      	movs	r3, #3
 8001734:	e058      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001736:	4b22      	ldr	r3, [pc, #136]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d0f0      	beq.n	8001724 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001742:	e050      	b.n	80017e6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e04f      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001748:	4b1d      	ldr	r3, [pc, #116]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001750:	2b00      	cmp	r3, #0
 8001752:	d148      	bne.n	80017e6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001754:	4b1a      	ldr	r3, [pc, #104]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a19      	ldr	r2, [pc, #100]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 800175a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800175e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001760:	4b17      	ldr	r3, [pc, #92]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	4a16      	ldr	r2, [pc, #88]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800176a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800176c:	f7ff f954 	bl	8000a18 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001774:	f7ff f950 	bl	8000a18 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e030      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001786:	4b0e      	ldr	r3, [pc, #56]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0f0      	beq.n	8001774 <HAL_RCC_OscConfig+0x734>
 8001792:	e028      	b.n	80017e6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	2b0c      	cmp	r3, #12
 8001798:	d023      	beq.n	80017e2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800179a:	4b09      	ldr	r3, [pc, #36]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4a08      	ldr	r2, [pc, #32]	@ (80017c0 <HAL_RCC_OscConfig+0x780>)
 80017a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80017a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a6:	f7ff f937 	bl	8000a18 <HAL_GetTick>
 80017aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017ac:	e00c      	b.n	80017c8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017ae:	f7ff f933 	bl	8000a18 <HAL_GetTick>
 80017b2:	4602      	mov	r2, r0
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d905      	bls.n	80017c8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e013      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
 80017c0:	40021000 	.word	0x40021000
 80017c4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017c8:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <HAL_RCC_OscConfig+0x7b0>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1ec      	bne.n	80017ae <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80017d4:	4b06      	ldr	r3, [pc, #24]	@ (80017f0 <HAL_RCC_OscConfig+0x7b0>)
 80017d6:	68da      	ldr	r2, [r3, #12]
 80017d8:	4905      	ldr	r1, [pc, #20]	@ (80017f0 <HAL_RCC_OscConfig+0x7b0>)
 80017da:	4b06      	ldr	r3, [pc, #24]	@ (80017f4 <HAL_RCC_OscConfig+0x7b4>)
 80017dc:	4013      	ands	r3, r2
 80017de:	60cb      	str	r3, [r1, #12]
 80017e0:	e001      	b.n	80017e6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e000      	b.n	80017e8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80017e6:	2300      	movs	r3, #0
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	40021000 	.word	0x40021000
 80017f4:	feeefffc 	.word	0xfeeefffc

080017f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0e7      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b75      	ldr	r3, [pc, #468]	@ (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b72      	ldr	r3, [pc, #456]	@ (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	4970      	ldr	r1, [pc, #448]	@ (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b6e      	ldr	r3, [pc, #440]	@ (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0cf      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d010      	beq.n	800186a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	4b66      	ldr	r3, [pc, #408]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001854:	429a      	cmp	r2, r3
 8001856:	d908      	bls.n	800186a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001858:	4b63      	ldr	r3, [pc, #396]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	689b      	ldr	r3, [r3, #8]
 8001864:	4960      	ldr	r1, [pc, #384]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001866:	4313      	orrs	r3, r2
 8001868:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0301 	and.w	r3, r3, #1
 8001872:	2b00      	cmp	r3, #0
 8001874:	d04c      	beq.n	8001910 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d107      	bne.n	800188e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800187e:	4b5a      	ldr	r3, [pc, #360]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d121      	bne.n	80018ce <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	e0a6      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	2b02      	cmp	r3, #2
 8001894:	d107      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001896:	4b54      	ldr	r3, [pc, #336]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d115      	bne.n	80018ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e09a      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d107      	bne.n	80018be <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ae:	4b4e      	ldr	r3, [pc, #312]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d109      	bne.n	80018ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	e08e      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018be:	4b4a      	ldr	r3, [pc, #296]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d101      	bne.n	80018ce <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e086      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018ce:	4b46      	ldr	r3, [pc, #280]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f023 0203 	bic.w	r2, r3, #3
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	4943      	ldr	r1, [pc, #268]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80018dc:	4313      	orrs	r3, r2
 80018de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80018e0:	f7ff f89a 	bl	8000a18 <HAL_GetTick>
 80018e4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e6:	e00a      	b.n	80018fe <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e8:	f7ff f896 	bl	8000a18 <HAL_GetTick>
 80018ec:	4602      	mov	r2, r0
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d901      	bls.n	80018fe <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e06e      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018fe:	4b3a      	ldr	r3, [pc, #232]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 020c 	and.w	r2, r3, #12
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	429a      	cmp	r2, r3
 800190e:	d1eb      	bne.n	80018e8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b00      	cmp	r3, #0
 800191a:	d010      	beq.n	800193e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689a      	ldr	r2, [r3, #8]
 8001920:	4b31      	ldr	r3, [pc, #196]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001928:	429a      	cmp	r2, r3
 800192a:	d208      	bcs.n	800193e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800192c:	4b2e      	ldr	r3, [pc, #184]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	689b      	ldr	r3, [r3, #8]
 8001938:	492b      	ldr	r1, [pc, #172]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800193e:	4b29      	ldr	r3, [pc, #164]	@ (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	429a      	cmp	r2, r3
 800194a:	d210      	bcs.n	800196e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800194c:	4b25      	ldr	r3, [pc, #148]	@ (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f023 0207 	bic.w	r2, r3, #7
 8001954:	4923      	ldr	r1, [pc, #140]	@ (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800195c:	4b21      	ldr	r3, [pc, #132]	@ (80019e4 <HAL_RCC_ClockConfig+0x1ec>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d001      	beq.n	800196e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e036      	b.n	80019dc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0304 	and.w	r3, r3, #4
 8001976:	2b00      	cmp	r3, #0
 8001978:	d008      	beq.n	800198c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800197a:	4b1b      	ldr	r3, [pc, #108]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	4918      	ldr	r1, [pc, #96]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 8001988:	4313      	orrs	r3, r2
 800198a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0308 	and.w	r3, r3, #8
 8001994:	2b00      	cmp	r3, #0
 8001996:	d009      	beq.n	80019ac <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001998:	4b13      	ldr	r3, [pc, #76]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	691b      	ldr	r3, [r3, #16]
 80019a4:	00db      	lsls	r3, r3, #3
 80019a6:	4910      	ldr	r1, [pc, #64]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80019a8:	4313      	orrs	r3, r2
 80019aa:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019ac:	f000 f824 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 80019b0:	4602      	mov	r2, r0
 80019b2:	4b0d      	ldr	r3, [pc, #52]	@ (80019e8 <HAL_RCC_ClockConfig+0x1f0>)
 80019b4:	689b      	ldr	r3, [r3, #8]
 80019b6:	091b      	lsrs	r3, r3, #4
 80019b8:	f003 030f 	and.w	r3, r3, #15
 80019bc:	490b      	ldr	r1, [pc, #44]	@ (80019ec <HAL_RCC_ClockConfig+0x1f4>)
 80019be:	5ccb      	ldrb	r3, [r1, r3]
 80019c0:	f003 031f 	and.w	r3, r3, #31
 80019c4:	fa22 f303 	lsr.w	r3, r2, r3
 80019c8:	4a09      	ldr	r2, [pc, #36]	@ (80019f0 <HAL_RCC_ClockConfig+0x1f8>)
 80019ca:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_RCC_ClockConfig+0x1fc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4618      	mov	r0, r3
 80019d2:	f7fe fefd 	bl	80007d0 <HAL_InitTick>
 80019d6:	4603      	mov	r3, r0
 80019d8:	72fb      	strb	r3, [r7, #11]

  return status;
 80019da:	7afb      	ldrb	r3, [r7, #11]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	40022000 	.word	0x40022000
 80019e8:	40021000 	.word	0x40021000
 80019ec:	0800365c 	.word	0x0800365c
 80019f0:	20000000 	.word	0x20000000
 80019f4:	20000004 	.word	0x20000004

080019f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b089      	sub	sp, #36	@ 0x24
 80019fc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	61fb      	str	r3, [r7, #28]
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a06:	4b3e      	ldr	r3, [pc, #248]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 030c 	and.w	r3, r3, #12
 8001a0e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a10:	4b3b      	ldr	r3, [pc, #236]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	f003 0303 	and.w	r3, r3, #3
 8001a18:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d005      	beq.n	8001a2c <HAL_RCC_GetSysClockFreq+0x34>
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	2b0c      	cmp	r3, #12
 8001a24:	d121      	bne.n	8001a6a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d11e      	bne.n	8001a6a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a2c:	4b34      	ldr	r3, [pc, #208]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0308 	and.w	r3, r3, #8
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d107      	bne.n	8001a48 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a38:	4b31      	ldr	r3, [pc, #196]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	f003 030f 	and.w	r3, r3, #15
 8001a44:	61fb      	str	r3, [r7, #28]
 8001a46:	e005      	b.n	8001a54 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a48:	4b2d      	ldr	r3, [pc, #180]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	091b      	lsrs	r3, r3, #4
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a54:	4a2b      	ldr	r2, [pc, #172]	@ (8001b04 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a5c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10d      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a68:	e00a      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	2b04      	cmp	r3, #4
 8001a6e:	d102      	bne.n	8001a76 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a70:	4b25      	ldr	r3, [pc, #148]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a72:	61bb      	str	r3, [r7, #24]
 8001a74:	e004      	b.n	8001a80 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	2b08      	cmp	r3, #8
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001a7c:	4b23      	ldr	r3, [pc, #140]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8001a7e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	2b0c      	cmp	r3, #12
 8001a84:	d134      	bne.n	8001af0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001a86:	4b1e      	ldr	r3, [pc, #120]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f003 0303 	and.w	r3, r3, #3
 8001a8e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	d003      	beq.n	8001a9e <HAL_RCC_GetSysClockFreq+0xa6>
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2b03      	cmp	r3, #3
 8001a9a:	d003      	beq.n	8001aa4 <HAL_RCC_GetSysClockFreq+0xac>
 8001a9c:	e005      	b.n	8001aaa <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001b08 <HAL_RCC_GetSysClockFreq+0x110>)
 8001aa0:	617b      	str	r3, [r7, #20]
      break;
 8001aa2:	e005      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001aa4:	4b19      	ldr	r3, [pc, #100]	@ (8001b0c <HAL_RCC_GetSysClockFreq+0x114>)
 8001aa6:	617b      	str	r3, [r7, #20]
      break;
 8001aa8:	e002      	b.n	8001ab0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	617b      	str	r3, [r7, #20]
      break;
 8001aae:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ab0:	4b13      	ldr	r3, [pc, #76]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	091b      	lsrs	r3, r3, #4
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	3301      	adds	r3, #1
 8001abc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001abe:	4b10      	ldr	r3, [pc, #64]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ac0:	68db      	ldr	r3, [r3, #12]
 8001ac2:	0a1b      	lsrs	r3, r3, #8
 8001ac4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001ac8:	697a      	ldr	r2, [r7, #20]
 8001aca:	fb03 f202 	mul.w	r2, r3, r2
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	0e5b      	lsrs	r3, r3, #25
 8001adc:	f003 0303 	and.w	r3, r3, #3
 8001ae0:	3301      	adds	r3, #1
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8001aee:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001af0:	69bb      	ldr	r3, [r7, #24]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3724      	adds	r7, #36	@ 0x24
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	40021000 	.word	0x40021000
 8001b04:	08003674 	.word	0x08003674
 8001b08:	00f42400 	.word	0x00f42400
 8001b0c:	007a1200 	.word	0x007a1200

08001b10 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b14:	4b03      	ldr	r3, [pc, #12]	@ (8001b24 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b16:	681b      	ldr	r3, [r3, #0]
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop
 8001b24:	20000000 	.word	0x20000000

08001b28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b2c:	f7ff fff0 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b30:	4602      	mov	r2, r0
 8001b32:	4b06      	ldr	r3, [pc, #24]	@ (8001b4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	0a1b      	lsrs	r3, r3, #8
 8001b38:	f003 0307 	and.w	r3, r3, #7
 8001b3c:	4904      	ldr	r1, [pc, #16]	@ (8001b50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b3e:	5ccb      	ldrb	r3, [r1, r3]
 8001b40:	f003 031f 	and.w	r3, r3, #31
 8001b44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	bd80      	pop	{r7, pc}
 8001b4c:	40021000 	.word	0x40021000
 8001b50:	0800366c 	.word	0x0800366c

08001b54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b58:	f7ff ffda 	bl	8001b10 <HAL_RCC_GetHCLKFreq>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	4b06      	ldr	r3, [pc, #24]	@ (8001b78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	0adb      	lsrs	r3, r3, #11
 8001b64:	f003 0307 	and.w	r3, r3, #7
 8001b68:	4904      	ldr	r1, [pc, #16]	@ (8001b7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b6a:	5ccb      	ldrb	r3, [r1, r3]
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	40021000 	.word	0x40021000
 8001b7c:	0800366c 	.word	0x0800366c

08001b80 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	220f      	movs	r2, #15
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001b90:	4b12      	ldr	r3, [pc, #72]	@ (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	f003 0203 	and.w	r2, r3, #3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	@ (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001baa:	689b      	ldr	r3, [r3, #8]
 8001bac:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001bb4:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <HAL_RCC_GetClockConfig+0x5c>)
 8001bb6:	689b      	ldr	r3, [r3, #8]
 8001bb8:	08db      	lsrs	r3, r3, #3
 8001bba:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <HAL_RCC_GetClockConfig+0x60>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0207 	and.w	r2, r3, #7
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	601a      	str	r2, [r3, #0]
}
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40022000 	.word	0x40022000

08001be4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b086      	sub	sp, #24
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001bec:	2300      	movs	r3, #0
 8001bee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001bf0:	4b2a      	ldr	r3, [pc, #168]	@ (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001bf2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bf4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001bfc:	f7ff f9bc 	bl	8000f78 <HAL_PWREx_GetVoltageRange>
 8001c00:	6178      	str	r0, [r7, #20]
 8001c02:	e014      	b.n	8001c2e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c04:	4b25      	ldr	r3, [pc, #148]	@ (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c08:	4a24      	ldr	r2, [pc, #144]	@ (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c0e:	6593      	str	r3, [r2, #88]	@ 0x58
 8001c10:	4b22      	ldr	r3, [pc, #136]	@ (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c14:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c1c:	f7ff f9ac 	bl	8000f78 <HAL_PWREx_GetVoltageRange>
 8001c20:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c22:	4b1e      	ldr	r3, [pc, #120]	@ (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001c26:	4a1d      	ldr	r2, [pc, #116]	@ (8001c9c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c2c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001c34:	d10b      	bne.n	8001c4e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2b80      	cmp	r3, #128	@ 0x80
 8001c3a:	d919      	bls.n	8001c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2ba0      	cmp	r3, #160	@ 0xa0
 8001c40:	d902      	bls.n	8001c48 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c42:	2302      	movs	r3, #2
 8001c44:	613b      	str	r3, [r7, #16]
 8001c46:	e013      	b.n	8001c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c48:	2301      	movs	r3, #1
 8001c4a:	613b      	str	r3, [r7, #16]
 8001c4c:	e010      	b.n	8001c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b80      	cmp	r3, #128	@ 0x80
 8001c52:	d902      	bls.n	8001c5a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c54:	2303      	movs	r3, #3
 8001c56:	613b      	str	r3, [r7, #16]
 8001c58:	e00a      	b.n	8001c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2b80      	cmp	r3, #128	@ 0x80
 8001c5e:	d102      	bne.n	8001c66 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c60:	2302      	movs	r3, #2
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	e004      	b.n	8001c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b70      	cmp	r3, #112	@ 0x70
 8001c6a:	d101      	bne.n	8001c70 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f023 0207 	bic.w	r2, r3, #7
 8001c78:	4909      	ldr	r1, [pc, #36]	@ (8001ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c7a:	693b      	ldr	r3, [r7, #16]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001c80:	4b07      	ldr	r3, [pc, #28]	@ (8001ca0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0307 	and.w	r3, r3, #7
 8001c88:	693a      	ldr	r2, [r7, #16]
 8001c8a:	429a      	cmp	r2, r3
 8001c8c:	d001      	beq.n	8001c92 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e000      	b.n	8001c94 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3718      	adds	r7, #24
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40022000 	.word	0x40022000

08001ca4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cac:	2300      	movs	r3, #0
 8001cae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d041      	beq.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001cc4:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001cc8:	d02a      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8001cca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8001cce:	d824      	bhi.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cd0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001cd4:	d008      	beq.n	8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001cd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001cda:	d81e      	bhi.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d00a      	beq.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8001ce0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001ce4:	d010      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8001ce6:	e018      	b.n	8001d1a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001ce8:	4b86      	ldr	r3, [pc, #536]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cea:	68db      	ldr	r3, [r3, #12]
 8001cec:	4a85      	ldr	r2, [pc, #532]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001cee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001cf2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001cf4:	e015      	b.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	2100      	movs	r1, #0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 fabb 	bl	8002278 <RCCEx_PLLSAI1_Config>
 8001d02:	4603      	mov	r3, r0
 8001d04:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d06:	e00c      	b.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3320      	adds	r3, #32
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f000 fba6 	bl	8002460 <RCCEx_PLLSAI2_Config>
 8001d14:	4603      	mov	r3, r0
 8001d16:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d18:	e003      	b.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	74fb      	strb	r3, [r7, #19]
      break;
 8001d1e:	e000      	b.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8001d20:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d22:	7cfb      	ldrb	r3, [r7, #19]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10b      	bne.n	8001d40 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d28:	4b76      	ldr	r3, [pc, #472]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d2e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001d36:	4973      	ldr	r1, [pc, #460]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001d3e:	e001      	b.n	8001d44 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d40:	7cfb      	ldrb	r3, [r7, #19]
 8001d42:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d041      	beq.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001d54:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d58:	d02a      	beq.n	8001db0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8001d5a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8001d5e:	d824      	bhi.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d60:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d64:	d008      	beq.n	8001d78 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8001d66:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001d6a:	d81e      	bhi.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x106>
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00a      	beq.n	8001d86 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8001d70:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d74:	d010      	beq.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8001d76:	e018      	b.n	8001daa <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001d78:	4b62      	ldr	r3, [pc, #392]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4a61      	ldr	r2, [pc, #388]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001d7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d82:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d84:	e015      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	3304      	adds	r3, #4
 8001d8a:	2100      	movs	r1, #0
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 fa73 	bl	8002278 <RCCEx_PLLSAI1_Config>
 8001d92:	4603      	mov	r3, r0
 8001d94:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001d96:	e00c      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3320      	adds	r3, #32
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 fb5e 	bl	8002460 <RCCEx_PLLSAI2_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001da8:	e003      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	74fb      	strb	r3, [r7, #19]
      break;
 8001dae:	e000      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8001db0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001db2:	7cfb      	ldrb	r3, [r7, #19]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d10b      	bne.n	8001dd0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001db8:	4b52      	ldr	r3, [pc, #328]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001dbe:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8001dc6:	494f      	ldr	r1, [pc, #316]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8001dce:	e001      	b.n	8001dd4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001dd0:	7cfb      	ldrb	r3, [r7, #19]
 8001dd2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	f000 80a0 	beq.w	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001de2:	2300      	movs	r3, #0
 8001de4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001de6:	4b47      	ldr	r3, [pc, #284]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001de8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d101      	bne.n	8001df6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8001df2:	2301      	movs	r3, #1
 8001df4:	e000      	b.n	8001df8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8001df6:	2300      	movs	r3, #0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d00d      	beq.n	8001e18 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001dfc:	4b41      	ldr	r3, [pc, #260]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001dfe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e00:	4a40      	ldr	r2, [pc, #256]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e02:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e06:	6593      	str	r3, [r2, #88]	@ 0x58
 8001e08:	4b3e      	ldr	r3, [pc, #248]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001e0c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001e14:	2301      	movs	r3, #1
 8001e16:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001e18:	4b3b      	ldr	r3, [pc, #236]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a3a      	ldr	r2, [pc, #232]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e22:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e24:	f7fe fdf8 	bl	8000a18 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e2a:	e009      	b.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e2c:	f7fe fdf4 	bl	8000a18 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d902      	bls.n	8001e40 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	74fb      	strb	r3, [r7, #19]
        break;
 8001e3e:	e005      	b.n	8001e4c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001e40:	4b31      	ldr	r3, [pc, #196]	@ (8001f08 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d0ef      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8001e4c:	7cfb      	ldrb	r3, [r7, #19]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d15c      	bne.n	8001f0c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001e52:	4b2c      	ldr	r3, [pc, #176]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e54:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e58:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e5c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d01f      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001e6a:	697a      	ldr	r2, [r7, #20]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d019      	beq.n	8001ea4 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001e70:	4b24      	ldr	r3, [pc, #144]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e76:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e7a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001e7c:	4b21      	ldr	r3, [pc, #132]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e82:	4a20      	ldr	r2, [pc, #128]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e88:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e8c:	4b1d      	ldr	r3, [pc, #116]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001e92:	4a1c      	ldr	r2, [pc, #112]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e94:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e98:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e9c:	4a19      	ldr	r2, [pc, #100]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	f003 0301 	and.w	r3, r3, #1
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d016      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eae:	f7fe fdb3 	bl	8000a18 <HAL_GetTick>
 8001eb2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001eb4:	e00b      	b.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb6:	f7fe fdaf 	bl	8000a18 <HAL_GetTick>
 8001eba:	4602      	mov	r2, r0
 8001ebc:	68fb      	ldr	r3, [r7, #12]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d902      	bls.n	8001ece <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8001ec8:	2303      	movs	r3, #3
 8001eca:	74fb      	strb	r3, [r7, #19]
            break;
 8001ecc:	e006      	b.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ece:	4b0d      	ldr	r3, [pc, #52]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d0ec      	beq.n	8001eb6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8001edc:	7cfb      	ldrb	r3, [r7, #19]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d10c      	bne.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ee2:	4b08      	ldr	r3, [pc, #32]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ee8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ef2:	4904      	ldr	r1, [pc, #16]	@ (8001f04 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8001efa:	e009      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001efc:	7cfb      	ldrb	r3, [r7, #19]
 8001efe:	74bb      	strb	r3, [r7, #18]
 8001f00:	e006      	b.n	8001f10 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8001f02:	bf00      	nop
 8001f04:	40021000 	.word	0x40021000
 8001f08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f0c:	7cfb      	ldrb	r3, [r7, #19]
 8001f0e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001f10:	7c7b      	ldrb	r3, [r7, #17]
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d105      	bne.n	8001f22 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f16:	4b9e      	ldr	r3, [pc, #632]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f1a:	4a9d      	ldr	r2, [pc, #628]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001f20:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00a      	beq.n	8001f44 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001f2e:	4b98      	ldr	r3, [pc, #608]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f34:	f023 0203 	bic.w	r2, r3, #3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f3c:	4994      	ldr	r1, [pc, #592]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f3e:	4313      	orrs	r3, r2
 8001f40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0302 	and.w	r3, r3, #2
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d00a      	beq.n	8001f66 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f50:	4b8f      	ldr	r3, [pc, #572]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f56:	f023 020c 	bic.w	r2, r3, #12
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f5e:	498c      	ldr	r1, [pc, #560]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0304 	and.w	r3, r3, #4
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00a      	beq.n	8001f88 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001f72:	4b87      	ldr	r3, [pc, #540]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f78:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f80:	4983      	ldr	r1, [pc, #524]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f82:	4313      	orrs	r3, r2
 8001f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0308 	and.w	r3, r3, #8
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d00a      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001f94:	4b7e      	ldr	r3, [pc, #504]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f9a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa2:	497b      	ldr	r1, [pc, #492]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fa4:	4313      	orrs	r3, r2
 8001fa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0310 	and.w	r3, r3, #16
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d00a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001fb6:	4b76      	ldr	r3, [pc, #472]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fbc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001fc4:	4972      	ldr	r1, [pc, #456]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d00a      	beq.n	8001fee <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001fd8:	4b6d      	ldr	r3, [pc, #436]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fde:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fe6:	496a      	ldr	r1, [pc, #424]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001fe8:	4313      	orrs	r3, r2
 8001fea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00a      	beq.n	8002010 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001ffa:	4b65      	ldr	r3, [pc, #404]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8001ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002000:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002008:	4961      	ldr	r1, [pc, #388]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800200a:	4313      	orrs	r3, r2
 800200c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002018:	2b00      	cmp	r3, #0
 800201a:	d00a      	beq.n	8002032 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800201c:	4b5c      	ldr	r3, [pc, #368]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800201e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002022:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800202a:	4959      	ldr	r1, [pc, #356]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800202c:	4313      	orrs	r3, r2
 800202e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00a      	beq.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800203e:	4b54      	ldr	r3, [pc, #336]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002044:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800204c:	4950      	ldr	r1, [pc, #320]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800204e:	4313      	orrs	r3, r2
 8002050:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800205c:	2b00      	cmp	r3, #0
 800205e:	d00a      	beq.n	8002076 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002060:	4b4b      	ldr	r3, [pc, #300]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002066:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800206e:	4948      	ldr	r1, [pc, #288]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002070:	4313      	orrs	r3, r2
 8002072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207e:	2b00      	cmp	r3, #0
 8002080:	d00a      	beq.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002082:	4b43      	ldr	r3, [pc, #268]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002084:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002088:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002090:	493f      	ldr	r1, [pc, #252]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002092:	4313      	orrs	r3, r2
 8002094:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d028      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80020a4:	4b3a      	ldr	r3, [pc, #232]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80020aa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020b2:	4937      	ldr	r1, [pc, #220]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020b4:	4313      	orrs	r3, r2
 80020b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020be:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80020c2:	d106      	bne.n	80020d2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80020c4:	4b32      	ldr	r3, [pc, #200]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020c6:	68db      	ldr	r3, [r3, #12]
 80020c8:	4a31      	ldr	r2, [pc, #196]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80020ca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80020ce:	60d3      	str	r3, [r2, #12]
 80020d0:	e011      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80020d6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80020da:	d10c      	bne.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3304      	adds	r3, #4
 80020e0:	2101      	movs	r1, #1
 80020e2:	4618      	mov	r0, r3
 80020e4:	f000 f8c8 	bl	8002278 <RCCEx_PLLSAI1_Config>
 80020e8:	4603      	mov	r3, r0
 80020ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80020ec:	7cfb      	ldrb	r3, [r7, #19]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80020f2:	7cfb      	ldrb	r3, [r7, #19]
 80020f4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d028      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002102:	4b23      	ldr	r3, [pc, #140]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002108:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002110:	491f      	ldr	r1, [pc, #124]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002112:	4313      	orrs	r3, r2
 8002114:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002120:	d106      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002122:	4b1b      	ldr	r3, [pc, #108]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	4a1a      	ldr	r2, [pc, #104]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002128:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800212c:	60d3      	str	r3, [r2, #12]
 800212e:	e011      	b.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002134:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002138:	d10c      	bne.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3304      	adds	r3, #4
 800213e:	2101      	movs	r1, #1
 8002140:	4618      	mov	r0, r3
 8002142:	f000 f899 	bl	8002278 <RCCEx_PLLSAI1_Config>
 8002146:	4603      	mov	r3, r0
 8002148:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d001      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800215c:	2b00      	cmp	r3, #0
 800215e:	d02b      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002160:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002166:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800216e:	4908      	ldr	r1, [pc, #32]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800217a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800217e:	d109      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002180:	4b03      	ldr	r3, [pc, #12]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002182:	68db      	ldr	r3, [r3, #12]
 8002184:	4a02      	ldr	r2, [pc, #8]	@ (8002190 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002186:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800218a:	60d3      	str	r3, [r2, #12]
 800218c:	e014      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800218e:	bf00      	nop
 8002190:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002198:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800219c:	d10c      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2101      	movs	r1, #1
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f867 	bl	8002278 <RCCEx_PLLSAI1_Config>
 80021aa:	4603      	mov	r3, r0
 80021ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ae:	7cfb      	ldrb	r3, [r7, #19]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d02f      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c4:	4b2b      	ldr	r3, [pc, #172]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021ca:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021d2:	4928      	ldr	r1, [pc, #160]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80021de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80021e2:	d10d      	bne.n	8002200 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	2102      	movs	r1, #2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f844 	bl	8002278 <RCCEx_PLLSAI1_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d014      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	74bb      	strb	r3, [r7, #18]
 80021fe:	e011      	b.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002204:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002208:	d10c      	bne.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	3320      	adds	r3, #32
 800220e:	2102      	movs	r1, #2
 8002210:	4618      	mov	r0, r3
 8002212:	f000 f925 	bl	8002460 <RCCEx_PLLSAI2_Config>
 8002216:	4603      	mov	r3, r0
 8002218:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800221a:	7cfb      	ldrb	r3, [r7, #19]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002220:	7cfb      	ldrb	r3, [r7, #19]
 8002222:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002230:	4b10      	ldr	r3, [pc, #64]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002232:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002236:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800223e:	490d      	ldr	r1, [pc, #52]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00b      	beq.n	800226a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002252:	4b08      	ldr	r3, [pc, #32]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002254:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002258:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002262:	4904      	ldr	r1, [pc, #16]	@ (8002274 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800226a:	7cbb      	ldrb	r3, [r7, #18]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}
 8002274:	40021000 	.word	0x40021000

08002278 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002282:	2300      	movs	r3, #0
 8002284:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002286:	4b75      	ldr	r3, [pc, #468]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002288:	68db      	ldr	r3, [r3, #12]
 800228a:	f003 0303 	and.w	r3, r3, #3
 800228e:	2b00      	cmp	r3, #0
 8002290:	d018      	beq.n	80022c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002292:	4b72      	ldr	r3, [pc, #456]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002294:	68db      	ldr	r3, [r3, #12]
 8002296:	f003 0203 	and.w	r2, r3, #3
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	429a      	cmp	r2, r3
 80022a0:	d10d      	bne.n	80022be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
       ||
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d009      	beq.n	80022be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80022aa:	4b6c      	ldr	r3, [pc, #432]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	091b      	lsrs	r3, r3, #4
 80022b0:	f003 0307 	and.w	r3, r3, #7
 80022b4:	1c5a      	adds	r2, r3, #1
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
       ||
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d047      	beq.n	800234e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	73fb      	strb	r3, [r7, #15]
 80022c2:	e044      	b.n	800234e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	2b03      	cmp	r3, #3
 80022ca:	d018      	beq.n	80022fe <RCCEx_PLLSAI1_Config+0x86>
 80022cc:	2b03      	cmp	r3, #3
 80022ce:	d825      	bhi.n	800231c <RCCEx_PLLSAI1_Config+0xa4>
 80022d0:	2b01      	cmp	r3, #1
 80022d2:	d002      	beq.n	80022da <RCCEx_PLLSAI1_Config+0x62>
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d009      	beq.n	80022ec <RCCEx_PLLSAI1_Config+0x74>
 80022d8:	e020      	b.n	800231c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80022da:	4b60      	ldr	r3, [pc, #384]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 0302 	and.w	r3, r3, #2
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d11d      	bne.n	8002322 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022ea:	e01a      	b.n	8002322 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022ec:	4b5b      	ldr	r3, [pc, #364]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d116      	bne.n	8002326 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022fc:	e013      	b.n	8002326 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022fe:	4b57      	ldr	r3, [pc, #348]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d10f      	bne.n	800232a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800230a:	4b54      	ldr	r3, [pc, #336]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d109      	bne.n	800232a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002316:	2301      	movs	r3, #1
 8002318:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800231a:	e006      	b.n	800232a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	73fb      	strb	r3, [r7, #15]
      break;
 8002320:	e004      	b.n	800232c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002322:	bf00      	nop
 8002324:	e002      	b.n	800232c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002326:	bf00      	nop
 8002328:	e000      	b.n	800232c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800232a:	bf00      	nop
    }

    if(status == HAL_OK)
 800232c:	7bfb      	ldrb	r3, [r7, #15]
 800232e:	2b00      	cmp	r3, #0
 8002330:	d10d      	bne.n	800234e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002332:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002334:	68db      	ldr	r3, [r3, #12]
 8002336:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6819      	ldr	r1, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	3b01      	subs	r3, #1
 8002344:	011b      	lsls	r3, r3, #4
 8002346:	430b      	orrs	r3, r1
 8002348:	4944      	ldr	r1, [pc, #272]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 800234a:	4313      	orrs	r3, r2
 800234c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d17d      	bne.n	8002450 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002354:	4b41      	ldr	r3, [pc, #260]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a40      	ldr	r2, [pc, #256]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 800235a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800235e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002360:	f7fe fb5a 	bl	8000a18 <HAL_GetTick>
 8002364:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002366:	e009      	b.n	800237c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002368:	f7fe fb56 	bl	8000a18 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d902      	bls.n	800237c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	73fb      	strb	r3, [r7, #15]
        break;
 800237a:	e005      	b.n	8002388 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800237c:	4b37      	ldr	r3, [pc, #220]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ef      	bne.n	8002368 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002388:	7bfb      	ldrb	r3, [r7, #15]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d160      	bne.n	8002450 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	2b00      	cmp	r3, #0
 8002392:	d111      	bne.n	80023b8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002394:	4b31      	ldr	r3, [pc, #196]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002396:	691b      	ldr	r3, [r3, #16]
 8002398:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800239c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80023a0:	687a      	ldr	r2, [r7, #4]
 80023a2:	6892      	ldr	r2, [r2, #8]
 80023a4:	0211      	lsls	r1, r2, #8
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	68d2      	ldr	r2, [r2, #12]
 80023aa:	0912      	lsrs	r2, r2, #4
 80023ac:	0452      	lsls	r2, r2, #17
 80023ae:	430a      	orrs	r2, r1
 80023b0:	492a      	ldr	r1, [pc, #168]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	610b      	str	r3, [r1, #16]
 80023b6:	e027      	b.n	8002408 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d112      	bne.n	80023e4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023be:	4b27      	ldr	r3, [pc, #156]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023c0:	691b      	ldr	r3, [r3, #16]
 80023c2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80023c6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6892      	ldr	r2, [r2, #8]
 80023ce:	0211      	lsls	r1, r2, #8
 80023d0:	687a      	ldr	r2, [r7, #4]
 80023d2:	6912      	ldr	r2, [r2, #16]
 80023d4:	0852      	lsrs	r2, r2, #1
 80023d6:	3a01      	subs	r2, #1
 80023d8:	0552      	lsls	r2, r2, #21
 80023da:	430a      	orrs	r2, r1
 80023dc:	491f      	ldr	r1, [pc, #124]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	610b      	str	r3, [r1, #16]
 80023e2:	e011      	b.n	8002408 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80023e4:	4b1d      	ldr	r3, [pc, #116]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80023ec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	6892      	ldr	r2, [r2, #8]
 80023f4:	0211      	lsls	r1, r2, #8
 80023f6:	687a      	ldr	r2, [r7, #4]
 80023f8:	6952      	ldr	r2, [r2, #20]
 80023fa:	0852      	lsrs	r2, r2, #1
 80023fc:	3a01      	subs	r2, #1
 80023fe:	0652      	lsls	r2, r2, #25
 8002400:	430a      	orrs	r2, r1
 8002402:	4916      	ldr	r1, [pc, #88]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002404:	4313      	orrs	r3, r2
 8002406:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002408:	4b14      	ldr	r3, [pc, #80]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a13      	ldr	r2, [pc, #76]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 800240e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002412:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f7fe fb00 	bl	8000a18 <HAL_GetTick>
 8002418:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800241a:	e009      	b.n	8002430 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800241c:	f7fe fafc 	bl	8000a18 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	68bb      	ldr	r3, [r7, #8]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d902      	bls.n	8002430 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	73fb      	strb	r3, [r7, #15]
          break;
 800242e:	e005      	b.n	800243c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002430:	4b0a      	ldr	r3, [pc, #40]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002438:	2b00      	cmp	r3, #0
 800243a:	d0ef      	beq.n	800241c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800243c:	7bfb      	ldrb	r3, [r7, #15]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d106      	bne.n	8002450 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002442:	4b06      	ldr	r3, [pc, #24]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	699b      	ldr	r3, [r3, #24]
 800244a:	4904      	ldr	r1, [pc, #16]	@ (800245c <RCCEx_PLLSAI1_Config+0x1e4>)
 800244c:	4313      	orrs	r3, r2
 800244e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002450:	7bfb      	ldrb	r3, [r7, #15]
}
 8002452:	4618      	mov	r0, r3
 8002454:	3710      	adds	r7, #16
 8002456:	46bd      	mov	sp, r7
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	40021000 	.word	0x40021000

08002460 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800246e:	4b6a      	ldr	r3, [pc, #424]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b00      	cmp	r3, #0
 8002478:	d018      	beq.n	80024ac <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800247a:	4b67      	ldr	r3, [pc, #412]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800247c:	68db      	ldr	r3, [r3, #12]
 800247e:	f003 0203 	and.w	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	429a      	cmp	r2, r3
 8002488:	d10d      	bne.n	80024a6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
       ||
 800248e:	2b00      	cmp	r3, #0
 8002490:	d009      	beq.n	80024a6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002492:	4b61      	ldr	r3, [pc, #388]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002494:	68db      	ldr	r3, [r3, #12]
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f003 0307 	and.w	r3, r3, #7
 800249c:	1c5a      	adds	r2, r3, #1
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
       ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d047      	beq.n	8002536 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	73fb      	strb	r3, [r7, #15]
 80024aa:	e044      	b.n	8002536 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2b03      	cmp	r3, #3
 80024b2:	d018      	beq.n	80024e6 <RCCEx_PLLSAI2_Config+0x86>
 80024b4:	2b03      	cmp	r3, #3
 80024b6:	d825      	bhi.n	8002504 <RCCEx_PLLSAI2_Config+0xa4>
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d002      	beq.n	80024c2 <RCCEx_PLLSAI2_Config+0x62>
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d009      	beq.n	80024d4 <RCCEx_PLLSAI2_Config+0x74>
 80024c0:	e020      	b.n	8002504 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80024c2:	4b55      	ldr	r3, [pc, #340]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d11d      	bne.n	800250a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024d2:	e01a      	b.n	800250a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80024d4:	4b50      	ldr	r3, [pc, #320]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d116      	bne.n	800250e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024e4:	e013      	b.n	800250e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024e6:	4b4c      	ldr	r3, [pc, #304]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10f      	bne.n	8002512 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024f2:	4b49      	ldr	r3, [pc, #292]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d109      	bne.n	8002512 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
 8002500:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002502:	e006      	b.n	8002512 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	73fb      	strb	r3, [r7, #15]
      break;
 8002508:	e004      	b.n	8002514 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800250a:	bf00      	nop
 800250c:	e002      	b.n	8002514 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800250e:	bf00      	nop
 8002510:	e000      	b.n	8002514 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002512:	bf00      	nop
    }

    if(status == HAL_OK)
 8002514:	7bfb      	ldrb	r3, [r7, #15]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d10d      	bne.n	8002536 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800251a:	4b3f      	ldr	r3, [pc, #252]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6819      	ldr	r1, [r3, #0]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	3b01      	subs	r3, #1
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	430b      	orrs	r3, r1
 8002530:	4939      	ldr	r1, [pc, #228]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002532:	4313      	orrs	r3, r2
 8002534:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d167      	bne.n	800260c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800253c:	4b36      	ldr	r3, [pc, #216]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a35      	ldr	r2, [pc, #212]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002542:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002546:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002548:	f7fe fa66 	bl	8000a18 <HAL_GetTick>
 800254c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800254e:	e009      	b.n	8002564 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002550:	f7fe fa62 	bl	8000a18 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	2b02      	cmp	r3, #2
 800255c:	d902      	bls.n	8002564 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800255e:	2303      	movs	r3, #3
 8002560:	73fb      	strb	r3, [r7, #15]
        break;
 8002562:	e005      	b.n	8002570 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002564:	4b2c      	ldr	r3, [pc, #176]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d1ef      	bne.n	8002550 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002570:	7bfb      	ldrb	r3, [r7, #15]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d14a      	bne.n	800260c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d111      	bne.n	80025a0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800257c:	4b26      	ldr	r3, [pc, #152]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800257e:	695b      	ldr	r3, [r3, #20]
 8002580:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8002584:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	6892      	ldr	r2, [r2, #8]
 800258c:	0211      	lsls	r1, r2, #8
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68d2      	ldr	r2, [r2, #12]
 8002592:	0912      	lsrs	r2, r2, #4
 8002594:	0452      	lsls	r2, r2, #17
 8002596:	430a      	orrs	r2, r1
 8002598:	491f      	ldr	r1, [pc, #124]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 800259a:	4313      	orrs	r3, r2
 800259c:	614b      	str	r3, [r1, #20]
 800259e:	e011      	b.n	80025c4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80025a0:	4b1d      	ldr	r3, [pc, #116]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025a2:	695b      	ldr	r3, [r3, #20]
 80025a4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 80025a8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6892      	ldr	r2, [r2, #8]
 80025b0:	0211      	lsls	r1, r2, #8
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	6912      	ldr	r2, [r2, #16]
 80025b6:	0852      	lsrs	r2, r2, #1
 80025b8:	3a01      	subs	r2, #1
 80025ba:	0652      	lsls	r2, r2, #25
 80025bc:	430a      	orrs	r2, r1
 80025be:	4916      	ldr	r1, [pc, #88]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80025c4:	4b14      	ldr	r3, [pc, #80]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a13      	ldr	r2, [pc, #76]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80025ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025d0:	f7fe fa22 	bl	8000a18 <HAL_GetTick>
 80025d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025d6:	e009      	b.n	80025ec <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80025d8:	f7fe fa1e 	bl	8000a18 <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	68bb      	ldr	r3, [r7, #8]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d902      	bls.n	80025ec <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	73fb      	strb	r3, [r7, #15]
          break;
 80025ea:	e005      	b.n	80025f8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80025ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0ef      	beq.n	80025d8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d106      	bne.n	800260c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80025fe:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002600:	695a      	ldr	r2, [r3, #20]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	4904      	ldr	r1, [pc, #16]	@ (8002618 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002608:	4313      	orrs	r3, r2
 800260a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800260c:	7bfb      	ldrb	r3, [r7, #15]
}
 800260e:	4618      	mov	r0, r3
 8002610:	3710      	adds	r7, #16
 8002612:	46bd      	mov	sp, r7
 8002614:	bd80      	pop	{r7, pc}
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000

0800261c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e049      	b.n	80026c2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f000 f841 	bl	80026ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2202      	movs	r2, #2
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681a      	ldr	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3304      	adds	r3, #4
 8002658:	4619      	mov	r1, r3
 800265a:	4610      	mov	r0, r2
 800265c:	f000 f9e0 	bl	8002a20 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
	...

080026e0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b085      	sub	sp, #20
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d001      	beq.n	80026f8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e04f      	b.n	8002798 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	2202      	movs	r2, #2
 80026fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f042 0201 	orr.w	r2, r2, #1
 800270e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4a23      	ldr	r2, [pc, #140]	@ (80027a4 <HAL_TIM_Base_Start_IT+0xc4>)
 8002716:	4293      	cmp	r3, r2
 8002718:	d01d      	beq.n	8002756 <HAL_TIM_Base_Start_IT+0x76>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002722:	d018      	beq.n	8002756 <HAL_TIM_Base_Start_IT+0x76>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a1f      	ldr	r2, [pc, #124]	@ (80027a8 <HAL_TIM_Base_Start_IT+0xc8>)
 800272a:	4293      	cmp	r3, r2
 800272c:	d013      	beq.n	8002756 <HAL_TIM_Base_Start_IT+0x76>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4a1e      	ldr	r2, [pc, #120]	@ (80027ac <HAL_TIM_Base_Start_IT+0xcc>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d00e      	beq.n	8002756 <HAL_TIM_Base_Start_IT+0x76>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4a1c      	ldr	r2, [pc, #112]	@ (80027b0 <HAL_TIM_Base_Start_IT+0xd0>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d009      	beq.n	8002756 <HAL_TIM_Base_Start_IT+0x76>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a1b      	ldr	r2, [pc, #108]	@ (80027b4 <HAL_TIM_Base_Start_IT+0xd4>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d004      	beq.n	8002756 <HAL_TIM_Base_Start_IT+0x76>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a19      	ldr	r2, [pc, #100]	@ (80027b8 <HAL_TIM_Base_Start_IT+0xd8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d115      	bne.n	8002782 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	4b17      	ldr	r3, [pc, #92]	@ (80027bc <HAL_TIM_Base_Start_IT+0xdc>)
 800275e:	4013      	ands	r3, r2
 8002760:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	2b06      	cmp	r3, #6
 8002766:	d015      	beq.n	8002794 <HAL_TIM_Base_Start_IT+0xb4>
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800276e:	d011      	beq.n	8002794 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	681a      	ldr	r2, [r3, #0]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f042 0201 	orr.w	r2, r2, #1
 800277e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002780:	e008      	b.n	8002794 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f042 0201 	orr.w	r2, r2, #1
 8002790:	601a      	str	r2, [r3, #0]
 8002792:	e000      	b.n	8002796 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002794:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002796:	2300      	movs	r3, #0
}
 8002798:	4618      	mov	r0, r3
 800279a:	3714      	adds	r7, #20
 800279c:	46bd      	mov	sp, r7
 800279e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a2:	4770      	bx	lr
 80027a4:	40012c00 	.word	0x40012c00
 80027a8:	40000400 	.word	0x40000400
 80027ac:	40000800 	.word	0x40000800
 80027b0:	40000c00 	.word	0x40000c00
 80027b4:	40013400 	.word	0x40013400
 80027b8:	40014000 	.word	0x40014000
 80027bc:	00010007 	.word	0x00010007

080027c0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b084      	sub	sp, #16
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d020      	beq.n	8002824 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 0302 	and.w	r3, r3, #2
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d01b      	beq.n	8002824 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0202 	mvn.w	r2, #2
 80027f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2201      	movs	r2, #1
 80027fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	f003 0303 	and.w	r3, r3, #3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f8e9 	bl	80029e2 <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f8db 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f8ec 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d020      	beq.n	8002870 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	2b00      	cmp	r3, #0
 8002836:	d01b      	beq.n	8002870 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0204 	mvn.w	r2, #4
 8002840:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2202      	movs	r2, #2
 8002846:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002852:	2b00      	cmp	r3, #0
 8002854:	d003      	beq.n	800285e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002856:	6878      	ldr	r0, [r7, #4]
 8002858:	f000 f8c3 	bl	80029e2 <HAL_TIM_IC_CaptureCallback>
 800285c:	e005      	b.n	800286a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f8b5 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f8c6 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	2200      	movs	r2, #0
 800286e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	2b00      	cmp	r3, #0
 8002878:	d020      	beq.n	80028bc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	f003 0308 	and.w	r3, r3, #8
 8002880:	2b00      	cmp	r3, #0
 8002882:	d01b      	beq.n	80028bc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f06f 0208 	mvn.w	r2, #8
 800288c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2204      	movs	r2, #4
 8002892:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	f003 0303 	and.w	r3, r3, #3
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028a2:	6878      	ldr	r0, [r7, #4]
 80028a4:	f000 f89d 	bl	80029e2 <HAL_TIM_IC_CaptureCallback>
 80028a8:	e005      	b.n	80028b6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f000 f88f 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f8a0 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	f003 0310 	and.w	r3, r3, #16
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d020      	beq.n	8002908 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	f003 0310 	and.w	r3, r3, #16
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d01b      	beq.n	8002908 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f06f 0210 	mvn.w	r2, #16
 80028d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2208      	movs	r2, #8
 80028de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f000 f877 	bl	80029e2 <HAL_TIM_IC_CaptureCallback>
 80028f4:	e005      	b.n	8002902 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f000 f869 	bl	80029ce <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f87a 	bl	80029f6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d00c      	beq.n	800292c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f003 0301 	and.w	r3, r3, #1
 8002918:	2b00      	cmp	r3, #0
 800291a:	d007      	beq.n	800292c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f06f 0201 	mvn.w	r2, #1
 8002924:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002926:	6878      	ldr	r0, [r7, #4]
 8002928:	f7fd feba 	bl	80006a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002932:	2b00      	cmp	r3, #0
 8002934:	d104      	bne.n	8002940 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002936:	68bb      	ldr	r3, [r7, #8]
 8002938:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00c      	beq.n	800295a <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002946:	2b00      	cmp	r3, #0
 8002948:	d007      	beq.n	800295a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8002952:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f913 	bl	8002b80 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00c      	beq.n	800297e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800296a:	2b00      	cmp	r3, #0
 800296c:	d007      	beq.n	800297e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8002976:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f90b 	bl	8002b94 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00c      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298e:	2b00      	cmp	r3, #0
 8002990:	d007      	beq.n	80029a2 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800299a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800299c:	6878      	ldr	r0, [r7, #4]
 800299e:	f000 f834 	bl	8002a0a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d00c      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 0320 	and.w	r3, r3, #32
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d007      	beq.n	80029c6 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f06f 0220 	mvn.w	r2, #32
 80029be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029c0:	6878      	ldr	r0, [r7, #4]
 80029c2:	f000 f8d3 	bl	8002b6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029c6:	bf00      	nop
 80029c8:	3710      	adds	r7, #16
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}

080029ce <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029ce:	b480      	push	{r7}
 80029d0:	b083      	sub	sp, #12
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029d6:	bf00      	nop
 80029d8:	370c      	adds	r7, #12
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr

080029e2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029e2:	b480      	push	{r7}
 80029e4:	b083      	sub	sp, #12
 80029e6:	af00      	add	r7, sp, #0
 80029e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f4:	4770      	bx	lr

080029f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
	...

08002a20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
 8002a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	4a46      	ldr	r2, [pc, #280]	@ (8002b4c <TIM_Base_SetConfig+0x12c>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d013      	beq.n	8002a60 <TIM_Base_SetConfig+0x40>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a3e:	d00f      	beq.n	8002a60 <TIM_Base_SetConfig+0x40>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	4a43      	ldr	r2, [pc, #268]	@ (8002b50 <TIM_Base_SetConfig+0x130>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d00b      	beq.n	8002a60 <TIM_Base_SetConfig+0x40>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	4a42      	ldr	r2, [pc, #264]	@ (8002b54 <TIM_Base_SetConfig+0x134>)
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d007      	beq.n	8002a60 <TIM_Base_SetConfig+0x40>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a41      	ldr	r2, [pc, #260]	@ (8002b58 <TIM_Base_SetConfig+0x138>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d003      	beq.n	8002a60 <TIM_Base_SetConfig+0x40>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a40      	ldr	r2, [pc, #256]	@ (8002b5c <TIM_Base_SetConfig+0x13c>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d108      	bne.n	8002a72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	68fa      	ldr	r2, [r7, #12]
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a35      	ldr	r2, [pc, #212]	@ (8002b4c <TIM_Base_SetConfig+0x12c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d01f      	beq.n	8002aba <TIM_Base_SetConfig+0x9a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a80:	d01b      	beq.n	8002aba <TIM_Base_SetConfig+0x9a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a32      	ldr	r2, [pc, #200]	@ (8002b50 <TIM_Base_SetConfig+0x130>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d017      	beq.n	8002aba <TIM_Base_SetConfig+0x9a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a31      	ldr	r2, [pc, #196]	@ (8002b54 <TIM_Base_SetConfig+0x134>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d013      	beq.n	8002aba <TIM_Base_SetConfig+0x9a>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a30      	ldr	r2, [pc, #192]	@ (8002b58 <TIM_Base_SetConfig+0x138>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d00f      	beq.n	8002aba <TIM_Base_SetConfig+0x9a>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4a2f      	ldr	r2, [pc, #188]	@ (8002b5c <TIM_Base_SetConfig+0x13c>)
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d00b      	beq.n	8002aba <TIM_Base_SetConfig+0x9a>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	4a2e      	ldr	r2, [pc, #184]	@ (8002b60 <TIM_Base_SetConfig+0x140>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d007      	beq.n	8002aba <TIM_Base_SetConfig+0x9a>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	4a2d      	ldr	r2, [pc, #180]	@ (8002b64 <TIM_Base_SetConfig+0x144>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d003      	beq.n	8002aba <TIM_Base_SetConfig+0x9a>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a2c      	ldr	r2, [pc, #176]	@ (8002b68 <TIM_Base_SetConfig+0x148>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d108      	bne.n	8002acc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	68fa      	ldr	r2, [r7, #12]
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	68fa      	ldr	r2, [r7, #12]
 8002ade:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	4a16      	ldr	r2, [pc, #88]	@ (8002b4c <TIM_Base_SetConfig+0x12c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d00f      	beq.n	8002b18 <TIM_Base_SetConfig+0xf8>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	4a18      	ldr	r2, [pc, #96]	@ (8002b5c <TIM_Base_SetConfig+0x13c>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d00b      	beq.n	8002b18 <TIM_Base_SetConfig+0xf8>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	4a17      	ldr	r2, [pc, #92]	@ (8002b60 <TIM_Base_SetConfig+0x140>)
 8002b04:	4293      	cmp	r3, r2
 8002b06:	d007      	beq.n	8002b18 <TIM_Base_SetConfig+0xf8>
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	4a16      	ldr	r2, [pc, #88]	@ (8002b64 <TIM_Base_SetConfig+0x144>)
 8002b0c:	4293      	cmp	r3, r2
 8002b0e:	d003      	beq.n	8002b18 <TIM_Base_SetConfig+0xf8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a15      	ldr	r2, [pc, #84]	@ (8002b68 <TIM_Base_SetConfig+0x148>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d103      	bne.n	8002b20 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	691a      	ldr	r2, [r3, #16]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	2201      	movs	r2, #1
 8002b24:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	691b      	ldr	r3, [r3, #16]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d105      	bne.n	8002b3e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	691b      	ldr	r3, [r3, #16]
 8002b36:	f023 0201 	bic.w	r2, r3, #1
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	611a      	str	r2, [r3, #16]
  }
}
 8002b3e:	bf00      	nop
 8002b40:	3714      	adds	r7, #20
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40012c00 	.word	0x40012c00
 8002b50:	40000400 	.word	0x40000400
 8002b54:	40000800 	.word	0x40000800
 8002b58:	40000c00 	.word	0x40000c00
 8002b5c:	40013400 	.word	0x40013400
 8002b60:	40014000 	.word	0x40014000
 8002b64:	40014400 	.word	0x40014400
 8002b68:	40014800 	.word	0x40014800

08002b6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b74:	bf00      	nop
 8002b76:	370c      	adds	r7, #12
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr

08002b80 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b083      	sub	sp, #12
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b88:	bf00      	nop
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b082      	sub	sp, #8
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d101      	bne.n	8002bba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e040      	b.n	8002c3c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d106      	bne.n	8002bd0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f7fd fda4 	bl	8000718 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2224      	movs	r2, #36	@ 0x24
 8002bd4:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d002      	beq.n	8002bf4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 fae0 	bl	80031b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f825 	bl	8002c44 <UART_SetConfig>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d101      	bne.n	8002c04 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002c00:	2301      	movs	r3, #1
 8002c02:	e01b      	b.n	8002c3c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c12:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	689a      	ldr	r2, [r3, #8]
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c22:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	681a      	ldr	r2, [r3, #0]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0201 	orr.w	r2, r2, #1
 8002c32:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f000 fb5f 	bl	80032f8 <UART_CheckIdleState>
 8002c3a:	4603      	mov	r3, r0
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}

08002c44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c48:	b08a      	sub	sp, #40	@ 0x28
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	689a      	ldr	r2, [r3, #8]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	691b      	ldr	r3, [r3, #16]
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	695b      	ldr	r3, [r3, #20]
 8002c62:	431a      	orrs	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	69db      	ldr	r3, [r3, #28]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	4ba4      	ldr	r3, [pc, #656]	@ (8002f04 <UART_SetConfig+0x2c0>)
 8002c74:	4013      	ands	r3, r2
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	6812      	ldr	r2, [r2, #0]
 8002c7a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002c7c:	430b      	orrs	r3, r1
 8002c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	68da      	ldr	r2, [r3, #12]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	699b      	ldr	r3, [r3, #24]
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a99      	ldr	r2, [pc, #612]	@ (8002f08 <UART_SetConfig+0x2c4>)
 8002ca2:	4293      	cmp	r3, r2
 8002ca4:	d004      	beq.n	8002cb0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	6a1b      	ldr	r3, [r3, #32]
 8002caa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cac:	4313      	orrs	r3, r2
 8002cae:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002cc0:	430a      	orrs	r2, r1
 8002cc2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4a90      	ldr	r2, [pc, #576]	@ (8002f0c <UART_SetConfig+0x2c8>)
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d126      	bne.n	8002d1c <UART_SetConfig+0xd8>
 8002cce:	4b90      	ldr	r3, [pc, #576]	@ (8002f10 <UART_SetConfig+0x2cc>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b03      	cmp	r3, #3
 8002cda:	d81b      	bhi.n	8002d14 <UART_SetConfig+0xd0>
 8002cdc:	a201      	add	r2, pc, #4	@ (adr r2, 8002ce4 <UART_SetConfig+0xa0>)
 8002cde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ce2:	bf00      	nop
 8002ce4:	08002cf5 	.word	0x08002cf5
 8002ce8:	08002d05 	.word	0x08002d05
 8002cec:	08002cfd 	.word	0x08002cfd
 8002cf0:	08002d0d 	.word	0x08002d0d
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002cfa:	e116      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002cfc:	2302      	movs	r3, #2
 8002cfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d02:	e112      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002d04:	2304      	movs	r3, #4
 8002d06:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d0a:	e10e      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002d0c:	2308      	movs	r3, #8
 8002d0e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d12:	e10a      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002d14:	2310      	movs	r3, #16
 8002d16:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d1a:	e106      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a7c      	ldr	r2, [pc, #496]	@ (8002f14 <UART_SetConfig+0x2d0>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d138      	bne.n	8002d98 <UART_SetConfig+0x154>
 8002d26:	4b7a      	ldr	r3, [pc, #488]	@ (8002f10 <UART_SetConfig+0x2cc>)
 8002d28:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d2c:	f003 030c 	and.w	r3, r3, #12
 8002d30:	2b0c      	cmp	r3, #12
 8002d32:	d82d      	bhi.n	8002d90 <UART_SetConfig+0x14c>
 8002d34:	a201      	add	r2, pc, #4	@ (adr r2, 8002d3c <UART_SetConfig+0xf8>)
 8002d36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d3a:	bf00      	nop
 8002d3c:	08002d71 	.word	0x08002d71
 8002d40:	08002d91 	.word	0x08002d91
 8002d44:	08002d91 	.word	0x08002d91
 8002d48:	08002d91 	.word	0x08002d91
 8002d4c:	08002d81 	.word	0x08002d81
 8002d50:	08002d91 	.word	0x08002d91
 8002d54:	08002d91 	.word	0x08002d91
 8002d58:	08002d91 	.word	0x08002d91
 8002d5c:	08002d79 	.word	0x08002d79
 8002d60:	08002d91 	.word	0x08002d91
 8002d64:	08002d91 	.word	0x08002d91
 8002d68:	08002d91 	.word	0x08002d91
 8002d6c:	08002d89 	.word	0x08002d89
 8002d70:	2300      	movs	r3, #0
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d76:	e0d8      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002d78:	2302      	movs	r3, #2
 8002d7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d7e:	e0d4      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002d80:	2304      	movs	r3, #4
 8002d82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d86:	e0d0      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002d88:	2308      	movs	r3, #8
 8002d8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d8e:	e0cc      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002d90:	2310      	movs	r3, #16
 8002d92:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002d96:	e0c8      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	4a5e      	ldr	r2, [pc, #376]	@ (8002f18 <UART_SetConfig+0x2d4>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d125      	bne.n	8002dee <UART_SetConfig+0x1aa>
 8002da2:	4b5b      	ldr	r3, [pc, #364]	@ (8002f10 <UART_SetConfig+0x2cc>)
 8002da4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da8:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8002dac:	2b30      	cmp	r3, #48	@ 0x30
 8002dae:	d016      	beq.n	8002dde <UART_SetConfig+0x19a>
 8002db0:	2b30      	cmp	r3, #48	@ 0x30
 8002db2:	d818      	bhi.n	8002de6 <UART_SetConfig+0x1a2>
 8002db4:	2b20      	cmp	r3, #32
 8002db6:	d00a      	beq.n	8002dce <UART_SetConfig+0x18a>
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	d814      	bhi.n	8002de6 <UART_SetConfig+0x1a2>
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <UART_SetConfig+0x182>
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d008      	beq.n	8002dd6 <UART_SetConfig+0x192>
 8002dc4:	e00f      	b.n	8002de6 <UART_SetConfig+0x1a2>
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dcc:	e0ad      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002dce:	2302      	movs	r3, #2
 8002dd0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dd4:	e0a9      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002dd6:	2304      	movs	r3, #4
 8002dd8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ddc:	e0a5      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002dde:	2308      	movs	r3, #8
 8002de0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002de4:	e0a1      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002de6:	2310      	movs	r3, #16
 8002de8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002dec:	e09d      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4a4a      	ldr	r2, [pc, #296]	@ (8002f1c <UART_SetConfig+0x2d8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d125      	bne.n	8002e44 <UART_SetConfig+0x200>
 8002df8:	4b45      	ldr	r3, [pc, #276]	@ (8002f10 <UART_SetConfig+0x2cc>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dfe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8002e02:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e04:	d016      	beq.n	8002e34 <UART_SetConfig+0x1f0>
 8002e06:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e08:	d818      	bhi.n	8002e3c <UART_SetConfig+0x1f8>
 8002e0a:	2b80      	cmp	r3, #128	@ 0x80
 8002e0c:	d00a      	beq.n	8002e24 <UART_SetConfig+0x1e0>
 8002e0e:	2b80      	cmp	r3, #128	@ 0x80
 8002e10:	d814      	bhi.n	8002e3c <UART_SetConfig+0x1f8>
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d002      	beq.n	8002e1c <UART_SetConfig+0x1d8>
 8002e16:	2b40      	cmp	r3, #64	@ 0x40
 8002e18:	d008      	beq.n	8002e2c <UART_SetConfig+0x1e8>
 8002e1a:	e00f      	b.n	8002e3c <UART_SetConfig+0x1f8>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e22:	e082      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002e24:	2302      	movs	r3, #2
 8002e26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e2a:	e07e      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e32:	e07a      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002e34:	2308      	movs	r3, #8
 8002e36:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e3a:	e076      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e42:	e072      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a35      	ldr	r2, [pc, #212]	@ (8002f20 <UART_SetConfig+0x2dc>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d12a      	bne.n	8002ea4 <UART_SetConfig+0x260>
 8002e4e:	4b30      	ldr	r3, [pc, #192]	@ (8002f10 <UART_SetConfig+0x2cc>)
 8002e50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e54:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e58:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e5c:	d01a      	beq.n	8002e94 <UART_SetConfig+0x250>
 8002e5e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002e62:	d81b      	bhi.n	8002e9c <UART_SetConfig+0x258>
 8002e64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e68:	d00c      	beq.n	8002e84 <UART_SetConfig+0x240>
 8002e6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e6e:	d815      	bhi.n	8002e9c <UART_SetConfig+0x258>
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <UART_SetConfig+0x238>
 8002e74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e78:	d008      	beq.n	8002e8c <UART_SetConfig+0x248>
 8002e7a:	e00f      	b.n	8002e9c <UART_SetConfig+0x258>
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e82:	e052      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002e84:	2302      	movs	r3, #2
 8002e86:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e8a:	e04e      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e92:	e04a      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002e94:	2308      	movs	r3, #8
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002e9a:	e046      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ea2:	e042      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a17      	ldr	r2, [pc, #92]	@ (8002f08 <UART_SetConfig+0x2c4>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d13a      	bne.n	8002f24 <UART_SetConfig+0x2e0>
 8002eae:	4b18      	ldr	r3, [pc, #96]	@ (8002f10 <UART_SetConfig+0x2cc>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eb4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002eb8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ebc:	d01a      	beq.n	8002ef4 <UART_SetConfig+0x2b0>
 8002ebe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8002ec2:	d81b      	bhi.n	8002efc <UART_SetConfig+0x2b8>
 8002ec4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ec8:	d00c      	beq.n	8002ee4 <UART_SetConfig+0x2a0>
 8002eca:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ece:	d815      	bhi.n	8002efc <UART_SetConfig+0x2b8>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <UART_SetConfig+0x298>
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ed8:	d008      	beq.n	8002eec <UART_SetConfig+0x2a8>
 8002eda:	e00f      	b.n	8002efc <UART_SetConfig+0x2b8>
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ee2:	e022      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002eea:	e01e      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002eec:	2304      	movs	r3, #4
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002ef2:	e01a      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002efa:	e016      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002efc:	2310      	movs	r3, #16
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8002f02:	e012      	b.n	8002f2a <UART_SetConfig+0x2e6>
 8002f04:	efff69f3 	.word	0xefff69f3
 8002f08:	40008000 	.word	0x40008000
 8002f0c:	40013800 	.word	0x40013800
 8002f10:	40021000 	.word	0x40021000
 8002f14:	40004400 	.word	0x40004400
 8002f18:	40004800 	.word	0x40004800
 8002f1c:	40004c00 	.word	0x40004c00
 8002f20:	40005000 	.word	0x40005000
 8002f24:	2310      	movs	r3, #16
 8002f26:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a9f      	ldr	r2, [pc, #636]	@ (80031ac <UART_SetConfig+0x568>)
 8002f30:	4293      	cmp	r3, r2
 8002f32:	d17a      	bne.n	800302a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f34:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d824      	bhi.n	8002f86 <UART_SetConfig+0x342>
 8002f3c:	a201      	add	r2, pc, #4	@ (adr r2, 8002f44 <UART_SetConfig+0x300>)
 8002f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f42:	bf00      	nop
 8002f44:	08002f69 	.word	0x08002f69
 8002f48:	08002f87 	.word	0x08002f87
 8002f4c:	08002f71 	.word	0x08002f71
 8002f50:	08002f87 	.word	0x08002f87
 8002f54:	08002f77 	.word	0x08002f77
 8002f58:	08002f87 	.word	0x08002f87
 8002f5c:	08002f87 	.word	0x08002f87
 8002f60:	08002f87 	.word	0x08002f87
 8002f64:	08002f7f 	.word	0x08002f7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f68:	f7fe fdde 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8002f6c:	61f8      	str	r0, [r7, #28]
        break;
 8002f6e:	e010      	b.n	8002f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f70:	4b8f      	ldr	r3, [pc, #572]	@ (80031b0 <UART_SetConfig+0x56c>)
 8002f72:	61fb      	str	r3, [r7, #28]
        break;
 8002f74:	e00d      	b.n	8002f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f76:	f7fe fd3f 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 8002f7a:	61f8      	str	r0, [r7, #28]
        break;
 8002f7c:	e009      	b.n	8002f92 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002f82:	61fb      	str	r3, [r7, #28]
        break;
 8002f84:	e005      	b.n	8002f92 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8002f86:	2300      	movs	r3, #0
 8002f88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8002f90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	f000 80fb 	beq.w	8003190 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	685a      	ldr	r2, [r3, #4]
 8002f9e:	4613      	mov	r3, r2
 8002fa0:	005b      	lsls	r3, r3, #1
 8002fa2:	4413      	add	r3, r2
 8002fa4:	69fa      	ldr	r2, [r7, #28]
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d305      	bcc.n	8002fb6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fb0:	69fa      	ldr	r2, [r7, #28]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d903      	bls.n	8002fbe <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8002fbc:	e0e8      	b.n	8003190 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	461c      	mov	r4, r3
 8002fc4:	4615      	mov	r5, r2
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	022b      	lsls	r3, r5, #8
 8002fd0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002fd4:	0222      	lsls	r2, r4, #8
 8002fd6:	68f9      	ldr	r1, [r7, #12]
 8002fd8:	6849      	ldr	r1, [r1, #4]
 8002fda:	0849      	lsrs	r1, r1, #1
 8002fdc:	2000      	movs	r0, #0
 8002fde:	4688      	mov	r8, r1
 8002fe0:	4681      	mov	r9, r0
 8002fe2:	eb12 0a08 	adds.w	sl, r2, r8
 8002fe6:	eb43 0b09 	adc.w	fp, r3, r9
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	603b      	str	r3, [r7, #0]
 8002ff2:	607a      	str	r2, [r7, #4]
 8002ff4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ff8:	4650      	mov	r0, sl
 8002ffa:	4659      	mov	r1, fp
 8002ffc:	f7fd f8e4 	bl	80001c8 <__aeabi_uldivmod>
 8003000:	4602      	mov	r2, r0
 8003002:	460b      	mov	r3, r1
 8003004:	4613      	mov	r3, r2
 8003006:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800300e:	d308      	bcc.n	8003022 <UART_SetConfig+0x3de>
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003016:	d204      	bcs.n	8003022 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	60da      	str	r2, [r3, #12]
 8003020:	e0b6      	b.n	8003190 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003022:	2301      	movs	r3, #1
 8003024:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8003028:	e0b2      	b.n	8003190 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003032:	d15e      	bne.n	80030f2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003034:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003038:	2b08      	cmp	r3, #8
 800303a:	d828      	bhi.n	800308e <UART_SetConfig+0x44a>
 800303c:	a201      	add	r2, pc, #4	@ (adr r2, 8003044 <UART_SetConfig+0x400>)
 800303e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003042:	bf00      	nop
 8003044:	08003069 	.word	0x08003069
 8003048:	08003071 	.word	0x08003071
 800304c:	08003079 	.word	0x08003079
 8003050:	0800308f 	.word	0x0800308f
 8003054:	0800307f 	.word	0x0800307f
 8003058:	0800308f 	.word	0x0800308f
 800305c:	0800308f 	.word	0x0800308f
 8003060:	0800308f 	.word	0x0800308f
 8003064:	08003087 	.word	0x08003087
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003068:	f7fe fd5e 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 800306c:	61f8      	str	r0, [r7, #28]
        break;
 800306e:	e014      	b.n	800309a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003070:	f7fe fd70 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
 8003074:	61f8      	str	r0, [r7, #28]
        break;
 8003076:	e010      	b.n	800309a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003078:	4b4d      	ldr	r3, [pc, #308]	@ (80031b0 <UART_SetConfig+0x56c>)
 800307a:	61fb      	str	r3, [r7, #28]
        break;
 800307c:	e00d      	b.n	800309a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307e:	f7fe fcbb 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 8003082:	61f8      	str	r0, [r7, #28]
        break;
 8003084:	e009      	b.n	800309a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003086:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800308a:	61fb      	str	r3, [r7, #28]
        break;
 800308c:	e005      	b.n	800309a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800308e:	2300      	movs	r3, #0
 8003090:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003098:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800309a:	69fb      	ldr	r3, [r7, #28]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d077      	beq.n	8003190 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80030a0:	69fb      	ldr	r3, [r7, #28]
 80030a2:	005a      	lsls	r2, r3, #1
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	085b      	lsrs	r3, r3, #1
 80030aa:	441a      	add	r2, r3
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80030b4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	2b0f      	cmp	r3, #15
 80030ba:	d916      	bls.n	80030ea <UART_SetConfig+0x4a6>
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030c2:	d212      	bcs.n	80030ea <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030c4:	69bb      	ldr	r3, [r7, #24]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	f023 030f 	bic.w	r3, r3, #15
 80030cc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	f003 0307 	and.w	r3, r3, #7
 80030d8:	b29a      	uxth	r2, r3
 80030da:	8afb      	ldrh	r3, [r7, #22]
 80030dc:	4313      	orrs	r3, r2
 80030de:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	8afa      	ldrh	r2, [r7, #22]
 80030e6:	60da      	str	r2, [r3, #12]
 80030e8:	e052      	b.n	8003190 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80030f0:	e04e      	b.n	8003190 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030f2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d827      	bhi.n	800314a <UART_SetConfig+0x506>
 80030fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003100 <UART_SetConfig+0x4bc>)
 80030fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003100:	08003125 	.word	0x08003125
 8003104:	0800312d 	.word	0x0800312d
 8003108:	08003135 	.word	0x08003135
 800310c:	0800314b 	.word	0x0800314b
 8003110:	0800313b 	.word	0x0800313b
 8003114:	0800314b 	.word	0x0800314b
 8003118:	0800314b 	.word	0x0800314b
 800311c:	0800314b 	.word	0x0800314b
 8003120:	08003143 	.word	0x08003143
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003124:	f7fe fd00 	bl	8001b28 <HAL_RCC_GetPCLK1Freq>
 8003128:	61f8      	str	r0, [r7, #28]
        break;
 800312a:	e014      	b.n	8003156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800312c:	f7fe fd12 	bl	8001b54 <HAL_RCC_GetPCLK2Freq>
 8003130:	61f8      	str	r0, [r7, #28]
        break;
 8003132:	e010      	b.n	8003156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003134:	4b1e      	ldr	r3, [pc, #120]	@ (80031b0 <UART_SetConfig+0x56c>)
 8003136:	61fb      	str	r3, [r7, #28]
        break;
 8003138:	e00d      	b.n	8003156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800313a:	f7fe fc5d 	bl	80019f8 <HAL_RCC_GetSysClockFreq>
 800313e:	61f8      	str	r0, [r7, #28]
        break;
 8003140:	e009      	b.n	8003156 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003142:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003146:	61fb      	str	r3, [r7, #28]
        break;
 8003148:	e005      	b.n	8003156 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8003154:	bf00      	nop
    }

    if (pclk != 0U)
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d019      	beq.n	8003190 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	085a      	lsrs	r2, r3, #1
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	441a      	add	r2, r3
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	fbb2 f3f3 	udiv	r3, r2, r3
 800316e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2b0f      	cmp	r3, #15
 8003174:	d909      	bls.n	800318a <UART_SetConfig+0x546>
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800317c:	d205      	bcs.n	800318a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	e002      	b.n	8003190 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	2200      	movs	r2, #0
 800319a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800319c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80031a0:	4618      	mov	r0, r3
 80031a2:	3728      	adds	r7, #40	@ 0x28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031aa:	bf00      	nop
 80031ac:	40008000 	.word	0x40008000
 80031b0:	00f42400 	.word	0x00f42400

080031b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031c0:	f003 0308 	and.w	r3, r3, #8
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00a      	beq.n	80031de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	430a      	orrs	r2, r1
 80031dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031e2:	f003 0301 	and.w	r3, r3, #1
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d00a      	beq.n	8003200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	430a      	orrs	r2, r1
 80031fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b00      	cmp	r3, #0
 800320a:	d00a      	beq.n	8003222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003226:	f003 0304 	and.w	r3, r3, #4
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00a      	beq.n	8003244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	430a      	orrs	r2, r1
 8003242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003248:	f003 0310 	and.w	r3, r3, #16
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00a      	beq.n	8003266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	430a      	orrs	r2, r1
 8003264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800326a:	f003 0320 	and.w	r3, r3, #32
 800326e:	2b00      	cmp	r3, #0
 8003270:	d00a      	beq.n	8003288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	430a      	orrs	r2, r1
 8003286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003290:	2b00      	cmp	r3, #0
 8003292:	d01a      	beq.n	80032ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	430a      	orrs	r2, r1
 80032a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80032b2:	d10a      	bne.n	80032ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	605a      	str	r2, [r3, #4]
  }
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b098      	sub	sp, #96	@ 0x60
 80032fc:	af02      	add	r7, sp, #8
 80032fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2200      	movs	r2, #0
 8003304:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003308:	f7fd fb86 	bl	8000a18 <HAL_GetTick>
 800330c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0308 	and.w	r3, r3, #8
 8003318:	2b08      	cmp	r3, #8
 800331a:	d12e      	bne.n	800337a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800331c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003324:	2200      	movs	r2, #0
 8003326:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f88c 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 8003330:	4603      	mov	r3, r0
 8003332:	2b00      	cmp	r3, #0
 8003334:	d021      	beq.n	800337a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800333c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800333e:	e853 3f00 	ldrex	r3, [r3]
 8003342:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003344:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003346:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800334a:	653b      	str	r3, [r7, #80]	@ 0x50
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	461a      	mov	r2, r3
 8003352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003354:	647b      	str	r3, [r7, #68]	@ 0x44
 8003356:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003358:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800335a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800335c:	e841 2300 	strex	r3, r2, [r1]
 8003360:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003362:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d1e6      	bne.n	8003336 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	2220      	movs	r2, #32
 800336c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2200      	movs	r2, #0
 8003372:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003376:	2303      	movs	r3, #3
 8003378:	e062      	b.n	8003440 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f003 0304 	and.w	r3, r3, #4
 8003384:	2b04      	cmp	r3, #4
 8003386:	d149      	bne.n	800341c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003388:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800338c:	9300      	str	r3, [sp, #0]
 800338e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003390:	2200      	movs	r2, #0
 8003392:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f000 f856 	bl	8003448 <UART_WaitOnFlagUntilTimeout>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d03c      	beq.n	800341c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033aa:	e853 3f00 	ldrex	r3, [r3]
 80033ae:	623b      	str	r3, [r7, #32]
   return(result);
 80033b0:	6a3b      	ldr	r3, [r7, #32]
 80033b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	461a      	mov	r2, r3
 80033be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033c4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033c8:	e841 2300 	strex	r3, r2, [r1]
 80033cc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d1e6      	bne.n	80033a2 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3308      	adds	r3, #8
 80033da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	e853 3f00 	ldrex	r3, [r3]
 80033e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f023 0301 	bic.w	r3, r3, #1
 80033ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	3308      	adds	r3, #8
 80033f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033f4:	61fa      	str	r2, [r7, #28]
 80033f6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033f8:	69b9      	ldr	r1, [r7, #24]
 80033fa:	69fa      	ldr	r2, [r7, #28]
 80033fc:	e841 2300 	strex	r3, r2, [r1]
 8003400:	617b      	str	r3, [r7, #20]
   return(result);
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d1e5      	bne.n	80033d4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2220      	movs	r2, #32
 800340c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2200      	movs	r2, #0
 8003414:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e011      	b.n	8003440 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2220      	movs	r2, #32
 8003426:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2200      	movs	r2, #0
 800343a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800343e:	2300      	movs	r3, #0
}
 8003440:	4618      	mov	r0, r3
 8003442:	3758      	adds	r7, #88	@ 0x58
 8003444:	46bd      	mov	sp, r7
 8003446:	bd80      	pop	{r7, pc}

08003448 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	603b      	str	r3, [r7, #0]
 8003454:	4613      	mov	r3, r2
 8003456:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003458:	e04f      	b.n	80034fa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003460:	d04b      	beq.n	80034fa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003462:	f7fd fad9 	bl	8000a18 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	429a      	cmp	r2, r3
 8003470:	d302      	bcc.n	8003478 <UART_WaitOnFlagUntilTimeout+0x30>
 8003472:	69bb      	ldr	r3, [r7, #24]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d101      	bne.n	800347c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e04e      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0304 	and.w	r3, r3, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	d037      	beq.n	80034fa <UART_WaitOnFlagUntilTimeout+0xb2>
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	2b80      	cmp	r3, #128	@ 0x80
 800348e:	d034      	beq.n	80034fa <UART_WaitOnFlagUntilTimeout+0xb2>
 8003490:	68bb      	ldr	r3, [r7, #8]
 8003492:	2b40      	cmp	r3, #64	@ 0x40
 8003494:	d031      	beq.n	80034fa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69db      	ldr	r3, [r3, #28]
 800349c:	f003 0308 	and.w	r3, r3, #8
 80034a0:	2b08      	cmp	r3, #8
 80034a2:	d110      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	2208      	movs	r2, #8
 80034aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f838 	bl	8003522 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	2208      	movs	r2, #8
 80034b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e029      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	69db      	ldr	r3, [r3, #28]
 80034cc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034d4:	d111      	bne.n	80034fa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f81e 	bl	8003522 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2220      	movs	r2, #32
 80034ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e00f      	b.n	800351a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	4013      	ands	r3, r2
 8003504:	68ba      	ldr	r2, [r7, #8]
 8003506:	429a      	cmp	r2, r3
 8003508:	bf0c      	ite	eq
 800350a:	2301      	moveq	r3, #1
 800350c:	2300      	movne	r3, #0
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	79fb      	ldrb	r3, [r7, #7]
 8003514:	429a      	cmp	r2, r3
 8003516:	d0a0      	beq.n	800345a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003522:	b480      	push	{r7}
 8003524:	b095      	sub	sp, #84	@ 0x54
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800353a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800353e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	461a      	mov	r2, r3
 8003546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003548:	643b      	str	r3, [r7, #64]	@ 0x40
 800354a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800354c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800354e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003550:	e841 2300 	strex	r3, r2, [r1]
 8003554:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003558:	2b00      	cmp	r3, #0
 800355a:	d1e6      	bne.n	800352a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	3308      	adds	r3, #8
 8003562:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003564:	6a3b      	ldr	r3, [r7, #32]
 8003566:	e853 3f00 	ldrex	r3, [r3]
 800356a:	61fb      	str	r3, [r7, #28]
   return(result);
 800356c:	69fb      	ldr	r3, [r7, #28]
 800356e:	f023 0301 	bic.w	r3, r3, #1
 8003572:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	3308      	adds	r3, #8
 800357a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800357c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800357e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003580:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003582:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003584:	e841 2300 	strex	r3, r2, [r1]
 8003588:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800358a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800358c:	2b00      	cmp	r3, #0
 800358e:	d1e5      	bne.n	800355c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003594:	2b01      	cmp	r3, #1
 8003596:	d118      	bne.n	80035ca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	e853 3f00 	ldrex	r3, [r3]
 80035a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	f023 0310 	bic.w	r3, r3, #16
 80035ac:	647b      	str	r3, [r7, #68]	@ 0x44
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	461a      	mov	r2, r3
 80035b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b6:	61bb      	str	r3, [r7, #24]
 80035b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035ba:	6979      	ldr	r1, [r7, #20]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	e841 2300 	strex	r3, r2, [r1]
 80035c2:	613b      	str	r3, [r7, #16]
   return(result);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1e6      	bne.n	8003598 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2220      	movs	r2, #32
 80035ce:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2200      	movs	r2, #0
 80035d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80035de:	bf00      	nop
 80035e0:	3754      	adds	r7, #84	@ 0x54
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr

080035ea <memset>:
 80035ea:	4402      	add	r2, r0
 80035ec:	4603      	mov	r3, r0
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d100      	bne.n	80035f4 <memset+0xa>
 80035f2:	4770      	bx	lr
 80035f4:	f803 1b01 	strb.w	r1, [r3], #1
 80035f8:	e7f9      	b.n	80035ee <memset+0x4>
	...

080035fc <__libc_init_array>:
 80035fc:	b570      	push	{r4, r5, r6, lr}
 80035fe:	4d0d      	ldr	r5, [pc, #52]	@ (8003634 <__libc_init_array+0x38>)
 8003600:	4c0d      	ldr	r4, [pc, #52]	@ (8003638 <__libc_init_array+0x3c>)
 8003602:	1b64      	subs	r4, r4, r5
 8003604:	10a4      	asrs	r4, r4, #2
 8003606:	2600      	movs	r6, #0
 8003608:	42a6      	cmp	r6, r4
 800360a:	d109      	bne.n	8003620 <__libc_init_array+0x24>
 800360c:	4d0b      	ldr	r5, [pc, #44]	@ (800363c <__libc_init_array+0x40>)
 800360e:	4c0c      	ldr	r4, [pc, #48]	@ (8003640 <__libc_init_array+0x44>)
 8003610:	f000 f818 	bl	8003644 <_init>
 8003614:	1b64      	subs	r4, r4, r5
 8003616:	10a4      	asrs	r4, r4, #2
 8003618:	2600      	movs	r6, #0
 800361a:	42a6      	cmp	r6, r4
 800361c:	d105      	bne.n	800362a <__libc_init_array+0x2e>
 800361e:	bd70      	pop	{r4, r5, r6, pc}
 8003620:	f855 3b04 	ldr.w	r3, [r5], #4
 8003624:	4798      	blx	r3
 8003626:	3601      	adds	r6, #1
 8003628:	e7ee      	b.n	8003608 <__libc_init_array+0xc>
 800362a:	f855 3b04 	ldr.w	r3, [r5], #4
 800362e:	4798      	blx	r3
 8003630:	3601      	adds	r6, #1
 8003632:	e7f2      	b.n	800361a <__libc_init_array+0x1e>
 8003634:	080036ac 	.word	0x080036ac
 8003638:	080036ac 	.word	0x080036ac
 800363c:	080036ac 	.word	0x080036ac
 8003640:	080036b0 	.word	0x080036b0

08003644 <_init>:
 8003644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003646:	bf00      	nop
 8003648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800364a:	bc08      	pop	{r3}
 800364c:	469e      	mov	lr, r3
 800364e:	4770      	bx	lr

08003650 <_fini>:
 8003650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003652:	bf00      	nop
 8003654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003656:	bc08      	pop	{r3}
 8003658:	469e      	mov	lr, r3
 800365a:	4770      	bx	lr
