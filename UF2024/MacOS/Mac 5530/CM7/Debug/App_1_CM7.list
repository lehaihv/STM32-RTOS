
App_1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000067f0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08006a90  08006a90  00007a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b24  08006b24  00008088  2**0
                  CONTENTS
  4 .ARM          00000008  08006b24  08006b24  00007b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006b2c  08006b2c  00008088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b2c  08006b2c  00007b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006b30  08006b30  00007b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000088  24000000  08006b34  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b8  24000088  08006bbc  00008088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000340  08006bbc  00008340  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008088  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ab2  00000000  00000000  000080b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000269f  00000000  00000000  0001ab68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  0001d208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009de  00000000  00000000  0001df00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003aac3  00000000  00000000  0001e8de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001163c  00000000  00000000  000593a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017e106  00000000  00000000  0006a9dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001e8ae3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c18  00000000  00000000  001e8b28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007a  00000000  00000000  001ec740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000088 	.word	0x24000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006a78 	.word	0x08006a78

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400008c 	.word	0x2400008c
 80002dc:	08006a78 	.word	0x08006a78

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b96a 	b.w	800066c <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	460c      	mov	r4, r1
 80003b8:	2b00      	cmp	r3, #0
 80003ba:	d14e      	bne.n	800045a <__udivmoddi4+0xaa>
 80003bc:	4694      	mov	ip, r2
 80003be:	458c      	cmp	ip, r1
 80003c0:	4686      	mov	lr, r0
 80003c2:	fab2 f282 	clz	r2, r2
 80003c6:	d962      	bls.n	800048e <__udivmoddi4+0xde>
 80003c8:	b14a      	cbz	r2, 80003de <__udivmoddi4+0x2e>
 80003ca:	f1c2 0320 	rsb	r3, r2, #32
 80003ce:	4091      	lsls	r1, r2
 80003d0:	fa20 f303 	lsr.w	r3, r0, r3
 80003d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003d8:	4319      	orrs	r1, r3
 80003da:	fa00 fe02 	lsl.w	lr, r0, r2
 80003de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e2:	fa1f f68c 	uxth.w	r6, ip
 80003e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ee:	fb07 1114 	mls	r1, r7, r4, r1
 80003f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f6:	fb04 f106 	mul.w	r1, r4, r6
 80003fa:	4299      	cmp	r1, r3
 80003fc:	d90a      	bls.n	8000414 <__udivmoddi4+0x64>
 80003fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000402:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000406:	f080 8112 	bcs.w	800062e <__udivmoddi4+0x27e>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 810f 	bls.w	800062e <__udivmoddi4+0x27e>
 8000410:	3c02      	subs	r4, #2
 8000412:	4463      	add	r3, ip
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	fa1f f38e 	uxth.w	r3, lr
 800041a:	fbb1 f0f7 	udiv	r0, r1, r7
 800041e:	fb07 1110 	mls	r1, r7, r0, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb00 f606 	mul.w	r6, r0, r6
 800042a:	429e      	cmp	r6, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x94>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000436:	f080 80fc 	bcs.w	8000632 <__udivmoddi4+0x282>
 800043a:	429e      	cmp	r6, r3
 800043c:	f240 80f9 	bls.w	8000632 <__udivmoddi4+0x282>
 8000440:	4463      	add	r3, ip
 8000442:	3802      	subs	r0, #2
 8000444:	1b9b      	subs	r3, r3, r6
 8000446:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800044a:	2100      	movs	r1, #0
 800044c:	b11d      	cbz	r5, 8000456 <__udivmoddi4+0xa6>
 800044e:	40d3      	lsrs	r3, r2
 8000450:	2200      	movs	r2, #0
 8000452:	e9c5 3200 	strd	r3, r2, [r5]
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	428b      	cmp	r3, r1
 800045c:	d905      	bls.n	800046a <__udivmoddi4+0xba>
 800045e:	b10d      	cbz	r5, 8000464 <__udivmoddi4+0xb4>
 8000460:	e9c5 0100 	strd	r0, r1, [r5]
 8000464:	2100      	movs	r1, #0
 8000466:	4608      	mov	r0, r1
 8000468:	e7f5      	b.n	8000456 <__udivmoddi4+0xa6>
 800046a:	fab3 f183 	clz	r1, r3
 800046e:	2900      	cmp	r1, #0
 8000470:	d146      	bne.n	8000500 <__udivmoddi4+0x150>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d302      	bcc.n	800047c <__udivmoddi4+0xcc>
 8000476:	4290      	cmp	r0, r2
 8000478:	f0c0 80f0 	bcc.w	800065c <__udivmoddi4+0x2ac>
 800047c:	1a86      	subs	r6, r0, r2
 800047e:	eb64 0303 	sbc.w	r3, r4, r3
 8000482:	2001      	movs	r0, #1
 8000484:	2d00      	cmp	r5, #0
 8000486:	d0e6      	beq.n	8000456 <__udivmoddi4+0xa6>
 8000488:	e9c5 6300 	strd	r6, r3, [r5]
 800048c:	e7e3      	b.n	8000456 <__udivmoddi4+0xa6>
 800048e:	2a00      	cmp	r2, #0
 8000490:	f040 8090 	bne.w	80005b4 <__udivmoddi4+0x204>
 8000494:	eba1 040c 	sub.w	r4, r1, ip
 8000498:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800049c:	fa1f f78c 	uxth.w	r7, ip
 80004a0:	2101      	movs	r1, #1
 80004a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004aa:	fb08 4416 	mls	r4, r8, r6, r4
 80004ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004b2:	fb07 f006 	mul.w	r0, r7, r6
 80004b6:	4298      	cmp	r0, r3
 80004b8:	d908      	bls.n	80004cc <__udivmoddi4+0x11c>
 80004ba:	eb1c 0303 	adds.w	r3, ip, r3
 80004be:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x11a>
 80004c4:	4298      	cmp	r0, r3
 80004c6:	f200 80cd 	bhi.w	8000664 <__udivmoddi4+0x2b4>
 80004ca:	4626      	mov	r6, r4
 80004cc:	1a1c      	subs	r4, r3, r0
 80004ce:	fa1f f38e 	uxth.w	r3, lr
 80004d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004d6:	fb08 4410 	mls	r4, r8, r0, r4
 80004da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004de:	fb00 f707 	mul.w	r7, r0, r7
 80004e2:	429f      	cmp	r7, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x148>
 80004e6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ea:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80004ee:	d202      	bcs.n	80004f6 <__udivmoddi4+0x146>
 80004f0:	429f      	cmp	r7, r3
 80004f2:	f200 80b0 	bhi.w	8000656 <__udivmoddi4+0x2a6>
 80004f6:	4620      	mov	r0, r4
 80004f8:	1bdb      	subs	r3, r3, r7
 80004fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004fe:	e7a5      	b.n	800044c <__udivmoddi4+0x9c>
 8000500:	f1c1 0620 	rsb	r6, r1, #32
 8000504:	408b      	lsls	r3, r1
 8000506:	fa22 f706 	lsr.w	r7, r2, r6
 800050a:	431f      	orrs	r7, r3
 800050c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000510:	fa04 f301 	lsl.w	r3, r4, r1
 8000514:	ea43 030c 	orr.w	r3, r3, ip
 8000518:	40f4      	lsrs	r4, r6
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	0c38      	lsrs	r0, r7, #16
 8000520:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000524:	fbb4 fef0 	udiv	lr, r4, r0
 8000528:	fa1f fc87 	uxth.w	ip, r7
 800052c:	fb00 441e 	mls	r4, r0, lr, r4
 8000530:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000534:	fb0e f90c 	mul.w	r9, lr, ip
 8000538:	45a1      	cmp	r9, r4
 800053a:	fa02 f201 	lsl.w	r2, r2, r1
 800053e:	d90a      	bls.n	8000556 <__udivmoddi4+0x1a6>
 8000540:	193c      	adds	r4, r7, r4
 8000542:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000546:	f080 8084 	bcs.w	8000652 <__udivmoddi4+0x2a2>
 800054a:	45a1      	cmp	r9, r4
 800054c:	f240 8081 	bls.w	8000652 <__udivmoddi4+0x2a2>
 8000550:	f1ae 0e02 	sub.w	lr, lr, #2
 8000554:	443c      	add	r4, r7
 8000556:	eba4 0409 	sub.w	r4, r4, r9
 800055a:	fa1f f983 	uxth.w	r9, r3
 800055e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000562:	fb00 4413 	mls	r4, r0, r3, r4
 8000566:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800056a:	fb03 fc0c 	mul.w	ip, r3, ip
 800056e:	45a4      	cmp	ip, r4
 8000570:	d907      	bls.n	8000582 <__udivmoddi4+0x1d2>
 8000572:	193c      	adds	r4, r7, r4
 8000574:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000578:	d267      	bcs.n	800064a <__udivmoddi4+0x29a>
 800057a:	45a4      	cmp	ip, r4
 800057c:	d965      	bls.n	800064a <__udivmoddi4+0x29a>
 800057e:	3b02      	subs	r3, #2
 8000580:	443c      	add	r4, r7
 8000582:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000586:	fba0 9302 	umull	r9, r3, r0, r2
 800058a:	eba4 040c 	sub.w	r4, r4, ip
 800058e:	429c      	cmp	r4, r3
 8000590:	46ce      	mov	lr, r9
 8000592:	469c      	mov	ip, r3
 8000594:	d351      	bcc.n	800063a <__udivmoddi4+0x28a>
 8000596:	d04e      	beq.n	8000636 <__udivmoddi4+0x286>
 8000598:	b155      	cbz	r5, 80005b0 <__udivmoddi4+0x200>
 800059a:	ebb8 030e 	subs.w	r3, r8, lr
 800059e:	eb64 040c 	sbc.w	r4, r4, ip
 80005a2:	fa04 f606 	lsl.w	r6, r4, r6
 80005a6:	40cb      	lsrs	r3, r1
 80005a8:	431e      	orrs	r6, r3
 80005aa:	40cc      	lsrs	r4, r1
 80005ac:	e9c5 6400 	strd	r6, r4, [r5]
 80005b0:	2100      	movs	r1, #0
 80005b2:	e750      	b.n	8000456 <__udivmoddi4+0xa6>
 80005b4:	f1c2 0320 	rsb	r3, r2, #32
 80005b8:	fa20 f103 	lsr.w	r1, r0, r3
 80005bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80005c0:	fa24 f303 	lsr.w	r3, r4, r3
 80005c4:	4094      	lsls	r4, r2
 80005c6:	430c      	orrs	r4, r1
 80005c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80005d0:	fa1f f78c 	uxth.w	r7, ip
 80005d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005d8:	fb08 3110 	mls	r1, r8, r0, r3
 80005dc:	0c23      	lsrs	r3, r4, #16
 80005de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e2:	fb00 f107 	mul.w	r1, r0, r7
 80005e6:	4299      	cmp	r1, r3
 80005e8:	d908      	bls.n	80005fc <__udivmoddi4+0x24c>
 80005ea:	eb1c 0303 	adds.w	r3, ip, r3
 80005ee:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80005f2:	d22c      	bcs.n	800064e <__udivmoddi4+0x29e>
 80005f4:	4299      	cmp	r1, r3
 80005f6:	d92a      	bls.n	800064e <__udivmoddi4+0x29e>
 80005f8:	3802      	subs	r0, #2
 80005fa:	4463      	add	r3, ip
 80005fc:	1a5b      	subs	r3, r3, r1
 80005fe:	b2a4      	uxth	r4, r4
 8000600:	fbb3 f1f8 	udiv	r1, r3, r8
 8000604:	fb08 3311 	mls	r3, r8, r1, r3
 8000608:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800060c:	fb01 f307 	mul.w	r3, r1, r7
 8000610:	42a3      	cmp	r3, r4
 8000612:	d908      	bls.n	8000626 <__udivmoddi4+0x276>
 8000614:	eb1c 0404 	adds.w	r4, ip, r4
 8000618:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800061c:	d213      	bcs.n	8000646 <__udivmoddi4+0x296>
 800061e:	42a3      	cmp	r3, r4
 8000620:	d911      	bls.n	8000646 <__udivmoddi4+0x296>
 8000622:	3902      	subs	r1, #2
 8000624:	4464      	add	r4, ip
 8000626:	1ae4      	subs	r4, r4, r3
 8000628:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800062c:	e739      	b.n	80004a2 <__udivmoddi4+0xf2>
 800062e:	4604      	mov	r4, r0
 8000630:	e6f0      	b.n	8000414 <__udivmoddi4+0x64>
 8000632:	4608      	mov	r0, r1
 8000634:	e706      	b.n	8000444 <__udivmoddi4+0x94>
 8000636:	45c8      	cmp	r8, r9
 8000638:	d2ae      	bcs.n	8000598 <__udivmoddi4+0x1e8>
 800063a:	ebb9 0e02 	subs.w	lr, r9, r2
 800063e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000642:	3801      	subs	r0, #1
 8000644:	e7a8      	b.n	8000598 <__udivmoddi4+0x1e8>
 8000646:	4631      	mov	r1, r6
 8000648:	e7ed      	b.n	8000626 <__udivmoddi4+0x276>
 800064a:	4603      	mov	r3, r0
 800064c:	e799      	b.n	8000582 <__udivmoddi4+0x1d2>
 800064e:	4630      	mov	r0, r6
 8000650:	e7d4      	b.n	80005fc <__udivmoddi4+0x24c>
 8000652:	46d6      	mov	lr, sl
 8000654:	e77f      	b.n	8000556 <__udivmoddi4+0x1a6>
 8000656:	4463      	add	r3, ip
 8000658:	3802      	subs	r0, #2
 800065a:	e74d      	b.n	80004f8 <__udivmoddi4+0x148>
 800065c:	4606      	mov	r6, r0
 800065e:	4623      	mov	r3, r4
 8000660:	4608      	mov	r0, r1
 8000662:	e70f      	b.n	8000484 <__udivmoddi4+0xd4>
 8000664:	3e02      	subs	r6, #2
 8000666:	4463      	add	r3, ip
 8000668:	e730      	b.n	80004cc <__udivmoddi4+0x11c>
 800066a:	bf00      	nop

0800066c <__aeabi_idiv0>:
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop

08000670 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000674:	4b49      	ldr	r3, [pc, #292]	@ (800079c <SystemInit+0x12c>)
 8000676:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800067a:	4a48      	ldr	r2, [pc, #288]	@ (800079c <SystemInit+0x12c>)
 800067c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000680:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000684:	4b45      	ldr	r3, [pc, #276]	@ (800079c <SystemInit+0x12c>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a44      	ldr	r2, [pc, #272]	@ (800079c <SystemInit+0x12c>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000690:	4b43      	ldr	r3, [pc, #268]	@ (80007a0 <SystemInit+0x130>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f003 030f 	and.w	r3, r3, #15
 8000698:	2b06      	cmp	r3, #6
 800069a:	d807      	bhi.n	80006ac <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800069c:	4b40      	ldr	r3, [pc, #256]	@ (80007a0 <SystemInit+0x130>)
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	f023 030f 	bic.w	r3, r3, #15
 80006a4:	4a3e      	ldr	r2, [pc, #248]	@ (80007a0 <SystemInit+0x130>)
 80006a6:	f043 0307 	orr.w	r3, r3, #7
 80006aa:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006ac:	4b3d      	ldr	r3, [pc, #244]	@ (80007a4 <SystemInit+0x134>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	4a3c      	ldr	r2, [pc, #240]	@ (80007a4 <SystemInit+0x134>)
 80006b2:	f043 0301 	orr.w	r3, r3, #1
 80006b6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006b8:	4b3a      	ldr	r3, [pc, #232]	@ (80007a4 <SystemInit+0x134>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006be:	4b39      	ldr	r3, [pc, #228]	@ (80007a4 <SystemInit+0x134>)
 80006c0:	681a      	ldr	r2, [r3, #0]
 80006c2:	4938      	ldr	r1, [pc, #224]	@ (80007a4 <SystemInit+0x134>)
 80006c4:	4b38      	ldr	r3, [pc, #224]	@ (80007a8 <SystemInit+0x138>)
 80006c6:	4013      	ands	r3, r2
 80006c8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ca:	4b35      	ldr	r3, [pc, #212]	@ (80007a0 <SystemInit+0x130>)
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	f003 0308 	and.w	r3, r3, #8
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d007      	beq.n	80006e6 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d6:	4b32      	ldr	r3, [pc, #200]	@ (80007a0 <SystemInit+0x130>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	f023 030f 	bic.w	r3, r3, #15
 80006de:	4a30      	ldr	r2, [pc, #192]	@ (80007a0 <SystemInit+0x130>)
 80006e0:	f043 0307 	orr.w	r3, r3, #7
 80006e4:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006e6:	4b2f      	ldr	r3, [pc, #188]	@ (80007a4 <SystemInit+0x134>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80006ec:	4b2d      	ldr	r3, [pc, #180]	@ (80007a4 <SystemInit+0x134>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80006f2:	4b2c      	ldr	r3, [pc, #176]	@ (80007a4 <SystemInit+0x134>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80006f8:	4b2a      	ldr	r3, [pc, #168]	@ (80007a4 <SystemInit+0x134>)
 80006fa:	4a2c      	ldr	r2, [pc, #176]	@ (80007ac <SystemInit+0x13c>)
 80006fc:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80006fe:	4b29      	ldr	r3, [pc, #164]	@ (80007a4 <SystemInit+0x134>)
 8000700:	4a2b      	ldr	r2, [pc, #172]	@ (80007b0 <SystemInit+0x140>)
 8000702:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000704:	4b27      	ldr	r3, [pc, #156]	@ (80007a4 <SystemInit+0x134>)
 8000706:	4a2b      	ldr	r2, [pc, #172]	@ (80007b4 <SystemInit+0x144>)
 8000708:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800070a:	4b26      	ldr	r3, [pc, #152]	@ (80007a4 <SystemInit+0x134>)
 800070c:	2200      	movs	r2, #0
 800070e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000710:	4b24      	ldr	r3, [pc, #144]	@ (80007a4 <SystemInit+0x134>)
 8000712:	4a28      	ldr	r2, [pc, #160]	@ (80007b4 <SystemInit+0x144>)
 8000714:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000716:	4b23      	ldr	r3, [pc, #140]	@ (80007a4 <SystemInit+0x134>)
 8000718:	2200      	movs	r2, #0
 800071a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800071c:	4b21      	ldr	r3, [pc, #132]	@ (80007a4 <SystemInit+0x134>)
 800071e:	4a25      	ldr	r2, [pc, #148]	@ (80007b4 <SystemInit+0x144>)
 8000720:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000722:	4b20      	ldr	r3, [pc, #128]	@ (80007a4 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000728:	4b1e      	ldr	r3, [pc, #120]	@ (80007a4 <SystemInit+0x134>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a1d      	ldr	r2, [pc, #116]	@ (80007a4 <SystemInit+0x134>)
 800072e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000732:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000734:	4b1b      	ldr	r3, [pc, #108]	@ (80007a4 <SystemInit+0x134>)
 8000736:	2200      	movs	r2, #0
 8000738:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800073a:	4b1f      	ldr	r3, [pc, #124]	@ (80007b8 <SystemInit+0x148>)
 800073c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800073e:	4a1e      	ldr	r2, [pc, #120]	@ (80007b8 <SystemInit+0x148>)
 8000740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000744:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000746:	4b1d      	ldr	r3, [pc, #116]	@ (80007bc <SystemInit+0x14c>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <SystemInit+0x150>)
 800074c:	4013      	ands	r3, r2
 800074e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000752:	d202      	bcs.n	800075a <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000754:	4b1b      	ldr	r3, [pc, #108]	@ (80007c4 <SystemInit+0x154>)
 8000756:	2201      	movs	r2, #1
 8000758:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 800075a:	4b12      	ldr	r3, [pc, #72]	@ (80007a4 <SystemInit+0x134>)
 800075c:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000760:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000764:	2b00      	cmp	r3, #0
 8000766:	d113      	bne.n	8000790 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000768:	4b0e      	ldr	r3, [pc, #56]	@ (80007a4 <SystemInit+0x134>)
 800076a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800076e:	4a0d      	ldr	r2, [pc, #52]	@ (80007a4 <SystemInit+0x134>)
 8000770:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000774:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000778:	4b13      	ldr	r3, [pc, #76]	@ (80007c8 <SystemInit+0x158>)
 800077a:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800077e:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000780:	4b08      	ldr	r3, [pc, #32]	@ (80007a4 <SystemInit+0x134>)
 8000782:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000786:	4a07      	ldr	r2, [pc, #28]	@ (80007a4 <SystemInit+0x134>)
 8000788:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800078c:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000ed00 	.word	0xe000ed00
 80007a0:	52002000 	.word	0x52002000
 80007a4:	58024400 	.word	0x58024400
 80007a8:	eaf6ed7f 	.word	0xeaf6ed7f
 80007ac:	02020200 	.word	0x02020200
 80007b0:	01ff0000 	.word	0x01ff0000
 80007b4:	01010280 	.word	0x01010280
 80007b8:	580000c0 	.word	0x580000c0
 80007bc:	5c001000 	.word	0x5c001000
 80007c0:	ffff0000 	.word	0xffff0000
 80007c4:	51008108 	.word	0x51008108
 80007c8:	52004000 	.word	0x52004000

080007cc <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80007d0:	4b09      	ldr	r3, [pc, #36]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d2:	68db      	ldr	r3, [r3, #12]
 80007d4:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007d6:	f023 0302 	bic.w	r3, r3, #2
 80007da:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007dc:	bf00      	nop
 80007de:	4b06      	ldr	r3, [pc, #24]	@ (80007f8 <ExitRun0Mode+0x2c>)
 80007e0:	685b      	ldr	r3, [r3, #4]
 80007e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007e6:	2b00      	cmp	r3, #0
 80007e8:	d0f9      	beq.n	80007de <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	46bd      	mov	sp, r7
 80007f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f4:	4770      	bx	lr
 80007f6:	bf00      	nop
 80007f8:	58024800 	.word	0x58024800

080007fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000802:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000806:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000808:	bf00      	nop
 800080a:	4b42      	ldr	r3, [pc, #264]	@ (8000914 <main+0x118>)
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000812:	2b00      	cmp	r3, #0
 8000814:	d004      	beq.n	8000820 <main+0x24>
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	1e5a      	subs	r2, r3, #1
 800081a:	607a      	str	r2, [r7, #4]
 800081c:	2b00      	cmp	r3, #0
 800081e:	dcf4      	bgt.n	800080a <main+0xe>
  if ( timeout < 0 )
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b00      	cmp	r3, #0
 8000824:	da01      	bge.n	800082a <main+0x2e>
  {
  Error_Handler();
 8000826:	f000 f9ff 	bl	8000c28 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800082a:	f000 fddd 	bl	80013e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800082e:	f000 f879 	bl	8000924 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000832:	4b38      	ldr	r3, [pc, #224]	@ (8000914 <main+0x118>)
 8000834:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000838:	4a36      	ldr	r2, [pc, #216]	@ (8000914 <main+0x118>)
 800083a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800083e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000842:	4b34      	ldr	r3, [pc, #208]	@ (8000914 <main+0x118>)
 8000844:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000848:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800084c:	603b      	str	r3, [r7, #0]
 800084e:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000850:	2000      	movs	r0, #0
 8000852:	f001 f9df 	bl	8001c14 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000856:	2100      	movs	r1, #0
 8000858:	2000      	movs	r0, #0
 800085a:	f001 f9f5 	bl	8001c48 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800085e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000862:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000864:	bf00      	nop
 8000866:	4b2b      	ldr	r3, [pc, #172]	@ (8000914 <main+0x118>)
 8000868:	681b      	ldr	r3, [r3, #0]
 800086a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800086e:	2b00      	cmp	r3, #0
 8000870:	d104      	bne.n	800087c <main+0x80>
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	1e5a      	subs	r2, r3, #1
 8000876:	607a      	str	r2, [r7, #4]
 8000878:	2b00      	cmp	r3, #0
 800087a:	dcf4      	bgt.n	8000866 <main+0x6a>
if ( timeout < 0 )
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2b00      	cmp	r3, #0
 8000880:	da01      	bge.n	8000886 <main+0x8a>
{
Error_Handler();
 8000882:	f000 f9d1 	bl	8000c28 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000886:	f000 f903 	bl	8000a90 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800088a:	f000 f8b5 	bl	80009f8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 800088e:	2000      	movs	r0, #0
 8000890:	f000 fb7e 	bl	8000f90 <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000894:	2001      	movs	r0, #1
 8000896:	f000 fb7b 	bl	8000f90 <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800089a:	2002      	movs	r0, #2
 800089c:	f000 fb78 	bl	8000f90 <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80008a0:	2101      	movs	r1, #1
 80008a2:	2000      	movs	r0, #0
 80008a4:	f000 fc3e 	bl	8001124 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000918 <main+0x11c>)
 80008aa:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ae:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008b0:	4b19      	ldr	r3, [pc, #100]	@ (8000918 <main+0x11c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008b6:	4b18      	ldr	r3, [pc, #96]	@ (8000918 <main+0x11c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008bc:	4b16      	ldr	r3, [pc, #88]	@ (8000918 <main+0x11c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008c2:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <main+0x11c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80008c8:	4913      	ldr	r1, [pc, #76]	@ (8000918 <main+0x11c>)
 80008ca:	2000      	movs	r0, #0
 80008cc:	f000 fcae 	bl	800122c <BSP_COM_Init>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <main+0xde>
  {
    Error_Handler();
 80008d6:	f000 f9a7 	bl	8000c28 <Error_Handler>
  }

  /* USER CODE BEGIN BSP */
  /* -- Sample board code to send message over COM1 port ---- */
  printf("Welcome to STM32 world !\n\r");
 80008da:	4810      	ldr	r0, [pc, #64]	@ (800091c <main+0x120>)
 80008dc:	f005 fa60 	bl	8005da0 <iprintf>
  /* -- Sample board code to switch on leds ---- */
  BSP_LED_On(LED_GREEN);
 80008e0:	2000      	movs	r0, #0
 80008e2:	f000 fbcb 	bl	800107c <BSP_LED_On>
  BSP_LED_On(LED_YELLOW);
 80008e6:	2001      	movs	r0, #1
 80008e8:	f000 fbc8 	bl	800107c <BSP_LED_On>
  BSP_LED_On(LED_RED);
 80008ec:	2002      	movs	r0, #2
 80008ee:	f000 fbc5 	bl	800107c <BSP_LED_On>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

    /* -- Sample board code for User push-button in interrupt mode ---- */
    if (BspButtonState == BUTTON_PRESSED)
 80008f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000920 <main+0x124>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	2b01      	cmp	r3, #1
 80008f8:	d1fb      	bne.n	80008f2 <main+0xf6>
    {
      /* Update button state */
      BspButtonState = BUTTON_RELEASED;
 80008fa:	4b09      	ldr	r3, [pc, #36]	@ (8000920 <main+0x124>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
      /* -- Sample board code to toggle leds ---- */
      BSP_LED_Toggle(LED_GREEN);
 8000900:	2000      	movs	r0, #0
 8000902:	f000 fbe5 	bl	80010d0 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_YELLOW);
 8000906:	2001      	movs	r0, #1
 8000908:	f000 fbe2 	bl	80010d0 <BSP_LED_Toggle>
      BSP_LED_Toggle(LED_RED);
 800090c:	2002      	movs	r0, #2
 800090e:	f000 fbdf 	bl	80010d0 <BSP_LED_Toggle>
    if (BspButtonState == BUTTON_PRESSED)
 8000912:	e7ee      	b.n	80008f2 <main+0xf6>
 8000914:	58024400 	.word	0x58024400
 8000918:	240000a4 	.word	0x240000a4
 800091c:	08006a90 	.word	0x08006a90
 8000920:	240000b4 	.word	0x240000b4

08000924 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b09c      	sub	sp, #112	@ 0x70
 8000928:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800092e:	224c      	movs	r2, #76	@ 0x4c
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f005 fa46 	bl	8005dc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000938:	1d3b      	adds	r3, r7, #4
 800093a:	2220      	movs	r2, #32
 800093c:	2100      	movs	r1, #0
 800093e:	4618      	mov	r0, r3
 8000940:	f005 fa40 	bl	8005dc4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000944:	2004      	movs	r0, #4
 8000946:	f001 f993 	bl	8001c70 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800094a:	2300      	movs	r3, #0
 800094c:	603b      	str	r3, [r7, #0]
 800094e:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <SystemClock_Config+0xcc>)
 8000950:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000952:	4a27      	ldr	r2, [pc, #156]	@ (80009f0 <SystemClock_Config+0xcc>)
 8000954:	f023 0301 	bic.w	r3, r3, #1
 8000958:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800095a:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <SystemClock_Config+0xcc>)
 800095c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	603b      	str	r3, [r7, #0]
 8000964:	4b23      	ldr	r3, [pc, #140]	@ (80009f4 <SystemClock_Config+0xd0>)
 8000966:	699b      	ldr	r3, [r3, #24]
 8000968:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800096c:	4a21      	ldr	r2, [pc, #132]	@ (80009f4 <SystemClock_Config+0xd0>)
 800096e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b1f      	ldr	r3, [pc, #124]	@ (80009f4 <SystemClock_Config+0xd0>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000980:	bf00      	nop
 8000982:	4b1c      	ldr	r3, [pc, #112]	@ (80009f4 <SystemClock_Config+0xd0>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800098a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800098e:	d1f8      	bne.n	8000982 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000990:	2302      	movs	r3, #2
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000994:	2301      	movs	r3, #1
 8000996:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	2340      	movs	r3, #64	@ 0x40
 800099a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800099c:	2300      	movs	r3, #0
 800099e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009a0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009a4:	4618      	mov	r0, r3
 80009a6:	f001 f9bd 	bl	8001d24 <HAL_RCC_OscConfig>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009b0:	f000 f93a 	bl	8000c28 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009b4:	233f      	movs	r3, #63	@ 0x3f
 80009b6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009b8:	2300      	movs	r3, #0
 80009ba:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009bc:	2300      	movs	r3, #0
 80009be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009c0:	2300      	movs	r3, #0
 80009c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009c4:	2300      	movs	r3, #0
 80009c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009c8:	2340      	movs	r3, #64	@ 0x40
 80009ca:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009d4:	1d3b      	adds	r3, r7, #4
 80009d6:	2101      	movs	r1, #1
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fdfd 	bl	80025d8 <HAL_RCC_ClockConfig>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80009e4:	f000 f920 	bl	8000c28 <Error_Handler>
  }
}
 80009e8:	bf00      	nop
 80009ea:	3770      	adds	r7, #112	@ 0x70
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	58000400 	.word	0x58000400
 80009f4:	58024800 	.word	0x58024800

080009f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009fc:	4b22      	ldr	r3, [pc, #136]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 80009fe:	4a23      	ldr	r2, [pc, #140]	@ (8000a8c <MX_USART2_UART_Init+0x94>)
 8000a00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a02:	4b21      	ldr	r3, [pc, #132]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b1f      	ldr	r3, [pc, #124]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b1d      	ldr	r3, [pc, #116]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b1c      	ldr	r3, [pc, #112]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b1a      	ldr	r3, [pc, #104]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b19      	ldr	r3, [pc, #100]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b17      	ldr	r3, [pc, #92]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b16      	ldr	r3, [pc, #88]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a34:	4b14      	ldr	r3, [pc, #80]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3a:	4b13      	ldr	r3, [pc, #76]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a40:	4811      	ldr	r0, [pc, #68]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a42:	f003 ff81 	bl	8004948 <HAL_UART_Init>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000a4c:	f000 f8ec 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a50:	2100      	movs	r1, #0
 8000a52:	480d      	ldr	r0, [pc, #52]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a54:	f005 f817 	bl	8005a86 <HAL_UARTEx_SetTxFifoThreshold>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	d001      	beq.n	8000a62 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000a5e:	f000 f8e3 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a62:	2100      	movs	r1, #0
 8000a64:	4808      	ldr	r0, [pc, #32]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a66:	f005 f84c 	bl	8005b02 <HAL_UARTEx_SetRxFifoThreshold>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000a70:	f000 f8da 	bl	8000c28 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000a74:	4804      	ldr	r0, [pc, #16]	@ (8000a88 <MX_USART2_UART_Init+0x90>)
 8000a76:	f004 ffcd 	bl	8005a14 <HAL_UARTEx_DisableFifoMode>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d001      	beq.n	8000a84 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000a80:	f000 f8d2 	bl	8000c28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	240000b8 	.word	0x240000b8
 8000a8c:	40004400 	.word	0x40004400

08000a90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b08a      	sub	sp, #40	@ 0x28
 8000a94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a96:	f107 0314 	add.w	r3, r7, #20
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
 8000a9e:	605a      	str	r2, [r3, #4]
 8000aa0:	609a      	str	r2, [r3, #8]
 8000aa2:	60da      	str	r2, [r3, #12]
 8000aa4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000aa6:	4b51      	ldr	r3, [pc, #324]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000aa8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aac:	4a4f      	ldr	r2, [pc, #316]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000aae:	f043 0304 	orr.w	r3, r3, #4
 8000ab2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab6:	4b4d      	ldr	r3, [pc, #308]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000ab8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000abc:	f003 0304 	and.w	r3, r3, #4
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac4:	4b49      	ldr	r3, [pc, #292]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000ac6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aca:	4a48      	ldr	r2, [pc, #288]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000acc:	f043 0301 	orr.w	r3, r3, #1
 8000ad0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad4:	4b45      	ldr	r3, [pc, #276]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000ad6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ada:	f003 0301 	and.w	r3, r3, #1
 8000ade:	60fb      	str	r3, [r7, #12]
 8000ae0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae2:	4b42      	ldr	r3, [pc, #264]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000ae4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ae8:	4a40      	ldr	r2, [pc, #256]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000aea:	f043 0302 	orr.w	r3, r3, #2
 8000aee:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000af2:	4b3e      	ldr	r3, [pc, #248]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000af4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000af8:	f003 0302 	and.w	r3, r3, #2
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b00:	4b3a      	ldr	r3, [pc, #232]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000b02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b06:	4a39      	ldr	r2, [pc, #228]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000b08:	f043 0308 	orr.w	r3, r3, #8
 8000b0c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b10:	4b36      	ldr	r3, [pc, #216]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000b12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b16:	f003 0308 	and.w	r3, r3, #8
 8000b1a:	607b      	str	r3, [r7, #4]
 8000b1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b1e:	4b33      	ldr	r3, [pc, #204]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000b20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b24:	4a31      	ldr	r2, [pc, #196]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000b26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000bec <MX_GPIO_Init+0x15c>)
 8000b30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b38:	603b      	str	r3, [r7, #0]
 8000b3a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000b3c:	2332      	movs	r3, #50	@ 0x32
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b40:	2302      	movs	r3, #2
 8000b42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b44:	2300      	movs	r3, #0
 8000b46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b4c:	230b      	movs	r3, #11
 8000b4e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b50:	f107 0314 	add.w	r3, r7, #20
 8000b54:	4619      	mov	r1, r3
 8000b56:	4826      	ldr	r0, [pc, #152]	@ (8000bf0 <MX_GPIO_Init+0x160>)
 8000b58:	f000 fe78 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000b5c:	2386      	movs	r3, #134	@ 0x86
 8000b5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b60:	2302      	movs	r3, #2
 8000b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b6c:	230b      	movs	r3, #11
 8000b6e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	4619      	mov	r1, r3
 8000b76:	481f      	ldr	r0, [pc, #124]	@ (8000bf4 <MX_GPIO_Init+0x164>)
 8000b78:	f000 fe68 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b80:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000b8e:	230b      	movs	r3, #11
 8000b90:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	4817      	ldr	r0, [pc, #92]	@ (8000bf8 <MX_GPIO_Init+0x168>)
 8000b9a:	f000 fe57 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000b9e:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000ba2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba4:	2302      	movs	r3, #2
 8000ba6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bac:	2300      	movs	r3, #0
 8000bae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000bb0:	230a      	movs	r3, #10
 8000bb2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	4619      	mov	r1, r3
 8000bba:	480e      	ldr	r0, [pc, #56]	@ (8000bf4 <MX_GPIO_Init+0x164>)
 8000bbc:	f000 fe46 	bl	800184c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000bc0:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000bc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000bd2:	230b      	movs	r3, #11
 8000bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4807      	ldr	r0, [pc, #28]	@ (8000bfc <MX_GPIO_Init+0x16c>)
 8000bde:	f000 fe35 	bl	800184c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	58024400 	.word	0x58024400
 8000bf0:	58020800 	.word	0x58020800
 8000bf4:	58020000 	.word	0x58020000
 8000bf8:	58020400 	.word	0x58020400
 8000bfc:	58021800 	.word	0x58021800

08000c00 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pressed button
  * @retval None
  */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	71fb      	strb	r3, [r7, #7]
  if (Button == BUTTON_USER)
 8000c0a:	79fb      	ldrb	r3, [r7, #7]
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d102      	bne.n	8000c16 <BSP_PB_Callback+0x16>
  {
    BspButtonState = BUTTON_PRESSED;
 8000c10:	4b04      	ldr	r3, [pc, #16]	@ (8000c24 <BSP_PB_Callback+0x24>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	601a      	str	r2, [r3, #0]
  }
}
 8000c16:	bf00      	nop
 8000c18:	370c      	adds	r7, #12
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr
 8000c22:	bf00      	nop
 8000c24:	240000b4 	.word	0x240000b4

08000c28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c2c:	b672      	cpsid	i
}
 8000c2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <Error_Handler+0x8>

08000c34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c3a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c64 <HAL_MspInit+0x30>)
 8000c3c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c40:	4a08      	ldr	r2, [pc, #32]	@ (8000c64 <HAL_MspInit+0x30>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c4a:	4b06      	ldr	r3, [pc, #24]	@ (8000c64 <HAL_MspInit+0x30>)
 8000c4c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c50:	f003 0302 	and.w	r3, r3, #2
 8000c54:	607b      	str	r3, [r7, #4]
 8000c56:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	58024400 	.word	0x58024400

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b0bc      	sub	sp, #240	@ 0xf0
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c80:	f107 0318 	add.w	r3, r7, #24
 8000c84:	22c0      	movs	r2, #192	@ 0xc0
 8000c86:	2100      	movs	r1, #0
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f005 f89b 	bl	8005dc4 <memset>
  if(huart->Instance==USART2)
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a38      	ldr	r2, [pc, #224]	@ (8000d74 <HAL_UART_MspInit+0x10c>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d169      	bne.n	8000d6c <HAL_UART_MspInit+0x104>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000c98:	f04f 0202 	mov.w	r2, #2
 8000c9c:	f04f 0300 	mov.w	r3, #0
 8000ca0:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000caa:	f107 0318 	add.w	r3, r7, #24
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f002 f81e 	bl	8002cf0 <HAL_RCCEx_PeriphCLKConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000cba:	f7ff ffb5 	bl	8000c28 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cbe:	4b2e      	ldr	r3, [pc, #184]	@ (8000d78 <HAL_UART_MspInit+0x110>)
 8000cc0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cc4:	4a2c      	ldr	r2, [pc, #176]	@ (8000d78 <HAL_UART_MspInit+0x110>)
 8000cc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cca:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000cce:	4b2a      	ldr	r3, [pc, #168]	@ (8000d78 <HAL_UART_MspInit+0x110>)
 8000cd0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b26      	ldr	r3, [pc, #152]	@ (8000d78 <HAL_UART_MspInit+0x110>)
 8000cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce2:	4a25      	ldr	r2, [pc, #148]	@ (8000d78 <HAL_UART_MspInit+0x110>)
 8000ce4:	f043 0301 	orr.w	r3, r3, #1
 8000ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cec:	4b22      	ldr	r3, [pc, #136]	@ (8000d78 <HAL_UART_MspInit+0x110>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	f003 0301 	and.w	r3, r3, #1
 8000cf6:	613b      	str	r3, [r7, #16]
 8000cf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8000d78 <HAL_UART_MspInit+0x110>)
 8000cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d00:	4a1d      	ldr	r2, [pc, #116]	@ (8000d78 <HAL_UART_MspInit+0x110>)
 8000d02:	f043 0308 	orr.w	r3, r3, #8
 8000d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d0a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d78 <HAL_UART_MspInit+0x110>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	f003 0308 	and.w	r3, r3, #8
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PD5     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d18:	2308      	movs	r3, #8
 8000d1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d24:	2300      	movs	r3, #0
 8000d26:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d30:	2307      	movs	r3, #7
 8000d32:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d36:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	480f      	ldr	r0, [pc, #60]	@ (8000d7c <HAL_UART_MspInit+0x114>)
 8000d3e:	f000 fd85 	bl	800184c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d42:	2320      	movs	r3, #32
 8000d44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2300      	movs	r3, #0
 8000d56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d5a:	2307      	movs	r3, #7
 8000d5c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d60:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d64:	4619      	mov	r1, r3
 8000d66:	4806      	ldr	r0, [pc, #24]	@ (8000d80 <HAL_UART_MspInit+0x118>)
 8000d68:	f000 fd70 	bl	800184c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d6c:	bf00      	nop
 8000d6e:	37f0      	adds	r7, #240	@ 0xf0
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40004400 	.word	0x40004400
 8000d78:	58024400 	.word	0x58024400
 8000d7c:	58020000 	.word	0x58020000
 8000d80:	58020c00 	.word	0x58020c00

08000d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d88:	bf00      	nop
 8000d8a:	e7fd      	b.n	8000d88 <NMI_Handler+0x4>

08000d8c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d90:	bf00      	nop
 8000d92:	e7fd      	b.n	8000d90 <HardFault_Handler+0x4>

08000d94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <MemManage_Handler+0x4>

08000d9c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <BusFault_Handler+0x4>

08000da4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000da8:	bf00      	nop
 8000daa:	e7fd      	b.n	8000da8 <UsageFault_Handler+0x4>

08000dac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db0:	bf00      	nop
 8000db2:	46bd      	mov	sp, r7
 8000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db8:	4770      	bx	lr

08000dba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dba:	b480      	push	{r7}
 8000dbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dbe:	bf00      	nop
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dcc:	bf00      	nop
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd6:	b580      	push	{r7, lr}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dda:	f000 fb77 	bl	80014cc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dde:	bf00      	nop
 8000de0:	bd80      	pop	{r7, pc}

08000de2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000de2:	b580      	push	{r7, lr}
 8000de4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 8000de6:	2000      	movs	r0, #0
 8000de8:	f000 fa0e 	bl	8001208 <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b086      	sub	sp, #24
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	60f8      	str	r0, [r7, #12]
 8000df8:	60b9      	str	r1, [r7, #8]
 8000dfa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	617b      	str	r3, [r7, #20]
 8000e00:	e00a      	b.n	8000e18 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e02:	f3af 8000 	nop.w
 8000e06:	4601      	mov	r1, r0
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	1c5a      	adds	r2, r3, #1
 8000e0c:	60ba      	str	r2, [r7, #8]
 8000e0e:	b2ca      	uxtb	r2, r1
 8000e10:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	3301      	adds	r3, #1
 8000e16:	617b      	str	r3, [r7, #20]
 8000e18:	697a      	ldr	r2, [r7, #20]
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	dbf0      	blt.n	8000e02 <_read+0x12>
  }

  return len;
 8000e20:	687b      	ldr	r3, [r7, #4]
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b086      	sub	sp, #24
 8000e2e:	af00      	add	r7, sp, #0
 8000e30:	60f8      	str	r0, [r7, #12]
 8000e32:	60b9      	str	r1, [r7, #8]
 8000e34:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]
 8000e3a:	e009      	b.n	8000e50 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	60ba      	str	r2, [r7, #8]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	4618      	mov	r0, r3
 8000e46:	f000 fa53 	bl	80012f0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	617b      	str	r3, [r7, #20]
 8000e50:	697a      	ldr	r2, [r7, #20]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	dbf1      	blt.n	8000e3c <_write+0x12>
  }
  return len;
 8000e58:	687b      	ldr	r3, [r7, #4]
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3718      	adds	r7, #24
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <_close>:

int _close(int file)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e6a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	370c      	adds	r7, #12
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr

08000e7a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	b083      	sub	sp, #12
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
 8000e82:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e8a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	370c      	adds	r7, #12
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <_isatty>:

int _isatty(int file)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	b083      	sub	sp, #12
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea2:	2301      	movs	r3, #1
}
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr

08000eb0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	60f8      	str	r0, [r7, #12]
 8000eb8:	60b9      	str	r1, [r7, #8]
 8000eba:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ebc:	2300      	movs	r3, #0
}
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	3714      	adds	r7, #20
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
	...

08000ecc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b086      	sub	sp, #24
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed4:	4a14      	ldr	r2, [pc, #80]	@ (8000f28 <_sbrk+0x5c>)
 8000ed6:	4b15      	ldr	r3, [pc, #84]	@ (8000f2c <_sbrk+0x60>)
 8000ed8:	1ad3      	subs	r3, r2, r3
 8000eda:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee0:	4b13      	ldr	r3, [pc, #76]	@ (8000f30 <_sbrk+0x64>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d102      	bne.n	8000eee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ee8:	4b11      	ldr	r3, [pc, #68]	@ (8000f30 <_sbrk+0x64>)
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <_sbrk+0x68>)
 8000eec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eee:	4b10      	ldr	r3, [pc, #64]	@ (8000f30 <_sbrk+0x64>)
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4413      	add	r3, r2
 8000ef6:	693a      	ldr	r2, [r7, #16]
 8000ef8:	429a      	cmp	r2, r3
 8000efa:	d207      	bcs.n	8000f0c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000efc:	f004 ff6a 	bl	8005dd4 <__errno>
 8000f00:	4603      	mov	r3, r0
 8000f02:	220c      	movs	r2, #12
 8000f04:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f06:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f0a:	e009      	b.n	8000f20 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <_sbrk+0x64>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f12:	4b07      	ldr	r3, [pc, #28]	@ (8000f30 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	4a05      	ldr	r2, [pc, #20]	@ (8000f30 <_sbrk+0x64>)
 8000f1c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f1e:	68fb      	ldr	r3, [r7, #12]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	24080000 	.word	0x24080000
 8000f2c:	00000400 	.word	0x00000400
 8000f30:	2400014c 	.word	0x2400014c
 8000f34:	24000340 	.word	0x24000340

08000f38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f74 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f3c:	f7ff fc46 	bl	80007cc <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f40:	f7ff fb96 	bl	8000670 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	@ (8000f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	@ (8000f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	@ (8000f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f004 ff39 	bl	8005de0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fc45 	bl	80007fc <main>
  bx  lr
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f7c:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8000f80:	08006b34 	.word	0x08006b34
  ldr r2, =_sbss
 8000f84:	24000088 	.word	0x24000088
  ldr r4, =_ebss
 8000f88:	24000340 	.word	0x24000340

08000f8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC3_IRQHandler>
	...

08000f90 <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b08c      	sub	sp, #48	@ 0x30
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	4603      	mov	r3, r0
 8000f98:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000f9e:	79fb      	ldrb	r3, [r7, #7]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d009      	beq.n	8000fb8 <BSP_LED_Init+0x28>
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d006      	beq.n	8000fb8 <BSP_LED_Init+0x28>
 8000faa:	79fb      	ldrb	r3, [r7, #7]
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d003      	beq.n	8000fb8 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000fb0:	f06f 0301 	mvn.w	r3, #1
 8000fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000fb6:	e055      	b.n	8001064 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000fb8:	79fb      	ldrb	r3, [r7, #7]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10f      	bne.n	8000fde <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000fbe:	4b2c      	ldr	r3, [pc, #176]	@ (8001070 <BSP_LED_Init+0xe0>)
 8000fc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8001070 <BSP_LED_Init+0xe0>)
 8000fc6:	f043 0302 	orr.w	r3, r3, #2
 8000fca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000fce:	4b28      	ldr	r3, [pc, #160]	@ (8001070 <BSP_LED_Init+0xe0>)
 8000fd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fd4:	f003 0302 	and.w	r3, r3, #2
 8000fd8:	617b      	str	r3, [r7, #20]
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	e021      	b.n	8001022 <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000fde:	79fb      	ldrb	r3, [r7, #7]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d10f      	bne.n	8001004 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000fe4:	4b22      	ldr	r3, [pc, #136]	@ (8001070 <BSP_LED_Init+0xe0>)
 8000fe6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000fea:	4a21      	ldr	r2, [pc, #132]	@ (8001070 <BSP_LED_Init+0xe0>)
 8000fec:	f043 0310 	orr.w	r3, r3, #16
 8000ff0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8001070 <BSP_LED_Init+0xe0>)
 8000ff6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ffa:	f003 0310 	and.w	r3, r3, #16
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	693b      	ldr	r3, [r7, #16]
 8001002:	e00e      	b.n	8001022 <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8001004:	4b1a      	ldr	r3, [pc, #104]	@ (8001070 <BSP_LED_Init+0xe0>)
 8001006:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800100a:	4a19      	ldr	r2, [pc, #100]	@ (8001070 <BSP_LED_Init+0xe0>)
 800100c:	f043 0302 	orr.w	r3, r3, #2
 8001010:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001014:	4b16      	ldr	r3, [pc, #88]	@ (8001070 <BSP_LED_Init+0xe0>)
 8001016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8001022:	79fb      	ldrb	r3, [r7, #7]
 8001024:	4a13      	ldr	r2, [pc, #76]	@ (8001074 <BSP_LED_Init+0xe4>)
 8001026:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800102a:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800102c:	2301      	movs	r3, #1
 800102e:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8001030:	2300      	movs	r3, #0
 8001032:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001034:	2303      	movs	r3, #3
 8001036:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8001038:	79fb      	ldrb	r3, [r7, #7]
 800103a:	4a0f      	ldr	r2, [pc, #60]	@ (8001078 <BSP_LED_Init+0xe8>)
 800103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001040:	f107 0218 	add.w	r2, r7, #24
 8001044:	4611      	mov	r1, r2
 8001046:	4618      	mov	r0, r3
 8001048:	f000 fc00 	bl	800184c <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	4a0a      	ldr	r2, [pc, #40]	@ (8001078 <BSP_LED_Init+0xe8>)
 8001050:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001054:	79fb      	ldrb	r3, [r7, #7]
 8001056:	4a07      	ldr	r2, [pc, #28]	@ (8001074 <BSP_LED_Init+0xe4>)
 8001058:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800105c:	2200      	movs	r2, #0
 800105e:	4619      	mov	r1, r3
 8001060:	f000 fda4 	bl	8001bac <HAL_GPIO_WritePin>
  }

  return ret;
 8001064:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001066:	4618      	mov	r0, r3
 8001068:	3730      	adds	r7, #48	@ 0x30
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	58024400 	.word	0x58024400
 8001074:	08006abc 	.word	0x08006abc
 8001078:	2400000c 	.word	0x2400000c

0800107c <BSP_LED_On>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	4603      	mov	r3, r0
 8001084:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001086:	2300      	movs	r3, #0
 8001088:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 800108a:	79fb      	ldrb	r3, [r7, #7]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d009      	beq.n	80010a4 <BSP_LED_On+0x28>
 8001090:	79fb      	ldrb	r3, [r7, #7]
 8001092:	2b01      	cmp	r3, #1
 8001094:	d006      	beq.n	80010a4 <BSP_LED_On+0x28>
 8001096:	79fb      	ldrb	r3, [r7, #7]
 8001098:	2b02      	cmp	r3, #2
 800109a:	d003      	beq.n	80010a4 <BSP_LED_On+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800109c:	f06f 0301 	mvn.w	r3, #1
 80010a0:	60fb      	str	r3, [r7, #12]
 80010a2:	e00b      	b.n	80010bc <BSP_LED_On+0x40>
  }
  else
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	4a08      	ldr	r2, [pc, #32]	@ (80010c8 <BSP_LED_On+0x4c>)
 80010a8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80010ac:	79fb      	ldrb	r3, [r7, #7]
 80010ae:	4a07      	ldr	r2, [pc, #28]	@ (80010cc <BSP_LED_On+0x50>)
 80010b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80010b4:	2201      	movs	r2, #1
 80010b6:	4619      	mov	r1, r3
 80010b8:	f000 fd78 	bl	8001bac <HAL_GPIO_WritePin>
  }

  return ret;
 80010bc:	68fb      	ldr	r3, [r7, #12]
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2400000c 	.word	0x2400000c
 80010cc:	08006abc 	.word	0x08006abc

080010d0 <BSP_LED_Toggle>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Toggle(Led_TypeDef Led)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b084      	sub	sp, #16
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	4603      	mov	r3, r0
 80010d8:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 80010de:	79fb      	ldrb	r3, [r7, #7]
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d009      	beq.n	80010f8 <BSP_LED_Toggle+0x28>
 80010e4:	79fb      	ldrb	r3, [r7, #7]
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d006      	beq.n	80010f8 <BSP_LED_Toggle+0x28>
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d003      	beq.n	80010f8 <BSP_LED_Toggle+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80010f0:	f06f 0301 	mvn.w	r3, #1
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	e00b      	b.n	8001110 <BSP_LED_Toggle+0x40>
  }
  else
  {
    HAL_GPIO_TogglePin(LED_PORT[Led], LED_PIN[Led]);
 80010f8:	79fb      	ldrb	r3, [r7, #7]
 80010fa:	4a08      	ldr	r2, [pc, #32]	@ (800111c <BSP_LED_Toggle+0x4c>)
 80010fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	4907      	ldr	r1, [pc, #28]	@ (8001120 <BSP_LED_Toggle+0x50>)
 8001104:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001108:	4619      	mov	r1, r3
 800110a:	4610      	mov	r0, r2
 800110c:	f000 fd67 	bl	8001bde <HAL_GPIO_TogglePin>
  }

  return ret;
 8001110:	68fb      	ldr	r3, [r7, #12]
}
 8001112:	4618      	mov	r0, r3
 8001114:	3710      	adds	r7, #16
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}
 800111a:	bf00      	nop
 800111c:	2400000c 	.word	0x2400000c
 8001120:	08006abc 	.word	0x08006abc

08001124 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b088      	sub	sp, #32
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	460a      	mov	r2, r1
 800112e:	71fb      	strb	r3, [r7, #7]
 8001130:	4613      	mov	r3, r2
 8001132:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8001134:	4b2e      	ldr	r3, [pc, #184]	@ (80011f0 <BSP_PB_Init+0xcc>)
 8001136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800113a:	4a2d      	ldr	r2, [pc, #180]	@ (80011f0 <BSP_PB_Init+0xcc>)
 800113c:	f043 0304 	orr.w	r3, r3, #4
 8001140:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001144:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <BSP_PB_Init+0xcc>)
 8001146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800114a:	f003 0304 	and.w	r3, r3, #4
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8001152:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001156:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8001158:	2302      	movs	r3, #2
 800115a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800115c:	2302      	movs	r3, #2
 800115e:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8001160:	79bb      	ldrb	r3, [r7, #6]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10c      	bne.n	8001180 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8001166:	2300      	movs	r3, #0
 8001168:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800116a:	79fb      	ldrb	r3, [r7, #7]
 800116c:	4a21      	ldr	r2, [pc, #132]	@ (80011f4 <BSP_PB_Init+0xd0>)
 800116e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001172:	f107 020c 	add.w	r2, r7, #12
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fb67 	bl	800184c <HAL_GPIO_Init>
 800117e:	e031      	b.n	80011e4 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8001180:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001184:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8001186:	79fb      	ldrb	r3, [r7, #7]
 8001188:	4a1a      	ldr	r2, [pc, #104]	@ (80011f4 <BSP_PB_Init+0xd0>)
 800118a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118e:	f107 020c 	add.w	r2, r7, #12
 8001192:	4611      	mov	r1, r2
 8001194:	4618      	mov	r0, r3
 8001196:	f000 fb59 	bl	800184c <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	00db      	lsls	r3, r3, #3
 800119e:	4a16      	ldr	r2, [pc, #88]	@ (80011f8 <BSP_PB_Init+0xd4>)
 80011a0:	441a      	add	r2, r3
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	4915      	ldr	r1, [pc, #84]	@ (80011fc <BSP_PB_Init+0xd8>)
 80011a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	f000 fafc 	bl	80017aa <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	00db      	lsls	r3, r3, #3
 80011b6:	4a10      	ldr	r2, [pc, #64]	@ (80011f8 <BSP_PB_Init+0xd4>)
 80011b8:	1898      	adds	r0, r3, r2
 80011ba:	79fb      	ldrb	r3, [r7, #7]
 80011bc:	4a10      	ldr	r2, [pc, #64]	@ (8001200 <BSP_PB_Init+0xdc>)
 80011be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011c2:	461a      	mov	r2, r3
 80011c4:	2100      	movs	r1, #0
 80011c6:	f000 fad1 	bl	800176c <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80011ca:	2028      	movs	r0, #40	@ 0x28
 80011cc:	79fb      	ldrb	r3, [r7, #7]
 80011ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <BSP_PB_Init+0xe0>)
 80011d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d4:	2200      	movs	r2, #0
 80011d6:	4619      	mov	r1, r3
 80011d8:	f000 fa7f 	bl	80016da <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 80011dc:	2328      	movs	r3, #40	@ 0x28
 80011de:	4618      	mov	r0, r3
 80011e0:	f000 fa95 	bl	800170e <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 80011e4:	2300      	movs	r3, #0
}
 80011e6:	4618      	mov	r0, r3
 80011e8:	3720      	adds	r7, #32
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	58024400 	.word	0x58024400
 80011f4:	24000018 	.word	0x24000018
 80011f8:	24000150 	.word	0x24000150
 80011fc:	08006ac4 	.word	0x08006ac4
 8001200:	2400001c 	.word	0x2400001c
 8001204:	24000020 	.word	0x24000020

08001208 <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	4603      	mov	r3, r0
 8001210:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8001212:	79fb      	ldrb	r3, [r7, #7]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4a04      	ldr	r2, [pc, #16]	@ (8001228 <BSP_PB_IRQHandler+0x20>)
 8001218:	4413      	add	r3, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fada 	bl	80017d4 <HAL_EXTI_IRQHandler>
}
 8001220:	bf00      	nop
 8001222:	3708      	adds	r7, #8
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}
 8001228:	24000150 	.word	0x24000150

0800122c <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	4603      	mov	r3, r0
 8001234:	6039      	str	r1, [r7, #0]
 8001236:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 800123c:	79fb      	ldrb	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d003      	beq.n	800124a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001242:	f06f 0301 	mvn.w	r3, #1
 8001246:	60fb      	str	r3, [r7, #12]
 8001248:	e018      	b.n	800127c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	2294      	movs	r2, #148	@ 0x94
 800124e:	fb02 f303 	mul.w	r3, r2, r3
 8001252:	4a0d      	ldr	r2, [pc, #52]	@ (8001288 <BSP_COM_Init+0x5c>)
 8001254:	4413      	add	r3, r2
 8001256:	4618      	mov	r0, r3
 8001258:	f000 f86e 	bl	8001338 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800125c:	79fb      	ldrb	r3, [r7, #7]
 800125e:	2294      	movs	r2, #148	@ 0x94
 8001260:	fb02 f303 	mul.w	r3, r2, r3
 8001264:	4a08      	ldr	r2, [pc, #32]	@ (8001288 <BSP_COM_Init+0x5c>)
 8001266:	4413      	add	r3, r2
 8001268:	6839      	ldr	r1, [r7, #0]
 800126a:	4618      	mov	r0, r3
 800126c:	f000 f80e 	bl	800128c <MX_USART3_Init>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8001276:	f06f 0303 	mvn.w	r3, #3
 800127a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800127c:	68fb      	ldr	r3, [r7, #12]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	24000158 	.word	0x24000158

0800128c <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001296:	4b15      	ldr	r3, [pc, #84]	@ (80012ec <MX_USART3_Init+0x60>)
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	220c      	movs	r2, #12
 80012aa:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	895b      	ldrh	r3, [r3, #10]
 80012b0:	461a      	mov	r2, r3
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	685a      	ldr	r2, [r3, #4]
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	891b      	ldrh	r3, [r3, #8]
 80012c2:	461a      	mov	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	899b      	ldrh	r3, [r3, #12]
 80012cc:	461a      	mov	r2, r3
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80012d8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80012da:	6878      	ldr	r0, [r7, #4]
 80012dc:	f003 fb34 	bl	8004948 <HAL_UART_Init>
 80012e0:	4603      	mov	r3, r0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3708      	adds	r7, #8
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	24000008 	.word	0x24000008

080012f0 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80012f8:	4b09      	ldr	r3, [pc, #36]	@ (8001320 <__io_putchar+0x30>)
 80012fa:	781b      	ldrb	r3, [r3, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	2394      	movs	r3, #148	@ 0x94
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	4a07      	ldr	r2, [pc, #28]	@ (8001324 <__io_putchar+0x34>)
 8001306:	1898      	adds	r0, r3, r2
 8001308:	1d39      	adds	r1, r7, #4
 800130a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130e:	2201      	movs	r2, #1
 8001310:	f003 fb6a 	bl	80049e8 <HAL_UART_Transmit>
  return ch;
 8001314:	687b      	ldr	r3, [r7, #4]
}
 8001316:	4618      	mov	r0, r3
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	240001ec 	.word	0x240001ec
 8001324:	24000158 	.word	0x24000158

08001328 <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 800132c:	2000      	movs	r0, #0
 800132e:	f7ff fc67 	bl	8000c00 <BSP_PB_Callback>
}
 8001332:	bf00      	nop
 8001334:	bd80      	pop	{r7, pc}
	...

08001338 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	@ 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001340:	4b27      	ldr	r3, [pc, #156]	@ (80013e0 <COM1_MspInit+0xa8>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001346:	4a26      	ldr	r2, [pc, #152]	@ (80013e0 <COM1_MspInit+0xa8>)
 8001348:	f043 0308 	orr.w	r3, r3, #8
 800134c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001350:	4b23      	ldr	r3, [pc, #140]	@ (80013e0 <COM1_MspInit+0xa8>)
 8001352:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001356:	f003 0308 	and.w	r3, r3, #8
 800135a:	613b      	str	r3, [r7, #16]
 800135c:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 800135e:	4b20      	ldr	r3, [pc, #128]	@ (80013e0 <COM1_MspInit+0xa8>)
 8001360:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001364:	4a1e      	ldr	r2, [pc, #120]	@ (80013e0 <COM1_MspInit+0xa8>)
 8001366:	f043 0308 	orr.w	r3, r3, #8
 800136a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800136e:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <COM1_MspInit+0xa8>)
 8001370:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001374:	f003 0308 	and.w	r3, r3, #8
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 800137c:	4b18      	ldr	r3, [pc, #96]	@ (80013e0 <COM1_MspInit+0xa8>)
 800137e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001382:	4a17      	ldr	r2, [pc, #92]	@ (80013e0 <COM1_MspInit+0xa8>)
 8001384:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001388:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800138c:	4b14      	ldr	r3, [pc, #80]	@ (80013e0 <COM1_MspInit+0xa8>)
 800138e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001392:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001396:	60bb      	str	r3, [r7, #8]
 8001398:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800139a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800139e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80013a4:	2302      	movs	r3, #2
 80013a6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80013ac:	2307      	movs	r3, #7
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	480b      	ldr	r0, [pc, #44]	@ (80013e4 <COM1_MspInit+0xac>)
 80013b8:	f000 fa48 	bl	800184c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80013bc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013c0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80013c2:	2302      	movs	r3, #2
 80013c4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80013c6:	2307      	movs	r3, #7
 80013c8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	4804      	ldr	r0, [pc, #16]	@ (80013e4 <COM1_MspInit+0xac>)
 80013d2:	f000 fa3b 	bl	800184c <HAL_GPIO_Init>
}
 80013d6:	bf00      	nop
 80013d8:	3728      	adds	r7, #40	@ 0x28
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	58024400 	.word	0x58024400
 80013e4:	58020c00 	.word	0x58020c00

080013e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ee:	2003      	movs	r0, #3
 80013f0:	f000 f968 	bl	80016c4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80013f4:	f001 faa6 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 80013f8:	4602      	mov	r2, r0
 80013fa:	4b15      	ldr	r3, [pc, #84]	@ (8001450 <HAL_Init+0x68>)
 80013fc:	699b      	ldr	r3, [r3, #24]
 80013fe:	0a1b      	lsrs	r3, r3, #8
 8001400:	f003 030f 	and.w	r3, r3, #15
 8001404:	4913      	ldr	r1, [pc, #76]	@ (8001454 <HAL_Init+0x6c>)
 8001406:	5ccb      	ldrb	r3, [r1, r3]
 8001408:	f003 031f 	and.w	r3, r3, #31
 800140c:	fa22 f303 	lsr.w	r3, r2, r3
 8001410:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001412:	4b0f      	ldr	r3, [pc, #60]	@ (8001450 <HAL_Init+0x68>)
 8001414:	699b      	ldr	r3, [r3, #24]
 8001416:	f003 030f 	and.w	r3, r3, #15
 800141a:	4a0e      	ldr	r2, [pc, #56]	@ (8001454 <HAL_Init+0x6c>)
 800141c:	5cd3      	ldrb	r3, [r2, r3]
 800141e:	f003 031f 	and.w	r3, r3, #31
 8001422:	687a      	ldr	r2, [r7, #4]
 8001424:	fa22 f303 	lsr.w	r3, r2, r3
 8001428:	4a0b      	ldr	r2, [pc, #44]	@ (8001458 <HAL_Init+0x70>)
 800142a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800142c:	4a0b      	ldr	r2, [pc, #44]	@ (800145c <HAL_Init+0x74>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001432:	2000      	movs	r0, #0
 8001434:	f000 f814 	bl	8001460 <HAL_InitTick>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800143e:	2301      	movs	r3, #1
 8001440:	e002      	b.n	8001448 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001442:	f7ff fbf7 	bl	8000c34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	58024400 	.word	0x58024400
 8001454:	08006aac 	.word	0x08006aac
 8001458:	24000004 	.word	0x24000004
 800145c:	24000000 	.word	0x24000000

08001460 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001468:	4b15      	ldr	r3, [pc, #84]	@ (80014c0 <HAL_InitTick+0x60>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d101      	bne.n	8001474 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001470:	2301      	movs	r3, #1
 8001472:	e021      	b.n	80014b8 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001474:	4b13      	ldr	r3, [pc, #76]	@ (80014c4 <HAL_InitTick+0x64>)
 8001476:	681a      	ldr	r2, [r3, #0]
 8001478:	4b11      	ldr	r3, [pc, #68]	@ (80014c0 <HAL_InitTick+0x60>)
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001482:	fbb3 f3f1 	udiv	r3, r3, r1
 8001486:	fbb2 f3f3 	udiv	r3, r2, r3
 800148a:	4618      	mov	r0, r3
 800148c:	f000 f94d 	bl	800172a <HAL_SYSTICK_Config>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e00e      	b.n	80014b8 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b0f      	cmp	r3, #15
 800149e:	d80a      	bhi.n	80014b6 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80014a0:	2200      	movs	r2, #0
 80014a2:	6879      	ldr	r1, [r7, #4]
 80014a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80014a8:	f000 f917 	bl	80016da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80014ac:	4a06      	ldr	r2, [pc, #24]	@ (80014c8 <HAL_InitTick+0x68>)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80014b2:	2300      	movs	r3, #0
 80014b4:	e000      	b.n	80014b8 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80014b6:	2301      	movs	r3, #1
}
 80014b8:	4618      	mov	r0, r3
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	24000028 	.word	0x24000028
 80014c4:	24000000 	.word	0x24000000
 80014c8:	24000024 	.word	0x24000024

080014cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014d0:	4b06      	ldr	r3, [pc, #24]	@ (80014ec <HAL_IncTick+0x20>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	461a      	mov	r2, r3
 80014d6:	4b06      	ldr	r3, [pc, #24]	@ (80014f0 <HAL_IncTick+0x24>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	4413      	add	r3, r2
 80014dc:	4a04      	ldr	r2, [pc, #16]	@ (80014f0 <HAL_IncTick+0x24>)
 80014de:	6013      	str	r3, [r2, #0]
}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	24000028 	.word	0x24000028
 80014f0:	240001f0 	.word	0x240001f0

080014f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014f4:	b480      	push	{r7}
 80014f6:	af00      	add	r7, sp, #0
  return uwTick;
 80014f8:	4b03      	ldr	r3, [pc, #12]	@ (8001508 <HAL_GetTick+0x14>)
 80014fa:	681b      	ldr	r3, [r3, #0]
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	46bd      	mov	sp, r7
 8001500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001504:	4770      	bx	lr
 8001506:	bf00      	nop
 8001508:	240001f0 	.word	0x240001f0

0800150c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001510:	4b03      	ldr	r3, [pc, #12]	@ (8001520 <HAL_GetREVID+0x14>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	0c1b      	lsrs	r3, r3, #16
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	5c001000 	.word	0x5c001000

08001524 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b480      	push	{r7}
 8001526:	b085      	sub	sp, #20
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <__NVIC_SetPriorityGrouping+0x40>)
 8001536:	68db      	ldr	r3, [r3, #12]
 8001538:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800153a:	68ba      	ldr	r2, [r7, #8]
 800153c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001540:	4013      	ands	r3, r2
 8001542:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001548:	68bb      	ldr	r3, [r7, #8]
 800154a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <__NVIC_SetPriorityGrouping+0x44>)
 800154e:	4313      	orrs	r3, r2
 8001550:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001552:	4a04      	ldr	r2, [pc, #16]	@ (8001564 <__NVIC_SetPriorityGrouping+0x40>)
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60d3      	str	r3, [r2, #12]
}
 8001558:	bf00      	nop
 800155a:	3714      	adds	r7, #20
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr
 8001564:	e000ed00 	.word	0xe000ed00
 8001568:	05fa0000 	.word	0x05fa0000

0800156c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800156c:	b480      	push	{r7}
 800156e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001570:	4b04      	ldr	r3, [pc, #16]	@ (8001584 <__NVIC_GetPriorityGrouping+0x18>)
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	0a1b      	lsrs	r3, r3, #8
 8001576:	f003 0307 	and.w	r3, r3, #7
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	4603      	mov	r3, r0
 8001590:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001596:	2b00      	cmp	r3, #0
 8001598:	db0b      	blt.n	80015b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800159a:	88fb      	ldrh	r3, [r7, #6]
 800159c:	f003 021f 	and.w	r2, r3, #31
 80015a0:	4907      	ldr	r1, [pc, #28]	@ (80015c0 <__NVIC_EnableIRQ+0x38>)
 80015a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	2001      	movs	r0, #1
 80015aa:	fa00 f202 	lsl.w	r2, r0, r2
 80015ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	e000e100 	.word	0xe000e100

080015c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	4603      	mov	r3, r0
 80015cc:	6039      	str	r1, [r7, #0]
 80015ce:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80015d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db0a      	blt.n	80015ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	490c      	ldr	r1, [pc, #48]	@ (8001610 <__NVIC_SetPriority+0x4c>)
 80015de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80015e2:	0112      	lsls	r2, r2, #4
 80015e4:	b2d2      	uxtb	r2, r2
 80015e6:	440b      	add	r3, r1
 80015e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ec:	e00a      	b.n	8001604 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	b2da      	uxtb	r2, r3
 80015f2:	4908      	ldr	r1, [pc, #32]	@ (8001614 <__NVIC_SetPriority+0x50>)
 80015f4:	88fb      	ldrh	r3, [r7, #6]
 80015f6:	f003 030f 	and.w	r3, r3, #15
 80015fa:	3b04      	subs	r3, #4
 80015fc:	0112      	lsls	r2, r2, #4
 80015fe:	b2d2      	uxtb	r2, r2
 8001600:	440b      	add	r3, r1
 8001602:	761a      	strb	r2, [r3, #24]
}
 8001604:	bf00      	nop
 8001606:	370c      	adds	r7, #12
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	e000e100 	.word	0xe000e100
 8001614:	e000ed00 	.word	0xe000ed00

08001618 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001618:	b480      	push	{r7}
 800161a:	b089      	sub	sp, #36	@ 0x24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f003 0307 	and.w	r3, r3, #7
 800162a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800162c:	69fb      	ldr	r3, [r7, #28]
 800162e:	f1c3 0307 	rsb	r3, r3, #7
 8001632:	2b04      	cmp	r3, #4
 8001634:	bf28      	it	cs
 8001636:	2304      	movcs	r3, #4
 8001638:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800163a:	69fb      	ldr	r3, [r7, #28]
 800163c:	3304      	adds	r3, #4
 800163e:	2b06      	cmp	r3, #6
 8001640:	d902      	bls.n	8001648 <NVIC_EncodePriority+0x30>
 8001642:	69fb      	ldr	r3, [r7, #28]
 8001644:	3b03      	subs	r3, #3
 8001646:	e000      	b.n	800164a <NVIC_EncodePriority+0x32>
 8001648:	2300      	movs	r3, #0
 800164a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43da      	mvns	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	401a      	ands	r2, r3
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001660:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	fa01 f303 	lsl.w	r3, r1, r3
 800166a:	43d9      	mvns	r1, r3
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001670:	4313      	orrs	r3, r2
         );
}
 8001672:	4618      	mov	r0, r3
 8001674:	3724      	adds	r7, #36	@ 0x24
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
	...

08001680 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	3b01      	subs	r3, #1
 800168c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001690:	d301      	bcc.n	8001696 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001692:	2301      	movs	r3, #1
 8001694:	e00f      	b.n	80016b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001696:	4a0a      	ldr	r2, [pc, #40]	@ (80016c0 <SysTick_Config+0x40>)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	3b01      	subs	r3, #1
 800169c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800169e:	210f      	movs	r1, #15
 80016a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80016a4:	f7ff ff8e 	bl	80015c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016a8:	4b05      	ldr	r3, [pc, #20]	@ (80016c0 <SysTick_Config+0x40>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ae:	4b04      	ldr	r3, [pc, #16]	@ (80016c0 <SysTick_Config+0x40>)
 80016b0:	2207      	movs	r2, #7
 80016b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016b4:	2300      	movs	r3, #0
}
 80016b6:	4618      	mov	r0, r3
 80016b8:	3708      	adds	r7, #8
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}
 80016be:	bf00      	nop
 80016c0:	e000e010 	.word	0xe000e010

080016c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016cc:	6878      	ldr	r0, [r7, #4]
 80016ce:	f7ff ff29 	bl	8001524 <__NVIC_SetPriorityGrouping>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b086      	sub	sp, #24
 80016de:	af00      	add	r7, sp, #0
 80016e0:	4603      	mov	r3, r0
 80016e2:	60b9      	str	r1, [r7, #8]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016e8:	f7ff ff40 	bl	800156c <__NVIC_GetPriorityGrouping>
 80016ec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ee:	687a      	ldr	r2, [r7, #4]
 80016f0:	68b9      	ldr	r1, [r7, #8]
 80016f2:	6978      	ldr	r0, [r7, #20]
 80016f4:	f7ff ff90 	bl	8001618 <NVIC_EncodePriority>
 80016f8:	4602      	mov	r2, r0
 80016fa:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016fe:	4611      	mov	r1, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff ff5f 	bl	80015c4 <__NVIC_SetPriority>
}
 8001706:	bf00      	nop
 8001708:	3718      	adds	r7, #24
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}

0800170e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170e:	b580      	push	{r7, lr}
 8001710:	b082      	sub	sp, #8
 8001712:	af00      	add	r7, sp, #0
 8001714:	4603      	mov	r3, r0
 8001716:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001718:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800171c:	4618      	mov	r0, r3
 800171e:	f7ff ff33 	bl	8001588 <__NVIC_EnableIRQ>
}
 8001722:	bf00      	nop
 8001724:	3708      	adds	r7, #8
 8001726:	46bd      	mov	sp, r7
 8001728:	bd80      	pop	{r7, pc}

0800172a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f7ff ffa4 	bl	8001680 <SysTick_Config>
 8001738:	4603      	mov	r3, r0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001748:	4b07      	ldr	r3, [pc, #28]	@ (8001768 <HAL_GetCurrentCPUID+0x24>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 030f 	and.w	r3, r3, #15
 8001752:	2b07      	cmp	r3, #7
 8001754:	d101      	bne.n	800175a <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8001756:	2303      	movs	r3, #3
 8001758:	e000      	b.n	800175c <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 800175a:	2301      	movs	r3, #1
  }
}
 800175c:	4618      	mov	r0, r3
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800176c:	b480      	push	{r7}
 800176e:	b087      	sub	sp, #28
 8001770:	af00      	add	r7, sp, #0
 8001772:	60f8      	str	r0, [r7, #12]
 8001774:	460b      	mov	r3, r1
 8001776:	607a      	str	r2, [r7, #4]
 8001778:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d101      	bne.n	8001788 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001784:	2301      	movs	r3, #1
 8001786:	e00a      	b.n	800179e <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8001788:	7afb      	ldrb	r3, [r7, #11]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d103      	bne.n	8001796 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	687a      	ldr	r2, [r7, #4]
 8001792:	605a      	str	r2, [r3, #4]
      break;
 8001794:	e002      	b.n	800179c <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8001796:	2301      	movs	r3, #1
 8001798:	75fb      	strb	r3, [r7, #23]
      break;
 800179a:	bf00      	nop
  }

  return status;
 800179c:	7dfb      	ldrb	r3, [r7, #23]
}
 800179e:	4618      	mov	r0, r3
 80017a0:	371c      	adds	r7, #28
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr

080017aa <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
 80017b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e003      	b.n	80017c6 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80017c4:	2300      	movs	r3, #0
  }
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	370c      	adds	r7, #12
 80017ca:	46bd      	mov	sp, r7
 80017cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d0:	4770      	bx	lr
	...

080017d4 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b086      	sub	sp, #24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	0c1b      	lsrs	r3, r3, #16
 80017e2:	f003 0303 	and.w	r3, r3, #3
 80017e6:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 031f 	and.w	r3, r3, #31
 80017f0:	2201      	movs	r2, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80017f8:	f7ff ffa4 	bl	8001744 <HAL_GetCurrentCPUID>
 80017fc:	4603      	mov	r3, r0
 80017fe:	2b03      	cmp	r3, #3
 8001800:	d105      	bne.n	800180e <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 8001802:	693b      	ldr	r3, [r7, #16]
 8001804:	011a      	lsls	r2, r3, #4
 8001806:	4b0f      	ldr	r3, [pc, #60]	@ (8001844 <HAL_EXTI_IRQHandler+0x70>)
 8001808:	4413      	add	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	e004      	b.n	8001818 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	011a      	lsls	r2, r3, #4
 8001812:	4b0d      	ldr	r3, [pc, #52]	@ (8001848 <HAL_EXTI_IRQHandler+0x74>)
 8001814:	4413      	add	r3, r2
 8001816:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68fa      	ldr	r2, [r7, #12]
 800181e:	4013      	ands	r3, r2
 8001820:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d009      	beq.n	800183c <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	68fa      	ldr	r2, [r7, #12]
 800182c:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	685b      	ldr	r3, [r3, #4]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d002      	beq.n	800183c <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	4798      	blx	r3
    }
  }
}
 800183c:	bf00      	nop
 800183e:	3718      	adds	r7, #24
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}
 8001844:	58000088 	.word	0x58000088
 8001848:	580000c8 	.word	0x580000c8

0800184c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800184c:	b480      	push	{r7}
 800184e:	b089      	sub	sp, #36	@ 0x24
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
 8001854:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800185a:	4b89      	ldr	r3, [pc, #548]	@ (8001a80 <HAL_GPIO_Init+0x234>)
 800185c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800185e:	e194      	b.n	8001b8a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	2101      	movs	r1, #1
 8001866:	69fb      	ldr	r3, [r7, #28]
 8001868:	fa01 f303 	lsl.w	r3, r1, r3
 800186c:	4013      	ands	r3, r2
 800186e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001870:	693b      	ldr	r3, [r7, #16]
 8001872:	2b00      	cmp	r3, #0
 8001874:	f000 8186 	beq.w	8001b84 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b01      	cmp	r3, #1
 8001882:	d005      	beq.n	8001890 <HAL_GPIO_Init+0x44>
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 0303 	and.w	r3, r3, #3
 800188c:	2b02      	cmp	r3, #2
 800188e:	d130      	bne.n	80018f2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	689b      	ldr	r3, [r3, #8]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	2203      	movs	r2, #3
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	68da      	ldr	r2, [r3, #12]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	005b      	lsls	r3, r3, #1
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	69ba      	ldr	r2, [r7, #24]
 80018b6:	4313      	orrs	r3, r2
 80018b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	69ba      	ldr	r2, [r7, #24]
 80018be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80018c6:	2201      	movs	r2, #1
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	fa02 f303 	lsl.w	r3, r2, r3
 80018ce:	43db      	mvns	r3, r3
 80018d0:	69ba      	ldr	r2, [r7, #24]
 80018d2:	4013      	ands	r3, r2
 80018d4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	091b      	lsrs	r3, r3, #4
 80018dc:	f003 0201 	and.w	r2, r3, #1
 80018e0:	69fb      	ldr	r3, [r7, #28]
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	69ba      	ldr	r2, [r7, #24]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f003 0303 	and.w	r3, r3, #3
 80018fa:	2b03      	cmp	r3, #3
 80018fc:	d017      	beq.n	800192e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	005b      	lsls	r3, r3, #1
 8001908:	2203      	movs	r2, #3
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	43db      	mvns	r3, r3
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	4013      	ands	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	689a      	ldr	r2, [r3, #8]
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	005b      	lsls	r3, r3, #1
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d123      	bne.n	8001982 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	08da      	lsrs	r2, r3, #3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3208      	adds	r2, #8
 8001942:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001946:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	220f      	movs	r2, #15
 8001952:	fa02 f303 	lsl.w	r3, r2, r3
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	691a      	ldr	r2, [r3, #16]
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	fa02 f303 	lsl.w	r3, r2, r3
 800196e:	69ba      	ldr	r2, [r7, #24]
 8001970:	4313      	orrs	r3, r2
 8001972:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	08da      	lsrs	r2, r3, #3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	3208      	adds	r2, #8
 800197c:	69b9      	ldr	r1, [r7, #24]
 800197e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	005b      	lsls	r3, r3, #1
 800198c:	2203      	movs	r2, #3
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f003 0203 	and.w	r2, r3, #3
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	fa02 f303 	lsl.w	r3, r2, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4313      	orrs	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	69ba      	ldr	r2, [r7, #24]
 80019b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80e0 	beq.w	8001b84 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001a84 <HAL_GPIO_Init+0x238>)
 80019c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019ca:	4a2e      	ldr	r2, [pc, #184]	@ (8001a84 <HAL_GPIO_Init+0x238>)
 80019cc:	f043 0302 	orr.w	r3, r3, #2
 80019d0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80019d4:	4b2b      	ldr	r3, [pc, #172]	@ (8001a84 <HAL_GPIO_Init+0x238>)
 80019d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	60fb      	str	r3, [r7, #12]
 80019e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80019e2:	4a29      	ldr	r2, [pc, #164]	@ (8001a88 <HAL_GPIO_Init+0x23c>)
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	089b      	lsrs	r3, r3, #2
 80019e8:	3302      	adds	r3, #2
 80019ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80019ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80019f0:	69fb      	ldr	r3, [r7, #28]
 80019f2:	f003 0303 	and.w	r3, r3, #3
 80019f6:	009b      	lsls	r3, r3, #2
 80019f8:	220f      	movs	r2, #15
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43db      	mvns	r3, r3
 8001a00:	69ba      	ldr	r2, [r7, #24]
 8001a02:	4013      	ands	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a20      	ldr	r2, [pc, #128]	@ (8001a8c <HAL_GPIO_Init+0x240>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d052      	beq.n	8001ab4 <HAL_GPIO_Init+0x268>
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4a1f      	ldr	r2, [pc, #124]	@ (8001a90 <HAL_GPIO_Init+0x244>)
 8001a12:	4293      	cmp	r3, r2
 8001a14:	d031      	beq.n	8001a7a <HAL_GPIO_Init+0x22e>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4a1e      	ldr	r2, [pc, #120]	@ (8001a94 <HAL_GPIO_Init+0x248>)
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d02b      	beq.n	8001a76 <HAL_GPIO_Init+0x22a>
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a1d      	ldr	r2, [pc, #116]	@ (8001a98 <HAL_GPIO_Init+0x24c>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d025      	beq.n	8001a72 <HAL_GPIO_Init+0x226>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	4a1c      	ldr	r2, [pc, #112]	@ (8001a9c <HAL_GPIO_Init+0x250>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d01f      	beq.n	8001a6e <HAL_GPIO_Init+0x222>
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4a1b      	ldr	r2, [pc, #108]	@ (8001aa0 <HAL_GPIO_Init+0x254>)
 8001a32:	4293      	cmp	r3, r2
 8001a34:	d019      	beq.n	8001a6a <HAL_GPIO_Init+0x21e>
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	4a1a      	ldr	r2, [pc, #104]	@ (8001aa4 <HAL_GPIO_Init+0x258>)
 8001a3a:	4293      	cmp	r3, r2
 8001a3c:	d013      	beq.n	8001a66 <HAL_GPIO_Init+0x21a>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	4a19      	ldr	r2, [pc, #100]	@ (8001aa8 <HAL_GPIO_Init+0x25c>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d00d      	beq.n	8001a62 <HAL_GPIO_Init+0x216>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a18      	ldr	r2, [pc, #96]	@ (8001aac <HAL_GPIO_Init+0x260>)
 8001a4a:	4293      	cmp	r3, r2
 8001a4c:	d007      	beq.n	8001a5e <HAL_GPIO_Init+0x212>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	4a17      	ldr	r2, [pc, #92]	@ (8001ab0 <HAL_GPIO_Init+0x264>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d101      	bne.n	8001a5a <HAL_GPIO_Init+0x20e>
 8001a56:	2309      	movs	r3, #9
 8001a58:	e02d      	b.n	8001ab6 <HAL_GPIO_Init+0x26a>
 8001a5a:	230a      	movs	r3, #10
 8001a5c:	e02b      	b.n	8001ab6 <HAL_GPIO_Init+0x26a>
 8001a5e:	2308      	movs	r3, #8
 8001a60:	e029      	b.n	8001ab6 <HAL_GPIO_Init+0x26a>
 8001a62:	2307      	movs	r3, #7
 8001a64:	e027      	b.n	8001ab6 <HAL_GPIO_Init+0x26a>
 8001a66:	2306      	movs	r3, #6
 8001a68:	e025      	b.n	8001ab6 <HAL_GPIO_Init+0x26a>
 8001a6a:	2305      	movs	r3, #5
 8001a6c:	e023      	b.n	8001ab6 <HAL_GPIO_Init+0x26a>
 8001a6e:	2304      	movs	r3, #4
 8001a70:	e021      	b.n	8001ab6 <HAL_GPIO_Init+0x26a>
 8001a72:	2303      	movs	r3, #3
 8001a74:	e01f      	b.n	8001ab6 <HAL_GPIO_Init+0x26a>
 8001a76:	2302      	movs	r3, #2
 8001a78:	e01d      	b.n	8001ab6 <HAL_GPIO_Init+0x26a>
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	e01b      	b.n	8001ab6 <HAL_GPIO_Init+0x26a>
 8001a7e:	bf00      	nop
 8001a80:	58000080 	.word	0x58000080
 8001a84:	58024400 	.word	0x58024400
 8001a88:	58000400 	.word	0x58000400
 8001a8c:	58020000 	.word	0x58020000
 8001a90:	58020400 	.word	0x58020400
 8001a94:	58020800 	.word	0x58020800
 8001a98:	58020c00 	.word	0x58020c00
 8001a9c:	58021000 	.word	0x58021000
 8001aa0:	58021400 	.word	0x58021400
 8001aa4:	58021800 	.word	0x58021800
 8001aa8:	58021c00 	.word	0x58021c00
 8001aac:	58022000 	.word	0x58022000
 8001ab0:	58022400 	.word	0x58022400
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	69fa      	ldr	r2, [r7, #28]
 8001ab8:	f002 0203 	and.w	r2, r2, #3
 8001abc:	0092      	lsls	r2, r2, #2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	69ba      	ldr	r2, [r7, #24]
 8001ac2:	4313      	orrs	r3, r2
 8001ac4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ac6:	4938      	ldr	r1, [pc, #224]	@ (8001ba8 <HAL_GPIO_Init+0x35c>)
 8001ac8:	69fb      	ldr	r3, [r7, #28]
 8001aca:	089b      	lsrs	r3, r3, #2
 8001acc:	3302      	adds	r3, #2
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001ad4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	43db      	mvns	r3, r3
 8001ae0:	69ba      	ldr	r2, [r7, #24]
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d003      	beq.n	8001afa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001af2:	69ba      	ldr	r2, [r7, #24]
 8001af4:	693b      	ldr	r3, [r7, #16]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001afa:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b0a:	693b      	ldr	r3, [r7, #16]
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d003      	beq.n	8001b28 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	693b      	ldr	r3, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001b28:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d003      	beq.n	8001b54 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001b60:	693b      	ldr	r3, [r7, #16]
 8001b62:	43db      	mvns	r3, r3
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	4013      	ands	r3, r2
 8001b68:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d003      	beq.n	8001b7e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	693b      	ldr	r3, [r7, #16]
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	69ba      	ldr	r2, [r7, #24]
 8001b82:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b84:	69fb      	ldr	r3, [r7, #28]
 8001b86:	3301      	adds	r3, #1
 8001b88:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	69fb      	ldr	r3, [r7, #28]
 8001b90:	fa22 f303 	lsr.w	r3, r2, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f47f ae63 	bne.w	8001860 <HAL_GPIO_Init+0x14>
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	bf00      	nop
 8001b9e:	3724      	adds	r7, #36	@ 0x24
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr
 8001ba8:	58000400 	.word	0x58000400

08001bac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	807b      	strh	r3, [r7, #2]
 8001bb8:	4613      	mov	r3, r2
 8001bba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bbc:	787b      	ldrb	r3, [r7, #1]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001bca:	887b      	ldrh	r3, [r7, #2]
 8001bcc:	041a      	lsls	r2, r3, #16
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	619a      	str	r2, [r3, #24]
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b085      	sub	sp, #20
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
 8001be6:	460b      	mov	r3, r1
 8001be8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	695b      	ldr	r3, [r3, #20]
 8001bee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf0:	887a      	ldrh	r2, [r7, #2]
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	041a      	lsls	r2, r3, #16
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43d9      	mvns	r1, r3
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	400b      	ands	r3, r1
 8001c00:	431a      	orrs	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	619a      	str	r2, [r3, #24]
}
 8001c06:	bf00      	nop
 8001c08:	3714      	adds	r7, #20
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr
	...

08001c14 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001c1c:	4a08      	ldr	r2, [pc, #32]	@ (8001c40 <HAL_HSEM_FastTake+0x2c>)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3320      	adds	r3, #32
 8001c22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c26:	4a07      	ldr	r2, [pc, #28]	@ (8001c44 <HAL_HSEM_FastTake+0x30>)
 8001c28:	4293      	cmp	r3, r2
 8001c2a:	d101      	bne.n	8001c30 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	e000      	b.n	8001c32 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001c30:	2301      	movs	r3, #1
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	58026400 	.word	0x58026400
 8001c44:	80000300 	.word	0x80000300

08001c48 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
 8001c50:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001c52:	4906      	ldr	r1, [pc, #24]	@ (8001c6c <HAL_HSEM_Release+0x24>)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	58026400 	.word	0x58026400

08001c70 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b084      	sub	sp, #16
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001c78:	4b29      	ldr	r3, [pc, #164]	@ (8001d20 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	f003 0307 	and.w	r3, r3, #7
 8001c80:	2b06      	cmp	r3, #6
 8001c82:	d00a      	beq.n	8001c9a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c84:	4b26      	ldr	r3, [pc, #152]	@ (8001d20 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d001      	beq.n	8001c96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e040      	b.n	8001d18 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c96:	2300      	movs	r3, #0
 8001c98:	e03e      	b.n	8001d18 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c9a:	4b21      	ldr	r3, [pc, #132]	@ (8001d20 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c9c:	68db      	ldr	r3, [r3, #12]
 8001c9e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001ca2:	491f      	ldr	r1, [pc, #124]	@ (8001d20 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001caa:	f7ff fc23 	bl	80014f4 <HAL_GetTick>
 8001cae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cb0:	e009      	b.n	8001cc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001cb2:	f7ff fc1f 	bl	80014f4 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001cc0:	d901      	bls.n	8001cc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e028      	b.n	8001d18 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001cc6:	4b16      	ldr	r3, [pc, #88]	@ (8001d20 <HAL_PWREx_ConfigSupply+0xb0>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cce:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001cd2:	d1ee      	bne.n	8001cb2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b1e      	cmp	r3, #30
 8001cd8:	d008      	beq.n	8001cec <HAL_PWREx_ConfigSupply+0x7c>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2b2e      	cmp	r3, #46	@ 0x2e
 8001cde:	d005      	beq.n	8001cec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2b1d      	cmp	r3, #29
 8001ce4:	d002      	beq.n	8001cec <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b2d      	cmp	r3, #45	@ 0x2d
 8001cea:	d114      	bne.n	8001d16 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001cec:	f7ff fc02 	bl	80014f4 <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001cf2:	e009      	b.n	8001d08 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001cf4:	f7ff fbfe 	bl	80014f4 <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001d02:	d901      	bls.n	8001d08 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e007      	b.n	8001d18 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001d08:	4b05      	ldr	r3, [pc, #20]	@ (8001d20 <HAL_PWREx_ConfigSupply+0xb0>)
 8001d0a:	68db      	ldr	r3, [r3, #12]
 8001d0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d14:	d1ee      	bne.n	8001cf4 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	58024800 	.word	0x58024800

08001d24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	b08c      	sub	sp, #48	@ 0x30
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d102      	bne.n	8001d38 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	f000 bc48 	b.w	80025c8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f003 0301 	and.w	r3, r3, #1
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 8088 	beq.w	8001e56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d46:	4b99      	ldr	r3, [pc, #612]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001d48:	691b      	ldr	r3, [r3, #16]
 8001d4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001d4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001d50:	4b96      	ldr	r3, [pc, #600]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001d52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d54:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001d56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d58:	2b10      	cmp	r3, #16
 8001d5a:	d007      	beq.n	8001d6c <HAL_RCC_OscConfig+0x48>
 8001d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d5e:	2b18      	cmp	r3, #24
 8001d60:	d111      	bne.n	8001d86 <HAL_RCC_OscConfig+0x62>
 8001d62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d64:	f003 0303 	and.w	r3, r3, #3
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d10c      	bne.n	8001d86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	4b8f      	ldr	r3, [pc, #572]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d06d      	beq.n	8001e54 <HAL_RCC_OscConfig+0x130>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d169      	bne.n	8001e54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d80:	2301      	movs	r3, #1
 8001d82:	f000 bc21 	b.w	80025c8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	685b      	ldr	r3, [r3, #4]
 8001d8a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d8e:	d106      	bne.n	8001d9e <HAL_RCC_OscConfig+0x7a>
 8001d90:	4b86      	ldr	r3, [pc, #536]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a85      	ldr	r2, [pc, #532]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001d96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d9a:	6013      	str	r3, [r2, #0]
 8001d9c:	e02e      	b.n	8001dfc <HAL_RCC_OscConfig+0xd8>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d10c      	bne.n	8001dc0 <HAL_RCC_OscConfig+0x9c>
 8001da6:	4b81      	ldr	r3, [pc, #516]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	4a80      	ldr	r2, [pc, #512]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001dac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001db0:	6013      	str	r3, [r2, #0]
 8001db2:	4b7e      	ldr	r3, [pc, #504]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a7d      	ldr	r2, [pc, #500]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001db8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dbc:	6013      	str	r3, [r2, #0]
 8001dbe:	e01d      	b.n	8001dfc <HAL_RCC_OscConfig+0xd8>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dc8:	d10c      	bne.n	8001de4 <HAL_RCC_OscConfig+0xc0>
 8001dca:	4b78      	ldr	r3, [pc, #480]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a77      	ldr	r2, [pc, #476]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001dd0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001dd4:	6013      	str	r3, [r2, #0]
 8001dd6:	4b75      	ldr	r3, [pc, #468]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a74      	ldr	r2, [pc, #464]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e00b      	b.n	8001dfc <HAL_RCC_OscConfig+0xd8>
 8001de4:	4b71      	ldr	r3, [pc, #452]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a70      	ldr	r2, [pc, #448]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001dee:	6013      	str	r3, [r2, #0]
 8001df0:	4b6e      	ldr	r3, [pc, #440]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a6d      	ldr	r2, [pc, #436]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001df6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001dfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e04:	f7ff fb76 	bl	80014f4 <HAL_GetTick>
 8001e08:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e0a:	e008      	b.n	8001e1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e0c:	f7ff fb72 	bl	80014f4 <HAL_GetTick>
 8001e10:	4602      	mov	r2, r0
 8001e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e14:	1ad3      	subs	r3, r2, r3
 8001e16:	2b64      	cmp	r3, #100	@ 0x64
 8001e18:	d901      	bls.n	8001e1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e1a:	2303      	movs	r3, #3
 8001e1c:	e3d4      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001e1e:	4b63      	ldr	r3, [pc, #396]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d0f0      	beq.n	8001e0c <HAL_RCC_OscConfig+0xe8>
 8001e2a:	e014      	b.n	8001e56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff fb62 	bl	80014f4 <HAL_GetTick>
 8001e30:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e34:	f7ff fb5e 	bl	80014f4 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b64      	cmp	r3, #100	@ 0x64
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e3c0      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001e46:	4b59      	ldr	r3, [pc, #356]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d1f0      	bne.n	8001e34 <HAL_RCC_OscConfig+0x110>
 8001e52:	e000      	b.n	8001e56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	f000 80ca 	beq.w	8001ff8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e64:	4b51      	ldr	r3, [pc, #324]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001e66:	691b      	ldr	r3, [r3, #16]
 8001e68:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e6c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e6e:	4b4f      	ldr	r3, [pc, #316]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e72:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e74:	6a3b      	ldr	r3, [r7, #32]
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d007      	beq.n	8001e8a <HAL_RCC_OscConfig+0x166>
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	2b18      	cmp	r3, #24
 8001e7e:	d156      	bne.n	8001f2e <HAL_RCC_OscConfig+0x20a>
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	f003 0303 	and.w	r3, r3, #3
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d151      	bne.n	8001f2e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8a:	4b48      	ldr	r3, [pc, #288]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f003 0304 	and.w	r3, r3, #4
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d005      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x17e>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	68db      	ldr	r3, [r3, #12]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e392      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ea2:	4b42      	ldr	r3, [pc, #264]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f023 0219 	bic.w	r2, r3, #25
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	493f      	ldr	r1, [pc, #252]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb4:	f7ff fb1e 	bl	80014f4 <HAL_GetTick>
 8001eb8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001eba:	e008      	b.n	8001ece <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ebc:	f7ff fb1a 	bl	80014f4 <HAL_GetTick>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e37c      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ece:	4b37      	ldr	r3, [pc, #220]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d0f0      	beq.n	8001ebc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	f7ff fb17 	bl	800150c <HAL_GetREVID>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d817      	bhi.n	8001f18 <HAL_RCC_OscConfig+0x1f4>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	2b40      	cmp	r3, #64	@ 0x40
 8001eee:	d108      	bne.n	8001f02 <HAL_RCC_OscConfig+0x1de>
 8001ef0:	4b2e      	ldr	r3, [pc, #184]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ef8:	4a2c      	ldr	r2, [pc, #176]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001efa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001efe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f00:	e07a      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f02:	4b2a      	ldr	r3, [pc, #168]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	031b      	lsls	r3, r3, #12
 8001f10:	4926      	ldr	r1, [pc, #152]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001f12:	4313      	orrs	r3, r2
 8001f14:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f16:	e06f      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f18:	4b24      	ldr	r3, [pc, #144]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001f1a:	685b      	ldr	r3, [r3, #4]
 8001f1c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	691b      	ldr	r3, [r3, #16]
 8001f24:	061b      	lsls	r3, r3, #24
 8001f26:	4921      	ldr	r1, [pc, #132]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f2c:	e064      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d047      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001f36:	4b1d      	ldr	r3, [pc, #116]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f023 0219 	bic.w	r2, r3, #25
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	68db      	ldr	r3, [r3, #12]
 8001f42:	491a      	ldr	r1, [pc, #104]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001f44:	4313      	orrs	r3, r2
 8001f46:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f48:	f7ff fad4 	bl	80014f4 <HAL_GetTick>
 8001f4c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f4e:	e008      	b.n	8001f62 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f50:	f7ff fad0 	bl	80014f4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b02      	cmp	r3, #2
 8001f5c:	d901      	bls.n	8001f62 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001f5e:	2303      	movs	r3, #3
 8001f60:	e332      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f62:	4b12      	ldr	r3, [pc, #72]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d0f0      	beq.n	8001f50 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6e:	f7ff facd 	bl	800150c <HAL_GetREVID>
 8001f72:	4603      	mov	r3, r0
 8001f74:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d819      	bhi.n	8001fb0 <HAL_RCC_OscConfig+0x28c>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	2b40      	cmp	r3, #64	@ 0x40
 8001f82:	d108      	bne.n	8001f96 <HAL_RCC_OscConfig+0x272>
 8001f84:	4b09      	ldr	r3, [pc, #36]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f8c:	4a07      	ldr	r2, [pc, #28]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001f8e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f92:	6053      	str	r3, [r2, #4]
 8001f94:	e030      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2d4>
 8001f96:	4b05      	ldr	r3, [pc, #20]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	031b      	lsls	r3, r3, #12
 8001fa4:	4901      	ldr	r1, [pc, #4]	@ (8001fac <HAL_RCC_OscConfig+0x288>)
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	604b      	str	r3, [r1, #4]
 8001faa:	e025      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2d4>
 8001fac:	58024400 	.word	0x58024400
 8001fb0:	4b9a      	ldr	r3, [pc, #616]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691b      	ldr	r3, [r3, #16]
 8001fbc:	061b      	lsls	r3, r3, #24
 8001fbe:	4997      	ldr	r1, [pc, #604]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	604b      	str	r3, [r1, #4]
 8001fc4:	e018      	b.n	8001ff8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fc6:	4b95      	ldr	r3, [pc, #596]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a94      	ldr	r2, [pc, #592]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8001fcc:	f023 0301 	bic.w	r3, r3, #1
 8001fd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd2:	f7ff fa8f 	bl	80014f4 <HAL_GetTick>
 8001fd6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fd8:	e008      	b.n	8001fec <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fda:	f7ff fa8b 	bl	80014f4 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b02      	cmp	r3, #2
 8001fe6:	d901      	bls.n	8001fec <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e2ed      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001fec:	4b8b      	ldr	r3, [pc, #556]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0304 	and.w	r3, r3, #4
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d1f0      	bne.n	8001fda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0310 	and.w	r3, r3, #16
 8002000:	2b00      	cmp	r3, #0
 8002002:	f000 80a9 	beq.w	8002158 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002006:	4b85      	ldr	r3, [pc, #532]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800200e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002010:	4b82      	ldr	r3, [pc, #520]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8002012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002014:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b08      	cmp	r3, #8
 800201a:	d007      	beq.n	800202c <HAL_RCC_OscConfig+0x308>
 800201c:	69bb      	ldr	r3, [r7, #24]
 800201e:	2b18      	cmp	r3, #24
 8002020:	d13a      	bne.n	8002098 <HAL_RCC_OscConfig+0x374>
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	f003 0303 	and.w	r3, r3, #3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d135      	bne.n	8002098 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800202c:	4b7b      	ldr	r3, [pc, #492]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002034:	2b00      	cmp	r3, #0
 8002036:	d005      	beq.n	8002044 <HAL_RCC_OscConfig+0x320>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	69db      	ldr	r3, [r3, #28]
 800203c:	2b80      	cmp	r3, #128	@ 0x80
 800203e:	d001      	beq.n	8002044 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002040:	2301      	movs	r3, #1
 8002042:	e2c1      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002044:	f7ff fa62 	bl	800150c <HAL_GetREVID>
 8002048:	4603      	mov	r3, r0
 800204a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800204e:	4293      	cmp	r3, r2
 8002050:	d817      	bhi.n	8002082 <HAL_RCC_OscConfig+0x35e>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a1b      	ldr	r3, [r3, #32]
 8002056:	2b20      	cmp	r3, #32
 8002058:	d108      	bne.n	800206c <HAL_RCC_OscConfig+0x348>
 800205a:	4b70      	ldr	r3, [pc, #448]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002062:	4a6e      	ldr	r2, [pc, #440]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8002064:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002068:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800206a:	e075      	b.n	8002158 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800206c:	4b6b      	ldr	r3, [pc, #428]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a1b      	ldr	r3, [r3, #32]
 8002078:	069b      	lsls	r3, r3, #26
 800207a:	4968      	ldr	r1, [pc, #416]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 800207c:	4313      	orrs	r3, r2
 800207e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002080:	e06a      	b.n	8002158 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002082:	4b66      	ldr	r3, [pc, #408]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a1b      	ldr	r3, [r3, #32]
 800208e:	061b      	lsls	r3, r3, #24
 8002090:	4962      	ldr	r1, [pc, #392]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8002092:	4313      	orrs	r3, r2
 8002094:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002096:	e05f      	b.n	8002158 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	69db      	ldr	r3, [r3, #28]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d042      	beq.n	8002126 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80020a0:	4b5e      	ldr	r3, [pc, #376]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4a5d      	ldr	r2, [pc, #372]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 80020a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ac:	f7ff fa22 	bl	80014f4 <HAL_GetTick>
 80020b0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020b2:	e008      	b.n	80020c6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020b4:	f7ff fa1e 	bl	80014f4 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d901      	bls.n	80020c6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80020c2:	2303      	movs	r3, #3
 80020c4:	e280      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80020c6:	4b55      	ldr	r3, [pc, #340]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d0f0      	beq.n	80020b4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80020d2:	f7ff fa1b 	bl	800150c <HAL_GetREVID>
 80020d6:	4603      	mov	r3, r0
 80020d8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80020dc:	4293      	cmp	r3, r2
 80020de:	d817      	bhi.n	8002110 <HAL_RCC_OscConfig+0x3ec>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a1b      	ldr	r3, [r3, #32]
 80020e4:	2b20      	cmp	r3, #32
 80020e6:	d108      	bne.n	80020fa <HAL_RCC_OscConfig+0x3d6>
 80020e8:	4b4c      	ldr	r3, [pc, #304]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80020f0:	4a4a      	ldr	r2, [pc, #296]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 80020f2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80020f6:	6053      	str	r3, [r2, #4]
 80020f8:	e02e      	b.n	8002158 <HAL_RCC_OscConfig+0x434>
 80020fa:	4b48      	ldr	r3, [pc, #288]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6a1b      	ldr	r3, [r3, #32]
 8002106:	069b      	lsls	r3, r3, #26
 8002108:	4944      	ldr	r1, [pc, #272]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 800210a:	4313      	orrs	r3, r2
 800210c:	604b      	str	r3, [r1, #4]
 800210e:	e023      	b.n	8002158 <HAL_RCC_OscConfig+0x434>
 8002110:	4b42      	ldr	r3, [pc, #264]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8002112:	68db      	ldr	r3, [r3, #12]
 8002114:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	061b      	lsls	r3, r3, #24
 800211e:	493f      	ldr	r1, [pc, #252]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8002120:	4313      	orrs	r3, r2
 8002122:	60cb      	str	r3, [r1, #12]
 8002124:	e018      	b.n	8002158 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002126:	4b3d      	ldr	r3, [pc, #244]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a3c      	ldr	r2, [pc, #240]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 800212c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002130:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002132:	f7ff f9df 	bl	80014f4 <HAL_GetTick>
 8002136:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800213a:	f7ff f9db 	bl	80014f4 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e23d      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800214c:	4b33      	ldr	r3, [pc, #204]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f0      	bne.n	800213a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0308 	and.w	r3, r3, #8
 8002160:	2b00      	cmp	r3, #0
 8002162:	d036      	beq.n	80021d2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	695b      	ldr	r3, [r3, #20]
 8002168:	2b00      	cmp	r3, #0
 800216a:	d019      	beq.n	80021a0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800216c:	4b2b      	ldr	r3, [pc, #172]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 800216e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002170:	4a2a      	ldr	r2, [pc, #168]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8002172:	f043 0301 	orr.w	r3, r3, #1
 8002176:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002178:	f7ff f9bc 	bl	80014f4 <HAL_GetTick>
 800217c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800217e:	e008      	b.n	8002192 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002180:	f7ff f9b8 	bl	80014f4 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e21a      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002192:	4b22      	ldr	r3, [pc, #136]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 8002194:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	2b00      	cmp	r3, #0
 800219c:	d0f0      	beq.n	8002180 <HAL_RCC_OscConfig+0x45c>
 800219e:	e018      	b.n	80021d2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80021a0:	4b1e      	ldr	r3, [pc, #120]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 80021a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021a4:	4a1d      	ldr	r2, [pc, #116]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 80021a6:	f023 0301 	bic.w	r3, r3, #1
 80021aa:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ac:	f7ff f9a2 	bl	80014f4 <HAL_GetTick>
 80021b0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021b2:	e008      	b.n	80021c6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021b4:	f7ff f99e 	bl	80014f4 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b02      	cmp	r3, #2
 80021c0:	d901      	bls.n	80021c6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80021c2:	2303      	movs	r3, #3
 80021c4:	e200      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80021c6:	4b15      	ldr	r3, [pc, #84]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 80021c8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d1f0      	bne.n	80021b4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0320 	and.w	r3, r3, #32
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d039      	beq.n	8002252 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d01c      	beq.n	8002220 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021e6:	4b0d      	ldr	r3, [pc, #52]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4a0c      	ldr	r2, [pc, #48]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 80021ec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021f0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021f2:	f7ff f97f 	bl	80014f4 <HAL_GetTick>
 80021f6:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80021f8:	e008      	b.n	800220c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021fa:	f7ff f97b 	bl	80014f4 <HAL_GetTick>
 80021fe:	4602      	mov	r2, r0
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	1ad3      	subs	r3, r2, r3
 8002204:	2b02      	cmp	r3, #2
 8002206:	d901      	bls.n	800220c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002208:	2303      	movs	r3, #3
 800220a:	e1dd      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <HAL_RCC_OscConfig+0x4f8>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d0f0      	beq.n	80021fa <HAL_RCC_OscConfig+0x4d6>
 8002218:	e01b      	b.n	8002252 <HAL_RCC_OscConfig+0x52e>
 800221a:	bf00      	nop
 800221c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002220:	4b9b      	ldr	r3, [pc, #620]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a9a      	ldr	r2, [pc, #616]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002226:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800222a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800222c:	f7ff f962 	bl	80014f4 <HAL_GetTick>
 8002230:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002232:	e008      	b.n	8002246 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002234:	f7ff f95e 	bl	80014f4 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	2b02      	cmp	r3, #2
 8002240:	d901      	bls.n	8002246 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002242:	2303      	movs	r3, #3
 8002244:	e1c0      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002246:	4b92      	ldr	r3, [pc, #584]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d1f0      	bne.n	8002234 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0304 	and.w	r3, r3, #4
 800225a:	2b00      	cmp	r3, #0
 800225c:	f000 8081 	beq.w	8002362 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002260:	4b8c      	ldr	r3, [pc, #560]	@ (8002494 <HAL_RCC_OscConfig+0x770>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a8b      	ldr	r2, [pc, #556]	@ (8002494 <HAL_RCC_OscConfig+0x770>)
 8002266:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800226a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800226c:	f7ff f942 	bl	80014f4 <HAL_GetTick>
 8002270:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002272:	e008      	b.n	8002286 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002274:	f7ff f93e 	bl	80014f4 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b64      	cmp	r3, #100	@ 0x64
 8002280:	d901      	bls.n	8002286 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e1a0      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002286:	4b83      	ldr	r3, [pc, #524]	@ (8002494 <HAL_RCC_OscConfig+0x770>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800228e:	2b00      	cmp	r3, #0
 8002290:	d0f0      	beq.n	8002274 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	2b01      	cmp	r3, #1
 8002298:	d106      	bne.n	80022a8 <HAL_RCC_OscConfig+0x584>
 800229a:	4b7d      	ldr	r3, [pc, #500]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 800229c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800229e:	4a7c      	ldr	r2, [pc, #496]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022a0:	f043 0301 	orr.w	r3, r3, #1
 80022a4:	6713      	str	r3, [r2, #112]	@ 0x70
 80022a6:	e02d      	b.n	8002304 <HAL_RCC_OscConfig+0x5e0>
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	689b      	ldr	r3, [r3, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10c      	bne.n	80022ca <HAL_RCC_OscConfig+0x5a6>
 80022b0:	4b77      	ldr	r3, [pc, #476]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022b4:	4a76      	ldr	r2, [pc, #472]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022b6:	f023 0301 	bic.w	r3, r3, #1
 80022ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80022bc:	4b74      	ldr	r3, [pc, #464]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022c0:	4a73      	ldr	r2, [pc, #460]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022c2:	f023 0304 	bic.w	r3, r3, #4
 80022c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022c8:	e01c      	b.n	8002304 <HAL_RCC_OscConfig+0x5e0>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2b05      	cmp	r3, #5
 80022d0:	d10c      	bne.n	80022ec <HAL_RCC_OscConfig+0x5c8>
 80022d2:	4b6f      	ldr	r3, [pc, #444]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022d6:	4a6e      	ldr	r2, [pc, #440]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022d8:	f043 0304 	orr.w	r3, r3, #4
 80022dc:	6713      	str	r3, [r2, #112]	@ 0x70
 80022de:	4b6c      	ldr	r3, [pc, #432]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022e2:	4a6b      	ldr	r2, [pc, #428]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80022ea:	e00b      	b.n	8002304 <HAL_RCC_OscConfig+0x5e0>
 80022ec:	4b68      	ldr	r3, [pc, #416]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022f0:	4a67      	ldr	r2, [pc, #412]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022f2:	f023 0301 	bic.w	r3, r3, #1
 80022f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80022f8:	4b65      	ldr	r3, [pc, #404]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022fc:	4a64      	ldr	r2, [pc, #400]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80022fe:	f023 0304 	bic.w	r3, r3, #4
 8002302:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	689b      	ldr	r3, [r3, #8]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d015      	beq.n	8002338 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800230c:	f7ff f8f2 	bl	80014f4 <HAL_GetTick>
 8002310:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002312:	e00a      	b.n	800232a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002314:	f7ff f8ee 	bl	80014f4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e14e      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800232a:	4b59      	ldr	r3, [pc, #356]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 800232c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0ee      	beq.n	8002314 <HAL_RCC_OscConfig+0x5f0>
 8002336:	e014      	b.n	8002362 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002338:	f7ff f8dc 	bl	80014f4 <HAL_GetTick>
 800233c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800233e:	e00a      	b.n	8002356 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7ff f8d8 	bl	80014f4 <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e138      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002356:	4b4e      	ldr	r3, [pc, #312]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d1ee      	bne.n	8002340 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	2b00      	cmp	r3, #0
 8002368:	f000 812d 	beq.w	80025c6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800236c:	4b48      	ldr	r3, [pc, #288]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002374:	2b18      	cmp	r3, #24
 8002376:	f000 80bd 	beq.w	80024f4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800237e:	2b02      	cmp	r3, #2
 8002380:	f040 809e 	bne.w	80024c0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002384:	4b42      	ldr	r3, [pc, #264]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a41      	ldr	r2, [pc, #260]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 800238a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800238e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff f8b0 	bl	80014f4 <HAL_GetTick>
 8002394:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002398:	f7ff f8ac 	bl	80014f4 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e10e      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80023aa:	4b39      	ldr	r3, [pc, #228]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023b6:	4b36      	ldr	r3, [pc, #216]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80023ba:	4b37      	ldr	r3, [pc, #220]	@ (8002498 <HAL_RCC_OscConfig+0x774>)
 80023bc:	4013      	ands	r3, r2
 80023be:	687a      	ldr	r2, [r7, #4]
 80023c0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80023c6:	0112      	lsls	r2, r2, #4
 80023c8:	430a      	orrs	r2, r1
 80023ca:	4931      	ldr	r1, [pc, #196]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 80023cc:	4313      	orrs	r3, r2
 80023ce:	628b      	str	r3, [r1, #40]	@ 0x28
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d4:	3b01      	subs	r3, #1
 80023d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023de:	3b01      	subs	r3, #1
 80023e0:	025b      	lsls	r3, r3, #9
 80023e2:	b29b      	uxth	r3, r3
 80023e4:	431a      	orrs	r2, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023ea:	3b01      	subs	r3, #1
 80023ec:	041b      	lsls	r3, r3, #16
 80023ee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80023f2:	431a      	orrs	r2, r3
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023f8:	3b01      	subs	r3, #1
 80023fa:	061b      	lsls	r3, r3, #24
 80023fc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002400:	4923      	ldr	r1, [pc, #140]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002402:	4313      	orrs	r3, r2
 8002404:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002406:	4b22      	ldr	r3, [pc, #136]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800240a:	4a21      	ldr	r2, [pc, #132]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 800240c:	f023 0301 	bic.w	r3, r3, #1
 8002410:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002412:	4b1f      	ldr	r3, [pc, #124]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002414:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002416:	4b21      	ldr	r3, [pc, #132]	@ (800249c <HAL_RCC_OscConfig+0x778>)
 8002418:	4013      	ands	r3, r2
 800241a:	687a      	ldr	r2, [r7, #4]
 800241c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800241e:	00d2      	lsls	r2, r2, #3
 8002420:	491b      	ldr	r1, [pc, #108]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002422:	4313      	orrs	r3, r2
 8002424:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002426:	4b1a      	ldr	r3, [pc, #104]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002428:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800242a:	f023 020c 	bic.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002432:	4917      	ldr	r1, [pc, #92]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002434:	4313      	orrs	r3, r2
 8002436:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002438:	4b15      	ldr	r3, [pc, #84]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 800243a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800243c:	f023 0202 	bic.w	r2, r3, #2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002444:	4912      	ldr	r1, [pc, #72]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002446:	4313      	orrs	r3, r2
 8002448:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800244a:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 800244c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800244e:	4a10      	ldr	r2, [pc, #64]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002450:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002454:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002456:	4b0e      	ldr	r3, [pc, #56]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800245a:	4a0d      	ldr	r2, [pc, #52]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 800245c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002460:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002462:	4b0b      	ldr	r3, [pc, #44]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002466:	4a0a      	ldr	r2, [pc, #40]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002468:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800246c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800246e:	4b08      	ldr	r3, [pc, #32]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002470:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002472:	4a07      	ldr	r2, [pc, #28]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002474:	f043 0301 	orr.w	r3, r3, #1
 8002478:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800247a:	4b05      	ldr	r3, [pc, #20]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a04      	ldr	r2, [pc, #16]	@ (8002490 <HAL_RCC_OscConfig+0x76c>)
 8002480:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002484:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002486:	f7ff f835 	bl	80014f4 <HAL_GetTick>
 800248a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800248c:	e011      	b.n	80024b2 <HAL_RCC_OscConfig+0x78e>
 800248e:	bf00      	nop
 8002490:	58024400 	.word	0x58024400
 8002494:	58024800 	.word	0x58024800
 8002498:	fffffc0c 	.word	0xfffffc0c
 800249c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a0:	f7ff f828 	bl	80014f4 <HAL_GetTick>
 80024a4:	4602      	mov	r2, r0
 80024a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024a8:	1ad3      	subs	r3, r2, r3
 80024aa:	2b02      	cmp	r3, #2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e08a      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80024b2:	4b47      	ldr	r3, [pc, #284]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d0f0      	beq.n	80024a0 <HAL_RCC_OscConfig+0x77c>
 80024be:	e082      	b.n	80025c6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024c0:	4b43      	ldr	r3, [pc, #268]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a42      	ldr	r2, [pc, #264]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 80024c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80024ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024cc:	f7ff f812 	bl	80014f4 <HAL_GetTick>
 80024d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024d4:	f7ff f80e 	bl	80014f4 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e070      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80024e6:	4b3a      	ldr	r3, [pc, #232]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d1f0      	bne.n	80024d4 <HAL_RCC_OscConfig+0x7b0>
 80024f2:	e068      	b.n	80025c6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80024f4:	4b36      	ldr	r3, [pc, #216]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 80024f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80024fa:	4b35      	ldr	r3, [pc, #212]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 80024fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fe:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002504:	2b01      	cmp	r3, #1
 8002506:	d031      	beq.n	800256c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	f003 0203 	and.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d12a      	bne.n	800256c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	091b      	lsrs	r3, r3, #4
 800251a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002522:	429a      	cmp	r2, r3
 8002524:	d122      	bne.n	800256c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002530:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002532:	429a      	cmp	r2, r3
 8002534:	d11a      	bne.n	800256c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	0a5b      	lsrs	r3, r3, #9
 800253a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002542:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002544:	429a      	cmp	r2, r3
 8002546:	d111      	bne.n	800256c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	0c1b      	lsrs	r3, r3, #16
 800254c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002554:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002556:	429a      	cmp	r2, r3
 8002558:	d108      	bne.n	800256c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	0e1b      	lsrs	r3, r3, #24
 800255e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002566:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e02b      	b.n	80025c8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002570:	4b17      	ldr	r3, [pc, #92]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 8002572:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002574:	08db      	lsrs	r3, r3, #3
 8002576:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800257a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002580:	693a      	ldr	r2, [r7, #16]
 8002582:	429a      	cmp	r2, r3
 8002584:	d01f      	beq.n	80025c6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002586:	4b12      	ldr	r3, [pc, #72]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 8002588:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258a:	4a11      	ldr	r2, [pc, #68]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 800258c:	f023 0301 	bic.w	r3, r3, #1
 8002590:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002592:	f7fe ffaf 	bl	80014f4 <HAL_GetTick>
 8002596:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002598:	bf00      	nop
 800259a:	f7fe ffab 	bl	80014f4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d0f9      	beq.n	800259a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80025a6:	4b0a      	ldr	r3, [pc, #40]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 80025a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80025aa:	4b0a      	ldr	r3, [pc, #40]	@ (80025d4 <HAL_RCC_OscConfig+0x8b0>)
 80025ac:	4013      	ands	r3, r2
 80025ae:	687a      	ldr	r2, [r7, #4]
 80025b0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80025b2:	00d2      	lsls	r2, r2, #3
 80025b4:	4906      	ldr	r1, [pc, #24]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80025ba:	4b05      	ldr	r3, [pc, #20]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 80025bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025be:	4a04      	ldr	r2, [pc, #16]	@ (80025d0 <HAL_RCC_OscConfig+0x8ac>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80025c6:	2300      	movs	r3, #0
}
 80025c8:	4618      	mov	r0, r3
 80025ca:	3730      	adds	r7, #48	@ 0x30
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	58024400 	.word	0x58024400
 80025d4:	ffff0007 	.word	0xffff0007

080025d8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b086      	sub	sp, #24
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e19c      	b.n	8002926 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ec:	4b8a      	ldr	r3, [pc, #552]	@ (8002818 <HAL_RCC_ClockConfig+0x240>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 030f 	and.w	r3, r3, #15
 80025f4:	683a      	ldr	r2, [r7, #0]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d910      	bls.n	800261c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fa:	4b87      	ldr	r3, [pc, #540]	@ (8002818 <HAL_RCC_ClockConfig+0x240>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f023 020f 	bic.w	r2, r3, #15
 8002602:	4985      	ldr	r1, [pc, #532]	@ (8002818 <HAL_RCC_ClockConfig+0x240>)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	4313      	orrs	r3, r2
 8002608:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260a:	4b83      	ldr	r3, [pc, #524]	@ (8002818 <HAL_RCC_ClockConfig+0x240>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d001      	beq.n	800261c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e184      	b.n	8002926 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0304 	and.w	r3, r3, #4
 8002624:	2b00      	cmp	r3, #0
 8002626:	d010      	beq.n	800264a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	4b7b      	ldr	r3, [pc, #492]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002634:	429a      	cmp	r2, r3
 8002636:	d908      	bls.n	800264a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002638:	4b78      	ldr	r3, [pc, #480]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 800263a:	699b      	ldr	r3, [r3, #24]
 800263c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	691b      	ldr	r3, [r3, #16]
 8002644:	4975      	ldr	r1, [pc, #468]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 8002646:	4313      	orrs	r3, r2
 8002648:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0308 	and.w	r3, r3, #8
 8002652:	2b00      	cmp	r3, #0
 8002654:	d010      	beq.n	8002678 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	695a      	ldr	r2, [r3, #20]
 800265a:	4b70      	ldr	r3, [pc, #448]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002662:	429a      	cmp	r2, r3
 8002664:	d908      	bls.n	8002678 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002666:	4b6d      	ldr	r3, [pc, #436]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	695b      	ldr	r3, [r3, #20]
 8002672:	496a      	ldr	r1, [pc, #424]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 8002674:	4313      	orrs	r3, r2
 8002676:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0310 	and.w	r3, r3, #16
 8002680:	2b00      	cmp	r3, #0
 8002682:	d010      	beq.n	80026a6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	699a      	ldr	r2, [r3, #24]
 8002688:	4b64      	ldr	r3, [pc, #400]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 800268a:	69db      	ldr	r3, [r3, #28]
 800268c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002690:	429a      	cmp	r2, r3
 8002692:	d908      	bls.n	80026a6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002694:	4b61      	ldr	r3, [pc, #388]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 8002696:	69db      	ldr	r3, [r3, #28]
 8002698:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	699b      	ldr	r3, [r3, #24]
 80026a0:	495e      	ldr	r1, [pc, #376]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 0320 	and.w	r3, r3, #32
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d010      	beq.n	80026d4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	69da      	ldr	r2, [r3, #28]
 80026b6:	4b59      	ldr	r3, [pc, #356]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 80026b8:	6a1b      	ldr	r3, [r3, #32]
 80026ba:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026be:	429a      	cmp	r2, r3
 80026c0:	d908      	bls.n	80026d4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026c2:	4b56      	ldr	r3, [pc, #344]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 80026c4:	6a1b      	ldr	r3, [r3, #32]
 80026c6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69db      	ldr	r3, [r3, #28]
 80026ce:	4953      	ldr	r1, [pc, #332]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 80026d0:	4313      	orrs	r3, r2
 80026d2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d010      	beq.n	8002702 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	4b4d      	ldr	r3, [pc, #308]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d908      	bls.n	8002702 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026f0:	4b4a      	ldr	r3, [pc, #296]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 80026f2:	699b      	ldr	r3, [r3, #24]
 80026f4:	f023 020f 	bic.w	r2, r3, #15
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68db      	ldr	r3, [r3, #12]
 80026fc:	4947      	ldr	r1, [pc, #284]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 80026fe:	4313      	orrs	r3, r2
 8002700:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d055      	beq.n	80027ba <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800270e:	4b43      	ldr	r3, [pc, #268]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	4940      	ldr	r1, [pc, #256]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 800271c:	4313      	orrs	r3, r2
 800271e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	2b02      	cmp	r3, #2
 8002726:	d107      	bne.n	8002738 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002728:	4b3c      	ldr	r3, [pc, #240]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d121      	bne.n	8002778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002734:	2301      	movs	r3, #1
 8002736:	e0f6      	b.n	8002926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b03      	cmp	r3, #3
 800273e:	d107      	bne.n	8002750 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002740:	4b36      	ldr	r3, [pc, #216]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002748:	2b00      	cmp	r3, #0
 800274a:	d115      	bne.n	8002778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0ea      	b.n	8002926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002758:	4b30      	ldr	r3, [pc, #192]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002760:	2b00      	cmp	r3, #0
 8002762:	d109      	bne.n	8002778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e0de      	b.n	8002926 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002768:	4b2c      	ldr	r3, [pc, #176]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b00      	cmp	r3, #0
 8002772:	d101      	bne.n	8002778 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e0d6      	b.n	8002926 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002778:	4b28      	ldr	r3, [pc, #160]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 800277a:	691b      	ldr	r3, [r3, #16]
 800277c:	f023 0207 	bic.w	r2, r3, #7
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	4925      	ldr	r1, [pc, #148]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 8002786:	4313      	orrs	r3, r2
 8002788:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800278a:	f7fe feb3 	bl	80014f4 <HAL_GetTick>
 800278e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002790:	e00a      	b.n	80027a8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002792:	f7fe feaf 	bl	80014f4 <HAL_GetTick>
 8002796:	4602      	mov	r2, r0
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	1ad3      	subs	r3, r2, r3
 800279c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d901      	bls.n	80027a8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80027a4:	2303      	movs	r3, #3
 80027a6:	e0be      	b.n	8002926 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027a8:	4b1c      	ldr	r3, [pc, #112]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 80027aa:	691b      	ldr	r3, [r3, #16]
 80027ac:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	00db      	lsls	r3, r3, #3
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d1eb      	bne.n	8002792 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d010      	beq.n	80027e8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	68da      	ldr	r2, [r3, #12]
 80027ca:	4b14      	ldr	r3, [pc, #80]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 80027cc:	699b      	ldr	r3, [r3, #24]
 80027ce:	f003 030f 	and.w	r3, r3, #15
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d208      	bcs.n	80027e8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d6:	4b11      	ldr	r3, [pc, #68]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 80027d8:	699b      	ldr	r3, [r3, #24]
 80027da:	f023 020f 	bic.w	r2, r3, #15
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	490e      	ldr	r1, [pc, #56]	@ (800281c <HAL_RCC_ClockConfig+0x244>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027e8:	4b0b      	ldr	r3, [pc, #44]	@ (8002818 <HAL_RCC_ClockConfig+0x240>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f003 030f 	and.w	r3, r3, #15
 80027f0:	683a      	ldr	r2, [r7, #0]
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d214      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027f6:	4b08      	ldr	r3, [pc, #32]	@ (8002818 <HAL_RCC_ClockConfig+0x240>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f023 020f 	bic.w	r2, r3, #15
 80027fe:	4906      	ldr	r1, [pc, #24]	@ (8002818 <HAL_RCC_ClockConfig+0x240>)
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	4313      	orrs	r3, r2
 8002804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b04      	ldr	r3, [pc, #16]	@ (8002818 <HAL_RCC_ClockConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 030f 	and.w	r3, r3, #15
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d005      	beq.n	8002820 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e086      	b.n	8002926 <HAL_RCC_ClockConfig+0x34e>
 8002818:	52002000 	.word	0x52002000
 800281c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d010      	beq.n	800284e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	4b3f      	ldr	r3, [pc, #252]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002838:	429a      	cmp	r2, r3
 800283a:	d208      	bcs.n	800284e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800283c:	4b3c      	ldr	r3, [pc, #240]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	691b      	ldr	r3, [r3, #16]
 8002848:	4939      	ldr	r1, [pc, #228]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 800284a:	4313      	orrs	r3, r2
 800284c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 0308 	and.w	r3, r3, #8
 8002856:	2b00      	cmp	r3, #0
 8002858:	d010      	beq.n	800287c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	695a      	ldr	r2, [r3, #20]
 800285e:	4b34      	ldr	r3, [pc, #208]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002866:	429a      	cmp	r2, r3
 8002868:	d208      	bcs.n	800287c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800286a:	4b31      	ldr	r3, [pc, #196]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 800286c:	69db      	ldr	r3, [r3, #28]
 800286e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	492e      	ldr	r1, [pc, #184]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 8002878:	4313      	orrs	r3, r2
 800287a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f003 0310 	and.w	r3, r3, #16
 8002884:	2b00      	cmp	r3, #0
 8002886:	d010      	beq.n	80028aa <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	699a      	ldr	r2, [r3, #24]
 800288c:	4b28      	ldr	r3, [pc, #160]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 800288e:	69db      	ldr	r3, [r3, #28]
 8002890:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002894:	429a      	cmp	r2, r3
 8002896:	d208      	bcs.n	80028aa <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002898:	4b25      	ldr	r3, [pc, #148]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 800289a:	69db      	ldr	r3, [r3, #28]
 800289c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	699b      	ldr	r3, [r3, #24]
 80028a4:	4922      	ldr	r1, [pc, #136]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d010      	beq.n	80028d8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	69da      	ldr	r2, [r3, #28]
 80028ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80028c2:	429a      	cmp	r2, r3
 80028c4:	d208      	bcs.n	80028d8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80028c6:	4b1a      	ldr	r3, [pc, #104]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 80028c8:	6a1b      	ldr	r3, [r3, #32]
 80028ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	69db      	ldr	r3, [r3, #28]
 80028d2:	4917      	ldr	r1, [pc, #92]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 80028d4:	4313      	orrs	r3, r2
 80028d6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80028d8:	f000 f834 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 80028dc:	4602      	mov	r2, r0
 80028de:	4b14      	ldr	r3, [pc, #80]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 80028e0:	699b      	ldr	r3, [r3, #24]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	4912      	ldr	r1, [pc, #72]	@ (8002934 <HAL_RCC_ClockConfig+0x35c>)
 80028ea:	5ccb      	ldrb	r3, [r1, r3]
 80028ec:	f003 031f 	and.w	r3, r3, #31
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
 80028f4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80028f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_RCC_ClockConfig+0x358>)
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	f003 030f 	and.w	r3, r3, #15
 80028fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002934 <HAL_RCC_ClockConfig+0x35c>)
 8002900:	5cd3      	ldrb	r3, [r2, r3]
 8002902:	f003 031f 	and.w	r3, r3, #31
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	fa22 f303 	lsr.w	r3, r2, r3
 800290c:	4a0a      	ldr	r2, [pc, #40]	@ (8002938 <HAL_RCC_ClockConfig+0x360>)
 800290e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002910:	4a0a      	ldr	r2, [pc, #40]	@ (800293c <HAL_RCC_ClockConfig+0x364>)
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002916:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <HAL_RCC_ClockConfig+0x368>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f7fe fda0 	bl	8001460 <HAL_InitTick>
 8002920:	4603      	mov	r3, r0
 8002922:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002924:	7bfb      	ldrb	r3, [r7, #15]
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	58024400 	.word	0x58024400
 8002934:	08006aac 	.word	0x08006aac
 8002938:	24000004 	.word	0x24000004
 800293c:	24000000 	.word	0x24000000
 8002940:	24000024 	.word	0x24000024

08002944 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002944:	b480      	push	{r7}
 8002946:	b089      	sub	sp, #36	@ 0x24
 8002948:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800294a:	4bb3      	ldr	r3, [pc, #716]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800294c:	691b      	ldr	r3, [r3, #16]
 800294e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002952:	2b18      	cmp	r3, #24
 8002954:	f200 8155 	bhi.w	8002c02 <HAL_RCC_GetSysClockFreq+0x2be>
 8002958:	a201      	add	r2, pc, #4	@ (adr r2, 8002960 <HAL_RCC_GetSysClockFreq+0x1c>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	080029c5 	.word	0x080029c5
 8002964:	08002c03 	.word	0x08002c03
 8002968:	08002c03 	.word	0x08002c03
 800296c:	08002c03 	.word	0x08002c03
 8002970:	08002c03 	.word	0x08002c03
 8002974:	08002c03 	.word	0x08002c03
 8002978:	08002c03 	.word	0x08002c03
 800297c:	08002c03 	.word	0x08002c03
 8002980:	080029eb 	.word	0x080029eb
 8002984:	08002c03 	.word	0x08002c03
 8002988:	08002c03 	.word	0x08002c03
 800298c:	08002c03 	.word	0x08002c03
 8002990:	08002c03 	.word	0x08002c03
 8002994:	08002c03 	.word	0x08002c03
 8002998:	08002c03 	.word	0x08002c03
 800299c:	08002c03 	.word	0x08002c03
 80029a0:	080029f1 	.word	0x080029f1
 80029a4:	08002c03 	.word	0x08002c03
 80029a8:	08002c03 	.word	0x08002c03
 80029ac:	08002c03 	.word	0x08002c03
 80029b0:	08002c03 	.word	0x08002c03
 80029b4:	08002c03 	.word	0x08002c03
 80029b8:	08002c03 	.word	0x08002c03
 80029bc:	08002c03 	.word	0x08002c03
 80029c0:	080029f7 	.word	0x080029f7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029c4:	4b94      	ldr	r3, [pc, #592]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0320 	and.w	r3, r3, #32
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d009      	beq.n	80029e4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029d0:	4b91      	ldr	r3, [pc, #580]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	08db      	lsrs	r3, r3, #3
 80029d6:	f003 0303 	and.w	r3, r3, #3
 80029da:	4a90      	ldr	r2, [pc, #576]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029dc:	fa22 f303 	lsr.w	r3, r2, r3
 80029e0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80029e2:	e111      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80029e4:	4b8d      	ldr	r3, [pc, #564]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80029e6:	61bb      	str	r3, [r7, #24]
      break;
 80029e8:	e10e      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80029ea:	4b8d      	ldr	r3, [pc, #564]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029ec:	61bb      	str	r3, [r7, #24]
      break;
 80029ee:	e10b      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80029f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002c24 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80029f2:	61bb      	str	r3, [r7, #24]
      break;
 80029f4:	e108      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80029f6:	4b88      	ldr	r3, [pc, #544]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002a00:	4b85      	ldr	r3, [pc, #532]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a04:	091b      	lsrs	r3, r3, #4
 8002a06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a0a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002a0c:	4b82      	ldr	r3, [pc, #520]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a10:	f003 0301 	and.w	r3, r3, #1
 8002a14:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002a16:	4b80      	ldr	r3, [pc, #512]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a1a:	08db      	lsrs	r3, r3, #3
 8002a1c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	fb02 f303 	mul.w	r3, r2, r3
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a2e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	f000 80e1 	beq.w	8002bfc <HAL_RCC_GetSysClockFreq+0x2b8>
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	2b02      	cmp	r3, #2
 8002a3e:	f000 8083 	beq.w	8002b48 <HAL_RCC_GetSysClockFreq+0x204>
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	f200 80a1 	bhi.w	8002b8c <HAL_RCC_GetSysClockFreq+0x248>
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d003      	beq.n	8002a58 <HAL_RCC_GetSysClockFreq+0x114>
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d056      	beq.n	8002b04 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002a56:	e099      	b.n	8002b8c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002a58:	4b6f      	ldr	r3, [pc, #444]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f003 0320 	and.w	r3, r3, #32
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d02d      	beq.n	8002ac0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002a64:	4b6c      	ldr	r3, [pc, #432]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	08db      	lsrs	r3, r3, #3
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	4a6b      	ldr	r2, [pc, #428]	@ (8002c1c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a70:	fa22 f303 	lsr.w	r3, r2, r3
 8002a74:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a8e:	4b62      	ldr	r3, [pc, #392]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a9e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aa2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ab2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ab6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002aba:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002abe:	e087      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	ee07 3a90 	vmov	s15, r3
 8002ac6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002aca:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002c2c <HAL_RCC_GetSysClockFreq+0x2e8>
 8002ace:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ad2:	4b51      	ldr	r3, [pc, #324]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ae2:	ed97 6a02 	vldr	s12, [r7, #8]
 8002ae6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002aea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002af2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002af6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002afa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002afe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b02:	e065      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b04:	693b      	ldr	r3, [r7, #16]
 8002b06:	ee07 3a90 	vmov	s15, r3
 8002b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b0e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002c30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b16:	4b40      	ldr	r3, [pc, #256]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b26:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b2a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b42:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b46:	e043      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b52:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002c34 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002b56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b5a:	4b2f      	ldr	r3, [pc, #188]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b62:	ee07 3a90 	vmov	s15, r3
 8002b66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b6a:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b6e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b86:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b8a:	e021      	b.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	ee07 3a90 	vmov	s15, r3
 8002b92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b96:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002c30 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b9e:	4b1e      	ldr	r3, [pc, #120]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ba2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bae:	ed97 6a02 	vldr	s12, [r7, #8]
 8002bb2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002c28 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002bb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bbe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bca:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002bce:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002bd0:	4b11      	ldr	r3, [pc, #68]	@ (8002c18 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd4:	0a5b      	lsrs	r3, r3, #9
 8002bd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bda:	3301      	adds	r3, #1
 8002bdc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	ee07 3a90 	vmov	s15, r3
 8002be4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002be8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bf4:	ee17 3a90 	vmov	r3, s15
 8002bf8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002bfa:	e005      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	61bb      	str	r3, [r7, #24]
      break;
 8002c00:	e002      	b.n	8002c08 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002c02:	4b07      	ldr	r3, [pc, #28]	@ (8002c20 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002c04:	61bb      	str	r3, [r7, #24]
      break;
 8002c06:	bf00      	nop
  }

  return sysclockfreq;
 8002c08:	69bb      	ldr	r3, [r7, #24]
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3724      	adds	r7, #36	@ 0x24
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	03d09000 	.word	0x03d09000
 8002c20:	003d0900 	.word	0x003d0900
 8002c24:	017d7840 	.word	0x017d7840
 8002c28:	46000000 	.word	0x46000000
 8002c2c:	4c742400 	.word	0x4c742400
 8002c30:	4a742400 	.word	0x4a742400
 8002c34:	4bbebc20 	.word	0x4bbebc20

08002c38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c38:	b580      	push	{r7, lr}
 8002c3a:	b082      	sub	sp, #8
 8002c3c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002c3e:	f7ff fe81 	bl	8002944 <HAL_RCC_GetSysClockFreq>
 8002c42:	4602      	mov	r2, r0
 8002c44:	4b10      	ldr	r3, [pc, #64]	@ (8002c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c46:	699b      	ldr	r3, [r3, #24]
 8002c48:	0a1b      	lsrs	r3, r3, #8
 8002c4a:	f003 030f 	and.w	r3, r3, #15
 8002c4e:	490f      	ldr	r1, [pc, #60]	@ (8002c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8002c50:	5ccb      	ldrb	r3, [r1, r3]
 8002c52:	f003 031f 	and.w	r3, r3, #31
 8002c56:	fa22 f303 	lsr.w	r3, r2, r3
 8002c5a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8002c88 <HAL_RCC_GetHCLKFreq+0x50>)
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	f003 030f 	and.w	r3, r3, #15
 8002c64:	4a09      	ldr	r2, [pc, #36]	@ (8002c8c <HAL_RCC_GetHCLKFreq+0x54>)
 8002c66:	5cd3      	ldrb	r3, [r2, r3]
 8002c68:	f003 031f 	and.w	r3, r3, #31
 8002c6c:	687a      	ldr	r2, [r7, #4]
 8002c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8002c72:	4a07      	ldr	r2, [pc, #28]	@ (8002c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c74:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c76:	4a07      	ldr	r2, [pc, #28]	@ (8002c94 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c7c:	4b04      	ldr	r3, [pc, #16]	@ (8002c90 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
}
 8002c80:	4618      	mov	r0, r3
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	58024400 	.word	0x58024400
 8002c8c:	08006aac 	.word	0x08006aac
 8002c90:	24000004 	.word	0x24000004
 8002c94:	24000000 	.word	0x24000000

08002c98 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c9c:	f7ff ffcc 	bl	8002c38 <HAL_RCC_GetHCLKFreq>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	4b06      	ldr	r3, [pc, #24]	@ (8002cbc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	091b      	lsrs	r3, r3, #4
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	4904      	ldr	r1, [pc, #16]	@ (8002cc0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002cae:	5ccb      	ldrb	r3, [r1, r3]
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	58024400 	.word	0x58024400
 8002cc0:	08006aac 	.word	0x08006aac

08002cc4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002cc8:	f7ff ffb6 	bl	8002c38 <HAL_RCC_GetHCLKFreq>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	4b06      	ldr	r3, [pc, #24]	@ (8002ce8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	0a1b      	lsrs	r3, r3, #8
 8002cd4:	f003 0307 	and.w	r3, r3, #7
 8002cd8:	4904      	ldr	r1, [pc, #16]	@ (8002cec <HAL_RCC_GetPCLK2Freq+0x28>)
 8002cda:	5ccb      	ldrb	r3, [r1, r3]
 8002cdc:	f003 031f 	and.w	r3, r3, #31
 8002ce0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	58024400 	.word	0x58024400
 8002cec:	08006aac 	.word	0x08006aac

08002cf0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002cf4:	b0ca      	sub	sp, #296	@ 0x128
 8002cf6:	af00      	add	r7, sp, #0
 8002cf8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002d02:	2300      	movs	r3, #0
 8002d04:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d10:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002d14:	2500      	movs	r5, #0
 8002d16:	ea54 0305 	orrs.w	r3, r4, r5
 8002d1a:	d049      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002d1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d20:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d22:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d26:	d02f      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002d28:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002d2c:	d828      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d2e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d32:	d01a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002d34:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002d38:	d822      	bhi.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d003      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d3e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002d42:	d007      	beq.n	8002d54 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002d44:	e01c      	b.n	8002d80 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d46:	4bb8      	ldr	r3, [pc, #736]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	4ab7      	ldr	r2, [pc, #732]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d50:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d52:	e01a      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002d54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d58:	3308      	adds	r3, #8
 8002d5a:	2102      	movs	r1, #2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f001 fc8f 	bl	8004680 <RCCEx_PLL2_Config>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d68:	e00f      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002d6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d6e:	3328      	adds	r3, #40	@ 0x28
 8002d70:	2102      	movs	r1, #2
 8002d72:	4618      	mov	r0, r3
 8002d74:	f001 fd36 	bl	80047e4 <RCCEx_PLL3_Config>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002d7e:	e004      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002d86:	e000      	b.n	8002d8a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002d88:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d8a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10a      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8002d92:	4ba5      	ldr	r3, [pc, #660]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002d94:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d96:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002d9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d9e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002da0:	4aa1      	ldr	r2, [pc, #644]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002da2:	430b      	orrs	r3, r1
 8002da4:	6513      	str	r3, [r2, #80]	@ 0x50
 8002da6:	e003      	b.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002da8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002db0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8002dbc:	f04f 0900 	mov.w	r9, #0
 8002dc0:	ea58 0309 	orrs.w	r3, r8, r9
 8002dc4:	d047      	beq.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8002dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d82a      	bhi.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002dd0:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002dd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd6:	bf00      	nop
 8002dd8:	08002ded 	.word	0x08002ded
 8002ddc:	08002dfb 	.word	0x08002dfb
 8002de0:	08002e11 	.word	0x08002e11
 8002de4:	08002e2f 	.word	0x08002e2f
 8002de8:	08002e2f 	.word	0x08002e2f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dec:	4b8e      	ldr	r3, [pc, #568]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002df0:	4a8d      	ldr	r2, [pc, #564]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002df2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002df6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002df8:	e01a      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dfe:	3308      	adds	r3, #8
 8002e00:	2100      	movs	r1, #0
 8002e02:	4618      	mov	r0, r3
 8002e04:	f001 fc3c 	bl	8004680 <RCCEx_PLL2_Config>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e0e:	e00f      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002e10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e14:	3328      	adds	r3, #40	@ 0x28
 8002e16:	2100      	movs	r1, #0
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f001 fce3 	bl	80047e4 <RCCEx_PLL3_Config>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002e24:	e004      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002e2c:	e000      	b.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10a      	bne.n	8002e4e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e38:	4b7b      	ldr	r3, [pc, #492]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002e3c:	f023 0107 	bic.w	r1, r3, #7
 8002e40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e46:	4a78      	ldr	r2, [pc, #480]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e48:	430b      	orrs	r3, r1
 8002e4a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002e4c:	e003      	b.n	8002e56 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002e52:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002e56:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 8002e62:	f04f 0b00 	mov.w	fp, #0
 8002e66:	ea5a 030b 	orrs.w	r3, sl, fp
 8002e6a:	d04c      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002e6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e70:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e76:	d030      	beq.n	8002eda <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002e78:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002e7c:	d829      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e7e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e80:	d02d      	beq.n	8002ede <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8002e82:	2bc0      	cmp	r3, #192	@ 0xc0
 8002e84:	d825      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e86:	2b80      	cmp	r3, #128	@ 0x80
 8002e88:	d018      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002e8a:	2b80      	cmp	r3, #128	@ 0x80
 8002e8c:	d821      	bhi.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d002      	beq.n	8002e98 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8002e92:	2b40      	cmp	r3, #64	@ 0x40
 8002e94:	d007      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002e96:	e01c      	b.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e98:	4b63      	ldr	r3, [pc, #396]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e9c:	4a62      	ldr	r2, [pc, #392]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002e9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ea2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ea4:	e01c      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002ea6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002eaa:	3308      	adds	r3, #8
 8002eac:	2100      	movs	r1, #0
 8002eae:	4618      	mov	r0, r3
 8002eb0:	f001 fbe6 	bl	8004680 <RCCEx_PLL2_Config>
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002eba:	e011      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ec0:	3328      	adds	r3, #40	@ 0x28
 8002ec2:	2100      	movs	r1, #0
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f001 fc8d 	bl	80047e4 <RCCEx_PLL3_Config>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002ed0:	e006      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002ed8:	e002      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002ede:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8002ee8:	4b4f      	ldr	r3, [pc, #316]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eec:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8002ef0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ef6:	4a4c      	ldr	r2, [pc, #304]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002ef8:	430b      	orrs	r3, r1
 8002efa:	6513      	str	r3, [r2, #80]	@ 0x50
 8002efc:	e003      	b.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002efe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8002f06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8002f12:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002f16:	2300      	movs	r3, #0
 8002f18:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002f1c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8002f20:	460b      	mov	r3, r1
 8002f22:	4313      	orrs	r3, r2
 8002f24:	d053      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002f26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f2a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002f2e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f32:	d035      	beq.n	8002fa0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002f34:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002f38:	d82e      	bhi.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f3a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f3e:	d031      	beq.n	8002fa4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002f40:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002f44:	d828      	bhi.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f46:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f4a:	d01a      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002f4c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f50:	d822      	bhi.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002f56:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f5a:	d007      	beq.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002f5c:	e01c      	b.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002f5e:	4b32      	ldr	r3, [pc, #200]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f62:	4a31      	ldr	r2, [pc, #196]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002f68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f6a:	e01c      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002f6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f70:	3308      	adds	r3, #8
 8002f72:	2100      	movs	r1, #0
 8002f74:	4618      	mov	r0, r3
 8002f76:	f001 fb83 	bl	8004680 <RCCEx_PLL2_Config>
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002f80:	e011      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f86:	3328      	adds	r3, #40	@ 0x28
 8002f88:	2100      	movs	r1, #0
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	f001 fc2a 	bl	80047e4 <RCCEx_PLL3_Config>
 8002f90:	4603      	mov	r3, r0
 8002f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002f96:	e006      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f9e:	e002      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002fa0:	bf00      	nop
 8002fa2:	e000      	b.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d10b      	bne.n	8002fc6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002fae:	4b1e      	ldr	r3, [pc, #120]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fb2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8002fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fba:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8002fbe:	4a1a      	ldr	r2, [pc, #104]	@ (8003028 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002fc0:	430b      	orrs	r3, r1
 8002fc2:	6593      	str	r3, [r2, #88]	@ 0x58
 8002fc4:	e003      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fca:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8002fda:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002fde:	2300      	movs	r3, #0
 8002fe0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002fe4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8002fe8:	460b      	mov	r3, r1
 8002fea:	4313      	orrs	r3, r2
 8002fec:	d056      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002fee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ff2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002ff6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ffa:	d038      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002ffc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003000:	d831      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003002:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003006:	d034      	beq.n	8003072 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003008:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800300c:	d82b      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800300e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003012:	d01d      	beq.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003014:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003018:	d825      	bhi.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800301a:	2b00      	cmp	r3, #0
 800301c:	d006      	beq.n	800302c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800301e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003022:	d00a      	beq.n	800303a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003024:	e01f      	b.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003026:	bf00      	nop
 8003028:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800302c:	4ba2      	ldr	r3, [pc, #648]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800302e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003030:	4aa1      	ldr	r2, [pc, #644]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003032:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003036:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003038:	e01c      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800303a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303e:	3308      	adds	r3, #8
 8003040:	2100      	movs	r1, #0
 8003042:	4618      	mov	r0, r3
 8003044:	f001 fb1c 	bl	8004680 <RCCEx_PLL2_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800304e:	e011      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003050:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003054:	3328      	adds	r3, #40	@ 0x28
 8003056:	2100      	movs	r1, #0
 8003058:	4618      	mov	r0, r3
 800305a:	f001 fbc3 	bl	80047e4 <RCCEx_PLL3_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003064:	e006      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800306c:	e002      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800306e:	bf00      	nop
 8003070:	e000      	b.n	8003074 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003072:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003074:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003078:	2b00      	cmp	r3, #0
 800307a:	d10b      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800307c:	4b8e      	ldr	r3, [pc, #568]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800307e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003080:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8003084:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003088:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800308c:	4a8a      	ldr	r2, [pc, #552]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800308e:	430b      	orrs	r3, r1
 8003090:	6593      	str	r3, [r2, #88]	@ 0x58
 8003092:	e003      	b.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003094:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003098:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800309c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030a4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80030a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80030ac:	2300      	movs	r3, #0
 80030ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80030b2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80030b6:	460b      	mov	r3, r1
 80030b8:	4313      	orrs	r3, r2
 80030ba:	d03a      	beq.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80030bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80030c2:	2b30      	cmp	r3, #48	@ 0x30
 80030c4:	d01f      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80030c6:	2b30      	cmp	r3, #48	@ 0x30
 80030c8:	d819      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030ca:	2b20      	cmp	r3, #32
 80030cc:	d00c      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d815      	bhi.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d019      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80030d6:	2b10      	cmp	r3, #16
 80030d8:	d111      	bne.n	80030fe <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80030da:	4b77      	ldr	r3, [pc, #476]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030de:	4a76      	ldr	r2, [pc, #472]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80030e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030e6:	e011      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80030e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030ec:	3308      	adds	r3, #8
 80030ee:	2102      	movs	r1, #2
 80030f0:	4618      	mov	r0, r3
 80030f2:	f001 fac5 	bl	8004680 <RCCEx_PLL2_Config>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80030fc:	e006      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003104:	e002      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003106:	bf00      	nop
 8003108:	e000      	b.n	800310c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800310a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800310c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003110:	2b00      	cmp	r3, #0
 8003112:	d10a      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003114:	4b68      	ldr	r3, [pc, #416]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003116:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003118:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800311c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003122:	4a65      	ldr	r2, [pc, #404]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003124:	430b      	orrs	r3, r1
 8003126:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003128:	e003      	b.n	8003132 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800312a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800312e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8003132:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800313a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800313e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8003142:	2300      	movs	r3, #0
 8003144:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8003148:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800314c:	460b      	mov	r3, r1
 800314e:	4313      	orrs	r3, r2
 8003150:	d051      	beq.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003152:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003156:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003158:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800315c:	d035      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800315e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003162:	d82e      	bhi.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003164:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8003168:	d031      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800316a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800316e:	d828      	bhi.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003170:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003174:	d01a      	beq.n	80031ac <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003176:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800317a:	d822      	bhi.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800317c:	2b00      	cmp	r3, #0
 800317e:	d003      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003180:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003184:	d007      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003186:	e01c      	b.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003188:	4b4b      	ldr	r3, [pc, #300]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800318a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800318c:	4a4a      	ldr	r2, [pc, #296]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800318e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003192:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003194:	e01c      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003196:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800319a:	3308      	adds	r3, #8
 800319c:	2100      	movs	r1, #0
 800319e:	4618      	mov	r0, r3
 80031a0:	f001 fa6e 	bl	8004680 <RCCEx_PLL2_Config>
 80031a4:	4603      	mov	r3, r0
 80031a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031aa:	e011      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80031ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b0:	3328      	adds	r3, #40	@ 0x28
 80031b2:	2100      	movs	r1, #0
 80031b4:	4618      	mov	r0, r3
 80031b6:	f001 fb15 	bl	80047e4 <RCCEx_PLL3_Config>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80031c0:	e006      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031c8:	e002      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031ca:	bf00      	nop
 80031cc:	e000      	b.n	80031d0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80031ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d10a      	bne.n	80031ee <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80031d8:	4b37      	ldr	r3, [pc, #220]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80031dc:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80031e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80031e6:	4a34      	ldr	r2, [pc, #208]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80031e8:	430b      	orrs	r3, r1
 80031ea:	6513      	str	r3, [r2, #80]	@ 0x50
 80031ec:	e003      	b.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80031f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031fe:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8003202:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003206:	2300      	movs	r3, #0
 8003208:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800320c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8003210:	460b      	mov	r3, r1
 8003212:	4313      	orrs	r3, r2
 8003214:	d056      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003216:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800321a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800321c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003220:	d033      	beq.n	800328a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003222:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003226:	d82c      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003228:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800322c:	d02f      	beq.n	800328e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800322e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003232:	d826      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003234:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003238:	d02b      	beq.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800323a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800323e:	d820      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003244:	d012      	beq.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003246:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800324a:	d81a      	bhi.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800324c:	2b00      	cmp	r3, #0
 800324e:	d022      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003254:	d115      	bne.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003256:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800325a:	3308      	adds	r3, #8
 800325c:	2101      	movs	r1, #1
 800325e:	4618      	mov	r0, r3
 8003260:	f001 fa0e 	bl	8004680 <RCCEx_PLL2_Config>
 8003264:	4603      	mov	r3, r0
 8003266:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800326a:	e015      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003270:	3328      	adds	r3, #40	@ 0x28
 8003272:	2101      	movs	r1, #1
 8003274:	4618      	mov	r0, r3
 8003276:	f001 fab5 	bl	80047e4 <RCCEx_PLL3_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003280:	e00a      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003288:	e006      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800328a:	bf00      	nop
 800328c:	e004      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800328e:	bf00      	nop
 8003290:	e002      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003292:	bf00      	nop
 8003294:	e000      	b.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003296:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003298:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10d      	bne.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80032a0:	4b05      	ldr	r3, [pc, #20]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032a4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 80032a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032ac:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80032ae:	4a02      	ldr	r2, [pc, #8]	@ (80032b8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80032b0:	430b      	orrs	r3, r1
 80032b2:	6513      	str	r3, [r2, #80]	@ 0x50
 80032b4:	e006      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80032b6:	bf00      	nop
 80032b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80032c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032cc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 80032d0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80032da:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 80032de:	460b      	mov	r3, r1
 80032e0:	4313      	orrs	r3, r2
 80032e2:	d055      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80032e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032e8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80032ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032f0:	d033      	beq.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80032f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80032f6:	d82c      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 80032f8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80032fc:	d02f      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003302:	d826      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003304:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003308:	d02b      	beq.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800330a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800330e:	d820      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003310:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003314:	d012      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003316:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800331a:	d81a      	bhi.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800331c:	2b00      	cmp	r3, #0
 800331e:	d022      	beq.n	8003366 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003320:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003324:	d115      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800332a:	3308      	adds	r3, #8
 800332c:	2101      	movs	r1, #1
 800332e:	4618      	mov	r0, r3
 8003330:	f001 f9a6 	bl	8004680 <RCCEx_PLL2_Config>
 8003334:	4603      	mov	r3, r0
 8003336:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800333a:	e015      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800333c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003340:	3328      	adds	r3, #40	@ 0x28
 8003342:	2101      	movs	r1, #1
 8003344:	4618      	mov	r0, r3
 8003346:	f001 fa4d 	bl	80047e4 <RCCEx_PLL3_Config>
 800334a:	4603      	mov	r3, r0
 800334c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003350:	e00a      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003358:	e006      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800335a:	bf00      	nop
 800335c:	e004      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800335e:	bf00      	nop
 8003360:	e002      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003362:	bf00      	nop
 8003364:	e000      	b.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003366:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003368:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800336c:	2b00      	cmp	r3, #0
 800336e:	d10b      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003370:	4ba3      	ldr	r3, [pc, #652]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8003380:	4a9f      	ldr	r2, [pc, #636]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003382:	430b      	orrs	r3, r1
 8003384:	6593      	str	r3, [r2, #88]	@ 0x58
 8003386:	e003      	b.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003388:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800338c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003390:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003398:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800339c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80033a0:	2300      	movs	r3, #0
 80033a2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80033a6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80033aa:	460b      	mov	r3, r1
 80033ac:	4313      	orrs	r3, r2
 80033ae:	d037      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80033b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80033b6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033ba:	d00e      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80033bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80033c0:	d816      	bhi.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d018      	beq.n	80033f8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80033c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80033ca:	d111      	bne.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80033cc:	4b8c      	ldr	r3, [pc, #560]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033d0:	4a8b      	ldr	r2, [pc, #556]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80033d2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80033d6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033d8:	e00f      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80033da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033de:	3308      	adds	r3, #8
 80033e0:	2101      	movs	r1, #1
 80033e2:	4618      	mov	r0, r3
 80033e4:	f001 f94c 	bl	8004680 <RCCEx_PLL2_Config>
 80033e8:	4603      	mov	r3, r0
 80033ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80033ee:	e004      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80033f6:	e000      	b.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80033f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d10a      	bne.n	8003418 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003402:	4b7f      	ldr	r3, [pc, #508]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003406:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800340a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800340e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003410:	4a7b      	ldr	r2, [pc, #492]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003412:	430b      	orrs	r3, r1
 8003414:	6513      	str	r3, [r2, #80]	@ 0x50
 8003416:	e003      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003418:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800341c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003420:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003424:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003428:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800342c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003430:	2300      	movs	r3, #0
 8003432:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8003436:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800343a:	460b      	mov	r3, r1
 800343c:	4313      	orrs	r3, r2
 800343e:	d039      	beq.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003440:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003444:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003446:	2b03      	cmp	r3, #3
 8003448:	d81c      	bhi.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800344a:	a201      	add	r2, pc, #4	@ (adr r2, 8003450 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800344c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003450:	0800348d 	.word	0x0800348d
 8003454:	08003461 	.word	0x08003461
 8003458:	0800346f 	.word	0x0800346f
 800345c:	0800348d 	.word	0x0800348d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003460:	4b67      	ldr	r3, [pc, #412]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003464:	4a66      	ldr	r2, [pc, #408]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003466:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800346a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800346c:	e00f      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800346e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003472:	3308      	adds	r3, #8
 8003474:	2102      	movs	r1, #2
 8003476:	4618      	mov	r0, r3
 8003478:	f001 f902 	bl	8004680 <RCCEx_PLL2_Config>
 800347c:	4603      	mov	r3, r0
 800347e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003482:	e004      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800348a:	e000      	b.n	800348e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800348c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800348e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003492:	2b00      	cmp	r3, #0
 8003494:	d10a      	bne.n	80034ac <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003496:	4b5a      	ldr	r3, [pc, #360]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003498:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800349a:	f023 0103 	bic.w	r1, r3, #3
 800349e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80034a4:	4a56      	ldr	r2, [pc, #344]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80034a6:	430b      	orrs	r3, r1
 80034a8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80034aa:	e003      	b.n	80034b4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034ac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80034b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034bc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 80034c0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80034c4:	2300      	movs	r3, #0
 80034c6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80034ca:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 80034ce:	460b      	mov	r3, r1
 80034d0:	4313      	orrs	r3, r2
 80034d2:	f000 809f 	beq.w	8003614 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034d6:	4b4b      	ldr	r3, [pc, #300]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a4a      	ldr	r2, [pc, #296]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80034dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034e0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034e2:	f7fe f807 	bl	80014f4 <HAL_GetTick>
 80034e6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034ea:	e00b      	b.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ec:	f7fe f802 	bl	80014f4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	@ 0x64
 80034fa:	d903      	bls.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003502:	e005      	b.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003504:	4b3f      	ldr	r3, [pc, #252]	@ (8003604 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d0ed      	beq.n	80034ec <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003510:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003514:	2b00      	cmp	r3, #0
 8003516:	d179      	bne.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003518:	4b39      	ldr	r3, [pc, #228]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800351a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003520:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003524:	4053      	eors	r3, r2
 8003526:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800352a:	2b00      	cmp	r3, #0
 800352c:	d015      	beq.n	800355a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800352e:	4b34      	ldr	r3, [pc, #208]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003532:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003536:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800353a:	4b31      	ldr	r3, [pc, #196]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800353c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800353e:	4a30      	ldr	r2, [pc, #192]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003540:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003544:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003546:	4b2e      	ldr	r3, [pc, #184]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003548:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800354a:	4a2d      	ldr	r2, [pc, #180]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800354c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003550:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003552:	4a2b      	ldr	r2, [pc, #172]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003554:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003558:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800355a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800355e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8003562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003566:	d118      	bne.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003568:	f7fd ffc4 	bl	80014f4 <HAL_GetTick>
 800356c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003570:	e00d      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003572:	f7fd ffbf 	bl	80014f4 <HAL_GetTick>
 8003576:	4602      	mov	r2, r0
 8003578:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800357c:	1ad2      	subs	r2, r2, r3
 800357e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8003582:	429a      	cmp	r2, r3
 8003584:	d903      	bls.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 800358c:	e005      	b.n	800359a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800358e:	4b1c      	ldr	r3, [pc, #112]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003590:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003592:	f003 0302 	and.w	r3, r3, #2
 8003596:	2b00      	cmp	r3, #0
 8003598:	d0eb      	beq.n	8003572 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800359a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d129      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035a6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035ae:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035b2:	d10e      	bne.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80035b4:	4b12      	ldr	r3, [pc, #72]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80035bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035c0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035c4:	091a      	lsrs	r2, r3, #4
 80035c6:	4b10      	ldr	r3, [pc, #64]	@ (8003608 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	4a0d      	ldr	r2, [pc, #52]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035cc:	430b      	orrs	r3, r1
 80035ce:	6113      	str	r3, [r2, #16]
 80035d0:	e005      	b.n	80035de <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80035d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	4a0a      	ldr	r2, [pc, #40]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035d8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80035dc:	6113      	str	r3, [r2, #16]
 80035de:	4b08      	ldr	r3, [pc, #32]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035e0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80035e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035e6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80035ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035ee:	4a04      	ldr	r2, [pc, #16]	@ (8003600 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80035f4:	e00e      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80035fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 80035fe:	e009      	b.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003600:	58024400 	.word	0x58024400
 8003604:	58024800 	.word	0x58024800
 8003608:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800360c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003610:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800361c:	f002 0301 	and.w	r3, r2, #1
 8003620:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003624:	2300      	movs	r3, #0
 8003626:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800362a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800362e:	460b      	mov	r3, r1
 8003630:	4313      	orrs	r3, r2
 8003632:	f000 8089 	beq.w	8003748 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003636:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800363a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800363c:	2b28      	cmp	r3, #40	@ 0x28
 800363e:	d86b      	bhi.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003640:	a201      	add	r2, pc, #4	@ (adr r2, 8003648 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003646:	bf00      	nop
 8003648:	08003721 	.word	0x08003721
 800364c:	08003719 	.word	0x08003719
 8003650:	08003719 	.word	0x08003719
 8003654:	08003719 	.word	0x08003719
 8003658:	08003719 	.word	0x08003719
 800365c:	08003719 	.word	0x08003719
 8003660:	08003719 	.word	0x08003719
 8003664:	08003719 	.word	0x08003719
 8003668:	080036ed 	.word	0x080036ed
 800366c:	08003719 	.word	0x08003719
 8003670:	08003719 	.word	0x08003719
 8003674:	08003719 	.word	0x08003719
 8003678:	08003719 	.word	0x08003719
 800367c:	08003719 	.word	0x08003719
 8003680:	08003719 	.word	0x08003719
 8003684:	08003719 	.word	0x08003719
 8003688:	08003703 	.word	0x08003703
 800368c:	08003719 	.word	0x08003719
 8003690:	08003719 	.word	0x08003719
 8003694:	08003719 	.word	0x08003719
 8003698:	08003719 	.word	0x08003719
 800369c:	08003719 	.word	0x08003719
 80036a0:	08003719 	.word	0x08003719
 80036a4:	08003719 	.word	0x08003719
 80036a8:	08003721 	.word	0x08003721
 80036ac:	08003719 	.word	0x08003719
 80036b0:	08003719 	.word	0x08003719
 80036b4:	08003719 	.word	0x08003719
 80036b8:	08003719 	.word	0x08003719
 80036bc:	08003719 	.word	0x08003719
 80036c0:	08003719 	.word	0x08003719
 80036c4:	08003719 	.word	0x08003719
 80036c8:	08003721 	.word	0x08003721
 80036cc:	08003719 	.word	0x08003719
 80036d0:	08003719 	.word	0x08003719
 80036d4:	08003719 	.word	0x08003719
 80036d8:	08003719 	.word	0x08003719
 80036dc:	08003719 	.word	0x08003719
 80036e0:	08003719 	.word	0x08003719
 80036e4:	08003719 	.word	0x08003719
 80036e8:	08003721 	.word	0x08003721
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80036ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f0:	3308      	adds	r3, #8
 80036f2:	2101      	movs	r1, #1
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 ffc3 	bl	8004680 <RCCEx_PLL2_Config>
 80036fa:	4603      	mov	r3, r0
 80036fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003700:	e00f      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003706:	3328      	adds	r3, #40	@ 0x28
 8003708:	2101      	movs	r1, #1
 800370a:	4618      	mov	r0, r3
 800370c:	f001 f86a 	bl	80047e4 <RCCEx_PLL3_Config>
 8003710:	4603      	mov	r3, r0
 8003712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003716:	e004      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003718:	2301      	movs	r3, #1
 800371a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800371e:	e000      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003720:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003722:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003726:	2b00      	cmp	r3, #0
 8003728:	d10a      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800372a:	4bbf      	ldr	r3, [pc, #764]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800372c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800372e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003732:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003736:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003738:	4abb      	ldr	r2, [pc, #748]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800373a:	430b      	orrs	r3, r1
 800373c:	6553      	str	r3, [r2, #84]	@ 0x54
 800373e:	e003      	b.n	8003748 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800374c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003750:	f002 0302 	and.w	r3, r2, #2
 8003754:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003758:	2300      	movs	r3, #0
 800375a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800375e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8003762:	460b      	mov	r3, r1
 8003764:	4313      	orrs	r3, r2
 8003766:	d041      	beq.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003768:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800376c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800376e:	2b05      	cmp	r3, #5
 8003770:	d824      	bhi.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003772:	a201      	add	r2, pc, #4	@ (adr r2, 8003778 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003778:	080037c5 	.word	0x080037c5
 800377c:	08003791 	.word	0x08003791
 8003780:	080037a7 	.word	0x080037a7
 8003784:	080037c5 	.word	0x080037c5
 8003788:	080037c5 	.word	0x080037c5
 800378c:	080037c5 	.word	0x080037c5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003794:	3308      	adds	r3, #8
 8003796:	2101      	movs	r1, #1
 8003798:	4618      	mov	r0, r3
 800379a:	f000 ff71 	bl	8004680 <RCCEx_PLL2_Config>
 800379e:	4603      	mov	r3, r0
 80037a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037a4:	e00f      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80037a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037aa:	3328      	adds	r3, #40	@ 0x28
 80037ac:	2101      	movs	r1, #1
 80037ae:	4618      	mov	r0, r3
 80037b0:	f001 f818 	bl	80047e4 <RCCEx_PLL3_Config>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80037ba:	e004      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80037bc:	2301      	movs	r3, #1
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80037c2:	e000      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80037c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037c6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d10a      	bne.n	80037e4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80037ce:	4b96      	ldr	r3, [pc, #600]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d2:	f023 0107 	bic.w	r1, r3, #7
 80037d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037dc:	4a92      	ldr	r2, [pc, #584]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80037de:	430b      	orrs	r3, r1
 80037e0:	6553      	str	r3, [r2, #84]	@ 0x54
 80037e2:	e003      	b.n	80037ec <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80037ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037f4:	f002 0304 	and.w	r3, r2, #4
 80037f8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80037fc:	2300      	movs	r3, #0
 80037fe:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003802:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8003806:	460b      	mov	r3, r1
 8003808:	4313      	orrs	r3, r2
 800380a:	d044      	beq.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800380c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003810:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003814:	2b05      	cmp	r3, #5
 8003816:	d825      	bhi.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003818:	a201      	add	r2, pc, #4	@ (adr r2, 8003820 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800381a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800381e:	bf00      	nop
 8003820:	0800386d 	.word	0x0800386d
 8003824:	08003839 	.word	0x08003839
 8003828:	0800384f 	.word	0x0800384f
 800382c:	0800386d 	.word	0x0800386d
 8003830:	0800386d 	.word	0x0800386d
 8003834:	0800386d 	.word	0x0800386d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800383c:	3308      	adds	r3, #8
 800383e:	2101      	movs	r1, #1
 8003840:	4618      	mov	r0, r3
 8003842:	f000 ff1d 	bl	8004680 <RCCEx_PLL2_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800384c:	e00f      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800384e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003852:	3328      	adds	r3, #40	@ 0x28
 8003854:	2101      	movs	r1, #1
 8003856:	4618      	mov	r0, r3
 8003858:	f000 ffc4 	bl	80047e4 <RCCEx_PLL3_Config>
 800385c:	4603      	mov	r3, r0
 800385e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003862:	e004      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003864:	2301      	movs	r3, #1
 8003866:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800386a:	e000      	b.n	800386e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800386c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800386e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003876:	4b6c      	ldr	r3, [pc, #432]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003878:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800387a:	f023 0107 	bic.w	r1, r3, #7
 800387e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003882:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003886:	4a68      	ldr	r2, [pc, #416]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003888:	430b      	orrs	r3, r1
 800388a:	6593      	str	r3, [r2, #88]	@ 0x58
 800388c:	e003      	b.n	8003896 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003892:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	f002 0320 	and.w	r3, r2, #32
 80038a2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80038a6:	2300      	movs	r3, #0
 80038a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80038ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80038b0:	460b      	mov	r3, r1
 80038b2:	4313      	orrs	r3, r2
 80038b4:	d055      	beq.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80038b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c2:	d033      	beq.n	800392c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80038c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80038c8:	d82c      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038ce:	d02f      	beq.n	8003930 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80038d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038d4:	d826      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038d6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038da:	d02b      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80038dc:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80038e0:	d820      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038e6:	d012      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80038e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038ec:	d81a      	bhi.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d022      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80038f2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038f6:	d115      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038fc:	3308      	adds	r3, #8
 80038fe:	2100      	movs	r1, #0
 8003900:	4618      	mov	r0, r3
 8003902:	f000 febd 	bl	8004680 <RCCEx_PLL2_Config>
 8003906:	4603      	mov	r3, r0
 8003908:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800390c:	e015      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800390e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003912:	3328      	adds	r3, #40	@ 0x28
 8003914:	2102      	movs	r1, #2
 8003916:	4618      	mov	r0, r3
 8003918:	f000 ff64 	bl	80047e4 <RCCEx_PLL3_Config>
 800391c:	4603      	mov	r3, r0
 800391e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003922:	e00a      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003924:	2301      	movs	r3, #1
 8003926:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800392a:	e006      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800392c:	bf00      	nop
 800392e:	e004      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003930:	bf00      	nop
 8003932:	e002      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003934:	bf00      	nop
 8003936:	e000      	b.n	800393a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003938:	bf00      	nop
    }

    if (ret == HAL_OK)
 800393a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800393e:	2b00      	cmp	r3, #0
 8003940:	d10b      	bne.n	800395a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003942:	4b39      	ldr	r3, [pc, #228]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003946:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800394a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800394e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003952:	4a35      	ldr	r2, [pc, #212]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003954:	430b      	orrs	r3, r1
 8003956:	6553      	str	r3, [r2, #84]	@ 0x54
 8003958:	e003      	b.n	8003962 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800395a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800395e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003962:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800396a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800396e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003972:	2300      	movs	r3, #0
 8003974:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003978:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800397c:	460b      	mov	r3, r1
 800397e:	4313      	orrs	r3, r2
 8003980:	d058      	beq.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003986:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800398a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800398e:	d033      	beq.n	80039f8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003990:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003994:	d82c      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003996:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800399a:	d02f      	beq.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800399c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039a0:	d826      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039a2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039a6:	d02b      	beq.n	8003a00 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80039a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80039ac:	d820      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039ae:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039b2:	d012      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80039b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039b8:	d81a      	bhi.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d022      	beq.n	8003a04 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80039be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039c2:	d115      	bne.n	80039f0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039c8:	3308      	adds	r3, #8
 80039ca:	2100      	movs	r1, #0
 80039cc:	4618      	mov	r0, r3
 80039ce:	f000 fe57 	bl	8004680 <RCCEx_PLL2_Config>
 80039d2:	4603      	mov	r3, r0
 80039d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039d8:	e015      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80039de:	3328      	adds	r3, #40	@ 0x28
 80039e0:	2102      	movs	r1, #2
 80039e2:	4618      	mov	r0, r3
 80039e4:	f000 fefe 	bl	80047e4 <RCCEx_PLL3_Config>
 80039e8:	4603      	mov	r3, r0
 80039ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80039ee:	e00a      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80039f6:	e006      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039f8:	bf00      	nop
 80039fa:	e004      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80039fc:	bf00      	nop
 80039fe:	e002      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a00:	bf00      	nop
 8003a02:	e000      	b.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003a04:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10e      	bne.n	8003a2c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003a0e:	4b06      	ldr	r3, [pc, #24]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a12:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003a16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a1a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003a1e:	4a02      	ldr	r2, [pc, #8]	@ (8003a28 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003a20:	430b      	orrs	r3, r1
 8003a22:	6593      	str	r3, [r2, #88]	@ 0x58
 8003a24:	e006      	b.n	8003a34 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003a26:	bf00      	nop
 8003a28:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003a30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003a34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a3c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8003a40:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a44:	2300      	movs	r3, #0
 8003a46:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a4a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4313      	orrs	r3, r2
 8003a52:	d055      	beq.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003a54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003a5c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a60:	d033      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003a62:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003a66:	d82c      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a6c:	d02f      	beq.n	8003ace <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003a6e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a72:	d826      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a74:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a78:	d02b      	beq.n	8003ad2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003a7a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003a7e:	d820      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a80:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a84:	d012      	beq.n	8003aac <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003a86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a8a:	d81a      	bhi.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d022      	beq.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003a90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003a94:	d115      	bne.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003a9a:	3308      	adds	r3, #8
 8003a9c:	2100      	movs	r1, #0
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f000 fdee 	bl	8004680 <RCCEx_PLL2_Config>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003aaa:	e015      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ab0:	3328      	adds	r3, #40	@ 0x28
 8003ab2:	2102      	movs	r1, #2
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f000 fe95 	bl	80047e4 <RCCEx_PLL3_Config>
 8003aba:	4603      	mov	r3, r0
 8003abc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003ac0:	e00a      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003ac8:	e006      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003aca:	bf00      	nop
 8003acc:	e004      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ace:	bf00      	nop
 8003ad0:	e002      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ad2:	bf00      	nop
 8003ad4:	e000      	b.n	8003ad8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003ad6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ad8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d10b      	bne.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003ae0:	4ba1      	ldr	r3, [pc, #644]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ae2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ae4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8003ae8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003aec:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003af0:	4a9d      	ldr	r2, [pc, #628]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003af2:	430b      	orrs	r3, r1
 8003af4:	6593      	str	r3, [r2, #88]	@ 0x58
 8003af6:	e003      	b.n	8003b00 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003af8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003afc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b08:	f002 0308 	and.w	r3, r2, #8
 8003b0c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003b10:	2300      	movs	r3, #0
 8003b12:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003b16:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003b1a:	460b      	mov	r3, r1
 8003b1c:	4313      	orrs	r3, r2
 8003b1e:	d01e      	beq.n	8003b5e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b24:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b2c:	d10c      	bne.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b32:	3328      	adds	r3, #40	@ 0x28
 8003b34:	2102      	movs	r1, #2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f000 fe54 	bl	80047e4 <RCCEx_PLL3_Config>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d002      	beq.n	8003b48 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003b48:	4b87      	ldr	r3, [pc, #540]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b4a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b54:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b58:	4a83      	ldr	r2, [pc, #524]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003b5a:	430b      	orrs	r3, r1
 8003b5c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003b5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b66:	f002 0310 	and.w	r3, r2, #16
 8003b6a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003b6e:	2300      	movs	r3, #0
 8003b70:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003b74:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	d01e      	beq.n	8003bbc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8003b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b82:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003b86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b8a:	d10c      	bne.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003b90:	3328      	adds	r3, #40	@ 0x28
 8003b92:	2102      	movs	r1, #2
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fe25 	bl	80047e4 <RCCEx_PLL3_Config>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ba6:	4b70      	ldr	r3, [pc, #448]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003baa:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003bae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003bb6:	4a6c      	ldr	r2, [pc, #432]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003bb8:	430b      	orrs	r3, r1
 8003bba:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003bbc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bc4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8003bc8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003bcc:	2300      	movs	r3, #0
 8003bce:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003bd2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8003bd6:	460b      	mov	r3, r1
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	d03e      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003bdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003be0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003be4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003be8:	d022      	beq.n	8003c30 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8003bea:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003bee:	d81b      	bhi.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d003      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003bf4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003bf8:	d00b      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8003bfa:	e015      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003bfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c00:	3308      	adds	r3, #8
 8003c02:	2100      	movs	r1, #0
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 fd3b 	bl	8004680 <RCCEx_PLL2_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c10:	e00f      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003c12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c16:	3328      	adds	r3, #40	@ 0x28
 8003c18:	2102      	movs	r1, #2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f000 fde2 	bl	80047e4 <RCCEx_PLL3_Config>
 8003c20:	4603      	mov	r3, r0
 8003c22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003c26:	e004      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003c2e:	e000      	b.n	8003c32 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003c30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c32:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d10b      	bne.n	8003c52 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003c3a:	4b4b      	ldr	r3, [pc, #300]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003c3e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003c4a:	4a47      	ldr	r2, [pc, #284]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c4c:	430b      	orrs	r3, r1
 8003c4e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003c50:	e003      	b.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003c56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c62:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003c66:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003c68:	2300      	movs	r3, #0
 8003c6a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003c6c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8003c70:	460b      	mov	r3, r1
 8003c72:	4313      	orrs	r3, r2
 8003c74:	d03b      	beq.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003c76:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c82:	d01f      	beq.n	8003cc4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003c84:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003c88:	d818      	bhi.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003c8a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003c8e:	d003      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8003c90:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003c94:	d007      	beq.n	8003ca6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003c96:	e011      	b.n	8003cbc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c98:	4b33      	ldr	r3, [pc, #204]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c9c:	4a32      	ldr	r2, [pc, #200]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003c9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003ca2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003ca4:	e00f      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ca6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003caa:	3328      	adds	r3, #40	@ 0x28
 8003cac:	2101      	movs	r1, #1
 8003cae:	4618      	mov	r0, r3
 8003cb0:	f000 fd98 	bl	80047e4 <RCCEx_PLL3_Config>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8003cba:	e004      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003cc2:	e000      	b.n	8003cc6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8003cc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cc6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d10b      	bne.n	8003ce6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003cce:	4b26      	ldr	r3, [pc, #152]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003cd2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cde:	4a22      	ldr	r2, [pc, #136]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003ce0:	430b      	orrs	r3, r1
 8003ce2:	6553      	str	r3, [r2, #84]	@ 0x54
 8003ce4:	e003      	b.n	8003cee <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ce6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003cea:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003cee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf6:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003cfa:	673b      	str	r3, [r7, #112]	@ 0x70
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	677b      	str	r3, [r7, #116]	@ 0x74
 8003d00:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8003d04:	460b      	mov	r3, r1
 8003d06:	4313      	orrs	r3, r2
 8003d08:	d034      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003d0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d0e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d003      	beq.n	8003d1c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003d14:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d18:	d007      	beq.n	8003d2a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003d1a:	e011      	b.n	8003d40 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d1c:	4b12      	ldr	r3, [pc, #72]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d20:	4a11      	ldr	r2, [pc, #68]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003d26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d28:	e00e      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d2e:	3308      	adds	r3, #8
 8003d30:	2102      	movs	r1, #2
 8003d32:	4618      	mov	r0, r3
 8003d34:	f000 fca4 	bl	8004680 <RCCEx_PLL2_Config>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003d3e:	e003      	b.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003d46:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d48:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d10d      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003d50:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003d54:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d5c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003d5e:	4a02      	ldr	r2, [pc, #8]	@ (8003d68 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003d60:	430b      	orrs	r3, r1
 8003d62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003d64:	e006      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003d66:	bf00      	nop
 8003d68:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003d70:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8003d80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003d82:	2300      	movs	r3, #0
 8003d84:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003d86:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	d00c      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003d90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003d94:	3328      	adds	r3, #40	@ 0x28
 8003d96:	2102      	movs	r1, #2
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 fd23 	bl	80047e4 <RCCEx_PLL3_Config>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003da4:	2301      	movs	r3, #1
 8003da6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003daa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8003db6:	663b      	str	r3, [r7, #96]	@ 0x60
 8003db8:	2300      	movs	r3, #0
 8003dba:	667b      	str	r3, [r7, #100]	@ 0x64
 8003dbc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	d038      	beq.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8003dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003dca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003dce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd2:	d018      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003dd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dd8:	d811      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003dda:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dde:	d014      	beq.n	8003e0a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003de0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003de4:	d80b      	bhi.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d011      	beq.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8003dea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003dee:	d106      	bne.n	8003dfe <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003df0:	4bc3      	ldr	r3, [pc, #780]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003df4:	4ac2      	ldr	r2, [pc, #776]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003df6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003dfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003dfc:	e008      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003e04:	e004      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e06:	bf00      	nop
 8003e08:	e002      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e0a:	bf00      	nop
 8003e0c:	e000      	b.n	8003e10 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003e0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e10:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d10b      	bne.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003e18:	4bb9      	ldr	r3, [pc, #740]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003e20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003e28:	4ab5      	ldr	r2, [pc, #724]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e2a:	430b      	orrs	r3, r1
 8003e2c:	6553      	str	r3, [r2, #84]	@ 0x54
 8003e2e:	e003      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003e34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003e38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e40:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003e44:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003e46:	2300      	movs	r3, #0
 8003e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e4a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4313      	orrs	r3, r2
 8003e52:	d009      	beq.n	8003e68 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003e54:	4baa      	ldr	r3, [pc, #680]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e58:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003e5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e62:	4aa7      	ldr	r2, [pc, #668]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e64:	430b      	orrs	r3, r1
 8003e66:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e70:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003e74:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e76:	2300      	movs	r3, #0
 8003e78:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e7a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4313      	orrs	r3, r2
 8003e82:	d00a      	beq.n	8003e9a <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003e84:	4b9e      	ldr	r3, [pc, #632]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e86:	691b      	ldr	r3, [r3, #16]
 8003e88:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003e8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e90:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003e94:	4a9a      	ldr	r2, [pc, #616]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003e96:	430b      	orrs	r3, r1
 8003e98:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eac:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	d009      	beq.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003eb6:	4b92      	ldr	r3, [pc, #584]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eb8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003eba:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003ebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ec2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003ec4:	4a8e      	ldr	r2, [pc, #568]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ec6:	430b      	orrs	r3, r1
 8003ec8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003eca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8003ed6:	643b      	str	r3, [r7, #64]	@ 0x40
 8003ed8:	2300      	movs	r3, #0
 8003eda:	647b      	str	r3, [r7, #68]	@ 0x44
 8003edc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003ee0:	460b      	mov	r3, r1
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003ee6:	4b86      	ldr	r3, [pc, #536]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	4a85      	ldr	r2, [pc, #532]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003eec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003ef0:	6113      	str	r3, [r2, #16]
 8003ef2:	4b83      	ldr	r3, [pc, #524]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003ef4:	6919      	ldr	r1, [r3, #16]
 8003ef6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003efa:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8003efe:	4a80      	ldr	r2, [pc, #512]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003f04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f0c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003f10:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003f12:	2300      	movs	r3, #0
 8003f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f16:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	d009      	beq.n	8003f34 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003f20:	4b77      	ldr	r3, [pc, #476]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f24:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003f28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2e:	4a74      	ldr	r2, [pc, #464]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f30:	430b      	orrs	r3, r1
 8003f32:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8003f40:	633b      	str	r3, [r7, #48]	@ 0x30
 8003f42:	2300      	movs	r3, #0
 8003f44:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f46:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003f4a:	460b      	mov	r3, r1
 8003f4c:	4313      	orrs	r3, r2
 8003f4e:	d00a      	beq.n	8003f66 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003f50:	4b6b      	ldr	r3, [pc, #428]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f54:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f60:	4a67      	ldr	r2, [pc, #412]	@ (8004100 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003f62:	430b      	orrs	r3, r1
 8003f64:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003f66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f6e:	2100      	movs	r1, #0
 8003f70:	62b9      	str	r1, [r7, #40]	@ 0x28
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003f78:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	d011      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003f86:	3308      	adds	r3, #8
 8003f88:	2100      	movs	r1, #0
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	f000 fb78 	bl	8004680 <RCCEx_PLL2_Config>
 8003f90:	4603      	mov	r3, r0
 8003f92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003f96:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d003      	beq.n	8003fa6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fa2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003fa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003faa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fae:	2100      	movs	r1, #0
 8003fb0:	6239      	str	r1, [r7, #32]
 8003fb2:	f003 0302 	and.w	r3, r3, #2
 8003fb6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fb8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003fbc:	460b      	mov	r3, r1
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	d011      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fb58 	bl	8004680 <RCCEx_PLL2_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d003      	beq.n	8003fe6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fde:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003fe2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003fe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	2100      	movs	r1, #0
 8003ff0:	61b9      	str	r1, [r7, #24]
 8003ff2:	f003 0304 	and.w	r3, r3, #4
 8003ff6:	61fb      	str	r3, [r7, #28]
 8003ff8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003ffc:	460b      	mov	r3, r1
 8003ffe:	4313      	orrs	r3, r2
 8004000:	d011      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004006:	3308      	adds	r3, #8
 8004008:	2102      	movs	r1, #2
 800400a:	4618      	mov	r0, r3
 800400c:	f000 fb38 	bl	8004680 <RCCEx_PLL2_Config>
 8004010:	4603      	mov	r3, r0
 8004012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004016:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800401a:	2b00      	cmp	r3, #0
 800401c:	d003      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800401e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004022:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800402a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800402e:	2100      	movs	r1, #0
 8004030:	6139      	str	r1, [r7, #16]
 8004032:	f003 0308 	and.w	r3, r3, #8
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800403c:	460b      	mov	r3, r1
 800403e:	4313      	orrs	r3, r2
 8004040:	d011      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004046:	3328      	adds	r3, #40	@ 0x28
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f000 fbca 	bl	80047e4 <RCCEx_PLL3_Config>
 8004050:	4603      	mov	r3, r0
 8004052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8004056:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800405e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8004062:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004066:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800406e:	2100      	movs	r1, #0
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	f003 0310 	and.w	r3, r3, #16
 8004076:	60fb      	str	r3, [r7, #12]
 8004078:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800407c:	460b      	mov	r3, r1
 800407e:	4313      	orrs	r3, r2
 8004080:	d011      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004086:	3328      	adds	r3, #40	@ 0x28
 8004088:	2101      	movs	r1, #1
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fbaa 	bl	80047e4 <RCCEx_PLL3_Config>
 8004090:	4603      	mov	r3, r0
 8004092:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8004096:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800409a:	2b00      	cmp	r3, #0
 800409c:	d003      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	2100      	movs	r1, #0
 80040b0:	6039      	str	r1, [r7, #0]
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80040bc:	460b      	mov	r3, r1
 80040be:	4313      	orrs	r3, r2
 80040c0:	d011      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80040c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80040c6:	3328      	adds	r3, #40	@ 0x28
 80040c8:	2102      	movs	r1, #2
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 fb8a 	bl	80047e4 <RCCEx_PLL3_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80040d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d003      	beq.n	80040e6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80040e2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80040e6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d101      	bne.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80040ee:	2300      	movs	r3, #0
 80040f0:	e000      	b.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
}
 80040f4:	4618      	mov	r0, r3
 80040f6:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80040fa:	46bd      	mov	sp, r7
 80040fc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004100:	58024400 	.word	0x58024400

08004104 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004108:	f7fe fd96 	bl	8002c38 <HAL_RCC_GetHCLKFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004110:	6a1b      	ldr	r3, [r3, #32]
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	f003 0307 	and.w	r3, r3, #7
 8004118:	4904      	ldr	r1, [pc, #16]	@ (800412c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004124:	4618      	mov	r0, r3
 8004126:	bd80      	pop	{r7, pc}
 8004128:	58024400 	.word	0x58024400
 800412c:	08006aac 	.word	0x08006aac

08004130 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004130:	b480      	push	{r7}
 8004132:	b089      	sub	sp, #36	@ 0x24
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004138:	4ba1      	ldr	r3, [pc, #644]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800413a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800413c:	f003 0303 	and.w	r3, r3, #3
 8004140:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8004142:	4b9f      	ldr	r3, [pc, #636]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004146:	0b1b      	lsrs	r3, r3, #12
 8004148:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800414c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800414e:	4b9c      	ldr	r3, [pc, #624]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004150:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004152:	091b      	lsrs	r3, r3, #4
 8004154:	f003 0301 	and.w	r3, r3, #1
 8004158:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800415a:	4b99      	ldr	r3, [pc, #612]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800415c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800415e:	08db      	lsrs	r3, r3, #3
 8004160:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	fb02 f303 	mul.w	r3, r2, r3
 800416a:	ee07 3a90 	vmov	s15, r3
 800416e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004172:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	2b00      	cmp	r3, #0
 800417a:	f000 8111 	beq.w	80043a0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800417e:	69bb      	ldr	r3, [r7, #24]
 8004180:	2b02      	cmp	r3, #2
 8004182:	f000 8083 	beq.w	800428c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004186:	69bb      	ldr	r3, [r7, #24]
 8004188:	2b02      	cmp	r3, #2
 800418a:	f200 80a1 	bhi.w	80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d003      	beq.n	800419c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004194:	69bb      	ldr	r3, [r7, #24]
 8004196:	2b01      	cmp	r3, #1
 8004198:	d056      	beq.n	8004248 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800419a:	e099      	b.n	80042d0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800419c:	4b88      	ldr	r3, [pc, #544]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f003 0320 	and.w	r3, r3, #32
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d02d      	beq.n	8004204 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80041a8:	4b85      	ldr	r3, [pc, #532]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	08db      	lsrs	r3, r3, #3
 80041ae:	f003 0303 	and.w	r3, r3, #3
 80041b2:	4a84      	ldr	r2, [pc, #528]	@ (80043c4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80041b4:	fa22 f303 	lsr.w	r3, r2, r3
 80041b8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	ee07 3a90 	vmov	s15, r3
 80041c0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	ee07 3a90 	vmov	s15, r3
 80041ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80041ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80041d2:	4b7b      	ldr	r3, [pc, #492]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80041d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041da:	ee07 3a90 	vmov	s15, r3
 80041de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80041e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80041e6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80041ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80041ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80041f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80041f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80041fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80041fe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8004202:	e087      	b.n	8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	ee07 3a90 	vmov	s15, r3
 800420a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800420e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80043cc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004212:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004216:	4b6a      	ldr	r3, [pc, #424]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004218:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800421a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800421e:	ee07 3a90 	vmov	s15, r3
 8004222:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004226:	ed97 6a03 	vldr	s12, [r7, #12]
 800422a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800422e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004232:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004236:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800423a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800423e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004242:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004246:	e065      	b.n	8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	ee07 3a90 	vmov	s15, r3
 800424e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004252:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80043d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004256:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800425a:	4b59      	ldr	r3, [pc, #356]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800425c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004262:	ee07 3a90 	vmov	s15, r3
 8004266:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800426a:	ed97 6a03 	vldr	s12, [r7, #12]
 800426e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004272:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004276:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800427a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800427e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004282:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004286:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800428a:	e043      	b.n	8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	ee07 3a90 	vmov	s15, r3
 8004292:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004296:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80043d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800429a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800429e:	4b48      	ldr	r3, [pc, #288]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042a6:	ee07 3a90 	vmov	s15, r3
 80042aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042ae:	ed97 6a03 	vldr	s12, [r7, #12]
 80042b2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80042be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80042c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80042c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042ca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80042ce:	e021      	b.n	8004314 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	ee07 3a90 	vmov	s15, r3
 80042d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042da:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80043d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80042de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80042e2:	4b37      	ldr	r3, [pc, #220]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80042e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ea:	ee07 3a90 	vmov	s15, r3
 80042ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80042f2:	ed97 6a03 	vldr	s12, [r7, #12]
 80042f6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80043c8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80042fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80042fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004302:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800430a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800430e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004312:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8004314:	4b2a      	ldr	r3, [pc, #168]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004316:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004318:	0a5b      	lsrs	r3, r3, #9
 800431a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800431e:	ee07 3a90 	vmov	s15, r3
 8004322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004326:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800432a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800432e:	edd7 6a07 	vldr	s13, [r7, #28]
 8004332:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004336:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800433a:	ee17 2a90 	vmov	r2, s15
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8004342:	4b1f      	ldr	r3, [pc, #124]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004344:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004346:	0c1b      	lsrs	r3, r3, #16
 8004348:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800434c:	ee07 3a90 	vmov	s15, r3
 8004350:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004354:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004358:	ee37 7a87 	vadd.f32	s14, s15, s14
 800435c:	edd7 6a07 	vldr	s13, [r7, #28]
 8004360:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004364:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004368:	ee17 2a90 	vmov	r2, s15
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004370:	4b13      	ldr	r3, [pc, #76]	@ (80043c0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004372:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004374:	0e1b      	lsrs	r3, r3, #24
 8004376:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800437a:	ee07 3a90 	vmov	s15, r3
 800437e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004382:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004386:	ee37 7a87 	vadd.f32	s14, s15, s14
 800438a:	edd7 6a07 	vldr	s13, [r7, #28]
 800438e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004396:	ee17 2a90 	vmov	r2, s15
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800439e:	e008      	b.n	80043b2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2200      	movs	r2, #0
 80043aa:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	609a      	str	r2, [r3, #8]
}
 80043b2:	bf00      	nop
 80043b4:	3724      	adds	r7, #36	@ 0x24
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr
 80043be:	bf00      	nop
 80043c0:	58024400 	.word	0x58024400
 80043c4:	03d09000 	.word	0x03d09000
 80043c8:	46000000 	.word	0x46000000
 80043cc:	4c742400 	.word	0x4c742400
 80043d0:	4a742400 	.word	0x4a742400
 80043d4:	4bbebc20 	.word	0x4bbebc20

080043d8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80043d8:	b480      	push	{r7}
 80043da:	b089      	sub	sp, #36	@ 0x24
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80043e0:	4ba1      	ldr	r3, [pc, #644]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043e4:	f003 0303 	and.w	r3, r3, #3
 80043e8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80043ea:	4b9f      	ldr	r3, [pc, #636]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043ee:	0d1b      	lsrs	r3, r3, #20
 80043f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80043f4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80043f6:	4b9c      	ldr	r3, [pc, #624]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80043f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043fa:	0a1b      	lsrs	r3, r3, #8
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8004402:	4b99      	ldr	r3, [pc, #612]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004406:	08db      	lsrs	r3, r3, #3
 8004408:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800440c:	693a      	ldr	r2, [r7, #16]
 800440e:	fb02 f303 	mul.w	r3, r2, r3
 8004412:	ee07 3a90 	vmov	s15, r3
 8004416:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800441a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	2b00      	cmp	r3, #0
 8004422:	f000 8111 	beq.w	8004648 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	2b02      	cmp	r3, #2
 800442a:	f000 8083 	beq.w	8004534 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b02      	cmp	r3, #2
 8004432:	f200 80a1 	bhi.w	8004578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8004436:	69bb      	ldr	r3, [r7, #24]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800443c:	69bb      	ldr	r3, [r7, #24]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d056      	beq.n	80044f0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8004442:	e099      	b.n	8004578 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004444:	4b88      	ldr	r3, [pc, #544]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0320 	and.w	r3, r3, #32
 800444c:	2b00      	cmp	r3, #0
 800444e:	d02d      	beq.n	80044ac <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004450:	4b85      	ldr	r3, [pc, #532]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	08db      	lsrs	r3, r3, #3
 8004456:	f003 0303 	and.w	r3, r3, #3
 800445a:	4a84      	ldr	r2, [pc, #528]	@ (800466c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800445c:	fa22 f303 	lsr.w	r3, r2, r3
 8004460:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	ee07 3a90 	vmov	s15, r3
 8004468:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	ee07 3a90 	vmov	s15, r3
 8004472:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004476:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800447a:	4b7b      	ldr	r3, [pc, #492]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004482:	ee07 3a90 	vmov	s15, r3
 8004486:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800448a:	ed97 6a03 	vldr	s12, [r7, #12]
 800448e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004492:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004496:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800449a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800449e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044a6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80044aa:	e087      	b.n	80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	ee07 3a90 	vmov	s15, r3
 80044b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044b6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8004674 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80044ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80044be:	4b6a      	ldr	r3, [pc, #424]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044c6:	ee07 3a90 	vmov	s15, r3
 80044ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80044ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80044d2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80044d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80044da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80044de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80044e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80044e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80044ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80044ee:	e065      	b.n	80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	ee07 3a90 	vmov	s15, r3
 80044f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044fa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80044fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004502:	4b59      	ldr	r3, [pc, #356]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800450a:	ee07 3a90 	vmov	s15, r3
 800450e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004512:	ed97 6a03 	vldr	s12, [r7, #12]
 8004516:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800451a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800451e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004522:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8004526:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800452a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800452e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004532:	e043      	b.n	80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	ee07 3a90 	vmov	s15, r3
 800453a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800453e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800467c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004542:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004546:	4b48      	ldr	r3, [pc, #288]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800454a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800454e:	ee07 3a90 	vmov	s15, r3
 8004552:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004556:	ed97 6a03 	vldr	s12, [r7, #12]
 800455a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800455e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004562:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004566:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800456a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800456e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004572:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004576:	e021      	b.n	80045bc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004578:	697b      	ldr	r3, [r7, #20]
 800457a:	ee07 3a90 	vmov	s15, r3
 800457e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004582:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8004678 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800458a:	4b37      	ldr	r3, [pc, #220]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004592:	ee07 3a90 	vmov	s15, r3
 8004596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800459a:	ed97 6a03 	vldr	s12, [r7, #12]
 800459e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8004670 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80045a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80045a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80045aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80045ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80045b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80045b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80045ba:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80045bc:	4b2a      	ldr	r3, [pc, #168]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c0:	0a5b      	lsrs	r3, r3, #9
 80045c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045c6:	ee07 3a90 	vmov	s15, r3
 80045ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045ce:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80045d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80045d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80045da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80045de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045e2:	ee17 2a90 	vmov	r2, s15
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80045ea:	4b1f      	ldr	r3, [pc, #124]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80045ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ee:	0c1b      	lsrs	r3, r3, #16
 80045f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80045f4:	ee07 3a90 	vmov	s15, r3
 80045f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004600:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004604:	edd7 6a07 	vldr	s13, [r7, #28]
 8004608:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800460c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004610:	ee17 2a90 	vmov	r2, s15
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004618:	4b13      	ldr	r3, [pc, #76]	@ (8004668 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800461a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461c:	0e1b      	lsrs	r3, r3, #24
 800461e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004622:	ee07 3a90 	vmov	s15, r3
 8004626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800462a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800462e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004632:	edd7 6a07 	vldr	s13, [r7, #28]
 8004636:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800463a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800463e:	ee17 2a90 	vmov	r2, s15
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004646:	e008      	b.n	800465a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2200      	movs	r2, #0
 800464c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2200      	movs	r2, #0
 8004658:	609a      	str	r2, [r3, #8]
}
 800465a:	bf00      	nop
 800465c:	3724      	adds	r7, #36	@ 0x24
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	58024400 	.word	0x58024400
 800466c:	03d09000 	.word	0x03d09000
 8004670:	46000000 	.word	0x46000000
 8004674:	4c742400 	.word	0x4c742400
 8004678:	4a742400 	.word	0x4a742400
 800467c:	4bbebc20 	.word	0x4bbebc20

08004680 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	b084      	sub	sp, #16
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800468a:	2300      	movs	r3, #0
 800468c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800468e:	4b53      	ldr	r3, [pc, #332]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004692:	f003 0303 	and.w	r3, r3, #3
 8004696:	2b03      	cmp	r3, #3
 8004698:	d101      	bne.n	800469e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e099      	b.n	80047d2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800469e:	4b4f      	ldr	r3, [pc, #316]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a4e      	ldr	r2, [pc, #312]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 80046a4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80046a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046aa:	f7fc ff23 	bl	80014f4 <HAL_GetTick>
 80046ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046b0:	e008      	b.n	80046c4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80046b2:	f7fc ff1f 	bl	80014f4 <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d901      	bls.n	80046c4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80046c0:	2303      	movs	r3, #3
 80046c2:	e086      	b.n	80047d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80046c4:	4b45      	ldr	r3, [pc, #276]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1f0      	bne.n	80046b2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80046d0:	4b42      	ldr	r3, [pc, #264]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 80046d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046d4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	031b      	lsls	r3, r3, #12
 80046de:	493f      	ldr	r1, [pc, #252]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	628b      	str	r3, [r1, #40]	@ 0x28
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	3b01      	subs	r3, #1
 80046ea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	3b01      	subs	r3, #1
 80046f4:	025b      	lsls	r3, r3, #9
 80046f6:	b29b      	uxth	r3, r3
 80046f8:	431a      	orrs	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	3b01      	subs	r3, #1
 8004700:	041b      	lsls	r3, r3, #16
 8004702:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004706:	431a      	orrs	r2, r3
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	691b      	ldr	r3, [r3, #16]
 800470c:	3b01      	subs	r3, #1
 800470e:	061b      	lsls	r3, r3, #24
 8004710:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004714:	4931      	ldr	r1, [pc, #196]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004716:	4313      	orrs	r3, r2
 8004718:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800471a:	4b30      	ldr	r3, [pc, #192]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 800471c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800471e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	695b      	ldr	r3, [r3, #20]
 8004726:	492d      	ldr	r1, [pc, #180]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004728:	4313      	orrs	r3, r2
 800472a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800472c:	4b2b      	ldr	r3, [pc, #172]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 800472e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004730:	f023 0220 	bic.w	r2, r3, #32
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	699b      	ldr	r3, [r3, #24]
 8004738:	4928      	ldr	r1, [pc, #160]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 800473a:	4313      	orrs	r3, r2
 800473c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800473e:	4b27      	ldr	r3, [pc, #156]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004740:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004742:	4a26      	ldr	r2, [pc, #152]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004744:	f023 0310 	bic.w	r3, r3, #16
 8004748:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800474a:	4b24      	ldr	r3, [pc, #144]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 800474c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800474e:	4b24      	ldr	r3, [pc, #144]	@ (80047e0 <RCCEx_PLL2_Config+0x160>)
 8004750:	4013      	ands	r3, r2
 8004752:	687a      	ldr	r2, [r7, #4]
 8004754:	69d2      	ldr	r2, [r2, #28]
 8004756:	00d2      	lsls	r2, r2, #3
 8004758:	4920      	ldr	r1, [pc, #128]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 800475a:	4313      	orrs	r3, r2
 800475c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800475e:	4b1f      	ldr	r3, [pc, #124]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004760:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004762:	4a1e      	ldr	r2, [pc, #120]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004764:	f043 0310 	orr.w	r3, r3, #16
 8004768:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d106      	bne.n	800477e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004770:	4b1a      	ldr	r3, [pc, #104]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004772:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004774:	4a19      	ldr	r2, [pc, #100]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004776:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800477a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800477c:	e00f      	b.n	800479e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d106      	bne.n	8004792 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004784:	4b15      	ldr	r3, [pc, #84]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004786:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004788:	4a14      	ldr	r2, [pc, #80]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 800478a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800478e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004790:	e005      	b.n	800479e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004792:	4b12      	ldr	r3, [pc, #72]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	4a11      	ldr	r2, [pc, #68]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 8004798:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800479c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800479e:	4b0f      	ldr	r3, [pc, #60]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a0e      	ldr	r2, [pc, #56]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 80047a4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80047a8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80047aa:	f7fc fea3 	bl	80014f4 <HAL_GetTick>
 80047ae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047b0:	e008      	b.n	80047c4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80047b2:	f7fc fe9f 	bl	80014f4 <HAL_GetTick>
 80047b6:	4602      	mov	r2, r0
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	2b02      	cmp	r3, #2
 80047be:	d901      	bls.n	80047c4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80047c0:	2303      	movs	r3, #3
 80047c2:	e006      	b.n	80047d2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80047c4:	4b05      	ldr	r3, [pc, #20]	@ (80047dc <RCCEx_PLL2_Config+0x15c>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d0f0      	beq.n	80047b2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 80047d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3710      	adds	r7, #16
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	bf00      	nop
 80047dc:	58024400 	.word	0x58024400
 80047e0:	ffff0007 	.word	0xffff0007

080047e4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b084      	sub	sp, #16
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80047ee:	2300      	movs	r3, #0
 80047f0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80047f2:	4b53      	ldr	r3, [pc, #332]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80047f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b03      	cmp	r3, #3
 80047fc:	d101      	bne.n	8004802 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e099      	b.n	8004936 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004802:	4b4f      	ldr	r3, [pc, #316]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	4a4e      	ldr	r2, [pc, #312]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 8004808:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800480c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800480e:	f7fc fe71 	bl	80014f4 <HAL_GetTick>
 8004812:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004814:	e008      	b.n	8004828 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004816:	f7fc fe6d 	bl	80014f4 <HAL_GetTick>
 800481a:	4602      	mov	r2, r0
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e086      	b.n	8004936 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004828:	4b45      	ldr	r3, [pc, #276]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f0      	bne.n	8004816 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004834:	4b42      	ldr	r3, [pc, #264]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 8004836:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004838:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	051b      	lsls	r3, r3, #20
 8004842:	493f      	ldr	r1, [pc, #252]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 8004844:	4313      	orrs	r3, r2
 8004846:	628b      	str	r3, [r1, #40]	@ 0x28
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	685b      	ldr	r3, [r3, #4]
 800484c:	3b01      	subs	r3, #1
 800484e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	3b01      	subs	r3, #1
 8004858:	025b      	lsls	r3, r3, #9
 800485a:	b29b      	uxth	r3, r3
 800485c:	431a      	orrs	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	3b01      	subs	r3, #1
 8004864:	041b      	lsls	r3, r3, #16
 8004866:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800486a:	431a      	orrs	r2, r3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	3b01      	subs	r3, #1
 8004872:	061b      	lsls	r3, r3, #24
 8004874:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004878:	4931      	ldr	r1, [pc, #196]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 800487a:	4313      	orrs	r3, r2
 800487c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800487e:	4b30      	ldr	r3, [pc, #192]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 8004880:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004882:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	695b      	ldr	r3, [r3, #20]
 800488a:	492d      	ldr	r1, [pc, #180]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 800488c:	4313      	orrs	r3, r2
 800488e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004890:	4b2b      	ldr	r3, [pc, #172]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 8004892:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004894:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	699b      	ldr	r3, [r3, #24]
 800489c:	4928      	ldr	r1, [pc, #160]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 800489e:	4313      	orrs	r3, r2
 80048a0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80048a2:	4b27      	ldr	r3, [pc, #156]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	4a26      	ldr	r2, [pc, #152]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80048ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80048ae:	4b24      	ldr	r3, [pc, #144]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048b2:	4b24      	ldr	r3, [pc, #144]	@ (8004944 <RCCEx_PLL3_Config+0x160>)
 80048b4:	4013      	ands	r3, r2
 80048b6:	687a      	ldr	r2, [r7, #4]
 80048b8:	69d2      	ldr	r2, [r2, #28]
 80048ba:	00d2      	lsls	r2, r2, #3
 80048bc:	4920      	ldr	r1, [pc, #128]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80048c2:	4b1f      	ldr	r3, [pc, #124]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048c6:	4a1e      	ldr	r2, [pc, #120]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80048cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80048d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048d8:	4a19      	ldr	r2, [pc, #100]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048da:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80048de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048e0:	e00f      	b.n	8004902 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d106      	bne.n	80048f6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80048e8:	4b15      	ldr	r3, [pc, #84]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048ec:	4a14      	ldr	r2, [pc, #80]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048ee:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80048f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80048f4:	e005      	b.n	8004902 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80048f6:	4b12      	ldr	r3, [pc, #72]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048fa:	4a11      	ldr	r2, [pc, #68]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 80048fc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004900:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004902:	4b0f      	ldr	r3, [pc, #60]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a0e      	ldr	r2, [pc, #56]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 8004908:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800490c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800490e:	f7fc fdf1 	bl	80014f4 <HAL_GetTick>
 8004912:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004914:	e008      	b.n	8004928 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004916:	f7fc fded 	bl	80014f4 <HAL_GetTick>
 800491a:	4602      	mov	r2, r0
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	2b02      	cmp	r3, #2
 8004922:	d901      	bls.n	8004928 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004924:	2303      	movs	r3, #3
 8004926:	e006      	b.n	8004936 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004928:	4b05      	ldr	r3, [pc, #20]	@ (8004940 <RCCEx_PLL3_Config+0x15c>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d0f0      	beq.n	8004916 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004934:	7bfb      	ldrb	r3, [r7, #15]
}
 8004936:	4618      	mov	r0, r3
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}
 800493e:	bf00      	nop
 8004940:	58024400 	.word	0x58024400
 8004944:	ffff0007 	.word	0xffff0007

08004948 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e042      	b.n	80049e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004960:	2b00      	cmp	r3, #0
 8004962:	d106      	bne.n	8004972 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	2200      	movs	r2, #0
 8004968:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800496c:	6878      	ldr	r0, [r7, #4]
 800496e:	f7fc f97b 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2224      	movs	r2, #36	@ 0x24
 8004976:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f022 0201 	bic.w	r2, r2, #1
 8004988:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f000 fe1e 	bl	80055d4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f000 f8b3 	bl	8004b04 <UART_SetConfig>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e01b      	b.n	80049e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	685a      	ldr	r2, [r3, #4]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80049b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	689a      	ldr	r2, [r3, #8]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80049c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	681a      	ldr	r2, [r3, #0]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f042 0201 	orr.w	r2, r2, #1
 80049d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 fe9d 	bl	8005718 <UART_CheckIdleState>
 80049de:	4603      	mov	r3, r0
}
 80049e0:	4618      	mov	r0, r3
 80049e2:	3708      	adds	r7, #8
 80049e4:	46bd      	mov	sp, r7
 80049e6:	bd80      	pop	{r7, pc}

080049e8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b08a      	sub	sp, #40	@ 0x28
 80049ec:	af02      	add	r7, sp, #8
 80049ee:	60f8      	str	r0, [r7, #12]
 80049f0:	60b9      	str	r1, [r7, #8]
 80049f2:	603b      	str	r3, [r7, #0]
 80049f4:	4613      	mov	r3, r2
 80049f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049fe:	2b20      	cmp	r3, #32
 8004a00:	d17b      	bne.n	8004afa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a02:	68bb      	ldr	r3, [r7, #8]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d002      	beq.n	8004a0e <HAL_UART_Transmit+0x26>
 8004a08:	88fb      	ldrh	r3, [r7, #6]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d101      	bne.n	8004a12 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e074      	b.n	8004afc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2221      	movs	r2, #33	@ 0x21
 8004a1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a22:	f7fc fd67 	bl	80014f4 <HAL_GetTick>
 8004a26:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	88fa      	ldrh	r2, [r7, #6]
 8004a2c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	88fa      	ldrh	r2, [r7, #6]
 8004a34:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a40:	d108      	bne.n	8004a54 <HAL_UART_Transmit+0x6c>
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	691b      	ldr	r3, [r3, #16]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d104      	bne.n	8004a54 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	e003      	b.n	8004a5c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a58:	2300      	movs	r3, #0
 8004a5a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a5c:	e030      	b.n	8004ac0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a5e:	683b      	ldr	r3, [r7, #0]
 8004a60:	9300      	str	r3, [sp, #0]
 8004a62:	697b      	ldr	r3, [r7, #20]
 8004a64:	2200      	movs	r2, #0
 8004a66:	2180      	movs	r1, #128	@ 0x80
 8004a68:	68f8      	ldr	r0, [r7, #12]
 8004a6a:	f000 feff 	bl	800586c <UART_WaitOnFlagUntilTimeout>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d005      	beq.n	8004a80 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e03d      	b.n	8004afc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10b      	bne.n	8004a9e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	881b      	ldrh	r3, [r3, #0]
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a94:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a96:	69bb      	ldr	r3, [r7, #24]
 8004a98:	3302      	adds	r3, #2
 8004a9a:	61bb      	str	r3, [r7, #24]
 8004a9c:	e007      	b.n	8004aae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	781a      	ldrb	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	3301      	adds	r3, #1
 8004aac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ab4:	b29b      	uxth	r3, r3
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	b29a      	uxth	r2, r3
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004ac6:	b29b      	uxth	r3, r3
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d1c8      	bne.n	8004a5e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	9300      	str	r3, [sp, #0]
 8004ad0:	697b      	ldr	r3, [r7, #20]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	2140      	movs	r1, #64	@ 0x40
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fec8 	bl	800586c <UART_WaitOnFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2220      	movs	r2, #32
 8004ae6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e006      	b.n	8004afc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2220      	movs	r2, #32
 8004af2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004af6:	2300      	movs	r3, #0
 8004af8:	e000      	b.n	8004afc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004afa:	2302      	movs	r3, #2
  }
}
 8004afc:	4618      	mov	r0, r3
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b08:	b092      	sub	sp, #72	@ 0x48
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	697b      	ldr	r3, [r7, #20]
 8004b1a:	691b      	ldr	r3, [r3, #16]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	695b      	ldr	r3, [r3, #20]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	697b      	ldr	r3, [r7, #20]
 8004b26:	69db      	ldr	r3, [r3, #28]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	4bbe      	ldr	r3, [pc, #760]	@ (8004e2c <UART_SetConfig+0x328>)
 8004b34:	4013      	ands	r3, r2
 8004b36:	697a      	ldr	r2, [r7, #20]
 8004b38:	6812      	ldr	r2, [r2, #0]
 8004b3a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b3c:	430b      	orrs	r3, r1
 8004b3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	430a      	orrs	r2, r1
 8004b54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	699b      	ldr	r3, [r3, #24]
 8004b5a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4ab3      	ldr	r2, [pc, #716]	@ (8004e30 <UART_SetConfig+0x32c>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d004      	beq.n	8004b70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	6a1b      	ldr	r3, [r3, #32]
 8004b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	689a      	ldr	r2, [r3, #8]
 8004b76:	4baf      	ldr	r3, [pc, #700]	@ (8004e34 <UART_SetConfig+0x330>)
 8004b78:	4013      	ands	r3, r2
 8004b7a:	697a      	ldr	r2, [r7, #20]
 8004b7c:	6812      	ldr	r2, [r2, #0]
 8004b7e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004b80:	430b      	orrs	r3, r1
 8004b82:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b8a:	f023 010f 	bic.w	r1, r3, #15
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	430a      	orrs	r2, r1
 8004b98:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004b9a:	697b      	ldr	r3, [r7, #20]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	4aa6      	ldr	r2, [pc, #664]	@ (8004e38 <UART_SetConfig+0x334>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d177      	bne.n	8004c94 <UART_SetConfig+0x190>
 8004ba4:	4ba5      	ldr	r3, [pc, #660]	@ (8004e3c <UART_SetConfig+0x338>)
 8004ba6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ba8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bac:	2b28      	cmp	r3, #40	@ 0x28
 8004bae:	d86d      	bhi.n	8004c8c <UART_SetConfig+0x188>
 8004bb0:	a201      	add	r2, pc, #4	@ (adr r2, 8004bb8 <UART_SetConfig+0xb4>)
 8004bb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb6:	bf00      	nop
 8004bb8:	08004c5d 	.word	0x08004c5d
 8004bbc:	08004c8d 	.word	0x08004c8d
 8004bc0:	08004c8d 	.word	0x08004c8d
 8004bc4:	08004c8d 	.word	0x08004c8d
 8004bc8:	08004c8d 	.word	0x08004c8d
 8004bcc:	08004c8d 	.word	0x08004c8d
 8004bd0:	08004c8d 	.word	0x08004c8d
 8004bd4:	08004c8d 	.word	0x08004c8d
 8004bd8:	08004c65 	.word	0x08004c65
 8004bdc:	08004c8d 	.word	0x08004c8d
 8004be0:	08004c8d 	.word	0x08004c8d
 8004be4:	08004c8d 	.word	0x08004c8d
 8004be8:	08004c8d 	.word	0x08004c8d
 8004bec:	08004c8d 	.word	0x08004c8d
 8004bf0:	08004c8d 	.word	0x08004c8d
 8004bf4:	08004c8d 	.word	0x08004c8d
 8004bf8:	08004c6d 	.word	0x08004c6d
 8004bfc:	08004c8d 	.word	0x08004c8d
 8004c00:	08004c8d 	.word	0x08004c8d
 8004c04:	08004c8d 	.word	0x08004c8d
 8004c08:	08004c8d 	.word	0x08004c8d
 8004c0c:	08004c8d 	.word	0x08004c8d
 8004c10:	08004c8d 	.word	0x08004c8d
 8004c14:	08004c8d 	.word	0x08004c8d
 8004c18:	08004c75 	.word	0x08004c75
 8004c1c:	08004c8d 	.word	0x08004c8d
 8004c20:	08004c8d 	.word	0x08004c8d
 8004c24:	08004c8d 	.word	0x08004c8d
 8004c28:	08004c8d 	.word	0x08004c8d
 8004c2c:	08004c8d 	.word	0x08004c8d
 8004c30:	08004c8d 	.word	0x08004c8d
 8004c34:	08004c8d 	.word	0x08004c8d
 8004c38:	08004c7d 	.word	0x08004c7d
 8004c3c:	08004c8d 	.word	0x08004c8d
 8004c40:	08004c8d 	.word	0x08004c8d
 8004c44:	08004c8d 	.word	0x08004c8d
 8004c48:	08004c8d 	.word	0x08004c8d
 8004c4c:	08004c8d 	.word	0x08004c8d
 8004c50:	08004c8d 	.word	0x08004c8d
 8004c54:	08004c8d 	.word	0x08004c8d
 8004c58:	08004c85 	.word	0x08004c85
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c62:	e222      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c64:	2304      	movs	r3, #4
 8004c66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c6a:	e21e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c6c:	2308      	movs	r3, #8
 8004c6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c72:	e21a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c74:	2310      	movs	r3, #16
 8004c76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7a:	e216      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c7c:	2320      	movs	r3, #32
 8004c7e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c82:	e212      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c84:	2340      	movs	r3, #64	@ 0x40
 8004c86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8a:	e20e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c8c:	2380      	movs	r3, #128	@ 0x80
 8004c8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c92:	e20a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a69      	ldr	r2, [pc, #420]	@ (8004e40 <UART_SetConfig+0x33c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d130      	bne.n	8004d00 <UART_SetConfig+0x1fc>
 8004c9e:	4b67      	ldr	r3, [pc, #412]	@ (8004e3c <UART_SetConfig+0x338>)
 8004ca0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	2b05      	cmp	r3, #5
 8004ca8:	d826      	bhi.n	8004cf8 <UART_SetConfig+0x1f4>
 8004caa:	a201      	add	r2, pc, #4	@ (adr r2, 8004cb0 <UART_SetConfig+0x1ac>)
 8004cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cb0:	08004cc9 	.word	0x08004cc9
 8004cb4:	08004cd1 	.word	0x08004cd1
 8004cb8:	08004cd9 	.word	0x08004cd9
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cce:	e1ec      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004cd0:	2304      	movs	r3, #4
 8004cd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cd6:	e1e8      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004cd8:	2308      	movs	r3, #8
 8004cda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cde:	e1e4      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004ce0:	2310      	movs	r3, #16
 8004ce2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ce6:	e1e0      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004ce8:	2320      	movs	r3, #32
 8004cea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cee:	e1dc      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004cf0:	2340      	movs	r3, #64	@ 0x40
 8004cf2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cf6:	e1d8      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004cf8:	2380      	movs	r3, #128	@ 0x80
 8004cfa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfe:	e1d4      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a4f      	ldr	r2, [pc, #316]	@ (8004e44 <UART_SetConfig+0x340>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d130      	bne.n	8004d6c <UART_SetConfig+0x268>
 8004d0a:	4b4c      	ldr	r3, [pc, #304]	@ (8004e3c <UART_SetConfig+0x338>)
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d0e:	f003 0307 	and.w	r3, r3, #7
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	d826      	bhi.n	8004d64 <UART_SetConfig+0x260>
 8004d16:	a201      	add	r2, pc, #4	@ (adr r2, 8004d1c <UART_SetConfig+0x218>)
 8004d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d1c:	08004d35 	.word	0x08004d35
 8004d20:	08004d3d 	.word	0x08004d3d
 8004d24:	08004d45 	.word	0x08004d45
 8004d28:	08004d4d 	.word	0x08004d4d
 8004d2c:	08004d55 	.word	0x08004d55
 8004d30:	08004d5d 	.word	0x08004d5d
 8004d34:	2300      	movs	r3, #0
 8004d36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d3a:	e1b6      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d3c:	2304      	movs	r3, #4
 8004d3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d42:	e1b2      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d44:	2308      	movs	r3, #8
 8004d46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d4a:	e1ae      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d52:	e1aa      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d54:	2320      	movs	r3, #32
 8004d56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d5a:	e1a6      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d5c:	2340      	movs	r3, #64	@ 0x40
 8004d5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d62:	e1a2      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d64:	2380      	movs	r3, #128	@ 0x80
 8004d66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6a:	e19e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a35      	ldr	r2, [pc, #212]	@ (8004e48 <UART_SetConfig+0x344>)
 8004d72:	4293      	cmp	r3, r2
 8004d74:	d130      	bne.n	8004dd8 <UART_SetConfig+0x2d4>
 8004d76:	4b31      	ldr	r3, [pc, #196]	@ (8004e3c <UART_SetConfig+0x338>)
 8004d78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	2b05      	cmp	r3, #5
 8004d80:	d826      	bhi.n	8004dd0 <UART_SetConfig+0x2cc>
 8004d82:	a201      	add	r2, pc, #4	@ (adr r2, 8004d88 <UART_SetConfig+0x284>)
 8004d84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d88:	08004da1 	.word	0x08004da1
 8004d8c:	08004da9 	.word	0x08004da9
 8004d90:	08004db1 	.word	0x08004db1
 8004d94:	08004db9 	.word	0x08004db9
 8004d98:	08004dc1 	.word	0x08004dc1
 8004d9c:	08004dc9 	.word	0x08004dc9
 8004da0:	2300      	movs	r3, #0
 8004da2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004da6:	e180      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004da8:	2304      	movs	r3, #4
 8004daa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dae:	e17c      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004db0:	2308      	movs	r3, #8
 8004db2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004db6:	e178      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004db8:	2310      	movs	r3, #16
 8004dba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dbe:	e174      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004dc0:	2320      	movs	r3, #32
 8004dc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dc6:	e170      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004dc8:	2340      	movs	r3, #64	@ 0x40
 8004dca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dce:	e16c      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004dd0:	2380      	movs	r3, #128	@ 0x80
 8004dd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd6:	e168      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8004e4c <UART_SetConfig+0x348>)
 8004dde:	4293      	cmp	r3, r2
 8004de0:	d142      	bne.n	8004e68 <UART_SetConfig+0x364>
 8004de2:	4b16      	ldr	r3, [pc, #88]	@ (8004e3c <UART_SetConfig+0x338>)
 8004de4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004de6:	f003 0307 	and.w	r3, r3, #7
 8004dea:	2b05      	cmp	r3, #5
 8004dec:	d838      	bhi.n	8004e60 <UART_SetConfig+0x35c>
 8004dee:	a201      	add	r2, pc, #4	@ (adr r2, 8004df4 <UART_SetConfig+0x2f0>)
 8004df0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004df4:	08004e0d 	.word	0x08004e0d
 8004df8:	08004e15 	.word	0x08004e15
 8004dfc:	08004e1d 	.word	0x08004e1d
 8004e00:	08004e25 	.word	0x08004e25
 8004e04:	08004e51 	.word	0x08004e51
 8004e08:	08004e59 	.word	0x08004e59
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e12:	e14a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e14:	2304      	movs	r3, #4
 8004e16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e1a:	e146      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e22:	e142      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e24:	2310      	movs	r3, #16
 8004e26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e2a:	e13e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e2c:	cfff69f3 	.word	0xcfff69f3
 8004e30:	58000c00 	.word	0x58000c00
 8004e34:	11fff4ff 	.word	0x11fff4ff
 8004e38:	40011000 	.word	0x40011000
 8004e3c:	58024400 	.word	0x58024400
 8004e40:	40004400 	.word	0x40004400
 8004e44:	40004800 	.word	0x40004800
 8004e48:	40004c00 	.word	0x40004c00
 8004e4c:	40005000 	.word	0x40005000
 8004e50:	2320      	movs	r3, #32
 8004e52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e56:	e128      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e58:	2340      	movs	r3, #64	@ 0x40
 8004e5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e5e:	e124      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e60:	2380      	movs	r3, #128	@ 0x80
 8004e62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004e66:	e120      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4acb      	ldr	r2, [pc, #812]	@ (800519c <UART_SetConfig+0x698>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d176      	bne.n	8004f60 <UART_SetConfig+0x45c>
 8004e72:	4bcb      	ldr	r3, [pc, #812]	@ (80051a0 <UART_SetConfig+0x69c>)
 8004e74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e76:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004e7a:	2b28      	cmp	r3, #40	@ 0x28
 8004e7c:	d86c      	bhi.n	8004f58 <UART_SetConfig+0x454>
 8004e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e84 <UART_SetConfig+0x380>)
 8004e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e84:	08004f29 	.word	0x08004f29
 8004e88:	08004f59 	.word	0x08004f59
 8004e8c:	08004f59 	.word	0x08004f59
 8004e90:	08004f59 	.word	0x08004f59
 8004e94:	08004f59 	.word	0x08004f59
 8004e98:	08004f59 	.word	0x08004f59
 8004e9c:	08004f59 	.word	0x08004f59
 8004ea0:	08004f59 	.word	0x08004f59
 8004ea4:	08004f31 	.word	0x08004f31
 8004ea8:	08004f59 	.word	0x08004f59
 8004eac:	08004f59 	.word	0x08004f59
 8004eb0:	08004f59 	.word	0x08004f59
 8004eb4:	08004f59 	.word	0x08004f59
 8004eb8:	08004f59 	.word	0x08004f59
 8004ebc:	08004f59 	.word	0x08004f59
 8004ec0:	08004f59 	.word	0x08004f59
 8004ec4:	08004f39 	.word	0x08004f39
 8004ec8:	08004f59 	.word	0x08004f59
 8004ecc:	08004f59 	.word	0x08004f59
 8004ed0:	08004f59 	.word	0x08004f59
 8004ed4:	08004f59 	.word	0x08004f59
 8004ed8:	08004f59 	.word	0x08004f59
 8004edc:	08004f59 	.word	0x08004f59
 8004ee0:	08004f59 	.word	0x08004f59
 8004ee4:	08004f41 	.word	0x08004f41
 8004ee8:	08004f59 	.word	0x08004f59
 8004eec:	08004f59 	.word	0x08004f59
 8004ef0:	08004f59 	.word	0x08004f59
 8004ef4:	08004f59 	.word	0x08004f59
 8004ef8:	08004f59 	.word	0x08004f59
 8004efc:	08004f59 	.word	0x08004f59
 8004f00:	08004f59 	.word	0x08004f59
 8004f04:	08004f49 	.word	0x08004f49
 8004f08:	08004f59 	.word	0x08004f59
 8004f0c:	08004f59 	.word	0x08004f59
 8004f10:	08004f59 	.word	0x08004f59
 8004f14:	08004f59 	.word	0x08004f59
 8004f18:	08004f59 	.word	0x08004f59
 8004f1c:	08004f59 	.word	0x08004f59
 8004f20:	08004f59 	.word	0x08004f59
 8004f24:	08004f51 	.word	0x08004f51
 8004f28:	2301      	movs	r3, #1
 8004f2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f2e:	e0bc      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f30:	2304      	movs	r3, #4
 8004f32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f36:	e0b8      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f38:	2308      	movs	r3, #8
 8004f3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f3e:	e0b4      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f40:	2310      	movs	r3, #16
 8004f42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f46:	e0b0      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f48:	2320      	movs	r3, #32
 8004f4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f4e:	e0ac      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f50:	2340      	movs	r3, #64	@ 0x40
 8004f52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f56:	e0a8      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f58:	2380      	movs	r3, #128	@ 0x80
 8004f5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f5e:	e0a4      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a8f      	ldr	r2, [pc, #572]	@ (80051a4 <UART_SetConfig+0x6a0>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d130      	bne.n	8004fcc <UART_SetConfig+0x4c8>
 8004f6a:	4b8d      	ldr	r3, [pc, #564]	@ (80051a0 <UART_SetConfig+0x69c>)
 8004f6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f6e:	f003 0307 	and.w	r3, r3, #7
 8004f72:	2b05      	cmp	r3, #5
 8004f74:	d826      	bhi.n	8004fc4 <UART_SetConfig+0x4c0>
 8004f76:	a201      	add	r2, pc, #4	@ (adr r2, 8004f7c <UART_SetConfig+0x478>)
 8004f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f7c:	08004f95 	.word	0x08004f95
 8004f80:	08004f9d 	.word	0x08004f9d
 8004f84:	08004fa5 	.word	0x08004fa5
 8004f88:	08004fad 	.word	0x08004fad
 8004f8c:	08004fb5 	.word	0x08004fb5
 8004f90:	08004fbd 	.word	0x08004fbd
 8004f94:	2300      	movs	r3, #0
 8004f96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004f9a:	e086      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004f9c:	2304      	movs	r3, #4
 8004f9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fa2:	e082      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fa4:	2308      	movs	r3, #8
 8004fa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004faa:	e07e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fac:	2310      	movs	r3, #16
 8004fae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fb2:	e07a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fb4:	2320      	movs	r3, #32
 8004fb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fba:	e076      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fbc:	2340      	movs	r3, #64	@ 0x40
 8004fbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fc2:	e072      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fc4:	2380      	movs	r3, #128	@ 0x80
 8004fc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004fca:	e06e      	b.n	80050aa <UART_SetConfig+0x5a6>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	4a75      	ldr	r2, [pc, #468]	@ (80051a8 <UART_SetConfig+0x6a4>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d130      	bne.n	8005038 <UART_SetConfig+0x534>
 8004fd6:	4b72      	ldr	r3, [pc, #456]	@ (80051a0 <UART_SetConfig+0x69c>)
 8004fd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fda:	f003 0307 	and.w	r3, r3, #7
 8004fde:	2b05      	cmp	r3, #5
 8004fe0:	d826      	bhi.n	8005030 <UART_SetConfig+0x52c>
 8004fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8004fe8 <UART_SetConfig+0x4e4>)
 8004fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fe8:	08005001 	.word	0x08005001
 8004fec:	08005009 	.word	0x08005009
 8004ff0:	08005011 	.word	0x08005011
 8004ff4:	08005019 	.word	0x08005019
 8004ff8:	08005021 	.word	0x08005021
 8004ffc:	08005029 	.word	0x08005029
 8005000:	2300      	movs	r3, #0
 8005002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005006:	e050      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005008:	2304      	movs	r3, #4
 800500a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800500e:	e04c      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005010:	2308      	movs	r3, #8
 8005012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005016:	e048      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005018:	2310      	movs	r3, #16
 800501a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800501e:	e044      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005020:	2320      	movs	r3, #32
 8005022:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005026:	e040      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005028:	2340      	movs	r3, #64	@ 0x40
 800502a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800502e:	e03c      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005030:	2380      	movs	r3, #128	@ 0x80
 8005032:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005036:	e038      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a5b      	ldr	r2, [pc, #364]	@ (80051ac <UART_SetConfig+0x6a8>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d130      	bne.n	80050a4 <UART_SetConfig+0x5a0>
 8005042:	4b57      	ldr	r3, [pc, #348]	@ (80051a0 <UART_SetConfig+0x69c>)
 8005044:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005046:	f003 0307 	and.w	r3, r3, #7
 800504a:	2b05      	cmp	r3, #5
 800504c:	d826      	bhi.n	800509c <UART_SetConfig+0x598>
 800504e:	a201      	add	r2, pc, #4	@ (adr r2, 8005054 <UART_SetConfig+0x550>)
 8005050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005054:	0800506d 	.word	0x0800506d
 8005058:	08005075 	.word	0x08005075
 800505c:	0800507d 	.word	0x0800507d
 8005060:	08005085 	.word	0x08005085
 8005064:	0800508d 	.word	0x0800508d
 8005068:	08005095 	.word	0x08005095
 800506c:	2302      	movs	r3, #2
 800506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005072:	e01a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005074:	2304      	movs	r3, #4
 8005076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800507a:	e016      	b.n	80050aa <UART_SetConfig+0x5a6>
 800507c:	2308      	movs	r3, #8
 800507e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005082:	e012      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005084:	2310      	movs	r3, #16
 8005086:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800508a:	e00e      	b.n	80050aa <UART_SetConfig+0x5a6>
 800508c:	2320      	movs	r3, #32
 800508e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8005092:	e00a      	b.n	80050aa <UART_SetConfig+0x5a6>
 8005094:	2340      	movs	r3, #64	@ 0x40
 8005096:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800509a:	e006      	b.n	80050aa <UART_SetConfig+0x5a6>
 800509c:	2380      	movs	r3, #128	@ 0x80
 800509e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80050a2:	e002      	b.n	80050aa <UART_SetConfig+0x5a6>
 80050a4:	2380      	movs	r3, #128	@ 0x80
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	4a3f      	ldr	r2, [pc, #252]	@ (80051ac <UART_SetConfig+0x6a8>)
 80050b0:	4293      	cmp	r3, r2
 80050b2:	f040 80f8 	bne.w	80052a6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050b6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80050ba:	2b20      	cmp	r3, #32
 80050bc:	dc46      	bgt.n	800514c <UART_SetConfig+0x648>
 80050be:	2b02      	cmp	r3, #2
 80050c0:	f2c0 8082 	blt.w	80051c8 <UART_SetConfig+0x6c4>
 80050c4:	3b02      	subs	r3, #2
 80050c6:	2b1e      	cmp	r3, #30
 80050c8:	d87e      	bhi.n	80051c8 <UART_SetConfig+0x6c4>
 80050ca:	a201      	add	r2, pc, #4	@ (adr r2, 80050d0 <UART_SetConfig+0x5cc>)
 80050cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050d0:	08005153 	.word	0x08005153
 80050d4:	080051c9 	.word	0x080051c9
 80050d8:	0800515b 	.word	0x0800515b
 80050dc:	080051c9 	.word	0x080051c9
 80050e0:	080051c9 	.word	0x080051c9
 80050e4:	080051c9 	.word	0x080051c9
 80050e8:	0800516b 	.word	0x0800516b
 80050ec:	080051c9 	.word	0x080051c9
 80050f0:	080051c9 	.word	0x080051c9
 80050f4:	080051c9 	.word	0x080051c9
 80050f8:	080051c9 	.word	0x080051c9
 80050fc:	080051c9 	.word	0x080051c9
 8005100:	080051c9 	.word	0x080051c9
 8005104:	080051c9 	.word	0x080051c9
 8005108:	0800517b 	.word	0x0800517b
 800510c:	080051c9 	.word	0x080051c9
 8005110:	080051c9 	.word	0x080051c9
 8005114:	080051c9 	.word	0x080051c9
 8005118:	080051c9 	.word	0x080051c9
 800511c:	080051c9 	.word	0x080051c9
 8005120:	080051c9 	.word	0x080051c9
 8005124:	080051c9 	.word	0x080051c9
 8005128:	080051c9 	.word	0x080051c9
 800512c:	080051c9 	.word	0x080051c9
 8005130:	080051c9 	.word	0x080051c9
 8005134:	080051c9 	.word	0x080051c9
 8005138:	080051c9 	.word	0x080051c9
 800513c:	080051c9 	.word	0x080051c9
 8005140:	080051c9 	.word	0x080051c9
 8005144:	080051c9 	.word	0x080051c9
 8005148:	080051bb 	.word	0x080051bb
 800514c:	2b40      	cmp	r3, #64	@ 0x40
 800514e:	d037      	beq.n	80051c0 <UART_SetConfig+0x6bc>
 8005150:	e03a      	b.n	80051c8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8005152:	f7fe ffd7 	bl	8004104 <HAL_RCCEx_GetD3PCLK1Freq>
 8005156:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005158:	e03c      	b.n	80051d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800515a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800515e:	4618      	mov	r0, r3
 8005160:	f7fe ffe6 	bl	8004130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005166:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005168:	e034      	b.n	80051d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800516a:	f107 0318 	add.w	r3, r7, #24
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff f932 	bl	80043d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005178:	e02c      	b.n	80051d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800517a:	4b09      	ldr	r3, [pc, #36]	@ (80051a0 <UART_SetConfig+0x69c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0320 	and.w	r3, r3, #32
 8005182:	2b00      	cmp	r3, #0
 8005184:	d016      	beq.n	80051b4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005186:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <UART_SetConfig+0x69c>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	08db      	lsrs	r3, r3, #3
 800518c:	f003 0303 	and.w	r3, r3, #3
 8005190:	4a07      	ldr	r2, [pc, #28]	@ (80051b0 <UART_SetConfig+0x6ac>)
 8005192:	fa22 f303 	lsr.w	r3, r2, r3
 8005196:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005198:	e01c      	b.n	80051d4 <UART_SetConfig+0x6d0>
 800519a:	bf00      	nop
 800519c:	40011400 	.word	0x40011400
 80051a0:	58024400 	.word	0x58024400
 80051a4:	40007800 	.word	0x40007800
 80051a8:	40007c00 	.word	0x40007c00
 80051ac:	58000c00 	.word	0x58000c00
 80051b0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80051b4:	4b9d      	ldr	r3, [pc, #628]	@ (800542c <UART_SetConfig+0x928>)
 80051b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051b8:	e00c      	b.n	80051d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80051ba:	4b9d      	ldr	r3, [pc, #628]	@ (8005430 <UART_SetConfig+0x92c>)
 80051bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051be:	e009      	b.n	80051d4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80051c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80051c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80051c6:	e005      	b.n	80051d4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80051c8:	2300      	movs	r3, #0
 80051ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80051d2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80051d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	f000 81de 	beq.w	8005598 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e0:	4a94      	ldr	r2, [pc, #592]	@ (8005434 <UART_SetConfig+0x930>)
 80051e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80051e6:	461a      	mov	r2, r3
 80051e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80051ee:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	685a      	ldr	r2, [r3, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	005b      	lsls	r3, r3, #1
 80051f8:	4413      	add	r3, r2
 80051fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051fc:	429a      	cmp	r2, r3
 80051fe:	d305      	bcc.n	800520c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005206:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005208:	429a      	cmp	r2, r3
 800520a:	d903      	bls.n	8005214 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8005212:	e1c1      	b.n	8005598 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005214:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005216:	2200      	movs	r2, #0
 8005218:	60bb      	str	r3, [r7, #8]
 800521a:	60fa      	str	r2, [r7, #12]
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005220:	4a84      	ldr	r2, [pc, #528]	@ (8005434 <UART_SetConfig+0x930>)
 8005222:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005226:	b29b      	uxth	r3, r3
 8005228:	2200      	movs	r2, #0
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	607a      	str	r2, [r7, #4]
 800522e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005232:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005236:	f7fb f8a3 	bl	8000380 <__aeabi_uldivmod>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	4610      	mov	r0, r2
 8005240:	4619      	mov	r1, r3
 8005242:	f04f 0200 	mov.w	r2, #0
 8005246:	f04f 0300 	mov.w	r3, #0
 800524a:	020b      	lsls	r3, r1, #8
 800524c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8005250:	0202      	lsls	r2, r0, #8
 8005252:	6979      	ldr	r1, [r7, #20]
 8005254:	6849      	ldr	r1, [r1, #4]
 8005256:	0849      	lsrs	r1, r1, #1
 8005258:	2000      	movs	r0, #0
 800525a:	460c      	mov	r4, r1
 800525c:	4605      	mov	r5, r0
 800525e:	eb12 0804 	adds.w	r8, r2, r4
 8005262:	eb43 0905 	adc.w	r9, r3, r5
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	469a      	mov	sl, r3
 800526e:	4693      	mov	fp, r2
 8005270:	4652      	mov	r2, sl
 8005272:	465b      	mov	r3, fp
 8005274:	4640      	mov	r0, r8
 8005276:	4649      	mov	r1, r9
 8005278:	f7fb f882 	bl	8000380 <__aeabi_uldivmod>
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4613      	mov	r3, r2
 8005282:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005284:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005286:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800528a:	d308      	bcc.n	800529e <UART_SetConfig+0x79a>
 800528c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005292:	d204      	bcs.n	800529e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800529a:	60da      	str	r2, [r3, #12]
 800529c:	e17c      	b.n	8005598 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80052a4:	e178      	b.n	8005598 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	69db      	ldr	r3, [r3, #28]
 80052aa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80052ae:	f040 80c5 	bne.w	800543c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80052b2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80052b6:	2b20      	cmp	r3, #32
 80052b8:	dc48      	bgt.n	800534c <UART_SetConfig+0x848>
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	db7b      	blt.n	80053b6 <UART_SetConfig+0x8b2>
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d879      	bhi.n	80053b6 <UART_SetConfig+0x8b2>
 80052c2:	a201      	add	r2, pc, #4	@ (adr r2, 80052c8 <UART_SetConfig+0x7c4>)
 80052c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052c8:	08005353 	.word	0x08005353
 80052cc:	0800535b 	.word	0x0800535b
 80052d0:	080053b7 	.word	0x080053b7
 80052d4:	080053b7 	.word	0x080053b7
 80052d8:	08005363 	.word	0x08005363
 80052dc:	080053b7 	.word	0x080053b7
 80052e0:	080053b7 	.word	0x080053b7
 80052e4:	080053b7 	.word	0x080053b7
 80052e8:	08005373 	.word	0x08005373
 80052ec:	080053b7 	.word	0x080053b7
 80052f0:	080053b7 	.word	0x080053b7
 80052f4:	080053b7 	.word	0x080053b7
 80052f8:	080053b7 	.word	0x080053b7
 80052fc:	080053b7 	.word	0x080053b7
 8005300:	080053b7 	.word	0x080053b7
 8005304:	080053b7 	.word	0x080053b7
 8005308:	08005383 	.word	0x08005383
 800530c:	080053b7 	.word	0x080053b7
 8005310:	080053b7 	.word	0x080053b7
 8005314:	080053b7 	.word	0x080053b7
 8005318:	080053b7 	.word	0x080053b7
 800531c:	080053b7 	.word	0x080053b7
 8005320:	080053b7 	.word	0x080053b7
 8005324:	080053b7 	.word	0x080053b7
 8005328:	080053b7 	.word	0x080053b7
 800532c:	080053b7 	.word	0x080053b7
 8005330:	080053b7 	.word	0x080053b7
 8005334:	080053b7 	.word	0x080053b7
 8005338:	080053b7 	.word	0x080053b7
 800533c:	080053b7 	.word	0x080053b7
 8005340:	080053b7 	.word	0x080053b7
 8005344:	080053b7 	.word	0x080053b7
 8005348:	080053a9 	.word	0x080053a9
 800534c:	2b40      	cmp	r3, #64	@ 0x40
 800534e:	d02e      	beq.n	80053ae <UART_SetConfig+0x8aa>
 8005350:	e031      	b.n	80053b6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005352:	f7fd fca1 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 8005356:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005358:	e033      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800535a:	f7fd fcb3 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 800535e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005360:	e02f      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005362:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005366:	4618      	mov	r0, r3
 8005368:	f7fe fee2 	bl	8004130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800536c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005370:	e027      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005372:	f107 0318 	add.w	r3, r7, #24
 8005376:	4618      	mov	r0, r3
 8005378:	f7ff f82e 	bl	80043d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800537c:	69fb      	ldr	r3, [r7, #28]
 800537e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005380:	e01f      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005382:	4b2d      	ldr	r3, [pc, #180]	@ (8005438 <UART_SetConfig+0x934>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f003 0320 	and.w	r3, r3, #32
 800538a:	2b00      	cmp	r3, #0
 800538c:	d009      	beq.n	80053a2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800538e:	4b2a      	ldr	r3, [pc, #168]	@ (8005438 <UART_SetConfig+0x934>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	08db      	lsrs	r3, r3, #3
 8005394:	f003 0303 	and.w	r3, r3, #3
 8005398:	4a24      	ldr	r2, [pc, #144]	@ (800542c <UART_SetConfig+0x928>)
 800539a:	fa22 f303 	lsr.w	r3, r2, r3
 800539e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80053a0:	e00f      	b.n	80053c2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80053a2:	4b22      	ldr	r3, [pc, #136]	@ (800542c <UART_SetConfig+0x928>)
 80053a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053a6:	e00c      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80053a8:	4b21      	ldr	r3, [pc, #132]	@ (8005430 <UART_SetConfig+0x92c>)
 80053aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053ac:	e009      	b.n	80053c2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80053ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80053b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80053b4:	e005      	b.n	80053c2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80053b6:	2300      	movs	r3, #0
 80053b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80053ba:	2301      	movs	r3, #1
 80053bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80053c0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80053c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 80e7 	beq.w	8005598 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ce:	4a19      	ldr	r2, [pc, #100]	@ (8005434 <UART_SetConfig+0x930>)
 80053d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053d4:	461a      	mov	r2, r3
 80053d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80053dc:	005a      	lsls	r2, r3, #1
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	085b      	lsrs	r3, r3, #1
 80053e4:	441a      	add	r2, r3
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ee:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80053f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f2:	2b0f      	cmp	r3, #15
 80053f4:	d916      	bls.n	8005424 <UART_SetConfig+0x920>
 80053f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80053fc:	d212      	bcs.n	8005424 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80053fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005400:	b29b      	uxth	r3, r3
 8005402:	f023 030f 	bic.w	r3, r3, #15
 8005406:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540a:	085b      	lsrs	r3, r3, #1
 800540c:	b29b      	uxth	r3, r3
 800540e:	f003 0307 	and.w	r3, r3, #7
 8005412:	b29a      	uxth	r2, r3
 8005414:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005416:	4313      	orrs	r3, r2
 8005418:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005420:	60da      	str	r2, [r3, #12]
 8005422:	e0b9      	b.n	8005598 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800542a:	e0b5      	b.n	8005598 <UART_SetConfig+0xa94>
 800542c:	03d09000 	.word	0x03d09000
 8005430:	003d0900 	.word	0x003d0900
 8005434:	08006ac8 	.word	0x08006ac8
 8005438:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800543c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005440:	2b20      	cmp	r3, #32
 8005442:	dc49      	bgt.n	80054d8 <UART_SetConfig+0x9d4>
 8005444:	2b00      	cmp	r3, #0
 8005446:	db7c      	blt.n	8005542 <UART_SetConfig+0xa3e>
 8005448:	2b20      	cmp	r3, #32
 800544a:	d87a      	bhi.n	8005542 <UART_SetConfig+0xa3e>
 800544c:	a201      	add	r2, pc, #4	@ (adr r2, 8005454 <UART_SetConfig+0x950>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	080054df 	.word	0x080054df
 8005458:	080054e7 	.word	0x080054e7
 800545c:	08005543 	.word	0x08005543
 8005460:	08005543 	.word	0x08005543
 8005464:	080054ef 	.word	0x080054ef
 8005468:	08005543 	.word	0x08005543
 800546c:	08005543 	.word	0x08005543
 8005470:	08005543 	.word	0x08005543
 8005474:	080054ff 	.word	0x080054ff
 8005478:	08005543 	.word	0x08005543
 800547c:	08005543 	.word	0x08005543
 8005480:	08005543 	.word	0x08005543
 8005484:	08005543 	.word	0x08005543
 8005488:	08005543 	.word	0x08005543
 800548c:	08005543 	.word	0x08005543
 8005490:	08005543 	.word	0x08005543
 8005494:	0800550f 	.word	0x0800550f
 8005498:	08005543 	.word	0x08005543
 800549c:	08005543 	.word	0x08005543
 80054a0:	08005543 	.word	0x08005543
 80054a4:	08005543 	.word	0x08005543
 80054a8:	08005543 	.word	0x08005543
 80054ac:	08005543 	.word	0x08005543
 80054b0:	08005543 	.word	0x08005543
 80054b4:	08005543 	.word	0x08005543
 80054b8:	08005543 	.word	0x08005543
 80054bc:	08005543 	.word	0x08005543
 80054c0:	08005543 	.word	0x08005543
 80054c4:	08005543 	.word	0x08005543
 80054c8:	08005543 	.word	0x08005543
 80054cc:	08005543 	.word	0x08005543
 80054d0:	08005543 	.word	0x08005543
 80054d4:	08005535 	.word	0x08005535
 80054d8:	2b40      	cmp	r3, #64	@ 0x40
 80054da:	d02e      	beq.n	800553a <UART_SetConfig+0xa36>
 80054dc:	e031      	b.n	8005542 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80054de:	f7fd fbdb 	bl	8002c98 <HAL_RCC_GetPCLK1Freq>
 80054e2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054e4:	e033      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80054e6:	f7fd fbed 	bl	8002cc4 <HAL_RCC_GetPCLK2Freq>
 80054ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80054ec:	e02f      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80054ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80054f2:	4618      	mov	r0, r3
 80054f4:	f7fe fe1c 	bl	8004130 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80054f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80054fc:	e027      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80054fe:	f107 0318 	add.w	r3, r7, #24
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe ff68 	bl	80043d8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800550c:	e01f      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800550e:	4b2d      	ldr	r3, [pc, #180]	@ (80055c4 <UART_SetConfig+0xac0>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f003 0320 	and.w	r3, r3, #32
 8005516:	2b00      	cmp	r3, #0
 8005518:	d009      	beq.n	800552e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800551a:	4b2a      	ldr	r3, [pc, #168]	@ (80055c4 <UART_SetConfig+0xac0>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	08db      	lsrs	r3, r3, #3
 8005520:	f003 0303 	and.w	r3, r3, #3
 8005524:	4a28      	ldr	r2, [pc, #160]	@ (80055c8 <UART_SetConfig+0xac4>)
 8005526:	fa22 f303 	lsr.w	r3, r2, r3
 800552a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800552c:	e00f      	b.n	800554e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800552e:	4b26      	ldr	r3, [pc, #152]	@ (80055c8 <UART_SetConfig+0xac4>)
 8005530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005532:	e00c      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005534:	4b25      	ldr	r3, [pc, #148]	@ (80055cc <UART_SetConfig+0xac8>)
 8005536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005538:	e009      	b.n	800554e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800553a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800553e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005540:	e005      	b.n	800554e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005546:	2301      	movs	r3, #1
 8005548:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800554c:	bf00      	nop
    }

    if (pclk != 0U)
 800554e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d021      	beq.n	8005598 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005558:	4a1d      	ldr	r2, [pc, #116]	@ (80055d0 <UART_SetConfig+0xacc>)
 800555a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800555e:	461a      	mov	r2, r3
 8005560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005562:	fbb3 f2f2 	udiv	r2, r3, r2
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	085b      	lsrs	r3, r3, #1
 800556c:	441a      	add	r2, r3
 800556e:	697b      	ldr	r3, [r7, #20]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	fbb2 f3f3 	udiv	r3, r2, r3
 8005576:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557a:	2b0f      	cmp	r3, #15
 800557c:	d909      	bls.n	8005592 <UART_SetConfig+0xa8e>
 800557e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005580:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005584:	d205      	bcs.n	8005592 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005588:	b29a      	uxth	r2, r3
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	60da      	str	r2, [r3, #12]
 8005590:	e002      	b.n	8005598 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	2201      	movs	r2, #1
 800559c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80055a0:	697b      	ldr	r3, [r7, #20]
 80055a2:	2201      	movs	r2, #1
 80055a4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	2200      	movs	r2, #0
 80055ac:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	2200      	movs	r2, #0
 80055b2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80055b4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80055b8:	4618      	mov	r0, r3
 80055ba:	3748      	adds	r7, #72	@ 0x48
 80055bc:	46bd      	mov	sp, r7
 80055be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055c2:	bf00      	nop
 80055c4:	58024400 	.word	0x58024400
 80055c8:	03d09000 	.word	0x03d09000
 80055cc:	003d0900 	.word	0x003d0900
 80055d0:	08006ac8 	.word	0x08006ac8

080055d4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e0:	f003 0308 	and.w	r3, r3, #8
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d00a      	beq.n	80055fe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	430a      	orrs	r2, r1
 80055fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00a      	beq.n	8005620 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d00a      	beq.n	8005642 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	685b      	ldr	r3, [r3, #4]
 8005632:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005646:	f003 0304 	and.w	r3, r3, #4
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00a      	beq.n	8005664 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	430a      	orrs	r2, r1
 8005662:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005668:	f003 0310 	and.w	r3, r3, #16
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00a      	beq.n	8005686 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	430a      	orrs	r2, r1
 8005684:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00a      	beq.n	80056a8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	430a      	orrs	r2, r1
 80056a6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01a      	beq.n	80056ea <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	430a      	orrs	r2, r1
 80056c8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80056d2:	d10a      	bne.n	80056ea <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	685b      	ldr	r3, [r3, #4]
 80056da:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	430a      	orrs	r2, r1
 80056e8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d00a      	beq.n	800570c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	430a      	orrs	r2, r1
 800570a:	605a      	str	r2, [r3, #4]
  }
}
 800570c:	bf00      	nop
 800570e:	370c      	adds	r7, #12
 8005710:	46bd      	mov	sp, r7
 8005712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005716:	4770      	bx	lr

08005718 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b098      	sub	sp, #96	@ 0x60
 800571c:	af02      	add	r7, sp, #8
 800571e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005728:	f7fb fee4 	bl	80014f4 <HAL_GetTick>
 800572c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f003 0308 	and.w	r3, r3, #8
 8005738:	2b08      	cmp	r3, #8
 800573a:	d12f      	bne.n	800579c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800573c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005740:	9300      	str	r3, [sp, #0]
 8005742:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005744:	2200      	movs	r2, #0
 8005746:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f88e 	bl	800586c <UART_WaitOnFlagUntilTimeout>
 8005750:	4603      	mov	r3, r0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d022      	beq.n	800579c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800575c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800575e:	e853 3f00 	ldrex	r3, [r3]
 8005762:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005766:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800576a:	653b      	str	r3, [r7, #80]	@ 0x50
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	461a      	mov	r2, r3
 8005772:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005774:	647b      	str	r3, [r7, #68]	@ 0x44
 8005776:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005778:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800577a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800577c:	e841 2300 	strex	r3, r2, [r1]
 8005780:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005782:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1e6      	bne.n	8005756 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	2220      	movs	r2, #32
 800578c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e063      	b.n	8005864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f003 0304 	and.w	r3, r3, #4
 80057a6:	2b04      	cmp	r3, #4
 80057a8:	d149      	bne.n	800583e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057aa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057ae:	9300      	str	r3, [sp, #0]
 80057b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057b2:	2200      	movs	r2, #0
 80057b4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80057b8:	6878      	ldr	r0, [r7, #4]
 80057ba:	f000 f857 	bl	800586c <UART_WaitOnFlagUntilTimeout>
 80057be:	4603      	mov	r3, r0
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d03c      	beq.n	800583e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057cc:	e853 3f00 	ldrex	r3, [r3]
 80057d0:	623b      	str	r3, [r7, #32]
   return(result);
 80057d2:	6a3b      	ldr	r3, [r7, #32]
 80057d4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	461a      	mov	r2, r3
 80057e0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057e2:	633b      	str	r3, [r7, #48]	@ 0x30
 80057e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80057e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057ea:	e841 2300 	strex	r3, r2, [r1]
 80057ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80057f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1e6      	bne.n	80057c4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	3308      	adds	r3, #8
 80057fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	e853 3f00 	ldrex	r3, [r3]
 8005804:	60fb      	str	r3, [r7, #12]
   return(result);
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	f023 0301 	bic.w	r3, r3, #1
 800580c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	3308      	adds	r3, #8
 8005814:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005816:	61fa      	str	r2, [r7, #28]
 8005818:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800581a:	69b9      	ldr	r1, [r7, #24]
 800581c:	69fa      	ldr	r2, [r7, #28]
 800581e:	e841 2300 	strex	r3, r2, [r1]
 8005822:	617b      	str	r3, [r7, #20]
   return(result);
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d1e5      	bne.n	80057f6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	2220      	movs	r2, #32
 800582e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	2200      	movs	r2, #0
 8005836:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800583a:	2303      	movs	r3, #3
 800583c:	e012      	b.n	8005864 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2220      	movs	r2, #32
 8005842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2220      	movs	r2, #32
 800584a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2200      	movs	r2, #0
 8005852:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	2200      	movs	r2, #0
 800585e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005862:	2300      	movs	r3, #0
}
 8005864:	4618      	mov	r0, r3
 8005866:	3758      	adds	r7, #88	@ 0x58
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	60b9      	str	r1, [r7, #8]
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	4613      	mov	r3, r2
 800587a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587c:	e04f      	b.n	800591e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800587e:	69bb      	ldr	r3, [r7, #24]
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005884:	d04b      	beq.n	800591e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005886:	f7fb fe35 	bl	80014f4 <HAL_GetTick>
 800588a:	4602      	mov	r2, r0
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	1ad3      	subs	r3, r2, r3
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	429a      	cmp	r2, r3
 8005894:	d302      	bcc.n	800589c <UART_WaitOnFlagUntilTimeout+0x30>
 8005896:	69bb      	ldr	r3, [r7, #24]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d101      	bne.n	80058a0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800589c:	2303      	movs	r3, #3
 800589e:	e04e      	b.n	800593e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 0304 	and.w	r3, r3, #4
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d037      	beq.n	800591e <UART_WaitOnFlagUntilTimeout+0xb2>
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2b80      	cmp	r3, #128	@ 0x80
 80058b2:	d034      	beq.n	800591e <UART_WaitOnFlagUntilTimeout+0xb2>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b40      	cmp	r3, #64	@ 0x40
 80058b8:	d031      	beq.n	800591e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	69db      	ldr	r3, [r3, #28]
 80058c0:	f003 0308 	and.w	r3, r3, #8
 80058c4:	2b08      	cmp	r3, #8
 80058c6:	d110      	bne.n	80058ea <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2208      	movs	r2, #8
 80058ce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80058d0:	68f8      	ldr	r0, [r7, #12]
 80058d2:	f000 f839 	bl	8005948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2208      	movs	r2, #8
 80058da:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e029      	b.n	800593e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	69db      	ldr	r3, [r3, #28]
 80058f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058f4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058f8:	d111      	bne.n	800591e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005902:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005904:	68f8      	ldr	r0, [r7, #12]
 8005906:	f000 f81f 	bl	8005948 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2220      	movs	r2, #32
 800590e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800591a:	2303      	movs	r3, #3
 800591c:	e00f      	b.n	800593e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69da      	ldr	r2, [r3, #28]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4013      	ands	r3, r2
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	429a      	cmp	r2, r3
 800592c:	bf0c      	ite	eq
 800592e:	2301      	moveq	r3, #1
 8005930:	2300      	movne	r3, #0
 8005932:	b2db      	uxtb	r3, r3
 8005934:	461a      	mov	r2, r3
 8005936:	79fb      	ldrb	r3, [r7, #7]
 8005938:	429a      	cmp	r2, r3
 800593a:	d0a0      	beq.n	800587e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800593c:	2300      	movs	r3, #0
}
 800593e:	4618      	mov	r0, r3
 8005940:	3710      	adds	r7, #16
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
	...

08005948 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005948:	b480      	push	{r7}
 800594a:	b095      	sub	sp, #84	@ 0x54
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005956:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005958:	e853 3f00 	ldrex	r3, [r3]
 800595c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005964:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	461a      	mov	r2, r3
 800596c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800596e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005970:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005972:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005974:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005976:	e841 2300 	strex	r3, r2, [r1]
 800597a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800597c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597e:	2b00      	cmp	r3, #0
 8005980:	d1e6      	bne.n	8005950 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	3308      	adds	r3, #8
 8005988:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800598a:	6a3b      	ldr	r3, [r7, #32]
 800598c:	e853 3f00 	ldrex	r3, [r3]
 8005990:	61fb      	str	r3, [r7, #28]
   return(result);
 8005992:	69fa      	ldr	r2, [r7, #28]
 8005994:	4b1e      	ldr	r3, [pc, #120]	@ (8005a10 <UART_EndRxTransfer+0xc8>)
 8005996:	4013      	ands	r3, r2
 8005998:	64bb      	str	r3, [r7, #72]	@ 0x48
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	3308      	adds	r3, #8
 80059a0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80059a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80059a4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059a6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80059a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80059aa:	e841 2300 	strex	r3, r2, [r1]
 80059ae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80059b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d1e5      	bne.n	8005982 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d118      	bne.n	80059f0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	e853 3f00 	ldrex	r3, [r3]
 80059ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	f023 0310 	bic.w	r3, r3, #16
 80059d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	461a      	mov	r2, r3
 80059da:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059dc:	61bb      	str	r3, [r7, #24]
 80059de:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e0:	6979      	ldr	r1, [r7, #20]
 80059e2:	69ba      	ldr	r2, [r7, #24]
 80059e4:	e841 2300 	strex	r3, r2, [r1]
 80059e8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d1e6      	bne.n	80059be <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005a04:	bf00      	nop
 8005a06:	3754      	adds	r7, #84	@ 0x54
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0e:	4770      	bx	lr
 8005a10:	effffffe 	.word	0xeffffffe

08005a14 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a22:	2b01      	cmp	r3, #1
 8005a24:	d101      	bne.n	8005a2a <HAL_UARTEx_DisableFifoMode+0x16>
 8005a26:	2302      	movs	r3, #2
 8005a28:	e027      	b.n	8005a7a <HAL_UARTEx_DisableFifoMode+0x66>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2224      	movs	r2, #36	@ 0x24
 8005a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	681a      	ldr	r2, [r3, #0]
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f022 0201 	bic.w	r2, r2, #1
 8005a50:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005a58:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68fa      	ldr	r2, [r7, #12]
 8005a66:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	2220      	movs	r2, #32
 8005a6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a78:	2300      	movs	r3, #0
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr

08005a86 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b084      	sub	sp, #16
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
 8005a8e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d101      	bne.n	8005a9e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005a9a:	2302      	movs	r3, #2
 8005a9c:	e02d      	b.n	8005afa <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2224      	movs	r2, #36	@ 0x24
 8005aaa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681a      	ldr	r2, [r3, #0]
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	f022 0201 	bic.w	r2, r2, #1
 8005ac4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	430a      	orrs	r2, r1
 8005ad8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f850 	bl	8005b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68fa      	ldr	r2, [r7, #12]
 8005ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	2220      	movs	r2, #32
 8005aec:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	2200      	movs	r2, #0
 8005af4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3710      	adds	r7, #16
 8005afe:	46bd      	mov	sp, r7
 8005b00:	bd80      	pop	{r7, pc}

08005b02 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005b02:	b580      	push	{r7, lr}
 8005b04:	b084      	sub	sp, #16
 8005b06:	af00      	add	r7, sp, #0
 8005b08:	6078      	str	r0, [r7, #4]
 8005b0a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d101      	bne.n	8005b1a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005b16:	2302      	movs	r3, #2
 8005b18:	e02d      	b.n	8005b76 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2224      	movs	r2, #36	@ 0x24
 8005b26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 0201 	bic.w	r2, r2, #1
 8005b40:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	683a      	ldr	r2, [r7, #0]
 8005b52:	430a      	orrs	r2, r1
 8005b54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f000 f812 	bl	8005b80 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	68fa      	ldr	r2, [r7, #12]
 8005b62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3710      	adds	r7, #16
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
	...

08005b80 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b085      	sub	sp, #20
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d108      	bne.n	8005ba2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005ba0:	e031      	b.n	8005c06 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005ba2:	2310      	movs	r3, #16
 8005ba4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005ba6:	2310      	movs	r3, #16
 8005ba8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	0e5b      	lsrs	r3, r3, #25
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	f003 0307 	and.w	r3, r3, #7
 8005bb8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	0f5b      	lsrs	r3, r3, #29
 8005bc2:	b2db      	uxtb	r3, r3
 8005bc4:	f003 0307 	and.w	r3, r3, #7
 8005bc8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bca:	7bbb      	ldrb	r3, [r7, #14]
 8005bcc:	7b3a      	ldrb	r2, [r7, #12]
 8005bce:	4911      	ldr	r1, [pc, #68]	@ (8005c14 <UARTEx_SetNbDataToProcess+0x94>)
 8005bd0:	5c8a      	ldrb	r2, [r1, r2]
 8005bd2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005bd6:	7b3a      	ldrb	r2, [r7, #12]
 8005bd8:	490f      	ldr	r1, [pc, #60]	@ (8005c18 <UARTEx_SetNbDataToProcess+0x98>)
 8005bda:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005bdc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005be8:	7bfb      	ldrb	r3, [r7, #15]
 8005bea:	7b7a      	ldrb	r2, [r7, #13]
 8005bec:	4909      	ldr	r1, [pc, #36]	@ (8005c14 <UARTEx_SetNbDataToProcess+0x94>)
 8005bee:	5c8a      	ldrb	r2, [r1, r2]
 8005bf0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005bf4:	7b7a      	ldrb	r2, [r7, #13]
 8005bf6:	4908      	ldr	r1, [pc, #32]	@ (8005c18 <UARTEx_SetNbDataToProcess+0x98>)
 8005bf8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005bfa:	fb93 f3f2 	sdiv	r3, r3, r2
 8005bfe:	b29a      	uxth	r2, r3
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005c06:	bf00      	nop
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	08006ae0 	.word	0x08006ae0
 8005c18:	08006ae8 	.word	0x08006ae8

08005c1c <std>:
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	b510      	push	{r4, lr}
 8005c20:	4604      	mov	r4, r0
 8005c22:	e9c0 3300 	strd	r3, r3, [r0]
 8005c26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c2a:	6083      	str	r3, [r0, #8]
 8005c2c:	8181      	strh	r1, [r0, #12]
 8005c2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c30:	81c2      	strh	r2, [r0, #14]
 8005c32:	6183      	str	r3, [r0, #24]
 8005c34:	4619      	mov	r1, r3
 8005c36:	2208      	movs	r2, #8
 8005c38:	305c      	adds	r0, #92	@ 0x5c
 8005c3a:	f000 f8c3 	bl	8005dc4 <memset>
 8005c3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c74 <std+0x58>)
 8005c40:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c42:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <std+0x5c>)
 8005c44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c46:	4b0d      	ldr	r3, [pc, #52]	@ (8005c7c <std+0x60>)
 8005c48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c4a:	4b0d      	ldr	r3, [pc, #52]	@ (8005c80 <std+0x64>)
 8005c4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005c84 <std+0x68>)
 8005c50:	6224      	str	r4, [r4, #32]
 8005c52:	429c      	cmp	r4, r3
 8005c54:	d006      	beq.n	8005c64 <std+0x48>
 8005c56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c5a:	4294      	cmp	r4, r2
 8005c5c:	d002      	beq.n	8005c64 <std+0x48>
 8005c5e:	33d0      	adds	r3, #208	@ 0xd0
 8005c60:	429c      	cmp	r4, r3
 8005c62:	d105      	bne.n	8005c70 <std+0x54>
 8005c64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005c68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c6c:	f000 b8dc 	b.w	8005e28 <__retarget_lock_init_recursive>
 8005c70:	bd10      	pop	{r4, pc}
 8005c72:	bf00      	nop
 8005c74:	08006681 	.word	0x08006681
 8005c78:	080066a3 	.word	0x080066a3
 8005c7c:	080066db 	.word	0x080066db
 8005c80:	080066ff 	.word	0x080066ff
 8005c84:	240001f4 	.word	0x240001f4

08005c88 <stdio_exit_handler>:
 8005c88:	4a02      	ldr	r2, [pc, #8]	@ (8005c94 <stdio_exit_handler+0xc>)
 8005c8a:	4903      	ldr	r1, [pc, #12]	@ (8005c98 <stdio_exit_handler+0x10>)
 8005c8c:	4803      	ldr	r0, [pc, #12]	@ (8005c9c <stdio_exit_handler+0x14>)
 8005c8e:	f000 b869 	b.w	8005d64 <_fwalk_sglue>
 8005c92:	bf00      	nop
 8005c94:	2400002c 	.word	0x2400002c
 8005c98:	08006619 	.word	0x08006619
 8005c9c:	2400003c 	.word	0x2400003c

08005ca0 <cleanup_stdio>:
 8005ca0:	6841      	ldr	r1, [r0, #4]
 8005ca2:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd4 <cleanup_stdio+0x34>)
 8005ca4:	4299      	cmp	r1, r3
 8005ca6:	b510      	push	{r4, lr}
 8005ca8:	4604      	mov	r4, r0
 8005caa:	d001      	beq.n	8005cb0 <cleanup_stdio+0x10>
 8005cac:	f000 fcb4 	bl	8006618 <_fflush_r>
 8005cb0:	68a1      	ldr	r1, [r4, #8]
 8005cb2:	4b09      	ldr	r3, [pc, #36]	@ (8005cd8 <cleanup_stdio+0x38>)
 8005cb4:	4299      	cmp	r1, r3
 8005cb6:	d002      	beq.n	8005cbe <cleanup_stdio+0x1e>
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 fcad 	bl	8006618 <_fflush_r>
 8005cbe:	68e1      	ldr	r1, [r4, #12]
 8005cc0:	4b06      	ldr	r3, [pc, #24]	@ (8005cdc <cleanup_stdio+0x3c>)
 8005cc2:	4299      	cmp	r1, r3
 8005cc4:	d004      	beq.n	8005cd0 <cleanup_stdio+0x30>
 8005cc6:	4620      	mov	r0, r4
 8005cc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ccc:	f000 bca4 	b.w	8006618 <_fflush_r>
 8005cd0:	bd10      	pop	{r4, pc}
 8005cd2:	bf00      	nop
 8005cd4:	240001f4 	.word	0x240001f4
 8005cd8:	2400025c 	.word	0x2400025c
 8005cdc:	240002c4 	.word	0x240002c4

08005ce0 <global_stdio_init.part.0>:
 8005ce0:	b510      	push	{r4, lr}
 8005ce2:	4b0b      	ldr	r3, [pc, #44]	@ (8005d10 <global_stdio_init.part.0+0x30>)
 8005ce4:	4c0b      	ldr	r4, [pc, #44]	@ (8005d14 <global_stdio_init.part.0+0x34>)
 8005ce6:	4a0c      	ldr	r2, [pc, #48]	@ (8005d18 <global_stdio_init.part.0+0x38>)
 8005ce8:	601a      	str	r2, [r3, #0]
 8005cea:	4620      	mov	r0, r4
 8005cec:	2200      	movs	r2, #0
 8005cee:	2104      	movs	r1, #4
 8005cf0:	f7ff ff94 	bl	8005c1c <std>
 8005cf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	2109      	movs	r1, #9
 8005cfc:	f7ff ff8e 	bl	8005c1c <std>
 8005d00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d04:	2202      	movs	r2, #2
 8005d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d0a:	2112      	movs	r1, #18
 8005d0c:	f7ff bf86 	b.w	8005c1c <std>
 8005d10:	2400032c 	.word	0x2400032c
 8005d14:	240001f4 	.word	0x240001f4
 8005d18:	08005c89 	.word	0x08005c89

08005d1c <__sfp_lock_acquire>:
 8005d1c:	4801      	ldr	r0, [pc, #4]	@ (8005d24 <__sfp_lock_acquire+0x8>)
 8005d1e:	f000 b884 	b.w	8005e2a <__retarget_lock_acquire_recursive>
 8005d22:	bf00      	nop
 8005d24:	24000331 	.word	0x24000331

08005d28 <__sfp_lock_release>:
 8005d28:	4801      	ldr	r0, [pc, #4]	@ (8005d30 <__sfp_lock_release+0x8>)
 8005d2a:	f000 b87f 	b.w	8005e2c <__retarget_lock_release_recursive>
 8005d2e:	bf00      	nop
 8005d30:	24000331 	.word	0x24000331

08005d34 <__sinit>:
 8005d34:	b510      	push	{r4, lr}
 8005d36:	4604      	mov	r4, r0
 8005d38:	f7ff fff0 	bl	8005d1c <__sfp_lock_acquire>
 8005d3c:	6a23      	ldr	r3, [r4, #32]
 8005d3e:	b11b      	cbz	r3, 8005d48 <__sinit+0x14>
 8005d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d44:	f7ff bff0 	b.w	8005d28 <__sfp_lock_release>
 8005d48:	4b04      	ldr	r3, [pc, #16]	@ (8005d5c <__sinit+0x28>)
 8005d4a:	6223      	str	r3, [r4, #32]
 8005d4c:	4b04      	ldr	r3, [pc, #16]	@ (8005d60 <__sinit+0x2c>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d1f5      	bne.n	8005d40 <__sinit+0xc>
 8005d54:	f7ff ffc4 	bl	8005ce0 <global_stdio_init.part.0>
 8005d58:	e7f2      	b.n	8005d40 <__sinit+0xc>
 8005d5a:	bf00      	nop
 8005d5c:	08005ca1 	.word	0x08005ca1
 8005d60:	2400032c 	.word	0x2400032c

08005d64 <_fwalk_sglue>:
 8005d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d68:	4607      	mov	r7, r0
 8005d6a:	4688      	mov	r8, r1
 8005d6c:	4614      	mov	r4, r2
 8005d6e:	2600      	movs	r6, #0
 8005d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005d74:	f1b9 0901 	subs.w	r9, r9, #1
 8005d78:	d505      	bpl.n	8005d86 <_fwalk_sglue+0x22>
 8005d7a:	6824      	ldr	r4, [r4, #0]
 8005d7c:	2c00      	cmp	r4, #0
 8005d7e:	d1f7      	bne.n	8005d70 <_fwalk_sglue+0xc>
 8005d80:	4630      	mov	r0, r6
 8005d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d907      	bls.n	8005d9c <_fwalk_sglue+0x38>
 8005d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005d90:	3301      	adds	r3, #1
 8005d92:	d003      	beq.n	8005d9c <_fwalk_sglue+0x38>
 8005d94:	4629      	mov	r1, r5
 8005d96:	4638      	mov	r0, r7
 8005d98:	47c0      	blx	r8
 8005d9a:	4306      	orrs	r6, r0
 8005d9c:	3568      	adds	r5, #104	@ 0x68
 8005d9e:	e7e9      	b.n	8005d74 <_fwalk_sglue+0x10>

08005da0 <iprintf>:
 8005da0:	b40f      	push	{r0, r1, r2, r3}
 8005da2:	b507      	push	{r0, r1, r2, lr}
 8005da4:	4906      	ldr	r1, [pc, #24]	@ (8005dc0 <iprintf+0x20>)
 8005da6:	ab04      	add	r3, sp, #16
 8005da8:	6808      	ldr	r0, [r1, #0]
 8005daa:	f853 2b04 	ldr.w	r2, [r3], #4
 8005dae:	6881      	ldr	r1, [r0, #8]
 8005db0:	9301      	str	r3, [sp, #4]
 8005db2:	f000 f865 	bl	8005e80 <_vfiprintf_r>
 8005db6:	b003      	add	sp, #12
 8005db8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005dbc:	b004      	add	sp, #16
 8005dbe:	4770      	bx	lr
 8005dc0:	24000038 	.word	0x24000038

08005dc4 <memset>:
 8005dc4:	4402      	add	r2, r0
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	4293      	cmp	r3, r2
 8005dca:	d100      	bne.n	8005dce <memset+0xa>
 8005dcc:	4770      	bx	lr
 8005dce:	f803 1b01 	strb.w	r1, [r3], #1
 8005dd2:	e7f9      	b.n	8005dc8 <memset+0x4>

08005dd4 <__errno>:
 8005dd4:	4b01      	ldr	r3, [pc, #4]	@ (8005ddc <__errno+0x8>)
 8005dd6:	6818      	ldr	r0, [r3, #0]
 8005dd8:	4770      	bx	lr
 8005dda:	bf00      	nop
 8005ddc:	24000038 	.word	0x24000038

08005de0 <__libc_init_array>:
 8005de0:	b570      	push	{r4, r5, r6, lr}
 8005de2:	4d0d      	ldr	r5, [pc, #52]	@ (8005e18 <__libc_init_array+0x38>)
 8005de4:	4c0d      	ldr	r4, [pc, #52]	@ (8005e1c <__libc_init_array+0x3c>)
 8005de6:	1b64      	subs	r4, r4, r5
 8005de8:	10a4      	asrs	r4, r4, #2
 8005dea:	2600      	movs	r6, #0
 8005dec:	42a6      	cmp	r6, r4
 8005dee:	d109      	bne.n	8005e04 <__libc_init_array+0x24>
 8005df0:	4d0b      	ldr	r5, [pc, #44]	@ (8005e20 <__libc_init_array+0x40>)
 8005df2:	4c0c      	ldr	r4, [pc, #48]	@ (8005e24 <__libc_init_array+0x44>)
 8005df4:	f000 fe40 	bl	8006a78 <_init>
 8005df8:	1b64      	subs	r4, r4, r5
 8005dfa:	10a4      	asrs	r4, r4, #2
 8005dfc:	2600      	movs	r6, #0
 8005dfe:	42a6      	cmp	r6, r4
 8005e00:	d105      	bne.n	8005e0e <__libc_init_array+0x2e>
 8005e02:	bd70      	pop	{r4, r5, r6, pc}
 8005e04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e08:	4798      	blx	r3
 8005e0a:	3601      	adds	r6, #1
 8005e0c:	e7ee      	b.n	8005dec <__libc_init_array+0xc>
 8005e0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e12:	4798      	blx	r3
 8005e14:	3601      	adds	r6, #1
 8005e16:	e7f2      	b.n	8005dfe <__libc_init_array+0x1e>
 8005e18:	08006b2c 	.word	0x08006b2c
 8005e1c:	08006b2c 	.word	0x08006b2c
 8005e20:	08006b2c 	.word	0x08006b2c
 8005e24:	08006b30 	.word	0x08006b30

08005e28 <__retarget_lock_init_recursive>:
 8005e28:	4770      	bx	lr

08005e2a <__retarget_lock_acquire_recursive>:
 8005e2a:	4770      	bx	lr

08005e2c <__retarget_lock_release_recursive>:
 8005e2c:	4770      	bx	lr

08005e2e <__sfputc_r>:
 8005e2e:	6893      	ldr	r3, [r2, #8]
 8005e30:	3b01      	subs	r3, #1
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	b410      	push	{r4}
 8005e36:	6093      	str	r3, [r2, #8]
 8005e38:	da08      	bge.n	8005e4c <__sfputc_r+0x1e>
 8005e3a:	6994      	ldr	r4, [r2, #24]
 8005e3c:	42a3      	cmp	r3, r4
 8005e3e:	db01      	blt.n	8005e44 <__sfputc_r+0x16>
 8005e40:	290a      	cmp	r1, #10
 8005e42:	d103      	bne.n	8005e4c <__sfputc_r+0x1e>
 8005e44:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e48:	f000 bc5d 	b.w	8006706 <__swbuf_r>
 8005e4c:	6813      	ldr	r3, [r2, #0]
 8005e4e:	1c58      	adds	r0, r3, #1
 8005e50:	6010      	str	r0, [r2, #0]
 8005e52:	7019      	strb	r1, [r3, #0]
 8005e54:	4608      	mov	r0, r1
 8005e56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e5a:	4770      	bx	lr

08005e5c <__sfputs_r>:
 8005e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e5e:	4606      	mov	r6, r0
 8005e60:	460f      	mov	r7, r1
 8005e62:	4614      	mov	r4, r2
 8005e64:	18d5      	adds	r5, r2, r3
 8005e66:	42ac      	cmp	r4, r5
 8005e68:	d101      	bne.n	8005e6e <__sfputs_r+0x12>
 8005e6a:	2000      	movs	r0, #0
 8005e6c:	e007      	b.n	8005e7e <__sfputs_r+0x22>
 8005e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e72:	463a      	mov	r2, r7
 8005e74:	4630      	mov	r0, r6
 8005e76:	f7ff ffda 	bl	8005e2e <__sfputc_r>
 8005e7a:	1c43      	adds	r3, r0, #1
 8005e7c:	d1f3      	bne.n	8005e66 <__sfputs_r+0xa>
 8005e7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08005e80 <_vfiprintf_r>:
 8005e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e84:	460d      	mov	r5, r1
 8005e86:	b09d      	sub	sp, #116	@ 0x74
 8005e88:	4614      	mov	r4, r2
 8005e8a:	4698      	mov	r8, r3
 8005e8c:	4606      	mov	r6, r0
 8005e8e:	b118      	cbz	r0, 8005e98 <_vfiprintf_r+0x18>
 8005e90:	6a03      	ldr	r3, [r0, #32]
 8005e92:	b90b      	cbnz	r3, 8005e98 <_vfiprintf_r+0x18>
 8005e94:	f7ff ff4e 	bl	8005d34 <__sinit>
 8005e98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e9a:	07d9      	lsls	r1, r3, #31
 8005e9c:	d405      	bmi.n	8005eaa <_vfiprintf_r+0x2a>
 8005e9e:	89ab      	ldrh	r3, [r5, #12]
 8005ea0:	059a      	lsls	r2, r3, #22
 8005ea2:	d402      	bmi.n	8005eaa <_vfiprintf_r+0x2a>
 8005ea4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ea6:	f7ff ffc0 	bl	8005e2a <__retarget_lock_acquire_recursive>
 8005eaa:	89ab      	ldrh	r3, [r5, #12]
 8005eac:	071b      	lsls	r3, r3, #28
 8005eae:	d501      	bpl.n	8005eb4 <_vfiprintf_r+0x34>
 8005eb0:	692b      	ldr	r3, [r5, #16]
 8005eb2:	b99b      	cbnz	r3, 8005edc <_vfiprintf_r+0x5c>
 8005eb4:	4629      	mov	r1, r5
 8005eb6:	4630      	mov	r0, r6
 8005eb8:	f000 fc64 	bl	8006784 <__swsetup_r>
 8005ebc:	b170      	cbz	r0, 8005edc <_vfiprintf_r+0x5c>
 8005ebe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ec0:	07dc      	lsls	r4, r3, #31
 8005ec2:	d504      	bpl.n	8005ece <_vfiprintf_r+0x4e>
 8005ec4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005ec8:	b01d      	add	sp, #116	@ 0x74
 8005eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ece:	89ab      	ldrh	r3, [r5, #12]
 8005ed0:	0598      	lsls	r0, r3, #22
 8005ed2:	d4f7      	bmi.n	8005ec4 <_vfiprintf_r+0x44>
 8005ed4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ed6:	f7ff ffa9 	bl	8005e2c <__retarget_lock_release_recursive>
 8005eda:	e7f3      	b.n	8005ec4 <_vfiprintf_r+0x44>
 8005edc:	2300      	movs	r3, #0
 8005ede:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ee0:	2320      	movs	r3, #32
 8005ee2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005ee6:	f8cd 800c 	str.w	r8, [sp, #12]
 8005eea:	2330      	movs	r3, #48	@ 0x30
 8005eec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800609c <_vfiprintf_r+0x21c>
 8005ef0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ef4:	f04f 0901 	mov.w	r9, #1
 8005ef8:	4623      	mov	r3, r4
 8005efa:	469a      	mov	sl, r3
 8005efc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f00:	b10a      	cbz	r2, 8005f06 <_vfiprintf_r+0x86>
 8005f02:	2a25      	cmp	r2, #37	@ 0x25
 8005f04:	d1f9      	bne.n	8005efa <_vfiprintf_r+0x7a>
 8005f06:	ebba 0b04 	subs.w	fp, sl, r4
 8005f0a:	d00b      	beq.n	8005f24 <_vfiprintf_r+0xa4>
 8005f0c:	465b      	mov	r3, fp
 8005f0e:	4622      	mov	r2, r4
 8005f10:	4629      	mov	r1, r5
 8005f12:	4630      	mov	r0, r6
 8005f14:	f7ff ffa2 	bl	8005e5c <__sfputs_r>
 8005f18:	3001      	adds	r0, #1
 8005f1a:	f000 80a7 	beq.w	800606c <_vfiprintf_r+0x1ec>
 8005f1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f20:	445a      	add	r2, fp
 8005f22:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f24:	f89a 3000 	ldrb.w	r3, [sl]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	f000 809f 	beq.w	800606c <_vfiprintf_r+0x1ec>
 8005f2e:	2300      	movs	r3, #0
 8005f30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f38:	f10a 0a01 	add.w	sl, sl, #1
 8005f3c:	9304      	str	r3, [sp, #16]
 8005f3e:	9307      	str	r3, [sp, #28]
 8005f40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005f44:	931a      	str	r3, [sp, #104]	@ 0x68
 8005f46:	4654      	mov	r4, sl
 8005f48:	2205      	movs	r2, #5
 8005f4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f4e:	4853      	ldr	r0, [pc, #332]	@ (800609c <_vfiprintf_r+0x21c>)
 8005f50:	f7fa f9c6 	bl	80002e0 <memchr>
 8005f54:	9a04      	ldr	r2, [sp, #16]
 8005f56:	b9d8      	cbnz	r0, 8005f90 <_vfiprintf_r+0x110>
 8005f58:	06d1      	lsls	r1, r2, #27
 8005f5a:	bf44      	itt	mi
 8005f5c:	2320      	movmi	r3, #32
 8005f5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f62:	0713      	lsls	r3, r2, #28
 8005f64:	bf44      	itt	mi
 8005f66:	232b      	movmi	r3, #43	@ 0x2b
 8005f68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005f6c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f70:	2b2a      	cmp	r3, #42	@ 0x2a
 8005f72:	d015      	beq.n	8005fa0 <_vfiprintf_r+0x120>
 8005f74:	9a07      	ldr	r2, [sp, #28]
 8005f76:	4654      	mov	r4, sl
 8005f78:	2000      	movs	r0, #0
 8005f7a:	f04f 0c0a 	mov.w	ip, #10
 8005f7e:	4621      	mov	r1, r4
 8005f80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005f84:	3b30      	subs	r3, #48	@ 0x30
 8005f86:	2b09      	cmp	r3, #9
 8005f88:	d94b      	bls.n	8006022 <_vfiprintf_r+0x1a2>
 8005f8a:	b1b0      	cbz	r0, 8005fba <_vfiprintf_r+0x13a>
 8005f8c:	9207      	str	r2, [sp, #28]
 8005f8e:	e014      	b.n	8005fba <_vfiprintf_r+0x13a>
 8005f90:	eba0 0308 	sub.w	r3, r0, r8
 8005f94:	fa09 f303 	lsl.w	r3, r9, r3
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	9304      	str	r3, [sp, #16]
 8005f9c:	46a2      	mov	sl, r4
 8005f9e:	e7d2      	b.n	8005f46 <_vfiprintf_r+0xc6>
 8005fa0:	9b03      	ldr	r3, [sp, #12]
 8005fa2:	1d19      	adds	r1, r3, #4
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	9103      	str	r1, [sp, #12]
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	bfbb      	ittet	lt
 8005fac:	425b      	neglt	r3, r3
 8005fae:	f042 0202 	orrlt.w	r2, r2, #2
 8005fb2:	9307      	strge	r3, [sp, #28]
 8005fb4:	9307      	strlt	r3, [sp, #28]
 8005fb6:	bfb8      	it	lt
 8005fb8:	9204      	strlt	r2, [sp, #16]
 8005fba:	7823      	ldrb	r3, [r4, #0]
 8005fbc:	2b2e      	cmp	r3, #46	@ 0x2e
 8005fbe:	d10a      	bne.n	8005fd6 <_vfiprintf_r+0x156>
 8005fc0:	7863      	ldrb	r3, [r4, #1]
 8005fc2:	2b2a      	cmp	r3, #42	@ 0x2a
 8005fc4:	d132      	bne.n	800602c <_vfiprintf_r+0x1ac>
 8005fc6:	9b03      	ldr	r3, [sp, #12]
 8005fc8:	1d1a      	adds	r2, r3, #4
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	9203      	str	r2, [sp, #12]
 8005fce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005fd2:	3402      	adds	r4, #2
 8005fd4:	9305      	str	r3, [sp, #20]
 8005fd6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80060ac <_vfiprintf_r+0x22c>
 8005fda:	7821      	ldrb	r1, [r4, #0]
 8005fdc:	2203      	movs	r2, #3
 8005fde:	4650      	mov	r0, sl
 8005fe0:	f7fa f97e 	bl	80002e0 <memchr>
 8005fe4:	b138      	cbz	r0, 8005ff6 <_vfiprintf_r+0x176>
 8005fe6:	9b04      	ldr	r3, [sp, #16]
 8005fe8:	eba0 000a 	sub.w	r0, r0, sl
 8005fec:	2240      	movs	r2, #64	@ 0x40
 8005fee:	4082      	lsls	r2, r0
 8005ff0:	4313      	orrs	r3, r2
 8005ff2:	3401      	adds	r4, #1
 8005ff4:	9304      	str	r3, [sp, #16]
 8005ff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ffa:	4829      	ldr	r0, [pc, #164]	@ (80060a0 <_vfiprintf_r+0x220>)
 8005ffc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006000:	2206      	movs	r2, #6
 8006002:	f7fa f96d 	bl	80002e0 <memchr>
 8006006:	2800      	cmp	r0, #0
 8006008:	d03f      	beq.n	800608a <_vfiprintf_r+0x20a>
 800600a:	4b26      	ldr	r3, [pc, #152]	@ (80060a4 <_vfiprintf_r+0x224>)
 800600c:	bb1b      	cbnz	r3, 8006056 <_vfiprintf_r+0x1d6>
 800600e:	9b03      	ldr	r3, [sp, #12]
 8006010:	3307      	adds	r3, #7
 8006012:	f023 0307 	bic.w	r3, r3, #7
 8006016:	3308      	adds	r3, #8
 8006018:	9303      	str	r3, [sp, #12]
 800601a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800601c:	443b      	add	r3, r7
 800601e:	9309      	str	r3, [sp, #36]	@ 0x24
 8006020:	e76a      	b.n	8005ef8 <_vfiprintf_r+0x78>
 8006022:	fb0c 3202 	mla	r2, ip, r2, r3
 8006026:	460c      	mov	r4, r1
 8006028:	2001      	movs	r0, #1
 800602a:	e7a8      	b.n	8005f7e <_vfiprintf_r+0xfe>
 800602c:	2300      	movs	r3, #0
 800602e:	3401      	adds	r4, #1
 8006030:	9305      	str	r3, [sp, #20]
 8006032:	4619      	mov	r1, r3
 8006034:	f04f 0c0a 	mov.w	ip, #10
 8006038:	4620      	mov	r0, r4
 800603a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800603e:	3a30      	subs	r2, #48	@ 0x30
 8006040:	2a09      	cmp	r2, #9
 8006042:	d903      	bls.n	800604c <_vfiprintf_r+0x1cc>
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0c6      	beq.n	8005fd6 <_vfiprintf_r+0x156>
 8006048:	9105      	str	r1, [sp, #20]
 800604a:	e7c4      	b.n	8005fd6 <_vfiprintf_r+0x156>
 800604c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006050:	4604      	mov	r4, r0
 8006052:	2301      	movs	r3, #1
 8006054:	e7f0      	b.n	8006038 <_vfiprintf_r+0x1b8>
 8006056:	ab03      	add	r3, sp, #12
 8006058:	9300      	str	r3, [sp, #0]
 800605a:	462a      	mov	r2, r5
 800605c:	4b12      	ldr	r3, [pc, #72]	@ (80060a8 <_vfiprintf_r+0x228>)
 800605e:	a904      	add	r1, sp, #16
 8006060:	4630      	mov	r0, r6
 8006062:	f3af 8000 	nop.w
 8006066:	4607      	mov	r7, r0
 8006068:	1c78      	adds	r0, r7, #1
 800606a:	d1d6      	bne.n	800601a <_vfiprintf_r+0x19a>
 800606c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800606e:	07d9      	lsls	r1, r3, #31
 8006070:	d405      	bmi.n	800607e <_vfiprintf_r+0x1fe>
 8006072:	89ab      	ldrh	r3, [r5, #12]
 8006074:	059a      	lsls	r2, r3, #22
 8006076:	d402      	bmi.n	800607e <_vfiprintf_r+0x1fe>
 8006078:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800607a:	f7ff fed7 	bl	8005e2c <__retarget_lock_release_recursive>
 800607e:	89ab      	ldrh	r3, [r5, #12]
 8006080:	065b      	lsls	r3, r3, #25
 8006082:	f53f af1f 	bmi.w	8005ec4 <_vfiprintf_r+0x44>
 8006086:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006088:	e71e      	b.n	8005ec8 <_vfiprintf_r+0x48>
 800608a:	ab03      	add	r3, sp, #12
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	462a      	mov	r2, r5
 8006090:	4b05      	ldr	r3, [pc, #20]	@ (80060a8 <_vfiprintf_r+0x228>)
 8006092:	a904      	add	r1, sp, #16
 8006094:	4630      	mov	r0, r6
 8006096:	f000 f91b 	bl	80062d0 <_printf_i>
 800609a:	e7e4      	b.n	8006066 <_vfiprintf_r+0x1e6>
 800609c:	08006af0 	.word	0x08006af0
 80060a0:	08006afa 	.word	0x08006afa
 80060a4:	00000000 	.word	0x00000000
 80060a8:	08005e5d 	.word	0x08005e5d
 80060ac:	08006af6 	.word	0x08006af6

080060b0 <sbrk_aligned>:
 80060b0:	b570      	push	{r4, r5, r6, lr}
 80060b2:	4e0f      	ldr	r6, [pc, #60]	@ (80060f0 <sbrk_aligned+0x40>)
 80060b4:	460c      	mov	r4, r1
 80060b6:	6831      	ldr	r1, [r6, #0]
 80060b8:	4605      	mov	r5, r0
 80060ba:	b911      	cbnz	r1, 80060c2 <sbrk_aligned+0x12>
 80060bc:	f000 fc70 	bl	80069a0 <_sbrk_r>
 80060c0:	6030      	str	r0, [r6, #0]
 80060c2:	4621      	mov	r1, r4
 80060c4:	4628      	mov	r0, r5
 80060c6:	f000 fc6b 	bl	80069a0 <_sbrk_r>
 80060ca:	1c43      	adds	r3, r0, #1
 80060cc:	d103      	bne.n	80060d6 <sbrk_aligned+0x26>
 80060ce:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80060d2:	4620      	mov	r0, r4
 80060d4:	bd70      	pop	{r4, r5, r6, pc}
 80060d6:	1cc4      	adds	r4, r0, #3
 80060d8:	f024 0403 	bic.w	r4, r4, #3
 80060dc:	42a0      	cmp	r0, r4
 80060de:	d0f8      	beq.n	80060d2 <sbrk_aligned+0x22>
 80060e0:	1a21      	subs	r1, r4, r0
 80060e2:	4628      	mov	r0, r5
 80060e4:	f000 fc5c 	bl	80069a0 <_sbrk_r>
 80060e8:	3001      	adds	r0, #1
 80060ea:	d1f2      	bne.n	80060d2 <sbrk_aligned+0x22>
 80060ec:	e7ef      	b.n	80060ce <sbrk_aligned+0x1e>
 80060ee:	bf00      	nop
 80060f0:	24000334 	.word	0x24000334

080060f4 <_malloc_r>:
 80060f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060f8:	1ccd      	adds	r5, r1, #3
 80060fa:	f025 0503 	bic.w	r5, r5, #3
 80060fe:	3508      	adds	r5, #8
 8006100:	2d0c      	cmp	r5, #12
 8006102:	bf38      	it	cc
 8006104:	250c      	movcc	r5, #12
 8006106:	2d00      	cmp	r5, #0
 8006108:	4606      	mov	r6, r0
 800610a:	db01      	blt.n	8006110 <_malloc_r+0x1c>
 800610c:	42a9      	cmp	r1, r5
 800610e:	d904      	bls.n	800611a <_malloc_r+0x26>
 8006110:	230c      	movs	r3, #12
 8006112:	6033      	str	r3, [r6, #0]
 8006114:	2000      	movs	r0, #0
 8006116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800611a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061f0 <_malloc_r+0xfc>
 800611e:	f000 faa3 	bl	8006668 <__malloc_lock>
 8006122:	f8d8 3000 	ldr.w	r3, [r8]
 8006126:	461c      	mov	r4, r3
 8006128:	bb44      	cbnz	r4, 800617c <_malloc_r+0x88>
 800612a:	4629      	mov	r1, r5
 800612c:	4630      	mov	r0, r6
 800612e:	f7ff ffbf 	bl	80060b0 <sbrk_aligned>
 8006132:	1c43      	adds	r3, r0, #1
 8006134:	4604      	mov	r4, r0
 8006136:	d158      	bne.n	80061ea <_malloc_r+0xf6>
 8006138:	f8d8 4000 	ldr.w	r4, [r8]
 800613c:	4627      	mov	r7, r4
 800613e:	2f00      	cmp	r7, #0
 8006140:	d143      	bne.n	80061ca <_malloc_r+0xd6>
 8006142:	2c00      	cmp	r4, #0
 8006144:	d04b      	beq.n	80061de <_malloc_r+0xea>
 8006146:	6823      	ldr	r3, [r4, #0]
 8006148:	4639      	mov	r1, r7
 800614a:	4630      	mov	r0, r6
 800614c:	eb04 0903 	add.w	r9, r4, r3
 8006150:	f000 fc26 	bl	80069a0 <_sbrk_r>
 8006154:	4581      	cmp	r9, r0
 8006156:	d142      	bne.n	80061de <_malloc_r+0xea>
 8006158:	6821      	ldr	r1, [r4, #0]
 800615a:	1a6d      	subs	r5, r5, r1
 800615c:	4629      	mov	r1, r5
 800615e:	4630      	mov	r0, r6
 8006160:	f7ff ffa6 	bl	80060b0 <sbrk_aligned>
 8006164:	3001      	adds	r0, #1
 8006166:	d03a      	beq.n	80061de <_malloc_r+0xea>
 8006168:	6823      	ldr	r3, [r4, #0]
 800616a:	442b      	add	r3, r5
 800616c:	6023      	str	r3, [r4, #0]
 800616e:	f8d8 3000 	ldr.w	r3, [r8]
 8006172:	685a      	ldr	r2, [r3, #4]
 8006174:	bb62      	cbnz	r2, 80061d0 <_malloc_r+0xdc>
 8006176:	f8c8 7000 	str.w	r7, [r8]
 800617a:	e00f      	b.n	800619c <_malloc_r+0xa8>
 800617c:	6822      	ldr	r2, [r4, #0]
 800617e:	1b52      	subs	r2, r2, r5
 8006180:	d420      	bmi.n	80061c4 <_malloc_r+0xd0>
 8006182:	2a0b      	cmp	r2, #11
 8006184:	d917      	bls.n	80061b6 <_malloc_r+0xc2>
 8006186:	1961      	adds	r1, r4, r5
 8006188:	42a3      	cmp	r3, r4
 800618a:	6025      	str	r5, [r4, #0]
 800618c:	bf18      	it	ne
 800618e:	6059      	strne	r1, [r3, #4]
 8006190:	6863      	ldr	r3, [r4, #4]
 8006192:	bf08      	it	eq
 8006194:	f8c8 1000 	streq.w	r1, [r8]
 8006198:	5162      	str	r2, [r4, r5]
 800619a:	604b      	str	r3, [r1, #4]
 800619c:	4630      	mov	r0, r6
 800619e:	f000 fa69 	bl	8006674 <__malloc_unlock>
 80061a2:	f104 000b 	add.w	r0, r4, #11
 80061a6:	1d23      	adds	r3, r4, #4
 80061a8:	f020 0007 	bic.w	r0, r0, #7
 80061ac:	1ac2      	subs	r2, r0, r3
 80061ae:	bf1c      	itt	ne
 80061b0:	1a1b      	subne	r3, r3, r0
 80061b2:	50a3      	strne	r3, [r4, r2]
 80061b4:	e7af      	b.n	8006116 <_malloc_r+0x22>
 80061b6:	6862      	ldr	r2, [r4, #4]
 80061b8:	42a3      	cmp	r3, r4
 80061ba:	bf0c      	ite	eq
 80061bc:	f8c8 2000 	streq.w	r2, [r8]
 80061c0:	605a      	strne	r2, [r3, #4]
 80061c2:	e7eb      	b.n	800619c <_malloc_r+0xa8>
 80061c4:	4623      	mov	r3, r4
 80061c6:	6864      	ldr	r4, [r4, #4]
 80061c8:	e7ae      	b.n	8006128 <_malloc_r+0x34>
 80061ca:	463c      	mov	r4, r7
 80061cc:	687f      	ldr	r7, [r7, #4]
 80061ce:	e7b6      	b.n	800613e <_malloc_r+0x4a>
 80061d0:	461a      	mov	r2, r3
 80061d2:	685b      	ldr	r3, [r3, #4]
 80061d4:	42a3      	cmp	r3, r4
 80061d6:	d1fb      	bne.n	80061d0 <_malloc_r+0xdc>
 80061d8:	2300      	movs	r3, #0
 80061da:	6053      	str	r3, [r2, #4]
 80061dc:	e7de      	b.n	800619c <_malloc_r+0xa8>
 80061de:	230c      	movs	r3, #12
 80061e0:	6033      	str	r3, [r6, #0]
 80061e2:	4630      	mov	r0, r6
 80061e4:	f000 fa46 	bl	8006674 <__malloc_unlock>
 80061e8:	e794      	b.n	8006114 <_malloc_r+0x20>
 80061ea:	6005      	str	r5, [r0, #0]
 80061ec:	e7d6      	b.n	800619c <_malloc_r+0xa8>
 80061ee:	bf00      	nop
 80061f0:	24000338 	.word	0x24000338

080061f4 <_printf_common>:
 80061f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80061f8:	4616      	mov	r6, r2
 80061fa:	4698      	mov	r8, r3
 80061fc:	688a      	ldr	r2, [r1, #8]
 80061fe:	690b      	ldr	r3, [r1, #16]
 8006200:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006204:	4293      	cmp	r3, r2
 8006206:	bfb8      	it	lt
 8006208:	4613      	movlt	r3, r2
 800620a:	6033      	str	r3, [r6, #0]
 800620c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006210:	4607      	mov	r7, r0
 8006212:	460c      	mov	r4, r1
 8006214:	b10a      	cbz	r2, 800621a <_printf_common+0x26>
 8006216:	3301      	adds	r3, #1
 8006218:	6033      	str	r3, [r6, #0]
 800621a:	6823      	ldr	r3, [r4, #0]
 800621c:	0699      	lsls	r1, r3, #26
 800621e:	bf42      	ittt	mi
 8006220:	6833      	ldrmi	r3, [r6, #0]
 8006222:	3302      	addmi	r3, #2
 8006224:	6033      	strmi	r3, [r6, #0]
 8006226:	6825      	ldr	r5, [r4, #0]
 8006228:	f015 0506 	ands.w	r5, r5, #6
 800622c:	d106      	bne.n	800623c <_printf_common+0x48>
 800622e:	f104 0a19 	add.w	sl, r4, #25
 8006232:	68e3      	ldr	r3, [r4, #12]
 8006234:	6832      	ldr	r2, [r6, #0]
 8006236:	1a9b      	subs	r3, r3, r2
 8006238:	42ab      	cmp	r3, r5
 800623a:	dc26      	bgt.n	800628a <_printf_common+0x96>
 800623c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006240:	6822      	ldr	r2, [r4, #0]
 8006242:	3b00      	subs	r3, #0
 8006244:	bf18      	it	ne
 8006246:	2301      	movne	r3, #1
 8006248:	0692      	lsls	r2, r2, #26
 800624a:	d42b      	bmi.n	80062a4 <_printf_common+0xb0>
 800624c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006250:	4641      	mov	r1, r8
 8006252:	4638      	mov	r0, r7
 8006254:	47c8      	blx	r9
 8006256:	3001      	adds	r0, #1
 8006258:	d01e      	beq.n	8006298 <_printf_common+0xa4>
 800625a:	6823      	ldr	r3, [r4, #0]
 800625c:	6922      	ldr	r2, [r4, #16]
 800625e:	f003 0306 	and.w	r3, r3, #6
 8006262:	2b04      	cmp	r3, #4
 8006264:	bf02      	ittt	eq
 8006266:	68e5      	ldreq	r5, [r4, #12]
 8006268:	6833      	ldreq	r3, [r6, #0]
 800626a:	1aed      	subeq	r5, r5, r3
 800626c:	68a3      	ldr	r3, [r4, #8]
 800626e:	bf0c      	ite	eq
 8006270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006274:	2500      	movne	r5, #0
 8006276:	4293      	cmp	r3, r2
 8006278:	bfc4      	itt	gt
 800627a:	1a9b      	subgt	r3, r3, r2
 800627c:	18ed      	addgt	r5, r5, r3
 800627e:	2600      	movs	r6, #0
 8006280:	341a      	adds	r4, #26
 8006282:	42b5      	cmp	r5, r6
 8006284:	d11a      	bne.n	80062bc <_printf_common+0xc8>
 8006286:	2000      	movs	r0, #0
 8006288:	e008      	b.n	800629c <_printf_common+0xa8>
 800628a:	2301      	movs	r3, #1
 800628c:	4652      	mov	r2, sl
 800628e:	4641      	mov	r1, r8
 8006290:	4638      	mov	r0, r7
 8006292:	47c8      	blx	r9
 8006294:	3001      	adds	r0, #1
 8006296:	d103      	bne.n	80062a0 <_printf_common+0xac>
 8006298:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800629c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80062a0:	3501      	adds	r5, #1
 80062a2:	e7c6      	b.n	8006232 <_printf_common+0x3e>
 80062a4:	18e1      	adds	r1, r4, r3
 80062a6:	1c5a      	adds	r2, r3, #1
 80062a8:	2030      	movs	r0, #48	@ 0x30
 80062aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80062ae:	4422      	add	r2, r4
 80062b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80062b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80062b8:	3302      	adds	r3, #2
 80062ba:	e7c7      	b.n	800624c <_printf_common+0x58>
 80062bc:	2301      	movs	r3, #1
 80062be:	4622      	mov	r2, r4
 80062c0:	4641      	mov	r1, r8
 80062c2:	4638      	mov	r0, r7
 80062c4:	47c8      	blx	r9
 80062c6:	3001      	adds	r0, #1
 80062c8:	d0e6      	beq.n	8006298 <_printf_common+0xa4>
 80062ca:	3601      	adds	r6, #1
 80062cc:	e7d9      	b.n	8006282 <_printf_common+0x8e>
	...

080062d0 <_printf_i>:
 80062d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80062d4:	7e0f      	ldrb	r7, [r1, #24]
 80062d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80062d8:	2f78      	cmp	r7, #120	@ 0x78
 80062da:	4691      	mov	r9, r2
 80062dc:	4680      	mov	r8, r0
 80062de:	460c      	mov	r4, r1
 80062e0:	469a      	mov	sl, r3
 80062e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80062e6:	d807      	bhi.n	80062f8 <_printf_i+0x28>
 80062e8:	2f62      	cmp	r7, #98	@ 0x62
 80062ea:	d80a      	bhi.n	8006302 <_printf_i+0x32>
 80062ec:	2f00      	cmp	r7, #0
 80062ee:	f000 80d2 	beq.w	8006496 <_printf_i+0x1c6>
 80062f2:	2f58      	cmp	r7, #88	@ 0x58
 80062f4:	f000 80b9 	beq.w	800646a <_printf_i+0x19a>
 80062f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006300:	e03a      	b.n	8006378 <_printf_i+0xa8>
 8006302:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006306:	2b15      	cmp	r3, #21
 8006308:	d8f6      	bhi.n	80062f8 <_printf_i+0x28>
 800630a:	a101      	add	r1, pc, #4	@ (adr r1, 8006310 <_printf_i+0x40>)
 800630c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006310:	08006369 	.word	0x08006369
 8006314:	0800637d 	.word	0x0800637d
 8006318:	080062f9 	.word	0x080062f9
 800631c:	080062f9 	.word	0x080062f9
 8006320:	080062f9 	.word	0x080062f9
 8006324:	080062f9 	.word	0x080062f9
 8006328:	0800637d 	.word	0x0800637d
 800632c:	080062f9 	.word	0x080062f9
 8006330:	080062f9 	.word	0x080062f9
 8006334:	080062f9 	.word	0x080062f9
 8006338:	080062f9 	.word	0x080062f9
 800633c:	0800647d 	.word	0x0800647d
 8006340:	080063a7 	.word	0x080063a7
 8006344:	08006437 	.word	0x08006437
 8006348:	080062f9 	.word	0x080062f9
 800634c:	080062f9 	.word	0x080062f9
 8006350:	0800649f 	.word	0x0800649f
 8006354:	080062f9 	.word	0x080062f9
 8006358:	080063a7 	.word	0x080063a7
 800635c:	080062f9 	.word	0x080062f9
 8006360:	080062f9 	.word	0x080062f9
 8006364:	0800643f 	.word	0x0800643f
 8006368:	6833      	ldr	r3, [r6, #0]
 800636a:	1d1a      	adds	r2, r3, #4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	6032      	str	r2, [r6, #0]
 8006370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006374:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006378:	2301      	movs	r3, #1
 800637a:	e09d      	b.n	80064b8 <_printf_i+0x1e8>
 800637c:	6833      	ldr	r3, [r6, #0]
 800637e:	6820      	ldr	r0, [r4, #0]
 8006380:	1d19      	adds	r1, r3, #4
 8006382:	6031      	str	r1, [r6, #0]
 8006384:	0606      	lsls	r6, r0, #24
 8006386:	d501      	bpl.n	800638c <_printf_i+0xbc>
 8006388:	681d      	ldr	r5, [r3, #0]
 800638a:	e003      	b.n	8006394 <_printf_i+0xc4>
 800638c:	0645      	lsls	r5, r0, #25
 800638e:	d5fb      	bpl.n	8006388 <_printf_i+0xb8>
 8006390:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006394:	2d00      	cmp	r5, #0
 8006396:	da03      	bge.n	80063a0 <_printf_i+0xd0>
 8006398:	232d      	movs	r3, #45	@ 0x2d
 800639a:	426d      	negs	r5, r5
 800639c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063a0:	4859      	ldr	r0, [pc, #356]	@ (8006508 <_printf_i+0x238>)
 80063a2:	230a      	movs	r3, #10
 80063a4:	e011      	b.n	80063ca <_printf_i+0xfa>
 80063a6:	6821      	ldr	r1, [r4, #0]
 80063a8:	6833      	ldr	r3, [r6, #0]
 80063aa:	0608      	lsls	r0, r1, #24
 80063ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80063b0:	d402      	bmi.n	80063b8 <_printf_i+0xe8>
 80063b2:	0649      	lsls	r1, r1, #25
 80063b4:	bf48      	it	mi
 80063b6:	b2ad      	uxthmi	r5, r5
 80063b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80063ba:	4853      	ldr	r0, [pc, #332]	@ (8006508 <_printf_i+0x238>)
 80063bc:	6033      	str	r3, [r6, #0]
 80063be:	bf14      	ite	ne
 80063c0:	230a      	movne	r3, #10
 80063c2:	2308      	moveq	r3, #8
 80063c4:	2100      	movs	r1, #0
 80063c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80063ca:	6866      	ldr	r6, [r4, #4]
 80063cc:	60a6      	str	r6, [r4, #8]
 80063ce:	2e00      	cmp	r6, #0
 80063d0:	bfa2      	ittt	ge
 80063d2:	6821      	ldrge	r1, [r4, #0]
 80063d4:	f021 0104 	bicge.w	r1, r1, #4
 80063d8:	6021      	strge	r1, [r4, #0]
 80063da:	b90d      	cbnz	r5, 80063e0 <_printf_i+0x110>
 80063dc:	2e00      	cmp	r6, #0
 80063de:	d04b      	beq.n	8006478 <_printf_i+0x1a8>
 80063e0:	4616      	mov	r6, r2
 80063e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80063e6:	fb03 5711 	mls	r7, r3, r1, r5
 80063ea:	5dc7      	ldrb	r7, [r0, r7]
 80063ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80063f0:	462f      	mov	r7, r5
 80063f2:	42bb      	cmp	r3, r7
 80063f4:	460d      	mov	r5, r1
 80063f6:	d9f4      	bls.n	80063e2 <_printf_i+0x112>
 80063f8:	2b08      	cmp	r3, #8
 80063fa:	d10b      	bne.n	8006414 <_printf_i+0x144>
 80063fc:	6823      	ldr	r3, [r4, #0]
 80063fe:	07df      	lsls	r7, r3, #31
 8006400:	d508      	bpl.n	8006414 <_printf_i+0x144>
 8006402:	6923      	ldr	r3, [r4, #16]
 8006404:	6861      	ldr	r1, [r4, #4]
 8006406:	4299      	cmp	r1, r3
 8006408:	bfde      	ittt	le
 800640a:	2330      	movle	r3, #48	@ 0x30
 800640c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006410:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8006414:	1b92      	subs	r2, r2, r6
 8006416:	6122      	str	r2, [r4, #16]
 8006418:	f8cd a000 	str.w	sl, [sp]
 800641c:	464b      	mov	r3, r9
 800641e:	aa03      	add	r2, sp, #12
 8006420:	4621      	mov	r1, r4
 8006422:	4640      	mov	r0, r8
 8006424:	f7ff fee6 	bl	80061f4 <_printf_common>
 8006428:	3001      	adds	r0, #1
 800642a:	d14a      	bne.n	80064c2 <_printf_i+0x1f2>
 800642c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006430:	b004      	add	sp, #16
 8006432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	f043 0320 	orr.w	r3, r3, #32
 800643c:	6023      	str	r3, [r4, #0]
 800643e:	4833      	ldr	r0, [pc, #204]	@ (800650c <_printf_i+0x23c>)
 8006440:	2778      	movs	r7, #120	@ 0x78
 8006442:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006446:	6823      	ldr	r3, [r4, #0]
 8006448:	6831      	ldr	r1, [r6, #0]
 800644a:	061f      	lsls	r7, r3, #24
 800644c:	f851 5b04 	ldr.w	r5, [r1], #4
 8006450:	d402      	bmi.n	8006458 <_printf_i+0x188>
 8006452:	065f      	lsls	r7, r3, #25
 8006454:	bf48      	it	mi
 8006456:	b2ad      	uxthmi	r5, r5
 8006458:	6031      	str	r1, [r6, #0]
 800645a:	07d9      	lsls	r1, r3, #31
 800645c:	bf44      	itt	mi
 800645e:	f043 0320 	orrmi.w	r3, r3, #32
 8006462:	6023      	strmi	r3, [r4, #0]
 8006464:	b11d      	cbz	r5, 800646e <_printf_i+0x19e>
 8006466:	2310      	movs	r3, #16
 8006468:	e7ac      	b.n	80063c4 <_printf_i+0xf4>
 800646a:	4827      	ldr	r0, [pc, #156]	@ (8006508 <_printf_i+0x238>)
 800646c:	e7e9      	b.n	8006442 <_printf_i+0x172>
 800646e:	6823      	ldr	r3, [r4, #0]
 8006470:	f023 0320 	bic.w	r3, r3, #32
 8006474:	6023      	str	r3, [r4, #0]
 8006476:	e7f6      	b.n	8006466 <_printf_i+0x196>
 8006478:	4616      	mov	r6, r2
 800647a:	e7bd      	b.n	80063f8 <_printf_i+0x128>
 800647c:	6833      	ldr	r3, [r6, #0]
 800647e:	6825      	ldr	r5, [r4, #0]
 8006480:	6961      	ldr	r1, [r4, #20]
 8006482:	1d18      	adds	r0, r3, #4
 8006484:	6030      	str	r0, [r6, #0]
 8006486:	062e      	lsls	r6, r5, #24
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	d501      	bpl.n	8006490 <_printf_i+0x1c0>
 800648c:	6019      	str	r1, [r3, #0]
 800648e:	e002      	b.n	8006496 <_printf_i+0x1c6>
 8006490:	0668      	lsls	r0, r5, #25
 8006492:	d5fb      	bpl.n	800648c <_printf_i+0x1bc>
 8006494:	8019      	strh	r1, [r3, #0]
 8006496:	2300      	movs	r3, #0
 8006498:	6123      	str	r3, [r4, #16]
 800649a:	4616      	mov	r6, r2
 800649c:	e7bc      	b.n	8006418 <_printf_i+0x148>
 800649e:	6833      	ldr	r3, [r6, #0]
 80064a0:	1d1a      	adds	r2, r3, #4
 80064a2:	6032      	str	r2, [r6, #0]
 80064a4:	681e      	ldr	r6, [r3, #0]
 80064a6:	6862      	ldr	r2, [r4, #4]
 80064a8:	2100      	movs	r1, #0
 80064aa:	4630      	mov	r0, r6
 80064ac:	f7f9 ff18 	bl	80002e0 <memchr>
 80064b0:	b108      	cbz	r0, 80064b6 <_printf_i+0x1e6>
 80064b2:	1b80      	subs	r0, r0, r6
 80064b4:	6060      	str	r0, [r4, #4]
 80064b6:	6863      	ldr	r3, [r4, #4]
 80064b8:	6123      	str	r3, [r4, #16]
 80064ba:	2300      	movs	r3, #0
 80064bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80064c0:	e7aa      	b.n	8006418 <_printf_i+0x148>
 80064c2:	6923      	ldr	r3, [r4, #16]
 80064c4:	4632      	mov	r2, r6
 80064c6:	4649      	mov	r1, r9
 80064c8:	4640      	mov	r0, r8
 80064ca:	47d0      	blx	sl
 80064cc:	3001      	adds	r0, #1
 80064ce:	d0ad      	beq.n	800642c <_printf_i+0x15c>
 80064d0:	6823      	ldr	r3, [r4, #0]
 80064d2:	079b      	lsls	r3, r3, #30
 80064d4:	d413      	bmi.n	80064fe <_printf_i+0x22e>
 80064d6:	68e0      	ldr	r0, [r4, #12]
 80064d8:	9b03      	ldr	r3, [sp, #12]
 80064da:	4298      	cmp	r0, r3
 80064dc:	bfb8      	it	lt
 80064de:	4618      	movlt	r0, r3
 80064e0:	e7a6      	b.n	8006430 <_printf_i+0x160>
 80064e2:	2301      	movs	r3, #1
 80064e4:	4632      	mov	r2, r6
 80064e6:	4649      	mov	r1, r9
 80064e8:	4640      	mov	r0, r8
 80064ea:	47d0      	blx	sl
 80064ec:	3001      	adds	r0, #1
 80064ee:	d09d      	beq.n	800642c <_printf_i+0x15c>
 80064f0:	3501      	adds	r5, #1
 80064f2:	68e3      	ldr	r3, [r4, #12]
 80064f4:	9903      	ldr	r1, [sp, #12]
 80064f6:	1a5b      	subs	r3, r3, r1
 80064f8:	42ab      	cmp	r3, r5
 80064fa:	dcf2      	bgt.n	80064e2 <_printf_i+0x212>
 80064fc:	e7eb      	b.n	80064d6 <_printf_i+0x206>
 80064fe:	2500      	movs	r5, #0
 8006500:	f104 0619 	add.w	r6, r4, #25
 8006504:	e7f5      	b.n	80064f2 <_printf_i+0x222>
 8006506:	bf00      	nop
 8006508:	08006b01 	.word	0x08006b01
 800650c:	08006b12 	.word	0x08006b12

08006510 <__sflush_r>:
 8006510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006518:	0716      	lsls	r6, r2, #28
 800651a:	4605      	mov	r5, r0
 800651c:	460c      	mov	r4, r1
 800651e:	d454      	bmi.n	80065ca <__sflush_r+0xba>
 8006520:	684b      	ldr	r3, [r1, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	dc02      	bgt.n	800652c <__sflush_r+0x1c>
 8006526:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006528:	2b00      	cmp	r3, #0
 800652a:	dd48      	ble.n	80065be <__sflush_r+0xae>
 800652c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800652e:	2e00      	cmp	r6, #0
 8006530:	d045      	beq.n	80065be <__sflush_r+0xae>
 8006532:	2300      	movs	r3, #0
 8006534:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006538:	682f      	ldr	r7, [r5, #0]
 800653a:	6a21      	ldr	r1, [r4, #32]
 800653c:	602b      	str	r3, [r5, #0]
 800653e:	d030      	beq.n	80065a2 <__sflush_r+0x92>
 8006540:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006542:	89a3      	ldrh	r3, [r4, #12]
 8006544:	0759      	lsls	r1, r3, #29
 8006546:	d505      	bpl.n	8006554 <__sflush_r+0x44>
 8006548:	6863      	ldr	r3, [r4, #4]
 800654a:	1ad2      	subs	r2, r2, r3
 800654c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800654e:	b10b      	cbz	r3, 8006554 <__sflush_r+0x44>
 8006550:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006552:	1ad2      	subs	r2, r2, r3
 8006554:	2300      	movs	r3, #0
 8006556:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006558:	6a21      	ldr	r1, [r4, #32]
 800655a:	4628      	mov	r0, r5
 800655c:	47b0      	blx	r6
 800655e:	1c43      	adds	r3, r0, #1
 8006560:	89a3      	ldrh	r3, [r4, #12]
 8006562:	d106      	bne.n	8006572 <__sflush_r+0x62>
 8006564:	6829      	ldr	r1, [r5, #0]
 8006566:	291d      	cmp	r1, #29
 8006568:	d82b      	bhi.n	80065c2 <__sflush_r+0xb2>
 800656a:	4a2a      	ldr	r2, [pc, #168]	@ (8006614 <__sflush_r+0x104>)
 800656c:	410a      	asrs	r2, r1
 800656e:	07d6      	lsls	r6, r2, #31
 8006570:	d427      	bmi.n	80065c2 <__sflush_r+0xb2>
 8006572:	2200      	movs	r2, #0
 8006574:	6062      	str	r2, [r4, #4]
 8006576:	04d9      	lsls	r1, r3, #19
 8006578:	6922      	ldr	r2, [r4, #16]
 800657a:	6022      	str	r2, [r4, #0]
 800657c:	d504      	bpl.n	8006588 <__sflush_r+0x78>
 800657e:	1c42      	adds	r2, r0, #1
 8006580:	d101      	bne.n	8006586 <__sflush_r+0x76>
 8006582:	682b      	ldr	r3, [r5, #0]
 8006584:	b903      	cbnz	r3, 8006588 <__sflush_r+0x78>
 8006586:	6560      	str	r0, [r4, #84]	@ 0x54
 8006588:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800658a:	602f      	str	r7, [r5, #0]
 800658c:	b1b9      	cbz	r1, 80065be <__sflush_r+0xae>
 800658e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006592:	4299      	cmp	r1, r3
 8006594:	d002      	beq.n	800659c <__sflush_r+0x8c>
 8006596:	4628      	mov	r0, r5
 8006598:	f000 fa24 	bl	80069e4 <_free_r>
 800659c:	2300      	movs	r3, #0
 800659e:	6363      	str	r3, [r4, #52]	@ 0x34
 80065a0:	e00d      	b.n	80065be <__sflush_r+0xae>
 80065a2:	2301      	movs	r3, #1
 80065a4:	4628      	mov	r0, r5
 80065a6:	47b0      	blx	r6
 80065a8:	4602      	mov	r2, r0
 80065aa:	1c50      	adds	r0, r2, #1
 80065ac:	d1c9      	bne.n	8006542 <__sflush_r+0x32>
 80065ae:	682b      	ldr	r3, [r5, #0]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d0c6      	beq.n	8006542 <__sflush_r+0x32>
 80065b4:	2b1d      	cmp	r3, #29
 80065b6:	d001      	beq.n	80065bc <__sflush_r+0xac>
 80065b8:	2b16      	cmp	r3, #22
 80065ba:	d11e      	bne.n	80065fa <__sflush_r+0xea>
 80065bc:	602f      	str	r7, [r5, #0]
 80065be:	2000      	movs	r0, #0
 80065c0:	e022      	b.n	8006608 <__sflush_r+0xf8>
 80065c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80065c6:	b21b      	sxth	r3, r3
 80065c8:	e01b      	b.n	8006602 <__sflush_r+0xf2>
 80065ca:	690f      	ldr	r7, [r1, #16]
 80065cc:	2f00      	cmp	r7, #0
 80065ce:	d0f6      	beq.n	80065be <__sflush_r+0xae>
 80065d0:	0793      	lsls	r3, r2, #30
 80065d2:	680e      	ldr	r6, [r1, #0]
 80065d4:	bf08      	it	eq
 80065d6:	694b      	ldreq	r3, [r1, #20]
 80065d8:	600f      	str	r7, [r1, #0]
 80065da:	bf18      	it	ne
 80065dc:	2300      	movne	r3, #0
 80065de:	eba6 0807 	sub.w	r8, r6, r7
 80065e2:	608b      	str	r3, [r1, #8]
 80065e4:	f1b8 0f00 	cmp.w	r8, #0
 80065e8:	dde9      	ble.n	80065be <__sflush_r+0xae>
 80065ea:	6a21      	ldr	r1, [r4, #32]
 80065ec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80065ee:	4643      	mov	r3, r8
 80065f0:	463a      	mov	r2, r7
 80065f2:	4628      	mov	r0, r5
 80065f4:	47b0      	blx	r6
 80065f6:	2800      	cmp	r0, #0
 80065f8:	dc08      	bgt.n	800660c <__sflush_r+0xfc>
 80065fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80065fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006602:	81a3      	strh	r3, [r4, #12]
 8006604:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006608:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800660c:	4407      	add	r7, r0
 800660e:	eba8 0800 	sub.w	r8, r8, r0
 8006612:	e7e7      	b.n	80065e4 <__sflush_r+0xd4>
 8006614:	dfbffffe 	.word	0xdfbffffe

08006618 <_fflush_r>:
 8006618:	b538      	push	{r3, r4, r5, lr}
 800661a:	690b      	ldr	r3, [r1, #16]
 800661c:	4605      	mov	r5, r0
 800661e:	460c      	mov	r4, r1
 8006620:	b913      	cbnz	r3, 8006628 <_fflush_r+0x10>
 8006622:	2500      	movs	r5, #0
 8006624:	4628      	mov	r0, r5
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	b118      	cbz	r0, 8006632 <_fflush_r+0x1a>
 800662a:	6a03      	ldr	r3, [r0, #32]
 800662c:	b90b      	cbnz	r3, 8006632 <_fflush_r+0x1a>
 800662e:	f7ff fb81 	bl	8005d34 <__sinit>
 8006632:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d0f3      	beq.n	8006622 <_fflush_r+0xa>
 800663a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800663c:	07d0      	lsls	r0, r2, #31
 800663e:	d404      	bmi.n	800664a <_fflush_r+0x32>
 8006640:	0599      	lsls	r1, r3, #22
 8006642:	d402      	bmi.n	800664a <_fflush_r+0x32>
 8006644:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006646:	f7ff fbf0 	bl	8005e2a <__retarget_lock_acquire_recursive>
 800664a:	4628      	mov	r0, r5
 800664c:	4621      	mov	r1, r4
 800664e:	f7ff ff5f 	bl	8006510 <__sflush_r>
 8006652:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006654:	07da      	lsls	r2, r3, #31
 8006656:	4605      	mov	r5, r0
 8006658:	d4e4      	bmi.n	8006624 <_fflush_r+0xc>
 800665a:	89a3      	ldrh	r3, [r4, #12]
 800665c:	059b      	lsls	r3, r3, #22
 800665e:	d4e1      	bmi.n	8006624 <_fflush_r+0xc>
 8006660:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006662:	f7ff fbe3 	bl	8005e2c <__retarget_lock_release_recursive>
 8006666:	e7dd      	b.n	8006624 <_fflush_r+0xc>

08006668 <__malloc_lock>:
 8006668:	4801      	ldr	r0, [pc, #4]	@ (8006670 <__malloc_lock+0x8>)
 800666a:	f7ff bbde 	b.w	8005e2a <__retarget_lock_acquire_recursive>
 800666e:	bf00      	nop
 8006670:	24000330 	.word	0x24000330

08006674 <__malloc_unlock>:
 8006674:	4801      	ldr	r0, [pc, #4]	@ (800667c <__malloc_unlock+0x8>)
 8006676:	f7ff bbd9 	b.w	8005e2c <__retarget_lock_release_recursive>
 800667a:	bf00      	nop
 800667c:	24000330 	.word	0x24000330

08006680 <__sread>:
 8006680:	b510      	push	{r4, lr}
 8006682:	460c      	mov	r4, r1
 8006684:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006688:	f000 f978 	bl	800697c <_read_r>
 800668c:	2800      	cmp	r0, #0
 800668e:	bfab      	itete	ge
 8006690:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006692:	89a3      	ldrhlt	r3, [r4, #12]
 8006694:	181b      	addge	r3, r3, r0
 8006696:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800669a:	bfac      	ite	ge
 800669c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800669e:	81a3      	strhlt	r3, [r4, #12]
 80066a0:	bd10      	pop	{r4, pc}

080066a2 <__swrite>:
 80066a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a6:	461f      	mov	r7, r3
 80066a8:	898b      	ldrh	r3, [r1, #12]
 80066aa:	05db      	lsls	r3, r3, #23
 80066ac:	4605      	mov	r5, r0
 80066ae:	460c      	mov	r4, r1
 80066b0:	4616      	mov	r6, r2
 80066b2:	d505      	bpl.n	80066c0 <__swrite+0x1e>
 80066b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066b8:	2302      	movs	r3, #2
 80066ba:	2200      	movs	r2, #0
 80066bc:	f000 f94c 	bl	8006958 <_lseek_r>
 80066c0:	89a3      	ldrh	r3, [r4, #12]
 80066c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80066ca:	81a3      	strh	r3, [r4, #12]
 80066cc:	4632      	mov	r2, r6
 80066ce:	463b      	mov	r3, r7
 80066d0:	4628      	mov	r0, r5
 80066d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066d6:	f000 b973 	b.w	80069c0 <_write_r>

080066da <__sseek>:
 80066da:	b510      	push	{r4, lr}
 80066dc:	460c      	mov	r4, r1
 80066de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066e2:	f000 f939 	bl	8006958 <_lseek_r>
 80066e6:	1c43      	adds	r3, r0, #1
 80066e8:	89a3      	ldrh	r3, [r4, #12]
 80066ea:	bf15      	itete	ne
 80066ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80066ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80066f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80066f6:	81a3      	strheq	r3, [r4, #12]
 80066f8:	bf18      	it	ne
 80066fa:	81a3      	strhne	r3, [r4, #12]
 80066fc:	bd10      	pop	{r4, pc}

080066fe <__sclose>:
 80066fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006702:	f000 b8f7 	b.w	80068f4 <_close_r>

08006706 <__swbuf_r>:
 8006706:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006708:	460e      	mov	r6, r1
 800670a:	4614      	mov	r4, r2
 800670c:	4605      	mov	r5, r0
 800670e:	b118      	cbz	r0, 8006718 <__swbuf_r+0x12>
 8006710:	6a03      	ldr	r3, [r0, #32]
 8006712:	b90b      	cbnz	r3, 8006718 <__swbuf_r+0x12>
 8006714:	f7ff fb0e 	bl	8005d34 <__sinit>
 8006718:	69a3      	ldr	r3, [r4, #24]
 800671a:	60a3      	str	r3, [r4, #8]
 800671c:	89a3      	ldrh	r3, [r4, #12]
 800671e:	071a      	lsls	r2, r3, #28
 8006720:	d501      	bpl.n	8006726 <__swbuf_r+0x20>
 8006722:	6923      	ldr	r3, [r4, #16]
 8006724:	b943      	cbnz	r3, 8006738 <__swbuf_r+0x32>
 8006726:	4621      	mov	r1, r4
 8006728:	4628      	mov	r0, r5
 800672a:	f000 f82b 	bl	8006784 <__swsetup_r>
 800672e:	b118      	cbz	r0, 8006738 <__swbuf_r+0x32>
 8006730:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006734:	4638      	mov	r0, r7
 8006736:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	6922      	ldr	r2, [r4, #16]
 800673c:	1a98      	subs	r0, r3, r2
 800673e:	6963      	ldr	r3, [r4, #20]
 8006740:	b2f6      	uxtb	r6, r6
 8006742:	4283      	cmp	r3, r0
 8006744:	4637      	mov	r7, r6
 8006746:	dc05      	bgt.n	8006754 <__swbuf_r+0x4e>
 8006748:	4621      	mov	r1, r4
 800674a:	4628      	mov	r0, r5
 800674c:	f7ff ff64 	bl	8006618 <_fflush_r>
 8006750:	2800      	cmp	r0, #0
 8006752:	d1ed      	bne.n	8006730 <__swbuf_r+0x2a>
 8006754:	68a3      	ldr	r3, [r4, #8]
 8006756:	3b01      	subs	r3, #1
 8006758:	60a3      	str	r3, [r4, #8]
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	6022      	str	r2, [r4, #0]
 8006760:	701e      	strb	r6, [r3, #0]
 8006762:	6962      	ldr	r2, [r4, #20]
 8006764:	1c43      	adds	r3, r0, #1
 8006766:	429a      	cmp	r2, r3
 8006768:	d004      	beq.n	8006774 <__swbuf_r+0x6e>
 800676a:	89a3      	ldrh	r3, [r4, #12]
 800676c:	07db      	lsls	r3, r3, #31
 800676e:	d5e1      	bpl.n	8006734 <__swbuf_r+0x2e>
 8006770:	2e0a      	cmp	r6, #10
 8006772:	d1df      	bne.n	8006734 <__swbuf_r+0x2e>
 8006774:	4621      	mov	r1, r4
 8006776:	4628      	mov	r0, r5
 8006778:	f7ff ff4e 	bl	8006618 <_fflush_r>
 800677c:	2800      	cmp	r0, #0
 800677e:	d0d9      	beq.n	8006734 <__swbuf_r+0x2e>
 8006780:	e7d6      	b.n	8006730 <__swbuf_r+0x2a>
	...

08006784 <__swsetup_r>:
 8006784:	b538      	push	{r3, r4, r5, lr}
 8006786:	4b29      	ldr	r3, [pc, #164]	@ (800682c <__swsetup_r+0xa8>)
 8006788:	4605      	mov	r5, r0
 800678a:	6818      	ldr	r0, [r3, #0]
 800678c:	460c      	mov	r4, r1
 800678e:	b118      	cbz	r0, 8006798 <__swsetup_r+0x14>
 8006790:	6a03      	ldr	r3, [r0, #32]
 8006792:	b90b      	cbnz	r3, 8006798 <__swsetup_r+0x14>
 8006794:	f7ff face 	bl	8005d34 <__sinit>
 8006798:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800679c:	0719      	lsls	r1, r3, #28
 800679e:	d422      	bmi.n	80067e6 <__swsetup_r+0x62>
 80067a0:	06da      	lsls	r2, r3, #27
 80067a2:	d407      	bmi.n	80067b4 <__swsetup_r+0x30>
 80067a4:	2209      	movs	r2, #9
 80067a6:	602a      	str	r2, [r5, #0]
 80067a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80067ac:	81a3      	strh	r3, [r4, #12]
 80067ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80067b2:	e033      	b.n	800681c <__swsetup_r+0x98>
 80067b4:	0758      	lsls	r0, r3, #29
 80067b6:	d512      	bpl.n	80067de <__swsetup_r+0x5a>
 80067b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80067ba:	b141      	cbz	r1, 80067ce <__swsetup_r+0x4a>
 80067bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80067c0:	4299      	cmp	r1, r3
 80067c2:	d002      	beq.n	80067ca <__swsetup_r+0x46>
 80067c4:	4628      	mov	r0, r5
 80067c6:	f000 f90d 	bl	80069e4 <_free_r>
 80067ca:	2300      	movs	r3, #0
 80067cc:	6363      	str	r3, [r4, #52]	@ 0x34
 80067ce:	89a3      	ldrh	r3, [r4, #12]
 80067d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80067d4:	81a3      	strh	r3, [r4, #12]
 80067d6:	2300      	movs	r3, #0
 80067d8:	6063      	str	r3, [r4, #4]
 80067da:	6923      	ldr	r3, [r4, #16]
 80067dc:	6023      	str	r3, [r4, #0]
 80067de:	89a3      	ldrh	r3, [r4, #12]
 80067e0:	f043 0308 	orr.w	r3, r3, #8
 80067e4:	81a3      	strh	r3, [r4, #12]
 80067e6:	6923      	ldr	r3, [r4, #16]
 80067e8:	b94b      	cbnz	r3, 80067fe <__swsetup_r+0x7a>
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80067f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067f4:	d003      	beq.n	80067fe <__swsetup_r+0x7a>
 80067f6:	4621      	mov	r1, r4
 80067f8:	4628      	mov	r0, r5
 80067fa:	f000 f83f 	bl	800687c <__smakebuf_r>
 80067fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006802:	f013 0201 	ands.w	r2, r3, #1
 8006806:	d00a      	beq.n	800681e <__swsetup_r+0x9a>
 8006808:	2200      	movs	r2, #0
 800680a:	60a2      	str	r2, [r4, #8]
 800680c:	6962      	ldr	r2, [r4, #20]
 800680e:	4252      	negs	r2, r2
 8006810:	61a2      	str	r2, [r4, #24]
 8006812:	6922      	ldr	r2, [r4, #16]
 8006814:	b942      	cbnz	r2, 8006828 <__swsetup_r+0xa4>
 8006816:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800681a:	d1c5      	bne.n	80067a8 <__swsetup_r+0x24>
 800681c:	bd38      	pop	{r3, r4, r5, pc}
 800681e:	0799      	lsls	r1, r3, #30
 8006820:	bf58      	it	pl
 8006822:	6962      	ldrpl	r2, [r4, #20]
 8006824:	60a2      	str	r2, [r4, #8]
 8006826:	e7f4      	b.n	8006812 <__swsetup_r+0x8e>
 8006828:	2000      	movs	r0, #0
 800682a:	e7f7      	b.n	800681c <__swsetup_r+0x98>
 800682c:	24000038 	.word	0x24000038

08006830 <__swhatbuf_r>:
 8006830:	b570      	push	{r4, r5, r6, lr}
 8006832:	460c      	mov	r4, r1
 8006834:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006838:	2900      	cmp	r1, #0
 800683a:	b096      	sub	sp, #88	@ 0x58
 800683c:	4615      	mov	r5, r2
 800683e:	461e      	mov	r6, r3
 8006840:	da0d      	bge.n	800685e <__swhatbuf_r+0x2e>
 8006842:	89a3      	ldrh	r3, [r4, #12]
 8006844:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006848:	f04f 0100 	mov.w	r1, #0
 800684c:	bf14      	ite	ne
 800684e:	2340      	movne	r3, #64	@ 0x40
 8006850:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006854:	2000      	movs	r0, #0
 8006856:	6031      	str	r1, [r6, #0]
 8006858:	602b      	str	r3, [r5, #0]
 800685a:	b016      	add	sp, #88	@ 0x58
 800685c:	bd70      	pop	{r4, r5, r6, pc}
 800685e:	466a      	mov	r2, sp
 8006860:	f000 f858 	bl	8006914 <_fstat_r>
 8006864:	2800      	cmp	r0, #0
 8006866:	dbec      	blt.n	8006842 <__swhatbuf_r+0x12>
 8006868:	9901      	ldr	r1, [sp, #4]
 800686a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800686e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006872:	4259      	negs	r1, r3
 8006874:	4159      	adcs	r1, r3
 8006876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800687a:	e7eb      	b.n	8006854 <__swhatbuf_r+0x24>

0800687c <__smakebuf_r>:
 800687c:	898b      	ldrh	r3, [r1, #12]
 800687e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006880:	079d      	lsls	r5, r3, #30
 8006882:	4606      	mov	r6, r0
 8006884:	460c      	mov	r4, r1
 8006886:	d507      	bpl.n	8006898 <__smakebuf_r+0x1c>
 8006888:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800688c:	6023      	str	r3, [r4, #0]
 800688e:	6123      	str	r3, [r4, #16]
 8006890:	2301      	movs	r3, #1
 8006892:	6163      	str	r3, [r4, #20]
 8006894:	b003      	add	sp, #12
 8006896:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006898:	ab01      	add	r3, sp, #4
 800689a:	466a      	mov	r2, sp
 800689c:	f7ff ffc8 	bl	8006830 <__swhatbuf_r>
 80068a0:	9f00      	ldr	r7, [sp, #0]
 80068a2:	4605      	mov	r5, r0
 80068a4:	4639      	mov	r1, r7
 80068a6:	4630      	mov	r0, r6
 80068a8:	f7ff fc24 	bl	80060f4 <_malloc_r>
 80068ac:	b948      	cbnz	r0, 80068c2 <__smakebuf_r+0x46>
 80068ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b2:	059a      	lsls	r2, r3, #22
 80068b4:	d4ee      	bmi.n	8006894 <__smakebuf_r+0x18>
 80068b6:	f023 0303 	bic.w	r3, r3, #3
 80068ba:	f043 0302 	orr.w	r3, r3, #2
 80068be:	81a3      	strh	r3, [r4, #12]
 80068c0:	e7e2      	b.n	8006888 <__smakebuf_r+0xc>
 80068c2:	89a3      	ldrh	r3, [r4, #12]
 80068c4:	6020      	str	r0, [r4, #0]
 80068c6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80068ca:	81a3      	strh	r3, [r4, #12]
 80068cc:	9b01      	ldr	r3, [sp, #4]
 80068ce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80068d2:	b15b      	cbz	r3, 80068ec <__smakebuf_r+0x70>
 80068d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80068d8:	4630      	mov	r0, r6
 80068da:	f000 f82d 	bl	8006938 <_isatty_r>
 80068de:	b128      	cbz	r0, 80068ec <__smakebuf_r+0x70>
 80068e0:	89a3      	ldrh	r3, [r4, #12]
 80068e2:	f023 0303 	bic.w	r3, r3, #3
 80068e6:	f043 0301 	orr.w	r3, r3, #1
 80068ea:	81a3      	strh	r3, [r4, #12]
 80068ec:	89a3      	ldrh	r3, [r4, #12]
 80068ee:	431d      	orrs	r5, r3
 80068f0:	81a5      	strh	r5, [r4, #12]
 80068f2:	e7cf      	b.n	8006894 <__smakebuf_r+0x18>

080068f4 <_close_r>:
 80068f4:	b538      	push	{r3, r4, r5, lr}
 80068f6:	4d06      	ldr	r5, [pc, #24]	@ (8006910 <_close_r+0x1c>)
 80068f8:	2300      	movs	r3, #0
 80068fa:	4604      	mov	r4, r0
 80068fc:	4608      	mov	r0, r1
 80068fe:	602b      	str	r3, [r5, #0]
 8006900:	f7fa faaf 	bl	8000e62 <_close>
 8006904:	1c43      	adds	r3, r0, #1
 8006906:	d102      	bne.n	800690e <_close_r+0x1a>
 8006908:	682b      	ldr	r3, [r5, #0]
 800690a:	b103      	cbz	r3, 800690e <_close_r+0x1a>
 800690c:	6023      	str	r3, [r4, #0]
 800690e:	bd38      	pop	{r3, r4, r5, pc}
 8006910:	2400033c 	.word	0x2400033c

08006914 <_fstat_r>:
 8006914:	b538      	push	{r3, r4, r5, lr}
 8006916:	4d07      	ldr	r5, [pc, #28]	@ (8006934 <_fstat_r+0x20>)
 8006918:	2300      	movs	r3, #0
 800691a:	4604      	mov	r4, r0
 800691c:	4608      	mov	r0, r1
 800691e:	4611      	mov	r1, r2
 8006920:	602b      	str	r3, [r5, #0]
 8006922:	f7fa faaa 	bl	8000e7a <_fstat>
 8006926:	1c43      	adds	r3, r0, #1
 8006928:	d102      	bne.n	8006930 <_fstat_r+0x1c>
 800692a:	682b      	ldr	r3, [r5, #0]
 800692c:	b103      	cbz	r3, 8006930 <_fstat_r+0x1c>
 800692e:	6023      	str	r3, [r4, #0]
 8006930:	bd38      	pop	{r3, r4, r5, pc}
 8006932:	bf00      	nop
 8006934:	2400033c 	.word	0x2400033c

08006938 <_isatty_r>:
 8006938:	b538      	push	{r3, r4, r5, lr}
 800693a:	4d06      	ldr	r5, [pc, #24]	@ (8006954 <_isatty_r+0x1c>)
 800693c:	2300      	movs	r3, #0
 800693e:	4604      	mov	r4, r0
 8006940:	4608      	mov	r0, r1
 8006942:	602b      	str	r3, [r5, #0]
 8006944:	f7fa faa9 	bl	8000e9a <_isatty>
 8006948:	1c43      	adds	r3, r0, #1
 800694a:	d102      	bne.n	8006952 <_isatty_r+0x1a>
 800694c:	682b      	ldr	r3, [r5, #0]
 800694e:	b103      	cbz	r3, 8006952 <_isatty_r+0x1a>
 8006950:	6023      	str	r3, [r4, #0]
 8006952:	bd38      	pop	{r3, r4, r5, pc}
 8006954:	2400033c 	.word	0x2400033c

08006958 <_lseek_r>:
 8006958:	b538      	push	{r3, r4, r5, lr}
 800695a:	4d07      	ldr	r5, [pc, #28]	@ (8006978 <_lseek_r+0x20>)
 800695c:	4604      	mov	r4, r0
 800695e:	4608      	mov	r0, r1
 8006960:	4611      	mov	r1, r2
 8006962:	2200      	movs	r2, #0
 8006964:	602a      	str	r2, [r5, #0]
 8006966:	461a      	mov	r2, r3
 8006968:	f7fa faa2 	bl	8000eb0 <_lseek>
 800696c:	1c43      	adds	r3, r0, #1
 800696e:	d102      	bne.n	8006976 <_lseek_r+0x1e>
 8006970:	682b      	ldr	r3, [r5, #0]
 8006972:	b103      	cbz	r3, 8006976 <_lseek_r+0x1e>
 8006974:	6023      	str	r3, [r4, #0]
 8006976:	bd38      	pop	{r3, r4, r5, pc}
 8006978:	2400033c 	.word	0x2400033c

0800697c <_read_r>:
 800697c:	b538      	push	{r3, r4, r5, lr}
 800697e:	4d07      	ldr	r5, [pc, #28]	@ (800699c <_read_r+0x20>)
 8006980:	4604      	mov	r4, r0
 8006982:	4608      	mov	r0, r1
 8006984:	4611      	mov	r1, r2
 8006986:	2200      	movs	r2, #0
 8006988:	602a      	str	r2, [r5, #0]
 800698a:	461a      	mov	r2, r3
 800698c:	f7fa fa30 	bl	8000df0 <_read>
 8006990:	1c43      	adds	r3, r0, #1
 8006992:	d102      	bne.n	800699a <_read_r+0x1e>
 8006994:	682b      	ldr	r3, [r5, #0]
 8006996:	b103      	cbz	r3, 800699a <_read_r+0x1e>
 8006998:	6023      	str	r3, [r4, #0]
 800699a:	bd38      	pop	{r3, r4, r5, pc}
 800699c:	2400033c 	.word	0x2400033c

080069a0 <_sbrk_r>:
 80069a0:	b538      	push	{r3, r4, r5, lr}
 80069a2:	4d06      	ldr	r5, [pc, #24]	@ (80069bc <_sbrk_r+0x1c>)
 80069a4:	2300      	movs	r3, #0
 80069a6:	4604      	mov	r4, r0
 80069a8:	4608      	mov	r0, r1
 80069aa:	602b      	str	r3, [r5, #0]
 80069ac:	f7fa fa8e 	bl	8000ecc <_sbrk>
 80069b0:	1c43      	adds	r3, r0, #1
 80069b2:	d102      	bne.n	80069ba <_sbrk_r+0x1a>
 80069b4:	682b      	ldr	r3, [r5, #0]
 80069b6:	b103      	cbz	r3, 80069ba <_sbrk_r+0x1a>
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	bd38      	pop	{r3, r4, r5, pc}
 80069bc:	2400033c 	.word	0x2400033c

080069c0 <_write_r>:
 80069c0:	b538      	push	{r3, r4, r5, lr}
 80069c2:	4d07      	ldr	r5, [pc, #28]	@ (80069e0 <_write_r+0x20>)
 80069c4:	4604      	mov	r4, r0
 80069c6:	4608      	mov	r0, r1
 80069c8:	4611      	mov	r1, r2
 80069ca:	2200      	movs	r2, #0
 80069cc:	602a      	str	r2, [r5, #0]
 80069ce:	461a      	mov	r2, r3
 80069d0:	f7fa fa2b 	bl	8000e2a <_write>
 80069d4:	1c43      	adds	r3, r0, #1
 80069d6:	d102      	bne.n	80069de <_write_r+0x1e>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	b103      	cbz	r3, 80069de <_write_r+0x1e>
 80069dc:	6023      	str	r3, [r4, #0]
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	2400033c 	.word	0x2400033c

080069e4 <_free_r>:
 80069e4:	b538      	push	{r3, r4, r5, lr}
 80069e6:	4605      	mov	r5, r0
 80069e8:	2900      	cmp	r1, #0
 80069ea:	d041      	beq.n	8006a70 <_free_r+0x8c>
 80069ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069f0:	1f0c      	subs	r4, r1, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	bfb8      	it	lt
 80069f6:	18e4      	addlt	r4, r4, r3
 80069f8:	f7ff fe36 	bl	8006668 <__malloc_lock>
 80069fc:	4a1d      	ldr	r2, [pc, #116]	@ (8006a74 <_free_r+0x90>)
 80069fe:	6813      	ldr	r3, [r2, #0]
 8006a00:	b933      	cbnz	r3, 8006a10 <_free_r+0x2c>
 8006a02:	6063      	str	r3, [r4, #4]
 8006a04:	6014      	str	r4, [r2, #0]
 8006a06:	4628      	mov	r0, r5
 8006a08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a0c:	f7ff be32 	b.w	8006674 <__malloc_unlock>
 8006a10:	42a3      	cmp	r3, r4
 8006a12:	d908      	bls.n	8006a26 <_free_r+0x42>
 8006a14:	6820      	ldr	r0, [r4, #0]
 8006a16:	1821      	adds	r1, r4, r0
 8006a18:	428b      	cmp	r3, r1
 8006a1a:	bf01      	itttt	eq
 8006a1c:	6819      	ldreq	r1, [r3, #0]
 8006a1e:	685b      	ldreq	r3, [r3, #4]
 8006a20:	1809      	addeq	r1, r1, r0
 8006a22:	6021      	streq	r1, [r4, #0]
 8006a24:	e7ed      	b.n	8006a02 <_free_r+0x1e>
 8006a26:	461a      	mov	r2, r3
 8006a28:	685b      	ldr	r3, [r3, #4]
 8006a2a:	b10b      	cbz	r3, 8006a30 <_free_r+0x4c>
 8006a2c:	42a3      	cmp	r3, r4
 8006a2e:	d9fa      	bls.n	8006a26 <_free_r+0x42>
 8006a30:	6811      	ldr	r1, [r2, #0]
 8006a32:	1850      	adds	r0, r2, r1
 8006a34:	42a0      	cmp	r0, r4
 8006a36:	d10b      	bne.n	8006a50 <_free_r+0x6c>
 8006a38:	6820      	ldr	r0, [r4, #0]
 8006a3a:	4401      	add	r1, r0
 8006a3c:	1850      	adds	r0, r2, r1
 8006a3e:	4283      	cmp	r3, r0
 8006a40:	6011      	str	r1, [r2, #0]
 8006a42:	d1e0      	bne.n	8006a06 <_free_r+0x22>
 8006a44:	6818      	ldr	r0, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	6053      	str	r3, [r2, #4]
 8006a4a:	4408      	add	r0, r1
 8006a4c:	6010      	str	r0, [r2, #0]
 8006a4e:	e7da      	b.n	8006a06 <_free_r+0x22>
 8006a50:	d902      	bls.n	8006a58 <_free_r+0x74>
 8006a52:	230c      	movs	r3, #12
 8006a54:	602b      	str	r3, [r5, #0]
 8006a56:	e7d6      	b.n	8006a06 <_free_r+0x22>
 8006a58:	6820      	ldr	r0, [r4, #0]
 8006a5a:	1821      	adds	r1, r4, r0
 8006a5c:	428b      	cmp	r3, r1
 8006a5e:	bf04      	itt	eq
 8006a60:	6819      	ldreq	r1, [r3, #0]
 8006a62:	685b      	ldreq	r3, [r3, #4]
 8006a64:	6063      	str	r3, [r4, #4]
 8006a66:	bf04      	itt	eq
 8006a68:	1809      	addeq	r1, r1, r0
 8006a6a:	6021      	streq	r1, [r4, #0]
 8006a6c:	6054      	str	r4, [r2, #4]
 8006a6e:	e7ca      	b.n	8006a06 <_free_r+0x22>
 8006a70:	bd38      	pop	{r3, r4, r5, pc}
 8006a72:	bf00      	nop
 8006a74:	24000338 	.word	0x24000338

08006a78 <_init>:
 8006a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a7a:	bf00      	nop
 8006a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a7e:	bc08      	pop	{r3}
 8006a80:	469e      	mov	lr, r3
 8006a82:	4770      	bx	lr

08006a84 <_fini>:
 8006a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a86:	bf00      	nop
 8006a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006a8a:	bc08      	pop	{r3}
 8006a8c:	469e      	mov	lr, r3
 8006a8e:	4770      	bx	lr
