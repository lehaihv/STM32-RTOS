
AppV1_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004130  08100298  08100298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  081043c8  081043c8  000053c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08104400  08104400  00005400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08104408  08104408  00005408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0810440c  0810440c  0000540c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000010  10000000  08104410  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000000b4  10000010  08104420  00006010  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  100000c4  08104420  000060c4  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000edb0  00000000  00000000  00006040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00001e3b  00000000  00000000  00014df0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000b00  00000000  00000000  00016c30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000870  00000000  00000000  00017730  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039204  00000000  00000000  00017fa0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0000ec90  00000000  00000000  000511a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017a4d9  00000000  00000000  0005fe34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000043  00000000  00000000  001da30d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002d04  00000000  00000000  001da350  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000076  00000000  00000000  001dd054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	@ (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	@ (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	@ (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	081043b0 	.word	0x081043b0

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	@ (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	@ (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	@ (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	081043b0 	.word	0x081043b0

081002d8 <__aeabi_uldivmod>:
 81002d8:	b953      	cbnz	r3, 81002f0 <__aeabi_uldivmod+0x18>
 81002da:	b94a      	cbnz	r2, 81002f0 <__aeabi_uldivmod+0x18>
 81002dc:	2900      	cmp	r1, #0
 81002de:	bf08      	it	eq
 81002e0:	2800      	cmpeq	r0, #0
 81002e2:	bf1c      	itt	ne
 81002e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 81002e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 81002ec:	f000 b96a 	b.w	81005c4 <__aeabi_idiv0>
 81002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 81002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 81002f8:	f000 f806 	bl	8100308 <__udivmoddi4>
 81002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100304:	b004      	add	sp, #16
 8100306:	4770      	bx	lr

08100308 <__udivmoddi4>:
 8100308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810030c:	9d08      	ldr	r5, [sp, #32]
 810030e:	460c      	mov	r4, r1
 8100310:	2b00      	cmp	r3, #0
 8100312:	d14e      	bne.n	81003b2 <__udivmoddi4+0xaa>
 8100314:	4694      	mov	ip, r2
 8100316:	458c      	cmp	ip, r1
 8100318:	4686      	mov	lr, r0
 810031a:	fab2 f282 	clz	r2, r2
 810031e:	d962      	bls.n	81003e6 <__udivmoddi4+0xde>
 8100320:	b14a      	cbz	r2, 8100336 <__udivmoddi4+0x2e>
 8100322:	f1c2 0320 	rsb	r3, r2, #32
 8100326:	4091      	lsls	r1, r2
 8100328:	fa20 f303 	lsr.w	r3, r0, r3
 810032c:	fa0c fc02 	lsl.w	ip, ip, r2
 8100330:	4319      	orrs	r1, r3
 8100332:	fa00 fe02 	lsl.w	lr, r0, r2
 8100336:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810033a:	fa1f f68c 	uxth.w	r6, ip
 810033e:	fbb1 f4f7 	udiv	r4, r1, r7
 8100342:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100346:	fb07 1114 	mls	r1, r7, r4, r1
 810034a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810034e:	fb04 f106 	mul.w	r1, r4, r6
 8100352:	4299      	cmp	r1, r3
 8100354:	d90a      	bls.n	810036c <__udivmoddi4+0x64>
 8100356:	eb1c 0303 	adds.w	r3, ip, r3
 810035a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 810035e:	f080 8112 	bcs.w	8100586 <__udivmoddi4+0x27e>
 8100362:	4299      	cmp	r1, r3
 8100364:	f240 810f 	bls.w	8100586 <__udivmoddi4+0x27e>
 8100368:	3c02      	subs	r4, #2
 810036a:	4463      	add	r3, ip
 810036c:	1a59      	subs	r1, r3, r1
 810036e:	fa1f f38e 	uxth.w	r3, lr
 8100372:	fbb1 f0f7 	udiv	r0, r1, r7
 8100376:	fb07 1110 	mls	r1, r7, r0, r1
 810037a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810037e:	fb00 f606 	mul.w	r6, r0, r6
 8100382:	429e      	cmp	r6, r3
 8100384:	d90a      	bls.n	810039c <__udivmoddi4+0x94>
 8100386:	eb1c 0303 	adds.w	r3, ip, r3
 810038a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 810038e:	f080 80fc 	bcs.w	810058a <__udivmoddi4+0x282>
 8100392:	429e      	cmp	r6, r3
 8100394:	f240 80f9 	bls.w	810058a <__udivmoddi4+0x282>
 8100398:	4463      	add	r3, ip
 810039a:	3802      	subs	r0, #2
 810039c:	1b9b      	subs	r3, r3, r6
 810039e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 81003a2:	2100      	movs	r1, #0
 81003a4:	b11d      	cbz	r5, 81003ae <__udivmoddi4+0xa6>
 81003a6:	40d3      	lsrs	r3, r2
 81003a8:	2200      	movs	r2, #0
 81003aa:	e9c5 3200 	strd	r3, r2, [r5]
 81003ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003b2:	428b      	cmp	r3, r1
 81003b4:	d905      	bls.n	81003c2 <__udivmoddi4+0xba>
 81003b6:	b10d      	cbz	r5, 81003bc <__udivmoddi4+0xb4>
 81003b8:	e9c5 0100 	strd	r0, r1, [r5]
 81003bc:	2100      	movs	r1, #0
 81003be:	4608      	mov	r0, r1
 81003c0:	e7f5      	b.n	81003ae <__udivmoddi4+0xa6>
 81003c2:	fab3 f183 	clz	r1, r3
 81003c6:	2900      	cmp	r1, #0
 81003c8:	d146      	bne.n	8100458 <__udivmoddi4+0x150>
 81003ca:	42a3      	cmp	r3, r4
 81003cc:	d302      	bcc.n	81003d4 <__udivmoddi4+0xcc>
 81003ce:	4290      	cmp	r0, r2
 81003d0:	f0c0 80f0 	bcc.w	81005b4 <__udivmoddi4+0x2ac>
 81003d4:	1a86      	subs	r6, r0, r2
 81003d6:	eb64 0303 	sbc.w	r3, r4, r3
 81003da:	2001      	movs	r0, #1
 81003dc:	2d00      	cmp	r5, #0
 81003de:	d0e6      	beq.n	81003ae <__udivmoddi4+0xa6>
 81003e0:	e9c5 6300 	strd	r6, r3, [r5]
 81003e4:	e7e3      	b.n	81003ae <__udivmoddi4+0xa6>
 81003e6:	2a00      	cmp	r2, #0
 81003e8:	f040 8090 	bne.w	810050c <__udivmoddi4+0x204>
 81003ec:	eba1 040c 	sub.w	r4, r1, ip
 81003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 81003f4:	fa1f f78c 	uxth.w	r7, ip
 81003f8:	2101      	movs	r1, #1
 81003fa:	fbb4 f6f8 	udiv	r6, r4, r8
 81003fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8100402:	fb08 4416 	mls	r4, r8, r6, r4
 8100406:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 810040a:	fb07 f006 	mul.w	r0, r7, r6
 810040e:	4298      	cmp	r0, r3
 8100410:	d908      	bls.n	8100424 <__udivmoddi4+0x11c>
 8100412:	eb1c 0303 	adds.w	r3, ip, r3
 8100416:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 810041a:	d202      	bcs.n	8100422 <__udivmoddi4+0x11a>
 810041c:	4298      	cmp	r0, r3
 810041e:	f200 80cd 	bhi.w	81005bc <__udivmoddi4+0x2b4>
 8100422:	4626      	mov	r6, r4
 8100424:	1a1c      	subs	r4, r3, r0
 8100426:	fa1f f38e 	uxth.w	r3, lr
 810042a:	fbb4 f0f8 	udiv	r0, r4, r8
 810042e:	fb08 4410 	mls	r4, r8, r0, r4
 8100432:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8100436:	fb00 f707 	mul.w	r7, r0, r7
 810043a:	429f      	cmp	r7, r3
 810043c:	d908      	bls.n	8100450 <__udivmoddi4+0x148>
 810043e:	eb1c 0303 	adds.w	r3, ip, r3
 8100442:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8100446:	d202      	bcs.n	810044e <__udivmoddi4+0x146>
 8100448:	429f      	cmp	r7, r3
 810044a:	f200 80b0 	bhi.w	81005ae <__udivmoddi4+0x2a6>
 810044e:	4620      	mov	r0, r4
 8100450:	1bdb      	subs	r3, r3, r7
 8100452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8100456:	e7a5      	b.n	81003a4 <__udivmoddi4+0x9c>
 8100458:	f1c1 0620 	rsb	r6, r1, #32
 810045c:	408b      	lsls	r3, r1
 810045e:	fa22 f706 	lsr.w	r7, r2, r6
 8100462:	431f      	orrs	r7, r3
 8100464:	fa20 fc06 	lsr.w	ip, r0, r6
 8100468:	fa04 f301 	lsl.w	r3, r4, r1
 810046c:	ea43 030c 	orr.w	r3, r3, ip
 8100470:	40f4      	lsrs	r4, r6
 8100472:	fa00 f801 	lsl.w	r8, r0, r1
 8100476:	0c38      	lsrs	r0, r7, #16
 8100478:	ea4f 4913 	mov.w	r9, r3, lsr #16
 810047c:	fbb4 fef0 	udiv	lr, r4, r0
 8100480:	fa1f fc87 	uxth.w	ip, r7
 8100484:	fb00 441e 	mls	r4, r0, lr, r4
 8100488:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 810048c:	fb0e f90c 	mul.w	r9, lr, ip
 8100490:	45a1      	cmp	r9, r4
 8100492:	fa02 f201 	lsl.w	r2, r2, r1
 8100496:	d90a      	bls.n	81004ae <__udivmoddi4+0x1a6>
 8100498:	193c      	adds	r4, r7, r4
 810049a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 810049e:	f080 8084 	bcs.w	81005aa <__udivmoddi4+0x2a2>
 81004a2:	45a1      	cmp	r9, r4
 81004a4:	f240 8081 	bls.w	81005aa <__udivmoddi4+0x2a2>
 81004a8:	f1ae 0e02 	sub.w	lr, lr, #2
 81004ac:	443c      	add	r4, r7
 81004ae:	eba4 0409 	sub.w	r4, r4, r9
 81004b2:	fa1f f983 	uxth.w	r9, r3
 81004b6:	fbb4 f3f0 	udiv	r3, r4, r0
 81004ba:	fb00 4413 	mls	r4, r0, r3, r4
 81004be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 81004c2:	fb03 fc0c 	mul.w	ip, r3, ip
 81004c6:	45a4      	cmp	ip, r4
 81004c8:	d907      	bls.n	81004da <__udivmoddi4+0x1d2>
 81004ca:	193c      	adds	r4, r7, r4
 81004cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 81004d0:	d267      	bcs.n	81005a2 <__udivmoddi4+0x29a>
 81004d2:	45a4      	cmp	ip, r4
 81004d4:	d965      	bls.n	81005a2 <__udivmoddi4+0x29a>
 81004d6:	3b02      	subs	r3, #2
 81004d8:	443c      	add	r4, r7
 81004da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 81004de:	fba0 9302 	umull	r9, r3, r0, r2
 81004e2:	eba4 040c 	sub.w	r4, r4, ip
 81004e6:	429c      	cmp	r4, r3
 81004e8:	46ce      	mov	lr, r9
 81004ea:	469c      	mov	ip, r3
 81004ec:	d351      	bcc.n	8100592 <__udivmoddi4+0x28a>
 81004ee:	d04e      	beq.n	810058e <__udivmoddi4+0x286>
 81004f0:	b155      	cbz	r5, 8100508 <__udivmoddi4+0x200>
 81004f2:	ebb8 030e 	subs.w	r3, r8, lr
 81004f6:	eb64 040c 	sbc.w	r4, r4, ip
 81004fa:	fa04 f606 	lsl.w	r6, r4, r6
 81004fe:	40cb      	lsrs	r3, r1
 8100500:	431e      	orrs	r6, r3
 8100502:	40cc      	lsrs	r4, r1
 8100504:	e9c5 6400 	strd	r6, r4, [r5]
 8100508:	2100      	movs	r1, #0
 810050a:	e750      	b.n	81003ae <__udivmoddi4+0xa6>
 810050c:	f1c2 0320 	rsb	r3, r2, #32
 8100510:	fa20 f103 	lsr.w	r1, r0, r3
 8100514:	fa0c fc02 	lsl.w	ip, ip, r2
 8100518:	fa24 f303 	lsr.w	r3, r4, r3
 810051c:	4094      	lsls	r4, r2
 810051e:	430c      	orrs	r4, r1
 8100520:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8100524:	fa00 fe02 	lsl.w	lr, r0, r2
 8100528:	fa1f f78c 	uxth.w	r7, ip
 810052c:	fbb3 f0f8 	udiv	r0, r3, r8
 8100530:	fb08 3110 	mls	r1, r8, r0, r3
 8100534:	0c23      	lsrs	r3, r4, #16
 8100536:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 810053a:	fb00 f107 	mul.w	r1, r0, r7
 810053e:	4299      	cmp	r1, r3
 8100540:	d908      	bls.n	8100554 <__udivmoddi4+0x24c>
 8100542:	eb1c 0303 	adds.w	r3, ip, r3
 8100546:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 810054a:	d22c      	bcs.n	81005a6 <__udivmoddi4+0x29e>
 810054c:	4299      	cmp	r1, r3
 810054e:	d92a      	bls.n	81005a6 <__udivmoddi4+0x29e>
 8100550:	3802      	subs	r0, #2
 8100552:	4463      	add	r3, ip
 8100554:	1a5b      	subs	r3, r3, r1
 8100556:	b2a4      	uxth	r4, r4
 8100558:	fbb3 f1f8 	udiv	r1, r3, r8
 810055c:	fb08 3311 	mls	r3, r8, r1, r3
 8100560:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8100564:	fb01 f307 	mul.w	r3, r1, r7
 8100568:	42a3      	cmp	r3, r4
 810056a:	d908      	bls.n	810057e <__udivmoddi4+0x276>
 810056c:	eb1c 0404 	adds.w	r4, ip, r4
 8100570:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8100574:	d213      	bcs.n	810059e <__udivmoddi4+0x296>
 8100576:	42a3      	cmp	r3, r4
 8100578:	d911      	bls.n	810059e <__udivmoddi4+0x296>
 810057a:	3902      	subs	r1, #2
 810057c:	4464      	add	r4, ip
 810057e:	1ae4      	subs	r4, r4, r3
 8100580:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8100584:	e739      	b.n	81003fa <__udivmoddi4+0xf2>
 8100586:	4604      	mov	r4, r0
 8100588:	e6f0      	b.n	810036c <__udivmoddi4+0x64>
 810058a:	4608      	mov	r0, r1
 810058c:	e706      	b.n	810039c <__udivmoddi4+0x94>
 810058e:	45c8      	cmp	r8, r9
 8100590:	d2ae      	bcs.n	81004f0 <__udivmoddi4+0x1e8>
 8100592:	ebb9 0e02 	subs.w	lr, r9, r2
 8100596:	eb63 0c07 	sbc.w	ip, r3, r7
 810059a:	3801      	subs	r0, #1
 810059c:	e7a8      	b.n	81004f0 <__udivmoddi4+0x1e8>
 810059e:	4631      	mov	r1, r6
 81005a0:	e7ed      	b.n	810057e <__udivmoddi4+0x276>
 81005a2:	4603      	mov	r3, r0
 81005a4:	e799      	b.n	81004da <__udivmoddi4+0x1d2>
 81005a6:	4630      	mov	r0, r6
 81005a8:	e7d4      	b.n	8100554 <__udivmoddi4+0x24c>
 81005aa:	46d6      	mov	lr, sl
 81005ac:	e77f      	b.n	81004ae <__udivmoddi4+0x1a6>
 81005ae:	4463      	add	r3, ip
 81005b0:	3802      	subs	r0, #2
 81005b2:	e74d      	b.n	8100450 <__udivmoddi4+0x148>
 81005b4:	4606      	mov	r6, r0
 81005b6:	4623      	mov	r3, r4
 81005b8:	4608      	mov	r0, r1
 81005ba:	e70f      	b.n	81003dc <__udivmoddi4+0xd4>
 81005bc:	3e02      	subs	r6, #2
 81005be:	4463      	add	r3, ip
 81005c0:	e730      	b.n	8100424 <__udivmoddi4+0x11c>
 81005c2:	bf00      	nop

081005c4 <__aeabi_idiv0>:
 81005c4:	4770      	bx	lr
 81005c6:	bf00      	nop

081005c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005c8:	b480      	push	{r7}
 81005ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005cc:	4b09      	ldr	r3, [pc, #36]	@ (81005f4 <SystemInit+0x2c>)
 81005ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81005d2:	4a08      	ldr	r2, [pc, #32]	@ (81005f4 <SystemInit+0x2c>)
 81005d4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 81005d8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005dc:	4b05      	ldr	r3, [pc, #20]	@ (81005f4 <SystemInit+0x2c>)
 81005de:	691b      	ldr	r3, [r3, #16]
 81005e0:	4a04      	ldr	r2, [pc, #16]	@ (81005f4 <SystemInit+0x2c>)
 81005e2:	f043 0310 	orr.w	r3, r3, #16
 81005e6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81005e8:	bf00      	nop
 81005ea:	46bd      	mov	sp, r7
 81005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005f0:	4770      	bx	lr
 81005f2:	bf00      	nop
 81005f4:	e000ed00 	.word	0xe000ed00

081005f8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 81005f8:	b480      	push	{r7}
 81005fa:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 81005fc:	4b09      	ldr	r3, [pc, #36]	@ (8100624 <ExitRun0Mode+0x2c>)
 81005fe:	68db      	ldr	r3, [r3, #12]
 8100600:	4a08      	ldr	r2, [pc, #32]	@ (8100624 <ExitRun0Mode+0x2c>)
 8100602:	f023 0302 	bic.w	r3, r3, #2
 8100606:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8100608:	bf00      	nop
 810060a:	4b06      	ldr	r3, [pc, #24]	@ (8100624 <ExitRun0Mode+0x2c>)
 810060c:	685b      	ldr	r3, [r3, #4]
 810060e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8100612:	2b00      	cmp	r3, #0
 8100614:	d0f9      	beq.n	810060a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8100616:	bf00      	nop
 8100618:	bf00      	nop
 810061a:	46bd      	mov	sp, r7
 810061c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100620:	4770      	bx	lr
 8100622:	bf00      	nop
 8100624:	58024800 	.word	0x58024800

08100628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100628:	b580      	push	{r7, lr}
 810062a:	b082      	sub	sp, #8
 810062c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810062e:	4b1c      	ldr	r3, [pc, #112]	@ (81006a0 <main+0x78>)
 8100630:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100634:	4a1a      	ldr	r2, [pc, #104]	@ (81006a0 <main+0x78>)
 8100636:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 810063a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810063e:	4b18      	ldr	r3, [pc, #96]	@ (81006a0 <main+0x78>)
 8100640:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100644:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8100648:	607b      	str	r3, [r7, #4]
 810064a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810064c:	2001      	movs	r0, #1
 810064e:	f000 fd0b 	bl	8101068 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100652:	f000 fd95 	bl	8101180 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100656:	2201      	movs	r2, #1
 8100658:	2102      	movs	r1, #2
 810065a:	2000      	movs	r0, #0
 810065c:	f000 fd16 	bl	810108c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100660:	4b10      	ldr	r3, [pc, #64]	@ (81006a4 <main+0x7c>)
 8100662:	681b      	ldr	r3, [r3, #0]
 8100664:	091b      	lsrs	r3, r3, #4
 8100666:	f003 030f 	and.w	r3, r3, #15
 810066a:	2b07      	cmp	r3, #7
 810066c:	d108      	bne.n	8100680 <main+0x58>
 810066e:	4b0e      	ldr	r3, [pc, #56]	@ (81006a8 <main+0x80>)
 8100670:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8100674:	4a0c      	ldr	r2, [pc, #48]	@ (81006a8 <main+0x80>)
 8100676:	f043 0301 	orr.w	r3, r3, #1
 810067a:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104
 810067e:	e007      	b.n	8100690 <main+0x68>
 8100680:	4b09      	ldr	r3, [pc, #36]	@ (81006a8 <main+0x80>)
 8100682:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8100686:	4a08      	ldr	r2, [pc, #32]	@ (81006a8 <main+0x80>)
 8100688:	f043 0301 	orr.w	r3, r3, #1
 810068c:	f8c2 3114 	str.w	r3, [r2, #276]	@ 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100690:	f000 f98e 	bl	81009b0 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100694:	f000 f856 	bl	8100744 <MX_GPIO_Init>
  MX_UART4_Init();
 8100698:	f000 f808 	bl	81006ac <MX_UART4_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 810069c:	bf00      	nop
 810069e:	e7fd      	b.n	810069c <main+0x74>
 81006a0:	58024400 	.word	0x58024400
 81006a4:	e000ed00 	.word	0xe000ed00
 81006a8:	58026400 	.word	0x58026400

081006ac <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 81006ac:	b580      	push	{r7, lr}
 81006ae:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 81006b0:	4b22      	ldr	r3, [pc, #136]	@ (810073c <MX_UART4_Init+0x90>)
 81006b2:	4a23      	ldr	r2, [pc, #140]	@ (8100740 <MX_UART4_Init+0x94>)
 81006b4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 81006b6:	4b21      	ldr	r3, [pc, #132]	@ (810073c <MX_UART4_Init+0x90>)
 81006b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 81006bc:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 81006be:	4b1f      	ldr	r3, [pc, #124]	@ (810073c <MX_UART4_Init+0x90>)
 81006c0:	2200      	movs	r2, #0
 81006c2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 81006c4:	4b1d      	ldr	r3, [pc, #116]	@ (810073c <MX_UART4_Init+0x90>)
 81006c6:	2200      	movs	r2, #0
 81006c8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 81006ca:	4b1c      	ldr	r3, [pc, #112]	@ (810073c <MX_UART4_Init+0x90>)
 81006cc:	2200      	movs	r2, #0
 81006ce:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 81006d0:	4b1a      	ldr	r3, [pc, #104]	@ (810073c <MX_UART4_Init+0x90>)
 81006d2:	220c      	movs	r2, #12
 81006d4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 81006d6:	4b19      	ldr	r3, [pc, #100]	@ (810073c <MX_UART4_Init+0x90>)
 81006d8:	2200      	movs	r2, #0
 81006da:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 81006dc:	4b17      	ldr	r3, [pc, #92]	@ (810073c <MX_UART4_Init+0x90>)
 81006de:	2200      	movs	r2, #0
 81006e0:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 81006e2:	4b16      	ldr	r3, [pc, #88]	@ (810073c <MX_UART4_Init+0x90>)
 81006e4:	2200      	movs	r2, #0
 81006e6:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 81006e8:	4b14      	ldr	r3, [pc, #80]	@ (810073c <MX_UART4_Init+0x90>)
 81006ea:	2200      	movs	r2, #0
 81006ec:	625a      	str	r2, [r3, #36]	@ 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 81006ee:	4b13      	ldr	r3, [pc, #76]	@ (810073c <MX_UART4_Init+0x90>)
 81006f0:	2200      	movs	r2, #0
 81006f2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart4) != HAL_OK)
 81006f4:	4811      	ldr	r0, [pc, #68]	@ (810073c <MX_UART4_Init+0x90>)
 81006f6:	f002 fd55 	bl	81031a4 <HAL_UART_Init>
 81006fa:	4603      	mov	r3, r0
 81006fc:	2b00      	cmp	r3, #0
 81006fe:	d001      	beq.n	8100704 <MX_UART4_Init+0x58>
  {
    Error_Handler();
 8100700:	f000 f84a 	bl	8100798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100704:	2100      	movs	r1, #0
 8100706:	480d      	ldr	r0, [pc, #52]	@ (810073c <MX_UART4_Init+0x90>)
 8100708:	f003 fd5c 	bl	81041c4 <HAL_UARTEx_SetTxFifoThreshold>
 810070c:	4603      	mov	r3, r0
 810070e:	2b00      	cmp	r3, #0
 8100710:	d001      	beq.n	8100716 <MX_UART4_Init+0x6a>
  {
    Error_Handler();
 8100712:	f000 f841 	bl	8100798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100716:	2100      	movs	r1, #0
 8100718:	4808      	ldr	r0, [pc, #32]	@ (810073c <MX_UART4_Init+0x90>)
 810071a:	f003 fd91 	bl	8104240 <HAL_UARTEx_SetRxFifoThreshold>
 810071e:	4603      	mov	r3, r0
 8100720:	2b00      	cmp	r3, #0
 8100722:	d001      	beq.n	8100728 <MX_UART4_Init+0x7c>
  {
    Error_Handler();
 8100724:	f000 f838 	bl	8100798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 8100728:	4804      	ldr	r0, [pc, #16]	@ (810073c <MX_UART4_Init+0x90>)
 810072a:	f003 fd12 	bl	8104152 <HAL_UARTEx_DisableFifoMode>
 810072e:	4603      	mov	r3, r0
 8100730:	2b00      	cmp	r3, #0
 8100732:	d001      	beq.n	8100738 <MX_UART4_Init+0x8c>
  {
    Error_Handler();
 8100734:	f000 f830 	bl	8100798 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8100738:	bf00      	nop
 810073a:	bd80      	pop	{r7, pc}
 810073c:	1000002c 	.word	0x1000002c
 8100740:	40004c00 	.word	0x40004c00

08100744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8100744:	b480      	push	{r7}
 8100746:	b083      	sub	sp, #12
 8100748:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 810074a:	4b12      	ldr	r3, [pc, #72]	@ (8100794 <MX_GPIO_Init+0x50>)
 810074c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100750:	4a10      	ldr	r2, [pc, #64]	@ (8100794 <MX_GPIO_Init+0x50>)
 8100752:	f043 0301 	orr.w	r3, r3, #1
 8100756:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810075a:	4b0e      	ldr	r3, [pc, #56]	@ (8100794 <MX_GPIO_Init+0x50>)
 810075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100760:	f003 0301 	and.w	r3, r3, #1
 8100764:	607b      	str	r3, [r7, #4]
 8100766:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100768:	4b0a      	ldr	r3, [pc, #40]	@ (8100794 <MX_GPIO_Init+0x50>)
 810076a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810076e:	4a09      	ldr	r2, [pc, #36]	@ (8100794 <MX_GPIO_Init+0x50>)
 8100770:	f043 0304 	orr.w	r3, r3, #4
 8100774:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8100778:	4b06      	ldr	r3, [pc, #24]	@ (8100794 <MX_GPIO_Init+0x50>)
 810077a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 810077e:	f003 0304 	and.w	r3, r3, #4
 8100782:	603b      	str	r3, [r7, #0]
 8100784:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8100786:	bf00      	nop
 8100788:	370c      	adds	r7, #12
 810078a:	46bd      	mov	sp, r7
 810078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100790:	4770      	bx	lr
 8100792:	bf00      	nop
 8100794:	58024400 	.word	0x58024400

08100798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8100798:	b480      	push	{r7}
 810079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 810079c:	b672      	cpsid	i
}
 810079e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 81007a0:	bf00      	nop
 81007a2:	e7fd      	b.n	81007a0 <Error_Handler+0x8>

081007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 81007a4:	b480      	push	{r7}
 81007a6:	b083      	sub	sp, #12
 81007a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 81007aa:	4b0a      	ldr	r3, [pc, #40]	@ (81007d4 <HAL_MspInit+0x30>)
 81007ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81007b0:	4a08      	ldr	r2, [pc, #32]	@ (81007d4 <HAL_MspInit+0x30>)
 81007b2:	f043 0302 	orr.w	r3, r3, #2
 81007b6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 81007ba:	4b06      	ldr	r3, [pc, #24]	@ (81007d4 <HAL_MspInit+0x30>)
 81007bc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 81007c0:	f003 0302 	and.w	r3, r3, #2
 81007c4:	607b      	str	r3, [r7, #4]
 81007c6:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81007c8:	bf00      	nop
 81007ca:	370c      	adds	r7, #12
 81007cc:	46bd      	mov	sp, r7
 81007ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81007d2:	4770      	bx	lr
 81007d4:	58024400 	.word	0x58024400

081007d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 81007d8:	b580      	push	{r7, lr}
 81007da:	b0bc      	sub	sp, #240	@ 0xf0
 81007dc:	af00      	add	r7, sp, #0
 81007de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 81007e0:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81007e4:	2200      	movs	r2, #0
 81007e6:	601a      	str	r2, [r3, #0]
 81007e8:	605a      	str	r2, [r3, #4]
 81007ea:	609a      	str	r2, [r3, #8]
 81007ec:	60da      	str	r2, [r3, #12]
 81007ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 81007f0:	f107 0318 	add.w	r3, r7, #24
 81007f4:	22c0      	movs	r2, #192	@ 0xc0
 81007f6:	2100      	movs	r1, #0
 81007f8:	4618      	mov	r0, r3
 81007fa:	f003 fdad 	bl	8104358 <memset>
  if(huart->Instance==UART4)
 81007fe:	687b      	ldr	r3, [r7, #4]
 8100800:	681b      	ldr	r3, [r3, #0]
 8100802:	4a39      	ldr	r2, [pc, #228]	@ (81008e8 <HAL_UART_MspInit+0x110>)
 8100804:	4293      	cmp	r3, r2
 8100806:	d16a      	bne.n	81008de <HAL_UART_MspInit+0x106>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8100808:	f04f 0202 	mov.w	r2, #2
 810080c:	f04f 0300 	mov.w	r3, #0
 8100810:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100814:	2300      	movs	r3, #0
 8100816:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810081a:	f107 0318 	add.w	r3, r7, #24
 810081e:	4618      	mov	r0, r3
 8100820:	f000 fe94 	bl	810154c <HAL_RCCEx_PeriphCLKConfig>
 8100824:	4603      	mov	r3, r0
 8100826:	2b00      	cmp	r3, #0
 8100828:	d001      	beq.n	810082e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 810082a:	f7ff ffb5 	bl	8100798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 810082e:	4b2f      	ldr	r3, [pc, #188]	@ (81008ec <HAL_UART_MspInit+0x114>)
 8100830:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100834:	4a2d      	ldr	r2, [pc, #180]	@ (81008ec <HAL_UART_MspInit+0x114>)
 8100836:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 810083a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 810083e:	4b2b      	ldr	r3, [pc, #172]	@ (81008ec <HAL_UART_MspInit+0x114>)
 8100840:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8100844:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8100848:	617b      	str	r3, [r7, #20]
 810084a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 810084c:	4b27      	ldr	r3, [pc, #156]	@ (81008ec <HAL_UART_MspInit+0x114>)
 810084e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100852:	4a26      	ldr	r2, [pc, #152]	@ (81008ec <HAL_UART_MspInit+0x114>)
 8100854:	f043 0301 	orr.w	r3, r3, #1
 8100858:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810085c:	4b23      	ldr	r3, [pc, #140]	@ (81008ec <HAL_UART_MspInit+0x114>)
 810085e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100862:	f003 0301 	and.w	r3, r3, #1
 8100866:	613b      	str	r3, [r7, #16]
 8100868:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 810086a:	4b20      	ldr	r3, [pc, #128]	@ (81008ec <HAL_UART_MspInit+0x114>)
 810086c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100870:	4a1e      	ldr	r2, [pc, #120]	@ (81008ec <HAL_UART_MspInit+0x114>)
 8100872:	f043 0304 	orr.w	r3, r3, #4
 8100876:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 810087a:	4b1c      	ldr	r3, [pc, #112]	@ (81008ec <HAL_UART_MspInit+0x114>)
 810087c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8100880:	f003 0304 	and.w	r3, r3, #4
 8100884:	60fb      	str	r3, [r7, #12]
 8100886:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8100888:	2301      	movs	r3, #1
 810088a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 810088e:	2302      	movs	r3, #2
 8100890:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100894:	2300      	movs	r3, #0
 8100896:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 810089a:	2300      	movs	r3, #0
 810089c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 81008a0:	2308      	movs	r3, #8
 81008a2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 81008a6:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81008aa:	4619      	mov	r1, r3
 81008ac:	4810      	ldr	r0, [pc, #64]	@ (81008f0 <HAL_UART_MspInit+0x118>)
 81008ae:	f000 fa2b 	bl	8100d08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 81008b2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 81008b6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81008ba:	2302      	movs	r3, #2
 81008bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81008c0:	2300      	movs	r3, #0
 81008c2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81008c6:	2300      	movs	r3, #0
 81008c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 81008cc:	2308      	movs	r3, #8
 81008ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 81008d2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 81008d6:	4619      	mov	r1, r3
 81008d8:	4806      	ldr	r0, [pc, #24]	@ (81008f4 <HAL_UART_MspInit+0x11c>)
 81008da:	f000 fa15 	bl	8100d08 <HAL_GPIO_Init>

  /* USER CODE END UART4_MspInit 1 */

  }

}
 81008de:	bf00      	nop
 81008e0:	37f0      	adds	r7, #240	@ 0xf0
 81008e2:	46bd      	mov	sp, r7
 81008e4:	bd80      	pop	{r7, pc}
 81008e6:	bf00      	nop
 81008e8:	40004c00 	.word	0x40004c00
 81008ec:	58024400 	.word	0x58024400
 81008f0:	58020000 	.word	0x58020000
 81008f4:	58020800 	.word	0x58020800

081008f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81008f8:	b480      	push	{r7}
 81008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81008fc:	bf00      	nop
 81008fe:	e7fd      	b.n	81008fc <NMI_Handler+0x4>

08100900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8100900:	b480      	push	{r7}
 8100902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8100904:	bf00      	nop
 8100906:	e7fd      	b.n	8100904 <HardFault_Handler+0x4>

08100908 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100908:	b480      	push	{r7}
 810090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810090c:	bf00      	nop
 810090e:	e7fd      	b.n	810090c <MemManage_Handler+0x4>

08100910 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100910:	b480      	push	{r7}
 8100912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8100914:	bf00      	nop
 8100916:	e7fd      	b.n	8100914 <BusFault_Handler+0x4>

08100918 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8100918:	b480      	push	{r7}
 810091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 810091c:	bf00      	nop
 810091e:	e7fd      	b.n	810091c <UsageFault_Handler+0x4>

08100920 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100920:	b480      	push	{r7}
 8100922:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100924:	bf00      	nop
 8100926:	46bd      	mov	sp, r7
 8100928:	f85d 7b04 	ldr.w	r7, [sp], #4
 810092c:	4770      	bx	lr

0810092e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 810092e:	b480      	push	{r7}
 8100930:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8100932:	bf00      	nop
 8100934:	46bd      	mov	sp, r7
 8100936:	f85d 7b04 	ldr.w	r7, [sp], #4
 810093a:	4770      	bx	lr

0810093c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 810093c:	b480      	push	{r7}
 810093e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8100940:	bf00      	nop
 8100942:	46bd      	mov	sp, r7
 8100944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100948:	4770      	bx	lr

0810094a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 810094a:	b580      	push	{r7, lr}
 810094c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 810094e:	f000 f8c3 	bl	8100ad8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8100952:	bf00      	nop
 8100954:	bd80      	pop	{r7, pc}
	...

08100958 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100958:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8100994 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 810095c:	f7ff fe4c 	bl	81005f8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8100960:	f7ff fe32 	bl	81005c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100964:	480c      	ldr	r0, [pc, #48]	@ (8100998 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100966:	490d      	ldr	r1, [pc, #52]	@ (810099c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100968:	4a0d      	ldr	r2, [pc, #52]	@ (81009a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 810096c:	e002      	b.n	8100974 <LoopCopyDataInit>

0810096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 810096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100972:	3304      	adds	r3, #4

08100974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100978:	d3f9      	bcc.n	810096e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810097a:	4a0a      	ldr	r2, [pc, #40]	@ (81009a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 810097c:	4c0a      	ldr	r4, [pc, #40]	@ (81009a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 810097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100980:	e001      	b.n	8100986 <LoopFillZerobss>

08100982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100984:	3204      	adds	r2, #4

08100986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100988:	d3fb      	bcc.n	8100982 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810098a:	f003 fced 	bl	8104368 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810098e:	f7ff fe4b 	bl	8100628 <main>
  bx  lr
 8100992:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100994:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100998:	10000000 	.word	0x10000000
  ldr r1, =_edata
 810099c:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 81009a0:	08104410 	.word	0x08104410
  ldr r2, =_sbss
 81009a4:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 81009a8:	100000c4 	.word	0x100000c4

081009ac <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 81009ac:	e7fe      	b.n	81009ac <ADC3_IRQHandler>
	...

081009b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 81009b0:	b580      	push	{r7, lr}
 81009b2:	b082      	sub	sp, #8
 81009b4:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 81009b6:	4b28      	ldr	r3, [pc, #160]	@ (8100a58 <HAL_Init+0xa8>)
 81009b8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81009bc:	4a26      	ldr	r2, [pc, #152]	@ (8100a58 <HAL_Init+0xa8>)
 81009be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 81009c2:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 81009c6:	4b24      	ldr	r3, [pc, #144]	@ (8100a58 <HAL_Init+0xa8>)
 81009c8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 81009cc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 81009d0:	603b      	str	r3, [r7, #0]
 81009d2:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 81009d4:	4b21      	ldr	r3, [pc, #132]	@ (8100a5c <HAL_Init+0xac>)
 81009d6:	681b      	ldr	r3, [r3, #0]
 81009d8:	f423 237f 	bic.w	r3, r3, #1044480	@ 0xff000
 81009dc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 81009e0:	4a1e      	ldr	r2, [pc, #120]	@ (8100a5c <HAL_Init+0xac>)
 81009e2:	f443 4301 	orr.w	r3, r3, #33024	@ 0x8100
 81009e6:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81009e8:	4b1c      	ldr	r3, [pc, #112]	@ (8100a5c <HAL_Init+0xac>)
 81009ea:	681b      	ldr	r3, [r3, #0]
 81009ec:	4a1b      	ldr	r2, [pc, #108]	@ (8100a5c <HAL_Init+0xac>)
 81009ee:	f043 0301 	orr.w	r3, r3, #1
 81009f2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81009f4:	2003      	movs	r0, #3
 81009f6:	f000 f941 	bl	8100c7c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81009fa:	f000 fbcf 	bl	810119c <HAL_RCC_GetSysClockFreq>
 81009fe:	4602      	mov	r2, r0
 8100a00:	4b15      	ldr	r3, [pc, #84]	@ (8100a58 <HAL_Init+0xa8>)
 8100a02:	699b      	ldr	r3, [r3, #24]
 8100a04:	0a1b      	lsrs	r3, r3, #8
 8100a06:	f003 030f 	and.w	r3, r3, #15
 8100a0a:	4915      	ldr	r1, [pc, #84]	@ (8100a60 <HAL_Init+0xb0>)
 8100a0c:	5ccb      	ldrb	r3, [r1, r3]
 8100a0e:	f003 031f 	and.w	r3, r3, #31
 8100a12:	fa22 f303 	lsr.w	r3, r2, r3
 8100a16:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100a18:	4b0f      	ldr	r3, [pc, #60]	@ (8100a58 <HAL_Init+0xa8>)
 8100a1a:	699b      	ldr	r3, [r3, #24]
 8100a1c:	f003 030f 	and.w	r3, r3, #15
 8100a20:	4a0f      	ldr	r2, [pc, #60]	@ (8100a60 <HAL_Init+0xb0>)
 8100a22:	5cd3      	ldrb	r3, [r2, r3]
 8100a24:	f003 031f 	and.w	r3, r3, #31
 8100a28:	687a      	ldr	r2, [r7, #4]
 8100a2a:	fa22 f303 	lsr.w	r3, r2, r3
 8100a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8100a64 <HAL_Init+0xb4>)
 8100a30:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100a32:	4b0c      	ldr	r3, [pc, #48]	@ (8100a64 <HAL_Init+0xb4>)
 8100a34:	681b      	ldr	r3, [r3, #0]
 8100a36:	4a0c      	ldr	r2, [pc, #48]	@ (8100a68 <HAL_Init+0xb8>)
 8100a38:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100a3a:	2000      	movs	r0, #0
 8100a3c:	f000 f816 	bl	8100a6c <HAL_InitTick>
 8100a40:	4603      	mov	r3, r0
 8100a42:	2b00      	cmp	r3, #0
 8100a44:	d001      	beq.n	8100a4a <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100a46:	2301      	movs	r3, #1
 8100a48:	e002      	b.n	8100a50 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100a4a:	f7ff feab 	bl	81007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100a4e:	2300      	movs	r3, #0
}
 8100a50:	4618      	mov	r0, r3
 8100a52:	3708      	adds	r7, #8
 8100a54:	46bd      	mov	sp, r7
 8100a56:	bd80      	pop	{r7, pc}
 8100a58:	58024400 	.word	0x58024400
 8100a5c:	40024400 	.word	0x40024400
 8100a60:	081043c8 	.word	0x081043c8
 8100a64:	10000004 	.word	0x10000004
 8100a68:	10000000 	.word	0x10000000

08100a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100a6c:	b580      	push	{r7, lr}
 8100a6e:	b082      	sub	sp, #8
 8100a70:	af00      	add	r7, sp, #0
 8100a72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100a74:	4b15      	ldr	r3, [pc, #84]	@ (8100acc <HAL_InitTick+0x60>)
 8100a76:	781b      	ldrb	r3, [r3, #0]
 8100a78:	2b00      	cmp	r3, #0
 8100a7a:	d101      	bne.n	8100a80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100a7c:	2301      	movs	r3, #1
 8100a7e:	e021      	b.n	8100ac4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100a80:	4b13      	ldr	r3, [pc, #76]	@ (8100ad0 <HAL_InitTick+0x64>)
 8100a82:	681a      	ldr	r2, [r3, #0]
 8100a84:	4b11      	ldr	r3, [pc, #68]	@ (8100acc <HAL_InitTick+0x60>)
 8100a86:	781b      	ldrb	r3, [r3, #0]
 8100a88:	4619      	mov	r1, r3
 8100a8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8100a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8100a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8100a96:	4618      	mov	r0, r3
 8100a98:	f000 f915 	bl	8100cc6 <HAL_SYSTICK_Config>
 8100a9c:	4603      	mov	r3, r0
 8100a9e:	2b00      	cmp	r3, #0
 8100aa0:	d001      	beq.n	8100aa6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100aa2:	2301      	movs	r3, #1
 8100aa4:	e00e      	b.n	8100ac4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100aa6:	687b      	ldr	r3, [r7, #4]
 8100aa8:	2b0f      	cmp	r3, #15
 8100aaa:	d80a      	bhi.n	8100ac2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100aac:	2200      	movs	r2, #0
 8100aae:	6879      	ldr	r1, [r7, #4]
 8100ab0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100ab4:	f000 f8ed 	bl	8100c92 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100ab8:	4a06      	ldr	r2, [pc, #24]	@ (8100ad4 <HAL_InitTick+0x68>)
 8100aba:	687b      	ldr	r3, [r7, #4]
 8100abc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100abe:	2300      	movs	r3, #0
 8100ac0:	e000      	b.n	8100ac4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100ac2:	2301      	movs	r3, #1
}
 8100ac4:	4618      	mov	r0, r3
 8100ac6:	3708      	adds	r7, #8
 8100ac8:	46bd      	mov	sp, r7
 8100aca:	bd80      	pop	{r7, pc}
 8100acc:	1000000c 	.word	0x1000000c
 8100ad0:	10000000 	.word	0x10000000
 8100ad4:	10000008 	.word	0x10000008

08100ad8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100ad8:	b480      	push	{r7}
 8100ada:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100adc:	4b06      	ldr	r3, [pc, #24]	@ (8100af8 <HAL_IncTick+0x20>)
 8100ade:	781b      	ldrb	r3, [r3, #0]
 8100ae0:	461a      	mov	r2, r3
 8100ae2:	4b06      	ldr	r3, [pc, #24]	@ (8100afc <HAL_IncTick+0x24>)
 8100ae4:	681b      	ldr	r3, [r3, #0]
 8100ae6:	4413      	add	r3, r2
 8100ae8:	4a04      	ldr	r2, [pc, #16]	@ (8100afc <HAL_IncTick+0x24>)
 8100aea:	6013      	str	r3, [r2, #0]
}
 8100aec:	bf00      	nop
 8100aee:	46bd      	mov	sp, r7
 8100af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100af4:	4770      	bx	lr
 8100af6:	bf00      	nop
 8100af8:	1000000c 	.word	0x1000000c
 8100afc:	100000c0 	.word	0x100000c0

08100b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100b00:	b480      	push	{r7}
 8100b02:	af00      	add	r7, sp, #0
  return uwTick;
 8100b04:	4b03      	ldr	r3, [pc, #12]	@ (8100b14 <HAL_GetTick+0x14>)
 8100b06:	681b      	ldr	r3, [r3, #0]
}
 8100b08:	4618      	mov	r0, r3
 8100b0a:	46bd      	mov	sp, r7
 8100b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b10:	4770      	bx	lr
 8100b12:	bf00      	nop
 8100b14:	100000c0 	.word	0x100000c0

08100b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100b18:	b480      	push	{r7}
 8100b1a:	b085      	sub	sp, #20
 8100b1c:	af00      	add	r7, sp, #0
 8100b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100b20:	687b      	ldr	r3, [r7, #4]
 8100b22:	f003 0307 	and.w	r3, r3, #7
 8100b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100b28:	4b0c      	ldr	r3, [pc, #48]	@ (8100b5c <__NVIC_SetPriorityGrouping+0x44>)
 8100b2a:	68db      	ldr	r3, [r3, #12]
 8100b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100b2e:	68ba      	ldr	r2, [r7, #8]
 8100b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8100b34:	4013      	ands	r3, r2
 8100b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100b38:	68fb      	ldr	r3, [r7, #12]
 8100b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100b3c:	68bb      	ldr	r3, [r7, #8]
 8100b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8100b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8100b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100b4a:	4a04      	ldr	r2, [pc, #16]	@ (8100b5c <__NVIC_SetPriorityGrouping+0x44>)
 8100b4c:	68bb      	ldr	r3, [r7, #8]
 8100b4e:	60d3      	str	r3, [r2, #12]
}
 8100b50:	bf00      	nop
 8100b52:	3714      	adds	r7, #20
 8100b54:	46bd      	mov	sp, r7
 8100b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b5a:	4770      	bx	lr
 8100b5c:	e000ed00 	.word	0xe000ed00

08100b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100b60:	b480      	push	{r7}
 8100b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100b64:	4b04      	ldr	r3, [pc, #16]	@ (8100b78 <__NVIC_GetPriorityGrouping+0x18>)
 8100b66:	68db      	ldr	r3, [r3, #12]
 8100b68:	0a1b      	lsrs	r3, r3, #8
 8100b6a:	f003 0307 	and.w	r3, r3, #7
}
 8100b6e:	4618      	mov	r0, r3
 8100b70:	46bd      	mov	sp, r7
 8100b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100b76:	4770      	bx	lr
 8100b78:	e000ed00 	.word	0xe000ed00

08100b7c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100b7c:	b480      	push	{r7}
 8100b7e:	b083      	sub	sp, #12
 8100b80:	af00      	add	r7, sp, #0
 8100b82:	4603      	mov	r3, r0
 8100b84:	6039      	str	r1, [r7, #0]
 8100b86:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100b88:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b8c:	2b00      	cmp	r3, #0
 8100b8e:	db0a      	blt.n	8100ba6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100b90:	683b      	ldr	r3, [r7, #0]
 8100b92:	b2da      	uxtb	r2, r3
 8100b94:	490c      	ldr	r1, [pc, #48]	@ (8100bc8 <__NVIC_SetPriority+0x4c>)
 8100b96:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100b9a:	0112      	lsls	r2, r2, #4
 8100b9c:	b2d2      	uxtb	r2, r2
 8100b9e:	440b      	add	r3, r1
 8100ba0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100ba4:	e00a      	b.n	8100bbc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100ba6:	683b      	ldr	r3, [r7, #0]
 8100ba8:	b2da      	uxtb	r2, r3
 8100baa:	4908      	ldr	r1, [pc, #32]	@ (8100bcc <__NVIC_SetPriority+0x50>)
 8100bac:	88fb      	ldrh	r3, [r7, #6]
 8100bae:	f003 030f 	and.w	r3, r3, #15
 8100bb2:	3b04      	subs	r3, #4
 8100bb4:	0112      	lsls	r2, r2, #4
 8100bb6:	b2d2      	uxtb	r2, r2
 8100bb8:	440b      	add	r3, r1
 8100bba:	761a      	strb	r2, [r3, #24]
}
 8100bbc:	bf00      	nop
 8100bbe:	370c      	adds	r7, #12
 8100bc0:	46bd      	mov	sp, r7
 8100bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bc6:	4770      	bx	lr
 8100bc8:	e000e100 	.word	0xe000e100
 8100bcc:	e000ed00 	.word	0xe000ed00

08100bd0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100bd0:	b480      	push	{r7}
 8100bd2:	b089      	sub	sp, #36	@ 0x24
 8100bd4:	af00      	add	r7, sp, #0
 8100bd6:	60f8      	str	r0, [r7, #12]
 8100bd8:	60b9      	str	r1, [r7, #8]
 8100bda:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100bdc:	68fb      	ldr	r3, [r7, #12]
 8100bde:	f003 0307 	and.w	r3, r3, #7
 8100be2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100be4:	69fb      	ldr	r3, [r7, #28]
 8100be6:	f1c3 0307 	rsb	r3, r3, #7
 8100bea:	2b04      	cmp	r3, #4
 8100bec:	bf28      	it	cs
 8100bee:	2304      	movcs	r3, #4
 8100bf0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100bf2:	69fb      	ldr	r3, [r7, #28]
 8100bf4:	3304      	adds	r3, #4
 8100bf6:	2b06      	cmp	r3, #6
 8100bf8:	d902      	bls.n	8100c00 <NVIC_EncodePriority+0x30>
 8100bfa:	69fb      	ldr	r3, [r7, #28]
 8100bfc:	3b03      	subs	r3, #3
 8100bfe:	e000      	b.n	8100c02 <NVIC_EncodePriority+0x32>
 8100c00:	2300      	movs	r3, #0
 8100c02:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c04:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8100c08:	69bb      	ldr	r3, [r7, #24]
 8100c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8100c0e:	43da      	mvns	r2, r3
 8100c10:	68bb      	ldr	r3, [r7, #8]
 8100c12:	401a      	ands	r2, r3
 8100c14:	697b      	ldr	r3, [r7, #20]
 8100c16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100c18:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8100c1c:	697b      	ldr	r3, [r7, #20]
 8100c1e:	fa01 f303 	lsl.w	r3, r1, r3
 8100c22:	43d9      	mvns	r1, r3
 8100c24:	687b      	ldr	r3, [r7, #4]
 8100c26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100c28:	4313      	orrs	r3, r2
         );
}
 8100c2a:	4618      	mov	r0, r3
 8100c2c:	3724      	adds	r7, #36	@ 0x24
 8100c2e:	46bd      	mov	sp, r7
 8100c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c34:	4770      	bx	lr
	...

08100c38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100c38:	b580      	push	{r7, lr}
 8100c3a:	b082      	sub	sp, #8
 8100c3c:	af00      	add	r7, sp, #0
 8100c3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100c40:	687b      	ldr	r3, [r7, #4]
 8100c42:	3b01      	subs	r3, #1
 8100c44:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8100c48:	d301      	bcc.n	8100c4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100c4a:	2301      	movs	r3, #1
 8100c4c:	e00f      	b.n	8100c6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100c4e:	4a0a      	ldr	r2, [pc, #40]	@ (8100c78 <SysTick_Config+0x40>)
 8100c50:	687b      	ldr	r3, [r7, #4]
 8100c52:	3b01      	subs	r3, #1
 8100c54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100c56:	210f      	movs	r1, #15
 8100c58:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8100c5c:	f7ff ff8e 	bl	8100b7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100c60:	4b05      	ldr	r3, [pc, #20]	@ (8100c78 <SysTick_Config+0x40>)
 8100c62:	2200      	movs	r2, #0
 8100c64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100c66:	4b04      	ldr	r3, [pc, #16]	@ (8100c78 <SysTick_Config+0x40>)
 8100c68:	2207      	movs	r2, #7
 8100c6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100c6c:	2300      	movs	r3, #0
}
 8100c6e:	4618      	mov	r0, r3
 8100c70:	3708      	adds	r7, #8
 8100c72:	46bd      	mov	sp, r7
 8100c74:	bd80      	pop	{r7, pc}
 8100c76:	bf00      	nop
 8100c78:	e000e010 	.word	0xe000e010

08100c7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100c7c:	b580      	push	{r7, lr}
 8100c7e:	b082      	sub	sp, #8
 8100c80:	af00      	add	r7, sp, #0
 8100c82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100c84:	6878      	ldr	r0, [r7, #4]
 8100c86:	f7ff ff47 	bl	8100b18 <__NVIC_SetPriorityGrouping>
}
 8100c8a:	bf00      	nop
 8100c8c:	3708      	adds	r7, #8
 8100c8e:	46bd      	mov	sp, r7
 8100c90:	bd80      	pop	{r7, pc}

08100c92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100c92:	b580      	push	{r7, lr}
 8100c94:	b086      	sub	sp, #24
 8100c96:	af00      	add	r7, sp, #0
 8100c98:	4603      	mov	r3, r0
 8100c9a:	60b9      	str	r1, [r7, #8]
 8100c9c:	607a      	str	r2, [r7, #4]
 8100c9e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100ca0:	f7ff ff5e 	bl	8100b60 <__NVIC_GetPriorityGrouping>
 8100ca4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100ca6:	687a      	ldr	r2, [r7, #4]
 8100ca8:	68b9      	ldr	r1, [r7, #8]
 8100caa:	6978      	ldr	r0, [r7, #20]
 8100cac:	f7ff ff90 	bl	8100bd0 <NVIC_EncodePriority>
 8100cb0:	4602      	mov	r2, r0
 8100cb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100cb6:	4611      	mov	r1, r2
 8100cb8:	4618      	mov	r0, r3
 8100cba:	f7ff ff5f 	bl	8100b7c <__NVIC_SetPriority>
}
 8100cbe:	bf00      	nop
 8100cc0:	3718      	adds	r7, #24
 8100cc2:	46bd      	mov	sp, r7
 8100cc4:	bd80      	pop	{r7, pc}

08100cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100cc6:	b580      	push	{r7, lr}
 8100cc8:	b082      	sub	sp, #8
 8100cca:	af00      	add	r7, sp, #0
 8100ccc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100cce:	6878      	ldr	r0, [r7, #4]
 8100cd0:	f7ff ffb2 	bl	8100c38 <SysTick_Config>
 8100cd4:	4603      	mov	r3, r0
}
 8100cd6:	4618      	mov	r0, r3
 8100cd8:	3708      	adds	r7, #8
 8100cda:	46bd      	mov	sp, r7
 8100cdc:	bd80      	pop	{r7, pc}
	...

08100ce0 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100ce0:	b480      	push	{r7}
 8100ce2:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100ce4:	4b07      	ldr	r3, [pc, #28]	@ (8100d04 <HAL_GetCurrentCPUID+0x24>)
 8100ce6:	681b      	ldr	r3, [r3, #0]
 8100ce8:	091b      	lsrs	r3, r3, #4
 8100cea:	f003 030f 	and.w	r3, r3, #15
 8100cee:	2b07      	cmp	r3, #7
 8100cf0:	d101      	bne.n	8100cf6 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100cf2:	2303      	movs	r3, #3
 8100cf4:	e000      	b.n	8100cf8 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100cf6:	2301      	movs	r3, #1
  }
}
 8100cf8:	4618      	mov	r0, r3
 8100cfa:	46bd      	mov	sp, r7
 8100cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d00:	4770      	bx	lr
 8100d02:	bf00      	nop
 8100d04:	e000ed00 	.word	0xe000ed00

08100d08 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8100d08:	b480      	push	{r7}
 8100d0a:	b089      	sub	sp, #36	@ 0x24
 8100d0c:	af00      	add	r7, sp, #0
 8100d0e:	6078      	str	r0, [r7, #4]
 8100d10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8100d12:	2300      	movs	r3, #0
 8100d14:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 8100d16:	4b89      	ldr	r3, [pc, #548]	@ (8100f3c <HAL_GPIO_Init+0x234>)
 8100d18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8100d1a:	e194      	b.n	8101046 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8100d1c:	683b      	ldr	r3, [r7, #0]
 8100d1e:	681a      	ldr	r2, [r3, #0]
 8100d20:	2101      	movs	r1, #1
 8100d22:	69fb      	ldr	r3, [r7, #28]
 8100d24:	fa01 f303 	lsl.w	r3, r1, r3
 8100d28:	4013      	ands	r3, r2
 8100d2a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8100d2c:	693b      	ldr	r3, [r7, #16]
 8100d2e:	2b00      	cmp	r3, #0
 8100d30:	f000 8186 	beq.w	8101040 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8100d34:	683b      	ldr	r3, [r7, #0]
 8100d36:	685b      	ldr	r3, [r3, #4]
 8100d38:	f003 0303 	and.w	r3, r3, #3
 8100d3c:	2b01      	cmp	r3, #1
 8100d3e:	d005      	beq.n	8100d4c <HAL_GPIO_Init+0x44>
 8100d40:	683b      	ldr	r3, [r7, #0]
 8100d42:	685b      	ldr	r3, [r3, #4]
 8100d44:	f003 0303 	and.w	r3, r3, #3
 8100d48:	2b02      	cmp	r3, #2
 8100d4a:	d130      	bne.n	8100dae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8100d4c:	687b      	ldr	r3, [r7, #4]
 8100d4e:	689b      	ldr	r3, [r3, #8]
 8100d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8100d52:	69fb      	ldr	r3, [r7, #28]
 8100d54:	005b      	lsls	r3, r3, #1
 8100d56:	2203      	movs	r2, #3
 8100d58:	fa02 f303 	lsl.w	r3, r2, r3
 8100d5c:	43db      	mvns	r3, r3
 8100d5e:	69ba      	ldr	r2, [r7, #24]
 8100d60:	4013      	ands	r3, r2
 8100d62:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8100d64:	683b      	ldr	r3, [r7, #0]
 8100d66:	68da      	ldr	r2, [r3, #12]
 8100d68:	69fb      	ldr	r3, [r7, #28]
 8100d6a:	005b      	lsls	r3, r3, #1
 8100d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8100d70:	69ba      	ldr	r2, [r7, #24]
 8100d72:	4313      	orrs	r3, r2
 8100d74:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8100d76:	687b      	ldr	r3, [r7, #4]
 8100d78:	69ba      	ldr	r2, [r7, #24]
 8100d7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8100d7c:	687b      	ldr	r3, [r7, #4]
 8100d7e:	685b      	ldr	r3, [r3, #4]
 8100d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8100d82:	2201      	movs	r2, #1
 8100d84:	69fb      	ldr	r3, [r7, #28]
 8100d86:	fa02 f303 	lsl.w	r3, r2, r3
 8100d8a:	43db      	mvns	r3, r3
 8100d8c:	69ba      	ldr	r2, [r7, #24]
 8100d8e:	4013      	ands	r3, r2
 8100d90:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8100d92:	683b      	ldr	r3, [r7, #0]
 8100d94:	685b      	ldr	r3, [r3, #4]
 8100d96:	091b      	lsrs	r3, r3, #4
 8100d98:	f003 0201 	and.w	r2, r3, #1
 8100d9c:	69fb      	ldr	r3, [r7, #28]
 8100d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8100da2:	69ba      	ldr	r2, [r7, #24]
 8100da4:	4313      	orrs	r3, r2
 8100da6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8100da8:	687b      	ldr	r3, [r7, #4]
 8100daa:	69ba      	ldr	r2, [r7, #24]
 8100dac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8100dae:	683b      	ldr	r3, [r7, #0]
 8100db0:	685b      	ldr	r3, [r3, #4]
 8100db2:	f003 0303 	and.w	r3, r3, #3
 8100db6:	2b03      	cmp	r3, #3
 8100db8:	d017      	beq.n	8100dea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8100dba:	687b      	ldr	r3, [r7, #4]
 8100dbc:	68db      	ldr	r3, [r3, #12]
 8100dbe:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8100dc0:	69fb      	ldr	r3, [r7, #28]
 8100dc2:	005b      	lsls	r3, r3, #1
 8100dc4:	2203      	movs	r2, #3
 8100dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8100dca:	43db      	mvns	r3, r3
 8100dcc:	69ba      	ldr	r2, [r7, #24]
 8100dce:	4013      	ands	r3, r2
 8100dd0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8100dd2:	683b      	ldr	r3, [r7, #0]
 8100dd4:	689a      	ldr	r2, [r3, #8]
 8100dd6:	69fb      	ldr	r3, [r7, #28]
 8100dd8:	005b      	lsls	r3, r3, #1
 8100dda:	fa02 f303 	lsl.w	r3, r2, r3
 8100dde:	69ba      	ldr	r2, [r7, #24]
 8100de0:	4313      	orrs	r3, r2
 8100de2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8100de4:	687b      	ldr	r3, [r7, #4]
 8100de6:	69ba      	ldr	r2, [r7, #24]
 8100de8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8100dea:	683b      	ldr	r3, [r7, #0]
 8100dec:	685b      	ldr	r3, [r3, #4]
 8100dee:	f003 0303 	and.w	r3, r3, #3
 8100df2:	2b02      	cmp	r3, #2
 8100df4:	d123      	bne.n	8100e3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8100df6:	69fb      	ldr	r3, [r7, #28]
 8100df8:	08da      	lsrs	r2, r3, #3
 8100dfa:	687b      	ldr	r3, [r7, #4]
 8100dfc:	3208      	adds	r2, #8
 8100dfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8100e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8100e04:	69fb      	ldr	r3, [r7, #28]
 8100e06:	f003 0307 	and.w	r3, r3, #7
 8100e0a:	009b      	lsls	r3, r3, #2
 8100e0c:	220f      	movs	r2, #15
 8100e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8100e12:	43db      	mvns	r3, r3
 8100e14:	69ba      	ldr	r2, [r7, #24]
 8100e16:	4013      	ands	r3, r2
 8100e18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8100e1a:	683b      	ldr	r3, [r7, #0]
 8100e1c:	691a      	ldr	r2, [r3, #16]
 8100e1e:	69fb      	ldr	r3, [r7, #28]
 8100e20:	f003 0307 	and.w	r3, r3, #7
 8100e24:	009b      	lsls	r3, r3, #2
 8100e26:	fa02 f303 	lsl.w	r3, r2, r3
 8100e2a:	69ba      	ldr	r2, [r7, #24]
 8100e2c:	4313      	orrs	r3, r2
 8100e2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8100e30:	69fb      	ldr	r3, [r7, #28]
 8100e32:	08da      	lsrs	r2, r3, #3
 8100e34:	687b      	ldr	r3, [r7, #4]
 8100e36:	3208      	adds	r2, #8
 8100e38:	69b9      	ldr	r1, [r7, #24]
 8100e3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8100e3e:	687b      	ldr	r3, [r7, #4]
 8100e40:	681b      	ldr	r3, [r3, #0]
 8100e42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8100e44:	69fb      	ldr	r3, [r7, #28]
 8100e46:	005b      	lsls	r3, r3, #1
 8100e48:	2203      	movs	r2, #3
 8100e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8100e4e:	43db      	mvns	r3, r3
 8100e50:	69ba      	ldr	r2, [r7, #24]
 8100e52:	4013      	ands	r3, r2
 8100e54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8100e56:	683b      	ldr	r3, [r7, #0]
 8100e58:	685b      	ldr	r3, [r3, #4]
 8100e5a:	f003 0203 	and.w	r2, r3, #3
 8100e5e:	69fb      	ldr	r3, [r7, #28]
 8100e60:	005b      	lsls	r3, r3, #1
 8100e62:	fa02 f303 	lsl.w	r3, r2, r3
 8100e66:	69ba      	ldr	r2, [r7, #24]
 8100e68:	4313      	orrs	r3, r2
 8100e6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8100e6c:	687b      	ldr	r3, [r7, #4]
 8100e6e:	69ba      	ldr	r2, [r7, #24]
 8100e70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8100e72:	683b      	ldr	r3, [r7, #0]
 8100e74:	685b      	ldr	r3, [r3, #4]
 8100e76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8100e7a:	2b00      	cmp	r3, #0
 8100e7c:	f000 80e0 	beq.w	8101040 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8100e80:	4b2f      	ldr	r3, [pc, #188]	@ (8100f40 <HAL_GPIO_Init+0x238>)
 8100e82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100e86:	4a2e      	ldr	r2, [pc, #184]	@ (8100f40 <HAL_GPIO_Init+0x238>)
 8100e88:	f043 0302 	orr.w	r3, r3, #2
 8100e8c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8100e90:	4b2b      	ldr	r3, [pc, #172]	@ (8100f40 <HAL_GPIO_Init+0x238>)
 8100e92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8100e96:	f003 0302 	and.w	r3, r3, #2
 8100e9a:	60fb      	str	r3, [r7, #12]
 8100e9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8100e9e:	4a29      	ldr	r2, [pc, #164]	@ (8100f44 <HAL_GPIO_Init+0x23c>)
 8100ea0:	69fb      	ldr	r3, [r7, #28]
 8100ea2:	089b      	lsrs	r3, r3, #2
 8100ea4:	3302      	adds	r3, #2
 8100ea6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8100eaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8100eac:	69fb      	ldr	r3, [r7, #28]
 8100eae:	f003 0303 	and.w	r3, r3, #3
 8100eb2:	009b      	lsls	r3, r3, #2
 8100eb4:	220f      	movs	r2, #15
 8100eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8100eba:	43db      	mvns	r3, r3
 8100ebc:	69ba      	ldr	r2, [r7, #24]
 8100ebe:	4013      	ands	r3, r2
 8100ec0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8100ec2:	687b      	ldr	r3, [r7, #4]
 8100ec4:	4a20      	ldr	r2, [pc, #128]	@ (8100f48 <HAL_GPIO_Init+0x240>)
 8100ec6:	4293      	cmp	r3, r2
 8100ec8:	d052      	beq.n	8100f70 <HAL_GPIO_Init+0x268>
 8100eca:	687b      	ldr	r3, [r7, #4]
 8100ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8100f4c <HAL_GPIO_Init+0x244>)
 8100ece:	4293      	cmp	r3, r2
 8100ed0:	d031      	beq.n	8100f36 <HAL_GPIO_Init+0x22e>
 8100ed2:	687b      	ldr	r3, [r7, #4]
 8100ed4:	4a1e      	ldr	r2, [pc, #120]	@ (8100f50 <HAL_GPIO_Init+0x248>)
 8100ed6:	4293      	cmp	r3, r2
 8100ed8:	d02b      	beq.n	8100f32 <HAL_GPIO_Init+0x22a>
 8100eda:	687b      	ldr	r3, [r7, #4]
 8100edc:	4a1d      	ldr	r2, [pc, #116]	@ (8100f54 <HAL_GPIO_Init+0x24c>)
 8100ede:	4293      	cmp	r3, r2
 8100ee0:	d025      	beq.n	8100f2e <HAL_GPIO_Init+0x226>
 8100ee2:	687b      	ldr	r3, [r7, #4]
 8100ee4:	4a1c      	ldr	r2, [pc, #112]	@ (8100f58 <HAL_GPIO_Init+0x250>)
 8100ee6:	4293      	cmp	r3, r2
 8100ee8:	d01f      	beq.n	8100f2a <HAL_GPIO_Init+0x222>
 8100eea:	687b      	ldr	r3, [r7, #4]
 8100eec:	4a1b      	ldr	r2, [pc, #108]	@ (8100f5c <HAL_GPIO_Init+0x254>)
 8100eee:	4293      	cmp	r3, r2
 8100ef0:	d019      	beq.n	8100f26 <HAL_GPIO_Init+0x21e>
 8100ef2:	687b      	ldr	r3, [r7, #4]
 8100ef4:	4a1a      	ldr	r2, [pc, #104]	@ (8100f60 <HAL_GPIO_Init+0x258>)
 8100ef6:	4293      	cmp	r3, r2
 8100ef8:	d013      	beq.n	8100f22 <HAL_GPIO_Init+0x21a>
 8100efa:	687b      	ldr	r3, [r7, #4]
 8100efc:	4a19      	ldr	r2, [pc, #100]	@ (8100f64 <HAL_GPIO_Init+0x25c>)
 8100efe:	4293      	cmp	r3, r2
 8100f00:	d00d      	beq.n	8100f1e <HAL_GPIO_Init+0x216>
 8100f02:	687b      	ldr	r3, [r7, #4]
 8100f04:	4a18      	ldr	r2, [pc, #96]	@ (8100f68 <HAL_GPIO_Init+0x260>)
 8100f06:	4293      	cmp	r3, r2
 8100f08:	d007      	beq.n	8100f1a <HAL_GPIO_Init+0x212>
 8100f0a:	687b      	ldr	r3, [r7, #4]
 8100f0c:	4a17      	ldr	r2, [pc, #92]	@ (8100f6c <HAL_GPIO_Init+0x264>)
 8100f0e:	4293      	cmp	r3, r2
 8100f10:	d101      	bne.n	8100f16 <HAL_GPIO_Init+0x20e>
 8100f12:	2309      	movs	r3, #9
 8100f14:	e02d      	b.n	8100f72 <HAL_GPIO_Init+0x26a>
 8100f16:	230a      	movs	r3, #10
 8100f18:	e02b      	b.n	8100f72 <HAL_GPIO_Init+0x26a>
 8100f1a:	2308      	movs	r3, #8
 8100f1c:	e029      	b.n	8100f72 <HAL_GPIO_Init+0x26a>
 8100f1e:	2307      	movs	r3, #7
 8100f20:	e027      	b.n	8100f72 <HAL_GPIO_Init+0x26a>
 8100f22:	2306      	movs	r3, #6
 8100f24:	e025      	b.n	8100f72 <HAL_GPIO_Init+0x26a>
 8100f26:	2305      	movs	r3, #5
 8100f28:	e023      	b.n	8100f72 <HAL_GPIO_Init+0x26a>
 8100f2a:	2304      	movs	r3, #4
 8100f2c:	e021      	b.n	8100f72 <HAL_GPIO_Init+0x26a>
 8100f2e:	2303      	movs	r3, #3
 8100f30:	e01f      	b.n	8100f72 <HAL_GPIO_Init+0x26a>
 8100f32:	2302      	movs	r3, #2
 8100f34:	e01d      	b.n	8100f72 <HAL_GPIO_Init+0x26a>
 8100f36:	2301      	movs	r3, #1
 8100f38:	e01b      	b.n	8100f72 <HAL_GPIO_Init+0x26a>
 8100f3a:	bf00      	nop
 8100f3c:	580000c0 	.word	0x580000c0
 8100f40:	58024400 	.word	0x58024400
 8100f44:	58000400 	.word	0x58000400
 8100f48:	58020000 	.word	0x58020000
 8100f4c:	58020400 	.word	0x58020400
 8100f50:	58020800 	.word	0x58020800
 8100f54:	58020c00 	.word	0x58020c00
 8100f58:	58021000 	.word	0x58021000
 8100f5c:	58021400 	.word	0x58021400
 8100f60:	58021800 	.word	0x58021800
 8100f64:	58021c00 	.word	0x58021c00
 8100f68:	58022000 	.word	0x58022000
 8100f6c:	58022400 	.word	0x58022400
 8100f70:	2300      	movs	r3, #0
 8100f72:	69fa      	ldr	r2, [r7, #28]
 8100f74:	f002 0203 	and.w	r2, r2, #3
 8100f78:	0092      	lsls	r2, r2, #2
 8100f7a:	4093      	lsls	r3, r2
 8100f7c:	69ba      	ldr	r2, [r7, #24]
 8100f7e:	4313      	orrs	r3, r2
 8100f80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8100f82:	4938      	ldr	r1, [pc, #224]	@ (8101064 <HAL_GPIO_Init+0x35c>)
 8100f84:	69fb      	ldr	r3, [r7, #28]
 8100f86:	089b      	lsrs	r3, r3, #2
 8100f88:	3302      	adds	r3, #2
 8100f8a:	69ba      	ldr	r2, [r7, #24]
 8100f8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8100f90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100f94:	681b      	ldr	r3, [r3, #0]
 8100f96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100f98:	693b      	ldr	r3, [r7, #16]
 8100f9a:	43db      	mvns	r3, r3
 8100f9c:	69ba      	ldr	r2, [r7, #24]
 8100f9e:	4013      	ands	r3, r2
 8100fa0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8100fa2:	683b      	ldr	r3, [r7, #0]
 8100fa4:	685b      	ldr	r3, [r3, #4]
 8100fa6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8100faa:	2b00      	cmp	r3, #0
 8100fac:	d003      	beq.n	8100fb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8100fae:	69ba      	ldr	r2, [r7, #24]
 8100fb0:	693b      	ldr	r3, [r7, #16]
 8100fb2:	4313      	orrs	r3, r2
 8100fb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8100fb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100fba:	69bb      	ldr	r3, [r7, #24]
 8100fbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8100fbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8100fc2:	685b      	ldr	r3, [r3, #4]
 8100fc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100fc6:	693b      	ldr	r3, [r7, #16]
 8100fc8:	43db      	mvns	r3, r3
 8100fca:	69ba      	ldr	r2, [r7, #24]
 8100fcc:	4013      	ands	r3, r2
 8100fce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8100fd0:	683b      	ldr	r3, [r7, #0]
 8100fd2:	685b      	ldr	r3, [r3, #4]
 8100fd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8100fd8:	2b00      	cmp	r3, #0
 8100fda:	d003      	beq.n	8100fe4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8100fdc:	69ba      	ldr	r2, [r7, #24]
 8100fde:	693b      	ldr	r3, [r7, #16]
 8100fe0:	4313      	orrs	r3, r2
 8100fe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8100fe4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8100fe8:	69bb      	ldr	r3, [r7, #24]
 8100fea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8100fec:	697b      	ldr	r3, [r7, #20]
 8100fee:	685b      	ldr	r3, [r3, #4]
 8100ff0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8100ff2:	693b      	ldr	r3, [r7, #16]
 8100ff4:	43db      	mvns	r3, r3
 8100ff6:	69ba      	ldr	r2, [r7, #24]
 8100ff8:	4013      	ands	r3, r2
 8100ffa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8100ffc:	683b      	ldr	r3, [r7, #0]
 8100ffe:	685b      	ldr	r3, [r3, #4]
 8101000:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8101004:	2b00      	cmp	r3, #0
 8101006:	d003      	beq.n	8101010 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101008:	69ba      	ldr	r2, [r7, #24]
 810100a:	693b      	ldr	r3, [r7, #16]
 810100c:	4313      	orrs	r3, r2
 810100e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101010:	697b      	ldr	r3, [r7, #20]
 8101012:	69ba      	ldr	r2, [r7, #24]
 8101014:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101016:	697b      	ldr	r3, [r7, #20]
 8101018:	681b      	ldr	r3, [r3, #0]
 810101a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810101c:	693b      	ldr	r3, [r7, #16]
 810101e:	43db      	mvns	r3, r3
 8101020:	69ba      	ldr	r2, [r7, #24]
 8101022:	4013      	ands	r3, r2
 8101024:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101026:	683b      	ldr	r3, [r7, #0]
 8101028:	685b      	ldr	r3, [r3, #4]
 810102a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 810102e:	2b00      	cmp	r3, #0
 8101030:	d003      	beq.n	810103a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101032:	69ba      	ldr	r2, [r7, #24]
 8101034:	693b      	ldr	r3, [r7, #16]
 8101036:	4313      	orrs	r3, r2
 8101038:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 810103a:	697b      	ldr	r3, [r7, #20]
 810103c:	69ba      	ldr	r2, [r7, #24]
 810103e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101040:	69fb      	ldr	r3, [r7, #28]
 8101042:	3301      	adds	r3, #1
 8101044:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101046:	683b      	ldr	r3, [r7, #0]
 8101048:	681a      	ldr	r2, [r3, #0]
 810104a:	69fb      	ldr	r3, [r7, #28]
 810104c:	fa22 f303 	lsr.w	r3, r2, r3
 8101050:	2b00      	cmp	r3, #0
 8101052:	f47f ae63 	bne.w	8100d1c <HAL_GPIO_Init+0x14>
  }
}
 8101056:	bf00      	nop
 8101058:	bf00      	nop
 810105a:	3724      	adds	r7, #36	@ 0x24
 810105c:	46bd      	mov	sp, r7
 810105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101062:	4770      	bx	lr
 8101064:	58000400 	.word	0x58000400

08101068 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101068:	b480      	push	{r7}
 810106a:	b083      	sub	sp, #12
 810106c:	af00      	add	r7, sp, #0
 810106e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101070:	4b05      	ldr	r3, [pc, #20]	@ (8101088 <HAL_HSEM_ActivateNotification+0x20>)
 8101072:	681a      	ldr	r2, [r3, #0]
 8101074:	4904      	ldr	r1, [pc, #16]	@ (8101088 <HAL_HSEM_ActivateNotification+0x20>)
 8101076:	687b      	ldr	r3, [r7, #4]
 8101078:	4313      	orrs	r3, r2
 810107a:	600b      	str	r3, [r1, #0]
#endif
}
 810107c:	bf00      	nop
 810107e:	370c      	adds	r7, #12
 8101080:	46bd      	mov	sp, r7
 8101082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101086:	4770      	bx	lr
 8101088:	58026510 	.word	0x58026510

0810108c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810108c:	b580      	push	{r7, lr}
 810108e:	b084      	sub	sp, #16
 8101090:	af00      	add	r7, sp, #0
 8101092:	60f8      	str	r0, [r7, #12]
 8101094:	460b      	mov	r3, r1
 8101096:	607a      	str	r2, [r7, #4]
 8101098:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810109a:	4b37      	ldr	r3, [pc, #220]	@ (8101178 <HAL_PWREx_EnterSTOPMode+0xec>)
 810109c:	681b      	ldr	r3, [r3, #0]
 810109e:	f023 0201 	bic.w	r2, r3, #1
 81010a2:	4935      	ldr	r1, [pc, #212]	@ (8101178 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010a4:	68fb      	ldr	r3, [r7, #12]
 81010a6:	4313      	orrs	r3, r2
 81010a8:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 81010aa:	687b      	ldr	r3, [r7, #4]
 81010ac:	2b00      	cmp	r3, #0
 81010ae:	d123      	bne.n	81010f8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 81010b0:	f7ff fe16 	bl	8100ce0 <HAL_GetCurrentCPUID>
 81010b4:	4603      	mov	r3, r0
 81010b6:	2b03      	cmp	r3, #3
 81010b8:	d158      	bne.n	810116c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 81010ba:	4b2f      	ldr	r3, [pc, #188]	@ (8101178 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010bc:	691b      	ldr	r3, [r3, #16]
 81010be:	4a2e      	ldr	r2, [pc, #184]	@ (8101178 <HAL_PWREx_EnterSTOPMode+0xec>)
 81010c0:	f023 0301 	bic.w	r3, r3, #1
 81010c4:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81010c6:	4b2d      	ldr	r3, [pc, #180]	@ (810117c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81010c8:	691b      	ldr	r3, [r3, #16]
 81010ca:	4a2c      	ldr	r2, [pc, #176]	@ (810117c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81010cc:	f043 0304 	orr.w	r3, r3, #4
 81010d0:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 81010d2:	f3bf 8f4f 	dsb	sy
}
 81010d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81010d8:	f3bf 8f6f 	isb	sy
}
 81010dc:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81010de:	7afb      	ldrb	r3, [r7, #11]
 81010e0:	2b01      	cmp	r3, #1
 81010e2:	d101      	bne.n	81010e8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81010e4:	bf30      	wfi
 81010e6:	e000      	b.n	81010ea <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81010e8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81010ea:	4b24      	ldr	r3, [pc, #144]	@ (810117c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81010ec:	691b      	ldr	r3, [r3, #16]
 81010ee:	4a23      	ldr	r2, [pc, #140]	@ (810117c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81010f0:	f023 0304 	bic.w	r3, r3, #4
 81010f4:	6113      	str	r3, [r2, #16]
 81010f6:	e03c      	b.n	8101172 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81010f8:	687b      	ldr	r3, [r7, #4]
 81010fa:	2b01      	cmp	r3, #1
 81010fc:	d123      	bne.n	8101146 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81010fe:	f7ff fdef 	bl	8100ce0 <HAL_GetCurrentCPUID>
 8101102:	4603      	mov	r3, r0
 8101104:	2b01      	cmp	r3, #1
 8101106:	d133      	bne.n	8101170 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101108:	4b1b      	ldr	r3, [pc, #108]	@ (8101178 <HAL_PWREx_EnterSTOPMode+0xec>)
 810110a:	695b      	ldr	r3, [r3, #20]
 810110c:	4a1a      	ldr	r2, [pc, #104]	@ (8101178 <HAL_PWREx_EnterSTOPMode+0xec>)
 810110e:	f023 0302 	bic.w	r3, r3, #2
 8101112:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101114:	4b19      	ldr	r3, [pc, #100]	@ (810117c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101116:	691b      	ldr	r3, [r3, #16]
 8101118:	4a18      	ldr	r2, [pc, #96]	@ (810117c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810111a:	f043 0304 	orr.w	r3, r3, #4
 810111e:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101120:	f3bf 8f4f 	dsb	sy
}
 8101124:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101126:	f3bf 8f6f 	isb	sy
}
 810112a:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810112c:	7afb      	ldrb	r3, [r7, #11]
 810112e:	2b01      	cmp	r3, #1
 8101130:	d101      	bne.n	8101136 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101132:	bf30      	wfi
 8101134:	e000      	b.n	8101138 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101136:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101138:	4b10      	ldr	r3, [pc, #64]	@ (810117c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810113a:	691b      	ldr	r3, [r3, #16]
 810113c:	4a0f      	ldr	r2, [pc, #60]	@ (810117c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810113e:	f023 0304 	bic.w	r3, r3, #4
 8101142:	6113      	str	r3, [r2, #16]
 8101144:	e015      	b.n	8101172 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101146:	f7ff fdcb 	bl	8100ce0 <HAL_GetCurrentCPUID>
 810114a:	4603      	mov	r3, r0
 810114c:	2b03      	cmp	r3, #3
 810114e:	d106      	bne.n	810115e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101150:	4b09      	ldr	r3, [pc, #36]	@ (8101178 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101152:	691b      	ldr	r3, [r3, #16]
 8101154:	4a08      	ldr	r2, [pc, #32]	@ (8101178 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101156:	f023 0304 	bic.w	r3, r3, #4
 810115a:	6113      	str	r3, [r2, #16]
 810115c:	e009      	b.n	8101172 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810115e:	4b06      	ldr	r3, [pc, #24]	@ (8101178 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101160:	695b      	ldr	r3, [r3, #20]
 8101162:	4a05      	ldr	r2, [pc, #20]	@ (8101178 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101164:	f023 0304 	bic.w	r3, r3, #4
 8101168:	6153      	str	r3, [r2, #20]
 810116a:	e002      	b.n	8101172 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810116c:	bf00      	nop
 810116e:	e000      	b.n	8101172 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101170:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101172:	3710      	adds	r7, #16
 8101174:	46bd      	mov	sp, r7
 8101176:	bd80      	pop	{r7, pc}
 8101178:	58024800 	.word	0x58024800
 810117c:	e000ed00 	.word	0xe000ed00

08101180 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101180:	b580      	push	{r7, lr}
 8101182:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101184:	f7ff fdac 	bl	8100ce0 <HAL_GetCurrentCPUID>
 8101188:	4603      	mov	r3, r0
 810118a:	2b03      	cmp	r3, #3
 810118c:	d101      	bne.n	8101192 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810118e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101190:	e001      	b.n	8101196 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101192:	bf40      	sev
    __WFE ();
 8101194:	bf20      	wfe
}
 8101196:	bf00      	nop
 8101198:	bd80      	pop	{r7, pc}
	...

0810119c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810119c:	b480      	push	{r7}
 810119e:	b089      	sub	sp, #36	@ 0x24
 81011a0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 81011a2:	4bb3      	ldr	r3, [pc, #716]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81011a4:	691b      	ldr	r3, [r3, #16]
 81011a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81011aa:	2b18      	cmp	r3, #24
 81011ac:	f200 8155 	bhi.w	810145a <HAL_RCC_GetSysClockFreq+0x2be>
 81011b0:	a201      	add	r2, pc, #4	@ (adr r2, 81011b8 <HAL_RCC_GetSysClockFreq+0x1c>)
 81011b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81011b6:	bf00      	nop
 81011b8:	0810121d 	.word	0x0810121d
 81011bc:	0810145b 	.word	0x0810145b
 81011c0:	0810145b 	.word	0x0810145b
 81011c4:	0810145b 	.word	0x0810145b
 81011c8:	0810145b 	.word	0x0810145b
 81011cc:	0810145b 	.word	0x0810145b
 81011d0:	0810145b 	.word	0x0810145b
 81011d4:	0810145b 	.word	0x0810145b
 81011d8:	08101243 	.word	0x08101243
 81011dc:	0810145b 	.word	0x0810145b
 81011e0:	0810145b 	.word	0x0810145b
 81011e4:	0810145b 	.word	0x0810145b
 81011e8:	0810145b 	.word	0x0810145b
 81011ec:	0810145b 	.word	0x0810145b
 81011f0:	0810145b 	.word	0x0810145b
 81011f4:	0810145b 	.word	0x0810145b
 81011f8:	08101249 	.word	0x08101249
 81011fc:	0810145b 	.word	0x0810145b
 8101200:	0810145b 	.word	0x0810145b
 8101204:	0810145b 	.word	0x0810145b
 8101208:	0810145b 	.word	0x0810145b
 810120c:	0810145b 	.word	0x0810145b
 8101210:	0810145b 	.word	0x0810145b
 8101214:	0810145b 	.word	0x0810145b
 8101218:	0810124f 	.word	0x0810124f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810121c:	4b94      	ldr	r3, [pc, #592]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810121e:	681b      	ldr	r3, [r3, #0]
 8101220:	f003 0320 	and.w	r3, r3, #32
 8101224:	2b00      	cmp	r3, #0
 8101226:	d009      	beq.n	810123c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101228:	4b91      	ldr	r3, [pc, #580]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810122a:	681b      	ldr	r3, [r3, #0]
 810122c:	08db      	lsrs	r3, r3, #3
 810122e:	f003 0303 	and.w	r3, r3, #3
 8101232:	4a90      	ldr	r2, [pc, #576]	@ (8101474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101234:	fa22 f303 	lsr.w	r3, r2, r3
 8101238:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 810123a:	e111      	b.n	8101460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 810123c:	4b8d      	ldr	r3, [pc, #564]	@ (8101474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 810123e:	61bb      	str	r3, [r7, #24]
      break;
 8101240:	e10e      	b.n	8101460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101242:	4b8d      	ldr	r3, [pc, #564]	@ (8101478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101244:	61bb      	str	r3, [r7, #24]
      break;
 8101246:	e10b      	b.n	8101460 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101248:	4b8c      	ldr	r3, [pc, #560]	@ (810147c <HAL_RCC_GetSysClockFreq+0x2e0>)
 810124a:	61bb      	str	r3, [r7, #24]
      break;
 810124c:	e108      	b.n	8101460 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810124e:	4b88      	ldr	r3, [pc, #544]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8101252:	f003 0303 	and.w	r3, r3, #3
 8101256:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101258:	4b85      	ldr	r3, [pc, #532]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810125a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 810125c:	091b      	lsrs	r3, r3, #4
 810125e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8101262:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101264:	4b82      	ldr	r3, [pc, #520]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101266:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101268:	f003 0301 	and.w	r3, r3, #1
 810126c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 810126e:	4b80      	ldr	r3, [pc, #512]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101270:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8101272:	08db      	lsrs	r3, r3, #3
 8101274:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101278:	68fa      	ldr	r2, [r7, #12]
 810127a:	fb02 f303 	mul.w	r3, r2, r3
 810127e:	ee07 3a90 	vmov	s15, r3
 8101282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101286:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 810128a:	693b      	ldr	r3, [r7, #16]
 810128c:	2b00      	cmp	r3, #0
 810128e:	f000 80e1 	beq.w	8101454 <HAL_RCC_GetSysClockFreq+0x2b8>
 8101292:	697b      	ldr	r3, [r7, #20]
 8101294:	2b02      	cmp	r3, #2
 8101296:	f000 8083 	beq.w	81013a0 <HAL_RCC_GetSysClockFreq+0x204>
 810129a:	697b      	ldr	r3, [r7, #20]
 810129c:	2b02      	cmp	r3, #2
 810129e:	f200 80a1 	bhi.w	81013e4 <HAL_RCC_GetSysClockFreq+0x248>
 81012a2:	697b      	ldr	r3, [r7, #20]
 81012a4:	2b00      	cmp	r3, #0
 81012a6:	d003      	beq.n	81012b0 <HAL_RCC_GetSysClockFreq+0x114>
 81012a8:	697b      	ldr	r3, [r7, #20]
 81012aa:	2b01      	cmp	r3, #1
 81012ac:	d056      	beq.n	810135c <HAL_RCC_GetSysClockFreq+0x1c0>
 81012ae:	e099      	b.n	81013e4 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81012b0:	4b6f      	ldr	r3, [pc, #444]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012b2:	681b      	ldr	r3, [r3, #0]
 81012b4:	f003 0320 	and.w	r3, r3, #32
 81012b8:	2b00      	cmp	r3, #0
 81012ba:	d02d      	beq.n	8101318 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81012bc:	4b6c      	ldr	r3, [pc, #432]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012be:	681b      	ldr	r3, [r3, #0]
 81012c0:	08db      	lsrs	r3, r3, #3
 81012c2:	f003 0303 	and.w	r3, r3, #3
 81012c6:	4a6b      	ldr	r2, [pc, #428]	@ (8101474 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81012c8:	fa22 f303 	lsr.w	r3, r2, r3
 81012cc:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81012ce:	687b      	ldr	r3, [r7, #4]
 81012d0:	ee07 3a90 	vmov	s15, r3
 81012d4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81012d8:	693b      	ldr	r3, [r7, #16]
 81012da:	ee07 3a90 	vmov	s15, r3
 81012de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81012e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81012e6:	4b62      	ldr	r3, [pc, #392]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81012ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81012ee:	ee07 3a90 	vmov	s15, r3
 81012f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81012f6:	ed97 6a02 	vldr	s12, [r7, #8]
 81012fa:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8101480 <HAL_RCC_GetSysClockFreq+0x2e4>
 81012fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810130a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810130e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101312:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101316:	e087      	b.n	8101428 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101318:	693b      	ldr	r3, [r7, #16]
 810131a:	ee07 3a90 	vmov	s15, r3
 810131e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101322:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8101484 <HAL_RCC_GetSysClockFreq+0x2e8>
 8101326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810132a:	4b51      	ldr	r3, [pc, #324]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810132c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810132e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101332:	ee07 3a90 	vmov	s15, r3
 8101336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810133a:	ed97 6a02 	vldr	s12, [r7, #8]
 810133e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8101480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810134a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810134e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810135a:	e065      	b.n	8101428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 810135c:	693b      	ldr	r3, [r7, #16]
 810135e:	ee07 3a90 	vmov	s15, r3
 8101362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101366:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8101488 <HAL_RCC_GetSysClockFreq+0x2ec>
 810136a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810136e:	4b40      	ldr	r3, [pc, #256]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101370:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8101372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101376:	ee07 3a90 	vmov	s15, r3
 810137a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810137e:	ed97 6a02 	vldr	s12, [r7, #8]
 8101382:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8101480 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810138a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810138e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8101392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101396:	ee67 7a27 	vmul.f32	s15, s14, s15
 810139a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810139e:	e043      	b.n	8101428 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81013a0:	693b      	ldr	r3, [r7, #16]
 81013a2:	ee07 3a90 	vmov	s15, r3
 81013a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013aa:	eddf 6a38 	vldr	s13, [pc, #224]	@ 810148c <HAL_RCC_GetSysClockFreq+0x2f0>
 81013ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013b2:	4b2f      	ldr	r3, [pc, #188]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81013b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81013ba:	ee07 3a90 	vmov	s15, r3
 81013be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81013c2:	ed97 6a02 	vldr	s12, [r7, #8]
 81013c6:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8101480 <HAL_RCC_GetSysClockFreq+0x2e4>
 81013ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81013ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81013d2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 81013d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81013da:	ee67 7a27 	vmul.f32	s15, s14, s15
 81013de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 81013e2:	e021      	b.n	8101428 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 81013e4:	693b      	ldr	r3, [r7, #16]
 81013e6:	ee07 3a90 	vmov	s15, r3
 81013ea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81013ee:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8101488 <HAL_RCC_GetSysClockFreq+0x2ec>
 81013f2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81013f6:	4b1e      	ldr	r3, [pc, #120]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 81013fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81013fe:	ee07 3a90 	vmov	s15, r3
 8101402:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101406:	ed97 6a02 	vldr	s12, [r7, #8]
 810140a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8101480 <HAL_RCC_GetSysClockFreq+0x2e4>
 810140e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101412:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101416:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 810141a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810141e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101422:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101426:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8101428:	4b11      	ldr	r3, [pc, #68]	@ (8101470 <HAL_RCC_GetSysClockFreq+0x2d4>)
 810142a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 810142c:	0a5b      	lsrs	r3, r3, #9
 810142e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8101432:	3301      	adds	r3, #1
 8101434:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8101436:	683b      	ldr	r3, [r7, #0]
 8101438:	ee07 3a90 	vmov	s15, r3
 810143c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8101440:	edd7 6a07 	vldr	s13, [r7, #28]
 8101444:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8101448:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810144c:	ee17 3a90 	vmov	r3, s15
 8101450:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8101452:	e005      	b.n	8101460 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8101454:	2300      	movs	r3, #0
 8101456:	61bb      	str	r3, [r7, #24]
      break;
 8101458:	e002      	b.n	8101460 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 810145a:	4b07      	ldr	r3, [pc, #28]	@ (8101478 <HAL_RCC_GetSysClockFreq+0x2dc>)
 810145c:	61bb      	str	r3, [r7, #24]
      break;
 810145e:	bf00      	nop
  }

  return sysclockfreq;
 8101460:	69bb      	ldr	r3, [r7, #24]
}
 8101462:	4618      	mov	r0, r3
 8101464:	3724      	adds	r7, #36	@ 0x24
 8101466:	46bd      	mov	sp, r7
 8101468:	f85d 7b04 	ldr.w	r7, [sp], #4
 810146c:	4770      	bx	lr
 810146e:	bf00      	nop
 8101470:	58024400 	.word	0x58024400
 8101474:	03d09000 	.word	0x03d09000
 8101478:	003d0900 	.word	0x003d0900
 810147c:	017d7840 	.word	0x017d7840
 8101480:	46000000 	.word	0x46000000
 8101484:	4c742400 	.word	0x4c742400
 8101488:	4a742400 	.word	0x4a742400
 810148c:	4bbebc20 	.word	0x4bbebc20

08101490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8101490:	b580      	push	{r7, lr}
 8101492:	b082      	sub	sp, #8
 8101494:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8101496:	f7ff fe81 	bl	810119c <HAL_RCC_GetSysClockFreq>
 810149a:	4602      	mov	r2, r0
 810149c:	4b11      	ldr	r3, [pc, #68]	@ (81014e4 <HAL_RCC_GetHCLKFreq+0x54>)
 810149e:	699b      	ldr	r3, [r3, #24]
 81014a0:	0a1b      	lsrs	r3, r3, #8
 81014a2:	f003 030f 	and.w	r3, r3, #15
 81014a6:	4910      	ldr	r1, [pc, #64]	@ (81014e8 <HAL_RCC_GetHCLKFreq+0x58>)
 81014a8:	5ccb      	ldrb	r3, [r1, r3]
 81014aa:	f003 031f 	and.w	r3, r3, #31
 81014ae:	fa22 f303 	lsr.w	r3, r2, r3
 81014b2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81014b4:	4b0b      	ldr	r3, [pc, #44]	@ (81014e4 <HAL_RCC_GetHCLKFreq+0x54>)
 81014b6:	699b      	ldr	r3, [r3, #24]
 81014b8:	f003 030f 	and.w	r3, r3, #15
 81014bc:	4a0a      	ldr	r2, [pc, #40]	@ (81014e8 <HAL_RCC_GetHCLKFreq+0x58>)
 81014be:	5cd3      	ldrb	r3, [r2, r3]
 81014c0:	f003 031f 	and.w	r3, r3, #31
 81014c4:	687a      	ldr	r2, [r7, #4]
 81014c6:	fa22 f303 	lsr.w	r3, r2, r3
 81014ca:	4a08      	ldr	r2, [pc, #32]	@ (81014ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81014cc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81014ce:	4b07      	ldr	r3, [pc, #28]	@ (81014ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81014d0:	681b      	ldr	r3, [r3, #0]
 81014d2:	4a07      	ldr	r2, [pc, #28]	@ (81014f0 <HAL_RCC_GetHCLKFreq+0x60>)
 81014d4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81014d6:	4b05      	ldr	r3, [pc, #20]	@ (81014ec <HAL_RCC_GetHCLKFreq+0x5c>)
 81014d8:	681b      	ldr	r3, [r3, #0]
}
 81014da:	4618      	mov	r0, r3
 81014dc:	3708      	adds	r7, #8
 81014de:	46bd      	mov	sp, r7
 81014e0:	bd80      	pop	{r7, pc}
 81014e2:	bf00      	nop
 81014e4:	58024400 	.word	0x58024400
 81014e8:	081043c8 	.word	0x081043c8
 81014ec:	10000004 	.word	0x10000004
 81014f0:	10000000 	.word	0x10000000

081014f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81014f4:	b580      	push	{r7, lr}
 81014f6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 81014f8:	f7ff ffca 	bl	8101490 <HAL_RCC_GetHCLKFreq>
 81014fc:	4602      	mov	r2, r0
 81014fe:	4b06      	ldr	r3, [pc, #24]	@ (8101518 <HAL_RCC_GetPCLK1Freq+0x24>)
 8101500:	69db      	ldr	r3, [r3, #28]
 8101502:	091b      	lsrs	r3, r3, #4
 8101504:	f003 0307 	and.w	r3, r3, #7
 8101508:	4904      	ldr	r1, [pc, #16]	@ (810151c <HAL_RCC_GetPCLK1Freq+0x28>)
 810150a:	5ccb      	ldrb	r3, [r1, r3]
 810150c:	f003 031f 	and.w	r3, r3, #31
 8101510:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8101514:	4618      	mov	r0, r3
 8101516:	bd80      	pop	{r7, pc}
 8101518:	58024400 	.word	0x58024400
 810151c:	081043c8 	.word	0x081043c8

08101520 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8101520:	b580      	push	{r7, lr}
 8101522:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8101524:	f7ff ffb4 	bl	8101490 <HAL_RCC_GetHCLKFreq>
 8101528:	4602      	mov	r2, r0
 810152a:	4b06      	ldr	r3, [pc, #24]	@ (8101544 <HAL_RCC_GetPCLK2Freq+0x24>)
 810152c:	69db      	ldr	r3, [r3, #28]
 810152e:	0a1b      	lsrs	r3, r3, #8
 8101530:	f003 0307 	and.w	r3, r3, #7
 8101534:	4904      	ldr	r1, [pc, #16]	@ (8101548 <HAL_RCC_GetPCLK2Freq+0x28>)
 8101536:	5ccb      	ldrb	r3, [r1, r3]
 8101538:	f003 031f 	and.w	r3, r3, #31
 810153c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8101540:	4618      	mov	r0, r3
 8101542:	bd80      	pop	{r7, pc}
 8101544:	58024400 	.word	0x58024400
 8101548:	081043c8 	.word	0x081043c8

0810154c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 810154c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8101550:	b0ca      	sub	sp, #296	@ 0x128
 8101552:	af00      	add	r7, sp, #0
 8101554:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8101558:	2300      	movs	r3, #0
 810155a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 810155e:	2300      	movs	r3, #0
 8101560:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8101564:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101568:	e9d3 2300 	ldrd	r2, r3, [r3]
 810156c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8101570:	2500      	movs	r5, #0
 8101572:	ea54 0305 	orrs.w	r3, r4, r5
 8101576:	d049      	beq.n	810160c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8101578:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810157c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 810157e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8101582:	d02f      	beq.n	81015e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8101584:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8101588:	d828      	bhi.n	81015dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 810158a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 810158e:	d01a      	beq.n	81015c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8101590:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8101594:	d822      	bhi.n	81015dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8101596:	2b00      	cmp	r3, #0
 8101598:	d003      	beq.n	81015a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 810159a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 810159e:	d007      	beq.n	81015b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81015a0:	e01c      	b.n	81015dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81015a2:	4bb8      	ldr	r3, [pc, #736]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81015a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81015a6:	4ab7      	ldr	r2, [pc, #732]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81015a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81015ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81015ae:	e01a      	b.n	81015e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81015b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81015b4:	3308      	adds	r3, #8
 81015b6:	2102      	movs	r1, #2
 81015b8:	4618      	mov	r0, r3
 81015ba:	f001 fc8f 	bl	8102edc <RCCEx_PLL2_Config>
 81015be:	4603      	mov	r3, r0
 81015c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81015c4:	e00f      	b.n	81015e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81015c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81015ca:	3328      	adds	r3, #40	@ 0x28
 81015cc:	2102      	movs	r1, #2
 81015ce:	4618      	mov	r0, r3
 81015d0:	f001 fd36 	bl	8103040 <RCCEx_PLL3_Config>
 81015d4:	4603      	mov	r3, r0
 81015d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81015da:	e004      	b.n	81015e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81015dc:	2301      	movs	r3, #1
 81015de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81015e2:	e000      	b.n	81015e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81015e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 81015e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81015ea:	2b00      	cmp	r3, #0
 81015ec:	d10a      	bne.n	8101604 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81015ee:	4ba5      	ldr	r3, [pc, #660]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81015f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81015f2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 81015f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81015fa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 81015fc:	4aa1      	ldr	r2, [pc, #644]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81015fe:	430b      	orrs	r3, r1
 8101600:	6513      	str	r3, [r2, #80]	@ 0x50
 8101602:	e003      	b.n	810160c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101604:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101608:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 810160c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101614:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 8101618:	f04f 0900 	mov.w	r9, #0
 810161c:	ea58 0309 	orrs.w	r3, r8, r9
 8101620:	d047      	beq.n	81016b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8101622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101626:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101628:	2b04      	cmp	r3, #4
 810162a:	d82a      	bhi.n	8101682 <HAL_RCCEx_PeriphCLKConfig+0x136>
 810162c:	a201      	add	r2, pc, #4	@ (adr r2, 8101634 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 810162e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101632:	bf00      	nop
 8101634:	08101649 	.word	0x08101649
 8101638:	08101657 	.word	0x08101657
 810163c:	0810166d 	.word	0x0810166d
 8101640:	0810168b 	.word	0x0810168b
 8101644:	0810168b 	.word	0x0810168b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101648:	4b8e      	ldr	r3, [pc, #568]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810164a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810164c:	4a8d      	ldr	r2, [pc, #564]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810164e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101652:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101654:	e01a      	b.n	810168c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101656:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810165a:	3308      	adds	r3, #8
 810165c:	2100      	movs	r1, #0
 810165e:	4618      	mov	r0, r3
 8101660:	f001 fc3c 	bl	8102edc <RCCEx_PLL2_Config>
 8101664:	4603      	mov	r3, r0
 8101666:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810166a:	e00f      	b.n	810168c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810166c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101670:	3328      	adds	r3, #40	@ 0x28
 8101672:	2100      	movs	r1, #0
 8101674:	4618      	mov	r0, r3
 8101676:	f001 fce3 	bl	8103040 <RCCEx_PLL3_Config>
 810167a:	4603      	mov	r3, r0
 810167c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101680:	e004      	b.n	810168c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101682:	2301      	movs	r3, #1
 8101684:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101688:	e000      	b.n	810168c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 810168a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810168c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101690:	2b00      	cmp	r3, #0
 8101692:	d10a      	bne.n	81016aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8101694:	4b7b      	ldr	r3, [pc, #492]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101696:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101698:	f023 0107 	bic.w	r1, r3, #7
 810169c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81016a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81016a2:	4a78      	ldr	r2, [pc, #480]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016a4:	430b      	orrs	r3, r1
 81016a6:	6513      	str	r3, [r2, #80]	@ 0x50
 81016a8:	e003      	b.n	81016b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81016aa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81016ae:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81016b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81016b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81016ba:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 81016be:	f04f 0b00 	mov.w	fp, #0
 81016c2:	ea5a 030b 	orrs.w	r3, sl, fp
 81016c6:	d04c      	beq.n	8101762 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81016c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81016cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 81016ce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81016d2:	d030      	beq.n	8101736 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81016d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81016d8:	d829      	bhi.n	810172e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81016da:	2bc0      	cmp	r3, #192	@ 0xc0
 81016dc:	d02d      	beq.n	810173a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81016de:	2bc0      	cmp	r3, #192	@ 0xc0
 81016e0:	d825      	bhi.n	810172e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81016e2:	2b80      	cmp	r3, #128	@ 0x80
 81016e4:	d018      	beq.n	8101718 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81016e6:	2b80      	cmp	r3, #128	@ 0x80
 81016e8:	d821      	bhi.n	810172e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81016ea:	2b00      	cmp	r3, #0
 81016ec:	d002      	beq.n	81016f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81016ee:	2b40      	cmp	r3, #64	@ 0x40
 81016f0:	d007      	beq.n	8101702 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81016f2:	e01c      	b.n	810172e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81016f4:	4b63      	ldr	r3, [pc, #396]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81016f8:	4a62      	ldr	r2, [pc, #392]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81016fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81016fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101700:	e01c      	b.n	810173c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101702:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101706:	3308      	adds	r3, #8
 8101708:	2100      	movs	r1, #0
 810170a:	4618      	mov	r0, r3
 810170c:	f001 fbe6 	bl	8102edc <RCCEx_PLL2_Config>
 8101710:	4603      	mov	r3, r0
 8101712:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8101716:	e011      	b.n	810173c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101718:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810171c:	3328      	adds	r3, #40	@ 0x28
 810171e:	2100      	movs	r1, #0
 8101720:	4618      	mov	r0, r3
 8101722:	f001 fc8d 	bl	8103040 <RCCEx_PLL3_Config>
 8101726:	4603      	mov	r3, r0
 8101728:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810172c:	e006      	b.n	810173c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810172e:	2301      	movs	r3, #1
 8101730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101734:	e002      	b.n	810173c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8101736:	bf00      	nop
 8101738:	e000      	b.n	810173c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810173a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810173c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101740:	2b00      	cmp	r3, #0
 8101742:	d10a      	bne.n	810175a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8101744:	4b4f      	ldr	r3, [pc, #316]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101746:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101748:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 810174c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8101752:	4a4c      	ldr	r2, [pc, #304]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8101754:	430b      	orrs	r3, r1
 8101756:	6513      	str	r3, [r2, #80]	@ 0x50
 8101758:	e003      	b.n	8101762 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810175a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810175e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8101762:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101766:	e9d3 2300 	ldrd	r2, r3, [r3]
 810176a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 810176e:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8101772:	2300      	movs	r3, #0
 8101774:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8101778:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 810177c:	460b      	mov	r3, r1
 810177e:	4313      	orrs	r3, r2
 8101780:	d053      	beq.n	810182a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8101782:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101786:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810178a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 810178e:	d035      	beq.n	81017fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8101790:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8101794:	d82e      	bhi.n	81017f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8101796:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 810179a:	d031      	beq.n	8101800 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 810179c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 81017a0:	d828      	bhi.n	81017f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81017a2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81017a6:	d01a      	beq.n	81017de <HAL_RCCEx_PeriphCLKConfig+0x292>
 81017a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 81017ac:	d822      	bhi.n	81017f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81017ae:	2b00      	cmp	r3, #0
 81017b0:	d003      	beq.n	81017ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81017b2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81017b6:	d007      	beq.n	81017c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81017b8:	e01c      	b.n	81017f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81017ba:	4b32      	ldr	r3, [pc, #200]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81017be:	4a31      	ldr	r2, [pc, #196]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81017c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81017c6:	e01c      	b.n	8101802 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81017c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81017cc:	3308      	adds	r3, #8
 81017ce:	2100      	movs	r1, #0
 81017d0:	4618      	mov	r0, r3
 81017d2:	f001 fb83 	bl	8102edc <RCCEx_PLL2_Config>
 81017d6:	4603      	mov	r3, r0
 81017d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81017dc:	e011      	b.n	8101802 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81017de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81017e2:	3328      	adds	r3, #40	@ 0x28
 81017e4:	2100      	movs	r1, #0
 81017e6:	4618      	mov	r0, r3
 81017e8:	f001 fc2a 	bl	8103040 <RCCEx_PLL3_Config>
 81017ec:	4603      	mov	r3, r0
 81017ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81017f2:	e006      	b.n	8101802 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81017f4:	2301      	movs	r3, #1
 81017f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81017fa:	e002      	b.n	8101802 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 81017fc:	bf00      	nop
 81017fe:	e000      	b.n	8101802 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8101800:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101806:	2b00      	cmp	r3, #0
 8101808:	d10b      	bne.n	8101822 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 810180a:	4b1e      	ldr	r3, [pc, #120]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810180c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810180e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8101812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101816:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 810181a:	4a1a      	ldr	r2, [pc, #104]	@ (8101884 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810181c:	430b      	orrs	r3, r1
 810181e:	6593      	str	r3, [r2, #88]	@ 0x58
 8101820:	e003      	b.n	810182a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101822:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101826:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 810182a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810182e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101832:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8101836:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 810183a:	2300      	movs	r3, #0
 810183c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8101840:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8101844:	460b      	mov	r3, r1
 8101846:	4313      	orrs	r3, r2
 8101848:	d056      	beq.n	81018f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 810184a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810184e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8101852:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8101856:	d038      	beq.n	81018ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8101858:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 810185c:	d831      	bhi.n	81018c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810185e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8101862:	d034      	beq.n	81018ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8101864:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8101868:	d82b      	bhi.n	81018c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 810186a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 810186e:	d01d      	beq.n	81018ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8101870:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8101874:	d825      	bhi.n	81018c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101876:	2b00      	cmp	r3, #0
 8101878:	d006      	beq.n	8101888 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 810187a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 810187e:	d00a      	beq.n	8101896 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8101880:	e01f      	b.n	81018c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8101882:	bf00      	nop
 8101884:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101888:	4ba2      	ldr	r3, [pc, #648]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810188a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810188c:	4aa1      	ldr	r2, [pc, #644]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810188e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101892:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8101894:	e01c      	b.n	81018d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8101896:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810189a:	3308      	adds	r3, #8
 810189c:	2100      	movs	r1, #0
 810189e:	4618      	mov	r0, r3
 81018a0:	f001 fb1c 	bl	8102edc <RCCEx_PLL2_Config>
 81018a4:	4603      	mov	r3, r0
 81018a6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81018aa:	e011      	b.n	81018d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81018ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81018b0:	3328      	adds	r3, #40	@ 0x28
 81018b2:	2100      	movs	r1, #0
 81018b4:	4618      	mov	r0, r3
 81018b6:	f001 fbc3 	bl	8103040 <RCCEx_PLL3_Config>
 81018ba:	4603      	mov	r3, r0
 81018bc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81018c0:	e006      	b.n	81018d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81018c2:	2301      	movs	r3, #1
 81018c4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81018c8:	e002      	b.n	81018d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81018ca:	bf00      	nop
 81018cc:	e000      	b.n	81018d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81018ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 81018d0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81018d4:	2b00      	cmp	r3, #0
 81018d6:	d10b      	bne.n	81018f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81018d8:	4b8e      	ldr	r3, [pc, #568]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81018da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81018dc:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 81018e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81018e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 81018e8:	4a8a      	ldr	r2, [pc, #552]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81018ea:	430b      	orrs	r3, r1
 81018ec:	6593      	str	r3, [r2, #88]	@ 0x58
 81018ee:	e003      	b.n	81018f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81018f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81018f4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 81018f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81018fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101900:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8101904:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8101908:	2300      	movs	r3, #0
 810190a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 810190e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8101912:	460b      	mov	r3, r1
 8101914:	4313      	orrs	r3, r2
 8101916:	d03a      	beq.n	810198e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8101918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810191c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810191e:	2b30      	cmp	r3, #48	@ 0x30
 8101920:	d01f      	beq.n	8101962 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8101922:	2b30      	cmp	r3, #48	@ 0x30
 8101924:	d819      	bhi.n	810195a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8101926:	2b20      	cmp	r3, #32
 8101928:	d00c      	beq.n	8101944 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 810192a:	2b20      	cmp	r3, #32
 810192c:	d815      	bhi.n	810195a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810192e:	2b00      	cmp	r3, #0
 8101930:	d019      	beq.n	8101966 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8101932:	2b10      	cmp	r3, #16
 8101934:	d111      	bne.n	810195a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101936:	4b77      	ldr	r3, [pc, #476]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810193a:	4a76      	ldr	r2, [pc, #472]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810193c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101940:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101942:	e011      	b.n	8101968 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101944:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101948:	3308      	adds	r3, #8
 810194a:	2102      	movs	r1, #2
 810194c:	4618      	mov	r0, r3
 810194e:	f001 fac5 	bl	8102edc <RCCEx_PLL2_Config>
 8101952:	4603      	mov	r3, r0
 8101954:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8101958:	e006      	b.n	8101968 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 810195a:	2301      	movs	r3, #1
 810195c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101960:	e002      	b.n	8101968 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101962:	bf00      	nop
 8101964:	e000      	b.n	8101968 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8101966:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101968:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810196c:	2b00      	cmp	r3, #0
 810196e:	d10a      	bne.n	8101986 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8101970:	4b68      	ldr	r3, [pc, #416]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101974:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8101978:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810197c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 810197e:	4a65      	ldr	r2, [pc, #404]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101980:	430b      	orrs	r3, r1
 8101982:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101984:	e003      	b.n	810198e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101986:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810198a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 810198e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101996:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 810199a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 810199e:	2300      	movs	r3, #0
 81019a0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 81019a4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 81019a8:	460b      	mov	r3, r1
 81019aa:	4313      	orrs	r3, r2
 81019ac:	d051      	beq.n	8101a52 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81019ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81019b2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 81019b4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81019b8:	d035      	beq.n	8101a26 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81019ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81019be:	d82e      	bhi.n	8101a1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81019c0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81019c4:	d031      	beq.n	8101a2a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81019c6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 81019ca:	d828      	bhi.n	8101a1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81019cc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81019d0:	d01a      	beq.n	8101a08 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81019d2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81019d6:	d822      	bhi.n	8101a1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81019d8:	2b00      	cmp	r3, #0
 81019da:	d003      	beq.n	81019e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 81019dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81019e0:	d007      	beq.n	81019f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81019e2:	e01c      	b.n	8101a1e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81019e4:	4b4b      	ldr	r3, [pc, #300]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81019e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81019e8:	4a4a      	ldr	r2, [pc, #296]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81019ea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81019ee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81019f0:	e01c      	b.n	8101a2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81019f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81019f6:	3308      	adds	r3, #8
 81019f8:	2100      	movs	r1, #0
 81019fa:	4618      	mov	r0, r3
 81019fc:	f001 fa6e 	bl	8102edc <RCCEx_PLL2_Config>
 8101a00:	4603      	mov	r3, r0
 8101a02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101a06:	e011      	b.n	8101a2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8101a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a0c:	3328      	adds	r3, #40	@ 0x28
 8101a0e:	2100      	movs	r1, #0
 8101a10:	4618      	mov	r0, r3
 8101a12:	f001 fb15 	bl	8103040 <RCCEx_PLL3_Config>
 8101a16:	4603      	mov	r3, r0
 8101a18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8101a1c:	e006      	b.n	8101a2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101a1e:	2301      	movs	r3, #1
 8101a20:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101a24:	e002      	b.n	8101a2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101a26:	bf00      	nop
 8101a28:	e000      	b.n	8101a2c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8101a2a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101a2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101a30:	2b00      	cmp	r3, #0
 8101a32:	d10a      	bne.n	8101a4a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8101a34:	4b37      	ldr	r3, [pc, #220]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101a38:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8101a3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a40:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8101a42:	4a34      	ldr	r2, [pc, #208]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101a44:	430b      	orrs	r3, r1
 8101a46:	6513      	str	r3, [r2, #80]	@ 0x50
 8101a48:	e003      	b.n	8101a52 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101a4e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8101a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101a5a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8101a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8101a62:	2300      	movs	r3, #0
 8101a64:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8101a68:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8101a6c:	460b      	mov	r3, r1
 8101a6e:	4313      	orrs	r3, r2
 8101a70:	d056      	beq.n	8101b20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8101a72:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101a76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101a78:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101a7c:	d033      	beq.n	8101ae6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8101a7e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8101a82:	d82c      	bhi.n	8101ade <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101a84:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101a88:	d02f      	beq.n	8101aea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8101a8a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8101a8e:	d826      	bhi.n	8101ade <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101a90:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101a94:	d02b      	beq.n	8101aee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8101a96:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8101a9a:	d820      	bhi.n	8101ade <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101a9c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101aa0:	d012      	beq.n	8101ac8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8101aa2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8101aa6:	d81a      	bhi.n	8101ade <HAL_RCCEx_PeriphCLKConfig+0x592>
 8101aa8:	2b00      	cmp	r3, #0
 8101aaa:	d022      	beq.n	8101af2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8101aac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8101ab0:	d115      	bne.n	8101ade <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ab6:	3308      	adds	r3, #8
 8101ab8:	2101      	movs	r1, #1
 8101aba:	4618      	mov	r0, r3
 8101abc:	f001 fa0e 	bl	8102edc <RCCEx_PLL2_Config>
 8101ac0:	4603      	mov	r3, r0
 8101ac2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101ac6:	e015      	b.n	8101af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101ac8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101acc:	3328      	adds	r3, #40	@ 0x28
 8101ace:	2101      	movs	r1, #1
 8101ad0:	4618      	mov	r0, r3
 8101ad2:	f001 fab5 	bl	8103040 <RCCEx_PLL3_Config>
 8101ad6:	4603      	mov	r3, r0
 8101ad8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8101adc:	e00a      	b.n	8101af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101ade:	2301      	movs	r3, #1
 8101ae0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101ae4:	e006      	b.n	8101af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101ae6:	bf00      	nop
 8101ae8:	e004      	b.n	8101af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101aea:	bf00      	nop
 8101aec:	e002      	b.n	8101af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101aee:	bf00      	nop
 8101af0:	e000      	b.n	8101af4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8101af2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101af4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101af8:	2b00      	cmp	r3, #0
 8101afa:	d10d      	bne.n	8101b18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8101afc:	4b05      	ldr	r3, [pc, #20]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101afe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101b00:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8101b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b08:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8101b0a:	4a02      	ldr	r2, [pc, #8]	@ (8101b14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8101b0c:	430b      	orrs	r3, r1
 8101b0e:	6513      	str	r3, [r2, #80]	@ 0x50
 8101b10:	e006      	b.n	8101b20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8101b12:	bf00      	nop
 8101b14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101b18:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101b1c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8101b20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101b28:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8101b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8101b30:	2300      	movs	r3, #0
 8101b32:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8101b36:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8101b3a:	460b      	mov	r3, r1
 8101b3c:	4313      	orrs	r3, r2
 8101b3e:	d055      	beq.n	8101bec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8101b40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8101b48:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101b4c:	d033      	beq.n	8101bb6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8101b4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8101b52:	d82c      	bhi.n	8101bae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101b54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101b58:	d02f      	beq.n	8101bba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8101b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8101b5e:	d826      	bhi.n	8101bae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101b60:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101b64:	d02b      	beq.n	8101bbe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8101b66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8101b6a:	d820      	bhi.n	8101bae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101b6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101b70:	d012      	beq.n	8101b98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8101b72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101b76:	d81a      	bhi.n	8101bae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8101b78:	2b00      	cmp	r3, #0
 8101b7a:	d022      	beq.n	8101bc2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8101b7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101b80:	d115      	bne.n	8101bae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101b82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b86:	3308      	adds	r3, #8
 8101b88:	2101      	movs	r1, #1
 8101b8a:	4618      	mov	r0, r3
 8101b8c:	f001 f9a6 	bl	8102edc <RCCEx_PLL2_Config>
 8101b90:	4603      	mov	r3, r0
 8101b92:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101b96:	e015      	b.n	8101bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101b98:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101b9c:	3328      	adds	r3, #40	@ 0x28
 8101b9e:	2101      	movs	r1, #1
 8101ba0:	4618      	mov	r0, r3
 8101ba2:	f001 fa4d 	bl	8103040 <RCCEx_PLL3_Config>
 8101ba6:	4603      	mov	r3, r0
 8101ba8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8101bac:	e00a      	b.n	8101bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8101bae:	2301      	movs	r3, #1
 8101bb0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101bb4:	e006      	b.n	8101bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101bb6:	bf00      	nop
 8101bb8:	e004      	b.n	8101bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101bba:	bf00      	nop
 8101bbc:	e002      	b.n	8101bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101bbe:	bf00      	nop
 8101bc0:	e000      	b.n	8101bc4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8101bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101bc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101bc8:	2b00      	cmp	r3, #0
 8101bca:	d10b      	bne.n	8101be4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8101bcc:	4ba4      	ldr	r3, [pc, #656]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101bce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8101bd0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8101bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bd8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8101bdc:	4aa0      	ldr	r2, [pc, #640]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101bde:	430b      	orrs	r3, r1
 8101be0:	6593      	str	r3, [r2, #88]	@ 0x58
 8101be2:	e003      	b.n	8101bec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101be4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101be8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8101bec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101bf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101bf4:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8101bf8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8101bfc:	2300      	movs	r3, #0
 8101bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8101c02:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8101c06:	460b      	mov	r3, r1
 8101c08:	4313      	orrs	r3, r2
 8101c0a:	d037      	beq.n	8101c7c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8101c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101c12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101c16:	d00e      	beq.n	8101c36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8101c18:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8101c1c:	d816      	bhi.n	8101c4c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8101c1e:	2b00      	cmp	r3, #0
 8101c20:	d018      	beq.n	8101c54 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8101c22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8101c26:	d111      	bne.n	8101c4c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101c28:	4b8d      	ldr	r3, [pc, #564]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101c2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101c2c:	4a8c      	ldr	r2, [pc, #560]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101c2e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101c32:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101c34:	e00f      	b.n	8101c56 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c3a:	3308      	adds	r3, #8
 8101c3c:	2101      	movs	r1, #1
 8101c3e:	4618      	mov	r0, r3
 8101c40:	f001 f94c 	bl	8102edc <RCCEx_PLL2_Config>
 8101c44:	4603      	mov	r3, r0
 8101c46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8101c4a:	e004      	b.n	8101c56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101c4c:	2301      	movs	r3, #1
 8101c4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101c52:	e000      	b.n	8101c56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8101c54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101c56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c5a:	2b00      	cmp	r3, #0
 8101c5c:	d10a      	bne.n	8101c74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8101c5e:	4b80      	ldr	r3, [pc, #512]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101c60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8101c62:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8101c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101c6c:	4a7c      	ldr	r2, [pc, #496]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101c6e:	430b      	orrs	r3, r1
 8101c70:	6513      	str	r3, [r2, #80]	@ 0x50
 8101c72:	e003      	b.n	8101c7c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101c74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101c78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8101c7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101c84:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8101c88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8101c8c:	2300      	movs	r3, #0
 8101c8e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8101c92:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8101c96:	460b      	mov	r3, r1
 8101c98:	4313      	orrs	r3, r2
 8101c9a:	d039      	beq.n	8101d10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8101c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ca0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101ca2:	2b03      	cmp	r3, #3
 8101ca4:	d81c      	bhi.n	8101ce0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8101ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8101cac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8101ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101cac:	08101ce9 	.word	0x08101ce9
 8101cb0:	08101cbd 	.word	0x08101cbd
 8101cb4:	08101ccb 	.word	0x08101ccb
 8101cb8:	08101ce9 	.word	0x08101ce9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8101cbc:	4b68      	ldr	r3, [pc, #416]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8101cc0:	4a67      	ldr	r2, [pc, #412]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101cc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8101cc6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101cc8:	e00f      	b.n	8101cea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8101cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cce:	3308      	adds	r3, #8
 8101cd0:	2102      	movs	r1, #2
 8101cd2:	4618      	mov	r0, r3
 8101cd4:	f001 f902 	bl	8102edc <RCCEx_PLL2_Config>
 8101cd8:	4603      	mov	r3, r0
 8101cda:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8101cde:	e004      	b.n	8101cea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8101ce0:	2301      	movs	r3, #1
 8101ce2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101ce6:	e000      	b.n	8101cea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8101ce8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101cea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101cee:	2b00      	cmp	r3, #0
 8101cf0:	d10a      	bne.n	8101d08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8101cf2:	4b5b      	ldr	r3, [pc, #364]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8101cf6:	f023 0103 	bic.w	r1, r3, #3
 8101cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101cfe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8101d00:	4a57      	ldr	r2, [pc, #348]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d02:	430b      	orrs	r3, r1
 8101d04:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8101d06:	e003      	b.n	8101d10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101d08:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d0c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8101d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101d18:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8101d1c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8101d20:	2300      	movs	r3, #0
 8101d22:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8101d26:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8101d2a:	460b      	mov	r3, r1
 8101d2c:	4313      	orrs	r3, r2
 8101d2e:	f000 809f 	beq.w	8101e70 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8101d32:	4b4c      	ldr	r3, [pc, #304]	@ (8101e64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8101d34:	681b      	ldr	r3, [r3, #0]
 8101d36:	4a4b      	ldr	r2, [pc, #300]	@ (8101e64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8101d38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8101d3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8101d3e:	f7fe fedf 	bl	8100b00 <HAL_GetTick>
 8101d42:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101d46:	e00b      	b.n	8101d60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8101d48:	f7fe feda 	bl	8100b00 <HAL_GetTick>
 8101d4c:	4602      	mov	r2, r0
 8101d4e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8101d52:	1ad3      	subs	r3, r2, r3
 8101d54:	2b64      	cmp	r3, #100	@ 0x64
 8101d56:	d903      	bls.n	8101d60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8101d58:	2303      	movs	r3, #3
 8101d5a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101d5e:	e005      	b.n	8101d6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8101d60:	4b40      	ldr	r3, [pc, #256]	@ (8101e64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8101d62:	681b      	ldr	r3, [r3, #0]
 8101d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8101d68:	2b00      	cmp	r3, #0
 8101d6a:	d0ed      	beq.n	8101d48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8101d6c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101d70:	2b00      	cmp	r3, #0
 8101d72:	d179      	bne.n	8101e68 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8101d74:	4b3a      	ldr	r3, [pc, #232]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d76:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8101d78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101d7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101d80:	4053      	eors	r3, r2
 8101d82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8101d86:	2b00      	cmp	r3, #0
 8101d88:	d015      	beq.n	8101db6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8101d8a:	4b35      	ldr	r3, [pc, #212]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101d8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8101d92:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8101d96:	4b32      	ldr	r3, [pc, #200]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101d9a:	4a31      	ldr	r2, [pc, #196]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101d9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8101da0:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8101da2:	4b2f      	ldr	r3, [pc, #188]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101da4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101da6:	4a2e      	ldr	r2, [pc, #184]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8101dac:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8101dae:	4a2c      	ldr	r2, [pc, #176]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101db0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8101db4:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8101db6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101dba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101dbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8101dc2:	d118      	bne.n	8101df6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8101dc4:	f7fe fe9c 	bl	8100b00 <HAL_GetTick>
 8101dc8:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101dcc:	e00d      	b.n	8101dea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8101dce:	f7fe fe97 	bl	8100b00 <HAL_GetTick>
 8101dd2:	4602      	mov	r2, r0
 8101dd4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8101dd8:	1ad2      	subs	r2, r2, r3
 8101dda:	f241 3388 	movw	r3, #5000	@ 0x1388
 8101dde:	429a      	cmp	r2, r3
 8101de0:	d903      	bls.n	8101dea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8101de2:	2303      	movs	r3, #3
 8101de4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8101de8:	e005      	b.n	8101df6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8101dea:	4b1d      	ldr	r3, [pc, #116]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8101dee:	f003 0302 	and.w	r3, r3, #2
 8101df2:	2b00      	cmp	r3, #0
 8101df4:	d0eb      	beq.n	8101dce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8101df6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101dfa:	2b00      	cmp	r3, #0
 8101dfc:	d12b      	bne.n	8101e56 <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8101dfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8101e0a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8101e0e:	d110      	bne.n	8101e32 <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8101e10:	4b13      	ldr	r3, [pc, #76]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e12:	691b      	ldr	r3, [r3, #16]
 8101e14:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8101e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101e20:	091b      	lsrs	r3, r3, #4
 8101e22:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8101e26:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8101e2a:	4a0d      	ldr	r2, [pc, #52]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e2c:	430b      	orrs	r3, r1
 8101e2e:	6113      	str	r3, [r2, #16]
 8101e30:	e005      	b.n	8101e3e <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8101e32:	4b0b      	ldr	r3, [pc, #44]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e34:	691b      	ldr	r3, [r3, #16]
 8101e36:	4a0a      	ldr	r2, [pc, #40]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e38:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8101e3c:	6113      	str	r3, [r2, #16]
 8101e3e:	4b08      	ldr	r3, [pc, #32]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e40:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8101e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e46:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8101e4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8101e4e:	4a04      	ldr	r2, [pc, #16]	@ (8101e60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8101e50:	430b      	orrs	r3, r1
 8101e52:	6713      	str	r3, [r2, #112]	@ 0x70
 8101e54:	e00c      	b.n	8101e70 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8101e56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8101e5e:	e007      	b.n	8101e70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8101e60:	58024400 	.word	0x58024400
 8101e64:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101e68:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101e6c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8101e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101e78:	f002 0301 	and.w	r3, r2, #1
 8101e7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8101e80:	2300      	movs	r3, #0
 8101e82:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8101e86:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8101e8a:	460b      	mov	r3, r1
 8101e8c:	4313      	orrs	r3, r2
 8101e8e:	f000 8089 	beq.w	8101fa4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8101e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101e96:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8101e98:	2b28      	cmp	r3, #40	@ 0x28
 8101e9a:	d86b      	bhi.n	8101f74 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8101e9c:	a201      	add	r2, pc, #4	@ (adr r2, 8101ea4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8101e9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101ea2:	bf00      	nop
 8101ea4:	08101f7d 	.word	0x08101f7d
 8101ea8:	08101f75 	.word	0x08101f75
 8101eac:	08101f75 	.word	0x08101f75
 8101eb0:	08101f75 	.word	0x08101f75
 8101eb4:	08101f75 	.word	0x08101f75
 8101eb8:	08101f75 	.word	0x08101f75
 8101ebc:	08101f75 	.word	0x08101f75
 8101ec0:	08101f75 	.word	0x08101f75
 8101ec4:	08101f49 	.word	0x08101f49
 8101ec8:	08101f75 	.word	0x08101f75
 8101ecc:	08101f75 	.word	0x08101f75
 8101ed0:	08101f75 	.word	0x08101f75
 8101ed4:	08101f75 	.word	0x08101f75
 8101ed8:	08101f75 	.word	0x08101f75
 8101edc:	08101f75 	.word	0x08101f75
 8101ee0:	08101f75 	.word	0x08101f75
 8101ee4:	08101f5f 	.word	0x08101f5f
 8101ee8:	08101f75 	.word	0x08101f75
 8101eec:	08101f75 	.word	0x08101f75
 8101ef0:	08101f75 	.word	0x08101f75
 8101ef4:	08101f75 	.word	0x08101f75
 8101ef8:	08101f75 	.word	0x08101f75
 8101efc:	08101f75 	.word	0x08101f75
 8101f00:	08101f75 	.word	0x08101f75
 8101f04:	08101f7d 	.word	0x08101f7d
 8101f08:	08101f75 	.word	0x08101f75
 8101f0c:	08101f75 	.word	0x08101f75
 8101f10:	08101f75 	.word	0x08101f75
 8101f14:	08101f75 	.word	0x08101f75
 8101f18:	08101f75 	.word	0x08101f75
 8101f1c:	08101f75 	.word	0x08101f75
 8101f20:	08101f75 	.word	0x08101f75
 8101f24:	08101f7d 	.word	0x08101f7d
 8101f28:	08101f75 	.word	0x08101f75
 8101f2c:	08101f75 	.word	0x08101f75
 8101f30:	08101f75 	.word	0x08101f75
 8101f34:	08101f75 	.word	0x08101f75
 8101f38:	08101f75 	.word	0x08101f75
 8101f3c:	08101f75 	.word	0x08101f75
 8101f40:	08101f75 	.word	0x08101f75
 8101f44:	08101f7d 	.word	0x08101f7d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101f48:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f4c:	3308      	adds	r3, #8
 8101f4e:	2101      	movs	r1, #1
 8101f50:	4618      	mov	r0, r3
 8101f52:	f000 ffc3 	bl	8102edc <RCCEx_PLL2_Config>
 8101f56:	4603      	mov	r3, r0
 8101f58:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8101f5c:	e00f      	b.n	8101f7e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8101f5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f62:	3328      	adds	r3, #40	@ 0x28
 8101f64:	2101      	movs	r1, #1
 8101f66:	4618      	mov	r0, r3
 8101f68:	f001 f86a 	bl	8103040 <RCCEx_PLL3_Config>
 8101f6c:	4603      	mov	r3, r0
 8101f6e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8101f72:	e004      	b.n	8101f7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8101f74:	2301      	movs	r3, #1
 8101f76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8101f7a:	e000      	b.n	8101f7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8101f7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8101f7e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101f82:	2b00      	cmp	r3, #0
 8101f84:	d10a      	bne.n	8101f9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8101f86:	4bbf      	ldr	r3, [pc, #764]	@ (8102284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8101f88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8101f8a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8101f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101f92:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8101f94:	4abb      	ldr	r2, [pc, #748]	@ (8102284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8101f96:	430b      	orrs	r3, r1
 8101f98:	6553      	str	r3, [r2, #84]	@ 0x54
 8101f9a:	e003      	b.n	8101fa4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8101f9c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8101fa0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8101fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101fac:	f002 0302 	and.w	r3, r2, #2
 8101fb0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8101fb4:	2300      	movs	r3, #0
 8101fb6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8101fba:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8101fbe:	460b      	mov	r3, r1
 8101fc0:	4313      	orrs	r3, r2
 8101fc2:	d041      	beq.n	8102048 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8101fc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101fc8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8101fca:	2b05      	cmp	r3, #5
 8101fcc:	d824      	bhi.n	8102018 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8101fce:	a201      	add	r2, pc, #4	@ (adr r2, 8101fd4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8101fd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101fd4:	08102021 	.word	0x08102021
 8101fd8:	08101fed 	.word	0x08101fed
 8101fdc:	08102003 	.word	0x08102003
 8101fe0:	08102021 	.word	0x08102021
 8101fe4:	08102021 	.word	0x08102021
 8101fe8:	08102021 	.word	0x08102021
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8101fec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8101ff0:	3308      	adds	r3, #8
 8101ff2:	2101      	movs	r1, #1
 8101ff4:	4618      	mov	r0, r3
 8101ff6:	f000 ff71 	bl	8102edc <RCCEx_PLL2_Config>
 8101ffa:	4603      	mov	r3, r0
 8101ffc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102000:	e00f      	b.n	8102022 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102002:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102006:	3328      	adds	r3, #40	@ 0x28
 8102008:	2101      	movs	r1, #1
 810200a:	4618      	mov	r0, r3
 810200c:	f001 f818 	bl	8103040 <RCCEx_PLL3_Config>
 8102010:	4603      	mov	r3, r0
 8102012:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102016:	e004      	b.n	8102022 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102018:	2301      	movs	r3, #1
 810201a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810201e:	e000      	b.n	8102022 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8102020:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102026:	2b00      	cmp	r3, #0
 8102028:	d10a      	bne.n	8102040 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810202a:	4b96      	ldr	r3, [pc, #600]	@ (8102284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810202c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810202e:	f023 0107 	bic.w	r1, r3, #7
 8102032:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102036:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8102038:	4a92      	ldr	r2, [pc, #584]	@ (8102284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810203a:	430b      	orrs	r3, r1
 810203c:	6553      	str	r3, [r2, #84]	@ 0x54
 810203e:	e003      	b.n	8102048 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102040:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102044:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102048:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810204c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102050:	f002 0304 	and.w	r3, r2, #4
 8102054:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8102058:	2300      	movs	r3, #0
 810205a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 810205e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8102062:	460b      	mov	r3, r1
 8102064:	4313      	orrs	r3, r2
 8102066:	d044      	beq.n	81020f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810206c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8102070:	2b05      	cmp	r3, #5
 8102072:	d825      	bhi.n	81020c0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8102074:	a201      	add	r2, pc, #4	@ (adr r2, 810207c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8102076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810207a:	bf00      	nop
 810207c:	081020c9 	.word	0x081020c9
 8102080:	08102095 	.word	0x08102095
 8102084:	081020ab 	.word	0x081020ab
 8102088:	081020c9 	.word	0x081020c9
 810208c:	081020c9 	.word	0x081020c9
 8102090:	081020c9 	.word	0x081020c9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102094:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102098:	3308      	adds	r3, #8
 810209a:	2101      	movs	r1, #1
 810209c:	4618      	mov	r0, r3
 810209e:	f000 ff1d 	bl	8102edc <RCCEx_PLL2_Config>
 81020a2:	4603      	mov	r3, r0
 81020a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81020a8:	e00f      	b.n	81020ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81020aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020ae:	3328      	adds	r3, #40	@ 0x28
 81020b0:	2101      	movs	r1, #1
 81020b2:	4618      	mov	r0, r3
 81020b4:	f000 ffc4 	bl	8103040 <RCCEx_PLL3_Config>
 81020b8:	4603      	mov	r3, r0
 81020ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 81020be:	e004      	b.n	81020ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81020c0:	2301      	movs	r3, #1
 81020c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81020c6:	e000      	b.n	81020ca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 81020c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 81020ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81020ce:	2b00      	cmp	r3, #0
 81020d0:	d10b      	bne.n	81020ea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 81020d2:	4b6c      	ldr	r3, [pc, #432]	@ (8102284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81020d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 81020d6:	f023 0107 	bic.w	r1, r3, #7
 81020da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 81020e2:	4a68      	ldr	r2, [pc, #416]	@ (8102284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81020e4:	430b      	orrs	r3, r1
 81020e6:	6593      	str	r3, [r2, #88]	@ 0x58
 81020e8:	e003      	b.n	81020f2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81020ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81020ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 81020f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81020f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81020fa:	f002 0320 	and.w	r3, r2, #32
 81020fe:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8102102:	2300      	movs	r3, #0
 8102104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8102108:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 810210c:	460b      	mov	r3, r1
 810210e:	4313      	orrs	r3, r2
 8102110:	d055      	beq.n	81021be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102112:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102116:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 810211a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 810211e:	d033      	beq.n	8102188 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8102120:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8102124:	d82c      	bhi.n	8102180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102126:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 810212a:	d02f      	beq.n	810218c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 810212c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8102130:	d826      	bhi.n	8102180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102132:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8102136:	d02b      	beq.n	8102190 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8102138:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 810213c:	d820      	bhi.n	8102180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810213e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102142:	d012      	beq.n	810216a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8102144:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8102148:	d81a      	bhi.n	8102180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 810214a:	2b00      	cmp	r3, #0
 810214c:	d022      	beq.n	8102194 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 810214e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8102152:	d115      	bne.n	8102180 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102154:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102158:	3308      	adds	r3, #8
 810215a:	2100      	movs	r1, #0
 810215c:	4618      	mov	r0, r3
 810215e:	f000 febd 	bl	8102edc <RCCEx_PLL2_Config>
 8102162:	4603      	mov	r3, r0
 8102164:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102168:	e015      	b.n	8102196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810216a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810216e:	3328      	adds	r3, #40	@ 0x28
 8102170:	2102      	movs	r1, #2
 8102172:	4618      	mov	r0, r3
 8102174:	f000 ff64 	bl	8103040 <RCCEx_PLL3_Config>
 8102178:	4603      	mov	r3, r0
 810217a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 810217e:	e00a      	b.n	8102196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102180:	2301      	movs	r3, #1
 8102182:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102186:	e006      	b.n	8102196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102188:	bf00      	nop
 810218a:	e004      	b.n	8102196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 810218c:	bf00      	nop
 810218e:	e002      	b.n	8102196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102190:	bf00      	nop
 8102192:	e000      	b.n	8102196 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102194:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102196:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810219a:	2b00      	cmp	r3, #0
 810219c:	d10b      	bne.n	81021b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 810219e:	4b39      	ldr	r3, [pc, #228]	@ (8102284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81021a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81021a2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 81021a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 81021ae:	4a35      	ldr	r2, [pc, #212]	@ (8102284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 81021b0:	430b      	orrs	r3, r1
 81021b2:	6553      	str	r3, [r2, #84]	@ 0x54
 81021b4:	e003      	b.n	81021be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81021b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81021ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81021be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81021c6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 81021ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 81021ce:	2300      	movs	r3, #0
 81021d0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 81021d4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 81021d8:	460b      	mov	r3, r1
 81021da:	4313      	orrs	r3, r2
 81021dc:	d058      	beq.n	8102290 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 81021de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81021e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 81021e6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81021ea:	d033      	beq.n	8102254 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 81021ec:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 81021f0:	d82c      	bhi.n	810224c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81021f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81021f6:	d02f      	beq.n	8102258 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 81021f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 81021fc:	d826      	bhi.n	810224c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 81021fe:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102202:	d02b      	beq.n	810225c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8102204:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8102208:	d820      	bhi.n	810224c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 810220a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 810220e:	d012      	beq.n	8102236 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8102210:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8102214:	d81a      	bhi.n	810224c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102216:	2b00      	cmp	r3, #0
 8102218:	d022      	beq.n	8102260 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 810221a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 810221e:	d115      	bne.n	810224c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102224:	3308      	adds	r3, #8
 8102226:	2100      	movs	r1, #0
 8102228:	4618      	mov	r0, r3
 810222a:	f000 fe57 	bl	8102edc <RCCEx_PLL2_Config>
 810222e:	4603      	mov	r3, r0
 8102230:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102234:	e015      	b.n	8102262 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102236:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810223a:	3328      	adds	r3, #40	@ 0x28
 810223c:	2102      	movs	r1, #2
 810223e:	4618      	mov	r0, r3
 8102240:	f000 fefe 	bl	8103040 <RCCEx_PLL3_Config>
 8102244:	4603      	mov	r3, r0
 8102246:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 810224a:	e00a      	b.n	8102262 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810224c:	2301      	movs	r3, #1
 810224e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102252:	e006      	b.n	8102262 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102254:	bf00      	nop
 8102256:	e004      	b.n	8102262 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102258:	bf00      	nop
 810225a:	e002      	b.n	8102262 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 810225c:	bf00      	nop
 810225e:	e000      	b.n	8102262 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102260:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102262:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102266:	2b00      	cmp	r3, #0
 8102268:	d10e      	bne.n	8102288 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810226a:	4b06      	ldr	r3, [pc, #24]	@ (8102284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810226c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810226e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8102272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102276:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 810227a:	4a02      	ldr	r2, [pc, #8]	@ (8102284 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 810227c:	430b      	orrs	r3, r1
 810227e:	6593      	str	r3, [r2, #88]	@ 0x58
 8102280:	e006      	b.n	8102290 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8102282:	bf00      	nop
 8102284:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102288:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810228c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102290:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102298:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 810229c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 81022a0:	2300      	movs	r3, #0
 81022a2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 81022a6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 81022aa:	460b      	mov	r3, r1
 81022ac:	4313      	orrs	r3, r2
 81022ae:	d055      	beq.n	810235c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 81022b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 81022b8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81022bc:	d033      	beq.n	8102326 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 81022be:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 81022c2:	d82c      	bhi.n	810231e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81022c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81022c8:	d02f      	beq.n	810232a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 81022ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81022ce:	d826      	bhi.n	810231e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81022d0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81022d4:	d02b      	beq.n	810232e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 81022d6:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 81022da:	d820      	bhi.n	810231e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81022dc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81022e0:	d012      	beq.n	8102308 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 81022e2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 81022e6:	d81a      	bhi.n	810231e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 81022e8:	2b00      	cmp	r3, #0
 81022ea:	d022      	beq.n	8102332 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 81022ec:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 81022f0:	d115      	bne.n	810231e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81022f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81022f6:	3308      	adds	r3, #8
 81022f8:	2100      	movs	r1, #0
 81022fa:	4618      	mov	r0, r3
 81022fc:	f000 fdee 	bl	8102edc <RCCEx_PLL2_Config>
 8102300:	4603      	mov	r3, r0
 8102302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102306:	e015      	b.n	8102334 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102308:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810230c:	3328      	adds	r3, #40	@ 0x28
 810230e:	2102      	movs	r1, #2
 8102310:	4618      	mov	r0, r3
 8102312:	f000 fe95 	bl	8103040 <RCCEx_PLL3_Config>
 8102316:	4603      	mov	r3, r0
 8102318:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 810231c:	e00a      	b.n	8102334 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810231e:	2301      	movs	r3, #1
 8102320:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102324:	e006      	b.n	8102334 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102326:	bf00      	nop
 8102328:	e004      	b.n	8102334 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810232a:	bf00      	nop
 810232c:	e002      	b.n	8102334 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 810232e:	bf00      	nop
 8102330:	e000      	b.n	8102334 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102332:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102334:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102338:	2b00      	cmp	r3, #0
 810233a:	d10b      	bne.n	8102354 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 810233c:	4ba1      	ldr	r3, [pc, #644]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810233e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102340:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8102344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102348:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 810234c:	4a9d      	ldr	r2, [pc, #628]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810234e:	430b      	orrs	r3, r1
 8102350:	6593      	str	r3, [r2, #88]	@ 0x58
 8102352:	e003      	b.n	810235c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102354:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102358:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810235c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102364:	f002 0308 	and.w	r3, r2, #8
 8102368:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 810236c:	2300      	movs	r3, #0
 810236e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8102372:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8102376:	460b      	mov	r3, r1
 8102378:	4313      	orrs	r3, r2
 810237a:	d01e      	beq.n	81023ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 810237c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102380:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8102384:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8102388:	d10c      	bne.n	81023a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 810238a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810238e:	3328      	adds	r3, #40	@ 0x28
 8102390:	2102      	movs	r1, #2
 8102392:	4618      	mov	r0, r3
 8102394:	f000 fe54 	bl	8103040 <RCCEx_PLL3_Config>
 8102398:	4603      	mov	r3, r0
 810239a:	2b00      	cmp	r3, #0
 810239c:	d002      	beq.n	81023a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 810239e:	2301      	movs	r3, #1
 81023a0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 81023a4:	4b87      	ldr	r3, [pc, #540]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81023a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81023a8:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 81023ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 81023b4:	4a83      	ldr	r2, [pc, #524]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81023b6:	430b      	orrs	r3, r1
 81023b8:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 81023ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81023c2:	f002 0310 	and.w	r3, r2, #16
 81023c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 81023ca:	2300      	movs	r3, #0
 81023cc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 81023d0:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 81023d4:	460b      	mov	r3, r1
 81023d6:	4313      	orrs	r3, r2
 81023d8:	d01e      	beq.n	8102418 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 81023da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023de:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 81023e2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 81023e6:	d10c      	bne.n	8102402 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81023e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81023ec:	3328      	adds	r3, #40	@ 0x28
 81023ee:	2102      	movs	r1, #2
 81023f0:	4618      	mov	r0, r3
 81023f2:	f000 fe25 	bl	8103040 <RCCEx_PLL3_Config>
 81023f6:	4603      	mov	r3, r0
 81023f8:	2b00      	cmp	r3, #0
 81023fa:	d002      	beq.n	8102402 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 81023fc:	2301      	movs	r3, #1
 81023fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8102402:	4b70      	ldr	r3, [pc, #448]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102404:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8102406:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810240a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810240e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8102412:	4a6c      	ldr	r2, [pc, #432]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102414:	430b      	orrs	r3, r1
 8102416:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8102418:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810241c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102420:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8102424:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8102428:	2300      	movs	r3, #0
 810242a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 810242e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8102432:	460b      	mov	r3, r1
 8102434:	4313      	orrs	r3, r2
 8102436:	d03e      	beq.n	81024b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8102438:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810243c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8102440:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8102444:	d022      	beq.n	810248c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8102446:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 810244a:	d81b      	bhi.n	8102484 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 810244c:	2b00      	cmp	r3, #0
 810244e:	d003      	beq.n	8102458 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8102450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102454:	d00b      	beq.n	810246e <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8102456:	e015      	b.n	8102484 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102458:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810245c:	3308      	adds	r3, #8
 810245e:	2100      	movs	r1, #0
 8102460:	4618      	mov	r0, r3
 8102462:	f000 fd3b 	bl	8102edc <RCCEx_PLL2_Config>
 8102466:	4603      	mov	r3, r0
 8102468:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810246c:	e00f      	b.n	810248e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810246e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102472:	3328      	adds	r3, #40	@ 0x28
 8102474:	2102      	movs	r1, #2
 8102476:	4618      	mov	r0, r3
 8102478:	f000 fde2 	bl	8103040 <RCCEx_PLL3_Config>
 810247c:	4603      	mov	r3, r0
 810247e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8102482:	e004      	b.n	810248e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102484:	2301      	movs	r3, #1
 8102486:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810248a:	e000      	b.n	810248e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 810248c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810248e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102492:	2b00      	cmp	r3, #0
 8102494:	d10b      	bne.n	81024ae <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8102496:	4b4b      	ldr	r3, [pc, #300]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 810249a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 810249e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024a2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 81024a6:	4a47      	ldr	r2, [pc, #284]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81024a8:	430b      	orrs	r3, r1
 81024aa:	6593      	str	r3, [r2, #88]	@ 0x58
 81024ac:	e003      	b.n	81024b6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81024b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81024b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 81024be:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 81024c2:	67bb      	str	r3, [r7, #120]	@ 0x78
 81024c4:	2300      	movs	r3, #0
 81024c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 81024c8:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 81024cc:	460b      	mov	r3, r1
 81024ce:	4313      	orrs	r3, r2
 81024d0:	d03b      	beq.n	810254a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81024d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81024d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81024da:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81024de:	d01f      	beq.n	8102520 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81024e0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 81024e4:	d818      	bhi.n	8102518 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81024e6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81024ea:	d003      	beq.n	81024f4 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81024ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 81024f0:	d007      	beq.n	8102502 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81024f2:	e011      	b.n	8102518 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81024f4:	4b33      	ldr	r3, [pc, #204]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81024f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81024f8:	4a32      	ldr	r2, [pc, #200]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81024fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 81024fe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8102500:	e00f      	b.n	8102522 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102502:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102506:	3328      	adds	r3, #40	@ 0x28
 8102508:	2101      	movs	r1, #1
 810250a:	4618      	mov	r0, r3
 810250c:	f000 fd98 	bl	8103040 <RCCEx_PLL3_Config>
 8102510:	4603      	mov	r3, r0
 8102512:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8102516:	e004      	b.n	8102522 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102518:	2301      	movs	r3, #1
 810251a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 810251e:	e000      	b.n	8102522 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8102520:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102522:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102526:	2b00      	cmp	r3, #0
 8102528:	d10b      	bne.n	8102542 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 810252a:	4b26      	ldr	r3, [pc, #152]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810252c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810252e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8102532:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 810253a:	4a22      	ldr	r2, [pc, #136]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810253c:	430b      	orrs	r3, r1
 810253e:	6553      	str	r3, [r2, #84]	@ 0x54
 8102540:	e003      	b.n	810254a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102546:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810254a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810254e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102552:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8102556:	673b      	str	r3, [r7, #112]	@ 0x70
 8102558:	2300      	movs	r3, #0
 810255a:	677b      	str	r3, [r7, #116]	@ 0x74
 810255c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 8102560:	460b      	mov	r3, r1
 8102562:	4313      	orrs	r3, r2
 8102564:	d034      	beq.n	81025d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8102566:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810256a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 810256c:	2b00      	cmp	r3, #0
 810256e:	d003      	beq.n	8102578 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8102570:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8102574:	d007      	beq.n	8102586 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8102576:	e011      	b.n	810259c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102578:	4b12      	ldr	r3, [pc, #72]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810257a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810257c:	4a11      	ldr	r2, [pc, #68]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810257e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102582:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8102584:	e00e      	b.n	81025a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8102586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810258a:	3308      	adds	r3, #8
 810258c:	2102      	movs	r1, #2
 810258e:	4618      	mov	r0, r3
 8102590:	f000 fca4 	bl	8102edc <RCCEx_PLL2_Config>
 8102594:	4603      	mov	r3, r0
 8102596:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810259a:	e003      	b.n	81025a4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 810259c:	2301      	movs	r3, #1
 810259e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 81025a2:	bf00      	nop
    }

    if (ret == HAL_OK)
 81025a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025a8:	2b00      	cmp	r3, #0
 81025aa:	d10d      	bne.n	81025c8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81025ac:	4b05      	ldr	r3, [pc, #20]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81025ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 81025b0:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 81025b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81025ba:	4a02      	ldr	r2, [pc, #8]	@ (81025c4 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81025bc:	430b      	orrs	r3, r1
 81025be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 81025c0:	e006      	b.n	81025d0 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81025c2:	bf00      	nop
 81025c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81025c8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81025cc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81025d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 81025d8:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 81025dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 81025de:	2300      	movs	r3, #0
 81025e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
 81025e2:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 81025e6:	460b      	mov	r3, r1
 81025e8:	4313      	orrs	r3, r2
 81025ea:	d00c      	beq.n	8102606 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81025ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81025f0:	3328      	adds	r3, #40	@ 0x28
 81025f2:	2102      	movs	r1, #2
 81025f4:	4618      	mov	r0, r3
 81025f6:	f000 fd23 	bl	8103040 <RCCEx_PLL3_Config>
 81025fa:	4603      	mov	r3, r0
 81025fc:	2b00      	cmp	r3, #0
 81025fe:	d002      	beq.n	8102606 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8102600:	2301      	movs	r3, #1
 8102602:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8102606:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810260a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810260e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 8102612:	663b      	str	r3, [r7, #96]	@ 0x60
 8102614:	2300      	movs	r3, #0
 8102616:	667b      	str	r3, [r7, #100]	@ 0x64
 8102618:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 810261c:	460b      	mov	r3, r1
 810261e:	4313      	orrs	r3, r2
 8102620:	d038      	beq.n	8102694 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8102622:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 810262a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 810262e:	d018      	beq.n	8102662 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8102630:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8102634:	d811      	bhi.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 810263a:	d014      	beq.n	8102666 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 810263c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8102640:	d80b      	bhi.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8102642:	2b00      	cmp	r3, #0
 8102644:	d011      	beq.n	810266a <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8102646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 810264a:	d106      	bne.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810264c:	4bc3      	ldr	r3, [pc, #780]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102650:	4ac2      	ldr	r2, [pc, #776]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102652:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8102656:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8102658:	e008      	b.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810265a:	2301      	movs	r3, #1
 810265c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8102660:	e004      	b.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102662:	bf00      	nop
 8102664:	e002      	b.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8102666:	bf00      	nop
 8102668:	e000      	b.n	810266c <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810266a:	bf00      	nop
    }

    if (ret == HAL_OK)
 810266c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102670:	2b00      	cmp	r3, #0
 8102672:	d10b      	bne.n	810268c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8102674:	4bb9      	ldr	r3, [pc, #740]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102676:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8102678:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 810267c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102680:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8102684:	4ab5      	ldr	r2, [pc, #724]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102686:	430b      	orrs	r3, r1
 8102688:	6553      	str	r3, [r2, #84]	@ 0x54
 810268a:	e003      	b.n	8102694 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810268c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102690:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8102694:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102698:	e9d3 2300 	ldrd	r2, r3, [r3]
 810269c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 81026a0:	65bb      	str	r3, [r7, #88]	@ 0x58
 81026a2:	2300      	movs	r3, #0
 81026a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 81026a6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 81026aa:	460b      	mov	r3, r1
 81026ac:	4313      	orrs	r3, r2
 81026ae:	d009      	beq.n	81026c4 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81026b0:	4baa      	ldr	r3, [pc, #680]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81026b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 81026b4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 81026b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 81026be:	4aa7      	ldr	r2, [pc, #668]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81026c0:	430b      	orrs	r3, r1
 81026c2:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81026c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026cc:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 81026d0:	653b      	str	r3, [r7, #80]	@ 0x50
 81026d2:	2300      	movs	r3, #0
 81026d4:	657b      	str	r3, [r7, #84]	@ 0x54
 81026d6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 81026da:	460b      	mov	r3, r1
 81026dc:	4313      	orrs	r3, r2
 81026de:	d00a      	beq.n	81026f6 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81026e0:	4b9e      	ldr	r3, [pc, #632]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81026e2:	691b      	ldr	r3, [r3, #16]
 81026e4:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 81026e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026ec:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 81026f0:	4a9a      	ldr	r2, [pc, #616]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81026f2:	430b      	orrs	r3, r1
 81026f4:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81026f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81026fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 81026fe:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8102702:	64bb      	str	r3, [r7, #72]	@ 0x48
 8102704:	2300      	movs	r3, #0
 8102706:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8102708:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 810270c:	460b      	mov	r3, r1
 810270e:	4313      	orrs	r3, r2
 8102710:	d009      	beq.n	8102726 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8102712:	4b92      	ldr	r3, [pc, #584]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102714:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8102716:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 810271a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810271e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8102720:	4a8e      	ldr	r2, [pc, #568]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102722:	430b      	orrs	r3, r1
 8102724:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8102726:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 810272a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810272e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8102732:	643b      	str	r3, [r7, #64]	@ 0x40
 8102734:	2300      	movs	r3, #0
 8102736:	647b      	str	r3, [r7, #68]	@ 0x44
 8102738:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 810273c:	460b      	mov	r3, r1
 810273e:	4313      	orrs	r3, r2
 8102740:	d00e      	beq.n	8102760 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8102742:	4b86      	ldr	r3, [pc, #536]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102744:	691b      	ldr	r3, [r3, #16]
 8102746:	4a85      	ldr	r2, [pc, #532]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102748:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 810274c:	6113      	str	r3, [r2, #16]
 810274e:	4b83      	ldr	r3, [pc, #524]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8102750:	6919      	ldr	r1, [r3, #16]
 8102752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102756:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 810275a:	4a80      	ldr	r2, [pc, #512]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810275c:	430b      	orrs	r3, r1
 810275e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8102760:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102768:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 810276c:	63bb      	str	r3, [r7, #56]	@ 0x38
 810276e:	2300      	movs	r3, #0
 8102770:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8102772:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8102776:	460b      	mov	r3, r1
 8102778:	4313      	orrs	r3, r2
 810277a:	d009      	beq.n	8102790 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 810277c:	4b77      	ldr	r3, [pc, #476]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810277e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8102780:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8102784:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102788:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810278a:	4a74      	ldr	r2, [pc, #464]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810278c:	430b      	orrs	r3, r1
 810278e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8102790:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102798:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 810279c:	633b      	str	r3, [r7, #48]	@ 0x30
 810279e:	2300      	movs	r3, #0
 81027a0:	637b      	str	r3, [r7, #52]	@ 0x34
 81027a2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 81027a6:	460b      	mov	r3, r1
 81027a8:	4313      	orrs	r3, r2
 81027aa:	d00a      	beq.n	81027c2 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81027ac:	4b6b      	ldr	r3, [pc, #428]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81027ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81027b0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 81027b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 81027bc:	4a67      	ldr	r2, [pc, #412]	@ (810295c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81027be:	430b      	orrs	r3, r1
 81027c0:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81027c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027ca:	2100      	movs	r1, #0
 81027cc:	62b9      	str	r1, [r7, #40]	@ 0x28
 81027ce:	f003 0301 	and.w	r3, r3, #1
 81027d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 81027d4:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 81027d8:	460b      	mov	r3, r1
 81027da:	4313      	orrs	r3, r2
 81027dc:	d011      	beq.n	8102802 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81027de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81027e2:	3308      	adds	r3, #8
 81027e4:	2100      	movs	r1, #0
 81027e6:	4618      	mov	r0, r3
 81027e8:	f000 fb78 	bl	8102edc <RCCEx_PLL2_Config>
 81027ec:	4603      	mov	r3, r0
 81027ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81027f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81027f6:	2b00      	cmp	r3, #0
 81027f8:	d003      	beq.n	8102802 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81027fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8102802:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102806:	e9d3 2300 	ldrd	r2, r3, [r3]
 810280a:	2100      	movs	r1, #0
 810280c:	6239      	str	r1, [r7, #32]
 810280e:	f003 0302 	and.w	r3, r3, #2
 8102812:	627b      	str	r3, [r7, #36]	@ 0x24
 8102814:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8102818:	460b      	mov	r3, r1
 810281a:	4313      	orrs	r3, r2
 810281c:	d011      	beq.n	8102842 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810281e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102822:	3308      	adds	r3, #8
 8102824:	2101      	movs	r1, #1
 8102826:	4618      	mov	r0, r3
 8102828:	f000 fb58 	bl	8102edc <RCCEx_PLL2_Config>
 810282c:	4603      	mov	r3, r0
 810282e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102832:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102836:	2b00      	cmp	r3, #0
 8102838:	d003      	beq.n	8102842 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810283a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810283e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8102842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102846:	e9d3 2300 	ldrd	r2, r3, [r3]
 810284a:	2100      	movs	r1, #0
 810284c:	61b9      	str	r1, [r7, #24]
 810284e:	f003 0304 	and.w	r3, r3, #4
 8102852:	61fb      	str	r3, [r7, #28]
 8102854:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8102858:	460b      	mov	r3, r1
 810285a:	4313      	orrs	r3, r2
 810285c:	d011      	beq.n	8102882 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810285e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102862:	3308      	adds	r3, #8
 8102864:	2102      	movs	r1, #2
 8102866:	4618      	mov	r0, r3
 8102868:	f000 fb38 	bl	8102edc <RCCEx_PLL2_Config>
 810286c:	4603      	mov	r3, r0
 810286e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102876:	2b00      	cmp	r3, #0
 8102878:	d003      	beq.n	8102882 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810287a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810287e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8102882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102886:	e9d3 2300 	ldrd	r2, r3, [r3]
 810288a:	2100      	movs	r1, #0
 810288c:	6139      	str	r1, [r7, #16]
 810288e:	f003 0308 	and.w	r3, r3, #8
 8102892:	617b      	str	r3, [r7, #20]
 8102894:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8102898:	460b      	mov	r3, r1
 810289a:	4313      	orrs	r3, r2
 810289c:	d011      	beq.n	81028c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 810289e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028a2:	3328      	adds	r3, #40	@ 0x28
 81028a4:	2100      	movs	r1, #0
 81028a6:	4618      	mov	r0, r3
 81028a8:	f000 fbca 	bl	8103040 <RCCEx_PLL3_Config>
 81028ac:	4603      	mov	r3, r0
 81028ae:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 81028b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028b6:	2b00      	cmp	r3, #0
 81028b8:	d003      	beq.n	81028c2 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028ba:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81028c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81028ca:	2100      	movs	r1, #0
 81028cc:	60b9      	str	r1, [r7, #8]
 81028ce:	f003 0310 	and.w	r3, r3, #16
 81028d2:	60fb      	str	r3, [r7, #12]
 81028d4:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81028d8:	460b      	mov	r3, r1
 81028da:	4313      	orrs	r3, r2
 81028dc:	d011      	beq.n	8102902 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81028de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 81028e2:	3328      	adds	r3, #40	@ 0x28
 81028e4:	2101      	movs	r1, #1
 81028e6:	4618      	mov	r0, r3
 81028e8:	f000 fbaa 	bl	8103040 <RCCEx_PLL3_Config>
 81028ec:	4603      	mov	r3, r0
 81028ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 81028f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028f6:	2b00      	cmp	r3, #0
 81028f8:	d003      	beq.n	8102902 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81028fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 81028fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8102902:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102906:	e9d3 2300 	ldrd	r2, r3, [r3]
 810290a:	2100      	movs	r1, #0
 810290c:	6039      	str	r1, [r7, #0]
 810290e:	f003 0320 	and.w	r3, r3, #32
 8102912:	607b      	str	r3, [r7, #4]
 8102914:	e9d7 1200 	ldrd	r1, r2, [r7]
 8102918:	460b      	mov	r3, r1
 810291a:	4313      	orrs	r3, r2
 810291c:	d011      	beq.n	8102942 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 810291e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8102922:	3328      	adds	r3, #40	@ 0x28
 8102924:	2102      	movs	r1, #2
 8102926:	4618      	mov	r0, r3
 8102928:	f000 fb8a 	bl	8103040 <RCCEx_PLL3_Config>
 810292c:	4603      	mov	r3, r0
 810292e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8102932:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8102936:	2b00      	cmp	r3, #0
 8102938:	d003      	beq.n	8102942 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 810293a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 810293e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8102942:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8102946:	2b00      	cmp	r3, #0
 8102948:	d101      	bne.n	810294e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 810294a:	2300      	movs	r3, #0
 810294c:	e000      	b.n	8102950 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 810294e:	2301      	movs	r3, #1
}
 8102950:	4618      	mov	r0, r3
 8102952:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8102956:	46bd      	mov	sp, r7
 8102958:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810295c:	58024400 	.word	0x58024400

08102960 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8102960:	b580      	push	{r7, lr}
 8102962:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8102964:	f7fe fd94 	bl	8101490 <HAL_RCC_GetHCLKFreq>
 8102968:	4602      	mov	r2, r0
 810296a:	4b06      	ldr	r3, [pc, #24]	@ (8102984 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 810296c:	6a1b      	ldr	r3, [r3, #32]
 810296e:	091b      	lsrs	r3, r3, #4
 8102970:	f003 0307 	and.w	r3, r3, #7
 8102974:	4904      	ldr	r1, [pc, #16]	@ (8102988 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8102976:	5ccb      	ldrb	r3, [r1, r3]
 8102978:	f003 031f 	and.w	r3, r3, #31
 810297c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8102980:	4618      	mov	r0, r3
 8102982:	bd80      	pop	{r7, pc}
 8102984:	58024400 	.word	0x58024400
 8102988:	081043c8 	.word	0x081043c8

0810298c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 810298c:	b480      	push	{r7}
 810298e:	b089      	sub	sp, #36	@ 0x24
 8102990:	af00      	add	r7, sp, #0
 8102992:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102994:	4ba1      	ldr	r3, [pc, #644]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102996:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102998:	f003 0303 	and.w	r3, r3, #3
 810299c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 810299e:	4b9f      	ldr	r3, [pc, #636]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81029a2:	0b1b      	lsrs	r3, r3, #12
 81029a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 81029a8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81029aa:	4b9c      	ldr	r3, [pc, #624]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81029ae:	091b      	lsrs	r3, r3, #4
 81029b0:	f003 0301 	and.w	r3, r3, #1
 81029b4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81029b6:	4b99      	ldr	r3, [pc, #612]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 81029ba:	08db      	lsrs	r3, r3, #3
 81029bc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81029c0:	693a      	ldr	r2, [r7, #16]
 81029c2:	fb02 f303 	mul.w	r3, r2, r3
 81029c6:	ee07 3a90 	vmov	s15, r3
 81029ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81029ce:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81029d2:	697b      	ldr	r3, [r7, #20]
 81029d4:	2b00      	cmp	r3, #0
 81029d6:	f000 8111 	beq.w	8102bfc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81029da:	69bb      	ldr	r3, [r7, #24]
 81029dc:	2b02      	cmp	r3, #2
 81029de:	f000 8083 	beq.w	8102ae8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81029e2:	69bb      	ldr	r3, [r7, #24]
 81029e4:	2b02      	cmp	r3, #2
 81029e6:	f200 80a1 	bhi.w	8102b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81029ea:	69bb      	ldr	r3, [r7, #24]
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	d003      	beq.n	81029f8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81029f0:	69bb      	ldr	r3, [r7, #24]
 81029f2:	2b01      	cmp	r3, #1
 81029f4:	d056      	beq.n	8102aa4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81029f6:	e099      	b.n	8102b2c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81029f8:	4b88      	ldr	r3, [pc, #544]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81029fa:	681b      	ldr	r3, [r3, #0]
 81029fc:	f003 0320 	and.w	r3, r3, #32
 8102a00:	2b00      	cmp	r3, #0
 8102a02:	d02d      	beq.n	8102a60 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102a04:	4b85      	ldr	r3, [pc, #532]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a06:	681b      	ldr	r3, [r3, #0]
 8102a08:	08db      	lsrs	r3, r3, #3
 8102a0a:	f003 0303 	and.w	r3, r3, #3
 8102a0e:	4a84      	ldr	r2, [pc, #528]	@ (8102c20 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8102a10:	fa22 f303 	lsr.w	r3, r2, r3
 8102a14:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102a16:	68bb      	ldr	r3, [r7, #8]
 8102a18:	ee07 3a90 	vmov	s15, r3
 8102a1c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a20:	697b      	ldr	r3, [r7, #20]
 8102a22:	ee07 3a90 	vmov	s15, r3
 8102a26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a2e:	4b7b      	ldr	r3, [pc, #492]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102a32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a36:	ee07 3a90 	vmov	s15, r3
 8102a3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102a42:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8102c24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102a46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102a52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a5a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8102a5e:	e087      	b.n	8102b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102a60:	697b      	ldr	r3, [r7, #20]
 8102a62:	ee07 3a90 	vmov	s15, r3
 8102a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102a6a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8102c28 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8102a6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102a72:	4b6a      	ldr	r3, [pc, #424]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102a74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102a76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102a7a:	ee07 3a90 	vmov	s15, r3
 8102a7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102a82:	ed97 6a03 	vldr	s12, [r7, #12]
 8102a86:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8102c24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102a8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102a8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102a92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102a96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102a9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102a9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102aa2:	e065      	b.n	8102b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102aa4:	697b      	ldr	r3, [r7, #20]
 8102aa6:	ee07 3a90 	vmov	s15, r3
 8102aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102aae:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8102c2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102ab6:	4b59      	ldr	r3, [pc, #356]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ab8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102abe:	ee07 3a90 	vmov	s15, r3
 8102ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ac6:	ed97 6a03 	vldr	s12, [r7, #12]
 8102aca:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8102c24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102ad6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102ae6:	e043      	b.n	8102b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102ae8:	697b      	ldr	r3, [r7, #20]
 8102aea:	ee07 3a90 	vmov	s15, r3
 8102aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102af2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8102c30 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8102af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102afa:	4b48      	ldr	r3, [pc, #288]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102afc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b02:	ee07 3a90 	vmov	s15, r3
 8102b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8102b0e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8102c24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b1a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b2a:	e021      	b.n	8102b70 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8102b2c:	697b      	ldr	r3, [r7, #20]
 8102b2e:	ee07 3a90 	vmov	s15, r3
 8102b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b36:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8102c2c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8102b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102b3e:	4b37      	ldr	r3, [pc, #220]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b40:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102b46:	ee07 3a90 	vmov	s15, r3
 8102b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102b4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102b52:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8102c24 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8102b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102b5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102b6e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8102b70:	4b2a      	ldr	r3, [pc, #168]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102b72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102b74:	0a5b      	lsrs	r3, r3, #9
 8102b76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102b7a:	ee07 3a90 	vmov	s15, r3
 8102b7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102b82:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102b86:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102b8a:	edd7 6a07 	vldr	s13, [r7, #28]
 8102b8e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102b92:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102b96:	ee17 2a90 	vmov	r2, s15
 8102b9a:	687b      	ldr	r3, [r7, #4]
 8102b9c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8102b9e:	4b1f      	ldr	r3, [pc, #124]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102ba0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102ba2:	0c1b      	lsrs	r3, r3, #16
 8102ba4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102ba8:	ee07 3a90 	vmov	s15, r3
 8102bac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bb0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102bb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102bb8:	edd7 6a07 	vldr	s13, [r7, #28]
 8102bbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102bc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102bc4:	ee17 2a90 	vmov	r2, s15
 8102bc8:	687b      	ldr	r3, [r7, #4]
 8102bca:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8102bcc:	4b13      	ldr	r3, [pc, #76]	@ (8102c1c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8102bce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8102bd0:	0e1b      	lsrs	r3, r3, #24
 8102bd2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102bd6:	ee07 3a90 	vmov	s15, r3
 8102bda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102bde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102be2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102be6:	edd7 6a07 	vldr	s13, [r7, #28]
 8102bea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102bee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102bf2:	ee17 2a90 	vmov	r2, s15
 8102bf6:	687b      	ldr	r3, [r7, #4]
 8102bf8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8102bfa:	e008      	b.n	8102c0e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	2200      	movs	r2, #0
 8102c00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8102c02:	687b      	ldr	r3, [r7, #4]
 8102c04:	2200      	movs	r2, #0
 8102c06:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8102c08:	687b      	ldr	r3, [r7, #4]
 8102c0a:	2200      	movs	r2, #0
 8102c0c:	609a      	str	r2, [r3, #8]
}
 8102c0e:	bf00      	nop
 8102c10:	3724      	adds	r7, #36	@ 0x24
 8102c12:	46bd      	mov	sp, r7
 8102c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c18:	4770      	bx	lr
 8102c1a:	bf00      	nop
 8102c1c:	58024400 	.word	0x58024400
 8102c20:	03d09000 	.word	0x03d09000
 8102c24:	46000000 	.word	0x46000000
 8102c28:	4c742400 	.word	0x4c742400
 8102c2c:	4a742400 	.word	0x4a742400
 8102c30:	4bbebc20 	.word	0x4bbebc20

08102c34 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8102c34:	b480      	push	{r7}
 8102c36:	b089      	sub	sp, #36	@ 0x24
 8102c38:	af00      	add	r7, sp, #0
 8102c3a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8102c3c:	4ba1      	ldr	r3, [pc, #644]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102c40:	f003 0303 	and.w	r3, r3, #3
 8102c44:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8102c46:	4b9f      	ldr	r3, [pc, #636]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102c4a:	0d1b      	lsrs	r3, r3, #20
 8102c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8102c50:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8102c52:	4b9c      	ldr	r3, [pc, #624]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102c56:	0a1b      	lsrs	r3, r3, #8
 8102c58:	f003 0301 	and.w	r3, r3, #1
 8102c5c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8102c5e:	4b99      	ldr	r3, [pc, #612]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8102c62:	08db      	lsrs	r3, r3, #3
 8102c64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8102c68:	693a      	ldr	r2, [r7, #16]
 8102c6a:	fb02 f303 	mul.w	r3, r2, r3
 8102c6e:	ee07 3a90 	vmov	s15, r3
 8102c72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102c76:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8102c7a:	697b      	ldr	r3, [r7, #20]
 8102c7c:	2b00      	cmp	r3, #0
 8102c7e:	f000 8111 	beq.w	8102ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8102c82:	69bb      	ldr	r3, [r7, #24]
 8102c84:	2b02      	cmp	r3, #2
 8102c86:	f000 8083 	beq.w	8102d90 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8102c8a:	69bb      	ldr	r3, [r7, #24]
 8102c8c:	2b02      	cmp	r3, #2
 8102c8e:	f200 80a1 	bhi.w	8102dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8102c92:	69bb      	ldr	r3, [r7, #24]
 8102c94:	2b00      	cmp	r3, #0
 8102c96:	d003      	beq.n	8102ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8102c98:	69bb      	ldr	r3, [r7, #24]
 8102c9a:	2b01      	cmp	r3, #1
 8102c9c:	d056      	beq.n	8102d4c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8102c9e:	e099      	b.n	8102dd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8102ca0:	4b88      	ldr	r3, [pc, #544]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102ca2:	681b      	ldr	r3, [r3, #0]
 8102ca4:	f003 0320 	and.w	r3, r3, #32
 8102ca8:	2b00      	cmp	r3, #0
 8102caa:	d02d      	beq.n	8102d08 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8102cac:	4b85      	ldr	r3, [pc, #532]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102cae:	681b      	ldr	r3, [r3, #0]
 8102cb0:	08db      	lsrs	r3, r3, #3
 8102cb2:	f003 0303 	and.w	r3, r3, #3
 8102cb6:	4a84      	ldr	r2, [pc, #528]	@ (8102ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8102cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8102cbc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102cbe:	68bb      	ldr	r3, [r7, #8]
 8102cc0:	ee07 3a90 	vmov	s15, r3
 8102cc4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102cc8:	697b      	ldr	r3, [r7, #20]
 8102cca:	ee07 3a90 	vmov	s15, r3
 8102cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102cd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102cd6:	4b7b      	ldr	r3, [pc, #492]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102cda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102cde:	ee07 3a90 	vmov	s15, r3
 8102ce2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102ce6:	ed97 6a03 	vldr	s12, [r7, #12]
 8102cea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8102ecc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102cee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102cf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102cf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102cfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102cfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d02:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8102d06:	e087      	b.n	8102e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102d08:	697b      	ldr	r3, [r7, #20]
 8102d0a:	ee07 3a90 	vmov	s15, r3
 8102d0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d12:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8102ed0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8102d16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d1a:	4b6a      	ldr	r3, [pc, #424]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102d1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d22:	ee07 3a90 	vmov	s15, r3
 8102d26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8102d2e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8102ecc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102d32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102d4a:	e065      	b.n	8102e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102d4c:	697b      	ldr	r3, [r7, #20]
 8102d4e:	ee07 3a90 	vmov	s15, r3
 8102d52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d56:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8102ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102d5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102d5e:	4b59      	ldr	r3, [pc, #356]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102d62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102d66:	ee07 3a90 	vmov	s15, r3
 8102d6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102d6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8102d72:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8102ecc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102d76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102d7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102d7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102d82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102d86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102d8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102d8e:	e043      	b.n	8102e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102d90:	697b      	ldr	r3, [r7, #20]
 8102d92:	ee07 3a90 	vmov	s15, r3
 8102d96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102d9a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8102ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8102d9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102da2:	4b48      	ldr	r3, [pc, #288]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102da4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102da6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102daa:	ee07 3a90 	vmov	s15, r3
 8102dae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102db2:	ed97 6a03 	vldr	s12, [r7, #12]
 8102db6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8102ecc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102dba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102dbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102dc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102dc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102dca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102dce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102dd2:	e021      	b.n	8102e18 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8102dd4:	697b      	ldr	r3, [r7, #20]
 8102dd6:	ee07 3a90 	vmov	s15, r3
 8102dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102dde:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8102ed4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8102de2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8102de6:	4b37      	ldr	r3, [pc, #220]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102de8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102dea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102dee:	ee07 3a90 	vmov	s15, r3
 8102df2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102df6:	ed97 6a03 	vldr	s12, [r7, #12]
 8102dfa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8102ecc <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8102dfe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8102e02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8102e06:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8102e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102e0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102e12:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8102e16:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8102e18:	4b2a      	ldr	r3, [pc, #168]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102e1c:	0a5b      	lsrs	r3, r3, #9
 8102e1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102e22:	ee07 3a90 	vmov	s15, r3
 8102e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102e2e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102e32:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102e3e:	ee17 2a90 	vmov	r2, s15
 8102e42:	687b      	ldr	r3, [r7, #4]
 8102e44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8102e46:	4b1f      	ldr	r3, [pc, #124]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102e4a:	0c1b      	lsrs	r3, r3, #16
 8102e4c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102e50:	ee07 3a90 	vmov	s15, r3
 8102e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e58:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102e5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102e60:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102e6c:	ee17 2a90 	vmov	r2, s15
 8102e70:	687b      	ldr	r3, [r7, #4]
 8102e72:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8102e74:	4b13      	ldr	r3, [pc, #76]	@ (8102ec4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8102e76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8102e78:	0e1b      	lsrs	r3, r3, #24
 8102e7a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8102e7e:	ee07 3a90 	vmov	s15, r3
 8102e82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8102e86:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8102e8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8102e8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8102e92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102e96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102e9a:	ee17 2a90 	vmov	r2, s15
 8102e9e:	687b      	ldr	r3, [r7, #4]
 8102ea0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8102ea2:	e008      	b.n	8102eb6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8102ea4:	687b      	ldr	r3, [r7, #4]
 8102ea6:	2200      	movs	r2, #0
 8102ea8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8102eaa:	687b      	ldr	r3, [r7, #4]
 8102eac:	2200      	movs	r2, #0
 8102eae:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8102eb0:	687b      	ldr	r3, [r7, #4]
 8102eb2:	2200      	movs	r2, #0
 8102eb4:	609a      	str	r2, [r3, #8]
}
 8102eb6:	bf00      	nop
 8102eb8:	3724      	adds	r7, #36	@ 0x24
 8102eba:	46bd      	mov	sp, r7
 8102ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102ec0:	4770      	bx	lr
 8102ec2:	bf00      	nop
 8102ec4:	58024400 	.word	0x58024400
 8102ec8:	03d09000 	.word	0x03d09000
 8102ecc:	46000000 	.word	0x46000000
 8102ed0:	4c742400 	.word	0x4c742400
 8102ed4:	4a742400 	.word	0x4a742400
 8102ed8:	4bbebc20 	.word	0x4bbebc20

08102edc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8102edc:	b580      	push	{r7, lr}
 8102ede:	b084      	sub	sp, #16
 8102ee0:	af00      	add	r7, sp, #0
 8102ee2:	6078      	str	r0, [r7, #4]
 8102ee4:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8102ee6:	2300      	movs	r3, #0
 8102ee8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8102eea:	4b54      	ldr	r3, [pc, #336]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102eee:	f003 0303 	and.w	r3, r3, #3
 8102ef2:	2b03      	cmp	r3, #3
 8102ef4:	d101      	bne.n	8102efa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8102ef6:	2301      	movs	r3, #1
 8102ef8:	e09b      	b.n	8103032 <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8102efa:	4b50      	ldr	r3, [pc, #320]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102efc:	681b      	ldr	r3, [r3, #0]
 8102efe:	4a4f      	ldr	r2, [pc, #316]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102f00:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8102f04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8102f06:	f7fd fdfb 	bl	8100b00 <HAL_GetTick>
 8102f0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102f0c:	e008      	b.n	8102f20 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8102f0e:	f7fd fdf7 	bl	8100b00 <HAL_GetTick>
 8102f12:	4602      	mov	r2, r0
 8102f14:	68bb      	ldr	r3, [r7, #8]
 8102f16:	1ad3      	subs	r3, r2, r3
 8102f18:	2b02      	cmp	r3, #2
 8102f1a:	d901      	bls.n	8102f20 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8102f1c:	2303      	movs	r3, #3
 8102f1e:	e088      	b.n	8103032 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8102f20:	4b46      	ldr	r3, [pc, #280]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102f22:	681b      	ldr	r3, [r3, #0]
 8102f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8102f28:	2b00      	cmp	r3, #0
 8102f2a:	d1f0      	bne.n	8102f0e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8102f2c:	4b43      	ldr	r3, [pc, #268]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102f2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8102f30:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8102f34:	687b      	ldr	r3, [r7, #4]
 8102f36:	681b      	ldr	r3, [r3, #0]
 8102f38:	031b      	lsls	r3, r3, #12
 8102f3a:	4940      	ldr	r1, [pc, #256]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102f3c:	4313      	orrs	r3, r2
 8102f3e:	628b      	str	r3, [r1, #40]	@ 0x28
 8102f40:	687b      	ldr	r3, [r7, #4]
 8102f42:	685b      	ldr	r3, [r3, #4]
 8102f44:	3b01      	subs	r3, #1
 8102f46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8102f4a:	687b      	ldr	r3, [r7, #4]
 8102f4c:	689b      	ldr	r3, [r3, #8]
 8102f4e:	3b01      	subs	r3, #1
 8102f50:	025b      	lsls	r3, r3, #9
 8102f52:	b29b      	uxth	r3, r3
 8102f54:	431a      	orrs	r2, r3
 8102f56:	687b      	ldr	r3, [r7, #4]
 8102f58:	68db      	ldr	r3, [r3, #12]
 8102f5a:	3b01      	subs	r3, #1
 8102f5c:	041b      	lsls	r3, r3, #16
 8102f5e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8102f62:	431a      	orrs	r2, r3
 8102f64:	687b      	ldr	r3, [r7, #4]
 8102f66:	691b      	ldr	r3, [r3, #16]
 8102f68:	3b01      	subs	r3, #1
 8102f6a:	061b      	lsls	r3, r3, #24
 8102f6c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8102f70:	4932      	ldr	r1, [pc, #200]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102f72:	4313      	orrs	r3, r2
 8102f74:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8102f76:	4b31      	ldr	r3, [pc, #196]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102f78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f7a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8102f7e:	687b      	ldr	r3, [r7, #4]
 8102f80:	695b      	ldr	r3, [r3, #20]
 8102f82:	492e      	ldr	r1, [pc, #184]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102f84:	4313      	orrs	r3, r2
 8102f86:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8102f88:	4b2c      	ldr	r3, [pc, #176]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f8c:	f023 0220 	bic.w	r2, r3, #32
 8102f90:	687b      	ldr	r3, [r7, #4]
 8102f92:	699b      	ldr	r3, [r3, #24]
 8102f94:	4929      	ldr	r1, [pc, #164]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102f96:	4313      	orrs	r3, r2
 8102f98:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8102f9a:	4b28      	ldr	r3, [pc, #160]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102f9e:	4a27      	ldr	r2, [pc, #156]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102fa0:	f023 0310 	bic.w	r3, r3, #16
 8102fa4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8102fa6:	4b25      	ldr	r3, [pc, #148]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102fa8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8102faa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8102fae:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8102fb2:	687a      	ldr	r2, [r7, #4]
 8102fb4:	69d2      	ldr	r2, [r2, #28]
 8102fb6:	00d2      	lsls	r2, r2, #3
 8102fb8:	4920      	ldr	r1, [pc, #128]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102fba:	4313      	orrs	r3, r2
 8102fbc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8102fbe:	4b1f      	ldr	r3, [pc, #124]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102fc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fc2:	4a1e      	ldr	r2, [pc, #120]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102fc4:	f043 0310 	orr.w	r3, r3, #16
 8102fc8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8102fca:	683b      	ldr	r3, [r7, #0]
 8102fcc:	2b00      	cmp	r3, #0
 8102fce:	d106      	bne.n	8102fde <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8102fd0:	4b1a      	ldr	r3, [pc, #104]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102fd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fd4:	4a19      	ldr	r2, [pc, #100]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102fd6:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8102fda:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8102fdc:	e00f      	b.n	8102ffe <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8102fde:	683b      	ldr	r3, [r7, #0]
 8102fe0:	2b01      	cmp	r3, #1
 8102fe2:	d106      	bne.n	8102ff2 <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8102fe4:	4b15      	ldr	r3, [pc, #84]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102fe8:	4a14      	ldr	r2, [pc, #80]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102fea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8102fee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8102ff0:	e005      	b.n	8102ffe <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8102ff2:	4b12      	ldr	r3, [pc, #72]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8102ff6:	4a11      	ldr	r2, [pc, #68]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8102ff8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8102ffc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8102ffe:	4b0f      	ldr	r3, [pc, #60]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8103000:	681b      	ldr	r3, [r3, #0]
 8103002:	4a0e      	ldr	r2, [pc, #56]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8103004:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8103008:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810300a:	f7fd fd79 	bl	8100b00 <HAL_GetTick>
 810300e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103010:	e008      	b.n	8103024 <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103012:	f7fd fd75 	bl	8100b00 <HAL_GetTick>
 8103016:	4602      	mov	r2, r0
 8103018:	68bb      	ldr	r3, [r7, #8]
 810301a:	1ad3      	subs	r3, r2, r3
 810301c:	2b02      	cmp	r3, #2
 810301e:	d901      	bls.n	8103024 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103020:	2303      	movs	r3, #3
 8103022:	e006      	b.n	8103032 <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103024:	4b05      	ldr	r3, [pc, #20]	@ (810303c <RCCEx_PLL2_Config+0x160>)
 8103026:	681b      	ldr	r3, [r3, #0]
 8103028:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 810302c:	2b00      	cmp	r3, #0
 810302e:	d0f0      	beq.n	8103012 <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103030:	7bfb      	ldrb	r3, [r7, #15]
}
 8103032:	4618      	mov	r0, r3
 8103034:	3710      	adds	r7, #16
 8103036:	46bd      	mov	sp, r7
 8103038:	bd80      	pop	{r7, pc}
 810303a:	bf00      	nop
 810303c:	58024400 	.word	0x58024400

08103040 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103040:	b580      	push	{r7, lr}
 8103042:	b084      	sub	sp, #16
 8103044:	af00      	add	r7, sp, #0
 8103046:	6078      	str	r0, [r7, #4]
 8103048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 810304a:	2300      	movs	r3, #0
 810304c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 810304e:	4b54      	ldr	r3, [pc, #336]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103050:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103052:	f003 0303 	and.w	r3, r3, #3
 8103056:	2b03      	cmp	r3, #3
 8103058:	d101      	bne.n	810305e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 810305a:	2301      	movs	r3, #1
 810305c:	e09b      	b.n	8103196 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 810305e:	4b50      	ldr	r3, [pc, #320]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103060:	681b      	ldr	r3, [r3, #0]
 8103062:	4a4f      	ldr	r2, [pc, #316]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103064:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8103068:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810306a:	f7fd fd49 	bl	8100b00 <HAL_GetTick>
 810306e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103070:	e008      	b.n	8103084 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103072:	f7fd fd45 	bl	8100b00 <HAL_GetTick>
 8103076:	4602      	mov	r2, r0
 8103078:	68bb      	ldr	r3, [r7, #8]
 810307a:	1ad3      	subs	r3, r2, r3
 810307c:	2b02      	cmp	r3, #2
 810307e:	d901      	bls.n	8103084 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103080:	2303      	movs	r3, #3
 8103082:	e088      	b.n	8103196 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103084:	4b46      	ldr	r3, [pc, #280]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103086:	681b      	ldr	r3, [r3, #0]
 8103088:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 810308c:	2b00      	cmp	r3, #0
 810308e:	d1f0      	bne.n	8103072 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103090:	4b43      	ldr	r3, [pc, #268]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103092:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103094:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8103098:	687b      	ldr	r3, [r7, #4]
 810309a:	681b      	ldr	r3, [r3, #0]
 810309c:	051b      	lsls	r3, r3, #20
 810309e:	4940      	ldr	r1, [pc, #256]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 81030a0:	4313      	orrs	r3, r2
 81030a2:	628b      	str	r3, [r1, #40]	@ 0x28
 81030a4:	687b      	ldr	r3, [r7, #4]
 81030a6:	685b      	ldr	r3, [r3, #4]
 81030a8:	3b01      	subs	r3, #1
 81030aa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 81030ae:	687b      	ldr	r3, [r7, #4]
 81030b0:	689b      	ldr	r3, [r3, #8]
 81030b2:	3b01      	subs	r3, #1
 81030b4:	025b      	lsls	r3, r3, #9
 81030b6:	b29b      	uxth	r3, r3
 81030b8:	431a      	orrs	r2, r3
 81030ba:	687b      	ldr	r3, [r7, #4]
 81030bc:	68db      	ldr	r3, [r3, #12]
 81030be:	3b01      	subs	r3, #1
 81030c0:	041b      	lsls	r3, r3, #16
 81030c2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 81030c6:	431a      	orrs	r2, r3
 81030c8:	687b      	ldr	r3, [r7, #4]
 81030ca:	691b      	ldr	r3, [r3, #16]
 81030cc:	3b01      	subs	r3, #1
 81030ce:	061b      	lsls	r3, r3, #24
 81030d0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 81030d4:	4932      	ldr	r1, [pc, #200]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 81030d6:	4313      	orrs	r3, r2
 81030d8:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 81030da:	4b31      	ldr	r3, [pc, #196]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 81030dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81030de:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 81030e2:	687b      	ldr	r3, [r7, #4]
 81030e4:	695b      	ldr	r3, [r3, #20]
 81030e6:	492e      	ldr	r1, [pc, #184]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 81030e8:	4313      	orrs	r3, r2
 81030ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 81030ec:	4b2c      	ldr	r3, [pc, #176]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 81030ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81030f0:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 81030f4:	687b      	ldr	r3, [r7, #4]
 81030f6:	699b      	ldr	r3, [r3, #24]
 81030f8:	4929      	ldr	r1, [pc, #164]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 81030fa:	4313      	orrs	r3, r2
 81030fc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 81030fe:	4b28      	ldr	r3, [pc, #160]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103100:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103102:	4a27      	ldr	r2, [pc, #156]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103104:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8103108:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 810310a:	4b25      	ldr	r3, [pc, #148]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 810310c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 810310e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8103112:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8103116:	687a      	ldr	r2, [r7, #4]
 8103118:	69d2      	ldr	r2, [r2, #28]
 810311a:	00d2      	lsls	r2, r2, #3
 810311c:	4920      	ldr	r1, [pc, #128]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 810311e:	4313      	orrs	r3, r2
 8103120:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103122:	4b1f      	ldr	r3, [pc, #124]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103124:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103126:	4a1e      	ldr	r2, [pc, #120]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103128:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 810312c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 810312e:	683b      	ldr	r3, [r7, #0]
 8103130:	2b00      	cmp	r3, #0
 8103132:	d106      	bne.n	8103142 <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103134:	4b1a      	ldr	r3, [pc, #104]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103136:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8103138:	4a19      	ldr	r2, [pc, #100]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 810313a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 810313e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103140:	e00f      	b.n	8103162 <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103142:	683b      	ldr	r3, [r7, #0]
 8103144:	2b01      	cmp	r3, #1
 8103146:	d106      	bne.n	8103156 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103148:	4b15      	ldr	r3, [pc, #84]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 810314a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810314c:	4a14      	ldr	r2, [pc, #80]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 810314e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8103152:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8103154:	e005      	b.n	8103162 <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103156:	4b12      	ldr	r3, [pc, #72]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103158:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 810315a:	4a11      	ldr	r2, [pc, #68]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 810315c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8103160:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103162:	4b0f      	ldr	r3, [pc, #60]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103164:	681b      	ldr	r3, [r3, #0]
 8103166:	4a0e      	ldr	r2, [pc, #56]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 8103168:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 810316c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 810316e:	f7fd fcc7 	bl	8100b00 <HAL_GetTick>
 8103172:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103174:	e008      	b.n	8103188 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103176:	f7fd fcc3 	bl	8100b00 <HAL_GetTick>
 810317a:	4602      	mov	r2, r0
 810317c:	68bb      	ldr	r3, [r7, #8]
 810317e:	1ad3      	subs	r3, r2, r3
 8103180:	2b02      	cmp	r3, #2
 8103182:	d901      	bls.n	8103188 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103184:	2303      	movs	r3, #3
 8103186:	e006      	b.n	8103196 <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103188:	4b05      	ldr	r3, [pc, #20]	@ (81031a0 <RCCEx_PLL3_Config+0x160>)
 810318a:	681b      	ldr	r3, [r3, #0]
 810318c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8103190:	2b00      	cmp	r3, #0
 8103192:	d0f0      	beq.n	8103176 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103194:	7bfb      	ldrb	r3, [r7, #15]
}
 8103196:	4618      	mov	r0, r3
 8103198:	3710      	adds	r7, #16
 810319a:	46bd      	mov	sp, r7
 810319c:	bd80      	pop	{r7, pc}
 810319e:	bf00      	nop
 81031a0:	58024400 	.word	0x58024400

081031a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 81031a4:	b580      	push	{r7, lr}
 81031a6:	b082      	sub	sp, #8
 81031a8:	af00      	add	r7, sp, #0
 81031aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 81031ac:	687b      	ldr	r3, [r7, #4]
 81031ae:	2b00      	cmp	r3, #0
 81031b0:	d101      	bne.n	81031b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 81031b2:	2301      	movs	r3, #1
 81031b4:	e042      	b.n	810323c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 81031b6:	687b      	ldr	r3, [r7, #4]
 81031b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 81031bc:	2b00      	cmp	r3, #0
 81031be:	d106      	bne.n	81031ce <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 81031c0:	687b      	ldr	r3, [r7, #4]
 81031c2:	2200      	movs	r2, #0
 81031c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 81031c8:	6878      	ldr	r0, [r7, #4]
 81031ca:	f7fd fb05 	bl	81007d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	2224      	movs	r2, #36	@ 0x24
 81031d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 81031d6:	687b      	ldr	r3, [r7, #4]
 81031d8:	681b      	ldr	r3, [r3, #0]
 81031da:	681a      	ldr	r2, [r3, #0]
 81031dc:	687b      	ldr	r3, [r7, #4]
 81031de:	681b      	ldr	r3, [r3, #0]
 81031e0:	f022 0201 	bic.w	r2, r2, #1
 81031e4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 81031e6:	687b      	ldr	r3, [r7, #4]
 81031e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 81031ea:	2b00      	cmp	r3, #0
 81031ec:	d002      	beq.n	81031f4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 81031ee:	6878      	ldr	r0, [r7, #4]
 81031f0:	f000 fd90 	bl	8103d14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 81031f4:	6878      	ldr	r0, [r7, #4]
 81031f6:	f000 f825 	bl	8103244 <UART_SetConfig>
 81031fa:	4603      	mov	r3, r0
 81031fc:	2b01      	cmp	r3, #1
 81031fe:	d101      	bne.n	8103204 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8103200:	2301      	movs	r3, #1
 8103202:	e01b      	b.n	810323c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8103204:	687b      	ldr	r3, [r7, #4]
 8103206:	681b      	ldr	r3, [r3, #0]
 8103208:	685a      	ldr	r2, [r3, #4]
 810320a:	687b      	ldr	r3, [r7, #4]
 810320c:	681b      	ldr	r3, [r3, #0]
 810320e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8103212:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8103214:	687b      	ldr	r3, [r7, #4]
 8103216:	681b      	ldr	r3, [r3, #0]
 8103218:	689a      	ldr	r2, [r3, #8]
 810321a:	687b      	ldr	r3, [r7, #4]
 810321c:	681b      	ldr	r3, [r3, #0]
 810321e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8103222:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8103224:	687b      	ldr	r3, [r7, #4]
 8103226:	681b      	ldr	r3, [r3, #0]
 8103228:	681a      	ldr	r2, [r3, #0]
 810322a:	687b      	ldr	r3, [r7, #4]
 810322c:	681b      	ldr	r3, [r3, #0]
 810322e:	f042 0201 	orr.w	r2, r2, #1
 8103232:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8103234:	6878      	ldr	r0, [r7, #4]
 8103236:	f000 fe0f 	bl	8103e58 <UART_CheckIdleState>
 810323a:	4603      	mov	r3, r0
}
 810323c:	4618      	mov	r0, r3
 810323e:	3708      	adds	r7, #8
 8103240:	46bd      	mov	sp, r7
 8103242:	bd80      	pop	{r7, pc}

08103244 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8103244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8103248:	b092      	sub	sp, #72	@ 0x48
 810324a:	af00      	add	r7, sp, #0
 810324c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 810324e:	2300      	movs	r3, #0
 8103250:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8103254:	697b      	ldr	r3, [r7, #20]
 8103256:	689a      	ldr	r2, [r3, #8]
 8103258:	697b      	ldr	r3, [r7, #20]
 810325a:	691b      	ldr	r3, [r3, #16]
 810325c:	431a      	orrs	r2, r3
 810325e:	697b      	ldr	r3, [r7, #20]
 8103260:	695b      	ldr	r3, [r3, #20]
 8103262:	431a      	orrs	r2, r3
 8103264:	697b      	ldr	r3, [r7, #20]
 8103266:	69db      	ldr	r3, [r3, #28]
 8103268:	4313      	orrs	r3, r2
 810326a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 810326c:	697b      	ldr	r3, [r7, #20]
 810326e:	681b      	ldr	r3, [r3, #0]
 8103270:	681a      	ldr	r2, [r3, #0]
 8103272:	4bbd      	ldr	r3, [pc, #756]	@ (8103568 <UART_SetConfig+0x324>)
 8103274:	4013      	ands	r3, r2
 8103276:	697a      	ldr	r2, [r7, #20]
 8103278:	6812      	ldr	r2, [r2, #0]
 810327a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 810327c:	430b      	orrs	r3, r1
 810327e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8103280:	697b      	ldr	r3, [r7, #20]
 8103282:	681b      	ldr	r3, [r3, #0]
 8103284:	685b      	ldr	r3, [r3, #4]
 8103286:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 810328a:	697b      	ldr	r3, [r7, #20]
 810328c:	68da      	ldr	r2, [r3, #12]
 810328e:	697b      	ldr	r3, [r7, #20]
 8103290:	681b      	ldr	r3, [r3, #0]
 8103292:	430a      	orrs	r2, r1
 8103294:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8103296:	697b      	ldr	r3, [r7, #20]
 8103298:	699b      	ldr	r3, [r3, #24]
 810329a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 810329c:	697b      	ldr	r3, [r7, #20]
 810329e:	681b      	ldr	r3, [r3, #0]
 81032a0:	4ab2      	ldr	r2, [pc, #712]	@ (810356c <UART_SetConfig+0x328>)
 81032a2:	4293      	cmp	r3, r2
 81032a4:	d004      	beq.n	81032b0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 81032a6:	697b      	ldr	r3, [r7, #20]
 81032a8:	6a1b      	ldr	r3, [r3, #32]
 81032aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 81032ac:	4313      	orrs	r3, r2
 81032ae:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 81032b0:	697b      	ldr	r3, [r7, #20]
 81032b2:	681b      	ldr	r3, [r3, #0]
 81032b4:	689b      	ldr	r3, [r3, #8]
 81032b6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 81032ba:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 81032be:	697a      	ldr	r2, [r7, #20]
 81032c0:	6812      	ldr	r2, [r2, #0]
 81032c2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 81032c4:	430b      	orrs	r3, r1
 81032c6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 81032c8:	697b      	ldr	r3, [r7, #20]
 81032ca:	681b      	ldr	r3, [r3, #0]
 81032cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 81032ce:	f023 010f 	bic.w	r1, r3, #15
 81032d2:	697b      	ldr	r3, [r7, #20]
 81032d4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 81032d6:	697b      	ldr	r3, [r7, #20]
 81032d8:	681b      	ldr	r3, [r3, #0]
 81032da:	430a      	orrs	r2, r1
 81032dc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 81032de:	697b      	ldr	r3, [r7, #20]
 81032e0:	681b      	ldr	r3, [r3, #0]
 81032e2:	4aa3      	ldr	r2, [pc, #652]	@ (8103570 <UART_SetConfig+0x32c>)
 81032e4:	4293      	cmp	r3, r2
 81032e6:	d177      	bne.n	81033d8 <UART_SetConfig+0x194>
 81032e8:	4ba2      	ldr	r3, [pc, #648]	@ (8103574 <UART_SetConfig+0x330>)
 81032ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81032ec:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81032f0:	2b28      	cmp	r3, #40	@ 0x28
 81032f2:	d86d      	bhi.n	81033d0 <UART_SetConfig+0x18c>
 81032f4:	a201      	add	r2, pc, #4	@ (adr r2, 81032fc <UART_SetConfig+0xb8>)
 81032f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81032fa:	bf00      	nop
 81032fc:	081033a1 	.word	0x081033a1
 8103300:	081033d1 	.word	0x081033d1
 8103304:	081033d1 	.word	0x081033d1
 8103308:	081033d1 	.word	0x081033d1
 810330c:	081033d1 	.word	0x081033d1
 8103310:	081033d1 	.word	0x081033d1
 8103314:	081033d1 	.word	0x081033d1
 8103318:	081033d1 	.word	0x081033d1
 810331c:	081033a9 	.word	0x081033a9
 8103320:	081033d1 	.word	0x081033d1
 8103324:	081033d1 	.word	0x081033d1
 8103328:	081033d1 	.word	0x081033d1
 810332c:	081033d1 	.word	0x081033d1
 8103330:	081033d1 	.word	0x081033d1
 8103334:	081033d1 	.word	0x081033d1
 8103338:	081033d1 	.word	0x081033d1
 810333c:	081033b1 	.word	0x081033b1
 8103340:	081033d1 	.word	0x081033d1
 8103344:	081033d1 	.word	0x081033d1
 8103348:	081033d1 	.word	0x081033d1
 810334c:	081033d1 	.word	0x081033d1
 8103350:	081033d1 	.word	0x081033d1
 8103354:	081033d1 	.word	0x081033d1
 8103358:	081033d1 	.word	0x081033d1
 810335c:	081033b9 	.word	0x081033b9
 8103360:	081033d1 	.word	0x081033d1
 8103364:	081033d1 	.word	0x081033d1
 8103368:	081033d1 	.word	0x081033d1
 810336c:	081033d1 	.word	0x081033d1
 8103370:	081033d1 	.word	0x081033d1
 8103374:	081033d1 	.word	0x081033d1
 8103378:	081033d1 	.word	0x081033d1
 810337c:	081033c1 	.word	0x081033c1
 8103380:	081033d1 	.word	0x081033d1
 8103384:	081033d1 	.word	0x081033d1
 8103388:	081033d1 	.word	0x081033d1
 810338c:	081033d1 	.word	0x081033d1
 8103390:	081033d1 	.word	0x081033d1
 8103394:	081033d1 	.word	0x081033d1
 8103398:	081033d1 	.word	0x081033d1
 810339c:	081033c9 	.word	0x081033c9
 81033a0:	2301      	movs	r3, #1
 81033a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81033a6:	e220      	b.n	81037ea <UART_SetConfig+0x5a6>
 81033a8:	2304      	movs	r3, #4
 81033aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81033ae:	e21c      	b.n	81037ea <UART_SetConfig+0x5a6>
 81033b0:	2308      	movs	r3, #8
 81033b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81033b6:	e218      	b.n	81037ea <UART_SetConfig+0x5a6>
 81033b8:	2310      	movs	r3, #16
 81033ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81033be:	e214      	b.n	81037ea <UART_SetConfig+0x5a6>
 81033c0:	2320      	movs	r3, #32
 81033c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81033c6:	e210      	b.n	81037ea <UART_SetConfig+0x5a6>
 81033c8:	2340      	movs	r3, #64	@ 0x40
 81033ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81033ce:	e20c      	b.n	81037ea <UART_SetConfig+0x5a6>
 81033d0:	2380      	movs	r3, #128	@ 0x80
 81033d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81033d6:	e208      	b.n	81037ea <UART_SetConfig+0x5a6>
 81033d8:	697b      	ldr	r3, [r7, #20]
 81033da:	681b      	ldr	r3, [r3, #0]
 81033dc:	4a66      	ldr	r2, [pc, #408]	@ (8103578 <UART_SetConfig+0x334>)
 81033de:	4293      	cmp	r3, r2
 81033e0:	d130      	bne.n	8103444 <UART_SetConfig+0x200>
 81033e2:	4b64      	ldr	r3, [pc, #400]	@ (8103574 <UART_SetConfig+0x330>)
 81033e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81033e6:	f003 0307 	and.w	r3, r3, #7
 81033ea:	2b05      	cmp	r3, #5
 81033ec:	d826      	bhi.n	810343c <UART_SetConfig+0x1f8>
 81033ee:	a201      	add	r2, pc, #4	@ (adr r2, 81033f4 <UART_SetConfig+0x1b0>)
 81033f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81033f4:	0810340d 	.word	0x0810340d
 81033f8:	08103415 	.word	0x08103415
 81033fc:	0810341d 	.word	0x0810341d
 8103400:	08103425 	.word	0x08103425
 8103404:	0810342d 	.word	0x0810342d
 8103408:	08103435 	.word	0x08103435
 810340c:	2300      	movs	r3, #0
 810340e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103412:	e1ea      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103414:	2304      	movs	r3, #4
 8103416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810341a:	e1e6      	b.n	81037ea <UART_SetConfig+0x5a6>
 810341c:	2308      	movs	r3, #8
 810341e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103422:	e1e2      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103424:	2310      	movs	r3, #16
 8103426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810342a:	e1de      	b.n	81037ea <UART_SetConfig+0x5a6>
 810342c:	2320      	movs	r3, #32
 810342e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103432:	e1da      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103434:	2340      	movs	r3, #64	@ 0x40
 8103436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810343a:	e1d6      	b.n	81037ea <UART_SetConfig+0x5a6>
 810343c:	2380      	movs	r3, #128	@ 0x80
 810343e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103442:	e1d2      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103444:	697b      	ldr	r3, [r7, #20]
 8103446:	681b      	ldr	r3, [r3, #0]
 8103448:	4a4c      	ldr	r2, [pc, #304]	@ (810357c <UART_SetConfig+0x338>)
 810344a:	4293      	cmp	r3, r2
 810344c:	d130      	bne.n	81034b0 <UART_SetConfig+0x26c>
 810344e:	4b49      	ldr	r3, [pc, #292]	@ (8103574 <UART_SetConfig+0x330>)
 8103450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8103452:	f003 0307 	and.w	r3, r3, #7
 8103456:	2b05      	cmp	r3, #5
 8103458:	d826      	bhi.n	81034a8 <UART_SetConfig+0x264>
 810345a:	a201      	add	r2, pc, #4	@ (adr r2, 8103460 <UART_SetConfig+0x21c>)
 810345c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103460:	08103479 	.word	0x08103479
 8103464:	08103481 	.word	0x08103481
 8103468:	08103489 	.word	0x08103489
 810346c:	08103491 	.word	0x08103491
 8103470:	08103499 	.word	0x08103499
 8103474:	081034a1 	.word	0x081034a1
 8103478:	2300      	movs	r3, #0
 810347a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810347e:	e1b4      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103480:	2304      	movs	r3, #4
 8103482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103486:	e1b0      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103488:	2308      	movs	r3, #8
 810348a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810348e:	e1ac      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103490:	2310      	movs	r3, #16
 8103492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103496:	e1a8      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103498:	2320      	movs	r3, #32
 810349a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810349e:	e1a4      	b.n	81037ea <UART_SetConfig+0x5a6>
 81034a0:	2340      	movs	r3, #64	@ 0x40
 81034a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81034a6:	e1a0      	b.n	81037ea <UART_SetConfig+0x5a6>
 81034a8:	2380      	movs	r3, #128	@ 0x80
 81034aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81034ae:	e19c      	b.n	81037ea <UART_SetConfig+0x5a6>
 81034b0:	697b      	ldr	r3, [r7, #20]
 81034b2:	681b      	ldr	r3, [r3, #0]
 81034b4:	4a32      	ldr	r2, [pc, #200]	@ (8103580 <UART_SetConfig+0x33c>)
 81034b6:	4293      	cmp	r3, r2
 81034b8:	d130      	bne.n	810351c <UART_SetConfig+0x2d8>
 81034ba:	4b2e      	ldr	r3, [pc, #184]	@ (8103574 <UART_SetConfig+0x330>)
 81034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81034be:	f003 0307 	and.w	r3, r3, #7
 81034c2:	2b05      	cmp	r3, #5
 81034c4:	d826      	bhi.n	8103514 <UART_SetConfig+0x2d0>
 81034c6:	a201      	add	r2, pc, #4	@ (adr r2, 81034cc <UART_SetConfig+0x288>)
 81034c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81034cc:	081034e5 	.word	0x081034e5
 81034d0:	081034ed 	.word	0x081034ed
 81034d4:	081034f5 	.word	0x081034f5
 81034d8:	081034fd 	.word	0x081034fd
 81034dc:	08103505 	.word	0x08103505
 81034e0:	0810350d 	.word	0x0810350d
 81034e4:	2300      	movs	r3, #0
 81034e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81034ea:	e17e      	b.n	81037ea <UART_SetConfig+0x5a6>
 81034ec:	2304      	movs	r3, #4
 81034ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81034f2:	e17a      	b.n	81037ea <UART_SetConfig+0x5a6>
 81034f4:	2308      	movs	r3, #8
 81034f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81034fa:	e176      	b.n	81037ea <UART_SetConfig+0x5a6>
 81034fc:	2310      	movs	r3, #16
 81034fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103502:	e172      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103504:	2320      	movs	r3, #32
 8103506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810350a:	e16e      	b.n	81037ea <UART_SetConfig+0x5a6>
 810350c:	2340      	movs	r3, #64	@ 0x40
 810350e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103512:	e16a      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103514:	2380      	movs	r3, #128	@ 0x80
 8103516:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810351a:	e166      	b.n	81037ea <UART_SetConfig+0x5a6>
 810351c:	697b      	ldr	r3, [r7, #20]
 810351e:	681b      	ldr	r3, [r3, #0]
 8103520:	4a18      	ldr	r2, [pc, #96]	@ (8103584 <UART_SetConfig+0x340>)
 8103522:	4293      	cmp	r3, r2
 8103524:	d140      	bne.n	81035a8 <UART_SetConfig+0x364>
 8103526:	4b13      	ldr	r3, [pc, #76]	@ (8103574 <UART_SetConfig+0x330>)
 8103528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810352a:	f003 0307 	and.w	r3, r3, #7
 810352e:	2b05      	cmp	r3, #5
 8103530:	d836      	bhi.n	81035a0 <UART_SetConfig+0x35c>
 8103532:	a201      	add	r2, pc, #4	@ (adr r2, 8103538 <UART_SetConfig+0x2f4>)
 8103534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103538:	08103551 	.word	0x08103551
 810353c:	08103559 	.word	0x08103559
 8103540:	08103561 	.word	0x08103561
 8103544:	08103589 	.word	0x08103589
 8103548:	08103591 	.word	0x08103591
 810354c:	08103599 	.word	0x08103599
 8103550:	2300      	movs	r3, #0
 8103552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103556:	e148      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103558:	2304      	movs	r3, #4
 810355a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810355e:	e144      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103560:	2308      	movs	r3, #8
 8103562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103566:	e140      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103568:	cfff69f3 	.word	0xcfff69f3
 810356c:	58000c00 	.word	0x58000c00
 8103570:	40011000 	.word	0x40011000
 8103574:	58024400 	.word	0x58024400
 8103578:	40004400 	.word	0x40004400
 810357c:	40004800 	.word	0x40004800
 8103580:	40004c00 	.word	0x40004c00
 8103584:	40005000 	.word	0x40005000
 8103588:	2310      	movs	r3, #16
 810358a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810358e:	e12c      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103590:	2320      	movs	r3, #32
 8103592:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103596:	e128      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103598:	2340      	movs	r3, #64	@ 0x40
 810359a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810359e:	e124      	b.n	81037ea <UART_SetConfig+0x5a6>
 81035a0:	2380      	movs	r3, #128	@ 0x80
 81035a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81035a6:	e120      	b.n	81037ea <UART_SetConfig+0x5a6>
 81035a8:	697b      	ldr	r3, [r7, #20]
 81035aa:	681b      	ldr	r3, [r3, #0]
 81035ac:	4acb      	ldr	r2, [pc, #812]	@ (81038dc <UART_SetConfig+0x698>)
 81035ae:	4293      	cmp	r3, r2
 81035b0:	d176      	bne.n	81036a0 <UART_SetConfig+0x45c>
 81035b2:	4bcb      	ldr	r3, [pc, #812]	@ (81038e0 <UART_SetConfig+0x69c>)
 81035b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81035b6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 81035ba:	2b28      	cmp	r3, #40	@ 0x28
 81035bc:	d86c      	bhi.n	8103698 <UART_SetConfig+0x454>
 81035be:	a201      	add	r2, pc, #4	@ (adr r2, 81035c4 <UART_SetConfig+0x380>)
 81035c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81035c4:	08103669 	.word	0x08103669
 81035c8:	08103699 	.word	0x08103699
 81035cc:	08103699 	.word	0x08103699
 81035d0:	08103699 	.word	0x08103699
 81035d4:	08103699 	.word	0x08103699
 81035d8:	08103699 	.word	0x08103699
 81035dc:	08103699 	.word	0x08103699
 81035e0:	08103699 	.word	0x08103699
 81035e4:	08103671 	.word	0x08103671
 81035e8:	08103699 	.word	0x08103699
 81035ec:	08103699 	.word	0x08103699
 81035f0:	08103699 	.word	0x08103699
 81035f4:	08103699 	.word	0x08103699
 81035f8:	08103699 	.word	0x08103699
 81035fc:	08103699 	.word	0x08103699
 8103600:	08103699 	.word	0x08103699
 8103604:	08103679 	.word	0x08103679
 8103608:	08103699 	.word	0x08103699
 810360c:	08103699 	.word	0x08103699
 8103610:	08103699 	.word	0x08103699
 8103614:	08103699 	.word	0x08103699
 8103618:	08103699 	.word	0x08103699
 810361c:	08103699 	.word	0x08103699
 8103620:	08103699 	.word	0x08103699
 8103624:	08103681 	.word	0x08103681
 8103628:	08103699 	.word	0x08103699
 810362c:	08103699 	.word	0x08103699
 8103630:	08103699 	.word	0x08103699
 8103634:	08103699 	.word	0x08103699
 8103638:	08103699 	.word	0x08103699
 810363c:	08103699 	.word	0x08103699
 8103640:	08103699 	.word	0x08103699
 8103644:	08103689 	.word	0x08103689
 8103648:	08103699 	.word	0x08103699
 810364c:	08103699 	.word	0x08103699
 8103650:	08103699 	.word	0x08103699
 8103654:	08103699 	.word	0x08103699
 8103658:	08103699 	.word	0x08103699
 810365c:	08103699 	.word	0x08103699
 8103660:	08103699 	.word	0x08103699
 8103664:	08103691 	.word	0x08103691
 8103668:	2301      	movs	r3, #1
 810366a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810366e:	e0bc      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103670:	2304      	movs	r3, #4
 8103672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103676:	e0b8      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103678:	2308      	movs	r3, #8
 810367a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810367e:	e0b4      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103680:	2310      	movs	r3, #16
 8103682:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103686:	e0b0      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103688:	2320      	movs	r3, #32
 810368a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810368e:	e0ac      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103690:	2340      	movs	r3, #64	@ 0x40
 8103692:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103696:	e0a8      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103698:	2380      	movs	r3, #128	@ 0x80
 810369a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810369e:	e0a4      	b.n	81037ea <UART_SetConfig+0x5a6>
 81036a0:	697b      	ldr	r3, [r7, #20]
 81036a2:	681b      	ldr	r3, [r3, #0]
 81036a4:	4a8f      	ldr	r2, [pc, #572]	@ (81038e4 <UART_SetConfig+0x6a0>)
 81036a6:	4293      	cmp	r3, r2
 81036a8:	d130      	bne.n	810370c <UART_SetConfig+0x4c8>
 81036aa:	4b8d      	ldr	r3, [pc, #564]	@ (81038e0 <UART_SetConfig+0x69c>)
 81036ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 81036ae:	f003 0307 	and.w	r3, r3, #7
 81036b2:	2b05      	cmp	r3, #5
 81036b4:	d826      	bhi.n	8103704 <UART_SetConfig+0x4c0>
 81036b6:	a201      	add	r2, pc, #4	@ (adr r2, 81036bc <UART_SetConfig+0x478>)
 81036b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81036bc:	081036d5 	.word	0x081036d5
 81036c0:	081036dd 	.word	0x081036dd
 81036c4:	081036e5 	.word	0x081036e5
 81036c8:	081036ed 	.word	0x081036ed
 81036cc:	081036f5 	.word	0x081036f5
 81036d0:	081036fd 	.word	0x081036fd
 81036d4:	2300      	movs	r3, #0
 81036d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036da:	e086      	b.n	81037ea <UART_SetConfig+0x5a6>
 81036dc:	2304      	movs	r3, #4
 81036de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036e2:	e082      	b.n	81037ea <UART_SetConfig+0x5a6>
 81036e4:	2308      	movs	r3, #8
 81036e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036ea:	e07e      	b.n	81037ea <UART_SetConfig+0x5a6>
 81036ec:	2310      	movs	r3, #16
 81036ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036f2:	e07a      	b.n	81037ea <UART_SetConfig+0x5a6>
 81036f4:	2320      	movs	r3, #32
 81036f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81036fa:	e076      	b.n	81037ea <UART_SetConfig+0x5a6>
 81036fc:	2340      	movs	r3, #64	@ 0x40
 81036fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103702:	e072      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103704:	2380      	movs	r3, #128	@ 0x80
 8103706:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810370a:	e06e      	b.n	81037ea <UART_SetConfig+0x5a6>
 810370c:	697b      	ldr	r3, [r7, #20]
 810370e:	681b      	ldr	r3, [r3, #0]
 8103710:	4a75      	ldr	r2, [pc, #468]	@ (81038e8 <UART_SetConfig+0x6a4>)
 8103712:	4293      	cmp	r3, r2
 8103714:	d130      	bne.n	8103778 <UART_SetConfig+0x534>
 8103716:	4b72      	ldr	r3, [pc, #456]	@ (81038e0 <UART_SetConfig+0x69c>)
 8103718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 810371a:	f003 0307 	and.w	r3, r3, #7
 810371e:	2b05      	cmp	r3, #5
 8103720:	d826      	bhi.n	8103770 <UART_SetConfig+0x52c>
 8103722:	a201      	add	r2, pc, #4	@ (adr r2, 8103728 <UART_SetConfig+0x4e4>)
 8103724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103728:	08103741 	.word	0x08103741
 810372c:	08103749 	.word	0x08103749
 8103730:	08103751 	.word	0x08103751
 8103734:	08103759 	.word	0x08103759
 8103738:	08103761 	.word	0x08103761
 810373c:	08103769 	.word	0x08103769
 8103740:	2300      	movs	r3, #0
 8103742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103746:	e050      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103748:	2304      	movs	r3, #4
 810374a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810374e:	e04c      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103750:	2308      	movs	r3, #8
 8103752:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103756:	e048      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103758:	2310      	movs	r3, #16
 810375a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810375e:	e044      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103760:	2320      	movs	r3, #32
 8103762:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103766:	e040      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103768:	2340      	movs	r3, #64	@ 0x40
 810376a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 810376e:	e03c      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103770:	2380      	movs	r3, #128	@ 0x80
 8103772:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8103776:	e038      	b.n	81037ea <UART_SetConfig+0x5a6>
 8103778:	697b      	ldr	r3, [r7, #20]
 810377a:	681b      	ldr	r3, [r3, #0]
 810377c:	4a5b      	ldr	r2, [pc, #364]	@ (81038ec <UART_SetConfig+0x6a8>)
 810377e:	4293      	cmp	r3, r2
 8103780:	d130      	bne.n	81037e4 <UART_SetConfig+0x5a0>
 8103782:	4b57      	ldr	r3, [pc, #348]	@ (81038e0 <UART_SetConfig+0x69c>)
 8103784:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8103786:	f003 0307 	and.w	r3, r3, #7
 810378a:	2b05      	cmp	r3, #5
 810378c:	d826      	bhi.n	81037dc <UART_SetConfig+0x598>
 810378e:	a201      	add	r2, pc, #4	@ (adr r2, 8103794 <UART_SetConfig+0x550>)
 8103790:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103794:	081037ad 	.word	0x081037ad
 8103798:	081037b5 	.word	0x081037b5
 810379c:	081037bd 	.word	0x081037bd
 81037a0:	081037c5 	.word	0x081037c5
 81037a4:	081037cd 	.word	0x081037cd
 81037a8:	081037d5 	.word	0x081037d5
 81037ac:	2302      	movs	r3, #2
 81037ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037b2:	e01a      	b.n	81037ea <UART_SetConfig+0x5a6>
 81037b4:	2304      	movs	r3, #4
 81037b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037ba:	e016      	b.n	81037ea <UART_SetConfig+0x5a6>
 81037bc:	2308      	movs	r3, #8
 81037be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037c2:	e012      	b.n	81037ea <UART_SetConfig+0x5a6>
 81037c4:	2310      	movs	r3, #16
 81037c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037ca:	e00e      	b.n	81037ea <UART_SetConfig+0x5a6>
 81037cc:	2320      	movs	r3, #32
 81037ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037d2:	e00a      	b.n	81037ea <UART_SetConfig+0x5a6>
 81037d4:	2340      	movs	r3, #64	@ 0x40
 81037d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037da:	e006      	b.n	81037ea <UART_SetConfig+0x5a6>
 81037dc:	2380      	movs	r3, #128	@ 0x80
 81037de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 81037e2:	e002      	b.n	81037ea <UART_SetConfig+0x5a6>
 81037e4:	2380      	movs	r3, #128	@ 0x80
 81037e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 81037ea:	697b      	ldr	r3, [r7, #20]
 81037ec:	681b      	ldr	r3, [r3, #0]
 81037ee:	4a3f      	ldr	r2, [pc, #252]	@ (81038ec <UART_SetConfig+0x6a8>)
 81037f0:	4293      	cmp	r3, r2
 81037f2:	f040 80f8 	bne.w	81039e6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 81037f6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81037fa:	2b20      	cmp	r3, #32
 81037fc:	dc46      	bgt.n	810388c <UART_SetConfig+0x648>
 81037fe:	2b02      	cmp	r3, #2
 8103800:	f2c0 8082 	blt.w	8103908 <UART_SetConfig+0x6c4>
 8103804:	3b02      	subs	r3, #2
 8103806:	2b1e      	cmp	r3, #30
 8103808:	d87e      	bhi.n	8103908 <UART_SetConfig+0x6c4>
 810380a:	a201      	add	r2, pc, #4	@ (adr r2, 8103810 <UART_SetConfig+0x5cc>)
 810380c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103810:	08103893 	.word	0x08103893
 8103814:	08103909 	.word	0x08103909
 8103818:	0810389b 	.word	0x0810389b
 810381c:	08103909 	.word	0x08103909
 8103820:	08103909 	.word	0x08103909
 8103824:	08103909 	.word	0x08103909
 8103828:	081038ab 	.word	0x081038ab
 810382c:	08103909 	.word	0x08103909
 8103830:	08103909 	.word	0x08103909
 8103834:	08103909 	.word	0x08103909
 8103838:	08103909 	.word	0x08103909
 810383c:	08103909 	.word	0x08103909
 8103840:	08103909 	.word	0x08103909
 8103844:	08103909 	.word	0x08103909
 8103848:	081038bb 	.word	0x081038bb
 810384c:	08103909 	.word	0x08103909
 8103850:	08103909 	.word	0x08103909
 8103854:	08103909 	.word	0x08103909
 8103858:	08103909 	.word	0x08103909
 810385c:	08103909 	.word	0x08103909
 8103860:	08103909 	.word	0x08103909
 8103864:	08103909 	.word	0x08103909
 8103868:	08103909 	.word	0x08103909
 810386c:	08103909 	.word	0x08103909
 8103870:	08103909 	.word	0x08103909
 8103874:	08103909 	.word	0x08103909
 8103878:	08103909 	.word	0x08103909
 810387c:	08103909 	.word	0x08103909
 8103880:	08103909 	.word	0x08103909
 8103884:	08103909 	.word	0x08103909
 8103888:	081038fb 	.word	0x081038fb
 810388c:	2b40      	cmp	r3, #64	@ 0x40
 810388e:	d037      	beq.n	8103900 <UART_SetConfig+0x6bc>
 8103890:	e03a      	b.n	8103908 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8103892:	f7ff f865 	bl	8102960 <HAL_RCCEx_GetD3PCLK1Freq>
 8103896:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103898:	e03c      	b.n	8103914 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810389a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 810389e:	4618      	mov	r0, r3
 81038a0:	f7ff f874 	bl	810298c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 81038a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 81038a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81038a8:	e034      	b.n	8103914 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81038aa:	f107 0318 	add.w	r3, r7, #24
 81038ae:	4618      	mov	r0, r3
 81038b0:	f7ff f9c0 	bl	8102c34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81038b4:	69fb      	ldr	r3, [r7, #28]
 81038b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81038b8:	e02c      	b.n	8103914 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81038ba:	4b09      	ldr	r3, [pc, #36]	@ (81038e0 <UART_SetConfig+0x69c>)
 81038bc:	681b      	ldr	r3, [r3, #0]
 81038be:	f003 0320 	and.w	r3, r3, #32
 81038c2:	2b00      	cmp	r3, #0
 81038c4:	d016      	beq.n	81038f4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81038c6:	4b06      	ldr	r3, [pc, #24]	@ (81038e0 <UART_SetConfig+0x69c>)
 81038c8:	681b      	ldr	r3, [r3, #0]
 81038ca:	08db      	lsrs	r3, r3, #3
 81038cc:	f003 0303 	and.w	r3, r3, #3
 81038d0:	4a07      	ldr	r2, [pc, #28]	@ (81038f0 <UART_SetConfig+0x6ac>)
 81038d2:	fa22 f303 	lsr.w	r3, r2, r3
 81038d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81038d8:	e01c      	b.n	8103914 <UART_SetConfig+0x6d0>
 81038da:	bf00      	nop
 81038dc:	40011400 	.word	0x40011400
 81038e0:	58024400 	.word	0x58024400
 81038e4:	40007800 	.word	0x40007800
 81038e8:	40007c00 	.word	0x40007c00
 81038ec:	58000c00 	.word	0x58000c00
 81038f0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 81038f4:	4b9d      	ldr	r3, [pc, #628]	@ (8103b6c <UART_SetConfig+0x928>)
 81038f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81038f8:	e00c      	b.n	8103914 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81038fa:	4b9d      	ldr	r3, [pc, #628]	@ (8103b70 <UART_SetConfig+0x92c>)
 81038fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 81038fe:	e009      	b.n	8103914 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103900:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8103904:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103906:	e005      	b.n	8103914 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8103908:	2300      	movs	r3, #0
 810390a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 810390c:	2301      	movs	r3, #1
 810390e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8103912:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8103914:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103916:	2b00      	cmp	r3, #0
 8103918:	f000 81de 	beq.w	8103cd8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 810391c:	697b      	ldr	r3, [r7, #20]
 810391e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103920:	4a94      	ldr	r2, [pc, #592]	@ (8103b74 <UART_SetConfig+0x930>)
 8103922:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103926:	461a      	mov	r2, r3
 8103928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 810392a:	fbb3 f3f2 	udiv	r3, r3, r2
 810392e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103930:	697b      	ldr	r3, [r7, #20]
 8103932:	685a      	ldr	r2, [r3, #4]
 8103934:	4613      	mov	r3, r2
 8103936:	005b      	lsls	r3, r3, #1
 8103938:	4413      	add	r3, r2
 810393a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 810393c:	429a      	cmp	r2, r3
 810393e:	d305      	bcc.n	810394c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8103940:	697b      	ldr	r3, [r7, #20]
 8103942:	685b      	ldr	r3, [r3, #4]
 8103944:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8103946:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103948:	429a      	cmp	r2, r3
 810394a:	d903      	bls.n	8103954 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 810394c:	2301      	movs	r3, #1
 810394e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8103952:	e1c1      	b.n	8103cd8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103954:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103956:	2200      	movs	r2, #0
 8103958:	60bb      	str	r3, [r7, #8]
 810395a:	60fa      	str	r2, [r7, #12]
 810395c:	697b      	ldr	r3, [r7, #20]
 810395e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103960:	4a84      	ldr	r2, [pc, #528]	@ (8103b74 <UART_SetConfig+0x930>)
 8103962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103966:	b29b      	uxth	r3, r3
 8103968:	2200      	movs	r2, #0
 810396a:	603b      	str	r3, [r7, #0]
 810396c:	607a      	str	r2, [r7, #4]
 810396e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8103972:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8103976:	f7fc fcaf 	bl	81002d8 <__aeabi_uldivmod>
 810397a:	4602      	mov	r2, r0
 810397c:	460b      	mov	r3, r1
 810397e:	4610      	mov	r0, r2
 8103980:	4619      	mov	r1, r3
 8103982:	f04f 0200 	mov.w	r2, #0
 8103986:	f04f 0300 	mov.w	r3, #0
 810398a:	020b      	lsls	r3, r1, #8
 810398c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8103990:	0202      	lsls	r2, r0, #8
 8103992:	6979      	ldr	r1, [r7, #20]
 8103994:	6849      	ldr	r1, [r1, #4]
 8103996:	0849      	lsrs	r1, r1, #1
 8103998:	2000      	movs	r0, #0
 810399a:	460c      	mov	r4, r1
 810399c:	4605      	mov	r5, r0
 810399e:	eb12 0804 	adds.w	r8, r2, r4
 81039a2:	eb43 0905 	adc.w	r9, r3, r5
 81039a6:	697b      	ldr	r3, [r7, #20]
 81039a8:	685b      	ldr	r3, [r3, #4]
 81039aa:	2200      	movs	r2, #0
 81039ac:	469a      	mov	sl, r3
 81039ae:	4693      	mov	fp, r2
 81039b0:	4652      	mov	r2, sl
 81039b2:	465b      	mov	r3, fp
 81039b4:	4640      	mov	r0, r8
 81039b6:	4649      	mov	r1, r9
 81039b8:	f7fc fc8e 	bl	81002d8 <__aeabi_uldivmod>
 81039bc:	4602      	mov	r2, r0
 81039be:	460b      	mov	r3, r1
 81039c0:	4613      	mov	r3, r2
 81039c2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 81039c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81039c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 81039ca:	d308      	bcc.n	81039de <UART_SetConfig+0x79a>
 81039cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81039ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 81039d2:	d204      	bcs.n	81039de <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 81039d4:	697b      	ldr	r3, [r7, #20]
 81039d6:	681b      	ldr	r3, [r3, #0]
 81039d8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 81039da:	60da      	str	r2, [r3, #12]
 81039dc:	e17c      	b.n	8103cd8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 81039de:	2301      	movs	r3, #1
 81039e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 81039e4:	e178      	b.n	8103cd8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 81039e6:	697b      	ldr	r3, [r7, #20]
 81039e8:	69db      	ldr	r3, [r3, #28]
 81039ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 81039ee:	f040 80c5 	bne.w	8103b7c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 81039f2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 81039f6:	2b20      	cmp	r3, #32
 81039f8:	dc48      	bgt.n	8103a8c <UART_SetConfig+0x848>
 81039fa:	2b00      	cmp	r3, #0
 81039fc:	db7b      	blt.n	8103af6 <UART_SetConfig+0x8b2>
 81039fe:	2b20      	cmp	r3, #32
 8103a00:	d879      	bhi.n	8103af6 <UART_SetConfig+0x8b2>
 8103a02:	a201      	add	r2, pc, #4	@ (adr r2, 8103a08 <UART_SetConfig+0x7c4>)
 8103a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103a08:	08103a93 	.word	0x08103a93
 8103a0c:	08103a9b 	.word	0x08103a9b
 8103a10:	08103af7 	.word	0x08103af7
 8103a14:	08103af7 	.word	0x08103af7
 8103a18:	08103aa3 	.word	0x08103aa3
 8103a1c:	08103af7 	.word	0x08103af7
 8103a20:	08103af7 	.word	0x08103af7
 8103a24:	08103af7 	.word	0x08103af7
 8103a28:	08103ab3 	.word	0x08103ab3
 8103a2c:	08103af7 	.word	0x08103af7
 8103a30:	08103af7 	.word	0x08103af7
 8103a34:	08103af7 	.word	0x08103af7
 8103a38:	08103af7 	.word	0x08103af7
 8103a3c:	08103af7 	.word	0x08103af7
 8103a40:	08103af7 	.word	0x08103af7
 8103a44:	08103af7 	.word	0x08103af7
 8103a48:	08103ac3 	.word	0x08103ac3
 8103a4c:	08103af7 	.word	0x08103af7
 8103a50:	08103af7 	.word	0x08103af7
 8103a54:	08103af7 	.word	0x08103af7
 8103a58:	08103af7 	.word	0x08103af7
 8103a5c:	08103af7 	.word	0x08103af7
 8103a60:	08103af7 	.word	0x08103af7
 8103a64:	08103af7 	.word	0x08103af7
 8103a68:	08103af7 	.word	0x08103af7
 8103a6c:	08103af7 	.word	0x08103af7
 8103a70:	08103af7 	.word	0x08103af7
 8103a74:	08103af7 	.word	0x08103af7
 8103a78:	08103af7 	.word	0x08103af7
 8103a7c:	08103af7 	.word	0x08103af7
 8103a80:	08103af7 	.word	0x08103af7
 8103a84:	08103af7 	.word	0x08103af7
 8103a88:	08103ae9 	.word	0x08103ae9
 8103a8c:	2b40      	cmp	r3, #64	@ 0x40
 8103a8e:	d02e      	beq.n	8103aee <UART_SetConfig+0x8aa>
 8103a90:	e031      	b.n	8103af6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103a92:	f7fd fd2f 	bl	81014f4 <HAL_RCC_GetPCLK1Freq>
 8103a96:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103a98:	e033      	b.n	8103b02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103a9a:	f7fd fd41 	bl	8101520 <HAL_RCC_GetPCLK2Freq>
 8103a9e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103aa0:	e02f      	b.n	8103b02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103aa2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103aa6:	4618      	mov	r0, r3
 8103aa8:	f7fe ff70 	bl	810298c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103aac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103aae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103ab0:	e027      	b.n	8103b02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103ab2:	f107 0318 	add.w	r3, r7, #24
 8103ab6:	4618      	mov	r0, r3
 8103ab8:	f7ff f8bc 	bl	8102c34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103abc:	69fb      	ldr	r3, [r7, #28]
 8103abe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103ac0:	e01f      	b.n	8103b02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103ac2:	4b2d      	ldr	r3, [pc, #180]	@ (8103b78 <UART_SetConfig+0x934>)
 8103ac4:	681b      	ldr	r3, [r3, #0]
 8103ac6:	f003 0320 	and.w	r3, r3, #32
 8103aca:	2b00      	cmp	r3, #0
 8103acc:	d009      	beq.n	8103ae2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103ace:	4b2a      	ldr	r3, [pc, #168]	@ (8103b78 <UART_SetConfig+0x934>)
 8103ad0:	681b      	ldr	r3, [r3, #0]
 8103ad2:	08db      	lsrs	r3, r3, #3
 8103ad4:	f003 0303 	and.w	r3, r3, #3
 8103ad8:	4a24      	ldr	r2, [pc, #144]	@ (8103b6c <UART_SetConfig+0x928>)
 8103ada:	fa22 f303 	lsr.w	r3, r2, r3
 8103ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103ae0:	e00f      	b.n	8103b02 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8103ae2:	4b22      	ldr	r3, [pc, #136]	@ (8103b6c <UART_SetConfig+0x928>)
 8103ae4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103ae6:	e00c      	b.n	8103b02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103ae8:	4b21      	ldr	r3, [pc, #132]	@ (8103b70 <UART_SetConfig+0x92c>)
 8103aea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103aec:	e009      	b.n	8103b02 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8103af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103af4:	e005      	b.n	8103b02 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8103af6:	2300      	movs	r3, #0
 8103af8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8103afa:	2301      	movs	r3, #1
 8103afc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8103b00:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8103b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103b04:	2b00      	cmp	r3, #0
 8103b06:	f000 80e7 	beq.w	8103cd8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103b0a:	697b      	ldr	r3, [r7, #20]
 8103b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103b0e:	4a19      	ldr	r2, [pc, #100]	@ (8103b74 <UART_SetConfig+0x930>)
 8103b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103b14:	461a      	mov	r2, r3
 8103b16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8103b1c:	005a      	lsls	r2, r3, #1
 8103b1e:	697b      	ldr	r3, [r7, #20]
 8103b20:	685b      	ldr	r3, [r3, #4]
 8103b22:	085b      	lsrs	r3, r3, #1
 8103b24:	441a      	add	r2, r3
 8103b26:	697b      	ldr	r3, [r7, #20]
 8103b28:	685b      	ldr	r3, [r3, #4]
 8103b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8103b2e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103b30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b32:	2b0f      	cmp	r3, #15
 8103b34:	d916      	bls.n	8103b64 <UART_SetConfig+0x920>
 8103b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103b3c:	d212      	bcs.n	8103b64 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8103b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b40:	b29b      	uxth	r3, r3
 8103b42:	f023 030f 	bic.w	r3, r3, #15
 8103b46:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8103b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103b4a:	085b      	lsrs	r3, r3, #1
 8103b4c:	b29b      	uxth	r3, r3
 8103b4e:	f003 0307 	and.w	r3, r3, #7
 8103b52:	b29a      	uxth	r2, r3
 8103b54:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8103b56:	4313      	orrs	r3, r2
 8103b58:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8103b5a:	697b      	ldr	r3, [r7, #20]
 8103b5c:	681b      	ldr	r3, [r3, #0]
 8103b5e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8103b60:	60da      	str	r2, [r3, #12]
 8103b62:	e0b9      	b.n	8103cd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8103b64:	2301      	movs	r3, #1
 8103b66:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8103b6a:	e0b5      	b.n	8103cd8 <UART_SetConfig+0xa94>
 8103b6c:	03d09000 	.word	0x03d09000
 8103b70:	003d0900 	.word	0x003d0900
 8103b74:	081043d8 	.word	0x081043d8
 8103b78:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8103b7c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8103b80:	2b20      	cmp	r3, #32
 8103b82:	dc49      	bgt.n	8103c18 <UART_SetConfig+0x9d4>
 8103b84:	2b00      	cmp	r3, #0
 8103b86:	db7c      	blt.n	8103c82 <UART_SetConfig+0xa3e>
 8103b88:	2b20      	cmp	r3, #32
 8103b8a:	d87a      	bhi.n	8103c82 <UART_SetConfig+0xa3e>
 8103b8c:	a201      	add	r2, pc, #4	@ (adr r2, 8103b94 <UART_SetConfig+0x950>)
 8103b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103b92:	bf00      	nop
 8103b94:	08103c1f 	.word	0x08103c1f
 8103b98:	08103c27 	.word	0x08103c27
 8103b9c:	08103c83 	.word	0x08103c83
 8103ba0:	08103c83 	.word	0x08103c83
 8103ba4:	08103c2f 	.word	0x08103c2f
 8103ba8:	08103c83 	.word	0x08103c83
 8103bac:	08103c83 	.word	0x08103c83
 8103bb0:	08103c83 	.word	0x08103c83
 8103bb4:	08103c3f 	.word	0x08103c3f
 8103bb8:	08103c83 	.word	0x08103c83
 8103bbc:	08103c83 	.word	0x08103c83
 8103bc0:	08103c83 	.word	0x08103c83
 8103bc4:	08103c83 	.word	0x08103c83
 8103bc8:	08103c83 	.word	0x08103c83
 8103bcc:	08103c83 	.word	0x08103c83
 8103bd0:	08103c83 	.word	0x08103c83
 8103bd4:	08103c4f 	.word	0x08103c4f
 8103bd8:	08103c83 	.word	0x08103c83
 8103bdc:	08103c83 	.word	0x08103c83
 8103be0:	08103c83 	.word	0x08103c83
 8103be4:	08103c83 	.word	0x08103c83
 8103be8:	08103c83 	.word	0x08103c83
 8103bec:	08103c83 	.word	0x08103c83
 8103bf0:	08103c83 	.word	0x08103c83
 8103bf4:	08103c83 	.word	0x08103c83
 8103bf8:	08103c83 	.word	0x08103c83
 8103bfc:	08103c83 	.word	0x08103c83
 8103c00:	08103c83 	.word	0x08103c83
 8103c04:	08103c83 	.word	0x08103c83
 8103c08:	08103c83 	.word	0x08103c83
 8103c0c:	08103c83 	.word	0x08103c83
 8103c10:	08103c83 	.word	0x08103c83
 8103c14:	08103c75 	.word	0x08103c75
 8103c18:	2b40      	cmp	r3, #64	@ 0x40
 8103c1a:	d02e      	beq.n	8103c7a <UART_SetConfig+0xa36>
 8103c1c:	e031      	b.n	8103c82 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8103c1e:	f7fd fc69 	bl	81014f4 <HAL_RCC_GetPCLK1Freq>
 8103c22:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103c24:	e033      	b.n	8103c8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8103c26:	f7fd fc7b 	bl	8101520 <HAL_RCC_GetPCLK2Freq>
 8103c2a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8103c2c:	e02f      	b.n	8103c8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8103c2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8103c32:	4618      	mov	r0, r3
 8103c34:	f7fe feaa 	bl	810298c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8103c38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103c3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c3c:	e027      	b.n	8103c8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8103c3e:	f107 0318 	add.w	r3, r7, #24
 8103c42:	4618      	mov	r0, r3
 8103c44:	f7fe fff6 	bl	8102c34 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8103c48:	69fb      	ldr	r3, [r7, #28]
 8103c4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c4c:	e01f      	b.n	8103c8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103c4e:	4b2d      	ldr	r3, [pc, #180]	@ (8103d04 <UART_SetConfig+0xac0>)
 8103c50:	681b      	ldr	r3, [r3, #0]
 8103c52:	f003 0320 	and.w	r3, r3, #32
 8103c56:	2b00      	cmp	r3, #0
 8103c58:	d009      	beq.n	8103c6e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8103c5a:	4b2a      	ldr	r3, [pc, #168]	@ (8103d04 <UART_SetConfig+0xac0>)
 8103c5c:	681b      	ldr	r3, [r3, #0]
 8103c5e:	08db      	lsrs	r3, r3, #3
 8103c60:	f003 0303 	and.w	r3, r3, #3
 8103c64:	4a28      	ldr	r2, [pc, #160]	@ (8103d08 <UART_SetConfig+0xac4>)
 8103c66:	fa22 f303 	lsr.w	r3, r2, r3
 8103c6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8103c6c:	e00f      	b.n	8103c8e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8103c6e:	4b26      	ldr	r3, [pc, #152]	@ (8103d08 <UART_SetConfig+0xac4>)
 8103c70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c72:	e00c      	b.n	8103c8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8103c74:	4b25      	ldr	r3, [pc, #148]	@ (8103d0c <UART_SetConfig+0xac8>)
 8103c76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c78:	e009      	b.n	8103c8e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8103c7a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8103c7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8103c80:	e005      	b.n	8103c8e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8103c82:	2300      	movs	r3, #0
 8103c84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8103c86:	2301      	movs	r3, #1
 8103c88:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8103c8c:	bf00      	nop
    }

    if (pclk != 0U)
 8103c8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103c90:	2b00      	cmp	r3, #0
 8103c92:	d021      	beq.n	8103cd8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8103c94:	697b      	ldr	r3, [r7, #20]
 8103c96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8103c98:	4a1d      	ldr	r2, [pc, #116]	@ (8103d10 <UART_SetConfig+0xacc>)
 8103c9a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8103c9e:	461a      	mov	r2, r3
 8103ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103ca2:	fbb3 f2f2 	udiv	r2, r3, r2
 8103ca6:	697b      	ldr	r3, [r7, #20]
 8103ca8:	685b      	ldr	r3, [r3, #4]
 8103caa:	085b      	lsrs	r3, r3, #1
 8103cac:	441a      	add	r2, r3
 8103cae:	697b      	ldr	r3, [r7, #20]
 8103cb0:	685b      	ldr	r3, [r3, #4]
 8103cb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8103cb6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8103cb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103cba:	2b0f      	cmp	r3, #15
 8103cbc:	d909      	bls.n	8103cd2 <UART_SetConfig+0xa8e>
 8103cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103cc0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8103cc4:	d205      	bcs.n	8103cd2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8103cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103cc8:	b29a      	uxth	r2, r3
 8103cca:	697b      	ldr	r3, [r7, #20]
 8103ccc:	681b      	ldr	r3, [r3, #0]
 8103cce:	60da      	str	r2, [r3, #12]
 8103cd0:	e002      	b.n	8103cd8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8103cd2:	2301      	movs	r3, #1
 8103cd4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8103cd8:	697b      	ldr	r3, [r7, #20]
 8103cda:	2201      	movs	r2, #1
 8103cdc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8103ce0:	697b      	ldr	r3, [r7, #20]
 8103ce2:	2201      	movs	r2, #1
 8103ce4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8103ce8:	697b      	ldr	r3, [r7, #20]
 8103cea:	2200      	movs	r2, #0
 8103cec:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8103cee:	697b      	ldr	r3, [r7, #20]
 8103cf0:	2200      	movs	r2, #0
 8103cf2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8103cf4:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8103cf8:	4618      	mov	r0, r3
 8103cfa:	3748      	adds	r7, #72	@ 0x48
 8103cfc:	46bd      	mov	sp, r7
 8103cfe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103d02:	bf00      	nop
 8103d04:	58024400 	.word	0x58024400
 8103d08:	03d09000 	.word	0x03d09000
 8103d0c:	003d0900 	.word	0x003d0900
 8103d10:	081043d8 	.word	0x081043d8

08103d14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8103d14:	b480      	push	{r7}
 8103d16:	b083      	sub	sp, #12
 8103d18:	af00      	add	r7, sp, #0
 8103d1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8103d1c:	687b      	ldr	r3, [r7, #4]
 8103d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d20:	f003 0308 	and.w	r3, r3, #8
 8103d24:	2b00      	cmp	r3, #0
 8103d26:	d00a      	beq.n	8103d3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	681b      	ldr	r3, [r3, #0]
 8103d2c:	685b      	ldr	r3, [r3, #4]
 8103d2e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8103d32:	687b      	ldr	r3, [r7, #4]
 8103d34:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8103d36:	687b      	ldr	r3, [r7, #4]
 8103d38:	681b      	ldr	r3, [r3, #0]
 8103d3a:	430a      	orrs	r2, r1
 8103d3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8103d3e:	687b      	ldr	r3, [r7, #4]
 8103d40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d42:	f003 0301 	and.w	r3, r3, #1
 8103d46:	2b00      	cmp	r3, #0
 8103d48:	d00a      	beq.n	8103d60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8103d4a:	687b      	ldr	r3, [r7, #4]
 8103d4c:	681b      	ldr	r3, [r3, #0]
 8103d4e:	685b      	ldr	r3, [r3, #4]
 8103d50:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8103d54:	687b      	ldr	r3, [r7, #4]
 8103d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8103d58:	687b      	ldr	r3, [r7, #4]
 8103d5a:	681b      	ldr	r3, [r3, #0]
 8103d5c:	430a      	orrs	r2, r1
 8103d5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d64:	f003 0302 	and.w	r3, r3, #2
 8103d68:	2b00      	cmp	r3, #0
 8103d6a:	d00a      	beq.n	8103d82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	681b      	ldr	r3, [r3, #0]
 8103d70:	685b      	ldr	r3, [r3, #4]
 8103d72:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8103d76:	687b      	ldr	r3, [r7, #4]
 8103d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8103d7a:	687b      	ldr	r3, [r7, #4]
 8103d7c:	681b      	ldr	r3, [r3, #0]
 8103d7e:	430a      	orrs	r2, r1
 8103d80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8103d82:	687b      	ldr	r3, [r7, #4]
 8103d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103d86:	f003 0304 	and.w	r3, r3, #4
 8103d8a:	2b00      	cmp	r3, #0
 8103d8c:	d00a      	beq.n	8103da4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8103d8e:	687b      	ldr	r3, [r7, #4]
 8103d90:	681b      	ldr	r3, [r3, #0]
 8103d92:	685b      	ldr	r3, [r3, #4]
 8103d94:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8103d98:	687b      	ldr	r3, [r7, #4]
 8103d9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8103d9c:	687b      	ldr	r3, [r7, #4]
 8103d9e:	681b      	ldr	r3, [r3, #0]
 8103da0:	430a      	orrs	r2, r1
 8103da2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8103da4:	687b      	ldr	r3, [r7, #4]
 8103da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103da8:	f003 0310 	and.w	r3, r3, #16
 8103dac:	2b00      	cmp	r3, #0
 8103dae:	d00a      	beq.n	8103dc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	681b      	ldr	r3, [r3, #0]
 8103db4:	689b      	ldr	r3, [r3, #8]
 8103db6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8103dba:	687b      	ldr	r3, [r7, #4]
 8103dbc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	681b      	ldr	r3, [r3, #0]
 8103dc2:	430a      	orrs	r2, r1
 8103dc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8103dc6:	687b      	ldr	r3, [r7, #4]
 8103dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103dca:	f003 0320 	and.w	r3, r3, #32
 8103dce:	2b00      	cmp	r3, #0
 8103dd0:	d00a      	beq.n	8103de8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8103dd2:	687b      	ldr	r3, [r7, #4]
 8103dd4:	681b      	ldr	r3, [r3, #0]
 8103dd6:	689b      	ldr	r3, [r3, #8]
 8103dd8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8103ddc:	687b      	ldr	r3, [r7, #4]
 8103dde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8103de0:	687b      	ldr	r3, [r7, #4]
 8103de2:	681b      	ldr	r3, [r3, #0]
 8103de4:	430a      	orrs	r2, r1
 8103de6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103dec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8103df0:	2b00      	cmp	r3, #0
 8103df2:	d01a      	beq.n	8103e2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	681b      	ldr	r3, [r3, #0]
 8103df8:	685b      	ldr	r3, [r3, #4]
 8103dfa:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8103dfe:	687b      	ldr	r3, [r7, #4]
 8103e00:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8103e02:	687b      	ldr	r3, [r7, #4]
 8103e04:	681b      	ldr	r3, [r3, #0]
 8103e06:	430a      	orrs	r2, r1
 8103e08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8103e0a:	687b      	ldr	r3, [r7, #4]
 8103e0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8103e0e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8103e12:	d10a      	bne.n	8103e2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8103e14:	687b      	ldr	r3, [r7, #4]
 8103e16:	681b      	ldr	r3, [r3, #0]
 8103e18:	685b      	ldr	r3, [r3, #4]
 8103e1a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8103e1e:	687b      	ldr	r3, [r7, #4]
 8103e20:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	681b      	ldr	r3, [r3, #0]
 8103e26:	430a      	orrs	r2, r1
 8103e28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8103e2a:	687b      	ldr	r3, [r7, #4]
 8103e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8103e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8103e32:	2b00      	cmp	r3, #0
 8103e34:	d00a      	beq.n	8103e4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8103e36:	687b      	ldr	r3, [r7, #4]
 8103e38:	681b      	ldr	r3, [r3, #0]
 8103e3a:	685b      	ldr	r3, [r3, #4]
 8103e3c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8103e40:	687b      	ldr	r3, [r7, #4]
 8103e42:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8103e44:	687b      	ldr	r3, [r7, #4]
 8103e46:	681b      	ldr	r3, [r3, #0]
 8103e48:	430a      	orrs	r2, r1
 8103e4a:	605a      	str	r2, [r3, #4]
  }
}
 8103e4c:	bf00      	nop
 8103e4e:	370c      	adds	r7, #12
 8103e50:	46bd      	mov	sp, r7
 8103e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103e56:	4770      	bx	lr

08103e58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8103e58:	b580      	push	{r7, lr}
 8103e5a:	b098      	sub	sp, #96	@ 0x60
 8103e5c:	af02      	add	r7, sp, #8
 8103e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103e60:	687b      	ldr	r3, [r7, #4]
 8103e62:	2200      	movs	r2, #0
 8103e64:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8103e68:	f7fc fe4a 	bl	8100b00 <HAL_GetTick>
 8103e6c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8103e6e:	687b      	ldr	r3, [r7, #4]
 8103e70:	681b      	ldr	r3, [r3, #0]
 8103e72:	681b      	ldr	r3, [r3, #0]
 8103e74:	f003 0308 	and.w	r3, r3, #8
 8103e78:	2b08      	cmp	r3, #8
 8103e7a:	d12f      	bne.n	8103edc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103e7c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8103e80:	9300      	str	r3, [sp, #0]
 8103e82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8103e84:	2200      	movs	r2, #0
 8103e86:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8103e8a:	6878      	ldr	r0, [r7, #4]
 8103e8c:	f000 f88e 	bl	8103fac <UART_WaitOnFlagUntilTimeout>
 8103e90:	4603      	mov	r3, r0
 8103e92:	2b00      	cmp	r3, #0
 8103e94:	d022      	beq.n	8103edc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8103e96:	687b      	ldr	r3, [r7, #4]
 8103e98:	681b      	ldr	r3, [r3, #0]
 8103e9a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8103e9e:	e853 3f00 	ldrex	r3, [r3]
 8103ea2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8103ea4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8103ea6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8103eaa:	653b      	str	r3, [r7, #80]	@ 0x50
 8103eac:	687b      	ldr	r3, [r7, #4]
 8103eae:	681b      	ldr	r3, [r3, #0]
 8103eb0:	461a      	mov	r2, r3
 8103eb2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8103eb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8103eb6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103eb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8103eba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8103ebc:	e841 2300 	strex	r3, r2, [r1]
 8103ec0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8103ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8103ec4:	2b00      	cmp	r3, #0
 8103ec6:	d1e6      	bne.n	8103e96 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8103ec8:	687b      	ldr	r3, [r7, #4]
 8103eca:	2220      	movs	r2, #32
 8103ecc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8103ed0:	687b      	ldr	r3, [r7, #4]
 8103ed2:	2200      	movs	r2, #0
 8103ed4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103ed8:	2303      	movs	r3, #3
 8103eda:	e063      	b.n	8103fa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	681b      	ldr	r3, [r3, #0]
 8103ee0:	681b      	ldr	r3, [r3, #0]
 8103ee2:	f003 0304 	and.w	r3, r3, #4
 8103ee6:	2b04      	cmp	r3, #4
 8103ee8:	d149      	bne.n	8103f7e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8103eea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8103eee:	9300      	str	r3, [sp, #0]
 8103ef0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8103ef2:	2200      	movs	r2, #0
 8103ef4:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8103ef8:	6878      	ldr	r0, [r7, #4]
 8103efa:	f000 f857 	bl	8103fac <UART_WaitOnFlagUntilTimeout>
 8103efe:	4603      	mov	r3, r0
 8103f00:	2b00      	cmp	r3, #0
 8103f02:	d03c      	beq.n	8103f7e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8103f04:	687b      	ldr	r3, [r7, #4]
 8103f06:	681b      	ldr	r3, [r3, #0]
 8103f08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8103f0c:	e853 3f00 	ldrex	r3, [r3]
 8103f10:	623b      	str	r3, [r7, #32]
   return(result);
 8103f12:	6a3b      	ldr	r3, [r7, #32]
 8103f14:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8103f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	681b      	ldr	r3, [r3, #0]
 8103f1e:	461a      	mov	r2, r3
 8103f20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8103f22:	633b      	str	r3, [r7, #48]	@ 0x30
 8103f24:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103f26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8103f28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8103f2a:	e841 2300 	strex	r3, r2, [r1]
 8103f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8103f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8103f32:	2b00      	cmp	r3, #0
 8103f34:	d1e6      	bne.n	8103f04 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8103f36:	687b      	ldr	r3, [r7, #4]
 8103f38:	681b      	ldr	r3, [r3, #0]
 8103f3a:	3308      	adds	r3, #8
 8103f3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103f3e:	693b      	ldr	r3, [r7, #16]
 8103f40:	e853 3f00 	ldrex	r3, [r3]
 8103f44:	60fb      	str	r3, [r7, #12]
   return(result);
 8103f46:	68fb      	ldr	r3, [r7, #12]
 8103f48:	f023 0301 	bic.w	r3, r3, #1
 8103f4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8103f4e:	687b      	ldr	r3, [r7, #4]
 8103f50:	681b      	ldr	r3, [r3, #0]
 8103f52:	3308      	adds	r3, #8
 8103f54:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8103f56:	61fa      	str	r2, [r7, #28]
 8103f58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103f5a:	69b9      	ldr	r1, [r7, #24]
 8103f5c:	69fa      	ldr	r2, [r7, #28]
 8103f5e:	e841 2300 	strex	r3, r2, [r1]
 8103f62:	617b      	str	r3, [r7, #20]
   return(result);
 8103f64:	697b      	ldr	r3, [r7, #20]
 8103f66:	2b00      	cmp	r3, #0
 8103f68:	d1e5      	bne.n	8103f36 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	2220      	movs	r2, #32
 8103f6e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8103f72:	687b      	ldr	r3, [r7, #4]
 8103f74:	2200      	movs	r2, #0
 8103f76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8103f7a:	2303      	movs	r3, #3
 8103f7c:	e012      	b.n	8103fa4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8103f7e:	687b      	ldr	r3, [r7, #4]
 8103f80:	2220      	movs	r2, #32
 8103f82:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8103f86:	687b      	ldr	r3, [r7, #4]
 8103f88:	2220      	movs	r2, #32
 8103f8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8103f8e:	687b      	ldr	r3, [r7, #4]
 8103f90:	2200      	movs	r2, #0
 8103f92:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8103f94:	687b      	ldr	r3, [r7, #4]
 8103f96:	2200      	movs	r2, #0
 8103f98:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8103f9a:	687b      	ldr	r3, [r7, #4]
 8103f9c:	2200      	movs	r2, #0
 8103f9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8103fa2:	2300      	movs	r3, #0
}
 8103fa4:	4618      	mov	r0, r3
 8103fa6:	3758      	adds	r7, #88	@ 0x58
 8103fa8:	46bd      	mov	sp, r7
 8103faa:	bd80      	pop	{r7, pc}

08103fac <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8103fac:	b580      	push	{r7, lr}
 8103fae:	b084      	sub	sp, #16
 8103fb0:	af00      	add	r7, sp, #0
 8103fb2:	60f8      	str	r0, [r7, #12]
 8103fb4:	60b9      	str	r1, [r7, #8]
 8103fb6:	603b      	str	r3, [r7, #0]
 8103fb8:	4613      	mov	r3, r2
 8103fba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8103fbc:	e04f      	b.n	810405e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8103fbe:	69bb      	ldr	r3, [r7, #24]
 8103fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8103fc4:	d04b      	beq.n	810405e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8103fc6:	f7fc fd9b 	bl	8100b00 <HAL_GetTick>
 8103fca:	4602      	mov	r2, r0
 8103fcc:	683b      	ldr	r3, [r7, #0]
 8103fce:	1ad3      	subs	r3, r2, r3
 8103fd0:	69ba      	ldr	r2, [r7, #24]
 8103fd2:	429a      	cmp	r2, r3
 8103fd4:	d302      	bcc.n	8103fdc <UART_WaitOnFlagUntilTimeout+0x30>
 8103fd6:	69bb      	ldr	r3, [r7, #24]
 8103fd8:	2b00      	cmp	r3, #0
 8103fda:	d101      	bne.n	8103fe0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8103fdc:	2303      	movs	r3, #3
 8103fde:	e04e      	b.n	810407e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8103fe0:	68fb      	ldr	r3, [r7, #12]
 8103fe2:	681b      	ldr	r3, [r3, #0]
 8103fe4:	681b      	ldr	r3, [r3, #0]
 8103fe6:	f003 0304 	and.w	r3, r3, #4
 8103fea:	2b00      	cmp	r3, #0
 8103fec:	d037      	beq.n	810405e <UART_WaitOnFlagUntilTimeout+0xb2>
 8103fee:	68bb      	ldr	r3, [r7, #8]
 8103ff0:	2b80      	cmp	r3, #128	@ 0x80
 8103ff2:	d034      	beq.n	810405e <UART_WaitOnFlagUntilTimeout+0xb2>
 8103ff4:	68bb      	ldr	r3, [r7, #8]
 8103ff6:	2b40      	cmp	r3, #64	@ 0x40
 8103ff8:	d031      	beq.n	810405e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8103ffa:	68fb      	ldr	r3, [r7, #12]
 8103ffc:	681b      	ldr	r3, [r3, #0]
 8103ffe:	69db      	ldr	r3, [r3, #28]
 8104000:	f003 0308 	and.w	r3, r3, #8
 8104004:	2b08      	cmp	r3, #8
 8104006:	d110      	bne.n	810402a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8104008:	68fb      	ldr	r3, [r7, #12]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	2208      	movs	r2, #8
 810400e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8104010:	68f8      	ldr	r0, [r7, #12]
 8104012:	f000 f838 	bl	8104086 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8104016:	68fb      	ldr	r3, [r7, #12]
 8104018:	2208      	movs	r2, #8
 810401a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810401e:	68fb      	ldr	r3, [r7, #12]
 8104020:	2200      	movs	r2, #0
 8104022:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8104026:	2301      	movs	r3, #1
 8104028:	e029      	b.n	810407e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 810402a:	68fb      	ldr	r3, [r7, #12]
 810402c:	681b      	ldr	r3, [r3, #0]
 810402e:	69db      	ldr	r3, [r3, #28]
 8104030:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8104034:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8104038:	d111      	bne.n	810405e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810403a:	68fb      	ldr	r3, [r7, #12]
 810403c:	681b      	ldr	r3, [r3, #0]
 810403e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8104042:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8104044:	68f8      	ldr	r0, [r7, #12]
 8104046:	f000 f81e 	bl	8104086 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 810404a:	68fb      	ldr	r3, [r7, #12]
 810404c:	2220      	movs	r2, #32
 810404e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8104052:	68fb      	ldr	r3, [r7, #12]
 8104054:	2200      	movs	r2, #0
 8104056:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 810405a:	2303      	movs	r3, #3
 810405c:	e00f      	b.n	810407e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 810405e:	68fb      	ldr	r3, [r7, #12]
 8104060:	681b      	ldr	r3, [r3, #0]
 8104062:	69da      	ldr	r2, [r3, #28]
 8104064:	68bb      	ldr	r3, [r7, #8]
 8104066:	4013      	ands	r3, r2
 8104068:	68ba      	ldr	r2, [r7, #8]
 810406a:	429a      	cmp	r2, r3
 810406c:	bf0c      	ite	eq
 810406e:	2301      	moveq	r3, #1
 8104070:	2300      	movne	r3, #0
 8104072:	b2db      	uxtb	r3, r3
 8104074:	461a      	mov	r2, r3
 8104076:	79fb      	ldrb	r3, [r7, #7]
 8104078:	429a      	cmp	r2, r3
 810407a:	d0a0      	beq.n	8103fbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 810407c:	2300      	movs	r3, #0
}
 810407e:	4618      	mov	r0, r3
 8104080:	3710      	adds	r7, #16
 8104082:	46bd      	mov	sp, r7
 8104084:	bd80      	pop	{r7, pc}

08104086 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8104086:	b480      	push	{r7}
 8104088:	b095      	sub	sp, #84	@ 0x54
 810408a:	af00      	add	r7, sp, #0
 810408c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 810408e:	687b      	ldr	r3, [r7, #4]
 8104090:	681b      	ldr	r3, [r3, #0]
 8104092:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8104096:	e853 3f00 	ldrex	r3, [r3]
 810409a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 810409c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 810409e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 81040a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 81040a4:	687b      	ldr	r3, [r7, #4]
 81040a6:	681b      	ldr	r3, [r3, #0]
 81040a8:	461a      	mov	r2, r3
 81040aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 81040ac:	643b      	str	r3, [r7, #64]	@ 0x40
 81040ae:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81040b0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 81040b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 81040b4:	e841 2300 	strex	r3, r2, [r1]
 81040b8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 81040ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 81040bc:	2b00      	cmp	r3, #0
 81040be:	d1e6      	bne.n	810408e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81040c0:	687b      	ldr	r3, [r7, #4]
 81040c2:	681b      	ldr	r3, [r3, #0]
 81040c4:	3308      	adds	r3, #8
 81040c6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81040c8:	6a3b      	ldr	r3, [r7, #32]
 81040ca:	e853 3f00 	ldrex	r3, [r3]
 81040ce:	61fb      	str	r3, [r7, #28]
   return(result);
 81040d0:	69fb      	ldr	r3, [r7, #28]
 81040d2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 81040d6:	f023 0301 	bic.w	r3, r3, #1
 81040da:	64bb      	str	r3, [r7, #72]	@ 0x48
 81040dc:	687b      	ldr	r3, [r7, #4]
 81040de:	681b      	ldr	r3, [r3, #0]
 81040e0:	3308      	adds	r3, #8
 81040e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 81040e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 81040e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81040e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 81040ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 81040ec:	e841 2300 	strex	r3, r2, [r1]
 81040f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 81040f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 81040f4:	2b00      	cmp	r3, #0
 81040f6:	d1e3      	bne.n	81040c0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81040f8:	687b      	ldr	r3, [r7, #4]
 81040fa:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 81040fc:	2b01      	cmp	r3, #1
 81040fe:	d118      	bne.n	8104132 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104100:	687b      	ldr	r3, [r7, #4]
 8104102:	681b      	ldr	r3, [r3, #0]
 8104104:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104106:	68fb      	ldr	r3, [r7, #12]
 8104108:	e853 3f00 	ldrex	r3, [r3]
 810410c:	60bb      	str	r3, [r7, #8]
   return(result);
 810410e:	68bb      	ldr	r3, [r7, #8]
 8104110:	f023 0310 	bic.w	r3, r3, #16
 8104114:	647b      	str	r3, [r7, #68]	@ 0x44
 8104116:	687b      	ldr	r3, [r7, #4]
 8104118:	681b      	ldr	r3, [r3, #0]
 810411a:	461a      	mov	r2, r3
 810411c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 810411e:	61bb      	str	r3, [r7, #24]
 8104120:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104122:	6979      	ldr	r1, [r7, #20]
 8104124:	69ba      	ldr	r2, [r7, #24]
 8104126:	e841 2300 	strex	r3, r2, [r1]
 810412a:	613b      	str	r3, [r7, #16]
   return(result);
 810412c:	693b      	ldr	r3, [r7, #16]
 810412e:	2b00      	cmp	r3, #0
 8104130:	d1e6      	bne.n	8104100 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8104132:	687b      	ldr	r3, [r7, #4]
 8104134:	2220      	movs	r2, #32
 8104136:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810413a:	687b      	ldr	r3, [r7, #4]
 810413c:	2200      	movs	r2, #0
 810413e:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8104140:	687b      	ldr	r3, [r7, #4]
 8104142:	2200      	movs	r2, #0
 8104144:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8104146:	bf00      	nop
 8104148:	3754      	adds	r7, #84	@ 0x54
 810414a:	46bd      	mov	sp, r7
 810414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104150:	4770      	bx	lr

08104152 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8104152:	b480      	push	{r7}
 8104154:	b085      	sub	sp, #20
 8104156:	af00      	add	r7, sp, #0
 8104158:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 810415a:	687b      	ldr	r3, [r7, #4]
 810415c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8104160:	2b01      	cmp	r3, #1
 8104162:	d101      	bne.n	8104168 <HAL_UARTEx_DisableFifoMode+0x16>
 8104164:	2302      	movs	r3, #2
 8104166:	e027      	b.n	81041b8 <HAL_UARTEx_DisableFifoMode+0x66>
 8104168:	687b      	ldr	r3, [r7, #4]
 810416a:	2201      	movs	r2, #1
 810416c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8104170:	687b      	ldr	r3, [r7, #4]
 8104172:	2224      	movs	r2, #36	@ 0x24
 8104174:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104178:	687b      	ldr	r3, [r7, #4]
 810417a:	681b      	ldr	r3, [r3, #0]
 810417c:	681b      	ldr	r3, [r3, #0]
 810417e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104180:	687b      	ldr	r3, [r7, #4]
 8104182:	681b      	ldr	r3, [r3, #0]
 8104184:	681a      	ldr	r2, [r3, #0]
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	681b      	ldr	r3, [r3, #0]
 810418a:	f022 0201 	bic.w	r2, r2, #1
 810418e:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8104190:	68fb      	ldr	r3, [r7, #12]
 8104192:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8104196:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8104198:	687b      	ldr	r3, [r7, #4]
 810419a:	2200      	movs	r2, #0
 810419c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810419e:	687b      	ldr	r3, [r7, #4]
 81041a0:	681b      	ldr	r3, [r3, #0]
 81041a2:	68fa      	ldr	r2, [r7, #12]
 81041a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81041a6:	687b      	ldr	r3, [r7, #4]
 81041a8:	2220      	movs	r2, #32
 81041aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81041ae:	687b      	ldr	r3, [r7, #4]
 81041b0:	2200      	movs	r2, #0
 81041b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81041b6:	2300      	movs	r3, #0
}
 81041b8:	4618      	mov	r0, r3
 81041ba:	3714      	adds	r7, #20
 81041bc:	46bd      	mov	sp, r7
 81041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81041c2:	4770      	bx	lr

081041c4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81041c4:	b580      	push	{r7, lr}
 81041c6:	b084      	sub	sp, #16
 81041c8:	af00      	add	r7, sp, #0
 81041ca:	6078      	str	r0, [r7, #4]
 81041cc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81041ce:	687b      	ldr	r3, [r7, #4]
 81041d0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 81041d4:	2b01      	cmp	r3, #1
 81041d6:	d101      	bne.n	81041dc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 81041d8:	2302      	movs	r3, #2
 81041da:	e02d      	b.n	8104238 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 81041dc:	687b      	ldr	r3, [r7, #4]
 81041de:	2201      	movs	r2, #1
 81041e0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81041e4:	687b      	ldr	r3, [r7, #4]
 81041e6:	2224      	movs	r2, #36	@ 0x24
 81041e8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 81041ec:	687b      	ldr	r3, [r7, #4]
 81041ee:	681b      	ldr	r3, [r3, #0]
 81041f0:	681b      	ldr	r3, [r3, #0]
 81041f2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 81041f4:	687b      	ldr	r3, [r7, #4]
 81041f6:	681b      	ldr	r3, [r3, #0]
 81041f8:	681a      	ldr	r2, [r3, #0]
 81041fa:	687b      	ldr	r3, [r7, #4]
 81041fc:	681b      	ldr	r3, [r3, #0]
 81041fe:	f022 0201 	bic.w	r2, r2, #1
 8104202:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8104204:	687b      	ldr	r3, [r7, #4]
 8104206:	681b      	ldr	r3, [r3, #0]
 8104208:	689b      	ldr	r3, [r3, #8]
 810420a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	681b      	ldr	r3, [r3, #0]
 8104212:	683a      	ldr	r2, [r7, #0]
 8104214:	430a      	orrs	r2, r1
 8104216:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104218:	6878      	ldr	r0, [r7, #4]
 810421a:	f000 f84f 	bl	81042bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810421e:	687b      	ldr	r3, [r7, #4]
 8104220:	681b      	ldr	r3, [r3, #0]
 8104222:	68fa      	ldr	r2, [r7, #12]
 8104224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8104226:	687b      	ldr	r3, [r7, #4]
 8104228:	2220      	movs	r2, #32
 810422a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 810422e:	687b      	ldr	r3, [r7, #4]
 8104230:	2200      	movs	r2, #0
 8104232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8104236:	2300      	movs	r3, #0
}
 8104238:	4618      	mov	r0, r3
 810423a:	3710      	adds	r7, #16
 810423c:	46bd      	mov	sp, r7
 810423e:	bd80      	pop	{r7, pc}

08104240 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8104240:	b580      	push	{r7, lr}
 8104242:	b084      	sub	sp, #16
 8104244:	af00      	add	r7, sp, #0
 8104246:	6078      	str	r0, [r7, #4]
 8104248:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 810424a:	687b      	ldr	r3, [r7, #4]
 810424c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8104250:	2b01      	cmp	r3, #1
 8104252:	d101      	bne.n	8104258 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8104254:	2302      	movs	r3, #2
 8104256:	e02d      	b.n	81042b4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8104258:	687b      	ldr	r3, [r7, #4]
 810425a:	2201      	movs	r2, #1
 810425c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8104260:	687b      	ldr	r3, [r7, #4]
 8104262:	2224      	movs	r2, #36	@ 0x24
 8104264:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8104268:	687b      	ldr	r3, [r7, #4]
 810426a:	681b      	ldr	r3, [r3, #0]
 810426c:	681b      	ldr	r3, [r3, #0]
 810426e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8104270:	687b      	ldr	r3, [r7, #4]
 8104272:	681b      	ldr	r3, [r3, #0]
 8104274:	681a      	ldr	r2, [r3, #0]
 8104276:	687b      	ldr	r3, [r7, #4]
 8104278:	681b      	ldr	r3, [r3, #0]
 810427a:	f022 0201 	bic.w	r2, r2, #1
 810427e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8104280:	687b      	ldr	r3, [r7, #4]
 8104282:	681b      	ldr	r3, [r3, #0]
 8104284:	689b      	ldr	r3, [r3, #8]
 8104286:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 810428a:	687b      	ldr	r3, [r7, #4]
 810428c:	681b      	ldr	r3, [r3, #0]
 810428e:	683a      	ldr	r2, [r7, #0]
 8104290:	430a      	orrs	r2, r1
 8104292:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8104294:	6878      	ldr	r0, [r7, #4]
 8104296:	f000 f811 	bl	81042bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 810429a:	687b      	ldr	r3, [r7, #4]
 810429c:	681b      	ldr	r3, [r3, #0]
 810429e:	68fa      	ldr	r2, [r7, #12]
 81042a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81042a2:	687b      	ldr	r3, [r7, #4]
 81042a4:	2220      	movs	r2, #32
 81042a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	2200      	movs	r2, #0
 81042ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 81042b2:	2300      	movs	r3, #0
}
 81042b4:	4618      	mov	r0, r3
 81042b6:	3710      	adds	r7, #16
 81042b8:	46bd      	mov	sp, r7
 81042ba:	bd80      	pop	{r7, pc}

081042bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 81042bc:	b480      	push	{r7}
 81042be:	b085      	sub	sp, #20
 81042c0:	af00      	add	r7, sp, #0
 81042c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 81042c8:	2b00      	cmp	r3, #0
 81042ca:	d108      	bne.n	81042de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 81042cc:	687b      	ldr	r3, [r7, #4]
 81042ce:	2201      	movs	r2, #1
 81042d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 81042d4:	687b      	ldr	r3, [r7, #4]
 81042d6:	2201      	movs	r2, #1
 81042d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 81042dc:	e031      	b.n	8104342 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 81042de:	2310      	movs	r3, #16
 81042e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 81042e2:	2310      	movs	r3, #16
 81042e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 81042e6:	687b      	ldr	r3, [r7, #4]
 81042e8:	681b      	ldr	r3, [r3, #0]
 81042ea:	689b      	ldr	r3, [r3, #8]
 81042ec:	0e5b      	lsrs	r3, r3, #25
 81042ee:	b2db      	uxtb	r3, r3
 81042f0:	f003 0307 	and.w	r3, r3, #7
 81042f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 81042f6:	687b      	ldr	r3, [r7, #4]
 81042f8:	681b      	ldr	r3, [r3, #0]
 81042fa:	689b      	ldr	r3, [r3, #8]
 81042fc:	0f5b      	lsrs	r3, r3, #29
 81042fe:	b2db      	uxtb	r3, r3
 8104300:	f003 0307 	and.w	r3, r3, #7
 8104304:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8104306:	7bbb      	ldrb	r3, [r7, #14]
 8104308:	7b3a      	ldrb	r2, [r7, #12]
 810430a:	4911      	ldr	r1, [pc, #68]	@ (8104350 <UARTEx_SetNbDataToProcess+0x94>)
 810430c:	5c8a      	ldrb	r2, [r1, r2]
 810430e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8104312:	7b3a      	ldrb	r2, [r7, #12]
 8104314:	490f      	ldr	r1, [pc, #60]	@ (8104354 <UARTEx_SetNbDataToProcess+0x98>)
 8104316:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8104318:	fb93 f3f2 	sdiv	r3, r3, r2
 810431c:	b29a      	uxth	r2, r3
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8104324:	7bfb      	ldrb	r3, [r7, #15]
 8104326:	7b7a      	ldrb	r2, [r7, #13]
 8104328:	4909      	ldr	r1, [pc, #36]	@ (8104350 <UARTEx_SetNbDataToProcess+0x94>)
 810432a:	5c8a      	ldrb	r2, [r1, r2]
 810432c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8104330:	7b7a      	ldrb	r2, [r7, #13]
 8104332:	4908      	ldr	r1, [pc, #32]	@ (8104354 <UARTEx_SetNbDataToProcess+0x98>)
 8104334:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8104336:	fb93 f3f2 	sdiv	r3, r3, r2
 810433a:	b29a      	uxth	r2, r3
 810433c:	687b      	ldr	r3, [r7, #4]
 810433e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8104342:	bf00      	nop
 8104344:	3714      	adds	r7, #20
 8104346:	46bd      	mov	sp, r7
 8104348:	f85d 7b04 	ldr.w	r7, [sp], #4
 810434c:	4770      	bx	lr
 810434e:	bf00      	nop
 8104350:	081043f0 	.word	0x081043f0
 8104354:	081043f8 	.word	0x081043f8

08104358 <memset>:
 8104358:	4402      	add	r2, r0
 810435a:	4603      	mov	r3, r0
 810435c:	4293      	cmp	r3, r2
 810435e:	d100      	bne.n	8104362 <memset+0xa>
 8104360:	4770      	bx	lr
 8104362:	f803 1b01 	strb.w	r1, [r3], #1
 8104366:	e7f9      	b.n	810435c <memset+0x4>

08104368 <__libc_init_array>:
 8104368:	b570      	push	{r4, r5, r6, lr}
 810436a:	4d0d      	ldr	r5, [pc, #52]	@ (81043a0 <__libc_init_array+0x38>)
 810436c:	4c0d      	ldr	r4, [pc, #52]	@ (81043a4 <__libc_init_array+0x3c>)
 810436e:	1b64      	subs	r4, r4, r5
 8104370:	10a4      	asrs	r4, r4, #2
 8104372:	2600      	movs	r6, #0
 8104374:	42a6      	cmp	r6, r4
 8104376:	d109      	bne.n	810438c <__libc_init_array+0x24>
 8104378:	4d0b      	ldr	r5, [pc, #44]	@ (81043a8 <__libc_init_array+0x40>)
 810437a:	4c0c      	ldr	r4, [pc, #48]	@ (81043ac <__libc_init_array+0x44>)
 810437c:	f000 f818 	bl	81043b0 <_init>
 8104380:	1b64      	subs	r4, r4, r5
 8104382:	10a4      	asrs	r4, r4, #2
 8104384:	2600      	movs	r6, #0
 8104386:	42a6      	cmp	r6, r4
 8104388:	d105      	bne.n	8104396 <__libc_init_array+0x2e>
 810438a:	bd70      	pop	{r4, r5, r6, pc}
 810438c:	f855 3b04 	ldr.w	r3, [r5], #4
 8104390:	4798      	blx	r3
 8104392:	3601      	adds	r6, #1
 8104394:	e7ee      	b.n	8104374 <__libc_init_array+0xc>
 8104396:	f855 3b04 	ldr.w	r3, [r5], #4
 810439a:	4798      	blx	r3
 810439c:	3601      	adds	r6, #1
 810439e:	e7f2      	b.n	8104386 <__libc_init_array+0x1e>
 81043a0:	08104408 	.word	0x08104408
 81043a4:	08104408 	.word	0x08104408
 81043a8:	08104408 	.word	0x08104408
 81043ac:	0810440c 	.word	0x0810440c

081043b0 <_init>:
 81043b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81043b2:	bf00      	nop
 81043b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81043b6:	bc08      	pop	{r3}
 81043b8:	469e      	mov	lr, r3
 81043ba:	4770      	bx	lr

081043bc <_fini>:
 81043bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 81043be:	bf00      	nop
 81043c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81043c2:	bc08      	pop	{r3}
 81043c4:	469e      	mov	lr, r3
 81043c6:	4770      	bx	lr
