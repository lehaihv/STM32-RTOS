
BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c24c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00004fbc  0800c3e0  0800c3e0  0000d3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801139c  0801139c  000131d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801139c  0801139c  0001239c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080113a4  080113a4  000131d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080113a4  080113a4  000123a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080113a8  080113a8  000123a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080113ac  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  200001d4  08011580  000131d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009c0  08011580  000139c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000131d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000108fe  00000000  00000000  00013204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027b2  00000000  00000000  00023b02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000262b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b29  00000000  00000000  00027140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027cc9  00000000  00000000  00027c69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001298e  00000000  00000000  0004f932  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edb40  00000000  00000000  000622c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014fe00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052e0  00000000  00000000  0014fe44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00155124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c3c4 	.word	0x0800c3c4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800c3c4 	.word	0x0800c3c4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ca6:	f000 b9eb 	b.w	8001080 <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d3c:	f000 b9a0 	b.w	8001080 <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	460c      	mov	r4, r1
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d14e      	bne.n	8000e6e <__udivmoddi4+0xaa>
 8000dd0:	4694      	mov	ip, r2
 8000dd2:	458c      	cmp	ip, r1
 8000dd4:	4686      	mov	lr, r0
 8000dd6:	fab2 f282 	clz	r2, r2
 8000dda:	d962      	bls.n	8000ea2 <__udivmoddi4+0xde>
 8000ddc:	b14a      	cbz	r2, 8000df2 <__udivmoddi4+0x2e>
 8000dde:	f1c2 0320 	rsb	r3, r2, #32
 8000de2:	4091      	lsls	r1, r2
 8000de4:	fa20 f303 	lsr.w	r3, r0, r3
 8000de8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dec:	4319      	orrs	r1, r3
 8000dee:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df6:	fa1f f68c 	uxth.w	r6, ip
 8000dfa:	fbb1 f4f7 	udiv	r4, r1, r7
 8000dfe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e02:	fb07 1114 	mls	r1, r7, r4, r1
 8000e06:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0a:	fb04 f106 	mul.w	r1, r4, r6
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	d90a      	bls.n	8000e28 <__udivmoddi4+0x64>
 8000e12:	eb1c 0303 	adds.w	r3, ip, r3
 8000e16:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000e1a:	f080 8112 	bcs.w	8001042 <__udivmoddi4+0x27e>
 8000e1e:	4299      	cmp	r1, r3
 8000e20:	f240 810f 	bls.w	8001042 <__udivmoddi4+0x27e>
 8000e24:	3c02      	subs	r4, #2
 8000e26:	4463      	add	r3, ip
 8000e28:	1a59      	subs	r1, r3, r1
 8000e2a:	fa1f f38e 	uxth.w	r3, lr
 8000e2e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e32:	fb07 1110 	mls	r1, r7, r0, r1
 8000e36:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3a:	fb00 f606 	mul.w	r6, r0, r6
 8000e3e:	429e      	cmp	r6, r3
 8000e40:	d90a      	bls.n	8000e58 <__udivmoddi4+0x94>
 8000e42:	eb1c 0303 	adds.w	r3, ip, r3
 8000e46:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000e4a:	f080 80fc 	bcs.w	8001046 <__udivmoddi4+0x282>
 8000e4e:	429e      	cmp	r6, r3
 8000e50:	f240 80f9 	bls.w	8001046 <__udivmoddi4+0x282>
 8000e54:	4463      	add	r3, ip
 8000e56:	3802      	subs	r0, #2
 8000e58:	1b9b      	subs	r3, r3, r6
 8000e5a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e5e:	2100      	movs	r1, #0
 8000e60:	b11d      	cbz	r5, 8000e6a <__udivmoddi4+0xa6>
 8000e62:	40d3      	lsrs	r3, r2
 8000e64:	2200      	movs	r2, #0
 8000e66:	e9c5 3200 	strd	r3, r2, [r5]
 8000e6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6e:	428b      	cmp	r3, r1
 8000e70:	d905      	bls.n	8000e7e <__udivmoddi4+0xba>
 8000e72:	b10d      	cbz	r5, 8000e78 <__udivmoddi4+0xb4>
 8000e74:	e9c5 0100 	strd	r0, r1, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	4608      	mov	r0, r1
 8000e7c:	e7f5      	b.n	8000e6a <__udivmoddi4+0xa6>
 8000e7e:	fab3 f183 	clz	r1, r3
 8000e82:	2900      	cmp	r1, #0
 8000e84:	d146      	bne.n	8000f14 <__udivmoddi4+0x150>
 8000e86:	42a3      	cmp	r3, r4
 8000e88:	d302      	bcc.n	8000e90 <__udivmoddi4+0xcc>
 8000e8a:	4290      	cmp	r0, r2
 8000e8c:	f0c0 80f0 	bcc.w	8001070 <__udivmoddi4+0x2ac>
 8000e90:	1a86      	subs	r6, r0, r2
 8000e92:	eb64 0303 	sbc.w	r3, r4, r3
 8000e96:	2001      	movs	r0, #1
 8000e98:	2d00      	cmp	r5, #0
 8000e9a:	d0e6      	beq.n	8000e6a <__udivmoddi4+0xa6>
 8000e9c:	e9c5 6300 	strd	r6, r3, [r5]
 8000ea0:	e7e3      	b.n	8000e6a <__udivmoddi4+0xa6>
 8000ea2:	2a00      	cmp	r2, #0
 8000ea4:	f040 8090 	bne.w	8000fc8 <__udivmoddi4+0x204>
 8000ea8:	eba1 040c 	sub.w	r4, r1, ip
 8000eac:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb0:	fa1f f78c 	uxth.w	r7, ip
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eba:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ebe:	fb08 4416 	mls	r4, r8, r6, r4
 8000ec2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ec6:	fb07 f006 	mul.w	r0, r7, r6
 8000eca:	4298      	cmp	r0, r3
 8000ecc:	d908      	bls.n	8000ee0 <__udivmoddi4+0x11c>
 8000ece:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed2:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000ed6:	d202      	bcs.n	8000ede <__udivmoddi4+0x11a>
 8000ed8:	4298      	cmp	r0, r3
 8000eda:	f200 80cd 	bhi.w	8001078 <__udivmoddi4+0x2b4>
 8000ede:	4626      	mov	r6, r4
 8000ee0:	1a1c      	subs	r4, r3, r0
 8000ee2:	fa1f f38e 	uxth.w	r3, lr
 8000ee6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eea:	fb08 4410 	mls	r4, r8, r0, r4
 8000eee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef2:	fb00 f707 	mul.w	r7, r0, r7
 8000ef6:	429f      	cmp	r7, r3
 8000ef8:	d908      	bls.n	8000f0c <__udivmoddi4+0x148>
 8000efa:	eb1c 0303 	adds.w	r3, ip, r3
 8000efe:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000f02:	d202      	bcs.n	8000f0a <__udivmoddi4+0x146>
 8000f04:	429f      	cmp	r7, r3
 8000f06:	f200 80b0 	bhi.w	800106a <__udivmoddi4+0x2a6>
 8000f0a:	4620      	mov	r0, r4
 8000f0c:	1bdb      	subs	r3, r3, r7
 8000f0e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f12:	e7a5      	b.n	8000e60 <__udivmoddi4+0x9c>
 8000f14:	f1c1 0620 	rsb	r6, r1, #32
 8000f18:	408b      	lsls	r3, r1
 8000f1a:	fa22 f706 	lsr.w	r7, r2, r6
 8000f1e:	431f      	orrs	r7, r3
 8000f20:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f24:	fa04 f301 	lsl.w	r3, r4, r1
 8000f28:	ea43 030c 	orr.w	r3, r3, ip
 8000f2c:	40f4      	lsrs	r4, r6
 8000f2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f32:	0c38      	lsrs	r0, r7, #16
 8000f34:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f38:	fbb4 fef0 	udiv	lr, r4, r0
 8000f3c:	fa1f fc87 	uxth.w	ip, r7
 8000f40:	fb00 441e 	mls	r4, r0, lr, r4
 8000f44:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f48:	fb0e f90c 	mul.w	r9, lr, ip
 8000f4c:	45a1      	cmp	r9, r4
 8000f4e:	fa02 f201 	lsl.w	r2, r2, r1
 8000f52:	d90a      	bls.n	8000f6a <__udivmoddi4+0x1a6>
 8000f54:	193c      	adds	r4, r7, r4
 8000f56:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000f5a:	f080 8084 	bcs.w	8001066 <__udivmoddi4+0x2a2>
 8000f5e:	45a1      	cmp	r9, r4
 8000f60:	f240 8081 	bls.w	8001066 <__udivmoddi4+0x2a2>
 8000f64:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f68:	443c      	add	r4, r7
 8000f6a:	eba4 0409 	sub.w	r4, r4, r9
 8000f6e:	fa1f f983 	uxth.w	r9, r3
 8000f72:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f76:	fb00 4413 	mls	r4, r0, r3, r4
 8000f7a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f7e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f82:	45a4      	cmp	ip, r4
 8000f84:	d907      	bls.n	8000f96 <__udivmoddi4+0x1d2>
 8000f86:	193c      	adds	r4, r7, r4
 8000f88:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000f8c:	d267      	bcs.n	800105e <__udivmoddi4+0x29a>
 8000f8e:	45a4      	cmp	ip, r4
 8000f90:	d965      	bls.n	800105e <__udivmoddi4+0x29a>
 8000f92:	3b02      	subs	r3, #2
 8000f94:	443c      	add	r4, r7
 8000f96:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f9a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f9e:	eba4 040c 	sub.w	r4, r4, ip
 8000fa2:	429c      	cmp	r4, r3
 8000fa4:	46ce      	mov	lr, r9
 8000fa6:	469c      	mov	ip, r3
 8000fa8:	d351      	bcc.n	800104e <__udivmoddi4+0x28a>
 8000faa:	d04e      	beq.n	800104a <__udivmoddi4+0x286>
 8000fac:	b155      	cbz	r5, 8000fc4 <__udivmoddi4+0x200>
 8000fae:	ebb8 030e 	subs.w	r3, r8, lr
 8000fb2:	eb64 040c 	sbc.w	r4, r4, ip
 8000fb6:	fa04 f606 	lsl.w	r6, r4, r6
 8000fba:	40cb      	lsrs	r3, r1
 8000fbc:	431e      	orrs	r6, r3
 8000fbe:	40cc      	lsrs	r4, r1
 8000fc0:	e9c5 6400 	strd	r6, r4, [r5]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	e750      	b.n	8000e6a <__udivmoddi4+0xa6>
 8000fc8:	f1c2 0320 	rsb	r3, r2, #32
 8000fcc:	fa20 f103 	lsr.w	r1, r0, r3
 8000fd0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd4:	fa24 f303 	lsr.w	r3, r4, r3
 8000fd8:	4094      	lsls	r4, r2
 8000fda:	430c      	orrs	r4, r1
 8000fdc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fe0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fe4:	fa1f f78c 	uxth.w	r7, ip
 8000fe8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fec:	fb08 3110 	mls	r1, r8, r0, r3
 8000ff0:	0c23      	lsrs	r3, r4, #16
 8000ff2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ff6:	fb00 f107 	mul.w	r1, r0, r7
 8000ffa:	4299      	cmp	r1, r3
 8000ffc:	d908      	bls.n	8001010 <__udivmoddi4+0x24c>
 8000ffe:	eb1c 0303 	adds.w	r3, ip, r3
 8001002:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001006:	d22c      	bcs.n	8001062 <__udivmoddi4+0x29e>
 8001008:	4299      	cmp	r1, r3
 800100a:	d92a      	bls.n	8001062 <__udivmoddi4+0x29e>
 800100c:	3802      	subs	r0, #2
 800100e:	4463      	add	r3, ip
 8001010:	1a5b      	subs	r3, r3, r1
 8001012:	b2a4      	uxth	r4, r4
 8001014:	fbb3 f1f8 	udiv	r1, r3, r8
 8001018:	fb08 3311 	mls	r3, r8, r1, r3
 800101c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001020:	fb01 f307 	mul.w	r3, r1, r7
 8001024:	42a3      	cmp	r3, r4
 8001026:	d908      	bls.n	800103a <__udivmoddi4+0x276>
 8001028:	eb1c 0404 	adds.w	r4, ip, r4
 800102c:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8001030:	d213      	bcs.n	800105a <__udivmoddi4+0x296>
 8001032:	42a3      	cmp	r3, r4
 8001034:	d911      	bls.n	800105a <__udivmoddi4+0x296>
 8001036:	3902      	subs	r1, #2
 8001038:	4464      	add	r4, ip
 800103a:	1ae4      	subs	r4, r4, r3
 800103c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001040:	e739      	b.n	8000eb6 <__udivmoddi4+0xf2>
 8001042:	4604      	mov	r4, r0
 8001044:	e6f0      	b.n	8000e28 <__udivmoddi4+0x64>
 8001046:	4608      	mov	r0, r1
 8001048:	e706      	b.n	8000e58 <__udivmoddi4+0x94>
 800104a:	45c8      	cmp	r8, r9
 800104c:	d2ae      	bcs.n	8000fac <__udivmoddi4+0x1e8>
 800104e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001052:	eb63 0c07 	sbc.w	ip, r3, r7
 8001056:	3801      	subs	r0, #1
 8001058:	e7a8      	b.n	8000fac <__udivmoddi4+0x1e8>
 800105a:	4631      	mov	r1, r6
 800105c:	e7ed      	b.n	800103a <__udivmoddi4+0x276>
 800105e:	4603      	mov	r3, r0
 8001060:	e799      	b.n	8000f96 <__udivmoddi4+0x1d2>
 8001062:	4630      	mov	r0, r6
 8001064:	e7d4      	b.n	8001010 <__udivmoddi4+0x24c>
 8001066:	46d6      	mov	lr, sl
 8001068:	e77f      	b.n	8000f6a <__udivmoddi4+0x1a6>
 800106a:	4463      	add	r3, ip
 800106c:	3802      	subs	r0, #2
 800106e:	e74d      	b.n	8000f0c <__udivmoddi4+0x148>
 8001070:	4606      	mov	r6, r0
 8001072:	4623      	mov	r3, r4
 8001074:	4608      	mov	r0, r1
 8001076:	e70f      	b.n	8000e98 <__udivmoddi4+0xd4>
 8001078:	3e02      	subs	r6, #2
 800107a:	4463      	add	r3, ip
 800107c:	e730      	b.n	8000ee0 <__udivmoddi4+0x11c>
 800107e:	bf00      	nop

08001080 <__aeabi_idiv0>:
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop

08001084 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2203      	movs	r2, #3
 8001090:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2203      	movs	r2, #3
 800109c:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2203      	movs	r2, #3
 80010a2:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	2203      	movs	r2, #3
 80010a8:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	2203      	movs	r2, #3
 80010ae:	715a      	strb	r2, [r3, #5]
}
 80010b0:	bf00      	nop
 80010b2:	370c      	adds	r7, #12
 80010b4:	46bd      	mov	sp, r7
 80010b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ba:	4770      	bx	lr

080010bc <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 80010bc:	b580      	push	{r7, lr}
 80010be:	b08a      	sub	sp, #40	@ 0x28
 80010c0:	af04      	add	r7, sp, #16
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	460b      	mov	r3, r1
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80010ce:	005b      	lsls	r3, r3, #1
 80010d0:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 80010d6:	7afb      	ldrb	r3, [r7, #11]
 80010d8:	b29a      	uxth	r2, r3
 80010da:	8af9      	ldrh	r1, [r7, #22]
 80010dc:	f241 3388 	movw	r3, #5000	@ 0x1388
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	2302      	movs	r3, #2
 80010e4:	9301      	str	r3, [sp, #4]
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	2301      	movs	r3, #1
 80010ee:	f001 ffa3 	bl	8003038 <HAL_I2C_Mem_Read>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d10b      	bne.n	8001110 <read_register16+0x54>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7d3b      	ldrb	r3, [r7, #20]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21b      	sxth	r3, r3
 8001106:	b29a      	uxth	r2, r3
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	801a      	strh	r2, [r3, #0]
		return true;
 800110c:	2301      	movs	r3, #1
 800110e:	e000      	b.n	8001112 <read_register16+0x56>
	} else
		return false;
 8001110:	2300      	movs	r3, #0

}
 8001112:	4618      	mov	r0, r3
 8001114:	3718      	adds	r7, #24
 8001116:	46bd      	mov	sp, r7
 8001118:	bd80      	pop	{r7, pc}

0800111a <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800111a:	b590      	push	{r4, r7, lr}
 800111c:	b08b      	sub	sp, #44	@ 0x2c
 800111e:	af04      	add	r7, sp, #16
 8001120:	60f8      	str	r0, [r7, #12]
 8001122:	607a      	str	r2, [r7, #4]
 8001124:	461a      	mov	r2, r3
 8001126:	460b      	mov	r3, r1
 8001128:	72fb      	strb	r3, [r7, #11]
 800112a:	4613      	mov	r3, r2
 800112c:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800113a:	7afb      	ldrb	r3, [r7, #11]
 800113c:	b29a      	uxth	r2, r3
 800113e:	7abb      	ldrb	r3, [r7, #10]
 8001140:	b29b      	uxth	r3, r3
 8001142:	8af9      	ldrh	r1, [r7, #22]
 8001144:	f241 3488 	movw	r4, #5000	@ 0x1388
 8001148:	9402      	str	r4, [sp, #8]
 800114a:	9301      	str	r3, [sp, #4]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2301      	movs	r3, #1
 8001152:	f001 ff71 	bl	8003038 <HAL_I2C_Mem_Read>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d101      	bne.n	8001160 <read_data+0x46>
		return 0;
 800115c:	2300      	movs	r3, #0
 800115e:	e000      	b.n	8001162 <read_data+0x48>
	else
		return 1;
 8001160:	2301      	movs	r3, #1

}
 8001162:	4618      	mov	r0, r3
 8001164:	371c      	adds	r7, #28
 8001166:	46bd      	mov	sp, r7
 8001168:	bd90      	pop	{r4, r7, pc}

0800116a <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 800116a:	b580      	push	{r7, lr}
 800116c:	b082      	sub	sp, #8
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	461a      	mov	r2, r3
 8001176:	2188      	movs	r1, #136	@ 0x88
 8001178:	6878      	ldr	r0, [r7, #4]
 800117a:	f7ff ff9f 	bl	80010bc <read_register16>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d06f      	beq.n	8001264 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3302      	adds	r3, #2
 8001188:	461a      	mov	r2, r3
 800118a:	218a      	movs	r1, #138	@ 0x8a
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff95 	bl	80010bc <read_register16>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d065      	beq.n	8001264 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	3304      	adds	r3, #4
 800119c:	461a      	mov	r2, r3
 800119e:	218c      	movs	r1, #140	@ 0x8c
 80011a0:	6878      	ldr	r0, [r7, #4]
 80011a2:	f7ff ff8b 	bl	80010bc <read_register16>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d05b      	beq.n	8001264 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3306      	adds	r3, #6
 80011b0:	461a      	mov	r2, r3
 80011b2:	218e      	movs	r1, #142	@ 0x8e
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff ff81 	bl	80010bc <read_register16>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d051      	beq.n	8001264 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3308      	adds	r3, #8
 80011c4:	461a      	mov	r2, r3
 80011c6:	2190      	movs	r1, #144	@ 0x90
 80011c8:	6878      	ldr	r0, [r7, #4]
 80011ca:	f7ff ff77 	bl	80010bc <read_register16>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d047      	beq.n	8001264 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	330a      	adds	r3, #10
 80011d8:	461a      	mov	r2, r3
 80011da:	2192      	movs	r1, #146	@ 0x92
 80011dc:	6878      	ldr	r0, [r7, #4]
 80011de:	f7ff ff6d 	bl	80010bc <read_register16>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d03d      	beq.n	8001264 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	330c      	adds	r3, #12
 80011ec:	461a      	mov	r2, r3
 80011ee:	2194      	movs	r1, #148	@ 0x94
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff ff63 	bl	80010bc <read_register16>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d033      	beq.n	8001264 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	330e      	adds	r3, #14
 8001200:	461a      	mov	r2, r3
 8001202:	2196      	movs	r1, #150	@ 0x96
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7ff ff59 	bl	80010bc <read_register16>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d029      	beq.n	8001264 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3310      	adds	r3, #16
 8001214:	461a      	mov	r2, r3
 8001216:	2198      	movs	r1, #152	@ 0x98
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f7ff ff4f 	bl	80010bc <read_register16>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d01f      	beq.n	8001264 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3312      	adds	r3, #18
 8001228:	461a      	mov	r2, r3
 800122a:	219a      	movs	r1, #154	@ 0x9a
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff45 	bl	80010bc <read_register16>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d015      	beq.n	8001264 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	3314      	adds	r3, #20
 800123c:	461a      	mov	r2, r3
 800123e:	219c      	movs	r1, #156	@ 0x9c
 8001240:	6878      	ldr	r0, [r7, #4]
 8001242:	f7ff ff3b 	bl	80010bc <read_register16>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d00b      	beq.n	8001264 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 8001250:	461a      	mov	r2, r3
 8001252:	219e      	movs	r1, #158	@ 0x9e
 8001254:	6878      	ldr	r0, [r7, #4]
 8001256:	f7ff ff31 	bl	80010bc <read_register16>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <read_calibration_data+0xfa>

		return true;
 8001260:	2301      	movs	r3, #1
 8001262:	e000      	b.n	8001266 <read_calibration_data+0xfc>
	}

	return false;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	3708      	adds	r7, #8
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 800126e:	b580      	push	{r7, lr}
 8001270:	b084      	sub	sp, #16
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	f103 0218 	add.w	r2, r3, #24
 800127c:	2301      	movs	r3, #1
 800127e:	21a1      	movs	r1, #161	@ 0xa1
 8001280:	6878      	ldr	r0, [r7, #4]
 8001282:	f7ff ff4a 	bl	800111a <read_data>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d14b      	bne.n	8001324 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	331a      	adds	r3, #26
 8001290:	461a      	mov	r2, r3
 8001292:	21e1      	movs	r1, #225	@ 0xe1
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff11 	bl	80010bc <read_register16>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d041      	beq.n	8001324 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f103 021c 	add.w	r2, r3, #28
 80012a6:	2301      	movs	r3, #1
 80012a8:	21e3      	movs	r1, #227	@ 0xe3
 80012aa:	6878      	ldr	r0, [r7, #4]
 80012ac:	f7ff ff35 	bl	800111a <read_data>
 80012b0:	4603      	mov	r3, r0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d136      	bne.n	8001324 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe4, &h4)
 80012b6:	f107 030e 	add.w	r3, r7, #14
 80012ba:	461a      	mov	r2, r3
 80012bc:	21e4      	movs	r1, #228	@ 0xe4
 80012be:	6878      	ldr	r0, [r7, #4]
 80012c0:	f7ff fefc 	bl	80010bc <read_register16>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d02c      	beq.n	8001324 <read_hum_calibration_data+0xb6>
			&& read_register16(dev, 0xe5, &h5)
 80012ca:	f107 030c 	add.w	r3, r7, #12
 80012ce:	461a      	mov	r2, r3
 80012d0:	21e5      	movs	r1, #229	@ 0xe5
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f7ff fef2 	bl	80010bc <read_register16>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d022      	beq.n	8001324 <read_hum_calibration_data+0xb6>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 80012e4:	2301      	movs	r3, #1
 80012e6:	21e7      	movs	r1, #231	@ 0xe7
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff ff16 	bl	800111a <read_data>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d117      	bne.n	8001324 <read_hum_calibration_data+0xb6>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 80012f4:	89fb      	ldrh	r3, [r7, #14]
 80012f6:	011b      	lsls	r3, r3, #4
 80012f8:	b21b      	sxth	r3, r3
 80012fa:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 80012fe:	b21a      	sxth	r2, r3
 8001300:	89fb      	ldrh	r3, [r7, #14]
 8001302:	121b      	asrs	r3, r3, #8
 8001304:	b21b      	sxth	r3, r3
 8001306:	f003 030f 	and.w	r3, r3, #15
 800130a:	b21b      	sxth	r3, r3
 800130c:	4313      	orrs	r3, r2
 800130e:	b21a      	sxth	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001314:	89bb      	ldrh	r3, [r7, #12]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	b29b      	uxth	r3, r3
 800131a:	b21a      	sxth	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	841a      	strh	r2, [r3, #32]

		return true;
 8001320:	2301      	movs	r3, #1
 8001322:	e000      	b.n	8001326 <read_hum_calibration_data+0xb8>
	}

	return false;
 8001324:	2300      	movs	r3, #0
}
 8001326:	4618      	mov	r0, r3
 8001328:	3710      	adds	r7, #16
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 800132e:	b580      	push	{r7, lr}
 8001330:	b088      	sub	sp, #32
 8001332:	af04      	add	r7, sp, #16
 8001334:	6078      	str	r0, [r7, #4]
 8001336:	460b      	mov	r3, r1
 8001338:	70fb      	strb	r3, [r7, #3]
 800133a:	4613      	mov	r3, r2
 800133c:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800134a:	78fb      	ldrb	r3, [r7, #3]
 800134c:	b29a      	uxth	r2, r3
 800134e:	89f9      	ldrh	r1, [r7, #14]
 8001350:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001354:	9302      	str	r3, [sp, #8]
 8001356:	2301      	movs	r3, #1
 8001358:	9301      	str	r3, [sp, #4]
 800135a:	1cbb      	adds	r3, r7, #2
 800135c:	9300      	str	r3, [sp, #0]
 800135e:	2301      	movs	r3, #1
 8001360:	f001 fd56 	bl	8002e10 <HAL_I2C_Mem_Write>
 8001364:	4603      	mov	r3, r0
 8001366:	2b00      	cmp	r3, #0
 8001368:	d101      	bne.n	800136e <write_register8+0x40>
		return false;
 800136a:	2300      	movs	r3, #0
 800136c:	e000      	b.n	8001370 <write_register8+0x42>
	else
		return true;
 800136e:	2301      	movs	r3, #1
}
 8001370:	4618      	mov	r0, r3
 8001372:	3710      	adds	r7, #16
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}

08001378 <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001386:	2b76      	cmp	r3, #118	@ 0x76
 8001388:	d005      	beq.n	8001396 <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800138e:	2b77      	cmp	r3, #119	@ 0x77
 8001390:	d001      	beq.n	8001396 <bmp280_init+0x1e>

		return false;
 8001392:	2300      	movs	r3, #0
 8001394:	e099      	b.n	80014ca <bmp280_init+0x152>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800139c:	2301      	movs	r3, #1
 800139e:	21d0      	movs	r1, #208	@ 0xd0
 80013a0:	6878      	ldr	r0, [r7, #4]
 80013a2:	f7ff feba 	bl	800111a <read_data>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <bmp280_init+0x38>
		return false;
 80013ac:	2300      	movs	r3, #0
 80013ae:	e08c      	b.n	80014ca <bmp280_init+0x152>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80013b6:	2b58      	cmp	r3, #88	@ 0x58
 80013b8:	d006      	beq.n	80013c8 <bmp280_init+0x50>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80013c0:	2b60      	cmp	r3, #96	@ 0x60
 80013c2:	d001      	beq.n	80013c8 <bmp280_init+0x50>

		return false;
 80013c4:	2300      	movs	r3, #0
 80013c6:	e080      	b.n	80014ca <bmp280_init+0x152>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 80013c8:	22b6      	movs	r2, #182	@ 0xb6
 80013ca:	21e0      	movs	r1, #224	@ 0xe0
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f7ff ffae 	bl	800132e <write_register8>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <bmp280_init+0x64>
		return false;
 80013d8:	2300      	movs	r3, #0
 80013da:	e076      	b.n	80014ca <bmp280_init+0x152>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 80013dc:	f107 020c 	add.w	r2, r7, #12
 80013e0:	2301      	movs	r3, #1
 80013e2:	21f3      	movs	r1, #243	@ 0xf3
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff fe98 	bl	800111a <read_data>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d1f5      	bne.n	80013dc <bmp280_init+0x64>
				&& (status & 1) == 0)
 80013f0:	7b3b      	ldrb	r3, [r7, #12]
 80013f2:	f003 0301 	and.w	r3, r3, #1
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1f0      	bne.n	80013dc <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f7ff feb5 	bl	800116a <read_calibration_data>
 8001400:	4603      	mov	r3, r0
 8001402:	f083 0301 	eor.w	r3, r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	2b00      	cmp	r3, #0
 800140a:	d100      	bne.n	800140e <bmp280_init+0x96>
 800140c:	e001      	b.n	8001412 <bmp280_init+0x9a>
		return false;
 800140e:	2300      	movs	r3, #0
 8001410:	e05b      	b.n	80014ca <bmp280_init+0x152>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001418:	2b60      	cmp	r3, #96	@ 0x60
 800141a:	d10a      	bne.n	8001432 <bmp280_init+0xba>
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f7ff ff26 	bl	800126e <read_hum_calibration_data>
 8001422:	4603      	mov	r3, r0
 8001424:	f083 0301 	eor.w	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <bmp280_init+0xba>
		return false;
 800142e:	2300      	movs	r3, #0
 8001430:	e04b      	b.n	80014ca <bmp280_init+0x152>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	795b      	ldrb	r3, [r3, #5]
 8001436:	015b      	lsls	r3, r3, #5
 8001438:	b25a      	sxtb	r2, r3
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	785b      	ldrb	r3, [r3, #1]
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	b25b      	sxtb	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b25b      	sxtb	r3, r3
 8001446:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	461a      	mov	r2, r3
 800144c:	21f5      	movs	r1, #245	@ 0xf5
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff ff6d 	bl	800132e <write_register8>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <bmp280_init+0xe6>
		return false;
 800145a:	2300      	movs	r3, #0
 800145c:	e035      	b.n	80014ca <bmp280_init+0x152>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d102      	bne.n	800146c <bmp280_init+0xf4>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	78db      	ldrb	r3, [r3, #3]
 8001470:	015b      	lsls	r3, r3, #5
			| (params->oversampling_pressure << 2) | (params->mode);
 8001472:	b25a      	sxtb	r2, r3
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	789b      	ldrb	r3, [r3, #2]
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	b25b      	sxtb	r3, r3
 800147c:	4313      	orrs	r3, r2
 800147e:	b25a      	sxtb	r2, r3
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	781b      	ldrb	r3, [r3, #0]
 8001484:	b25b      	sxtb	r3, r3
 8001486:	4313      	orrs	r3, r2
 8001488:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 800148a:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001492:	2b60      	cmp	r3, #96	@ 0x60
 8001494:	d10d      	bne.n	80014b2 <bmp280_init+0x13a>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	791b      	ldrb	r3, [r3, #4]
 800149a:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 800149c:	7b7b      	ldrb	r3, [r7, #13]
 800149e:	461a      	mov	r2, r3
 80014a0:	21f2      	movs	r1, #242	@ 0xf2
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff43 	bl	800132e <write_register8>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <bmp280_init+0x13a>
			return false;
 80014ae:	2300      	movs	r3, #0
 80014b0:	e00b      	b.n	80014ca <bmp280_init+0x152>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 80014b2:	7bbb      	ldrb	r3, [r7, #14]
 80014b4:	461a      	mov	r2, r3
 80014b6:	21f4      	movs	r1, #244	@ 0xf4
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff38 	bl	800132e <write_register8>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <bmp280_init+0x150>
		return false;
 80014c4:	2300      	movs	r3, #0
 80014c6:	e000      	b.n	80014ca <bmp280_init+0x152>
	}

	return true;
 80014c8:	2301      	movs	r3, #1
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 80014d2:	b480      	push	{r7}
 80014d4:	b087      	sub	sp, #28
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	60f8      	str	r0, [r7, #12]
 80014da:	60b9      	str	r1, [r7, #8]
 80014dc:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	10da      	asrs	r2, r3, #3
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	881b      	ldrh	r3, [r3, #0]
 80014e6:	005b      	lsls	r3, r3, #1
 80014e8:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80014f0:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 80014f4:	12db      	asrs	r3, r3, #11
 80014f6:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	111b      	asrs	r3, r3, #4
 80014fc:	68fa      	ldr	r2, [r7, #12]
 80014fe:	8812      	ldrh	r2, [r2, #0]
 8001500:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 8001502:	68ba      	ldr	r2, [r7, #8]
 8001504:	1112      	asrs	r2, r2, #4
 8001506:	68f9      	ldr	r1, [r7, #12]
 8001508:	8809      	ldrh	r1, [r1, #0]
 800150a:	1a52      	subs	r2, r2, r1
 800150c:	fb02 f303 	mul.w	r3, r2, r3
 8001510:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001518:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 800151c:	139b      	asrs	r3, r3, #14
 800151e:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 8001520:	697a      	ldr	r2, [r7, #20]
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	441a      	add	r2, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3380      	adds	r3, #128	@ 0x80
 8001536:	121b      	asrs	r3, r3, #8
}
 8001538:	4618      	mov	r0, r3
 800153a:	371c      	adds	r7, #28
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr

08001544 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 8001544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001548:	b0cc      	sub	sp, #304	@ 0x130
 800154a:	af00      	add	r7, sp, #0
 800154c:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 8001550:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 8001554:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 8001558:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800155c:	17da      	asrs	r2, r3, #31
 800155e:	461c      	mov	r4, r3
 8001560:	4615      	mov	r5, r2
 8001562:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001566:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 800156a:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 800156e:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001572:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001576:	fb03 f102 	mul.w	r1, r3, r2
 800157a:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 800157e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001582:	fb02 f303 	mul.w	r3, r2, r3
 8001586:	18ca      	adds	r2, r1, r3
 8001588:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800158c:	fba3 8903 	umull	r8, r9, r3, r3
 8001590:	eb02 0309 	add.w	r3, r2, r9
 8001594:	4699      	mov	r9, r3
 8001596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800159a:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800159e:	b21b      	sxth	r3, r3
 80015a0:	17da      	asrs	r2, r3, #31
 80015a2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80015a6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80015aa:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80015ae:	4603      	mov	r3, r0
 80015b0:	fb03 f209 	mul.w	r2, r3, r9
 80015b4:	460b      	mov	r3, r1
 80015b6:	fb08 f303 	mul.w	r3, r8, r3
 80015ba:	4413      	add	r3, r2
 80015bc:	4602      	mov	r2, r0
 80015be:	fba8 1202 	umull	r1, r2, r8, r2
 80015c2:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80015c6:	460a      	mov	r2, r1
 80015c8:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80015cc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80015d0:	4413      	add	r3, r2
 80015d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80015d6:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80015da:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 80015de:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 80015e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80015e6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	17da      	asrs	r2, r3, #31
 80015ee:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80015f2:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80015f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015fa:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80015fe:	462a      	mov	r2, r5
 8001600:	fb02 f203 	mul.w	r2, r2, r3
 8001604:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001608:	4621      	mov	r1, r4
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	441a      	add	r2, r3
 8001610:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001614:	4621      	mov	r1, r4
 8001616:	fba3 1301 	umull	r1, r3, r3, r1
 800161a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800161e:	460b      	mov	r3, r1
 8001620:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001624:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001628:	18d3      	adds	r3, r2, r3
 800162a:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800162e:	f04f 0000 	mov.w	r0, #0
 8001632:	f04f 0100 	mov.w	r1, #0
 8001636:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 800163a:	462b      	mov	r3, r5
 800163c:	0459      	lsls	r1, r3, #17
 800163e:	4623      	mov	r3, r4
 8001640:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001644:	4623      	mov	r3, r4
 8001646:	0458      	lsls	r0, r3, #17
 8001648:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800164c:	1814      	adds	r4, r2, r0
 800164e:	643c      	str	r4, [r7, #64]	@ 0x40
 8001650:	414b      	adcs	r3, r1
 8001652:	647b      	str	r3, [r7, #68]	@ 0x44
 8001654:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001658:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 800165c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001660:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8001664:	b21b      	sxth	r3, r3
 8001666:	17da      	asrs	r2, r3, #31
 8001668:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800166c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001670:	f04f 0000 	mov.w	r0, #0
 8001674:	f04f 0100 	mov.w	r1, #0
 8001678:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800167c:	00d9      	lsls	r1, r3, #3
 800167e:	2000      	movs	r0, #0
 8001680:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001684:	1814      	adds	r4, r2, r0
 8001686:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001688:	414b      	adcs	r3, r1
 800168a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800168c:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001690:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001694:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001698:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800169c:	fb03 f102 	mul.w	r1, r3, r2
 80016a0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016a4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016a8:	fb02 f303 	mul.w	r3, r2, r3
 80016ac:	18ca      	adds	r2, r1, r3
 80016ae:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016b2:	fba3 1303 	umull	r1, r3, r3, r3
 80016b6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80016ba:	460b      	mov	r3, r1
 80016bc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80016c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80016c4:	18d3      	adds	r3, r2, r3
 80016c6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80016ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016ce:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80016d2:	b21b      	sxth	r3, r3
 80016d4:	17da      	asrs	r2, r3, #31
 80016d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80016da:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80016de:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80016e2:	462b      	mov	r3, r5
 80016e4:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80016e8:	4642      	mov	r2, r8
 80016ea:	fb02 f203 	mul.w	r2, r2, r3
 80016ee:	464b      	mov	r3, r9
 80016f0:	4621      	mov	r1, r4
 80016f2:	fb01 f303 	mul.w	r3, r1, r3
 80016f6:	4413      	add	r3, r2
 80016f8:	4622      	mov	r2, r4
 80016fa:	4641      	mov	r1, r8
 80016fc:	fba2 1201 	umull	r1, r2, r2, r1
 8001700:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001704:	460a      	mov	r2, r1
 8001706:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 800170a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800170e:	4413      	add	r3, r2
 8001710:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001714:	f04f 0000 	mov.w	r0, #0
 8001718:	f04f 0100 	mov.w	r1, #0
 800171c:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001720:	4623      	mov	r3, r4
 8001722:	0a18      	lsrs	r0, r3, #8
 8001724:	462b      	mov	r3, r5
 8001726:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800172a:	462b      	mov	r3, r5
 800172c:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800172e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001732:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001736:	b21b      	sxth	r3, r3
 8001738:	17da      	asrs	r2, r3, #31
 800173a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800173e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001742:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001746:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 800174a:	464a      	mov	r2, r9
 800174c:	fb02 f203 	mul.w	r2, r2, r3
 8001750:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001754:	4644      	mov	r4, r8
 8001756:	fb04 f303 	mul.w	r3, r4, r3
 800175a:	441a      	add	r2, r3
 800175c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001760:	4644      	mov	r4, r8
 8001762:	fba3 4304 	umull	r4, r3, r3, r4
 8001766:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800176a:	4623      	mov	r3, r4
 800176c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001770:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8001774:	18d3      	adds	r3, r2, r3
 8001776:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800177a:	f04f 0200 	mov.w	r2, #0
 800177e:	f04f 0300 	mov.w	r3, #0
 8001782:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8001786:	464c      	mov	r4, r9
 8001788:	0323      	lsls	r3, r4, #12
 800178a:	4644      	mov	r4, r8
 800178c:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001790:	4644      	mov	r4, r8
 8001792:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 8001794:	1884      	adds	r4, r0, r2
 8001796:	633c      	str	r4, [r7, #48]	@ 0x30
 8001798:	eb41 0303 	adc.w	r3, r1, r3
 800179c:	637b      	str	r3, [r7, #52]	@ 0x34
 800179e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80017a2:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 80017a6:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80017aa:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80017ae:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80017b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80017b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017ba:	88db      	ldrh	r3, [r3, #6]
 80017bc:	b29b      	uxth	r3, r3
 80017be:	2200      	movs	r2, #0
 80017c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80017c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80017c8:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80017cc:	462b      	mov	r3, r5
 80017ce:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80017d2:	4642      	mov	r2, r8
 80017d4:	fb02 f203 	mul.w	r2, r2, r3
 80017d8:	464b      	mov	r3, r9
 80017da:	4621      	mov	r1, r4
 80017dc:	fb01 f303 	mul.w	r3, r1, r3
 80017e0:	4413      	add	r3, r2
 80017e2:	4622      	mov	r2, r4
 80017e4:	4641      	mov	r1, r8
 80017e6:	fba2 1201 	umull	r1, r2, r2, r1
 80017ea:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80017ee:	460a      	mov	r2, r1
 80017f0:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80017f4:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80017f8:	4413      	add	r3, r2
 80017fa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80017fe:	f04f 0200 	mov.w	r2, #0
 8001802:	f04f 0300 	mov.w	r3, #0
 8001806:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800180a:	4629      	mov	r1, r5
 800180c:	104a      	asrs	r2, r1, #1
 800180e:	4629      	mov	r1, r5
 8001810:	17cb      	asrs	r3, r1, #31
 8001812:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001816:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800181a:	4313      	orrs	r3, r2
 800181c:	d101      	bne.n	8001822 <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 800181e:	2300      	movs	r3, #0
 8001820:	e148      	b.n	8001ab4 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 8001822:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001826:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800182a:	17da      	asrs	r2, r3, #31
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800182e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001830:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001834:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001838:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800183c:	105b      	asrs	r3, r3, #1
 800183e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001842:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001846:	07db      	lsls	r3, r3, #31
 8001848:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800184c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001850:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001854:	4621      	mov	r1, r4
 8001856:	1a89      	subs	r1, r1, r2
 8001858:	67b9      	str	r1, [r7, #120]	@ 0x78
 800185a:	4629      	mov	r1, r5
 800185c:	eb61 0303 	sbc.w	r3, r1, r3
 8001860:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001862:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001866:	4622      	mov	r2, r4
 8001868:	462b      	mov	r3, r5
 800186a:	1891      	adds	r1, r2, r2
 800186c:	6239      	str	r1, [r7, #32]
 800186e:	415b      	adcs	r3, r3
 8001870:	627b      	str	r3, [r7, #36]	@ 0x24
 8001872:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001876:	4621      	mov	r1, r4
 8001878:	1851      	adds	r1, r2, r1
 800187a:	61b9      	str	r1, [r7, #24]
 800187c:	4629      	mov	r1, r5
 800187e:	414b      	adcs	r3, r1
 8001880:	61fb      	str	r3, [r7, #28]
 8001882:	f04f 0200 	mov.w	r2, #0
 8001886:	f04f 0300 	mov.w	r3, #0
 800188a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 800188e:	4649      	mov	r1, r9
 8001890:	018b      	lsls	r3, r1, #6
 8001892:	4641      	mov	r1, r8
 8001894:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001898:	4641      	mov	r1, r8
 800189a:	018a      	lsls	r2, r1, #6
 800189c:	4641      	mov	r1, r8
 800189e:	1889      	adds	r1, r1, r2
 80018a0:	6139      	str	r1, [r7, #16]
 80018a2:	4649      	mov	r1, r9
 80018a4:	eb43 0101 	adc.w	r1, r3, r1
 80018a8:	6179      	str	r1, [r7, #20]
 80018aa:	f04f 0200 	mov.w	r2, #0
 80018ae:	f04f 0300 	mov.w	r3, #0
 80018b2:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80018b6:	4649      	mov	r1, r9
 80018b8:	008b      	lsls	r3, r1, #2
 80018ba:	4641      	mov	r1, r8
 80018bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018c0:	4641      	mov	r1, r8
 80018c2:	008a      	lsls	r2, r1, #2
 80018c4:	4610      	mov	r0, r2
 80018c6:	4619      	mov	r1, r3
 80018c8:	4603      	mov	r3, r0
 80018ca:	4622      	mov	r2, r4
 80018cc:	189b      	adds	r3, r3, r2
 80018ce:	60bb      	str	r3, [r7, #8]
 80018d0:	460b      	mov	r3, r1
 80018d2:	462a      	mov	r2, r5
 80018d4:	eb42 0303 	adc.w	r3, r2, r3
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018e6:	4649      	mov	r1, r9
 80018e8:	008b      	lsls	r3, r1, #2
 80018ea:	4641      	mov	r1, r8
 80018ec:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018f0:	4641      	mov	r1, r8
 80018f2:	008a      	lsls	r2, r1, #2
 80018f4:	4610      	mov	r0, r2
 80018f6:	4619      	mov	r1, r3
 80018f8:	4603      	mov	r3, r0
 80018fa:	4622      	mov	r2, r4
 80018fc:	189b      	adds	r3, r3, r2
 80018fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8001900:	462b      	mov	r3, r5
 8001902:	460a      	mov	r2, r1
 8001904:	eb42 0303 	adc.w	r3, r2, r3
 8001908:	677b      	str	r3, [r7, #116]	@ 0x74
 800190a:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800190e:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001912:	f7ff f9b9 	bl	8000c88 <__aeabi_ldivmod>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 800191e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001922:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001926:	b21b      	sxth	r3, r3
 8001928:	17da      	asrs	r2, r3, #31
 800192a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800192c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800192e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001932:	f04f 0000 	mov.w	r0, #0
 8001936:	f04f 0100 	mov.w	r1, #0
 800193a:	0b50      	lsrs	r0, r2, #13
 800193c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001940:	1359      	asrs	r1, r3, #13
 8001942:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001946:	462b      	mov	r3, r5
 8001948:	fb00 f203 	mul.w	r2, r0, r3
 800194c:	4623      	mov	r3, r4
 800194e:	fb03 f301 	mul.w	r3, r3, r1
 8001952:	4413      	add	r3, r2
 8001954:	4622      	mov	r2, r4
 8001956:	fba2 1200 	umull	r1, r2, r2, r0
 800195a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800195e:	460a      	mov	r2, r1
 8001960:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001964:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001968:	4413      	add	r3, r2
 800196a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800196e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001972:	f04f 0000 	mov.w	r0, #0
 8001976:	f04f 0100 	mov.w	r1, #0
 800197a:	0b50      	lsrs	r0, r2, #13
 800197c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001980:	1359      	asrs	r1, r3, #13
 8001982:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001986:	462b      	mov	r3, r5
 8001988:	fb00 f203 	mul.w	r2, r0, r3
 800198c:	4623      	mov	r3, r4
 800198e:	fb03 f301 	mul.w	r3, r3, r1
 8001992:	4413      	add	r3, r2
 8001994:	4622      	mov	r2, r4
 8001996:	fba2 1200 	umull	r1, r2, r2, r0
 800199a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800199e:	460a      	mov	r2, r1
 80019a0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80019a4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80019a8:	4413      	add	r3, r2
 80019aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	f04f 0300 	mov.w	r3, #0
 80019b6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80019ba:	4621      	mov	r1, r4
 80019bc:	0e4a      	lsrs	r2, r1, #25
 80019be:	4629      	mov	r1, r5
 80019c0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019c4:	4629      	mov	r1, r5
 80019c6:	164b      	asrs	r3, r1, #25
 80019c8:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 80019cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80019d0:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80019d4:	b21b      	sxth	r3, r3
 80019d6:	17da      	asrs	r2, r3, #31
 80019d8:	663b      	str	r3, [r7, #96]	@ 0x60
 80019da:	667a      	str	r2, [r7, #100]	@ 0x64
 80019dc:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019e0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019e4:	462a      	mov	r2, r5
 80019e6:	fb02 f203 	mul.w	r2, r2, r3
 80019ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80019ee:	4621      	mov	r1, r4
 80019f0:	fb01 f303 	mul.w	r3, r1, r3
 80019f4:	4413      	add	r3, r2
 80019f6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80019fa:	4621      	mov	r1, r4
 80019fc:	fba2 1201 	umull	r1, r2, r2, r1
 8001a00:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001a04:	460a      	mov	r2, r1
 8001a06:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001a0a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001a0e:	4413      	add	r3, r2
 8001a10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001a20:	4621      	mov	r1, r4
 8001a22:	0cca      	lsrs	r2, r1, #19
 8001a24:	4629      	mov	r1, r5
 8001a26:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	14cb      	asrs	r3, r1, #19
 8001a2e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001a32:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001a36:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a3a:	1884      	adds	r4, r0, r2
 8001a3c:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001a3e:	eb41 0303 	adc.w	r3, r1, r3
 8001a42:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a44:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a48:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	1889      	adds	r1, r1, r2
 8001a50:	6539      	str	r1, [r7, #80]	@ 0x50
 8001a52:	4629      	mov	r1, r5
 8001a54:	eb43 0101 	adc.w	r1, r3, r1
 8001a58:	6579      	str	r1, [r7, #84]	@ 0x54
 8001a5a:	f04f 0000 	mov.w	r0, #0
 8001a5e:	f04f 0100 	mov.w	r1, #0
 8001a62:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001a66:	4623      	mov	r3, r4
 8001a68:	0a18      	lsrs	r0, r3, #8
 8001a6a:	462b      	mov	r3, r5
 8001a6c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a70:	462b      	mov	r3, r5
 8001a72:	1219      	asrs	r1, r3, #8
 8001a74:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a78:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001a7c:	b21b      	sxth	r3, r3
 8001a7e:	17da      	asrs	r2, r3, #31
 8001a80:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a82:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001a90:	464c      	mov	r4, r9
 8001a92:	0123      	lsls	r3, r4, #4
 8001a94:	4644      	mov	r4, r8
 8001a96:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a9a:	4644      	mov	r4, r8
 8001a9c:	0122      	lsls	r2, r4, #4
 8001a9e:	1884      	adds	r4, r0, r2
 8001aa0:	603c      	str	r4, [r7, #0]
 8001aa2:	eb41 0303 	adc.w	r3, r1, r3
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001aac:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001ab0:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001aba:	46bd      	mov	sp, r7
 8001abc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001ac0 <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b087      	sub	sp, #28
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001ad2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001ad4:	68bb      	ldr	r3, [r7, #8]
 8001ad6:	039a      	lsls	r2, r3, #14
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001ade:	051b      	lsls	r3, r3, #20
 8001ae0:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001ae8:	4619      	mov	r1, r3
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	fb01 f303 	mul.w	r3, r1, r3
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001af6:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001af8:	68fa      	ldr	r2, [r7, #12]
 8001afa:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001afe:	4611      	mov	r1, r2
 8001b00:	697a      	ldr	r2, [r7, #20]
 8001b02:	fb01 f202 	mul.w	r2, r1, r2
 8001b06:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b08:	68f9      	ldr	r1, [r7, #12]
 8001b0a:	7f09      	ldrb	r1, [r1, #28]
 8001b0c:	4608      	mov	r0, r1
 8001b0e:	6979      	ldr	r1, [r7, #20]
 8001b10:	fb00 f101 	mul.w	r1, r0, r1
 8001b14:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b16:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001b1a:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001b1e:	1292      	asrs	r2, r2, #10
 8001b20:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001b2a:	fb01 f202 	mul.w	r2, r1, r2
 8001b2e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001b32:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001b34:	fb02 f303 	mul.w	r3, r2, r3
 8001b38:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	13db      	asrs	r3, r3, #15
 8001b3e:	697a      	ldr	r2, [r7, #20]
 8001b40:	13d2      	asrs	r2, r2, #15
 8001b42:	fb02 f303 	mul.w	r3, r2, r3
 8001b46:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	7e12      	ldrb	r2, [r2, #24]
 8001b4c:	fb02 f303 	mul.w	r3, r2, r3
 8001b50:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001b52:	697a      	ldr	r2, [r7, #20]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b5e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001b66:	bfa8      	it	ge
 8001b68:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001b6c:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	131b      	asrs	r3, r3, #12
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001b7e:	b580      	push	{r7, lr}
 8001b80:	b08c      	sub	sp, #48	@ 0x30
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	60f8      	str	r0, [r7, #12]
 8001b86:	60b9      	str	r1, [r7, #8]
 8001b88:	607a      	str	r2, [r7, #4]
 8001b8a:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001b92:	2b60      	cmp	r3, #96	@ 0x60
 8001b94:	d007      	beq.n	8001ba6 <bmp280_read_fixed+0x28>
		if (humidity)
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d002      	beq.n	8001ba2 <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <bmp280_read_fixed+0x32>
 8001bac:	2308      	movs	r3, #8
 8001bae:	e000      	b.n	8001bb2 <bmp280_read_fixed+0x34>
 8001bb0:	2306      	movs	r3, #6
 8001bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	f107 0218 	add.w	r2, r7, #24
 8001bbc:	21f7      	movs	r1, #247	@ 0xf7
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff faab 	bl	800111a <read_data>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <bmp280_read_fixed+0x50>
		return false;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e038      	b.n	8001c40 <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001bce:	7e3b      	ldrb	r3, [r7, #24]
 8001bd0:	031a      	lsls	r2, r3, #12
 8001bd2:	7e7b      	ldrb	r3, [r7, #25]
 8001bd4:	011b      	lsls	r3, r3, #4
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	7eba      	ldrb	r2, [r7, #26]
 8001bda:	0912      	lsrs	r2, r2, #4
 8001bdc:	b2d2      	uxtb	r2, r2
 8001bde:	4313      	orrs	r3, r2
 8001be0:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001be2:	7efb      	ldrb	r3, [r7, #27]
 8001be4:	031a      	lsls	r2, r3, #12
 8001be6:	7f3b      	ldrb	r3, [r7, #28]
 8001be8:	011b      	lsls	r3, r3, #4
 8001bea:	4313      	orrs	r3, r2
 8001bec:	7f7a      	ldrb	r2, [r7, #29]
 8001bee:	0912      	lsrs	r2, r2, #4
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001bf6:	f107 0314 	add.w	r3, r7, #20
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001bfe:	68f8      	ldr	r0, [r7, #12]
 8001c00:	f7ff fc67 	bl	80014d2 <compensate_temperature>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	461a      	mov	r2, r3
 8001c0e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c10:	68f8      	ldr	r0, [r7, #12]
 8001c12:	f7ff fc97 	bl	8001544 <compensate_pressure>
 8001c16:	4602      	mov	r2, r0
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d00d      	beq.n	8001c3e <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001c22:	7fbb      	ldrb	r3, [r7, #30]
 8001c24:	021b      	lsls	r3, r3, #8
 8001c26:	7ffa      	ldrb	r2, [r7, #31]
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	461a      	mov	r2, r3
 8001c30:	6a39      	ldr	r1, [r7, #32]
 8001c32:	68f8      	ldr	r0, [r7, #12]
 8001c34:	f7ff ff44 	bl	8001ac0 <compensate_humidity>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001c3e:	2301      	movs	r3, #1
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3730      	adds	r7, #48	@ 0x30
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b088      	sub	sp, #32
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	60f8      	str	r0, [r7, #12]
 8001c50:	60b9      	str	r1, [r7, #8]
 8001c52:	607a      	str	r2, [r7, #4]
 8001c54:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001c56:	683b      	ldr	r3, [r7, #0]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <bmp280_read_float+0x1a>
 8001c5c:	f107 0314 	add.w	r3, r7, #20
 8001c60:	e000      	b.n	8001c64 <bmp280_read_float+0x1c>
 8001c62:	2300      	movs	r3, #0
 8001c64:	f107 0218 	add.w	r2, r7, #24
 8001c68:	f107 011c 	add.w	r1, r7, #28
 8001c6c:	68f8      	ldr	r0, [r7, #12]
 8001c6e:	f7ff ff86 	bl	8001b7e <bmp280_read_fixed>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d028      	beq.n	8001cca <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	ee07 3a90 	vmov	s15, r3
 8001c7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c82:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001cd4 <bmp280_read_float+0x8c>
 8001c86:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	ee07 3a90 	vmov	s15, r3
 8001c96:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001c9a:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001cd8 <bmp280_read_float+0x90>
 8001c9e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d00b      	beq.n	8001cc6 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	ee07 3a90 	vmov	s15, r3
 8001cb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001cb8:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001cdc <bmp280_read_float+0x94>
 8001cbc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <bmp280_read_float+0x84>
	}

	return false;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3720      	adds	r7, #32
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	42c80000 	.word	0x42c80000
 8001cd8:	43800000 	.word	0x43800000
 8001cdc:	44800000 	.word	0x44800000

08001ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ce0:	b5b0      	push	{r4, r5, r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001ce6:	f000 fcaf 	bl	8002648 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cea:	f000 f8eb 	bl	8001ec4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cee:	f000 f9eb 	bl	80020c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001cf2:	f000 f9b9 	bl	8002068 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001cf6:	f000 f937 	bl	8001f68 <MX_I2C1_Init>
  MX_I2C2_Init();
 8001cfa:	f000 f975 	bl	8001fe8 <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /*OLED SSD1309*/
  ssd1306_Init();
 8001cfe:	f003 ff13 	bl	8005b28 <ssd1306_Init>
  ssd1306_TestAll();
 8001d02:	f005 f9e9 	bl	80070d8 <ssd1306_TestAll>

  /*BMP280*/
  bmp280_init_default_params(&bmp280.params);
 8001d06:	485e      	ldr	r0, [pc, #376]	@ (8001e80 <main+0x1a0>)
 8001d08:	f7ff f9bc 	bl	8001084 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001d0c:	4b5d      	ldr	r3, [pc, #372]	@ (8001e84 <main+0x1a4>)
 8001d0e:	2276      	movs	r2, #118	@ 0x76
 8001d10:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8001d12:	4b5c      	ldr	r3, [pc, #368]	@ (8001e84 <main+0x1a4>)
 8001d14:	4a5c      	ldr	r2, [pc, #368]	@ (8001e88 <main+0x1a8>)
 8001d16:	629a      	str	r2, [r3, #40]	@ 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001d18:	e013      	b.n	8001d42 <main+0x62>
  	size = sprintf((char *)Data, "BMP280 initialization failed\n");
 8001d1a:	495c      	ldr	r1, [pc, #368]	@ (8001e8c <main+0x1ac>)
 8001d1c:	485c      	ldr	r0, [pc, #368]	@ (8001e90 <main+0x1b0>)
 8001d1e:	f006 f8d9 	bl	8007ed4 <siprintf>
 8001d22:	4603      	mov	r3, r0
 8001d24:	b29a      	uxth	r2, r3
 8001d26:	4b5b      	ldr	r3, [pc, #364]	@ (8001e94 <main+0x1b4>)
 8001d28:	801a      	strh	r2, [r3, #0]
  	HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001d2a:	4b5a      	ldr	r3, [pc, #360]	@ (8001e94 <main+0x1b4>)
 8001d2c:	881a      	ldrh	r2, [r3, #0]
 8001d2e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d32:	4957      	ldr	r1, [pc, #348]	@ (8001e90 <main+0x1b0>)
 8001d34:	4858      	ldr	r0, [pc, #352]	@ (8001e98 <main+0x1b8>)
 8001d36:	f003 f961 	bl	8004ffc <HAL_UART_Transmit>
  	HAL_Delay(2000);
 8001d3a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d3e:	f000 fcff 	bl	8002740 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001d42:	494f      	ldr	r1, [pc, #316]	@ (8001e80 <main+0x1a0>)
 8001d44:	484f      	ldr	r0, [pc, #316]	@ (8001e84 <main+0x1a4>)
 8001d46:	f7ff fb17 	bl	8001378 <bmp280_init>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	f083 0301 	eor.w	r3, r3, #1
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d1e1      	bne.n	8001d1a <main+0x3a>
  }
  bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001d56:	4b4b      	ldr	r3, [pc, #300]	@ (8001e84 <main+0x1a4>)
 8001d58:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001d5c:	2b60      	cmp	r3, #96	@ 0x60
 8001d5e:	bf0c      	ite	eq
 8001d60:	2301      	moveq	r3, #1
 8001d62:	2300      	movne	r3, #0
 8001d64:	71fb      	strb	r3, [r7, #7]
  size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8001d66:	79fb      	ldrb	r3, [r7, #7]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <main+0x90>
 8001d6c:	4b4b      	ldr	r3, [pc, #300]	@ (8001e9c <main+0x1bc>)
 8001d6e:	e000      	b.n	8001d72 <main+0x92>
 8001d70:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea0 <main+0x1c0>)
 8001d72:	461a      	mov	r2, r3
 8001d74:	494b      	ldr	r1, [pc, #300]	@ (8001ea4 <main+0x1c4>)
 8001d76:	4846      	ldr	r0, [pc, #280]	@ (8001e90 <main+0x1b0>)
 8001d78:	f006 f8ac 	bl	8007ed4 <siprintf>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	b29a      	uxth	r2, r3
 8001d80:	4b44      	ldr	r3, [pc, #272]	@ (8001e94 <main+0x1b4>)
 8001d82:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001d84:	4b43      	ldr	r3, [pc, #268]	@ (8001e94 <main+0x1b4>)
 8001d86:	881a      	ldrh	r2, [r3, #0]
 8001d88:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d8c:	4940      	ldr	r1, [pc, #256]	@ (8001e90 <main+0x1b0>)
 8001d8e:	4842      	ldr	r0, [pc, #264]	@ (8001e98 <main+0x1b8>)
 8001d90:	f003 f934 	bl	8004ffc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, str, size, HAL_MAX_DELAY);
	HAL_Delay(1000);*/
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(100);
 8001d94:	2064      	movs	r0, #100	@ 0x64
 8001d96:	f000 fcd3 	bl	8002740 <HAL_Delay>
	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001d9a:	e013      	b.n	8001dc4 <main+0xe4>
		size = sprintf((char *)Data,"Temperature/pressure reading failed\n");
 8001d9c:	4942      	ldr	r1, [pc, #264]	@ (8001ea8 <main+0x1c8>)
 8001d9e:	483c      	ldr	r0, [pc, #240]	@ (8001e90 <main+0x1b0>)
 8001da0:	f006 f898 	bl	8007ed4 <siprintf>
 8001da4:	4603      	mov	r3, r0
 8001da6:	b29a      	uxth	r2, r3
 8001da8:	4b3a      	ldr	r3, [pc, #232]	@ (8001e94 <main+0x1b4>)
 8001daa:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001dac:	4b39      	ldr	r3, [pc, #228]	@ (8001e94 <main+0x1b4>)
 8001dae:	881a      	ldrh	r2, [r3, #0]
 8001db0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001db4:	4936      	ldr	r1, [pc, #216]	@ (8001e90 <main+0x1b0>)
 8001db6:	4838      	ldr	r0, [pc, #224]	@ (8001e98 <main+0x1b8>)
 8001db8:	f003 f920 	bl	8004ffc <HAL_UART_Transmit>
		HAL_Delay(2000);
 8001dbc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001dc0:	f000 fcbe 	bl	8002740 <HAL_Delay>
	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001dc4:	4b39      	ldr	r3, [pc, #228]	@ (8001eac <main+0x1cc>)
 8001dc6:	4a3a      	ldr	r2, [pc, #232]	@ (8001eb0 <main+0x1d0>)
 8001dc8:	493a      	ldr	r1, [pc, #232]	@ (8001eb4 <main+0x1d4>)
 8001dca:	482e      	ldr	r0, [pc, #184]	@ (8001e84 <main+0x1a4>)
 8001dcc:	f7ff ff3c 	bl	8001c48 <bmp280_read_float>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	f083 0301 	eor.w	r3, r3, #1
 8001dd6:	b2db      	uxtb	r3, r3
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d1df      	bne.n	8001d9c <main+0xbc>
	}

	size = sprintf((char *)Data,"Pressure: %f Pa, Temperature: %f C", pressure, temperature);
 8001ddc:	4b34      	ldr	r3, [pc, #208]	@ (8001eb0 <main+0x1d0>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4618      	mov	r0, r3
 8001de2:	f7fe fbb1 	bl	8000548 <__aeabi_f2d>
 8001de6:	4604      	mov	r4, r0
 8001de8:	460d      	mov	r5, r1
 8001dea:	4b32      	ldr	r3, [pc, #200]	@ (8001eb4 <main+0x1d4>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7fe fbaa 	bl	8000548 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	e9cd 2300 	strd	r2, r3, [sp]
 8001dfc:	4622      	mov	r2, r4
 8001dfe:	462b      	mov	r3, r5
 8001e00:	492d      	ldr	r1, [pc, #180]	@ (8001eb8 <main+0x1d8>)
 8001e02:	4823      	ldr	r0, [pc, #140]	@ (8001e90 <main+0x1b0>)
 8001e04:	f006 f866 	bl	8007ed4 <siprintf>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	4b21      	ldr	r3, [pc, #132]	@ (8001e94 <main+0x1b4>)
 8001e0e:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001e10:	4b20      	ldr	r3, [pc, #128]	@ (8001e94 <main+0x1b4>)
 8001e12:	881a      	ldrh	r2, [r3, #0]
 8001e14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e18:	491d      	ldr	r1, [pc, #116]	@ (8001e90 <main+0x1b0>)
 8001e1a:	481f      	ldr	r0, [pc, #124]	@ (8001e98 <main+0x1b8>)
 8001e1c:	f003 f8ee 	bl	8004ffc <HAL_UART_Transmit>
	if (bme280p) {
 8001e20:	79fb      	ldrb	r3, [r7, #7]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d017      	beq.n	8001e56 <main+0x176>
		size = sprintf((char *)Data,", Humidity: %f\n\r", humidity);
 8001e26:	4b21      	ldr	r3, [pc, #132]	@ (8001eac <main+0x1cc>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7fe fb8c 	bl	8000548 <__aeabi_f2d>
 8001e30:	4602      	mov	r2, r0
 8001e32:	460b      	mov	r3, r1
 8001e34:	4921      	ldr	r1, [pc, #132]	@ (8001ebc <main+0x1dc>)
 8001e36:	4816      	ldr	r0, [pc, #88]	@ (8001e90 <main+0x1b0>)
 8001e38:	f006 f84c 	bl	8007ed4 <siprintf>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	b29a      	uxth	r2, r3
 8001e40:	4b14      	ldr	r3, [pc, #80]	@ (8001e94 <main+0x1b4>)
 8001e42:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001e44:	4b13      	ldr	r3, [pc, #76]	@ (8001e94 <main+0x1b4>)
 8001e46:	881a      	ldrh	r2, [r3, #0]
 8001e48:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e4c:	4910      	ldr	r1, [pc, #64]	@ (8001e90 <main+0x1b0>)
 8001e4e:	4812      	ldr	r0, [pc, #72]	@ (8001e98 <main+0x1b8>)
 8001e50:	f003 f8d4 	bl	8004ffc <HAL_UART_Transmit>
 8001e54:	e00f      	b.n	8001e76 <main+0x196>
	}

	else {
		size = sprintf((char *)Data, "\n\r");
 8001e56:	491a      	ldr	r1, [pc, #104]	@ (8001ec0 <main+0x1e0>)
 8001e58:	480d      	ldr	r0, [pc, #52]	@ (8001e90 <main+0x1b0>)
 8001e5a:	f006 f83b 	bl	8007ed4 <siprintf>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	b29a      	uxth	r2, r3
 8001e62:	4b0c      	ldr	r3, [pc, #48]	@ (8001e94 <main+0x1b4>)
 8001e64:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001e66:	4b0b      	ldr	r3, [pc, #44]	@ (8001e94 <main+0x1b4>)
 8001e68:	881a      	ldrh	r2, [r3, #0]
 8001e6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e6e:	4908      	ldr	r1, [pc, #32]	@ (8001e90 <main+0x1b0>)
 8001e70:	4809      	ldr	r0, [pc, #36]	@ (8001e98 <main+0x1b8>)
 8001e72:	f003 f8c3 	bl	8004ffc <HAL_UART_Transmit>
	}
	HAL_Delay(2000);
 8001e76:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e7a:	f000 fc61 	bl	8002740 <HAL_Delay>
	HAL_Delay(100);
 8001e7e:	e789      	b.n	8001d94 <main+0xb4>
 8001e80:	2000034c 	.word	0x2000034c
 8001e84:	20000320 	.word	0x20000320
 8001e88:	200001f0 	.word	0x200001f0
 8001e8c:	0800c3e0 	.word	0x0800c3e0
 8001e90:	20000364 	.word	0x20000364
 8001e94:	20000360 	.word	0x20000360
 8001e98:	20000298 	.word	0x20000298
 8001e9c:	0800c400 	.word	0x0800c400
 8001ea0:	0800c408 	.word	0x0800c408
 8001ea4:	0800c410 	.word	0x0800c410
 8001ea8:	0800c424 	.word	0x0800c424
 8001eac:	2000035c 	.word	0x2000035c
 8001eb0:	20000354 	.word	0x20000354
 8001eb4:	20000358 	.word	0x20000358
 8001eb8:	0800c44c 	.word	0x0800c44c
 8001ebc:	0800c470 	.word	0x0800c470
 8001ec0:	0800c484 	.word	0x0800c484

08001ec4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b096      	sub	sp, #88	@ 0x58
 8001ec8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eca:	f107 0314 	add.w	r3, r7, #20
 8001ece:	2244      	movs	r2, #68	@ 0x44
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f006 ff90 	bl	8008df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ed8:	463b      	mov	r3, r7
 8001eda:	2200      	movs	r2, #0
 8001edc:	601a      	str	r2, [r3, #0]
 8001ede:	605a      	str	r2, [r3, #4]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	60da      	str	r2, [r3, #12]
 8001ee4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001ee6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001eea:	f001 fd27 	bl	800393c <HAL_PWREx_ControlVoltageScaling>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001ef4:	f000 f94e 	bl	8002194 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f00:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f02:	2310      	movs	r3, #16
 8001f04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f06:	2302      	movs	r3, #2
 8001f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001f12:	230a      	movs	r3, #10
 8001f14:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001f16:	2307      	movs	r3, #7
 8001f18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001f1e:	2302      	movs	r3, #2
 8001f20:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f22:	f107 0314 	add.w	r3, r7, #20
 8001f26:	4618      	mov	r0, r3
 8001f28:	f001 fd5e 	bl	80039e8 <HAL_RCC_OscConfig>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8001f32:	f000 f92f 	bl	8002194 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f36:	230f      	movs	r3, #15
 8001f38:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f46:	2300      	movs	r3, #0
 8001f48:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001f4a:	463b      	mov	r3, r7
 8001f4c:	2104      	movs	r1, #4
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f002 f926 	bl	80041a0 <HAL_RCC_ClockConfig>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001f5a:	f000 f91b 	bl	8002194 <Error_Handler>
  }
}
 8001f5e:	bf00      	nop
 8001f60:	3758      	adds	r7, #88	@ 0x58
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f6c:	4b1b      	ldr	r3, [pc, #108]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f6e:	4a1c      	ldr	r2, [pc, #112]	@ (8001fe0 <MX_I2C1_Init+0x78>)
 8001f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8001f72:	4b1a      	ldr	r3, [pc, #104]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f74:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe4 <MX_I2C1_Init+0x7c>)
 8001f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001f78:	4b18      	ldr	r3, [pc, #96]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f7e:	4b17      	ldr	r3, [pc, #92]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f80:	2201      	movs	r2, #1
 8001f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f84:	4b15      	ldr	r3, [pc, #84]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001f8a:	4b14      	ldr	r3, [pc, #80]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001f90:	4b12      	ldr	r3, [pc, #72]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f96:	4b11      	ldr	r3, [pc, #68]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fa2:	480e      	ldr	r0, [pc, #56]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001fa4:	f000 fe98 	bl	8002cd8 <HAL_I2C_Init>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d001      	beq.n	8001fb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001fae:	f000 f8f1 	bl	8002194 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001fb2:	2100      	movs	r1, #0
 8001fb4:	4809      	ldr	r0, [pc, #36]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001fb6:	f001 fc1b 	bl	80037f0 <HAL_I2CEx_ConfigAnalogFilter>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001fc0:	f000 f8e8 	bl	8002194 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001fc4:	2100      	movs	r1, #0
 8001fc6:	4805      	ldr	r0, [pc, #20]	@ (8001fdc <MX_I2C1_Init+0x74>)
 8001fc8:	f001 fc5d 	bl	8003886 <HAL_I2CEx_ConfigDigitalFilter>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001fd2:	f000 f8df 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	200001f0 	.word	0x200001f0
 8001fe0:	40005400 	.word	0x40005400
 8001fe4:	10d19ce4 	.word	0x10d19ce4

08001fe8 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	@ (800205c <MX_I2C2_Init+0x74>)
 8001fee:	4a1c      	ldr	r2, [pc, #112]	@ (8002060 <MX_I2C2_Init+0x78>)
 8001ff0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8001ff2:	4b1a      	ldr	r3, [pc, #104]	@ (800205c <MX_I2C2_Init+0x74>)
 8001ff4:	4a1b      	ldr	r2, [pc, #108]	@ (8002064 <MX_I2C2_Init+0x7c>)
 8001ff6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8001ff8:	4b18      	ldr	r3, [pc, #96]	@ (800205c <MX_I2C2_Init+0x74>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001ffe:	4b17      	ldr	r3, [pc, #92]	@ (800205c <MX_I2C2_Init+0x74>)
 8002000:	2201      	movs	r2, #1
 8002002:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002004:	4b15      	ldr	r3, [pc, #84]	@ (800205c <MX_I2C2_Init+0x74>)
 8002006:	2200      	movs	r2, #0
 8002008:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800200a:	4b14      	ldr	r3, [pc, #80]	@ (800205c <MX_I2C2_Init+0x74>)
 800200c:	2200      	movs	r2, #0
 800200e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <MX_I2C2_Init+0x74>)
 8002012:	2200      	movs	r2, #0
 8002014:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002016:	4b11      	ldr	r3, [pc, #68]	@ (800205c <MX_I2C2_Init+0x74>)
 8002018:	2200      	movs	r2, #0
 800201a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800201c:	4b0f      	ldr	r3, [pc, #60]	@ (800205c <MX_I2C2_Init+0x74>)
 800201e:	2200      	movs	r2, #0
 8002020:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002022:	480e      	ldr	r0, [pc, #56]	@ (800205c <MX_I2C2_Init+0x74>)
 8002024:	f000 fe58 	bl	8002cd8 <HAL_I2C_Init>
 8002028:	4603      	mov	r3, r0
 800202a:	2b00      	cmp	r3, #0
 800202c:	d001      	beq.n	8002032 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800202e:	f000 f8b1 	bl	8002194 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002032:	2100      	movs	r1, #0
 8002034:	4809      	ldr	r0, [pc, #36]	@ (800205c <MX_I2C2_Init+0x74>)
 8002036:	f001 fbdb 	bl	80037f0 <HAL_I2CEx_ConfigAnalogFilter>
 800203a:	4603      	mov	r3, r0
 800203c:	2b00      	cmp	r3, #0
 800203e:	d001      	beq.n	8002044 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002040:	f000 f8a8 	bl	8002194 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002044:	2100      	movs	r1, #0
 8002046:	4805      	ldr	r0, [pc, #20]	@ (800205c <MX_I2C2_Init+0x74>)
 8002048:	f001 fc1d 	bl	8003886 <HAL_I2CEx_ConfigDigitalFilter>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002052:	f000 f89f 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002056:	bf00      	nop
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000244 	.word	0x20000244
 8002060:	40005800 	.word	0x40005800
 8002064:	10d19ce4 	.word	0x10d19ce4

08002068 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800206c:	4b14      	ldr	r3, [pc, #80]	@ (80020c0 <MX_USART2_UART_Init+0x58>)
 800206e:	4a15      	ldr	r2, [pc, #84]	@ (80020c4 <MX_USART2_UART_Init+0x5c>)
 8002070:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002072:	4b13      	ldr	r3, [pc, #76]	@ (80020c0 <MX_USART2_UART_Init+0x58>)
 8002074:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002078:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800207a:	4b11      	ldr	r3, [pc, #68]	@ (80020c0 <MX_USART2_UART_Init+0x58>)
 800207c:	2200      	movs	r2, #0
 800207e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002080:	4b0f      	ldr	r3, [pc, #60]	@ (80020c0 <MX_USART2_UART_Init+0x58>)
 8002082:	2200      	movs	r2, #0
 8002084:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002086:	4b0e      	ldr	r3, [pc, #56]	@ (80020c0 <MX_USART2_UART_Init+0x58>)
 8002088:	2200      	movs	r2, #0
 800208a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800208c:	4b0c      	ldr	r3, [pc, #48]	@ (80020c0 <MX_USART2_UART_Init+0x58>)
 800208e:	220c      	movs	r2, #12
 8002090:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002092:	4b0b      	ldr	r3, [pc, #44]	@ (80020c0 <MX_USART2_UART_Init+0x58>)
 8002094:	2200      	movs	r2, #0
 8002096:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002098:	4b09      	ldr	r3, [pc, #36]	@ (80020c0 <MX_USART2_UART_Init+0x58>)
 800209a:	2200      	movs	r2, #0
 800209c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800209e:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <MX_USART2_UART_Init+0x58>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020a4:	4b06      	ldr	r3, [pc, #24]	@ (80020c0 <MX_USART2_UART_Init+0x58>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020aa:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <MX_USART2_UART_Init+0x58>)
 80020ac:	f002 ff58 	bl	8004f60 <HAL_UART_Init>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d001      	beq.n	80020ba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80020b6:	f000 f86d 	bl	8002194 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80020ba:	bf00      	nop
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000298 	.word	0x20000298
 80020c4:	40004400 	.word	0x40004400

080020c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	@ 0x28
 80020cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ce:	f107 0314 	add.w	r3, r7, #20
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
 80020d6:	605a      	str	r2, [r3, #4]
 80020d8:	609a      	str	r2, [r3, #8]
 80020da:	60da      	str	r2, [r3, #12]
 80020dc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020de:	4b2b      	ldr	r3, [pc, #172]	@ (800218c <MX_GPIO_Init+0xc4>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	4a2a      	ldr	r2, [pc, #168]	@ (800218c <MX_GPIO_Init+0xc4>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ea:	4b28      	ldr	r3, [pc, #160]	@ (800218c <MX_GPIO_Init+0xc4>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020f6:	4b25      	ldr	r3, [pc, #148]	@ (800218c <MX_GPIO_Init+0xc4>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	4a24      	ldr	r2, [pc, #144]	@ (800218c <MX_GPIO_Init+0xc4>)
 80020fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002100:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002102:	4b22      	ldr	r3, [pc, #136]	@ (800218c <MX_GPIO_Init+0xc4>)
 8002104:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002106:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800210e:	4b1f      	ldr	r3, [pc, #124]	@ (800218c <MX_GPIO_Init+0xc4>)
 8002110:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002112:	4a1e      	ldr	r2, [pc, #120]	@ (800218c <MX_GPIO_Init+0xc4>)
 8002114:	f043 0301 	orr.w	r3, r3, #1
 8002118:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800211a:	4b1c      	ldr	r3, [pc, #112]	@ (800218c <MX_GPIO_Init+0xc4>)
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	4b19      	ldr	r3, [pc, #100]	@ (800218c <MX_GPIO_Init+0xc4>)
 8002128:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800212a:	4a18      	ldr	r2, [pc, #96]	@ (800218c <MX_GPIO_Init+0xc4>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002132:	4b16      	ldr	r3, [pc, #88]	@ (800218c <MX_GPIO_Init+0xc4>)
 8002134:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	607b      	str	r3, [r7, #4]
 800213c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800213e:	2200      	movs	r2, #0
 8002140:	2120      	movs	r1, #32
 8002142:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002146:	f000 fdaf 	bl	8002ca8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800214a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800214e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002150:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002154:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002156:	2300      	movs	r3, #0
 8002158:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800215a:	f107 0314 	add.w	r3, r7, #20
 800215e:	4619      	mov	r1, r3
 8002160:	480b      	ldr	r0, [pc, #44]	@ (8002190 <MX_GPIO_Init+0xc8>)
 8002162:	f000 fbf7 	bl	8002954 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8002166:	2320      	movs	r3, #32
 8002168:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2300      	movs	r3, #0
 8002174:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002176:	f107 0314 	add.w	r3, r7, #20
 800217a:	4619      	mov	r1, r3
 800217c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002180:	f000 fbe8 	bl	8002954 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002184:	bf00      	nop
 8002186:	3728      	adds	r7, #40	@ 0x28
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40021000 	.word	0x40021000
 8002190:	48000800 	.word	0x48000800

08002194 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002194:	b480      	push	{r7}
 8002196:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002198:	b672      	cpsid	i
}
 800219a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800219c:	bf00      	nop
 800219e:	e7fd      	b.n	800219c <Error_Handler+0x8>

080021a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021a6:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <HAL_MspInit+0x44>)
 80021a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021aa:	4a0e      	ldr	r2, [pc, #56]	@ (80021e4 <HAL_MspInit+0x44>)
 80021ac:	f043 0301 	orr.w	r3, r3, #1
 80021b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80021b2:	4b0c      	ldr	r3, [pc, #48]	@ (80021e4 <HAL_MspInit+0x44>)
 80021b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	607b      	str	r3, [r7, #4]
 80021bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021be:	4b09      	ldr	r3, [pc, #36]	@ (80021e4 <HAL_MspInit+0x44>)
 80021c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c2:	4a08      	ldr	r2, [pc, #32]	@ (80021e4 <HAL_MspInit+0x44>)
 80021c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80021ca:	4b06      	ldr	r3, [pc, #24]	@ (80021e4 <HAL_MspInit+0x44>)
 80021cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021d2:	603b      	str	r3, [r7, #0]
 80021d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr
 80021e2:	bf00      	nop
 80021e4:	40021000 	.word	0x40021000

080021e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b0ae      	sub	sp, #184	@ 0xb8
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]
 80021f8:	605a      	str	r2, [r3, #4]
 80021fa:	609a      	str	r2, [r3, #8]
 80021fc:	60da      	str	r2, [r3, #12]
 80021fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002200:	f107 031c 	add.w	r3, r7, #28
 8002204:	2288      	movs	r2, #136	@ 0x88
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f006 fdf5 	bl	8008df8 <memset>
  if(hi2c->Instance==I2C1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	4a42      	ldr	r2, [pc, #264]	@ (800231c <HAL_I2C_MspInit+0x134>)
 8002214:	4293      	cmp	r3, r2
 8002216:	d13b      	bne.n	8002290 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002218:	2340      	movs	r3, #64	@ 0x40
 800221a:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800221c:	2300      	movs	r3, #0
 800221e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002220:	f107 031c 	add.w	r3, r7, #28
 8002224:	4618      	mov	r0, r3
 8002226:	f002 f9df 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 800222a:	4603      	mov	r3, r0
 800222c:	2b00      	cmp	r3, #0
 800222e:	d001      	beq.n	8002234 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002230:	f7ff ffb0 	bl	8002194 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002234:	4b3a      	ldr	r3, [pc, #232]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 8002236:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002238:	4a39      	ldr	r2, [pc, #228]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 800223a:	f043 0302 	orr.w	r3, r3, #2
 800223e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002240:	4b37      	ldr	r3, [pc, #220]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 8002242:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002244:	f003 0302 	and.w	r3, r3, #2
 8002248:	61bb      	str	r3, [r7, #24]
 800224a:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800224c:	23c0      	movs	r3, #192	@ 0xc0
 800224e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002252:	2312      	movs	r3, #18
 8002254:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002258:	2300      	movs	r3, #0
 800225a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800225e:	2303      	movs	r3, #3
 8002260:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002264:	2304      	movs	r3, #4
 8002266:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800226e:	4619      	mov	r1, r3
 8002270:	482c      	ldr	r0, [pc, #176]	@ (8002324 <HAL_I2C_MspInit+0x13c>)
 8002272:	f000 fb6f 	bl	8002954 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002276:	4b2a      	ldr	r3, [pc, #168]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 8002278:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800227a:	4a29      	ldr	r2, [pc, #164]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 800227c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002280:	6593      	str	r3, [r2, #88]	@ 0x58
 8002282:	4b27      	ldr	r3, [pc, #156]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800228e:	e040      	b.n	8002312 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a24      	ldr	r2, [pc, #144]	@ (8002328 <HAL_I2C_MspInit+0x140>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d13b      	bne.n	8002312 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800229a:	2380      	movs	r3, #128	@ 0x80
 800229c:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800229e:	2300      	movs	r3, #0
 80022a0:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022a2:	f107 031c 	add.w	r3, r7, #28
 80022a6:	4618      	mov	r0, r3
 80022a8:	f002 f99e 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 80022ac:	4603      	mov	r3, r0
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d001      	beq.n	80022b6 <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80022b2:	f7ff ff6f 	bl	8002194 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 80022b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022ba:	4a19      	ldr	r2, [pc, #100]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 80022bc:	f043 0302 	orr.w	r3, r3, #2
 80022c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022c2:	4b17      	ldr	r3, [pc, #92]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 80022c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	613b      	str	r3, [r7, #16]
 80022cc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80022ce:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80022d2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022d6:	2312      	movs	r3, #18
 80022d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022dc:	2300      	movs	r3, #0
 80022de:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e2:	2303      	movs	r3, #3
 80022e4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022e8:	2304      	movs	r3, #4
 80022ea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022ee:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80022f2:	4619      	mov	r1, r3
 80022f4:	480b      	ldr	r0, [pc, #44]	@ (8002324 <HAL_I2C_MspInit+0x13c>)
 80022f6:	f000 fb2d 	bl	8002954 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022fa:	4b09      	ldr	r3, [pc, #36]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 80022fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022fe:	4a08      	ldr	r2, [pc, #32]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 8002300:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002304:	6593      	str	r3, [r2, #88]	@ 0x58
 8002306:	4b06      	ldr	r3, [pc, #24]	@ (8002320 <HAL_I2C_MspInit+0x138>)
 8002308:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800230a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
}
 8002312:	bf00      	nop
 8002314:	37b8      	adds	r7, #184	@ 0xb8
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40005400 	.word	0x40005400
 8002320:	40021000 	.word	0x40021000
 8002324:	48000400 	.word	0x48000400
 8002328:	40005800 	.word	0x40005800

0800232c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b0ac      	sub	sp, #176	@ 0xb0
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002334:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8002338:	2200      	movs	r2, #0
 800233a:	601a      	str	r2, [r3, #0]
 800233c:	605a      	str	r2, [r3, #4]
 800233e:	609a      	str	r2, [r3, #8]
 8002340:	60da      	str	r2, [r3, #12]
 8002342:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002344:	f107 0314 	add.w	r3, r7, #20
 8002348:	2288      	movs	r2, #136	@ 0x88
 800234a:	2100      	movs	r1, #0
 800234c:	4618      	mov	r0, r3
 800234e:	f006 fd53 	bl	8008df8 <memset>
  if(huart->Instance==USART2)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a21      	ldr	r2, [pc, #132]	@ (80023dc <HAL_UART_MspInit+0xb0>)
 8002358:	4293      	cmp	r3, r2
 800235a:	d13b      	bne.n	80023d4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800235c:	2302      	movs	r3, #2
 800235e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002360:	2300      	movs	r3, #0
 8002362:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002364:	f107 0314 	add.w	r3, r7, #20
 8002368:	4618      	mov	r0, r3
 800236a:	f002 f93d 	bl	80045e8 <HAL_RCCEx_PeriphCLKConfig>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002374:	f7ff ff0e 	bl	8002194 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002378:	4b19      	ldr	r3, [pc, #100]	@ (80023e0 <HAL_UART_MspInit+0xb4>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	4a18      	ldr	r2, [pc, #96]	@ (80023e0 <HAL_UART_MspInit+0xb4>)
 800237e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002382:	6593      	str	r3, [r2, #88]	@ 0x58
 8002384:	4b16      	ldr	r3, [pc, #88]	@ (80023e0 <HAL_UART_MspInit+0xb4>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800238c:	613b      	str	r3, [r7, #16]
 800238e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <HAL_UART_MspInit+0xb4>)
 8002392:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002394:	4a12      	ldr	r2, [pc, #72]	@ (80023e0 <HAL_UART_MspInit+0xb4>)
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800239c:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <HAL_UART_MspInit+0xb4>)
 800239e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023a0:	f003 0301 	and.w	r3, r3, #1
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80023a8:	230c      	movs	r3, #12
 80023aa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b4:	2300      	movs	r3, #0
 80023b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023ba:	2303      	movs	r3, #3
 80023bc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80023c0:	2307      	movs	r3, #7
 80023c2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c6:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80023ca:	4619      	mov	r1, r3
 80023cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023d0:	f000 fac0 	bl	8002954 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80023d4:	bf00      	nop
 80023d6:	37b0      	adds	r7, #176	@ 0xb0
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40004400 	.word	0x40004400
 80023e0:	40021000 	.word	0x40021000

080023e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023e8:	bf00      	nop
 80023ea:	e7fd      	b.n	80023e8 <NMI_Handler+0x4>

080023ec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ec:	b480      	push	{r7}
 80023ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023f0:	bf00      	nop
 80023f2:	e7fd      	b.n	80023f0 <HardFault_Handler+0x4>

080023f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <MemManage_Handler+0x4>

080023fc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <BusFault_Handler+0x4>

08002404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <UsageFault_Handler+0x4>

0800240c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr

0800241a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800241a:	b480      	push	{r7}
 800241c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800242c:	bf00      	nop
 800242e:	46bd      	mov	sp, r7
 8002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002434:	4770      	bx	lr

08002436 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002436:	b580      	push	{r7, lr}
 8002438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800243a:	f000 f961 	bl	8002700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800243e:	bf00      	nop
 8002440:	bd80      	pop	{r7, pc}

08002442 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002442:	b480      	push	{r7}
 8002444:	af00      	add	r7, sp, #0
  return 1;
 8002446:	2301      	movs	r3, #1
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr

08002452 <_kill>:

int _kill(int pid, int sig)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b082      	sub	sp, #8
 8002456:	af00      	add	r7, sp, #0
 8002458:	6078      	str	r0, [r7, #4]
 800245a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800245c:	f006 fcd8 	bl	8008e10 <__errno>
 8002460:	4603      	mov	r3, r0
 8002462:	2216      	movs	r2, #22
 8002464:	601a      	str	r2, [r3, #0]
  return -1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800246a:	4618      	mov	r0, r3
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <_exit>:

void _exit (int status)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800247a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff ffe7 	bl	8002452 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002484:	bf00      	nop
 8002486:	e7fd      	b.n	8002484 <_exit+0x12>

08002488 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b086      	sub	sp, #24
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
 8002498:	e00a      	b.n	80024b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800249a:	f3af 8000 	nop.w
 800249e:	4601      	mov	r1, r0
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	1c5a      	adds	r2, r3, #1
 80024a4:	60ba      	str	r2, [r7, #8]
 80024a6:	b2ca      	uxtb	r2, r1
 80024a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	3301      	adds	r3, #1
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	429a      	cmp	r2, r3
 80024b6:	dbf0      	blt.n	800249a <_read+0x12>
  }

  return len;
 80024b8:	687b      	ldr	r3, [r7, #4]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b086      	sub	sp, #24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024ce:	2300      	movs	r3, #0
 80024d0:	617b      	str	r3, [r7, #20]
 80024d2:	e009      	b.n	80024e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80024d4:	68bb      	ldr	r3, [r7, #8]
 80024d6:	1c5a      	adds	r2, r3, #1
 80024d8:	60ba      	str	r2, [r7, #8]
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024e2:	697b      	ldr	r3, [r7, #20]
 80024e4:	3301      	adds	r3, #1
 80024e6:	617b      	str	r3, [r7, #20]
 80024e8:	697a      	ldr	r2, [r7, #20]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	429a      	cmp	r2, r3
 80024ee:	dbf1      	blt.n	80024d4 <_write+0x12>
  }
  return len;
 80024f0:	687b      	ldr	r3, [r7, #4]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <_close>:

int _close(int file)
{
 80024fa:	b480      	push	{r7}
 80024fc:	b083      	sub	sp, #12
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002502:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002506:	4618      	mov	r0, r3
 8002508:	370c      	adds	r7, #12
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002512:	b480      	push	{r7}
 8002514:	b083      	sub	sp, #12
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800251c:	683b      	ldr	r3, [r7, #0]
 800251e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002522:	605a      	str	r2, [r3, #4]
  return 0;
 8002524:	2300      	movs	r3, #0
}
 8002526:	4618      	mov	r0, r3
 8002528:	370c      	adds	r7, #12
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr

08002532 <_isatty>:

int _isatty(int file)
{
 8002532:	b480      	push	{r7}
 8002534:	b083      	sub	sp, #12
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800253a:	2301      	movs	r3, #1
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr

08002548 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002554:	2300      	movs	r3, #0
}
 8002556:	4618      	mov	r0, r3
 8002558:	3714      	adds	r7, #20
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b086      	sub	sp, #24
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800256c:	4a14      	ldr	r2, [pc, #80]	@ (80025c0 <_sbrk+0x5c>)
 800256e:	4b15      	ldr	r3, [pc, #84]	@ (80025c4 <_sbrk+0x60>)
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002578:	4b13      	ldr	r3, [pc, #76]	@ (80025c8 <_sbrk+0x64>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d102      	bne.n	8002586 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002580:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <_sbrk+0x64>)
 8002582:	4a12      	ldr	r2, [pc, #72]	@ (80025cc <_sbrk+0x68>)
 8002584:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002586:	4b10      	ldr	r3, [pc, #64]	@ (80025c8 <_sbrk+0x64>)
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4413      	add	r3, r2
 800258e:	693a      	ldr	r2, [r7, #16]
 8002590:	429a      	cmp	r2, r3
 8002592:	d207      	bcs.n	80025a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002594:	f006 fc3c 	bl	8008e10 <__errno>
 8002598:	4603      	mov	r3, r0
 800259a:	220c      	movs	r2, #12
 800259c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800259e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80025a2:	e009      	b.n	80025b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025a4:	4b08      	ldr	r3, [pc, #32]	@ (80025c8 <_sbrk+0x64>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025aa:	4b07      	ldr	r3, [pc, #28]	@ (80025c8 <_sbrk+0x64>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	4a05      	ldr	r2, [pc, #20]	@ (80025c8 <_sbrk+0x64>)
 80025b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	3718      	adds	r7, #24
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}
 80025c0:	20018000 	.word	0x20018000
 80025c4:	00000400 	.word	0x00000400
 80025c8:	20000464 	.word	0x20000464
 80025cc:	200009c0 	.word	0x200009c0

080025d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80025d4:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <SystemInit+0x20>)
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025da:	4a05      	ldr	r2, [pc, #20]	@ (80025f0 <SystemInit+0x20>)
 80025dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80025e4:	bf00      	nop
 80025e6:	46bd      	mov	sp, r7
 80025e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ec:	4770      	bx	lr
 80025ee:	bf00      	nop
 80025f0:	e000ed00 	.word	0xe000ed00

080025f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80025f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800262c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025f8:	f7ff ffea 	bl	80025d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025fc:	480c      	ldr	r0, [pc, #48]	@ (8002630 <LoopForever+0x6>)
  ldr r1, =_edata
 80025fe:	490d      	ldr	r1, [pc, #52]	@ (8002634 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002600:	4a0d      	ldr	r2, [pc, #52]	@ (8002638 <LoopForever+0xe>)
  movs r3, #0
 8002602:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002604:	e002      	b.n	800260c <LoopCopyDataInit>

08002606 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002606:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002608:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800260a:	3304      	adds	r3, #4

0800260c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800260c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800260e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002610:	d3f9      	bcc.n	8002606 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002612:	4a0a      	ldr	r2, [pc, #40]	@ (800263c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002614:	4c0a      	ldr	r4, [pc, #40]	@ (8002640 <LoopForever+0x16>)
  movs r3, #0
 8002616:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002618:	e001      	b.n	800261e <LoopFillZerobss>

0800261a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800261a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800261c:	3204      	adds	r2, #4

0800261e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800261e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002620:	d3fb      	bcc.n	800261a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002622:	f006 fbfb 	bl	8008e1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002626:	f7ff fb5b 	bl	8001ce0 <main>

0800262a <LoopForever>:

LoopForever:
    b LoopForever
 800262a:	e7fe      	b.n	800262a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800262c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002630:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002634:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002638:	080113ac 	.word	0x080113ac
  ldr r2, =_sbss
 800263c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002640:	200009c0 	.word	0x200009c0

08002644 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002644:	e7fe      	b.n	8002644 <ADC1_2_IRQHandler>
	...

08002648 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b082      	sub	sp, #8
 800264c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002652:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <HAL_Init+0x3c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a0b      	ldr	r2, [pc, #44]	@ (8002684 <HAL_Init+0x3c>)
 8002658:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800265c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800265e:	2003      	movs	r0, #3
 8002660:	f000 f944 	bl	80028ec <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002664:	2000      	movs	r0, #0
 8002666:	f000 f80f 	bl	8002688 <HAL_InitTick>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	71fb      	strb	r3, [r7, #7]
 8002674:	e001      	b.n	800267a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002676:	f7ff fd93 	bl	80021a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800267a:	79fb      	ldrb	r3, [r7, #7]
}
 800267c:	4618      	mov	r0, r3
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40022000 	.word	0x40022000

08002688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002694:	4b17      	ldr	r3, [pc, #92]	@ (80026f4 <HAL_InitTick+0x6c>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d023      	beq.n	80026e4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800269c:	4b16      	ldr	r3, [pc, #88]	@ (80026f8 <HAL_InitTick+0x70>)
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	4b14      	ldr	r3, [pc, #80]	@ (80026f4 <HAL_InitTick+0x6c>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	4619      	mov	r1, r3
 80026a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80026ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	f000 f941 	bl	800293a <HAL_SYSTICK_Config>
 80026b8:	4603      	mov	r3, r0
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10f      	bne.n	80026de <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b0f      	cmp	r3, #15
 80026c2:	d809      	bhi.n	80026d8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026c4:	2200      	movs	r2, #0
 80026c6:	6879      	ldr	r1, [r7, #4]
 80026c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80026cc:	f000 f919 	bl	8002902 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026d0:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <HAL_InitTick+0x74>)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e007      	b.n	80026e8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e004      	b.n	80026e8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	73fb      	strb	r3, [r7, #15]
 80026e2:	e001      	b.n	80026e8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3710      	adds	r7, #16
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	bf00      	nop
 80026f4:	20000008 	.word	0x20000008
 80026f8:	20000000 	.word	0x20000000
 80026fc:	20000004 	.word	0x20000004

08002700 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002704:	4b06      	ldr	r3, [pc, #24]	@ (8002720 <HAL_IncTick+0x20>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_IncTick+0x24>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4413      	add	r3, r2
 8002710:	4a04      	ldr	r2, [pc, #16]	@ (8002724 <HAL_IncTick+0x24>)
 8002712:	6013      	str	r3, [r2, #0]
}
 8002714:	bf00      	nop
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	20000008 	.word	0x20000008
 8002724:	20000468 	.word	0x20000468

08002728 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002728:	b480      	push	{r7}
 800272a:	af00      	add	r7, sp, #0
  return uwTick;
 800272c:	4b03      	ldr	r3, [pc, #12]	@ (800273c <HAL_GetTick+0x14>)
 800272e:	681b      	ldr	r3, [r3, #0]
}
 8002730:	4618      	mov	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002738:	4770      	bx	lr
 800273a:	bf00      	nop
 800273c:	20000468 	.word	0x20000468

08002740 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002748:	f7ff ffee 	bl	8002728 <HAL_GetTick>
 800274c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002758:	d005      	beq.n	8002766 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800275a:	4b0a      	ldr	r3, [pc, #40]	@ (8002784 <HAL_Delay+0x44>)
 800275c:	781b      	ldrb	r3, [r3, #0]
 800275e:	461a      	mov	r2, r3
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	4413      	add	r3, r2
 8002764:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002766:	bf00      	nop
 8002768:	f7ff ffde 	bl	8002728 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	429a      	cmp	r2, r3
 8002776:	d8f7      	bhi.n	8002768 <HAL_Delay+0x28>
  {
  }
}
 8002778:	bf00      	nop
 800277a:	bf00      	nop
 800277c:	3710      	adds	r7, #16
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	20000008 	.word	0x20000008

08002788 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f003 0307 	and.w	r3, r3, #7
 8002796:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002798:	4b0c      	ldr	r3, [pc, #48]	@ (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 800279a:	68db      	ldr	r3, [r3, #12]
 800279c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80027a4:	4013      	ands	r3, r2
 80027a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80027b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80027b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ba:	4a04      	ldr	r2, [pc, #16]	@ (80027cc <__NVIC_SetPriorityGrouping+0x44>)
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	60d3      	str	r3, [r2, #12]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr
 80027cc:	e000ed00 	.word	0xe000ed00

080027d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027d0:	b480      	push	{r7}
 80027d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027d4:	4b04      	ldr	r3, [pc, #16]	@ (80027e8 <__NVIC_GetPriorityGrouping+0x18>)
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	0a1b      	lsrs	r3, r3, #8
 80027da:	f003 0307 	and.w	r3, r3, #7
}
 80027de:	4618      	mov	r0, r3
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr
 80027e8:	e000ed00 	.word	0xe000ed00

080027ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b083      	sub	sp, #12
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	4603      	mov	r3, r0
 80027f4:	6039      	str	r1, [r7, #0]
 80027f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	db0a      	blt.n	8002816 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	490c      	ldr	r1, [pc, #48]	@ (8002838 <__NVIC_SetPriority+0x4c>)
 8002806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800280a:	0112      	lsls	r2, r2, #4
 800280c:	b2d2      	uxtb	r2, r2
 800280e:	440b      	add	r3, r1
 8002810:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002814:	e00a      	b.n	800282c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4908      	ldr	r1, [pc, #32]	@ (800283c <__NVIC_SetPriority+0x50>)
 800281c:	79fb      	ldrb	r3, [r7, #7]
 800281e:	f003 030f 	and.w	r3, r3, #15
 8002822:	3b04      	subs	r3, #4
 8002824:	0112      	lsls	r2, r2, #4
 8002826:	b2d2      	uxtb	r2, r2
 8002828:	440b      	add	r3, r1
 800282a:	761a      	strb	r2, [r3, #24]
}
 800282c:	bf00      	nop
 800282e:	370c      	adds	r7, #12
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr
 8002838:	e000e100 	.word	0xe000e100
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002840:	b480      	push	{r7}
 8002842:	b089      	sub	sp, #36	@ 0x24
 8002844:	af00      	add	r7, sp, #0
 8002846:	60f8      	str	r0, [r7, #12]
 8002848:	60b9      	str	r1, [r7, #8]
 800284a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f003 0307 	and.w	r3, r3, #7
 8002852:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002854:	69fb      	ldr	r3, [r7, #28]
 8002856:	f1c3 0307 	rsb	r3, r3, #7
 800285a:	2b04      	cmp	r3, #4
 800285c:	bf28      	it	cs
 800285e:	2304      	movcs	r3, #4
 8002860:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	3304      	adds	r3, #4
 8002866:	2b06      	cmp	r3, #6
 8002868:	d902      	bls.n	8002870 <NVIC_EncodePriority+0x30>
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	3b03      	subs	r3, #3
 800286e:	e000      	b.n	8002872 <NVIC_EncodePriority+0x32>
 8002870:	2300      	movs	r3, #0
 8002872:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002874:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	fa02 f303 	lsl.w	r3, r2, r3
 800287e:	43da      	mvns	r2, r3
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	401a      	ands	r2, r3
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002888:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	fa01 f303 	lsl.w	r3, r1, r3
 8002892:	43d9      	mvns	r1, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002898:	4313      	orrs	r3, r2
         );
}
 800289a:	4618      	mov	r0, r3
 800289c:	3724      	adds	r7, #36	@ 0x24
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
	...

080028a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b082      	sub	sp, #8
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3b01      	subs	r3, #1
 80028b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028b8:	d301      	bcc.n	80028be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ba:	2301      	movs	r3, #1
 80028bc:	e00f      	b.n	80028de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028be:	4a0a      	ldr	r2, [pc, #40]	@ (80028e8 <SysTick_Config+0x40>)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3b01      	subs	r3, #1
 80028c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028c6:	210f      	movs	r1, #15
 80028c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028cc:	f7ff ff8e 	bl	80027ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028d0:	4b05      	ldr	r3, [pc, #20]	@ (80028e8 <SysTick_Config+0x40>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80028d6:	4b04      	ldr	r3, [pc, #16]	@ (80028e8 <SysTick_Config+0x40>)
 80028d8:	2207      	movs	r2, #7
 80028da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3708      	adds	r7, #8
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	e000e010 	.word	0xe000e010

080028ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b082      	sub	sp, #8
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f7ff ff47 	bl	8002788 <__NVIC_SetPriorityGrouping>
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002902:	b580      	push	{r7, lr}
 8002904:	b086      	sub	sp, #24
 8002906:	af00      	add	r7, sp, #0
 8002908:	4603      	mov	r3, r0
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
 800290e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002910:	2300      	movs	r3, #0
 8002912:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002914:	f7ff ff5c 	bl	80027d0 <__NVIC_GetPriorityGrouping>
 8002918:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	68b9      	ldr	r1, [r7, #8]
 800291e:	6978      	ldr	r0, [r7, #20]
 8002920:	f7ff ff8e 	bl	8002840 <NVIC_EncodePriority>
 8002924:	4602      	mov	r2, r0
 8002926:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800292a:	4611      	mov	r1, r2
 800292c:	4618      	mov	r0, r3
 800292e:	f7ff ff5d 	bl	80027ec <__NVIC_SetPriority>
}
 8002932:	bf00      	nop
 8002934:	3718      	adds	r7, #24
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b082      	sub	sp, #8
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002942:	6878      	ldr	r0, [r7, #4]
 8002944:	f7ff ffb0 	bl	80028a8 <SysTick_Config>
 8002948:	4603      	mov	r3, r0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002954:	b480      	push	{r7}
 8002956:	b087      	sub	sp, #28
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800295e:	2300      	movs	r3, #0
 8002960:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002962:	e17f      	b.n	8002c64 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	2101      	movs	r1, #1
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	4013      	ands	r3, r2
 8002972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2b00      	cmp	r3, #0
 8002978:	f000 8171 	beq.w	8002c5e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b01      	cmp	r3, #1
 8002986:	d005      	beq.n	8002994 <HAL_GPIO_Init+0x40>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	f003 0303 	and.w	r3, r3, #3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d130      	bne.n	80029f6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	689b      	ldr	r3, [r3, #8]
 8002998:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	005b      	lsls	r3, r3, #1
 800299e:	2203      	movs	r2, #3
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	693a      	ldr	r2, [r7, #16]
 80029a8:	4013      	ands	r3, r2
 80029aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	68da      	ldr	r2, [r3, #12]
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	fa02 f303 	lsl.w	r3, r2, r3
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	693a      	ldr	r2, [r7, #16]
 80029c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80029ca:	2201      	movs	r2, #1
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	43db      	mvns	r3, r3
 80029d4:	693a      	ldr	r2, [r7, #16]
 80029d6:	4013      	ands	r3, r2
 80029d8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	091b      	lsrs	r3, r3, #4
 80029e0:	f003 0201 	and.w	r2, r3, #1
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ea:	693a      	ldr	r2, [r7, #16]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	2b03      	cmp	r3, #3
 8002a00:	d118      	bne.n	8002a34 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a06:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002a08:	2201      	movs	r2, #1
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43db      	mvns	r3, r3
 8002a12:	693a      	ldr	r2, [r7, #16]
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	08db      	lsrs	r3, r3, #3
 8002a1e:	f003 0201 	and.w	r2, r3, #1
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	fa02 f303 	lsl.w	r3, r2, r3
 8002a28:	693a      	ldr	r2, [r7, #16]
 8002a2a:	4313      	orrs	r3, r2
 8002a2c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	693a      	ldr	r2, [r7, #16]
 8002a32:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f003 0303 	and.w	r3, r3, #3
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d017      	beq.n	8002a70 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	68db      	ldr	r3, [r3, #12]
 8002a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002a46:	697b      	ldr	r3, [r7, #20]
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	2203      	movs	r2, #3
 8002a4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a50:	43db      	mvns	r3, r3
 8002a52:	693a      	ldr	r2, [r7, #16]
 8002a54:	4013      	ands	r3, r2
 8002a56:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	005b      	lsls	r3, r3, #1
 8002a60:	fa02 f303 	lsl.w	r3, r2, r3
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	693a      	ldr	r2, [r7, #16]
 8002a6e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f003 0303 	and.w	r3, r3, #3
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d123      	bne.n	8002ac4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	08da      	lsrs	r2, r3, #3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	3208      	adds	r2, #8
 8002a84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a88:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	220f      	movs	r2, #15
 8002a94:	fa02 f303 	lsl.w	r3, r2, r3
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	693a      	ldr	r2, [r7, #16]
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	691a      	ldr	r2, [r3, #16]
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	f003 0307 	and.w	r3, r3, #7
 8002aaa:	009b      	lsls	r3, r3, #2
 8002aac:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab0:	693a      	ldr	r2, [r7, #16]
 8002ab2:	4313      	orrs	r3, r2
 8002ab4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	08da      	lsrs	r2, r3, #3
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	3208      	adds	r2, #8
 8002abe:	6939      	ldr	r1, [r7, #16]
 8002ac0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002aca:	697b      	ldr	r3, [r7, #20]
 8002acc:	005b      	lsls	r3, r3, #1
 8002ace:	2203      	movs	r2, #3
 8002ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad4:	43db      	mvns	r3, r3
 8002ad6:	693a      	ldr	r2, [r7, #16]
 8002ad8:	4013      	ands	r3, r2
 8002ada:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f003 0203 	and.w	r2, r3, #3
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	005b      	lsls	r3, r3, #1
 8002ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	f000 80ac 	beq.w	8002c5e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b06:	4b5f      	ldr	r3, [pc, #380]	@ (8002c84 <HAL_GPIO_Init+0x330>)
 8002b08:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b0a:	4a5e      	ldr	r2, [pc, #376]	@ (8002c84 <HAL_GPIO_Init+0x330>)
 8002b0c:	f043 0301 	orr.w	r3, r3, #1
 8002b10:	6613      	str	r3, [r2, #96]	@ 0x60
 8002b12:	4b5c      	ldr	r3, [pc, #368]	@ (8002c84 <HAL_GPIO_Init+0x330>)
 8002b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	60bb      	str	r3, [r7, #8]
 8002b1c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002b1e:	4a5a      	ldr	r2, [pc, #360]	@ (8002c88 <HAL_GPIO_Init+0x334>)
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	089b      	lsrs	r3, r3, #2
 8002b24:	3302      	adds	r3, #2
 8002b26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	220f      	movs	r2, #15
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002b48:	d025      	beq.n	8002b96 <HAL_GPIO_Init+0x242>
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4a4f      	ldr	r2, [pc, #316]	@ (8002c8c <HAL_GPIO_Init+0x338>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d01f      	beq.n	8002b92 <HAL_GPIO_Init+0x23e>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	4a4e      	ldr	r2, [pc, #312]	@ (8002c90 <HAL_GPIO_Init+0x33c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d019      	beq.n	8002b8e <HAL_GPIO_Init+0x23a>
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002c94 <HAL_GPIO_Init+0x340>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d013      	beq.n	8002b8a <HAL_GPIO_Init+0x236>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4c      	ldr	r2, [pc, #304]	@ (8002c98 <HAL_GPIO_Init+0x344>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d00d      	beq.n	8002b86 <HAL_GPIO_Init+0x232>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4b      	ldr	r2, [pc, #300]	@ (8002c9c <HAL_GPIO_Init+0x348>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d007      	beq.n	8002b82 <HAL_GPIO_Init+0x22e>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4a      	ldr	r2, [pc, #296]	@ (8002ca0 <HAL_GPIO_Init+0x34c>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d101      	bne.n	8002b7e <HAL_GPIO_Init+0x22a>
 8002b7a:	2306      	movs	r3, #6
 8002b7c:	e00c      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b7e:	2307      	movs	r3, #7
 8002b80:	e00a      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b82:	2305      	movs	r3, #5
 8002b84:	e008      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b86:	2304      	movs	r3, #4
 8002b88:	e006      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b8a:	2303      	movs	r3, #3
 8002b8c:	e004      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b8e:	2302      	movs	r3, #2
 8002b90:	e002      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b92:	2301      	movs	r3, #1
 8002b94:	e000      	b.n	8002b98 <HAL_GPIO_Init+0x244>
 8002b96:	2300      	movs	r3, #0
 8002b98:	697a      	ldr	r2, [r7, #20]
 8002b9a:	f002 0203 	and.w	r2, r2, #3
 8002b9e:	0092      	lsls	r2, r2, #2
 8002ba0:	4093      	lsls	r3, r2
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002ba8:	4937      	ldr	r1, [pc, #220]	@ (8002c88 <HAL_GPIO_Init+0x334>)
 8002baa:	697b      	ldr	r3, [r7, #20]
 8002bac:	089b      	lsrs	r3, r3, #2
 8002bae:	3302      	adds	r3, #2
 8002bb0:	693a      	ldr	r2, [r7, #16]
 8002bb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002bb6:	4b3b      	ldr	r3, [pc, #236]	@ (8002ca4 <HAL_GPIO_Init+0x350>)
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	43db      	mvns	r3, r3
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4013      	ands	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d003      	beq.n	8002bda <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002bd2:	693a      	ldr	r2, [r7, #16]
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002bda:	4a32      	ldr	r2, [pc, #200]	@ (8002ca4 <HAL_GPIO_Init+0x350>)
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002be0:	4b30      	ldr	r3, [pc, #192]	@ (8002ca4 <HAL_GPIO_Init+0x350>)
 8002be2:	68db      	ldr	r3, [r3, #12]
 8002be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	43db      	mvns	r3, r3
 8002bea:	693a      	ldr	r2, [r7, #16]
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d003      	beq.n	8002c04 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002bfc:	693a      	ldr	r2, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002c04:	4a27      	ldr	r2, [pc, #156]	@ (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002c0a:	4b26      	ldr	r3, [pc, #152]	@ (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	43db      	mvns	r3, r3
 8002c14:	693a      	ldr	r2, [r7, #16]
 8002c16:	4013      	ands	r3, r2
 8002c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d003      	beq.n	8002c2e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002c26:	693a      	ldr	r2, [r7, #16]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002c2e:	4a1d      	ldr	r2, [pc, #116]	@ (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002c34:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	43db      	mvns	r3, r3
 8002c3e:	693a      	ldr	r2, [r7, #16]
 8002c40:	4013      	ands	r3, r2
 8002c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d003      	beq.n	8002c58 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002c50:	693a      	ldr	r2, [r7, #16]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	4313      	orrs	r3, r2
 8002c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002c58:	4a12      	ldr	r2, [pc, #72]	@ (8002ca4 <HAL_GPIO_Init+0x350>)
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	f47f ae78 	bne.w	8002964 <HAL_GPIO_Init+0x10>
  }
}
 8002c74:	bf00      	nop
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	40021000 	.word	0x40021000
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	48000400 	.word	0x48000400
 8002c90:	48000800 	.word	0x48000800
 8002c94:	48000c00 	.word	0x48000c00
 8002c98:	48001000 	.word	0x48001000
 8002c9c:	48001400 	.word	0x48001400
 8002ca0:	48001800 	.word	0x48001800
 8002ca4:	40010400 	.word	0x40010400

08002ca8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b083      	sub	sp, #12
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	460b      	mov	r3, r1
 8002cb2:	807b      	strh	r3, [r7, #2]
 8002cb4:	4613      	mov	r3, r2
 8002cb6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cb8:	787b      	ldrb	r3, [r7, #1]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d003      	beq.n	8002cc6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002cbe:	887a      	ldrh	r2, [r7, #2]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002cc4:	e002      	b.n	8002ccc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002cc6:	887a      	ldrh	r2, [r7, #2]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b082      	sub	sp, #8
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e08d      	b.n	8002e06 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d106      	bne.n	8002d04 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f7ff fa72 	bl	80021e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2224      	movs	r2, #36	@ 0x24
 8002d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	681a      	ldr	r2, [r3, #0]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 0201 	bic.w	r2, r2, #1
 8002d1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002d28:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002d38:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	2b01      	cmp	r3, #1
 8002d40:	d107      	bne.n	8002d52 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689a      	ldr	r2, [r3, #8]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d4e:	609a      	str	r2, [r3, #8]
 8002d50:	e006      	b.n	8002d60 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	689a      	ldr	r2, [r3, #8]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002d5e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	68db      	ldr	r3, [r3, #12]
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d108      	bne.n	8002d7a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d76:	605a      	str	r2, [r3, #4]
 8002d78:	e007      	b.n	8002d8a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	685a      	ldr	r2, [r3, #4]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d88:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	6812      	ldr	r2, [r2, #0]
 8002d94:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002d98:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d9c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68da      	ldr	r2, [r3, #12]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002dac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	691a      	ldr	r2, [r3, #16]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	699b      	ldr	r3, [r3, #24]
 8002dbe:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	69d9      	ldr	r1, [r3, #28]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2220      	movs	r2, #32
 8002df2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
	...

08002e10 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b088      	sub	sp, #32
 8002e14:	af02      	add	r7, sp, #8
 8002e16:	60f8      	str	r0, [r7, #12]
 8002e18:	4608      	mov	r0, r1
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	461a      	mov	r2, r3
 8002e1e:	4603      	mov	r3, r0
 8002e20:	817b      	strh	r3, [r7, #10]
 8002e22:	460b      	mov	r3, r1
 8002e24:	813b      	strh	r3, [r7, #8]
 8002e26:	4613      	mov	r3, r2
 8002e28:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	2b20      	cmp	r3, #32
 8002e34:	f040 80f9 	bne.w	800302a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e38:	6a3b      	ldr	r3, [r7, #32]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_I2C_Mem_Write+0x34>
 8002e3e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d105      	bne.n	8002e50 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e4a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0ed      	b.n	800302c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d101      	bne.n	8002e5e <HAL_I2C_Mem_Write+0x4e>
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	e0e6      	b.n	800302c <HAL_I2C_Mem_Write+0x21c>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002e66:	f7ff fc5f 	bl	8002728 <HAL_GetTick>
 8002e6a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002e6c:	697b      	ldr	r3, [r7, #20]
 8002e6e:	9300      	str	r3, [sp, #0]
 8002e70:	2319      	movs	r3, #25
 8002e72:	2201      	movs	r2, #1
 8002e74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002e78:	68f8      	ldr	r0, [r7, #12]
 8002e7a:	f000 fac3 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8002e7e:	4603      	mov	r3, r0
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d001      	beq.n	8002e88 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e0d1      	b.n	800302c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2221      	movs	r2, #33	@ 0x21
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2240      	movs	r2, #64	@ 0x40
 8002e94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	6a3a      	ldr	r2, [r7, #32]
 8002ea2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002ea8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002eb0:	88f8      	ldrh	r0, [r7, #6]
 8002eb2:	893a      	ldrh	r2, [r7, #8]
 8002eb4:	8979      	ldrh	r1, [r7, #10]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	9301      	str	r3, [sp, #4]
 8002eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ebc:	9300      	str	r3, [sp, #0]
 8002ebe:	4603      	mov	r3, r0
 8002ec0:	68f8      	ldr	r0, [r7, #12]
 8002ec2:	f000 f9d3 	bl	800326c <I2C_RequestMemoryWrite>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002ed4:	2301      	movs	r3, #1
 8002ed6:	e0a9      	b.n	800302c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002edc:	b29b      	uxth	r3, r3
 8002ede:	2bff      	cmp	r3, #255	@ 0xff
 8002ee0:	d90e      	bls.n	8002f00 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	22ff      	movs	r2, #255	@ 0xff
 8002ee6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002eec:	b2da      	uxtb	r2, r3
 8002eee:	8979      	ldrh	r1, [r7, #10]
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	9300      	str	r3, [sp, #0]
 8002ef4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002ef8:	68f8      	ldr	r0, [r7, #12]
 8002efa:	f000 fc47 	bl	800378c <I2C_TransferConfig>
 8002efe:	e00f      	b.n	8002f20 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f04:	b29a      	uxth	r2, r3
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f0e:	b2da      	uxtb	r2, r3
 8002f10:	8979      	ldrh	r1, [r7, #10]
 8002f12:	2300      	movs	r3, #0
 8002f14:	9300      	str	r3, [sp, #0]
 8002f16:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f000 fc36 	bl	800378c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002f24:	68f8      	ldr	r0, [r7, #12]
 8002f26:	f000 fac6 	bl	80034b6 <I2C_WaitOnTXISFlagUntilTimeout>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d001      	beq.n	8002f34 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e07b      	b.n	800302c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f38:	781a      	ldrb	r2, [r3, #0]
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f44:	1c5a      	adds	r2, r3, #1
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	3b01      	subs	r3, #1
 8002f52:	b29a      	uxth	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f5c:	3b01      	subs	r3, #1
 8002f5e:	b29a      	uxth	r2, r3
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d034      	beq.n	8002fd8 <HAL_I2C_Mem_Write+0x1c8>
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d130      	bne.n	8002fd8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	9300      	str	r3, [sp, #0]
 8002f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	2180      	movs	r1, #128	@ 0x80
 8002f80:	68f8      	ldr	r0, [r7, #12]
 8002f82:	f000 fa3f 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d001      	beq.n	8002f90 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8002f8c:	2301      	movs	r3, #1
 8002f8e:	e04d      	b.n	800302c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f94:	b29b      	uxth	r3, r3
 8002f96:	2bff      	cmp	r3, #255	@ 0xff
 8002f98:	d90e      	bls.n	8002fb8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	22ff      	movs	r2, #255	@ 0xff
 8002f9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fa4:	b2da      	uxtb	r2, r3
 8002fa6:	8979      	ldrh	r1, [r7, #10]
 8002fa8:	2300      	movs	r3, #0
 8002faa:	9300      	str	r3, [sp, #0]
 8002fac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002fb0:	68f8      	ldr	r0, [r7, #12]
 8002fb2:	f000 fbeb 	bl	800378c <I2C_TransferConfig>
 8002fb6:	e00f      	b.n	8002fd8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fc6:	b2da      	uxtb	r2, r3
 8002fc8:	8979      	ldrh	r1, [r7, #10]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	9300      	str	r3, [sp, #0]
 8002fce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002fd2:	68f8      	ldr	r0, [r7, #12]
 8002fd4:	f000 fbda 	bl	800378c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d19e      	bne.n	8002f20 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f000 faac 	bl	8003544 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002fec:	4603      	mov	r3, r0
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d001      	beq.n	8002ff6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e01a      	b.n	800302c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	6859      	ldr	r1, [r3, #4]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	4b0a      	ldr	r3, [pc, #40]	@ (8003034 <HAL_I2C_Mem_Write+0x224>)
 800300a:	400b      	ands	r3, r1
 800300c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2220      	movs	r2, #32
 8003012:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	e000      	b.n	800302c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800302a:	2302      	movs	r3, #2
  }
}
 800302c:	4618      	mov	r0, r3
 800302e:	3718      	adds	r7, #24
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	fe00e800 	.word	0xfe00e800

08003038 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b088      	sub	sp, #32
 800303c:	af02      	add	r7, sp, #8
 800303e:	60f8      	str	r0, [r7, #12]
 8003040:	4608      	mov	r0, r1
 8003042:	4611      	mov	r1, r2
 8003044:	461a      	mov	r2, r3
 8003046:	4603      	mov	r3, r0
 8003048:	817b      	strh	r3, [r7, #10]
 800304a:	460b      	mov	r3, r1
 800304c:	813b      	strh	r3, [r7, #8]
 800304e:	4613      	mov	r3, r2
 8003050:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b20      	cmp	r3, #32
 800305c:	f040 80fd 	bne.w	800325a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003060:	6a3b      	ldr	r3, [r7, #32]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d002      	beq.n	800306c <HAL_I2C_Mem_Read+0x34>
 8003066:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003068:	2b00      	cmp	r3, #0
 800306a:	d105      	bne.n	8003078 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003072:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e0f1      	b.n	800325c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800307e:	2b01      	cmp	r3, #1
 8003080:	d101      	bne.n	8003086 <HAL_I2C_Mem_Read+0x4e>
 8003082:	2302      	movs	r3, #2
 8003084:	e0ea      	b.n	800325c <HAL_I2C_Mem_Read+0x224>
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	2201      	movs	r2, #1
 800308a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800308e:	f7ff fb4b 	bl	8002728 <HAL_GetTick>
 8003092:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	9300      	str	r3, [sp, #0]
 8003098:	2319      	movs	r3, #25
 800309a:	2201      	movs	r2, #1
 800309c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 f9af 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0d5      	b.n	800325c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2222      	movs	r2, #34	@ 0x22
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2240      	movs	r2, #64	@ 0x40
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	2200      	movs	r2, #0
 80030c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	6a3a      	ldr	r2, [r7, #32]
 80030ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030d8:	88f8      	ldrh	r0, [r7, #6]
 80030da:	893a      	ldrh	r2, [r7, #8]
 80030dc:	8979      	ldrh	r1, [r7, #10]
 80030de:	697b      	ldr	r3, [r7, #20]
 80030e0:	9301      	str	r3, [sp, #4]
 80030e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	4603      	mov	r3, r0
 80030e8:	68f8      	ldr	r0, [r7, #12]
 80030ea:	f000 f913 	bl	8003314 <I2C_RequestMemoryRead>
 80030ee:	4603      	mov	r3, r0
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d005      	beq.n	8003100 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e0ad      	b.n	800325c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003104:	b29b      	uxth	r3, r3
 8003106:	2bff      	cmp	r3, #255	@ 0xff
 8003108:	d90e      	bls.n	8003128 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2201      	movs	r2, #1
 800310e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003114:	b2da      	uxtb	r2, r3
 8003116:	8979      	ldrh	r1, [r7, #10]
 8003118:	4b52      	ldr	r3, [pc, #328]	@ (8003264 <HAL_I2C_Mem_Read+0x22c>)
 800311a:	9300      	str	r3, [sp, #0]
 800311c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003120:	68f8      	ldr	r0, [r7, #12]
 8003122:	f000 fb33 	bl	800378c <I2C_TransferConfig>
 8003126:	e00f      	b.n	8003148 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800312c:	b29a      	uxth	r2, r3
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003136:	b2da      	uxtb	r2, r3
 8003138:	8979      	ldrh	r1, [r7, #10]
 800313a:	4b4a      	ldr	r3, [pc, #296]	@ (8003264 <HAL_I2C_Mem_Read+0x22c>)
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003142:	68f8      	ldr	r0, [r7, #12]
 8003144:	f000 fb22 	bl	800378c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800314e:	2200      	movs	r2, #0
 8003150:	2104      	movs	r1, #4
 8003152:	68f8      	ldr	r0, [r7, #12]
 8003154:	f000 f956 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 8003158:	4603      	mov	r3, r0
 800315a:	2b00      	cmp	r3, #0
 800315c:	d001      	beq.n	8003162 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800315e:	2301      	movs	r3, #1
 8003160:	e07c      	b.n	800325c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800316c:	b2d2      	uxtb	r2, r2
 800316e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800317e:	3b01      	subs	r3, #1
 8003180:	b29a      	uxth	r2, r3
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318a:	b29b      	uxth	r3, r3
 800318c:	3b01      	subs	r3, #1
 800318e:	b29a      	uxth	r2, r3
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003198:	b29b      	uxth	r3, r3
 800319a:	2b00      	cmp	r3, #0
 800319c:	d034      	beq.n	8003208 <HAL_I2C_Mem_Read+0x1d0>
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d130      	bne.n	8003208 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	9300      	str	r3, [sp, #0]
 80031aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ac:	2200      	movs	r2, #0
 80031ae:	2180      	movs	r1, #128	@ 0x80
 80031b0:	68f8      	ldr	r0, [r7, #12]
 80031b2:	f000 f927 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d001      	beq.n	80031c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80031bc:	2301      	movs	r3, #1
 80031be:	e04d      	b.n	800325c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031c4:	b29b      	uxth	r3, r3
 80031c6:	2bff      	cmp	r3, #255	@ 0xff
 80031c8:	d90e      	bls.n	80031e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	2201      	movs	r2, #1
 80031ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031d4:	b2da      	uxtb	r2, r3
 80031d6:	8979      	ldrh	r1, [r7, #10]
 80031d8:	2300      	movs	r3, #0
 80031da:	9300      	str	r3, [sp, #0]
 80031dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031e0:	68f8      	ldr	r0, [r7, #12]
 80031e2:	f000 fad3 	bl	800378c <I2C_TransferConfig>
 80031e6:	e00f      	b.n	8003208 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031ec:	b29a      	uxth	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031f6:	b2da      	uxtb	r2, r3
 80031f8:	8979      	ldrh	r1, [r7, #10]
 80031fa:	2300      	movs	r3, #0
 80031fc:	9300      	str	r3, [sp, #0]
 80031fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	f000 fac2 	bl	800378c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d19a      	bne.n	8003148 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f000 f994 	bl	8003544 <I2C_WaitOnSTOPFlagUntilTimeout>
 800321c:	4603      	mov	r3, r0
 800321e:	2b00      	cmp	r3, #0
 8003220:	d001      	beq.n	8003226 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e01a      	b.n	800325c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	2220      	movs	r2, #32
 800322c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	6859      	ldr	r1, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <HAL_I2C_Mem_Read+0x230>)
 800323a:	400b      	ands	r3, r1
 800323c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003256:	2300      	movs	r3, #0
 8003258:	e000      	b.n	800325c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800325a:	2302      	movs	r3, #2
  }
}
 800325c:	4618      	mov	r0, r3
 800325e:	3718      	adds	r7, #24
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	80002400 	.word	0x80002400
 8003268:	fe00e800 	.word	0xfe00e800

0800326c <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	4608      	mov	r0, r1
 8003276:	4611      	mov	r1, r2
 8003278:	461a      	mov	r2, r3
 800327a:	4603      	mov	r3, r0
 800327c:	817b      	strh	r3, [r7, #10]
 800327e:	460b      	mov	r3, r1
 8003280:	813b      	strh	r3, [r7, #8]
 8003282:	4613      	mov	r3, r2
 8003284:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003286:	88fb      	ldrh	r3, [r7, #6]
 8003288:	b2da      	uxtb	r2, r3
 800328a:	8979      	ldrh	r1, [r7, #10]
 800328c:	4b20      	ldr	r3, [pc, #128]	@ (8003310 <I2C_RequestMemoryWrite+0xa4>)
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003294:	68f8      	ldr	r0, [r7, #12]
 8003296:	f000 fa79 	bl	800378c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800329a:	69fa      	ldr	r2, [r7, #28]
 800329c:	69b9      	ldr	r1, [r7, #24]
 800329e:	68f8      	ldr	r0, [r7, #12]
 80032a0:	f000 f909 	bl	80034b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e02c      	b.n	8003308 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80032ae:	88fb      	ldrh	r3, [r7, #6]
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	d105      	bne.n	80032c0 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032b4:	893b      	ldrh	r3, [r7, #8]
 80032b6:	b2da      	uxtb	r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	629a      	str	r2, [r3, #40]	@ 0x28
 80032be:	e015      	b.n	80032ec <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80032c0:	893b      	ldrh	r3, [r7, #8]
 80032c2:	0a1b      	lsrs	r3, r3, #8
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	b2da      	uxtb	r2, r3
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	69b9      	ldr	r1, [r7, #24]
 80032d2:	68f8      	ldr	r0, [r7, #12]
 80032d4:	f000 f8ef 	bl	80034b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80032d8:	4603      	mov	r3, r0
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d001      	beq.n	80032e2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e012      	b.n	8003308 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80032e2:	893b      	ldrh	r3, [r7, #8]
 80032e4:	b2da      	uxtb	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80032ec:	69fb      	ldr	r3, [r7, #28]
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2200      	movs	r2, #0
 80032f4:	2180      	movs	r1, #128	@ 0x80
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f884 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e000      	b.n	8003308 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8003306:	2300      	movs	r3, #0
}
 8003308:	4618      	mov	r0, r3
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	bd80      	pop	{r7, pc}
 8003310:	80002000 	.word	0x80002000

08003314 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af02      	add	r7, sp, #8
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	4608      	mov	r0, r1
 800331e:	4611      	mov	r1, r2
 8003320:	461a      	mov	r2, r3
 8003322:	4603      	mov	r3, r0
 8003324:	817b      	strh	r3, [r7, #10]
 8003326:	460b      	mov	r3, r1
 8003328:	813b      	strh	r3, [r7, #8]
 800332a:	4613      	mov	r3, r2
 800332c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800332e:	88fb      	ldrh	r3, [r7, #6]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	8979      	ldrh	r1, [r7, #10]
 8003334:	4b20      	ldr	r3, [pc, #128]	@ (80033b8 <I2C_RequestMemoryRead+0xa4>)
 8003336:	9300      	str	r3, [sp, #0]
 8003338:	2300      	movs	r3, #0
 800333a:	68f8      	ldr	r0, [r7, #12]
 800333c:	f000 fa26 	bl	800378c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003340:	69fa      	ldr	r2, [r7, #28]
 8003342:	69b9      	ldr	r1, [r7, #24]
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 f8b6 	bl	80034b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800334a:	4603      	mov	r3, r0
 800334c:	2b00      	cmp	r3, #0
 800334e:	d001      	beq.n	8003354 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e02c      	b.n	80033ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003354:	88fb      	ldrh	r3, [r7, #6]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d105      	bne.n	8003366 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800335a:	893b      	ldrh	r3, [r7, #8]
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	629a      	str	r2, [r3, #40]	@ 0x28
 8003364:	e015      	b.n	8003392 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8003366:	893b      	ldrh	r3, [r7, #8]
 8003368:	0a1b      	lsrs	r3, r3, #8
 800336a:	b29b      	uxth	r3, r3
 800336c:	b2da      	uxtb	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	69b9      	ldr	r1, [r7, #24]
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f89c 	bl	80034b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e012      	b.n	80033ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003388:	893b      	ldrh	r3, [r7, #8]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	9300      	str	r3, [sp, #0]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	2200      	movs	r2, #0
 800339a:	2140      	movs	r1, #64	@ 0x40
 800339c:	68f8      	ldr	r0, [r7, #12]
 800339e:	f000 f831 	bl	8003404 <I2C_WaitOnFlagUntilTimeout>
 80033a2:	4603      	mov	r3, r0
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d001      	beq.n	80033ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e000      	b.n	80033ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	80002000 	.word	0x80002000

080033bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699b      	ldr	r3, [r3, #24]
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d103      	bne.n	80033da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2200      	movs	r2, #0
 80033d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	699b      	ldr	r3, [r3, #24]
 80033e0:	f003 0301 	and.w	r3, r3, #1
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d007      	beq.n	80033f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699a      	ldr	r2, [r3, #24]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f042 0201 	orr.w	r2, r2, #1
 80033f6:	619a      	str	r2, [r3, #24]
  }
}
 80033f8:	bf00      	nop
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b084      	sub	sp, #16
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	603b      	str	r3, [r7, #0]
 8003410:	4613      	mov	r3, r2
 8003412:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003414:	e03b      	b.n	800348e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003416:	69ba      	ldr	r2, [r7, #24]
 8003418:	6839      	ldr	r1, [r7, #0]
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 f8d6 	bl	80035cc <I2C_IsErrorOccurred>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e041      	b.n	80034ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003430:	d02d      	beq.n	800348e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003432:	f7ff f979 	bl	8002728 <HAL_GetTick>
 8003436:	4602      	mov	r2, r0
 8003438:	69bb      	ldr	r3, [r7, #24]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <I2C_WaitOnFlagUntilTimeout+0x44>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d122      	bne.n	800348e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	699a      	ldr	r2, [r3, #24]
 800344e:	68bb      	ldr	r3, [r7, #8]
 8003450:	4013      	ands	r3, r2
 8003452:	68ba      	ldr	r2, [r7, #8]
 8003454:	429a      	cmp	r2, r3
 8003456:	bf0c      	ite	eq
 8003458:	2301      	moveq	r3, #1
 800345a:	2300      	movne	r3, #0
 800345c:	b2db      	uxtb	r3, r3
 800345e:	461a      	mov	r2, r3
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	429a      	cmp	r2, r3
 8003464:	d113      	bne.n	800348e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346a:	f043 0220 	orr.w	r2, r3, #32
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2220      	movs	r2, #32
 8003476:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2200      	movs	r2, #0
 8003486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e00f      	b.n	80034ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699a      	ldr	r2, [r3, #24]
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	4013      	ands	r3, r2
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	429a      	cmp	r2, r3
 800349c:	bf0c      	ite	eq
 800349e:	2301      	moveq	r3, #1
 80034a0:	2300      	movne	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	461a      	mov	r2, r3
 80034a6:	79fb      	ldrb	r3, [r7, #7]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d0b4      	beq.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3710      	adds	r7, #16
 80034b2:	46bd      	mov	sp, r7
 80034b4:	bd80      	pop	{r7, pc}

080034b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80034b6:	b580      	push	{r7, lr}
 80034b8:	b084      	sub	sp, #16
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	60f8      	str	r0, [r7, #12]
 80034be:	60b9      	str	r1, [r7, #8]
 80034c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80034c2:	e033      	b.n	800352c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	68b9      	ldr	r1, [r7, #8]
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f87f 	bl	80035cc <I2C_IsErrorOccurred>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d001      	beq.n	80034d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e031      	b.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80034de:	d025      	beq.n	800352c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e0:	f7ff f922 	bl	8002728 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d302      	bcc.n	80034f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d11a      	bne.n	800352c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	f003 0302 	and.w	r3, r3, #2
 8003500:	2b02      	cmp	r3, #2
 8003502:	d013      	beq.n	800352c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003508:	f043 0220 	orr.w	r2, r3, #32
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2220      	movs	r2, #32
 8003514:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	e007      	b.n	800353c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699b      	ldr	r3, [r3, #24]
 8003532:	f003 0302 	and.w	r3, r3, #2
 8003536:	2b02      	cmp	r3, #2
 8003538:	d1c4      	bne.n	80034c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3710      	adds	r7, #16
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	60f8      	str	r0, [r7, #12]
 800354c:	60b9      	str	r1, [r7, #8]
 800354e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003550:	e02f      	b.n	80035b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003552:	687a      	ldr	r2, [r7, #4]
 8003554:	68b9      	ldr	r1, [r7, #8]
 8003556:	68f8      	ldr	r0, [r7, #12]
 8003558:	f000 f838 	bl	80035cc <I2C_IsErrorOccurred>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e02d      	b.n	80035c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003566:	f7ff f8df 	bl	8002728 <HAL_GetTick>
 800356a:	4602      	mov	r2, r0
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	1ad3      	subs	r3, r2, r3
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	429a      	cmp	r2, r3
 8003574:	d302      	bcc.n	800357c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d11a      	bne.n	80035b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	699b      	ldr	r3, [r3, #24]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b20      	cmp	r3, #32
 8003588:	d013      	beq.n	80035b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800358e:	f043 0220 	orr.w	r2, r3, #32
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2220      	movs	r2, #32
 800359a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e007      	b.n	80035c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	699b      	ldr	r3, [r3, #24]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b20      	cmp	r3, #32
 80035be:	d1c8      	bne.n	8003552 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035c0:	2300      	movs	r3, #0
}
 80035c2:	4618      	mov	r0, r3
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
	...

080035cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b08a      	sub	sp, #40	@ 0x28
 80035d0:	af00      	add	r7, sp, #0
 80035d2:	60f8      	str	r0, [r7, #12]
 80035d4:	60b9      	str	r1, [r7, #8]
 80035d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d8:	2300      	movs	r3, #0
 80035da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	699b      	ldr	r3, [r3, #24]
 80035e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80035e6:	2300      	movs	r3, #0
 80035e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	f003 0310 	and.w	r3, r3, #16
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d068      	beq.n	80036ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2210      	movs	r2, #16
 80035fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003600:	e049      	b.n	8003696 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003608:	d045      	beq.n	8003696 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800360a:	f7ff f88d 	bl	8002728 <HAL_GetTick>
 800360e:	4602      	mov	r2, r0
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	1ad3      	subs	r3, r2, r3
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	429a      	cmp	r2, r3
 8003618:	d302      	bcc.n	8003620 <I2C_IsErrorOccurred+0x54>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d13a      	bne.n	8003696 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	685b      	ldr	r3, [r3, #4]
 8003626:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800362a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003632:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800363e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003642:	d121      	bne.n	8003688 <I2C_IsErrorOccurred+0xbc>
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800364a:	d01d      	beq.n	8003688 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800364c:	7cfb      	ldrb	r3, [r7, #19]
 800364e:	2b20      	cmp	r3, #32
 8003650:	d01a      	beq.n	8003688 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003660:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003662:	f7ff f861 	bl	8002728 <HAL_GetTick>
 8003666:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003668:	e00e      	b.n	8003688 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800366a:	f7ff f85d 	bl	8002728 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b19      	cmp	r3, #25
 8003676:	d907      	bls.n	8003688 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8003678:	6a3b      	ldr	r3, [r7, #32]
 800367a:	f043 0320 	orr.w	r3, r3, #32
 800367e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003680:	2301      	movs	r3, #1
 8003682:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8003686:	e006      	b.n	8003696 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	f003 0320 	and.w	r3, r3, #32
 8003692:	2b20      	cmp	r3, #32
 8003694:	d1e9      	bne.n	800366a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	699b      	ldr	r3, [r3, #24]
 800369c:	f003 0320 	and.w	r3, r3, #32
 80036a0:	2b20      	cmp	r3, #32
 80036a2:	d003      	beq.n	80036ac <I2C_IsErrorOccurred+0xe0>
 80036a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d0aa      	beq.n	8003602 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80036ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d103      	bne.n	80036bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2220      	movs	r2, #32
 80036ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80036bc:	6a3b      	ldr	r3, [r7, #32]
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	699b      	ldr	r3, [r3, #24]
 80036d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d00b      	beq.n	80036f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80036ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d00b      	beq.n	8003716 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	f043 0308 	orr.w	r3, r3, #8
 8003704:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800370e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003710:	2301      	movs	r3, #1
 8003712:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800371c:	2b00      	cmp	r3, #0
 800371e:	d00b      	beq.n	8003738 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003720:	6a3b      	ldr	r3, [r7, #32]
 8003722:	f043 0302 	orr.w	r3, r3, #2
 8003726:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003730:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8003738:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800373c:	2b00      	cmp	r3, #0
 800373e:	d01c      	beq.n	800377a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003740:	68f8      	ldr	r0, [r7, #12]
 8003742:	f7ff fe3b 	bl	80033bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681a      	ldr	r2, [r3, #0]
 8003750:	4b0d      	ldr	r3, [pc, #52]	@ (8003788 <I2C_IsErrorOccurred+0x1bc>)
 8003752:	400b      	ands	r3, r1
 8003754:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	431a      	orrs	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800377a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800377e:	4618      	mov	r0, r3
 8003780:	3728      	adds	r7, #40	@ 0x28
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}
 8003786:	bf00      	nop
 8003788:	fe00e800 	.word	0xfe00e800

0800378c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800378c:	b480      	push	{r7}
 800378e:	b087      	sub	sp, #28
 8003790:	af00      	add	r7, sp, #0
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	607b      	str	r3, [r7, #4]
 8003796:	460b      	mov	r3, r1
 8003798:	817b      	strh	r3, [r7, #10]
 800379a:	4613      	mov	r3, r2
 800379c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800379e:	897b      	ldrh	r3, [r7, #10]
 80037a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037a4:	7a7b      	ldrb	r3, [r7, #9]
 80037a6:	041b      	lsls	r3, r3, #16
 80037a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80037b2:	6a3b      	ldr	r3, [r7, #32]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80037ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	6a3b      	ldr	r3, [r7, #32]
 80037c4:	0d5b      	lsrs	r3, r3, #21
 80037c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80037ca:	4b08      	ldr	r3, [pc, #32]	@ (80037ec <I2C_TransferConfig+0x60>)
 80037cc:	430b      	orrs	r3, r1
 80037ce:	43db      	mvns	r3, r3
 80037d0:	ea02 0103 	and.w	r1, r2, r3
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	697a      	ldr	r2, [r7, #20]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80037de:	bf00      	nop
 80037e0:	371c      	adds	r7, #28
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	03ff63ff 	.word	0x03ff63ff

080037f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b20      	cmp	r3, #32
 8003804:	d138      	bne.n	8003878 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003810:	2302      	movs	r3, #2
 8003812:	e032      	b.n	800387a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2224      	movs	r2, #36	@ 0x24
 8003820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f022 0201 	bic.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	681a      	ldr	r2, [r3, #0]
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003842:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	6819      	ldr	r1, [r3, #0]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	681a      	ldr	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f042 0201 	orr.w	r2, r2, #1
 8003862:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2220      	movs	r2, #32
 8003868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2200      	movs	r2, #0
 8003870:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003874:	2300      	movs	r3, #0
 8003876:	e000      	b.n	800387a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003878:	2302      	movs	r3, #2
  }
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003884:	4770      	bx	lr

08003886 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003886:	b480      	push	{r7}
 8003888:	b085      	sub	sp, #20
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
 800388e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003896:	b2db      	uxtb	r3, r3
 8003898:	2b20      	cmp	r3, #32
 800389a:	d139      	bne.n	8003910 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80038a2:	2b01      	cmp	r3, #1
 80038a4:	d101      	bne.n	80038aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038a6:	2302      	movs	r3, #2
 80038a8:	e033      	b.n	8003912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2201      	movs	r2, #1
 80038ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2224      	movs	r2, #36	@ 0x24
 80038b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f022 0201 	bic.w	r2, r2, #1
 80038c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80038d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	021b      	lsls	r3, r3, #8
 80038de:	68fa      	ldr	r2, [r7, #12]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f042 0201 	orr.w	r2, r2, #1
 80038fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800390c:	2300      	movs	r3, #0
 800390e:	e000      	b.n	8003912 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003910:	2302      	movs	r3, #2
  }
}
 8003912:	4618      	mov	r0, r3
 8003914:	3714      	adds	r7, #20
 8003916:	46bd      	mov	sp, r7
 8003918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391c:	4770      	bx	lr
	...

08003920 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003924:	4b04      	ldr	r3, [pc, #16]	@ (8003938 <HAL_PWREx_GetVoltageRange+0x18>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 800392c:	4618      	mov	r0, r3
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr
 8003936:	bf00      	nop
 8003938:	40007000 	.word	0x40007000

0800393c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800394a:	d130      	bne.n	80039ae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800394c:	4b23      	ldr	r3, [pc, #140]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003954:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003958:	d038      	beq.n	80039cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800395a:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003962:	4a1e      	ldr	r2, [pc, #120]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003964:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003968:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800396a:	4b1d      	ldr	r3, [pc, #116]	@ (80039e0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2232      	movs	r2, #50	@ 0x32
 8003970:	fb02 f303 	mul.w	r3, r2, r3
 8003974:	4a1b      	ldr	r2, [pc, #108]	@ (80039e4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	0c9b      	lsrs	r3, r3, #18
 800397c:	3301      	adds	r3, #1
 800397e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003980:	e002      	b.n	8003988 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	3b01      	subs	r3, #1
 8003986:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003988:	4b14      	ldr	r3, [pc, #80]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800398a:	695b      	ldr	r3, [r3, #20]
 800398c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003990:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003994:	d102      	bne.n	800399c <HAL_PWREx_ControlVoltageScaling+0x60>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2b00      	cmp	r3, #0
 800399a:	d1f2      	bne.n	8003982 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800399c:	4b0f      	ldr	r3, [pc, #60]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80039a4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039a8:	d110      	bne.n	80039cc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80039aa:	2303      	movs	r3, #3
 80039ac:	e00f      	b.n	80039ce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80039ae:	4b0b      	ldr	r3, [pc, #44]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80039b6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80039ba:	d007      	beq.n	80039cc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80039bc:	4b07      	ldr	r3, [pc, #28]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80039c4:	4a05      	ldr	r2, [pc, #20]	@ (80039dc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80039c6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80039ca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80039cc:	2300      	movs	r3, #0
}
 80039ce:	4618      	mov	r0, r3
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
 80039da:	bf00      	nop
 80039dc:	40007000 	.word	0x40007000
 80039e0:	20000000 	.word	0x20000000
 80039e4:	431bde83 	.word	0x431bde83

080039e8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b088      	sub	sp, #32
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	e3ca      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80039fa:	4b97      	ldr	r3, [pc, #604]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 030c 	and.w	r3, r3, #12
 8003a02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003a04:	4b94      	ldr	r3, [pc, #592]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f003 0303 	and.w	r3, r3, #3
 8003a0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f003 0310 	and.w	r3, r3, #16
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	f000 80e4 	beq.w	8003be4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003a1c:	69bb      	ldr	r3, [r7, #24]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d007      	beq.n	8003a32 <HAL_RCC_OscConfig+0x4a>
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	2b0c      	cmp	r3, #12
 8003a26:	f040 808b 	bne.w	8003b40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	f040 8087 	bne.w	8003b40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003a32:	4b89      	ldr	r3, [pc, #548]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f003 0302 	and.w	r3, r3, #2
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d005      	beq.n	8003a4a <HAL_RCC_OscConfig+0x62>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	699b      	ldr	r3, [r3, #24]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d101      	bne.n	8003a4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	e3a2      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a1a      	ldr	r2, [r3, #32]
 8003a4e:	4b82      	ldr	r3, [pc, #520]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0308 	and.w	r3, r3, #8
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d004      	beq.n	8003a64 <HAL_RCC_OscConfig+0x7c>
 8003a5a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a62:	e005      	b.n	8003a70 <HAL_RCC_OscConfig+0x88>
 8003a64:	4b7c      	ldr	r3, [pc, #496]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a6a:	091b      	lsrs	r3, r3, #4
 8003a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d223      	bcs.n	8003abc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f000 fd55 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d001      	beq.n	8003a88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e383      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003a88:	4b73      	ldr	r3, [pc, #460]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a72      	ldr	r2, [pc, #456]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a8e:	f043 0308 	orr.w	r3, r3, #8
 8003a92:	6013      	str	r3, [r2, #0]
 8003a94:	4b70      	ldr	r3, [pc, #448]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a1b      	ldr	r3, [r3, #32]
 8003aa0:	496d      	ldr	r1, [pc, #436]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003aa6:	4b6c      	ldr	r3, [pc, #432]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	69db      	ldr	r3, [r3, #28]
 8003ab2:	021b      	lsls	r3, r3, #8
 8003ab4:	4968      	ldr	r1, [pc, #416]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	604b      	str	r3, [r1, #4]
 8003aba:	e025      	b.n	8003b08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003abc:	4b66      	ldr	r3, [pc, #408]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a65      	ldr	r2, [pc, #404]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ac2:	f043 0308 	orr.w	r3, r3, #8
 8003ac6:	6013      	str	r3, [r2, #0]
 8003ac8:	4b63      	ldr	r3, [pc, #396]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	4960      	ldr	r1, [pc, #384]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003ada:	4b5f      	ldr	r3, [pc, #380]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	021b      	lsls	r3, r3, #8
 8003ae8:	495b      	ldr	r1, [pc, #364]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003aea:	4313      	orrs	r3, r2
 8003aec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a1b      	ldr	r3, [r3, #32]
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fd15 	bl	8004528 <RCC_SetFlashLatencyFromMSIRange>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e343      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003b08:	f000 fc4a 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	4b52      	ldr	r3, [pc, #328]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	091b      	lsrs	r3, r3, #4
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	4950      	ldr	r1, [pc, #320]	@ (8003c5c <HAL_RCC_OscConfig+0x274>)
 8003b1a:	5ccb      	ldrb	r3, [r1, r3]
 8003b1c:	f003 031f 	and.w	r3, r3, #31
 8003b20:	fa22 f303 	lsr.w	r3, r2, r3
 8003b24:	4a4e      	ldr	r2, [pc, #312]	@ (8003c60 <HAL_RCC_OscConfig+0x278>)
 8003b26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003b28:	4b4e      	ldr	r3, [pc, #312]	@ (8003c64 <HAL_RCC_OscConfig+0x27c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	f7fe fdab 	bl	8002688 <HAL_InitTick>
 8003b32:	4603      	mov	r3, r0
 8003b34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003b36:	7bfb      	ldrb	r3, [r7, #15]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d052      	beq.n	8003be2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003b3c:	7bfb      	ldrb	r3, [r7, #15]
 8003b3e:	e327      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d032      	beq.n	8003bae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003b48:	4b43      	ldr	r3, [pc, #268]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a42      	ldr	r2, [pc, #264]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b4e:	f043 0301 	orr.w	r3, r3, #1
 8003b52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003b54:	f7fe fde8 	bl	8002728 <HAL_GetTick>
 8003b58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b5a:	e008      	b.n	8003b6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003b5c:	f7fe fde4 	bl	8002728 <HAL_GetTick>
 8003b60:	4602      	mov	r2, r0
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	1ad3      	subs	r3, r2, r3
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	d901      	bls.n	8003b6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003b6a:	2303      	movs	r3, #3
 8003b6c:	e310      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003b6e:	4b3a      	ldr	r3, [pc, #232]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f003 0302 	and.w	r3, r3, #2
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d0f0      	beq.n	8003b5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003b7a:	4b37      	ldr	r3, [pc, #220]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4a36      	ldr	r2, [pc, #216]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b80:	f043 0308 	orr.w	r3, r3, #8
 8003b84:	6013      	str	r3, [r2, #0]
 8003b86:	4b34      	ldr	r3, [pc, #208]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4931      	ldr	r1, [pc, #196]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b94:	4313      	orrs	r3, r2
 8003b96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003b98:	4b2f      	ldr	r3, [pc, #188]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	69db      	ldr	r3, [r3, #28]
 8003ba4:	021b      	lsls	r3, r3, #8
 8003ba6:	492c      	ldr	r1, [pc, #176]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003ba8:	4313      	orrs	r3, r2
 8003baa:	604b      	str	r3, [r1, #4]
 8003bac:	e01a      	b.n	8003be4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003bae:	4b2a      	ldr	r3, [pc, #168]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a29      	ldr	r2, [pc, #164]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bb4:	f023 0301 	bic.w	r3, r3, #1
 8003bb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003bba:	f7fe fdb5 	bl	8002728 <HAL_GetTick>
 8003bbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bc0:	e008      	b.n	8003bd4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003bc2:	f7fe fdb1 	bl	8002728 <HAL_GetTick>
 8003bc6:	4602      	mov	r2, r0
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	1ad3      	subs	r3, r2, r3
 8003bcc:	2b02      	cmp	r3, #2
 8003bce:	d901      	bls.n	8003bd4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e2dd      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003bd4:	4b20      	ldr	r3, [pc, #128]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f003 0302 	and.w	r3, r3, #2
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f0      	bne.n	8003bc2 <HAL_RCC_OscConfig+0x1da>
 8003be0:	e000      	b.n	8003be4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003be2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d074      	beq.n	8003cda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b08      	cmp	r3, #8
 8003bf4:	d005      	beq.n	8003c02 <HAL_RCC_OscConfig+0x21a>
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b0c      	cmp	r3, #12
 8003bfa:	d10e      	bne.n	8003c1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	d10b      	bne.n	8003c1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c02:	4b15      	ldr	r3, [pc, #84]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d064      	beq.n	8003cd8 <HAL_RCC_OscConfig+0x2f0>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d160      	bne.n	8003cd8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e2ba      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c22:	d106      	bne.n	8003c32 <HAL_RCC_OscConfig+0x24a>
 8003c24:	4b0c      	ldr	r3, [pc, #48]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a0b      	ldr	r2, [pc, #44]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c2e:	6013      	str	r3, [r2, #0]
 8003c30:	e026      	b.n	8003c80 <HAL_RCC_OscConfig+0x298>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003c3a:	d115      	bne.n	8003c68 <HAL_RCC_OscConfig+0x280>
 8003c3c:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	4a05      	ldr	r2, [pc, #20]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003c46:	6013      	str	r3, [r2, #0]
 8003c48:	4b03      	ldr	r3, [pc, #12]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a02      	ldr	r2, [pc, #8]	@ (8003c58 <HAL_RCC_OscConfig+0x270>)
 8003c4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c52:	6013      	str	r3, [r2, #0]
 8003c54:	e014      	b.n	8003c80 <HAL_RCC_OscConfig+0x298>
 8003c56:	bf00      	nop
 8003c58:	40021000 	.word	0x40021000
 8003c5c:	0800c544 	.word	0x0800c544
 8003c60:	20000000 	.word	0x20000000
 8003c64:	20000004 	.word	0x20000004
 8003c68:	4ba0      	ldr	r3, [pc, #640]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a9f      	ldr	r2, [pc, #636]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	4b9d      	ldr	r3, [pc, #628]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a9c      	ldr	r2, [pc, #624]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d013      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c88:	f7fe fd4e 	bl	8002728 <HAL_GetTick>
 8003c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003c8e:	e008      	b.n	8003ca2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003c90:	f7fe fd4a 	bl	8002728 <HAL_GetTick>
 8003c94:	4602      	mov	r2, r0
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	1ad3      	subs	r3, r2, r3
 8003c9a:	2b64      	cmp	r3, #100	@ 0x64
 8003c9c:	d901      	bls.n	8003ca2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003c9e:	2303      	movs	r3, #3
 8003ca0:	e276      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ca2:	4b92      	ldr	r3, [pc, #584]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f0      	beq.n	8003c90 <HAL_RCC_OscConfig+0x2a8>
 8003cae:	e014      	b.n	8003cda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb0:	f7fe fd3a 	bl	8002728 <HAL_GetTick>
 8003cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cb6:	e008      	b.n	8003cca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003cb8:	f7fe fd36 	bl	8002728 <HAL_GetTick>
 8003cbc:	4602      	mov	r2, r0
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	2b64      	cmp	r3, #100	@ 0x64
 8003cc4:	d901      	bls.n	8003cca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e262      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003cca:	4b88      	ldr	r3, [pc, #544]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d1f0      	bne.n	8003cb8 <HAL_RCC_OscConfig+0x2d0>
 8003cd6:	e000      	b.n	8003cda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 0302 	and.w	r3, r3, #2
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d060      	beq.n	8003da8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	2b04      	cmp	r3, #4
 8003cea:	d005      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x310>
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	2b0c      	cmp	r3, #12
 8003cf0:	d119      	bne.n	8003d26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	2b02      	cmp	r3, #2
 8003cf6:	d116      	bne.n	8003d26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003cf8:	4b7c      	ldr	r3, [pc, #496]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d005      	beq.n	8003d10 <HAL_RCC_OscConfig+0x328>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d101      	bne.n	8003d10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e23f      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d10:	4b76      	ldr	r3, [pc, #472]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	061b      	lsls	r3, r3, #24
 8003d1e:	4973      	ldr	r1, [pc, #460]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003d24:	e040      	b.n	8003da8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d023      	beq.n	8003d76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d2e:	4b6f      	ldr	r3, [pc, #444]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a6e      	ldr	r2, [pc, #440]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3a:	f7fe fcf5 	bl	8002728 <HAL_GetTick>
 8003d3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d40:	e008      	b.n	8003d54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d42:	f7fe fcf1 	bl	8002728 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	2b02      	cmp	r3, #2
 8003d4e:	d901      	bls.n	8003d54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e21d      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d54:	4b65      	ldr	r3, [pc, #404]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d0f0      	beq.n	8003d42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d60:	4b62      	ldr	r3, [pc, #392]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	691b      	ldr	r3, [r3, #16]
 8003d6c:	061b      	lsls	r3, r3, #24
 8003d6e:	495f      	ldr	r1, [pc, #380]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d70:	4313      	orrs	r3, r2
 8003d72:	604b      	str	r3, [r1, #4]
 8003d74:	e018      	b.n	8003da8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d76:	4b5d      	ldr	r3, [pc, #372]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a5c      	ldr	r2, [pc, #368]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d82:	f7fe fcd1 	bl	8002728 <HAL_GetTick>
 8003d86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d88:	e008      	b.n	8003d9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d8a:	f7fe fccd 	bl	8002728 <HAL_GetTick>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e1f9      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003d9c:	4b53      	ldr	r3, [pc, #332]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d1f0      	bne.n	8003d8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f003 0308 	and.w	r3, r3, #8
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d03c      	beq.n	8003e2e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	695b      	ldr	r3, [r3, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01c      	beq.n	8003df6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dbc:	4b4b      	ldr	r3, [pc, #300]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003dbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dc2:	4a4a      	ldr	r2, [pc, #296]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003dc4:	f043 0301 	orr.w	r3, r3, #1
 8003dc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dcc:	f7fe fcac 	bl	8002728 <HAL_GetTick>
 8003dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003dd2:	e008      	b.n	8003de6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003dd4:	f7fe fca8 	bl	8002728 <HAL_GetTick>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	1ad3      	subs	r3, r2, r3
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d901      	bls.n	8003de6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003de2:	2303      	movs	r3, #3
 8003de4:	e1d4      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003de6:	4b41      	ldr	r3, [pc, #260]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003de8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0ef      	beq.n	8003dd4 <HAL_RCC_OscConfig+0x3ec>
 8003df4:	e01b      	b.n	8003e2e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df6:	4b3d      	ldr	r3, [pc, #244]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003df8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003dfe:	f023 0301 	bic.w	r3, r3, #1
 8003e02:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e06:	f7fe fc8f 	bl	8002728 <HAL_GetTick>
 8003e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fe fc8b 	bl	8002728 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	693b      	ldr	r3, [r7, #16]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e1b7      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003e20:	4b32      	ldr	r3, [pc, #200]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1ef      	bne.n	8003e0e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f000 80a6 	beq.w	8003f88 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003e40:	4b2a      	ldr	r3, [pc, #168]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e42:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10d      	bne.n	8003e68 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4c:	4b27      	ldr	r3, [pc, #156]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e4e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e50:	4a26      	ldr	r2, [pc, #152]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e52:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e56:	6593      	str	r3, [r2, #88]	@ 0x58
 8003e58:	4b24      	ldr	r3, [pc, #144]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003e5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e5c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e60:	60bb      	str	r3, [r7, #8]
 8003e62:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e64:	2301      	movs	r3, #1
 8003e66:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e68:	4b21      	ldr	r3, [pc, #132]	@ (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d118      	bne.n	8003ea6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e74:	4b1e      	ldr	r3, [pc, #120]	@ (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1d      	ldr	r2, [pc, #116]	@ (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e7a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e7e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e80:	f7fe fc52 	bl	8002728 <HAL_GetTick>
 8003e84:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e86:	e008      	b.n	8003e9a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e88:	f7fe fc4e 	bl	8002728 <HAL_GetTick>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	2b02      	cmp	r3, #2
 8003e94:	d901      	bls.n	8003e9a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003e96:	2303      	movs	r3, #3
 8003e98:	e17a      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e9a:	4b15      	ldr	r3, [pc, #84]	@ (8003ef0 <HAL_RCC_OscConfig+0x508>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d0f0      	beq.n	8003e88 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d108      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x4d8>
 8003eae:	4b0f      	ldr	r3, [pc, #60]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003eb4:	4a0d      	ldr	r2, [pc, #52]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eb6:	f043 0301 	orr.w	r3, r3, #1
 8003eba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ebe:	e029      	b.n	8003f14 <HAL_RCC_OscConfig+0x52c>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b05      	cmp	r3, #5
 8003ec6:	d115      	bne.n	8003ef4 <HAL_RCC_OscConfig+0x50c>
 8003ec8:	4b08      	ldr	r3, [pc, #32]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ece:	4a07      	ldr	r2, [pc, #28]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ed0:	f043 0304 	orr.w	r3, r3, #4
 8003ed4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ed8:	4b04      	ldr	r3, [pc, #16]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003eda:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ede:	4a03      	ldr	r2, [pc, #12]	@ (8003eec <HAL_RCC_OscConfig+0x504>)
 8003ee0:	f043 0301 	orr.w	r3, r3, #1
 8003ee4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003ee8:	e014      	b.n	8003f14 <HAL_RCC_OscConfig+0x52c>
 8003eea:	bf00      	nop
 8003eec:	40021000 	.word	0x40021000
 8003ef0:	40007000 	.word	0x40007000
 8003ef4:	4b9c      	ldr	r3, [pc, #624]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8003ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003efa:	4a9b      	ldr	r2, [pc, #620]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8003efc:	f023 0301 	bic.w	r3, r3, #1
 8003f00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003f04:	4b98      	ldr	r3, [pc, #608]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8003f06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f0a:	4a97      	ldr	r2, [pc, #604]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8003f0c:	f023 0304 	bic.w	r3, r3, #4
 8003f10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	689b      	ldr	r3, [r3, #8]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d016      	beq.n	8003f4a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f1c:	f7fe fc04 	bl	8002728 <HAL_GetTick>
 8003f20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f22:	e00a      	b.n	8003f3a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f24:	f7fe fc00 	bl	8002728 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	1ad3      	subs	r3, r2, r3
 8003f2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e12a      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f3a:	4b8b      	ldr	r3, [pc, #556]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8003f3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f40:	f003 0302 	and.w	r3, r3, #2
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0ed      	beq.n	8003f24 <HAL_RCC_OscConfig+0x53c>
 8003f48:	e015      	b.n	8003f76 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4a:	f7fe fbed 	bl	8002728 <HAL_GetTick>
 8003f4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f50:	e00a      	b.n	8003f68 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f52:	f7fe fbe9 	bl	8002728 <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d901      	bls.n	8003f68 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e113      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003f68:	4b7f      	ldr	r3, [pc, #508]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d1ed      	bne.n	8003f52 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f76:	7ffb      	ldrb	r3, [r7, #31]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d105      	bne.n	8003f88 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f7c:	4b7a      	ldr	r3, [pc, #488]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8003f7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f80:	4a79      	ldr	r2, [pc, #484]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8003f82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003f86:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	f000 80fe 	beq.w	800418e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	f040 80d0 	bne.w	800413c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003f9c:	4b72      	ldr	r3, [pc, #456]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fa2:	697b      	ldr	r3, [r7, #20]
 8003fa4:	f003 0203 	and.w	r2, r3, #3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d130      	bne.n	8004012 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fbe:	429a      	cmp	r2, r3
 8003fc0:	d127      	bne.n	8004012 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003fcc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d11f      	bne.n	8004012 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8003fdc:	2a07      	cmp	r2, #7
 8003fde:	bf14      	ite	ne
 8003fe0:	2201      	movne	r2, #1
 8003fe2:	2200      	moveq	r2, #0
 8003fe4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d113      	bne.n	8004012 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ff4:	085b      	lsrs	r3, r3, #1
 8003ff6:	3b01      	subs	r3, #1
 8003ff8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d109      	bne.n	8004012 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004008:	085b      	lsrs	r3, r3, #1
 800400a:	3b01      	subs	r3, #1
 800400c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d06e      	beq.n	80040f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	2b0c      	cmp	r3, #12
 8004016:	d069      	beq.n	80040ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8004018:	4b53      	ldr	r3, [pc, #332]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004020:	2b00      	cmp	r3, #0
 8004022:	d105      	bne.n	8004030 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004024:	4b50      	ldr	r3, [pc, #320]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d001      	beq.n	8004034 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004030:	2301      	movs	r3, #1
 8004032:	e0ad      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004034:	4b4c      	ldr	r3, [pc, #304]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4a4b      	ldr	r2, [pc, #300]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 800403a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800403e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004040:	f7fe fb72 	bl	8002728 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004046:	e008      	b.n	800405a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004048:	f7fe fb6e 	bl	8002728 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	2b02      	cmp	r3, #2
 8004054:	d901      	bls.n	800405a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e09a      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800405a:	4b43      	ldr	r3, [pc, #268]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1f0      	bne.n	8004048 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004066:	4b40      	ldr	r3, [pc, #256]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8004068:	68da      	ldr	r2, [r3, #12]
 800406a:	4b40      	ldr	r3, [pc, #256]	@ (800416c <HAL_RCC_OscConfig+0x784>)
 800406c:	4013      	ands	r3, r2
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8004076:	3a01      	subs	r2, #1
 8004078:	0112      	lsls	r2, r2, #4
 800407a:	4311      	orrs	r1, r2
 800407c:	687a      	ldr	r2, [r7, #4]
 800407e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004080:	0212      	lsls	r2, r2, #8
 8004082:	4311      	orrs	r1, r2
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004088:	0852      	lsrs	r2, r2, #1
 800408a:	3a01      	subs	r2, #1
 800408c:	0552      	lsls	r2, r2, #21
 800408e:	4311      	orrs	r1, r2
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8004094:	0852      	lsrs	r2, r2, #1
 8004096:	3a01      	subs	r2, #1
 8004098:	0652      	lsls	r2, r2, #25
 800409a:	4311      	orrs	r1, r2
 800409c:	687a      	ldr	r2, [r7, #4]
 800409e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80040a0:	0912      	lsrs	r2, r2, #4
 80040a2:	0452      	lsls	r2, r2, #17
 80040a4:	430a      	orrs	r2, r1
 80040a6:	4930      	ldr	r1, [pc, #192]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80040ac:	4b2e      	ldr	r3, [pc, #184]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a2d      	ldr	r2, [pc, #180]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 80040b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80040b8:	4b2b      	ldr	r3, [pc, #172]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	4a2a      	ldr	r2, [pc, #168]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 80040be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80040c4:	f7fe fb30 	bl	8002728 <HAL_GetTick>
 80040c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040ca:	e008      	b.n	80040de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80040cc:	f7fe fb2c 	bl	8002728 <HAL_GetTick>
 80040d0:	4602      	mov	r2, r0
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	1ad3      	subs	r3, r2, r3
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d901      	bls.n	80040de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80040da:	2303      	movs	r3, #3
 80040dc:	e058      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040de:	4b22      	ldr	r3, [pc, #136]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d0f0      	beq.n	80040cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80040ea:	e050      	b.n	800418e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80040ec:	2301      	movs	r3, #1
 80040ee:	e04f      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80040f0:	4b1d      	ldr	r3, [pc, #116]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d148      	bne.n	800418e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80040fc:	4b1a      	ldr	r3, [pc, #104]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	4a19      	ldr	r2, [pc, #100]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8004102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004106:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8004108:	4b17      	ldr	r3, [pc, #92]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 800410a:	68db      	ldr	r3, [r3, #12]
 800410c:	4a16      	ldr	r2, [pc, #88]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 800410e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004112:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004114:	f7fe fb08 	bl	8002728 <HAL_GetTick>
 8004118:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800411a:	e008      	b.n	800412e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800411c:	f7fe fb04 	bl	8002728 <HAL_GetTick>
 8004120:	4602      	mov	r2, r0
 8004122:	693b      	ldr	r3, [r7, #16]
 8004124:	1ad3      	subs	r3, r2, r3
 8004126:	2b02      	cmp	r3, #2
 8004128:	d901      	bls.n	800412e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800412a:	2303      	movs	r3, #3
 800412c:	e030      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800412e:	4b0e      	ldr	r3, [pc, #56]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004136:	2b00      	cmp	r3, #0
 8004138:	d0f0      	beq.n	800411c <HAL_RCC_OscConfig+0x734>
 800413a:	e028      	b.n	800418e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	2b0c      	cmp	r3, #12
 8004140:	d023      	beq.n	800418a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004142:	4b09      	ldr	r3, [pc, #36]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a08      	ldr	r2, [pc, #32]	@ (8004168 <HAL_RCC_OscConfig+0x780>)
 8004148:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800414c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414e:	f7fe faeb 	bl	8002728 <HAL_GetTick>
 8004152:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004154:	e00c      	b.n	8004170 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004156:	f7fe fae7 	bl	8002728 <HAL_GetTick>
 800415a:	4602      	mov	r2, r0
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	1ad3      	subs	r3, r2, r3
 8004160:	2b02      	cmp	r3, #2
 8004162:	d905      	bls.n	8004170 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004164:	2303      	movs	r3, #3
 8004166:	e013      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
 8004168:	40021000 	.word	0x40021000
 800416c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004170:	4b09      	ldr	r3, [pc, #36]	@ (8004198 <HAL_RCC_OscConfig+0x7b0>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d1ec      	bne.n	8004156 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800417c:	4b06      	ldr	r3, [pc, #24]	@ (8004198 <HAL_RCC_OscConfig+0x7b0>)
 800417e:	68da      	ldr	r2, [r3, #12]
 8004180:	4905      	ldr	r1, [pc, #20]	@ (8004198 <HAL_RCC_OscConfig+0x7b0>)
 8004182:	4b06      	ldr	r3, [pc, #24]	@ (800419c <HAL_RCC_OscConfig+0x7b4>)
 8004184:	4013      	ands	r3, r2
 8004186:	60cb      	str	r3, [r1, #12]
 8004188:	e001      	b.n	800418e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	3720      	adds	r7, #32
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}
 8004198:	40021000 	.word	0x40021000
 800419c:	feeefffc 	.word	0xfeeefffc

080041a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d101      	bne.n	80041b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e0e7      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041b4:	4b75      	ldr	r3, [pc, #468]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f003 0307 	and.w	r3, r3, #7
 80041bc:	683a      	ldr	r2, [r7, #0]
 80041be:	429a      	cmp	r2, r3
 80041c0:	d910      	bls.n	80041e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041c2:	4b72      	ldr	r3, [pc, #456]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f023 0207 	bic.w	r2, r3, #7
 80041ca:	4970      	ldr	r1, [pc, #448]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041d2:	4b6e      	ldr	r3, [pc, #440]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0307 	and.w	r3, r3, #7
 80041da:	683a      	ldr	r2, [r7, #0]
 80041dc:	429a      	cmp	r2, r3
 80041de:	d001      	beq.n	80041e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80041e0:	2301      	movs	r3, #1
 80041e2:	e0cf      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 0302 	and.w	r3, r3, #2
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d010      	beq.n	8004212 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	4b66      	ldr	r3, [pc, #408]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d908      	bls.n	8004212 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004200:	4b63      	ldr	r3, [pc, #396]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004202:	689b      	ldr	r3, [r3, #8]
 8004204:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4960      	ldr	r1, [pc, #384]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 800420e:	4313      	orrs	r3, r2
 8004210:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 0301 	and.w	r3, r3, #1
 800421a:	2b00      	cmp	r3, #0
 800421c:	d04c      	beq.n	80042b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	685b      	ldr	r3, [r3, #4]
 8004222:	2b03      	cmp	r3, #3
 8004224:	d107      	bne.n	8004236 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004226:	4b5a      	ldr	r3, [pc, #360]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d121      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e0a6      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	685b      	ldr	r3, [r3, #4]
 800423a:	2b02      	cmp	r3, #2
 800423c:	d107      	bne.n	800424e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800423e:	4b54      	ldr	r3, [pc, #336]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d115      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e09a      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d107      	bne.n	8004266 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004256:	4b4e      	ldr	r3, [pc, #312]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0302 	and.w	r3, r3, #2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d109      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e08e      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004266:	4b4a      	ldr	r3, [pc, #296]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800426e:	2b00      	cmp	r3, #0
 8004270:	d101      	bne.n	8004276 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e086      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004276:	4b46      	ldr	r3, [pc, #280]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	f023 0203 	bic.w	r2, r3, #3
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	4943      	ldr	r1, [pc, #268]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004284:	4313      	orrs	r3, r2
 8004286:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004288:	f7fe fa4e 	bl	8002728 <HAL_GetTick>
 800428c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800428e:	e00a      	b.n	80042a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004290:	f7fe fa4a 	bl	8002728 <HAL_GetTick>
 8004294:	4602      	mov	r2, r0
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800429e:	4293      	cmp	r3, r2
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e06e      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042a6:	4b3a      	ldr	r3, [pc, #232]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	f003 020c 	and.w	r2, r3, #12
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	685b      	ldr	r3, [r3, #4]
 80042b2:	009b      	lsls	r3, r3, #2
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d1eb      	bne.n	8004290 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f003 0302 	and.w	r3, r3, #2
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d010      	beq.n	80042e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	4b31      	ldr	r3, [pc, #196]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042ca:	689b      	ldr	r3, [r3, #8]
 80042cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d208      	bcs.n	80042e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80042d4:	4b2e      	ldr	r3, [pc, #184]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	492b      	ldr	r1, [pc, #172]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 80042e2:	4313      	orrs	r3, r2
 80042e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042e6:	4b29      	ldr	r3, [pc, #164]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0307 	and.w	r3, r3, #7
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d210      	bcs.n	8004316 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f4:	4b25      	ldr	r3, [pc, #148]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f023 0207 	bic.w	r2, r3, #7
 80042fc:	4923      	ldr	r1, [pc, #140]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	4313      	orrs	r3, r2
 8004302:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004304:	4b21      	ldr	r3, [pc, #132]	@ (800438c <HAL_RCC_ClockConfig+0x1ec>)
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	429a      	cmp	r2, r3
 8004310:	d001      	beq.n	8004316 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004312:	2301      	movs	r3, #1
 8004314:	e036      	b.n	8004384 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f003 0304 	and.w	r3, r3, #4
 800431e:	2b00      	cmp	r3, #0
 8004320:	d008      	beq.n	8004334 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004322:	4b1b      	ldr	r3, [pc, #108]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	4918      	ldr	r1, [pc, #96]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004330:	4313      	orrs	r3, r2
 8004332:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f003 0308 	and.w	r3, r3, #8
 800433c:	2b00      	cmp	r3, #0
 800433e:	d009      	beq.n	8004354 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004340:	4b13      	ldr	r3, [pc, #76]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
 800434c:	00db      	lsls	r3, r3, #3
 800434e:	4910      	ldr	r1, [pc, #64]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 8004350:	4313      	orrs	r3, r2
 8004352:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004354:	f000 f824 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8004358:	4602      	mov	r2, r0
 800435a:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <HAL_RCC_ClockConfig+0x1f0>)
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	091b      	lsrs	r3, r3, #4
 8004360:	f003 030f 	and.w	r3, r3, #15
 8004364:	490b      	ldr	r1, [pc, #44]	@ (8004394 <HAL_RCC_ClockConfig+0x1f4>)
 8004366:	5ccb      	ldrb	r3, [r1, r3]
 8004368:	f003 031f 	and.w	r3, r3, #31
 800436c:	fa22 f303 	lsr.w	r3, r2, r3
 8004370:	4a09      	ldr	r2, [pc, #36]	@ (8004398 <HAL_RCC_ClockConfig+0x1f8>)
 8004372:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004374:	4b09      	ldr	r3, [pc, #36]	@ (800439c <HAL_RCC_ClockConfig+0x1fc>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4618      	mov	r0, r3
 800437a:	f7fe f985 	bl	8002688 <HAL_InitTick>
 800437e:	4603      	mov	r3, r0
 8004380:	72fb      	strb	r3, [r7, #11]

  return status;
 8004382:	7afb      	ldrb	r3, [r7, #11]
}
 8004384:	4618      	mov	r0, r3
 8004386:	3710      	adds	r7, #16
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	40022000 	.word	0x40022000
 8004390:	40021000 	.word	0x40021000
 8004394:	0800c544 	.word	0x0800c544
 8004398:	20000000 	.word	0x20000000
 800439c:	20000004 	.word	0x20000004

080043a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b089      	sub	sp, #36	@ 0x24
 80043a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80043a6:	2300      	movs	r3, #0
 80043a8:	61fb      	str	r3, [r7, #28]
 80043aa:	2300      	movs	r3, #0
 80043ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80043ae:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	f003 030c 	and.w	r3, r3, #12
 80043b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80043b8:	4b3b      	ldr	r3, [pc, #236]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043ba:	68db      	ldr	r3, [r3, #12]
 80043bc:	f003 0303 	and.w	r3, r3, #3
 80043c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d005      	beq.n	80043d4 <HAL_RCC_GetSysClockFreq+0x34>
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	2b0c      	cmp	r3, #12
 80043cc:	d121      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d11e      	bne.n	8004412 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80043d4:	4b34      	ldr	r3, [pc, #208]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f003 0308 	and.w	r3, r3, #8
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80043e0:	4b31      	ldr	r3, [pc, #196]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80043e6:	0a1b      	lsrs	r3, r3, #8
 80043e8:	f003 030f 	and.w	r3, r3, #15
 80043ec:	61fb      	str	r3, [r7, #28]
 80043ee:	e005      	b.n	80043fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80043f0:	4b2d      	ldr	r3, [pc, #180]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	091b      	lsrs	r3, r3, #4
 80043f6:	f003 030f 	and.w	r3, r3, #15
 80043fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80043fc:	4a2b      	ldr	r2, [pc, #172]	@ (80044ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80043fe:	69fb      	ldr	r3, [r7, #28]
 8004400:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004404:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10d      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004410:	e00a      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b04      	cmp	r3, #4
 8004416:	d102      	bne.n	800441e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004418:	4b25      	ldr	r3, [pc, #148]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800441a:	61bb      	str	r3, [r7, #24]
 800441c:	e004      	b.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d101      	bne.n	8004428 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004424:	4b23      	ldr	r3, [pc, #140]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8004426:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8004428:	693b      	ldr	r3, [r7, #16]
 800442a:	2b0c      	cmp	r3, #12
 800442c:	d134      	bne.n	8004498 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800442e:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	2b02      	cmp	r3, #2
 800443c:	d003      	beq.n	8004446 <HAL_RCC_GetSysClockFreq+0xa6>
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	2b03      	cmp	r3, #3
 8004442:	d003      	beq.n	800444c <HAL_RCC_GetSysClockFreq+0xac>
 8004444:	e005      	b.n	8004452 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8004446:	4b1a      	ldr	r3, [pc, #104]	@ (80044b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8004448:	617b      	str	r3, [r7, #20]
      break;
 800444a:	e005      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800444c:	4b19      	ldr	r3, [pc, #100]	@ (80044b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800444e:	617b      	str	r3, [r7, #20]
      break;
 8004450:	e002      	b.n	8004458 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	617b      	str	r3, [r7, #20]
      break;
 8004456:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004458:	4b13      	ldr	r3, [pc, #76]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	091b      	lsrs	r3, r3, #4
 800445e:	f003 0307 	and.w	r3, r3, #7
 8004462:	3301      	adds	r3, #1
 8004464:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8004466:	4b10      	ldr	r3, [pc, #64]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004468:	68db      	ldr	r3, [r3, #12]
 800446a:	0a1b      	lsrs	r3, r3, #8
 800446c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004470:	697a      	ldr	r2, [r7, #20]
 8004472:	fb03 f202 	mul.w	r2, r3, r2
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	fbb2 f3f3 	udiv	r3, r2, r3
 800447c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800447e:	4b0a      	ldr	r3, [pc, #40]	@ (80044a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8004480:	68db      	ldr	r3, [r3, #12]
 8004482:	0e5b      	lsrs	r3, r3, #25
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	3301      	adds	r3, #1
 800448a:	005b      	lsls	r3, r3, #1
 800448c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	fbb2 f3f3 	udiv	r3, r2, r3
 8004496:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8004498:	69bb      	ldr	r3, [r7, #24]
}
 800449a:	4618      	mov	r0, r3
 800449c:	3724      	adds	r7, #36	@ 0x24
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	40021000 	.word	0x40021000
 80044ac:	0800c55c 	.word	0x0800c55c
 80044b0:	00f42400 	.word	0x00f42400
 80044b4:	007a1200 	.word	0x007a1200

080044b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044b8:	b480      	push	{r7}
 80044ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80044bc:	4b03      	ldr	r3, [pc, #12]	@ (80044cc <HAL_RCC_GetHCLKFreq+0x14>)
 80044be:	681b      	ldr	r3, [r3, #0]
}
 80044c0:	4618      	mov	r0, r3
 80044c2:	46bd      	mov	sp, r7
 80044c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop
 80044cc:	20000000 	.word	0x20000000

080044d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80044d4:	f7ff fff0 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0a1b      	lsrs	r3, r3, #8
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4904      	ldr	r1, [pc, #16]	@ (80044f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	f003 031f 	and.w	r3, r3, #31
 80044ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40021000 	.word	0x40021000
 80044f8:	0800c554 	.word	0x0800c554

080044fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004500:	f7ff ffda 	bl	80044b8 <HAL_RCC_GetHCLKFreq>
 8004504:	4602      	mov	r2, r0
 8004506:	4b06      	ldr	r3, [pc, #24]	@ (8004520 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004508:	689b      	ldr	r3, [r3, #8]
 800450a:	0adb      	lsrs	r3, r3, #11
 800450c:	f003 0307 	and.w	r3, r3, #7
 8004510:	4904      	ldr	r1, [pc, #16]	@ (8004524 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004512:	5ccb      	ldrb	r3, [r1, r3]
 8004514:	f003 031f 	and.w	r3, r3, #31
 8004518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800451c:	4618      	mov	r0, r3
 800451e:	bd80      	pop	{r7, pc}
 8004520:	40021000 	.word	0x40021000
 8004524:	0800c554 	.word	0x0800c554

08004528 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004530:	2300      	movs	r3, #0
 8004532:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004534:	4b2a      	ldr	r3, [pc, #168]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004536:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004538:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d003      	beq.n	8004548 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004540:	f7ff f9ee 	bl	8003920 <HAL_PWREx_GetVoltageRange>
 8004544:	6178      	str	r0, [r7, #20]
 8004546:	e014      	b.n	8004572 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004548:	4b25      	ldr	r3, [pc, #148]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800454c:	4a24      	ldr	r2, [pc, #144]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800454e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004552:	6593      	str	r3, [r2, #88]	@ 0x58
 8004554:	4b22      	ldr	r3, [pc, #136]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004558:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800455c:	60fb      	str	r3, [r7, #12]
 800455e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004560:	f7ff f9de 	bl	8003920 <HAL_PWREx_GetVoltageRange>
 8004564:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8004566:	4b1e      	ldr	r3, [pc, #120]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004568:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800456a:	4a1d      	ldr	r2, [pc, #116]	@ (80045e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800456c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004570:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004572:	697b      	ldr	r3, [r7, #20]
 8004574:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004578:	d10b      	bne.n	8004592 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2b80      	cmp	r3, #128	@ 0x80
 800457e:	d919      	bls.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2ba0      	cmp	r3, #160	@ 0xa0
 8004584:	d902      	bls.n	800458c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004586:	2302      	movs	r3, #2
 8004588:	613b      	str	r3, [r7, #16]
 800458a:	e013      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800458c:	2301      	movs	r3, #1
 800458e:	613b      	str	r3, [r7, #16]
 8004590:	e010      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2b80      	cmp	r3, #128	@ 0x80
 8004596:	d902      	bls.n	800459e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8004598:	2303      	movs	r3, #3
 800459a:	613b      	str	r3, [r7, #16]
 800459c:	e00a      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b80      	cmp	r3, #128	@ 0x80
 80045a2:	d102      	bne.n	80045aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80045a4:	2302      	movs	r3, #2
 80045a6:	613b      	str	r3, [r7, #16]
 80045a8:	e004      	b.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2b70      	cmp	r3, #112	@ 0x70
 80045ae:	d101      	bne.n	80045b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80045b0:	2301      	movs	r3, #1
 80045b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80045b4:	4b0b      	ldr	r3, [pc, #44]	@ (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f023 0207 	bic.w	r2, r3, #7
 80045bc:	4909      	ldr	r1, [pc, #36]	@ (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80045c4:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f003 0307 	and.w	r3, r3, #7
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	429a      	cmp	r2, r3
 80045d0:	d001      	beq.n	80045d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80045d2:	2301      	movs	r3, #1
 80045d4:	e000      	b.n	80045d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80045d6:	2300      	movs	r3, #0
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3718      	adds	r7, #24
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}
 80045e0:	40021000 	.word	0x40021000
 80045e4:	40022000 	.word	0x40022000

080045e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80045f0:	2300      	movs	r3, #0
 80045f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80045f4:	2300      	movs	r3, #0
 80045f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004600:	2b00      	cmp	r3, #0
 8004602:	d041      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004608:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800460c:	d02a      	beq.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800460e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004612:	d824      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004614:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004618:	d008      	beq.n	800462c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800461a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800461e:	d81e      	bhi.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004620:	2b00      	cmp	r3, #0
 8004622:	d00a      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004624:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004628:	d010      	beq.n	800464c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800462a:	e018      	b.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800462c:	4b86      	ldr	r3, [pc, #536]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800462e:	68db      	ldr	r3, [r3, #12]
 8004630:	4a85      	ldr	r2, [pc, #532]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004632:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004636:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004638:	e015      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f000 fabb 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004646:	4603      	mov	r3, r0
 8004648:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800464a:	e00c      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	3320      	adds	r3, #32
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f000 fba6 	bl	8004da4 <RCCEx_PLLSAI2_Config>
 8004658:	4603      	mov	r3, r0
 800465a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800465c:	e003      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	74fb      	strb	r3, [r7, #19]
      break;
 8004662:	e000      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004664:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004666:	7cfb      	ldrb	r3, [r7, #19]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d10b      	bne.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800466c:	4b76      	ldr	r3, [pc, #472]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800466e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004672:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800467a:	4973      	ldr	r1, [pc, #460]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800467c:	4313      	orrs	r3, r2
 800467e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004682:	e001      	b.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004684:	7cfb      	ldrb	r3, [r7, #19]
 8004686:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004690:	2b00      	cmp	r3, #0
 8004692:	d041      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004698:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800469c:	d02a      	beq.n	80046f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800469e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80046a2:	d824      	bhi.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046a8:	d008      	beq.n	80046bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80046aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80046ae:	d81e      	bhi.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d00a      	beq.n	80046ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80046b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80046b8:	d010      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046ba:	e018      	b.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80046bc:	4b62      	ldr	r3, [pc, #392]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	4a61      	ldr	r2, [pc, #388]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80046c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046c8:	e015      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3304      	adds	r3, #4
 80046ce:	2100      	movs	r1, #0
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fa73 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 80046d6:	4603      	mov	r3, r0
 80046d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046da:	e00c      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	3320      	adds	r3, #32
 80046e0:	2100      	movs	r1, #0
 80046e2:	4618      	mov	r0, r3
 80046e4:	f000 fb5e 	bl	8004da4 <RCCEx_PLLSAI2_Config>
 80046e8:	4603      	mov	r3, r0
 80046ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80046ec:	e003      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046ee:	2301      	movs	r3, #1
 80046f0:	74fb      	strb	r3, [r7, #19]
      break;
 80046f2:	e000      	b.n	80046f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80046f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80046f6:	7cfb      	ldrb	r3, [r7, #19]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80046fc:	4b52      	ldr	r3, [pc, #328]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80046fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004702:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800470a:	494f      	ldr	r1, [pc, #316]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800470c:	4313      	orrs	r3, r2
 800470e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004712:	e001      	b.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004714:	7cfb      	ldrb	r3, [r7, #19]
 8004716:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 80a0 	beq.w	8004866 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800472a:	4b47      	ldr	r3, [pc, #284]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800472c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800472e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d00d      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004740:	4b41      	ldr	r3, [pc, #260]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004742:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004744:	4a40      	ldr	r2, [pc, #256]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004746:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800474a:	6593      	str	r3, [r2, #88]	@ 0x58
 800474c:	4b3e      	ldr	r3, [pc, #248]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800474e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004750:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004754:	60bb      	str	r3, [r7, #8]
 8004756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004758:	2301      	movs	r3, #1
 800475a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800475c:	4b3b      	ldr	r3, [pc, #236]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a3a      	ldr	r2, [pc, #232]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004762:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004766:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004768:	f7fd ffde 	bl	8002728 <HAL_GetTick>
 800476c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800476e:	e009      	b.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004770:	f7fd ffda 	bl	8002728 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b02      	cmp	r3, #2
 800477c:	d902      	bls.n	8004784 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	74fb      	strb	r3, [r7, #19]
        break;
 8004782:	e005      	b.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004784:	4b31      	ldr	r3, [pc, #196]	@ (800484c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800478c:	2b00      	cmp	r3, #0
 800478e:	d0ef      	beq.n	8004770 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004790:	7cfb      	ldrb	r3, [r7, #19]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d15c      	bne.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004796:	4b2c      	ldr	r3, [pc, #176]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004798:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800479c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80047a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d01f      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	429a      	cmp	r2, r3
 80047b2:	d019      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047b4:	4b24      	ldr	r3, [pc, #144]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047c0:	4b21      	ldr	r3, [pc, #132]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047c6:	4a20      	ldr	r2, [pc, #128]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80047cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047d0:	4b1d      	ldr	r3, [pc, #116]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047e0:	4a19      	ldr	r2, [pc, #100]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d016      	beq.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f2:	f7fd ff99 	bl	8002728 <HAL_GetTick>
 80047f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047f8:	e00b      	b.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047fa:	f7fd ff95 	bl	8002728 <HAL_GetTick>
 80047fe:	4602      	mov	r2, r0
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	1ad3      	subs	r3, r2, r3
 8004804:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004808:	4293      	cmp	r3, r2
 800480a:	d902      	bls.n	8004812 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	74fb      	strb	r3, [r7, #19]
            break;
 8004810:	e006      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004812:	4b0d      	ldr	r3, [pc, #52]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004818:	f003 0302 	and.w	r3, r3, #2
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0ec      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004820:	7cfb      	ldrb	r3, [r7, #19]
 8004822:	2b00      	cmp	r3, #0
 8004824:	d10c      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004826:	4b08      	ldr	r3, [pc, #32]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004828:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800482c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004836:	4904      	ldr	r1, [pc, #16]	@ (8004848 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004838:	4313      	orrs	r3, r2
 800483a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800483e:	e009      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	74bb      	strb	r3, [r7, #18]
 8004844:	e006      	b.n	8004854 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
 800484c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004850:	7cfb      	ldrb	r3, [r7, #19]
 8004852:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004854:	7c7b      	ldrb	r3, [r7, #17]
 8004856:	2b01      	cmp	r3, #1
 8004858:	d105      	bne.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800485a:	4b9e      	ldr	r3, [pc, #632]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800485e:	4a9d      	ldr	r2, [pc, #628]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004860:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004864:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004872:	4b98      	ldr	r3, [pc, #608]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004878:	f023 0203 	bic.w	r2, r3, #3
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004880:	4994      	ldr	r1, [pc, #592]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004894:	4b8f      	ldr	r3, [pc, #572]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489a:	f023 020c 	bic.w	r2, r3, #12
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80048a2:	498c      	ldr	r1, [pc, #560]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0304 	and.w	r3, r3, #4
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048b6:	4b87      	ldr	r3, [pc, #540]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048c4:	4983      	ldr	r1, [pc, #524]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0308 	and.w	r3, r3, #8
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048d8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048e6:	497b      	ldr	r1, [pc, #492]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048fa:	4b76      	ldr	r3, [pc, #472]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004900:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004908:	4972      	ldr	r1, [pc, #456]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0320 	and.w	r3, r3, #32
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800491c:	4b6d      	ldr	r3, [pc, #436]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004922:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800492a:	496a      	ldr	r1, [pc, #424]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800493e:	4b65      	ldr	r3, [pc, #404]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004944:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800494c:	4961      	ldr	r1, [pc, #388]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d00a      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004960:	4b5c      	ldr	r3, [pc, #368]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004966:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800496e:	4959      	ldr	r1, [pc, #356]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d00a      	beq.n	8004998 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004982:	4b54      	ldr	r3, [pc, #336]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004988:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004990:	4950      	ldr	r1, [pc, #320]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004992:	4313      	orrs	r3, r2
 8004994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d00a      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80049a4:	4b4b      	ldr	r3, [pc, #300]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049aa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049b2:	4948      	ldr	r1, [pc, #288]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d00a      	beq.n	80049dc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80049c6:	4b43      	ldr	r3, [pc, #268]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049cc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049d4:	493f      	ldr	r1, [pc, #252]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049d6:	4313      	orrs	r3, r2
 80049d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d028      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80049e8:	4b3a      	ldr	r3, [pc, #232]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049ee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049f6:	4937      	ldr	r1, [pc, #220]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80049f8:	4313      	orrs	r3, r2
 80049fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a06:	d106      	bne.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a08:	4b32      	ldr	r3, [pc, #200]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	4a31      	ldr	r2, [pc, #196]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a12:	60d3      	str	r3, [r2, #12]
 8004a14:	e011      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004a1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a1e:	d10c      	bne.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3304      	adds	r3, #4
 8004a24:	2101      	movs	r1, #1
 8004a26:	4618      	mov	r0, r3
 8004a28:	f000 f8c8 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004a30:	7cfb      	ldrb	r3, [r7, #19]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d001      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004a36:	7cfb      	ldrb	r3, [r7, #19]
 8004a38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d028      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004a46:	4b23      	ldr	r3, [pc, #140]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a54:	491f      	ldr	r1, [pc, #124]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a56:	4313      	orrs	r3, r2
 8004a58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004a64:	d106      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a66:	4b1b      	ldr	r3, [pc, #108]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004a70:	60d3      	str	r3, [r2, #12]
 8004a72:	e011      	b.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004a7c:	d10c      	bne.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	3304      	adds	r3, #4
 8004a82:	2101      	movs	r1, #1
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 f899 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004a8e:	7cfb      	ldrb	r3, [r7, #19]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004a94:	7cfb      	ldrb	r3, [r7, #19]
 8004a96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d02b      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004aaa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ab2:	4908      	ldr	r1, [pc, #32]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004abe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ac2:	d109      	bne.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ac4:	4b03      	ldr	r3, [pc, #12]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac6:	68db      	ldr	r3, [r3, #12]
 8004ac8:	4a02      	ldr	r2, [pc, #8]	@ (8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004ace:	60d3      	str	r3, [r2, #12]
 8004ad0:	e014      	b.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004ad2:	bf00      	nop
 8004ad4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004adc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ae0:	d10c      	bne.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	2101      	movs	r1, #1
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f000 f867 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004aee:	4603      	mov	r3, r0
 8004af0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004af2:	7cfb      	ldrb	r3, [r7, #19]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004af8:	7cfb      	ldrb	r3, [r7, #19]
 8004afa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d02f      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004b08:	4b2b      	ldr	r3, [pc, #172]	@ (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b16:	4928      	ldr	r1, [pc, #160]	@ (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b18:	4313      	orrs	r3, r2
 8004b1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b26:	d10d      	bne.n	8004b44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	3304      	adds	r3, #4
 8004b2c:	2102      	movs	r1, #2
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f000 f844 	bl	8004bbc <RCCEx_PLLSAI1_Config>
 8004b34:	4603      	mov	r3, r0
 8004b36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b38:	7cfb      	ldrb	r3, [r7, #19]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d014      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b3e:	7cfb      	ldrb	r3, [r7, #19]
 8004b40:	74bb      	strb	r3, [r7, #18]
 8004b42:	e011      	b.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004b48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004b4c:	d10c      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	3320      	adds	r3, #32
 8004b52:	2102      	movs	r1, #2
 8004b54:	4618      	mov	r0, r3
 8004b56:	f000 f925 	bl	8004da4 <RCCEx_PLLSAI2_Config>
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004b5e:	7cfb      	ldrb	r3, [r7, #19]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d001      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004b64:	7cfb      	ldrb	r3, [r7, #19]
 8004b66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d00a      	beq.n	8004b8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004b74:	4b10      	ldr	r3, [pc, #64]	@ (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b82:	490d      	ldr	r1, [pc, #52]	@ (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b96:	4b08      	ldr	r3, [pc, #32]	@ (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ba6:	4904      	ldr	r1, [pc, #16]	@ (8004bb8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004bae:	7cbb      	ldrb	r3, [r7, #18]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3718      	adds	r7, #24
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40021000 	.word	0x40021000

08004bbc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b084      	sub	sp, #16
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
 8004bc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004bca:	4b75      	ldr	r3, [pc, #468]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bcc:	68db      	ldr	r3, [r3, #12]
 8004bce:	f003 0303 	and.w	r3, r3, #3
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d018      	beq.n	8004c08 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004bd6:	4b72      	ldr	r3, [pc, #456]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bd8:	68db      	ldr	r3, [r3, #12]
 8004bda:	f003 0203 	and.w	r2, r3, #3
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d10d      	bne.n	8004c02 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
       ||
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d009      	beq.n	8004c02 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004bee:	4b6c      	ldr	r3, [pc, #432]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	091b      	lsrs	r3, r3, #4
 8004bf4:	f003 0307 	and.w	r3, r3, #7
 8004bf8:	1c5a      	adds	r2, r3, #1
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	685b      	ldr	r3, [r3, #4]
       ||
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d047      	beq.n	8004c92 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	73fb      	strb	r3, [r7, #15]
 8004c06:	e044      	b.n	8004c92 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	2b03      	cmp	r3, #3
 8004c0e:	d018      	beq.n	8004c42 <RCCEx_PLLSAI1_Config+0x86>
 8004c10:	2b03      	cmp	r3, #3
 8004c12:	d825      	bhi.n	8004c60 <RCCEx_PLLSAI1_Config+0xa4>
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	d002      	beq.n	8004c1e <RCCEx_PLLSAI1_Config+0x62>
 8004c18:	2b02      	cmp	r3, #2
 8004c1a:	d009      	beq.n	8004c30 <RCCEx_PLLSAI1_Config+0x74>
 8004c1c:	e020      	b.n	8004c60 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004c1e:	4b60      	ldr	r3, [pc, #384]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d11d      	bne.n	8004c66 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c2e:	e01a      	b.n	8004c66 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004c30:	4b5b      	ldr	r3, [pc, #364]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d116      	bne.n	8004c6a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c40:	e013      	b.n	8004c6a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004c42:	4b57      	ldr	r3, [pc, #348]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10f      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004c4e:	4b54      	ldr	r3, [pc, #336]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d109      	bne.n	8004c6e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004c5e:	e006      	b.n	8004c6e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004c60:	2301      	movs	r3, #1
 8004c62:	73fb      	strb	r3, [r7, #15]
      break;
 8004c64:	e004      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c66:	bf00      	nop
 8004c68:	e002      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c6a:	bf00      	nop
 8004c6c:	e000      	b.n	8004c70 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004c6e:	bf00      	nop
    }

    if(status == HAL_OK)
 8004c70:	7bfb      	ldrb	r3, [r7, #15]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10d      	bne.n	8004c92 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004c76:	4b4a      	ldr	r3, [pc, #296]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6819      	ldr	r1, [r3, #0]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	3b01      	subs	r3, #1
 8004c88:	011b      	lsls	r3, r3, #4
 8004c8a:	430b      	orrs	r3, r1
 8004c8c:	4944      	ldr	r1, [pc, #272]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c8e:	4313      	orrs	r3, r2
 8004c90:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004c92:	7bfb      	ldrb	r3, [r7, #15]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d17d      	bne.n	8004d94 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004c98:	4b41      	ldr	r3, [pc, #260]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	4a40      	ldr	r2, [pc, #256]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004c9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ca2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca4:	f7fd fd40 	bl	8002728 <HAL_GetTick>
 8004ca8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004caa:	e009      	b.n	8004cc0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004cac:	f7fd fd3c 	bl	8002728 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	2b02      	cmp	r3, #2
 8004cb8:	d902      	bls.n	8004cc0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	73fb      	strb	r3, [r7, #15]
        break;
 8004cbe:	e005      	b.n	8004ccc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004cc0:	4b37      	ldr	r3, [pc, #220]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1ef      	bne.n	8004cac <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ccc:	7bfb      	ldrb	r3, [r7, #15]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d160      	bne.n	8004d94 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d111      	bne.n	8004cfc <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004cd8:	4b31      	ldr	r3, [pc, #196]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ce0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6892      	ldr	r2, [r2, #8]
 8004ce8:	0211      	lsls	r1, r2, #8
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	68d2      	ldr	r2, [r2, #12]
 8004cee:	0912      	lsrs	r2, r2, #4
 8004cf0:	0452      	lsls	r2, r2, #17
 8004cf2:	430a      	orrs	r2, r1
 8004cf4:	492a      	ldr	r1, [pc, #168]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	610b      	str	r3, [r1, #16]
 8004cfa:	e027      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d112      	bne.n	8004d28 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d02:	4b27      	ldr	r3, [pc, #156]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004d0a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	6892      	ldr	r2, [r2, #8]
 8004d12:	0211      	lsls	r1, r2, #8
 8004d14:	687a      	ldr	r2, [r7, #4]
 8004d16:	6912      	ldr	r2, [r2, #16]
 8004d18:	0852      	lsrs	r2, r2, #1
 8004d1a:	3a01      	subs	r2, #1
 8004d1c:	0552      	lsls	r2, r2, #21
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	491f      	ldr	r1, [pc, #124]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	610b      	str	r3, [r1, #16]
 8004d26:	e011      	b.n	8004d4c <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004d28:	4b1d      	ldr	r3, [pc, #116]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d2a:	691b      	ldr	r3, [r3, #16]
 8004d2c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004d30:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	6892      	ldr	r2, [r2, #8]
 8004d38:	0211      	lsls	r1, r2, #8
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	6952      	ldr	r2, [r2, #20]
 8004d3e:	0852      	lsrs	r2, r2, #1
 8004d40:	3a01      	subs	r2, #1
 8004d42:	0652      	lsls	r2, r2, #25
 8004d44:	430a      	orrs	r2, r1
 8004d46:	4916      	ldr	r1, [pc, #88]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d48:	4313      	orrs	r3, r2
 8004d4a:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004d4c:	4b14      	ldr	r3, [pc, #80]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a13      	ldr	r2, [pc, #76]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d52:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004d56:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d58:	f7fd fce6 	bl	8002728 <HAL_GetTick>
 8004d5c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d5e:	e009      	b.n	8004d74 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004d60:	f7fd fce2 	bl	8002728 <HAL_GetTick>
 8004d64:	4602      	mov	r2, r0
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	1ad3      	subs	r3, r2, r3
 8004d6a:	2b02      	cmp	r3, #2
 8004d6c:	d902      	bls.n	8004d74 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004d6e:	2303      	movs	r3, #3
 8004d70:	73fb      	strb	r3, [r7, #15]
          break;
 8004d72:	e005      	b.n	8004d80 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004d74:	4b0a      	ldr	r3, [pc, #40]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d0ef      	beq.n	8004d60 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d106      	bne.n	8004d94 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004d86:	4b06      	ldr	r3, [pc, #24]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d88:	691a      	ldr	r2, [r3, #16]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	4904      	ldr	r1, [pc, #16]	@ (8004da0 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004d90:	4313      	orrs	r3, r2
 8004d92:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3710      	adds	r7, #16
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	bd80      	pop	{r7, pc}
 8004d9e:	bf00      	nop
 8004da0:	40021000 	.word	0x40021000

08004da4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b084      	sub	sp, #16
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
 8004dac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dae:	2300      	movs	r3, #0
 8004db0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004db2:	4b6a      	ldr	r3, [pc, #424]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004db4:	68db      	ldr	r3, [r3, #12]
 8004db6:	f003 0303 	and.w	r3, r3, #3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d018      	beq.n	8004df0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004dbe:	4b67      	ldr	r3, [pc, #412]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dc0:	68db      	ldr	r3, [r3, #12]
 8004dc2:	f003 0203 	and.w	r2, r3, #3
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	429a      	cmp	r2, r3
 8004dcc:	d10d      	bne.n	8004dea <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
       ||
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d009      	beq.n	8004dea <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004dd6:	4b61      	ldr	r3, [pc, #388]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	091b      	lsrs	r3, r3, #4
 8004ddc:	f003 0307 	and.w	r3, r3, #7
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
       ||
 8004de6:	429a      	cmp	r2, r3
 8004de8:	d047      	beq.n	8004e7a <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004dea:	2301      	movs	r3, #1
 8004dec:	73fb      	strb	r3, [r7, #15]
 8004dee:	e044      	b.n	8004e7a <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b03      	cmp	r3, #3
 8004df6:	d018      	beq.n	8004e2a <RCCEx_PLLSAI2_Config+0x86>
 8004df8:	2b03      	cmp	r3, #3
 8004dfa:	d825      	bhi.n	8004e48 <RCCEx_PLLSAI2_Config+0xa4>
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d002      	beq.n	8004e06 <RCCEx_PLLSAI2_Config+0x62>
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d009      	beq.n	8004e18 <RCCEx_PLLSAI2_Config+0x74>
 8004e04:	e020      	b.n	8004e48 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e06:	4b55      	ldr	r3, [pc, #340]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f003 0302 	and.w	r3, r3, #2
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d11d      	bne.n	8004e4e <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e16:	e01a      	b.n	8004e4e <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e18:	4b50      	ldr	r3, [pc, #320]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d116      	bne.n	8004e52 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004e24:	2301      	movs	r3, #1
 8004e26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e28:	e013      	b.n	8004e52 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e2a:	4b4c      	ldr	r3, [pc, #304]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10f      	bne.n	8004e56 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e36:	4b49      	ldr	r3, [pc, #292]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d109      	bne.n	8004e56 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e46:	e006      	b.n	8004e56 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e4c:	e004      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e4e:	bf00      	nop
 8004e50:	e002      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e52:	bf00      	nop
 8004e54:	e000      	b.n	8004e58 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004e56:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e58:	7bfb      	ldrb	r3, [r7, #15]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d10d      	bne.n	8004e7a <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e5e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e60:	68db      	ldr	r3, [r3, #12]
 8004e62:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6819      	ldr	r1, [r3, #0]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	3b01      	subs	r3, #1
 8004e70:	011b      	lsls	r3, r3, #4
 8004e72:	430b      	orrs	r3, r1
 8004e74:	4939      	ldr	r1, [pc, #228]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e76:	4313      	orrs	r3, r2
 8004e78:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004e7a:	7bfb      	ldrb	r3, [r7, #15]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d167      	bne.n	8004f50 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004e80:	4b36      	ldr	r3, [pc, #216]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a35      	ldr	r2, [pc, #212]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004e86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e8a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e8c:	f7fd fc4c 	bl	8002728 <HAL_GetTick>
 8004e90:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004e92:	e009      	b.n	8004ea8 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004e94:	f7fd fc48 	bl	8002728 <HAL_GetTick>
 8004e98:	4602      	mov	r2, r0
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d902      	bls.n	8004ea8 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	73fb      	strb	r3, [r7, #15]
        break;
 8004ea6:	e005      	b.n	8004eb4 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004ea8:	4b2c      	ldr	r3, [pc, #176]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d1ef      	bne.n	8004e94 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004eb4:	7bfb      	ldrb	r3, [r7, #15]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d14a      	bne.n	8004f50 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d111      	bne.n	8004ee4 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ec0:	4b26      	ldr	r3, [pc, #152]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ec8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	6892      	ldr	r2, [r2, #8]
 8004ed0:	0211      	lsls	r1, r2, #8
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	68d2      	ldr	r2, [r2, #12]
 8004ed6:	0912      	lsrs	r2, r2, #4
 8004ed8:	0452      	lsls	r2, r2, #17
 8004eda:	430a      	orrs	r2, r1
 8004edc:	491f      	ldr	r1, [pc, #124]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	614b      	str	r3, [r1, #20]
 8004ee2:	e011      	b.n	8004f08 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004eec:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004ef0:	687a      	ldr	r2, [r7, #4]
 8004ef2:	6892      	ldr	r2, [r2, #8]
 8004ef4:	0211      	lsls	r1, r2, #8
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	6912      	ldr	r2, [r2, #16]
 8004efa:	0852      	lsrs	r2, r2, #1
 8004efc:	3a01      	subs	r2, #1
 8004efe:	0652      	lsls	r2, r2, #25
 8004f00:	430a      	orrs	r2, r1
 8004f02:	4916      	ldr	r1, [pc, #88]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f04:	4313      	orrs	r3, r2
 8004f06:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004f08:	4b14      	ldr	r3, [pc, #80]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f0e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f12:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f14:	f7fd fc08 	bl	8002728 <HAL_GetTick>
 8004f18:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f1a:	e009      	b.n	8004f30 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004f1c:	f7fd fc04 	bl	8002728 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	2b02      	cmp	r3, #2
 8004f28:	d902      	bls.n	8004f30 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	73fb      	strb	r3, [r7, #15]
          break;
 8004f2e:	e005      	b.n	8004f3c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004f30:	4b0a      	ldr	r3, [pc, #40]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d0ef      	beq.n	8004f1c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004f3c:	7bfb      	ldrb	r3, [r7, #15]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d106      	bne.n	8004f50 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004f42:	4b06      	ldr	r3, [pc, #24]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f44:	695a      	ldr	r2, [r3, #20]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	695b      	ldr	r3, [r3, #20]
 8004f4a:	4904      	ldr	r1, [pc, #16]	@ (8004f5c <RCCEx_PLLSAI2_Config+0x1b8>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3710      	adds	r7, #16
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000

08004f60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b082      	sub	sp, #8
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d101      	bne.n	8004f72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	e040      	b.n	8004ff4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d106      	bne.n	8004f88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f82:	6878      	ldr	r0, [r7, #4]
 8004f84:	f7fd f9d2 	bl	800232c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2224      	movs	r2, #36	@ 0x24
 8004f8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681a      	ldr	r2, [r3, #0]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f022 0201 	bic.w	r2, r2, #1
 8004f9c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fb6a 	bl	8005680 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004fac:	6878      	ldr	r0, [r7, #4]
 8004fae:	f000 f8af 	bl	8005110 <UART_SetConfig>
 8004fb2:	4603      	mov	r3, r0
 8004fb4:	2b01      	cmp	r3, #1
 8004fb6:	d101      	bne.n	8004fbc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e01b      	b.n	8004ff4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	685a      	ldr	r2, [r3, #4]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004fca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	689a      	ldr	r2, [r3, #8]
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004fda:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	681a      	ldr	r2, [r3, #0]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f042 0201 	orr.w	r2, r2, #1
 8004fea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f000 fbe9 	bl	80057c4 <UART_CheckIdleState>
 8004ff2:	4603      	mov	r3, r0
}
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	3708      	adds	r7, #8
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}

08004ffc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08a      	sub	sp, #40	@ 0x28
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	603b      	str	r3, [r7, #0]
 8005008:	4613      	mov	r3, r2
 800500a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005010:	2b20      	cmp	r3, #32
 8005012:	d177      	bne.n	8005104 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d002      	beq.n	8005020 <HAL_UART_Transmit+0x24>
 800501a:	88fb      	ldrh	r3, [r7, #6]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d101      	bne.n	8005024 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e070      	b.n	8005106 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	2200      	movs	r2, #0
 8005028:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2221      	movs	r2, #33	@ 0x21
 8005030:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005032:	f7fd fb79 	bl	8002728 <HAL_GetTick>
 8005036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	88fa      	ldrh	r2, [r7, #6]
 800503c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005050:	d108      	bne.n	8005064 <HAL_UART_Transmit+0x68>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	691b      	ldr	r3, [r3, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d104      	bne.n	8005064 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800505a:	2300      	movs	r3, #0
 800505c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	61bb      	str	r3, [r7, #24]
 8005062:	e003      	b.n	800506c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005064:	68bb      	ldr	r3, [r7, #8]
 8005066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005068:	2300      	movs	r3, #0
 800506a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800506c:	e02f      	b.n	80050ce <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	9300      	str	r3, [sp, #0]
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	2200      	movs	r2, #0
 8005076:	2180      	movs	r1, #128	@ 0x80
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 fc4b 	bl	8005914 <UART_WaitOnFlagUntilTimeout>
 800507e:	4603      	mov	r3, r0
 8005080:	2b00      	cmp	r3, #0
 8005082:	d004      	beq.n	800508e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2220      	movs	r2, #32
 8005088:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800508a:	2303      	movs	r3, #3
 800508c:	e03b      	b.n	8005106 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10b      	bne.n	80050ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	881a      	ldrh	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80050a0:	b292      	uxth	r2, r2
 80050a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80050a4:	69bb      	ldr	r3, [r7, #24]
 80050a6:	3302      	adds	r3, #2
 80050a8:	61bb      	str	r3, [r7, #24]
 80050aa:	e007      	b.n	80050bc <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80050ac:	69fb      	ldr	r3, [r7, #28]
 80050ae:	781a      	ldrb	r2, [r3, #0]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	3301      	adds	r3, #1
 80050ba:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	3b01      	subs	r3, #1
 80050c6:	b29a      	uxth	r2, r3
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80050d4:	b29b      	uxth	r3, r3
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1c9      	bne.n	800506e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	9300      	str	r3, [sp, #0]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	2200      	movs	r2, #0
 80050e2:	2140      	movs	r1, #64	@ 0x40
 80050e4:	68f8      	ldr	r0, [r7, #12]
 80050e6:	f000 fc15 	bl	8005914 <UART_WaitOnFlagUntilTimeout>
 80050ea:	4603      	mov	r3, r0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d004      	beq.n	80050fa <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	2220      	movs	r2, #32
 80050f4:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e005      	b.n	8005106 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2220      	movs	r2, #32
 80050fe:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005100:	2300      	movs	r3, #0
 8005102:	e000      	b.n	8005106 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005104:	2302      	movs	r3, #2
  }
}
 8005106:	4618      	mov	r0, r3
 8005108:	3720      	adds	r7, #32
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
	...

08005110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005110:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005114:	b08a      	sub	sp, #40	@ 0x28
 8005116:	af00      	add	r7, sp, #0
 8005118:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800511a:	2300      	movs	r3, #0
 800511c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	689a      	ldr	r2, [r3, #8]
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	691b      	ldr	r3, [r3, #16]
 8005128:	431a      	orrs	r2, r3
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	431a      	orrs	r2, r3
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	69db      	ldr	r3, [r3, #28]
 8005134:	4313      	orrs	r3, r2
 8005136:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	4ba4      	ldr	r3, [pc, #656]	@ (80053d0 <UART_SetConfig+0x2c0>)
 8005140:	4013      	ands	r3, r2
 8005142:	68fa      	ldr	r2, [r7, #12]
 8005144:	6812      	ldr	r2, [r2, #0]
 8005146:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005148:	430b      	orrs	r3, r1
 800514a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	430a      	orrs	r2, r1
 8005160:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a99      	ldr	r2, [pc, #612]	@ (80053d4 <UART_SetConfig+0x2c4>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d004      	beq.n	800517c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6a1b      	ldr	r3, [r3, #32]
 8005176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005178:	4313      	orrs	r3, r2
 800517a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800518c:	430a      	orrs	r2, r1
 800518e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a90      	ldr	r2, [pc, #576]	@ (80053d8 <UART_SetConfig+0x2c8>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d126      	bne.n	80051e8 <UART_SetConfig+0xd8>
 800519a:	4b90      	ldr	r3, [pc, #576]	@ (80053dc <UART_SetConfig+0x2cc>)
 800519c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051a0:	f003 0303 	and.w	r3, r3, #3
 80051a4:	2b03      	cmp	r3, #3
 80051a6:	d81b      	bhi.n	80051e0 <UART_SetConfig+0xd0>
 80051a8:	a201      	add	r2, pc, #4	@ (adr r2, 80051b0 <UART_SetConfig+0xa0>)
 80051aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ae:	bf00      	nop
 80051b0:	080051c1 	.word	0x080051c1
 80051b4:	080051d1 	.word	0x080051d1
 80051b8:	080051c9 	.word	0x080051c9
 80051bc:	080051d9 	.word	0x080051d9
 80051c0:	2301      	movs	r3, #1
 80051c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051c6:	e116      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80051c8:	2302      	movs	r3, #2
 80051ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051ce:	e112      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80051d0:	2304      	movs	r3, #4
 80051d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051d6:	e10e      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80051d8:	2308      	movs	r3, #8
 80051da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051de:	e10a      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80051e0:	2310      	movs	r3, #16
 80051e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80051e6:	e106      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4a7c      	ldr	r2, [pc, #496]	@ (80053e0 <UART_SetConfig+0x2d0>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d138      	bne.n	8005264 <UART_SetConfig+0x154>
 80051f2:	4b7a      	ldr	r3, [pc, #488]	@ (80053dc <UART_SetConfig+0x2cc>)
 80051f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f8:	f003 030c 	and.w	r3, r3, #12
 80051fc:	2b0c      	cmp	r3, #12
 80051fe:	d82d      	bhi.n	800525c <UART_SetConfig+0x14c>
 8005200:	a201      	add	r2, pc, #4	@ (adr r2, 8005208 <UART_SetConfig+0xf8>)
 8005202:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005206:	bf00      	nop
 8005208:	0800523d 	.word	0x0800523d
 800520c:	0800525d 	.word	0x0800525d
 8005210:	0800525d 	.word	0x0800525d
 8005214:	0800525d 	.word	0x0800525d
 8005218:	0800524d 	.word	0x0800524d
 800521c:	0800525d 	.word	0x0800525d
 8005220:	0800525d 	.word	0x0800525d
 8005224:	0800525d 	.word	0x0800525d
 8005228:	08005245 	.word	0x08005245
 800522c:	0800525d 	.word	0x0800525d
 8005230:	0800525d 	.word	0x0800525d
 8005234:	0800525d 	.word	0x0800525d
 8005238:	08005255 	.word	0x08005255
 800523c:	2300      	movs	r3, #0
 800523e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005242:	e0d8      	b.n	80053f6 <UART_SetConfig+0x2e6>
 8005244:	2302      	movs	r3, #2
 8005246:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800524a:	e0d4      	b.n	80053f6 <UART_SetConfig+0x2e6>
 800524c:	2304      	movs	r3, #4
 800524e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005252:	e0d0      	b.n	80053f6 <UART_SetConfig+0x2e6>
 8005254:	2308      	movs	r3, #8
 8005256:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800525a:	e0cc      	b.n	80053f6 <UART_SetConfig+0x2e6>
 800525c:	2310      	movs	r3, #16
 800525e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005262:	e0c8      	b.n	80053f6 <UART_SetConfig+0x2e6>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a5e      	ldr	r2, [pc, #376]	@ (80053e4 <UART_SetConfig+0x2d4>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d125      	bne.n	80052ba <UART_SetConfig+0x1aa>
 800526e:	4b5b      	ldr	r3, [pc, #364]	@ (80053dc <UART_SetConfig+0x2cc>)
 8005270:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005274:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8005278:	2b30      	cmp	r3, #48	@ 0x30
 800527a:	d016      	beq.n	80052aa <UART_SetConfig+0x19a>
 800527c:	2b30      	cmp	r3, #48	@ 0x30
 800527e:	d818      	bhi.n	80052b2 <UART_SetConfig+0x1a2>
 8005280:	2b20      	cmp	r3, #32
 8005282:	d00a      	beq.n	800529a <UART_SetConfig+0x18a>
 8005284:	2b20      	cmp	r3, #32
 8005286:	d814      	bhi.n	80052b2 <UART_SetConfig+0x1a2>
 8005288:	2b00      	cmp	r3, #0
 800528a:	d002      	beq.n	8005292 <UART_SetConfig+0x182>
 800528c:	2b10      	cmp	r3, #16
 800528e:	d008      	beq.n	80052a2 <UART_SetConfig+0x192>
 8005290:	e00f      	b.n	80052b2 <UART_SetConfig+0x1a2>
 8005292:	2300      	movs	r3, #0
 8005294:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005298:	e0ad      	b.n	80053f6 <UART_SetConfig+0x2e6>
 800529a:	2302      	movs	r3, #2
 800529c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052a0:	e0a9      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80052a2:	2304      	movs	r3, #4
 80052a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052a8:	e0a5      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80052aa:	2308      	movs	r3, #8
 80052ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052b0:	e0a1      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80052b2:	2310      	movs	r3, #16
 80052b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052b8:	e09d      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	4a4a      	ldr	r2, [pc, #296]	@ (80053e8 <UART_SetConfig+0x2d8>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d125      	bne.n	8005310 <UART_SetConfig+0x200>
 80052c4:	4b45      	ldr	r3, [pc, #276]	@ (80053dc <UART_SetConfig+0x2cc>)
 80052c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80052ca:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80052ce:	2bc0      	cmp	r3, #192	@ 0xc0
 80052d0:	d016      	beq.n	8005300 <UART_SetConfig+0x1f0>
 80052d2:	2bc0      	cmp	r3, #192	@ 0xc0
 80052d4:	d818      	bhi.n	8005308 <UART_SetConfig+0x1f8>
 80052d6:	2b80      	cmp	r3, #128	@ 0x80
 80052d8:	d00a      	beq.n	80052f0 <UART_SetConfig+0x1e0>
 80052da:	2b80      	cmp	r3, #128	@ 0x80
 80052dc:	d814      	bhi.n	8005308 <UART_SetConfig+0x1f8>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d002      	beq.n	80052e8 <UART_SetConfig+0x1d8>
 80052e2:	2b40      	cmp	r3, #64	@ 0x40
 80052e4:	d008      	beq.n	80052f8 <UART_SetConfig+0x1e8>
 80052e6:	e00f      	b.n	8005308 <UART_SetConfig+0x1f8>
 80052e8:	2300      	movs	r3, #0
 80052ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052ee:	e082      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80052f0:	2302      	movs	r3, #2
 80052f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052f6:	e07e      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80052f8:	2304      	movs	r3, #4
 80052fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80052fe:	e07a      	b.n	80053f6 <UART_SetConfig+0x2e6>
 8005300:	2308      	movs	r3, #8
 8005302:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005306:	e076      	b.n	80053f6 <UART_SetConfig+0x2e6>
 8005308:	2310      	movs	r3, #16
 800530a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800530e:	e072      	b.n	80053f6 <UART_SetConfig+0x2e6>
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a35      	ldr	r2, [pc, #212]	@ (80053ec <UART_SetConfig+0x2dc>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d12a      	bne.n	8005370 <UART_SetConfig+0x260>
 800531a:	4b30      	ldr	r3, [pc, #192]	@ (80053dc <UART_SetConfig+0x2cc>)
 800531c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005320:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005324:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005328:	d01a      	beq.n	8005360 <UART_SetConfig+0x250>
 800532a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800532e:	d81b      	bhi.n	8005368 <UART_SetConfig+0x258>
 8005330:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005334:	d00c      	beq.n	8005350 <UART_SetConfig+0x240>
 8005336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800533a:	d815      	bhi.n	8005368 <UART_SetConfig+0x258>
 800533c:	2b00      	cmp	r3, #0
 800533e:	d003      	beq.n	8005348 <UART_SetConfig+0x238>
 8005340:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005344:	d008      	beq.n	8005358 <UART_SetConfig+0x248>
 8005346:	e00f      	b.n	8005368 <UART_SetConfig+0x258>
 8005348:	2300      	movs	r3, #0
 800534a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800534e:	e052      	b.n	80053f6 <UART_SetConfig+0x2e6>
 8005350:	2302      	movs	r3, #2
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005356:	e04e      	b.n	80053f6 <UART_SetConfig+0x2e6>
 8005358:	2304      	movs	r3, #4
 800535a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800535e:	e04a      	b.n	80053f6 <UART_SetConfig+0x2e6>
 8005360:	2308      	movs	r3, #8
 8005362:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005366:	e046      	b.n	80053f6 <UART_SetConfig+0x2e6>
 8005368:	2310      	movs	r3, #16
 800536a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800536e:	e042      	b.n	80053f6 <UART_SetConfig+0x2e6>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	4a17      	ldr	r2, [pc, #92]	@ (80053d4 <UART_SetConfig+0x2c4>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d13a      	bne.n	80053f0 <UART_SetConfig+0x2e0>
 800537a:	4b18      	ldr	r3, [pc, #96]	@ (80053dc <UART_SetConfig+0x2cc>)
 800537c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005380:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005384:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005388:	d01a      	beq.n	80053c0 <UART_SetConfig+0x2b0>
 800538a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800538e:	d81b      	bhi.n	80053c8 <UART_SetConfig+0x2b8>
 8005390:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005394:	d00c      	beq.n	80053b0 <UART_SetConfig+0x2a0>
 8005396:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800539a:	d815      	bhi.n	80053c8 <UART_SetConfig+0x2b8>
 800539c:	2b00      	cmp	r3, #0
 800539e:	d003      	beq.n	80053a8 <UART_SetConfig+0x298>
 80053a0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80053a4:	d008      	beq.n	80053b8 <UART_SetConfig+0x2a8>
 80053a6:	e00f      	b.n	80053c8 <UART_SetConfig+0x2b8>
 80053a8:	2300      	movs	r3, #0
 80053aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ae:	e022      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80053b0:	2302      	movs	r3, #2
 80053b2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053b6:	e01e      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80053b8:	2304      	movs	r3, #4
 80053ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053be:	e01a      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80053c0:	2308      	movs	r3, #8
 80053c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053c6:	e016      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80053c8:	2310      	movs	r3, #16
 80053ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ce:	e012      	b.n	80053f6 <UART_SetConfig+0x2e6>
 80053d0:	efff69f3 	.word	0xefff69f3
 80053d4:	40008000 	.word	0x40008000
 80053d8:	40013800 	.word	0x40013800
 80053dc:	40021000 	.word	0x40021000
 80053e0:	40004400 	.word	0x40004400
 80053e4:	40004800 	.word	0x40004800
 80053e8:	40004c00 	.word	0x40004c00
 80053ec:	40005000 	.word	0x40005000
 80053f0:	2310      	movs	r3, #16
 80053f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a9f      	ldr	r2, [pc, #636]	@ (8005678 <UART_SetConfig+0x568>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d17a      	bne.n	80054f6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005400:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005404:	2b08      	cmp	r3, #8
 8005406:	d824      	bhi.n	8005452 <UART_SetConfig+0x342>
 8005408:	a201      	add	r2, pc, #4	@ (adr r2, 8005410 <UART_SetConfig+0x300>)
 800540a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800540e:	bf00      	nop
 8005410:	08005435 	.word	0x08005435
 8005414:	08005453 	.word	0x08005453
 8005418:	0800543d 	.word	0x0800543d
 800541c:	08005453 	.word	0x08005453
 8005420:	08005443 	.word	0x08005443
 8005424:	08005453 	.word	0x08005453
 8005428:	08005453 	.word	0x08005453
 800542c:	08005453 	.word	0x08005453
 8005430:	0800544b 	.word	0x0800544b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005434:	f7ff f84c 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005438:	61f8      	str	r0, [r7, #28]
        break;
 800543a:	e010      	b.n	800545e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800543c:	4b8f      	ldr	r3, [pc, #572]	@ (800567c <UART_SetConfig+0x56c>)
 800543e:	61fb      	str	r3, [r7, #28]
        break;
 8005440:	e00d      	b.n	800545e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005442:	f7fe ffad 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 8005446:	61f8      	str	r0, [r7, #28]
        break;
 8005448:	e009      	b.n	800545e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800544a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800544e:	61fb      	str	r3, [r7, #28]
        break;
 8005450:	e005      	b.n	800545e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005452:	2300      	movs	r3, #0
 8005454:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005456:	2301      	movs	r3, #1
 8005458:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800545c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 80fb 	beq.w	800565c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	4613      	mov	r3, r2
 800546c:	005b      	lsls	r3, r3, #1
 800546e:	4413      	add	r3, r2
 8005470:	69fa      	ldr	r2, [r7, #28]
 8005472:	429a      	cmp	r2, r3
 8005474:	d305      	bcc.n	8005482 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	429a      	cmp	r2, r3
 8005480:	d903      	bls.n	800548a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005488:	e0e8      	b.n	800565c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	2200      	movs	r2, #0
 800548e:	461c      	mov	r4, r3
 8005490:	4615      	mov	r5, r2
 8005492:	f04f 0200 	mov.w	r2, #0
 8005496:	f04f 0300 	mov.w	r3, #0
 800549a:	022b      	lsls	r3, r5, #8
 800549c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80054a0:	0222      	lsls	r2, r4, #8
 80054a2:	68f9      	ldr	r1, [r7, #12]
 80054a4:	6849      	ldr	r1, [r1, #4]
 80054a6:	0849      	lsrs	r1, r1, #1
 80054a8:	2000      	movs	r0, #0
 80054aa:	4688      	mov	r8, r1
 80054ac:	4681      	mov	r9, r0
 80054ae:	eb12 0a08 	adds.w	sl, r2, r8
 80054b2:	eb43 0b09 	adc.w	fp, r3, r9
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	603b      	str	r3, [r7, #0]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80054c4:	4650      	mov	r0, sl
 80054c6:	4659      	mov	r1, fp
 80054c8:	f7fb fc2e 	bl	8000d28 <__aeabi_uldivmod>
 80054cc:	4602      	mov	r2, r0
 80054ce:	460b      	mov	r3, r1
 80054d0:	4613      	mov	r3, r2
 80054d2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80054da:	d308      	bcc.n	80054ee <UART_SetConfig+0x3de>
 80054dc:	69bb      	ldr	r3, [r7, #24]
 80054de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054e2:	d204      	bcs.n	80054ee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	60da      	str	r2, [r3, #12]
 80054ec:	e0b6      	b.n	800565c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80054f4:	e0b2      	b.n	800565c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	69db      	ldr	r3, [r3, #28]
 80054fa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054fe:	d15e      	bne.n	80055be <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005500:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005504:	2b08      	cmp	r3, #8
 8005506:	d828      	bhi.n	800555a <UART_SetConfig+0x44a>
 8005508:	a201      	add	r2, pc, #4	@ (adr r2, 8005510 <UART_SetConfig+0x400>)
 800550a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800550e:	bf00      	nop
 8005510:	08005535 	.word	0x08005535
 8005514:	0800553d 	.word	0x0800553d
 8005518:	08005545 	.word	0x08005545
 800551c:	0800555b 	.word	0x0800555b
 8005520:	0800554b 	.word	0x0800554b
 8005524:	0800555b 	.word	0x0800555b
 8005528:	0800555b 	.word	0x0800555b
 800552c:	0800555b 	.word	0x0800555b
 8005530:	08005553 	.word	0x08005553
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005534:	f7fe ffcc 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 8005538:	61f8      	str	r0, [r7, #28]
        break;
 800553a:	e014      	b.n	8005566 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800553c:	f7fe ffde 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 8005540:	61f8      	str	r0, [r7, #28]
        break;
 8005542:	e010      	b.n	8005566 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005544:	4b4d      	ldr	r3, [pc, #308]	@ (800567c <UART_SetConfig+0x56c>)
 8005546:	61fb      	str	r3, [r7, #28]
        break;
 8005548:	e00d      	b.n	8005566 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800554a:	f7fe ff29 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800554e:	61f8      	str	r0, [r7, #28]
        break;
 8005550:	e009      	b.n	8005566 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005552:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005556:	61fb      	str	r3, [r7, #28]
        break;
 8005558:	e005      	b.n	8005566 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800555a:	2300      	movs	r3, #0
 800555c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005564:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d077      	beq.n	800565c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800556c:	69fb      	ldr	r3, [r7, #28]
 800556e:	005a      	lsls	r2, r3, #1
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	085b      	lsrs	r3, r3, #1
 8005576:	441a      	add	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005580:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005582:	69bb      	ldr	r3, [r7, #24]
 8005584:	2b0f      	cmp	r3, #15
 8005586:	d916      	bls.n	80055b6 <UART_SetConfig+0x4a6>
 8005588:	69bb      	ldr	r3, [r7, #24]
 800558a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800558e:	d212      	bcs.n	80055b6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005590:	69bb      	ldr	r3, [r7, #24]
 8005592:	b29b      	uxth	r3, r3
 8005594:	f023 030f 	bic.w	r3, r3, #15
 8005598:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800559a:	69bb      	ldr	r3, [r7, #24]
 800559c:	085b      	lsrs	r3, r3, #1
 800559e:	b29b      	uxth	r3, r3
 80055a0:	f003 0307 	and.w	r3, r3, #7
 80055a4:	b29a      	uxth	r2, r3
 80055a6:	8afb      	ldrh	r3, [r7, #22]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	8afa      	ldrh	r2, [r7, #22]
 80055b2:	60da      	str	r2, [r3, #12]
 80055b4:	e052      	b.n	800565c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80055bc:	e04e      	b.n	800565c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80055be:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80055c2:	2b08      	cmp	r3, #8
 80055c4:	d827      	bhi.n	8005616 <UART_SetConfig+0x506>
 80055c6:	a201      	add	r2, pc, #4	@ (adr r2, 80055cc <UART_SetConfig+0x4bc>)
 80055c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055cc:	080055f1 	.word	0x080055f1
 80055d0:	080055f9 	.word	0x080055f9
 80055d4:	08005601 	.word	0x08005601
 80055d8:	08005617 	.word	0x08005617
 80055dc:	08005607 	.word	0x08005607
 80055e0:	08005617 	.word	0x08005617
 80055e4:	08005617 	.word	0x08005617
 80055e8:	08005617 	.word	0x08005617
 80055ec:	0800560f 	.word	0x0800560f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80055f0:	f7fe ff6e 	bl	80044d0 <HAL_RCC_GetPCLK1Freq>
 80055f4:	61f8      	str	r0, [r7, #28]
        break;
 80055f6:	e014      	b.n	8005622 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80055f8:	f7fe ff80 	bl	80044fc <HAL_RCC_GetPCLK2Freq>
 80055fc:	61f8      	str	r0, [r7, #28]
        break;
 80055fe:	e010      	b.n	8005622 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005600:	4b1e      	ldr	r3, [pc, #120]	@ (800567c <UART_SetConfig+0x56c>)
 8005602:	61fb      	str	r3, [r7, #28]
        break;
 8005604:	e00d      	b.n	8005622 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005606:	f7fe fecb 	bl	80043a0 <HAL_RCC_GetSysClockFreq>
 800560a:	61f8      	str	r0, [r7, #28]
        break;
 800560c:	e009      	b.n	8005622 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800560e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005612:	61fb      	str	r3, [r7, #28]
        break;
 8005614:	e005      	b.n	8005622 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8005616:	2300      	movs	r3, #0
 8005618:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005620:	bf00      	nop
    }

    if (pclk != 0U)
 8005622:	69fb      	ldr	r3, [r7, #28]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d019      	beq.n	800565c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	085a      	lsrs	r2, r3, #1
 800562e:	69fb      	ldr	r3, [r7, #28]
 8005630:	441a      	add	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	fbb2 f3f3 	udiv	r3, r2, r3
 800563a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800563c:	69bb      	ldr	r3, [r7, #24]
 800563e:	2b0f      	cmp	r3, #15
 8005640:	d909      	bls.n	8005656 <UART_SetConfig+0x546>
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005648:	d205      	bcs.n	8005656 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800564a:	69bb      	ldr	r3, [r7, #24]
 800564c:	b29a      	uxth	r2, r3
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	60da      	str	r2, [r3, #12]
 8005654:	e002      	b.n	800565c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2200      	movs	r2, #0
 8005660:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8005668:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800566c:	4618      	mov	r0, r3
 800566e:	3728      	adds	r7, #40	@ 0x28
 8005670:	46bd      	mov	sp, r7
 8005672:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005676:	bf00      	nop
 8005678:	40008000 	.word	0x40008000
 800567c:	00f42400 	.word	0x00f42400

08005680 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005680:	b480      	push	{r7}
 8005682:	b083      	sub	sp, #12
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800568c:	f003 0308 	and.w	r3, r3, #8
 8005690:	2b00      	cmp	r3, #0
 8005692:	d00a      	beq.n	80056aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	430a      	orrs	r2, r1
 80056a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056ae:	f003 0301 	and.w	r3, r3, #1
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d00a      	beq.n	80056cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	430a      	orrs	r2, r1
 80056ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056d0:	f003 0302 	and.w	r3, r3, #2
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00a      	beq.n	80056ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	430a      	orrs	r2, r1
 80056ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056f2:	f003 0304 	and.w	r3, r3, #4
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00a      	beq.n	8005710 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	430a      	orrs	r2, r1
 800570e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005714:	f003 0310 	and.w	r3, r3, #16
 8005718:	2b00      	cmp	r3, #0
 800571a:	d00a      	beq.n	8005732 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	430a      	orrs	r2, r1
 8005730:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005736:	f003 0320 	and.w	r3, r3, #32
 800573a:	2b00      	cmp	r3, #0
 800573c:	d00a      	beq.n	8005754 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	430a      	orrs	r2, r1
 8005752:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d01a      	beq.n	8005796 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	430a      	orrs	r2, r1
 8005774:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800577a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800577e:	d10a      	bne.n	8005796 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	430a      	orrs	r2, r1
 8005794:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00a      	beq.n	80057b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	685b      	ldr	r3, [r3, #4]
 80057a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	430a      	orrs	r2, r1
 80057b6:	605a      	str	r2, [r3, #4]
  }
}
 80057b8:	bf00      	nop
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b098      	sub	sp, #96	@ 0x60
 80057c8:	af02      	add	r7, sp, #8
 80057ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80057d4:	f7fc ffa8 	bl	8002728 <HAL_GetTick>
 80057d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f003 0308 	and.w	r3, r3, #8
 80057e4:	2b08      	cmp	r3, #8
 80057e6:	d12e      	bne.n	8005846 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80057e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80057ec:	9300      	str	r3, [sp, #0]
 80057ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80057f0:	2200      	movs	r2, #0
 80057f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f000 f88c 	bl	8005914 <UART_WaitOnFlagUntilTimeout>
 80057fc:	4603      	mov	r3, r0
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d021      	beq.n	8005846 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005808:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800580a:	e853 3f00 	ldrex	r3, [r3]
 800580e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005812:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005816:	653b      	str	r3, [r7, #80]	@ 0x50
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	461a      	mov	r2, r3
 800581e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005820:	647b      	str	r3, [r7, #68]	@ 0x44
 8005822:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005824:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005826:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005828:	e841 2300 	strex	r3, r2, [r1]
 800582c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800582e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005830:	2b00      	cmp	r3, #0
 8005832:	d1e6      	bne.n	8005802 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2220      	movs	r2, #32
 8005838:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e062      	b.n	800590c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0304 	and.w	r3, r3, #4
 8005850:	2b04      	cmp	r3, #4
 8005852:	d149      	bne.n	80058e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005854:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800585c:	2200      	movs	r2, #0
 800585e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f856 	bl	8005914 <UART_WaitOnFlagUntilTimeout>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d03c      	beq.n	80058e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005874:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005876:	e853 3f00 	ldrex	r3, [r3]
 800587a:	623b      	str	r3, [r7, #32]
   return(result);
 800587c:	6a3b      	ldr	r3, [r7, #32]
 800587e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	461a      	mov	r2, r3
 800588a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800588c:	633b      	str	r3, [r7, #48]	@ 0x30
 800588e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005890:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005892:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005894:	e841 2300 	strex	r3, r2, [r1]
 8005898:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800589a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589c:	2b00      	cmp	r3, #0
 800589e:	d1e6      	bne.n	800586e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	3308      	adds	r3, #8
 80058a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	e853 3f00 	ldrex	r3, [r3]
 80058ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0301 	bic.w	r3, r3, #1
 80058b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	3308      	adds	r3, #8
 80058be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80058c0:	61fa      	str	r2, [r7, #28]
 80058c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058c4:	69b9      	ldr	r1, [r7, #24]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	e841 2300 	strex	r3, r2, [r1]
 80058cc:	617b      	str	r3, [r7, #20]
   return(result);
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d1e5      	bne.n	80058a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	2220      	movs	r2, #32
 80058d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e011      	b.n	800590c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2220      	movs	r2, #32
 80058ec:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2220      	movs	r2, #32
 80058f2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2200      	movs	r2, #0
 80058fa:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800590a:	2300      	movs	r3, #0
}
 800590c:	4618      	mov	r0, r3
 800590e:	3758      	adds	r7, #88	@ 0x58
 8005910:	46bd      	mov	sp, r7
 8005912:	bd80      	pop	{r7, pc}

08005914 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	b084      	sub	sp, #16
 8005918:	af00      	add	r7, sp, #0
 800591a:	60f8      	str	r0, [r7, #12]
 800591c:	60b9      	str	r1, [r7, #8]
 800591e:	603b      	str	r3, [r7, #0]
 8005920:	4613      	mov	r3, r2
 8005922:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005924:	e04f      	b.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005926:	69bb      	ldr	r3, [r7, #24]
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800592c:	d04b      	beq.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800592e:	f7fc fefb 	bl	8002728 <HAL_GetTick>
 8005932:	4602      	mov	r2, r0
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	1ad3      	subs	r3, r2, r3
 8005938:	69ba      	ldr	r2, [r7, #24]
 800593a:	429a      	cmp	r2, r3
 800593c:	d302      	bcc.n	8005944 <UART_WaitOnFlagUntilTimeout+0x30>
 800593e:	69bb      	ldr	r3, [r7, #24]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e04e      	b.n	80059e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f003 0304 	and.w	r3, r3, #4
 8005952:	2b00      	cmp	r3, #0
 8005954:	d037      	beq.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b80      	cmp	r3, #128	@ 0x80
 800595a:	d034      	beq.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	2b40      	cmp	r3, #64	@ 0x40
 8005960:	d031      	beq.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b08      	cmp	r3, #8
 800596e:	d110      	bne.n	8005992 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2208      	movs	r2, #8
 8005976:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f000 f838 	bl	80059ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2208      	movs	r2, #8
 8005982:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	2200      	movs	r2, #0
 800598a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800598e:	2301      	movs	r3, #1
 8005990:	e029      	b.n	80059e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	69db      	ldr	r3, [r3, #28]
 8005998:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800599c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059a0:	d111      	bne.n	80059c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80059aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 f81e 	bl	80059ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2220      	movs	r2, #32
 80059b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80059c2:	2303      	movs	r3, #3
 80059c4:	e00f      	b.n	80059e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	69da      	ldr	r2, [r3, #28]
 80059cc:	68bb      	ldr	r3, [r7, #8]
 80059ce:	4013      	ands	r3, r2
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	bf0c      	ite	eq
 80059d6:	2301      	moveq	r3, #1
 80059d8:	2300      	movne	r3, #0
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	461a      	mov	r2, r3
 80059de:	79fb      	ldrb	r3, [r7, #7]
 80059e0:	429a      	cmp	r2, r3
 80059e2:	d0a0      	beq.n	8005926 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80059e4:	2300      	movs	r3, #0
}
 80059e6:	4618      	mov	r0, r3
 80059e8:	3710      	adds	r7, #16
 80059ea:	46bd      	mov	sp, r7
 80059ec:	bd80      	pop	{r7, pc}

080059ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059ee:	b480      	push	{r7}
 80059f0:	b095      	sub	sp, #84	@ 0x54
 80059f2:	af00      	add	r7, sp, #0
 80059f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059fe:	e853 3f00 	ldrex	r3, [r3]
 8005a02:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a06:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	461a      	mov	r2, r3
 8005a12:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005a14:	643b      	str	r3, [r7, #64]	@ 0x40
 8005a16:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a18:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005a1c:	e841 2300 	strex	r3, r2, [r1]
 8005a20:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005a22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d1e6      	bne.n	80059f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	3308      	adds	r3, #8
 8005a2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	e853 3f00 	ldrex	r3, [r3]
 8005a36:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f023 0301 	bic.w	r3, r3, #1
 8005a3e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	3308      	adds	r3, #8
 8005a46:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005a48:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a4c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005a4e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005a50:	e841 2300 	strex	r3, r2, [r1]
 8005a54:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005a56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d1e5      	bne.n	8005a28 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d118      	bne.n	8005a96 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	e853 3f00 	ldrex	r3, [r3]
 8005a70:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	f023 0310 	bic.w	r3, r3, #16
 8005a78:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	461a      	mov	r2, r3
 8005a80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005a82:	61bb      	str	r3, [r7, #24]
 8005a84:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a86:	6979      	ldr	r1, [r7, #20]
 8005a88:	69ba      	ldr	r2, [r7, #24]
 8005a8a:	e841 2300 	strex	r3, r2, [r1]
 8005a8e:	613b      	str	r3, [r7, #16]
   return(result);
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d1e6      	bne.n	8005a64 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2220      	movs	r2, #32
 8005a9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2200      	movs	r2, #0
 8005aa2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005aaa:	bf00      	nop
 8005aac:	3754      	adds	r7, #84	@ 0x54
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr

08005ab6 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005ab6:	b480      	push	{r7}
 8005ab8:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8005aba:	bf00      	nop
 8005abc:	46bd      	mov	sp, r7
 8005abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac2:	4770      	bx	lr

08005ac4 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af04      	add	r7, sp, #16
 8005aca:	4603      	mov	r3, r0
 8005acc:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005ace:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005ad2:	9302      	str	r3, [sp, #8]
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	9301      	str	r3, [sp, #4]
 8005ad8:	1dfb      	adds	r3, r7, #7
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	2301      	movs	r3, #1
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2178      	movs	r1, #120	@ 0x78
 8005ae2:	4803      	ldr	r0, [pc, #12]	@ (8005af0 <ssd1306_WriteCommand+0x2c>)
 8005ae4:	f7fd f994 	bl	8002e10 <HAL_I2C_Mem_Write>
}
 8005ae8:	bf00      	nop
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	20000244 	.word	0x20000244

08005af4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b086      	sub	sp, #24
 8005af8:	af04      	add	r7, sp, #16
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	b29b      	uxth	r3, r3
 8005b02:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005b06:	9202      	str	r2, [sp, #8]
 8005b08:	9301      	str	r3, [sp, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	2301      	movs	r3, #1
 8005b10:	2240      	movs	r2, #64	@ 0x40
 8005b12:	2178      	movs	r1, #120	@ 0x78
 8005b14:	4803      	ldr	r0, [pc, #12]	@ (8005b24 <ssd1306_WriteData+0x30>)
 8005b16:	f7fd f97b 	bl	8002e10 <HAL_I2C_Mem_Write>
}
 8005b1a:	bf00      	nop
 8005b1c:	3708      	adds	r7, #8
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	bd80      	pop	{r7, pc}
 8005b22:	bf00      	nop
 8005b24:	20000244 	.word	0x20000244

08005b28 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005b2c:	f7ff ffc3 	bl	8005ab6 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005b30:	2064      	movs	r0, #100	@ 0x64
 8005b32:	f7fc fe05 	bl	8002740 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005b36:	2000      	movs	r0, #0
 8005b38:	f000 ff7a 	bl	8006a30 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005b3c:	2020      	movs	r0, #32
 8005b3e:	f7ff ffc1 	bl	8005ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005b42:	2000      	movs	r0, #0
 8005b44:	f7ff ffbe 	bl	8005ac4 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005b48:	20b0      	movs	r0, #176	@ 0xb0
 8005b4a:	f7ff ffbb 	bl	8005ac4 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005b4e:	20c8      	movs	r0, #200	@ 0xc8
 8005b50:	f7ff ffb8 	bl	8005ac4 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005b54:	2000      	movs	r0, #0
 8005b56:	f7ff ffb5 	bl	8005ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005b5a:	2010      	movs	r0, #16
 8005b5c:	f7ff ffb2 	bl	8005ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005b60:	2040      	movs	r0, #64	@ 0x40
 8005b62:	f7ff ffaf 	bl	8005ac4 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8005b66:	20ff      	movs	r0, #255	@ 0xff
 8005b68:	f000 ff4f 	bl	8006a0a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005b6c:	20a1      	movs	r0, #161	@ 0xa1
 8005b6e:	f7ff ffa9 	bl	8005ac4 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005b72:	20a6      	movs	r0, #166	@ 0xa6
 8005b74:	f7ff ffa6 	bl	8005ac4 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005b78:	20a8      	movs	r0, #168	@ 0xa8
 8005b7a:	f7ff ffa3 	bl	8005ac4 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005b7e:	203f      	movs	r0, #63	@ 0x3f
 8005b80:	f7ff ffa0 	bl	8005ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005b84:	20a4      	movs	r0, #164	@ 0xa4
 8005b86:	f7ff ff9d 	bl	8005ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005b8a:	20d3      	movs	r0, #211	@ 0xd3
 8005b8c:	f7ff ff9a 	bl	8005ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005b90:	2000      	movs	r0, #0
 8005b92:	f7ff ff97 	bl	8005ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005b96:	20d5      	movs	r0, #213	@ 0xd5
 8005b98:	f7ff ff94 	bl	8005ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005b9c:	20f0      	movs	r0, #240	@ 0xf0
 8005b9e:	f7ff ff91 	bl	8005ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005ba2:	20d9      	movs	r0, #217	@ 0xd9
 8005ba4:	f7ff ff8e 	bl	8005ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005ba8:	2022      	movs	r0, #34	@ 0x22
 8005baa:	f7ff ff8b 	bl	8005ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005bae:	20da      	movs	r0, #218	@ 0xda
 8005bb0:	f7ff ff88 	bl	8005ac4 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005bb4:	2012      	movs	r0, #18
 8005bb6:	f7ff ff85 	bl	8005ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005bba:	20db      	movs	r0, #219	@ 0xdb
 8005bbc:	f7ff ff82 	bl	8005ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005bc0:	2020      	movs	r0, #32
 8005bc2:	f7ff ff7f 	bl	8005ac4 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005bc6:	208d      	movs	r0, #141	@ 0x8d
 8005bc8:	f7ff ff7c 	bl	8005ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005bcc:	2014      	movs	r0, #20
 8005bce:	f7ff ff79 	bl	8005ac4 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005bd2:	2001      	movs	r0, #1
 8005bd4:	f000 ff2c 	bl	8006a30 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005bd8:	2000      	movs	r0, #0
 8005bda:	f000 f80f 	bl	8005bfc <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005bde:	f000 f825 	bl	8005c2c <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005be2:	4b05      	ldr	r3, [pc, #20]	@ (8005bf8 <ssd1306_Init+0xd0>)
 8005be4:	2200      	movs	r2, #0
 8005be6:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005be8:	4b03      	ldr	r3, [pc, #12]	@ (8005bf8 <ssd1306_Init+0xd0>)
 8005bea:	2200      	movs	r2, #0
 8005bec:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005bee:	4b02      	ldr	r3, [pc, #8]	@ (8005bf8 <ssd1306_Init+0xd0>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	711a      	strb	r2, [r3, #4]
}
 8005bf4:	bf00      	nop
 8005bf6:	bd80      	pop	{r7, pc}
 8005bf8:	2000086c 	.word	0x2000086c

08005bfc <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8005bfc:	b580      	push	{r7, lr}
 8005bfe:	b082      	sub	sp, #8
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	4603      	mov	r3, r0
 8005c04:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8005c06:	79fb      	ldrb	r3, [r7, #7]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d101      	bne.n	8005c10 <ssd1306_Fill+0x14>
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	e000      	b.n	8005c12 <ssd1306_Fill+0x16>
 8005c10:	23ff      	movs	r3, #255	@ 0xff
 8005c12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c16:	4619      	mov	r1, r3
 8005c18:	4803      	ldr	r0, [pc, #12]	@ (8005c28 <ssd1306_Fill+0x2c>)
 8005c1a:	f003 f8ed 	bl	8008df8 <memset>
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	2000046c 	.word	0x2000046c

08005c2c <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005c32:	2300      	movs	r3, #0
 8005c34:	71fb      	strb	r3, [r7, #7]
 8005c36:	e016      	b.n	8005c66 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005c38:	79fb      	ldrb	r3, [r7, #7]
 8005c3a:	3b50      	subs	r3, #80	@ 0x50
 8005c3c:	b2db      	uxtb	r3, r3
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f7ff ff40 	bl	8005ac4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005c44:	2000      	movs	r0, #0
 8005c46:	f7ff ff3d 	bl	8005ac4 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005c4a:	2010      	movs	r0, #16
 8005c4c:	f7ff ff3a 	bl	8005ac4 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005c50:	79fb      	ldrb	r3, [r7, #7]
 8005c52:	01db      	lsls	r3, r3, #7
 8005c54:	4a08      	ldr	r2, [pc, #32]	@ (8005c78 <ssd1306_UpdateScreen+0x4c>)
 8005c56:	4413      	add	r3, r2
 8005c58:	2180      	movs	r1, #128	@ 0x80
 8005c5a:	4618      	mov	r0, r3
 8005c5c:	f7ff ff4a 	bl	8005af4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005c60:	79fb      	ldrb	r3, [r7, #7]
 8005c62:	3301      	adds	r3, #1
 8005c64:	71fb      	strb	r3, [r7, #7]
 8005c66:	79fb      	ldrb	r3, [r7, #7]
 8005c68:	2b07      	cmp	r3, #7
 8005c6a:	d9e5      	bls.n	8005c38 <ssd1306_UpdateScreen+0xc>
    }
}
 8005c6c:	bf00      	nop
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	2000046c 	.word	0x2000046c

08005c7c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	4603      	mov	r3, r0
 8005c84:	71fb      	strb	r3, [r7, #7]
 8005c86:	460b      	mov	r3, r1
 8005c88:	71bb      	strb	r3, [r7, #6]
 8005c8a:	4613      	mov	r3, r2
 8005c8c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005c8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	db3d      	blt.n	8005d12 <ssd1306_DrawPixel+0x96>
 8005c96:	79bb      	ldrb	r3, [r7, #6]
 8005c98:	2b3f      	cmp	r3, #63	@ 0x3f
 8005c9a:	d83a      	bhi.n	8005d12 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005c9c:	797b      	ldrb	r3, [r7, #5]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d11a      	bne.n	8005cd8 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005ca2:	79fa      	ldrb	r2, [r7, #7]
 8005ca4:	79bb      	ldrb	r3, [r7, #6]
 8005ca6:	08db      	lsrs	r3, r3, #3
 8005ca8:	b2d8      	uxtb	r0, r3
 8005caa:	4603      	mov	r3, r0
 8005cac:	01db      	lsls	r3, r3, #7
 8005cae:	4413      	add	r3, r2
 8005cb0:	4a1b      	ldr	r2, [pc, #108]	@ (8005d20 <ssd1306_DrawPixel+0xa4>)
 8005cb2:	5cd3      	ldrb	r3, [r2, r3]
 8005cb4:	b25a      	sxtb	r2, r3
 8005cb6:	79bb      	ldrb	r3, [r7, #6]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	2101      	movs	r1, #1
 8005cbe:	fa01 f303 	lsl.w	r3, r1, r3
 8005cc2:	b25b      	sxtb	r3, r3
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	b259      	sxtb	r1, r3
 8005cc8:	79fa      	ldrb	r2, [r7, #7]
 8005cca:	4603      	mov	r3, r0
 8005ccc:	01db      	lsls	r3, r3, #7
 8005cce:	4413      	add	r3, r2
 8005cd0:	b2c9      	uxtb	r1, r1
 8005cd2:	4a13      	ldr	r2, [pc, #76]	@ (8005d20 <ssd1306_DrawPixel+0xa4>)
 8005cd4:	54d1      	strb	r1, [r2, r3]
 8005cd6:	e01d      	b.n	8005d14 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005cd8:	79fa      	ldrb	r2, [r7, #7]
 8005cda:	79bb      	ldrb	r3, [r7, #6]
 8005cdc:	08db      	lsrs	r3, r3, #3
 8005cde:	b2d8      	uxtb	r0, r3
 8005ce0:	4603      	mov	r3, r0
 8005ce2:	01db      	lsls	r3, r3, #7
 8005ce4:	4413      	add	r3, r2
 8005ce6:	4a0e      	ldr	r2, [pc, #56]	@ (8005d20 <ssd1306_DrawPixel+0xa4>)
 8005ce8:	5cd3      	ldrb	r3, [r2, r3]
 8005cea:	b25a      	sxtb	r2, r3
 8005cec:	79bb      	ldrb	r3, [r7, #6]
 8005cee:	f003 0307 	and.w	r3, r3, #7
 8005cf2:	2101      	movs	r1, #1
 8005cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8005cf8:	b25b      	sxtb	r3, r3
 8005cfa:	43db      	mvns	r3, r3
 8005cfc:	b25b      	sxtb	r3, r3
 8005cfe:	4013      	ands	r3, r2
 8005d00:	b259      	sxtb	r1, r3
 8005d02:	79fa      	ldrb	r2, [r7, #7]
 8005d04:	4603      	mov	r3, r0
 8005d06:	01db      	lsls	r3, r3, #7
 8005d08:	4413      	add	r3, r2
 8005d0a:	b2c9      	uxtb	r1, r1
 8005d0c:	4a04      	ldr	r2, [pc, #16]	@ (8005d20 <ssd1306_DrawPixel+0xa4>)
 8005d0e:	54d1      	strb	r1, [r2, r3]
 8005d10:	e000      	b.n	8005d14 <ssd1306_DrawPixel+0x98>
        return;
 8005d12:	bf00      	nop
    }
}
 8005d14:	370c      	adds	r7, #12
 8005d16:	46bd      	mov	sp, r7
 8005d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop
 8005d20:	2000046c 	.word	0x2000046c

08005d24 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005d24:	b590      	push	{r4, r7, lr}
 8005d26:	b089      	sub	sp, #36	@ 0x24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	4604      	mov	r4, r0
 8005d2c:	4638      	mov	r0, r7
 8005d2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005d32:	4623      	mov	r3, r4
 8005d34:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005d36:	7bfb      	ldrb	r3, [r7, #15]
 8005d38:	2b1f      	cmp	r3, #31
 8005d3a:	d902      	bls.n	8005d42 <ssd1306_WriteChar+0x1e>
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	2b7e      	cmp	r3, #126	@ 0x7e
 8005d40:	d901      	bls.n	8005d46 <ssd1306_WriteChar+0x22>
        return 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	e079      	b.n	8005e3a <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8005d46:	68bb      	ldr	r3, [r7, #8]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d005      	beq.n	8005d58 <ssd1306_WriteChar+0x34>
 8005d4c:	68ba      	ldr	r2, [r7, #8]
 8005d4e:	7bfb      	ldrb	r3, [r7, #15]
 8005d50:	3b20      	subs	r3, #32
 8005d52:	4413      	add	r3, r2
 8005d54:	781b      	ldrb	r3, [r3, #0]
 8005d56:	e000      	b.n	8005d5a <ssd1306_WriteChar+0x36>
 8005d58:	783b      	ldrb	r3, [r7, #0]
 8005d5a:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8005d5c:	4b39      	ldr	r3, [pc, #228]	@ (8005e44 <ssd1306_WriteChar+0x120>)
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	7dfb      	ldrb	r3, [r7, #23]
 8005d64:	4413      	add	r3, r2
 8005d66:	2b80      	cmp	r3, #128	@ 0x80
 8005d68:	dc06      	bgt.n	8005d78 <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8005d6a:	4b36      	ldr	r3, [pc, #216]	@ (8005e44 <ssd1306_WriteChar+0x120>)
 8005d6c:	885b      	ldrh	r3, [r3, #2]
 8005d6e:	461a      	mov	r2, r3
 8005d70:	787b      	ldrb	r3, [r7, #1]
 8005d72:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8005d74:	2b40      	cmp	r3, #64	@ 0x40
 8005d76:	dd01      	ble.n	8005d7c <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	e05e      	b.n	8005e3a <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	61fb      	str	r3, [r7, #28]
 8005d80:	e04d      	b.n	8005e1e <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	3b20      	subs	r3, #32
 8005d88:	7879      	ldrb	r1, [r7, #1]
 8005d8a:	fb01 f303 	mul.w	r3, r1, r3
 8005d8e:	4619      	mov	r1, r3
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	440b      	add	r3, r1
 8005d94:	005b      	lsls	r3, r3, #1
 8005d96:	4413      	add	r3, r2
 8005d98:	881b      	ldrh	r3, [r3, #0]
 8005d9a:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	61bb      	str	r3, [r7, #24]
 8005da0:	e036      	b.n	8005e10 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8005da2:	693a      	ldr	r2, [r7, #16]
 8005da4:	69bb      	ldr	r3, [r7, #24]
 8005da6:	fa02 f303 	lsl.w	r3, r2, r3
 8005daa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d013      	beq.n	8005dda <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005db2:	4b24      	ldr	r3, [pc, #144]	@ (8005e44 <ssd1306_WriteChar+0x120>)
 8005db4:	881b      	ldrh	r3, [r3, #0]
 8005db6:	b2da      	uxtb	r2, r3
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	b2db      	uxtb	r3, r3
 8005dbc:	4413      	add	r3, r2
 8005dbe:	b2d8      	uxtb	r0, r3
 8005dc0:	4b20      	ldr	r3, [pc, #128]	@ (8005e44 <ssd1306_WriteChar+0x120>)
 8005dc2:	885b      	ldrh	r3, [r3, #2]
 8005dc4:	b2da      	uxtb	r2, r3
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	4413      	add	r3, r2
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	f7ff ff52 	bl	8005c7c <ssd1306_DrawPixel>
 8005dd8:	e017      	b.n	8005e0a <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005dda:	4b1a      	ldr	r3, [pc, #104]	@ (8005e44 <ssd1306_WriteChar+0x120>)
 8005ddc:	881b      	ldrh	r3, [r3, #0]
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	69bb      	ldr	r3, [r7, #24]
 8005de2:	b2db      	uxtb	r3, r3
 8005de4:	4413      	add	r3, r2
 8005de6:	b2d8      	uxtb	r0, r3
 8005de8:	4b16      	ldr	r3, [pc, #88]	@ (8005e44 <ssd1306_WriteChar+0x120>)
 8005dea:	885b      	ldrh	r3, [r3, #2]
 8005dec:	b2da      	uxtb	r2, r3
 8005dee:	69fb      	ldr	r3, [r7, #28]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	4413      	add	r3, r2
 8005df4:	b2d9      	uxtb	r1, r3
 8005df6:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	bf0c      	ite	eq
 8005dfe:	2301      	moveq	r3, #1
 8005e00:	2300      	movne	r3, #0
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	461a      	mov	r2, r3
 8005e06:	f7ff ff39 	bl	8005c7c <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 8005e0a:	69bb      	ldr	r3, [r7, #24]
 8005e0c:	3301      	adds	r3, #1
 8005e0e:	61bb      	str	r3, [r7, #24]
 8005e10:	7dfb      	ldrb	r3, [r7, #23]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	429a      	cmp	r2, r3
 8005e16:	d3c4      	bcc.n	8005da2 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	61fb      	str	r3, [r7, #28]
 8005e1e:	787b      	ldrb	r3, [r7, #1]
 8005e20:	461a      	mov	r2, r3
 8005e22:	69fb      	ldr	r3, [r7, #28]
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d3ac      	bcc.n	8005d82 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 8005e28:	4b06      	ldr	r3, [pc, #24]	@ (8005e44 <ssd1306_WriteChar+0x120>)
 8005e2a:	881a      	ldrh	r2, [r3, #0]
 8005e2c:	7dfb      	ldrb	r3, [r7, #23]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	4413      	add	r3, r2
 8005e32:	b29a      	uxth	r2, r3
 8005e34:	4b03      	ldr	r3, [pc, #12]	@ (8005e44 <ssd1306_WriteChar+0x120>)
 8005e36:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8005e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	3724      	adds	r7, #36	@ 0x24
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	bd90      	pop	{r4, r7, pc}
 8005e42:	bf00      	nop
 8005e44:	2000086c 	.word	0x2000086c

08005e48 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af02      	add	r7, sp, #8
 8005e4e:	60f8      	str	r0, [r7, #12]
 8005e50:	4638      	mov	r0, r7
 8005e52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8005e56:	e013      	b.n	8005e80 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	7818      	ldrb	r0, [r3, #0]
 8005e5c:	7e3b      	ldrb	r3, [r7, #24]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	463b      	mov	r3, r7
 8005e62:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e64:	f7ff ff5e 	bl	8005d24 <ssd1306_WriteChar>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	461a      	mov	r2, r3
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d002      	beq.n	8005e7a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	781b      	ldrb	r3, [r3, #0]
 8005e78:	e008      	b.n	8005e8c <ssd1306_WriteString+0x44>
        }
        str++;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	3301      	adds	r3, #1
 8005e7e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	781b      	ldrb	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d1e7      	bne.n	8005e58 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	781b      	ldrb	r3, [r3, #0]
}
 8005e8c:	4618      	mov	r0, r3
 8005e8e:	3710      	adds	r7, #16
 8005e90:	46bd      	mov	sp, r7
 8005e92:	bd80      	pop	{r7, pc}

08005e94 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	4603      	mov	r3, r0
 8005e9c:	460a      	mov	r2, r1
 8005e9e:	71fb      	strb	r3, [r7, #7]
 8005ea0:	4613      	mov	r3, r2
 8005ea2:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005ea4:	79fb      	ldrb	r3, [r7, #7]
 8005ea6:	b29a      	uxth	r2, r3
 8005ea8:	4b05      	ldr	r3, [pc, #20]	@ (8005ec0 <ssd1306_SetCursor+0x2c>)
 8005eaa:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8005eac:	79bb      	ldrb	r3, [r7, #6]
 8005eae:	b29a      	uxth	r2, r3
 8005eb0:	4b03      	ldr	r3, [pc, #12]	@ (8005ec0 <ssd1306_SetCursor+0x2c>)
 8005eb2:	805a      	strh	r2, [r3, #2]
}
 8005eb4:	bf00      	nop
 8005eb6:	370c      	adds	r7, #12
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	2000086c 	.word	0x2000086c

08005ec4 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8005ec4:	b590      	push	{r4, r7, lr}
 8005ec6:	b089      	sub	sp, #36	@ 0x24
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	4604      	mov	r4, r0
 8005ecc:	4608      	mov	r0, r1
 8005ece:	4611      	mov	r1, r2
 8005ed0:	461a      	mov	r2, r3
 8005ed2:	4623      	mov	r3, r4
 8005ed4:	71fb      	strb	r3, [r7, #7]
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	71bb      	strb	r3, [r7, #6]
 8005eda:	460b      	mov	r3, r1
 8005edc:	717b      	strb	r3, [r7, #5]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8005ee2:	797a      	ldrb	r2, [r7, #5]
 8005ee4:	79fb      	ldrb	r3, [r7, #7]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	bfb8      	it	lt
 8005eec:	425b      	neglt	r3, r3
 8005eee:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8005ef0:	793a      	ldrb	r2, [r7, #4]
 8005ef2:	79bb      	ldrb	r3, [r7, #6]
 8005ef4:	1ad3      	subs	r3, r2, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bfb8      	it	lt
 8005efa:	425b      	neglt	r3, r3
 8005efc:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8005efe:	79fa      	ldrb	r2, [r7, #7]
 8005f00:	797b      	ldrb	r3, [r7, #5]
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d201      	bcs.n	8005f0a <ssd1306_Line+0x46>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e001      	b.n	8005f0e <ssd1306_Line+0x4a>
 8005f0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f0e:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8005f10:	79ba      	ldrb	r2, [r7, #6]
 8005f12:	793b      	ldrb	r3, [r7, #4]
 8005f14:	429a      	cmp	r2, r3
 8005f16:	d201      	bcs.n	8005f1c <ssd1306_Line+0x58>
 8005f18:	2301      	movs	r3, #1
 8005f1a:	e001      	b.n	8005f20 <ssd1306_Line+0x5c>
 8005f1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005f20:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8005f22:	69ba      	ldr	r2, [r7, #24]
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	1ad3      	subs	r3, r2, r3
 8005f28:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8005f2a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005f2e:	7939      	ldrb	r1, [r7, #4]
 8005f30:	797b      	ldrb	r3, [r7, #5]
 8005f32:	4618      	mov	r0, r3
 8005f34:	f7ff fea2 	bl	8005c7c <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8005f38:	e024      	b.n	8005f84 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8005f3a:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005f3e:	79b9      	ldrb	r1, [r7, #6]
 8005f40:	79fb      	ldrb	r3, [r7, #7]
 8005f42:	4618      	mov	r0, r3
 8005f44:	f7ff fe9a 	bl	8005c7c <ssd1306_DrawPixel>
        error2 = error * 2;
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8005f4e:	697b      	ldr	r3, [r7, #20]
 8005f50:	425b      	negs	r3, r3
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	429a      	cmp	r2, r3
 8005f56:	dd08      	ble.n	8005f6a <ssd1306_Line+0xa6>
            error -= deltaY;
 8005f58:	69fa      	ldr	r2, [r7, #28]
 8005f5a:	697b      	ldr	r3, [r7, #20]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8005f60:	693b      	ldr	r3, [r7, #16]
 8005f62:	b2da      	uxtb	r2, r3
 8005f64:	79fb      	ldrb	r3, [r7, #7]
 8005f66:	4413      	add	r3, r2
 8005f68:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8005f6a:	68ba      	ldr	r2, [r7, #8]
 8005f6c:	69bb      	ldr	r3, [r7, #24]
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	da08      	bge.n	8005f84 <ssd1306_Line+0xc0>
            error += deltaX;
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	69bb      	ldr	r3, [r7, #24]
 8005f76:	4413      	add	r3, r2
 8005f78:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	79bb      	ldrb	r3, [r7, #6]
 8005f80:	4413      	add	r3, r2
 8005f82:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8005f84:	79fa      	ldrb	r2, [r7, #7]
 8005f86:	797b      	ldrb	r3, [r7, #5]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d1d6      	bne.n	8005f3a <ssd1306_Line+0x76>
 8005f8c:	79ba      	ldrb	r2, [r7, #6]
 8005f8e:	793b      	ldrb	r3, [r7, #4]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d1d2      	bne.n	8005f3a <ssd1306_Line+0x76>
        }
    }
    return;
 8005f94:	bf00      	nop
}
 8005f96:	3724      	adds	r7, #36	@ 0x24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd90      	pop	{r4, r7, pc}

08005f9c <ssd1306_Polyline>:

/* Draw polyline */
void ssd1306_Polyline(const SSD1306_VERTEX *par_vertex, uint16_t par_size, SSD1306_COLOR color) {
 8005f9c:	b590      	push	{r4, r7, lr}
 8005f9e:	b087      	sub	sp, #28
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	460b      	mov	r3, r1
 8005fa6:	807b      	strh	r3, [r7, #2]
 8005fa8:	4613      	mov	r3, r2
 8005faa:	707b      	strb	r3, [r7, #1]
    uint16_t i;
    if(par_vertex == NULL) {
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d02a      	beq.n	8006008 <ssd1306_Polyline+0x6c>
        return;
    }

    for(i = 1; i < par_size; i++) {
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	81fb      	strh	r3, [r7, #14]
 8005fb6:	e022      	b.n	8005ffe <ssd1306_Polyline+0x62>
        ssd1306_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 8005fb8:	89fb      	ldrh	r3, [r7, #14]
 8005fba:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	687a      	ldr	r2, [r7, #4]
 8005fc4:	4413      	add	r3, r2
 8005fc6:	7818      	ldrb	r0, [r3, #0]
 8005fc8:	89fb      	ldrh	r3, [r7, #14]
 8005fca:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	7859      	ldrb	r1, [r3, #1]
 8005fd8:	89fb      	ldrh	r3, [r7, #14]
 8005fda:	005b      	lsls	r3, r3, #1
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	4413      	add	r3, r2
 8005fe0:	781c      	ldrb	r4, [r3, #0]
 8005fe2:	89fb      	ldrh	r3, [r7, #14]
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4413      	add	r3, r2
 8005fea:	785a      	ldrb	r2, [r3, #1]
 8005fec:	787b      	ldrb	r3, [r7, #1]
 8005fee:	9300      	str	r3, [sp, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	4622      	mov	r2, r4
 8005ff4:	f7ff ff66 	bl	8005ec4 <ssd1306_Line>
    for(i = 1; i < par_size; i++) {
 8005ff8:	89fb      	ldrh	r3, [r7, #14]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	81fb      	strh	r3, [r7, #14]
 8005ffe:	89fa      	ldrh	r2, [r7, #14]
 8006000:	887b      	ldrh	r3, [r7, #2]
 8006002:	429a      	cmp	r2, r3
 8006004:	d3d8      	bcc.n	8005fb8 <ssd1306_Polyline+0x1c>
    }

    return;
 8006006:	e000      	b.n	800600a <ssd1306_Polyline+0x6e>
        return;
 8006008:	bf00      	nop
}
 800600a:	3714      	adds	r7, #20
 800600c:	46bd      	mov	sp, r7
 800600e:	bd90      	pop	{r4, r7, pc}

08006010 <ssd1306_DegToRad>:

/* Convert Degrees to Radians */
static float ssd1306_DegToRad(float par_deg) {
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * (3.14f / 180.0f);
 800601a:	edd7 7a01 	vldr	s15, [r7, #4]
 800601e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8006034 <ssd1306_DegToRad+0x24>
 8006022:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8006026:	eeb0 0a67 	vmov.f32	s0, s15
 800602a:	370c      	adds	r7, #12
 800602c:	46bd      	mov	sp, r7
 800602e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006032:	4770      	bx	lr
 8006034:	3c8ee7a7 	.word	0x3c8ee7a7

08006038 <ssd1306_NormalizeTo0_360>:

/* Normalize degree to [0;360] */
static uint16_t ssd1306_NormalizeTo0_360(uint16_t par_deg) {
 8006038:	b480      	push	{r7}
 800603a:	b085      	sub	sp, #20
 800603c:	af00      	add	r7, sp, #0
 800603e:	4603      	mov	r3, r0
 8006040:	80fb      	strh	r3, [r7, #6]
    uint16_t loc_angle;
    if(par_deg <= 360) {
 8006042:	88fb      	ldrh	r3, [r7, #6]
 8006044:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8006048:	d802      	bhi.n	8006050 <ssd1306_NormalizeTo0_360+0x18>
        loc_angle = par_deg;
 800604a:	88fb      	ldrh	r3, [r7, #6]
 800604c:	81fb      	strh	r3, [r7, #14]
 800604e:	e013      	b.n	8006078 <ssd1306_NormalizeTo0_360+0x40>
    } else {
        loc_angle = par_deg % 360;
 8006050:	88fb      	ldrh	r3, [r7, #6]
 8006052:	08da      	lsrs	r2, r3, #3
 8006054:	490c      	ldr	r1, [pc, #48]	@ (8006088 <ssd1306_NormalizeTo0_360+0x50>)
 8006056:	fba1 1202 	umull	r1, r2, r1, r2
 800605a:	0892      	lsrs	r2, r2, #2
 800605c:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8006060:	fb01 f202 	mul.w	r2, r1, r2
 8006064:	1a9b      	subs	r3, r3, r2
 8006066:	81fb      	strh	r3, [r7, #14]
        loc_angle = (loc_angle ? loc_angle : 360);
 8006068:	89fb      	ldrh	r3, [r7, #14]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d001      	beq.n	8006072 <ssd1306_NormalizeTo0_360+0x3a>
 800606e:	89fb      	ldrh	r3, [r7, #14]
 8006070:	e001      	b.n	8006076 <ssd1306_NormalizeTo0_360+0x3e>
 8006072:	f44f 73b4 	mov.w	r3, #360	@ 0x168
 8006076:	81fb      	strh	r3, [r7, #14]
    }
    return loc_angle;
 8006078:	89fb      	ldrh	r3, [r7, #14]
}
 800607a:	4618      	mov	r0, r3
 800607c:	3714      	adds	r7, #20
 800607e:	46bd      	mov	sp, r7
 8006080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006084:	4770      	bx	lr
 8006086:	bf00      	nop
 8006088:	16c16c17 	.word	0x16c16c17

0800608c <ssd1306_DrawArc>:
/*
 * DrawArc. Draw angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle in degree
 * sweep in degree
 */
void ssd1306_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 800608c:	b590      	push	{r4, r7, lr}
 800608e:	b08d      	sub	sp, #52	@ 0x34
 8006090:	af02      	add	r7, sp, #8
 8006092:	4604      	mov	r4, r0
 8006094:	4608      	mov	r0, r1
 8006096:	4611      	mov	r1, r2
 8006098:	461a      	mov	r2, r3
 800609a:	4623      	mov	r3, r4
 800609c:	73fb      	strb	r3, [r7, #15]
 800609e:	4603      	mov	r3, r0
 80060a0:	73bb      	strb	r3, [r7, #14]
 80060a2:	460b      	mov	r3, r1
 80060a4:	737b      	strb	r3, [r7, #13]
 80060a6:	4613      	mov	r3, r2
 80060a8:	817b      	strh	r3, [r7, #10]
    uint8_t yp1,yp2;
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 80060aa:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80060ac:	4618      	mov	r0, r3
 80060ae:	f7ff ffc3 	bl	8006038 <ssd1306_NormalizeTo0_360>
 80060b2:	4603      	mov	r3, r0
 80060b4:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80060b6:	897b      	ldrh	r3, [r7, #10]
 80060b8:	4618      	mov	r0, r3
 80060ba:	f7ff ffbd 	bl	8006038 <ssd1306_NormalizeTo0_360>
 80060be:	4603      	mov	r3, r0
 80060c0:	461a      	mov	r2, r3
 80060c2:	4b63      	ldr	r3, [pc, #396]	@ (8006250 <ssd1306_DrawArc+0x1c4>)
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	4a62      	ldr	r2, [pc, #392]	@ (8006254 <ssd1306_DrawArc+0x1c8>)
 80060cc:	fb82 1203 	smull	r1, r2, r2, r3
 80060d0:	441a      	add	r2, r3
 80060d2:	1212      	asrs	r2, r2, #8
 80060d4:	17db      	asrs	r3, r3, #31
 80060d6:	1ad3      	subs	r3, r2, r3
 80060d8:	627b      	str	r3, [r7, #36]	@ 0x24
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80060da:	4b5d      	ldr	r3, [pc, #372]	@ (8006250 <ssd1306_DrawArc+0x1c4>)
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	461a      	mov	r2, r3
 80060e0:	69fb      	ldr	r3, [r7, #28]
 80060e2:	fb02 f303 	mul.w	r3, r2, r3
 80060e6:	08db      	lsrs	r3, r3, #3
 80060e8:	4a5b      	ldr	r2, [pc, #364]	@ (8006258 <ssd1306_DrawArc+0x1cc>)
 80060ea:	fba2 2303 	umull	r2, r3, r2, r3
 80060ee:	089b      	lsrs	r3, r3, #2
 80060f0:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 80060f2:	69fb      	ldr	r3, [r7, #28]
 80060f4:	ee07 3a90 	vmov	s15, r3
 80060f8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060fc:	69bb      	ldr	r3, [r7, #24]
 80060fe:	ee07 3a90 	vmov	s15, r3
 8006102:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006106:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800610a:	edc7 7a05 	vstr	s15, [r7, #20]
    while(count < approx_segments)
 800610e:	e096      	b.n	800623e <ssd1306_DrawArc+0x1b2>
    {
        rad = ssd1306_DegToRad(count*approx_degree);
 8006110:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800611a:	edd7 7a05 	vldr	s15, [r7, #20]
 800611e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006122:	eeb0 0a67 	vmov.f32	s0, s15
 8006126:	f7ff ff73 	bl	8006010 <ssd1306_DegToRad>
 800612a:	ed87 0a08 	vstr	s0, [r7, #32]
        xp1 = x + (int8_t)(sinf(rad)*radius);
 800612e:	ed97 0a08 	vldr	s0, [r7, #32]
 8006132:	f005 fc0d 	bl	800b950 <sinf>
 8006136:	eeb0 7a40 	vmov.f32	s14, s0
 800613a:	7b7b      	ldrb	r3, [r7, #13]
 800613c:	ee07 3a90 	vmov	s15, r3
 8006140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006144:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800614c:	edc7 7a01 	vstr	s15, [r7, #4]
 8006150:	793b      	ldrb	r3, [r7, #4]
 8006152:	b25b      	sxtb	r3, r3
 8006154:	b2da      	uxtb	r2, r3
 8006156:	7bfb      	ldrb	r3, [r7, #15]
 8006158:	4413      	add	r3, r2
 800615a:	74fb      	strb	r3, [r7, #19]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 800615c:	ed97 0a08 	vldr	s0, [r7, #32]
 8006160:	f005 fbb2 	bl	800b8c8 <cosf>
 8006164:	eeb0 7a40 	vmov.f32	s14, s0
 8006168:	7b7b      	ldrb	r3, [r7, #13]
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006176:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800617a:	edc7 7a01 	vstr	s15, [r7, #4]
 800617e:	793b      	ldrb	r3, [r7, #4]
 8006180:	b25b      	sxtb	r3, r3
 8006182:	b2da      	uxtb	r2, r3
 8006184:	7bbb      	ldrb	r3, [r7, #14]
 8006186:	4413      	add	r3, r2
 8006188:	74bb      	strb	r3, [r7, #18]
        count++;
 800618a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800618c:	3301      	adds	r3, #1
 800618e:	627b      	str	r3, [r7, #36]	@ 0x24
        if(count != approx_segments) {
 8006190:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006192:	69bb      	ldr	r3, [r7, #24]
 8006194:	429a      	cmp	r2, r3
 8006196:	d00f      	beq.n	80061b8 <ssd1306_DrawArc+0x12c>
            rad = ssd1306_DegToRad(count*approx_degree);
 8006198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800619a:	ee07 3a90 	vmov	s15, r3
 800619e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80061a2:	edd7 7a05 	vldr	s15, [r7, #20]
 80061a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061aa:	eeb0 0a67 	vmov.f32	s0, s15
 80061ae:	f7ff ff2f 	bl	8006010 <ssd1306_DegToRad>
 80061b2:	ed87 0a08 	vstr	s0, [r7, #32]
 80061b6:	e00a      	b.n	80061ce <ssd1306_DrawArc+0x142>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	ee07 3a90 	vmov	s15, r3
 80061be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061c2:	eeb0 0a67 	vmov.f32	s0, s15
 80061c6:	f7ff ff23 	bl	8006010 <ssd1306_DegToRad>
 80061ca:	ed87 0a08 	vstr	s0, [r7, #32]
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 80061ce:	ed97 0a08 	vldr	s0, [r7, #32]
 80061d2:	f005 fbbd 	bl	800b950 <sinf>
 80061d6:	eeb0 7a40 	vmov.f32	s14, s0
 80061da:	7b7b      	ldrb	r3, [r7, #13]
 80061dc:	ee07 3a90 	vmov	s15, r3
 80061e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80061e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80061ec:	edc7 7a01 	vstr	s15, [r7, #4]
 80061f0:	793b      	ldrb	r3, [r7, #4]
 80061f2:	b25b      	sxtb	r3, r3
 80061f4:	b2da      	uxtb	r2, r3
 80061f6:	7bfb      	ldrb	r3, [r7, #15]
 80061f8:	4413      	add	r3, r2
 80061fa:	747b      	strb	r3, [r7, #17]
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 80061fc:	ed97 0a08 	vldr	s0, [r7, #32]
 8006200:	f005 fb62 	bl	800b8c8 <cosf>
 8006204:	eeb0 7a40 	vmov.f32	s14, s0
 8006208:	7b7b      	ldrb	r3, [r7, #13]
 800620a:	ee07 3a90 	vmov	s15, r3
 800620e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006212:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006216:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800621a:	edc7 7a01 	vstr	s15, [r7, #4]
 800621e:	793b      	ldrb	r3, [r7, #4]
 8006220:	b25b      	sxtb	r3, r3
 8006222:	b2da      	uxtb	r2, r3
 8006224:	7bbb      	ldrb	r3, [r7, #14]
 8006226:	4413      	add	r3, r2
 8006228:	743b      	strb	r3, [r7, #16]
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 800622a:	7c3c      	ldrb	r4, [r7, #16]
 800622c:	7c7a      	ldrb	r2, [r7, #17]
 800622e:	7cb9      	ldrb	r1, [r7, #18]
 8006230:	7cf8      	ldrb	r0, [r7, #19]
 8006232:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8006236:	9300      	str	r3, [sp, #0]
 8006238:	4623      	mov	r3, r4
 800623a:	f7ff fe43 	bl	8005ec4 <ssd1306_Line>
    while(count < approx_segments)
 800623e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	429a      	cmp	r2, r3
 8006244:	f4ff af64 	bcc.w	8006110 <ssd1306_DrawArc+0x84>
    }
    
    return;
 8006248:	bf00      	nop
}
 800624a:	372c      	adds	r7, #44	@ 0x2c
 800624c:	46bd      	mov	sp, r7
 800624e:	bd90      	pop	{r4, r7, pc}
 8006250:	0800c58c 	.word	0x0800c58c
 8006254:	b60b60b7 	.word	0xb60b60b7
 8006258:	16c16c17 	.word	0x16c16c17

0800625c <ssd1306_DrawArcWithRadiusLine>:
 * Draw arc with radius line
 * Angle is beginning from 4 quart of trigonometric circle (3pi/2)
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 */
void ssd1306_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, SSD1306_COLOR color) {
 800625c:	b590      	push	{r4, r7, lr}
 800625e:	b08f      	sub	sp, #60	@ 0x3c
 8006260:	af02      	add	r7, sp, #8
 8006262:	4604      	mov	r4, r0
 8006264:	4608      	mov	r0, r1
 8006266:	4611      	mov	r1, r2
 8006268:	461a      	mov	r2, r3
 800626a:	4623      	mov	r3, r4
 800626c:	73fb      	strb	r3, [r7, #15]
 800626e:	4603      	mov	r3, r0
 8006270:	73bb      	strb	r3, [r7, #14]
 8006272:	460b      	mov	r3, r1
 8006274:	737b      	strb	r3, [r7, #13]
 8006276:	4613      	mov	r3, r2
 8006278:	817b      	strh	r3, [r7, #10]
    const uint32_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
 800627a:	2324      	movs	r3, #36	@ 0x24
 800627c:	623b      	str	r3, [r7, #32]
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1;
    uint8_t xp2 = 0;
 800627e:	2300      	movs	r3, #0
 8006280:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t yp1;
    uint8_t yp2 = 0;
 8006284:	2300      	movs	r3, #0
 8006286:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    uint32_t count;
    uint32_t loc_sweep;
    float rad;
    
    loc_sweep = ssd1306_NormalizeTo0_360(sweep);
 800628a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff fed2 	bl	8006038 <ssd1306_NormalizeTo0_360>
 8006294:	4603      	mov	r3, r0
 8006296:	61fb      	str	r3, [r7, #28]
    
    count = (ssd1306_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8006298:	897b      	ldrh	r3, [r7, #10]
 800629a:	4618      	mov	r0, r3
 800629c:	f7ff fecc 	bl	8006038 <ssd1306_NormalizeTo0_360>
 80062a0:	4603      	mov	r3, r0
 80062a2:	461a      	mov	r2, r3
 80062a4:	6a3b      	ldr	r3, [r7, #32]
 80062a6:	fb02 f303 	mul.w	r3, r2, r3
 80062aa:	08db      	lsrs	r3, r3, #3
 80062ac:	4a8a      	ldr	r2, [pc, #552]	@ (80064d8 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 80062ae:	fba2 2303 	umull	r2, r3, r2, r3
 80062b2:	089b      	lsrs	r3, r3, #2
 80062b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80062b6:	69fb      	ldr	r3, [r7, #28]
 80062b8:	6a3a      	ldr	r2, [r7, #32]
 80062ba:	fb02 f303 	mul.w	r3, r2, r3
 80062be:	08db      	lsrs	r3, r3, #3
 80062c0:	4a85      	ldr	r2, [pc, #532]	@ (80064d8 <ssd1306_DrawArcWithRadiusLine+0x27c>)
 80062c2:	fba2 2303 	umull	r2, r3, r2, r3
 80062c6:	089b      	lsrs	r3, r3, #2
 80062c8:	61bb      	str	r3, [r7, #24]
    approx_degree = loc_sweep / (float)approx_segments;
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	ee07 3a90 	vmov	s15, r3
 80062d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062d4:	69bb      	ldr	r3, [r7, #24]
 80062d6:	ee07 3a90 	vmov	s15, r3
 80062da:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80062e2:	edc7 7a05 	vstr	s15, [r7, #20]

    rad = ssd1306_DegToRad(count*approx_degree);
 80062e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062e8:	ee07 3a90 	vmov	s15, r3
 80062ec:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80062f0:	edd7 7a05 	vldr	s15, [r7, #20]
 80062f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062f8:	eeb0 0a67 	vmov.f32	s0, s15
 80062fc:	f7ff fe88 	bl	8006010 <ssd1306_DegToRad>
 8006300:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
    uint8_t first_point_x = x + (int8_t)(sinf(rad)*radius);
 8006304:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8006308:	f005 fb22 	bl	800b950 <sinf>
 800630c:	eeb0 7a40 	vmov.f32	s14, s0
 8006310:	7b7b      	ldrb	r3, [r7, #13]
 8006312:	ee07 3a90 	vmov	s15, r3
 8006316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800631a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800631e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006322:	edc7 7a01 	vstr	s15, [r7, #4]
 8006326:	793b      	ldrb	r3, [r7, #4]
 8006328:	b25b      	sxtb	r3, r3
 800632a:	b2da      	uxtb	r2, r3
 800632c:	7bfb      	ldrb	r3, [r7, #15]
 800632e:	4413      	add	r3, r2
 8006330:	74fb      	strb	r3, [r7, #19]
    uint8_t first_point_y = y + (int8_t)(cosf(rad)*radius);   
 8006332:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8006336:	f005 fac7 	bl	800b8c8 <cosf>
 800633a:	eeb0 7a40 	vmov.f32	s14, s0
 800633e:	7b7b      	ldrb	r3, [r7, #13]
 8006340:	ee07 3a90 	vmov	s15, r3
 8006344:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800634c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006350:	edc7 7a01 	vstr	s15, [r7, #4]
 8006354:	793b      	ldrb	r3, [r7, #4]
 8006356:	b25b      	sxtb	r3, r3
 8006358:	b2da      	uxtb	r2, r3
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	4413      	add	r3, r2
 800635e:	74bb      	strb	r3, [r7, #18]
    while (count < approx_segments) {
 8006360:	e09a      	b.n	8006498 <ssd1306_DrawArcWithRadiusLine+0x23c>
        rad = ssd1306_DegToRad(count*approx_degree);
 8006362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006364:	ee07 3a90 	vmov	s15, r3
 8006368:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800636c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006374:	eeb0 0a67 	vmov.f32	s0, s15
 8006378:	f7ff fe4a 	bl	8006010 <ssd1306_DegToRad>
 800637c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        xp1 = x + (int8_t)(sinf(rad)*radius);
 8006380:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8006384:	f005 fae4 	bl	800b950 <sinf>
 8006388:	eeb0 7a40 	vmov.f32	s14, s0
 800638c:	7b7b      	ldrb	r3, [r7, #13]
 800638e:	ee07 3a90 	vmov	s15, r3
 8006392:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800639e:	edc7 7a01 	vstr	s15, [r7, #4]
 80063a2:	793b      	ldrb	r3, [r7, #4]
 80063a4:	b25b      	sxtb	r3, r3
 80063a6:	b2da      	uxtb	r2, r3
 80063a8:	7bfb      	ldrb	r3, [r7, #15]
 80063aa:	4413      	add	r3, r2
 80063ac:	747b      	strb	r3, [r7, #17]
        yp1 = y + (int8_t)(cosf(rad)*radius);    
 80063ae:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 80063b2:	f005 fa89 	bl	800b8c8 <cosf>
 80063b6:	eeb0 7a40 	vmov.f32	s14, s0
 80063ba:	7b7b      	ldrb	r3, [r7, #13]
 80063bc:	ee07 3a90 	vmov	s15, r3
 80063c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80063c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80063d0:	793b      	ldrb	r3, [r7, #4]
 80063d2:	b25b      	sxtb	r3, r3
 80063d4:	b2da      	uxtb	r2, r3
 80063d6:	7bbb      	ldrb	r3, [r7, #14]
 80063d8:	4413      	add	r3, r2
 80063da:	743b      	strb	r3, [r7, #16]
        count++;
 80063dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063de:	3301      	adds	r3, #1
 80063e0:	62bb      	str	r3, [r7, #40]	@ 0x28
        if (count != approx_segments) {
 80063e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d00f      	beq.n	800640a <ssd1306_DrawArcWithRadiusLine+0x1ae>
            rad = ssd1306_DegToRad(count*approx_degree);
 80063ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ec:	ee07 3a90 	vmov	s15, r3
 80063f0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80063f4:	edd7 7a05 	vldr	s15, [r7, #20]
 80063f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063fc:	eeb0 0a67 	vmov.f32	s0, s15
 8006400:	f7ff fe06 	bl	8006010 <ssd1306_DegToRad>
 8006404:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 8006408:	e00a      	b.n	8006420 <ssd1306_DrawArcWithRadiusLine+0x1c4>
        } else {
            rad = ssd1306_DegToRad(loc_sweep);
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	ee07 3a90 	vmov	s15, r3
 8006410:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006414:	eeb0 0a67 	vmov.f32	s0, s15
 8006418:	f7ff fdfa 	bl	8006010 <ssd1306_DegToRad>
 800641c:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
        }
        xp2 = x + (int8_t)(sinf(rad)*radius);
 8006420:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8006424:	f005 fa94 	bl	800b950 <sinf>
 8006428:	eeb0 7a40 	vmov.f32	s14, s0
 800642c:	7b7b      	ldrb	r3, [r7, #13]
 800642e:	ee07 3a90 	vmov	s15, r3
 8006432:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006436:	ee67 7a27 	vmul.f32	s15, s14, s15
 800643a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800643e:	edc7 7a01 	vstr	s15, [r7, #4]
 8006442:	793b      	ldrb	r3, [r7, #4]
 8006444:	b25b      	sxtb	r3, r3
 8006446:	b2da      	uxtb	r2, r3
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	4413      	add	r3, r2
 800644c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        yp2 = y + (int8_t)(cosf(rad)*radius);    
 8006450:	ed97 0a09 	vldr	s0, [r7, #36]	@ 0x24
 8006454:	f005 fa38 	bl	800b8c8 <cosf>
 8006458:	eeb0 7a40 	vmov.f32	s14, s0
 800645c:	7b7b      	ldrb	r3, [r7, #13]
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800646e:	edc7 7a01 	vstr	s15, [r7, #4]
 8006472:	793b      	ldrb	r3, [r7, #4]
 8006474:	b25b      	sxtb	r3, r3
 8006476:	b2da      	uxtb	r2, r3
 8006478:	7bbb      	ldrb	r3, [r7, #14]
 800647a:	4413      	add	r3, r2
 800647c:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
        ssd1306_Line(xp1,yp1,xp2,yp2,color);
 8006480:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 8006484:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8006488:	7c39      	ldrb	r1, [r7, #16]
 800648a:	7c78      	ldrb	r0, [r7, #17]
 800648c:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8006490:	9300      	str	r3, [sp, #0]
 8006492:	4623      	mov	r3, r4
 8006494:	f7ff fd16 	bl	8005ec4 <ssd1306_Line>
    while (count < approx_segments) {
 8006498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	429a      	cmp	r2, r3
 800649e:	f4ff af60 	bcc.w	8006362 <ssd1306_DrawArcWithRadiusLine+0x106>
    }
    
    // Radius line
    ssd1306_Line(x,y,first_point_x,first_point_y,color);
 80064a2:	7cbc      	ldrb	r4, [r7, #18]
 80064a4:	7cfa      	ldrb	r2, [r7, #19]
 80064a6:	7bb9      	ldrb	r1, [r7, #14]
 80064a8:	7bf8      	ldrb	r0, [r7, #15]
 80064aa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	4623      	mov	r3, r4
 80064b2:	f7ff fd07 	bl	8005ec4 <ssd1306_Line>
    ssd1306_Line(x,y,xp2,yp2,color);
 80064b6:	f897 402e 	ldrb.w	r4, [r7, #46]	@ 0x2e
 80064ba:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80064be:	7bb9      	ldrb	r1, [r7, #14]
 80064c0:	7bf8      	ldrb	r0, [r7, #15]
 80064c2:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 80064c6:	9300      	str	r3, [sp, #0]
 80064c8:	4623      	mov	r3, r4
 80064ca:	f7ff fcfb 	bl	8005ec4 <ssd1306_Line>
    return;
 80064ce:	bf00      	nop
}
 80064d0:	3734      	adds	r7, #52	@ 0x34
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd90      	pop	{r4, r7, pc}
 80064d6:	bf00      	nop
 80064d8:	16c16c17 	.word	0x16c16c17

080064dc <ssd1306_DrawCircle>:

/* Draw circle by Bresenhem's algorithm */
void ssd1306_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80064dc:	b590      	push	{r4, r7, lr}
 80064de:	b087      	sub	sp, #28
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	4604      	mov	r4, r0
 80064e4:	4608      	mov	r0, r1
 80064e6:	4611      	mov	r1, r2
 80064e8:	461a      	mov	r2, r3
 80064ea:	4623      	mov	r3, r4
 80064ec:	71fb      	strb	r3, [r7, #7]
 80064ee:	4603      	mov	r3, r0
 80064f0:	71bb      	strb	r3, [r7, #6]
 80064f2:	460b      	mov	r3, r1
 80064f4:	717b      	strb	r3, [r7, #5]
 80064f6:	4613      	mov	r3, r2
 80064f8:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 80064fa:	797b      	ldrb	r3, [r7, #5]
 80064fc:	425b      	negs	r3, r3
 80064fe:	617b      	str	r3, [r7, #20]
    int32_t y = 0;
 8006500:	2300      	movs	r3, #0
 8006502:	613b      	str	r3, [r7, #16]
    int32_t err = 2 - 2 * par_r;
 8006504:	797b      	ldrb	r3, [r7, #5]
 8006506:	f1c3 0301 	rsb	r3, r3, #1
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	60fb      	str	r3, [r7, #12]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800650e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006512:	2b00      	cmp	r3, #0
 8006514:	db65      	blt.n	80065e2 <ssd1306_DrawCircle+0x106>
 8006516:	79bb      	ldrb	r3, [r7, #6]
 8006518:	2b3f      	cmp	r3, #63	@ 0x3f
 800651a:	d862      	bhi.n	80065e2 <ssd1306_DrawCircle+0x106>
        return;
    }

    do {
        ssd1306_DrawPixel(par_x - x, par_y + y, par_color);
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	b2db      	uxtb	r3, r3
 8006520:	79fa      	ldrb	r2, [r7, #7]
 8006522:	1ad3      	subs	r3, r2, r3
 8006524:	b2d8      	uxtb	r0, r3
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	b2da      	uxtb	r2, r3
 800652a:	79bb      	ldrb	r3, [r7, #6]
 800652c:	4413      	add	r3, r2
 800652e:	b2db      	uxtb	r3, r3
 8006530:	793a      	ldrb	r2, [r7, #4]
 8006532:	4619      	mov	r1, r3
 8006534:	f7ff fba2 	bl	8005c7c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y + y, par_color);
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	79fb      	ldrb	r3, [r7, #7]
 800653e:	4413      	add	r3, r2
 8006540:	b2d8      	uxtb	r0, r3
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	b2da      	uxtb	r2, r3
 8006546:	79bb      	ldrb	r3, [r7, #6]
 8006548:	4413      	add	r3, r2
 800654a:	b2db      	uxtb	r3, r3
 800654c:	793a      	ldrb	r2, [r7, #4]
 800654e:	4619      	mov	r1, r3
 8006550:	f7ff fb94 	bl	8005c7c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x + x, par_y - y, par_color);
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	b2da      	uxtb	r2, r3
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	4413      	add	r3, r2
 800655c:	b2d8      	uxtb	r0, r3
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	b2db      	uxtb	r3, r3
 8006562:	79ba      	ldrb	r2, [r7, #6]
 8006564:	1ad3      	subs	r3, r2, r3
 8006566:	b2db      	uxtb	r3, r3
 8006568:	793a      	ldrb	r2, [r7, #4]
 800656a:	4619      	mov	r1, r3
 800656c:	f7ff fb86 	bl	8005c7c <ssd1306_DrawPixel>
        ssd1306_DrawPixel(par_x - x, par_y - y, par_color);
 8006570:	697b      	ldr	r3, [r7, #20]
 8006572:	b2db      	uxtb	r3, r3
 8006574:	79fa      	ldrb	r2, [r7, #7]
 8006576:	1ad3      	subs	r3, r2, r3
 8006578:	b2d8      	uxtb	r0, r3
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	b2db      	uxtb	r3, r3
 800657e:	79ba      	ldrb	r2, [r7, #6]
 8006580:	1ad3      	subs	r3, r2, r3
 8006582:	b2db      	uxtb	r3, r3
 8006584:	793a      	ldrb	r2, [r7, #4]
 8006586:	4619      	mov	r1, r3
 8006588:	f7ff fb78 	bl	8005c7c <ssd1306_DrawPixel>
        e2 = err;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	60bb      	str	r3, [r7, #8]

        if (e2 <= y) {
 8006590:	68ba      	ldr	r2, [r7, #8]
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	429a      	cmp	r2, r3
 8006596:	dc13      	bgt.n	80065c0 <ssd1306_DrawCircle+0xe4>
            y++;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	3301      	adds	r3, #1
 800659c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	005b      	lsls	r3, r3, #1
 80065a2:	3301      	adds	r3, #1
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	4413      	add	r3, r2
 80065a8:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	425b      	negs	r3, r3
 80065ae:	693a      	ldr	r2, [r7, #16]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d105      	bne.n	80065c0 <ssd1306_DrawCircle+0xe4>
 80065b4:	68ba      	ldr	r2, [r7, #8]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	dc01      	bgt.n	80065c0 <ssd1306_DrawCircle+0xe4>
                e2 = 0;
 80065bc:	2300      	movs	r3, #0
 80065be:	60bb      	str	r3, [r7, #8]
            }
        }

        if (e2 > x) {
 80065c0:	68ba      	ldr	r2, [r7, #8]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	dd08      	ble.n	80065da <ssd1306_DrawCircle+0xfe>
            x++;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	3301      	adds	r3, #1
 80065cc:	617b      	str	r3, [r7, #20]
            err = err + (x * 2 + 1);
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	005b      	lsls	r3, r3, #1
 80065d2:	3301      	adds	r3, #1
 80065d4:	68fa      	ldr	r2, [r7, #12]
 80065d6:	4413      	add	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]
        }
    } while (x <= 0);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	dd9d      	ble.n	800651c <ssd1306_DrawCircle+0x40>

    return;
 80065e0:	e000      	b.n	80065e4 <ssd1306_DrawCircle+0x108>
        return;
 80065e2:	bf00      	nop
}
 80065e4:	371c      	adds	r7, #28
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd90      	pop	{r4, r7, pc}

080065ea <ssd1306_FillCircle>:

/* Draw filled circle. Pixel positions calculated using Bresenham's algorithm */
void ssd1306_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,SSD1306_COLOR par_color) {
 80065ea:	b590      	push	{r4, r7, lr}
 80065ec:	b089      	sub	sp, #36	@ 0x24
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	4604      	mov	r4, r0
 80065f2:	4608      	mov	r0, r1
 80065f4:	4611      	mov	r1, r2
 80065f6:	461a      	mov	r2, r3
 80065f8:	4623      	mov	r3, r4
 80065fa:	71fb      	strb	r3, [r7, #7]
 80065fc:	4603      	mov	r3, r0
 80065fe:	71bb      	strb	r3, [r7, #6]
 8006600:	460b      	mov	r3, r1
 8006602:	717b      	strb	r3, [r7, #5]
 8006604:	4613      	mov	r3, r2
 8006606:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8006608:	797b      	ldrb	r3, [r7, #5]
 800660a:	425b      	negs	r3, r3
 800660c:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 800660e:	2300      	movs	r3, #0
 8006610:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8006612:	797b      	ldrb	r3, [r7, #5]
 8006614:	f1c3 0301 	rsb	r3, r3, #1
 8006618:	005b      	lsls	r3, r3, #1
 800661a:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= SSD1306_WIDTH || par_y >= SSD1306_HEIGHT) {
 800661c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006620:	2b00      	cmp	r3, #0
 8006622:	db51      	blt.n	80066c8 <ssd1306_FillCircle+0xde>
 8006624:	79bb      	ldrb	r3, [r7, #6]
 8006626:	2b3f      	cmp	r3, #63	@ 0x3f
 8006628:	d84e      	bhi.n	80066c8 <ssd1306_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 800662a:	69bb      	ldr	r3, [r7, #24]
 800662c:	b2da      	uxtb	r2, r3
 800662e:	79bb      	ldrb	r3, [r7, #6]
 8006630:	4413      	add	r3, r2
 8006632:	73fb      	strb	r3, [r7, #15]
 8006634:	e017      	b.n	8006666 <ssd1306_FillCircle+0x7c>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 8006636:	69fb      	ldr	r3, [r7, #28]
 8006638:	b2db      	uxtb	r3, r3
 800663a:	79fa      	ldrb	r2, [r7, #7]
 800663c:	1ad3      	subs	r3, r2, r3
 800663e:	73bb      	strb	r3, [r7, #14]
 8006640:	e008      	b.n	8006654 <ssd1306_FillCircle+0x6a>
                ssd1306_DrawPixel(_x, _y, par_color);
 8006642:	793a      	ldrb	r2, [r7, #4]
 8006644:	7bf9      	ldrb	r1, [r7, #15]
 8006646:	7bbb      	ldrb	r3, [r7, #14]
 8006648:	4618      	mov	r0, r3
 800664a:	f7ff fb17 	bl	8005c7c <ssd1306_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--) {
 800664e:	7bbb      	ldrb	r3, [r7, #14]
 8006650:	3b01      	subs	r3, #1
 8006652:	73bb      	strb	r3, [r7, #14]
 8006654:	7bba      	ldrb	r2, [r7, #14]
 8006656:	79f9      	ldrb	r1, [r7, #7]
 8006658:	69fb      	ldr	r3, [r7, #28]
 800665a:	440b      	add	r3, r1
 800665c:	429a      	cmp	r2, r3
 800665e:	daf0      	bge.n	8006642 <ssd1306_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--) {
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	3b01      	subs	r3, #1
 8006664:	73fb      	strb	r3, [r7, #15]
 8006666:	7bfa      	ldrb	r2, [r7, #15]
 8006668:	79b9      	ldrb	r1, [r7, #6]
 800666a:	69bb      	ldr	r3, [r7, #24]
 800666c:	1acb      	subs	r3, r1, r3
 800666e:	429a      	cmp	r2, r3
 8006670:	dae1      	bge.n	8006636 <ssd1306_FillCircle+0x4c>
            }
        }

        e2 = err;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8006676:	693a      	ldr	r2, [r7, #16]
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	429a      	cmp	r2, r3
 800667c:	dc13      	bgt.n	80066a6 <ssd1306_FillCircle+0xbc>
            y++;
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	3301      	adds	r3, #1
 8006682:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	005b      	lsls	r3, r3, #1
 8006688:	3301      	adds	r3, #1
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	4413      	add	r3, r2
 800668e:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8006690:	69fb      	ldr	r3, [r7, #28]
 8006692:	425b      	negs	r3, r3
 8006694:	69ba      	ldr	r2, [r7, #24]
 8006696:	429a      	cmp	r2, r3
 8006698:	d105      	bne.n	80066a6 <ssd1306_FillCircle+0xbc>
 800669a:	693a      	ldr	r2, [r7, #16]
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	429a      	cmp	r2, r3
 80066a0:	dc01      	bgt.n	80066a6 <ssd1306_FillCircle+0xbc>
                e2 = 0;
 80066a2:	2300      	movs	r3, #0
 80066a4:	613b      	str	r3, [r7, #16]
            }
        }

        if (e2 > x) {
 80066a6:	693a      	ldr	r2, [r7, #16]
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	dd08      	ble.n	80066c0 <ssd1306_FillCircle+0xd6>
            x++;
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	3301      	adds	r3, #1
 80066b2:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 80066b4:	69fb      	ldr	r3, [r7, #28]
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	3301      	adds	r3, #1
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	4413      	add	r3, r2
 80066be:	617b      	str	r3, [r7, #20]
        }
    } while (x <= 0);
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	ddb1      	ble.n	800662a <ssd1306_FillCircle+0x40>

    return;
 80066c6:	e000      	b.n	80066ca <ssd1306_FillCircle+0xe0>
        return;
 80066c8:	bf00      	nop
}
 80066ca:	3724      	adds	r7, #36	@ 0x24
 80066cc:	46bd      	mov	sp, r7
 80066ce:	bd90      	pop	{r4, r7, pc}

080066d0 <ssd1306_DrawRectangle>:

/* Draw a rectangle */
void ssd1306_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 80066d0:	b590      	push	{r4, r7, lr}
 80066d2:	b085      	sub	sp, #20
 80066d4:	af02      	add	r7, sp, #8
 80066d6:	4604      	mov	r4, r0
 80066d8:	4608      	mov	r0, r1
 80066da:	4611      	mov	r1, r2
 80066dc:	461a      	mov	r2, r3
 80066de:	4623      	mov	r3, r4
 80066e0:	71fb      	strb	r3, [r7, #7]
 80066e2:	4603      	mov	r3, r0
 80066e4:	71bb      	strb	r3, [r7, #6]
 80066e6:	460b      	mov	r3, r1
 80066e8:	717b      	strb	r3, [r7, #5]
 80066ea:	4613      	mov	r3, r2
 80066ec:	713b      	strb	r3, [r7, #4]
    ssd1306_Line(x1,y1,x2,y1,color);
 80066ee:	79bc      	ldrb	r4, [r7, #6]
 80066f0:	797a      	ldrb	r2, [r7, #5]
 80066f2:	79b9      	ldrb	r1, [r7, #6]
 80066f4:	79f8      	ldrb	r0, [r7, #7]
 80066f6:	7e3b      	ldrb	r3, [r7, #24]
 80066f8:	9300      	str	r3, [sp, #0]
 80066fa:	4623      	mov	r3, r4
 80066fc:	f7ff fbe2 	bl	8005ec4 <ssd1306_Line>
    ssd1306_Line(x2,y1,x2,y2,color);
 8006700:	793c      	ldrb	r4, [r7, #4]
 8006702:	797a      	ldrb	r2, [r7, #5]
 8006704:	79b9      	ldrb	r1, [r7, #6]
 8006706:	7978      	ldrb	r0, [r7, #5]
 8006708:	7e3b      	ldrb	r3, [r7, #24]
 800670a:	9300      	str	r3, [sp, #0]
 800670c:	4623      	mov	r3, r4
 800670e:	f7ff fbd9 	bl	8005ec4 <ssd1306_Line>
    ssd1306_Line(x2,y2,x1,y2,color);
 8006712:	793c      	ldrb	r4, [r7, #4]
 8006714:	79fa      	ldrb	r2, [r7, #7]
 8006716:	7939      	ldrb	r1, [r7, #4]
 8006718:	7978      	ldrb	r0, [r7, #5]
 800671a:	7e3b      	ldrb	r3, [r7, #24]
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	4623      	mov	r3, r4
 8006720:	f7ff fbd0 	bl	8005ec4 <ssd1306_Line>
    ssd1306_Line(x1,y2,x1,y1,color);
 8006724:	79bc      	ldrb	r4, [r7, #6]
 8006726:	79fa      	ldrb	r2, [r7, #7]
 8006728:	7939      	ldrb	r1, [r7, #4]
 800672a:	79f8      	ldrb	r0, [r7, #7]
 800672c:	7e3b      	ldrb	r3, [r7, #24]
 800672e:	9300      	str	r3, [sp, #0]
 8006730:	4623      	mov	r3, r4
 8006732:	f7ff fbc7 	bl	8005ec4 <ssd1306_Line>

    return;
 8006736:	bf00      	nop
}
 8006738:	370c      	adds	r7, #12
 800673a:	46bd      	mov	sp, r7
 800673c:	bd90      	pop	{r4, r7, pc}

0800673e <ssd1306_FillRectangle>:

/* Draw a filled rectangle */
void ssd1306_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 800673e:	b590      	push	{r4, r7, lr}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	4604      	mov	r4, r0
 8006746:	4608      	mov	r0, r1
 8006748:	4611      	mov	r1, r2
 800674a:	461a      	mov	r2, r3
 800674c:	4623      	mov	r3, r4
 800674e:	71fb      	strb	r3, [r7, #7]
 8006750:	4603      	mov	r3, r0
 8006752:	71bb      	strb	r3, [r7, #6]
 8006754:	460b      	mov	r3, r1
 8006756:	717b      	strb	r3, [r7, #5]
 8006758:	4613      	mov	r3, r2
 800675a:	713b      	strb	r3, [r7, #4]
    uint8_t x_start = ((x1<=x2) ? x1 : x2);
 800675c:	79fa      	ldrb	r2, [r7, #7]
 800675e:	797b      	ldrb	r3, [r7, #5]
 8006760:	4293      	cmp	r3, r2
 8006762:	bf28      	it	cs
 8006764:	4613      	movcs	r3, r2
 8006766:	737b      	strb	r3, [r7, #13]
    uint8_t x_end   = ((x1<=x2) ? x2 : x1);
 8006768:	797a      	ldrb	r2, [r7, #5]
 800676a:	79fb      	ldrb	r3, [r7, #7]
 800676c:	4293      	cmp	r3, r2
 800676e:	bf38      	it	cc
 8006770:	4613      	movcc	r3, r2
 8006772:	733b      	strb	r3, [r7, #12]
    uint8_t y_start = ((y1<=y2) ? y1 : y2);
 8006774:	79ba      	ldrb	r2, [r7, #6]
 8006776:	793b      	ldrb	r3, [r7, #4]
 8006778:	4293      	cmp	r3, r2
 800677a:	bf28      	it	cs
 800677c:	4613      	movcs	r3, r2
 800677e:	72fb      	strb	r3, [r7, #11]
    uint8_t y_end   = ((y1<=y2) ? y2 : y1);
 8006780:	793a      	ldrb	r2, [r7, #4]
 8006782:	79bb      	ldrb	r3, [r7, #6]
 8006784:	4293      	cmp	r3, r2
 8006786:	bf38      	it	cc
 8006788:	4613      	movcc	r3, r2
 800678a:	72bb      	strb	r3, [r7, #10]

    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 800678c:	7afb      	ldrb	r3, [r7, #11]
 800678e:	73fb      	strb	r3, [r7, #15]
 8006790:	e017      	b.n	80067c2 <ssd1306_FillRectangle+0x84>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 8006792:	7b7b      	ldrb	r3, [r7, #13]
 8006794:	73bb      	strb	r3, [r7, #14]
 8006796:	e009      	b.n	80067ac <ssd1306_FillRectangle+0x6e>
            ssd1306_DrawPixel(x, y, color);
 8006798:	f897 2020 	ldrb.w	r2, [r7, #32]
 800679c:	7bf9      	ldrb	r1, [r7, #15]
 800679e:	7bbb      	ldrb	r3, [r7, #14]
 80067a0:	4618      	mov	r0, r3
 80067a2:	f7ff fa6b 	bl	8005c7c <ssd1306_DrawPixel>
        for (uint8_t x= x_start; (x<= x_end)&&(x<SSD1306_WIDTH); x++) {
 80067a6:	7bbb      	ldrb	r3, [r7, #14]
 80067a8:	3301      	adds	r3, #1
 80067aa:	73bb      	strb	r3, [r7, #14]
 80067ac:	7bba      	ldrb	r2, [r7, #14]
 80067ae:	7b3b      	ldrb	r3, [r7, #12]
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d803      	bhi.n	80067bc <ssd1306_FillRectangle+0x7e>
 80067b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	daed      	bge.n	8006798 <ssd1306_FillRectangle+0x5a>
    for (uint8_t y= y_start; (y<= y_end)&&(y<SSD1306_HEIGHT); y++) {
 80067bc:	7bfb      	ldrb	r3, [r7, #15]
 80067be:	3301      	adds	r3, #1
 80067c0:	73fb      	strb	r3, [r7, #15]
 80067c2:	7bfa      	ldrb	r2, [r7, #15]
 80067c4:	7abb      	ldrb	r3, [r7, #10]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d803      	bhi.n	80067d2 <ssd1306_FillRectangle+0x94>
 80067ca:	7bfb      	ldrb	r3, [r7, #15]
 80067cc:	2b3f      	cmp	r3, #63	@ 0x3f
 80067ce:	d9e0      	bls.n	8006792 <ssd1306_FillRectangle+0x54>
        }
    }
    return;
 80067d0:	bf00      	nop
 80067d2:	bf00      	nop
}
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	bd90      	pop	{r4, r7, pc}
	...

080067dc <ssd1306_InvertRectangle>:

SSD1306_Error_t ssd1306_InvertRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2) {
 80067dc:	b490      	push	{r4, r7}
 80067de:	b086      	sub	sp, #24
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	4604      	mov	r4, r0
 80067e4:	4608      	mov	r0, r1
 80067e6:	4611      	mov	r1, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	4623      	mov	r3, r4
 80067ec:	71fb      	strb	r3, [r7, #7]
 80067ee:	4603      	mov	r3, r0
 80067f0:	71bb      	strb	r3, [r7, #6]
 80067f2:	460b      	mov	r3, r1
 80067f4:	717b      	strb	r3, [r7, #5]
 80067f6:	4613      	mov	r3, r2
 80067f8:	713b      	strb	r3, [r7, #4]
  if ((x2 >= SSD1306_WIDTH) || (y2 >= SSD1306_HEIGHT)) {
 80067fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	db02      	blt.n	8006808 <ssd1306_InvertRectangle+0x2c>
 8006802:	793b      	ldrb	r3, [r7, #4]
 8006804:	2b3f      	cmp	r3, #63	@ 0x3f
 8006806:	d901      	bls.n	800680c <ssd1306_InvertRectangle+0x30>
    return SSD1306_ERR;
 8006808:	2301      	movs	r3, #1
 800680a:	e09c      	b.n	8006946 <ssd1306_InvertRectangle+0x16a>
  }
  if ((x1 > x2) || (y1 > y2)) {
 800680c:	79fa      	ldrb	r2, [r7, #7]
 800680e:	797b      	ldrb	r3, [r7, #5]
 8006810:	429a      	cmp	r2, r3
 8006812:	d803      	bhi.n	800681c <ssd1306_InvertRectangle+0x40>
 8006814:	79ba      	ldrb	r2, [r7, #6]
 8006816:	793b      	ldrb	r3, [r7, #4]
 8006818:	429a      	cmp	r2, r3
 800681a:	d901      	bls.n	8006820 <ssd1306_InvertRectangle+0x44>
    return SSD1306_ERR;
 800681c:	2301      	movs	r3, #1
 800681e:	e092      	b.n	8006946 <ssd1306_InvertRectangle+0x16a>
  }
  uint32_t i;
  if ((y1 / 8) != (y2 / 8)) {
 8006820:	79bb      	ldrb	r3, [r7, #6]
 8006822:	08db      	lsrs	r3, r3, #3
 8006824:	b2da      	uxtb	r2, r3
 8006826:	793b      	ldrb	r3, [r7, #4]
 8006828:	08db      	lsrs	r3, r3, #3
 800682a:	b2db      	uxtb	r3, r3
 800682c:	429a      	cmp	r2, r3
 800682e:	d057      	beq.n	80068e0 <ssd1306_InvertRectangle+0x104>
    /* if rectangle doesn't lie on one 8px row */
    for (uint32_t x = x1; x <= x2; x++) {
 8006830:	79fb      	ldrb	r3, [r7, #7]
 8006832:	613b      	str	r3, [r7, #16]
 8006834:	e04f      	b.n	80068d6 <ssd1306_InvertRectangle+0xfa>
      i = x + (y1 / 8) * SSD1306_WIDTH;
 8006836:	79bb      	ldrb	r3, [r7, #6]
 8006838:	08db      	lsrs	r3, r3, #3
 800683a:	b2db      	uxtb	r3, r3
 800683c:	01db      	lsls	r3, r3, #7
 800683e:	461a      	mov	r2, r3
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	4413      	add	r3, r2
 8006844:	617b      	str	r3, [r7, #20]
      SSD1306_Buffer[i] ^= 0xFF << (y1 % 8);
 8006846:	4a42      	ldr	r2, [pc, #264]	@ (8006950 <ssd1306_InvertRectangle+0x174>)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	4413      	add	r3, r2
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	b25a      	sxtb	r2, r3
 8006850:	79bb      	ldrb	r3, [r7, #6]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	21ff      	movs	r1, #255	@ 0xff
 8006858:	fa01 f303 	lsl.w	r3, r1, r3
 800685c:	b25b      	sxtb	r3, r3
 800685e:	4053      	eors	r3, r2
 8006860:	b25b      	sxtb	r3, r3
 8006862:	b2d9      	uxtb	r1, r3
 8006864:	4a3a      	ldr	r2, [pc, #232]	@ (8006950 <ssd1306_InvertRectangle+0x174>)
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	4413      	add	r3, r2
 800686a:	460a      	mov	r2, r1
 800686c:	701a      	strb	r2, [r3, #0]
      i += SSD1306_WIDTH;
 800686e:	697b      	ldr	r3, [r7, #20]
 8006870:	3380      	adds	r3, #128	@ 0x80
 8006872:	617b      	str	r3, [r7, #20]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 8006874:	e00d      	b.n	8006892 <ssd1306_InvertRectangle+0xb6>
        SSD1306_Buffer[i] ^= 0xFF;
 8006876:	4a36      	ldr	r2, [pc, #216]	@ (8006950 <ssd1306_InvertRectangle+0x174>)
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	4413      	add	r3, r2
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	43db      	mvns	r3, r3
 8006880:	b2d9      	uxtb	r1, r3
 8006882:	4a33      	ldr	r2, [pc, #204]	@ (8006950 <ssd1306_InvertRectangle+0x174>)
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	4413      	add	r3, r2
 8006888:	460a      	mov	r2, r1
 800688a:	701a      	strb	r2, [r3, #0]
      for (; i < x + (y2 / 8) * SSD1306_WIDTH; i += SSD1306_WIDTH) {
 800688c:	697b      	ldr	r3, [r7, #20]
 800688e:	3380      	adds	r3, #128	@ 0x80
 8006890:	617b      	str	r3, [r7, #20]
 8006892:	793b      	ldrb	r3, [r7, #4]
 8006894:	08db      	lsrs	r3, r3, #3
 8006896:	b2db      	uxtb	r3, r3
 8006898:	01db      	lsls	r3, r3, #7
 800689a:	461a      	mov	r2, r3
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4413      	add	r3, r2
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d3e7      	bcc.n	8006876 <ssd1306_InvertRectangle+0x9a>
      }
      SSD1306_Buffer[i] ^= 0xFF >> (7 - (y2 % 8));
 80068a6:	4a2a      	ldr	r2, [pc, #168]	@ (8006950 <ssd1306_InvertRectangle+0x174>)
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	4413      	add	r3, r2
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	b25a      	sxtb	r2, r3
 80068b0:	793b      	ldrb	r3, [r7, #4]
 80068b2:	43db      	mvns	r3, r3
 80068b4:	f003 0307 	and.w	r3, r3, #7
 80068b8:	21ff      	movs	r1, #255	@ 0xff
 80068ba:	fa41 f303 	asr.w	r3, r1, r3
 80068be:	b25b      	sxtb	r3, r3
 80068c0:	4053      	eors	r3, r2
 80068c2:	b25b      	sxtb	r3, r3
 80068c4:	b2d9      	uxtb	r1, r3
 80068c6:	4a22      	ldr	r2, [pc, #136]	@ (8006950 <ssd1306_InvertRectangle+0x174>)
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	4413      	add	r3, r2
 80068cc:	460a      	mov	r2, r1
 80068ce:	701a      	strb	r2, [r3, #0]
    for (uint32_t x = x1; x <= x2; x++) {
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	3301      	adds	r3, #1
 80068d4:	613b      	str	r3, [r7, #16]
 80068d6:	797b      	ldrb	r3, [r7, #5]
 80068d8:	693a      	ldr	r2, [r7, #16]
 80068da:	429a      	cmp	r2, r3
 80068dc:	d9ab      	bls.n	8006836 <ssd1306_InvertRectangle+0x5a>
 80068de:	e031      	b.n	8006944 <ssd1306_InvertRectangle+0x168>
    }
  } else {
    /* if rectangle lies on one 8px row */
    const uint8_t mask = (0xFF << (y1 % 8)) & (0xFF >> (7 - (y2 % 8)));
 80068e0:	79bb      	ldrb	r3, [r7, #6]
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	22ff      	movs	r2, #255	@ 0xff
 80068e8:	fa02 f303 	lsl.w	r3, r2, r3
 80068ec:	b25a      	sxtb	r2, r3
 80068ee:	793b      	ldrb	r3, [r7, #4]
 80068f0:	43db      	mvns	r3, r3
 80068f2:	f003 0307 	and.w	r3, r3, #7
 80068f6:	21ff      	movs	r1, #255	@ 0xff
 80068f8:	fa41 f303 	asr.w	r3, r1, r3
 80068fc:	b25b      	sxtb	r3, r3
 80068fe:	4013      	ands	r3, r2
 8006900:	b25b      	sxtb	r3, r3
 8006902:	73fb      	strb	r3, [r7, #15]
    for (i = x1 + (y1 / 8) * SSD1306_WIDTH;
 8006904:	79fa      	ldrb	r2, [r7, #7]
 8006906:	79bb      	ldrb	r3, [r7, #6]
 8006908:	08db      	lsrs	r3, r3, #3
 800690a:	b2db      	uxtb	r3, r3
 800690c:	01db      	lsls	r3, r3, #7
 800690e:	4413      	add	r3, r2
 8006910:	617b      	str	r3, [r7, #20]
 8006912:	e00e      	b.n	8006932 <ssd1306_InvertRectangle+0x156>
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
      SSD1306_Buffer[i] ^= mask;
 8006914:	4a0e      	ldr	r2, [pc, #56]	@ (8006950 <ssd1306_InvertRectangle+0x174>)
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	4413      	add	r3, r2
 800691a:	781a      	ldrb	r2, [r3, #0]
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	4053      	eors	r3, r2
 8006920:	b2d9      	uxtb	r1, r3
 8006922:	4a0b      	ldr	r2, [pc, #44]	@ (8006950 <ssd1306_InvertRectangle+0x174>)
 8006924:	697b      	ldr	r3, [r7, #20]
 8006926:	4413      	add	r3, r2
 8006928:	460a      	mov	r2, r1
 800692a:	701a      	strb	r2, [r3, #0]
         i <= (uint32_t)x2 + (y2 / 8) * SSD1306_WIDTH; i++) {
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	3301      	adds	r3, #1
 8006930:	617b      	str	r3, [r7, #20]
 8006932:	797b      	ldrb	r3, [r7, #5]
 8006934:	793a      	ldrb	r2, [r7, #4]
 8006936:	08d2      	lsrs	r2, r2, #3
 8006938:	b2d2      	uxtb	r2, r2
 800693a:	01d2      	lsls	r2, r2, #7
 800693c:	4413      	add	r3, r2
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	429a      	cmp	r2, r3
 8006942:	d9e7      	bls.n	8006914 <ssd1306_InvertRectangle+0x138>
    }
  }
  return SSD1306_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bc90      	pop	{r4, r7}
 800694e:	4770      	bx	lr
 8006950:	2000046c 	.word	0x2000046c

08006954 <ssd1306_DrawBitmap>:

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8006954:	b580      	push	{r7, lr}
 8006956:	b084      	sub	sp, #16
 8006958:	af00      	add	r7, sp, #0
 800695a:	603a      	str	r2, [r7, #0]
 800695c:	461a      	mov	r2, r3
 800695e:	4603      	mov	r3, r0
 8006960:	71fb      	strb	r3, [r7, #7]
 8006962:	460b      	mov	r3, r1
 8006964:	71bb      	strb	r3, [r7, #6]
 8006966:	4613      	mov	r3, r2
 8006968:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800696a:	797b      	ldrb	r3, [r7, #5]
 800696c:	3307      	adds	r3, #7
 800696e:	2b00      	cmp	r3, #0
 8006970:	da00      	bge.n	8006974 <ssd1306_DrawBitmap+0x20>
 8006972:	3307      	adds	r3, #7
 8006974:	10db      	asrs	r3, r3, #3
 8006976:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8006978:	2300      	movs	r3, #0
 800697a:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 800697c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006980:	2b00      	cmp	r3, #0
 8006982:	db3e      	blt.n	8006a02 <ssd1306_DrawBitmap+0xae>
 8006984:	79bb      	ldrb	r3, [r7, #6]
 8006986:	2b3f      	cmp	r3, #63	@ 0x3f
 8006988:	d83b      	bhi.n	8006a02 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800698a:	2300      	movs	r3, #0
 800698c:	73bb      	strb	r3, [r7, #14]
 800698e:	e033      	b.n	80069f8 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8006990:	2300      	movs	r3, #0
 8006992:	737b      	strb	r3, [r7, #13]
 8006994:	e026      	b.n	80069e4 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8006996:	7b7b      	ldrb	r3, [r7, #13]
 8006998:	f003 0307 	and.w	r3, r3, #7
 800699c:	2b00      	cmp	r3, #0
 800699e:	d003      	beq.n	80069a8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 80069a0:	7bfb      	ldrb	r3, [r7, #15]
 80069a2:	005b      	lsls	r3, r3, #1
 80069a4:	73fb      	strb	r3, [r7, #15]
 80069a6:	e00d      	b.n	80069c4 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80069a8:	7bbb      	ldrb	r3, [r7, #14]
 80069aa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80069ae:	fb02 f303 	mul.w	r3, r2, r3
 80069b2:	7b7a      	ldrb	r2, [r7, #13]
 80069b4:	08d2      	lsrs	r2, r2, #3
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	4413      	add	r3, r2
 80069ba:	461a      	mov	r2, r3
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	4413      	add	r3, r2
 80069c0:	781b      	ldrb	r3, [r3, #0]
 80069c2:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 80069c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	da08      	bge.n	80069de <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 80069cc:	79fa      	ldrb	r2, [r7, #7]
 80069ce:	7b7b      	ldrb	r3, [r7, #13]
 80069d0:	4413      	add	r3, r2
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	7f3a      	ldrb	r2, [r7, #28]
 80069d6:	79b9      	ldrb	r1, [r7, #6]
 80069d8:	4618      	mov	r0, r3
 80069da:	f7ff f94f 	bl	8005c7c <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 80069de:	7b7b      	ldrb	r3, [r7, #13]
 80069e0:	3301      	adds	r3, #1
 80069e2:	737b      	strb	r3, [r7, #13]
 80069e4:	7b7a      	ldrb	r2, [r7, #13]
 80069e6:	797b      	ldrb	r3, [r7, #5]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	d3d4      	bcc.n	8006996 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 80069ec:	7bbb      	ldrb	r3, [r7, #14]
 80069ee:	3301      	adds	r3, #1
 80069f0:	73bb      	strb	r3, [r7, #14]
 80069f2:	79bb      	ldrb	r3, [r7, #6]
 80069f4:	3301      	adds	r3, #1
 80069f6:	71bb      	strb	r3, [r7, #6]
 80069f8:	7bba      	ldrb	r2, [r7, #14]
 80069fa:	7e3b      	ldrb	r3, [r7, #24]
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d3c7      	bcc.n	8006990 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8006a00:	e000      	b.n	8006a04 <ssd1306_DrawBitmap+0xb0>
        return;
 8006a02:	bf00      	nop
}
 8006a04:	3710      	adds	r7, #16
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}

08006a0a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8006a0a:	b580      	push	{r7, lr}
 8006a0c:	b084      	sub	sp, #16
 8006a0e:	af00      	add	r7, sp, #0
 8006a10:	4603      	mov	r3, r0
 8006a12:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006a14:	2381      	movs	r3, #129	@ 0x81
 8006a16:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8006a18:	7bfb      	ldrb	r3, [r7, #15]
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f7ff f852 	bl	8005ac4 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8006a20:	79fb      	ldrb	r3, [r7, #7]
 8006a22:	4618      	mov	r0, r3
 8006a24:	f7ff f84e 	bl	8005ac4 <ssd1306_WriteCommand>
}
 8006a28:	bf00      	nop
 8006a2a:	3710      	adds	r7, #16
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	4603      	mov	r3, r0
 8006a38:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d005      	beq.n	8006a4c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8006a40:	23af      	movs	r3, #175	@ 0xaf
 8006a42:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8006a44:	4b08      	ldr	r3, [pc, #32]	@ (8006a68 <ssd1306_SetDisplayOn+0x38>)
 8006a46:	2201      	movs	r2, #1
 8006a48:	715a      	strb	r2, [r3, #5]
 8006a4a:	e004      	b.n	8006a56 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8006a4c:	23ae      	movs	r3, #174	@ 0xae
 8006a4e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8006a50:	4b05      	ldr	r3, [pc, #20]	@ (8006a68 <ssd1306_SetDisplayOn+0x38>)
 8006a52:	2200      	movs	r2, #0
 8006a54:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7ff f833 	bl	8005ac4 <ssd1306_WriteCommand>
}
 8006a5e:	bf00      	nop
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}
 8006a66:	bf00      	nop
 8006a68:	2000086c 	.word	0x2000086c

08006a6c <ssd1306_TestBorder>:
0x00, 0x03, 0xFF, 0x00, 0x00, 0xFF, 0xC0, 0x00, 0x00, 0x00, 0xFF, 0x00, 0x00, 0xFF, 0x00, 0x00,
0x00, 0x00, 0x3F, 0x00, 0x00, 0xFC, 0x00, 0x00, 0x00, 0x00, 0x0F, 0x00, 0x00, 0xF0, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

void ssd1306_TestBorder() {
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b082      	sub	sp, #8
 8006a70:	af00      	add	r7, sp, #0
    ssd1306_Fill(Black);
 8006a72:	2000      	movs	r0, #0
 8006a74:	f7ff f8c2 	bl	8005bfc <ssd1306_Fill>
   
    uint8_t x = 0;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	71fb      	strb	r3, [r7, #7]
    uint8_t y = 0;
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	71bb      	strb	r3, [r7, #6]
    do {
        ssd1306_DrawPixel(x, y, Black);
 8006a80:	79b9      	ldrb	r1, [r7, #6]
 8006a82:	79fb      	ldrb	r3, [r7, #7]
 8006a84:	2200      	movs	r2, #0
 8006a86:	4618      	mov	r0, r3
 8006a88:	f7ff f8f8 	bl	8005c7c <ssd1306_DrawPixel>

        if((y == 0) && (x < (SSD1306_WIDTH-1)))
 8006a8c:	79bb      	ldrb	r3, [r7, #6]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d106      	bne.n	8006aa0 <ssd1306_TestBorder+0x34>
 8006a92:	79fb      	ldrb	r3, [r7, #7]
 8006a94:	2b7e      	cmp	r3, #126	@ 0x7e
 8006a96:	d803      	bhi.n	8006aa0 <ssd1306_TestBorder+0x34>
            x++;
 8006a98:	79fb      	ldrb	r3, [r7, #7]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	71fb      	strb	r3, [r7, #7]
 8006a9e:	e016      	b.n	8006ace <ssd1306_TestBorder+0x62>
        else if((x == (SSD1306_WIDTH-1)) && (y < (SSD1306_HEIGHT-1)))
 8006aa0:	79fb      	ldrb	r3, [r7, #7]
 8006aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006aa4:	d106      	bne.n	8006ab4 <ssd1306_TestBorder+0x48>
 8006aa6:	79bb      	ldrb	r3, [r7, #6]
 8006aa8:	2b3e      	cmp	r3, #62	@ 0x3e
 8006aaa:	d803      	bhi.n	8006ab4 <ssd1306_TestBorder+0x48>
            y++;
 8006aac:	79bb      	ldrb	r3, [r7, #6]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	71bb      	strb	r3, [r7, #6]
 8006ab2:	e00c      	b.n	8006ace <ssd1306_TestBorder+0x62>
        else if((y == (SSD1306_HEIGHT-1)) && (x > 0)) 
 8006ab4:	79bb      	ldrb	r3, [r7, #6]
 8006ab6:	2b3f      	cmp	r3, #63	@ 0x3f
 8006ab8:	d106      	bne.n	8006ac8 <ssd1306_TestBorder+0x5c>
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d003      	beq.n	8006ac8 <ssd1306_TestBorder+0x5c>
            x--;
 8006ac0:	79fb      	ldrb	r3, [r7, #7]
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	71fb      	strb	r3, [r7, #7]
 8006ac6:	e002      	b.n	8006ace <ssd1306_TestBorder+0x62>
        else
            y--;
 8006ac8:	79bb      	ldrb	r3, [r7, #6]
 8006aca:	3b01      	subs	r3, #1
 8006acc:	71bb      	strb	r3, [r7, #6]

        ssd1306_DrawPixel(x, y, White);
 8006ace:	79b9      	ldrb	r1, [r7, #6]
 8006ad0:	79fb      	ldrb	r3, [r7, #7]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff f8d1 	bl	8005c7c <ssd1306_DrawPixel>
        ssd1306_UpdateScreen();
 8006ada:	f7ff f8a7 	bl	8005c2c <ssd1306_UpdateScreen>
    
        HAL_Delay(5);
 8006ade:	2005      	movs	r0, #5
 8006ae0:	f7fb fe2e 	bl	8002740 <HAL_Delay>
    } while(x > 0 || y > 0);
 8006ae4:	79fb      	ldrb	r3, [r7, #7]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1ca      	bne.n	8006a80 <ssd1306_TestBorder+0x14>
 8006aea:	79bb      	ldrb	r3, [r7, #6]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d1c7      	bne.n	8006a80 <ssd1306_TestBorder+0x14>
   
    HAL_Delay(1000);
 8006af0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8006af4:	f7fb fe24 	bl	8002740 <HAL_Delay>
}
 8006af8:	bf00      	nop
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <ssd1306_TestFonts1>:

void ssd1306_TestFonts1() {
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b084      	sub	sp, #16
 8006b04:	af02      	add	r7, sp, #8
    uint8_t y = 0;
 8006b06:	2300      	movs	r3, #0
 8006b08:	71fb      	strb	r3, [r7, #7]
    ssd1306_Fill(Black);
 8006b0a:	2000      	movs	r0, #0
 8006b0c:	f7ff f876 	bl	8005bfc <ssd1306_Fill>

    #ifdef SSD1306_INCLUDE_FONT_16x26
    ssd1306_SetCursor(2, y);
 8006b10:	79fb      	ldrb	r3, [r7, #7]
 8006b12:	4619      	mov	r1, r3
 8006b14:	2002      	movs	r0, #2
 8006b16:	f7ff f9bd 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 16x26", Font_16x26, White);
 8006b1a:	4b1d      	ldr	r3, [pc, #116]	@ (8006b90 <ssd1306_TestFonts1+0x90>)
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	9200      	str	r2, [sp, #0]
 8006b20:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b22:	481c      	ldr	r0, [pc, #112]	@ (8006b94 <ssd1306_TestFonts1+0x94>)
 8006b24:	f7ff f990 	bl	8005e48 <ssd1306_WriteString>
    y += 26;
 8006b28:	79fb      	ldrb	r3, [r7, #7]
 8006b2a:	331a      	adds	r3, #26
 8006b2c:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_11x18
    ssd1306_SetCursor(2, y);
 8006b2e:	79fb      	ldrb	r3, [r7, #7]
 8006b30:	4619      	mov	r1, r3
 8006b32:	2002      	movs	r0, #2
 8006b34:	f7ff f9ae 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 11x18", Font_11x18, White);
 8006b38:	4b17      	ldr	r3, [pc, #92]	@ (8006b98 <ssd1306_TestFonts1+0x98>)
 8006b3a:	2201      	movs	r2, #1
 8006b3c:	9200      	str	r2, [sp, #0]
 8006b3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b40:	4816      	ldr	r0, [pc, #88]	@ (8006b9c <ssd1306_TestFonts1+0x9c>)
 8006b42:	f7ff f981 	bl	8005e48 <ssd1306_WriteString>
    y += 18;
 8006b46:	79fb      	ldrb	r3, [r7, #7]
 8006b48:	3312      	adds	r3, #18
 8006b4a:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_7x10
    ssd1306_SetCursor(2, y);
 8006b4c:	79fb      	ldrb	r3, [r7, #7]
 8006b4e:	4619      	mov	r1, r3
 8006b50:	2002      	movs	r0, #2
 8006b52:	f7ff f99f 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 7x10", Font_7x10, White);
 8006b56:	4b12      	ldr	r3, [pc, #72]	@ (8006ba0 <ssd1306_TestFonts1+0xa0>)
 8006b58:	2201      	movs	r2, #1
 8006b5a:	9200      	str	r2, [sp, #0]
 8006b5c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b5e:	4811      	ldr	r0, [pc, #68]	@ (8006ba4 <ssd1306_TestFonts1+0xa4>)
 8006b60:	f7ff f972 	bl	8005e48 <ssd1306_WriteString>
    y += 10;
 8006b64:	79fb      	ldrb	r3, [r7, #7]
 8006b66:	330a      	adds	r3, #10
 8006b68:	71fb      	strb	r3, [r7, #7]
    #endif

    #ifdef SSD1306_INCLUDE_FONT_6x8
    ssd1306_SetCursor(2, y);
 8006b6a:	79fb      	ldrb	r3, [r7, #7]
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	2002      	movs	r0, #2
 8006b70:	f7ff f990 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString("Font 6x8", Font_6x8, White);
 8006b74:	4b0c      	ldr	r3, [pc, #48]	@ (8006ba8 <ssd1306_TestFonts1+0xa8>)
 8006b76:	2201      	movs	r2, #1
 8006b78:	9200      	str	r2, [sp, #0]
 8006b7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006b7c:	480b      	ldr	r0, [pc, #44]	@ (8006bac <ssd1306_TestFonts1+0xac>)
 8006b7e:	f7ff f963 	bl	8005e48 <ssd1306_WriteString>
    #endif

    ssd1306_UpdateScreen();
 8006b82:	f7ff f853 	bl	8005c2c <ssd1306_UpdateScreen>
}
 8006b86:	bf00      	nop
 8006b88:	3708      	adds	r7, #8
 8006b8a:	46bd      	mov	sp, r7
 8006b8c:	bd80      	pop	{r7, pc}
 8006b8e:	bf00      	nop
 8006b90:	08010588 	.word	0x08010588
 8006b94:	0800c488 	.word	0x0800c488
 8006b98:	0801057c 	.word	0x0801057c
 8006b9c:	0800c494 	.word	0x0800c494
 8006ba0:	08010570 	.word	0x08010570
 8006ba4:	0800c4a0 	.word	0x0800c4a0
 8006ba8:	08010564 	.word	0x08010564
 8006bac:	0800c4ac 	.word	0x0800c4ac

08006bb0 <ssd1306_TestFonts2>:

/*
 * This test shows how an 128x64 px OLED can replace a 0802 LCD.
 */
void ssd1306_TestFonts2() {
 8006bb0:	b590      	push	{r4, r7, lr}
 8006bb2:	b085      	sub	sp, #20
 8006bb4:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_16x24
    uint8_t x1, y1, x2, y2;

    ssd1306_Fill(Black);
 8006bb6:	2000      	movs	r0, #0
 8006bb8:	f7ff f820 	bl	8005bfc <ssd1306_Fill>

    ssd1306_SetCursor(0, 4);
 8006bbc:	2104      	movs	r1, #4
 8006bbe:	2000      	movs	r0, #0
 8006bc0:	f7ff f968 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString("18.092.5", Font_16x24, White);
 8006bc4:	4b14      	ldr	r3, [pc, #80]	@ (8006c18 <ssd1306_TestFonts2+0x68>)
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	9200      	str	r2, [sp, #0]
 8006bca:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006bcc:	4813      	ldr	r0, [pc, #76]	@ (8006c1c <ssd1306_TestFonts2+0x6c>)
 8006bce:	f7ff f93b 	bl	8005e48 <ssd1306_WriteString>
    ssd1306_SetCursor(0, 4+24+8);
 8006bd2:	2124      	movs	r1, #36	@ 0x24
 8006bd4:	2000      	movs	r0, #0
 8006bd6:	f7ff f95d 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString("RIT+1000", Font_16x24, White);
 8006bda:	4b0f      	ldr	r3, [pc, #60]	@ (8006c18 <ssd1306_TestFonts2+0x68>)
 8006bdc:	2201      	movs	r2, #1
 8006bde:	9200      	str	r2, [sp, #0]
 8006be0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006be2:	480f      	ldr	r0, [pc, #60]	@ (8006c20 <ssd1306_TestFonts2+0x70>)
 8006be4:	f7ff f930 	bl	8005e48 <ssd1306_WriteString>

    // underline
    x1 = 6*16;
 8006be8:	2360      	movs	r3, #96	@ 0x60
 8006bea:	71fb      	strb	r3, [r7, #7]
    y1 = 4+24+8+24;
 8006bec:	233c      	movs	r3, #60	@ 0x3c
 8006bee:	71bb      	strb	r3, [r7, #6]
    x2 = x1+16;
 8006bf0:	79fb      	ldrb	r3, [r7, #7]
 8006bf2:	3310      	adds	r3, #16
 8006bf4:	717b      	strb	r3, [r7, #5]
    y2 = y1+2;
 8006bf6:	79bb      	ldrb	r3, [r7, #6]
 8006bf8:	3302      	adds	r3, #2
 8006bfa:	713b      	strb	r3, [r7, #4]
    ssd1306_FillRectangle(x1, y1, x2, y2, White);
 8006bfc:	793b      	ldrb	r3, [r7, #4]
 8006bfe:	797a      	ldrb	r2, [r7, #5]
 8006c00:	79b9      	ldrb	r1, [r7, #6]
 8006c02:	79f8      	ldrb	r0, [r7, #7]
 8006c04:	2401      	movs	r4, #1
 8006c06:	9400      	str	r4, [sp, #0]
 8006c08:	f7ff fd99 	bl	800673e <ssd1306_FillRectangle>

    ssd1306_UpdateScreen();
 8006c0c:	f7ff f80e 	bl	8005c2c <ssd1306_UpdateScreen>
#endif
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd90      	pop	{r4, r7, pc}
 8006c18:	08010594 	.word	0x08010594
 8006c1c:	0800c4b8 	.word	0x0800c4b8
 8006c20:	0800c4c4 	.word	0x0800c4c4

08006c24 <ssd1306_TestFonts3>:

/*
 * Test of proportional (non-monospaced) font.
 */
void ssd1306_TestFonts3() {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b082      	sub	sp, #8
 8006c28:	af02      	add	r7, sp, #8
    ssd1306_Fill(Black);
 8006c2a:	2000      	movs	r0, #0
 8006c2c:	f7fe ffe6 	bl	8005bfc <ssd1306_Fill>
    ssd1306_SetCursor(4, 24);
    ssd1306_WriteString("text... Sweet!", Font_16x15, White);
    ssd1306_SetCursor(4, 44);
    ssd1306_WriteString("3.1415  04:20", Font_16x15, White);
#elif defined(SSD1306_INCLUDE_FONT_11x18)
    ssd1306_SetCursor(4, 4);
 8006c30:	2104      	movs	r1, #4
 8006c32:	2004      	movs	r0, #4
 8006c34:	f7ff f92e 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString("Skip test", Font_11x18, White);
 8006c38:	4b10      	ldr	r3, [pc, #64]	@ (8006c7c <ssd1306_TestFonts3+0x58>)
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	9200      	str	r2, [sp, #0]
 8006c3e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c40:	480f      	ldr	r0, [pc, #60]	@ (8006c80 <ssd1306_TestFonts3+0x5c>)
 8006c42:	f7ff f901 	bl	8005e48 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 24);
 8006c46:	2118      	movs	r1, #24
 8006c48:	2004      	movs	r0, #4
 8006c4a:	f7ff f923 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString("Font not", Font_11x18, White);
 8006c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006c7c <ssd1306_TestFonts3+0x58>)
 8006c50:	2201      	movs	r2, #1
 8006c52:	9200      	str	r2, [sp, #0]
 8006c54:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c56:	480b      	ldr	r0, [pc, #44]	@ (8006c84 <ssd1306_TestFonts3+0x60>)
 8006c58:	f7ff f8f6 	bl	8005e48 <ssd1306_WriteString>
    ssd1306_SetCursor(4, 44);
 8006c5c:	212c      	movs	r1, #44	@ 0x2c
 8006c5e:	2004      	movs	r0, #4
 8006c60:	f7ff f918 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString("included!", Font_11x18, White);
 8006c64:	4b05      	ldr	r3, [pc, #20]	@ (8006c7c <ssd1306_TestFonts3+0x58>)
 8006c66:	2201      	movs	r2, #1
 8006c68:	9200      	str	r2, [sp, #0]
 8006c6a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006c6c:	4806      	ldr	r0, [pc, #24]	@ (8006c88 <ssd1306_TestFonts3+0x64>)
 8006c6e:	f7ff f8eb 	bl	8005e48 <ssd1306_WriteString>
#endif
    ssd1306_UpdateScreen();
 8006c72:	f7fe ffdb 	bl	8005c2c <ssd1306_UpdateScreen>
}
 8006c76:	bf00      	nop
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	0801057c 	.word	0x0801057c
 8006c80:	0800c4d0 	.word	0x0800c4d0
 8006c84:	0800c4dc 	.word	0x0800c4dc
 8006c88:	0800c4e8 	.word	0x0800c4e8

08006c8c <ssd1306_TestFPS>:

void ssd1306_TestFPS() {
 8006c8c:	b5b0      	push	{r4, r5, r7, lr}
 8006c8e:	b09a      	sub	sp, #104	@ 0x68
 8006c90:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 8006c92:	2001      	movs	r0, #1
 8006c94:	f7fe ffb2 	bl	8005bfc <ssd1306_Fill>
   
    uint32_t start = HAL_GetTick();
 8006c98:	f7fb fd46 	bl	8002728 <HAL_GetTick>
 8006c9c:	65b8      	str	r0, [r7, #88]	@ 0x58
    uint32_t end = start;
 8006c9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006ca0:	657b      	str	r3, [r7, #84]	@ 0x54
    int fps = 0;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    char message[] = "ABCDEFGHIJK";
 8006ca6:	4a45      	ldr	r2, [pc, #276]	@ (8006dbc <ssd1306_TestFPS+0x130>)
 8006ca8:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006cac:	ca07      	ldmia	r2, {r0, r1, r2}
 8006cae:	e883 0007 	stmia.w	r3, {r0, r1, r2}
   
    ssd1306_SetCursor(2,0);
 8006cb2:	2100      	movs	r1, #0
 8006cb4:	2002      	movs	r0, #2
 8006cb6:	f7ff f8ed 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString("Testing...", Font_11x18, Black);
 8006cba:	4b41      	ldr	r3, [pc, #260]	@ (8006dc0 <ssd1306_TestFPS+0x134>)
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	9200      	str	r2, [sp, #0]
 8006cc0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cc2:	4840      	ldr	r0, [pc, #256]	@ (8006dc4 <ssd1306_TestFPS+0x138>)
 8006cc4:	f7ff f8c0 	bl	8005e48 <ssd1306_WriteString>
    ssd1306_SetCursor(2, 18*2);
 8006cc8:	2124      	movs	r1, #36	@ 0x24
 8006cca:	2002      	movs	r0, #2
 8006ccc:	f7ff f8e2 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString("0123456789A", Font_11x18, Black);
 8006cd0:	4b3b      	ldr	r3, [pc, #236]	@ (8006dc0 <ssd1306_TestFPS+0x134>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	9200      	str	r2, [sp, #0]
 8006cd6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cd8:	483b      	ldr	r0, [pc, #236]	@ (8006dc8 <ssd1306_TestFPS+0x13c>)
 8006cda:	f7ff f8b5 	bl	8005e48 <ssd1306_WriteString>
   
    do {
        ssd1306_SetCursor(2, 18);
 8006cde:	2112      	movs	r1, #18
 8006ce0:	2002      	movs	r0, #2
 8006ce2:	f7ff f8d7 	bl	8005e94 <ssd1306_SetCursor>
        ssd1306_WriteString(message, Font_11x18, Black);
 8006ce6:	4b36      	ldr	r3, [pc, #216]	@ (8006dc0 <ssd1306_TestFPS+0x134>)
 8006ce8:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8006cec:	2200      	movs	r2, #0
 8006cee:	9200      	str	r2, [sp, #0]
 8006cf0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006cf2:	f7ff f8a9 	bl	8005e48 <ssd1306_WriteString>
        ssd1306_UpdateScreen();
 8006cf6:	f7fe ff99 	bl	8005c2c <ssd1306_UpdateScreen>
       
        char ch = message[0];
 8006cfa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8006cfe:	f887 3053 	strb.w	r3, [r7, #83]	@ 0x53
        memmove(message, message+1, sizeof(message)-2);
 8006d02:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8006d06:	3301      	adds	r3, #1
 8006d08:	f107 0044 	add.w	r0, r7, #68	@ 0x44
 8006d0c:	220a      	movs	r2, #10
 8006d0e:	4619      	mov	r1, r3
 8006d10:	f002 f858 	bl	8008dc4 <memmove>
        message[sizeof(message)-2] = ch;
 8006d14:	f897 3053 	ldrb.w	r3, [r7, #83]	@ 0x53
 8006d18:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e

        fps++;
 8006d1c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d1e:	3301      	adds	r3, #1
 8006d20:	65fb      	str	r3, [r7, #92]	@ 0x5c
        end = HAL_GetTick();
 8006d22:	f7fb fd01 	bl	8002728 <HAL_GetTick>
 8006d26:	6578      	str	r0, [r7, #84]	@ 0x54
    } while((end - start) < 5000);
 8006d28:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d2a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d2c:	1ad3      	subs	r3, r2, r3
 8006d2e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d9d3      	bls.n	8006cde <ssd1306_TestFPS+0x52>
   
    HAL_Delay(5000);
 8006d36:	f241 3088 	movw	r0, #5000	@ 0x1388
 8006d3a:	f7fb fd01 	bl	8002740 <HAL_Delay>

    char buff[64];
    fps = (float)fps / ((end - start) / 1000.0);
 8006d3e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d40:	ee07 3a90 	vmov	s15, r3
 8006d44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006d48:	ee17 0a90 	vmov	r0, s15
 8006d4c:	f7f9 fbfc 	bl	8000548 <__aeabi_f2d>
 8006d50:	4604      	mov	r4, r0
 8006d52:	460d      	mov	r5, r1
 8006d54:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006d56:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006d58:	1ad3      	subs	r3, r2, r3
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7f9 fbd2 	bl	8000504 <__aeabi_ui2d>
 8006d60:	f04f 0200 	mov.w	r2, #0
 8006d64:	4b19      	ldr	r3, [pc, #100]	@ (8006dcc <ssd1306_TestFPS+0x140>)
 8006d66:	f7f9 fd71 	bl	800084c <__aeabi_ddiv>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4620      	mov	r0, r4
 8006d70:	4629      	mov	r1, r5
 8006d72:	f7f9 fd6b 	bl	800084c <__aeabi_ddiv>
 8006d76:	4602      	mov	r2, r0
 8006d78:	460b      	mov	r3, r1
 8006d7a:	4610      	mov	r0, r2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	f7f9 feeb 	bl	8000b58 <__aeabi_d2iz>
 8006d82:	4603      	mov	r3, r0
 8006d84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    snprintf(buff, sizeof(buff), "~%d FPS", fps);
 8006d86:	1d38      	adds	r0, r7, #4
 8006d88:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006d8a:	4a11      	ldr	r2, [pc, #68]	@ (8006dd0 <ssd1306_TestFPS+0x144>)
 8006d8c:	2140      	movs	r1, #64	@ 0x40
 8006d8e:	f001 f86d 	bl	8007e6c <sniprintf>
   
    ssd1306_Fill(White);
 8006d92:	2001      	movs	r0, #1
 8006d94:	f7fe ff32 	bl	8005bfc <ssd1306_Fill>
    ssd1306_SetCursor(2, 2);
 8006d98:	2102      	movs	r1, #2
 8006d9a:	2002      	movs	r0, #2
 8006d9c:	f7ff f87a 	bl	8005e94 <ssd1306_SetCursor>
    ssd1306_WriteString(buff, Font_11x18, Black);
 8006da0:	4b07      	ldr	r3, [pc, #28]	@ (8006dc0 <ssd1306_TestFPS+0x134>)
 8006da2:	1d38      	adds	r0, r7, #4
 8006da4:	2200      	movs	r2, #0
 8006da6:	9200      	str	r2, [sp, #0]
 8006da8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006daa:	f7ff f84d 	bl	8005e48 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 8006dae:	f7fe ff3d 	bl	8005c2c <ssd1306_UpdateScreen>
}
 8006db2:	bf00      	nop
 8006db4:	3760      	adds	r7, #96	@ 0x60
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bdb0      	pop	{r4, r5, r7, pc}
 8006dba:	bf00      	nop
 8006dbc:	0800c514 	.word	0x0800c514
 8006dc0:	0801057c 	.word	0x0801057c
 8006dc4:	0800c4f4 	.word	0x0800c4f4
 8006dc8:	0800c500 	.word	0x0800c500
 8006dcc:	408f4000 	.word	0x408f4000
 8006dd0:	0800c50c 	.word	0x0800c50c

08006dd4 <ssd1306_TestLine>:

void ssd1306_TestLine() {
 8006dd4:	b580      	push	{r7, lr}
 8006dd6:	b082      	sub	sp, #8
 8006dd8:	af02      	add	r7, sp, #8

  ssd1306_Line(1,1,SSD1306_WIDTH - 1,SSD1306_HEIGHT - 1,White);
 8006dda:	2301      	movs	r3, #1
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	233f      	movs	r3, #63	@ 0x3f
 8006de0:	227f      	movs	r2, #127	@ 0x7f
 8006de2:	2101      	movs	r1, #1
 8006de4:	2001      	movs	r0, #1
 8006de6:	f7ff f86d 	bl	8005ec4 <ssd1306_Line>
  ssd1306_Line(SSD1306_WIDTH - 1,1,1,SSD1306_HEIGHT - 1,White);
 8006dea:	2301      	movs	r3, #1
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	233f      	movs	r3, #63	@ 0x3f
 8006df0:	2201      	movs	r2, #1
 8006df2:	2101      	movs	r1, #1
 8006df4:	207f      	movs	r0, #127	@ 0x7f
 8006df6:	f7ff f865 	bl	8005ec4 <ssd1306_Line>
  ssd1306_UpdateScreen();
 8006dfa:	f7fe ff17 	bl	8005c2c <ssd1306_UpdateScreen>
  return;
 8006dfe:	bf00      	nop
}
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <ssd1306_TestRectangle>:

void ssd1306_TestRectangle() {
 8006e04:	b590      	push	{r4, r7, lr}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	607b      	str	r3, [r7, #4]
 8006e0e:	e028      	b.n	8006e62 <ssd1306_TestRectangle+0x5e>
    ssd1306_DrawRectangle(1 + (5*delta),1 + (5*delta) ,SSD1306_WIDTH-1 - (5*delta),SSD1306_HEIGHT-1 - (5*delta),White);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	b2db      	uxtb	r3, r3
 8006e14:	461a      	mov	r2, r3
 8006e16:	0092      	lsls	r2, r2, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	b2db      	uxtb	r3, r3
 8006e1c:	3301      	adds	r3, #1
 8006e1e:	b2d8      	uxtb	r0, r3
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	0092      	lsls	r2, r2, #2
 8006e28:	4413      	add	r3, r2
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	3301      	adds	r3, #1
 8006e2e:	b2d9      	uxtb	r1, r3
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	b2db      	uxtb	r3, r3
 8006e34:	461a      	mov	r2, r3
 8006e36:	0092      	lsls	r2, r2, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	b2db      	uxtb	r3, r3
 8006e3c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	b2db      	uxtb	r3, r3
 8006e46:	461c      	mov	r4, r3
 8006e48:	00a4      	lsls	r4, r4, #2
 8006e4a:	4423      	add	r3, r4
 8006e4c:	b2db      	uxtb	r3, r3
 8006e4e:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 8006e52:	b2db      	uxtb	r3, r3
 8006e54:	2401      	movs	r4, #1
 8006e56:	9400      	str	r4, [sp, #0]
 8006e58:	f7ff fc3a 	bl	80066d0 <ssd1306_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	3301      	adds	r3, #1
 8006e60:	607b      	str	r3, [r7, #4]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	2b04      	cmp	r3, #4
 8006e66:	d9d3      	bls.n	8006e10 <ssd1306_TestRectangle+0xc>
  }
  ssd1306_UpdateScreen();
 8006e68:	f7fe fee0 	bl	8005c2c <ssd1306_UpdateScreen>
  return;
 8006e6c:	bf00      	nop
}
 8006e6e:	370c      	adds	r7, #12
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd90      	pop	{r4, r7, pc}

08006e74 <ssd1306_TestRectangleFill>:

void ssd1306_TestRectangleFill() {
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b082      	sub	sp, #8
 8006e78:	af02      	add	r7, sp, #8
  ssd1306_FillRectangle(31, 1, 65, 35, White);
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	2323      	movs	r3, #35	@ 0x23
 8006e80:	2241      	movs	r2, #65	@ 0x41
 8006e82:	2101      	movs	r1, #1
 8006e84:	201f      	movs	r0, #31
 8006e86:	f7ff fc5a 	bl	800673e <ssd1306_FillRectangle>
  ssd1306_FillRectangle(10, 45, 70, 60, White);
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	9300      	str	r3, [sp, #0]
 8006e8e:	233c      	movs	r3, #60	@ 0x3c
 8006e90:	2246      	movs	r2, #70	@ 0x46
 8006e92:	212d      	movs	r1, #45	@ 0x2d
 8006e94:	200a      	movs	r0, #10
 8006e96:	f7ff fc52 	bl	800673e <ssd1306_FillRectangle>
  ssd1306_FillRectangle(75, 10, 100, 45, White);
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	9300      	str	r3, [sp, #0]
 8006e9e:	232d      	movs	r3, #45	@ 0x2d
 8006ea0:	2264      	movs	r2, #100	@ 0x64
 8006ea2:	210a      	movs	r1, #10
 8006ea4:	204b      	movs	r0, #75	@ 0x4b
 8006ea6:	f7ff fc4a 	bl	800673e <ssd1306_FillRectangle>
  ssd1306_FillRectangle(55, 30, 80, 55, Black);
 8006eaa:	2300      	movs	r3, #0
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	2337      	movs	r3, #55	@ 0x37
 8006eb0:	2250      	movs	r2, #80	@ 0x50
 8006eb2:	211e      	movs	r1, #30
 8006eb4:	2037      	movs	r0, #55	@ 0x37
 8006eb6:	f7ff fc42 	bl	800673e <ssd1306_FillRectangle>
  ssd1306_UpdateScreen();
 8006eba:	f7fe feb7 	bl	8005c2c <ssd1306_UpdateScreen>
}
 8006ebe:	bf00      	nop
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <ssd1306_TestRectangleInvert>:

void ssd1306_TestRectangleInvert() {
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af02      	add	r7, sp, #8
#ifdef SSD1306_INCLUDE_FONT_11x18
  ssd1306_SetCursor(2, 0);
 8006eca:	2100      	movs	r1, #0
 8006ecc:	2002      	movs	r0, #2
 8006ece:	f7fe ffe1 	bl	8005e94 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8006ed2:	4b27      	ldr	r3, [pc, #156]	@ (8006f70 <ssd1306_TestRectangleInvert+0xac>)
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	9200      	str	r2, [sp, #0]
 8006ed8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006eda:	4826      	ldr	r0, [pc, #152]	@ (8006f74 <ssd1306_TestRectangleInvert+0xb0>)
 8006edc:	f7fe ffb4 	bl	8005e48 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 20);
 8006ee0:	2114      	movs	r1, #20
 8006ee2:	2002      	movs	r0, #2
 8006ee4:	f7fe ffd6 	bl	8005e94 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8006ee8:	4b21      	ldr	r3, [pc, #132]	@ (8006f70 <ssd1306_TestRectangleInvert+0xac>)
 8006eea:	2201      	movs	r2, #1
 8006eec:	9200      	str	r2, [sp, #0]
 8006eee:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006ef0:	4821      	ldr	r0, [pc, #132]	@ (8006f78 <ssd1306_TestRectangleInvert+0xb4>)
 8006ef2:	f7fe ffa9 	bl	8005e48 <ssd1306_WriteString>
  ssd1306_SetCursor(2, 40);
 8006ef6:	2128      	movs	r1, #40	@ 0x28
 8006ef8:	2002      	movs	r0, #2
 8006efa:	f7fe ffcb 	bl	8005e94 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8006efe:	4b1c      	ldr	r3, [pc, #112]	@ (8006f70 <ssd1306_TestRectangleInvert+0xac>)
 8006f00:	2201      	movs	r2, #1
 8006f02:	9200      	str	r2, [sp, #0]
 8006f04:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f06:	481d      	ldr	r0, [pc, #116]	@ (8006f7c <ssd1306_TestRectangleInvert+0xb8>)
 8006f08:	f7fe ff9e 	bl	8005e48 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 0);
 8006f0c:	2100      	movs	r1, #0
 8006f0e:	2042      	movs	r0, #66	@ 0x42
 8006f10:	f7fe ffc0 	bl	8005e94 <ssd1306_SetCursor>
  ssd1306_WriteString("White", Font_11x18, White);
 8006f14:	4b16      	ldr	r3, [pc, #88]	@ (8006f70 <ssd1306_TestRectangleInvert+0xac>)
 8006f16:	2201      	movs	r2, #1
 8006f18:	9200      	str	r2, [sp, #0]
 8006f1a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f1c:	4817      	ldr	r0, [pc, #92]	@ (8006f7c <ssd1306_TestRectangleInvert+0xb8>)
 8006f1e:	f7fe ff93 	bl	8005e48 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 20);
 8006f22:	2114      	movs	r1, #20
 8006f24:	2042      	movs	r0, #66	@ 0x42
 8006f26:	f7fe ffb5 	bl	8005e94 <ssd1306_SetCursor>
  ssd1306_WriteString("on", Font_11x18, White);
 8006f2a:	4b11      	ldr	r3, [pc, #68]	@ (8006f70 <ssd1306_TestRectangleInvert+0xac>)
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	9200      	str	r2, [sp, #0]
 8006f30:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f32:	4811      	ldr	r0, [pc, #68]	@ (8006f78 <ssd1306_TestRectangleInvert+0xb4>)
 8006f34:	f7fe ff88 	bl	8005e48 <ssd1306_WriteString>
  ssd1306_SetCursor(66, 40);
 8006f38:	2128      	movs	r1, #40	@ 0x28
 8006f3a:	2042      	movs	r0, #66	@ 0x42
 8006f3c:	f7fe ffaa 	bl	8005e94 <ssd1306_SetCursor>
  ssd1306_WriteString("Black", Font_11x18, White);
 8006f40:	4b0b      	ldr	r3, [pc, #44]	@ (8006f70 <ssd1306_TestRectangleInvert+0xac>)
 8006f42:	2201      	movs	r2, #1
 8006f44:	9200      	str	r2, [sp, #0]
 8006f46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006f48:	480a      	ldr	r0, [pc, #40]	@ (8006f74 <ssd1306_TestRectangleInvert+0xb0>)
 8006f4a:	f7fe ff7d 	bl	8005e48 <ssd1306_WriteString>
#else
  ssd1306_FillCircle(32, 32, 20, White);
  ssd1306_FillCircle(96, 32, 20, White);
#endif
  ssd1306_InvertRectangle(0,0,63,63);
 8006f4e:	233f      	movs	r3, #63	@ 0x3f
 8006f50:	223f      	movs	r2, #63	@ 0x3f
 8006f52:	2100      	movs	r1, #0
 8006f54:	2000      	movs	r0, #0
 8006f56:	f7ff fc41 	bl	80067dc <ssd1306_InvertRectangle>
  /* Test rectangle lies on one 8px page */
  ssd1306_InvertRectangle(2,58,125,60);
 8006f5a:	233c      	movs	r3, #60	@ 0x3c
 8006f5c:	227d      	movs	r2, #125	@ 0x7d
 8006f5e:	213a      	movs	r1, #58	@ 0x3a
 8006f60:	2002      	movs	r0, #2
 8006f62:	f7ff fc3b 	bl	80067dc <ssd1306_InvertRectangle>
  ssd1306_UpdateScreen();
 8006f66:	f7fe fe61 	bl	8005c2c <ssd1306_UpdateScreen>
}
 8006f6a:	bf00      	nop
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}
 8006f70:	0801057c 	.word	0x0801057c
 8006f74:	0800c520 	.word	0x0800c520
 8006f78:	0800c528 	.word	0x0800c528
 8006f7c:	0800c52c 	.word	0x0800c52c

08006f80 <ssd1306_TestCircle>:

void ssd1306_TestCircle() {
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b082      	sub	sp, #8
 8006f84:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8006f86:	2300      	movs	r3, #0
 8006f88:	607b      	str	r3, [r7, #4]
 8006f8a:	e010      	b.n	8006fae <ssd1306_TestCircle+0x2e>
    ssd1306_DrawCircle(20*delta+30, 15, 10, White);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	461a      	mov	r2, r3
 8006f92:	0092      	lsls	r2, r2, #2
 8006f94:	4413      	add	r3, r2
 8006f96:	009b      	lsls	r3, r3, #2
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	331e      	adds	r3, #30
 8006f9c:	b2d8      	uxtb	r0, r3
 8006f9e:	2301      	movs	r3, #1
 8006fa0:	220a      	movs	r2, #10
 8006fa2:	210f      	movs	r1, #15
 8006fa4:	f7ff fa9a 	bl	80064dc <ssd1306_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	3301      	adds	r3, #1
 8006fac:	607b      	str	r3, [r7, #4]
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	2b04      	cmp	r3, #4
 8006fb2:	d9eb      	bls.n	8006f8c <ssd1306_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	607b      	str	r3, [r7, #4]
 8006fb8:	e011      	b.n	8006fde <ssd1306_TestCircle+0x5e>
    ssd1306_FillCircle(23*delta+15, 40, 10, White);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	0052      	lsls	r2, r2, #1
 8006fc2:	441a      	add	r2, r3
 8006fc4:	00d2      	lsls	r2, r2, #3
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	b2db      	uxtb	r3, r3
 8006fca:	330f      	adds	r3, #15
 8006fcc:	b2d8      	uxtb	r0, r3
 8006fce:	2301      	movs	r3, #1
 8006fd0:	220a      	movs	r2, #10
 8006fd2:	2128      	movs	r1, #40	@ 0x28
 8006fd4:	f7ff fb09 	bl	80065ea <ssd1306_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	607b      	str	r3, [r7, #4]
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2b04      	cmp	r3, #4
 8006fe2:	d9ea      	bls.n	8006fba <ssd1306_TestCircle+0x3a>
  }

  ssd1306_UpdateScreen();
 8006fe4:	f7fe fe22 	bl	8005c2c <ssd1306_UpdateScreen>
  return;
 8006fe8:	bf00      	nop
}
 8006fea:	3708      	adds	r7, #8
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}

08006ff0 <ssd1306_TestArc>:

void ssd1306_TestArc() {
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b082      	sub	sp, #8
 8006ff4:	af02      	add	r7, sp, #8
  ssd1306_DrawArc(30, 30, 30, 20, 270, White);
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	9301      	str	r3, [sp, #4]
 8006ffa:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	2314      	movs	r3, #20
 8007002:	221e      	movs	r2, #30
 8007004:	211e      	movs	r1, #30
 8007006:	201e      	movs	r0, #30
 8007008:	f7ff f840 	bl	800608c <ssd1306_DrawArc>
  ssd1306_DrawArcWithRadiusLine(80, 55, 10, 30, 270, White);
 800700c:	2301      	movs	r3, #1
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8007014:	9300      	str	r3, [sp, #0]
 8007016:	231e      	movs	r3, #30
 8007018:	220a      	movs	r2, #10
 800701a:	2137      	movs	r1, #55	@ 0x37
 800701c:	2050      	movs	r0, #80	@ 0x50
 800701e:	f7ff f91d 	bl	800625c <ssd1306_DrawArcWithRadiusLine>
  ssd1306_UpdateScreen();
 8007022:	f7fe fe03 	bl	8005c2c <ssd1306_UpdateScreen>
  return;
 8007026:	bf00      	nop
}
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <ssd1306_TestPolyline>:

void ssd1306_TestPolyline() {
 800702c:	b590      	push	{r4, r7, lr}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
  SSD1306_VERTEX loc_vertex[] =
 8007032:	4b08      	ldr	r3, [pc, #32]	@ (8007054 <ssd1306_TestPolyline+0x28>)
 8007034:	463c      	mov	r4, r7
 8007036:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007038:	c407      	stmia	r4!, {r0, r1, r2}
 800703a:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  ssd1306_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),White);
 800703c:	463b      	mov	r3, r7
 800703e:	2201      	movs	r2, #1
 8007040:	2107      	movs	r1, #7
 8007042:	4618      	mov	r0, r3
 8007044:	f7fe ffaa 	bl	8005f9c <ssd1306_Polyline>
  ssd1306_UpdateScreen();
 8007048:	f7fe fdf0 	bl	8005c2c <ssd1306_UpdateScreen>
  return;
 800704c:	bf00      	nop
}
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	bd90      	pop	{r4, r7, pc}
 8007054:	0800c534 	.word	0x0800c534

08007058 <ssd1306_TestDrawBitmap>:

void ssd1306_TestDrawBitmap()
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b082      	sub	sp, #8
 800705c:	af02      	add	r7, sp, #8
    ssd1306_Fill(White);
 800705e:	2001      	movs	r0, #1
 8007060:	f7fe fdcc 	bl	8005bfc <ssd1306_Fill>
    ssd1306_DrawBitmap(0,0,garfield_128x64,128,64,Black);
 8007064:	2300      	movs	r3, #0
 8007066:	9301      	str	r3, [sp, #4]
 8007068:	2340      	movs	r3, #64	@ 0x40
 800706a:	9300      	str	r3, [sp, #0]
 800706c:	2380      	movs	r3, #128	@ 0x80
 800706e:	4a18      	ldr	r2, [pc, #96]	@ (80070d0 <ssd1306_TestDrawBitmap+0x78>)
 8007070:	2100      	movs	r1, #0
 8007072:	2000      	movs	r0, #0
 8007074:	f7ff fc6e 	bl	8006954 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 8007078:	f7fe fdd8 	bl	8005c2c <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 800707c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007080:	f7fb fb5e 	bl	8002740 <HAL_Delay>
    ssd1306_Fill(Black);
 8007084:	2000      	movs	r0, #0
 8007086:	f7fe fdb9 	bl	8005bfc <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,White);
 800708a:	2301      	movs	r3, #1
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	2340      	movs	r3, #64	@ 0x40
 8007090:	9300      	str	r3, [sp, #0]
 8007092:	2340      	movs	r3, #64	@ 0x40
 8007094:	4a0f      	ldr	r2, [pc, #60]	@ (80070d4 <ssd1306_TestDrawBitmap+0x7c>)
 8007096:	2100      	movs	r1, #0
 8007098:	2020      	movs	r0, #32
 800709a:	f7ff fc5b 	bl	8006954 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 800709e:	f7fe fdc5 	bl	8005c2c <ssd1306_UpdateScreen>
    HAL_Delay(3000);
 80070a2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80070a6:	f7fb fb4b 	bl	8002740 <HAL_Delay>
    ssd1306_Fill(White);
 80070aa:	2001      	movs	r0, #1
 80070ac:	f7fe fda6 	bl	8005bfc <ssd1306_Fill>
    ssd1306_DrawBitmap(32,0,github_logo_64x64,64,64,Black);
 80070b0:	2300      	movs	r3, #0
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	2340      	movs	r3, #64	@ 0x40
 80070b6:	9300      	str	r3, [sp, #0]
 80070b8:	2340      	movs	r3, #64	@ 0x40
 80070ba:	4a06      	ldr	r2, [pc, #24]	@ (80070d4 <ssd1306_TestDrawBitmap+0x7c>)
 80070bc:	2100      	movs	r1, #0
 80070be:	2020      	movs	r0, #32
 80070c0:	f7ff fc48 	bl	8006954 <ssd1306_DrawBitmap>
    ssd1306_UpdateScreen();
 80070c4:	f7fe fdb2 	bl	8005c2c <ssd1306_UpdateScreen>
}
 80070c8:	bf00      	nop
 80070ca:	46bd      	mov	sp, r7
 80070cc:	bd80      	pop	{r7, pc}
 80070ce:	bf00      	nop
 80070d0:	080105a0 	.word	0x080105a0
 80070d4:	080109a0 	.word	0x080109a0

080070d8 <ssd1306_TestAll>:

void ssd1306_TestAll() {
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
    ssd1306_Init();
 80070dc:	f7fe fd24 	bl	8005b28 <ssd1306_Init>

    ssd1306_TestFPS();
 80070e0:	f7ff fdd4 	bl	8006c8c <ssd1306_TestFPS>
    HAL_Delay(3000);
 80070e4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80070e8:	f7fb fb2a 	bl	8002740 <HAL_Delay>
    ssd1306_TestBorder();
 80070ec:	f7ff fcbe 	bl	8006a6c <ssd1306_TestBorder>
    ssd1306_TestFonts1();
 80070f0:	f7ff fd06 	bl	8006b00 <ssd1306_TestFonts1>
    HAL_Delay(3000);
 80070f4:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80070f8:	f7fb fb22 	bl	8002740 <HAL_Delay>
    ssd1306_TestFonts2();
 80070fc:	f7ff fd58 	bl	8006bb0 <ssd1306_TestFonts2>
    HAL_Delay(3000);
 8007100:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007104:	f7fb fb1c 	bl	8002740 <HAL_Delay>
    ssd1306_TestFonts3();
 8007108:	f7ff fd8c 	bl	8006c24 <ssd1306_TestFonts3>
    HAL_Delay(3000);
 800710c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007110:	f7fb fb16 	bl	8002740 <HAL_Delay>
    ssd1306_Fill(Black);
 8007114:	2000      	movs	r0, #0
 8007116:	f7fe fd71 	bl	8005bfc <ssd1306_Fill>
    ssd1306_TestRectangle();
 800711a:	f7ff fe73 	bl	8006e04 <ssd1306_TestRectangle>
    ssd1306_TestLine();
 800711e:	f7ff fe59 	bl	8006dd4 <ssd1306_TestLine>
    HAL_Delay(3000);
 8007122:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007126:	f7fb fb0b 	bl	8002740 <HAL_Delay>
    ssd1306_Fill(Black);
 800712a:	2000      	movs	r0, #0
 800712c:	f7fe fd66 	bl	8005bfc <ssd1306_Fill>
    ssd1306_TestRectangleFill();
 8007130:	f7ff fea0 	bl	8006e74 <ssd1306_TestRectangleFill>
    HAL_Delay(3000);
 8007134:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007138:	f7fb fb02 	bl	8002740 <HAL_Delay>
    ssd1306_Fill(Black);
 800713c:	2000      	movs	r0, #0
 800713e:	f7fe fd5d 	bl	8005bfc <ssd1306_Fill>
    ssd1306_TestRectangleInvert();
 8007142:	f7ff febf 	bl	8006ec4 <ssd1306_TestRectangleInvert>
    HAL_Delay(3000);
 8007146:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800714a:	f7fb faf9 	bl	8002740 <HAL_Delay>
    ssd1306_Fill(Black);
 800714e:	2000      	movs	r0, #0
 8007150:	f7fe fd54 	bl	8005bfc <ssd1306_Fill>
    ssd1306_TestPolyline();
 8007154:	f7ff ff6a 	bl	800702c <ssd1306_TestPolyline>
    HAL_Delay(3000);
 8007158:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800715c:	f7fb faf0 	bl	8002740 <HAL_Delay>
    ssd1306_Fill(Black);
 8007160:	2000      	movs	r0, #0
 8007162:	f7fe fd4b 	bl	8005bfc <ssd1306_Fill>
    ssd1306_TestArc();
 8007166:	f7ff ff43 	bl	8006ff0 <ssd1306_TestArc>
    HAL_Delay(3000);
 800716a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800716e:	f7fb fae7 	bl	8002740 <HAL_Delay>
    ssd1306_Fill(Black);
 8007172:	2000      	movs	r0, #0
 8007174:	f7fe fd42 	bl	8005bfc <ssd1306_Fill>
    ssd1306_TestCircle();
 8007178:	f7ff ff02 	bl	8006f80 <ssd1306_TestCircle>
    HAL_Delay(3000);
 800717c:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8007180:	f7fb fade 	bl	8002740 <HAL_Delay>
    ssd1306_TestDrawBitmap();
 8007184:	f7ff ff68 	bl	8007058 <ssd1306_TestDrawBitmap>
    HAL_Delay(3000);
 8007188:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800718c:	f7fb fad8 	bl	8002740 <HAL_Delay>
}
 8007190:	bf00      	nop
 8007192:	bd80      	pop	{r7, pc}

08007194 <__cvt>:
 8007194:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007198:	ec57 6b10 	vmov	r6, r7, d0
 800719c:	2f00      	cmp	r7, #0
 800719e:	460c      	mov	r4, r1
 80071a0:	4619      	mov	r1, r3
 80071a2:	463b      	mov	r3, r7
 80071a4:	bfbb      	ittet	lt
 80071a6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80071aa:	461f      	movlt	r7, r3
 80071ac:	2300      	movge	r3, #0
 80071ae:	232d      	movlt	r3, #45	@ 0x2d
 80071b0:	700b      	strb	r3, [r1, #0]
 80071b2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80071b4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80071b8:	4691      	mov	r9, r2
 80071ba:	f023 0820 	bic.w	r8, r3, #32
 80071be:	bfbc      	itt	lt
 80071c0:	4632      	movlt	r2, r6
 80071c2:	4616      	movlt	r6, r2
 80071c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80071c8:	d005      	beq.n	80071d6 <__cvt+0x42>
 80071ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80071ce:	d100      	bne.n	80071d2 <__cvt+0x3e>
 80071d0:	3401      	adds	r4, #1
 80071d2:	2102      	movs	r1, #2
 80071d4:	e000      	b.n	80071d8 <__cvt+0x44>
 80071d6:	2103      	movs	r1, #3
 80071d8:	ab03      	add	r3, sp, #12
 80071da:	9301      	str	r3, [sp, #4]
 80071dc:	ab02      	add	r3, sp, #8
 80071de:	9300      	str	r3, [sp, #0]
 80071e0:	ec47 6b10 	vmov	d0, r6, r7
 80071e4:	4653      	mov	r3, sl
 80071e6:	4622      	mov	r2, r4
 80071e8:	f001 fee6 	bl	8008fb8 <_dtoa_r>
 80071ec:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80071f0:	4605      	mov	r5, r0
 80071f2:	d119      	bne.n	8007228 <__cvt+0x94>
 80071f4:	f019 0f01 	tst.w	r9, #1
 80071f8:	d00e      	beq.n	8007218 <__cvt+0x84>
 80071fa:	eb00 0904 	add.w	r9, r0, r4
 80071fe:	2200      	movs	r2, #0
 8007200:	2300      	movs	r3, #0
 8007202:	4630      	mov	r0, r6
 8007204:	4639      	mov	r1, r7
 8007206:	f7f9 fc5f 	bl	8000ac8 <__aeabi_dcmpeq>
 800720a:	b108      	cbz	r0, 8007210 <__cvt+0x7c>
 800720c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007210:	2230      	movs	r2, #48	@ 0x30
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	454b      	cmp	r3, r9
 8007216:	d31e      	bcc.n	8007256 <__cvt+0xc2>
 8007218:	9b03      	ldr	r3, [sp, #12]
 800721a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800721c:	1b5b      	subs	r3, r3, r5
 800721e:	4628      	mov	r0, r5
 8007220:	6013      	str	r3, [r2, #0]
 8007222:	b004      	add	sp, #16
 8007224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007228:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800722c:	eb00 0904 	add.w	r9, r0, r4
 8007230:	d1e5      	bne.n	80071fe <__cvt+0x6a>
 8007232:	7803      	ldrb	r3, [r0, #0]
 8007234:	2b30      	cmp	r3, #48	@ 0x30
 8007236:	d10a      	bne.n	800724e <__cvt+0xba>
 8007238:	2200      	movs	r2, #0
 800723a:	2300      	movs	r3, #0
 800723c:	4630      	mov	r0, r6
 800723e:	4639      	mov	r1, r7
 8007240:	f7f9 fc42 	bl	8000ac8 <__aeabi_dcmpeq>
 8007244:	b918      	cbnz	r0, 800724e <__cvt+0xba>
 8007246:	f1c4 0401 	rsb	r4, r4, #1
 800724a:	f8ca 4000 	str.w	r4, [sl]
 800724e:	f8da 3000 	ldr.w	r3, [sl]
 8007252:	4499      	add	r9, r3
 8007254:	e7d3      	b.n	80071fe <__cvt+0x6a>
 8007256:	1c59      	adds	r1, r3, #1
 8007258:	9103      	str	r1, [sp, #12]
 800725a:	701a      	strb	r2, [r3, #0]
 800725c:	e7d9      	b.n	8007212 <__cvt+0x7e>

0800725e <__exponent>:
 800725e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007260:	2900      	cmp	r1, #0
 8007262:	bfba      	itte	lt
 8007264:	4249      	neglt	r1, r1
 8007266:	232d      	movlt	r3, #45	@ 0x2d
 8007268:	232b      	movge	r3, #43	@ 0x2b
 800726a:	2909      	cmp	r1, #9
 800726c:	7002      	strb	r2, [r0, #0]
 800726e:	7043      	strb	r3, [r0, #1]
 8007270:	dd29      	ble.n	80072c6 <__exponent+0x68>
 8007272:	f10d 0307 	add.w	r3, sp, #7
 8007276:	461d      	mov	r5, r3
 8007278:	270a      	movs	r7, #10
 800727a:	461a      	mov	r2, r3
 800727c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007280:	fb07 1416 	mls	r4, r7, r6, r1
 8007284:	3430      	adds	r4, #48	@ 0x30
 8007286:	f802 4c01 	strb.w	r4, [r2, #-1]
 800728a:	460c      	mov	r4, r1
 800728c:	2c63      	cmp	r4, #99	@ 0x63
 800728e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007292:	4631      	mov	r1, r6
 8007294:	dcf1      	bgt.n	800727a <__exponent+0x1c>
 8007296:	3130      	adds	r1, #48	@ 0x30
 8007298:	1e94      	subs	r4, r2, #2
 800729a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800729e:	1c41      	adds	r1, r0, #1
 80072a0:	4623      	mov	r3, r4
 80072a2:	42ab      	cmp	r3, r5
 80072a4:	d30a      	bcc.n	80072bc <__exponent+0x5e>
 80072a6:	f10d 0309 	add.w	r3, sp, #9
 80072aa:	1a9b      	subs	r3, r3, r2
 80072ac:	42ac      	cmp	r4, r5
 80072ae:	bf88      	it	hi
 80072b0:	2300      	movhi	r3, #0
 80072b2:	3302      	adds	r3, #2
 80072b4:	4403      	add	r3, r0
 80072b6:	1a18      	subs	r0, r3, r0
 80072b8:	b003      	add	sp, #12
 80072ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80072bc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80072c0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80072c4:	e7ed      	b.n	80072a2 <__exponent+0x44>
 80072c6:	2330      	movs	r3, #48	@ 0x30
 80072c8:	3130      	adds	r1, #48	@ 0x30
 80072ca:	7083      	strb	r3, [r0, #2]
 80072cc:	70c1      	strb	r1, [r0, #3]
 80072ce:	1d03      	adds	r3, r0, #4
 80072d0:	e7f1      	b.n	80072b6 <__exponent+0x58>
	...

080072d4 <_printf_float>:
 80072d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d8:	b08d      	sub	sp, #52	@ 0x34
 80072da:	460c      	mov	r4, r1
 80072dc:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80072e0:	4616      	mov	r6, r2
 80072e2:	461f      	mov	r7, r3
 80072e4:	4605      	mov	r5, r0
 80072e6:	f001 fd8f 	bl	8008e08 <_localeconv_r>
 80072ea:	6803      	ldr	r3, [r0, #0]
 80072ec:	9304      	str	r3, [sp, #16]
 80072ee:	4618      	mov	r0, r3
 80072f0:	f7f8 ffbe 	bl	8000270 <strlen>
 80072f4:	2300      	movs	r3, #0
 80072f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80072f8:	f8d8 3000 	ldr.w	r3, [r8]
 80072fc:	9005      	str	r0, [sp, #20]
 80072fe:	3307      	adds	r3, #7
 8007300:	f023 0307 	bic.w	r3, r3, #7
 8007304:	f103 0208 	add.w	r2, r3, #8
 8007308:	f894 a018 	ldrb.w	sl, [r4, #24]
 800730c:	f8d4 b000 	ldr.w	fp, [r4]
 8007310:	f8c8 2000 	str.w	r2, [r8]
 8007314:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007318:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800731c:	9307      	str	r3, [sp, #28]
 800731e:	f8cd 8018 	str.w	r8, [sp, #24]
 8007322:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007326:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800732a:	4b9c      	ldr	r3, [pc, #624]	@ (800759c <_printf_float+0x2c8>)
 800732c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007330:	f7f9 fbfc 	bl	8000b2c <__aeabi_dcmpun>
 8007334:	bb70      	cbnz	r0, 8007394 <_printf_float+0xc0>
 8007336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800733a:	4b98      	ldr	r3, [pc, #608]	@ (800759c <_printf_float+0x2c8>)
 800733c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007340:	f7f9 fbd6 	bl	8000af0 <__aeabi_dcmple>
 8007344:	bb30      	cbnz	r0, 8007394 <_printf_float+0xc0>
 8007346:	2200      	movs	r2, #0
 8007348:	2300      	movs	r3, #0
 800734a:	4640      	mov	r0, r8
 800734c:	4649      	mov	r1, r9
 800734e:	f7f9 fbc5 	bl	8000adc <__aeabi_dcmplt>
 8007352:	b110      	cbz	r0, 800735a <_printf_float+0x86>
 8007354:	232d      	movs	r3, #45	@ 0x2d
 8007356:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800735a:	4a91      	ldr	r2, [pc, #580]	@ (80075a0 <_printf_float+0x2cc>)
 800735c:	4b91      	ldr	r3, [pc, #580]	@ (80075a4 <_printf_float+0x2d0>)
 800735e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007362:	bf94      	ite	ls
 8007364:	4690      	movls	r8, r2
 8007366:	4698      	movhi	r8, r3
 8007368:	2303      	movs	r3, #3
 800736a:	6123      	str	r3, [r4, #16]
 800736c:	f02b 0304 	bic.w	r3, fp, #4
 8007370:	6023      	str	r3, [r4, #0]
 8007372:	f04f 0900 	mov.w	r9, #0
 8007376:	9700      	str	r7, [sp, #0]
 8007378:	4633      	mov	r3, r6
 800737a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800737c:	4621      	mov	r1, r4
 800737e:	4628      	mov	r0, r5
 8007380:	f000 f9d2 	bl	8007728 <_printf_common>
 8007384:	3001      	adds	r0, #1
 8007386:	f040 808d 	bne.w	80074a4 <_printf_float+0x1d0>
 800738a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800738e:	b00d      	add	sp, #52	@ 0x34
 8007390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007394:	4642      	mov	r2, r8
 8007396:	464b      	mov	r3, r9
 8007398:	4640      	mov	r0, r8
 800739a:	4649      	mov	r1, r9
 800739c:	f7f9 fbc6 	bl	8000b2c <__aeabi_dcmpun>
 80073a0:	b140      	cbz	r0, 80073b4 <_printf_float+0xe0>
 80073a2:	464b      	mov	r3, r9
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	bfbc      	itt	lt
 80073a8:	232d      	movlt	r3, #45	@ 0x2d
 80073aa:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80073ae:	4a7e      	ldr	r2, [pc, #504]	@ (80075a8 <_printf_float+0x2d4>)
 80073b0:	4b7e      	ldr	r3, [pc, #504]	@ (80075ac <_printf_float+0x2d8>)
 80073b2:	e7d4      	b.n	800735e <_printf_float+0x8a>
 80073b4:	6863      	ldr	r3, [r4, #4]
 80073b6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80073ba:	9206      	str	r2, [sp, #24]
 80073bc:	1c5a      	adds	r2, r3, #1
 80073be:	d13b      	bne.n	8007438 <_printf_float+0x164>
 80073c0:	2306      	movs	r3, #6
 80073c2:	6063      	str	r3, [r4, #4]
 80073c4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80073c8:	2300      	movs	r3, #0
 80073ca:	6022      	str	r2, [r4, #0]
 80073cc:	9303      	str	r3, [sp, #12]
 80073ce:	ab0a      	add	r3, sp, #40	@ 0x28
 80073d0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80073d4:	ab09      	add	r3, sp, #36	@ 0x24
 80073d6:	9300      	str	r3, [sp, #0]
 80073d8:	6861      	ldr	r1, [r4, #4]
 80073da:	ec49 8b10 	vmov	d0, r8, r9
 80073de:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80073e2:	4628      	mov	r0, r5
 80073e4:	f7ff fed6 	bl	8007194 <__cvt>
 80073e8:	9b06      	ldr	r3, [sp, #24]
 80073ea:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80073ec:	2b47      	cmp	r3, #71	@ 0x47
 80073ee:	4680      	mov	r8, r0
 80073f0:	d129      	bne.n	8007446 <_printf_float+0x172>
 80073f2:	1cc8      	adds	r0, r1, #3
 80073f4:	db02      	blt.n	80073fc <_printf_float+0x128>
 80073f6:	6863      	ldr	r3, [r4, #4]
 80073f8:	4299      	cmp	r1, r3
 80073fa:	dd41      	ble.n	8007480 <_printf_float+0x1ac>
 80073fc:	f1aa 0a02 	sub.w	sl, sl, #2
 8007400:	fa5f fa8a 	uxtb.w	sl, sl
 8007404:	3901      	subs	r1, #1
 8007406:	4652      	mov	r2, sl
 8007408:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800740c:	9109      	str	r1, [sp, #36]	@ 0x24
 800740e:	f7ff ff26 	bl	800725e <__exponent>
 8007412:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007414:	1813      	adds	r3, r2, r0
 8007416:	2a01      	cmp	r2, #1
 8007418:	4681      	mov	r9, r0
 800741a:	6123      	str	r3, [r4, #16]
 800741c:	dc02      	bgt.n	8007424 <_printf_float+0x150>
 800741e:	6822      	ldr	r2, [r4, #0]
 8007420:	07d2      	lsls	r2, r2, #31
 8007422:	d501      	bpl.n	8007428 <_printf_float+0x154>
 8007424:	3301      	adds	r3, #1
 8007426:	6123      	str	r3, [r4, #16]
 8007428:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800742c:	2b00      	cmp	r3, #0
 800742e:	d0a2      	beq.n	8007376 <_printf_float+0xa2>
 8007430:	232d      	movs	r3, #45	@ 0x2d
 8007432:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007436:	e79e      	b.n	8007376 <_printf_float+0xa2>
 8007438:	9a06      	ldr	r2, [sp, #24]
 800743a:	2a47      	cmp	r2, #71	@ 0x47
 800743c:	d1c2      	bne.n	80073c4 <_printf_float+0xf0>
 800743e:	2b00      	cmp	r3, #0
 8007440:	d1c0      	bne.n	80073c4 <_printf_float+0xf0>
 8007442:	2301      	movs	r3, #1
 8007444:	e7bd      	b.n	80073c2 <_printf_float+0xee>
 8007446:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800744a:	d9db      	bls.n	8007404 <_printf_float+0x130>
 800744c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007450:	d118      	bne.n	8007484 <_printf_float+0x1b0>
 8007452:	2900      	cmp	r1, #0
 8007454:	6863      	ldr	r3, [r4, #4]
 8007456:	dd0b      	ble.n	8007470 <_printf_float+0x19c>
 8007458:	6121      	str	r1, [r4, #16]
 800745a:	b913      	cbnz	r3, 8007462 <_printf_float+0x18e>
 800745c:	6822      	ldr	r2, [r4, #0]
 800745e:	07d0      	lsls	r0, r2, #31
 8007460:	d502      	bpl.n	8007468 <_printf_float+0x194>
 8007462:	3301      	adds	r3, #1
 8007464:	440b      	add	r3, r1
 8007466:	6123      	str	r3, [r4, #16]
 8007468:	65a1      	str	r1, [r4, #88]	@ 0x58
 800746a:	f04f 0900 	mov.w	r9, #0
 800746e:	e7db      	b.n	8007428 <_printf_float+0x154>
 8007470:	b913      	cbnz	r3, 8007478 <_printf_float+0x1a4>
 8007472:	6822      	ldr	r2, [r4, #0]
 8007474:	07d2      	lsls	r2, r2, #31
 8007476:	d501      	bpl.n	800747c <_printf_float+0x1a8>
 8007478:	3302      	adds	r3, #2
 800747a:	e7f4      	b.n	8007466 <_printf_float+0x192>
 800747c:	2301      	movs	r3, #1
 800747e:	e7f2      	b.n	8007466 <_printf_float+0x192>
 8007480:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007484:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007486:	4299      	cmp	r1, r3
 8007488:	db05      	blt.n	8007496 <_printf_float+0x1c2>
 800748a:	6823      	ldr	r3, [r4, #0]
 800748c:	6121      	str	r1, [r4, #16]
 800748e:	07d8      	lsls	r0, r3, #31
 8007490:	d5ea      	bpl.n	8007468 <_printf_float+0x194>
 8007492:	1c4b      	adds	r3, r1, #1
 8007494:	e7e7      	b.n	8007466 <_printf_float+0x192>
 8007496:	2900      	cmp	r1, #0
 8007498:	bfd4      	ite	le
 800749a:	f1c1 0202 	rsble	r2, r1, #2
 800749e:	2201      	movgt	r2, #1
 80074a0:	4413      	add	r3, r2
 80074a2:	e7e0      	b.n	8007466 <_printf_float+0x192>
 80074a4:	6823      	ldr	r3, [r4, #0]
 80074a6:	055a      	lsls	r2, r3, #21
 80074a8:	d407      	bmi.n	80074ba <_printf_float+0x1e6>
 80074aa:	6923      	ldr	r3, [r4, #16]
 80074ac:	4642      	mov	r2, r8
 80074ae:	4631      	mov	r1, r6
 80074b0:	4628      	mov	r0, r5
 80074b2:	47b8      	blx	r7
 80074b4:	3001      	adds	r0, #1
 80074b6:	d12b      	bne.n	8007510 <_printf_float+0x23c>
 80074b8:	e767      	b.n	800738a <_printf_float+0xb6>
 80074ba:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80074be:	f240 80dd 	bls.w	800767c <_printf_float+0x3a8>
 80074c2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80074c6:	2200      	movs	r2, #0
 80074c8:	2300      	movs	r3, #0
 80074ca:	f7f9 fafd 	bl	8000ac8 <__aeabi_dcmpeq>
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d033      	beq.n	800753a <_printf_float+0x266>
 80074d2:	4a37      	ldr	r2, [pc, #220]	@ (80075b0 <_printf_float+0x2dc>)
 80074d4:	2301      	movs	r3, #1
 80074d6:	4631      	mov	r1, r6
 80074d8:	4628      	mov	r0, r5
 80074da:	47b8      	blx	r7
 80074dc:	3001      	adds	r0, #1
 80074de:	f43f af54 	beq.w	800738a <_printf_float+0xb6>
 80074e2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80074e6:	4543      	cmp	r3, r8
 80074e8:	db02      	blt.n	80074f0 <_printf_float+0x21c>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	07d8      	lsls	r0, r3, #31
 80074ee:	d50f      	bpl.n	8007510 <_printf_float+0x23c>
 80074f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80074f4:	4631      	mov	r1, r6
 80074f6:	4628      	mov	r0, r5
 80074f8:	47b8      	blx	r7
 80074fa:	3001      	adds	r0, #1
 80074fc:	f43f af45 	beq.w	800738a <_printf_float+0xb6>
 8007500:	f04f 0900 	mov.w	r9, #0
 8007504:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8007508:	f104 0a1a 	add.w	sl, r4, #26
 800750c:	45c8      	cmp	r8, r9
 800750e:	dc09      	bgt.n	8007524 <_printf_float+0x250>
 8007510:	6823      	ldr	r3, [r4, #0]
 8007512:	079b      	lsls	r3, r3, #30
 8007514:	f100 8103 	bmi.w	800771e <_printf_float+0x44a>
 8007518:	68e0      	ldr	r0, [r4, #12]
 800751a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800751c:	4298      	cmp	r0, r3
 800751e:	bfb8      	it	lt
 8007520:	4618      	movlt	r0, r3
 8007522:	e734      	b.n	800738e <_printf_float+0xba>
 8007524:	2301      	movs	r3, #1
 8007526:	4652      	mov	r2, sl
 8007528:	4631      	mov	r1, r6
 800752a:	4628      	mov	r0, r5
 800752c:	47b8      	blx	r7
 800752e:	3001      	adds	r0, #1
 8007530:	f43f af2b 	beq.w	800738a <_printf_float+0xb6>
 8007534:	f109 0901 	add.w	r9, r9, #1
 8007538:	e7e8      	b.n	800750c <_printf_float+0x238>
 800753a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800753c:	2b00      	cmp	r3, #0
 800753e:	dc39      	bgt.n	80075b4 <_printf_float+0x2e0>
 8007540:	4a1b      	ldr	r2, [pc, #108]	@ (80075b0 <_printf_float+0x2dc>)
 8007542:	2301      	movs	r3, #1
 8007544:	4631      	mov	r1, r6
 8007546:	4628      	mov	r0, r5
 8007548:	47b8      	blx	r7
 800754a:	3001      	adds	r0, #1
 800754c:	f43f af1d 	beq.w	800738a <_printf_float+0xb6>
 8007550:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8007554:	ea59 0303 	orrs.w	r3, r9, r3
 8007558:	d102      	bne.n	8007560 <_printf_float+0x28c>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	07d9      	lsls	r1, r3, #31
 800755e:	d5d7      	bpl.n	8007510 <_printf_float+0x23c>
 8007560:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007564:	4631      	mov	r1, r6
 8007566:	4628      	mov	r0, r5
 8007568:	47b8      	blx	r7
 800756a:	3001      	adds	r0, #1
 800756c:	f43f af0d 	beq.w	800738a <_printf_float+0xb6>
 8007570:	f04f 0a00 	mov.w	sl, #0
 8007574:	f104 0b1a 	add.w	fp, r4, #26
 8007578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800757a:	425b      	negs	r3, r3
 800757c:	4553      	cmp	r3, sl
 800757e:	dc01      	bgt.n	8007584 <_printf_float+0x2b0>
 8007580:	464b      	mov	r3, r9
 8007582:	e793      	b.n	80074ac <_printf_float+0x1d8>
 8007584:	2301      	movs	r3, #1
 8007586:	465a      	mov	r2, fp
 8007588:	4631      	mov	r1, r6
 800758a:	4628      	mov	r0, r5
 800758c:	47b8      	blx	r7
 800758e:	3001      	adds	r0, #1
 8007590:	f43f aefb 	beq.w	800738a <_printf_float+0xb6>
 8007594:	f10a 0a01 	add.w	sl, sl, #1
 8007598:	e7ee      	b.n	8007578 <_printf_float+0x2a4>
 800759a:	bf00      	nop
 800759c:	7fefffff 	.word	0x7fefffff
 80075a0:	08010ba0 	.word	0x08010ba0
 80075a4:	08010ba4 	.word	0x08010ba4
 80075a8:	08010ba8 	.word	0x08010ba8
 80075ac:	08010bac 	.word	0x08010bac
 80075b0:	08010bb0 	.word	0x08010bb0
 80075b4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075b6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80075ba:	4553      	cmp	r3, sl
 80075bc:	bfa8      	it	ge
 80075be:	4653      	movge	r3, sl
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	4699      	mov	r9, r3
 80075c4:	dc36      	bgt.n	8007634 <_printf_float+0x360>
 80075c6:	f04f 0b00 	mov.w	fp, #0
 80075ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80075ce:	f104 021a 	add.w	r2, r4, #26
 80075d2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80075d4:	9306      	str	r3, [sp, #24]
 80075d6:	eba3 0309 	sub.w	r3, r3, r9
 80075da:	455b      	cmp	r3, fp
 80075dc:	dc31      	bgt.n	8007642 <_printf_float+0x36e>
 80075de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e0:	459a      	cmp	sl, r3
 80075e2:	dc3a      	bgt.n	800765a <_printf_float+0x386>
 80075e4:	6823      	ldr	r3, [r4, #0]
 80075e6:	07da      	lsls	r2, r3, #31
 80075e8:	d437      	bmi.n	800765a <_printf_float+0x386>
 80075ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075ec:	ebaa 0903 	sub.w	r9, sl, r3
 80075f0:	9b06      	ldr	r3, [sp, #24]
 80075f2:	ebaa 0303 	sub.w	r3, sl, r3
 80075f6:	4599      	cmp	r9, r3
 80075f8:	bfa8      	it	ge
 80075fa:	4699      	movge	r9, r3
 80075fc:	f1b9 0f00 	cmp.w	r9, #0
 8007600:	dc33      	bgt.n	800766a <_printf_float+0x396>
 8007602:	f04f 0800 	mov.w	r8, #0
 8007606:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800760a:	f104 0b1a 	add.w	fp, r4, #26
 800760e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007610:	ebaa 0303 	sub.w	r3, sl, r3
 8007614:	eba3 0309 	sub.w	r3, r3, r9
 8007618:	4543      	cmp	r3, r8
 800761a:	f77f af79 	ble.w	8007510 <_printf_float+0x23c>
 800761e:	2301      	movs	r3, #1
 8007620:	465a      	mov	r2, fp
 8007622:	4631      	mov	r1, r6
 8007624:	4628      	mov	r0, r5
 8007626:	47b8      	blx	r7
 8007628:	3001      	adds	r0, #1
 800762a:	f43f aeae 	beq.w	800738a <_printf_float+0xb6>
 800762e:	f108 0801 	add.w	r8, r8, #1
 8007632:	e7ec      	b.n	800760e <_printf_float+0x33a>
 8007634:	4642      	mov	r2, r8
 8007636:	4631      	mov	r1, r6
 8007638:	4628      	mov	r0, r5
 800763a:	47b8      	blx	r7
 800763c:	3001      	adds	r0, #1
 800763e:	d1c2      	bne.n	80075c6 <_printf_float+0x2f2>
 8007640:	e6a3      	b.n	800738a <_printf_float+0xb6>
 8007642:	2301      	movs	r3, #1
 8007644:	4631      	mov	r1, r6
 8007646:	4628      	mov	r0, r5
 8007648:	9206      	str	r2, [sp, #24]
 800764a:	47b8      	blx	r7
 800764c:	3001      	adds	r0, #1
 800764e:	f43f ae9c 	beq.w	800738a <_printf_float+0xb6>
 8007652:	9a06      	ldr	r2, [sp, #24]
 8007654:	f10b 0b01 	add.w	fp, fp, #1
 8007658:	e7bb      	b.n	80075d2 <_printf_float+0x2fe>
 800765a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800765e:	4631      	mov	r1, r6
 8007660:	4628      	mov	r0, r5
 8007662:	47b8      	blx	r7
 8007664:	3001      	adds	r0, #1
 8007666:	d1c0      	bne.n	80075ea <_printf_float+0x316>
 8007668:	e68f      	b.n	800738a <_printf_float+0xb6>
 800766a:	9a06      	ldr	r2, [sp, #24]
 800766c:	464b      	mov	r3, r9
 800766e:	4442      	add	r2, r8
 8007670:	4631      	mov	r1, r6
 8007672:	4628      	mov	r0, r5
 8007674:	47b8      	blx	r7
 8007676:	3001      	adds	r0, #1
 8007678:	d1c3      	bne.n	8007602 <_printf_float+0x32e>
 800767a:	e686      	b.n	800738a <_printf_float+0xb6>
 800767c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007680:	f1ba 0f01 	cmp.w	sl, #1
 8007684:	dc01      	bgt.n	800768a <_printf_float+0x3b6>
 8007686:	07db      	lsls	r3, r3, #31
 8007688:	d536      	bpl.n	80076f8 <_printf_float+0x424>
 800768a:	2301      	movs	r3, #1
 800768c:	4642      	mov	r2, r8
 800768e:	4631      	mov	r1, r6
 8007690:	4628      	mov	r0, r5
 8007692:	47b8      	blx	r7
 8007694:	3001      	adds	r0, #1
 8007696:	f43f ae78 	beq.w	800738a <_printf_float+0xb6>
 800769a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800769e:	4631      	mov	r1, r6
 80076a0:	4628      	mov	r0, r5
 80076a2:	47b8      	blx	r7
 80076a4:	3001      	adds	r0, #1
 80076a6:	f43f ae70 	beq.w	800738a <_printf_float+0xb6>
 80076aa:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80076ae:	2200      	movs	r2, #0
 80076b0:	2300      	movs	r3, #0
 80076b2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80076b6:	f7f9 fa07 	bl	8000ac8 <__aeabi_dcmpeq>
 80076ba:	b9c0      	cbnz	r0, 80076ee <_printf_float+0x41a>
 80076bc:	4653      	mov	r3, sl
 80076be:	f108 0201 	add.w	r2, r8, #1
 80076c2:	4631      	mov	r1, r6
 80076c4:	4628      	mov	r0, r5
 80076c6:	47b8      	blx	r7
 80076c8:	3001      	adds	r0, #1
 80076ca:	d10c      	bne.n	80076e6 <_printf_float+0x412>
 80076cc:	e65d      	b.n	800738a <_printf_float+0xb6>
 80076ce:	2301      	movs	r3, #1
 80076d0:	465a      	mov	r2, fp
 80076d2:	4631      	mov	r1, r6
 80076d4:	4628      	mov	r0, r5
 80076d6:	47b8      	blx	r7
 80076d8:	3001      	adds	r0, #1
 80076da:	f43f ae56 	beq.w	800738a <_printf_float+0xb6>
 80076de:	f108 0801 	add.w	r8, r8, #1
 80076e2:	45d0      	cmp	r8, sl
 80076e4:	dbf3      	blt.n	80076ce <_printf_float+0x3fa>
 80076e6:	464b      	mov	r3, r9
 80076e8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80076ec:	e6df      	b.n	80074ae <_printf_float+0x1da>
 80076ee:	f04f 0800 	mov.w	r8, #0
 80076f2:	f104 0b1a 	add.w	fp, r4, #26
 80076f6:	e7f4      	b.n	80076e2 <_printf_float+0x40e>
 80076f8:	2301      	movs	r3, #1
 80076fa:	4642      	mov	r2, r8
 80076fc:	e7e1      	b.n	80076c2 <_printf_float+0x3ee>
 80076fe:	2301      	movs	r3, #1
 8007700:	464a      	mov	r2, r9
 8007702:	4631      	mov	r1, r6
 8007704:	4628      	mov	r0, r5
 8007706:	47b8      	blx	r7
 8007708:	3001      	adds	r0, #1
 800770a:	f43f ae3e 	beq.w	800738a <_printf_float+0xb6>
 800770e:	f108 0801 	add.w	r8, r8, #1
 8007712:	68e3      	ldr	r3, [r4, #12]
 8007714:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007716:	1a5b      	subs	r3, r3, r1
 8007718:	4543      	cmp	r3, r8
 800771a:	dcf0      	bgt.n	80076fe <_printf_float+0x42a>
 800771c:	e6fc      	b.n	8007518 <_printf_float+0x244>
 800771e:	f04f 0800 	mov.w	r8, #0
 8007722:	f104 0919 	add.w	r9, r4, #25
 8007726:	e7f4      	b.n	8007712 <_printf_float+0x43e>

08007728 <_printf_common>:
 8007728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800772c:	4616      	mov	r6, r2
 800772e:	4698      	mov	r8, r3
 8007730:	688a      	ldr	r2, [r1, #8]
 8007732:	690b      	ldr	r3, [r1, #16]
 8007734:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007738:	4293      	cmp	r3, r2
 800773a:	bfb8      	it	lt
 800773c:	4613      	movlt	r3, r2
 800773e:	6033      	str	r3, [r6, #0]
 8007740:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007744:	4607      	mov	r7, r0
 8007746:	460c      	mov	r4, r1
 8007748:	b10a      	cbz	r2, 800774e <_printf_common+0x26>
 800774a:	3301      	adds	r3, #1
 800774c:	6033      	str	r3, [r6, #0]
 800774e:	6823      	ldr	r3, [r4, #0]
 8007750:	0699      	lsls	r1, r3, #26
 8007752:	bf42      	ittt	mi
 8007754:	6833      	ldrmi	r3, [r6, #0]
 8007756:	3302      	addmi	r3, #2
 8007758:	6033      	strmi	r3, [r6, #0]
 800775a:	6825      	ldr	r5, [r4, #0]
 800775c:	f015 0506 	ands.w	r5, r5, #6
 8007760:	d106      	bne.n	8007770 <_printf_common+0x48>
 8007762:	f104 0a19 	add.w	sl, r4, #25
 8007766:	68e3      	ldr	r3, [r4, #12]
 8007768:	6832      	ldr	r2, [r6, #0]
 800776a:	1a9b      	subs	r3, r3, r2
 800776c:	42ab      	cmp	r3, r5
 800776e:	dc26      	bgt.n	80077be <_printf_common+0x96>
 8007770:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007774:	6822      	ldr	r2, [r4, #0]
 8007776:	3b00      	subs	r3, #0
 8007778:	bf18      	it	ne
 800777a:	2301      	movne	r3, #1
 800777c:	0692      	lsls	r2, r2, #26
 800777e:	d42b      	bmi.n	80077d8 <_printf_common+0xb0>
 8007780:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007784:	4641      	mov	r1, r8
 8007786:	4638      	mov	r0, r7
 8007788:	47c8      	blx	r9
 800778a:	3001      	adds	r0, #1
 800778c:	d01e      	beq.n	80077cc <_printf_common+0xa4>
 800778e:	6823      	ldr	r3, [r4, #0]
 8007790:	6922      	ldr	r2, [r4, #16]
 8007792:	f003 0306 	and.w	r3, r3, #6
 8007796:	2b04      	cmp	r3, #4
 8007798:	bf02      	ittt	eq
 800779a:	68e5      	ldreq	r5, [r4, #12]
 800779c:	6833      	ldreq	r3, [r6, #0]
 800779e:	1aed      	subeq	r5, r5, r3
 80077a0:	68a3      	ldr	r3, [r4, #8]
 80077a2:	bf0c      	ite	eq
 80077a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80077a8:	2500      	movne	r5, #0
 80077aa:	4293      	cmp	r3, r2
 80077ac:	bfc4      	itt	gt
 80077ae:	1a9b      	subgt	r3, r3, r2
 80077b0:	18ed      	addgt	r5, r5, r3
 80077b2:	2600      	movs	r6, #0
 80077b4:	341a      	adds	r4, #26
 80077b6:	42b5      	cmp	r5, r6
 80077b8:	d11a      	bne.n	80077f0 <_printf_common+0xc8>
 80077ba:	2000      	movs	r0, #0
 80077bc:	e008      	b.n	80077d0 <_printf_common+0xa8>
 80077be:	2301      	movs	r3, #1
 80077c0:	4652      	mov	r2, sl
 80077c2:	4641      	mov	r1, r8
 80077c4:	4638      	mov	r0, r7
 80077c6:	47c8      	blx	r9
 80077c8:	3001      	adds	r0, #1
 80077ca:	d103      	bne.n	80077d4 <_printf_common+0xac>
 80077cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80077d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077d4:	3501      	adds	r5, #1
 80077d6:	e7c6      	b.n	8007766 <_printf_common+0x3e>
 80077d8:	18e1      	adds	r1, r4, r3
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	2030      	movs	r0, #48	@ 0x30
 80077de:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077e2:	4422      	add	r2, r4
 80077e4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077ec:	3302      	adds	r3, #2
 80077ee:	e7c7      	b.n	8007780 <_printf_common+0x58>
 80077f0:	2301      	movs	r3, #1
 80077f2:	4622      	mov	r2, r4
 80077f4:	4641      	mov	r1, r8
 80077f6:	4638      	mov	r0, r7
 80077f8:	47c8      	blx	r9
 80077fa:	3001      	adds	r0, #1
 80077fc:	d0e6      	beq.n	80077cc <_printf_common+0xa4>
 80077fe:	3601      	adds	r6, #1
 8007800:	e7d9      	b.n	80077b6 <_printf_common+0x8e>
	...

08007804 <_printf_i>:
 8007804:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007808:	7e0f      	ldrb	r7, [r1, #24]
 800780a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800780c:	2f78      	cmp	r7, #120	@ 0x78
 800780e:	4691      	mov	r9, r2
 8007810:	4680      	mov	r8, r0
 8007812:	460c      	mov	r4, r1
 8007814:	469a      	mov	sl, r3
 8007816:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800781a:	d807      	bhi.n	800782c <_printf_i+0x28>
 800781c:	2f62      	cmp	r7, #98	@ 0x62
 800781e:	d80a      	bhi.n	8007836 <_printf_i+0x32>
 8007820:	2f00      	cmp	r7, #0
 8007822:	f000 80d2 	beq.w	80079ca <_printf_i+0x1c6>
 8007826:	2f58      	cmp	r7, #88	@ 0x58
 8007828:	f000 80b9 	beq.w	800799e <_printf_i+0x19a>
 800782c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007830:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007834:	e03a      	b.n	80078ac <_printf_i+0xa8>
 8007836:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800783a:	2b15      	cmp	r3, #21
 800783c:	d8f6      	bhi.n	800782c <_printf_i+0x28>
 800783e:	a101      	add	r1, pc, #4	@ (adr r1, 8007844 <_printf_i+0x40>)
 8007840:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007844:	0800789d 	.word	0x0800789d
 8007848:	080078b1 	.word	0x080078b1
 800784c:	0800782d 	.word	0x0800782d
 8007850:	0800782d 	.word	0x0800782d
 8007854:	0800782d 	.word	0x0800782d
 8007858:	0800782d 	.word	0x0800782d
 800785c:	080078b1 	.word	0x080078b1
 8007860:	0800782d 	.word	0x0800782d
 8007864:	0800782d 	.word	0x0800782d
 8007868:	0800782d 	.word	0x0800782d
 800786c:	0800782d 	.word	0x0800782d
 8007870:	080079b1 	.word	0x080079b1
 8007874:	080078db 	.word	0x080078db
 8007878:	0800796b 	.word	0x0800796b
 800787c:	0800782d 	.word	0x0800782d
 8007880:	0800782d 	.word	0x0800782d
 8007884:	080079d3 	.word	0x080079d3
 8007888:	0800782d 	.word	0x0800782d
 800788c:	080078db 	.word	0x080078db
 8007890:	0800782d 	.word	0x0800782d
 8007894:	0800782d 	.word	0x0800782d
 8007898:	08007973 	.word	0x08007973
 800789c:	6833      	ldr	r3, [r6, #0]
 800789e:	1d1a      	adds	r2, r3, #4
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	6032      	str	r2, [r6, #0]
 80078a4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80078a8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80078ac:	2301      	movs	r3, #1
 80078ae:	e09d      	b.n	80079ec <_printf_i+0x1e8>
 80078b0:	6833      	ldr	r3, [r6, #0]
 80078b2:	6820      	ldr	r0, [r4, #0]
 80078b4:	1d19      	adds	r1, r3, #4
 80078b6:	6031      	str	r1, [r6, #0]
 80078b8:	0606      	lsls	r6, r0, #24
 80078ba:	d501      	bpl.n	80078c0 <_printf_i+0xbc>
 80078bc:	681d      	ldr	r5, [r3, #0]
 80078be:	e003      	b.n	80078c8 <_printf_i+0xc4>
 80078c0:	0645      	lsls	r5, r0, #25
 80078c2:	d5fb      	bpl.n	80078bc <_printf_i+0xb8>
 80078c4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078c8:	2d00      	cmp	r5, #0
 80078ca:	da03      	bge.n	80078d4 <_printf_i+0xd0>
 80078cc:	232d      	movs	r3, #45	@ 0x2d
 80078ce:	426d      	negs	r5, r5
 80078d0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078d4:	4859      	ldr	r0, [pc, #356]	@ (8007a3c <_printf_i+0x238>)
 80078d6:	230a      	movs	r3, #10
 80078d8:	e011      	b.n	80078fe <_printf_i+0xfa>
 80078da:	6821      	ldr	r1, [r4, #0]
 80078dc:	6833      	ldr	r3, [r6, #0]
 80078de:	0608      	lsls	r0, r1, #24
 80078e0:	f853 5b04 	ldr.w	r5, [r3], #4
 80078e4:	d402      	bmi.n	80078ec <_printf_i+0xe8>
 80078e6:	0649      	lsls	r1, r1, #25
 80078e8:	bf48      	it	mi
 80078ea:	b2ad      	uxthmi	r5, r5
 80078ec:	2f6f      	cmp	r7, #111	@ 0x6f
 80078ee:	4853      	ldr	r0, [pc, #332]	@ (8007a3c <_printf_i+0x238>)
 80078f0:	6033      	str	r3, [r6, #0]
 80078f2:	bf14      	ite	ne
 80078f4:	230a      	movne	r3, #10
 80078f6:	2308      	moveq	r3, #8
 80078f8:	2100      	movs	r1, #0
 80078fa:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078fe:	6866      	ldr	r6, [r4, #4]
 8007900:	60a6      	str	r6, [r4, #8]
 8007902:	2e00      	cmp	r6, #0
 8007904:	bfa2      	ittt	ge
 8007906:	6821      	ldrge	r1, [r4, #0]
 8007908:	f021 0104 	bicge.w	r1, r1, #4
 800790c:	6021      	strge	r1, [r4, #0]
 800790e:	b90d      	cbnz	r5, 8007914 <_printf_i+0x110>
 8007910:	2e00      	cmp	r6, #0
 8007912:	d04b      	beq.n	80079ac <_printf_i+0x1a8>
 8007914:	4616      	mov	r6, r2
 8007916:	fbb5 f1f3 	udiv	r1, r5, r3
 800791a:	fb03 5711 	mls	r7, r3, r1, r5
 800791e:	5dc7      	ldrb	r7, [r0, r7]
 8007920:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007924:	462f      	mov	r7, r5
 8007926:	42bb      	cmp	r3, r7
 8007928:	460d      	mov	r5, r1
 800792a:	d9f4      	bls.n	8007916 <_printf_i+0x112>
 800792c:	2b08      	cmp	r3, #8
 800792e:	d10b      	bne.n	8007948 <_printf_i+0x144>
 8007930:	6823      	ldr	r3, [r4, #0]
 8007932:	07df      	lsls	r7, r3, #31
 8007934:	d508      	bpl.n	8007948 <_printf_i+0x144>
 8007936:	6923      	ldr	r3, [r4, #16]
 8007938:	6861      	ldr	r1, [r4, #4]
 800793a:	4299      	cmp	r1, r3
 800793c:	bfde      	ittt	le
 800793e:	2330      	movle	r3, #48	@ 0x30
 8007940:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007944:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8007948:	1b92      	subs	r2, r2, r6
 800794a:	6122      	str	r2, [r4, #16]
 800794c:	f8cd a000 	str.w	sl, [sp]
 8007950:	464b      	mov	r3, r9
 8007952:	aa03      	add	r2, sp, #12
 8007954:	4621      	mov	r1, r4
 8007956:	4640      	mov	r0, r8
 8007958:	f7ff fee6 	bl	8007728 <_printf_common>
 800795c:	3001      	adds	r0, #1
 800795e:	d14a      	bne.n	80079f6 <_printf_i+0x1f2>
 8007960:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007964:	b004      	add	sp, #16
 8007966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800796a:	6823      	ldr	r3, [r4, #0]
 800796c:	f043 0320 	orr.w	r3, r3, #32
 8007970:	6023      	str	r3, [r4, #0]
 8007972:	4833      	ldr	r0, [pc, #204]	@ (8007a40 <_printf_i+0x23c>)
 8007974:	2778      	movs	r7, #120	@ 0x78
 8007976:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800797a:	6823      	ldr	r3, [r4, #0]
 800797c:	6831      	ldr	r1, [r6, #0]
 800797e:	061f      	lsls	r7, r3, #24
 8007980:	f851 5b04 	ldr.w	r5, [r1], #4
 8007984:	d402      	bmi.n	800798c <_printf_i+0x188>
 8007986:	065f      	lsls	r7, r3, #25
 8007988:	bf48      	it	mi
 800798a:	b2ad      	uxthmi	r5, r5
 800798c:	6031      	str	r1, [r6, #0]
 800798e:	07d9      	lsls	r1, r3, #31
 8007990:	bf44      	itt	mi
 8007992:	f043 0320 	orrmi.w	r3, r3, #32
 8007996:	6023      	strmi	r3, [r4, #0]
 8007998:	b11d      	cbz	r5, 80079a2 <_printf_i+0x19e>
 800799a:	2310      	movs	r3, #16
 800799c:	e7ac      	b.n	80078f8 <_printf_i+0xf4>
 800799e:	4827      	ldr	r0, [pc, #156]	@ (8007a3c <_printf_i+0x238>)
 80079a0:	e7e9      	b.n	8007976 <_printf_i+0x172>
 80079a2:	6823      	ldr	r3, [r4, #0]
 80079a4:	f023 0320 	bic.w	r3, r3, #32
 80079a8:	6023      	str	r3, [r4, #0]
 80079aa:	e7f6      	b.n	800799a <_printf_i+0x196>
 80079ac:	4616      	mov	r6, r2
 80079ae:	e7bd      	b.n	800792c <_printf_i+0x128>
 80079b0:	6833      	ldr	r3, [r6, #0]
 80079b2:	6825      	ldr	r5, [r4, #0]
 80079b4:	6961      	ldr	r1, [r4, #20]
 80079b6:	1d18      	adds	r0, r3, #4
 80079b8:	6030      	str	r0, [r6, #0]
 80079ba:	062e      	lsls	r6, r5, #24
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	d501      	bpl.n	80079c4 <_printf_i+0x1c0>
 80079c0:	6019      	str	r1, [r3, #0]
 80079c2:	e002      	b.n	80079ca <_printf_i+0x1c6>
 80079c4:	0668      	lsls	r0, r5, #25
 80079c6:	d5fb      	bpl.n	80079c0 <_printf_i+0x1bc>
 80079c8:	8019      	strh	r1, [r3, #0]
 80079ca:	2300      	movs	r3, #0
 80079cc:	6123      	str	r3, [r4, #16]
 80079ce:	4616      	mov	r6, r2
 80079d0:	e7bc      	b.n	800794c <_printf_i+0x148>
 80079d2:	6833      	ldr	r3, [r6, #0]
 80079d4:	1d1a      	adds	r2, r3, #4
 80079d6:	6032      	str	r2, [r6, #0]
 80079d8:	681e      	ldr	r6, [r3, #0]
 80079da:	6862      	ldr	r2, [r4, #4]
 80079dc:	2100      	movs	r1, #0
 80079de:	4630      	mov	r0, r6
 80079e0:	f7f8 fbf6 	bl	80001d0 <memchr>
 80079e4:	b108      	cbz	r0, 80079ea <_printf_i+0x1e6>
 80079e6:	1b80      	subs	r0, r0, r6
 80079e8:	6060      	str	r0, [r4, #4]
 80079ea:	6863      	ldr	r3, [r4, #4]
 80079ec:	6123      	str	r3, [r4, #16]
 80079ee:	2300      	movs	r3, #0
 80079f0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079f4:	e7aa      	b.n	800794c <_printf_i+0x148>
 80079f6:	6923      	ldr	r3, [r4, #16]
 80079f8:	4632      	mov	r2, r6
 80079fa:	4649      	mov	r1, r9
 80079fc:	4640      	mov	r0, r8
 80079fe:	47d0      	blx	sl
 8007a00:	3001      	adds	r0, #1
 8007a02:	d0ad      	beq.n	8007960 <_printf_i+0x15c>
 8007a04:	6823      	ldr	r3, [r4, #0]
 8007a06:	079b      	lsls	r3, r3, #30
 8007a08:	d413      	bmi.n	8007a32 <_printf_i+0x22e>
 8007a0a:	68e0      	ldr	r0, [r4, #12]
 8007a0c:	9b03      	ldr	r3, [sp, #12]
 8007a0e:	4298      	cmp	r0, r3
 8007a10:	bfb8      	it	lt
 8007a12:	4618      	movlt	r0, r3
 8007a14:	e7a6      	b.n	8007964 <_printf_i+0x160>
 8007a16:	2301      	movs	r3, #1
 8007a18:	4632      	mov	r2, r6
 8007a1a:	4649      	mov	r1, r9
 8007a1c:	4640      	mov	r0, r8
 8007a1e:	47d0      	blx	sl
 8007a20:	3001      	adds	r0, #1
 8007a22:	d09d      	beq.n	8007960 <_printf_i+0x15c>
 8007a24:	3501      	adds	r5, #1
 8007a26:	68e3      	ldr	r3, [r4, #12]
 8007a28:	9903      	ldr	r1, [sp, #12]
 8007a2a:	1a5b      	subs	r3, r3, r1
 8007a2c:	42ab      	cmp	r3, r5
 8007a2e:	dcf2      	bgt.n	8007a16 <_printf_i+0x212>
 8007a30:	e7eb      	b.n	8007a0a <_printf_i+0x206>
 8007a32:	2500      	movs	r5, #0
 8007a34:	f104 0619 	add.w	r6, r4, #25
 8007a38:	e7f5      	b.n	8007a26 <_printf_i+0x222>
 8007a3a:	bf00      	nop
 8007a3c:	08010bb2 	.word	0x08010bb2
 8007a40:	08010bc3 	.word	0x08010bc3

08007a44 <_scanf_float>:
 8007a44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a48:	b087      	sub	sp, #28
 8007a4a:	4617      	mov	r7, r2
 8007a4c:	9303      	str	r3, [sp, #12]
 8007a4e:	688b      	ldr	r3, [r1, #8]
 8007a50:	1e5a      	subs	r2, r3, #1
 8007a52:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8007a56:	bf81      	itttt	hi
 8007a58:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8007a5c:	eb03 0b05 	addhi.w	fp, r3, r5
 8007a60:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8007a64:	608b      	strhi	r3, [r1, #8]
 8007a66:	680b      	ldr	r3, [r1, #0]
 8007a68:	460a      	mov	r2, r1
 8007a6a:	f04f 0500 	mov.w	r5, #0
 8007a6e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8007a72:	f842 3b1c 	str.w	r3, [r2], #28
 8007a76:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007a7a:	4680      	mov	r8, r0
 8007a7c:	460c      	mov	r4, r1
 8007a7e:	bf98      	it	ls
 8007a80:	f04f 0b00 	movls.w	fp, #0
 8007a84:	9201      	str	r2, [sp, #4]
 8007a86:	4616      	mov	r6, r2
 8007a88:	46aa      	mov	sl, r5
 8007a8a:	46a9      	mov	r9, r5
 8007a8c:	9502      	str	r5, [sp, #8]
 8007a8e:	68a2      	ldr	r2, [r4, #8]
 8007a90:	b152      	cbz	r2, 8007aa8 <_scanf_float+0x64>
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	781b      	ldrb	r3, [r3, #0]
 8007a96:	2b4e      	cmp	r3, #78	@ 0x4e
 8007a98:	d864      	bhi.n	8007b64 <_scanf_float+0x120>
 8007a9a:	2b40      	cmp	r3, #64	@ 0x40
 8007a9c:	d83c      	bhi.n	8007b18 <_scanf_float+0xd4>
 8007a9e:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007aa2:	b2c8      	uxtb	r0, r1
 8007aa4:	280e      	cmp	r0, #14
 8007aa6:	d93a      	bls.n	8007b1e <_scanf_float+0xda>
 8007aa8:	f1b9 0f00 	cmp.w	r9, #0
 8007aac:	d003      	beq.n	8007ab6 <_scanf_float+0x72>
 8007aae:	6823      	ldr	r3, [r4, #0]
 8007ab0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007ab4:	6023      	str	r3, [r4, #0]
 8007ab6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007aba:	f1ba 0f01 	cmp.w	sl, #1
 8007abe:	f200 8117 	bhi.w	8007cf0 <_scanf_float+0x2ac>
 8007ac2:	9b01      	ldr	r3, [sp, #4]
 8007ac4:	429e      	cmp	r6, r3
 8007ac6:	f200 8108 	bhi.w	8007cda <_scanf_float+0x296>
 8007aca:	2001      	movs	r0, #1
 8007acc:	b007      	add	sp, #28
 8007ace:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ad2:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007ad6:	2a0d      	cmp	r2, #13
 8007ad8:	d8e6      	bhi.n	8007aa8 <_scanf_float+0x64>
 8007ada:	a101      	add	r1, pc, #4	@ (adr r1, 8007ae0 <_scanf_float+0x9c>)
 8007adc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007ae0:	08007c27 	.word	0x08007c27
 8007ae4:	08007aa9 	.word	0x08007aa9
 8007ae8:	08007aa9 	.word	0x08007aa9
 8007aec:	08007aa9 	.word	0x08007aa9
 8007af0:	08007c87 	.word	0x08007c87
 8007af4:	08007c5f 	.word	0x08007c5f
 8007af8:	08007aa9 	.word	0x08007aa9
 8007afc:	08007aa9 	.word	0x08007aa9
 8007b00:	08007c35 	.word	0x08007c35
 8007b04:	08007aa9 	.word	0x08007aa9
 8007b08:	08007aa9 	.word	0x08007aa9
 8007b0c:	08007aa9 	.word	0x08007aa9
 8007b10:	08007aa9 	.word	0x08007aa9
 8007b14:	08007bed 	.word	0x08007bed
 8007b18:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8007b1c:	e7db      	b.n	8007ad6 <_scanf_float+0x92>
 8007b1e:	290e      	cmp	r1, #14
 8007b20:	d8c2      	bhi.n	8007aa8 <_scanf_float+0x64>
 8007b22:	a001      	add	r0, pc, #4	@ (adr r0, 8007b28 <_scanf_float+0xe4>)
 8007b24:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8007b28:	08007bdd 	.word	0x08007bdd
 8007b2c:	08007aa9 	.word	0x08007aa9
 8007b30:	08007bdd 	.word	0x08007bdd
 8007b34:	08007c73 	.word	0x08007c73
 8007b38:	08007aa9 	.word	0x08007aa9
 8007b3c:	08007b85 	.word	0x08007b85
 8007b40:	08007bc3 	.word	0x08007bc3
 8007b44:	08007bc3 	.word	0x08007bc3
 8007b48:	08007bc3 	.word	0x08007bc3
 8007b4c:	08007bc3 	.word	0x08007bc3
 8007b50:	08007bc3 	.word	0x08007bc3
 8007b54:	08007bc3 	.word	0x08007bc3
 8007b58:	08007bc3 	.word	0x08007bc3
 8007b5c:	08007bc3 	.word	0x08007bc3
 8007b60:	08007bc3 	.word	0x08007bc3
 8007b64:	2b6e      	cmp	r3, #110	@ 0x6e
 8007b66:	d809      	bhi.n	8007b7c <_scanf_float+0x138>
 8007b68:	2b60      	cmp	r3, #96	@ 0x60
 8007b6a:	d8b2      	bhi.n	8007ad2 <_scanf_float+0x8e>
 8007b6c:	2b54      	cmp	r3, #84	@ 0x54
 8007b6e:	d07b      	beq.n	8007c68 <_scanf_float+0x224>
 8007b70:	2b59      	cmp	r3, #89	@ 0x59
 8007b72:	d199      	bne.n	8007aa8 <_scanf_float+0x64>
 8007b74:	2d07      	cmp	r5, #7
 8007b76:	d197      	bne.n	8007aa8 <_scanf_float+0x64>
 8007b78:	2508      	movs	r5, #8
 8007b7a:	e02c      	b.n	8007bd6 <_scanf_float+0x192>
 8007b7c:	2b74      	cmp	r3, #116	@ 0x74
 8007b7e:	d073      	beq.n	8007c68 <_scanf_float+0x224>
 8007b80:	2b79      	cmp	r3, #121	@ 0x79
 8007b82:	e7f6      	b.n	8007b72 <_scanf_float+0x12e>
 8007b84:	6821      	ldr	r1, [r4, #0]
 8007b86:	05c8      	lsls	r0, r1, #23
 8007b88:	d51b      	bpl.n	8007bc2 <_scanf_float+0x17e>
 8007b8a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007b8e:	6021      	str	r1, [r4, #0]
 8007b90:	f109 0901 	add.w	r9, r9, #1
 8007b94:	f1bb 0f00 	cmp.w	fp, #0
 8007b98:	d003      	beq.n	8007ba2 <_scanf_float+0x15e>
 8007b9a:	3201      	adds	r2, #1
 8007b9c:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8007ba0:	60a2      	str	r2, [r4, #8]
 8007ba2:	68a3      	ldr	r3, [r4, #8]
 8007ba4:	3b01      	subs	r3, #1
 8007ba6:	60a3      	str	r3, [r4, #8]
 8007ba8:	6923      	ldr	r3, [r4, #16]
 8007baa:	3301      	adds	r3, #1
 8007bac:	6123      	str	r3, [r4, #16]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	607b      	str	r3, [r7, #4]
 8007bb6:	f340 8087 	ble.w	8007cc8 <_scanf_float+0x284>
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	3301      	adds	r3, #1
 8007bbe:	603b      	str	r3, [r7, #0]
 8007bc0:	e765      	b.n	8007a8e <_scanf_float+0x4a>
 8007bc2:	eb1a 0105 	adds.w	r1, sl, r5
 8007bc6:	f47f af6f 	bne.w	8007aa8 <_scanf_float+0x64>
 8007bca:	6822      	ldr	r2, [r4, #0]
 8007bcc:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007bd0:	6022      	str	r2, [r4, #0]
 8007bd2:	460d      	mov	r5, r1
 8007bd4:	468a      	mov	sl, r1
 8007bd6:	f806 3b01 	strb.w	r3, [r6], #1
 8007bda:	e7e2      	b.n	8007ba2 <_scanf_float+0x15e>
 8007bdc:	6822      	ldr	r2, [r4, #0]
 8007bde:	0610      	lsls	r0, r2, #24
 8007be0:	f57f af62 	bpl.w	8007aa8 <_scanf_float+0x64>
 8007be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007be8:	6022      	str	r2, [r4, #0]
 8007bea:	e7f4      	b.n	8007bd6 <_scanf_float+0x192>
 8007bec:	f1ba 0f00 	cmp.w	sl, #0
 8007bf0:	d10e      	bne.n	8007c10 <_scanf_float+0x1cc>
 8007bf2:	f1b9 0f00 	cmp.w	r9, #0
 8007bf6:	d10e      	bne.n	8007c16 <_scanf_float+0x1d2>
 8007bf8:	6822      	ldr	r2, [r4, #0]
 8007bfa:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007bfe:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007c02:	d108      	bne.n	8007c16 <_scanf_float+0x1d2>
 8007c04:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007c08:	6022      	str	r2, [r4, #0]
 8007c0a:	f04f 0a01 	mov.w	sl, #1
 8007c0e:	e7e2      	b.n	8007bd6 <_scanf_float+0x192>
 8007c10:	f1ba 0f02 	cmp.w	sl, #2
 8007c14:	d055      	beq.n	8007cc2 <_scanf_float+0x27e>
 8007c16:	2d01      	cmp	r5, #1
 8007c18:	d002      	beq.n	8007c20 <_scanf_float+0x1dc>
 8007c1a:	2d04      	cmp	r5, #4
 8007c1c:	f47f af44 	bne.w	8007aa8 <_scanf_float+0x64>
 8007c20:	3501      	adds	r5, #1
 8007c22:	b2ed      	uxtb	r5, r5
 8007c24:	e7d7      	b.n	8007bd6 <_scanf_float+0x192>
 8007c26:	f1ba 0f01 	cmp.w	sl, #1
 8007c2a:	f47f af3d 	bne.w	8007aa8 <_scanf_float+0x64>
 8007c2e:	f04f 0a02 	mov.w	sl, #2
 8007c32:	e7d0      	b.n	8007bd6 <_scanf_float+0x192>
 8007c34:	b97d      	cbnz	r5, 8007c56 <_scanf_float+0x212>
 8007c36:	f1b9 0f00 	cmp.w	r9, #0
 8007c3a:	f47f af38 	bne.w	8007aae <_scanf_float+0x6a>
 8007c3e:	6822      	ldr	r2, [r4, #0]
 8007c40:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007c44:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007c48:	f040 8108 	bne.w	8007e5c <_scanf_float+0x418>
 8007c4c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007c50:	6022      	str	r2, [r4, #0]
 8007c52:	2501      	movs	r5, #1
 8007c54:	e7bf      	b.n	8007bd6 <_scanf_float+0x192>
 8007c56:	2d03      	cmp	r5, #3
 8007c58:	d0e2      	beq.n	8007c20 <_scanf_float+0x1dc>
 8007c5a:	2d05      	cmp	r5, #5
 8007c5c:	e7de      	b.n	8007c1c <_scanf_float+0x1d8>
 8007c5e:	2d02      	cmp	r5, #2
 8007c60:	f47f af22 	bne.w	8007aa8 <_scanf_float+0x64>
 8007c64:	2503      	movs	r5, #3
 8007c66:	e7b6      	b.n	8007bd6 <_scanf_float+0x192>
 8007c68:	2d06      	cmp	r5, #6
 8007c6a:	f47f af1d 	bne.w	8007aa8 <_scanf_float+0x64>
 8007c6e:	2507      	movs	r5, #7
 8007c70:	e7b1      	b.n	8007bd6 <_scanf_float+0x192>
 8007c72:	6822      	ldr	r2, [r4, #0]
 8007c74:	0591      	lsls	r1, r2, #22
 8007c76:	f57f af17 	bpl.w	8007aa8 <_scanf_float+0x64>
 8007c7a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007c7e:	6022      	str	r2, [r4, #0]
 8007c80:	f8cd 9008 	str.w	r9, [sp, #8]
 8007c84:	e7a7      	b.n	8007bd6 <_scanf_float+0x192>
 8007c86:	6822      	ldr	r2, [r4, #0]
 8007c88:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007c8c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007c90:	d006      	beq.n	8007ca0 <_scanf_float+0x25c>
 8007c92:	0550      	lsls	r0, r2, #21
 8007c94:	f57f af08 	bpl.w	8007aa8 <_scanf_float+0x64>
 8007c98:	f1b9 0f00 	cmp.w	r9, #0
 8007c9c:	f000 80de 	beq.w	8007e5c <_scanf_float+0x418>
 8007ca0:	0591      	lsls	r1, r2, #22
 8007ca2:	bf58      	it	pl
 8007ca4:	9902      	ldrpl	r1, [sp, #8]
 8007ca6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007caa:	bf58      	it	pl
 8007cac:	eba9 0101 	subpl.w	r1, r9, r1
 8007cb0:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007cb4:	bf58      	it	pl
 8007cb6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007cba:	6022      	str	r2, [r4, #0]
 8007cbc:	f04f 0900 	mov.w	r9, #0
 8007cc0:	e789      	b.n	8007bd6 <_scanf_float+0x192>
 8007cc2:	f04f 0a03 	mov.w	sl, #3
 8007cc6:	e786      	b.n	8007bd6 <_scanf_float+0x192>
 8007cc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007ccc:	4639      	mov	r1, r7
 8007cce:	4640      	mov	r0, r8
 8007cd0:	4798      	blx	r3
 8007cd2:	2800      	cmp	r0, #0
 8007cd4:	f43f aedb 	beq.w	8007a8e <_scanf_float+0x4a>
 8007cd8:	e6e6      	b.n	8007aa8 <_scanf_float+0x64>
 8007cda:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007cde:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ce2:	463a      	mov	r2, r7
 8007ce4:	4640      	mov	r0, r8
 8007ce6:	4798      	blx	r3
 8007ce8:	6923      	ldr	r3, [r4, #16]
 8007cea:	3b01      	subs	r3, #1
 8007cec:	6123      	str	r3, [r4, #16]
 8007cee:	e6e8      	b.n	8007ac2 <_scanf_float+0x7e>
 8007cf0:	1e6b      	subs	r3, r5, #1
 8007cf2:	2b06      	cmp	r3, #6
 8007cf4:	d824      	bhi.n	8007d40 <_scanf_float+0x2fc>
 8007cf6:	2d02      	cmp	r5, #2
 8007cf8:	d836      	bhi.n	8007d68 <_scanf_float+0x324>
 8007cfa:	9b01      	ldr	r3, [sp, #4]
 8007cfc:	429e      	cmp	r6, r3
 8007cfe:	f67f aee4 	bls.w	8007aca <_scanf_float+0x86>
 8007d02:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d06:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d0a:	463a      	mov	r2, r7
 8007d0c:	4640      	mov	r0, r8
 8007d0e:	4798      	blx	r3
 8007d10:	6923      	ldr	r3, [r4, #16]
 8007d12:	3b01      	subs	r3, #1
 8007d14:	6123      	str	r3, [r4, #16]
 8007d16:	e7f0      	b.n	8007cfa <_scanf_float+0x2b6>
 8007d18:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d1c:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007d20:	463a      	mov	r2, r7
 8007d22:	4640      	mov	r0, r8
 8007d24:	4798      	blx	r3
 8007d26:	6923      	ldr	r3, [r4, #16]
 8007d28:	3b01      	subs	r3, #1
 8007d2a:	6123      	str	r3, [r4, #16]
 8007d2c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8007d30:	fa5f fa8a 	uxtb.w	sl, sl
 8007d34:	f1ba 0f02 	cmp.w	sl, #2
 8007d38:	d1ee      	bne.n	8007d18 <_scanf_float+0x2d4>
 8007d3a:	3d03      	subs	r5, #3
 8007d3c:	b2ed      	uxtb	r5, r5
 8007d3e:	1b76      	subs	r6, r6, r5
 8007d40:	6823      	ldr	r3, [r4, #0]
 8007d42:	05da      	lsls	r2, r3, #23
 8007d44:	d530      	bpl.n	8007da8 <_scanf_float+0x364>
 8007d46:	055b      	lsls	r3, r3, #21
 8007d48:	d511      	bpl.n	8007d6e <_scanf_float+0x32a>
 8007d4a:	9b01      	ldr	r3, [sp, #4]
 8007d4c:	429e      	cmp	r6, r3
 8007d4e:	f67f aebc 	bls.w	8007aca <_scanf_float+0x86>
 8007d52:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007d5a:	463a      	mov	r2, r7
 8007d5c:	4640      	mov	r0, r8
 8007d5e:	4798      	blx	r3
 8007d60:	6923      	ldr	r3, [r4, #16]
 8007d62:	3b01      	subs	r3, #1
 8007d64:	6123      	str	r3, [r4, #16]
 8007d66:	e7f0      	b.n	8007d4a <_scanf_float+0x306>
 8007d68:	46aa      	mov	sl, r5
 8007d6a:	46b3      	mov	fp, r6
 8007d6c:	e7de      	b.n	8007d2c <_scanf_float+0x2e8>
 8007d6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007d72:	6923      	ldr	r3, [r4, #16]
 8007d74:	2965      	cmp	r1, #101	@ 0x65
 8007d76:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8007d7a:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8007d7e:	6123      	str	r3, [r4, #16]
 8007d80:	d00c      	beq.n	8007d9c <_scanf_float+0x358>
 8007d82:	2945      	cmp	r1, #69	@ 0x45
 8007d84:	d00a      	beq.n	8007d9c <_scanf_float+0x358>
 8007d86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007d8a:	463a      	mov	r2, r7
 8007d8c:	4640      	mov	r0, r8
 8007d8e:	4798      	blx	r3
 8007d90:	6923      	ldr	r3, [r4, #16]
 8007d92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007d96:	3b01      	subs	r3, #1
 8007d98:	1eb5      	subs	r5, r6, #2
 8007d9a:	6123      	str	r3, [r4, #16]
 8007d9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007da0:	463a      	mov	r2, r7
 8007da2:	4640      	mov	r0, r8
 8007da4:	4798      	blx	r3
 8007da6:	462e      	mov	r6, r5
 8007da8:	6822      	ldr	r2, [r4, #0]
 8007daa:	f012 0210 	ands.w	r2, r2, #16
 8007dae:	d001      	beq.n	8007db4 <_scanf_float+0x370>
 8007db0:	2000      	movs	r0, #0
 8007db2:	e68b      	b.n	8007acc <_scanf_float+0x88>
 8007db4:	7032      	strb	r2, [r6, #0]
 8007db6:	6823      	ldr	r3, [r4, #0]
 8007db8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007dbc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007dc0:	d11c      	bne.n	8007dfc <_scanf_float+0x3b8>
 8007dc2:	9b02      	ldr	r3, [sp, #8]
 8007dc4:	454b      	cmp	r3, r9
 8007dc6:	eba3 0209 	sub.w	r2, r3, r9
 8007dca:	d123      	bne.n	8007e14 <_scanf_float+0x3d0>
 8007dcc:	9901      	ldr	r1, [sp, #4]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	4640      	mov	r0, r8
 8007dd2:	f000 ff45 	bl	8008c60 <_strtod_r>
 8007dd6:	9b03      	ldr	r3, [sp, #12]
 8007dd8:	6821      	ldr	r1, [r4, #0]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	f011 0f02 	tst.w	r1, #2
 8007de0:	ec57 6b10 	vmov	r6, r7, d0
 8007de4:	f103 0204 	add.w	r2, r3, #4
 8007de8:	d01f      	beq.n	8007e2a <_scanf_float+0x3e6>
 8007dea:	9903      	ldr	r1, [sp, #12]
 8007dec:	600a      	str	r2, [r1, #0]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	e9c3 6700 	strd	r6, r7, [r3]
 8007df4:	68e3      	ldr	r3, [r4, #12]
 8007df6:	3301      	adds	r3, #1
 8007df8:	60e3      	str	r3, [r4, #12]
 8007dfa:	e7d9      	b.n	8007db0 <_scanf_float+0x36c>
 8007dfc:	9b04      	ldr	r3, [sp, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d0e4      	beq.n	8007dcc <_scanf_float+0x388>
 8007e02:	9905      	ldr	r1, [sp, #20]
 8007e04:	230a      	movs	r3, #10
 8007e06:	3101      	adds	r1, #1
 8007e08:	4640      	mov	r0, r8
 8007e0a:	f000 ffa9 	bl	8008d60 <_strtol_r>
 8007e0e:	9b04      	ldr	r3, [sp, #16]
 8007e10:	9e05      	ldr	r6, [sp, #20]
 8007e12:	1ac2      	subs	r2, r0, r3
 8007e14:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007e18:	429e      	cmp	r6, r3
 8007e1a:	bf28      	it	cs
 8007e1c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007e20:	4910      	ldr	r1, [pc, #64]	@ (8007e64 <_scanf_float+0x420>)
 8007e22:	4630      	mov	r0, r6
 8007e24:	f000 f856 	bl	8007ed4 <siprintf>
 8007e28:	e7d0      	b.n	8007dcc <_scanf_float+0x388>
 8007e2a:	f011 0f04 	tst.w	r1, #4
 8007e2e:	9903      	ldr	r1, [sp, #12]
 8007e30:	600a      	str	r2, [r1, #0]
 8007e32:	d1dc      	bne.n	8007dee <_scanf_float+0x3aa>
 8007e34:	681d      	ldr	r5, [r3, #0]
 8007e36:	4632      	mov	r2, r6
 8007e38:	463b      	mov	r3, r7
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	4639      	mov	r1, r7
 8007e3e:	f7f8 fe75 	bl	8000b2c <__aeabi_dcmpun>
 8007e42:	b128      	cbz	r0, 8007e50 <_scanf_float+0x40c>
 8007e44:	4808      	ldr	r0, [pc, #32]	@ (8007e68 <_scanf_float+0x424>)
 8007e46:	f001 f827 	bl	8008e98 <nanf>
 8007e4a:	ed85 0a00 	vstr	s0, [r5]
 8007e4e:	e7d1      	b.n	8007df4 <_scanf_float+0x3b0>
 8007e50:	4630      	mov	r0, r6
 8007e52:	4639      	mov	r1, r7
 8007e54:	f7f8 fec8 	bl	8000be8 <__aeabi_d2f>
 8007e58:	6028      	str	r0, [r5, #0]
 8007e5a:	e7cb      	b.n	8007df4 <_scanf_float+0x3b0>
 8007e5c:	f04f 0900 	mov.w	r9, #0
 8007e60:	e629      	b.n	8007ab6 <_scanf_float+0x72>
 8007e62:	bf00      	nop
 8007e64:	08010bd4 	.word	0x08010bd4
 8007e68:	08010fcb 	.word	0x08010fcb

08007e6c <sniprintf>:
 8007e6c:	b40c      	push	{r2, r3}
 8007e6e:	b530      	push	{r4, r5, lr}
 8007e70:	4b17      	ldr	r3, [pc, #92]	@ (8007ed0 <sniprintf+0x64>)
 8007e72:	1e0c      	subs	r4, r1, #0
 8007e74:	681d      	ldr	r5, [r3, #0]
 8007e76:	b09d      	sub	sp, #116	@ 0x74
 8007e78:	da08      	bge.n	8007e8c <sniprintf+0x20>
 8007e7a:	238b      	movs	r3, #139	@ 0x8b
 8007e7c:	602b      	str	r3, [r5, #0]
 8007e7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007e82:	b01d      	add	sp, #116	@ 0x74
 8007e84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e88:	b002      	add	sp, #8
 8007e8a:	4770      	bx	lr
 8007e8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8007e90:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007e94:	bf14      	ite	ne
 8007e96:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8007e9a:	4623      	moveq	r3, r4
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	9307      	str	r3, [sp, #28]
 8007ea0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007ea4:	9002      	str	r0, [sp, #8]
 8007ea6:	9006      	str	r0, [sp, #24]
 8007ea8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007eac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007eae:	ab21      	add	r3, sp, #132	@ 0x84
 8007eb0:	a902      	add	r1, sp, #8
 8007eb2:	4628      	mov	r0, r5
 8007eb4:	9301      	str	r3, [sp, #4]
 8007eb6:	f002 f9d7 	bl	800a268 <_svfiprintf_r>
 8007eba:	1c43      	adds	r3, r0, #1
 8007ebc:	bfbc      	itt	lt
 8007ebe:	238b      	movlt	r3, #139	@ 0x8b
 8007ec0:	602b      	strlt	r3, [r5, #0]
 8007ec2:	2c00      	cmp	r4, #0
 8007ec4:	d0dd      	beq.n	8007e82 <sniprintf+0x16>
 8007ec6:	9b02      	ldr	r3, [sp, #8]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	e7d9      	b.n	8007e82 <sniprintf+0x16>
 8007ece:	bf00      	nop
 8007ed0:	20000184 	.word	0x20000184

08007ed4 <siprintf>:
 8007ed4:	b40e      	push	{r1, r2, r3}
 8007ed6:	b500      	push	{lr}
 8007ed8:	b09c      	sub	sp, #112	@ 0x70
 8007eda:	ab1d      	add	r3, sp, #116	@ 0x74
 8007edc:	9002      	str	r0, [sp, #8]
 8007ede:	9006      	str	r0, [sp, #24]
 8007ee0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007ee4:	4809      	ldr	r0, [pc, #36]	@ (8007f0c <siprintf+0x38>)
 8007ee6:	9107      	str	r1, [sp, #28]
 8007ee8:	9104      	str	r1, [sp, #16]
 8007eea:	4909      	ldr	r1, [pc, #36]	@ (8007f10 <siprintf+0x3c>)
 8007eec:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ef0:	9105      	str	r1, [sp, #20]
 8007ef2:	6800      	ldr	r0, [r0, #0]
 8007ef4:	9301      	str	r3, [sp, #4]
 8007ef6:	a902      	add	r1, sp, #8
 8007ef8:	f002 f9b6 	bl	800a268 <_svfiprintf_r>
 8007efc:	9b02      	ldr	r3, [sp, #8]
 8007efe:	2200      	movs	r2, #0
 8007f00:	701a      	strb	r2, [r3, #0]
 8007f02:	b01c      	add	sp, #112	@ 0x70
 8007f04:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f08:	b003      	add	sp, #12
 8007f0a:	4770      	bx	lr
 8007f0c:	20000184 	.word	0x20000184
 8007f10:	ffff0208 	.word	0xffff0208

08007f14 <std>:
 8007f14:	2300      	movs	r3, #0
 8007f16:	b510      	push	{r4, lr}
 8007f18:	4604      	mov	r4, r0
 8007f1a:	e9c0 3300 	strd	r3, r3, [r0]
 8007f1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f22:	6083      	str	r3, [r0, #8]
 8007f24:	8181      	strh	r1, [r0, #12]
 8007f26:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f28:	81c2      	strh	r2, [r0, #14]
 8007f2a:	6183      	str	r3, [r0, #24]
 8007f2c:	4619      	mov	r1, r3
 8007f2e:	2208      	movs	r2, #8
 8007f30:	305c      	adds	r0, #92	@ 0x5c
 8007f32:	f000 ff61 	bl	8008df8 <memset>
 8007f36:	4b0d      	ldr	r3, [pc, #52]	@ (8007f6c <std+0x58>)
 8007f38:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007f70 <std+0x5c>)
 8007f3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f3e:	4b0d      	ldr	r3, [pc, #52]	@ (8007f74 <std+0x60>)
 8007f40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f42:	4b0d      	ldr	r3, [pc, #52]	@ (8007f78 <std+0x64>)
 8007f44:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f46:	4b0d      	ldr	r3, [pc, #52]	@ (8007f7c <std+0x68>)
 8007f48:	6224      	str	r4, [r4, #32]
 8007f4a:	429c      	cmp	r4, r3
 8007f4c:	d006      	beq.n	8007f5c <std+0x48>
 8007f4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f52:	4294      	cmp	r4, r2
 8007f54:	d002      	beq.n	8007f5c <std+0x48>
 8007f56:	33d0      	adds	r3, #208	@ 0xd0
 8007f58:	429c      	cmp	r4, r3
 8007f5a:	d105      	bne.n	8007f68 <std+0x54>
 8007f5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f64:	f000 bf7e 	b.w	8008e64 <__retarget_lock_init_recursive>
 8007f68:	bd10      	pop	{r4, pc}
 8007f6a:	bf00      	nop
 8007f6c:	0800b0ad 	.word	0x0800b0ad
 8007f70:	0800b0cf 	.word	0x0800b0cf
 8007f74:	0800b107 	.word	0x0800b107
 8007f78:	0800b12b 	.word	0x0800b12b
 8007f7c:	20000874 	.word	0x20000874

08007f80 <stdio_exit_handler>:
 8007f80:	4a02      	ldr	r2, [pc, #8]	@ (8007f8c <stdio_exit_handler+0xc>)
 8007f82:	4903      	ldr	r1, [pc, #12]	@ (8007f90 <stdio_exit_handler+0x10>)
 8007f84:	4803      	ldr	r0, [pc, #12]	@ (8007f94 <stdio_exit_handler+0x14>)
 8007f86:	f000 beed 	b.w	8008d64 <_fwalk_sglue>
 8007f8a:	bf00      	nop
 8007f8c:	2000000c 	.word	0x2000000c
 8007f90:	0800a6e1 	.word	0x0800a6e1
 8007f94:	20000188 	.word	0x20000188

08007f98 <cleanup_stdio>:
 8007f98:	6841      	ldr	r1, [r0, #4]
 8007f9a:	4b0c      	ldr	r3, [pc, #48]	@ (8007fcc <cleanup_stdio+0x34>)
 8007f9c:	4299      	cmp	r1, r3
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	d001      	beq.n	8007fa8 <cleanup_stdio+0x10>
 8007fa4:	f002 fb9c 	bl	800a6e0 <_fflush_r>
 8007fa8:	68a1      	ldr	r1, [r4, #8]
 8007faa:	4b09      	ldr	r3, [pc, #36]	@ (8007fd0 <cleanup_stdio+0x38>)
 8007fac:	4299      	cmp	r1, r3
 8007fae:	d002      	beq.n	8007fb6 <cleanup_stdio+0x1e>
 8007fb0:	4620      	mov	r0, r4
 8007fb2:	f002 fb95 	bl	800a6e0 <_fflush_r>
 8007fb6:	68e1      	ldr	r1, [r4, #12]
 8007fb8:	4b06      	ldr	r3, [pc, #24]	@ (8007fd4 <cleanup_stdio+0x3c>)
 8007fba:	4299      	cmp	r1, r3
 8007fbc:	d004      	beq.n	8007fc8 <cleanup_stdio+0x30>
 8007fbe:	4620      	mov	r0, r4
 8007fc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fc4:	f002 bb8c 	b.w	800a6e0 <_fflush_r>
 8007fc8:	bd10      	pop	{r4, pc}
 8007fca:	bf00      	nop
 8007fcc:	20000874 	.word	0x20000874
 8007fd0:	200008dc 	.word	0x200008dc
 8007fd4:	20000944 	.word	0x20000944

08007fd8 <global_stdio_init.part.0>:
 8007fd8:	b510      	push	{r4, lr}
 8007fda:	4b0b      	ldr	r3, [pc, #44]	@ (8008008 <global_stdio_init.part.0+0x30>)
 8007fdc:	4c0b      	ldr	r4, [pc, #44]	@ (800800c <global_stdio_init.part.0+0x34>)
 8007fde:	4a0c      	ldr	r2, [pc, #48]	@ (8008010 <global_stdio_init.part.0+0x38>)
 8007fe0:	601a      	str	r2, [r3, #0]
 8007fe2:	4620      	mov	r0, r4
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	2104      	movs	r1, #4
 8007fe8:	f7ff ff94 	bl	8007f14 <std>
 8007fec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	2109      	movs	r1, #9
 8007ff4:	f7ff ff8e 	bl	8007f14 <std>
 8007ff8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007ffc:	2202      	movs	r2, #2
 8007ffe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008002:	2112      	movs	r1, #18
 8008004:	f7ff bf86 	b.w	8007f14 <std>
 8008008:	200009ac 	.word	0x200009ac
 800800c:	20000874 	.word	0x20000874
 8008010:	08007f81 	.word	0x08007f81

08008014 <__sfp_lock_acquire>:
 8008014:	4801      	ldr	r0, [pc, #4]	@ (800801c <__sfp_lock_acquire+0x8>)
 8008016:	f000 bf26 	b.w	8008e66 <__retarget_lock_acquire_recursive>
 800801a:	bf00      	nop
 800801c:	200009b1 	.word	0x200009b1

08008020 <__sfp_lock_release>:
 8008020:	4801      	ldr	r0, [pc, #4]	@ (8008028 <__sfp_lock_release+0x8>)
 8008022:	f000 bf21 	b.w	8008e68 <__retarget_lock_release_recursive>
 8008026:	bf00      	nop
 8008028:	200009b1 	.word	0x200009b1

0800802c <__sinit>:
 800802c:	b510      	push	{r4, lr}
 800802e:	4604      	mov	r4, r0
 8008030:	f7ff fff0 	bl	8008014 <__sfp_lock_acquire>
 8008034:	6a23      	ldr	r3, [r4, #32]
 8008036:	b11b      	cbz	r3, 8008040 <__sinit+0x14>
 8008038:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800803c:	f7ff bff0 	b.w	8008020 <__sfp_lock_release>
 8008040:	4b04      	ldr	r3, [pc, #16]	@ (8008054 <__sinit+0x28>)
 8008042:	6223      	str	r3, [r4, #32]
 8008044:	4b04      	ldr	r3, [pc, #16]	@ (8008058 <__sinit+0x2c>)
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d1f5      	bne.n	8008038 <__sinit+0xc>
 800804c:	f7ff ffc4 	bl	8007fd8 <global_stdio_init.part.0>
 8008050:	e7f2      	b.n	8008038 <__sinit+0xc>
 8008052:	bf00      	nop
 8008054:	08007f99 	.word	0x08007f99
 8008058:	200009ac 	.word	0x200009ac

0800805c <sulp>:
 800805c:	b570      	push	{r4, r5, r6, lr}
 800805e:	4604      	mov	r4, r0
 8008060:	460d      	mov	r5, r1
 8008062:	ec45 4b10 	vmov	d0, r4, r5
 8008066:	4616      	mov	r6, r2
 8008068:	f002 fee2 	bl	800ae30 <__ulp>
 800806c:	ec51 0b10 	vmov	r0, r1, d0
 8008070:	b17e      	cbz	r6, 8008092 <sulp+0x36>
 8008072:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008076:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800807a:	2b00      	cmp	r3, #0
 800807c:	dd09      	ble.n	8008092 <sulp+0x36>
 800807e:	051b      	lsls	r3, r3, #20
 8008080:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008084:	2400      	movs	r4, #0
 8008086:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800808a:	4622      	mov	r2, r4
 800808c:	462b      	mov	r3, r5
 800808e:	f7f8 fab3 	bl	80005f8 <__aeabi_dmul>
 8008092:	ec41 0b10 	vmov	d0, r0, r1
 8008096:	bd70      	pop	{r4, r5, r6, pc}

08008098 <_strtod_l>:
 8008098:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800809c:	b09f      	sub	sp, #124	@ 0x7c
 800809e:	460c      	mov	r4, r1
 80080a0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80080a2:	2200      	movs	r2, #0
 80080a4:	921a      	str	r2, [sp, #104]	@ 0x68
 80080a6:	9005      	str	r0, [sp, #20]
 80080a8:	f04f 0a00 	mov.w	sl, #0
 80080ac:	f04f 0b00 	mov.w	fp, #0
 80080b0:	460a      	mov	r2, r1
 80080b2:	9219      	str	r2, [sp, #100]	@ 0x64
 80080b4:	7811      	ldrb	r1, [r2, #0]
 80080b6:	292b      	cmp	r1, #43	@ 0x2b
 80080b8:	d04a      	beq.n	8008150 <_strtod_l+0xb8>
 80080ba:	d838      	bhi.n	800812e <_strtod_l+0x96>
 80080bc:	290d      	cmp	r1, #13
 80080be:	d832      	bhi.n	8008126 <_strtod_l+0x8e>
 80080c0:	2908      	cmp	r1, #8
 80080c2:	d832      	bhi.n	800812a <_strtod_l+0x92>
 80080c4:	2900      	cmp	r1, #0
 80080c6:	d03b      	beq.n	8008140 <_strtod_l+0xa8>
 80080c8:	2200      	movs	r2, #0
 80080ca:	920b      	str	r2, [sp, #44]	@ 0x2c
 80080cc:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 80080ce:	782a      	ldrb	r2, [r5, #0]
 80080d0:	2a30      	cmp	r2, #48	@ 0x30
 80080d2:	f040 80b3 	bne.w	800823c <_strtod_l+0x1a4>
 80080d6:	786a      	ldrb	r2, [r5, #1]
 80080d8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80080dc:	2a58      	cmp	r2, #88	@ 0x58
 80080de:	d16e      	bne.n	80081be <_strtod_l+0x126>
 80080e0:	9302      	str	r3, [sp, #8]
 80080e2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80080e4:	9301      	str	r3, [sp, #4]
 80080e6:	ab1a      	add	r3, sp, #104	@ 0x68
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	4a8e      	ldr	r2, [pc, #568]	@ (8008324 <_strtod_l+0x28c>)
 80080ec:	9805      	ldr	r0, [sp, #20]
 80080ee:	ab1b      	add	r3, sp, #108	@ 0x6c
 80080f0:	a919      	add	r1, sp, #100	@ 0x64
 80080f2:	f001 fd8d 	bl	8009c10 <__gethex>
 80080f6:	f010 060f 	ands.w	r6, r0, #15
 80080fa:	4604      	mov	r4, r0
 80080fc:	d005      	beq.n	800810a <_strtod_l+0x72>
 80080fe:	2e06      	cmp	r6, #6
 8008100:	d128      	bne.n	8008154 <_strtod_l+0xbc>
 8008102:	3501      	adds	r5, #1
 8008104:	2300      	movs	r3, #0
 8008106:	9519      	str	r5, [sp, #100]	@ 0x64
 8008108:	930b      	str	r3, [sp, #44]	@ 0x2c
 800810a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800810c:	2b00      	cmp	r3, #0
 800810e:	f040 858e 	bne.w	8008c2e <_strtod_l+0xb96>
 8008112:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008114:	b1cb      	cbz	r3, 800814a <_strtod_l+0xb2>
 8008116:	4652      	mov	r2, sl
 8008118:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800811c:	ec43 2b10 	vmov	d0, r2, r3
 8008120:	b01f      	add	sp, #124	@ 0x7c
 8008122:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008126:	2920      	cmp	r1, #32
 8008128:	d1ce      	bne.n	80080c8 <_strtod_l+0x30>
 800812a:	3201      	adds	r2, #1
 800812c:	e7c1      	b.n	80080b2 <_strtod_l+0x1a>
 800812e:	292d      	cmp	r1, #45	@ 0x2d
 8008130:	d1ca      	bne.n	80080c8 <_strtod_l+0x30>
 8008132:	2101      	movs	r1, #1
 8008134:	910b      	str	r1, [sp, #44]	@ 0x2c
 8008136:	1c51      	adds	r1, r2, #1
 8008138:	9119      	str	r1, [sp, #100]	@ 0x64
 800813a:	7852      	ldrb	r2, [r2, #1]
 800813c:	2a00      	cmp	r2, #0
 800813e:	d1c5      	bne.n	80080cc <_strtod_l+0x34>
 8008140:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008142:	9419      	str	r4, [sp, #100]	@ 0x64
 8008144:	2b00      	cmp	r3, #0
 8008146:	f040 8570 	bne.w	8008c2a <_strtod_l+0xb92>
 800814a:	4652      	mov	r2, sl
 800814c:	465b      	mov	r3, fp
 800814e:	e7e5      	b.n	800811c <_strtod_l+0x84>
 8008150:	2100      	movs	r1, #0
 8008152:	e7ef      	b.n	8008134 <_strtod_l+0x9c>
 8008154:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008156:	b13a      	cbz	r2, 8008168 <_strtod_l+0xd0>
 8008158:	2135      	movs	r1, #53	@ 0x35
 800815a:	a81c      	add	r0, sp, #112	@ 0x70
 800815c:	f002 ff62 	bl	800b024 <__copybits>
 8008160:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008162:	9805      	ldr	r0, [sp, #20]
 8008164:	f002 fb30 	bl	800a7c8 <_Bfree>
 8008168:	3e01      	subs	r6, #1
 800816a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800816c:	2e04      	cmp	r6, #4
 800816e:	d806      	bhi.n	800817e <_strtod_l+0xe6>
 8008170:	e8df f006 	tbb	[pc, r6]
 8008174:	201d0314 	.word	0x201d0314
 8008178:	14          	.byte	0x14
 8008179:	00          	.byte	0x00
 800817a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800817e:	05e1      	lsls	r1, r4, #23
 8008180:	bf48      	it	mi
 8008182:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008186:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800818a:	0d1b      	lsrs	r3, r3, #20
 800818c:	051b      	lsls	r3, r3, #20
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1bb      	bne.n	800810a <_strtod_l+0x72>
 8008192:	f000 fe3d 	bl	8008e10 <__errno>
 8008196:	2322      	movs	r3, #34	@ 0x22
 8008198:	6003      	str	r3, [r0, #0]
 800819a:	e7b6      	b.n	800810a <_strtod_l+0x72>
 800819c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80081a0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80081a4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80081a8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80081ac:	e7e7      	b.n	800817e <_strtod_l+0xe6>
 80081ae:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800832c <_strtod_l+0x294>
 80081b2:	e7e4      	b.n	800817e <_strtod_l+0xe6>
 80081b4:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80081b8:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80081bc:	e7df      	b.n	800817e <_strtod_l+0xe6>
 80081be:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081c0:	1c5a      	adds	r2, r3, #1
 80081c2:	9219      	str	r2, [sp, #100]	@ 0x64
 80081c4:	785b      	ldrb	r3, [r3, #1]
 80081c6:	2b30      	cmp	r3, #48	@ 0x30
 80081c8:	d0f9      	beq.n	80081be <_strtod_l+0x126>
 80081ca:	2b00      	cmp	r3, #0
 80081cc:	d09d      	beq.n	800810a <_strtod_l+0x72>
 80081ce:	2301      	movs	r3, #1
 80081d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80081d2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80081d4:	930c      	str	r3, [sp, #48]	@ 0x30
 80081d6:	2300      	movs	r3, #0
 80081d8:	9308      	str	r3, [sp, #32]
 80081da:	930a      	str	r3, [sp, #40]	@ 0x28
 80081dc:	461f      	mov	r7, r3
 80081de:	220a      	movs	r2, #10
 80081e0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80081e2:	7805      	ldrb	r5, [r0, #0]
 80081e4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80081e8:	b2d9      	uxtb	r1, r3
 80081ea:	2909      	cmp	r1, #9
 80081ec:	d928      	bls.n	8008240 <_strtod_l+0x1a8>
 80081ee:	494e      	ldr	r1, [pc, #312]	@ (8008328 <_strtod_l+0x290>)
 80081f0:	2201      	movs	r2, #1
 80081f2:	f000 fdd5 	bl	8008da0 <strncmp>
 80081f6:	2800      	cmp	r0, #0
 80081f8:	d032      	beq.n	8008260 <_strtod_l+0x1c8>
 80081fa:	2000      	movs	r0, #0
 80081fc:	462a      	mov	r2, r5
 80081fe:	4681      	mov	r9, r0
 8008200:	463d      	mov	r5, r7
 8008202:	4603      	mov	r3, r0
 8008204:	2a65      	cmp	r2, #101	@ 0x65
 8008206:	d001      	beq.n	800820c <_strtod_l+0x174>
 8008208:	2a45      	cmp	r2, #69	@ 0x45
 800820a:	d114      	bne.n	8008236 <_strtod_l+0x19e>
 800820c:	b91d      	cbnz	r5, 8008216 <_strtod_l+0x17e>
 800820e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008210:	4302      	orrs	r2, r0
 8008212:	d095      	beq.n	8008140 <_strtod_l+0xa8>
 8008214:	2500      	movs	r5, #0
 8008216:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008218:	1c62      	adds	r2, r4, #1
 800821a:	9219      	str	r2, [sp, #100]	@ 0x64
 800821c:	7862      	ldrb	r2, [r4, #1]
 800821e:	2a2b      	cmp	r2, #43	@ 0x2b
 8008220:	d077      	beq.n	8008312 <_strtod_l+0x27a>
 8008222:	2a2d      	cmp	r2, #45	@ 0x2d
 8008224:	d07b      	beq.n	800831e <_strtod_l+0x286>
 8008226:	f04f 0c00 	mov.w	ip, #0
 800822a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800822e:	2909      	cmp	r1, #9
 8008230:	f240 8082 	bls.w	8008338 <_strtod_l+0x2a0>
 8008234:	9419      	str	r4, [sp, #100]	@ 0x64
 8008236:	f04f 0800 	mov.w	r8, #0
 800823a:	e0a2      	b.n	8008382 <_strtod_l+0x2ea>
 800823c:	2300      	movs	r3, #0
 800823e:	e7c7      	b.n	80081d0 <_strtod_l+0x138>
 8008240:	2f08      	cmp	r7, #8
 8008242:	bfd5      	itete	le
 8008244:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8008246:	9908      	ldrgt	r1, [sp, #32]
 8008248:	fb02 3301 	mlale	r3, r2, r1, r3
 800824c:	fb02 3301 	mlagt	r3, r2, r1, r3
 8008250:	f100 0001 	add.w	r0, r0, #1
 8008254:	bfd4      	ite	le
 8008256:	930a      	strle	r3, [sp, #40]	@ 0x28
 8008258:	9308      	strgt	r3, [sp, #32]
 800825a:	3701      	adds	r7, #1
 800825c:	9019      	str	r0, [sp, #100]	@ 0x64
 800825e:	e7bf      	b.n	80081e0 <_strtod_l+0x148>
 8008260:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008262:	1c5a      	adds	r2, r3, #1
 8008264:	9219      	str	r2, [sp, #100]	@ 0x64
 8008266:	785a      	ldrb	r2, [r3, #1]
 8008268:	b37f      	cbz	r7, 80082ca <_strtod_l+0x232>
 800826a:	4681      	mov	r9, r0
 800826c:	463d      	mov	r5, r7
 800826e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008272:	2b09      	cmp	r3, #9
 8008274:	d912      	bls.n	800829c <_strtod_l+0x204>
 8008276:	2301      	movs	r3, #1
 8008278:	e7c4      	b.n	8008204 <_strtod_l+0x16c>
 800827a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800827c:	1c5a      	adds	r2, r3, #1
 800827e:	9219      	str	r2, [sp, #100]	@ 0x64
 8008280:	785a      	ldrb	r2, [r3, #1]
 8008282:	3001      	adds	r0, #1
 8008284:	2a30      	cmp	r2, #48	@ 0x30
 8008286:	d0f8      	beq.n	800827a <_strtod_l+0x1e2>
 8008288:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800828c:	2b08      	cmp	r3, #8
 800828e:	f200 84d3 	bhi.w	8008c38 <_strtod_l+0xba0>
 8008292:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008294:	930c      	str	r3, [sp, #48]	@ 0x30
 8008296:	4681      	mov	r9, r0
 8008298:	2000      	movs	r0, #0
 800829a:	4605      	mov	r5, r0
 800829c:	3a30      	subs	r2, #48	@ 0x30
 800829e:	f100 0301 	add.w	r3, r0, #1
 80082a2:	d02a      	beq.n	80082fa <_strtod_l+0x262>
 80082a4:	4499      	add	r9, r3
 80082a6:	eb00 0c05 	add.w	ip, r0, r5
 80082aa:	462b      	mov	r3, r5
 80082ac:	210a      	movs	r1, #10
 80082ae:	4563      	cmp	r3, ip
 80082b0:	d10d      	bne.n	80082ce <_strtod_l+0x236>
 80082b2:	1c69      	adds	r1, r5, #1
 80082b4:	4401      	add	r1, r0
 80082b6:	4428      	add	r0, r5
 80082b8:	2808      	cmp	r0, #8
 80082ba:	dc16      	bgt.n	80082ea <_strtod_l+0x252>
 80082bc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80082be:	230a      	movs	r3, #10
 80082c0:	fb03 2300 	mla	r3, r3, r0, r2
 80082c4:	930a      	str	r3, [sp, #40]	@ 0x28
 80082c6:	2300      	movs	r3, #0
 80082c8:	e018      	b.n	80082fc <_strtod_l+0x264>
 80082ca:	4638      	mov	r0, r7
 80082cc:	e7da      	b.n	8008284 <_strtod_l+0x1ec>
 80082ce:	2b08      	cmp	r3, #8
 80082d0:	f103 0301 	add.w	r3, r3, #1
 80082d4:	dc03      	bgt.n	80082de <_strtod_l+0x246>
 80082d6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80082d8:	434e      	muls	r6, r1
 80082da:	960a      	str	r6, [sp, #40]	@ 0x28
 80082dc:	e7e7      	b.n	80082ae <_strtod_l+0x216>
 80082de:	2b10      	cmp	r3, #16
 80082e0:	bfde      	ittt	le
 80082e2:	9e08      	ldrle	r6, [sp, #32]
 80082e4:	434e      	mulle	r6, r1
 80082e6:	9608      	strle	r6, [sp, #32]
 80082e8:	e7e1      	b.n	80082ae <_strtod_l+0x216>
 80082ea:	280f      	cmp	r0, #15
 80082ec:	dceb      	bgt.n	80082c6 <_strtod_l+0x22e>
 80082ee:	9808      	ldr	r0, [sp, #32]
 80082f0:	230a      	movs	r3, #10
 80082f2:	fb03 2300 	mla	r3, r3, r0, r2
 80082f6:	9308      	str	r3, [sp, #32]
 80082f8:	e7e5      	b.n	80082c6 <_strtod_l+0x22e>
 80082fa:	4629      	mov	r1, r5
 80082fc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80082fe:	1c50      	adds	r0, r2, #1
 8008300:	9019      	str	r0, [sp, #100]	@ 0x64
 8008302:	7852      	ldrb	r2, [r2, #1]
 8008304:	4618      	mov	r0, r3
 8008306:	460d      	mov	r5, r1
 8008308:	e7b1      	b.n	800826e <_strtod_l+0x1d6>
 800830a:	f04f 0900 	mov.w	r9, #0
 800830e:	2301      	movs	r3, #1
 8008310:	e77d      	b.n	800820e <_strtod_l+0x176>
 8008312:	f04f 0c00 	mov.w	ip, #0
 8008316:	1ca2      	adds	r2, r4, #2
 8008318:	9219      	str	r2, [sp, #100]	@ 0x64
 800831a:	78a2      	ldrb	r2, [r4, #2]
 800831c:	e785      	b.n	800822a <_strtod_l+0x192>
 800831e:	f04f 0c01 	mov.w	ip, #1
 8008322:	e7f8      	b.n	8008316 <_strtod_l+0x27e>
 8008324:	08010bf0 	.word	0x08010bf0
 8008328:	08010bd9 	.word	0x08010bd9
 800832c:	7ff00000 	.word	0x7ff00000
 8008330:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008332:	1c51      	adds	r1, r2, #1
 8008334:	9119      	str	r1, [sp, #100]	@ 0x64
 8008336:	7852      	ldrb	r2, [r2, #1]
 8008338:	2a30      	cmp	r2, #48	@ 0x30
 800833a:	d0f9      	beq.n	8008330 <_strtod_l+0x298>
 800833c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008340:	2908      	cmp	r1, #8
 8008342:	f63f af78 	bhi.w	8008236 <_strtod_l+0x19e>
 8008346:	3a30      	subs	r2, #48	@ 0x30
 8008348:	920e      	str	r2, [sp, #56]	@ 0x38
 800834a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800834c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800834e:	f04f 080a 	mov.w	r8, #10
 8008352:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008354:	1c56      	adds	r6, r2, #1
 8008356:	9619      	str	r6, [sp, #100]	@ 0x64
 8008358:	7852      	ldrb	r2, [r2, #1]
 800835a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800835e:	f1be 0f09 	cmp.w	lr, #9
 8008362:	d939      	bls.n	80083d8 <_strtod_l+0x340>
 8008364:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008366:	1a76      	subs	r6, r6, r1
 8008368:	2e08      	cmp	r6, #8
 800836a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800836e:	dc03      	bgt.n	8008378 <_strtod_l+0x2e0>
 8008370:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8008372:	4588      	cmp	r8, r1
 8008374:	bfa8      	it	ge
 8008376:	4688      	movge	r8, r1
 8008378:	f1bc 0f00 	cmp.w	ip, #0
 800837c:	d001      	beq.n	8008382 <_strtod_l+0x2ea>
 800837e:	f1c8 0800 	rsb	r8, r8, #0
 8008382:	2d00      	cmp	r5, #0
 8008384:	d14e      	bne.n	8008424 <_strtod_l+0x38c>
 8008386:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008388:	4308      	orrs	r0, r1
 800838a:	f47f aebe 	bne.w	800810a <_strtod_l+0x72>
 800838e:	2b00      	cmp	r3, #0
 8008390:	f47f aed6 	bne.w	8008140 <_strtod_l+0xa8>
 8008394:	2a69      	cmp	r2, #105	@ 0x69
 8008396:	d028      	beq.n	80083ea <_strtod_l+0x352>
 8008398:	dc25      	bgt.n	80083e6 <_strtod_l+0x34e>
 800839a:	2a49      	cmp	r2, #73	@ 0x49
 800839c:	d025      	beq.n	80083ea <_strtod_l+0x352>
 800839e:	2a4e      	cmp	r2, #78	@ 0x4e
 80083a0:	f47f aece 	bne.w	8008140 <_strtod_l+0xa8>
 80083a4:	499b      	ldr	r1, [pc, #620]	@ (8008614 <_strtod_l+0x57c>)
 80083a6:	a819      	add	r0, sp, #100	@ 0x64
 80083a8:	f001 fe54 	bl	800a054 <__match>
 80083ac:	2800      	cmp	r0, #0
 80083ae:	f43f aec7 	beq.w	8008140 <_strtod_l+0xa8>
 80083b2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083b4:	781b      	ldrb	r3, [r3, #0]
 80083b6:	2b28      	cmp	r3, #40	@ 0x28
 80083b8:	d12e      	bne.n	8008418 <_strtod_l+0x380>
 80083ba:	4997      	ldr	r1, [pc, #604]	@ (8008618 <_strtod_l+0x580>)
 80083bc:	aa1c      	add	r2, sp, #112	@ 0x70
 80083be:	a819      	add	r0, sp, #100	@ 0x64
 80083c0:	f001 fe5c 	bl	800a07c <__hexnan>
 80083c4:	2805      	cmp	r0, #5
 80083c6:	d127      	bne.n	8008418 <_strtod_l+0x380>
 80083c8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80083ca:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80083ce:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80083d2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80083d6:	e698      	b.n	800810a <_strtod_l+0x72>
 80083d8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80083da:	fb08 2101 	mla	r1, r8, r1, r2
 80083de:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80083e2:	920e      	str	r2, [sp, #56]	@ 0x38
 80083e4:	e7b5      	b.n	8008352 <_strtod_l+0x2ba>
 80083e6:	2a6e      	cmp	r2, #110	@ 0x6e
 80083e8:	e7da      	b.n	80083a0 <_strtod_l+0x308>
 80083ea:	498c      	ldr	r1, [pc, #560]	@ (800861c <_strtod_l+0x584>)
 80083ec:	a819      	add	r0, sp, #100	@ 0x64
 80083ee:	f001 fe31 	bl	800a054 <__match>
 80083f2:	2800      	cmp	r0, #0
 80083f4:	f43f aea4 	beq.w	8008140 <_strtod_l+0xa8>
 80083f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80083fa:	4989      	ldr	r1, [pc, #548]	@ (8008620 <_strtod_l+0x588>)
 80083fc:	3b01      	subs	r3, #1
 80083fe:	a819      	add	r0, sp, #100	@ 0x64
 8008400:	9319      	str	r3, [sp, #100]	@ 0x64
 8008402:	f001 fe27 	bl	800a054 <__match>
 8008406:	b910      	cbnz	r0, 800840e <_strtod_l+0x376>
 8008408:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800840a:	3301      	adds	r3, #1
 800840c:	9319      	str	r3, [sp, #100]	@ 0x64
 800840e:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8008630 <_strtod_l+0x598>
 8008412:	f04f 0a00 	mov.w	sl, #0
 8008416:	e678      	b.n	800810a <_strtod_l+0x72>
 8008418:	4882      	ldr	r0, [pc, #520]	@ (8008624 <_strtod_l+0x58c>)
 800841a:	f000 fd35 	bl	8008e88 <nan>
 800841e:	ec5b ab10 	vmov	sl, fp, d0
 8008422:	e672      	b.n	800810a <_strtod_l+0x72>
 8008424:	eba8 0309 	sub.w	r3, r8, r9
 8008428:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800842a:	9309      	str	r3, [sp, #36]	@ 0x24
 800842c:	2f00      	cmp	r7, #0
 800842e:	bf08      	it	eq
 8008430:	462f      	moveq	r7, r5
 8008432:	2d10      	cmp	r5, #16
 8008434:	462c      	mov	r4, r5
 8008436:	bfa8      	it	ge
 8008438:	2410      	movge	r4, #16
 800843a:	f7f8 f863 	bl	8000504 <__aeabi_ui2d>
 800843e:	2d09      	cmp	r5, #9
 8008440:	4682      	mov	sl, r0
 8008442:	468b      	mov	fp, r1
 8008444:	dc13      	bgt.n	800846e <_strtod_l+0x3d6>
 8008446:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008448:	2b00      	cmp	r3, #0
 800844a:	f43f ae5e 	beq.w	800810a <_strtod_l+0x72>
 800844e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008450:	dd78      	ble.n	8008544 <_strtod_l+0x4ac>
 8008452:	2b16      	cmp	r3, #22
 8008454:	dc5f      	bgt.n	8008516 <_strtod_l+0x47e>
 8008456:	4974      	ldr	r1, [pc, #464]	@ (8008628 <_strtod_l+0x590>)
 8008458:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800845c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008460:	4652      	mov	r2, sl
 8008462:	465b      	mov	r3, fp
 8008464:	f7f8 f8c8 	bl	80005f8 <__aeabi_dmul>
 8008468:	4682      	mov	sl, r0
 800846a:	468b      	mov	fp, r1
 800846c:	e64d      	b.n	800810a <_strtod_l+0x72>
 800846e:	4b6e      	ldr	r3, [pc, #440]	@ (8008628 <_strtod_l+0x590>)
 8008470:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008474:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008478:	f7f8 f8be 	bl	80005f8 <__aeabi_dmul>
 800847c:	4682      	mov	sl, r0
 800847e:	9808      	ldr	r0, [sp, #32]
 8008480:	468b      	mov	fp, r1
 8008482:	f7f8 f83f 	bl	8000504 <__aeabi_ui2d>
 8008486:	4602      	mov	r2, r0
 8008488:	460b      	mov	r3, r1
 800848a:	4650      	mov	r0, sl
 800848c:	4659      	mov	r1, fp
 800848e:	f7f7 fefd 	bl	800028c <__adddf3>
 8008492:	2d0f      	cmp	r5, #15
 8008494:	4682      	mov	sl, r0
 8008496:	468b      	mov	fp, r1
 8008498:	ddd5      	ble.n	8008446 <_strtod_l+0x3ae>
 800849a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800849c:	1b2c      	subs	r4, r5, r4
 800849e:	441c      	add	r4, r3
 80084a0:	2c00      	cmp	r4, #0
 80084a2:	f340 8096 	ble.w	80085d2 <_strtod_l+0x53a>
 80084a6:	f014 030f 	ands.w	r3, r4, #15
 80084aa:	d00a      	beq.n	80084c2 <_strtod_l+0x42a>
 80084ac:	495e      	ldr	r1, [pc, #376]	@ (8008628 <_strtod_l+0x590>)
 80084ae:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80084b2:	4652      	mov	r2, sl
 80084b4:	465b      	mov	r3, fp
 80084b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80084ba:	f7f8 f89d 	bl	80005f8 <__aeabi_dmul>
 80084be:	4682      	mov	sl, r0
 80084c0:	468b      	mov	fp, r1
 80084c2:	f034 040f 	bics.w	r4, r4, #15
 80084c6:	d073      	beq.n	80085b0 <_strtod_l+0x518>
 80084c8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80084cc:	dd48      	ble.n	8008560 <_strtod_l+0x4c8>
 80084ce:	2400      	movs	r4, #0
 80084d0:	46a0      	mov	r8, r4
 80084d2:	940a      	str	r4, [sp, #40]	@ 0x28
 80084d4:	46a1      	mov	r9, r4
 80084d6:	9a05      	ldr	r2, [sp, #20]
 80084d8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8008630 <_strtod_l+0x598>
 80084dc:	2322      	movs	r3, #34	@ 0x22
 80084de:	6013      	str	r3, [r2, #0]
 80084e0:	f04f 0a00 	mov.w	sl, #0
 80084e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	f43f ae0f 	beq.w	800810a <_strtod_l+0x72>
 80084ec:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80084ee:	9805      	ldr	r0, [sp, #20]
 80084f0:	f002 f96a 	bl	800a7c8 <_Bfree>
 80084f4:	9805      	ldr	r0, [sp, #20]
 80084f6:	4649      	mov	r1, r9
 80084f8:	f002 f966 	bl	800a7c8 <_Bfree>
 80084fc:	9805      	ldr	r0, [sp, #20]
 80084fe:	4641      	mov	r1, r8
 8008500:	f002 f962 	bl	800a7c8 <_Bfree>
 8008504:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008506:	9805      	ldr	r0, [sp, #20]
 8008508:	f002 f95e 	bl	800a7c8 <_Bfree>
 800850c:	9805      	ldr	r0, [sp, #20]
 800850e:	4621      	mov	r1, r4
 8008510:	f002 f95a 	bl	800a7c8 <_Bfree>
 8008514:	e5f9      	b.n	800810a <_strtod_l+0x72>
 8008516:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008518:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800851c:	4293      	cmp	r3, r2
 800851e:	dbbc      	blt.n	800849a <_strtod_l+0x402>
 8008520:	4c41      	ldr	r4, [pc, #260]	@ (8008628 <_strtod_l+0x590>)
 8008522:	f1c5 050f 	rsb	r5, r5, #15
 8008526:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800852a:	4652      	mov	r2, sl
 800852c:	465b      	mov	r3, fp
 800852e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008532:	f7f8 f861 	bl	80005f8 <__aeabi_dmul>
 8008536:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008538:	1b5d      	subs	r5, r3, r5
 800853a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800853e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008542:	e78f      	b.n	8008464 <_strtod_l+0x3cc>
 8008544:	3316      	adds	r3, #22
 8008546:	dba8      	blt.n	800849a <_strtod_l+0x402>
 8008548:	4b37      	ldr	r3, [pc, #220]	@ (8008628 <_strtod_l+0x590>)
 800854a:	eba9 0808 	sub.w	r8, r9, r8
 800854e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008552:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008556:	4650      	mov	r0, sl
 8008558:	4659      	mov	r1, fp
 800855a:	f7f8 f977 	bl	800084c <__aeabi_ddiv>
 800855e:	e783      	b.n	8008468 <_strtod_l+0x3d0>
 8008560:	4b32      	ldr	r3, [pc, #200]	@ (800862c <_strtod_l+0x594>)
 8008562:	9308      	str	r3, [sp, #32]
 8008564:	2300      	movs	r3, #0
 8008566:	1124      	asrs	r4, r4, #4
 8008568:	4650      	mov	r0, sl
 800856a:	4659      	mov	r1, fp
 800856c:	461e      	mov	r6, r3
 800856e:	2c01      	cmp	r4, #1
 8008570:	dc21      	bgt.n	80085b6 <_strtod_l+0x51e>
 8008572:	b10b      	cbz	r3, 8008578 <_strtod_l+0x4e0>
 8008574:	4682      	mov	sl, r0
 8008576:	468b      	mov	fp, r1
 8008578:	492c      	ldr	r1, [pc, #176]	@ (800862c <_strtod_l+0x594>)
 800857a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800857e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008582:	4652      	mov	r2, sl
 8008584:	465b      	mov	r3, fp
 8008586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800858a:	f7f8 f835 	bl	80005f8 <__aeabi_dmul>
 800858e:	4b28      	ldr	r3, [pc, #160]	@ (8008630 <_strtod_l+0x598>)
 8008590:	460a      	mov	r2, r1
 8008592:	400b      	ands	r3, r1
 8008594:	4927      	ldr	r1, [pc, #156]	@ (8008634 <_strtod_l+0x59c>)
 8008596:	428b      	cmp	r3, r1
 8008598:	4682      	mov	sl, r0
 800859a:	d898      	bhi.n	80084ce <_strtod_l+0x436>
 800859c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80085a0:	428b      	cmp	r3, r1
 80085a2:	bf86      	itte	hi
 80085a4:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8008638 <_strtod_l+0x5a0>
 80085a8:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 80085ac:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80085b0:	2300      	movs	r3, #0
 80085b2:	9308      	str	r3, [sp, #32]
 80085b4:	e07a      	b.n	80086ac <_strtod_l+0x614>
 80085b6:	07e2      	lsls	r2, r4, #31
 80085b8:	d505      	bpl.n	80085c6 <_strtod_l+0x52e>
 80085ba:	9b08      	ldr	r3, [sp, #32]
 80085bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c0:	f7f8 f81a 	bl	80005f8 <__aeabi_dmul>
 80085c4:	2301      	movs	r3, #1
 80085c6:	9a08      	ldr	r2, [sp, #32]
 80085c8:	3208      	adds	r2, #8
 80085ca:	3601      	adds	r6, #1
 80085cc:	1064      	asrs	r4, r4, #1
 80085ce:	9208      	str	r2, [sp, #32]
 80085d0:	e7cd      	b.n	800856e <_strtod_l+0x4d6>
 80085d2:	d0ed      	beq.n	80085b0 <_strtod_l+0x518>
 80085d4:	4264      	negs	r4, r4
 80085d6:	f014 020f 	ands.w	r2, r4, #15
 80085da:	d00a      	beq.n	80085f2 <_strtod_l+0x55a>
 80085dc:	4b12      	ldr	r3, [pc, #72]	@ (8008628 <_strtod_l+0x590>)
 80085de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085e2:	4650      	mov	r0, sl
 80085e4:	4659      	mov	r1, fp
 80085e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085ea:	f7f8 f92f 	bl	800084c <__aeabi_ddiv>
 80085ee:	4682      	mov	sl, r0
 80085f0:	468b      	mov	fp, r1
 80085f2:	1124      	asrs	r4, r4, #4
 80085f4:	d0dc      	beq.n	80085b0 <_strtod_l+0x518>
 80085f6:	2c1f      	cmp	r4, #31
 80085f8:	dd20      	ble.n	800863c <_strtod_l+0x5a4>
 80085fa:	2400      	movs	r4, #0
 80085fc:	46a0      	mov	r8, r4
 80085fe:	940a      	str	r4, [sp, #40]	@ 0x28
 8008600:	46a1      	mov	r9, r4
 8008602:	9a05      	ldr	r2, [sp, #20]
 8008604:	2322      	movs	r3, #34	@ 0x22
 8008606:	f04f 0a00 	mov.w	sl, #0
 800860a:	f04f 0b00 	mov.w	fp, #0
 800860e:	6013      	str	r3, [r2, #0]
 8008610:	e768      	b.n	80084e4 <_strtod_l+0x44c>
 8008612:	bf00      	nop
 8008614:	08010bad 	.word	0x08010bad
 8008618:	08010bdc 	.word	0x08010bdc
 800861c:	08010ba5 	.word	0x08010ba5
 8008620:	08010d3c 	.word	0x08010d3c
 8008624:	08010fcb 	.word	0x08010fcb
 8008628:	08010ec8 	.word	0x08010ec8
 800862c:	08010ea0 	.word	0x08010ea0
 8008630:	7ff00000 	.word	0x7ff00000
 8008634:	7ca00000 	.word	0x7ca00000
 8008638:	7fefffff 	.word	0x7fefffff
 800863c:	f014 0310 	ands.w	r3, r4, #16
 8008640:	bf18      	it	ne
 8008642:	236a      	movne	r3, #106	@ 0x6a
 8008644:	4ea9      	ldr	r6, [pc, #676]	@ (80088ec <_strtod_l+0x854>)
 8008646:	9308      	str	r3, [sp, #32]
 8008648:	4650      	mov	r0, sl
 800864a:	4659      	mov	r1, fp
 800864c:	2300      	movs	r3, #0
 800864e:	07e2      	lsls	r2, r4, #31
 8008650:	d504      	bpl.n	800865c <_strtod_l+0x5c4>
 8008652:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008656:	f7f7 ffcf 	bl	80005f8 <__aeabi_dmul>
 800865a:	2301      	movs	r3, #1
 800865c:	1064      	asrs	r4, r4, #1
 800865e:	f106 0608 	add.w	r6, r6, #8
 8008662:	d1f4      	bne.n	800864e <_strtod_l+0x5b6>
 8008664:	b10b      	cbz	r3, 800866a <_strtod_l+0x5d2>
 8008666:	4682      	mov	sl, r0
 8008668:	468b      	mov	fp, r1
 800866a:	9b08      	ldr	r3, [sp, #32]
 800866c:	b1b3      	cbz	r3, 800869c <_strtod_l+0x604>
 800866e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008672:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008676:	2b00      	cmp	r3, #0
 8008678:	4659      	mov	r1, fp
 800867a:	dd0f      	ble.n	800869c <_strtod_l+0x604>
 800867c:	2b1f      	cmp	r3, #31
 800867e:	dd55      	ble.n	800872c <_strtod_l+0x694>
 8008680:	2b34      	cmp	r3, #52	@ 0x34
 8008682:	bfde      	ittt	le
 8008684:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008688:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800868c:	4093      	lslle	r3, r2
 800868e:	f04f 0a00 	mov.w	sl, #0
 8008692:	bfcc      	ite	gt
 8008694:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8008698:	ea03 0b01 	andle.w	fp, r3, r1
 800869c:	2200      	movs	r2, #0
 800869e:	2300      	movs	r3, #0
 80086a0:	4650      	mov	r0, sl
 80086a2:	4659      	mov	r1, fp
 80086a4:	f7f8 fa10 	bl	8000ac8 <__aeabi_dcmpeq>
 80086a8:	2800      	cmp	r0, #0
 80086aa:	d1a6      	bne.n	80085fa <_strtod_l+0x562>
 80086ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086ae:	9300      	str	r3, [sp, #0]
 80086b0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80086b2:	9805      	ldr	r0, [sp, #20]
 80086b4:	462b      	mov	r3, r5
 80086b6:	463a      	mov	r2, r7
 80086b8:	f002 f8ee 	bl	800a898 <__s2b>
 80086bc:	900a      	str	r0, [sp, #40]	@ 0x28
 80086be:	2800      	cmp	r0, #0
 80086c0:	f43f af05 	beq.w	80084ce <_strtod_l+0x436>
 80086c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80086c6:	2a00      	cmp	r2, #0
 80086c8:	eba9 0308 	sub.w	r3, r9, r8
 80086cc:	bfa8      	it	ge
 80086ce:	2300      	movge	r3, #0
 80086d0:	9312      	str	r3, [sp, #72]	@ 0x48
 80086d2:	2400      	movs	r4, #0
 80086d4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80086d8:	9316      	str	r3, [sp, #88]	@ 0x58
 80086da:	46a0      	mov	r8, r4
 80086dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086de:	9805      	ldr	r0, [sp, #20]
 80086e0:	6859      	ldr	r1, [r3, #4]
 80086e2:	f002 f831 	bl	800a748 <_Balloc>
 80086e6:	4681      	mov	r9, r0
 80086e8:	2800      	cmp	r0, #0
 80086ea:	f43f aef4 	beq.w	80084d6 <_strtod_l+0x43e>
 80086ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80086f0:	691a      	ldr	r2, [r3, #16]
 80086f2:	3202      	adds	r2, #2
 80086f4:	f103 010c 	add.w	r1, r3, #12
 80086f8:	0092      	lsls	r2, r2, #2
 80086fa:	300c      	adds	r0, #12
 80086fc:	f000 fbb5 	bl	8008e6a <memcpy>
 8008700:	ec4b ab10 	vmov	d0, sl, fp
 8008704:	9805      	ldr	r0, [sp, #20]
 8008706:	aa1c      	add	r2, sp, #112	@ 0x70
 8008708:	a91b      	add	r1, sp, #108	@ 0x6c
 800870a:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800870e:	f002 fbff 	bl	800af10 <__d2b>
 8008712:	901a      	str	r0, [sp, #104]	@ 0x68
 8008714:	2800      	cmp	r0, #0
 8008716:	f43f aede 	beq.w	80084d6 <_strtod_l+0x43e>
 800871a:	9805      	ldr	r0, [sp, #20]
 800871c:	2101      	movs	r1, #1
 800871e:	f002 f951 	bl	800a9c4 <__i2b>
 8008722:	4680      	mov	r8, r0
 8008724:	b948      	cbnz	r0, 800873a <_strtod_l+0x6a2>
 8008726:	f04f 0800 	mov.w	r8, #0
 800872a:	e6d4      	b.n	80084d6 <_strtod_l+0x43e>
 800872c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008730:	fa02 f303 	lsl.w	r3, r2, r3
 8008734:	ea03 0a0a 	and.w	sl, r3, sl
 8008738:	e7b0      	b.n	800869c <_strtod_l+0x604>
 800873a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800873c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800873e:	2d00      	cmp	r5, #0
 8008740:	bfab      	itete	ge
 8008742:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8008744:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8008746:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8008748:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800874a:	bfac      	ite	ge
 800874c:	18ef      	addge	r7, r5, r3
 800874e:	1b5e      	sublt	r6, r3, r5
 8008750:	9b08      	ldr	r3, [sp, #32]
 8008752:	1aed      	subs	r5, r5, r3
 8008754:	4415      	add	r5, r2
 8008756:	4b66      	ldr	r3, [pc, #408]	@ (80088f0 <_strtod_l+0x858>)
 8008758:	3d01      	subs	r5, #1
 800875a:	429d      	cmp	r5, r3
 800875c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8008760:	da50      	bge.n	8008804 <_strtod_l+0x76c>
 8008762:	1b5b      	subs	r3, r3, r5
 8008764:	2b1f      	cmp	r3, #31
 8008766:	eba2 0203 	sub.w	r2, r2, r3
 800876a:	f04f 0101 	mov.w	r1, #1
 800876e:	dc3d      	bgt.n	80087ec <_strtod_l+0x754>
 8008770:	fa01 f303 	lsl.w	r3, r1, r3
 8008774:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008776:	2300      	movs	r3, #0
 8008778:	9310      	str	r3, [sp, #64]	@ 0x40
 800877a:	18bd      	adds	r5, r7, r2
 800877c:	9b08      	ldr	r3, [sp, #32]
 800877e:	42af      	cmp	r7, r5
 8008780:	4416      	add	r6, r2
 8008782:	441e      	add	r6, r3
 8008784:	463b      	mov	r3, r7
 8008786:	bfa8      	it	ge
 8008788:	462b      	movge	r3, r5
 800878a:	42b3      	cmp	r3, r6
 800878c:	bfa8      	it	ge
 800878e:	4633      	movge	r3, r6
 8008790:	2b00      	cmp	r3, #0
 8008792:	bfc2      	ittt	gt
 8008794:	1aed      	subgt	r5, r5, r3
 8008796:	1af6      	subgt	r6, r6, r3
 8008798:	1aff      	subgt	r7, r7, r3
 800879a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800879c:	2b00      	cmp	r3, #0
 800879e:	dd16      	ble.n	80087ce <_strtod_l+0x736>
 80087a0:	4641      	mov	r1, r8
 80087a2:	9805      	ldr	r0, [sp, #20]
 80087a4:	461a      	mov	r2, r3
 80087a6:	f002 f9cd 	bl	800ab44 <__pow5mult>
 80087aa:	4680      	mov	r8, r0
 80087ac:	2800      	cmp	r0, #0
 80087ae:	d0ba      	beq.n	8008726 <_strtod_l+0x68e>
 80087b0:	4601      	mov	r1, r0
 80087b2:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80087b4:	9805      	ldr	r0, [sp, #20]
 80087b6:	f002 f91b 	bl	800a9f0 <__multiply>
 80087ba:	900e      	str	r0, [sp, #56]	@ 0x38
 80087bc:	2800      	cmp	r0, #0
 80087be:	f43f ae8a 	beq.w	80084d6 <_strtod_l+0x43e>
 80087c2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80087c4:	9805      	ldr	r0, [sp, #20]
 80087c6:	f001 ffff 	bl	800a7c8 <_Bfree>
 80087ca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80087cc:	931a      	str	r3, [sp, #104]	@ 0x68
 80087ce:	2d00      	cmp	r5, #0
 80087d0:	dc1d      	bgt.n	800880e <_strtod_l+0x776>
 80087d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	dd23      	ble.n	8008820 <_strtod_l+0x788>
 80087d8:	4649      	mov	r1, r9
 80087da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80087dc:	9805      	ldr	r0, [sp, #20]
 80087de:	f002 f9b1 	bl	800ab44 <__pow5mult>
 80087e2:	4681      	mov	r9, r0
 80087e4:	b9e0      	cbnz	r0, 8008820 <_strtod_l+0x788>
 80087e6:	f04f 0900 	mov.w	r9, #0
 80087ea:	e674      	b.n	80084d6 <_strtod_l+0x43e>
 80087ec:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80087f0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80087f4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80087f8:	35e2      	adds	r5, #226	@ 0xe2
 80087fa:	fa01 f305 	lsl.w	r3, r1, r5
 80087fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8008800:	9113      	str	r1, [sp, #76]	@ 0x4c
 8008802:	e7ba      	b.n	800877a <_strtod_l+0x6e2>
 8008804:	2300      	movs	r3, #0
 8008806:	9310      	str	r3, [sp, #64]	@ 0x40
 8008808:	2301      	movs	r3, #1
 800880a:	9313      	str	r3, [sp, #76]	@ 0x4c
 800880c:	e7b5      	b.n	800877a <_strtod_l+0x6e2>
 800880e:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008810:	9805      	ldr	r0, [sp, #20]
 8008812:	462a      	mov	r2, r5
 8008814:	f002 f9f0 	bl	800abf8 <__lshift>
 8008818:	901a      	str	r0, [sp, #104]	@ 0x68
 800881a:	2800      	cmp	r0, #0
 800881c:	d1d9      	bne.n	80087d2 <_strtod_l+0x73a>
 800881e:	e65a      	b.n	80084d6 <_strtod_l+0x43e>
 8008820:	2e00      	cmp	r6, #0
 8008822:	dd07      	ble.n	8008834 <_strtod_l+0x79c>
 8008824:	4649      	mov	r1, r9
 8008826:	9805      	ldr	r0, [sp, #20]
 8008828:	4632      	mov	r2, r6
 800882a:	f002 f9e5 	bl	800abf8 <__lshift>
 800882e:	4681      	mov	r9, r0
 8008830:	2800      	cmp	r0, #0
 8008832:	d0d8      	beq.n	80087e6 <_strtod_l+0x74e>
 8008834:	2f00      	cmp	r7, #0
 8008836:	dd08      	ble.n	800884a <_strtod_l+0x7b2>
 8008838:	4641      	mov	r1, r8
 800883a:	9805      	ldr	r0, [sp, #20]
 800883c:	463a      	mov	r2, r7
 800883e:	f002 f9db 	bl	800abf8 <__lshift>
 8008842:	4680      	mov	r8, r0
 8008844:	2800      	cmp	r0, #0
 8008846:	f43f ae46 	beq.w	80084d6 <_strtod_l+0x43e>
 800884a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800884c:	9805      	ldr	r0, [sp, #20]
 800884e:	464a      	mov	r2, r9
 8008850:	f002 fa5a 	bl	800ad08 <__mdiff>
 8008854:	4604      	mov	r4, r0
 8008856:	2800      	cmp	r0, #0
 8008858:	f43f ae3d 	beq.w	80084d6 <_strtod_l+0x43e>
 800885c:	68c3      	ldr	r3, [r0, #12]
 800885e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008860:	2300      	movs	r3, #0
 8008862:	60c3      	str	r3, [r0, #12]
 8008864:	4641      	mov	r1, r8
 8008866:	f002 fa33 	bl	800acd0 <__mcmp>
 800886a:	2800      	cmp	r0, #0
 800886c:	da46      	bge.n	80088fc <_strtod_l+0x864>
 800886e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008870:	ea53 030a 	orrs.w	r3, r3, sl
 8008874:	d16c      	bne.n	8008950 <_strtod_l+0x8b8>
 8008876:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800887a:	2b00      	cmp	r3, #0
 800887c:	d168      	bne.n	8008950 <_strtod_l+0x8b8>
 800887e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008882:	0d1b      	lsrs	r3, r3, #20
 8008884:	051b      	lsls	r3, r3, #20
 8008886:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800888a:	d961      	bls.n	8008950 <_strtod_l+0x8b8>
 800888c:	6963      	ldr	r3, [r4, #20]
 800888e:	b913      	cbnz	r3, 8008896 <_strtod_l+0x7fe>
 8008890:	6923      	ldr	r3, [r4, #16]
 8008892:	2b01      	cmp	r3, #1
 8008894:	dd5c      	ble.n	8008950 <_strtod_l+0x8b8>
 8008896:	4621      	mov	r1, r4
 8008898:	2201      	movs	r2, #1
 800889a:	9805      	ldr	r0, [sp, #20]
 800889c:	f002 f9ac 	bl	800abf8 <__lshift>
 80088a0:	4641      	mov	r1, r8
 80088a2:	4604      	mov	r4, r0
 80088a4:	f002 fa14 	bl	800acd0 <__mcmp>
 80088a8:	2800      	cmp	r0, #0
 80088aa:	dd51      	ble.n	8008950 <_strtod_l+0x8b8>
 80088ac:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80088b0:	9a08      	ldr	r2, [sp, #32]
 80088b2:	0d1b      	lsrs	r3, r3, #20
 80088b4:	051b      	lsls	r3, r3, #20
 80088b6:	2a00      	cmp	r2, #0
 80088b8:	d06b      	beq.n	8008992 <_strtod_l+0x8fa>
 80088ba:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80088be:	d868      	bhi.n	8008992 <_strtod_l+0x8fa>
 80088c0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80088c4:	f67f ae9d 	bls.w	8008602 <_strtod_l+0x56a>
 80088c8:	4b0a      	ldr	r3, [pc, #40]	@ (80088f4 <_strtod_l+0x85c>)
 80088ca:	4650      	mov	r0, sl
 80088cc:	4659      	mov	r1, fp
 80088ce:	2200      	movs	r2, #0
 80088d0:	f7f7 fe92 	bl	80005f8 <__aeabi_dmul>
 80088d4:	4b08      	ldr	r3, [pc, #32]	@ (80088f8 <_strtod_l+0x860>)
 80088d6:	400b      	ands	r3, r1
 80088d8:	4682      	mov	sl, r0
 80088da:	468b      	mov	fp, r1
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f47f ae05 	bne.w	80084ec <_strtod_l+0x454>
 80088e2:	9a05      	ldr	r2, [sp, #20]
 80088e4:	2322      	movs	r3, #34	@ 0x22
 80088e6:	6013      	str	r3, [r2, #0]
 80088e8:	e600      	b.n	80084ec <_strtod_l+0x454>
 80088ea:	bf00      	nop
 80088ec:	08010c08 	.word	0x08010c08
 80088f0:	fffffc02 	.word	0xfffffc02
 80088f4:	39500000 	.word	0x39500000
 80088f8:	7ff00000 	.word	0x7ff00000
 80088fc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008900:	d165      	bne.n	80089ce <_strtod_l+0x936>
 8008902:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8008904:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008908:	b35a      	cbz	r2, 8008962 <_strtod_l+0x8ca>
 800890a:	4a9f      	ldr	r2, [pc, #636]	@ (8008b88 <_strtod_l+0xaf0>)
 800890c:	4293      	cmp	r3, r2
 800890e:	d12b      	bne.n	8008968 <_strtod_l+0x8d0>
 8008910:	9b08      	ldr	r3, [sp, #32]
 8008912:	4651      	mov	r1, sl
 8008914:	b303      	cbz	r3, 8008958 <_strtod_l+0x8c0>
 8008916:	4b9d      	ldr	r3, [pc, #628]	@ (8008b8c <_strtod_l+0xaf4>)
 8008918:	465a      	mov	r2, fp
 800891a:	4013      	ands	r3, r2
 800891c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8008920:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008924:	d81b      	bhi.n	800895e <_strtod_l+0x8c6>
 8008926:	0d1b      	lsrs	r3, r3, #20
 8008928:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800892c:	fa02 f303 	lsl.w	r3, r2, r3
 8008930:	4299      	cmp	r1, r3
 8008932:	d119      	bne.n	8008968 <_strtod_l+0x8d0>
 8008934:	4b96      	ldr	r3, [pc, #600]	@ (8008b90 <_strtod_l+0xaf8>)
 8008936:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008938:	429a      	cmp	r2, r3
 800893a:	d102      	bne.n	8008942 <_strtod_l+0x8aa>
 800893c:	3101      	adds	r1, #1
 800893e:	f43f adca 	beq.w	80084d6 <_strtod_l+0x43e>
 8008942:	4b92      	ldr	r3, [pc, #584]	@ (8008b8c <_strtod_l+0xaf4>)
 8008944:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008946:	401a      	ands	r2, r3
 8008948:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800894c:	f04f 0a00 	mov.w	sl, #0
 8008950:	9b08      	ldr	r3, [sp, #32]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d1b8      	bne.n	80088c8 <_strtod_l+0x830>
 8008956:	e5c9      	b.n	80084ec <_strtod_l+0x454>
 8008958:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800895c:	e7e8      	b.n	8008930 <_strtod_l+0x898>
 800895e:	4613      	mov	r3, r2
 8008960:	e7e6      	b.n	8008930 <_strtod_l+0x898>
 8008962:	ea53 030a 	orrs.w	r3, r3, sl
 8008966:	d0a1      	beq.n	80088ac <_strtod_l+0x814>
 8008968:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800896a:	b1db      	cbz	r3, 80089a4 <_strtod_l+0x90c>
 800896c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800896e:	4213      	tst	r3, r2
 8008970:	d0ee      	beq.n	8008950 <_strtod_l+0x8b8>
 8008972:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008974:	9a08      	ldr	r2, [sp, #32]
 8008976:	4650      	mov	r0, sl
 8008978:	4659      	mov	r1, fp
 800897a:	b1bb      	cbz	r3, 80089ac <_strtod_l+0x914>
 800897c:	f7ff fb6e 	bl	800805c <sulp>
 8008980:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008984:	ec53 2b10 	vmov	r2, r3, d0
 8008988:	f7f7 fc80 	bl	800028c <__adddf3>
 800898c:	4682      	mov	sl, r0
 800898e:	468b      	mov	fp, r1
 8008990:	e7de      	b.n	8008950 <_strtod_l+0x8b8>
 8008992:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8008996:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800899a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800899e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80089a2:	e7d5      	b.n	8008950 <_strtod_l+0x8b8>
 80089a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80089a6:	ea13 0f0a 	tst.w	r3, sl
 80089aa:	e7e1      	b.n	8008970 <_strtod_l+0x8d8>
 80089ac:	f7ff fb56 	bl	800805c <sulp>
 80089b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089b4:	ec53 2b10 	vmov	r2, r3, d0
 80089b8:	f7f7 fc66 	bl	8000288 <__aeabi_dsub>
 80089bc:	2200      	movs	r2, #0
 80089be:	2300      	movs	r3, #0
 80089c0:	4682      	mov	sl, r0
 80089c2:	468b      	mov	fp, r1
 80089c4:	f7f8 f880 	bl	8000ac8 <__aeabi_dcmpeq>
 80089c8:	2800      	cmp	r0, #0
 80089ca:	d0c1      	beq.n	8008950 <_strtod_l+0x8b8>
 80089cc:	e619      	b.n	8008602 <_strtod_l+0x56a>
 80089ce:	4641      	mov	r1, r8
 80089d0:	4620      	mov	r0, r4
 80089d2:	f002 faf5 	bl	800afc0 <__ratio>
 80089d6:	ec57 6b10 	vmov	r6, r7, d0
 80089da:	2200      	movs	r2, #0
 80089dc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80089e0:	4630      	mov	r0, r6
 80089e2:	4639      	mov	r1, r7
 80089e4:	f7f8 f884 	bl	8000af0 <__aeabi_dcmple>
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d06f      	beq.n	8008acc <_strtod_l+0xa34>
 80089ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d17a      	bne.n	8008ae8 <_strtod_l+0xa50>
 80089f2:	f1ba 0f00 	cmp.w	sl, #0
 80089f6:	d158      	bne.n	8008aaa <_strtod_l+0xa12>
 80089f8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80089fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d15a      	bne.n	8008ab8 <_strtod_l+0xa20>
 8008a02:	4b64      	ldr	r3, [pc, #400]	@ (8008b94 <_strtod_l+0xafc>)
 8008a04:	2200      	movs	r2, #0
 8008a06:	4630      	mov	r0, r6
 8008a08:	4639      	mov	r1, r7
 8008a0a:	f7f8 f867 	bl	8000adc <__aeabi_dcmplt>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d159      	bne.n	8008ac6 <_strtod_l+0xa2e>
 8008a12:	4630      	mov	r0, r6
 8008a14:	4639      	mov	r1, r7
 8008a16:	4b60      	ldr	r3, [pc, #384]	@ (8008b98 <_strtod_l+0xb00>)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	f7f7 fded 	bl	80005f8 <__aeabi_dmul>
 8008a1e:	4606      	mov	r6, r0
 8008a20:	460f      	mov	r7, r1
 8008a22:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8008a26:	9606      	str	r6, [sp, #24]
 8008a28:	9307      	str	r3, [sp, #28]
 8008a2a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a2e:	4d57      	ldr	r5, [pc, #348]	@ (8008b8c <_strtod_l+0xaf4>)
 8008a30:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008a34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a36:	401d      	ands	r5, r3
 8008a38:	4b58      	ldr	r3, [pc, #352]	@ (8008b9c <_strtod_l+0xb04>)
 8008a3a:	429d      	cmp	r5, r3
 8008a3c:	f040 80b2 	bne.w	8008ba4 <_strtod_l+0xb0c>
 8008a40:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a42:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8008a46:	ec4b ab10 	vmov	d0, sl, fp
 8008a4a:	f002 f9f1 	bl	800ae30 <__ulp>
 8008a4e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a52:	ec51 0b10 	vmov	r0, r1, d0
 8008a56:	f7f7 fdcf 	bl	80005f8 <__aeabi_dmul>
 8008a5a:	4652      	mov	r2, sl
 8008a5c:	465b      	mov	r3, fp
 8008a5e:	f7f7 fc15 	bl	800028c <__adddf3>
 8008a62:	460b      	mov	r3, r1
 8008a64:	4949      	ldr	r1, [pc, #292]	@ (8008b8c <_strtod_l+0xaf4>)
 8008a66:	4a4e      	ldr	r2, [pc, #312]	@ (8008ba0 <_strtod_l+0xb08>)
 8008a68:	4019      	ands	r1, r3
 8008a6a:	4291      	cmp	r1, r2
 8008a6c:	4682      	mov	sl, r0
 8008a6e:	d942      	bls.n	8008af6 <_strtod_l+0xa5e>
 8008a70:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008a72:	4b47      	ldr	r3, [pc, #284]	@ (8008b90 <_strtod_l+0xaf8>)
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d103      	bne.n	8008a80 <_strtod_l+0x9e8>
 8008a78:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008a7a:	3301      	adds	r3, #1
 8008a7c:	f43f ad2b 	beq.w	80084d6 <_strtod_l+0x43e>
 8008a80:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8008b90 <_strtod_l+0xaf8>
 8008a84:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008a88:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008a8a:	9805      	ldr	r0, [sp, #20]
 8008a8c:	f001 fe9c 	bl	800a7c8 <_Bfree>
 8008a90:	9805      	ldr	r0, [sp, #20]
 8008a92:	4649      	mov	r1, r9
 8008a94:	f001 fe98 	bl	800a7c8 <_Bfree>
 8008a98:	9805      	ldr	r0, [sp, #20]
 8008a9a:	4641      	mov	r1, r8
 8008a9c:	f001 fe94 	bl	800a7c8 <_Bfree>
 8008aa0:	9805      	ldr	r0, [sp, #20]
 8008aa2:	4621      	mov	r1, r4
 8008aa4:	f001 fe90 	bl	800a7c8 <_Bfree>
 8008aa8:	e618      	b.n	80086dc <_strtod_l+0x644>
 8008aaa:	f1ba 0f01 	cmp.w	sl, #1
 8008aae:	d103      	bne.n	8008ab8 <_strtod_l+0xa20>
 8008ab0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	f43f ada5 	beq.w	8008602 <_strtod_l+0x56a>
 8008ab8:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8008b68 <_strtod_l+0xad0>
 8008abc:	4f35      	ldr	r7, [pc, #212]	@ (8008b94 <_strtod_l+0xafc>)
 8008abe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008ac2:	2600      	movs	r6, #0
 8008ac4:	e7b1      	b.n	8008a2a <_strtod_l+0x992>
 8008ac6:	4f34      	ldr	r7, [pc, #208]	@ (8008b98 <_strtod_l+0xb00>)
 8008ac8:	2600      	movs	r6, #0
 8008aca:	e7aa      	b.n	8008a22 <_strtod_l+0x98a>
 8008acc:	4b32      	ldr	r3, [pc, #200]	@ (8008b98 <_strtod_l+0xb00>)
 8008ace:	4630      	mov	r0, r6
 8008ad0:	4639      	mov	r1, r7
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	f7f7 fd90 	bl	80005f8 <__aeabi_dmul>
 8008ad8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008ada:	4606      	mov	r6, r0
 8008adc:	460f      	mov	r7, r1
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d09f      	beq.n	8008a22 <_strtod_l+0x98a>
 8008ae2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8008ae6:	e7a0      	b.n	8008a2a <_strtod_l+0x992>
 8008ae8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8008b70 <_strtod_l+0xad8>
 8008aec:	ed8d 7b06 	vstr	d7, [sp, #24]
 8008af0:	ec57 6b17 	vmov	r6, r7, d7
 8008af4:	e799      	b.n	8008a2a <_strtod_l+0x992>
 8008af6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8008afa:	9b08      	ldr	r3, [sp, #32]
 8008afc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d1c1      	bne.n	8008a88 <_strtod_l+0x9f0>
 8008b04:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008b08:	0d1b      	lsrs	r3, r3, #20
 8008b0a:	051b      	lsls	r3, r3, #20
 8008b0c:	429d      	cmp	r5, r3
 8008b0e:	d1bb      	bne.n	8008a88 <_strtod_l+0x9f0>
 8008b10:	4630      	mov	r0, r6
 8008b12:	4639      	mov	r1, r7
 8008b14:	f7f8 f920 	bl	8000d58 <__aeabi_d2lz>
 8008b18:	f7f7 fd40 	bl	800059c <__aeabi_l2d>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	460b      	mov	r3, r1
 8008b20:	4630      	mov	r0, r6
 8008b22:	4639      	mov	r1, r7
 8008b24:	f7f7 fbb0 	bl	8000288 <__aeabi_dsub>
 8008b28:	460b      	mov	r3, r1
 8008b2a:	4602      	mov	r2, r0
 8008b2c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8008b30:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8008b34:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008b36:	ea46 060a 	orr.w	r6, r6, sl
 8008b3a:	431e      	orrs	r6, r3
 8008b3c:	d06f      	beq.n	8008c1e <_strtod_l+0xb86>
 8008b3e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008b78 <_strtod_l+0xae0>)
 8008b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b44:	f7f7 ffca 	bl	8000adc <__aeabi_dcmplt>
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	f47f accf 	bne.w	80084ec <_strtod_l+0x454>
 8008b4e:	a30c      	add	r3, pc, #48	@ (adr r3, 8008b80 <_strtod_l+0xae8>)
 8008b50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b58:	f7f7 ffde 	bl	8000b18 <__aeabi_dcmpgt>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d093      	beq.n	8008a88 <_strtod_l+0x9f0>
 8008b60:	e4c4      	b.n	80084ec <_strtod_l+0x454>
 8008b62:	bf00      	nop
 8008b64:	f3af 8000 	nop.w
 8008b68:	00000000 	.word	0x00000000
 8008b6c:	bff00000 	.word	0xbff00000
 8008b70:	00000000 	.word	0x00000000
 8008b74:	3ff00000 	.word	0x3ff00000
 8008b78:	94a03595 	.word	0x94a03595
 8008b7c:	3fdfffff 	.word	0x3fdfffff
 8008b80:	35afe535 	.word	0x35afe535
 8008b84:	3fe00000 	.word	0x3fe00000
 8008b88:	000fffff 	.word	0x000fffff
 8008b8c:	7ff00000 	.word	0x7ff00000
 8008b90:	7fefffff 	.word	0x7fefffff
 8008b94:	3ff00000 	.word	0x3ff00000
 8008b98:	3fe00000 	.word	0x3fe00000
 8008b9c:	7fe00000 	.word	0x7fe00000
 8008ba0:	7c9fffff 	.word	0x7c9fffff
 8008ba4:	9b08      	ldr	r3, [sp, #32]
 8008ba6:	b323      	cbz	r3, 8008bf2 <_strtod_l+0xb5a>
 8008ba8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8008bac:	d821      	bhi.n	8008bf2 <_strtod_l+0xb5a>
 8008bae:	a328      	add	r3, pc, #160	@ (adr r3, 8008c50 <_strtod_l+0xbb8>)
 8008bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bb4:	4630      	mov	r0, r6
 8008bb6:	4639      	mov	r1, r7
 8008bb8:	f7f7 ff9a 	bl	8000af0 <__aeabi_dcmple>
 8008bbc:	b1a0      	cbz	r0, 8008be8 <_strtod_l+0xb50>
 8008bbe:	4639      	mov	r1, r7
 8008bc0:	4630      	mov	r0, r6
 8008bc2:	f7f7 fff1 	bl	8000ba8 <__aeabi_d2uiz>
 8008bc6:	2801      	cmp	r0, #1
 8008bc8:	bf38      	it	cc
 8008bca:	2001      	movcc	r0, #1
 8008bcc:	f7f7 fc9a 	bl	8000504 <__aeabi_ui2d>
 8008bd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bd2:	4606      	mov	r6, r0
 8008bd4:	460f      	mov	r7, r1
 8008bd6:	b9fb      	cbnz	r3, 8008c18 <_strtod_l+0xb80>
 8008bd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008bdc:	9014      	str	r0, [sp, #80]	@ 0x50
 8008bde:	9315      	str	r3, [sp, #84]	@ 0x54
 8008be0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8008be4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8008be8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008bea:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8008bee:	1b5b      	subs	r3, r3, r5
 8008bf0:	9311      	str	r3, [sp, #68]	@ 0x44
 8008bf2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8008bf6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8008bfa:	f002 f919 	bl	800ae30 <__ulp>
 8008bfe:	4650      	mov	r0, sl
 8008c00:	ec53 2b10 	vmov	r2, r3, d0
 8008c04:	4659      	mov	r1, fp
 8008c06:	f7f7 fcf7 	bl	80005f8 <__aeabi_dmul>
 8008c0a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008c0e:	f7f7 fb3d 	bl	800028c <__adddf3>
 8008c12:	4682      	mov	sl, r0
 8008c14:	468b      	mov	fp, r1
 8008c16:	e770      	b.n	8008afa <_strtod_l+0xa62>
 8008c18:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8008c1c:	e7e0      	b.n	8008be0 <_strtod_l+0xb48>
 8008c1e:	a30e      	add	r3, pc, #56	@ (adr r3, 8008c58 <_strtod_l+0xbc0>)
 8008c20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c24:	f7f7 ff5a 	bl	8000adc <__aeabi_dcmplt>
 8008c28:	e798      	b.n	8008b5c <_strtod_l+0xac4>
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c2e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8008c30:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008c32:	6013      	str	r3, [r2, #0]
 8008c34:	f7ff ba6d 	b.w	8008112 <_strtod_l+0x7a>
 8008c38:	2a65      	cmp	r2, #101	@ 0x65
 8008c3a:	f43f ab66 	beq.w	800830a <_strtod_l+0x272>
 8008c3e:	2a45      	cmp	r2, #69	@ 0x45
 8008c40:	f43f ab63 	beq.w	800830a <_strtod_l+0x272>
 8008c44:	2301      	movs	r3, #1
 8008c46:	f7ff bb9e 	b.w	8008386 <_strtod_l+0x2ee>
 8008c4a:	bf00      	nop
 8008c4c:	f3af 8000 	nop.w
 8008c50:	ffc00000 	.word	0xffc00000
 8008c54:	41dfffff 	.word	0x41dfffff
 8008c58:	94a03595 	.word	0x94a03595
 8008c5c:	3fcfffff 	.word	0x3fcfffff

08008c60 <_strtod_r>:
 8008c60:	4b01      	ldr	r3, [pc, #4]	@ (8008c68 <_strtod_r+0x8>)
 8008c62:	f7ff ba19 	b.w	8008098 <_strtod_l>
 8008c66:	bf00      	nop
 8008c68:	20000018 	.word	0x20000018

08008c6c <_strtol_l.constprop.0>:
 8008c6c:	2b24      	cmp	r3, #36	@ 0x24
 8008c6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c72:	4686      	mov	lr, r0
 8008c74:	4690      	mov	r8, r2
 8008c76:	d801      	bhi.n	8008c7c <_strtol_l.constprop.0+0x10>
 8008c78:	2b01      	cmp	r3, #1
 8008c7a:	d106      	bne.n	8008c8a <_strtol_l.constprop.0+0x1e>
 8008c7c:	f000 f8c8 	bl	8008e10 <__errno>
 8008c80:	2316      	movs	r3, #22
 8008c82:	6003      	str	r3, [r0, #0]
 8008c84:	2000      	movs	r0, #0
 8008c86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c8a:	4834      	ldr	r0, [pc, #208]	@ (8008d5c <_strtol_l.constprop.0+0xf0>)
 8008c8c:	460d      	mov	r5, r1
 8008c8e:	462a      	mov	r2, r5
 8008c90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c94:	5d06      	ldrb	r6, [r0, r4]
 8008c96:	f016 0608 	ands.w	r6, r6, #8
 8008c9a:	d1f8      	bne.n	8008c8e <_strtol_l.constprop.0+0x22>
 8008c9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008c9e:	d12d      	bne.n	8008cfc <_strtol_l.constprop.0+0x90>
 8008ca0:	782c      	ldrb	r4, [r5, #0]
 8008ca2:	2601      	movs	r6, #1
 8008ca4:	1c95      	adds	r5, r2, #2
 8008ca6:	f033 0210 	bics.w	r2, r3, #16
 8008caa:	d109      	bne.n	8008cc0 <_strtol_l.constprop.0+0x54>
 8008cac:	2c30      	cmp	r4, #48	@ 0x30
 8008cae:	d12a      	bne.n	8008d06 <_strtol_l.constprop.0+0x9a>
 8008cb0:	782a      	ldrb	r2, [r5, #0]
 8008cb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008cb6:	2a58      	cmp	r2, #88	@ 0x58
 8008cb8:	d125      	bne.n	8008d06 <_strtol_l.constprop.0+0x9a>
 8008cba:	786c      	ldrb	r4, [r5, #1]
 8008cbc:	2310      	movs	r3, #16
 8008cbe:	3502      	adds	r5, #2
 8008cc0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008cc4:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8008cc8:	2200      	movs	r2, #0
 8008cca:	fbbc f9f3 	udiv	r9, ip, r3
 8008cce:	4610      	mov	r0, r2
 8008cd0:	fb03 ca19 	mls	sl, r3, r9, ip
 8008cd4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008cd8:	2f09      	cmp	r7, #9
 8008cda:	d81b      	bhi.n	8008d14 <_strtol_l.constprop.0+0xa8>
 8008cdc:	463c      	mov	r4, r7
 8008cde:	42a3      	cmp	r3, r4
 8008ce0:	dd27      	ble.n	8008d32 <_strtol_l.constprop.0+0xc6>
 8008ce2:	1c57      	adds	r7, r2, #1
 8008ce4:	d007      	beq.n	8008cf6 <_strtol_l.constprop.0+0x8a>
 8008ce6:	4581      	cmp	r9, r0
 8008ce8:	d320      	bcc.n	8008d2c <_strtol_l.constprop.0+0xc0>
 8008cea:	d101      	bne.n	8008cf0 <_strtol_l.constprop.0+0x84>
 8008cec:	45a2      	cmp	sl, r4
 8008cee:	db1d      	blt.n	8008d2c <_strtol_l.constprop.0+0xc0>
 8008cf0:	fb00 4003 	mla	r0, r0, r3, r4
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008cfa:	e7eb      	b.n	8008cd4 <_strtol_l.constprop.0+0x68>
 8008cfc:	2c2b      	cmp	r4, #43	@ 0x2b
 8008cfe:	bf04      	itt	eq
 8008d00:	782c      	ldrbeq	r4, [r5, #0]
 8008d02:	1c95      	addeq	r5, r2, #2
 8008d04:	e7cf      	b.n	8008ca6 <_strtol_l.constprop.0+0x3a>
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d1da      	bne.n	8008cc0 <_strtol_l.constprop.0+0x54>
 8008d0a:	2c30      	cmp	r4, #48	@ 0x30
 8008d0c:	bf0c      	ite	eq
 8008d0e:	2308      	moveq	r3, #8
 8008d10:	230a      	movne	r3, #10
 8008d12:	e7d5      	b.n	8008cc0 <_strtol_l.constprop.0+0x54>
 8008d14:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8008d18:	2f19      	cmp	r7, #25
 8008d1a:	d801      	bhi.n	8008d20 <_strtol_l.constprop.0+0xb4>
 8008d1c:	3c37      	subs	r4, #55	@ 0x37
 8008d1e:	e7de      	b.n	8008cde <_strtol_l.constprop.0+0x72>
 8008d20:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8008d24:	2f19      	cmp	r7, #25
 8008d26:	d804      	bhi.n	8008d32 <_strtol_l.constprop.0+0xc6>
 8008d28:	3c57      	subs	r4, #87	@ 0x57
 8008d2a:	e7d8      	b.n	8008cde <_strtol_l.constprop.0+0x72>
 8008d2c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008d30:	e7e1      	b.n	8008cf6 <_strtol_l.constprop.0+0x8a>
 8008d32:	1c53      	adds	r3, r2, #1
 8008d34:	d108      	bne.n	8008d48 <_strtol_l.constprop.0+0xdc>
 8008d36:	2322      	movs	r3, #34	@ 0x22
 8008d38:	f8ce 3000 	str.w	r3, [lr]
 8008d3c:	4660      	mov	r0, ip
 8008d3e:	f1b8 0f00 	cmp.w	r8, #0
 8008d42:	d0a0      	beq.n	8008c86 <_strtol_l.constprop.0+0x1a>
 8008d44:	1e69      	subs	r1, r5, #1
 8008d46:	e006      	b.n	8008d56 <_strtol_l.constprop.0+0xea>
 8008d48:	b106      	cbz	r6, 8008d4c <_strtol_l.constprop.0+0xe0>
 8008d4a:	4240      	negs	r0, r0
 8008d4c:	f1b8 0f00 	cmp.w	r8, #0
 8008d50:	d099      	beq.n	8008c86 <_strtol_l.constprop.0+0x1a>
 8008d52:	2a00      	cmp	r2, #0
 8008d54:	d1f6      	bne.n	8008d44 <_strtol_l.constprop.0+0xd8>
 8008d56:	f8c8 1000 	str.w	r1, [r8]
 8008d5a:	e794      	b.n	8008c86 <_strtol_l.constprop.0+0x1a>
 8008d5c:	08010c39 	.word	0x08010c39

08008d60 <_strtol_r>:
 8008d60:	f7ff bf84 	b.w	8008c6c <_strtol_l.constprop.0>

08008d64 <_fwalk_sglue>:
 8008d64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d68:	4607      	mov	r7, r0
 8008d6a:	4688      	mov	r8, r1
 8008d6c:	4614      	mov	r4, r2
 8008d6e:	2600      	movs	r6, #0
 8008d70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008d74:	f1b9 0901 	subs.w	r9, r9, #1
 8008d78:	d505      	bpl.n	8008d86 <_fwalk_sglue+0x22>
 8008d7a:	6824      	ldr	r4, [r4, #0]
 8008d7c:	2c00      	cmp	r4, #0
 8008d7e:	d1f7      	bne.n	8008d70 <_fwalk_sglue+0xc>
 8008d80:	4630      	mov	r0, r6
 8008d82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d86:	89ab      	ldrh	r3, [r5, #12]
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d907      	bls.n	8008d9c <_fwalk_sglue+0x38>
 8008d8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d90:	3301      	adds	r3, #1
 8008d92:	d003      	beq.n	8008d9c <_fwalk_sglue+0x38>
 8008d94:	4629      	mov	r1, r5
 8008d96:	4638      	mov	r0, r7
 8008d98:	47c0      	blx	r8
 8008d9a:	4306      	orrs	r6, r0
 8008d9c:	3568      	adds	r5, #104	@ 0x68
 8008d9e:	e7e9      	b.n	8008d74 <_fwalk_sglue+0x10>

08008da0 <strncmp>:
 8008da0:	b510      	push	{r4, lr}
 8008da2:	b16a      	cbz	r2, 8008dc0 <strncmp+0x20>
 8008da4:	3901      	subs	r1, #1
 8008da6:	1884      	adds	r4, r0, r2
 8008da8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dac:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d103      	bne.n	8008dbc <strncmp+0x1c>
 8008db4:	42a0      	cmp	r0, r4
 8008db6:	d001      	beq.n	8008dbc <strncmp+0x1c>
 8008db8:	2a00      	cmp	r2, #0
 8008dba:	d1f5      	bne.n	8008da8 <strncmp+0x8>
 8008dbc:	1ad0      	subs	r0, r2, r3
 8008dbe:	bd10      	pop	{r4, pc}
 8008dc0:	4610      	mov	r0, r2
 8008dc2:	e7fc      	b.n	8008dbe <strncmp+0x1e>

08008dc4 <memmove>:
 8008dc4:	4288      	cmp	r0, r1
 8008dc6:	b510      	push	{r4, lr}
 8008dc8:	eb01 0402 	add.w	r4, r1, r2
 8008dcc:	d902      	bls.n	8008dd4 <memmove+0x10>
 8008dce:	4284      	cmp	r4, r0
 8008dd0:	4623      	mov	r3, r4
 8008dd2:	d807      	bhi.n	8008de4 <memmove+0x20>
 8008dd4:	1e43      	subs	r3, r0, #1
 8008dd6:	42a1      	cmp	r1, r4
 8008dd8:	d008      	beq.n	8008dec <memmove+0x28>
 8008dda:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008dde:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008de2:	e7f8      	b.n	8008dd6 <memmove+0x12>
 8008de4:	4402      	add	r2, r0
 8008de6:	4601      	mov	r1, r0
 8008de8:	428a      	cmp	r2, r1
 8008dea:	d100      	bne.n	8008dee <memmove+0x2a>
 8008dec:	bd10      	pop	{r4, pc}
 8008dee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008df2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008df6:	e7f7      	b.n	8008de8 <memmove+0x24>

08008df8 <memset>:
 8008df8:	4402      	add	r2, r0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d100      	bne.n	8008e02 <memset+0xa>
 8008e00:	4770      	bx	lr
 8008e02:	f803 1b01 	strb.w	r1, [r3], #1
 8008e06:	e7f9      	b.n	8008dfc <memset+0x4>

08008e08 <_localeconv_r>:
 8008e08:	4800      	ldr	r0, [pc, #0]	@ (8008e0c <_localeconv_r+0x4>)
 8008e0a:	4770      	bx	lr
 8008e0c:	20000108 	.word	0x20000108

08008e10 <__errno>:
 8008e10:	4b01      	ldr	r3, [pc, #4]	@ (8008e18 <__errno+0x8>)
 8008e12:	6818      	ldr	r0, [r3, #0]
 8008e14:	4770      	bx	lr
 8008e16:	bf00      	nop
 8008e18:	20000184 	.word	0x20000184

08008e1c <__libc_init_array>:
 8008e1c:	b570      	push	{r4, r5, r6, lr}
 8008e1e:	4d0d      	ldr	r5, [pc, #52]	@ (8008e54 <__libc_init_array+0x38>)
 8008e20:	4c0d      	ldr	r4, [pc, #52]	@ (8008e58 <__libc_init_array+0x3c>)
 8008e22:	1b64      	subs	r4, r4, r5
 8008e24:	10a4      	asrs	r4, r4, #2
 8008e26:	2600      	movs	r6, #0
 8008e28:	42a6      	cmp	r6, r4
 8008e2a:	d109      	bne.n	8008e40 <__libc_init_array+0x24>
 8008e2c:	4d0b      	ldr	r5, [pc, #44]	@ (8008e5c <__libc_init_array+0x40>)
 8008e2e:	4c0c      	ldr	r4, [pc, #48]	@ (8008e60 <__libc_init_array+0x44>)
 8008e30:	f003 fac8 	bl	800c3c4 <_init>
 8008e34:	1b64      	subs	r4, r4, r5
 8008e36:	10a4      	asrs	r4, r4, #2
 8008e38:	2600      	movs	r6, #0
 8008e3a:	42a6      	cmp	r6, r4
 8008e3c:	d105      	bne.n	8008e4a <__libc_init_array+0x2e>
 8008e3e:	bd70      	pop	{r4, r5, r6, pc}
 8008e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e44:	4798      	blx	r3
 8008e46:	3601      	adds	r6, #1
 8008e48:	e7ee      	b.n	8008e28 <__libc_init_array+0xc>
 8008e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e4e:	4798      	blx	r3
 8008e50:	3601      	adds	r6, #1
 8008e52:	e7f2      	b.n	8008e3a <__libc_init_array+0x1e>
 8008e54:	080113a4 	.word	0x080113a4
 8008e58:	080113a4 	.word	0x080113a4
 8008e5c:	080113a4 	.word	0x080113a4
 8008e60:	080113a8 	.word	0x080113a8

08008e64 <__retarget_lock_init_recursive>:
 8008e64:	4770      	bx	lr

08008e66 <__retarget_lock_acquire_recursive>:
 8008e66:	4770      	bx	lr

08008e68 <__retarget_lock_release_recursive>:
 8008e68:	4770      	bx	lr

08008e6a <memcpy>:
 8008e6a:	440a      	add	r2, r1
 8008e6c:	4291      	cmp	r1, r2
 8008e6e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8008e72:	d100      	bne.n	8008e76 <memcpy+0xc>
 8008e74:	4770      	bx	lr
 8008e76:	b510      	push	{r4, lr}
 8008e78:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e80:	4291      	cmp	r1, r2
 8008e82:	d1f9      	bne.n	8008e78 <memcpy+0xe>
 8008e84:	bd10      	pop	{r4, pc}
	...

08008e88 <nan>:
 8008e88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008e90 <nan+0x8>
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	00000000 	.word	0x00000000
 8008e94:	7ff80000 	.word	0x7ff80000

08008e98 <nanf>:
 8008e98:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8008ea0 <nanf+0x8>
 8008e9c:	4770      	bx	lr
 8008e9e:	bf00      	nop
 8008ea0:	7fc00000 	.word	0x7fc00000

08008ea4 <quorem>:
 8008ea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	6903      	ldr	r3, [r0, #16]
 8008eaa:	690c      	ldr	r4, [r1, #16]
 8008eac:	42a3      	cmp	r3, r4
 8008eae:	4607      	mov	r7, r0
 8008eb0:	db7e      	blt.n	8008fb0 <quorem+0x10c>
 8008eb2:	3c01      	subs	r4, #1
 8008eb4:	f101 0814 	add.w	r8, r1, #20
 8008eb8:	00a3      	lsls	r3, r4, #2
 8008eba:	f100 0514 	add.w	r5, r0, #20
 8008ebe:	9300      	str	r3, [sp, #0]
 8008ec0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008ec4:	9301      	str	r3, [sp, #4]
 8008ec6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008eca:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	429a      	cmp	r2, r3
 8008ed2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008ed6:	fbb2 f6f3 	udiv	r6, r2, r3
 8008eda:	d32e      	bcc.n	8008f3a <quorem+0x96>
 8008edc:	f04f 0a00 	mov.w	sl, #0
 8008ee0:	46c4      	mov	ip, r8
 8008ee2:	46ae      	mov	lr, r5
 8008ee4:	46d3      	mov	fp, sl
 8008ee6:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008eea:	b298      	uxth	r0, r3
 8008eec:	fb06 a000 	mla	r0, r6, r0, sl
 8008ef0:	0c02      	lsrs	r2, r0, #16
 8008ef2:	0c1b      	lsrs	r3, r3, #16
 8008ef4:	fb06 2303 	mla	r3, r6, r3, r2
 8008ef8:	f8de 2000 	ldr.w	r2, [lr]
 8008efc:	b280      	uxth	r0, r0
 8008efe:	b292      	uxth	r2, r2
 8008f00:	1a12      	subs	r2, r2, r0
 8008f02:	445a      	add	r2, fp
 8008f04:	f8de 0000 	ldr.w	r0, [lr]
 8008f08:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008f12:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008f16:	b292      	uxth	r2, r2
 8008f18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008f1c:	45e1      	cmp	r9, ip
 8008f1e:	f84e 2b04 	str.w	r2, [lr], #4
 8008f22:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008f26:	d2de      	bcs.n	8008ee6 <quorem+0x42>
 8008f28:	9b00      	ldr	r3, [sp, #0]
 8008f2a:	58eb      	ldr	r3, [r5, r3]
 8008f2c:	b92b      	cbnz	r3, 8008f3a <quorem+0x96>
 8008f2e:	9b01      	ldr	r3, [sp, #4]
 8008f30:	3b04      	subs	r3, #4
 8008f32:	429d      	cmp	r5, r3
 8008f34:	461a      	mov	r2, r3
 8008f36:	d32f      	bcc.n	8008f98 <quorem+0xf4>
 8008f38:	613c      	str	r4, [r7, #16]
 8008f3a:	4638      	mov	r0, r7
 8008f3c:	f001 fec8 	bl	800acd0 <__mcmp>
 8008f40:	2800      	cmp	r0, #0
 8008f42:	db25      	blt.n	8008f90 <quorem+0xec>
 8008f44:	4629      	mov	r1, r5
 8008f46:	2000      	movs	r0, #0
 8008f48:	f858 2b04 	ldr.w	r2, [r8], #4
 8008f4c:	f8d1 c000 	ldr.w	ip, [r1]
 8008f50:	fa1f fe82 	uxth.w	lr, r2
 8008f54:	fa1f f38c 	uxth.w	r3, ip
 8008f58:	eba3 030e 	sub.w	r3, r3, lr
 8008f5c:	4403      	add	r3, r0
 8008f5e:	0c12      	lsrs	r2, r2, #16
 8008f60:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008f64:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008f68:	b29b      	uxth	r3, r3
 8008f6a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008f6e:	45c1      	cmp	r9, r8
 8008f70:	f841 3b04 	str.w	r3, [r1], #4
 8008f74:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008f78:	d2e6      	bcs.n	8008f48 <quorem+0xa4>
 8008f7a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f7e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f82:	b922      	cbnz	r2, 8008f8e <quorem+0xea>
 8008f84:	3b04      	subs	r3, #4
 8008f86:	429d      	cmp	r5, r3
 8008f88:	461a      	mov	r2, r3
 8008f8a:	d30b      	bcc.n	8008fa4 <quorem+0x100>
 8008f8c:	613c      	str	r4, [r7, #16]
 8008f8e:	3601      	adds	r6, #1
 8008f90:	4630      	mov	r0, r6
 8008f92:	b003      	add	sp, #12
 8008f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f98:	6812      	ldr	r2, [r2, #0]
 8008f9a:	3b04      	subs	r3, #4
 8008f9c:	2a00      	cmp	r2, #0
 8008f9e:	d1cb      	bne.n	8008f38 <quorem+0x94>
 8008fa0:	3c01      	subs	r4, #1
 8008fa2:	e7c6      	b.n	8008f32 <quorem+0x8e>
 8008fa4:	6812      	ldr	r2, [r2, #0]
 8008fa6:	3b04      	subs	r3, #4
 8008fa8:	2a00      	cmp	r2, #0
 8008faa:	d1ef      	bne.n	8008f8c <quorem+0xe8>
 8008fac:	3c01      	subs	r4, #1
 8008fae:	e7ea      	b.n	8008f86 <quorem+0xe2>
 8008fb0:	2000      	movs	r0, #0
 8008fb2:	e7ee      	b.n	8008f92 <quorem+0xee>
 8008fb4:	0000      	movs	r0, r0
	...

08008fb8 <_dtoa_r>:
 8008fb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fbc:	69c7      	ldr	r7, [r0, #28]
 8008fbe:	b099      	sub	sp, #100	@ 0x64
 8008fc0:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008fc4:	ec55 4b10 	vmov	r4, r5, d0
 8008fc8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8008fca:	9109      	str	r1, [sp, #36]	@ 0x24
 8008fcc:	4683      	mov	fp, r0
 8008fce:	920e      	str	r2, [sp, #56]	@ 0x38
 8008fd0:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008fd2:	b97f      	cbnz	r7, 8008ff4 <_dtoa_r+0x3c>
 8008fd4:	2010      	movs	r0, #16
 8008fd6:	f001 fa43 	bl	800a460 <malloc>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	f8cb 001c 	str.w	r0, [fp, #28]
 8008fe0:	b920      	cbnz	r0, 8008fec <_dtoa_r+0x34>
 8008fe2:	4ba7      	ldr	r3, [pc, #668]	@ (8009280 <_dtoa_r+0x2c8>)
 8008fe4:	21ef      	movs	r1, #239	@ 0xef
 8008fe6:	48a7      	ldr	r0, [pc, #668]	@ (8009284 <_dtoa_r+0x2cc>)
 8008fe8:	f002 f934 	bl	800b254 <__assert_func>
 8008fec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008ff0:	6007      	str	r7, [r0, #0]
 8008ff2:	60c7      	str	r7, [r0, #12]
 8008ff4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008ff8:	6819      	ldr	r1, [r3, #0]
 8008ffa:	b159      	cbz	r1, 8009014 <_dtoa_r+0x5c>
 8008ffc:	685a      	ldr	r2, [r3, #4]
 8008ffe:	604a      	str	r2, [r1, #4]
 8009000:	2301      	movs	r3, #1
 8009002:	4093      	lsls	r3, r2
 8009004:	608b      	str	r3, [r1, #8]
 8009006:	4658      	mov	r0, fp
 8009008:	f001 fbde 	bl	800a7c8 <_Bfree>
 800900c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
 8009014:	1e2b      	subs	r3, r5, #0
 8009016:	bfb9      	ittee	lt
 8009018:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800901c:	9303      	strlt	r3, [sp, #12]
 800901e:	2300      	movge	r3, #0
 8009020:	6033      	strge	r3, [r6, #0]
 8009022:	9f03      	ldr	r7, [sp, #12]
 8009024:	4b98      	ldr	r3, [pc, #608]	@ (8009288 <_dtoa_r+0x2d0>)
 8009026:	bfbc      	itt	lt
 8009028:	2201      	movlt	r2, #1
 800902a:	6032      	strlt	r2, [r6, #0]
 800902c:	43bb      	bics	r3, r7
 800902e:	d112      	bne.n	8009056 <_dtoa_r+0x9e>
 8009030:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009032:	f242 730f 	movw	r3, #9999	@ 0x270f
 8009036:	6013      	str	r3, [r2, #0]
 8009038:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800903c:	4323      	orrs	r3, r4
 800903e:	f000 854d 	beq.w	8009adc <_dtoa_r+0xb24>
 8009042:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009044:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800929c <_dtoa_r+0x2e4>
 8009048:	2b00      	cmp	r3, #0
 800904a:	f000 854f 	beq.w	8009aec <_dtoa_r+0xb34>
 800904e:	f10a 0303 	add.w	r3, sl, #3
 8009052:	f000 bd49 	b.w	8009ae8 <_dtoa_r+0xb30>
 8009056:	ed9d 7b02 	vldr	d7, [sp, #8]
 800905a:	2200      	movs	r2, #0
 800905c:	ec51 0b17 	vmov	r0, r1, d7
 8009060:	2300      	movs	r3, #0
 8009062:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8009066:	f7f7 fd2f 	bl	8000ac8 <__aeabi_dcmpeq>
 800906a:	4680      	mov	r8, r0
 800906c:	b158      	cbz	r0, 8009086 <_dtoa_r+0xce>
 800906e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009070:	2301      	movs	r3, #1
 8009072:	6013      	str	r3, [r2, #0]
 8009074:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009076:	b113      	cbz	r3, 800907e <_dtoa_r+0xc6>
 8009078:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800907a:	4b84      	ldr	r3, [pc, #528]	@ (800928c <_dtoa_r+0x2d4>)
 800907c:	6013      	str	r3, [r2, #0]
 800907e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80092a0 <_dtoa_r+0x2e8>
 8009082:	f000 bd33 	b.w	8009aec <_dtoa_r+0xb34>
 8009086:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800908a:	aa16      	add	r2, sp, #88	@ 0x58
 800908c:	a917      	add	r1, sp, #92	@ 0x5c
 800908e:	4658      	mov	r0, fp
 8009090:	f001 ff3e 	bl	800af10 <__d2b>
 8009094:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009098:	4681      	mov	r9, r0
 800909a:	2e00      	cmp	r6, #0
 800909c:	d077      	beq.n	800918e <_dtoa_r+0x1d6>
 800909e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80090a0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80090a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80090a8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80090ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80090b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80090b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80090b8:	4619      	mov	r1, r3
 80090ba:	2200      	movs	r2, #0
 80090bc:	4b74      	ldr	r3, [pc, #464]	@ (8009290 <_dtoa_r+0x2d8>)
 80090be:	f7f7 f8e3 	bl	8000288 <__aeabi_dsub>
 80090c2:	a369      	add	r3, pc, #420	@ (adr r3, 8009268 <_dtoa_r+0x2b0>)
 80090c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c8:	f7f7 fa96 	bl	80005f8 <__aeabi_dmul>
 80090cc:	a368      	add	r3, pc, #416	@ (adr r3, 8009270 <_dtoa_r+0x2b8>)
 80090ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090d2:	f7f7 f8db 	bl	800028c <__adddf3>
 80090d6:	4604      	mov	r4, r0
 80090d8:	4630      	mov	r0, r6
 80090da:	460d      	mov	r5, r1
 80090dc:	f7f7 fa22 	bl	8000524 <__aeabi_i2d>
 80090e0:	a365      	add	r3, pc, #404	@ (adr r3, 8009278 <_dtoa_r+0x2c0>)
 80090e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090e6:	f7f7 fa87 	bl	80005f8 <__aeabi_dmul>
 80090ea:	4602      	mov	r2, r0
 80090ec:	460b      	mov	r3, r1
 80090ee:	4620      	mov	r0, r4
 80090f0:	4629      	mov	r1, r5
 80090f2:	f7f7 f8cb 	bl	800028c <__adddf3>
 80090f6:	4604      	mov	r4, r0
 80090f8:	460d      	mov	r5, r1
 80090fa:	f7f7 fd2d 	bl	8000b58 <__aeabi_d2iz>
 80090fe:	2200      	movs	r2, #0
 8009100:	4607      	mov	r7, r0
 8009102:	2300      	movs	r3, #0
 8009104:	4620      	mov	r0, r4
 8009106:	4629      	mov	r1, r5
 8009108:	f7f7 fce8 	bl	8000adc <__aeabi_dcmplt>
 800910c:	b140      	cbz	r0, 8009120 <_dtoa_r+0x168>
 800910e:	4638      	mov	r0, r7
 8009110:	f7f7 fa08 	bl	8000524 <__aeabi_i2d>
 8009114:	4622      	mov	r2, r4
 8009116:	462b      	mov	r3, r5
 8009118:	f7f7 fcd6 	bl	8000ac8 <__aeabi_dcmpeq>
 800911c:	b900      	cbnz	r0, 8009120 <_dtoa_r+0x168>
 800911e:	3f01      	subs	r7, #1
 8009120:	2f16      	cmp	r7, #22
 8009122:	d851      	bhi.n	80091c8 <_dtoa_r+0x210>
 8009124:	4b5b      	ldr	r3, [pc, #364]	@ (8009294 <_dtoa_r+0x2dc>)
 8009126:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800912a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800912e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009132:	f7f7 fcd3 	bl	8000adc <__aeabi_dcmplt>
 8009136:	2800      	cmp	r0, #0
 8009138:	d048      	beq.n	80091cc <_dtoa_r+0x214>
 800913a:	3f01      	subs	r7, #1
 800913c:	2300      	movs	r3, #0
 800913e:	9312      	str	r3, [sp, #72]	@ 0x48
 8009140:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009142:	1b9b      	subs	r3, r3, r6
 8009144:	1e5a      	subs	r2, r3, #1
 8009146:	bf44      	itt	mi
 8009148:	f1c3 0801 	rsbmi	r8, r3, #1
 800914c:	2300      	movmi	r3, #0
 800914e:	9208      	str	r2, [sp, #32]
 8009150:	bf54      	ite	pl
 8009152:	f04f 0800 	movpl.w	r8, #0
 8009156:	9308      	strmi	r3, [sp, #32]
 8009158:	2f00      	cmp	r7, #0
 800915a:	db39      	blt.n	80091d0 <_dtoa_r+0x218>
 800915c:	9b08      	ldr	r3, [sp, #32]
 800915e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8009160:	443b      	add	r3, r7
 8009162:	9308      	str	r3, [sp, #32]
 8009164:	2300      	movs	r3, #0
 8009166:	930a      	str	r3, [sp, #40]	@ 0x28
 8009168:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800916a:	2b09      	cmp	r3, #9
 800916c:	d864      	bhi.n	8009238 <_dtoa_r+0x280>
 800916e:	2b05      	cmp	r3, #5
 8009170:	bfc4      	itt	gt
 8009172:	3b04      	subgt	r3, #4
 8009174:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8009176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009178:	f1a3 0302 	sub.w	r3, r3, #2
 800917c:	bfcc      	ite	gt
 800917e:	2400      	movgt	r4, #0
 8009180:	2401      	movle	r4, #1
 8009182:	2b03      	cmp	r3, #3
 8009184:	d863      	bhi.n	800924e <_dtoa_r+0x296>
 8009186:	e8df f003 	tbb	[pc, r3]
 800918a:	372a      	.short	0x372a
 800918c:	5535      	.short	0x5535
 800918e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009192:	441e      	add	r6, r3
 8009194:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009198:	2b20      	cmp	r3, #32
 800919a:	bfc1      	itttt	gt
 800919c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80091a0:	409f      	lslgt	r7, r3
 80091a2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80091a6:	fa24 f303 	lsrgt.w	r3, r4, r3
 80091aa:	bfd6      	itet	le
 80091ac:	f1c3 0320 	rsble	r3, r3, #32
 80091b0:	ea47 0003 	orrgt.w	r0, r7, r3
 80091b4:	fa04 f003 	lslle.w	r0, r4, r3
 80091b8:	f7f7 f9a4 	bl	8000504 <__aeabi_ui2d>
 80091bc:	2201      	movs	r2, #1
 80091be:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80091c2:	3e01      	subs	r6, #1
 80091c4:	9214      	str	r2, [sp, #80]	@ 0x50
 80091c6:	e777      	b.n	80090b8 <_dtoa_r+0x100>
 80091c8:	2301      	movs	r3, #1
 80091ca:	e7b8      	b.n	800913e <_dtoa_r+0x186>
 80091cc:	9012      	str	r0, [sp, #72]	@ 0x48
 80091ce:	e7b7      	b.n	8009140 <_dtoa_r+0x188>
 80091d0:	427b      	negs	r3, r7
 80091d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80091d4:	2300      	movs	r3, #0
 80091d6:	eba8 0807 	sub.w	r8, r8, r7
 80091da:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091dc:	e7c4      	b.n	8009168 <_dtoa_r+0x1b0>
 80091de:	2300      	movs	r3, #0
 80091e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	dc35      	bgt.n	8009254 <_dtoa_r+0x29c>
 80091e8:	2301      	movs	r3, #1
 80091ea:	9300      	str	r3, [sp, #0]
 80091ec:	9307      	str	r3, [sp, #28]
 80091ee:	461a      	mov	r2, r3
 80091f0:	920e      	str	r2, [sp, #56]	@ 0x38
 80091f2:	e00b      	b.n	800920c <_dtoa_r+0x254>
 80091f4:	2301      	movs	r3, #1
 80091f6:	e7f3      	b.n	80091e0 <_dtoa_r+0x228>
 80091f8:	2300      	movs	r3, #0
 80091fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091fc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80091fe:	18fb      	adds	r3, r7, r3
 8009200:	9300      	str	r3, [sp, #0]
 8009202:	3301      	adds	r3, #1
 8009204:	2b01      	cmp	r3, #1
 8009206:	9307      	str	r3, [sp, #28]
 8009208:	bfb8      	it	lt
 800920a:	2301      	movlt	r3, #1
 800920c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009210:	2100      	movs	r1, #0
 8009212:	2204      	movs	r2, #4
 8009214:	f102 0514 	add.w	r5, r2, #20
 8009218:	429d      	cmp	r5, r3
 800921a:	d91f      	bls.n	800925c <_dtoa_r+0x2a4>
 800921c:	6041      	str	r1, [r0, #4]
 800921e:	4658      	mov	r0, fp
 8009220:	f001 fa92 	bl	800a748 <_Balloc>
 8009224:	4682      	mov	sl, r0
 8009226:	2800      	cmp	r0, #0
 8009228:	d13c      	bne.n	80092a4 <_dtoa_r+0x2ec>
 800922a:	4b1b      	ldr	r3, [pc, #108]	@ (8009298 <_dtoa_r+0x2e0>)
 800922c:	4602      	mov	r2, r0
 800922e:	f240 11af 	movw	r1, #431	@ 0x1af
 8009232:	e6d8      	b.n	8008fe6 <_dtoa_r+0x2e>
 8009234:	2301      	movs	r3, #1
 8009236:	e7e0      	b.n	80091fa <_dtoa_r+0x242>
 8009238:	2401      	movs	r4, #1
 800923a:	2300      	movs	r3, #0
 800923c:	9309      	str	r3, [sp, #36]	@ 0x24
 800923e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009240:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009244:	9300      	str	r3, [sp, #0]
 8009246:	9307      	str	r3, [sp, #28]
 8009248:	2200      	movs	r2, #0
 800924a:	2312      	movs	r3, #18
 800924c:	e7d0      	b.n	80091f0 <_dtoa_r+0x238>
 800924e:	2301      	movs	r3, #1
 8009250:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009252:	e7f5      	b.n	8009240 <_dtoa_r+0x288>
 8009254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009256:	9300      	str	r3, [sp, #0]
 8009258:	9307      	str	r3, [sp, #28]
 800925a:	e7d7      	b.n	800920c <_dtoa_r+0x254>
 800925c:	3101      	adds	r1, #1
 800925e:	0052      	lsls	r2, r2, #1
 8009260:	e7d8      	b.n	8009214 <_dtoa_r+0x25c>
 8009262:	bf00      	nop
 8009264:	f3af 8000 	nop.w
 8009268:	636f4361 	.word	0x636f4361
 800926c:	3fd287a7 	.word	0x3fd287a7
 8009270:	8b60c8b3 	.word	0x8b60c8b3
 8009274:	3fc68a28 	.word	0x3fc68a28
 8009278:	509f79fb 	.word	0x509f79fb
 800927c:	3fd34413 	.word	0x3fd34413
 8009280:	08010d46 	.word	0x08010d46
 8009284:	08010d5d 	.word	0x08010d5d
 8009288:	7ff00000 	.word	0x7ff00000
 800928c:	08010bb1 	.word	0x08010bb1
 8009290:	3ff80000 	.word	0x3ff80000
 8009294:	08010ec8 	.word	0x08010ec8
 8009298:	08010db5 	.word	0x08010db5
 800929c:	08010d42 	.word	0x08010d42
 80092a0:	08010bb0 	.word	0x08010bb0
 80092a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80092a8:	6018      	str	r0, [r3, #0]
 80092aa:	9b07      	ldr	r3, [sp, #28]
 80092ac:	2b0e      	cmp	r3, #14
 80092ae:	f200 80a4 	bhi.w	80093fa <_dtoa_r+0x442>
 80092b2:	2c00      	cmp	r4, #0
 80092b4:	f000 80a1 	beq.w	80093fa <_dtoa_r+0x442>
 80092b8:	2f00      	cmp	r7, #0
 80092ba:	dd33      	ble.n	8009324 <_dtoa_r+0x36c>
 80092bc:	4bad      	ldr	r3, [pc, #692]	@ (8009574 <_dtoa_r+0x5bc>)
 80092be:	f007 020f 	and.w	r2, r7, #15
 80092c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80092c6:	ed93 7b00 	vldr	d7, [r3]
 80092ca:	05f8      	lsls	r0, r7, #23
 80092cc:	ed8d 7b04 	vstr	d7, [sp, #16]
 80092d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80092d4:	d516      	bpl.n	8009304 <_dtoa_r+0x34c>
 80092d6:	4ba8      	ldr	r3, [pc, #672]	@ (8009578 <_dtoa_r+0x5c0>)
 80092d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80092e0:	f7f7 fab4 	bl	800084c <__aeabi_ddiv>
 80092e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80092e8:	f004 040f 	and.w	r4, r4, #15
 80092ec:	2603      	movs	r6, #3
 80092ee:	4da2      	ldr	r5, [pc, #648]	@ (8009578 <_dtoa_r+0x5c0>)
 80092f0:	b954      	cbnz	r4, 8009308 <_dtoa_r+0x350>
 80092f2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80092f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80092fa:	f7f7 faa7 	bl	800084c <__aeabi_ddiv>
 80092fe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009302:	e028      	b.n	8009356 <_dtoa_r+0x39e>
 8009304:	2602      	movs	r6, #2
 8009306:	e7f2      	b.n	80092ee <_dtoa_r+0x336>
 8009308:	07e1      	lsls	r1, r4, #31
 800930a:	d508      	bpl.n	800931e <_dtoa_r+0x366>
 800930c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009310:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009314:	f7f7 f970 	bl	80005f8 <__aeabi_dmul>
 8009318:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800931c:	3601      	adds	r6, #1
 800931e:	1064      	asrs	r4, r4, #1
 8009320:	3508      	adds	r5, #8
 8009322:	e7e5      	b.n	80092f0 <_dtoa_r+0x338>
 8009324:	f000 80d2 	beq.w	80094cc <_dtoa_r+0x514>
 8009328:	427c      	negs	r4, r7
 800932a:	4b92      	ldr	r3, [pc, #584]	@ (8009574 <_dtoa_r+0x5bc>)
 800932c:	4d92      	ldr	r5, [pc, #584]	@ (8009578 <_dtoa_r+0x5c0>)
 800932e:	f004 020f 	and.w	r2, r4, #15
 8009332:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800933a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800933e:	f7f7 f95b 	bl	80005f8 <__aeabi_dmul>
 8009342:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009346:	1124      	asrs	r4, r4, #4
 8009348:	2300      	movs	r3, #0
 800934a:	2602      	movs	r6, #2
 800934c:	2c00      	cmp	r4, #0
 800934e:	f040 80b2 	bne.w	80094b6 <_dtoa_r+0x4fe>
 8009352:	2b00      	cmp	r3, #0
 8009354:	d1d3      	bne.n	80092fe <_dtoa_r+0x346>
 8009356:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009358:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800935c:	2b00      	cmp	r3, #0
 800935e:	f000 80b7 	beq.w	80094d0 <_dtoa_r+0x518>
 8009362:	4b86      	ldr	r3, [pc, #536]	@ (800957c <_dtoa_r+0x5c4>)
 8009364:	2200      	movs	r2, #0
 8009366:	4620      	mov	r0, r4
 8009368:	4629      	mov	r1, r5
 800936a:	f7f7 fbb7 	bl	8000adc <__aeabi_dcmplt>
 800936e:	2800      	cmp	r0, #0
 8009370:	f000 80ae 	beq.w	80094d0 <_dtoa_r+0x518>
 8009374:	9b07      	ldr	r3, [sp, #28]
 8009376:	2b00      	cmp	r3, #0
 8009378:	f000 80aa 	beq.w	80094d0 <_dtoa_r+0x518>
 800937c:	9b00      	ldr	r3, [sp, #0]
 800937e:	2b00      	cmp	r3, #0
 8009380:	dd37      	ble.n	80093f2 <_dtoa_r+0x43a>
 8009382:	1e7b      	subs	r3, r7, #1
 8009384:	9304      	str	r3, [sp, #16]
 8009386:	4620      	mov	r0, r4
 8009388:	4b7d      	ldr	r3, [pc, #500]	@ (8009580 <_dtoa_r+0x5c8>)
 800938a:	2200      	movs	r2, #0
 800938c:	4629      	mov	r1, r5
 800938e:	f7f7 f933 	bl	80005f8 <__aeabi_dmul>
 8009392:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009396:	9c00      	ldr	r4, [sp, #0]
 8009398:	3601      	adds	r6, #1
 800939a:	4630      	mov	r0, r6
 800939c:	f7f7 f8c2 	bl	8000524 <__aeabi_i2d>
 80093a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80093a4:	f7f7 f928 	bl	80005f8 <__aeabi_dmul>
 80093a8:	4b76      	ldr	r3, [pc, #472]	@ (8009584 <_dtoa_r+0x5cc>)
 80093aa:	2200      	movs	r2, #0
 80093ac:	f7f6 ff6e 	bl	800028c <__adddf3>
 80093b0:	4605      	mov	r5, r0
 80093b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80093b6:	2c00      	cmp	r4, #0
 80093b8:	f040 808d 	bne.w	80094d6 <_dtoa_r+0x51e>
 80093bc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093c0:	4b71      	ldr	r3, [pc, #452]	@ (8009588 <_dtoa_r+0x5d0>)
 80093c2:	2200      	movs	r2, #0
 80093c4:	f7f6 ff60 	bl	8000288 <__aeabi_dsub>
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80093d0:	462a      	mov	r2, r5
 80093d2:	4633      	mov	r3, r6
 80093d4:	f7f7 fba0 	bl	8000b18 <__aeabi_dcmpgt>
 80093d8:	2800      	cmp	r0, #0
 80093da:	f040 828b 	bne.w	80098f4 <_dtoa_r+0x93c>
 80093de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80093e2:	462a      	mov	r2, r5
 80093e4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80093e8:	f7f7 fb78 	bl	8000adc <__aeabi_dcmplt>
 80093ec:	2800      	cmp	r0, #0
 80093ee:	f040 8128 	bne.w	8009642 <_dtoa_r+0x68a>
 80093f2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 80093f6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80093fa:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	f2c0 815a 	blt.w	80096b6 <_dtoa_r+0x6fe>
 8009402:	2f0e      	cmp	r7, #14
 8009404:	f300 8157 	bgt.w	80096b6 <_dtoa_r+0x6fe>
 8009408:	4b5a      	ldr	r3, [pc, #360]	@ (8009574 <_dtoa_r+0x5bc>)
 800940a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800940e:	ed93 7b00 	vldr	d7, [r3]
 8009412:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009414:	2b00      	cmp	r3, #0
 8009416:	ed8d 7b00 	vstr	d7, [sp]
 800941a:	da03      	bge.n	8009424 <_dtoa_r+0x46c>
 800941c:	9b07      	ldr	r3, [sp, #28]
 800941e:	2b00      	cmp	r3, #0
 8009420:	f340 8101 	ble.w	8009626 <_dtoa_r+0x66e>
 8009424:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009428:	4656      	mov	r6, sl
 800942a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800942e:	4620      	mov	r0, r4
 8009430:	4629      	mov	r1, r5
 8009432:	f7f7 fa0b 	bl	800084c <__aeabi_ddiv>
 8009436:	f7f7 fb8f 	bl	8000b58 <__aeabi_d2iz>
 800943a:	4680      	mov	r8, r0
 800943c:	f7f7 f872 	bl	8000524 <__aeabi_i2d>
 8009440:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009444:	f7f7 f8d8 	bl	80005f8 <__aeabi_dmul>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	4620      	mov	r0, r4
 800944e:	4629      	mov	r1, r5
 8009450:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009454:	f7f6 ff18 	bl	8000288 <__aeabi_dsub>
 8009458:	f806 4b01 	strb.w	r4, [r6], #1
 800945c:	9d07      	ldr	r5, [sp, #28]
 800945e:	eba6 040a 	sub.w	r4, r6, sl
 8009462:	42a5      	cmp	r5, r4
 8009464:	4602      	mov	r2, r0
 8009466:	460b      	mov	r3, r1
 8009468:	f040 8117 	bne.w	800969a <_dtoa_r+0x6e2>
 800946c:	f7f6 ff0e 	bl	800028c <__adddf3>
 8009470:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009474:	4604      	mov	r4, r0
 8009476:	460d      	mov	r5, r1
 8009478:	f7f7 fb4e 	bl	8000b18 <__aeabi_dcmpgt>
 800947c:	2800      	cmp	r0, #0
 800947e:	f040 80f9 	bne.w	8009674 <_dtoa_r+0x6bc>
 8009482:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009486:	4620      	mov	r0, r4
 8009488:	4629      	mov	r1, r5
 800948a:	f7f7 fb1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800948e:	b118      	cbz	r0, 8009498 <_dtoa_r+0x4e0>
 8009490:	f018 0f01 	tst.w	r8, #1
 8009494:	f040 80ee 	bne.w	8009674 <_dtoa_r+0x6bc>
 8009498:	4649      	mov	r1, r9
 800949a:	4658      	mov	r0, fp
 800949c:	f001 f994 	bl	800a7c8 <_Bfree>
 80094a0:	2300      	movs	r3, #0
 80094a2:	7033      	strb	r3, [r6, #0]
 80094a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80094a6:	3701      	adds	r7, #1
 80094a8:	601f      	str	r7, [r3, #0]
 80094aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	f000 831d 	beq.w	8009aec <_dtoa_r+0xb34>
 80094b2:	601e      	str	r6, [r3, #0]
 80094b4:	e31a      	b.n	8009aec <_dtoa_r+0xb34>
 80094b6:	07e2      	lsls	r2, r4, #31
 80094b8:	d505      	bpl.n	80094c6 <_dtoa_r+0x50e>
 80094ba:	e9d5 2300 	ldrd	r2, r3, [r5]
 80094be:	f7f7 f89b 	bl	80005f8 <__aeabi_dmul>
 80094c2:	3601      	adds	r6, #1
 80094c4:	2301      	movs	r3, #1
 80094c6:	1064      	asrs	r4, r4, #1
 80094c8:	3508      	adds	r5, #8
 80094ca:	e73f      	b.n	800934c <_dtoa_r+0x394>
 80094cc:	2602      	movs	r6, #2
 80094ce:	e742      	b.n	8009356 <_dtoa_r+0x39e>
 80094d0:	9c07      	ldr	r4, [sp, #28]
 80094d2:	9704      	str	r7, [sp, #16]
 80094d4:	e761      	b.n	800939a <_dtoa_r+0x3e2>
 80094d6:	4b27      	ldr	r3, [pc, #156]	@ (8009574 <_dtoa_r+0x5bc>)
 80094d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094da:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80094de:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80094e2:	4454      	add	r4, sl
 80094e4:	2900      	cmp	r1, #0
 80094e6:	d053      	beq.n	8009590 <_dtoa_r+0x5d8>
 80094e8:	4928      	ldr	r1, [pc, #160]	@ (800958c <_dtoa_r+0x5d4>)
 80094ea:	2000      	movs	r0, #0
 80094ec:	f7f7 f9ae 	bl	800084c <__aeabi_ddiv>
 80094f0:	4633      	mov	r3, r6
 80094f2:	462a      	mov	r2, r5
 80094f4:	f7f6 fec8 	bl	8000288 <__aeabi_dsub>
 80094f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80094fc:	4656      	mov	r6, sl
 80094fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009502:	f7f7 fb29 	bl	8000b58 <__aeabi_d2iz>
 8009506:	4605      	mov	r5, r0
 8009508:	f7f7 f80c 	bl	8000524 <__aeabi_i2d>
 800950c:	4602      	mov	r2, r0
 800950e:	460b      	mov	r3, r1
 8009510:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009514:	f7f6 feb8 	bl	8000288 <__aeabi_dsub>
 8009518:	3530      	adds	r5, #48	@ 0x30
 800951a:	4602      	mov	r2, r0
 800951c:	460b      	mov	r3, r1
 800951e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009522:	f806 5b01 	strb.w	r5, [r6], #1
 8009526:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800952a:	f7f7 fad7 	bl	8000adc <__aeabi_dcmplt>
 800952e:	2800      	cmp	r0, #0
 8009530:	d171      	bne.n	8009616 <_dtoa_r+0x65e>
 8009532:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009536:	4911      	ldr	r1, [pc, #68]	@ (800957c <_dtoa_r+0x5c4>)
 8009538:	2000      	movs	r0, #0
 800953a:	f7f6 fea5 	bl	8000288 <__aeabi_dsub>
 800953e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009542:	f7f7 facb 	bl	8000adc <__aeabi_dcmplt>
 8009546:	2800      	cmp	r0, #0
 8009548:	f040 8095 	bne.w	8009676 <_dtoa_r+0x6be>
 800954c:	42a6      	cmp	r6, r4
 800954e:	f43f af50 	beq.w	80093f2 <_dtoa_r+0x43a>
 8009552:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009556:	4b0a      	ldr	r3, [pc, #40]	@ (8009580 <_dtoa_r+0x5c8>)
 8009558:	2200      	movs	r2, #0
 800955a:	f7f7 f84d 	bl	80005f8 <__aeabi_dmul>
 800955e:	4b08      	ldr	r3, [pc, #32]	@ (8009580 <_dtoa_r+0x5c8>)
 8009560:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009564:	2200      	movs	r2, #0
 8009566:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800956a:	f7f7 f845 	bl	80005f8 <__aeabi_dmul>
 800956e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009572:	e7c4      	b.n	80094fe <_dtoa_r+0x546>
 8009574:	08010ec8 	.word	0x08010ec8
 8009578:	08010ea0 	.word	0x08010ea0
 800957c:	3ff00000 	.word	0x3ff00000
 8009580:	40240000 	.word	0x40240000
 8009584:	401c0000 	.word	0x401c0000
 8009588:	40140000 	.word	0x40140000
 800958c:	3fe00000 	.word	0x3fe00000
 8009590:	4631      	mov	r1, r6
 8009592:	4628      	mov	r0, r5
 8009594:	f7f7 f830 	bl	80005f8 <__aeabi_dmul>
 8009598:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800959c:	9415      	str	r4, [sp, #84]	@ 0x54
 800959e:	4656      	mov	r6, sl
 80095a0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095a4:	f7f7 fad8 	bl	8000b58 <__aeabi_d2iz>
 80095a8:	4605      	mov	r5, r0
 80095aa:	f7f6 ffbb 	bl	8000524 <__aeabi_i2d>
 80095ae:	4602      	mov	r2, r0
 80095b0:	460b      	mov	r3, r1
 80095b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095b6:	f7f6 fe67 	bl	8000288 <__aeabi_dsub>
 80095ba:	3530      	adds	r5, #48	@ 0x30
 80095bc:	f806 5b01 	strb.w	r5, [r6], #1
 80095c0:	4602      	mov	r2, r0
 80095c2:	460b      	mov	r3, r1
 80095c4:	42a6      	cmp	r6, r4
 80095c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095ca:	f04f 0200 	mov.w	r2, #0
 80095ce:	d124      	bne.n	800961a <_dtoa_r+0x662>
 80095d0:	4bac      	ldr	r3, [pc, #688]	@ (8009884 <_dtoa_r+0x8cc>)
 80095d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80095d6:	f7f6 fe59 	bl	800028c <__adddf3>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095e2:	f7f7 fa99 	bl	8000b18 <__aeabi_dcmpgt>
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d145      	bne.n	8009676 <_dtoa_r+0x6be>
 80095ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095ee:	49a5      	ldr	r1, [pc, #660]	@ (8009884 <_dtoa_r+0x8cc>)
 80095f0:	2000      	movs	r0, #0
 80095f2:	f7f6 fe49 	bl	8000288 <__aeabi_dsub>
 80095f6:	4602      	mov	r2, r0
 80095f8:	460b      	mov	r3, r1
 80095fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095fe:	f7f7 fa6d 	bl	8000adc <__aeabi_dcmplt>
 8009602:	2800      	cmp	r0, #0
 8009604:	f43f aef5 	beq.w	80093f2 <_dtoa_r+0x43a>
 8009608:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800960a:	1e73      	subs	r3, r6, #1
 800960c:	9315      	str	r3, [sp, #84]	@ 0x54
 800960e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009612:	2b30      	cmp	r3, #48	@ 0x30
 8009614:	d0f8      	beq.n	8009608 <_dtoa_r+0x650>
 8009616:	9f04      	ldr	r7, [sp, #16]
 8009618:	e73e      	b.n	8009498 <_dtoa_r+0x4e0>
 800961a:	4b9b      	ldr	r3, [pc, #620]	@ (8009888 <_dtoa_r+0x8d0>)
 800961c:	f7f6 ffec 	bl	80005f8 <__aeabi_dmul>
 8009620:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009624:	e7bc      	b.n	80095a0 <_dtoa_r+0x5e8>
 8009626:	d10c      	bne.n	8009642 <_dtoa_r+0x68a>
 8009628:	4b98      	ldr	r3, [pc, #608]	@ (800988c <_dtoa_r+0x8d4>)
 800962a:	2200      	movs	r2, #0
 800962c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009630:	f7f6 ffe2 	bl	80005f8 <__aeabi_dmul>
 8009634:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009638:	f7f7 fa64 	bl	8000b04 <__aeabi_dcmpge>
 800963c:	2800      	cmp	r0, #0
 800963e:	f000 8157 	beq.w	80098f0 <_dtoa_r+0x938>
 8009642:	2400      	movs	r4, #0
 8009644:	4625      	mov	r5, r4
 8009646:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009648:	43db      	mvns	r3, r3
 800964a:	9304      	str	r3, [sp, #16]
 800964c:	4656      	mov	r6, sl
 800964e:	2700      	movs	r7, #0
 8009650:	4621      	mov	r1, r4
 8009652:	4658      	mov	r0, fp
 8009654:	f001 f8b8 	bl	800a7c8 <_Bfree>
 8009658:	2d00      	cmp	r5, #0
 800965a:	d0dc      	beq.n	8009616 <_dtoa_r+0x65e>
 800965c:	b12f      	cbz	r7, 800966a <_dtoa_r+0x6b2>
 800965e:	42af      	cmp	r7, r5
 8009660:	d003      	beq.n	800966a <_dtoa_r+0x6b2>
 8009662:	4639      	mov	r1, r7
 8009664:	4658      	mov	r0, fp
 8009666:	f001 f8af 	bl	800a7c8 <_Bfree>
 800966a:	4629      	mov	r1, r5
 800966c:	4658      	mov	r0, fp
 800966e:	f001 f8ab 	bl	800a7c8 <_Bfree>
 8009672:	e7d0      	b.n	8009616 <_dtoa_r+0x65e>
 8009674:	9704      	str	r7, [sp, #16]
 8009676:	4633      	mov	r3, r6
 8009678:	461e      	mov	r6, r3
 800967a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800967e:	2a39      	cmp	r2, #57	@ 0x39
 8009680:	d107      	bne.n	8009692 <_dtoa_r+0x6da>
 8009682:	459a      	cmp	sl, r3
 8009684:	d1f8      	bne.n	8009678 <_dtoa_r+0x6c0>
 8009686:	9a04      	ldr	r2, [sp, #16]
 8009688:	3201      	adds	r2, #1
 800968a:	9204      	str	r2, [sp, #16]
 800968c:	2230      	movs	r2, #48	@ 0x30
 800968e:	f88a 2000 	strb.w	r2, [sl]
 8009692:	781a      	ldrb	r2, [r3, #0]
 8009694:	3201      	adds	r2, #1
 8009696:	701a      	strb	r2, [r3, #0]
 8009698:	e7bd      	b.n	8009616 <_dtoa_r+0x65e>
 800969a:	4b7b      	ldr	r3, [pc, #492]	@ (8009888 <_dtoa_r+0x8d0>)
 800969c:	2200      	movs	r2, #0
 800969e:	f7f6 ffab 	bl	80005f8 <__aeabi_dmul>
 80096a2:	2200      	movs	r2, #0
 80096a4:	2300      	movs	r3, #0
 80096a6:	4604      	mov	r4, r0
 80096a8:	460d      	mov	r5, r1
 80096aa:	f7f7 fa0d 	bl	8000ac8 <__aeabi_dcmpeq>
 80096ae:	2800      	cmp	r0, #0
 80096b0:	f43f aebb 	beq.w	800942a <_dtoa_r+0x472>
 80096b4:	e6f0      	b.n	8009498 <_dtoa_r+0x4e0>
 80096b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80096b8:	2a00      	cmp	r2, #0
 80096ba:	f000 80db 	beq.w	8009874 <_dtoa_r+0x8bc>
 80096be:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096c0:	2a01      	cmp	r2, #1
 80096c2:	f300 80bf 	bgt.w	8009844 <_dtoa_r+0x88c>
 80096c6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80096c8:	2a00      	cmp	r2, #0
 80096ca:	f000 80b7 	beq.w	800983c <_dtoa_r+0x884>
 80096ce:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80096d2:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80096d4:	4646      	mov	r6, r8
 80096d6:	9a08      	ldr	r2, [sp, #32]
 80096d8:	2101      	movs	r1, #1
 80096da:	441a      	add	r2, r3
 80096dc:	4658      	mov	r0, fp
 80096de:	4498      	add	r8, r3
 80096e0:	9208      	str	r2, [sp, #32]
 80096e2:	f001 f96f 	bl	800a9c4 <__i2b>
 80096e6:	4605      	mov	r5, r0
 80096e8:	b15e      	cbz	r6, 8009702 <_dtoa_r+0x74a>
 80096ea:	9b08      	ldr	r3, [sp, #32]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	dd08      	ble.n	8009702 <_dtoa_r+0x74a>
 80096f0:	42b3      	cmp	r3, r6
 80096f2:	9a08      	ldr	r2, [sp, #32]
 80096f4:	bfa8      	it	ge
 80096f6:	4633      	movge	r3, r6
 80096f8:	eba8 0803 	sub.w	r8, r8, r3
 80096fc:	1af6      	subs	r6, r6, r3
 80096fe:	1ad3      	subs	r3, r2, r3
 8009700:	9308      	str	r3, [sp, #32]
 8009702:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009704:	b1f3      	cbz	r3, 8009744 <_dtoa_r+0x78c>
 8009706:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009708:	2b00      	cmp	r3, #0
 800970a:	f000 80b7 	beq.w	800987c <_dtoa_r+0x8c4>
 800970e:	b18c      	cbz	r4, 8009734 <_dtoa_r+0x77c>
 8009710:	4629      	mov	r1, r5
 8009712:	4622      	mov	r2, r4
 8009714:	4658      	mov	r0, fp
 8009716:	f001 fa15 	bl	800ab44 <__pow5mult>
 800971a:	464a      	mov	r2, r9
 800971c:	4601      	mov	r1, r0
 800971e:	4605      	mov	r5, r0
 8009720:	4658      	mov	r0, fp
 8009722:	f001 f965 	bl	800a9f0 <__multiply>
 8009726:	4649      	mov	r1, r9
 8009728:	9004      	str	r0, [sp, #16]
 800972a:	4658      	mov	r0, fp
 800972c:	f001 f84c 	bl	800a7c8 <_Bfree>
 8009730:	9b04      	ldr	r3, [sp, #16]
 8009732:	4699      	mov	r9, r3
 8009734:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009736:	1b1a      	subs	r2, r3, r4
 8009738:	d004      	beq.n	8009744 <_dtoa_r+0x78c>
 800973a:	4649      	mov	r1, r9
 800973c:	4658      	mov	r0, fp
 800973e:	f001 fa01 	bl	800ab44 <__pow5mult>
 8009742:	4681      	mov	r9, r0
 8009744:	2101      	movs	r1, #1
 8009746:	4658      	mov	r0, fp
 8009748:	f001 f93c 	bl	800a9c4 <__i2b>
 800974c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800974e:	4604      	mov	r4, r0
 8009750:	2b00      	cmp	r3, #0
 8009752:	f000 81cf 	beq.w	8009af4 <_dtoa_r+0xb3c>
 8009756:	461a      	mov	r2, r3
 8009758:	4601      	mov	r1, r0
 800975a:	4658      	mov	r0, fp
 800975c:	f001 f9f2 	bl	800ab44 <__pow5mult>
 8009760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009762:	2b01      	cmp	r3, #1
 8009764:	4604      	mov	r4, r0
 8009766:	f300 8095 	bgt.w	8009894 <_dtoa_r+0x8dc>
 800976a:	9b02      	ldr	r3, [sp, #8]
 800976c:	2b00      	cmp	r3, #0
 800976e:	f040 8087 	bne.w	8009880 <_dtoa_r+0x8c8>
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009778:	2b00      	cmp	r3, #0
 800977a:	f040 8089 	bne.w	8009890 <_dtoa_r+0x8d8>
 800977e:	9b03      	ldr	r3, [sp, #12]
 8009780:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009784:	0d1b      	lsrs	r3, r3, #20
 8009786:	051b      	lsls	r3, r3, #20
 8009788:	b12b      	cbz	r3, 8009796 <_dtoa_r+0x7de>
 800978a:	9b08      	ldr	r3, [sp, #32]
 800978c:	3301      	adds	r3, #1
 800978e:	9308      	str	r3, [sp, #32]
 8009790:	f108 0801 	add.w	r8, r8, #1
 8009794:	2301      	movs	r3, #1
 8009796:	930a      	str	r3, [sp, #40]	@ 0x28
 8009798:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800979a:	2b00      	cmp	r3, #0
 800979c:	f000 81b0 	beq.w	8009b00 <_dtoa_r+0xb48>
 80097a0:	6923      	ldr	r3, [r4, #16]
 80097a2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80097a6:	6918      	ldr	r0, [r3, #16]
 80097a8:	f001 f8c0 	bl	800a92c <__hi0bits>
 80097ac:	f1c0 0020 	rsb	r0, r0, #32
 80097b0:	9b08      	ldr	r3, [sp, #32]
 80097b2:	4418      	add	r0, r3
 80097b4:	f010 001f 	ands.w	r0, r0, #31
 80097b8:	d077      	beq.n	80098aa <_dtoa_r+0x8f2>
 80097ba:	f1c0 0320 	rsb	r3, r0, #32
 80097be:	2b04      	cmp	r3, #4
 80097c0:	dd6b      	ble.n	800989a <_dtoa_r+0x8e2>
 80097c2:	9b08      	ldr	r3, [sp, #32]
 80097c4:	f1c0 001c 	rsb	r0, r0, #28
 80097c8:	4403      	add	r3, r0
 80097ca:	4480      	add	r8, r0
 80097cc:	4406      	add	r6, r0
 80097ce:	9308      	str	r3, [sp, #32]
 80097d0:	f1b8 0f00 	cmp.w	r8, #0
 80097d4:	dd05      	ble.n	80097e2 <_dtoa_r+0x82a>
 80097d6:	4649      	mov	r1, r9
 80097d8:	4642      	mov	r2, r8
 80097da:	4658      	mov	r0, fp
 80097dc:	f001 fa0c 	bl	800abf8 <__lshift>
 80097e0:	4681      	mov	r9, r0
 80097e2:	9b08      	ldr	r3, [sp, #32]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	dd05      	ble.n	80097f4 <_dtoa_r+0x83c>
 80097e8:	4621      	mov	r1, r4
 80097ea:	461a      	mov	r2, r3
 80097ec:	4658      	mov	r0, fp
 80097ee:	f001 fa03 	bl	800abf8 <__lshift>
 80097f2:	4604      	mov	r4, r0
 80097f4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80097f6:	2b00      	cmp	r3, #0
 80097f8:	d059      	beq.n	80098ae <_dtoa_r+0x8f6>
 80097fa:	4621      	mov	r1, r4
 80097fc:	4648      	mov	r0, r9
 80097fe:	f001 fa67 	bl	800acd0 <__mcmp>
 8009802:	2800      	cmp	r0, #0
 8009804:	da53      	bge.n	80098ae <_dtoa_r+0x8f6>
 8009806:	1e7b      	subs	r3, r7, #1
 8009808:	9304      	str	r3, [sp, #16]
 800980a:	4649      	mov	r1, r9
 800980c:	2300      	movs	r3, #0
 800980e:	220a      	movs	r2, #10
 8009810:	4658      	mov	r0, fp
 8009812:	f000 fffb 	bl	800a80c <__multadd>
 8009816:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009818:	4681      	mov	r9, r0
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 8172 	beq.w	8009b04 <_dtoa_r+0xb4c>
 8009820:	2300      	movs	r3, #0
 8009822:	4629      	mov	r1, r5
 8009824:	220a      	movs	r2, #10
 8009826:	4658      	mov	r0, fp
 8009828:	f000 fff0 	bl	800a80c <__multadd>
 800982c:	9b00      	ldr	r3, [sp, #0]
 800982e:	2b00      	cmp	r3, #0
 8009830:	4605      	mov	r5, r0
 8009832:	dc67      	bgt.n	8009904 <_dtoa_r+0x94c>
 8009834:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009836:	2b02      	cmp	r3, #2
 8009838:	dc41      	bgt.n	80098be <_dtoa_r+0x906>
 800983a:	e063      	b.n	8009904 <_dtoa_r+0x94c>
 800983c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800983e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009842:	e746      	b.n	80096d2 <_dtoa_r+0x71a>
 8009844:	9b07      	ldr	r3, [sp, #28]
 8009846:	1e5c      	subs	r4, r3, #1
 8009848:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800984a:	42a3      	cmp	r3, r4
 800984c:	bfbf      	itttt	lt
 800984e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009850:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009852:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009854:	1ae3      	sublt	r3, r4, r3
 8009856:	bfb4      	ite	lt
 8009858:	18d2      	addlt	r2, r2, r3
 800985a:	1b1c      	subge	r4, r3, r4
 800985c:	9b07      	ldr	r3, [sp, #28]
 800985e:	bfbc      	itt	lt
 8009860:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009862:	2400      	movlt	r4, #0
 8009864:	2b00      	cmp	r3, #0
 8009866:	bfb5      	itete	lt
 8009868:	eba8 0603 	sublt.w	r6, r8, r3
 800986c:	9b07      	ldrge	r3, [sp, #28]
 800986e:	2300      	movlt	r3, #0
 8009870:	4646      	movge	r6, r8
 8009872:	e730      	b.n	80096d6 <_dtoa_r+0x71e>
 8009874:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009876:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009878:	4646      	mov	r6, r8
 800987a:	e735      	b.n	80096e8 <_dtoa_r+0x730>
 800987c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800987e:	e75c      	b.n	800973a <_dtoa_r+0x782>
 8009880:	2300      	movs	r3, #0
 8009882:	e788      	b.n	8009796 <_dtoa_r+0x7de>
 8009884:	3fe00000 	.word	0x3fe00000
 8009888:	40240000 	.word	0x40240000
 800988c:	40140000 	.word	0x40140000
 8009890:	9b02      	ldr	r3, [sp, #8]
 8009892:	e780      	b.n	8009796 <_dtoa_r+0x7de>
 8009894:	2300      	movs	r3, #0
 8009896:	930a      	str	r3, [sp, #40]	@ 0x28
 8009898:	e782      	b.n	80097a0 <_dtoa_r+0x7e8>
 800989a:	d099      	beq.n	80097d0 <_dtoa_r+0x818>
 800989c:	9a08      	ldr	r2, [sp, #32]
 800989e:	331c      	adds	r3, #28
 80098a0:	441a      	add	r2, r3
 80098a2:	4498      	add	r8, r3
 80098a4:	441e      	add	r6, r3
 80098a6:	9208      	str	r2, [sp, #32]
 80098a8:	e792      	b.n	80097d0 <_dtoa_r+0x818>
 80098aa:	4603      	mov	r3, r0
 80098ac:	e7f6      	b.n	800989c <_dtoa_r+0x8e4>
 80098ae:	9b07      	ldr	r3, [sp, #28]
 80098b0:	9704      	str	r7, [sp, #16]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	dc20      	bgt.n	80098f8 <_dtoa_r+0x940>
 80098b6:	9300      	str	r3, [sp, #0]
 80098b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098ba:	2b02      	cmp	r3, #2
 80098bc:	dd1e      	ble.n	80098fc <_dtoa_r+0x944>
 80098be:	9b00      	ldr	r3, [sp, #0]
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	f47f aec0 	bne.w	8009646 <_dtoa_r+0x68e>
 80098c6:	4621      	mov	r1, r4
 80098c8:	2205      	movs	r2, #5
 80098ca:	4658      	mov	r0, fp
 80098cc:	f000 ff9e 	bl	800a80c <__multadd>
 80098d0:	4601      	mov	r1, r0
 80098d2:	4604      	mov	r4, r0
 80098d4:	4648      	mov	r0, r9
 80098d6:	f001 f9fb 	bl	800acd0 <__mcmp>
 80098da:	2800      	cmp	r0, #0
 80098dc:	f77f aeb3 	ble.w	8009646 <_dtoa_r+0x68e>
 80098e0:	4656      	mov	r6, sl
 80098e2:	2331      	movs	r3, #49	@ 0x31
 80098e4:	f806 3b01 	strb.w	r3, [r6], #1
 80098e8:	9b04      	ldr	r3, [sp, #16]
 80098ea:	3301      	adds	r3, #1
 80098ec:	9304      	str	r3, [sp, #16]
 80098ee:	e6ae      	b.n	800964e <_dtoa_r+0x696>
 80098f0:	9c07      	ldr	r4, [sp, #28]
 80098f2:	9704      	str	r7, [sp, #16]
 80098f4:	4625      	mov	r5, r4
 80098f6:	e7f3      	b.n	80098e0 <_dtoa_r+0x928>
 80098f8:	9b07      	ldr	r3, [sp, #28]
 80098fa:	9300      	str	r3, [sp, #0]
 80098fc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80098fe:	2b00      	cmp	r3, #0
 8009900:	f000 8104 	beq.w	8009b0c <_dtoa_r+0xb54>
 8009904:	2e00      	cmp	r6, #0
 8009906:	dd05      	ble.n	8009914 <_dtoa_r+0x95c>
 8009908:	4629      	mov	r1, r5
 800990a:	4632      	mov	r2, r6
 800990c:	4658      	mov	r0, fp
 800990e:	f001 f973 	bl	800abf8 <__lshift>
 8009912:	4605      	mov	r5, r0
 8009914:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009916:	2b00      	cmp	r3, #0
 8009918:	d05a      	beq.n	80099d0 <_dtoa_r+0xa18>
 800991a:	6869      	ldr	r1, [r5, #4]
 800991c:	4658      	mov	r0, fp
 800991e:	f000 ff13 	bl	800a748 <_Balloc>
 8009922:	4606      	mov	r6, r0
 8009924:	b928      	cbnz	r0, 8009932 <_dtoa_r+0x97a>
 8009926:	4b84      	ldr	r3, [pc, #528]	@ (8009b38 <_dtoa_r+0xb80>)
 8009928:	4602      	mov	r2, r0
 800992a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800992e:	f7ff bb5a 	b.w	8008fe6 <_dtoa_r+0x2e>
 8009932:	692a      	ldr	r2, [r5, #16]
 8009934:	3202      	adds	r2, #2
 8009936:	0092      	lsls	r2, r2, #2
 8009938:	f105 010c 	add.w	r1, r5, #12
 800993c:	300c      	adds	r0, #12
 800993e:	f7ff fa94 	bl	8008e6a <memcpy>
 8009942:	2201      	movs	r2, #1
 8009944:	4631      	mov	r1, r6
 8009946:	4658      	mov	r0, fp
 8009948:	f001 f956 	bl	800abf8 <__lshift>
 800994c:	f10a 0301 	add.w	r3, sl, #1
 8009950:	9307      	str	r3, [sp, #28]
 8009952:	9b00      	ldr	r3, [sp, #0]
 8009954:	4453      	add	r3, sl
 8009956:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009958:	9b02      	ldr	r3, [sp, #8]
 800995a:	f003 0301 	and.w	r3, r3, #1
 800995e:	462f      	mov	r7, r5
 8009960:	930a      	str	r3, [sp, #40]	@ 0x28
 8009962:	4605      	mov	r5, r0
 8009964:	9b07      	ldr	r3, [sp, #28]
 8009966:	4621      	mov	r1, r4
 8009968:	3b01      	subs	r3, #1
 800996a:	4648      	mov	r0, r9
 800996c:	9300      	str	r3, [sp, #0]
 800996e:	f7ff fa99 	bl	8008ea4 <quorem>
 8009972:	4639      	mov	r1, r7
 8009974:	9002      	str	r0, [sp, #8]
 8009976:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800997a:	4648      	mov	r0, r9
 800997c:	f001 f9a8 	bl	800acd0 <__mcmp>
 8009980:	462a      	mov	r2, r5
 8009982:	9008      	str	r0, [sp, #32]
 8009984:	4621      	mov	r1, r4
 8009986:	4658      	mov	r0, fp
 8009988:	f001 f9be 	bl	800ad08 <__mdiff>
 800998c:	68c2      	ldr	r2, [r0, #12]
 800998e:	4606      	mov	r6, r0
 8009990:	bb02      	cbnz	r2, 80099d4 <_dtoa_r+0xa1c>
 8009992:	4601      	mov	r1, r0
 8009994:	4648      	mov	r0, r9
 8009996:	f001 f99b 	bl	800acd0 <__mcmp>
 800999a:	4602      	mov	r2, r0
 800999c:	4631      	mov	r1, r6
 800999e:	4658      	mov	r0, fp
 80099a0:	920e      	str	r2, [sp, #56]	@ 0x38
 80099a2:	f000 ff11 	bl	800a7c8 <_Bfree>
 80099a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80099aa:	9e07      	ldr	r6, [sp, #28]
 80099ac:	ea43 0102 	orr.w	r1, r3, r2
 80099b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099b2:	4319      	orrs	r1, r3
 80099b4:	d110      	bne.n	80099d8 <_dtoa_r+0xa20>
 80099b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80099ba:	d029      	beq.n	8009a10 <_dtoa_r+0xa58>
 80099bc:	9b08      	ldr	r3, [sp, #32]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	dd02      	ble.n	80099c8 <_dtoa_r+0xa10>
 80099c2:	9b02      	ldr	r3, [sp, #8]
 80099c4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80099c8:	9b00      	ldr	r3, [sp, #0]
 80099ca:	f883 8000 	strb.w	r8, [r3]
 80099ce:	e63f      	b.n	8009650 <_dtoa_r+0x698>
 80099d0:	4628      	mov	r0, r5
 80099d2:	e7bb      	b.n	800994c <_dtoa_r+0x994>
 80099d4:	2201      	movs	r2, #1
 80099d6:	e7e1      	b.n	800999c <_dtoa_r+0x9e4>
 80099d8:	9b08      	ldr	r3, [sp, #32]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	db04      	blt.n	80099e8 <_dtoa_r+0xa30>
 80099de:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80099e0:	430b      	orrs	r3, r1
 80099e2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80099e4:	430b      	orrs	r3, r1
 80099e6:	d120      	bne.n	8009a2a <_dtoa_r+0xa72>
 80099e8:	2a00      	cmp	r2, #0
 80099ea:	dded      	ble.n	80099c8 <_dtoa_r+0xa10>
 80099ec:	4649      	mov	r1, r9
 80099ee:	2201      	movs	r2, #1
 80099f0:	4658      	mov	r0, fp
 80099f2:	f001 f901 	bl	800abf8 <__lshift>
 80099f6:	4621      	mov	r1, r4
 80099f8:	4681      	mov	r9, r0
 80099fa:	f001 f969 	bl	800acd0 <__mcmp>
 80099fe:	2800      	cmp	r0, #0
 8009a00:	dc03      	bgt.n	8009a0a <_dtoa_r+0xa52>
 8009a02:	d1e1      	bne.n	80099c8 <_dtoa_r+0xa10>
 8009a04:	f018 0f01 	tst.w	r8, #1
 8009a08:	d0de      	beq.n	80099c8 <_dtoa_r+0xa10>
 8009a0a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a0e:	d1d8      	bne.n	80099c2 <_dtoa_r+0xa0a>
 8009a10:	9a00      	ldr	r2, [sp, #0]
 8009a12:	2339      	movs	r3, #57	@ 0x39
 8009a14:	7013      	strb	r3, [r2, #0]
 8009a16:	4633      	mov	r3, r6
 8009a18:	461e      	mov	r6, r3
 8009a1a:	3b01      	subs	r3, #1
 8009a1c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009a20:	2a39      	cmp	r2, #57	@ 0x39
 8009a22:	d052      	beq.n	8009aca <_dtoa_r+0xb12>
 8009a24:	3201      	adds	r2, #1
 8009a26:	701a      	strb	r2, [r3, #0]
 8009a28:	e612      	b.n	8009650 <_dtoa_r+0x698>
 8009a2a:	2a00      	cmp	r2, #0
 8009a2c:	dd07      	ble.n	8009a3e <_dtoa_r+0xa86>
 8009a2e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a32:	d0ed      	beq.n	8009a10 <_dtoa_r+0xa58>
 8009a34:	9a00      	ldr	r2, [sp, #0]
 8009a36:	f108 0301 	add.w	r3, r8, #1
 8009a3a:	7013      	strb	r3, [r2, #0]
 8009a3c:	e608      	b.n	8009650 <_dtoa_r+0x698>
 8009a3e:	9b07      	ldr	r3, [sp, #28]
 8009a40:	9a07      	ldr	r2, [sp, #28]
 8009a42:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009a46:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009a48:	4293      	cmp	r3, r2
 8009a4a:	d028      	beq.n	8009a9e <_dtoa_r+0xae6>
 8009a4c:	4649      	mov	r1, r9
 8009a4e:	2300      	movs	r3, #0
 8009a50:	220a      	movs	r2, #10
 8009a52:	4658      	mov	r0, fp
 8009a54:	f000 feda 	bl	800a80c <__multadd>
 8009a58:	42af      	cmp	r7, r5
 8009a5a:	4681      	mov	r9, r0
 8009a5c:	f04f 0300 	mov.w	r3, #0
 8009a60:	f04f 020a 	mov.w	r2, #10
 8009a64:	4639      	mov	r1, r7
 8009a66:	4658      	mov	r0, fp
 8009a68:	d107      	bne.n	8009a7a <_dtoa_r+0xac2>
 8009a6a:	f000 fecf 	bl	800a80c <__multadd>
 8009a6e:	4607      	mov	r7, r0
 8009a70:	4605      	mov	r5, r0
 8009a72:	9b07      	ldr	r3, [sp, #28]
 8009a74:	3301      	adds	r3, #1
 8009a76:	9307      	str	r3, [sp, #28]
 8009a78:	e774      	b.n	8009964 <_dtoa_r+0x9ac>
 8009a7a:	f000 fec7 	bl	800a80c <__multadd>
 8009a7e:	4629      	mov	r1, r5
 8009a80:	4607      	mov	r7, r0
 8009a82:	2300      	movs	r3, #0
 8009a84:	220a      	movs	r2, #10
 8009a86:	4658      	mov	r0, fp
 8009a88:	f000 fec0 	bl	800a80c <__multadd>
 8009a8c:	4605      	mov	r5, r0
 8009a8e:	e7f0      	b.n	8009a72 <_dtoa_r+0xaba>
 8009a90:	9b00      	ldr	r3, [sp, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	bfcc      	ite	gt
 8009a96:	461e      	movgt	r6, r3
 8009a98:	2601      	movle	r6, #1
 8009a9a:	4456      	add	r6, sl
 8009a9c:	2700      	movs	r7, #0
 8009a9e:	4649      	mov	r1, r9
 8009aa0:	2201      	movs	r2, #1
 8009aa2:	4658      	mov	r0, fp
 8009aa4:	f001 f8a8 	bl	800abf8 <__lshift>
 8009aa8:	4621      	mov	r1, r4
 8009aaa:	4681      	mov	r9, r0
 8009aac:	f001 f910 	bl	800acd0 <__mcmp>
 8009ab0:	2800      	cmp	r0, #0
 8009ab2:	dcb0      	bgt.n	8009a16 <_dtoa_r+0xa5e>
 8009ab4:	d102      	bne.n	8009abc <_dtoa_r+0xb04>
 8009ab6:	f018 0f01 	tst.w	r8, #1
 8009aba:	d1ac      	bne.n	8009a16 <_dtoa_r+0xa5e>
 8009abc:	4633      	mov	r3, r6
 8009abe:	461e      	mov	r6, r3
 8009ac0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009ac4:	2a30      	cmp	r2, #48	@ 0x30
 8009ac6:	d0fa      	beq.n	8009abe <_dtoa_r+0xb06>
 8009ac8:	e5c2      	b.n	8009650 <_dtoa_r+0x698>
 8009aca:	459a      	cmp	sl, r3
 8009acc:	d1a4      	bne.n	8009a18 <_dtoa_r+0xa60>
 8009ace:	9b04      	ldr	r3, [sp, #16]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	9304      	str	r3, [sp, #16]
 8009ad4:	2331      	movs	r3, #49	@ 0x31
 8009ad6:	f88a 3000 	strb.w	r3, [sl]
 8009ada:	e5b9      	b.n	8009650 <_dtoa_r+0x698>
 8009adc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009ade:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009b3c <_dtoa_r+0xb84>
 8009ae2:	b11b      	cbz	r3, 8009aec <_dtoa_r+0xb34>
 8009ae4:	f10a 0308 	add.w	r3, sl, #8
 8009ae8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009aea:	6013      	str	r3, [r2, #0]
 8009aec:	4650      	mov	r0, sl
 8009aee:	b019      	add	sp, #100	@ 0x64
 8009af0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009af4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	f77f ae37 	ble.w	800976a <_dtoa_r+0x7b2>
 8009afc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009afe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b00:	2001      	movs	r0, #1
 8009b02:	e655      	b.n	80097b0 <_dtoa_r+0x7f8>
 8009b04:	9b00      	ldr	r3, [sp, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f77f aed6 	ble.w	80098b8 <_dtoa_r+0x900>
 8009b0c:	4656      	mov	r6, sl
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4648      	mov	r0, r9
 8009b12:	f7ff f9c7 	bl	8008ea4 <quorem>
 8009b16:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b1a:	f806 8b01 	strb.w	r8, [r6], #1
 8009b1e:	9b00      	ldr	r3, [sp, #0]
 8009b20:	eba6 020a 	sub.w	r2, r6, sl
 8009b24:	4293      	cmp	r3, r2
 8009b26:	ddb3      	ble.n	8009a90 <_dtoa_r+0xad8>
 8009b28:	4649      	mov	r1, r9
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	220a      	movs	r2, #10
 8009b2e:	4658      	mov	r0, fp
 8009b30:	f000 fe6c 	bl	800a80c <__multadd>
 8009b34:	4681      	mov	r9, r0
 8009b36:	e7ea      	b.n	8009b0e <_dtoa_r+0xb56>
 8009b38:	08010db5 	.word	0x08010db5
 8009b3c:	08010d39 	.word	0x08010d39

08009b40 <rshift>:
 8009b40:	6903      	ldr	r3, [r0, #16]
 8009b42:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009b46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b4a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009b4e:	f100 0414 	add.w	r4, r0, #20
 8009b52:	dd45      	ble.n	8009be0 <rshift+0xa0>
 8009b54:	f011 011f 	ands.w	r1, r1, #31
 8009b58:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009b5c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009b60:	d10c      	bne.n	8009b7c <rshift+0x3c>
 8009b62:	f100 0710 	add.w	r7, r0, #16
 8009b66:	4629      	mov	r1, r5
 8009b68:	42b1      	cmp	r1, r6
 8009b6a:	d334      	bcc.n	8009bd6 <rshift+0x96>
 8009b6c:	1a9b      	subs	r3, r3, r2
 8009b6e:	009b      	lsls	r3, r3, #2
 8009b70:	1eea      	subs	r2, r5, #3
 8009b72:	4296      	cmp	r6, r2
 8009b74:	bf38      	it	cc
 8009b76:	2300      	movcc	r3, #0
 8009b78:	4423      	add	r3, r4
 8009b7a:	e015      	b.n	8009ba8 <rshift+0x68>
 8009b7c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009b80:	f1c1 0820 	rsb	r8, r1, #32
 8009b84:	40cf      	lsrs	r7, r1
 8009b86:	f105 0e04 	add.w	lr, r5, #4
 8009b8a:	46a1      	mov	r9, r4
 8009b8c:	4576      	cmp	r6, lr
 8009b8e:	46f4      	mov	ip, lr
 8009b90:	d815      	bhi.n	8009bbe <rshift+0x7e>
 8009b92:	1a9a      	subs	r2, r3, r2
 8009b94:	0092      	lsls	r2, r2, #2
 8009b96:	3a04      	subs	r2, #4
 8009b98:	3501      	adds	r5, #1
 8009b9a:	42ae      	cmp	r6, r5
 8009b9c:	bf38      	it	cc
 8009b9e:	2200      	movcc	r2, #0
 8009ba0:	18a3      	adds	r3, r4, r2
 8009ba2:	50a7      	str	r7, [r4, r2]
 8009ba4:	b107      	cbz	r7, 8009ba8 <rshift+0x68>
 8009ba6:	3304      	adds	r3, #4
 8009ba8:	1b1a      	subs	r2, r3, r4
 8009baa:	42a3      	cmp	r3, r4
 8009bac:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009bb0:	bf08      	it	eq
 8009bb2:	2300      	moveq	r3, #0
 8009bb4:	6102      	str	r2, [r0, #16]
 8009bb6:	bf08      	it	eq
 8009bb8:	6143      	streq	r3, [r0, #20]
 8009bba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009bbe:	f8dc c000 	ldr.w	ip, [ip]
 8009bc2:	fa0c fc08 	lsl.w	ip, ip, r8
 8009bc6:	ea4c 0707 	orr.w	r7, ip, r7
 8009bca:	f849 7b04 	str.w	r7, [r9], #4
 8009bce:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009bd2:	40cf      	lsrs	r7, r1
 8009bd4:	e7da      	b.n	8009b8c <rshift+0x4c>
 8009bd6:	f851 cb04 	ldr.w	ip, [r1], #4
 8009bda:	f847 cf04 	str.w	ip, [r7, #4]!
 8009bde:	e7c3      	b.n	8009b68 <rshift+0x28>
 8009be0:	4623      	mov	r3, r4
 8009be2:	e7e1      	b.n	8009ba8 <rshift+0x68>

08009be4 <__hexdig_fun>:
 8009be4:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009be8:	2b09      	cmp	r3, #9
 8009bea:	d802      	bhi.n	8009bf2 <__hexdig_fun+0xe>
 8009bec:	3820      	subs	r0, #32
 8009bee:	b2c0      	uxtb	r0, r0
 8009bf0:	4770      	bx	lr
 8009bf2:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009bf6:	2b05      	cmp	r3, #5
 8009bf8:	d801      	bhi.n	8009bfe <__hexdig_fun+0x1a>
 8009bfa:	3847      	subs	r0, #71	@ 0x47
 8009bfc:	e7f7      	b.n	8009bee <__hexdig_fun+0xa>
 8009bfe:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009c02:	2b05      	cmp	r3, #5
 8009c04:	d801      	bhi.n	8009c0a <__hexdig_fun+0x26>
 8009c06:	3827      	subs	r0, #39	@ 0x27
 8009c08:	e7f1      	b.n	8009bee <__hexdig_fun+0xa>
 8009c0a:	2000      	movs	r0, #0
 8009c0c:	4770      	bx	lr
	...

08009c10 <__gethex>:
 8009c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	b085      	sub	sp, #20
 8009c16:	468a      	mov	sl, r1
 8009c18:	9302      	str	r3, [sp, #8]
 8009c1a:	680b      	ldr	r3, [r1, #0]
 8009c1c:	9001      	str	r0, [sp, #4]
 8009c1e:	4690      	mov	r8, r2
 8009c20:	1c9c      	adds	r4, r3, #2
 8009c22:	46a1      	mov	r9, r4
 8009c24:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009c28:	2830      	cmp	r0, #48	@ 0x30
 8009c2a:	d0fa      	beq.n	8009c22 <__gethex+0x12>
 8009c2c:	eba9 0303 	sub.w	r3, r9, r3
 8009c30:	f1a3 0b02 	sub.w	fp, r3, #2
 8009c34:	f7ff ffd6 	bl	8009be4 <__hexdig_fun>
 8009c38:	4605      	mov	r5, r0
 8009c3a:	2800      	cmp	r0, #0
 8009c3c:	d168      	bne.n	8009d10 <__gethex+0x100>
 8009c3e:	49a0      	ldr	r1, [pc, #640]	@ (8009ec0 <__gethex+0x2b0>)
 8009c40:	2201      	movs	r2, #1
 8009c42:	4648      	mov	r0, r9
 8009c44:	f7ff f8ac 	bl	8008da0 <strncmp>
 8009c48:	4607      	mov	r7, r0
 8009c4a:	2800      	cmp	r0, #0
 8009c4c:	d167      	bne.n	8009d1e <__gethex+0x10e>
 8009c4e:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009c52:	4626      	mov	r6, r4
 8009c54:	f7ff ffc6 	bl	8009be4 <__hexdig_fun>
 8009c58:	2800      	cmp	r0, #0
 8009c5a:	d062      	beq.n	8009d22 <__gethex+0x112>
 8009c5c:	4623      	mov	r3, r4
 8009c5e:	7818      	ldrb	r0, [r3, #0]
 8009c60:	2830      	cmp	r0, #48	@ 0x30
 8009c62:	4699      	mov	r9, r3
 8009c64:	f103 0301 	add.w	r3, r3, #1
 8009c68:	d0f9      	beq.n	8009c5e <__gethex+0x4e>
 8009c6a:	f7ff ffbb 	bl	8009be4 <__hexdig_fun>
 8009c6e:	fab0 f580 	clz	r5, r0
 8009c72:	096d      	lsrs	r5, r5, #5
 8009c74:	f04f 0b01 	mov.w	fp, #1
 8009c78:	464a      	mov	r2, r9
 8009c7a:	4616      	mov	r6, r2
 8009c7c:	3201      	adds	r2, #1
 8009c7e:	7830      	ldrb	r0, [r6, #0]
 8009c80:	f7ff ffb0 	bl	8009be4 <__hexdig_fun>
 8009c84:	2800      	cmp	r0, #0
 8009c86:	d1f8      	bne.n	8009c7a <__gethex+0x6a>
 8009c88:	498d      	ldr	r1, [pc, #564]	@ (8009ec0 <__gethex+0x2b0>)
 8009c8a:	2201      	movs	r2, #1
 8009c8c:	4630      	mov	r0, r6
 8009c8e:	f7ff f887 	bl	8008da0 <strncmp>
 8009c92:	2800      	cmp	r0, #0
 8009c94:	d13f      	bne.n	8009d16 <__gethex+0x106>
 8009c96:	b944      	cbnz	r4, 8009caa <__gethex+0x9a>
 8009c98:	1c74      	adds	r4, r6, #1
 8009c9a:	4622      	mov	r2, r4
 8009c9c:	4616      	mov	r6, r2
 8009c9e:	3201      	adds	r2, #1
 8009ca0:	7830      	ldrb	r0, [r6, #0]
 8009ca2:	f7ff ff9f 	bl	8009be4 <__hexdig_fun>
 8009ca6:	2800      	cmp	r0, #0
 8009ca8:	d1f8      	bne.n	8009c9c <__gethex+0x8c>
 8009caa:	1ba4      	subs	r4, r4, r6
 8009cac:	00a7      	lsls	r7, r4, #2
 8009cae:	7833      	ldrb	r3, [r6, #0]
 8009cb0:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009cb4:	2b50      	cmp	r3, #80	@ 0x50
 8009cb6:	d13e      	bne.n	8009d36 <__gethex+0x126>
 8009cb8:	7873      	ldrb	r3, [r6, #1]
 8009cba:	2b2b      	cmp	r3, #43	@ 0x2b
 8009cbc:	d033      	beq.n	8009d26 <__gethex+0x116>
 8009cbe:	2b2d      	cmp	r3, #45	@ 0x2d
 8009cc0:	d034      	beq.n	8009d2c <__gethex+0x11c>
 8009cc2:	1c71      	adds	r1, r6, #1
 8009cc4:	2400      	movs	r4, #0
 8009cc6:	7808      	ldrb	r0, [r1, #0]
 8009cc8:	f7ff ff8c 	bl	8009be4 <__hexdig_fun>
 8009ccc:	1e43      	subs	r3, r0, #1
 8009cce:	b2db      	uxtb	r3, r3
 8009cd0:	2b18      	cmp	r3, #24
 8009cd2:	d830      	bhi.n	8009d36 <__gethex+0x126>
 8009cd4:	f1a0 0210 	sub.w	r2, r0, #16
 8009cd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009cdc:	f7ff ff82 	bl	8009be4 <__hexdig_fun>
 8009ce0:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009ce4:	fa5f fc8c 	uxtb.w	ip, ip
 8009ce8:	f1bc 0f18 	cmp.w	ip, #24
 8009cec:	f04f 030a 	mov.w	r3, #10
 8009cf0:	d91e      	bls.n	8009d30 <__gethex+0x120>
 8009cf2:	b104      	cbz	r4, 8009cf6 <__gethex+0xe6>
 8009cf4:	4252      	negs	r2, r2
 8009cf6:	4417      	add	r7, r2
 8009cf8:	f8ca 1000 	str.w	r1, [sl]
 8009cfc:	b1ed      	cbz	r5, 8009d3a <__gethex+0x12a>
 8009cfe:	f1bb 0f00 	cmp.w	fp, #0
 8009d02:	bf0c      	ite	eq
 8009d04:	2506      	moveq	r5, #6
 8009d06:	2500      	movne	r5, #0
 8009d08:	4628      	mov	r0, r5
 8009d0a:	b005      	add	sp, #20
 8009d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d10:	2500      	movs	r5, #0
 8009d12:	462c      	mov	r4, r5
 8009d14:	e7b0      	b.n	8009c78 <__gethex+0x68>
 8009d16:	2c00      	cmp	r4, #0
 8009d18:	d1c7      	bne.n	8009caa <__gethex+0x9a>
 8009d1a:	4627      	mov	r7, r4
 8009d1c:	e7c7      	b.n	8009cae <__gethex+0x9e>
 8009d1e:	464e      	mov	r6, r9
 8009d20:	462f      	mov	r7, r5
 8009d22:	2501      	movs	r5, #1
 8009d24:	e7c3      	b.n	8009cae <__gethex+0x9e>
 8009d26:	2400      	movs	r4, #0
 8009d28:	1cb1      	adds	r1, r6, #2
 8009d2a:	e7cc      	b.n	8009cc6 <__gethex+0xb6>
 8009d2c:	2401      	movs	r4, #1
 8009d2e:	e7fb      	b.n	8009d28 <__gethex+0x118>
 8009d30:	fb03 0002 	mla	r0, r3, r2, r0
 8009d34:	e7ce      	b.n	8009cd4 <__gethex+0xc4>
 8009d36:	4631      	mov	r1, r6
 8009d38:	e7de      	b.n	8009cf8 <__gethex+0xe8>
 8009d3a:	eba6 0309 	sub.w	r3, r6, r9
 8009d3e:	3b01      	subs	r3, #1
 8009d40:	4629      	mov	r1, r5
 8009d42:	2b07      	cmp	r3, #7
 8009d44:	dc0a      	bgt.n	8009d5c <__gethex+0x14c>
 8009d46:	9801      	ldr	r0, [sp, #4]
 8009d48:	f000 fcfe 	bl	800a748 <_Balloc>
 8009d4c:	4604      	mov	r4, r0
 8009d4e:	b940      	cbnz	r0, 8009d62 <__gethex+0x152>
 8009d50:	4b5c      	ldr	r3, [pc, #368]	@ (8009ec4 <__gethex+0x2b4>)
 8009d52:	4602      	mov	r2, r0
 8009d54:	21e4      	movs	r1, #228	@ 0xe4
 8009d56:	485c      	ldr	r0, [pc, #368]	@ (8009ec8 <__gethex+0x2b8>)
 8009d58:	f001 fa7c 	bl	800b254 <__assert_func>
 8009d5c:	3101      	adds	r1, #1
 8009d5e:	105b      	asrs	r3, r3, #1
 8009d60:	e7ef      	b.n	8009d42 <__gethex+0x132>
 8009d62:	f100 0a14 	add.w	sl, r0, #20
 8009d66:	2300      	movs	r3, #0
 8009d68:	4655      	mov	r5, sl
 8009d6a:	469b      	mov	fp, r3
 8009d6c:	45b1      	cmp	r9, r6
 8009d6e:	d337      	bcc.n	8009de0 <__gethex+0x1d0>
 8009d70:	f845 bb04 	str.w	fp, [r5], #4
 8009d74:	eba5 050a 	sub.w	r5, r5, sl
 8009d78:	10ad      	asrs	r5, r5, #2
 8009d7a:	6125      	str	r5, [r4, #16]
 8009d7c:	4658      	mov	r0, fp
 8009d7e:	f000 fdd5 	bl	800a92c <__hi0bits>
 8009d82:	016d      	lsls	r5, r5, #5
 8009d84:	f8d8 6000 	ldr.w	r6, [r8]
 8009d88:	1a2d      	subs	r5, r5, r0
 8009d8a:	42b5      	cmp	r5, r6
 8009d8c:	dd54      	ble.n	8009e38 <__gethex+0x228>
 8009d8e:	1bad      	subs	r5, r5, r6
 8009d90:	4629      	mov	r1, r5
 8009d92:	4620      	mov	r0, r4
 8009d94:	f001 f969 	bl	800b06a <__any_on>
 8009d98:	4681      	mov	r9, r0
 8009d9a:	b178      	cbz	r0, 8009dbc <__gethex+0x1ac>
 8009d9c:	1e6b      	subs	r3, r5, #1
 8009d9e:	1159      	asrs	r1, r3, #5
 8009da0:	f003 021f 	and.w	r2, r3, #31
 8009da4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009da8:	f04f 0901 	mov.w	r9, #1
 8009dac:	fa09 f202 	lsl.w	r2, r9, r2
 8009db0:	420a      	tst	r2, r1
 8009db2:	d003      	beq.n	8009dbc <__gethex+0x1ac>
 8009db4:	454b      	cmp	r3, r9
 8009db6:	dc36      	bgt.n	8009e26 <__gethex+0x216>
 8009db8:	f04f 0902 	mov.w	r9, #2
 8009dbc:	4629      	mov	r1, r5
 8009dbe:	4620      	mov	r0, r4
 8009dc0:	f7ff febe 	bl	8009b40 <rshift>
 8009dc4:	442f      	add	r7, r5
 8009dc6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009dca:	42bb      	cmp	r3, r7
 8009dcc:	da42      	bge.n	8009e54 <__gethex+0x244>
 8009dce:	9801      	ldr	r0, [sp, #4]
 8009dd0:	4621      	mov	r1, r4
 8009dd2:	f000 fcf9 	bl	800a7c8 <_Bfree>
 8009dd6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009dd8:	2300      	movs	r3, #0
 8009dda:	6013      	str	r3, [r2, #0]
 8009ddc:	25a3      	movs	r5, #163	@ 0xa3
 8009dde:	e793      	b.n	8009d08 <__gethex+0xf8>
 8009de0:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009de4:	2a2e      	cmp	r2, #46	@ 0x2e
 8009de6:	d012      	beq.n	8009e0e <__gethex+0x1fe>
 8009de8:	2b20      	cmp	r3, #32
 8009dea:	d104      	bne.n	8009df6 <__gethex+0x1e6>
 8009dec:	f845 bb04 	str.w	fp, [r5], #4
 8009df0:	f04f 0b00 	mov.w	fp, #0
 8009df4:	465b      	mov	r3, fp
 8009df6:	7830      	ldrb	r0, [r6, #0]
 8009df8:	9303      	str	r3, [sp, #12]
 8009dfa:	f7ff fef3 	bl	8009be4 <__hexdig_fun>
 8009dfe:	9b03      	ldr	r3, [sp, #12]
 8009e00:	f000 000f 	and.w	r0, r0, #15
 8009e04:	4098      	lsls	r0, r3
 8009e06:	ea4b 0b00 	orr.w	fp, fp, r0
 8009e0a:	3304      	adds	r3, #4
 8009e0c:	e7ae      	b.n	8009d6c <__gethex+0x15c>
 8009e0e:	45b1      	cmp	r9, r6
 8009e10:	d8ea      	bhi.n	8009de8 <__gethex+0x1d8>
 8009e12:	492b      	ldr	r1, [pc, #172]	@ (8009ec0 <__gethex+0x2b0>)
 8009e14:	9303      	str	r3, [sp, #12]
 8009e16:	2201      	movs	r2, #1
 8009e18:	4630      	mov	r0, r6
 8009e1a:	f7fe ffc1 	bl	8008da0 <strncmp>
 8009e1e:	9b03      	ldr	r3, [sp, #12]
 8009e20:	2800      	cmp	r0, #0
 8009e22:	d1e1      	bne.n	8009de8 <__gethex+0x1d8>
 8009e24:	e7a2      	b.n	8009d6c <__gethex+0x15c>
 8009e26:	1ea9      	subs	r1, r5, #2
 8009e28:	4620      	mov	r0, r4
 8009e2a:	f001 f91e 	bl	800b06a <__any_on>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	d0c2      	beq.n	8009db8 <__gethex+0x1a8>
 8009e32:	f04f 0903 	mov.w	r9, #3
 8009e36:	e7c1      	b.n	8009dbc <__gethex+0x1ac>
 8009e38:	da09      	bge.n	8009e4e <__gethex+0x23e>
 8009e3a:	1b75      	subs	r5, r6, r5
 8009e3c:	4621      	mov	r1, r4
 8009e3e:	9801      	ldr	r0, [sp, #4]
 8009e40:	462a      	mov	r2, r5
 8009e42:	f000 fed9 	bl	800abf8 <__lshift>
 8009e46:	1b7f      	subs	r7, r7, r5
 8009e48:	4604      	mov	r4, r0
 8009e4a:	f100 0a14 	add.w	sl, r0, #20
 8009e4e:	f04f 0900 	mov.w	r9, #0
 8009e52:	e7b8      	b.n	8009dc6 <__gethex+0x1b6>
 8009e54:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e58:	42bd      	cmp	r5, r7
 8009e5a:	dd6f      	ble.n	8009f3c <__gethex+0x32c>
 8009e5c:	1bed      	subs	r5, r5, r7
 8009e5e:	42ae      	cmp	r6, r5
 8009e60:	dc34      	bgt.n	8009ecc <__gethex+0x2bc>
 8009e62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e66:	2b02      	cmp	r3, #2
 8009e68:	d022      	beq.n	8009eb0 <__gethex+0x2a0>
 8009e6a:	2b03      	cmp	r3, #3
 8009e6c:	d024      	beq.n	8009eb8 <__gethex+0x2a8>
 8009e6e:	2b01      	cmp	r3, #1
 8009e70:	d115      	bne.n	8009e9e <__gethex+0x28e>
 8009e72:	42ae      	cmp	r6, r5
 8009e74:	d113      	bne.n	8009e9e <__gethex+0x28e>
 8009e76:	2e01      	cmp	r6, #1
 8009e78:	d10b      	bne.n	8009e92 <__gethex+0x282>
 8009e7a:	9a02      	ldr	r2, [sp, #8]
 8009e7c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009e80:	6013      	str	r3, [r2, #0]
 8009e82:	2301      	movs	r3, #1
 8009e84:	6123      	str	r3, [r4, #16]
 8009e86:	f8ca 3000 	str.w	r3, [sl]
 8009e8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009e8c:	2562      	movs	r5, #98	@ 0x62
 8009e8e:	601c      	str	r4, [r3, #0]
 8009e90:	e73a      	b.n	8009d08 <__gethex+0xf8>
 8009e92:	1e71      	subs	r1, r6, #1
 8009e94:	4620      	mov	r0, r4
 8009e96:	f001 f8e8 	bl	800b06a <__any_on>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	d1ed      	bne.n	8009e7a <__gethex+0x26a>
 8009e9e:	9801      	ldr	r0, [sp, #4]
 8009ea0:	4621      	mov	r1, r4
 8009ea2:	f000 fc91 	bl	800a7c8 <_Bfree>
 8009ea6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ea8:	2300      	movs	r3, #0
 8009eaa:	6013      	str	r3, [r2, #0]
 8009eac:	2550      	movs	r5, #80	@ 0x50
 8009eae:	e72b      	b.n	8009d08 <__gethex+0xf8>
 8009eb0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	d1f3      	bne.n	8009e9e <__gethex+0x28e>
 8009eb6:	e7e0      	b.n	8009e7a <__gethex+0x26a>
 8009eb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d1dd      	bne.n	8009e7a <__gethex+0x26a>
 8009ebe:	e7ee      	b.n	8009e9e <__gethex+0x28e>
 8009ec0:	08010bd9 	.word	0x08010bd9
 8009ec4:	08010db5 	.word	0x08010db5
 8009ec8:	08010dc6 	.word	0x08010dc6
 8009ecc:	1e6f      	subs	r7, r5, #1
 8009ece:	f1b9 0f00 	cmp.w	r9, #0
 8009ed2:	d130      	bne.n	8009f36 <__gethex+0x326>
 8009ed4:	b127      	cbz	r7, 8009ee0 <__gethex+0x2d0>
 8009ed6:	4639      	mov	r1, r7
 8009ed8:	4620      	mov	r0, r4
 8009eda:	f001 f8c6 	bl	800b06a <__any_on>
 8009ede:	4681      	mov	r9, r0
 8009ee0:	117a      	asrs	r2, r7, #5
 8009ee2:	2301      	movs	r3, #1
 8009ee4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009ee8:	f007 071f 	and.w	r7, r7, #31
 8009eec:	40bb      	lsls	r3, r7
 8009eee:	4213      	tst	r3, r2
 8009ef0:	4629      	mov	r1, r5
 8009ef2:	4620      	mov	r0, r4
 8009ef4:	bf18      	it	ne
 8009ef6:	f049 0902 	orrne.w	r9, r9, #2
 8009efa:	f7ff fe21 	bl	8009b40 <rshift>
 8009efe:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009f02:	1b76      	subs	r6, r6, r5
 8009f04:	2502      	movs	r5, #2
 8009f06:	f1b9 0f00 	cmp.w	r9, #0
 8009f0a:	d047      	beq.n	8009f9c <__gethex+0x38c>
 8009f0c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f10:	2b02      	cmp	r3, #2
 8009f12:	d015      	beq.n	8009f40 <__gethex+0x330>
 8009f14:	2b03      	cmp	r3, #3
 8009f16:	d017      	beq.n	8009f48 <__gethex+0x338>
 8009f18:	2b01      	cmp	r3, #1
 8009f1a:	d109      	bne.n	8009f30 <__gethex+0x320>
 8009f1c:	f019 0f02 	tst.w	r9, #2
 8009f20:	d006      	beq.n	8009f30 <__gethex+0x320>
 8009f22:	f8da 3000 	ldr.w	r3, [sl]
 8009f26:	ea49 0903 	orr.w	r9, r9, r3
 8009f2a:	f019 0f01 	tst.w	r9, #1
 8009f2e:	d10e      	bne.n	8009f4e <__gethex+0x33e>
 8009f30:	f045 0510 	orr.w	r5, r5, #16
 8009f34:	e032      	b.n	8009f9c <__gethex+0x38c>
 8009f36:	f04f 0901 	mov.w	r9, #1
 8009f3a:	e7d1      	b.n	8009ee0 <__gethex+0x2d0>
 8009f3c:	2501      	movs	r5, #1
 8009f3e:	e7e2      	b.n	8009f06 <__gethex+0x2f6>
 8009f40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f42:	f1c3 0301 	rsb	r3, r3, #1
 8009f46:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d0f0      	beq.n	8009f30 <__gethex+0x320>
 8009f4e:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f52:	f104 0314 	add.w	r3, r4, #20
 8009f56:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009f5a:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009f5e:	f04f 0c00 	mov.w	ip, #0
 8009f62:	4618      	mov	r0, r3
 8009f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f68:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009f6c:	d01b      	beq.n	8009fa6 <__gethex+0x396>
 8009f6e:	3201      	adds	r2, #1
 8009f70:	6002      	str	r2, [r0, #0]
 8009f72:	2d02      	cmp	r5, #2
 8009f74:	f104 0314 	add.w	r3, r4, #20
 8009f78:	d13c      	bne.n	8009ff4 <__gethex+0x3e4>
 8009f7a:	f8d8 2000 	ldr.w	r2, [r8]
 8009f7e:	3a01      	subs	r2, #1
 8009f80:	42b2      	cmp	r2, r6
 8009f82:	d109      	bne.n	8009f98 <__gethex+0x388>
 8009f84:	1171      	asrs	r1, r6, #5
 8009f86:	2201      	movs	r2, #1
 8009f88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009f8c:	f006 061f 	and.w	r6, r6, #31
 8009f90:	fa02 f606 	lsl.w	r6, r2, r6
 8009f94:	421e      	tst	r6, r3
 8009f96:	d13a      	bne.n	800a00e <__gethex+0x3fe>
 8009f98:	f045 0520 	orr.w	r5, r5, #32
 8009f9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009f9e:	601c      	str	r4, [r3, #0]
 8009fa0:	9b02      	ldr	r3, [sp, #8]
 8009fa2:	601f      	str	r7, [r3, #0]
 8009fa4:	e6b0      	b.n	8009d08 <__gethex+0xf8>
 8009fa6:	4299      	cmp	r1, r3
 8009fa8:	f843 cc04 	str.w	ip, [r3, #-4]
 8009fac:	d8d9      	bhi.n	8009f62 <__gethex+0x352>
 8009fae:	68a3      	ldr	r3, [r4, #8]
 8009fb0:	459b      	cmp	fp, r3
 8009fb2:	db17      	blt.n	8009fe4 <__gethex+0x3d4>
 8009fb4:	6861      	ldr	r1, [r4, #4]
 8009fb6:	9801      	ldr	r0, [sp, #4]
 8009fb8:	3101      	adds	r1, #1
 8009fba:	f000 fbc5 	bl	800a748 <_Balloc>
 8009fbe:	4681      	mov	r9, r0
 8009fc0:	b918      	cbnz	r0, 8009fca <__gethex+0x3ba>
 8009fc2:	4b1a      	ldr	r3, [pc, #104]	@ (800a02c <__gethex+0x41c>)
 8009fc4:	4602      	mov	r2, r0
 8009fc6:	2184      	movs	r1, #132	@ 0x84
 8009fc8:	e6c5      	b.n	8009d56 <__gethex+0x146>
 8009fca:	6922      	ldr	r2, [r4, #16]
 8009fcc:	3202      	adds	r2, #2
 8009fce:	f104 010c 	add.w	r1, r4, #12
 8009fd2:	0092      	lsls	r2, r2, #2
 8009fd4:	300c      	adds	r0, #12
 8009fd6:	f7fe ff48 	bl	8008e6a <memcpy>
 8009fda:	4621      	mov	r1, r4
 8009fdc:	9801      	ldr	r0, [sp, #4]
 8009fde:	f000 fbf3 	bl	800a7c8 <_Bfree>
 8009fe2:	464c      	mov	r4, r9
 8009fe4:	6923      	ldr	r3, [r4, #16]
 8009fe6:	1c5a      	adds	r2, r3, #1
 8009fe8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009fec:	6122      	str	r2, [r4, #16]
 8009fee:	2201      	movs	r2, #1
 8009ff0:	615a      	str	r2, [r3, #20]
 8009ff2:	e7be      	b.n	8009f72 <__gethex+0x362>
 8009ff4:	6922      	ldr	r2, [r4, #16]
 8009ff6:	455a      	cmp	r2, fp
 8009ff8:	dd0b      	ble.n	800a012 <__gethex+0x402>
 8009ffa:	2101      	movs	r1, #1
 8009ffc:	4620      	mov	r0, r4
 8009ffe:	f7ff fd9f 	bl	8009b40 <rshift>
 800a002:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a006:	3701      	adds	r7, #1
 800a008:	42bb      	cmp	r3, r7
 800a00a:	f6ff aee0 	blt.w	8009dce <__gethex+0x1be>
 800a00e:	2501      	movs	r5, #1
 800a010:	e7c2      	b.n	8009f98 <__gethex+0x388>
 800a012:	f016 061f 	ands.w	r6, r6, #31
 800a016:	d0fa      	beq.n	800a00e <__gethex+0x3fe>
 800a018:	4453      	add	r3, sl
 800a01a:	f1c6 0620 	rsb	r6, r6, #32
 800a01e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a022:	f000 fc83 	bl	800a92c <__hi0bits>
 800a026:	42b0      	cmp	r0, r6
 800a028:	dbe7      	blt.n	8009ffa <__gethex+0x3ea>
 800a02a:	e7f0      	b.n	800a00e <__gethex+0x3fe>
 800a02c:	08010db5 	.word	0x08010db5

0800a030 <L_shift>:
 800a030:	f1c2 0208 	rsb	r2, r2, #8
 800a034:	0092      	lsls	r2, r2, #2
 800a036:	b570      	push	{r4, r5, r6, lr}
 800a038:	f1c2 0620 	rsb	r6, r2, #32
 800a03c:	6843      	ldr	r3, [r0, #4]
 800a03e:	6804      	ldr	r4, [r0, #0]
 800a040:	fa03 f506 	lsl.w	r5, r3, r6
 800a044:	432c      	orrs	r4, r5
 800a046:	40d3      	lsrs	r3, r2
 800a048:	6004      	str	r4, [r0, #0]
 800a04a:	f840 3f04 	str.w	r3, [r0, #4]!
 800a04e:	4288      	cmp	r0, r1
 800a050:	d3f4      	bcc.n	800a03c <L_shift+0xc>
 800a052:	bd70      	pop	{r4, r5, r6, pc}

0800a054 <__match>:
 800a054:	b530      	push	{r4, r5, lr}
 800a056:	6803      	ldr	r3, [r0, #0]
 800a058:	3301      	adds	r3, #1
 800a05a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a05e:	b914      	cbnz	r4, 800a066 <__match+0x12>
 800a060:	6003      	str	r3, [r0, #0]
 800a062:	2001      	movs	r0, #1
 800a064:	bd30      	pop	{r4, r5, pc}
 800a066:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a06a:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a06e:	2d19      	cmp	r5, #25
 800a070:	bf98      	it	ls
 800a072:	3220      	addls	r2, #32
 800a074:	42a2      	cmp	r2, r4
 800a076:	d0f0      	beq.n	800a05a <__match+0x6>
 800a078:	2000      	movs	r0, #0
 800a07a:	e7f3      	b.n	800a064 <__match+0x10>

0800a07c <__hexnan>:
 800a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a080:	680b      	ldr	r3, [r1, #0]
 800a082:	6801      	ldr	r1, [r0, #0]
 800a084:	115e      	asrs	r6, r3, #5
 800a086:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a08a:	f013 031f 	ands.w	r3, r3, #31
 800a08e:	b087      	sub	sp, #28
 800a090:	bf18      	it	ne
 800a092:	3604      	addne	r6, #4
 800a094:	2500      	movs	r5, #0
 800a096:	1f37      	subs	r7, r6, #4
 800a098:	4682      	mov	sl, r0
 800a09a:	4690      	mov	r8, r2
 800a09c:	9301      	str	r3, [sp, #4]
 800a09e:	f846 5c04 	str.w	r5, [r6, #-4]
 800a0a2:	46b9      	mov	r9, r7
 800a0a4:	463c      	mov	r4, r7
 800a0a6:	9502      	str	r5, [sp, #8]
 800a0a8:	46ab      	mov	fp, r5
 800a0aa:	784a      	ldrb	r2, [r1, #1]
 800a0ac:	1c4b      	adds	r3, r1, #1
 800a0ae:	9303      	str	r3, [sp, #12]
 800a0b0:	b342      	cbz	r2, 800a104 <__hexnan+0x88>
 800a0b2:	4610      	mov	r0, r2
 800a0b4:	9105      	str	r1, [sp, #20]
 800a0b6:	9204      	str	r2, [sp, #16]
 800a0b8:	f7ff fd94 	bl	8009be4 <__hexdig_fun>
 800a0bc:	2800      	cmp	r0, #0
 800a0be:	d151      	bne.n	800a164 <__hexnan+0xe8>
 800a0c0:	9a04      	ldr	r2, [sp, #16]
 800a0c2:	9905      	ldr	r1, [sp, #20]
 800a0c4:	2a20      	cmp	r2, #32
 800a0c6:	d818      	bhi.n	800a0fa <__hexnan+0x7e>
 800a0c8:	9b02      	ldr	r3, [sp, #8]
 800a0ca:	459b      	cmp	fp, r3
 800a0cc:	dd13      	ble.n	800a0f6 <__hexnan+0x7a>
 800a0ce:	454c      	cmp	r4, r9
 800a0d0:	d206      	bcs.n	800a0e0 <__hexnan+0x64>
 800a0d2:	2d07      	cmp	r5, #7
 800a0d4:	dc04      	bgt.n	800a0e0 <__hexnan+0x64>
 800a0d6:	462a      	mov	r2, r5
 800a0d8:	4649      	mov	r1, r9
 800a0da:	4620      	mov	r0, r4
 800a0dc:	f7ff ffa8 	bl	800a030 <L_shift>
 800a0e0:	4544      	cmp	r4, r8
 800a0e2:	d952      	bls.n	800a18a <__hexnan+0x10e>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f1a4 0904 	sub.w	r9, r4, #4
 800a0ea:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0ee:	f8cd b008 	str.w	fp, [sp, #8]
 800a0f2:	464c      	mov	r4, r9
 800a0f4:	461d      	mov	r5, r3
 800a0f6:	9903      	ldr	r1, [sp, #12]
 800a0f8:	e7d7      	b.n	800a0aa <__hexnan+0x2e>
 800a0fa:	2a29      	cmp	r2, #41	@ 0x29
 800a0fc:	d157      	bne.n	800a1ae <__hexnan+0x132>
 800a0fe:	3102      	adds	r1, #2
 800a100:	f8ca 1000 	str.w	r1, [sl]
 800a104:	f1bb 0f00 	cmp.w	fp, #0
 800a108:	d051      	beq.n	800a1ae <__hexnan+0x132>
 800a10a:	454c      	cmp	r4, r9
 800a10c:	d206      	bcs.n	800a11c <__hexnan+0xa0>
 800a10e:	2d07      	cmp	r5, #7
 800a110:	dc04      	bgt.n	800a11c <__hexnan+0xa0>
 800a112:	462a      	mov	r2, r5
 800a114:	4649      	mov	r1, r9
 800a116:	4620      	mov	r0, r4
 800a118:	f7ff ff8a 	bl	800a030 <L_shift>
 800a11c:	4544      	cmp	r4, r8
 800a11e:	d936      	bls.n	800a18e <__hexnan+0x112>
 800a120:	f1a8 0204 	sub.w	r2, r8, #4
 800a124:	4623      	mov	r3, r4
 800a126:	f853 1b04 	ldr.w	r1, [r3], #4
 800a12a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a12e:	429f      	cmp	r7, r3
 800a130:	d2f9      	bcs.n	800a126 <__hexnan+0xaa>
 800a132:	1b3b      	subs	r3, r7, r4
 800a134:	f023 0303 	bic.w	r3, r3, #3
 800a138:	3304      	adds	r3, #4
 800a13a:	3401      	adds	r4, #1
 800a13c:	3e03      	subs	r6, #3
 800a13e:	42b4      	cmp	r4, r6
 800a140:	bf88      	it	hi
 800a142:	2304      	movhi	r3, #4
 800a144:	4443      	add	r3, r8
 800a146:	2200      	movs	r2, #0
 800a148:	f843 2b04 	str.w	r2, [r3], #4
 800a14c:	429f      	cmp	r7, r3
 800a14e:	d2fb      	bcs.n	800a148 <__hexnan+0xcc>
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	b91b      	cbnz	r3, 800a15c <__hexnan+0xe0>
 800a154:	4547      	cmp	r7, r8
 800a156:	d128      	bne.n	800a1aa <__hexnan+0x12e>
 800a158:	2301      	movs	r3, #1
 800a15a:	603b      	str	r3, [r7, #0]
 800a15c:	2005      	movs	r0, #5
 800a15e:	b007      	add	sp, #28
 800a160:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a164:	3501      	adds	r5, #1
 800a166:	2d08      	cmp	r5, #8
 800a168:	f10b 0b01 	add.w	fp, fp, #1
 800a16c:	dd06      	ble.n	800a17c <__hexnan+0x100>
 800a16e:	4544      	cmp	r4, r8
 800a170:	d9c1      	bls.n	800a0f6 <__hexnan+0x7a>
 800a172:	2300      	movs	r3, #0
 800a174:	f844 3c04 	str.w	r3, [r4, #-4]
 800a178:	2501      	movs	r5, #1
 800a17a:	3c04      	subs	r4, #4
 800a17c:	6822      	ldr	r2, [r4, #0]
 800a17e:	f000 000f 	and.w	r0, r0, #15
 800a182:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a186:	6020      	str	r0, [r4, #0]
 800a188:	e7b5      	b.n	800a0f6 <__hexnan+0x7a>
 800a18a:	2508      	movs	r5, #8
 800a18c:	e7b3      	b.n	800a0f6 <__hexnan+0x7a>
 800a18e:	9b01      	ldr	r3, [sp, #4]
 800a190:	2b00      	cmp	r3, #0
 800a192:	d0dd      	beq.n	800a150 <__hexnan+0xd4>
 800a194:	f1c3 0320 	rsb	r3, r3, #32
 800a198:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a19c:	40da      	lsrs	r2, r3
 800a19e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a1a2:	4013      	ands	r3, r2
 800a1a4:	f846 3c04 	str.w	r3, [r6, #-4]
 800a1a8:	e7d2      	b.n	800a150 <__hexnan+0xd4>
 800a1aa:	3f04      	subs	r7, #4
 800a1ac:	e7d0      	b.n	800a150 <__hexnan+0xd4>
 800a1ae:	2004      	movs	r0, #4
 800a1b0:	e7d5      	b.n	800a15e <__hexnan+0xe2>

0800a1b2 <__ssputs_r>:
 800a1b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1b6:	688e      	ldr	r6, [r1, #8]
 800a1b8:	461f      	mov	r7, r3
 800a1ba:	42be      	cmp	r6, r7
 800a1bc:	680b      	ldr	r3, [r1, #0]
 800a1be:	4682      	mov	sl, r0
 800a1c0:	460c      	mov	r4, r1
 800a1c2:	4690      	mov	r8, r2
 800a1c4:	d82d      	bhi.n	800a222 <__ssputs_r+0x70>
 800a1c6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1ca:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a1ce:	d026      	beq.n	800a21e <__ssputs_r+0x6c>
 800a1d0:	6965      	ldr	r5, [r4, #20]
 800a1d2:	6909      	ldr	r1, [r1, #16]
 800a1d4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a1d8:	eba3 0901 	sub.w	r9, r3, r1
 800a1dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a1e0:	1c7b      	adds	r3, r7, #1
 800a1e2:	444b      	add	r3, r9
 800a1e4:	106d      	asrs	r5, r5, #1
 800a1e6:	429d      	cmp	r5, r3
 800a1e8:	bf38      	it	cc
 800a1ea:	461d      	movcc	r5, r3
 800a1ec:	0553      	lsls	r3, r2, #21
 800a1ee:	d527      	bpl.n	800a240 <__ssputs_r+0x8e>
 800a1f0:	4629      	mov	r1, r5
 800a1f2:	f000 f95f 	bl	800a4b4 <_malloc_r>
 800a1f6:	4606      	mov	r6, r0
 800a1f8:	b360      	cbz	r0, 800a254 <__ssputs_r+0xa2>
 800a1fa:	6921      	ldr	r1, [r4, #16]
 800a1fc:	464a      	mov	r2, r9
 800a1fe:	f7fe fe34 	bl	8008e6a <memcpy>
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a208:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a20c:	81a3      	strh	r3, [r4, #12]
 800a20e:	6126      	str	r6, [r4, #16]
 800a210:	6165      	str	r5, [r4, #20]
 800a212:	444e      	add	r6, r9
 800a214:	eba5 0509 	sub.w	r5, r5, r9
 800a218:	6026      	str	r6, [r4, #0]
 800a21a:	60a5      	str	r5, [r4, #8]
 800a21c:	463e      	mov	r6, r7
 800a21e:	42be      	cmp	r6, r7
 800a220:	d900      	bls.n	800a224 <__ssputs_r+0x72>
 800a222:	463e      	mov	r6, r7
 800a224:	6820      	ldr	r0, [r4, #0]
 800a226:	4632      	mov	r2, r6
 800a228:	4641      	mov	r1, r8
 800a22a:	f7fe fdcb 	bl	8008dc4 <memmove>
 800a22e:	68a3      	ldr	r3, [r4, #8]
 800a230:	1b9b      	subs	r3, r3, r6
 800a232:	60a3      	str	r3, [r4, #8]
 800a234:	6823      	ldr	r3, [r4, #0]
 800a236:	4433      	add	r3, r6
 800a238:	6023      	str	r3, [r4, #0]
 800a23a:	2000      	movs	r0, #0
 800a23c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a240:	462a      	mov	r2, r5
 800a242:	f000 ff76 	bl	800b132 <_realloc_r>
 800a246:	4606      	mov	r6, r0
 800a248:	2800      	cmp	r0, #0
 800a24a:	d1e0      	bne.n	800a20e <__ssputs_r+0x5c>
 800a24c:	6921      	ldr	r1, [r4, #16]
 800a24e:	4650      	mov	r0, sl
 800a250:	f001 f832 	bl	800b2b8 <_free_r>
 800a254:	230c      	movs	r3, #12
 800a256:	f8ca 3000 	str.w	r3, [sl]
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a260:	81a3      	strh	r3, [r4, #12]
 800a262:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a266:	e7e9      	b.n	800a23c <__ssputs_r+0x8a>

0800a268 <_svfiprintf_r>:
 800a268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a26c:	4698      	mov	r8, r3
 800a26e:	898b      	ldrh	r3, [r1, #12]
 800a270:	061b      	lsls	r3, r3, #24
 800a272:	b09d      	sub	sp, #116	@ 0x74
 800a274:	4607      	mov	r7, r0
 800a276:	460d      	mov	r5, r1
 800a278:	4614      	mov	r4, r2
 800a27a:	d510      	bpl.n	800a29e <_svfiprintf_r+0x36>
 800a27c:	690b      	ldr	r3, [r1, #16]
 800a27e:	b973      	cbnz	r3, 800a29e <_svfiprintf_r+0x36>
 800a280:	2140      	movs	r1, #64	@ 0x40
 800a282:	f000 f917 	bl	800a4b4 <_malloc_r>
 800a286:	6028      	str	r0, [r5, #0]
 800a288:	6128      	str	r0, [r5, #16]
 800a28a:	b930      	cbnz	r0, 800a29a <_svfiprintf_r+0x32>
 800a28c:	230c      	movs	r3, #12
 800a28e:	603b      	str	r3, [r7, #0]
 800a290:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a294:	b01d      	add	sp, #116	@ 0x74
 800a296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a29a:	2340      	movs	r3, #64	@ 0x40
 800a29c:	616b      	str	r3, [r5, #20]
 800a29e:	2300      	movs	r3, #0
 800a2a0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a2a2:	2320      	movs	r3, #32
 800a2a4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a2a8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a2ac:	2330      	movs	r3, #48	@ 0x30
 800a2ae:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a44c <_svfiprintf_r+0x1e4>
 800a2b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a2b6:	f04f 0901 	mov.w	r9, #1
 800a2ba:	4623      	mov	r3, r4
 800a2bc:	469a      	mov	sl, r3
 800a2be:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a2c2:	b10a      	cbz	r2, 800a2c8 <_svfiprintf_r+0x60>
 800a2c4:	2a25      	cmp	r2, #37	@ 0x25
 800a2c6:	d1f9      	bne.n	800a2bc <_svfiprintf_r+0x54>
 800a2c8:	ebba 0b04 	subs.w	fp, sl, r4
 800a2cc:	d00b      	beq.n	800a2e6 <_svfiprintf_r+0x7e>
 800a2ce:	465b      	mov	r3, fp
 800a2d0:	4622      	mov	r2, r4
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	4638      	mov	r0, r7
 800a2d6:	f7ff ff6c 	bl	800a1b2 <__ssputs_r>
 800a2da:	3001      	adds	r0, #1
 800a2dc:	f000 80a7 	beq.w	800a42e <_svfiprintf_r+0x1c6>
 800a2e0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a2e2:	445a      	add	r2, fp
 800a2e4:	9209      	str	r2, [sp, #36]	@ 0x24
 800a2e6:	f89a 3000 	ldrb.w	r3, [sl]
 800a2ea:	2b00      	cmp	r3, #0
 800a2ec:	f000 809f 	beq.w	800a42e <_svfiprintf_r+0x1c6>
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a2f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a2fa:	f10a 0a01 	add.w	sl, sl, #1
 800a2fe:	9304      	str	r3, [sp, #16]
 800a300:	9307      	str	r3, [sp, #28]
 800a302:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a306:	931a      	str	r3, [sp, #104]	@ 0x68
 800a308:	4654      	mov	r4, sl
 800a30a:	2205      	movs	r2, #5
 800a30c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a310:	484e      	ldr	r0, [pc, #312]	@ (800a44c <_svfiprintf_r+0x1e4>)
 800a312:	f7f5 ff5d 	bl	80001d0 <memchr>
 800a316:	9a04      	ldr	r2, [sp, #16]
 800a318:	b9d8      	cbnz	r0, 800a352 <_svfiprintf_r+0xea>
 800a31a:	06d0      	lsls	r0, r2, #27
 800a31c:	bf44      	itt	mi
 800a31e:	2320      	movmi	r3, #32
 800a320:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a324:	0711      	lsls	r1, r2, #28
 800a326:	bf44      	itt	mi
 800a328:	232b      	movmi	r3, #43	@ 0x2b
 800a32a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a32e:	f89a 3000 	ldrb.w	r3, [sl]
 800a332:	2b2a      	cmp	r3, #42	@ 0x2a
 800a334:	d015      	beq.n	800a362 <_svfiprintf_r+0xfa>
 800a336:	9a07      	ldr	r2, [sp, #28]
 800a338:	4654      	mov	r4, sl
 800a33a:	2000      	movs	r0, #0
 800a33c:	f04f 0c0a 	mov.w	ip, #10
 800a340:	4621      	mov	r1, r4
 800a342:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a346:	3b30      	subs	r3, #48	@ 0x30
 800a348:	2b09      	cmp	r3, #9
 800a34a:	d94b      	bls.n	800a3e4 <_svfiprintf_r+0x17c>
 800a34c:	b1b0      	cbz	r0, 800a37c <_svfiprintf_r+0x114>
 800a34e:	9207      	str	r2, [sp, #28]
 800a350:	e014      	b.n	800a37c <_svfiprintf_r+0x114>
 800a352:	eba0 0308 	sub.w	r3, r0, r8
 800a356:	fa09 f303 	lsl.w	r3, r9, r3
 800a35a:	4313      	orrs	r3, r2
 800a35c:	9304      	str	r3, [sp, #16]
 800a35e:	46a2      	mov	sl, r4
 800a360:	e7d2      	b.n	800a308 <_svfiprintf_r+0xa0>
 800a362:	9b03      	ldr	r3, [sp, #12]
 800a364:	1d19      	adds	r1, r3, #4
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	9103      	str	r1, [sp, #12]
 800a36a:	2b00      	cmp	r3, #0
 800a36c:	bfbb      	ittet	lt
 800a36e:	425b      	neglt	r3, r3
 800a370:	f042 0202 	orrlt.w	r2, r2, #2
 800a374:	9307      	strge	r3, [sp, #28]
 800a376:	9307      	strlt	r3, [sp, #28]
 800a378:	bfb8      	it	lt
 800a37a:	9204      	strlt	r2, [sp, #16]
 800a37c:	7823      	ldrb	r3, [r4, #0]
 800a37e:	2b2e      	cmp	r3, #46	@ 0x2e
 800a380:	d10a      	bne.n	800a398 <_svfiprintf_r+0x130>
 800a382:	7863      	ldrb	r3, [r4, #1]
 800a384:	2b2a      	cmp	r3, #42	@ 0x2a
 800a386:	d132      	bne.n	800a3ee <_svfiprintf_r+0x186>
 800a388:	9b03      	ldr	r3, [sp, #12]
 800a38a:	1d1a      	adds	r2, r3, #4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	9203      	str	r2, [sp, #12]
 800a390:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a394:	3402      	adds	r4, #2
 800a396:	9305      	str	r3, [sp, #20]
 800a398:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a45c <_svfiprintf_r+0x1f4>
 800a39c:	7821      	ldrb	r1, [r4, #0]
 800a39e:	2203      	movs	r2, #3
 800a3a0:	4650      	mov	r0, sl
 800a3a2:	f7f5 ff15 	bl	80001d0 <memchr>
 800a3a6:	b138      	cbz	r0, 800a3b8 <_svfiprintf_r+0x150>
 800a3a8:	9b04      	ldr	r3, [sp, #16]
 800a3aa:	eba0 000a 	sub.w	r0, r0, sl
 800a3ae:	2240      	movs	r2, #64	@ 0x40
 800a3b0:	4082      	lsls	r2, r0
 800a3b2:	4313      	orrs	r3, r2
 800a3b4:	3401      	adds	r4, #1
 800a3b6:	9304      	str	r3, [sp, #16]
 800a3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3bc:	4824      	ldr	r0, [pc, #144]	@ (800a450 <_svfiprintf_r+0x1e8>)
 800a3be:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a3c2:	2206      	movs	r2, #6
 800a3c4:	f7f5 ff04 	bl	80001d0 <memchr>
 800a3c8:	2800      	cmp	r0, #0
 800a3ca:	d036      	beq.n	800a43a <_svfiprintf_r+0x1d2>
 800a3cc:	4b21      	ldr	r3, [pc, #132]	@ (800a454 <_svfiprintf_r+0x1ec>)
 800a3ce:	bb1b      	cbnz	r3, 800a418 <_svfiprintf_r+0x1b0>
 800a3d0:	9b03      	ldr	r3, [sp, #12]
 800a3d2:	3307      	adds	r3, #7
 800a3d4:	f023 0307 	bic.w	r3, r3, #7
 800a3d8:	3308      	adds	r3, #8
 800a3da:	9303      	str	r3, [sp, #12]
 800a3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a3de:	4433      	add	r3, r6
 800a3e0:	9309      	str	r3, [sp, #36]	@ 0x24
 800a3e2:	e76a      	b.n	800a2ba <_svfiprintf_r+0x52>
 800a3e4:	fb0c 3202 	mla	r2, ip, r2, r3
 800a3e8:	460c      	mov	r4, r1
 800a3ea:	2001      	movs	r0, #1
 800a3ec:	e7a8      	b.n	800a340 <_svfiprintf_r+0xd8>
 800a3ee:	2300      	movs	r3, #0
 800a3f0:	3401      	adds	r4, #1
 800a3f2:	9305      	str	r3, [sp, #20]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f04f 0c0a 	mov.w	ip, #10
 800a3fa:	4620      	mov	r0, r4
 800a3fc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a400:	3a30      	subs	r2, #48	@ 0x30
 800a402:	2a09      	cmp	r2, #9
 800a404:	d903      	bls.n	800a40e <_svfiprintf_r+0x1a6>
 800a406:	2b00      	cmp	r3, #0
 800a408:	d0c6      	beq.n	800a398 <_svfiprintf_r+0x130>
 800a40a:	9105      	str	r1, [sp, #20]
 800a40c:	e7c4      	b.n	800a398 <_svfiprintf_r+0x130>
 800a40e:	fb0c 2101 	mla	r1, ip, r1, r2
 800a412:	4604      	mov	r4, r0
 800a414:	2301      	movs	r3, #1
 800a416:	e7f0      	b.n	800a3fa <_svfiprintf_r+0x192>
 800a418:	ab03      	add	r3, sp, #12
 800a41a:	9300      	str	r3, [sp, #0]
 800a41c:	462a      	mov	r2, r5
 800a41e:	4b0e      	ldr	r3, [pc, #56]	@ (800a458 <_svfiprintf_r+0x1f0>)
 800a420:	a904      	add	r1, sp, #16
 800a422:	4638      	mov	r0, r7
 800a424:	f7fc ff56 	bl	80072d4 <_printf_float>
 800a428:	1c42      	adds	r2, r0, #1
 800a42a:	4606      	mov	r6, r0
 800a42c:	d1d6      	bne.n	800a3dc <_svfiprintf_r+0x174>
 800a42e:	89ab      	ldrh	r3, [r5, #12]
 800a430:	065b      	lsls	r3, r3, #25
 800a432:	f53f af2d 	bmi.w	800a290 <_svfiprintf_r+0x28>
 800a436:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a438:	e72c      	b.n	800a294 <_svfiprintf_r+0x2c>
 800a43a:	ab03      	add	r3, sp, #12
 800a43c:	9300      	str	r3, [sp, #0]
 800a43e:	462a      	mov	r2, r5
 800a440:	4b05      	ldr	r3, [pc, #20]	@ (800a458 <_svfiprintf_r+0x1f0>)
 800a442:	a904      	add	r1, sp, #16
 800a444:	4638      	mov	r0, r7
 800a446:	f7fd f9dd 	bl	8007804 <_printf_i>
 800a44a:	e7ed      	b.n	800a428 <_svfiprintf_r+0x1c0>
 800a44c:	08010e26 	.word	0x08010e26
 800a450:	08010e30 	.word	0x08010e30
 800a454:	080072d5 	.word	0x080072d5
 800a458:	0800a1b3 	.word	0x0800a1b3
 800a45c:	08010e2c 	.word	0x08010e2c

0800a460 <malloc>:
 800a460:	4b02      	ldr	r3, [pc, #8]	@ (800a46c <malloc+0xc>)
 800a462:	4601      	mov	r1, r0
 800a464:	6818      	ldr	r0, [r3, #0]
 800a466:	f000 b825 	b.w	800a4b4 <_malloc_r>
 800a46a:	bf00      	nop
 800a46c:	20000184 	.word	0x20000184

0800a470 <sbrk_aligned>:
 800a470:	b570      	push	{r4, r5, r6, lr}
 800a472:	4e0f      	ldr	r6, [pc, #60]	@ (800a4b0 <sbrk_aligned+0x40>)
 800a474:	460c      	mov	r4, r1
 800a476:	6831      	ldr	r1, [r6, #0]
 800a478:	4605      	mov	r5, r0
 800a47a:	b911      	cbnz	r1, 800a482 <sbrk_aligned+0x12>
 800a47c:	f000 fec8 	bl	800b210 <_sbrk_r>
 800a480:	6030      	str	r0, [r6, #0]
 800a482:	4621      	mov	r1, r4
 800a484:	4628      	mov	r0, r5
 800a486:	f000 fec3 	bl	800b210 <_sbrk_r>
 800a48a:	1c43      	adds	r3, r0, #1
 800a48c:	d103      	bne.n	800a496 <sbrk_aligned+0x26>
 800a48e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a492:	4620      	mov	r0, r4
 800a494:	bd70      	pop	{r4, r5, r6, pc}
 800a496:	1cc4      	adds	r4, r0, #3
 800a498:	f024 0403 	bic.w	r4, r4, #3
 800a49c:	42a0      	cmp	r0, r4
 800a49e:	d0f8      	beq.n	800a492 <sbrk_aligned+0x22>
 800a4a0:	1a21      	subs	r1, r4, r0
 800a4a2:	4628      	mov	r0, r5
 800a4a4:	f000 feb4 	bl	800b210 <_sbrk_r>
 800a4a8:	3001      	adds	r0, #1
 800a4aa:	d1f2      	bne.n	800a492 <sbrk_aligned+0x22>
 800a4ac:	e7ef      	b.n	800a48e <sbrk_aligned+0x1e>
 800a4ae:	bf00      	nop
 800a4b0:	200009b4 	.word	0x200009b4

0800a4b4 <_malloc_r>:
 800a4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a4b8:	1ccd      	adds	r5, r1, #3
 800a4ba:	f025 0503 	bic.w	r5, r5, #3
 800a4be:	3508      	adds	r5, #8
 800a4c0:	2d0c      	cmp	r5, #12
 800a4c2:	bf38      	it	cc
 800a4c4:	250c      	movcc	r5, #12
 800a4c6:	2d00      	cmp	r5, #0
 800a4c8:	4606      	mov	r6, r0
 800a4ca:	db01      	blt.n	800a4d0 <_malloc_r+0x1c>
 800a4cc:	42a9      	cmp	r1, r5
 800a4ce:	d904      	bls.n	800a4da <_malloc_r+0x26>
 800a4d0:	230c      	movs	r3, #12
 800a4d2:	6033      	str	r3, [r6, #0]
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a5b0 <_malloc_r+0xfc>
 800a4de:	f000 f927 	bl	800a730 <__malloc_lock>
 800a4e2:	f8d8 3000 	ldr.w	r3, [r8]
 800a4e6:	461c      	mov	r4, r3
 800a4e8:	bb44      	cbnz	r4, 800a53c <_malloc_r+0x88>
 800a4ea:	4629      	mov	r1, r5
 800a4ec:	4630      	mov	r0, r6
 800a4ee:	f7ff ffbf 	bl	800a470 <sbrk_aligned>
 800a4f2:	1c43      	adds	r3, r0, #1
 800a4f4:	4604      	mov	r4, r0
 800a4f6:	d158      	bne.n	800a5aa <_malloc_r+0xf6>
 800a4f8:	f8d8 4000 	ldr.w	r4, [r8]
 800a4fc:	4627      	mov	r7, r4
 800a4fe:	2f00      	cmp	r7, #0
 800a500:	d143      	bne.n	800a58a <_malloc_r+0xd6>
 800a502:	2c00      	cmp	r4, #0
 800a504:	d04b      	beq.n	800a59e <_malloc_r+0xea>
 800a506:	6823      	ldr	r3, [r4, #0]
 800a508:	4639      	mov	r1, r7
 800a50a:	4630      	mov	r0, r6
 800a50c:	eb04 0903 	add.w	r9, r4, r3
 800a510:	f000 fe7e 	bl	800b210 <_sbrk_r>
 800a514:	4581      	cmp	r9, r0
 800a516:	d142      	bne.n	800a59e <_malloc_r+0xea>
 800a518:	6821      	ldr	r1, [r4, #0]
 800a51a:	1a6d      	subs	r5, r5, r1
 800a51c:	4629      	mov	r1, r5
 800a51e:	4630      	mov	r0, r6
 800a520:	f7ff ffa6 	bl	800a470 <sbrk_aligned>
 800a524:	3001      	adds	r0, #1
 800a526:	d03a      	beq.n	800a59e <_malloc_r+0xea>
 800a528:	6823      	ldr	r3, [r4, #0]
 800a52a:	442b      	add	r3, r5
 800a52c:	6023      	str	r3, [r4, #0]
 800a52e:	f8d8 3000 	ldr.w	r3, [r8]
 800a532:	685a      	ldr	r2, [r3, #4]
 800a534:	bb62      	cbnz	r2, 800a590 <_malloc_r+0xdc>
 800a536:	f8c8 7000 	str.w	r7, [r8]
 800a53a:	e00f      	b.n	800a55c <_malloc_r+0xa8>
 800a53c:	6822      	ldr	r2, [r4, #0]
 800a53e:	1b52      	subs	r2, r2, r5
 800a540:	d420      	bmi.n	800a584 <_malloc_r+0xd0>
 800a542:	2a0b      	cmp	r2, #11
 800a544:	d917      	bls.n	800a576 <_malloc_r+0xc2>
 800a546:	1961      	adds	r1, r4, r5
 800a548:	42a3      	cmp	r3, r4
 800a54a:	6025      	str	r5, [r4, #0]
 800a54c:	bf18      	it	ne
 800a54e:	6059      	strne	r1, [r3, #4]
 800a550:	6863      	ldr	r3, [r4, #4]
 800a552:	bf08      	it	eq
 800a554:	f8c8 1000 	streq.w	r1, [r8]
 800a558:	5162      	str	r2, [r4, r5]
 800a55a:	604b      	str	r3, [r1, #4]
 800a55c:	4630      	mov	r0, r6
 800a55e:	f000 f8ed 	bl	800a73c <__malloc_unlock>
 800a562:	f104 000b 	add.w	r0, r4, #11
 800a566:	1d23      	adds	r3, r4, #4
 800a568:	f020 0007 	bic.w	r0, r0, #7
 800a56c:	1ac2      	subs	r2, r0, r3
 800a56e:	bf1c      	itt	ne
 800a570:	1a1b      	subne	r3, r3, r0
 800a572:	50a3      	strne	r3, [r4, r2]
 800a574:	e7af      	b.n	800a4d6 <_malloc_r+0x22>
 800a576:	6862      	ldr	r2, [r4, #4]
 800a578:	42a3      	cmp	r3, r4
 800a57a:	bf0c      	ite	eq
 800a57c:	f8c8 2000 	streq.w	r2, [r8]
 800a580:	605a      	strne	r2, [r3, #4]
 800a582:	e7eb      	b.n	800a55c <_malloc_r+0xa8>
 800a584:	4623      	mov	r3, r4
 800a586:	6864      	ldr	r4, [r4, #4]
 800a588:	e7ae      	b.n	800a4e8 <_malloc_r+0x34>
 800a58a:	463c      	mov	r4, r7
 800a58c:	687f      	ldr	r7, [r7, #4]
 800a58e:	e7b6      	b.n	800a4fe <_malloc_r+0x4a>
 800a590:	461a      	mov	r2, r3
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	42a3      	cmp	r3, r4
 800a596:	d1fb      	bne.n	800a590 <_malloc_r+0xdc>
 800a598:	2300      	movs	r3, #0
 800a59a:	6053      	str	r3, [r2, #4]
 800a59c:	e7de      	b.n	800a55c <_malloc_r+0xa8>
 800a59e:	230c      	movs	r3, #12
 800a5a0:	6033      	str	r3, [r6, #0]
 800a5a2:	4630      	mov	r0, r6
 800a5a4:	f000 f8ca 	bl	800a73c <__malloc_unlock>
 800a5a8:	e794      	b.n	800a4d4 <_malloc_r+0x20>
 800a5aa:	6005      	str	r5, [r0, #0]
 800a5ac:	e7d6      	b.n	800a55c <_malloc_r+0xa8>
 800a5ae:	bf00      	nop
 800a5b0:	200009b8 	.word	0x200009b8

0800a5b4 <__ascii_mbtowc>:
 800a5b4:	b082      	sub	sp, #8
 800a5b6:	b901      	cbnz	r1, 800a5ba <__ascii_mbtowc+0x6>
 800a5b8:	a901      	add	r1, sp, #4
 800a5ba:	b142      	cbz	r2, 800a5ce <__ascii_mbtowc+0x1a>
 800a5bc:	b14b      	cbz	r3, 800a5d2 <__ascii_mbtowc+0x1e>
 800a5be:	7813      	ldrb	r3, [r2, #0]
 800a5c0:	600b      	str	r3, [r1, #0]
 800a5c2:	7812      	ldrb	r2, [r2, #0]
 800a5c4:	1e10      	subs	r0, r2, #0
 800a5c6:	bf18      	it	ne
 800a5c8:	2001      	movne	r0, #1
 800a5ca:	b002      	add	sp, #8
 800a5cc:	4770      	bx	lr
 800a5ce:	4610      	mov	r0, r2
 800a5d0:	e7fb      	b.n	800a5ca <__ascii_mbtowc+0x16>
 800a5d2:	f06f 0001 	mvn.w	r0, #1
 800a5d6:	e7f8      	b.n	800a5ca <__ascii_mbtowc+0x16>

0800a5d8 <__sflush_r>:
 800a5d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5e0:	0716      	lsls	r6, r2, #28
 800a5e2:	4605      	mov	r5, r0
 800a5e4:	460c      	mov	r4, r1
 800a5e6:	d454      	bmi.n	800a692 <__sflush_r+0xba>
 800a5e8:	684b      	ldr	r3, [r1, #4]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	dc02      	bgt.n	800a5f4 <__sflush_r+0x1c>
 800a5ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	dd48      	ble.n	800a686 <__sflush_r+0xae>
 800a5f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5f6:	2e00      	cmp	r6, #0
 800a5f8:	d045      	beq.n	800a686 <__sflush_r+0xae>
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a600:	682f      	ldr	r7, [r5, #0]
 800a602:	6a21      	ldr	r1, [r4, #32]
 800a604:	602b      	str	r3, [r5, #0]
 800a606:	d030      	beq.n	800a66a <__sflush_r+0x92>
 800a608:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a60a:	89a3      	ldrh	r3, [r4, #12]
 800a60c:	0759      	lsls	r1, r3, #29
 800a60e:	d505      	bpl.n	800a61c <__sflush_r+0x44>
 800a610:	6863      	ldr	r3, [r4, #4]
 800a612:	1ad2      	subs	r2, r2, r3
 800a614:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a616:	b10b      	cbz	r3, 800a61c <__sflush_r+0x44>
 800a618:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a61a:	1ad2      	subs	r2, r2, r3
 800a61c:	2300      	movs	r3, #0
 800a61e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a620:	6a21      	ldr	r1, [r4, #32]
 800a622:	4628      	mov	r0, r5
 800a624:	47b0      	blx	r6
 800a626:	1c43      	adds	r3, r0, #1
 800a628:	89a3      	ldrh	r3, [r4, #12]
 800a62a:	d106      	bne.n	800a63a <__sflush_r+0x62>
 800a62c:	6829      	ldr	r1, [r5, #0]
 800a62e:	291d      	cmp	r1, #29
 800a630:	d82b      	bhi.n	800a68a <__sflush_r+0xb2>
 800a632:	4a2a      	ldr	r2, [pc, #168]	@ (800a6dc <__sflush_r+0x104>)
 800a634:	410a      	asrs	r2, r1
 800a636:	07d6      	lsls	r6, r2, #31
 800a638:	d427      	bmi.n	800a68a <__sflush_r+0xb2>
 800a63a:	2200      	movs	r2, #0
 800a63c:	6062      	str	r2, [r4, #4]
 800a63e:	04d9      	lsls	r1, r3, #19
 800a640:	6922      	ldr	r2, [r4, #16]
 800a642:	6022      	str	r2, [r4, #0]
 800a644:	d504      	bpl.n	800a650 <__sflush_r+0x78>
 800a646:	1c42      	adds	r2, r0, #1
 800a648:	d101      	bne.n	800a64e <__sflush_r+0x76>
 800a64a:	682b      	ldr	r3, [r5, #0]
 800a64c:	b903      	cbnz	r3, 800a650 <__sflush_r+0x78>
 800a64e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a650:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a652:	602f      	str	r7, [r5, #0]
 800a654:	b1b9      	cbz	r1, 800a686 <__sflush_r+0xae>
 800a656:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a65a:	4299      	cmp	r1, r3
 800a65c:	d002      	beq.n	800a664 <__sflush_r+0x8c>
 800a65e:	4628      	mov	r0, r5
 800a660:	f000 fe2a 	bl	800b2b8 <_free_r>
 800a664:	2300      	movs	r3, #0
 800a666:	6363      	str	r3, [r4, #52]	@ 0x34
 800a668:	e00d      	b.n	800a686 <__sflush_r+0xae>
 800a66a:	2301      	movs	r3, #1
 800a66c:	4628      	mov	r0, r5
 800a66e:	47b0      	blx	r6
 800a670:	4602      	mov	r2, r0
 800a672:	1c50      	adds	r0, r2, #1
 800a674:	d1c9      	bne.n	800a60a <__sflush_r+0x32>
 800a676:	682b      	ldr	r3, [r5, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d0c6      	beq.n	800a60a <__sflush_r+0x32>
 800a67c:	2b1d      	cmp	r3, #29
 800a67e:	d001      	beq.n	800a684 <__sflush_r+0xac>
 800a680:	2b16      	cmp	r3, #22
 800a682:	d11e      	bne.n	800a6c2 <__sflush_r+0xea>
 800a684:	602f      	str	r7, [r5, #0]
 800a686:	2000      	movs	r0, #0
 800a688:	e022      	b.n	800a6d0 <__sflush_r+0xf8>
 800a68a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a68e:	b21b      	sxth	r3, r3
 800a690:	e01b      	b.n	800a6ca <__sflush_r+0xf2>
 800a692:	690f      	ldr	r7, [r1, #16]
 800a694:	2f00      	cmp	r7, #0
 800a696:	d0f6      	beq.n	800a686 <__sflush_r+0xae>
 800a698:	0793      	lsls	r3, r2, #30
 800a69a:	680e      	ldr	r6, [r1, #0]
 800a69c:	bf08      	it	eq
 800a69e:	694b      	ldreq	r3, [r1, #20]
 800a6a0:	600f      	str	r7, [r1, #0]
 800a6a2:	bf18      	it	ne
 800a6a4:	2300      	movne	r3, #0
 800a6a6:	eba6 0807 	sub.w	r8, r6, r7
 800a6aa:	608b      	str	r3, [r1, #8]
 800a6ac:	f1b8 0f00 	cmp.w	r8, #0
 800a6b0:	dde9      	ble.n	800a686 <__sflush_r+0xae>
 800a6b2:	6a21      	ldr	r1, [r4, #32]
 800a6b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a6b6:	4643      	mov	r3, r8
 800a6b8:	463a      	mov	r2, r7
 800a6ba:	4628      	mov	r0, r5
 800a6bc:	47b0      	blx	r6
 800a6be:	2800      	cmp	r0, #0
 800a6c0:	dc08      	bgt.n	800a6d4 <__sflush_r+0xfc>
 800a6c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a6ca:	81a3      	strh	r3, [r4, #12]
 800a6cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d4:	4407      	add	r7, r0
 800a6d6:	eba8 0800 	sub.w	r8, r8, r0
 800a6da:	e7e7      	b.n	800a6ac <__sflush_r+0xd4>
 800a6dc:	dfbffffe 	.word	0xdfbffffe

0800a6e0 <_fflush_r>:
 800a6e0:	b538      	push	{r3, r4, r5, lr}
 800a6e2:	690b      	ldr	r3, [r1, #16]
 800a6e4:	4605      	mov	r5, r0
 800a6e6:	460c      	mov	r4, r1
 800a6e8:	b913      	cbnz	r3, 800a6f0 <_fflush_r+0x10>
 800a6ea:	2500      	movs	r5, #0
 800a6ec:	4628      	mov	r0, r5
 800a6ee:	bd38      	pop	{r3, r4, r5, pc}
 800a6f0:	b118      	cbz	r0, 800a6fa <_fflush_r+0x1a>
 800a6f2:	6a03      	ldr	r3, [r0, #32]
 800a6f4:	b90b      	cbnz	r3, 800a6fa <_fflush_r+0x1a>
 800a6f6:	f7fd fc99 	bl	800802c <__sinit>
 800a6fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6fe:	2b00      	cmp	r3, #0
 800a700:	d0f3      	beq.n	800a6ea <_fflush_r+0xa>
 800a702:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a704:	07d0      	lsls	r0, r2, #31
 800a706:	d404      	bmi.n	800a712 <_fflush_r+0x32>
 800a708:	0599      	lsls	r1, r3, #22
 800a70a:	d402      	bmi.n	800a712 <_fflush_r+0x32>
 800a70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a70e:	f7fe fbaa 	bl	8008e66 <__retarget_lock_acquire_recursive>
 800a712:	4628      	mov	r0, r5
 800a714:	4621      	mov	r1, r4
 800a716:	f7ff ff5f 	bl	800a5d8 <__sflush_r>
 800a71a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a71c:	07da      	lsls	r2, r3, #31
 800a71e:	4605      	mov	r5, r0
 800a720:	d4e4      	bmi.n	800a6ec <_fflush_r+0xc>
 800a722:	89a3      	ldrh	r3, [r4, #12]
 800a724:	059b      	lsls	r3, r3, #22
 800a726:	d4e1      	bmi.n	800a6ec <_fflush_r+0xc>
 800a728:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a72a:	f7fe fb9d 	bl	8008e68 <__retarget_lock_release_recursive>
 800a72e:	e7dd      	b.n	800a6ec <_fflush_r+0xc>

0800a730 <__malloc_lock>:
 800a730:	4801      	ldr	r0, [pc, #4]	@ (800a738 <__malloc_lock+0x8>)
 800a732:	f7fe bb98 	b.w	8008e66 <__retarget_lock_acquire_recursive>
 800a736:	bf00      	nop
 800a738:	200009b0 	.word	0x200009b0

0800a73c <__malloc_unlock>:
 800a73c:	4801      	ldr	r0, [pc, #4]	@ (800a744 <__malloc_unlock+0x8>)
 800a73e:	f7fe bb93 	b.w	8008e68 <__retarget_lock_release_recursive>
 800a742:	bf00      	nop
 800a744:	200009b0 	.word	0x200009b0

0800a748 <_Balloc>:
 800a748:	b570      	push	{r4, r5, r6, lr}
 800a74a:	69c6      	ldr	r6, [r0, #28]
 800a74c:	4604      	mov	r4, r0
 800a74e:	460d      	mov	r5, r1
 800a750:	b976      	cbnz	r6, 800a770 <_Balloc+0x28>
 800a752:	2010      	movs	r0, #16
 800a754:	f7ff fe84 	bl	800a460 <malloc>
 800a758:	4602      	mov	r2, r0
 800a75a:	61e0      	str	r0, [r4, #28]
 800a75c:	b920      	cbnz	r0, 800a768 <_Balloc+0x20>
 800a75e:	4b18      	ldr	r3, [pc, #96]	@ (800a7c0 <_Balloc+0x78>)
 800a760:	4818      	ldr	r0, [pc, #96]	@ (800a7c4 <_Balloc+0x7c>)
 800a762:	216b      	movs	r1, #107	@ 0x6b
 800a764:	f000 fd76 	bl	800b254 <__assert_func>
 800a768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a76c:	6006      	str	r6, [r0, #0]
 800a76e:	60c6      	str	r6, [r0, #12]
 800a770:	69e6      	ldr	r6, [r4, #28]
 800a772:	68f3      	ldr	r3, [r6, #12]
 800a774:	b183      	cbz	r3, 800a798 <_Balloc+0x50>
 800a776:	69e3      	ldr	r3, [r4, #28]
 800a778:	68db      	ldr	r3, [r3, #12]
 800a77a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a77e:	b9b8      	cbnz	r0, 800a7b0 <_Balloc+0x68>
 800a780:	2101      	movs	r1, #1
 800a782:	fa01 f605 	lsl.w	r6, r1, r5
 800a786:	1d72      	adds	r2, r6, #5
 800a788:	0092      	lsls	r2, r2, #2
 800a78a:	4620      	mov	r0, r4
 800a78c:	f000 fd80 	bl	800b290 <_calloc_r>
 800a790:	b160      	cbz	r0, 800a7ac <_Balloc+0x64>
 800a792:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a796:	e00e      	b.n	800a7b6 <_Balloc+0x6e>
 800a798:	2221      	movs	r2, #33	@ 0x21
 800a79a:	2104      	movs	r1, #4
 800a79c:	4620      	mov	r0, r4
 800a79e:	f000 fd77 	bl	800b290 <_calloc_r>
 800a7a2:	69e3      	ldr	r3, [r4, #28]
 800a7a4:	60f0      	str	r0, [r6, #12]
 800a7a6:	68db      	ldr	r3, [r3, #12]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d1e4      	bne.n	800a776 <_Balloc+0x2e>
 800a7ac:	2000      	movs	r0, #0
 800a7ae:	bd70      	pop	{r4, r5, r6, pc}
 800a7b0:	6802      	ldr	r2, [r0, #0]
 800a7b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a7b6:	2300      	movs	r3, #0
 800a7b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a7bc:	e7f7      	b.n	800a7ae <_Balloc+0x66>
 800a7be:	bf00      	nop
 800a7c0:	08010d46 	.word	0x08010d46
 800a7c4:	08010e37 	.word	0x08010e37

0800a7c8 <_Bfree>:
 800a7c8:	b570      	push	{r4, r5, r6, lr}
 800a7ca:	69c6      	ldr	r6, [r0, #28]
 800a7cc:	4605      	mov	r5, r0
 800a7ce:	460c      	mov	r4, r1
 800a7d0:	b976      	cbnz	r6, 800a7f0 <_Bfree+0x28>
 800a7d2:	2010      	movs	r0, #16
 800a7d4:	f7ff fe44 	bl	800a460 <malloc>
 800a7d8:	4602      	mov	r2, r0
 800a7da:	61e8      	str	r0, [r5, #28]
 800a7dc:	b920      	cbnz	r0, 800a7e8 <_Bfree+0x20>
 800a7de:	4b09      	ldr	r3, [pc, #36]	@ (800a804 <_Bfree+0x3c>)
 800a7e0:	4809      	ldr	r0, [pc, #36]	@ (800a808 <_Bfree+0x40>)
 800a7e2:	218f      	movs	r1, #143	@ 0x8f
 800a7e4:	f000 fd36 	bl	800b254 <__assert_func>
 800a7e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a7ec:	6006      	str	r6, [r0, #0]
 800a7ee:	60c6      	str	r6, [r0, #12]
 800a7f0:	b13c      	cbz	r4, 800a802 <_Bfree+0x3a>
 800a7f2:	69eb      	ldr	r3, [r5, #28]
 800a7f4:	6862      	ldr	r2, [r4, #4]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a7fc:	6021      	str	r1, [r4, #0]
 800a7fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a802:	bd70      	pop	{r4, r5, r6, pc}
 800a804:	08010d46 	.word	0x08010d46
 800a808:	08010e37 	.word	0x08010e37

0800a80c <__multadd>:
 800a80c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a810:	690d      	ldr	r5, [r1, #16]
 800a812:	4607      	mov	r7, r0
 800a814:	460c      	mov	r4, r1
 800a816:	461e      	mov	r6, r3
 800a818:	f101 0c14 	add.w	ip, r1, #20
 800a81c:	2000      	movs	r0, #0
 800a81e:	f8dc 3000 	ldr.w	r3, [ip]
 800a822:	b299      	uxth	r1, r3
 800a824:	fb02 6101 	mla	r1, r2, r1, r6
 800a828:	0c1e      	lsrs	r6, r3, #16
 800a82a:	0c0b      	lsrs	r3, r1, #16
 800a82c:	fb02 3306 	mla	r3, r2, r6, r3
 800a830:	b289      	uxth	r1, r1
 800a832:	3001      	adds	r0, #1
 800a834:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a838:	4285      	cmp	r5, r0
 800a83a:	f84c 1b04 	str.w	r1, [ip], #4
 800a83e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a842:	dcec      	bgt.n	800a81e <__multadd+0x12>
 800a844:	b30e      	cbz	r6, 800a88a <__multadd+0x7e>
 800a846:	68a3      	ldr	r3, [r4, #8]
 800a848:	42ab      	cmp	r3, r5
 800a84a:	dc19      	bgt.n	800a880 <__multadd+0x74>
 800a84c:	6861      	ldr	r1, [r4, #4]
 800a84e:	4638      	mov	r0, r7
 800a850:	3101      	adds	r1, #1
 800a852:	f7ff ff79 	bl	800a748 <_Balloc>
 800a856:	4680      	mov	r8, r0
 800a858:	b928      	cbnz	r0, 800a866 <__multadd+0x5a>
 800a85a:	4602      	mov	r2, r0
 800a85c:	4b0c      	ldr	r3, [pc, #48]	@ (800a890 <__multadd+0x84>)
 800a85e:	480d      	ldr	r0, [pc, #52]	@ (800a894 <__multadd+0x88>)
 800a860:	21ba      	movs	r1, #186	@ 0xba
 800a862:	f000 fcf7 	bl	800b254 <__assert_func>
 800a866:	6922      	ldr	r2, [r4, #16]
 800a868:	3202      	adds	r2, #2
 800a86a:	f104 010c 	add.w	r1, r4, #12
 800a86e:	0092      	lsls	r2, r2, #2
 800a870:	300c      	adds	r0, #12
 800a872:	f7fe fafa 	bl	8008e6a <memcpy>
 800a876:	4621      	mov	r1, r4
 800a878:	4638      	mov	r0, r7
 800a87a:	f7ff ffa5 	bl	800a7c8 <_Bfree>
 800a87e:	4644      	mov	r4, r8
 800a880:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a884:	3501      	adds	r5, #1
 800a886:	615e      	str	r6, [r3, #20]
 800a888:	6125      	str	r5, [r4, #16]
 800a88a:	4620      	mov	r0, r4
 800a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a890:	08010db5 	.word	0x08010db5
 800a894:	08010e37 	.word	0x08010e37

0800a898 <__s2b>:
 800a898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a89c:	460c      	mov	r4, r1
 800a89e:	4615      	mov	r5, r2
 800a8a0:	461f      	mov	r7, r3
 800a8a2:	2209      	movs	r2, #9
 800a8a4:	3308      	adds	r3, #8
 800a8a6:	4606      	mov	r6, r0
 800a8a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800a8ac:	2100      	movs	r1, #0
 800a8ae:	2201      	movs	r2, #1
 800a8b0:	429a      	cmp	r2, r3
 800a8b2:	db09      	blt.n	800a8c8 <__s2b+0x30>
 800a8b4:	4630      	mov	r0, r6
 800a8b6:	f7ff ff47 	bl	800a748 <_Balloc>
 800a8ba:	b940      	cbnz	r0, 800a8ce <__s2b+0x36>
 800a8bc:	4602      	mov	r2, r0
 800a8be:	4b19      	ldr	r3, [pc, #100]	@ (800a924 <__s2b+0x8c>)
 800a8c0:	4819      	ldr	r0, [pc, #100]	@ (800a928 <__s2b+0x90>)
 800a8c2:	21d3      	movs	r1, #211	@ 0xd3
 800a8c4:	f000 fcc6 	bl	800b254 <__assert_func>
 800a8c8:	0052      	lsls	r2, r2, #1
 800a8ca:	3101      	adds	r1, #1
 800a8cc:	e7f0      	b.n	800a8b0 <__s2b+0x18>
 800a8ce:	9b08      	ldr	r3, [sp, #32]
 800a8d0:	6143      	str	r3, [r0, #20]
 800a8d2:	2d09      	cmp	r5, #9
 800a8d4:	f04f 0301 	mov.w	r3, #1
 800a8d8:	6103      	str	r3, [r0, #16]
 800a8da:	dd16      	ble.n	800a90a <__s2b+0x72>
 800a8dc:	f104 0909 	add.w	r9, r4, #9
 800a8e0:	46c8      	mov	r8, r9
 800a8e2:	442c      	add	r4, r5
 800a8e4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a8e8:	4601      	mov	r1, r0
 800a8ea:	3b30      	subs	r3, #48	@ 0x30
 800a8ec:	220a      	movs	r2, #10
 800a8ee:	4630      	mov	r0, r6
 800a8f0:	f7ff ff8c 	bl	800a80c <__multadd>
 800a8f4:	45a0      	cmp	r8, r4
 800a8f6:	d1f5      	bne.n	800a8e4 <__s2b+0x4c>
 800a8f8:	f1a5 0408 	sub.w	r4, r5, #8
 800a8fc:	444c      	add	r4, r9
 800a8fe:	1b2d      	subs	r5, r5, r4
 800a900:	1963      	adds	r3, r4, r5
 800a902:	42bb      	cmp	r3, r7
 800a904:	db04      	blt.n	800a910 <__s2b+0x78>
 800a906:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a90a:	340a      	adds	r4, #10
 800a90c:	2509      	movs	r5, #9
 800a90e:	e7f6      	b.n	800a8fe <__s2b+0x66>
 800a910:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a914:	4601      	mov	r1, r0
 800a916:	3b30      	subs	r3, #48	@ 0x30
 800a918:	220a      	movs	r2, #10
 800a91a:	4630      	mov	r0, r6
 800a91c:	f7ff ff76 	bl	800a80c <__multadd>
 800a920:	e7ee      	b.n	800a900 <__s2b+0x68>
 800a922:	bf00      	nop
 800a924:	08010db5 	.word	0x08010db5
 800a928:	08010e37 	.word	0x08010e37

0800a92c <__hi0bits>:
 800a92c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a930:	4603      	mov	r3, r0
 800a932:	bf36      	itet	cc
 800a934:	0403      	lslcc	r3, r0, #16
 800a936:	2000      	movcs	r0, #0
 800a938:	2010      	movcc	r0, #16
 800a93a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a93e:	bf3c      	itt	cc
 800a940:	021b      	lslcc	r3, r3, #8
 800a942:	3008      	addcc	r0, #8
 800a944:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a948:	bf3c      	itt	cc
 800a94a:	011b      	lslcc	r3, r3, #4
 800a94c:	3004      	addcc	r0, #4
 800a94e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a952:	bf3c      	itt	cc
 800a954:	009b      	lslcc	r3, r3, #2
 800a956:	3002      	addcc	r0, #2
 800a958:	2b00      	cmp	r3, #0
 800a95a:	db05      	blt.n	800a968 <__hi0bits+0x3c>
 800a95c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a960:	f100 0001 	add.w	r0, r0, #1
 800a964:	bf08      	it	eq
 800a966:	2020      	moveq	r0, #32
 800a968:	4770      	bx	lr

0800a96a <__lo0bits>:
 800a96a:	6803      	ldr	r3, [r0, #0]
 800a96c:	4602      	mov	r2, r0
 800a96e:	f013 0007 	ands.w	r0, r3, #7
 800a972:	d00b      	beq.n	800a98c <__lo0bits+0x22>
 800a974:	07d9      	lsls	r1, r3, #31
 800a976:	d421      	bmi.n	800a9bc <__lo0bits+0x52>
 800a978:	0798      	lsls	r0, r3, #30
 800a97a:	bf49      	itett	mi
 800a97c:	085b      	lsrmi	r3, r3, #1
 800a97e:	089b      	lsrpl	r3, r3, #2
 800a980:	2001      	movmi	r0, #1
 800a982:	6013      	strmi	r3, [r2, #0]
 800a984:	bf5c      	itt	pl
 800a986:	6013      	strpl	r3, [r2, #0]
 800a988:	2002      	movpl	r0, #2
 800a98a:	4770      	bx	lr
 800a98c:	b299      	uxth	r1, r3
 800a98e:	b909      	cbnz	r1, 800a994 <__lo0bits+0x2a>
 800a990:	0c1b      	lsrs	r3, r3, #16
 800a992:	2010      	movs	r0, #16
 800a994:	b2d9      	uxtb	r1, r3
 800a996:	b909      	cbnz	r1, 800a99c <__lo0bits+0x32>
 800a998:	3008      	adds	r0, #8
 800a99a:	0a1b      	lsrs	r3, r3, #8
 800a99c:	0719      	lsls	r1, r3, #28
 800a99e:	bf04      	itt	eq
 800a9a0:	091b      	lsreq	r3, r3, #4
 800a9a2:	3004      	addeq	r0, #4
 800a9a4:	0799      	lsls	r1, r3, #30
 800a9a6:	bf04      	itt	eq
 800a9a8:	089b      	lsreq	r3, r3, #2
 800a9aa:	3002      	addeq	r0, #2
 800a9ac:	07d9      	lsls	r1, r3, #31
 800a9ae:	d403      	bmi.n	800a9b8 <__lo0bits+0x4e>
 800a9b0:	085b      	lsrs	r3, r3, #1
 800a9b2:	f100 0001 	add.w	r0, r0, #1
 800a9b6:	d003      	beq.n	800a9c0 <__lo0bits+0x56>
 800a9b8:	6013      	str	r3, [r2, #0]
 800a9ba:	4770      	bx	lr
 800a9bc:	2000      	movs	r0, #0
 800a9be:	4770      	bx	lr
 800a9c0:	2020      	movs	r0, #32
 800a9c2:	4770      	bx	lr

0800a9c4 <__i2b>:
 800a9c4:	b510      	push	{r4, lr}
 800a9c6:	460c      	mov	r4, r1
 800a9c8:	2101      	movs	r1, #1
 800a9ca:	f7ff febd 	bl	800a748 <_Balloc>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	b928      	cbnz	r0, 800a9de <__i2b+0x1a>
 800a9d2:	4b05      	ldr	r3, [pc, #20]	@ (800a9e8 <__i2b+0x24>)
 800a9d4:	4805      	ldr	r0, [pc, #20]	@ (800a9ec <__i2b+0x28>)
 800a9d6:	f240 1145 	movw	r1, #325	@ 0x145
 800a9da:	f000 fc3b 	bl	800b254 <__assert_func>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	6144      	str	r4, [r0, #20]
 800a9e2:	6103      	str	r3, [r0, #16]
 800a9e4:	bd10      	pop	{r4, pc}
 800a9e6:	bf00      	nop
 800a9e8:	08010db5 	.word	0x08010db5
 800a9ec:	08010e37 	.word	0x08010e37

0800a9f0 <__multiply>:
 800a9f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9f4:	4614      	mov	r4, r2
 800a9f6:	690a      	ldr	r2, [r1, #16]
 800a9f8:	6923      	ldr	r3, [r4, #16]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	bfa8      	it	ge
 800a9fe:	4623      	movge	r3, r4
 800aa00:	460f      	mov	r7, r1
 800aa02:	bfa4      	itt	ge
 800aa04:	460c      	movge	r4, r1
 800aa06:	461f      	movge	r7, r3
 800aa08:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800aa0c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800aa10:	68a3      	ldr	r3, [r4, #8]
 800aa12:	6861      	ldr	r1, [r4, #4]
 800aa14:	eb0a 0609 	add.w	r6, sl, r9
 800aa18:	42b3      	cmp	r3, r6
 800aa1a:	b085      	sub	sp, #20
 800aa1c:	bfb8      	it	lt
 800aa1e:	3101      	addlt	r1, #1
 800aa20:	f7ff fe92 	bl	800a748 <_Balloc>
 800aa24:	b930      	cbnz	r0, 800aa34 <__multiply+0x44>
 800aa26:	4602      	mov	r2, r0
 800aa28:	4b44      	ldr	r3, [pc, #272]	@ (800ab3c <__multiply+0x14c>)
 800aa2a:	4845      	ldr	r0, [pc, #276]	@ (800ab40 <__multiply+0x150>)
 800aa2c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800aa30:	f000 fc10 	bl	800b254 <__assert_func>
 800aa34:	f100 0514 	add.w	r5, r0, #20
 800aa38:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aa3c:	462b      	mov	r3, r5
 800aa3e:	2200      	movs	r2, #0
 800aa40:	4543      	cmp	r3, r8
 800aa42:	d321      	bcc.n	800aa88 <__multiply+0x98>
 800aa44:	f107 0114 	add.w	r1, r7, #20
 800aa48:	f104 0214 	add.w	r2, r4, #20
 800aa4c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800aa50:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800aa54:	9302      	str	r3, [sp, #8]
 800aa56:	1b13      	subs	r3, r2, r4
 800aa58:	3b15      	subs	r3, #21
 800aa5a:	f023 0303 	bic.w	r3, r3, #3
 800aa5e:	3304      	adds	r3, #4
 800aa60:	f104 0715 	add.w	r7, r4, #21
 800aa64:	42ba      	cmp	r2, r7
 800aa66:	bf38      	it	cc
 800aa68:	2304      	movcc	r3, #4
 800aa6a:	9301      	str	r3, [sp, #4]
 800aa6c:	9b02      	ldr	r3, [sp, #8]
 800aa6e:	9103      	str	r1, [sp, #12]
 800aa70:	428b      	cmp	r3, r1
 800aa72:	d80c      	bhi.n	800aa8e <__multiply+0x9e>
 800aa74:	2e00      	cmp	r6, #0
 800aa76:	dd03      	ble.n	800aa80 <__multiply+0x90>
 800aa78:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d05b      	beq.n	800ab38 <__multiply+0x148>
 800aa80:	6106      	str	r6, [r0, #16]
 800aa82:	b005      	add	sp, #20
 800aa84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aa88:	f843 2b04 	str.w	r2, [r3], #4
 800aa8c:	e7d8      	b.n	800aa40 <__multiply+0x50>
 800aa8e:	f8b1 a000 	ldrh.w	sl, [r1]
 800aa92:	f1ba 0f00 	cmp.w	sl, #0
 800aa96:	d024      	beq.n	800aae2 <__multiply+0xf2>
 800aa98:	f104 0e14 	add.w	lr, r4, #20
 800aa9c:	46a9      	mov	r9, r5
 800aa9e:	f04f 0c00 	mov.w	ip, #0
 800aaa2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800aaa6:	f8d9 3000 	ldr.w	r3, [r9]
 800aaaa:	fa1f fb87 	uxth.w	fp, r7
 800aaae:	b29b      	uxth	r3, r3
 800aab0:	fb0a 330b 	mla	r3, sl, fp, r3
 800aab4:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800aab8:	f8d9 7000 	ldr.w	r7, [r9]
 800aabc:	4463      	add	r3, ip
 800aabe:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aac2:	fb0a c70b 	mla	r7, sl, fp, ip
 800aac6:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800aaca:	b29b      	uxth	r3, r3
 800aacc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800aad0:	4572      	cmp	r2, lr
 800aad2:	f849 3b04 	str.w	r3, [r9], #4
 800aad6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800aada:	d8e2      	bhi.n	800aaa2 <__multiply+0xb2>
 800aadc:	9b01      	ldr	r3, [sp, #4]
 800aade:	f845 c003 	str.w	ip, [r5, r3]
 800aae2:	9b03      	ldr	r3, [sp, #12]
 800aae4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800aae8:	3104      	adds	r1, #4
 800aaea:	f1b9 0f00 	cmp.w	r9, #0
 800aaee:	d021      	beq.n	800ab34 <__multiply+0x144>
 800aaf0:	682b      	ldr	r3, [r5, #0]
 800aaf2:	f104 0c14 	add.w	ip, r4, #20
 800aaf6:	46ae      	mov	lr, r5
 800aaf8:	f04f 0a00 	mov.w	sl, #0
 800aafc:	f8bc b000 	ldrh.w	fp, [ip]
 800ab00:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ab04:	fb09 770b 	mla	r7, r9, fp, r7
 800ab08:	4457      	add	r7, sl
 800ab0a:	b29b      	uxth	r3, r3
 800ab0c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ab10:	f84e 3b04 	str.w	r3, [lr], #4
 800ab14:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ab18:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab1c:	f8be 3000 	ldrh.w	r3, [lr]
 800ab20:	fb09 330a 	mla	r3, r9, sl, r3
 800ab24:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ab28:	4562      	cmp	r2, ip
 800ab2a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ab2e:	d8e5      	bhi.n	800aafc <__multiply+0x10c>
 800ab30:	9f01      	ldr	r7, [sp, #4]
 800ab32:	51eb      	str	r3, [r5, r7]
 800ab34:	3504      	adds	r5, #4
 800ab36:	e799      	b.n	800aa6c <__multiply+0x7c>
 800ab38:	3e01      	subs	r6, #1
 800ab3a:	e79b      	b.n	800aa74 <__multiply+0x84>
 800ab3c:	08010db5 	.word	0x08010db5
 800ab40:	08010e37 	.word	0x08010e37

0800ab44 <__pow5mult>:
 800ab44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ab48:	4615      	mov	r5, r2
 800ab4a:	f012 0203 	ands.w	r2, r2, #3
 800ab4e:	4607      	mov	r7, r0
 800ab50:	460e      	mov	r6, r1
 800ab52:	d007      	beq.n	800ab64 <__pow5mult+0x20>
 800ab54:	4c25      	ldr	r4, [pc, #148]	@ (800abec <__pow5mult+0xa8>)
 800ab56:	3a01      	subs	r2, #1
 800ab58:	2300      	movs	r3, #0
 800ab5a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ab5e:	f7ff fe55 	bl	800a80c <__multadd>
 800ab62:	4606      	mov	r6, r0
 800ab64:	10ad      	asrs	r5, r5, #2
 800ab66:	d03d      	beq.n	800abe4 <__pow5mult+0xa0>
 800ab68:	69fc      	ldr	r4, [r7, #28]
 800ab6a:	b97c      	cbnz	r4, 800ab8c <__pow5mult+0x48>
 800ab6c:	2010      	movs	r0, #16
 800ab6e:	f7ff fc77 	bl	800a460 <malloc>
 800ab72:	4602      	mov	r2, r0
 800ab74:	61f8      	str	r0, [r7, #28]
 800ab76:	b928      	cbnz	r0, 800ab84 <__pow5mult+0x40>
 800ab78:	4b1d      	ldr	r3, [pc, #116]	@ (800abf0 <__pow5mult+0xac>)
 800ab7a:	481e      	ldr	r0, [pc, #120]	@ (800abf4 <__pow5mult+0xb0>)
 800ab7c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ab80:	f000 fb68 	bl	800b254 <__assert_func>
 800ab84:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ab88:	6004      	str	r4, [r0, #0]
 800ab8a:	60c4      	str	r4, [r0, #12]
 800ab8c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ab90:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ab94:	b94c      	cbnz	r4, 800abaa <__pow5mult+0x66>
 800ab96:	f240 2171 	movw	r1, #625	@ 0x271
 800ab9a:	4638      	mov	r0, r7
 800ab9c:	f7ff ff12 	bl	800a9c4 <__i2b>
 800aba0:	2300      	movs	r3, #0
 800aba2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aba6:	4604      	mov	r4, r0
 800aba8:	6003      	str	r3, [r0, #0]
 800abaa:	f04f 0900 	mov.w	r9, #0
 800abae:	07eb      	lsls	r3, r5, #31
 800abb0:	d50a      	bpl.n	800abc8 <__pow5mult+0x84>
 800abb2:	4631      	mov	r1, r6
 800abb4:	4622      	mov	r2, r4
 800abb6:	4638      	mov	r0, r7
 800abb8:	f7ff ff1a 	bl	800a9f0 <__multiply>
 800abbc:	4631      	mov	r1, r6
 800abbe:	4680      	mov	r8, r0
 800abc0:	4638      	mov	r0, r7
 800abc2:	f7ff fe01 	bl	800a7c8 <_Bfree>
 800abc6:	4646      	mov	r6, r8
 800abc8:	106d      	asrs	r5, r5, #1
 800abca:	d00b      	beq.n	800abe4 <__pow5mult+0xa0>
 800abcc:	6820      	ldr	r0, [r4, #0]
 800abce:	b938      	cbnz	r0, 800abe0 <__pow5mult+0x9c>
 800abd0:	4622      	mov	r2, r4
 800abd2:	4621      	mov	r1, r4
 800abd4:	4638      	mov	r0, r7
 800abd6:	f7ff ff0b 	bl	800a9f0 <__multiply>
 800abda:	6020      	str	r0, [r4, #0]
 800abdc:	f8c0 9000 	str.w	r9, [r0]
 800abe0:	4604      	mov	r4, r0
 800abe2:	e7e4      	b.n	800abae <__pow5mult+0x6a>
 800abe4:	4630      	mov	r0, r6
 800abe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800abea:	bf00      	nop
 800abec:	08010e90 	.word	0x08010e90
 800abf0:	08010d46 	.word	0x08010d46
 800abf4:	08010e37 	.word	0x08010e37

0800abf8 <__lshift>:
 800abf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800abfc:	460c      	mov	r4, r1
 800abfe:	6849      	ldr	r1, [r1, #4]
 800ac00:	6923      	ldr	r3, [r4, #16]
 800ac02:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ac06:	68a3      	ldr	r3, [r4, #8]
 800ac08:	4607      	mov	r7, r0
 800ac0a:	4691      	mov	r9, r2
 800ac0c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ac10:	f108 0601 	add.w	r6, r8, #1
 800ac14:	42b3      	cmp	r3, r6
 800ac16:	db0b      	blt.n	800ac30 <__lshift+0x38>
 800ac18:	4638      	mov	r0, r7
 800ac1a:	f7ff fd95 	bl	800a748 <_Balloc>
 800ac1e:	4605      	mov	r5, r0
 800ac20:	b948      	cbnz	r0, 800ac36 <__lshift+0x3e>
 800ac22:	4602      	mov	r2, r0
 800ac24:	4b28      	ldr	r3, [pc, #160]	@ (800acc8 <__lshift+0xd0>)
 800ac26:	4829      	ldr	r0, [pc, #164]	@ (800accc <__lshift+0xd4>)
 800ac28:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ac2c:	f000 fb12 	bl	800b254 <__assert_func>
 800ac30:	3101      	adds	r1, #1
 800ac32:	005b      	lsls	r3, r3, #1
 800ac34:	e7ee      	b.n	800ac14 <__lshift+0x1c>
 800ac36:	2300      	movs	r3, #0
 800ac38:	f100 0114 	add.w	r1, r0, #20
 800ac3c:	f100 0210 	add.w	r2, r0, #16
 800ac40:	4618      	mov	r0, r3
 800ac42:	4553      	cmp	r3, sl
 800ac44:	db33      	blt.n	800acae <__lshift+0xb6>
 800ac46:	6920      	ldr	r0, [r4, #16]
 800ac48:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ac4c:	f104 0314 	add.w	r3, r4, #20
 800ac50:	f019 091f 	ands.w	r9, r9, #31
 800ac54:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ac58:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ac5c:	d02b      	beq.n	800acb6 <__lshift+0xbe>
 800ac5e:	f1c9 0e20 	rsb	lr, r9, #32
 800ac62:	468a      	mov	sl, r1
 800ac64:	2200      	movs	r2, #0
 800ac66:	6818      	ldr	r0, [r3, #0]
 800ac68:	fa00 f009 	lsl.w	r0, r0, r9
 800ac6c:	4310      	orrs	r0, r2
 800ac6e:	f84a 0b04 	str.w	r0, [sl], #4
 800ac72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac76:	459c      	cmp	ip, r3
 800ac78:	fa22 f20e 	lsr.w	r2, r2, lr
 800ac7c:	d8f3      	bhi.n	800ac66 <__lshift+0x6e>
 800ac7e:	ebac 0304 	sub.w	r3, ip, r4
 800ac82:	3b15      	subs	r3, #21
 800ac84:	f023 0303 	bic.w	r3, r3, #3
 800ac88:	3304      	adds	r3, #4
 800ac8a:	f104 0015 	add.w	r0, r4, #21
 800ac8e:	4584      	cmp	ip, r0
 800ac90:	bf38      	it	cc
 800ac92:	2304      	movcc	r3, #4
 800ac94:	50ca      	str	r2, [r1, r3]
 800ac96:	b10a      	cbz	r2, 800ac9c <__lshift+0xa4>
 800ac98:	f108 0602 	add.w	r6, r8, #2
 800ac9c:	3e01      	subs	r6, #1
 800ac9e:	4638      	mov	r0, r7
 800aca0:	612e      	str	r6, [r5, #16]
 800aca2:	4621      	mov	r1, r4
 800aca4:	f7ff fd90 	bl	800a7c8 <_Bfree>
 800aca8:	4628      	mov	r0, r5
 800acaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acae:	f842 0f04 	str.w	r0, [r2, #4]!
 800acb2:	3301      	adds	r3, #1
 800acb4:	e7c5      	b.n	800ac42 <__lshift+0x4a>
 800acb6:	3904      	subs	r1, #4
 800acb8:	f853 2b04 	ldr.w	r2, [r3], #4
 800acbc:	f841 2f04 	str.w	r2, [r1, #4]!
 800acc0:	459c      	cmp	ip, r3
 800acc2:	d8f9      	bhi.n	800acb8 <__lshift+0xc0>
 800acc4:	e7ea      	b.n	800ac9c <__lshift+0xa4>
 800acc6:	bf00      	nop
 800acc8:	08010db5 	.word	0x08010db5
 800accc:	08010e37 	.word	0x08010e37

0800acd0 <__mcmp>:
 800acd0:	690a      	ldr	r2, [r1, #16]
 800acd2:	4603      	mov	r3, r0
 800acd4:	6900      	ldr	r0, [r0, #16]
 800acd6:	1a80      	subs	r0, r0, r2
 800acd8:	b530      	push	{r4, r5, lr}
 800acda:	d10e      	bne.n	800acfa <__mcmp+0x2a>
 800acdc:	3314      	adds	r3, #20
 800acde:	3114      	adds	r1, #20
 800ace0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ace4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ace8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800acec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800acf0:	4295      	cmp	r5, r2
 800acf2:	d003      	beq.n	800acfc <__mcmp+0x2c>
 800acf4:	d205      	bcs.n	800ad02 <__mcmp+0x32>
 800acf6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800acfa:	bd30      	pop	{r4, r5, pc}
 800acfc:	42a3      	cmp	r3, r4
 800acfe:	d3f3      	bcc.n	800ace8 <__mcmp+0x18>
 800ad00:	e7fb      	b.n	800acfa <__mcmp+0x2a>
 800ad02:	2001      	movs	r0, #1
 800ad04:	e7f9      	b.n	800acfa <__mcmp+0x2a>
	...

0800ad08 <__mdiff>:
 800ad08:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad0c:	4689      	mov	r9, r1
 800ad0e:	4606      	mov	r6, r0
 800ad10:	4611      	mov	r1, r2
 800ad12:	4648      	mov	r0, r9
 800ad14:	4614      	mov	r4, r2
 800ad16:	f7ff ffdb 	bl	800acd0 <__mcmp>
 800ad1a:	1e05      	subs	r5, r0, #0
 800ad1c:	d112      	bne.n	800ad44 <__mdiff+0x3c>
 800ad1e:	4629      	mov	r1, r5
 800ad20:	4630      	mov	r0, r6
 800ad22:	f7ff fd11 	bl	800a748 <_Balloc>
 800ad26:	4602      	mov	r2, r0
 800ad28:	b928      	cbnz	r0, 800ad36 <__mdiff+0x2e>
 800ad2a:	4b3f      	ldr	r3, [pc, #252]	@ (800ae28 <__mdiff+0x120>)
 800ad2c:	f240 2137 	movw	r1, #567	@ 0x237
 800ad30:	483e      	ldr	r0, [pc, #248]	@ (800ae2c <__mdiff+0x124>)
 800ad32:	f000 fa8f 	bl	800b254 <__assert_func>
 800ad36:	2301      	movs	r3, #1
 800ad38:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ad3c:	4610      	mov	r0, r2
 800ad3e:	b003      	add	sp, #12
 800ad40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad44:	bfbc      	itt	lt
 800ad46:	464b      	movlt	r3, r9
 800ad48:	46a1      	movlt	r9, r4
 800ad4a:	4630      	mov	r0, r6
 800ad4c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ad50:	bfba      	itte	lt
 800ad52:	461c      	movlt	r4, r3
 800ad54:	2501      	movlt	r5, #1
 800ad56:	2500      	movge	r5, #0
 800ad58:	f7ff fcf6 	bl	800a748 <_Balloc>
 800ad5c:	4602      	mov	r2, r0
 800ad5e:	b918      	cbnz	r0, 800ad68 <__mdiff+0x60>
 800ad60:	4b31      	ldr	r3, [pc, #196]	@ (800ae28 <__mdiff+0x120>)
 800ad62:	f240 2145 	movw	r1, #581	@ 0x245
 800ad66:	e7e3      	b.n	800ad30 <__mdiff+0x28>
 800ad68:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ad6c:	6926      	ldr	r6, [r4, #16]
 800ad6e:	60c5      	str	r5, [r0, #12]
 800ad70:	f109 0310 	add.w	r3, r9, #16
 800ad74:	f109 0514 	add.w	r5, r9, #20
 800ad78:	f104 0e14 	add.w	lr, r4, #20
 800ad7c:	f100 0b14 	add.w	fp, r0, #20
 800ad80:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ad84:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ad88:	9301      	str	r3, [sp, #4]
 800ad8a:	46d9      	mov	r9, fp
 800ad8c:	f04f 0c00 	mov.w	ip, #0
 800ad90:	9b01      	ldr	r3, [sp, #4]
 800ad92:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ad96:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ad9a:	9301      	str	r3, [sp, #4]
 800ad9c:	fa1f f38a 	uxth.w	r3, sl
 800ada0:	4619      	mov	r1, r3
 800ada2:	b283      	uxth	r3, r0
 800ada4:	1acb      	subs	r3, r1, r3
 800ada6:	0c00      	lsrs	r0, r0, #16
 800ada8:	4463      	add	r3, ip
 800adaa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800adae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800adb2:	b29b      	uxth	r3, r3
 800adb4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800adb8:	4576      	cmp	r6, lr
 800adba:	f849 3b04 	str.w	r3, [r9], #4
 800adbe:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800adc2:	d8e5      	bhi.n	800ad90 <__mdiff+0x88>
 800adc4:	1b33      	subs	r3, r6, r4
 800adc6:	3b15      	subs	r3, #21
 800adc8:	f023 0303 	bic.w	r3, r3, #3
 800adcc:	3415      	adds	r4, #21
 800adce:	3304      	adds	r3, #4
 800add0:	42a6      	cmp	r6, r4
 800add2:	bf38      	it	cc
 800add4:	2304      	movcc	r3, #4
 800add6:	441d      	add	r5, r3
 800add8:	445b      	add	r3, fp
 800adda:	461e      	mov	r6, r3
 800addc:	462c      	mov	r4, r5
 800adde:	4544      	cmp	r4, r8
 800ade0:	d30e      	bcc.n	800ae00 <__mdiff+0xf8>
 800ade2:	f108 0103 	add.w	r1, r8, #3
 800ade6:	1b49      	subs	r1, r1, r5
 800ade8:	f021 0103 	bic.w	r1, r1, #3
 800adec:	3d03      	subs	r5, #3
 800adee:	45a8      	cmp	r8, r5
 800adf0:	bf38      	it	cc
 800adf2:	2100      	movcc	r1, #0
 800adf4:	440b      	add	r3, r1
 800adf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800adfa:	b191      	cbz	r1, 800ae22 <__mdiff+0x11a>
 800adfc:	6117      	str	r7, [r2, #16]
 800adfe:	e79d      	b.n	800ad3c <__mdiff+0x34>
 800ae00:	f854 1b04 	ldr.w	r1, [r4], #4
 800ae04:	46e6      	mov	lr, ip
 800ae06:	0c08      	lsrs	r0, r1, #16
 800ae08:	fa1c fc81 	uxtah	ip, ip, r1
 800ae0c:	4471      	add	r1, lr
 800ae0e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800ae12:	b289      	uxth	r1, r1
 800ae14:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800ae18:	f846 1b04 	str.w	r1, [r6], #4
 800ae1c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ae20:	e7dd      	b.n	800adde <__mdiff+0xd6>
 800ae22:	3f01      	subs	r7, #1
 800ae24:	e7e7      	b.n	800adf6 <__mdiff+0xee>
 800ae26:	bf00      	nop
 800ae28:	08010db5 	.word	0x08010db5
 800ae2c:	08010e37 	.word	0x08010e37

0800ae30 <__ulp>:
 800ae30:	b082      	sub	sp, #8
 800ae32:	ed8d 0b00 	vstr	d0, [sp]
 800ae36:	9a01      	ldr	r2, [sp, #4]
 800ae38:	4b0f      	ldr	r3, [pc, #60]	@ (800ae78 <__ulp+0x48>)
 800ae3a:	4013      	ands	r3, r2
 800ae3c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	dc08      	bgt.n	800ae56 <__ulp+0x26>
 800ae44:	425b      	negs	r3, r3
 800ae46:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800ae4a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ae4e:	da04      	bge.n	800ae5a <__ulp+0x2a>
 800ae50:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800ae54:	4113      	asrs	r3, r2
 800ae56:	2200      	movs	r2, #0
 800ae58:	e008      	b.n	800ae6c <__ulp+0x3c>
 800ae5a:	f1a2 0314 	sub.w	r3, r2, #20
 800ae5e:	2b1e      	cmp	r3, #30
 800ae60:	bfda      	itte	le
 800ae62:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800ae66:	40da      	lsrle	r2, r3
 800ae68:	2201      	movgt	r2, #1
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	4619      	mov	r1, r3
 800ae6e:	4610      	mov	r0, r2
 800ae70:	ec41 0b10 	vmov	d0, r0, r1
 800ae74:	b002      	add	sp, #8
 800ae76:	4770      	bx	lr
 800ae78:	7ff00000 	.word	0x7ff00000

0800ae7c <__b2d>:
 800ae7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae80:	6906      	ldr	r6, [r0, #16]
 800ae82:	f100 0814 	add.w	r8, r0, #20
 800ae86:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ae8a:	1f37      	subs	r7, r6, #4
 800ae8c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ae90:	4610      	mov	r0, r2
 800ae92:	f7ff fd4b 	bl	800a92c <__hi0bits>
 800ae96:	f1c0 0320 	rsb	r3, r0, #32
 800ae9a:	280a      	cmp	r0, #10
 800ae9c:	600b      	str	r3, [r1, #0]
 800ae9e:	491b      	ldr	r1, [pc, #108]	@ (800af0c <__b2d+0x90>)
 800aea0:	dc15      	bgt.n	800aece <__b2d+0x52>
 800aea2:	f1c0 0c0b 	rsb	ip, r0, #11
 800aea6:	fa22 f30c 	lsr.w	r3, r2, ip
 800aeaa:	45b8      	cmp	r8, r7
 800aeac:	ea43 0501 	orr.w	r5, r3, r1
 800aeb0:	bf34      	ite	cc
 800aeb2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aeb6:	2300      	movcs	r3, #0
 800aeb8:	3015      	adds	r0, #21
 800aeba:	fa02 f000 	lsl.w	r0, r2, r0
 800aebe:	fa23 f30c 	lsr.w	r3, r3, ip
 800aec2:	4303      	orrs	r3, r0
 800aec4:	461c      	mov	r4, r3
 800aec6:	ec45 4b10 	vmov	d0, r4, r5
 800aeca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aece:	45b8      	cmp	r8, r7
 800aed0:	bf3a      	itte	cc
 800aed2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aed6:	f1a6 0708 	subcc.w	r7, r6, #8
 800aeda:	2300      	movcs	r3, #0
 800aedc:	380b      	subs	r0, #11
 800aede:	d012      	beq.n	800af06 <__b2d+0x8a>
 800aee0:	f1c0 0120 	rsb	r1, r0, #32
 800aee4:	fa23 f401 	lsr.w	r4, r3, r1
 800aee8:	4082      	lsls	r2, r0
 800aeea:	4322      	orrs	r2, r4
 800aeec:	4547      	cmp	r7, r8
 800aeee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800aef2:	bf8c      	ite	hi
 800aef4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aef8:	2200      	movls	r2, #0
 800aefa:	4083      	lsls	r3, r0
 800aefc:	40ca      	lsrs	r2, r1
 800aefe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800af02:	4313      	orrs	r3, r2
 800af04:	e7de      	b.n	800aec4 <__b2d+0x48>
 800af06:	ea42 0501 	orr.w	r5, r2, r1
 800af0a:	e7db      	b.n	800aec4 <__b2d+0x48>
 800af0c:	3ff00000 	.word	0x3ff00000

0800af10 <__d2b>:
 800af10:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af14:	460f      	mov	r7, r1
 800af16:	2101      	movs	r1, #1
 800af18:	ec59 8b10 	vmov	r8, r9, d0
 800af1c:	4616      	mov	r6, r2
 800af1e:	f7ff fc13 	bl	800a748 <_Balloc>
 800af22:	4604      	mov	r4, r0
 800af24:	b930      	cbnz	r0, 800af34 <__d2b+0x24>
 800af26:	4602      	mov	r2, r0
 800af28:	4b23      	ldr	r3, [pc, #140]	@ (800afb8 <__d2b+0xa8>)
 800af2a:	4824      	ldr	r0, [pc, #144]	@ (800afbc <__d2b+0xac>)
 800af2c:	f240 310f 	movw	r1, #783	@ 0x30f
 800af30:	f000 f990 	bl	800b254 <__assert_func>
 800af34:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800af38:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800af3c:	b10d      	cbz	r5, 800af42 <__d2b+0x32>
 800af3e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800af42:	9301      	str	r3, [sp, #4]
 800af44:	f1b8 0300 	subs.w	r3, r8, #0
 800af48:	d023      	beq.n	800af92 <__d2b+0x82>
 800af4a:	4668      	mov	r0, sp
 800af4c:	9300      	str	r3, [sp, #0]
 800af4e:	f7ff fd0c 	bl	800a96a <__lo0bits>
 800af52:	e9dd 1200 	ldrd	r1, r2, [sp]
 800af56:	b1d0      	cbz	r0, 800af8e <__d2b+0x7e>
 800af58:	f1c0 0320 	rsb	r3, r0, #32
 800af5c:	fa02 f303 	lsl.w	r3, r2, r3
 800af60:	430b      	orrs	r3, r1
 800af62:	40c2      	lsrs	r2, r0
 800af64:	6163      	str	r3, [r4, #20]
 800af66:	9201      	str	r2, [sp, #4]
 800af68:	9b01      	ldr	r3, [sp, #4]
 800af6a:	61a3      	str	r3, [r4, #24]
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	bf0c      	ite	eq
 800af70:	2201      	moveq	r2, #1
 800af72:	2202      	movne	r2, #2
 800af74:	6122      	str	r2, [r4, #16]
 800af76:	b1a5      	cbz	r5, 800afa2 <__d2b+0x92>
 800af78:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800af7c:	4405      	add	r5, r0
 800af7e:	603d      	str	r5, [r7, #0]
 800af80:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800af84:	6030      	str	r0, [r6, #0]
 800af86:	4620      	mov	r0, r4
 800af88:	b003      	add	sp, #12
 800af8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af8e:	6161      	str	r1, [r4, #20]
 800af90:	e7ea      	b.n	800af68 <__d2b+0x58>
 800af92:	a801      	add	r0, sp, #4
 800af94:	f7ff fce9 	bl	800a96a <__lo0bits>
 800af98:	9b01      	ldr	r3, [sp, #4]
 800af9a:	6163      	str	r3, [r4, #20]
 800af9c:	3020      	adds	r0, #32
 800af9e:	2201      	movs	r2, #1
 800afa0:	e7e8      	b.n	800af74 <__d2b+0x64>
 800afa2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800afa6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800afaa:	6038      	str	r0, [r7, #0]
 800afac:	6918      	ldr	r0, [r3, #16]
 800afae:	f7ff fcbd 	bl	800a92c <__hi0bits>
 800afb2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800afb6:	e7e5      	b.n	800af84 <__d2b+0x74>
 800afb8:	08010db5 	.word	0x08010db5
 800afbc:	08010e37 	.word	0x08010e37

0800afc0 <__ratio>:
 800afc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afc4:	b085      	sub	sp, #20
 800afc6:	e9cd 1000 	strd	r1, r0, [sp]
 800afca:	a902      	add	r1, sp, #8
 800afcc:	f7ff ff56 	bl	800ae7c <__b2d>
 800afd0:	9800      	ldr	r0, [sp, #0]
 800afd2:	a903      	add	r1, sp, #12
 800afd4:	ec55 4b10 	vmov	r4, r5, d0
 800afd8:	f7ff ff50 	bl	800ae7c <__b2d>
 800afdc:	9b01      	ldr	r3, [sp, #4]
 800afde:	6919      	ldr	r1, [r3, #16]
 800afe0:	9b00      	ldr	r3, [sp, #0]
 800afe2:	691b      	ldr	r3, [r3, #16]
 800afe4:	1ac9      	subs	r1, r1, r3
 800afe6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800afea:	1a9b      	subs	r3, r3, r2
 800afec:	ec5b ab10 	vmov	sl, fp, d0
 800aff0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	bfce      	itee	gt
 800aff8:	462a      	movgt	r2, r5
 800affa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800affe:	465a      	movle	r2, fp
 800b000:	462f      	mov	r7, r5
 800b002:	46d9      	mov	r9, fp
 800b004:	bfcc      	ite	gt
 800b006:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b00a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800b00e:	464b      	mov	r3, r9
 800b010:	4652      	mov	r2, sl
 800b012:	4620      	mov	r0, r4
 800b014:	4639      	mov	r1, r7
 800b016:	f7f5 fc19 	bl	800084c <__aeabi_ddiv>
 800b01a:	ec41 0b10 	vmov	d0, r0, r1
 800b01e:	b005      	add	sp, #20
 800b020:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b024 <__copybits>:
 800b024:	3901      	subs	r1, #1
 800b026:	b570      	push	{r4, r5, r6, lr}
 800b028:	1149      	asrs	r1, r1, #5
 800b02a:	6914      	ldr	r4, [r2, #16]
 800b02c:	3101      	adds	r1, #1
 800b02e:	f102 0314 	add.w	r3, r2, #20
 800b032:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b036:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b03a:	1f05      	subs	r5, r0, #4
 800b03c:	42a3      	cmp	r3, r4
 800b03e:	d30c      	bcc.n	800b05a <__copybits+0x36>
 800b040:	1aa3      	subs	r3, r4, r2
 800b042:	3b11      	subs	r3, #17
 800b044:	f023 0303 	bic.w	r3, r3, #3
 800b048:	3211      	adds	r2, #17
 800b04a:	42a2      	cmp	r2, r4
 800b04c:	bf88      	it	hi
 800b04e:	2300      	movhi	r3, #0
 800b050:	4418      	add	r0, r3
 800b052:	2300      	movs	r3, #0
 800b054:	4288      	cmp	r0, r1
 800b056:	d305      	bcc.n	800b064 <__copybits+0x40>
 800b058:	bd70      	pop	{r4, r5, r6, pc}
 800b05a:	f853 6b04 	ldr.w	r6, [r3], #4
 800b05e:	f845 6f04 	str.w	r6, [r5, #4]!
 800b062:	e7eb      	b.n	800b03c <__copybits+0x18>
 800b064:	f840 3b04 	str.w	r3, [r0], #4
 800b068:	e7f4      	b.n	800b054 <__copybits+0x30>

0800b06a <__any_on>:
 800b06a:	f100 0214 	add.w	r2, r0, #20
 800b06e:	6900      	ldr	r0, [r0, #16]
 800b070:	114b      	asrs	r3, r1, #5
 800b072:	4298      	cmp	r0, r3
 800b074:	b510      	push	{r4, lr}
 800b076:	db11      	blt.n	800b09c <__any_on+0x32>
 800b078:	dd0a      	ble.n	800b090 <__any_on+0x26>
 800b07a:	f011 011f 	ands.w	r1, r1, #31
 800b07e:	d007      	beq.n	800b090 <__any_on+0x26>
 800b080:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b084:	fa24 f001 	lsr.w	r0, r4, r1
 800b088:	fa00 f101 	lsl.w	r1, r0, r1
 800b08c:	428c      	cmp	r4, r1
 800b08e:	d10b      	bne.n	800b0a8 <__any_on+0x3e>
 800b090:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b094:	4293      	cmp	r3, r2
 800b096:	d803      	bhi.n	800b0a0 <__any_on+0x36>
 800b098:	2000      	movs	r0, #0
 800b09a:	bd10      	pop	{r4, pc}
 800b09c:	4603      	mov	r3, r0
 800b09e:	e7f7      	b.n	800b090 <__any_on+0x26>
 800b0a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b0a4:	2900      	cmp	r1, #0
 800b0a6:	d0f5      	beq.n	800b094 <__any_on+0x2a>
 800b0a8:	2001      	movs	r0, #1
 800b0aa:	e7f6      	b.n	800b09a <__any_on+0x30>

0800b0ac <__sread>:
 800b0ac:	b510      	push	{r4, lr}
 800b0ae:	460c      	mov	r4, r1
 800b0b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b4:	f000 f89a 	bl	800b1ec <_read_r>
 800b0b8:	2800      	cmp	r0, #0
 800b0ba:	bfab      	itete	ge
 800b0bc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b0be:	89a3      	ldrhlt	r3, [r4, #12]
 800b0c0:	181b      	addge	r3, r3, r0
 800b0c2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b0c6:	bfac      	ite	ge
 800b0c8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b0ca:	81a3      	strhlt	r3, [r4, #12]
 800b0cc:	bd10      	pop	{r4, pc}

0800b0ce <__swrite>:
 800b0ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d2:	461f      	mov	r7, r3
 800b0d4:	898b      	ldrh	r3, [r1, #12]
 800b0d6:	05db      	lsls	r3, r3, #23
 800b0d8:	4605      	mov	r5, r0
 800b0da:	460c      	mov	r4, r1
 800b0dc:	4616      	mov	r6, r2
 800b0de:	d505      	bpl.n	800b0ec <__swrite+0x1e>
 800b0e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e4:	2302      	movs	r3, #2
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f000 f86e 	bl	800b1c8 <_lseek_r>
 800b0ec:	89a3      	ldrh	r3, [r4, #12]
 800b0ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b0f6:	81a3      	strh	r3, [r4, #12]
 800b0f8:	4632      	mov	r2, r6
 800b0fa:	463b      	mov	r3, r7
 800b0fc:	4628      	mov	r0, r5
 800b0fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b102:	f000 b895 	b.w	800b230 <_write_r>

0800b106 <__sseek>:
 800b106:	b510      	push	{r4, lr}
 800b108:	460c      	mov	r4, r1
 800b10a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b10e:	f000 f85b 	bl	800b1c8 <_lseek_r>
 800b112:	1c43      	adds	r3, r0, #1
 800b114:	89a3      	ldrh	r3, [r4, #12]
 800b116:	bf15      	itete	ne
 800b118:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b11a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b11e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b122:	81a3      	strheq	r3, [r4, #12]
 800b124:	bf18      	it	ne
 800b126:	81a3      	strhne	r3, [r4, #12]
 800b128:	bd10      	pop	{r4, pc}

0800b12a <__sclose>:
 800b12a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b12e:	f000 b83b 	b.w	800b1a8 <_close_r>

0800b132 <_realloc_r>:
 800b132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b136:	4680      	mov	r8, r0
 800b138:	4615      	mov	r5, r2
 800b13a:	460c      	mov	r4, r1
 800b13c:	b921      	cbnz	r1, 800b148 <_realloc_r+0x16>
 800b13e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b142:	4611      	mov	r1, r2
 800b144:	f7ff b9b6 	b.w	800a4b4 <_malloc_r>
 800b148:	b92a      	cbnz	r2, 800b156 <_realloc_r+0x24>
 800b14a:	f000 f8b5 	bl	800b2b8 <_free_r>
 800b14e:	2400      	movs	r4, #0
 800b150:	4620      	mov	r0, r4
 800b152:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b156:	f000 f8f9 	bl	800b34c <_malloc_usable_size_r>
 800b15a:	4285      	cmp	r5, r0
 800b15c:	4606      	mov	r6, r0
 800b15e:	d802      	bhi.n	800b166 <_realloc_r+0x34>
 800b160:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800b164:	d8f4      	bhi.n	800b150 <_realloc_r+0x1e>
 800b166:	4629      	mov	r1, r5
 800b168:	4640      	mov	r0, r8
 800b16a:	f7ff f9a3 	bl	800a4b4 <_malloc_r>
 800b16e:	4607      	mov	r7, r0
 800b170:	2800      	cmp	r0, #0
 800b172:	d0ec      	beq.n	800b14e <_realloc_r+0x1c>
 800b174:	42b5      	cmp	r5, r6
 800b176:	462a      	mov	r2, r5
 800b178:	4621      	mov	r1, r4
 800b17a:	bf28      	it	cs
 800b17c:	4632      	movcs	r2, r6
 800b17e:	f7fd fe74 	bl	8008e6a <memcpy>
 800b182:	4621      	mov	r1, r4
 800b184:	4640      	mov	r0, r8
 800b186:	f000 f897 	bl	800b2b8 <_free_r>
 800b18a:	463c      	mov	r4, r7
 800b18c:	e7e0      	b.n	800b150 <_realloc_r+0x1e>

0800b18e <__ascii_wctomb>:
 800b18e:	4603      	mov	r3, r0
 800b190:	4608      	mov	r0, r1
 800b192:	b141      	cbz	r1, 800b1a6 <__ascii_wctomb+0x18>
 800b194:	2aff      	cmp	r2, #255	@ 0xff
 800b196:	d904      	bls.n	800b1a2 <__ascii_wctomb+0x14>
 800b198:	228a      	movs	r2, #138	@ 0x8a
 800b19a:	601a      	str	r2, [r3, #0]
 800b19c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b1a0:	4770      	bx	lr
 800b1a2:	700a      	strb	r2, [r1, #0]
 800b1a4:	2001      	movs	r0, #1
 800b1a6:	4770      	bx	lr

0800b1a8 <_close_r>:
 800b1a8:	b538      	push	{r3, r4, r5, lr}
 800b1aa:	4d06      	ldr	r5, [pc, #24]	@ (800b1c4 <_close_r+0x1c>)
 800b1ac:	2300      	movs	r3, #0
 800b1ae:	4604      	mov	r4, r0
 800b1b0:	4608      	mov	r0, r1
 800b1b2:	602b      	str	r3, [r5, #0]
 800b1b4:	f7f7 f9a1 	bl	80024fa <_close>
 800b1b8:	1c43      	adds	r3, r0, #1
 800b1ba:	d102      	bne.n	800b1c2 <_close_r+0x1a>
 800b1bc:	682b      	ldr	r3, [r5, #0]
 800b1be:	b103      	cbz	r3, 800b1c2 <_close_r+0x1a>
 800b1c0:	6023      	str	r3, [r4, #0]
 800b1c2:	bd38      	pop	{r3, r4, r5, pc}
 800b1c4:	200009bc 	.word	0x200009bc

0800b1c8 <_lseek_r>:
 800b1c8:	b538      	push	{r3, r4, r5, lr}
 800b1ca:	4d07      	ldr	r5, [pc, #28]	@ (800b1e8 <_lseek_r+0x20>)
 800b1cc:	4604      	mov	r4, r0
 800b1ce:	4608      	mov	r0, r1
 800b1d0:	4611      	mov	r1, r2
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	602a      	str	r2, [r5, #0]
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f7f7 f9b6 	bl	8002548 <_lseek>
 800b1dc:	1c43      	adds	r3, r0, #1
 800b1de:	d102      	bne.n	800b1e6 <_lseek_r+0x1e>
 800b1e0:	682b      	ldr	r3, [r5, #0]
 800b1e2:	b103      	cbz	r3, 800b1e6 <_lseek_r+0x1e>
 800b1e4:	6023      	str	r3, [r4, #0]
 800b1e6:	bd38      	pop	{r3, r4, r5, pc}
 800b1e8:	200009bc 	.word	0x200009bc

0800b1ec <_read_r>:
 800b1ec:	b538      	push	{r3, r4, r5, lr}
 800b1ee:	4d07      	ldr	r5, [pc, #28]	@ (800b20c <_read_r+0x20>)
 800b1f0:	4604      	mov	r4, r0
 800b1f2:	4608      	mov	r0, r1
 800b1f4:	4611      	mov	r1, r2
 800b1f6:	2200      	movs	r2, #0
 800b1f8:	602a      	str	r2, [r5, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	f7f7 f944 	bl	8002488 <_read>
 800b200:	1c43      	adds	r3, r0, #1
 800b202:	d102      	bne.n	800b20a <_read_r+0x1e>
 800b204:	682b      	ldr	r3, [r5, #0]
 800b206:	b103      	cbz	r3, 800b20a <_read_r+0x1e>
 800b208:	6023      	str	r3, [r4, #0]
 800b20a:	bd38      	pop	{r3, r4, r5, pc}
 800b20c:	200009bc 	.word	0x200009bc

0800b210 <_sbrk_r>:
 800b210:	b538      	push	{r3, r4, r5, lr}
 800b212:	4d06      	ldr	r5, [pc, #24]	@ (800b22c <_sbrk_r+0x1c>)
 800b214:	2300      	movs	r3, #0
 800b216:	4604      	mov	r4, r0
 800b218:	4608      	mov	r0, r1
 800b21a:	602b      	str	r3, [r5, #0]
 800b21c:	f7f7 f9a2 	bl	8002564 <_sbrk>
 800b220:	1c43      	adds	r3, r0, #1
 800b222:	d102      	bne.n	800b22a <_sbrk_r+0x1a>
 800b224:	682b      	ldr	r3, [r5, #0]
 800b226:	b103      	cbz	r3, 800b22a <_sbrk_r+0x1a>
 800b228:	6023      	str	r3, [r4, #0]
 800b22a:	bd38      	pop	{r3, r4, r5, pc}
 800b22c:	200009bc 	.word	0x200009bc

0800b230 <_write_r>:
 800b230:	b538      	push	{r3, r4, r5, lr}
 800b232:	4d07      	ldr	r5, [pc, #28]	@ (800b250 <_write_r+0x20>)
 800b234:	4604      	mov	r4, r0
 800b236:	4608      	mov	r0, r1
 800b238:	4611      	mov	r1, r2
 800b23a:	2200      	movs	r2, #0
 800b23c:	602a      	str	r2, [r5, #0]
 800b23e:	461a      	mov	r2, r3
 800b240:	f7f7 f93f 	bl	80024c2 <_write>
 800b244:	1c43      	adds	r3, r0, #1
 800b246:	d102      	bne.n	800b24e <_write_r+0x1e>
 800b248:	682b      	ldr	r3, [r5, #0]
 800b24a:	b103      	cbz	r3, 800b24e <_write_r+0x1e>
 800b24c:	6023      	str	r3, [r4, #0]
 800b24e:	bd38      	pop	{r3, r4, r5, pc}
 800b250:	200009bc 	.word	0x200009bc

0800b254 <__assert_func>:
 800b254:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b256:	4614      	mov	r4, r2
 800b258:	461a      	mov	r2, r3
 800b25a:	4b09      	ldr	r3, [pc, #36]	@ (800b280 <__assert_func+0x2c>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	4605      	mov	r5, r0
 800b260:	68d8      	ldr	r0, [r3, #12]
 800b262:	b954      	cbnz	r4, 800b27a <__assert_func+0x26>
 800b264:	4b07      	ldr	r3, [pc, #28]	@ (800b284 <__assert_func+0x30>)
 800b266:	461c      	mov	r4, r3
 800b268:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b26c:	9100      	str	r1, [sp, #0]
 800b26e:	462b      	mov	r3, r5
 800b270:	4905      	ldr	r1, [pc, #20]	@ (800b288 <__assert_func+0x34>)
 800b272:	f000 f873 	bl	800b35c <fiprintf>
 800b276:	f000 f883 	bl	800b380 <abort>
 800b27a:	4b04      	ldr	r3, [pc, #16]	@ (800b28c <__assert_func+0x38>)
 800b27c:	e7f4      	b.n	800b268 <__assert_func+0x14>
 800b27e:	bf00      	nop
 800b280:	20000184 	.word	0x20000184
 800b284:	08010fcb 	.word	0x08010fcb
 800b288:	08010f9d 	.word	0x08010f9d
 800b28c:	08010f90 	.word	0x08010f90

0800b290 <_calloc_r>:
 800b290:	b570      	push	{r4, r5, r6, lr}
 800b292:	fba1 5402 	umull	r5, r4, r1, r2
 800b296:	b93c      	cbnz	r4, 800b2a8 <_calloc_r+0x18>
 800b298:	4629      	mov	r1, r5
 800b29a:	f7ff f90b 	bl	800a4b4 <_malloc_r>
 800b29e:	4606      	mov	r6, r0
 800b2a0:	b928      	cbnz	r0, 800b2ae <_calloc_r+0x1e>
 800b2a2:	2600      	movs	r6, #0
 800b2a4:	4630      	mov	r0, r6
 800b2a6:	bd70      	pop	{r4, r5, r6, pc}
 800b2a8:	220c      	movs	r2, #12
 800b2aa:	6002      	str	r2, [r0, #0]
 800b2ac:	e7f9      	b.n	800b2a2 <_calloc_r+0x12>
 800b2ae:	462a      	mov	r2, r5
 800b2b0:	4621      	mov	r1, r4
 800b2b2:	f7fd fda1 	bl	8008df8 <memset>
 800b2b6:	e7f5      	b.n	800b2a4 <_calloc_r+0x14>

0800b2b8 <_free_r>:
 800b2b8:	b538      	push	{r3, r4, r5, lr}
 800b2ba:	4605      	mov	r5, r0
 800b2bc:	2900      	cmp	r1, #0
 800b2be:	d041      	beq.n	800b344 <_free_r+0x8c>
 800b2c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b2c4:	1f0c      	subs	r4, r1, #4
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	bfb8      	it	lt
 800b2ca:	18e4      	addlt	r4, r4, r3
 800b2cc:	f7ff fa30 	bl	800a730 <__malloc_lock>
 800b2d0:	4a1d      	ldr	r2, [pc, #116]	@ (800b348 <_free_r+0x90>)
 800b2d2:	6813      	ldr	r3, [r2, #0]
 800b2d4:	b933      	cbnz	r3, 800b2e4 <_free_r+0x2c>
 800b2d6:	6063      	str	r3, [r4, #4]
 800b2d8:	6014      	str	r4, [r2, #0]
 800b2da:	4628      	mov	r0, r5
 800b2dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b2e0:	f7ff ba2c 	b.w	800a73c <__malloc_unlock>
 800b2e4:	42a3      	cmp	r3, r4
 800b2e6:	d908      	bls.n	800b2fa <_free_r+0x42>
 800b2e8:	6820      	ldr	r0, [r4, #0]
 800b2ea:	1821      	adds	r1, r4, r0
 800b2ec:	428b      	cmp	r3, r1
 800b2ee:	bf01      	itttt	eq
 800b2f0:	6819      	ldreq	r1, [r3, #0]
 800b2f2:	685b      	ldreq	r3, [r3, #4]
 800b2f4:	1809      	addeq	r1, r1, r0
 800b2f6:	6021      	streq	r1, [r4, #0]
 800b2f8:	e7ed      	b.n	800b2d6 <_free_r+0x1e>
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	685b      	ldr	r3, [r3, #4]
 800b2fe:	b10b      	cbz	r3, 800b304 <_free_r+0x4c>
 800b300:	42a3      	cmp	r3, r4
 800b302:	d9fa      	bls.n	800b2fa <_free_r+0x42>
 800b304:	6811      	ldr	r1, [r2, #0]
 800b306:	1850      	adds	r0, r2, r1
 800b308:	42a0      	cmp	r0, r4
 800b30a:	d10b      	bne.n	800b324 <_free_r+0x6c>
 800b30c:	6820      	ldr	r0, [r4, #0]
 800b30e:	4401      	add	r1, r0
 800b310:	1850      	adds	r0, r2, r1
 800b312:	4283      	cmp	r3, r0
 800b314:	6011      	str	r1, [r2, #0]
 800b316:	d1e0      	bne.n	800b2da <_free_r+0x22>
 800b318:	6818      	ldr	r0, [r3, #0]
 800b31a:	685b      	ldr	r3, [r3, #4]
 800b31c:	6053      	str	r3, [r2, #4]
 800b31e:	4408      	add	r0, r1
 800b320:	6010      	str	r0, [r2, #0]
 800b322:	e7da      	b.n	800b2da <_free_r+0x22>
 800b324:	d902      	bls.n	800b32c <_free_r+0x74>
 800b326:	230c      	movs	r3, #12
 800b328:	602b      	str	r3, [r5, #0]
 800b32a:	e7d6      	b.n	800b2da <_free_r+0x22>
 800b32c:	6820      	ldr	r0, [r4, #0]
 800b32e:	1821      	adds	r1, r4, r0
 800b330:	428b      	cmp	r3, r1
 800b332:	bf04      	itt	eq
 800b334:	6819      	ldreq	r1, [r3, #0]
 800b336:	685b      	ldreq	r3, [r3, #4]
 800b338:	6063      	str	r3, [r4, #4]
 800b33a:	bf04      	itt	eq
 800b33c:	1809      	addeq	r1, r1, r0
 800b33e:	6021      	streq	r1, [r4, #0]
 800b340:	6054      	str	r4, [r2, #4]
 800b342:	e7ca      	b.n	800b2da <_free_r+0x22>
 800b344:	bd38      	pop	{r3, r4, r5, pc}
 800b346:	bf00      	nop
 800b348:	200009b8 	.word	0x200009b8

0800b34c <_malloc_usable_size_r>:
 800b34c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b350:	1f18      	subs	r0, r3, #4
 800b352:	2b00      	cmp	r3, #0
 800b354:	bfbc      	itt	lt
 800b356:	580b      	ldrlt	r3, [r1, r0]
 800b358:	18c0      	addlt	r0, r0, r3
 800b35a:	4770      	bx	lr

0800b35c <fiprintf>:
 800b35c:	b40e      	push	{r1, r2, r3}
 800b35e:	b503      	push	{r0, r1, lr}
 800b360:	4601      	mov	r1, r0
 800b362:	ab03      	add	r3, sp, #12
 800b364:	4805      	ldr	r0, [pc, #20]	@ (800b37c <fiprintf+0x20>)
 800b366:	f853 2b04 	ldr.w	r2, [r3], #4
 800b36a:	6800      	ldr	r0, [r0, #0]
 800b36c:	9301      	str	r3, [sp, #4]
 800b36e:	f000 f837 	bl	800b3e0 <_vfiprintf_r>
 800b372:	b002      	add	sp, #8
 800b374:	f85d eb04 	ldr.w	lr, [sp], #4
 800b378:	b003      	add	sp, #12
 800b37a:	4770      	bx	lr
 800b37c:	20000184 	.word	0x20000184

0800b380 <abort>:
 800b380:	b508      	push	{r3, lr}
 800b382:	2006      	movs	r0, #6
 800b384:	f000 fa84 	bl	800b890 <raise>
 800b388:	2001      	movs	r0, #1
 800b38a:	f7f7 f872 	bl	8002472 <_exit>

0800b38e <__sfputc_r>:
 800b38e:	6893      	ldr	r3, [r2, #8]
 800b390:	3b01      	subs	r3, #1
 800b392:	2b00      	cmp	r3, #0
 800b394:	b410      	push	{r4}
 800b396:	6093      	str	r3, [r2, #8]
 800b398:	da08      	bge.n	800b3ac <__sfputc_r+0x1e>
 800b39a:	6994      	ldr	r4, [r2, #24]
 800b39c:	42a3      	cmp	r3, r4
 800b39e:	db01      	blt.n	800b3a4 <__sfputc_r+0x16>
 800b3a0:	290a      	cmp	r1, #10
 800b3a2:	d103      	bne.n	800b3ac <__sfputc_r+0x1e>
 800b3a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3a8:	f000 b932 	b.w	800b610 <__swbuf_r>
 800b3ac:	6813      	ldr	r3, [r2, #0]
 800b3ae:	1c58      	adds	r0, r3, #1
 800b3b0:	6010      	str	r0, [r2, #0]
 800b3b2:	7019      	strb	r1, [r3, #0]
 800b3b4:	4608      	mov	r0, r1
 800b3b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3ba:	4770      	bx	lr

0800b3bc <__sfputs_r>:
 800b3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3be:	4606      	mov	r6, r0
 800b3c0:	460f      	mov	r7, r1
 800b3c2:	4614      	mov	r4, r2
 800b3c4:	18d5      	adds	r5, r2, r3
 800b3c6:	42ac      	cmp	r4, r5
 800b3c8:	d101      	bne.n	800b3ce <__sfputs_r+0x12>
 800b3ca:	2000      	movs	r0, #0
 800b3cc:	e007      	b.n	800b3de <__sfputs_r+0x22>
 800b3ce:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3d2:	463a      	mov	r2, r7
 800b3d4:	4630      	mov	r0, r6
 800b3d6:	f7ff ffda 	bl	800b38e <__sfputc_r>
 800b3da:	1c43      	adds	r3, r0, #1
 800b3dc:	d1f3      	bne.n	800b3c6 <__sfputs_r+0xa>
 800b3de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b3e0 <_vfiprintf_r>:
 800b3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3e4:	460d      	mov	r5, r1
 800b3e6:	b09d      	sub	sp, #116	@ 0x74
 800b3e8:	4614      	mov	r4, r2
 800b3ea:	4698      	mov	r8, r3
 800b3ec:	4606      	mov	r6, r0
 800b3ee:	b118      	cbz	r0, 800b3f8 <_vfiprintf_r+0x18>
 800b3f0:	6a03      	ldr	r3, [r0, #32]
 800b3f2:	b90b      	cbnz	r3, 800b3f8 <_vfiprintf_r+0x18>
 800b3f4:	f7fc fe1a 	bl	800802c <__sinit>
 800b3f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b3fa:	07d9      	lsls	r1, r3, #31
 800b3fc:	d405      	bmi.n	800b40a <_vfiprintf_r+0x2a>
 800b3fe:	89ab      	ldrh	r3, [r5, #12]
 800b400:	059a      	lsls	r2, r3, #22
 800b402:	d402      	bmi.n	800b40a <_vfiprintf_r+0x2a>
 800b404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b406:	f7fd fd2e 	bl	8008e66 <__retarget_lock_acquire_recursive>
 800b40a:	89ab      	ldrh	r3, [r5, #12]
 800b40c:	071b      	lsls	r3, r3, #28
 800b40e:	d501      	bpl.n	800b414 <_vfiprintf_r+0x34>
 800b410:	692b      	ldr	r3, [r5, #16]
 800b412:	b99b      	cbnz	r3, 800b43c <_vfiprintf_r+0x5c>
 800b414:	4629      	mov	r1, r5
 800b416:	4630      	mov	r0, r6
 800b418:	f000 f938 	bl	800b68c <__swsetup_r>
 800b41c:	b170      	cbz	r0, 800b43c <_vfiprintf_r+0x5c>
 800b41e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b420:	07dc      	lsls	r4, r3, #31
 800b422:	d504      	bpl.n	800b42e <_vfiprintf_r+0x4e>
 800b424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b428:	b01d      	add	sp, #116	@ 0x74
 800b42a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b42e:	89ab      	ldrh	r3, [r5, #12]
 800b430:	0598      	lsls	r0, r3, #22
 800b432:	d4f7      	bmi.n	800b424 <_vfiprintf_r+0x44>
 800b434:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b436:	f7fd fd17 	bl	8008e68 <__retarget_lock_release_recursive>
 800b43a:	e7f3      	b.n	800b424 <_vfiprintf_r+0x44>
 800b43c:	2300      	movs	r3, #0
 800b43e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b440:	2320      	movs	r3, #32
 800b442:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b446:	f8cd 800c 	str.w	r8, [sp, #12]
 800b44a:	2330      	movs	r3, #48	@ 0x30
 800b44c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b5fc <_vfiprintf_r+0x21c>
 800b450:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b454:	f04f 0901 	mov.w	r9, #1
 800b458:	4623      	mov	r3, r4
 800b45a:	469a      	mov	sl, r3
 800b45c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b460:	b10a      	cbz	r2, 800b466 <_vfiprintf_r+0x86>
 800b462:	2a25      	cmp	r2, #37	@ 0x25
 800b464:	d1f9      	bne.n	800b45a <_vfiprintf_r+0x7a>
 800b466:	ebba 0b04 	subs.w	fp, sl, r4
 800b46a:	d00b      	beq.n	800b484 <_vfiprintf_r+0xa4>
 800b46c:	465b      	mov	r3, fp
 800b46e:	4622      	mov	r2, r4
 800b470:	4629      	mov	r1, r5
 800b472:	4630      	mov	r0, r6
 800b474:	f7ff ffa2 	bl	800b3bc <__sfputs_r>
 800b478:	3001      	adds	r0, #1
 800b47a:	f000 80a7 	beq.w	800b5cc <_vfiprintf_r+0x1ec>
 800b47e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b480:	445a      	add	r2, fp
 800b482:	9209      	str	r2, [sp, #36]	@ 0x24
 800b484:	f89a 3000 	ldrb.w	r3, [sl]
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f000 809f 	beq.w	800b5cc <_vfiprintf_r+0x1ec>
 800b48e:	2300      	movs	r3, #0
 800b490:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b494:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b498:	f10a 0a01 	add.w	sl, sl, #1
 800b49c:	9304      	str	r3, [sp, #16]
 800b49e:	9307      	str	r3, [sp, #28]
 800b4a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4a6:	4654      	mov	r4, sl
 800b4a8:	2205      	movs	r2, #5
 800b4aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ae:	4853      	ldr	r0, [pc, #332]	@ (800b5fc <_vfiprintf_r+0x21c>)
 800b4b0:	f7f4 fe8e 	bl	80001d0 <memchr>
 800b4b4:	9a04      	ldr	r2, [sp, #16]
 800b4b6:	b9d8      	cbnz	r0, 800b4f0 <_vfiprintf_r+0x110>
 800b4b8:	06d1      	lsls	r1, r2, #27
 800b4ba:	bf44      	itt	mi
 800b4bc:	2320      	movmi	r3, #32
 800b4be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4c2:	0713      	lsls	r3, r2, #28
 800b4c4:	bf44      	itt	mi
 800b4c6:	232b      	movmi	r3, #43	@ 0x2b
 800b4c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4cc:	f89a 3000 	ldrb.w	r3, [sl]
 800b4d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4d2:	d015      	beq.n	800b500 <_vfiprintf_r+0x120>
 800b4d4:	9a07      	ldr	r2, [sp, #28]
 800b4d6:	4654      	mov	r4, sl
 800b4d8:	2000      	movs	r0, #0
 800b4da:	f04f 0c0a 	mov.w	ip, #10
 800b4de:	4621      	mov	r1, r4
 800b4e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b4e4:	3b30      	subs	r3, #48	@ 0x30
 800b4e6:	2b09      	cmp	r3, #9
 800b4e8:	d94b      	bls.n	800b582 <_vfiprintf_r+0x1a2>
 800b4ea:	b1b0      	cbz	r0, 800b51a <_vfiprintf_r+0x13a>
 800b4ec:	9207      	str	r2, [sp, #28]
 800b4ee:	e014      	b.n	800b51a <_vfiprintf_r+0x13a>
 800b4f0:	eba0 0308 	sub.w	r3, r0, r8
 800b4f4:	fa09 f303 	lsl.w	r3, r9, r3
 800b4f8:	4313      	orrs	r3, r2
 800b4fa:	9304      	str	r3, [sp, #16]
 800b4fc:	46a2      	mov	sl, r4
 800b4fe:	e7d2      	b.n	800b4a6 <_vfiprintf_r+0xc6>
 800b500:	9b03      	ldr	r3, [sp, #12]
 800b502:	1d19      	adds	r1, r3, #4
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	9103      	str	r1, [sp, #12]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	bfbb      	ittet	lt
 800b50c:	425b      	neglt	r3, r3
 800b50e:	f042 0202 	orrlt.w	r2, r2, #2
 800b512:	9307      	strge	r3, [sp, #28]
 800b514:	9307      	strlt	r3, [sp, #28]
 800b516:	bfb8      	it	lt
 800b518:	9204      	strlt	r2, [sp, #16]
 800b51a:	7823      	ldrb	r3, [r4, #0]
 800b51c:	2b2e      	cmp	r3, #46	@ 0x2e
 800b51e:	d10a      	bne.n	800b536 <_vfiprintf_r+0x156>
 800b520:	7863      	ldrb	r3, [r4, #1]
 800b522:	2b2a      	cmp	r3, #42	@ 0x2a
 800b524:	d132      	bne.n	800b58c <_vfiprintf_r+0x1ac>
 800b526:	9b03      	ldr	r3, [sp, #12]
 800b528:	1d1a      	adds	r2, r3, #4
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	9203      	str	r2, [sp, #12]
 800b52e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b532:	3402      	adds	r4, #2
 800b534:	9305      	str	r3, [sp, #20]
 800b536:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b60c <_vfiprintf_r+0x22c>
 800b53a:	7821      	ldrb	r1, [r4, #0]
 800b53c:	2203      	movs	r2, #3
 800b53e:	4650      	mov	r0, sl
 800b540:	f7f4 fe46 	bl	80001d0 <memchr>
 800b544:	b138      	cbz	r0, 800b556 <_vfiprintf_r+0x176>
 800b546:	9b04      	ldr	r3, [sp, #16]
 800b548:	eba0 000a 	sub.w	r0, r0, sl
 800b54c:	2240      	movs	r2, #64	@ 0x40
 800b54e:	4082      	lsls	r2, r0
 800b550:	4313      	orrs	r3, r2
 800b552:	3401      	adds	r4, #1
 800b554:	9304      	str	r3, [sp, #16]
 800b556:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b55a:	4829      	ldr	r0, [pc, #164]	@ (800b600 <_vfiprintf_r+0x220>)
 800b55c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b560:	2206      	movs	r2, #6
 800b562:	f7f4 fe35 	bl	80001d0 <memchr>
 800b566:	2800      	cmp	r0, #0
 800b568:	d03f      	beq.n	800b5ea <_vfiprintf_r+0x20a>
 800b56a:	4b26      	ldr	r3, [pc, #152]	@ (800b604 <_vfiprintf_r+0x224>)
 800b56c:	bb1b      	cbnz	r3, 800b5b6 <_vfiprintf_r+0x1d6>
 800b56e:	9b03      	ldr	r3, [sp, #12]
 800b570:	3307      	adds	r3, #7
 800b572:	f023 0307 	bic.w	r3, r3, #7
 800b576:	3308      	adds	r3, #8
 800b578:	9303      	str	r3, [sp, #12]
 800b57a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b57c:	443b      	add	r3, r7
 800b57e:	9309      	str	r3, [sp, #36]	@ 0x24
 800b580:	e76a      	b.n	800b458 <_vfiprintf_r+0x78>
 800b582:	fb0c 3202 	mla	r2, ip, r2, r3
 800b586:	460c      	mov	r4, r1
 800b588:	2001      	movs	r0, #1
 800b58a:	e7a8      	b.n	800b4de <_vfiprintf_r+0xfe>
 800b58c:	2300      	movs	r3, #0
 800b58e:	3401      	adds	r4, #1
 800b590:	9305      	str	r3, [sp, #20]
 800b592:	4619      	mov	r1, r3
 800b594:	f04f 0c0a 	mov.w	ip, #10
 800b598:	4620      	mov	r0, r4
 800b59a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b59e:	3a30      	subs	r2, #48	@ 0x30
 800b5a0:	2a09      	cmp	r2, #9
 800b5a2:	d903      	bls.n	800b5ac <_vfiprintf_r+0x1cc>
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d0c6      	beq.n	800b536 <_vfiprintf_r+0x156>
 800b5a8:	9105      	str	r1, [sp, #20]
 800b5aa:	e7c4      	b.n	800b536 <_vfiprintf_r+0x156>
 800b5ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	2301      	movs	r3, #1
 800b5b4:	e7f0      	b.n	800b598 <_vfiprintf_r+0x1b8>
 800b5b6:	ab03      	add	r3, sp, #12
 800b5b8:	9300      	str	r3, [sp, #0]
 800b5ba:	462a      	mov	r2, r5
 800b5bc:	4b12      	ldr	r3, [pc, #72]	@ (800b608 <_vfiprintf_r+0x228>)
 800b5be:	a904      	add	r1, sp, #16
 800b5c0:	4630      	mov	r0, r6
 800b5c2:	f7fb fe87 	bl	80072d4 <_printf_float>
 800b5c6:	4607      	mov	r7, r0
 800b5c8:	1c78      	adds	r0, r7, #1
 800b5ca:	d1d6      	bne.n	800b57a <_vfiprintf_r+0x19a>
 800b5cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b5ce:	07d9      	lsls	r1, r3, #31
 800b5d0:	d405      	bmi.n	800b5de <_vfiprintf_r+0x1fe>
 800b5d2:	89ab      	ldrh	r3, [r5, #12]
 800b5d4:	059a      	lsls	r2, r3, #22
 800b5d6:	d402      	bmi.n	800b5de <_vfiprintf_r+0x1fe>
 800b5d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b5da:	f7fd fc45 	bl	8008e68 <__retarget_lock_release_recursive>
 800b5de:	89ab      	ldrh	r3, [r5, #12]
 800b5e0:	065b      	lsls	r3, r3, #25
 800b5e2:	f53f af1f 	bmi.w	800b424 <_vfiprintf_r+0x44>
 800b5e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b5e8:	e71e      	b.n	800b428 <_vfiprintf_r+0x48>
 800b5ea:	ab03      	add	r3, sp, #12
 800b5ec:	9300      	str	r3, [sp, #0]
 800b5ee:	462a      	mov	r2, r5
 800b5f0:	4b05      	ldr	r3, [pc, #20]	@ (800b608 <_vfiprintf_r+0x228>)
 800b5f2:	a904      	add	r1, sp, #16
 800b5f4:	4630      	mov	r0, r6
 800b5f6:	f7fc f905 	bl	8007804 <_printf_i>
 800b5fa:	e7e4      	b.n	800b5c6 <_vfiprintf_r+0x1e6>
 800b5fc:	08010e26 	.word	0x08010e26
 800b600:	08010e30 	.word	0x08010e30
 800b604:	080072d5 	.word	0x080072d5
 800b608:	0800b3bd 	.word	0x0800b3bd
 800b60c:	08010e2c 	.word	0x08010e2c

0800b610 <__swbuf_r>:
 800b610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b612:	460e      	mov	r6, r1
 800b614:	4614      	mov	r4, r2
 800b616:	4605      	mov	r5, r0
 800b618:	b118      	cbz	r0, 800b622 <__swbuf_r+0x12>
 800b61a:	6a03      	ldr	r3, [r0, #32]
 800b61c:	b90b      	cbnz	r3, 800b622 <__swbuf_r+0x12>
 800b61e:	f7fc fd05 	bl	800802c <__sinit>
 800b622:	69a3      	ldr	r3, [r4, #24]
 800b624:	60a3      	str	r3, [r4, #8]
 800b626:	89a3      	ldrh	r3, [r4, #12]
 800b628:	071a      	lsls	r2, r3, #28
 800b62a:	d501      	bpl.n	800b630 <__swbuf_r+0x20>
 800b62c:	6923      	ldr	r3, [r4, #16]
 800b62e:	b943      	cbnz	r3, 800b642 <__swbuf_r+0x32>
 800b630:	4621      	mov	r1, r4
 800b632:	4628      	mov	r0, r5
 800b634:	f000 f82a 	bl	800b68c <__swsetup_r>
 800b638:	b118      	cbz	r0, 800b642 <__swbuf_r+0x32>
 800b63a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b63e:	4638      	mov	r0, r7
 800b640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b642:	6823      	ldr	r3, [r4, #0]
 800b644:	6922      	ldr	r2, [r4, #16]
 800b646:	1a98      	subs	r0, r3, r2
 800b648:	6963      	ldr	r3, [r4, #20]
 800b64a:	b2f6      	uxtb	r6, r6
 800b64c:	4283      	cmp	r3, r0
 800b64e:	4637      	mov	r7, r6
 800b650:	dc05      	bgt.n	800b65e <__swbuf_r+0x4e>
 800b652:	4621      	mov	r1, r4
 800b654:	4628      	mov	r0, r5
 800b656:	f7ff f843 	bl	800a6e0 <_fflush_r>
 800b65a:	2800      	cmp	r0, #0
 800b65c:	d1ed      	bne.n	800b63a <__swbuf_r+0x2a>
 800b65e:	68a3      	ldr	r3, [r4, #8]
 800b660:	3b01      	subs	r3, #1
 800b662:	60a3      	str	r3, [r4, #8]
 800b664:	6823      	ldr	r3, [r4, #0]
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	6022      	str	r2, [r4, #0]
 800b66a:	701e      	strb	r6, [r3, #0]
 800b66c:	6962      	ldr	r2, [r4, #20]
 800b66e:	1c43      	adds	r3, r0, #1
 800b670:	429a      	cmp	r2, r3
 800b672:	d004      	beq.n	800b67e <__swbuf_r+0x6e>
 800b674:	89a3      	ldrh	r3, [r4, #12]
 800b676:	07db      	lsls	r3, r3, #31
 800b678:	d5e1      	bpl.n	800b63e <__swbuf_r+0x2e>
 800b67a:	2e0a      	cmp	r6, #10
 800b67c:	d1df      	bne.n	800b63e <__swbuf_r+0x2e>
 800b67e:	4621      	mov	r1, r4
 800b680:	4628      	mov	r0, r5
 800b682:	f7ff f82d 	bl	800a6e0 <_fflush_r>
 800b686:	2800      	cmp	r0, #0
 800b688:	d0d9      	beq.n	800b63e <__swbuf_r+0x2e>
 800b68a:	e7d6      	b.n	800b63a <__swbuf_r+0x2a>

0800b68c <__swsetup_r>:
 800b68c:	b538      	push	{r3, r4, r5, lr}
 800b68e:	4b29      	ldr	r3, [pc, #164]	@ (800b734 <__swsetup_r+0xa8>)
 800b690:	4605      	mov	r5, r0
 800b692:	6818      	ldr	r0, [r3, #0]
 800b694:	460c      	mov	r4, r1
 800b696:	b118      	cbz	r0, 800b6a0 <__swsetup_r+0x14>
 800b698:	6a03      	ldr	r3, [r0, #32]
 800b69a:	b90b      	cbnz	r3, 800b6a0 <__swsetup_r+0x14>
 800b69c:	f7fc fcc6 	bl	800802c <__sinit>
 800b6a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b6a4:	0719      	lsls	r1, r3, #28
 800b6a6:	d422      	bmi.n	800b6ee <__swsetup_r+0x62>
 800b6a8:	06da      	lsls	r2, r3, #27
 800b6aa:	d407      	bmi.n	800b6bc <__swsetup_r+0x30>
 800b6ac:	2209      	movs	r2, #9
 800b6ae:	602a      	str	r2, [r5, #0]
 800b6b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b6b4:	81a3      	strh	r3, [r4, #12]
 800b6b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b6ba:	e033      	b.n	800b724 <__swsetup_r+0x98>
 800b6bc:	0758      	lsls	r0, r3, #29
 800b6be:	d512      	bpl.n	800b6e6 <__swsetup_r+0x5a>
 800b6c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b6c2:	b141      	cbz	r1, 800b6d6 <__swsetup_r+0x4a>
 800b6c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b6c8:	4299      	cmp	r1, r3
 800b6ca:	d002      	beq.n	800b6d2 <__swsetup_r+0x46>
 800b6cc:	4628      	mov	r0, r5
 800b6ce:	f7ff fdf3 	bl	800b2b8 <_free_r>
 800b6d2:	2300      	movs	r3, #0
 800b6d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800b6d6:	89a3      	ldrh	r3, [r4, #12]
 800b6d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b6dc:	81a3      	strh	r3, [r4, #12]
 800b6de:	2300      	movs	r3, #0
 800b6e0:	6063      	str	r3, [r4, #4]
 800b6e2:	6923      	ldr	r3, [r4, #16]
 800b6e4:	6023      	str	r3, [r4, #0]
 800b6e6:	89a3      	ldrh	r3, [r4, #12]
 800b6e8:	f043 0308 	orr.w	r3, r3, #8
 800b6ec:	81a3      	strh	r3, [r4, #12]
 800b6ee:	6923      	ldr	r3, [r4, #16]
 800b6f0:	b94b      	cbnz	r3, 800b706 <__swsetup_r+0x7a>
 800b6f2:	89a3      	ldrh	r3, [r4, #12]
 800b6f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b6f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b6fc:	d003      	beq.n	800b706 <__swsetup_r+0x7a>
 800b6fe:	4621      	mov	r1, r4
 800b700:	4628      	mov	r0, r5
 800b702:	f000 f83f 	bl	800b784 <__smakebuf_r>
 800b706:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b70a:	f013 0201 	ands.w	r2, r3, #1
 800b70e:	d00a      	beq.n	800b726 <__swsetup_r+0x9a>
 800b710:	2200      	movs	r2, #0
 800b712:	60a2      	str	r2, [r4, #8]
 800b714:	6962      	ldr	r2, [r4, #20]
 800b716:	4252      	negs	r2, r2
 800b718:	61a2      	str	r2, [r4, #24]
 800b71a:	6922      	ldr	r2, [r4, #16]
 800b71c:	b942      	cbnz	r2, 800b730 <__swsetup_r+0xa4>
 800b71e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b722:	d1c5      	bne.n	800b6b0 <__swsetup_r+0x24>
 800b724:	bd38      	pop	{r3, r4, r5, pc}
 800b726:	0799      	lsls	r1, r3, #30
 800b728:	bf58      	it	pl
 800b72a:	6962      	ldrpl	r2, [r4, #20]
 800b72c:	60a2      	str	r2, [r4, #8]
 800b72e:	e7f4      	b.n	800b71a <__swsetup_r+0x8e>
 800b730:	2000      	movs	r0, #0
 800b732:	e7f7      	b.n	800b724 <__swsetup_r+0x98>
 800b734:	20000184 	.word	0x20000184

0800b738 <__swhatbuf_r>:
 800b738:	b570      	push	{r4, r5, r6, lr}
 800b73a:	460c      	mov	r4, r1
 800b73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b740:	2900      	cmp	r1, #0
 800b742:	b096      	sub	sp, #88	@ 0x58
 800b744:	4615      	mov	r5, r2
 800b746:	461e      	mov	r6, r3
 800b748:	da0d      	bge.n	800b766 <__swhatbuf_r+0x2e>
 800b74a:	89a3      	ldrh	r3, [r4, #12]
 800b74c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b750:	f04f 0100 	mov.w	r1, #0
 800b754:	bf14      	ite	ne
 800b756:	2340      	movne	r3, #64	@ 0x40
 800b758:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b75c:	2000      	movs	r0, #0
 800b75e:	6031      	str	r1, [r6, #0]
 800b760:	602b      	str	r3, [r5, #0]
 800b762:	b016      	add	sp, #88	@ 0x58
 800b764:	bd70      	pop	{r4, r5, r6, pc}
 800b766:	466a      	mov	r2, sp
 800b768:	f000 f848 	bl	800b7fc <_fstat_r>
 800b76c:	2800      	cmp	r0, #0
 800b76e:	dbec      	blt.n	800b74a <__swhatbuf_r+0x12>
 800b770:	9901      	ldr	r1, [sp, #4]
 800b772:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b776:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b77a:	4259      	negs	r1, r3
 800b77c:	4159      	adcs	r1, r3
 800b77e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b782:	e7eb      	b.n	800b75c <__swhatbuf_r+0x24>

0800b784 <__smakebuf_r>:
 800b784:	898b      	ldrh	r3, [r1, #12]
 800b786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b788:	079d      	lsls	r5, r3, #30
 800b78a:	4606      	mov	r6, r0
 800b78c:	460c      	mov	r4, r1
 800b78e:	d507      	bpl.n	800b7a0 <__smakebuf_r+0x1c>
 800b790:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b794:	6023      	str	r3, [r4, #0]
 800b796:	6123      	str	r3, [r4, #16]
 800b798:	2301      	movs	r3, #1
 800b79a:	6163      	str	r3, [r4, #20]
 800b79c:	b003      	add	sp, #12
 800b79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b7a0:	ab01      	add	r3, sp, #4
 800b7a2:	466a      	mov	r2, sp
 800b7a4:	f7ff ffc8 	bl	800b738 <__swhatbuf_r>
 800b7a8:	9f00      	ldr	r7, [sp, #0]
 800b7aa:	4605      	mov	r5, r0
 800b7ac:	4639      	mov	r1, r7
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	f7fe fe80 	bl	800a4b4 <_malloc_r>
 800b7b4:	b948      	cbnz	r0, 800b7ca <__smakebuf_r+0x46>
 800b7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b7ba:	059a      	lsls	r2, r3, #22
 800b7bc:	d4ee      	bmi.n	800b79c <__smakebuf_r+0x18>
 800b7be:	f023 0303 	bic.w	r3, r3, #3
 800b7c2:	f043 0302 	orr.w	r3, r3, #2
 800b7c6:	81a3      	strh	r3, [r4, #12]
 800b7c8:	e7e2      	b.n	800b790 <__smakebuf_r+0xc>
 800b7ca:	89a3      	ldrh	r3, [r4, #12]
 800b7cc:	6020      	str	r0, [r4, #0]
 800b7ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7d2:	81a3      	strh	r3, [r4, #12]
 800b7d4:	9b01      	ldr	r3, [sp, #4]
 800b7d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b7da:	b15b      	cbz	r3, 800b7f4 <__smakebuf_r+0x70>
 800b7dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7e0:	4630      	mov	r0, r6
 800b7e2:	f000 f81d 	bl	800b820 <_isatty_r>
 800b7e6:	b128      	cbz	r0, 800b7f4 <__smakebuf_r+0x70>
 800b7e8:	89a3      	ldrh	r3, [r4, #12]
 800b7ea:	f023 0303 	bic.w	r3, r3, #3
 800b7ee:	f043 0301 	orr.w	r3, r3, #1
 800b7f2:	81a3      	strh	r3, [r4, #12]
 800b7f4:	89a3      	ldrh	r3, [r4, #12]
 800b7f6:	431d      	orrs	r5, r3
 800b7f8:	81a5      	strh	r5, [r4, #12]
 800b7fa:	e7cf      	b.n	800b79c <__smakebuf_r+0x18>

0800b7fc <_fstat_r>:
 800b7fc:	b538      	push	{r3, r4, r5, lr}
 800b7fe:	4d07      	ldr	r5, [pc, #28]	@ (800b81c <_fstat_r+0x20>)
 800b800:	2300      	movs	r3, #0
 800b802:	4604      	mov	r4, r0
 800b804:	4608      	mov	r0, r1
 800b806:	4611      	mov	r1, r2
 800b808:	602b      	str	r3, [r5, #0]
 800b80a:	f7f6 fe82 	bl	8002512 <_fstat>
 800b80e:	1c43      	adds	r3, r0, #1
 800b810:	d102      	bne.n	800b818 <_fstat_r+0x1c>
 800b812:	682b      	ldr	r3, [r5, #0]
 800b814:	b103      	cbz	r3, 800b818 <_fstat_r+0x1c>
 800b816:	6023      	str	r3, [r4, #0]
 800b818:	bd38      	pop	{r3, r4, r5, pc}
 800b81a:	bf00      	nop
 800b81c:	200009bc 	.word	0x200009bc

0800b820 <_isatty_r>:
 800b820:	b538      	push	{r3, r4, r5, lr}
 800b822:	4d06      	ldr	r5, [pc, #24]	@ (800b83c <_isatty_r+0x1c>)
 800b824:	2300      	movs	r3, #0
 800b826:	4604      	mov	r4, r0
 800b828:	4608      	mov	r0, r1
 800b82a:	602b      	str	r3, [r5, #0]
 800b82c:	f7f6 fe81 	bl	8002532 <_isatty>
 800b830:	1c43      	adds	r3, r0, #1
 800b832:	d102      	bne.n	800b83a <_isatty_r+0x1a>
 800b834:	682b      	ldr	r3, [r5, #0]
 800b836:	b103      	cbz	r3, 800b83a <_isatty_r+0x1a>
 800b838:	6023      	str	r3, [r4, #0]
 800b83a:	bd38      	pop	{r3, r4, r5, pc}
 800b83c:	200009bc 	.word	0x200009bc

0800b840 <_raise_r>:
 800b840:	291f      	cmp	r1, #31
 800b842:	b538      	push	{r3, r4, r5, lr}
 800b844:	4605      	mov	r5, r0
 800b846:	460c      	mov	r4, r1
 800b848:	d904      	bls.n	800b854 <_raise_r+0x14>
 800b84a:	2316      	movs	r3, #22
 800b84c:	6003      	str	r3, [r0, #0]
 800b84e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b852:	bd38      	pop	{r3, r4, r5, pc}
 800b854:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b856:	b112      	cbz	r2, 800b85e <_raise_r+0x1e>
 800b858:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b85c:	b94b      	cbnz	r3, 800b872 <_raise_r+0x32>
 800b85e:	4628      	mov	r0, r5
 800b860:	f000 f830 	bl	800b8c4 <_getpid_r>
 800b864:	4622      	mov	r2, r4
 800b866:	4601      	mov	r1, r0
 800b868:	4628      	mov	r0, r5
 800b86a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b86e:	f000 b817 	b.w	800b8a0 <_kill_r>
 800b872:	2b01      	cmp	r3, #1
 800b874:	d00a      	beq.n	800b88c <_raise_r+0x4c>
 800b876:	1c59      	adds	r1, r3, #1
 800b878:	d103      	bne.n	800b882 <_raise_r+0x42>
 800b87a:	2316      	movs	r3, #22
 800b87c:	6003      	str	r3, [r0, #0]
 800b87e:	2001      	movs	r0, #1
 800b880:	e7e7      	b.n	800b852 <_raise_r+0x12>
 800b882:	2100      	movs	r1, #0
 800b884:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b888:	4620      	mov	r0, r4
 800b88a:	4798      	blx	r3
 800b88c:	2000      	movs	r0, #0
 800b88e:	e7e0      	b.n	800b852 <_raise_r+0x12>

0800b890 <raise>:
 800b890:	4b02      	ldr	r3, [pc, #8]	@ (800b89c <raise+0xc>)
 800b892:	4601      	mov	r1, r0
 800b894:	6818      	ldr	r0, [r3, #0]
 800b896:	f7ff bfd3 	b.w	800b840 <_raise_r>
 800b89a:	bf00      	nop
 800b89c:	20000184 	.word	0x20000184

0800b8a0 <_kill_r>:
 800b8a0:	b538      	push	{r3, r4, r5, lr}
 800b8a2:	4d07      	ldr	r5, [pc, #28]	@ (800b8c0 <_kill_r+0x20>)
 800b8a4:	2300      	movs	r3, #0
 800b8a6:	4604      	mov	r4, r0
 800b8a8:	4608      	mov	r0, r1
 800b8aa:	4611      	mov	r1, r2
 800b8ac:	602b      	str	r3, [r5, #0]
 800b8ae:	f7f6 fdd0 	bl	8002452 <_kill>
 800b8b2:	1c43      	adds	r3, r0, #1
 800b8b4:	d102      	bne.n	800b8bc <_kill_r+0x1c>
 800b8b6:	682b      	ldr	r3, [r5, #0]
 800b8b8:	b103      	cbz	r3, 800b8bc <_kill_r+0x1c>
 800b8ba:	6023      	str	r3, [r4, #0]
 800b8bc:	bd38      	pop	{r3, r4, r5, pc}
 800b8be:	bf00      	nop
 800b8c0:	200009bc 	.word	0x200009bc

0800b8c4 <_getpid_r>:
 800b8c4:	f7f6 bdbd 	b.w	8002442 <_getpid>

0800b8c8 <cosf>:
 800b8c8:	ee10 3a10 	vmov	r3, s0
 800b8cc:	b507      	push	{r0, r1, r2, lr}
 800b8ce:	4a1e      	ldr	r2, [pc, #120]	@ (800b948 <cosf+0x80>)
 800b8d0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b8d4:	4293      	cmp	r3, r2
 800b8d6:	d806      	bhi.n	800b8e6 <cosf+0x1e>
 800b8d8:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800b94c <cosf+0x84>
 800b8dc:	b003      	add	sp, #12
 800b8de:	f85d eb04 	ldr.w	lr, [sp], #4
 800b8e2:	f000 b87b 	b.w	800b9dc <__kernel_cosf>
 800b8e6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b8ea:	d304      	bcc.n	800b8f6 <cosf+0x2e>
 800b8ec:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b8f0:	b003      	add	sp, #12
 800b8f2:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8f6:	4668      	mov	r0, sp
 800b8f8:	f000 f910 	bl	800bb1c <__ieee754_rem_pio2f>
 800b8fc:	f000 0003 	and.w	r0, r0, #3
 800b900:	2801      	cmp	r0, #1
 800b902:	d009      	beq.n	800b918 <cosf+0x50>
 800b904:	2802      	cmp	r0, #2
 800b906:	d010      	beq.n	800b92a <cosf+0x62>
 800b908:	b9b0      	cbnz	r0, 800b938 <cosf+0x70>
 800b90a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b90e:	ed9d 0a00 	vldr	s0, [sp]
 800b912:	f000 f863 	bl	800b9dc <__kernel_cosf>
 800b916:	e7eb      	b.n	800b8f0 <cosf+0x28>
 800b918:	eddd 0a01 	vldr	s1, [sp, #4]
 800b91c:	ed9d 0a00 	vldr	s0, [sp]
 800b920:	f000 f8b4 	bl	800ba8c <__kernel_sinf>
 800b924:	eeb1 0a40 	vneg.f32	s0, s0
 800b928:	e7e2      	b.n	800b8f0 <cosf+0x28>
 800b92a:	eddd 0a01 	vldr	s1, [sp, #4]
 800b92e:	ed9d 0a00 	vldr	s0, [sp]
 800b932:	f000 f853 	bl	800b9dc <__kernel_cosf>
 800b936:	e7f5      	b.n	800b924 <cosf+0x5c>
 800b938:	eddd 0a01 	vldr	s1, [sp, #4]
 800b93c:	ed9d 0a00 	vldr	s0, [sp]
 800b940:	2001      	movs	r0, #1
 800b942:	f000 f8a3 	bl	800ba8c <__kernel_sinf>
 800b946:	e7d3      	b.n	800b8f0 <cosf+0x28>
 800b948:	3f490fd8 	.word	0x3f490fd8
 800b94c:	00000000 	.word	0x00000000

0800b950 <sinf>:
 800b950:	ee10 3a10 	vmov	r3, s0
 800b954:	b507      	push	{r0, r1, r2, lr}
 800b956:	4a1f      	ldr	r2, [pc, #124]	@ (800b9d4 <sinf+0x84>)
 800b958:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b95c:	4293      	cmp	r3, r2
 800b95e:	d807      	bhi.n	800b970 <sinf+0x20>
 800b960:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800b9d8 <sinf+0x88>
 800b964:	2000      	movs	r0, #0
 800b966:	b003      	add	sp, #12
 800b968:	f85d eb04 	ldr.w	lr, [sp], #4
 800b96c:	f000 b88e 	b.w	800ba8c <__kernel_sinf>
 800b970:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800b974:	d304      	bcc.n	800b980 <sinf+0x30>
 800b976:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b97a:	b003      	add	sp, #12
 800b97c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b980:	4668      	mov	r0, sp
 800b982:	f000 f8cb 	bl	800bb1c <__ieee754_rem_pio2f>
 800b986:	f000 0003 	and.w	r0, r0, #3
 800b98a:	2801      	cmp	r0, #1
 800b98c:	d00a      	beq.n	800b9a4 <sinf+0x54>
 800b98e:	2802      	cmp	r0, #2
 800b990:	d00f      	beq.n	800b9b2 <sinf+0x62>
 800b992:	b9c0      	cbnz	r0, 800b9c6 <sinf+0x76>
 800b994:	eddd 0a01 	vldr	s1, [sp, #4]
 800b998:	ed9d 0a00 	vldr	s0, [sp]
 800b99c:	2001      	movs	r0, #1
 800b99e:	f000 f875 	bl	800ba8c <__kernel_sinf>
 800b9a2:	e7ea      	b.n	800b97a <sinf+0x2a>
 800b9a4:	eddd 0a01 	vldr	s1, [sp, #4]
 800b9a8:	ed9d 0a00 	vldr	s0, [sp]
 800b9ac:	f000 f816 	bl	800b9dc <__kernel_cosf>
 800b9b0:	e7e3      	b.n	800b97a <sinf+0x2a>
 800b9b2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b9b6:	ed9d 0a00 	vldr	s0, [sp]
 800b9ba:	2001      	movs	r0, #1
 800b9bc:	f000 f866 	bl	800ba8c <__kernel_sinf>
 800b9c0:	eeb1 0a40 	vneg.f32	s0, s0
 800b9c4:	e7d9      	b.n	800b97a <sinf+0x2a>
 800b9c6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b9ca:	ed9d 0a00 	vldr	s0, [sp]
 800b9ce:	f000 f805 	bl	800b9dc <__kernel_cosf>
 800b9d2:	e7f5      	b.n	800b9c0 <sinf+0x70>
 800b9d4:	3f490fd8 	.word	0x3f490fd8
 800b9d8:	00000000 	.word	0x00000000

0800b9dc <__kernel_cosf>:
 800b9dc:	ee10 3a10 	vmov	r3, s0
 800b9e0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800b9e4:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800b9e8:	eef0 6a40 	vmov.f32	s13, s0
 800b9ec:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800b9f0:	d204      	bcs.n	800b9fc <__kernel_cosf+0x20>
 800b9f2:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800b9f6:	ee17 2a90 	vmov	r2, s15
 800b9fa:	b342      	cbz	r2, 800ba4e <__kernel_cosf+0x72>
 800b9fc:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ba00:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800ba6c <__kernel_cosf+0x90>
 800ba04:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800ba70 <__kernel_cosf+0x94>
 800ba08:	4a1a      	ldr	r2, [pc, #104]	@ (800ba74 <__kernel_cosf+0x98>)
 800ba0a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800ba0e:	4293      	cmp	r3, r2
 800ba10:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800ba78 <__kernel_cosf+0x9c>
 800ba14:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ba18:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800ba7c <__kernel_cosf+0xa0>
 800ba1c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ba20:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800ba80 <__kernel_cosf+0xa4>
 800ba24:	eee6 7a07 	vfma.f32	s15, s12, s14
 800ba28:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800ba84 <__kernel_cosf+0xa8>
 800ba2c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800ba30:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800ba34:	ee26 6a07 	vmul.f32	s12, s12, s14
 800ba38:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ba3c:	eee7 0a06 	vfma.f32	s1, s14, s12
 800ba40:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ba44:	d804      	bhi.n	800ba50 <__kernel_cosf+0x74>
 800ba46:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800ba4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ba4e:	4770      	bx	lr
 800ba50:	4a0d      	ldr	r2, [pc, #52]	@ (800ba88 <__kernel_cosf+0xac>)
 800ba52:	4293      	cmp	r3, r2
 800ba54:	bf9a      	itte	ls
 800ba56:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800ba5a:	ee07 3a10 	vmovls	s14, r3
 800ba5e:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800ba62:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ba66:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ba6a:	e7ec      	b.n	800ba46 <__kernel_cosf+0x6a>
 800ba6c:	ad47d74e 	.word	0xad47d74e
 800ba70:	310f74f6 	.word	0x310f74f6
 800ba74:	3e999999 	.word	0x3e999999
 800ba78:	b493f27c 	.word	0xb493f27c
 800ba7c:	37d00d01 	.word	0x37d00d01
 800ba80:	bab60b61 	.word	0xbab60b61
 800ba84:	3d2aaaab 	.word	0x3d2aaaab
 800ba88:	3f480000 	.word	0x3f480000

0800ba8c <__kernel_sinf>:
 800ba8c:	ee10 3a10 	vmov	r3, s0
 800ba90:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ba94:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800ba98:	d204      	bcs.n	800baa4 <__kernel_sinf+0x18>
 800ba9a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800ba9e:	ee17 3a90 	vmov	r3, s15
 800baa2:	b35b      	cbz	r3, 800bafc <__kernel_sinf+0x70>
 800baa4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800baa8:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bb00 <__kernel_sinf+0x74>
 800baac:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800bb04 <__kernel_sinf+0x78>
 800bab0:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bab4:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800bb08 <__kernel_sinf+0x7c>
 800bab8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800babc:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800bb0c <__kernel_sinf+0x80>
 800bac0:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bac4:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800bb10 <__kernel_sinf+0x84>
 800bac8:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bacc:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bad0:	b930      	cbnz	r0, 800bae0 <__kernel_sinf+0x54>
 800bad2:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800bb14 <__kernel_sinf+0x88>
 800bad6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bada:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bade:	4770      	bx	lr
 800bae0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bae4:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800bae8:	eee0 7a86 	vfma.f32	s15, s1, s12
 800baec:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800baf0:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800bb18 <__kernel_sinf+0x8c>
 800baf4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800baf8:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bafc:	4770      	bx	lr
 800bafe:	bf00      	nop
 800bb00:	2f2ec9d3 	.word	0x2f2ec9d3
 800bb04:	b2d72f34 	.word	0xb2d72f34
 800bb08:	3638ef1b 	.word	0x3638ef1b
 800bb0c:	b9500d01 	.word	0xb9500d01
 800bb10:	3c088889 	.word	0x3c088889
 800bb14:	be2aaaab 	.word	0xbe2aaaab
 800bb18:	3e2aaaab 	.word	0x3e2aaaab

0800bb1c <__ieee754_rem_pio2f>:
 800bb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb1e:	ee10 6a10 	vmov	r6, s0
 800bb22:	4b88      	ldr	r3, [pc, #544]	@ (800bd44 <__ieee754_rem_pio2f+0x228>)
 800bb24:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800bb28:	429d      	cmp	r5, r3
 800bb2a:	b087      	sub	sp, #28
 800bb2c:	4604      	mov	r4, r0
 800bb2e:	d805      	bhi.n	800bb3c <__ieee754_rem_pio2f+0x20>
 800bb30:	2300      	movs	r3, #0
 800bb32:	ed80 0a00 	vstr	s0, [r0]
 800bb36:	6043      	str	r3, [r0, #4]
 800bb38:	2000      	movs	r0, #0
 800bb3a:	e022      	b.n	800bb82 <__ieee754_rem_pio2f+0x66>
 800bb3c:	4b82      	ldr	r3, [pc, #520]	@ (800bd48 <__ieee754_rem_pio2f+0x22c>)
 800bb3e:	429d      	cmp	r5, r3
 800bb40:	d83a      	bhi.n	800bbb8 <__ieee754_rem_pio2f+0x9c>
 800bb42:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bb46:	2e00      	cmp	r6, #0
 800bb48:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800bd4c <__ieee754_rem_pio2f+0x230>
 800bb4c:	4a80      	ldr	r2, [pc, #512]	@ (800bd50 <__ieee754_rem_pio2f+0x234>)
 800bb4e:	f023 030f 	bic.w	r3, r3, #15
 800bb52:	dd18      	ble.n	800bb86 <__ieee754_rem_pio2f+0x6a>
 800bb54:	4293      	cmp	r3, r2
 800bb56:	ee70 7a47 	vsub.f32	s15, s0, s14
 800bb5a:	bf09      	itett	eq
 800bb5c:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800bd54 <__ieee754_rem_pio2f+0x238>
 800bb60:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800bd58 <__ieee754_rem_pio2f+0x23c>
 800bb64:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800bd5c <__ieee754_rem_pio2f+0x240>
 800bb68:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800bb6c:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800bb70:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bb74:	ed80 7a00 	vstr	s14, [r0]
 800bb78:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bb7c:	edc0 7a01 	vstr	s15, [r0, #4]
 800bb80:	2001      	movs	r0, #1
 800bb82:	b007      	add	sp, #28
 800bb84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bb86:	4293      	cmp	r3, r2
 800bb88:	ee70 7a07 	vadd.f32	s15, s0, s14
 800bb8c:	bf09      	itett	eq
 800bb8e:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800bd54 <__ieee754_rem_pio2f+0x238>
 800bb92:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800bd58 <__ieee754_rem_pio2f+0x23c>
 800bb96:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800bd5c <__ieee754_rem_pio2f+0x240>
 800bb9a:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800bb9e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800bba2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bba6:	ed80 7a00 	vstr	s14, [r0]
 800bbaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbae:	edc0 7a01 	vstr	s15, [r0, #4]
 800bbb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bbb6:	e7e4      	b.n	800bb82 <__ieee754_rem_pio2f+0x66>
 800bbb8:	4b69      	ldr	r3, [pc, #420]	@ (800bd60 <__ieee754_rem_pio2f+0x244>)
 800bbba:	429d      	cmp	r5, r3
 800bbbc:	d873      	bhi.n	800bca6 <__ieee754_rem_pio2f+0x18a>
 800bbbe:	f000 f8dd 	bl	800bd7c <fabsf>
 800bbc2:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800bd64 <__ieee754_rem_pio2f+0x248>
 800bbc6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bbca:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bbce:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bbd2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800bbd6:	ee17 0a90 	vmov	r0, s15
 800bbda:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bd4c <__ieee754_rem_pio2f+0x230>
 800bbde:	eea7 0a67 	vfms.f32	s0, s14, s15
 800bbe2:	281f      	cmp	r0, #31
 800bbe4:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800bd58 <__ieee754_rem_pio2f+0x23c>
 800bbe8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbec:	eeb1 6a47 	vneg.f32	s12, s14
 800bbf0:	ee70 6a67 	vsub.f32	s13, s0, s15
 800bbf4:	ee16 1a90 	vmov	r1, s13
 800bbf8:	dc09      	bgt.n	800bc0e <__ieee754_rem_pio2f+0xf2>
 800bbfa:	4a5b      	ldr	r2, [pc, #364]	@ (800bd68 <__ieee754_rem_pio2f+0x24c>)
 800bbfc:	1e47      	subs	r7, r0, #1
 800bbfe:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800bc02:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800bc06:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800bc0a:	4293      	cmp	r3, r2
 800bc0c:	d107      	bne.n	800bc1e <__ieee754_rem_pio2f+0x102>
 800bc0e:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800bc12:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800bc16:	2a08      	cmp	r2, #8
 800bc18:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800bc1c:	dc14      	bgt.n	800bc48 <__ieee754_rem_pio2f+0x12c>
 800bc1e:	6021      	str	r1, [r4, #0]
 800bc20:	ed94 7a00 	vldr	s14, [r4]
 800bc24:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bc28:	2e00      	cmp	r6, #0
 800bc2a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bc2e:	ed84 0a01 	vstr	s0, [r4, #4]
 800bc32:	daa6      	bge.n	800bb82 <__ieee754_rem_pio2f+0x66>
 800bc34:	eeb1 7a47 	vneg.f32	s14, s14
 800bc38:	eeb1 0a40 	vneg.f32	s0, s0
 800bc3c:	ed84 7a00 	vstr	s14, [r4]
 800bc40:	ed84 0a01 	vstr	s0, [r4, #4]
 800bc44:	4240      	negs	r0, r0
 800bc46:	e79c      	b.n	800bb82 <__ieee754_rem_pio2f+0x66>
 800bc48:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800bd54 <__ieee754_rem_pio2f+0x238>
 800bc4c:	eef0 6a40 	vmov.f32	s13, s0
 800bc50:	eee6 6a25 	vfma.f32	s13, s12, s11
 800bc54:	ee70 7a66 	vsub.f32	s15, s0, s13
 800bc58:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bc5c:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800bd5c <__ieee754_rem_pio2f+0x240>
 800bc60:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800bc64:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800bc68:	ee15 2a90 	vmov	r2, s11
 800bc6c:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800bc70:	1a5b      	subs	r3, r3, r1
 800bc72:	2b19      	cmp	r3, #25
 800bc74:	dc04      	bgt.n	800bc80 <__ieee754_rem_pio2f+0x164>
 800bc76:	edc4 5a00 	vstr	s11, [r4]
 800bc7a:	eeb0 0a66 	vmov.f32	s0, s13
 800bc7e:	e7cf      	b.n	800bc20 <__ieee754_rem_pio2f+0x104>
 800bc80:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800bd6c <__ieee754_rem_pio2f+0x250>
 800bc84:	eeb0 0a66 	vmov.f32	s0, s13
 800bc88:	eea6 0a25 	vfma.f32	s0, s12, s11
 800bc8c:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800bc90:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800bd70 <__ieee754_rem_pio2f+0x254>
 800bc94:	eee6 7a25 	vfma.f32	s15, s12, s11
 800bc98:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800bc9c:	ee30 7a67 	vsub.f32	s14, s0, s15
 800bca0:	ed84 7a00 	vstr	s14, [r4]
 800bca4:	e7bc      	b.n	800bc20 <__ieee754_rem_pio2f+0x104>
 800bca6:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800bcaa:	d306      	bcc.n	800bcba <__ieee754_rem_pio2f+0x19e>
 800bcac:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bcb0:	edc0 7a01 	vstr	s15, [r0, #4]
 800bcb4:	edc0 7a00 	vstr	s15, [r0]
 800bcb8:	e73e      	b.n	800bb38 <__ieee754_rem_pio2f+0x1c>
 800bcba:	15ea      	asrs	r2, r5, #23
 800bcbc:	3a86      	subs	r2, #134	@ 0x86
 800bcbe:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800bcc2:	ee07 3a90 	vmov	s15, r3
 800bcc6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bcca:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800bd74 <__ieee754_rem_pio2f+0x258>
 800bcce:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bcd2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bcd6:	ed8d 7a03 	vstr	s14, [sp, #12]
 800bcda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcde:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800bce2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800bce6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bcea:	ed8d 7a04 	vstr	s14, [sp, #16]
 800bcee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800bcf2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800bcf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcfa:	edcd 7a05 	vstr	s15, [sp, #20]
 800bcfe:	d11e      	bne.n	800bd3e <__ieee754_rem_pio2f+0x222>
 800bd00:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800bd04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd08:	bf0c      	ite	eq
 800bd0a:	2301      	moveq	r3, #1
 800bd0c:	2302      	movne	r3, #2
 800bd0e:	491a      	ldr	r1, [pc, #104]	@ (800bd78 <__ieee754_rem_pio2f+0x25c>)
 800bd10:	9101      	str	r1, [sp, #4]
 800bd12:	2102      	movs	r1, #2
 800bd14:	9100      	str	r1, [sp, #0]
 800bd16:	a803      	add	r0, sp, #12
 800bd18:	4621      	mov	r1, r4
 800bd1a:	f000 f837 	bl	800bd8c <__kernel_rem_pio2f>
 800bd1e:	2e00      	cmp	r6, #0
 800bd20:	f6bf af2f 	bge.w	800bb82 <__ieee754_rem_pio2f+0x66>
 800bd24:	edd4 7a00 	vldr	s15, [r4]
 800bd28:	eef1 7a67 	vneg.f32	s15, s15
 800bd2c:	edc4 7a00 	vstr	s15, [r4]
 800bd30:	edd4 7a01 	vldr	s15, [r4, #4]
 800bd34:	eef1 7a67 	vneg.f32	s15, s15
 800bd38:	edc4 7a01 	vstr	s15, [r4, #4]
 800bd3c:	e782      	b.n	800bc44 <__ieee754_rem_pio2f+0x128>
 800bd3e:	2303      	movs	r3, #3
 800bd40:	e7e5      	b.n	800bd0e <__ieee754_rem_pio2f+0x1f2>
 800bd42:	bf00      	nop
 800bd44:	3f490fd8 	.word	0x3f490fd8
 800bd48:	4016cbe3 	.word	0x4016cbe3
 800bd4c:	3fc90f80 	.word	0x3fc90f80
 800bd50:	3fc90fd0 	.word	0x3fc90fd0
 800bd54:	37354400 	.word	0x37354400
 800bd58:	37354443 	.word	0x37354443
 800bd5c:	2e85a308 	.word	0x2e85a308
 800bd60:	43490f80 	.word	0x43490f80
 800bd64:	3f22f984 	.word	0x3f22f984
 800bd68:	08010fcc 	.word	0x08010fcc
 800bd6c:	2e85a300 	.word	0x2e85a300
 800bd70:	248d3132 	.word	0x248d3132
 800bd74:	43800000 	.word	0x43800000
 800bd78:	0801104c 	.word	0x0801104c

0800bd7c <fabsf>:
 800bd7c:	ee10 3a10 	vmov	r3, s0
 800bd80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd84:	ee00 3a10 	vmov	s0, r3
 800bd88:	4770      	bx	lr
	...

0800bd8c <__kernel_rem_pio2f>:
 800bd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd90:	ed2d 8b04 	vpush	{d8-d9}
 800bd94:	b0d9      	sub	sp, #356	@ 0x164
 800bd96:	4690      	mov	r8, r2
 800bd98:	9001      	str	r0, [sp, #4]
 800bd9a:	4ab9      	ldr	r2, [pc, #740]	@ (800c080 <__kernel_rem_pio2f+0x2f4>)
 800bd9c:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800bd9e:	f118 0f04 	cmn.w	r8, #4
 800bda2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800bda6:	460f      	mov	r7, r1
 800bda8:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800bdac:	db27      	blt.n	800bdfe <__kernel_rem_pio2f+0x72>
 800bdae:	f1b8 0203 	subs.w	r2, r8, #3
 800bdb2:	bf48      	it	mi
 800bdb4:	f108 0204 	addmi.w	r2, r8, #4
 800bdb8:	10d2      	asrs	r2, r2, #3
 800bdba:	1c55      	adds	r5, r2, #1
 800bdbc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800bdbe:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 800c090 <__kernel_rem_pio2f+0x304>
 800bdc2:	00e8      	lsls	r0, r5, #3
 800bdc4:	eba2 060b 	sub.w	r6, r2, fp
 800bdc8:	9002      	str	r0, [sp, #8]
 800bdca:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800bdce:	eb0a 0c0b 	add.w	ip, sl, fp
 800bdd2:	ac1c      	add	r4, sp, #112	@ 0x70
 800bdd4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800bdd8:	2000      	movs	r0, #0
 800bdda:	4560      	cmp	r0, ip
 800bddc:	dd11      	ble.n	800be02 <__kernel_rem_pio2f+0x76>
 800bdde:	a91c      	add	r1, sp, #112	@ 0x70
 800bde0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800bde4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800bde8:	f04f 0c00 	mov.w	ip, #0
 800bdec:	45d4      	cmp	ip, sl
 800bdee:	dc27      	bgt.n	800be40 <__kernel_rem_pio2f+0xb4>
 800bdf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 800bdf4:	eddf 7aa6 	vldr	s15, [pc, #664]	@ 800c090 <__kernel_rem_pio2f+0x304>
 800bdf8:	4606      	mov	r6, r0
 800bdfa:	2400      	movs	r4, #0
 800bdfc:	e016      	b.n	800be2c <__kernel_rem_pio2f+0xa0>
 800bdfe:	2200      	movs	r2, #0
 800be00:	e7db      	b.n	800bdba <__kernel_rem_pio2f+0x2e>
 800be02:	42c6      	cmn	r6, r0
 800be04:	bf5d      	ittte	pl
 800be06:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800be0a:	ee07 1a90 	vmovpl	s15, r1
 800be0e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800be12:	eef0 7a47 	vmovmi.f32	s15, s14
 800be16:	ece4 7a01 	vstmia	r4!, {s15}
 800be1a:	3001      	adds	r0, #1
 800be1c:	e7dd      	b.n	800bdda <__kernel_rem_pio2f+0x4e>
 800be1e:	ecfe 6a01 	vldmia	lr!, {s13}
 800be22:	ed96 7a00 	vldr	s14, [r6]
 800be26:	eee6 7a87 	vfma.f32	s15, s13, s14
 800be2a:	3401      	adds	r4, #1
 800be2c:	455c      	cmp	r4, fp
 800be2e:	f1a6 0604 	sub.w	r6, r6, #4
 800be32:	ddf4      	ble.n	800be1e <__kernel_rem_pio2f+0x92>
 800be34:	ece9 7a01 	vstmia	r9!, {s15}
 800be38:	f10c 0c01 	add.w	ip, ip, #1
 800be3c:	3004      	adds	r0, #4
 800be3e:	e7d5      	b.n	800bdec <__kernel_rem_pio2f+0x60>
 800be40:	a908      	add	r1, sp, #32
 800be42:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800be46:	9104      	str	r1, [sp, #16]
 800be48:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800be4a:	eddf 8a90 	vldr	s17, [pc, #576]	@ 800c08c <__kernel_rem_pio2f+0x300>
 800be4e:	ed9f 9a8e 	vldr	s18, [pc, #568]	@ 800c088 <__kernel_rem_pio2f+0x2fc>
 800be52:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800be56:	9203      	str	r2, [sp, #12]
 800be58:	4654      	mov	r4, sl
 800be5a:	00a2      	lsls	r2, r4, #2
 800be5c:	9205      	str	r2, [sp, #20]
 800be5e:	aa58      	add	r2, sp, #352	@ 0x160
 800be60:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800be64:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800be68:	a944      	add	r1, sp, #272	@ 0x110
 800be6a:	aa08      	add	r2, sp, #32
 800be6c:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800be70:	4694      	mov	ip, r2
 800be72:	4626      	mov	r6, r4
 800be74:	2e00      	cmp	r6, #0
 800be76:	f1a0 0004 	sub.w	r0, r0, #4
 800be7a:	dc4c      	bgt.n	800bf16 <__kernel_rem_pio2f+0x18a>
 800be7c:	4628      	mov	r0, r5
 800be7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be82:	f000 fa39 	bl	800c2f8 <scalbnf>
 800be86:	eeb0 8a40 	vmov.f32	s16, s0
 800be8a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800be8e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800be92:	f000 f9ed 	bl	800c270 <floorf>
 800be96:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800be9a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800be9e:	2d00      	cmp	r5, #0
 800bea0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bea4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800bea8:	ee17 9a90 	vmov	r9, s15
 800beac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800beb0:	ee38 8a67 	vsub.f32	s16, s16, s15
 800beb4:	dd41      	ble.n	800bf3a <__kernel_rem_pio2f+0x1ae>
 800beb6:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800beba:	a908      	add	r1, sp, #32
 800bebc:	f1c5 0e08 	rsb	lr, r5, #8
 800bec0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800bec4:	fa46 f00e 	asr.w	r0, r6, lr
 800bec8:	4481      	add	r9, r0
 800beca:	fa00 f00e 	lsl.w	r0, r0, lr
 800bece:	1a36      	subs	r6, r6, r0
 800bed0:	f1c5 0007 	rsb	r0, r5, #7
 800bed4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800bed8:	4106      	asrs	r6, r0
 800beda:	2e00      	cmp	r6, #0
 800bedc:	dd3c      	ble.n	800bf58 <__kernel_rem_pio2f+0x1cc>
 800bede:	f04f 0e00 	mov.w	lr, #0
 800bee2:	f109 0901 	add.w	r9, r9, #1
 800bee6:	4670      	mov	r0, lr
 800bee8:	4574      	cmp	r4, lr
 800beea:	dc68      	bgt.n	800bfbe <__kernel_rem_pio2f+0x232>
 800beec:	2d00      	cmp	r5, #0
 800beee:	dd03      	ble.n	800bef8 <__kernel_rem_pio2f+0x16c>
 800bef0:	2d01      	cmp	r5, #1
 800bef2:	d074      	beq.n	800bfde <__kernel_rem_pio2f+0x252>
 800bef4:	2d02      	cmp	r5, #2
 800bef6:	d07d      	beq.n	800bff4 <__kernel_rem_pio2f+0x268>
 800bef8:	2e02      	cmp	r6, #2
 800befa:	d12d      	bne.n	800bf58 <__kernel_rem_pio2f+0x1cc>
 800befc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bf00:	ee30 8a48 	vsub.f32	s16, s0, s16
 800bf04:	b340      	cbz	r0, 800bf58 <__kernel_rem_pio2f+0x1cc>
 800bf06:	4628      	mov	r0, r5
 800bf08:	9306      	str	r3, [sp, #24]
 800bf0a:	f000 f9f5 	bl	800c2f8 <scalbnf>
 800bf0e:	9b06      	ldr	r3, [sp, #24]
 800bf10:	ee38 8a40 	vsub.f32	s16, s16, s0
 800bf14:	e020      	b.n	800bf58 <__kernel_rem_pio2f+0x1cc>
 800bf16:	ee60 7a28 	vmul.f32	s15, s0, s17
 800bf1a:	3e01      	subs	r6, #1
 800bf1c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800bf20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800bf24:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800bf28:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800bf2c:	ecac 0a01 	vstmia	ip!, {s0}
 800bf30:	ed90 0a00 	vldr	s0, [r0]
 800bf34:	ee37 0a80 	vadd.f32	s0, s15, s0
 800bf38:	e79c      	b.n	800be74 <__kernel_rem_pio2f+0xe8>
 800bf3a:	d105      	bne.n	800bf48 <__kernel_rem_pio2f+0x1bc>
 800bf3c:	1e60      	subs	r0, r4, #1
 800bf3e:	a908      	add	r1, sp, #32
 800bf40:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800bf44:	11f6      	asrs	r6, r6, #7
 800bf46:	e7c8      	b.n	800beda <__kernel_rem_pio2f+0x14e>
 800bf48:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bf4c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bf50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf54:	da31      	bge.n	800bfba <__kernel_rem_pio2f+0x22e>
 800bf56:	2600      	movs	r6, #0
 800bf58:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bf5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf60:	f040 8098 	bne.w	800c094 <__kernel_rem_pio2f+0x308>
 800bf64:	1e60      	subs	r0, r4, #1
 800bf66:	2200      	movs	r2, #0
 800bf68:	4550      	cmp	r0, sl
 800bf6a:	da4b      	bge.n	800c004 <__kernel_rem_pio2f+0x278>
 800bf6c:	2a00      	cmp	r2, #0
 800bf6e:	d065      	beq.n	800c03c <__kernel_rem_pio2f+0x2b0>
 800bf70:	3c01      	subs	r4, #1
 800bf72:	ab08      	add	r3, sp, #32
 800bf74:	3d08      	subs	r5, #8
 800bf76:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d0f8      	beq.n	800bf70 <__kernel_rem_pio2f+0x1e4>
 800bf7e:	4628      	mov	r0, r5
 800bf80:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bf84:	f000 f9b8 	bl	800c2f8 <scalbnf>
 800bf88:	1c63      	adds	r3, r4, #1
 800bf8a:	aa44      	add	r2, sp, #272	@ 0x110
 800bf8c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800c08c <__kernel_rem_pio2f+0x300>
 800bf90:	0099      	lsls	r1, r3, #2
 800bf92:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800bf96:	4623      	mov	r3, r4
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	f280 80a9 	bge.w	800c0f0 <__kernel_rem_pio2f+0x364>
 800bf9e:	4623      	mov	r3, r4
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	f2c0 80c7 	blt.w	800c134 <__kernel_rem_pio2f+0x3a8>
 800bfa6:	aa44      	add	r2, sp, #272	@ 0x110
 800bfa8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800bfac:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800c084 <__kernel_rem_pio2f+0x2f8>
 800bfb0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800c090 <__kernel_rem_pio2f+0x304>
 800bfb4:	2000      	movs	r0, #0
 800bfb6:	1ae2      	subs	r2, r4, r3
 800bfb8:	e0b1      	b.n	800c11e <__kernel_rem_pio2f+0x392>
 800bfba:	2602      	movs	r6, #2
 800bfbc:	e78f      	b.n	800bede <__kernel_rem_pio2f+0x152>
 800bfbe:	f852 1b04 	ldr.w	r1, [r2], #4
 800bfc2:	b948      	cbnz	r0, 800bfd8 <__kernel_rem_pio2f+0x24c>
 800bfc4:	b121      	cbz	r1, 800bfd0 <__kernel_rem_pio2f+0x244>
 800bfc6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800bfca:	f842 1c04 	str.w	r1, [r2, #-4]
 800bfce:	2101      	movs	r1, #1
 800bfd0:	f10e 0e01 	add.w	lr, lr, #1
 800bfd4:	4608      	mov	r0, r1
 800bfd6:	e787      	b.n	800bee8 <__kernel_rem_pio2f+0x15c>
 800bfd8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800bfdc:	e7f5      	b.n	800bfca <__kernel_rem_pio2f+0x23e>
 800bfde:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800bfe2:	aa08      	add	r2, sp, #32
 800bfe4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bfe8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800bfec:	a908      	add	r1, sp, #32
 800bfee:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800bff2:	e781      	b.n	800bef8 <__kernel_rem_pio2f+0x16c>
 800bff4:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800bff8:	aa08      	add	r2, sp, #32
 800bffa:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800bffe:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800c002:	e7f3      	b.n	800bfec <__kernel_rem_pio2f+0x260>
 800c004:	a908      	add	r1, sp, #32
 800c006:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800c00a:	3801      	subs	r0, #1
 800c00c:	430a      	orrs	r2, r1
 800c00e:	e7ab      	b.n	800bf68 <__kernel_rem_pio2f+0x1dc>
 800c010:	3201      	adds	r2, #1
 800c012:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800c016:	2e00      	cmp	r6, #0
 800c018:	d0fa      	beq.n	800c010 <__kernel_rem_pio2f+0x284>
 800c01a:	9905      	ldr	r1, [sp, #20]
 800c01c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800c020:	eb0d 0001 	add.w	r0, sp, r1
 800c024:	18e6      	adds	r6, r4, r3
 800c026:	a91c      	add	r1, sp, #112	@ 0x70
 800c028:	f104 0c01 	add.w	ip, r4, #1
 800c02c:	384c      	subs	r0, #76	@ 0x4c
 800c02e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800c032:	4422      	add	r2, r4
 800c034:	4562      	cmp	r2, ip
 800c036:	da04      	bge.n	800c042 <__kernel_rem_pio2f+0x2b6>
 800c038:	4614      	mov	r4, r2
 800c03a:	e70e      	b.n	800be5a <__kernel_rem_pio2f+0xce>
 800c03c:	9804      	ldr	r0, [sp, #16]
 800c03e:	2201      	movs	r2, #1
 800c040:	e7e7      	b.n	800c012 <__kernel_rem_pio2f+0x286>
 800c042:	9903      	ldr	r1, [sp, #12]
 800c044:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c048:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800c04c:	9105      	str	r1, [sp, #20]
 800c04e:	ee07 1a90 	vmov	s15, r1
 800c052:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c056:	2400      	movs	r4, #0
 800c058:	ece6 7a01 	vstmia	r6!, {s15}
 800c05c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800c090 <__kernel_rem_pio2f+0x304>
 800c060:	46b1      	mov	r9, r6
 800c062:	455c      	cmp	r4, fp
 800c064:	dd04      	ble.n	800c070 <__kernel_rem_pio2f+0x2e4>
 800c066:	ece0 7a01 	vstmia	r0!, {s15}
 800c06a:	f10c 0c01 	add.w	ip, ip, #1
 800c06e:	e7e1      	b.n	800c034 <__kernel_rem_pio2f+0x2a8>
 800c070:	ecfe 6a01 	vldmia	lr!, {s13}
 800c074:	ed39 7a01 	vldmdb	r9!, {s14}
 800c078:	3401      	adds	r4, #1
 800c07a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c07e:	e7f0      	b.n	800c062 <__kernel_rem_pio2f+0x2d6>
 800c080:	08011390 	.word	0x08011390
 800c084:	08011364 	.word	0x08011364
 800c088:	43800000 	.word	0x43800000
 800c08c:	3b800000 	.word	0x3b800000
 800c090:	00000000 	.word	0x00000000
 800c094:	9b02      	ldr	r3, [sp, #8]
 800c096:	eeb0 0a48 	vmov.f32	s0, s16
 800c09a:	eba3 0008 	sub.w	r0, r3, r8
 800c09e:	f000 f92b 	bl	800c2f8 <scalbnf>
 800c0a2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800c088 <__kernel_rem_pio2f+0x2fc>
 800c0a6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800c0aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0ae:	db19      	blt.n	800c0e4 <__kernel_rem_pio2f+0x358>
 800c0b0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800c08c <__kernel_rem_pio2f+0x300>
 800c0b4:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c0b8:	aa08      	add	r2, sp, #32
 800c0ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0be:	3508      	adds	r5, #8
 800c0c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c0c4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c0c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c0cc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c0d0:	ee10 3a10 	vmov	r3, s0
 800c0d4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c0d8:	ee17 3a90 	vmov	r3, s15
 800c0dc:	3401      	adds	r4, #1
 800c0de:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800c0e2:	e74c      	b.n	800bf7e <__kernel_rem_pio2f+0x1f2>
 800c0e4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c0e8:	aa08      	add	r2, sp, #32
 800c0ea:	ee10 3a10 	vmov	r3, s0
 800c0ee:	e7f6      	b.n	800c0de <__kernel_rem_pio2f+0x352>
 800c0f0:	a808      	add	r0, sp, #32
 800c0f2:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800c0f6:	9001      	str	r0, [sp, #4]
 800c0f8:	ee07 0a90 	vmov	s15, r0
 800c0fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c100:	3b01      	subs	r3, #1
 800c102:	ee67 7a80 	vmul.f32	s15, s15, s0
 800c106:	ee20 0a07 	vmul.f32	s0, s0, s14
 800c10a:	ed62 7a01 	vstmdb	r2!, {s15}
 800c10e:	e743      	b.n	800bf98 <__kernel_rem_pio2f+0x20c>
 800c110:	ecfc 6a01 	vldmia	ip!, {s13}
 800c114:	ecb5 7a01 	vldmia	r5!, {s14}
 800c118:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c11c:	3001      	adds	r0, #1
 800c11e:	4550      	cmp	r0, sl
 800c120:	dc01      	bgt.n	800c126 <__kernel_rem_pio2f+0x39a>
 800c122:	4282      	cmp	r2, r0
 800c124:	daf4      	bge.n	800c110 <__kernel_rem_pio2f+0x384>
 800c126:	a858      	add	r0, sp, #352	@ 0x160
 800c128:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800c12c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800c130:	3b01      	subs	r3, #1
 800c132:	e735      	b.n	800bfa0 <__kernel_rem_pio2f+0x214>
 800c134:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c136:	2b02      	cmp	r3, #2
 800c138:	dc09      	bgt.n	800c14e <__kernel_rem_pio2f+0x3c2>
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	dc2b      	bgt.n	800c196 <__kernel_rem_pio2f+0x40a>
 800c13e:	d044      	beq.n	800c1ca <__kernel_rem_pio2f+0x43e>
 800c140:	f009 0007 	and.w	r0, r9, #7
 800c144:	b059      	add	sp, #356	@ 0x164
 800c146:	ecbd 8b04 	vpop	{d8-d9}
 800c14a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c14e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800c150:	2b03      	cmp	r3, #3
 800c152:	d1f5      	bne.n	800c140 <__kernel_rem_pio2f+0x3b4>
 800c154:	aa30      	add	r2, sp, #192	@ 0xc0
 800c156:	1f0b      	subs	r3, r1, #4
 800c158:	4413      	add	r3, r2
 800c15a:	461a      	mov	r2, r3
 800c15c:	4620      	mov	r0, r4
 800c15e:	2800      	cmp	r0, #0
 800c160:	f1a2 0204 	sub.w	r2, r2, #4
 800c164:	dc52      	bgt.n	800c20c <__kernel_rem_pio2f+0x480>
 800c166:	4622      	mov	r2, r4
 800c168:	2a01      	cmp	r2, #1
 800c16a:	f1a3 0304 	sub.w	r3, r3, #4
 800c16e:	dc5d      	bgt.n	800c22c <__kernel_rem_pio2f+0x4a0>
 800c170:	ab30      	add	r3, sp, #192	@ 0xc0
 800c172:	ed5f 7a39 	vldr	s15, [pc, #-228]	@ 800c090 <__kernel_rem_pio2f+0x304>
 800c176:	440b      	add	r3, r1
 800c178:	2c01      	cmp	r4, #1
 800c17a:	dc67      	bgt.n	800c24c <__kernel_rem_pio2f+0x4c0>
 800c17c:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800c180:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800c184:	2e00      	cmp	r6, #0
 800c186:	d167      	bne.n	800c258 <__kernel_rem_pio2f+0x4cc>
 800c188:	edc7 6a00 	vstr	s13, [r7]
 800c18c:	ed87 7a01 	vstr	s14, [r7, #4]
 800c190:	edc7 7a02 	vstr	s15, [r7, #8]
 800c194:	e7d4      	b.n	800c140 <__kernel_rem_pio2f+0x3b4>
 800c196:	ab30      	add	r3, sp, #192	@ 0xc0
 800c198:	ed1f 7a43 	vldr	s14, [pc, #-268]	@ 800c090 <__kernel_rem_pio2f+0x304>
 800c19c:	440b      	add	r3, r1
 800c19e:	4622      	mov	r2, r4
 800c1a0:	2a00      	cmp	r2, #0
 800c1a2:	da24      	bge.n	800c1ee <__kernel_rem_pio2f+0x462>
 800c1a4:	b34e      	cbz	r6, 800c1fa <__kernel_rem_pio2f+0x46e>
 800c1a6:	eef1 7a47 	vneg.f32	s15, s14
 800c1aa:	edc7 7a00 	vstr	s15, [r7]
 800c1ae:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800c1b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c1b6:	aa31      	add	r2, sp, #196	@ 0xc4
 800c1b8:	2301      	movs	r3, #1
 800c1ba:	429c      	cmp	r4, r3
 800c1bc:	da20      	bge.n	800c200 <__kernel_rem_pio2f+0x474>
 800c1be:	b10e      	cbz	r6, 800c1c4 <__kernel_rem_pio2f+0x438>
 800c1c0:	eef1 7a67 	vneg.f32	s15, s15
 800c1c4:	edc7 7a01 	vstr	s15, [r7, #4]
 800c1c8:	e7ba      	b.n	800c140 <__kernel_rem_pio2f+0x3b4>
 800c1ca:	ab30      	add	r3, sp, #192	@ 0xc0
 800c1cc:	ed5f 7a50 	vldr	s15, [pc, #-320]	@ 800c090 <__kernel_rem_pio2f+0x304>
 800c1d0:	440b      	add	r3, r1
 800c1d2:	2c00      	cmp	r4, #0
 800c1d4:	da05      	bge.n	800c1e2 <__kernel_rem_pio2f+0x456>
 800c1d6:	b10e      	cbz	r6, 800c1dc <__kernel_rem_pio2f+0x450>
 800c1d8:	eef1 7a67 	vneg.f32	s15, s15
 800c1dc:	edc7 7a00 	vstr	s15, [r7]
 800c1e0:	e7ae      	b.n	800c140 <__kernel_rem_pio2f+0x3b4>
 800c1e2:	ed33 7a01 	vldmdb	r3!, {s14}
 800c1e6:	3c01      	subs	r4, #1
 800c1e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1ec:	e7f1      	b.n	800c1d2 <__kernel_rem_pio2f+0x446>
 800c1ee:	ed73 7a01 	vldmdb	r3!, {s15}
 800c1f2:	3a01      	subs	r2, #1
 800c1f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c1f8:	e7d2      	b.n	800c1a0 <__kernel_rem_pio2f+0x414>
 800c1fa:	eef0 7a47 	vmov.f32	s15, s14
 800c1fe:	e7d4      	b.n	800c1aa <__kernel_rem_pio2f+0x41e>
 800c200:	ecb2 7a01 	vldmia	r2!, {s14}
 800c204:	3301      	adds	r3, #1
 800c206:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c20a:	e7d6      	b.n	800c1ba <__kernel_rem_pio2f+0x42e>
 800c20c:	edd2 7a00 	vldr	s15, [r2]
 800c210:	edd2 6a01 	vldr	s13, [r2, #4]
 800c214:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c218:	3801      	subs	r0, #1
 800c21a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c21e:	ed82 7a00 	vstr	s14, [r2]
 800c222:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c226:	edc2 7a01 	vstr	s15, [r2, #4]
 800c22a:	e798      	b.n	800c15e <__kernel_rem_pio2f+0x3d2>
 800c22c:	edd3 7a00 	vldr	s15, [r3]
 800c230:	edd3 6a01 	vldr	s13, [r3, #4]
 800c234:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c238:	3a01      	subs	r2, #1
 800c23a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c23e:	ed83 7a00 	vstr	s14, [r3]
 800c242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c246:	edc3 7a01 	vstr	s15, [r3, #4]
 800c24a:	e78d      	b.n	800c168 <__kernel_rem_pio2f+0x3dc>
 800c24c:	ed33 7a01 	vldmdb	r3!, {s14}
 800c250:	3c01      	subs	r4, #1
 800c252:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c256:	e78f      	b.n	800c178 <__kernel_rem_pio2f+0x3ec>
 800c258:	eef1 6a66 	vneg.f32	s13, s13
 800c25c:	eeb1 7a47 	vneg.f32	s14, s14
 800c260:	edc7 6a00 	vstr	s13, [r7]
 800c264:	ed87 7a01 	vstr	s14, [r7, #4]
 800c268:	eef1 7a67 	vneg.f32	s15, s15
 800c26c:	e790      	b.n	800c190 <__kernel_rem_pio2f+0x404>
 800c26e:	bf00      	nop

0800c270 <floorf>:
 800c270:	ee10 3a10 	vmov	r3, s0
 800c274:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c278:	3a7f      	subs	r2, #127	@ 0x7f
 800c27a:	2a16      	cmp	r2, #22
 800c27c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800c280:	dc2b      	bgt.n	800c2da <floorf+0x6a>
 800c282:	2a00      	cmp	r2, #0
 800c284:	da12      	bge.n	800c2ac <floorf+0x3c>
 800c286:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c2ec <floorf+0x7c>
 800c28a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c28e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c296:	dd06      	ble.n	800c2a6 <floorf+0x36>
 800c298:	2b00      	cmp	r3, #0
 800c29a:	da24      	bge.n	800c2e6 <floorf+0x76>
 800c29c:	2900      	cmp	r1, #0
 800c29e:	4b14      	ldr	r3, [pc, #80]	@ (800c2f0 <floorf+0x80>)
 800c2a0:	bf08      	it	eq
 800c2a2:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800c2a6:	ee00 3a10 	vmov	s0, r3
 800c2aa:	4770      	bx	lr
 800c2ac:	4911      	ldr	r1, [pc, #68]	@ (800c2f4 <floorf+0x84>)
 800c2ae:	4111      	asrs	r1, r2
 800c2b0:	420b      	tst	r3, r1
 800c2b2:	d0fa      	beq.n	800c2aa <floorf+0x3a>
 800c2b4:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800c2ec <floorf+0x7c>
 800c2b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c2bc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800c2c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2c4:	ddef      	ble.n	800c2a6 <floorf+0x36>
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	bfbe      	ittt	lt
 800c2ca:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800c2ce:	fa40 f202 	asrlt.w	r2, r0, r2
 800c2d2:	189b      	addlt	r3, r3, r2
 800c2d4:	ea23 0301 	bic.w	r3, r3, r1
 800c2d8:	e7e5      	b.n	800c2a6 <floorf+0x36>
 800c2da:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800c2de:	d3e4      	bcc.n	800c2aa <floorf+0x3a>
 800c2e0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c2e4:	4770      	bx	lr
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	e7dd      	b.n	800c2a6 <floorf+0x36>
 800c2ea:	bf00      	nop
 800c2ec:	7149f2ca 	.word	0x7149f2ca
 800c2f0:	bf800000 	.word	0xbf800000
 800c2f4:	007fffff 	.word	0x007fffff

0800c2f8 <scalbnf>:
 800c2f8:	ee10 3a10 	vmov	r3, s0
 800c2fc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c300:	d02b      	beq.n	800c35a <scalbnf+0x62>
 800c302:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c306:	d302      	bcc.n	800c30e <scalbnf+0x16>
 800c308:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c30c:	4770      	bx	lr
 800c30e:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c312:	d123      	bne.n	800c35c <scalbnf+0x64>
 800c314:	4b24      	ldr	r3, [pc, #144]	@ (800c3a8 <scalbnf+0xb0>)
 800c316:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c3ac <scalbnf+0xb4>
 800c31a:	4298      	cmp	r0, r3
 800c31c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c320:	db17      	blt.n	800c352 <scalbnf+0x5a>
 800c322:	ee10 3a10 	vmov	r3, s0
 800c326:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c32a:	3a19      	subs	r2, #25
 800c32c:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c330:	4288      	cmp	r0, r1
 800c332:	dd15      	ble.n	800c360 <scalbnf+0x68>
 800c334:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c3b0 <scalbnf+0xb8>
 800c338:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c3b4 <scalbnf+0xbc>
 800c33c:	ee10 3a10 	vmov	r3, s0
 800c340:	eeb0 7a67 	vmov.f32	s14, s15
 800c344:	2b00      	cmp	r3, #0
 800c346:	bfb8      	it	lt
 800c348:	eef0 7a66 	vmovlt.f32	s15, s13
 800c34c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c350:	4770      	bx	lr
 800c352:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c3b8 <scalbnf+0xc0>
 800c356:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c35a:	4770      	bx	lr
 800c35c:	0dd2      	lsrs	r2, r2, #23
 800c35e:	e7e5      	b.n	800c32c <scalbnf+0x34>
 800c360:	4410      	add	r0, r2
 800c362:	28fe      	cmp	r0, #254	@ 0xfe
 800c364:	dce6      	bgt.n	800c334 <scalbnf+0x3c>
 800c366:	2800      	cmp	r0, #0
 800c368:	dd06      	ble.n	800c378 <scalbnf+0x80>
 800c36a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c36e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c372:	ee00 3a10 	vmov	s0, r3
 800c376:	4770      	bx	lr
 800c378:	f110 0f16 	cmn.w	r0, #22
 800c37c:	da09      	bge.n	800c392 <scalbnf+0x9a>
 800c37e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c3b8 <scalbnf+0xc0>
 800c382:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c3bc <scalbnf+0xc4>
 800c386:	ee10 3a10 	vmov	r3, s0
 800c38a:	eeb0 7a67 	vmov.f32	s14, s15
 800c38e:	2b00      	cmp	r3, #0
 800c390:	e7d9      	b.n	800c346 <scalbnf+0x4e>
 800c392:	3019      	adds	r0, #25
 800c394:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c398:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c39c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c3c0 <scalbnf+0xc8>
 800c3a0:	ee07 3a90 	vmov	s15, r3
 800c3a4:	e7d7      	b.n	800c356 <scalbnf+0x5e>
 800c3a6:	bf00      	nop
 800c3a8:	ffff3cb0 	.word	0xffff3cb0
 800c3ac:	4c000000 	.word	0x4c000000
 800c3b0:	7149f2ca 	.word	0x7149f2ca
 800c3b4:	f149f2ca 	.word	0xf149f2ca
 800c3b8:	0da24260 	.word	0x0da24260
 800c3bc:	8da24260 	.word	0x8da24260
 800c3c0:	33000000 	.word	0x33000000

0800c3c4 <_init>:
 800c3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3c6:	bf00      	nop
 800c3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3ca:	bc08      	pop	{r3}
 800c3cc:	469e      	mov	lr, r3
 800c3ce:	4770      	bx	lr

0800c3d0 <_fini>:
 800c3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3d2:	bf00      	nop
 800c3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c3d6:	bc08      	pop	{r3}
 800c3d8:	469e      	mov	lr, r3
 800c3da:	4770      	bx	lr
