
BMP280.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a69c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b5c  0800a830  0800a830  0000b830  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b38c  0800b38c  0000d1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b38c  0800b38c  0000c38c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b394  0800b394  0000d1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b394  0800b394  0000c394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b398  0800b398  0000c398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  0800b39c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007fc  200001d4  0800b570  0000d1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200009d0  0800b570  0000d9d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010ac8  00000000  00000000  0000d204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002728  00000000  00000000  0001dccc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e40  00000000  00000000  000203f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aed  00000000  00000000  00021238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027ec7  00000000  00000000  00021d25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011a86  00000000  00000000  00049bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ee149  00000000  00000000  0005b672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001497bb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004f74  00000000  00000000  00149800  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  0014e774  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d4 	.word	0x200001d4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a814 	.word	0x0800a814

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d8 	.word	0x200001d8
 80001cc:	0800a814 	.word	0x0800a814

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_ldivmod>:
 8000c88:	b97b      	cbnz	r3, 8000caa <__aeabi_ldivmod+0x22>
 8000c8a:	b972      	cbnz	r2, 8000caa <__aeabi_ldivmod+0x22>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bfbe      	ittt	lt
 8000c90:	2000      	movlt	r0, #0
 8000c92:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c96:	e006      	blt.n	8000ca6 <__aeabi_ldivmod+0x1e>
 8000c98:	bf08      	it	eq
 8000c9a:	2800      	cmpeq	r0, #0
 8000c9c:	bf1c      	itt	ne
 8000c9e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000ca2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000ca6:	f000 ba09 	b.w	80010bc <__aeabi_idiv0>
 8000caa:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	db09      	blt.n	8000cca <__aeabi_ldivmod+0x42>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	db1a      	blt.n	8000cf0 <__aeabi_ldivmod+0x68>
 8000cba:	f000 f883 	bl	8000dc4 <__udivmoddi4>
 8000cbe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc6:	b004      	add	sp, #16
 8000cc8:	4770      	bx	lr
 8000cca:	4240      	negs	r0, r0
 8000ccc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	db1b      	blt.n	8000d0c <__aeabi_ldivmod+0x84>
 8000cd4:	f000 f876 	bl	8000dc4 <__udivmoddi4>
 8000cd8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cdc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce0:	b004      	add	sp, #16
 8000ce2:	4240      	negs	r0, r0
 8000ce4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce8:	4252      	negs	r2, r2
 8000cea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cee:	4770      	bx	lr
 8000cf0:	4252      	negs	r2, r2
 8000cf2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cf6:	f000 f865 	bl	8000dc4 <__udivmoddi4>
 8000cfa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d02:	b004      	add	sp, #16
 8000d04:	4240      	negs	r0, r0
 8000d06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d0a:	4770      	bx	lr
 8000d0c:	4252      	negs	r2, r2
 8000d0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d12:	f000 f857 	bl	8000dc4 <__udivmoddi4>
 8000d16:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d1e:	b004      	add	sp, #16
 8000d20:	4252      	negs	r2, r2
 8000d22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d26:	4770      	bx	lr

08000d28 <__aeabi_uldivmod>:
 8000d28:	b953      	cbnz	r3, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2a:	b94a      	cbnz	r2, 8000d40 <__aeabi_uldivmod+0x18>
 8000d2c:	2900      	cmp	r1, #0
 8000d2e:	bf08      	it	eq
 8000d30:	2800      	cmpeq	r0, #0
 8000d32:	bf1c      	itt	ne
 8000d34:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000d38:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000d3c:	f000 b9be 	b.w	80010bc <__aeabi_idiv0>
 8000d40:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d48:	f000 f83c 	bl	8000dc4 <__udivmoddi4>
 8000d4c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d54:	b004      	add	sp, #16
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_d2lz>:
 8000d58:	b538      	push	{r3, r4, r5, lr}
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	4604      	mov	r4, r0
 8000d60:	460d      	mov	r5, r1
 8000d62:	f7ff febb 	bl	8000adc <__aeabi_dcmplt>
 8000d66:	b928      	cbnz	r0, 8000d74 <__aeabi_d2lz+0x1c>
 8000d68:	4620      	mov	r0, r4
 8000d6a:	4629      	mov	r1, r5
 8000d6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d70:	f000 b80a 	b.w	8000d88 <__aeabi_d2ulz>
 8000d74:	4620      	mov	r0, r4
 8000d76:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d7a:	f000 f805 	bl	8000d88 <__aeabi_d2ulz>
 8000d7e:	4240      	negs	r0, r0
 8000d80:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d84:	bd38      	pop	{r3, r4, r5, pc}
 8000d86:	bf00      	nop

08000d88 <__aeabi_d2ulz>:
 8000d88:	b5d0      	push	{r4, r6, r7, lr}
 8000d8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dbc <__aeabi_d2ulz+0x34>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	4606      	mov	r6, r0
 8000d90:	460f      	mov	r7, r1
 8000d92:	f7ff fc31 	bl	80005f8 <__aeabi_dmul>
 8000d96:	f7ff ff07 	bl	8000ba8 <__aeabi_d2uiz>
 8000d9a:	4604      	mov	r4, r0
 8000d9c:	f7ff fbb2 	bl	8000504 <__aeabi_ui2d>
 8000da0:	4b07      	ldr	r3, [pc, #28]	@ (8000dc0 <__aeabi_d2ulz+0x38>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f7ff fc28 	bl	80005f8 <__aeabi_dmul>
 8000da8:	4602      	mov	r2, r0
 8000daa:	460b      	mov	r3, r1
 8000dac:	4630      	mov	r0, r6
 8000dae:	4639      	mov	r1, r7
 8000db0:	f7ff fa6a 	bl	8000288 <__aeabi_dsub>
 8000db4:	f7ff fef8 	bl	8000ba8 <__aeabi_d2uiz>
 8000db8:	4621      	mov	r1, r4
 8000dba:	bdd0      	pop	{r4, r6, r7, pc}
 8000dbc:	3df00000 	.word	0x3df00000
 8000dc0:	41f00000 	.word	0x41f00000

08000dc4 <__udivmoddi4>:
 8000dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc8:	9d08      	ldr	r5, [sp, #32]
 8000dca:	468e      	mov	lr, r1
 8000dcc:	4604      	mov	r4, r0
 8000dce:	4688      	mov	r8, r1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d14a      	bne.n	8000e6a <__udivmoddi4+0xa6>
 8000dd4:	428a      	cmp	r2, r1
 8000dd6:	4617      	mov	r7, r2
 8000dd8:	d962      	bls.n	8000ea0 <__udivmoddi4+0xdc>
 8000dda:	fab2 f682 	clz	r6, r2
 8000dde:	b14e      	cbz	r6, 8000df4 <__udivmoddi4+0x30>
 8000de0:	f1c6 0320 	rsb	r3, r6, #32
 8000de4:	fa01 f806 	lsl.w	r8, r1, r6
 8000de8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dec:	40b7      	lsls	r7, r6
 8000dee:	ea43 0808 	orr.w	r8, r3, r8
 8000df2:	40b4      	lsls	r4, r6
 8000df4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000df8:	fa1f fc87 	uxth.w	ip, r7
 8000dfc:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e00:	0c23      	lsrs	r3, r4, #16
 8000e02:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e06:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e0a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	d909      	bls.n	8000e26 <__udivmoddi4+0x62>
 8000e12:	18fb      	adds	r3, r7, r3
 8000e14:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000e18:	f080 80ea 	bcs.w	8000ff0 <__udivmoddi4+0x22c>
 8000e1c:	429a      	cmp	r2, r3
 8000e1e:	f240 80e7 	bls.w	8000ff0 <__udivmoddi4+0x22c>
 8000e22:	3902      	subs	r1, #2
 8000e24:	443b      	add	r3, r7
 8000e26:	1a9a      	subs	r2, r3, r2
 8000e28:	b2a3      	uxth	r3, r4
 8000e2a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e2e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e32:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e36:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e3a:	459c      	cmp	ip, r3
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x8e>
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000e44:	f080 80d6 	bcs.w	8000ff4 <__udivmoddi4+0x230>
 8000e48:	459c      	cmp	ip, r3
 8000e4a:	f240 80d3 	bls.w	8000ff4 <__udivmoddi4+0x230>
 8000e4e:	443b      	add	r3, r7
 8000e50:	3802      	subs	r0, #2
 8000e52:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e56:	eba3 030c 	sub.w	r3, r3, ip
 8000e5a:	2100      	movs	r1, #0
 8000e5c:	b11d      	cbz	r5, 8000e66 <__udivmoddi4+0xa2>
 8000e5e:	40f3      	lsrs	r3, r6
 8000e60:	2200      	movs	r2, #0
 8000e62:	e9c5 3200 	strd	r3, r2, [r5]
 8000e66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	d905      	bls.n	8000e7a <__udivmoddi4+0xb6>
 8000e6e:	b10d      	cbz	r5, 8000e74 <__udivmoddi4+0xb0>
 8000e70:	e9c5 0100 	strd	r0, r1, [r5]
 8000e74:	2100      	movs	r1, #0
 8000e76:	4608      	mov	r0, r1
 8000e78:	e7f5      	b.n	8000e66 <__udivmoddi4+0xa2>
 8000e7a:	fab3 f183 	clz	r1, r3
 8000e7e:	2900      	cmp	r1, #0
 8000e80:	d146      	bne.n	8000f10 <__udivmoddi4+0x14c>
 8000e82:	4573      	cmp	r3, lr
 8000e84:	d302      	bcc.n	8000e8c <__udivmoddi4+0xc8>
 8000e86:	4282      	cmp	r2, r0
 8000e88:	f200 8105 	bhi.w	8001096 <__udivmoddi4+0x2d2>
 8000e8c:	1a84      	subs	r4, r0, r2
 8000e8e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e92:	2001      	movs	r0, #1
 8000e94:	4690      	mov	r8, r2
 8000e96:	2d00      	cmp	r5, #0
 8000e98:	d0e5      	beq.n	8000e66 <__udivmoddi4+0xa2>
 8000e9a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e9e:	e7e2      	b.n	8000e66 <__udivmoddi4+0xa2>
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	f000 8090 	beq.w	8000fc6 <__udivmoddi4+0x202>
 8000ea6:	fab2 f682 	clz	r6, r2
 8000eaa:	2e00      	cmp	r6, #0
 8000eac:	f040 80a4 	bne.w	8000ff8 <__udivmoddi4+0x234>
 8000eb0:	1a8a      	subs	r2, r1, r2
 8000eb2:	0c03      	lsrs	r3, r0, #16
 8000eb4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eb8:	b280      	uxth	r0, r0
 8000eba:	b2bc      	uxth	r4, r7
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ec2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ec6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eca:	fb04 f20c 	mul.w	r2, r4, ip
 8000ece:	429a      	cmp	r2, r3
 8000ed0:	d907      	bls.n	8000ee2 <__udivmoddi4+0x11e>
 8000ed2:	18fb      	adds	r3, r7, r3
 8000ed4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000ed8:	d202      	bcs.n	8000ee0 <__udivmoddi4+0x11c>
 8000eda:	429a      	cmp	r2, r3
 8000edc:	f200 80e0 	bhi.w	80010a0 <__udivmoddi4+0x2dc>
 8000ee0:	46c4      	mov	ip, r8
 8000ee2:	1a9b      	subs	r3, r3, r2
 8000ee4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ee8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000eec:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000ef0:	fb02 f404 	mul.w	r4, r2, r4
 8000ef4:	429c      	cmp	r4, r3
 8000ef6:	d907      	bls.n	8000f08 <__udivmoddi4+0x144>
 8000ef8:	18fb      	adds	r3, r7, r3
 8000efa:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000efe:	d202      	bcs.n	8000f06 <__udivmoddi4+0x142>
 8000f00:	429c      	cmp	r4, r3
 8000f02:	f200 80ca 	bhi.w	800109a <__udivmoddi4+0x2d6>
 8000f06:	4602      	mov	r2, r0
 8000f08:	1b1b      	subs	r3, r3, r4
 8000f0a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f0e:	e7a5      	b.n	8000e5c <__udivmoddi4+0x98>
 8000f10:	f1c1 0620 	rsb	r6, r1, #32
 8000f14:	408b      	lsls	r3, r1
 8000f16:	fa22 f706 	lsr.w	r7, r2, r6
 8000f1a:	431f      	orrs	r7, r3
 8000f1c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f20:	fa20 f306 	lsr.w	r3, r0, r6
 8000f24:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f28:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f2c:	4323      	orrs	r3, r4
 8000f2e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f32:	fa1f fc87 	uxth.w	ip, r7
 8000f36:	fbbe f0f9 	udiv	r0, lr, r9
 8000f3a:	0c1c      	lsrs	r4, r3, #16
 8000f3c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f40:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f44:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f48:	45a6      	cmp	lr, r4
 8000f4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f4e:	d909      	bls.n	8000f64 <__udivmoddi4+0x1a0>
 8000f50:	193c      	adds	r4, r7, r4
 8000f52:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000f56:	f080 809c 	bcs.w	8001092 <__udivmoddi4+0x2ce>
 8000f5a:	45a6      	cmp	lr, r4
 8000f5c:	f240 8099 	bls.w	8001092 <__udivmoddi4+0x2ce>
 8000f60:	3802      	subs	r0, #2
 8000f62:	443c      	add	r4, r7
 8000f64:	eba4 040e 	sub.w	r4, r4, lr
 8000f68:	fa1f fe83 	uxth.w	lr, r3
 8000f6c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f70:	fb09 4413 	mls	r4, r9, r3, r4
 8000f74:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f78:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f7c:	45a4      	cmp	ip, r4
 8000f7e:	d908      	bls.n	8000f92 <__udivmoddi4+0x1ce>
 8000f80:	193c      	adds	r4, r7, r4
 8000f82:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000f86:	f080 8082 	bcs.w	800108e <__udivmoddi4+0x2ca>
 8000f8a:	45a4      	cmp	ip, r4
 8000f8c:	d97f      	bls.n	800108e <__udivmoddi4+0x2ca>
 8000f8e:	3b02      	subs	r3, #2
 8000f90:	443c      	add	r4, r7
 8000f92:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f96:	eba4 040c 	sub.w	r4, r4, ip
 8000f9a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f9e:	4564      	cmp	r4, ip
 8000fa0:	4673      	mov	r3, lr
 8000fa2:	46e1      	mov	r9, ip
 8000fa4:	d362      	bcc.n	800106c <__udivmoddi4+0x2a8>
 8000fa6:	d05f      	beq.n	8001068 <__udivmoddi4+0x2a4>
 8000fa8:	b15d      	cbz	r5, 8000fc2 <__udivmoddi4+0x1fe>
 8000faa:	ebb8 0203 	subs.w	r2, r8, r3
 8000fae:	eb64 0409 	sbc.w	r4, r4, r9
 8000fb2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fb6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fba:	431e      	orrs	r6, r3
 8000fbc:	40cc      	lsrs	r4, r1
 8000fbe:	e9c5 6400 	strd	r6, r4, [r5]
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	e74f      	b.n	8000e66 <__udivmoddi4+0xa2>
 8000fc6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fca:	0c01      	lsrs	r1, r0, #16
 8000fcc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fd0:	b280      	uxth	r0, r0
 8000fd2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fd6:	463b      	mov	r3, r7
 8000fd8:	4638      	mov	r0, r7
 8000fda:	463c      	mov	r4, r7
 8000fdc:	46b8      	mov	r8, r7
 8000fde:	46be      	mov	lr, r7
 8000fe0:	2620      	movs	r6, #32
 8000fe2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000fe6:	eba2 0208 	sub.w	r2, r2, r8
 8000fea:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000fee:	e766      	b.n	8000ebe <__udivmoddi4+0xfa>
 8000ff0:	4601      	mov	r1, r0
 8000ff2:	e718      	b.n	8000e26 <__udivmoddi4+0x62>
 8000ff4:	4610      	mov	r0, r2
 8000ff6:	e72c      	b.n	8000e52 <__udivmoddi4+0x8e>
 8000ff8:	f1c6 0220 	rsb	r2, r6, #32
 8000ffc:	fa2e f302 	lsr.w	r3, lr, r2
 8001000:	40b7      	lsls	r7, r6
 8001002:	40b1      	lsls	r1, r6
 8001004:	fa20 f202 	lsr.w	r2, r0, r2
 8001008:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800100c:	430a      	orrs	r2, r1
 800100e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001012:	b2bc      	uxth	r4, r7
 8001014:	fb0e 3318 	mls	r3, lr, r8, r3
 8001018:	0c11      	lsrs	r1, r2, #16
 800101a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800101e:	fb08 f904 	mul.w	r9, r8, r4
 8001022:	40b0      	lsls	r0, r6
 8001024:	4589      	cmp	r9, r1
 8001026:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800102a:	b280      	uxth	r0, r0
 800102c:	d93e      	bls.n	80010ac <__udivmoddi4+0x2e8>
 800102e:	1879      	adds	r1, r7, r1
 8001030:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8001034:	d201      	bcs.n	800103a <__udivmoddi4+0x276>
 8001036:	4589      	cmp	r9, r1
 8001038:	d81f      	bhi.n	800107a <__udivmoddi4+0x2b6>
 800103a:	eba1 0109 	sub.w	r1, r1, r9
 800103e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001042:	fb09 f804 	mul.w	r8, r9, r4
 8001046:	fb0e 1119 	mls	r1, lr, r9, r1
 800104a:	b292      	uxth	r2, r2
 800104c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001050:	4542      	cmp	r2, r8
 8001052:	d229      	bcs.n	80010a8 <__udivmoddi4+0x2e4>
 8001054:	18ba      	adds	r2, r7, r2
 8001056:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800105a:	d2c4      	bcs.n	8000fe6 <__udivmoddi4+0x222>
 800105c:	4542      	cmp	r2, r8
 800105e:	d2c2      	bcs.n	8000fe6 <__udivmoddi4+0x222>
 8001060:	f1a9 0102 	sub.w	r1, r9, #2
 8001064:	443a      	add	r2, r7
 8001066:	e7be      	b.n	8000fe6 <__udivmoddi4+0x222>
 8001068:	45f0      	cmp	r8, lr
 800106a:	d29d      	bcs.n	8000fa8 <__udivmoddi4+0x1e4>
 800106c:	ebbe 0302 	subs.w	r3, lr, r2
 8001070:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001074:	3801      	subs	r0, #1
 8001076:	46e1      	mov	r9, ip
 8001078:	e796      	b.n	8000fa8 <__udivmoddi4+0x1e4>
 800107a:	eba7 0909 	sub.w	r9, r7, r9
 800107e:	4449      	add	r1, r9
 8001080:	f1a8 0c02 	sub.w	ip, r8, #2
 8001084:	fbb1 f9fe 	udiv	r9, r1, lr
 8001088:	fb09 f804 	mul.w	r8, r9, r4
 800108c:	e7db      	b.n	8001046 <__udivmoddi4+0x282>
 800108e:	4673      	mov	r3, lr
 8001090:	e77f      	b.n	8000f92 <__udivmoddi4+0x1ce>
 8001092:	4650      	mov	r0, sl
 8001094:	e766      	b.n	8000f64 <__udivmoddi4+0x1a0>
 8001096:	4608      	mov	r0, r1
 8001098:	e6fd      	b.n	8000e96 <__udivmoddi4+0xd2>
 800109a:	443b      	add	r3, r7
 800109c:	3a02      	subs	r2, #2
 800109e:	e733      	b.n	8000f08 <__udivmoddi4+0x144>
 80010a0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010a4:	443b      	add	r3, r7
 80010a6:	e71c      	b.n	8000ee2 <__udivmoddi4+0x11e>
 80010a8:	4649      	mov	r1, r9
 80010aa:	e79c      	b.n	8000fe6 <__udivmoddi4+0x222>
 80010ac:	eba1 0109 	sub.w	r1, r1, r9
 80010b0:	46c4      	mov	ip, r8
 80010b2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010b6:	fb09 f804 	mul.w	r8, r9, r4
 80010ba:	e7c4      	b.n	8001046 <__udivmoddi4+0x282>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <AS7341_Init>:
#include <stdlib.h>
#include <string.h>  // For memcpy


/* Initialize the AS7341 */
uint8_t AS7341_Init(void) {
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
    // Errors detected and status
    uint8_t errNum = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;

    // check device id from WHOAMI
    uint8_t regData;
    status = AS7341_ReadRegister(AS7341_WHOAMI, &regData);
 80010ca:	1d7b      	adds	r3, r7, #5
 80010cc:	4619      	mov	r1, r3
 80010ce:	2092      	movs	r0, #146	@ 0x92
 80010d0:	f000 f864 	bl	800119c <AS7341_ReadRegister>
 80010d4:	4603      	mov	r3, r0
 80010d6:	71bb      	strb	r3, [r7, #6]
    errNum += (status != HAL_OK);
 80010d8:	79bb      	ldrb	r3, [r7, #6]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	bf14      	ite	ne
 80010de:	2301      	movne	r3, #1
 80010e0:	2300      	moveq	r3, #0
 80010e2:	b2db      	uxtb	r3, r3
 80010e4:	461a      	mov	r2, r3
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	4413      	add	r3, r2
 80010ea:	71fb      	strb	r3, [r7, #7]

    if (regData != AS7341_CHIP_ID) {
 80010ec:	797b      	ldrb	r3, [r7, #5]
 80010ee:	2b24      	cmp	r3, #36	@ 0x24
 80010f0:	d001      	beq.n	80010f6 <AS7341_Init+0x36>
        errNum = 255; //return 255;
 80010f2:	23ff      	movs	r3, #255	@ 0xff
 80010f4:	71fb      	strb	r3, [r7, #7]
    }
    return errNum;
 80010f6:	79fb      	ldrb	r3, [r7, #7]
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3708      	adds	r7, #8
 80010fc:	46bd      	mov	sp, r7
 80010fe:	bd80      	pop	{r7, pc}

08001100 <AS7341_Setup>:

/* Setup operating parameters of the AS7341 */
void AS7341_Setup(void) {
 8001100:	b580      	push	{r7, lr}
 8001102:	b082      	sub	sp, #8
 8001104:	af00      	add	r7, sp, #0

	uint8_t regData;

	// Set ENABLE Register: Spectral Measurement Enable; Power ON.
	regData = 0x03;
 8001106:	2303      	movs	r3, #3
 8001108:	71fb      	strb	r3, [r7, #7]
	AS7341_WriteRegister(AS7341_ENABLE, &regData);
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	4619      	mov	r1, r3
 800110e:	2080      	movs	r0, #128	@ 0x80
 8001110:	f000 f828 	bl	8001164 <AS7341_WriteRegister>

	// Set CONFIG Register
	regData = 0x00;
 8001114:	2300      	movs	r3, #0
 8001116:	71fb      	strb	r3, [r7, #7]
	AS7341_WriteRegister(AS7341_CONFIG, &regData);
 8001118:	1dfb      	adds	r3, r7, #7
 800111a:	4619      	mov	r1, r3
 800111c:	2070      	movs	r0, #112	@ 0x70
 800111e:	f000 f821 	bl	8001164 <AS7341_WriteRegister>

	// Set ATIME Register: Sets the number of integration steps from 1 to 256 ASTEP x (n+1).
	regData = 0x00;
 8001122:	2300      	movs	r3, #0
 8001124:	71fb      	strb	r3, [r7, #7]
	AS7341_WriteRegister(AS7341_ATIME, &regData);
 8001126:	1dfb      	adds	r3, r7, #7
 8001128:	4619      	mov	r1, r3
 800112a:	2081      	movs	r0, #129	@ 0x81
 800112c:	f000 f81a 	bl	8001164 <AS7341_WriteRegister>

	// Set ASTEP_L Register: 03E7 (999): 2.78ms
	regData = 0xE7;
 8001130:	23e7      	movs	r3, #231	@ 0xe7
 8001132:	71fb      	strb	r3, [r7, #7]
	AS7341_WriteRegister(AS7341_ASTEP_L, &regData);
 8001134:	1dfb      	adds	r3, r7, #7
 8001136:	4619      	mov	r1, r3
 8001138:	20ca      	movs	r0, #202	@ 0xca
 800113a:	f000 f813 	bl	8001164 <AS7341_WriteRegister>

	// Set ASTEP_H Register
	regData = 0x03;
 800113e:	2303      	movs	r3, #3
 8001140:	71fb      	strb	r3, [r7, #7]
	AS7341_WriteRegister(AS7341_ASTEP_H, &regData);
 8001142:	1dfb      	adds	r3, r7, #7
 8001144:	4619      	mov	r1, r3
 8001146:	20cb      	movs	r0, #203	@ 0xcb
 8001148:	f000 f80c 	bl	8001164 <AS7341_WriteRegister>

	// Set FD_GAIN Register 256x
	regData = 0x24;
 800114c:	2324      	movs	r3, #36	@ 0x24
 800114e:	71fb      	strb	r3, [r7, #7]
	AS7341_WriteRegister(AS7341_FD_TIME2, &regData);
 8001150:	1dfb      	adds	r3, r7, #7
 8001152:	4619      	mov	r1, r3
 8001154:	20da      	movs	r0, #218	@ 0xda
 8001156:	f000 f805 	bl	8001164 <AS7341_WriteRegister>

}
 800115a:	bf00      	nop
 800115c:	3708      	adds	r7, #8
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
	...

08001164 <AS7341_WriteRegister>:
// Low level functions
// Write register
HAL_StatusTypeDef AS7341_WriteRegister(uint8_t reg, uint8_t *data) {
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af04      	add	r7, sp, #16
 800116a:	4603      	mov	r3, r0
 800116c:	6039      	str	r1, [r7, #0]
 800116e:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Write(&AS7341_I2C_PORT, AS7341_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 10000);//HAL_MAX_DELAY);
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	b29a      	uxth	r2, r3
 8001174:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001178:	9302      	str	r3, [sp, #8]
 800117a:	2301      	movs	r3, #1
 800117c:	9301      	str	r3, [sp, #4]
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	9300      	str	r3, [sp, #0]
 8001182:	2301      	movs	r3, #1
 8001184:	2172      	movs	r1, #114	@ 0x72
 8001186:	4804      	ldr	r0, [pc, #16]	@ (8001198 <AS7341_WriteRegister+0x34>)
 8001188:	f001 ff54 	bl	8003034 <HAL_I2C_Mem_Write>
 800118c:	4603      	mov	r3, r0
}
 800118e:	4618      	mov	r0, r3
 8001190:	3708      	adds	r7, #8
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	200001f0 	.word	0x200001f0

0800119c <AS7341_ReadRegister>:

// Read register
HAL_StatusTypeDef AS7341_ReadRegister(uint8_t reg, uint8_t *data) {
 800119c:	b580      	push	{r7, lr}
 800119e:	b086      	sub	sp, #24
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]
    return HAL_I2C_Mem_Read(&AS7341_I2C_PORT, AS7341_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, 1, 10000);//HAL_MAX_DELAY);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	b29a      	uxth	r2, r3
 80011ac:	f242 7310 	movw	r3, #10000	@ 0x2710
 80011b0:	9302      	str	r3, [sp, #8]
 80011b2:	2301      	movs	r3, #1
 80011b4:	9301      	str	r3, [sp, #4]
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	9300      	str	r3, [sp, #0]
 80011ba:	2301      	movs	r3, #1
 80011bc:	2172      	movs	r1, #114	@ 0x72
 80011be:	4804      	ldr	r0, [pc, #16]	@ (80011d0 <AS7341_ReadRegister+0x34>)
 80011c0:	f002 f84c 	bl	800325c <HAL_I2C_Mem_Read>
 80011c4:	4603      	mov	r3, r0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	200001f0 	.word	0x200001f0

080011d4 <bmp280_init_default_params>:

#define BMP280_RESET_VALUE     0xB6



void bmp280_init_default_params(bmp280_params_t *params) {
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
	params->mode = BMP280_MODE_NORMAL;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2203      	movs	r2, #3
 80011e0:	701a      	strb	r2, [r3, #0]
	params->filter = BMP280_FILTER_OFF;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2200      	movs	r2, #0
 80011e6:	705a      	strb	r2, [r3, #1]
	params->oversampling_pressure = BMP280_STANDARD;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2203      	movs	r2, #3
 80011ec:	709a      	strb	r2, [r3, #2]
	params->oversampling_temperature = BMP280_STANDARD;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2203      	movs	r2, #3
 80011f2:	70da      	strb	r2, [r3, #3]
	params->oversampling_humidity = BMP280_STANDARD;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2203      	movs	r2, #3
 80011f8:	711a      	strb	r2, [r3, #4]
	params->standby = BMP280_STANDBY_250;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2203      	movs	r2, #3
 80011fe:	715a      	strb	r2, [r3, #5]
}
 8001200:	bf00      	nop
 8001202:	370c      	adds	r7, #12
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <read_register16>:

static bool read_register16(BMP280_HandleTypedef *dev, uint8_t addr, uint16_t *value) {
 800120c:	b580      	push	{r7, lr}
 800120e:	b08a      	sub	sp, #40	@ 0x28
 8001210:	af04      	add	r7, sp, #16
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	460b      	mov	r3, r1
 8001216:	607a      	str	r2, [r7, #4]
 8001218:	72fb      	strb	r3, [r7, #11]
	uint16_t tx_buff;
	uint8_t rx_buff[2];
	tx_buff = (dev->addr << 1);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, rx_buff, 2, 5000)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8001226:	7afb      	ldrb	r3, [r7, #11]
 8001228:	b29a      	uxth	r2, r3
 800122a:	8af9      	ldrh	r1, [r7, #22]
 800122c:	f241 3388 	movw	r3, #5000	@ 0x1388
 8001230:	9302      	str	r3, [sp, #8]
 8001232:	2302      	movs	r3, #2
 8001234:	9301      	str	r3, [sp, #4]
 8001236:	f107 0314 	add.w	r3, r7, #20
 800123a:	9300      	str	r3, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	f002 f80d 	bl	800325c <HAL_I2C_Mem_Read>
 8001242:	4603      	mov	r3, r0
 8001244:	2b00      	cmp	r3, #0
 8001246:	d10c      	bne.n	8001262 <read_register16+0x56>
			== HAL_OK) {
		*value = (uint16_t) ((rx_buff[1] << 8) | rx_buff[0]);
 8001248:	7d7b      	ldrb	r3, [r7, #21]
 800124a:	b21b      	sxth	r3, r3
 800124c:	021b      	lsls	r3, r3, #8
 800124e:	b21a      	sxth	r2, r3
 8001250:	7d3b      	ldrb	r3, [r7, #20]
 8001252:	b21b      	sxth	r3, r3
 8001254:	4313      	orrs	r3, r2
 8001256:	b21b      	sxth	r3, r3
 8001258:	b29a      	uxth	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	801a      	strh	r2, [r3, #0]
		return true;
 800125e:	2301      	movs	r3, #1
 8001260:	e000      	b.n	8001264 <read_register16+0x58>
	} else
		return false;
 8001262:	2300      	movs	r3, #0

}
 8001264:	4618      	mov	r0, r3
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <read_data>:

static inline int read_data(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t *value,
		uint8_t len) {
 800126c:	b590      	push	{r4, r7, lr}
 800126e:	b08b      	sub	sp, #44	@ 0x2c
 8001270:	af04      	add	r7, sp, #16
 8001272:	60f8      	str	r0, [r7, #12]
 8001274:	607a      	str	r2, [r7, #4]
 8001276:	461a      	mov	r2, r3
 8001278:	460b      	mov	r3, r1
 800127a:	72fb      	strb	r3, [r7, #11]
 800127c:	4613      	mov	r3, r2
 800127e:	72bb      	strb	r3, [r7, #10]
	uint16_t tx_buff;
	tx_buff = (dev->addr << 1);
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001284:	005b      	lsls	r3, r3, #1
 8001286:	82fb      	strh	r3, [r7, #22]
	if (HAL_I2C_Mem_Read(dev->i2c, tx_buff, addr, 1, value, len, 5000) == HAL_OK)
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800128c:	7afb      	ldrb	r3, [r7, #11]
 800128e:	b29a      	uxth	r2, r3
 8001290:	7abb      	ldrb	r3, [r7, #10]
 8001292:	b29b      	uxth	r3, r3
 8001294:	8af9      	ldrh	r1, [r7, #22]
 8001296:	f241 3488 	movw	r4, #5000	@ 0x1388
 800129a:	9402      	str	r4, [sp, #8]
 800129c:	9301      	str	r3, [sp, #4]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	2301      	movs	r3, #1
 80012a4:	f001 ffda 	bl	800325c <HAL_I2C_Mem_Read>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <read_data+0x46>
		return 0;
 80012ae:	2300      	movs	r3, #0
 80012b0:	e000      	b.n	80012b4 <read_data+0x48>
	else
		return 1;
 80012b2:	2301      	movs	r3, #1

}
 80012b4:	4618      	mov	r0, r3
 80012b6:	371c      	adds	r7, #28
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd90      	pop	{r4, r7, pc}

080012bc <read_calibration_data>:

static bool read_calibration_data(BMP280_HandleTypedef *dev) {
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

	if (read_register16(dev, 0x88, &dev->dig_T1)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	461a      	mov	r2, r3
 80012c8:	2188      	movs	r1, #136	@ 0x88
 80012ca:	6878      	ldr	r0, [r7, #4]
 80012cc:	f7ff ff9e 	bl	800120c <read_register16>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d06f      	beq.n	80013b6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8a, (uint16_t *) &dev->dig_T2)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	3302      	adds	r3, #2
 80012da:	461a      	mov	r2, r3
 80012dc:	218a      	movs	r1, #138	@ 0x8a
 80012de:	6878      	ldr	r0, [r7, #4]
 80012e0:	f7ff ff94 	bl	800120c <read_register16>
 80012e4:	4603      	mov	r3, r0
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d065      	beq.n	80013b6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8c, (uint16_t *) &dev->dig_T3)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	3304      	adds	r3, #4
 80012ee:	461a      	mov	r2, r3
 80012f0:	218c      	movs	r1, #140	@ 0x8c
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7ff ff8a 	bl	800120c <read_register16>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d05b      	beq.n	80013b6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x8e, &dev->dig_P1)
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3306      	adds	r3, #6
 8001302:	461a      	mov	r2, r3
 8001304:	218e      	movs	r1, #142	@ 0x8e
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff ff80 	bl	800120c <read_register16>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d051      	beq.n	80013b6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x90, (uint16_t *) &dev->dig_P2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3308      	adds	r3, #8
 8001316:	461a      	mov	r2, r3
 8001318:	2190      	movs	r1, #144	@ 0x90
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f7ff ff76 	bl	800120c <read_register16>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d047      	beq.n	80013b6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x92, (uint16_t *) &dev->dig_P3)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	330a      	adds	r3, #10
 800132a:	461a      	mov	r2, r3
 800132c:	2192      	movs	r1, #146	@ 0x92
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f7ff ff6c 	bl	800120c <read_register16>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d03d      	beq.n	80013b6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x94, (uint16_t *) &dev->dig_P4)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	330c      	adds	r3, #12
 800133e:	461a      	mov	r2, r3
 8001340:	2194      	movs	r1, #148	@ 0x94
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ff62 	bl	800120c <read_register16>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d033      	beq.n	80013b6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x96, (uint16_t *) &dev->dig_P5)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	330e      	adds	r3, #14
 8001352:	461a      	mov	r2, r3
 8001354:	2196      	movs	r1, #150	@ 0x96
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ff58 	bl	800120c <read_register16>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d029      	beq.n	80013b6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x98, (uint16_t *) &dev->dig_P6)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3310      	adds	r3, #16
 8001366:	461a      	mov	r2, r3
 8001368:	2198      	movs	r1, #152	@ 0x98
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f7ff ff4e 	bl	800120c <read_register16>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d01f      	beq.n	80013b6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9a, (uint16_t *) &dev->dig_P7)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	3312      	adds	r3, #18
 800137a:	461a      	mov	r2, r3
 800137c:	219a      	movs	r1, #154	@ 0x9a
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f7ff ff44 	bl	800120c <read_register16>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d015      	beq.n	80013b6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9c, (uint16_t *) &dev->dig_P8)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	3314      	adds	r3, #20
 800138e:	461a      	mov	r2, r3
 8001390:	219c      	movs	r1, #156	@ 0x9c
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff ff3a 	bl	800120c <read_register16>
 8001398:	4603      	mov	r3, r0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d00b      	beq.n	80013b6 <read_calibration_data+0xfa>
			&& read_register16(dev, 0x9e,
					(uint16_t *) &dev->dig_P9)) {
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3316      	adds	r3, #22
			&& read_register16(dev, 0x9e,
 80013a2:	461a      	mov	r2, r3
 80013a4:	219e      	movs	r1, #158	@ 0x9e
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff30 	bl	800120c <read_register16>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <read_calibration_data+0xfa>

		return true;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <read_calibration_data+0xfc>
	}

	return false;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3708      	adds	r7, #8
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <read_hum_calibration_data>:

static bool read_hum_calibration_data(BMP280_HandleTypedef *dev) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
	uint16_t h4, h5;

	if (!read_data(dev, 0xa1, &dev->dig_H1, 1)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	f103 0218 	add.w	r2, r3, #24
 80013ce:	2301      	movs	r3, #1
 80013d0:	21a1      	movs	r1, #161	@ 0xa1
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff4a 	bl	800126c <read_data>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d14c      	bne.n	8001478 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe1, (uint16_t *) &dev->dig_H2)
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	331a      	adds	r3, #26
 80013e2:	461a      	mov	r2, r3
 80013e4:	21e1      	movs	r1, #225	@ 0xe1
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff ff10 	bl	800120c <read_register16>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d042      	beq.n	8001478 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe3, &dev->dig_H3, 1)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f103 021c 	add.w	r2, r3, #28
 80013f8:	2301      	movs	r3, #1
 80013fa:	21e3      	movs	r1, #227	@ 0xe3
 80013fc:	6878      	ldr	r0, [r7, #4]
 80013fe:	f7ff ff35 	bl	800126c <read_data>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d137      	bne.n	8001478 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe4, &h4)
 8001408:	f107 030e 	add.w	r3, r7, #14
 800140c:	461a      	mov	r2, r3
 800140e:	21e4      	movs	r1, #228	@ 0xe4
 8001410:	6878      	ldr	r0, [r7, #4]
 8001412:	f7ff fefb 	bl	800120c <read_register16>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d02d      	beq.n	8001478 <read_hum_calibration_data+0xb8>
			&& read_register16(dev, 0xe5, &h5)
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	461a      	mov	r2, r3
 8001422:	21e5      	movs	r1, #229	@ 0xe5
 8001424:	6878      	ldr	r0, [r7, #4]
 8001426:	f7ff fef1 	bl	800120c <read_register16>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d023      	beq.n	8001478 <read_hum_calibration_data+0xb8>
			&& !read_data(dev, 0xe7, (uint8_t *) &dev->dig_H6, 1)) {
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8001436:	2301      	movs	r3, #1
 8001438:	21e7      	movs	r1, #231	@ 0xe7
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff16 	bl	800126c <read_data>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d118      	bne.n	8001478 <read_hum_calibration_data+0xb8>
		dev->dig_H4 = (h4 & 0x00ff) << 4 | (h4 & 0x0f00) >> 8;
 8001446:	89fb      	ldrh	r3, [r7, #14]
 8001448:	b21b      	sxth	r3, r3
 800144a:	011b      	lsls	r3, r3, #4
 800144c:	b21b      	sxth	r3, r3
 800144e:	f403 637f 	and.w	r3, r3, #4080	@ 0xff0
 8001452:	b21a      	sxth	r2, r3
 8001454:	89fb      	ldrh	r3, [r7, #14]
 8001456:	121b      	asrs	r3, r3, #8
 8001458:	b21b      	sxth	r3, r3
 800145a:	f003 030f 	and.w	r3, r3, #15
 800145e:	b21b      	sxth	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b21a      	sxth	r2, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	83da      	strh	r2, [r3, #30]
		dev->dig_H5 = h5 >> 4;
 8001468:	89bb      	ldrh	r3, [r7, #12]
 800146a:	091b      	lsrs	r3, r3, #4
 800146c:	b29b      	uxth	r3, r3
 800146e:	b21a      	sxth	r2, r3
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	841a      	strh	r2, [r3, #32]

		return true;
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <read_hum_calibration_data+0xba>
	}

	return false;
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	3710      	adds	r7, #16
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <write_register8>:

static int write_register8(BMP280_HandleTypedef *dev, uint8_t addr, uint8_t value) {
 8001482:	b580      	push	{r7, lr}
 8001484:	b088      	sub	sp, #32
 8001486:	af04      	add	r7, sp, #16
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	460b      	mov	r3, r1
 800148c:	70fb      	strb	r3, [r7, #3]
 800148e:	4613      	mov	r3, r2
 8001490:	70bb      	strb	r3, [r7, #2]
	uint16_t tx_buff;

	tx_buff = (dev->addr << 1);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Mem_Write(dev->i2c, tx_buff, addr, 1, &value, 1, 10000) == HAL_OK)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	89f9      	ldrh	r1, [r7, #14]
 80014a4:	f242 7310 	movw	r3, #10000	@ 0x2710
 80014a8:	9302      	str	r3, [sp, #8]
 80014aa:	2301      	movs	r3, #1
 80014ac:	9301      	str	r3, [sp, #4]
 80014ae:	1cbb      	adds	r3, r7, #2
 80014b0:	9300      	str	r3, [sp, #0]
 80014b2:	2301      	movs	r3, #1
 80014b4:	f001 fdbe 	bl	8003034 <HAL_I2C_Mem_Write>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d101      	bne.n	80014c2 <write_register8+0x40>
		return false;
 80014be:	2300      	movs	r3, #0
 80014c0:	e000      	b.n	80014c4 <write_register8+0x42>
	else
		return true;
 80014c2:	2301      	movs	r3, #1
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	3710      	adds	r7, #16
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}

080014cc <bmp280_init>:

bool bmp280_init(BMP280_HandleTypedef *dev, bmp280_params_t *params) {
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b084      	sub	sp, #16
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]

	if (dev->addr != BMP280_I2C_ADDRESS_0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014da:	2b76      	cmp	r3, #118	@ 0x76
 80014dc:	d005      	beq.n	80014ea <bmp280_init+0x1e>
			&& dev->addr != BMP280_I2C_ADDRESS_1) {
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80014e2:	2b77      	cmp	r3, #119	@ 0x77
 80014e4:	d001      	beq.n	80014ea <bmp280_init+0x1e>

		return false;
 80014e6:	2300      	movs	r3, #0
 80014e8:	e09d      	b.n	8001626 <bmp280_init+0x15a>
	}

	if (read_data(dev, BMP280_REG_ID, &dev->id, 1)) {
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80014f0:	2301      	movs	r3, #1
 80014f2:	21d0      	movs	r1, #208	@ 0xd0
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff feb9 	bl	800126c <read_data>
 80014fa:	4603      	mov	r3, r0
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d001      	beq.n	8001504 <bmp280_init+0x38>
		return false;
 8001500:	2300      	movs	r3, #0
 8001502:	e090      	b.n	8001626 <bmp280_init+0x15a>
	}

	if (dev->id != BMP280_CHIP_ID && dev->id != BME280_CHIP_ID) {
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800150a:	2b58      	cmp	r3, #88	@ 0x58
 800150c:	d006      	beq.n	800151c <bmp280_init+0x50>
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001514:	2b60      	cmp	r3, #96	@ 0x60
 8001516:	d001      	beq.n	800151c <bmp280_init+0x50>

		return false;
 8001518:	2300      	movs	r3, #0
 800151a:	e084      	b.n	8001626 <bmp280_init+0x15a>
	}

	// Soft reset.
	if (write_register8(dev, BMP280_REG_RESET, BMP280_RESET_VALUE)) {
 800151c:	22b6      	movs	r2, #182	@ 0xb6
 800151e:	21e0      	movs	r1, #224	@ 0xe0
 8001520:	6878      	ldr	r0, [r7, #4]
 8001522:	f7ff ffae 	bl	8001482 <write_register8>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <bmp280_init+0x64>
		return false;
 800152c:	2300      	movs	r3, #0
 800152e:	e07a      	b.n	8001626 <bmp280_init+0x15a>
	}

	// Wait until finished copying over the NVP data.
	while (1) {
		uint8_t status;
		if (!read_data(dev, BMP280_REG_STATUS, &status, 1)
 8001530:	f107 020c 	add.w	r2, r7, #12
 8001534:	2301      	movs	r3, #1
 8001536:	21f3      	movs	r1, #243	@ 0xf3
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f7ff fe97 	bl	800126c <read_data>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1f5      	bne.n	8001530 <bmp280_init+0x64>
				&& (status & 1) == 0)
 8001544:	7b3b      	ldrb	r3, [r7, #12]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1f0      	bne.n	8001530 <bmp280_init+0x64>
			break;
	}

	if (!read_calibration_data(dev)) {
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff feb4 	bl	80012bc <read_calibration_data>
 8001554:	4603      	mov	r3, r0
 8001556:	f083 0301 	eor.w	r3, r3, #1
 800155a:	b2db      	uxtb	r3, r3
 800155c:	2b00      	cmp	r3, #0
 800155e:	d100      	bne.n	8001562 <bmp280_init+0x96>
 8001560:	e001      	b.n	8001566 <bmp280_init+0x9a>
		return false;
 8001562:	2300      	movs	r3, #0
 8001564:	e05f      	b.n	8001626 <bmp280_init+0x15a>
	}

	if (dev->id == BME280_CHIP_ID && !read_hum_calibration_data(dev)) {
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800156c:	2b60      	cmp	r3, #96	@ 0x60
 800156e:	d10a      	bne.n	8001586 <bmp280_init+0xba>
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff25 	bl	80013c0 <read_hum_calibration_data>
 8001576:	4603      	mov	r3, r0
 8001578:	f083 0301 	eor.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d001      	beq.n	8001586 <bmp280_init+0xba>
		return false;
 8001582:	2300      	movs	r3, #0
 8001584:	e04f      	b.n	8001626 <bmp280_init+0x15a>
	}

	uint8_t config = (params->standby << 5) | (params->filter << 2);
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	795b      	ldrb	r3, [r3, #5]
 800158a:	b25b      	sxtb	r3, r3
 800158c:	015b      	lsls	r3, r3, #5
 800158e:	b25a      	sxtb	r2, r3
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	785b      	ldrb	r3, [r3, #1]
 8001594:	b25b      	sxtb	r3, r3
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	b25b      	sxtb	r3, r3
 800159a:	4313      	orrs	r3, r2
 800159c:	b25b      	sxtb	r3, r3
 800159e:	73fb      	strb	r3, [r7, #15]
	if (write_register8(dev, BMP280_REG_CONFIG, config)) {
 80015a0:	7bfb      	ldrb	r3, [r7, #15]
 80015a2:	461a      	mov	r2, r3
 80015a4:	21f5      	movs	r1, #245	@ 0xf5
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f7ff ff6b 	bl	8001482 <write_register8>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <bmp280_init+0xea>
		return false;
 80015b2:	2300      	movs	r3, #0
 80015b4:	e037      	b.n	8001626 <bmp280_init+0x15a>
	}

	if (params->mode == BMP280_MODE_FORCED) {
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b01      	cmp	r3, #1
 80015bc:	d102      	bne.n	80015c4 <bmp280_init+0xf8>
		params->mode = BMP280_MODE_SLEEP;  // initial mode for forced is sleep
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	2200      	movs	r2, #0
 80015c2:	701a      	strb	r2, [r3, #0]
	}

	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	78db      	ldrb	r3, [r3, #3]
			| (params->oversampling_pressure << 2) | (params->mode);
 80015c8:	b25b      	sxtb	r3, r3
 80015ca:	015b      	lsls	r3, r3, #5
 80015cc:	b25a      	sxtb	r2, r3
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	789b      	ldrb	r3, [r3, #2]
 80015d2:	b25b      	sxtb	r3, r3
 80015d4:	009b      	lsls	r3, r3, #2
 80015d6:	b25b      	sxtb	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b25a      	sxtb	r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	b25b      	sxtb	r3, r3
 80015e2:	4313      	orrs	r3, r2
 80015e4:	b25b      	sxtb	r3, r3
	uint8_t ctrl = (params->oversampling_temperature << 5)
 80015e6:	73bb      	strb	r3, [r7, #14]

	if (dev->id == BME280_CHIP_ID) {
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80015ee:	2b60      	cmp	r3, #96	@ 0x60
 80015f0:	d10d      	bne.n	800160e <bmp280_init+0x142>
		// Write crtl hum reg first, only active after write to BMP280_REG_CTRL.
		uint8_t ctrl_hum = params->oversampling_humidity;
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	791b      	ldrb	r3, [r3, #4]
 80015f6:	737b      	strb	r3, [r7, #13]
		if (write_register8(dev, BMP280_REG_CTRL_HUM, ctrl_hum)) {
 80015f8:	7b7b      	ldrb	r3, [r7, #13]
 80015fa:	461a      	mov	r2, r3
 80015fc:	21f2      	movs	r1, #242	@ 0xf2
 80015fe:	6878      	ldr	r0, [r7, #4]
 8001600:	f7ff ff3f 	bl	8001482 <write_register8>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <bmp280_init+0x142>
			return false;
 800160a:	2300      	movs	r3, #0
 800160c:	e00b      	b.n	8001626 <bmp280_init+0x15a>
		}
	}

	if (write_register8(dev, BMP280_REG_CTRL, ctrl)) {
 800160e:	7bbb      	ldrb	r3, [r7, #14]
 8001610:	461a      	mov	r2, r3
 8001612:	21f4      	movs	r1, #244	@ 0xf4
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ff34 	bl	8001482 <write_register8>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <bmp280_init+0x158>
		return false;
 8001620:	2300      	movs	r3, #0
 8001622:	e000      	b.n	8001626 <bmp280_init+0x15a>
	}

	return true;
 8001624:	2301      	movs	r3, #1
}
 8001626:	4618      	mov	r0, r3
 8001628:	3710      	adds	r7, #16
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}

0800162e <compensate_temperature>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in degrees Celsius.
 */
static inline int32_t compensate_temperature(BMP280_HandleTypedef *dev, int32_t adc_temp,
		int32_t *fine_temp) {
 800162e:	b480      	push	{r7}
 8001630:	b087      	sub	sp, #28
 8001632:	af00      	add	r7, sp, #0
 8001634:	60f8      	str	r0, [r7, #12]
 8001636:	60b9      	str	r1, [r7, #8]
 8001638:	607a      	str	r2, [r7, #4]
	int32_t var1, var2;

	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 800163a:	68bb      	ldr	r3, [r7, #8]
 800163c:	10da      	asrs	r2, r3, #3
 800163e:	68fb      	ldr	r3, [r7, #12]
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	005b      	lsls	r3, r3, #1
 8001644:	1ad3      	subs	r3, r2, r3
			* (int32_t) dev->dig_T2) >> 11;
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800164c:	fb02 f303 	mul.w	r3, r2, r3
	var1 = ((((adc_temp >> 3) - ((int32_t) dev->dig_T1 << 1)))
 8001650:	12db      	asrs	r3, r3, #11
 8001652:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	111b      	asrs	r3, r3, #4
 8001658:	68fa      	ldr	r2, [r7, #12]
 800165a:	8812      	ldrh	r2, [r2, #0]
 800165c:	1a9b      	subs	r3, r3, r2
			* ((adc_temp >> 4) - (int32_t) dev->dig_T1)) >> 12)
 800165e:	68ba      	ldr	r2, [r7, #8]
 8001660:	1112      	asrs	r2, r2, #4
 8001662:	68f9      	ldr	r1, [r7, #12]
 8001664:	8809      	ldrh	r1, [r1, #0]
 8001666:	1a52      	subs	r2, r2, r1
 8001668:	fb02 f303 	mul.w	r3, r2, r3
 800166c:	131b      	asrs	r3, r3, #12
			* (int32_t) dev->dig_T3) >> 14;
 800166e:	68fa      	ldr	r2, [r7, #12]
 8001670:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001674:	fb02 f303 	mul.w	r3, r2, r3
	var2 = (((((adc_temp >> 4) - (int32_t) dev->dig_T1)
 8001678:	139b      	asrs	r3, r3, #14
 800167a:	613b      	str	r3, [r7, #16]

	*fine_temp = var1 + var2;
 800167c:	697a      	ldr	r2, [r7, #20]
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	441a      	add	r2, r3
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	601a      	str	r2, [r3, #0]
	return (*fine_temp * 5 + 128) >> 8;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	4613      	mov	r3, r2
 800168c:	009b      	lsls	r3, r3, #2
 800168e:	4413      	add	r3, r2
 8001690:	3380      	adds	r3, #128	@ 0x80
 8001692:	121b      	asrs	r3, r3, #8
}
 8001694:	4618      	mov	r0, r3
 8001696:	371c      	adds	r7, #28
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <compensate_pressure>:
 * Compensation algorithm is taken from BMP280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_pressure(BMP280_HandleTypedef *dev, int32_t adc_press,
		int32_t fine_temp) {
 80016a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016a4:	b0cc      	sub	sp, #304	@ 0x130
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
 80016ac:	f8c7 1110 	str.w	r1, [r7, #272]	@ 0x110
 80016b0:	f8c7 210c 	str.w	r2, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;

	var1 = (int64_t) fine_temp - 128000;
 80016b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80016b8:	17da      	asrs	r2, r3, #31
 80016ba:	461c      	mov	r4, r3
 80016bc:	4615      	mov	r5, r2
 80016be:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80016c2:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 80016c6:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	@ 0x128
	var2 = var1 * var1 * (int64_t) dev->dig_P6;
 80016ca:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016ce:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016d2:	fb03 f102 	mul.w	r1, r3, r2
 80016d6:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80016da:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016de:	fb02 f303 	mul.w	r3, r2, r3
 80016e2:	18ca      	adds	r2, r1, r3
 80016e4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80016e8:	fba3 8903 	umull	r8, r9, r3, r3
 80016ec:	eb02 0309 	add.w	r3, r2, r9
 80016f0:	4699      	mov	r9, r3
 80016f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016f6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80016fa:	b21b      	sxth	r3, r3
 80016fc:	17da      	asrs	r2, r3, #31
 80016fe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001702:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001706:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800170a:	4603      	mov	r3, r0
 800170c:	fb03 f209 	mul.w	r2, r3, r9
 8001710:	460b      	mov	r3, r1
 8001712:	fb08 f303 	mul.w	r3, r8, r3
 8001716:	4413      	add	r3, r2
 8001718:	4602      	mov	r2, r0
 800171a:	fba8 1202 	umull	r1, r2, r8, r2
 800171e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001722:	460a      	mov	r2, r1
 8001724:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001728:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800172c:	4413      	add	r3, r2
 800172e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001732:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001736:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
 800173a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + ((var1 * (int64_t) dev->dig_P5) << 17);
 800173e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001742:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001746:	b21b      	sxth	r3, r3
 8001748:	17da      	asrs	r2, r3, #31
 800174a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800174e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001752:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001756:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800175a:	462a      	mov	r2, r5
 800175c:	fb02 f203 	mul.w	r2, r2, r3
 8001760:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001764:	4621      	mov	r1, r4
 8001766:	fb01 f303 	mul.w	r3, r1, r3
 800176a:	441a      	add	r2, r3
 800176c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001770:	4621      	mov	r1, r4
 8001772:	fba3 1301 	umull	r1, r3, r3, r1
 8001776:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800177a:	460b      	mov	r3, r1
 800177c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001780:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001784:	18d3      	adds	r3, r2, r3
 8001786:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800178a:	f04f 0000 	mov.w	r0, #0
 800178e:	f04f 0100 	mov.w	r1, #0
 8001792:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001796:	462b      	mov	r3, r5
 8001798:	0459      	lsls	r1, r3, #17
 800179a:	4623      	mov	r3, r4
 800179c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80017a0:	4623      	mov	r3, r4
 80017a2:	0458      	lsls	r0, r3, #17
 80017a4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017a8:	1814      	adds	r4, r2, r0
 80017aa:	643c      	str	r4, [r7, #64]	@ 0x40
 80017ac:	414b      	adcs	r3, r1
 80017ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80017b0:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80017b4:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var2 = var2 + (((int64_t) dev->dig_P4) << 35);
 80017b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80017bc:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	17da      	asrs	r2, r3, #31
 80017c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80017c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80017cc:	f04f 0000 	mov.w	r0, #0
 80017d0:	f04f 0100 	mov.w	r1, #0
 80017d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80017d8:	00d9      	lsls	r1, r3, #3
 80017da:	2000      	movs	r0, #0
 80017dc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017e0:	1814      	adds	r4, r2, r0
 80017e2:	63bc      	str	r4, [r7, #56]	@ 0x38
 80017e4:	414b      	adcs	r3, r1
 80017e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80017e8:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80017ec:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80017f0:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 80017f4:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80017f8:	fb03 f102 	mul.w	r1, r3, r2
 80017fc:	f8d7 212c 	ldr.w	r2, [r7, #300]	@ 0x12c
 8001800:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8001804:	fb02 f303 	mul.w	r3, r2, r3
 8001808:	18ca      	adds	r2, r1, r3
 800180a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800180e:	fba3 1303 	umull	r1, r3, r3, r3
 8001812:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001816:	460b      	mov	r3, r1
 8001818:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800181c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8001820:	18d3      	adds	r3, r2, r3
 8001822:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800182a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800182e:	b21b      	sxth	r3, r3
 8001830:	17da      	asrs	r2, r3, #31
 8001832:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001836:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800183a:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800183e:	462b      	mov	r3, r5
 8001840:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001844:	4642      	mov	r2, r8
 8001846:	fb02 f203 	mul.w	r2, r2, r3
 800184a:	464b      	mov	r3, r9
 800184c:	4621      	mov	r1, r4
 800184e:	fb01 f303 	mul.w	r3, r1, r3
 8001852:	4413      	add	r3, r2
 8001854:	4622      	mov	r2, r4
 8001856:	4641      	mov	r1, r8
 8001858:	fba2 1201 	umull	r1, r2, r2, r1
 800185c:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8001860:	460a      	mov	r2, r1
 8001862:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001866:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 800186a:	4413      	add	r3, r2
 800186c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8001870:	f04f 0000 	mov.w	r0, #0
 8001874:	f04f 0100 	mov.w	r1, #0
 8001878:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 800187c:	4623      	mov	r3, r4
 800187e:	0a18      	lsrs	r0, r3, #8
 8001880:	462b      	mov	r3, r5
 8001882:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001886:	462b      	mov	r3, r5
 8001888:	1219      	asrs	r1, r3, #8
			+ ((var1 * (int64_t) dev->dig_P2) << 12);
 800188a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800188e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001892:	b21b      	sxth	r3, r3
 8001894:	17da      	asrs	r2, r3, #31
 8001896:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800189a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800189e:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018a2:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80018a6:	464a      	mov	r2, r9
 80018a8:	fb02 f203 	mul.w	r2, r2, r3
 80018ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80018b0:	4644      	mov	r4, r8
 80018b2:	fb04 f303 	mul.w	r3, r4, r3
 80018b6:	441a      	add	r2, r3
 80018b8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80018bc:	4644      	mov	r4, r8
 80018be:	fba3 4304 	umull	r4, r3, r3, r4
 80018c2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80018c6:	4623      	mov	r3, r4
 80018c8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80018cc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80018d0:	18d3      	adds	r3, r2, r3
 80018d2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80018d6:	f04f 0200 	mov.w	r2, #0
 80018da:	f04f 0300 	mov.w	r3, #0
 80018de:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80018e2:	464c      	mov	r4, r9
 80018e4:	0323      	lsls	r3, r4, #12
 80018e6:	4644      	mov	r4, r8
 80018e8:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80018ec:	4644      	mov	r4, r8
 80018ee:	0322      	lsls	r2, r4, #12
	var1 = ((var1 * var1 * (int64_t) dev->dig_P3) >> 8)
 80018f0:	1884      	adds	r4, r0, r2
 80018f2:	633c      	str	r4, [r7, #48]	@ 0x30
 80018f4:	eb41 0303 	adc.w	r3, r1, r3
 80018f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80018fa:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80018fe:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
	var1 = (((int64_t) 1 << 47) + var1) * ((int64_t) dev->dig_P1) >> 33;
 8001902:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001906:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800190a:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800190e:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8001912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001916:	88db      	ldrh	r3, [r3, #6]
 8001918:	b29b      	uxth	r3, r3
 800191a:	2200      	movs	r2, #0
 800191c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001920:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001924:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001928:	462b      	mov	r3, r5
 800192a:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800192e:	4642      	mov	r2, r8
 8001930:	fb02 f203 	mul.w	r2, r2, r3
 8001934:	464b      	mov	r3, r9
 8001936:	4621      	mov	r1, r4
 8001938:	fb01 f303 	mul.w	r3, r1, r3
 800193c:	4413      	add	r3, r2
 800193e:	4622      	mov	r2, r4
 8001940:	4641      	mov	r1, r8
 8001942:	fba2 1201 	umull	r1, r2, r2, r1
 8001946:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800194a:	460a      	mov	r2, r1
 800194c:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001950:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001954:	4413      	add	r3, r2
 8001956:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800195a:	f04f 0200 	mov.w	r2, #0
 800195e:	f04f 0300 	mov.w	r3, #0
 8001962:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001966:	4629      	mov	r1, r5
 8001968:	104a      	asrs	r2, r1, #1
 800196a:	4629      	mov	r1, r5
 800196c:	17cb      	asrs	r3, r1, #31
 800196e:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128

	if (var1 == 0) {
 8001972:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001976:	4313      	orrs	r3, r2
 8001978:	d101      	bne.n	800197e <compensate_pressure+0x2de>
		return 0;  // avoid exception caused by division by zero
 800197a:	2300      	movs	r3, #0
 800197c:	e148      	b.n	8001c10 <compensate_pressure+0x570>
	}

	p = 1048576 - adc_press;
 800197e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001982:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001986:	17da      	asrs	r2, r3, #31
 8001988:	62bb      	str	r3, [r7, #40]	@ 0x28
 800198a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800198c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001990:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	p = (((p << 31) - var2) * 3125) / var1;
 8001994:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001998:	105b      	asrs	r3, r3, #1
 800199a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800199e:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80019a2:	07db      	lsls	r3, r3, #31
 80019a4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80019a8:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019ac:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80019b0:	4621      	mov	r1, r4
 80019b2:	1a89      	subs	r1, r1, r2
 80019b4:	67b9      	str	r1, [r7, #120]	@ 0x78
 80019b6:	4629      	mov	r1, r5
 80019b8:	eb61 0303 	sbc.w	r3, r1, r3
 80019bc:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80019be:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80019c2:	4622      	mov	r2, r4
 80019c4:	462b      	mov	r3, r5
 80019c6:	1891      	adds	r1, r2, r2
 80019c8:	6239      	str	r1, [r7, #32]
 80019ca:	415b      	adcs	r3, r3
 80019cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80019ce:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019d2:	4621      	mov	r1, r4
 80019d4:	1851      	adds	r1, r2, r1
 80019d6:	61b9      	str	r1, [r7, #24]
 80019d8:	4629      	mov	r1, r5
 80019da:	414b      	adcs	r3, r1
 80019dc:	61fb      	str	r3, [r7, #28]
 80019de:	f04f 0200 	mov.w	r2, #0
 80019e2:	f04f 0300 	mov.w	r3, #0
 80019e6:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80019ea:	4649      	mov	r1, r9
 80019ec:	018b      	lsls	r3, r1, #6
 80019ee:	4641      	mov	r1, r8
 80019f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019f4:	4641      	mov	r1, r8
 80019f6:	018a      	lsls	r2, r1, #6
 80019f8:	4641      	mov	r1, r8
 80019fa:	1889      	adds	r1, r1, r2
 80019fc:	6139      	str	r1, [r7, #16]
 80019fe:	4649      	mov	r1, r9
 8001a00:	eb43 0101 	adc.w	r1, r3, r1
 8001a04:	6179      	str	r1, [r7, #20]
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	f04f 0300 	mov.w	r3, #0
 8001a0e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a12:	4649      	mov	r1, r9
 8001a14:	008b      	lsls	r3, r1, #2
 8001a16:	4641      	mov	r1, r8
 8001a18:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a1c:	4641      	mov	r1, r8
 8001a1e:	008a      	lsls	r2, r1, #2
 8001a20:	4610      	mov	r0, r2
 8001a22:	4619      	mov	r1, r3
 8001a24:	4603      	mov	r3, r0
 8001a26:	4622      	mov	r2, r4
 8001a28:	189b      	adds	r3, r3, r2
 8001a2a:	60bb      	str	r3, [r7, #8]
 8001a2c:	460b      	mov	r3, r1
 8001a2e:	462a      	mov	r2, r5
 8001a30:	eb42 0303 	adc.w	r3, r2, r3
 8001a34:	60fb      	str	r3, [r7, #12]
 8001a36:	f04f 0200 	mov.w	r2, #0
 8001a3a:	f04f 0300 	mov.w	r3, #0
 8001a3e:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001a42:	4649      	mov	r1, r9
 8001a44:	008b      	lsls	r3, r1, #2
 8001a46:	4641      	mov	r1, r8
 8001a48:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a4c:	4641      	mov	r1, r8
 8001a4e:	008a      	lsls	r2, r1, #2
 8001a50:	4610      	mov	r0, r2
 8001a52:	4619      	mov	r1, r3
 8001a54:	4603      	mov	r3, r0
 8001a56:	4622      	mov	r2, r4
 8001a58:	189b      	adds	r3, r3, r2
 8001a5a:	673b      	str	r3, [r7, #112]	@ 0x70
 8001a5c:	462b      	mov	r3, r5
 8001a5e:	460a      	mov	r2, r1
 8001a60:	eb42 0303 	adc.w	r3, r2, r3
 8001a64:	677b      	str	r3, [r7, #116]	@ 0x74
 8001a66:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001a6a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001a6e:	f7ff f90b 	bl	8000c88 <__aeabi_ldivmod>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	var1 = ((int64_t) dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001a7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a7e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001a82:	b21b      	sxth	r3, r3
 8001a84:	17da      	asrs	r2, r3, #31
 8001a86:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001a88:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001a8a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a8e:	f04f 0000 	mov.w	r0, #0
 8001a92:	f04f 0100 	mov.w	r1, #0
 8001a96:	0b50      	lsrs	r0, r2, #13
 8001a98:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001a9c:	1359      	asrs	r1, r3, #13
 8001a9e:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001aa2:	462b      	mov	r3, r5
 8001aa4:	fb00 f203 	mul.w	r2, r0, r3
 8001aa8:	4623      	mov	r3, r4
 8001aaa:	fb03 f301 	mul.w	r3, r3, r1
 8001aae:	4413      	add	r3, r2
 8001ab0:	4622      	mov	r2, r4
 8001ab2:	fba2 1200 	umull	r1, r2, r2, r0
 8001ab6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001aba:	460a      	mov	r2, r1
 8001abc:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001ac0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001ac4:	4413      	add	r3, r2
 8001ac6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001aca:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001ace:	f04f 0000 	mov.w	r0, #0
 8001ad2:	f04f 0100 	mov.w	r1, #0
 8001ad6:	0b50      	lsrs	r0, r2, #13
 8001ad8:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001adc:	1359      	asrs	r1, r3, #13
 8001ade:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001ae2:	462b      	mov	r3, r5
 8001ae4:	fb00 f203 	mul.w	r2, r0, r3
 8001ae8:	4623      	mov	r3, r4
 8001aea:	fb03 f301 	mul.w	r3, r3, r1
 8001aee:	4413      	add	r3, r2
 8001af0:	4622      	mov	r2, r4
 8001af2:	fba2 1200 	umull	r1, r2, r2, r0
 8001af6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001afa:	460a      	mov	r2, r1
 8001afc:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001b00:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001b04:	4413      	add	r3, r2
 8001b06:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b0a:	f04f 0200 	mov.w	r2, #0
 8001b0e:	f04f 0300 	mov.w	r3, #0
 8001b12:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001b16:	4621      	mov	r1, r4
 8001b18:	0e4a      	lsrs	r2, r1, #25
 8001b1a:	4629      	mov	r1, r5
 8001b1c:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001b20:	4629      	mov	r1, r5
 8001b22:	164b      	asrs	r3, r1, #25
 8001b24:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
	var2 = ((int64_t) dev->dig_P8 * p) >> 19;
 8001b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001b2c:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001b30:	b21b      	sxth	r3, r3
 8001b32:	17da      	asrs	r2, r3, #31
 8001b34:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b36:	667a      	str	r2, [r7, #100]	@ 0x64
 8001b38:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 8001b3c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b40:	462a      	mov	r2, r5
 8001b42:	fb02 f203 	mul.w	r2, r2, r3
 8001b46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8001b4a:	4621      	mov	r1, r4
 8001b4c:	fb01 f303 	mul.w	r3, r1, r3
 8001b50:	4413      	add	r3, r2
 8001b52:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 8001b56:	4621      	mov	r1, r4
 8001b58:	fba2 1201 	umull	r1, r2, r2, r1
 8001b5c:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001b60:	460a      	mov	r2, r1
 8001b62:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001b66:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	0cca      	lsrs	r2, r1, #19
 8001b80:	4629      	mov	r1, r5
 8001b82:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001b86:	4629      	mov	r1, r5
 8001b88:	14cb      	asrs	r3, r1, #19
 8001b8a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120

	p = ((p + var1 + var2) >> 8) + ((int64_t) dev->dig_P7 << 4);
 8001b8e:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	@ 0x118
 8001b92:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8001b96:	1884      	adds	r4, r0, r2
 8001b98:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001b9a:	eb41 0303 	adc.w	r3, r1, r3
 8001b9e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001ba0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001ba4:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001ba8:	4621      	mov	r1, r4
 8001baa:	1889      	adds	r1, r1, r2
 8001bac:	6539      	str	r1, [r7, #80]	@ 0x50
 8001bae:	4629      	mov	r1, r5
 8001bb0:	eb43 0101 	adc.w	r1, r3, r1
 8001bb4:	6579      	str	r1, [r7, #84]	@ 0x54
 8001bb6:	f04f 0000 	mov.w	r0, #0
 8001bba:	f04f 0100 	mov.w	r1, #0
 8001bbe:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	0a18      	lsrs	r0, r3, #8
 8001bc6:	462b      	mov	r3, r5
 8001bc8:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001bcc:	462b      	mov	r3, r5
 8001bce:	1219      	asrs	r1, r3, #8
 8001bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001bd4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001bd8:	b21b      	sxth	r3, r3
 8001bda:	17da      	asrs	r2, r3, #31
 8001bdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001bde:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001be0:	f04f 0200 	mov.w	r2, #0
 8001be4:	f04f 0300 	mov.w	r3, #0
 8001be8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001bec:	464c      	mov	r4, r9
 8001bee:	0123      	lsls	r3, r4, #4
 8001bf0:	4644      	mov	r4, r8
 8001bf2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001bf6:	4644      	mov	r4, r8
 8001bf8:	0122      	lsls	r2, r4, #4
 8001bfa:	1884      	adds	r4, r0, r2
 8001bfc:	603c      	str	r4, [r7, #0]
 8001bfe:	eb41 0303 	adc.w	r3, r1, r3
 8001c02:	607b      	str	r3, [r7, #4]
 8001c04:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c08:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	return p;
 8001c0c:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8001c16:	46bd      	mov	sp, r7
 8001c18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001c1c <compensate_humidity>:
 * Compensation algorithm is taken from BME280 datasheet.
 *
 * Return value is in Pa, 24 integer bits and 8 fractional bits.
 */
static inline uint32_t compensate_humidity(BMP280_HandleTypedef *dev, int32_t adc_hum,
		int32_t fine_temp) {
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
	int32_t v_x1_u32r;

	v_x1_u32r = fine_temp - (int32_t) 76800;
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001c2e:	617b      	str	r3, [r7, #20]
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	039a      	lsls	r2, r3, #14
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001c3a:	051b      	lsls	r3, r3, #20
 8001c3c:	1ad2      	subs	r2, r2, r3
			- ((int32_t) dev->dig_H5 * v_x1_u32r)) + (int32_t) 16384) >> 15)
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001c44:	4619      	mov	r1, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fb01 f303 	mul.w	r3, r1, r3
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001c52:	13db      	asrs	r3, r3, #15
			* (((((((v_x1_u32r * (int32_t) dev->dig_H6) >> 10)
 8001c54:	68fa      	ldr	r2, [r7, #12]
 8001c56:	f992 2022 	ldrsb.w	r2, [r2, #34]	@ 0x22
 8001c5a:	4611      	mov	r1, r2
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	fb01 f202 	mul.w	r2, r1, r2
 8001c62:	1292      	asrs	r2, r2, #10
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c64:	68f9      	ldr	r1, [r7, #12]
 8001c66:	7f09      	ldrb	r1, [r1, #28]
 8001c68:	4608      	mov	r0, r1
 8001c6a:	6979      	ldr	r1, [r7, #20]
 8001c6c:	fb00 f101 	mul.w	r1, r0, r1
 8001c70:	12c9      	asrs	r1, r1, #11
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c72:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
					* (((v_x1_u32r * (int32_t) dev->dig_H3) >> 11)
 8001c76:	fb01 f202 	mul.w	r2, r1, r2
							+ (int32_t) 32768)) >> 10) + (int32_t) 2097152)
 8001c7a:	1292      	asrs	r2, r2, #10
 8001c7c:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
					* (int32_t) dev->dig_H2 + 8192) >> 14);
 8001c80:	68f9      	ldr	r1, [r7, #12]
 8001c82:	f9b1 101a 	ldrsh.w	r1, [r1, #26]
 8001c86:	fb01 f202 	mul.w	r2, r1, r2
 8001c8a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 8001c8e:	1392      	asrs	r2, r2, #14
	v_x1_u32r = ((((adc_hum << 14) - ((int32_t) dev->dig_H4 << 20)
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r
			- (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7)
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	13db      	asrs	r3, r3, #15
 8001c9a:	697a      	ldr	r2, [r7, #20]
 8001c9c:	13d2      	asrs	r2, r2, #15
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	11db      	asrs	r3, r3, #7
					* (int32_t) dev->dig_H1) >> 4);
 8001ca4:	68fa      	ldr	r2, [r7, #12]
 8001ca6:	7e12      	ldrb	r2, [r2, #24]
 8001ca8:	fb02 f303 	mul.w	r3, r2, r3
 8001cac:	111b      	asrs	r3, r3, #4
	v_x1_u32r = v_x1_u32r
 8001cae:	697a      	ldr	r2, [r7, #20]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r < 0 ? 0 : v_x1_u32r;
 8001cb4:	697b      	ldr	r3, [r7, #20]
 8001cb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001cba:	617b      	str	r3, [r7, #20]
	v_x1_u32r = v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r;
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001cc2:	bfa8      	it	ge
 8001cc4:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001cc8:	617b      	str	r3, [r7, #20]
	return v_x1_u32r >> 12;
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	131b      	asrs	r3, r3, #12
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	371c      	adds	r7, #28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <bmp280_read_fixed>:

bool bmp280_read_fixed(BMP280_HandleTypedef *dev, int32_t *temperature, uint32_t *pressure,
		uint32_t *humidity) {
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b08c      	sub	sp, #48	@ 0x30
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	60f8      	str	r0, [r7, #12]
 8001ce2:	60b9      	str	r1, [r7, #8]
 8001ce4:	607a      	str	r2, [r7, #4]
 8001ce6:	603b      	str	r3, [r7, #0]
	int32_t adc_pressure;
	int32_t adc_temp;
	uint8_t data[8];

	// Only the BME280 supports reading the humidity.
	if (dev->id != BME280_CHIP_ID) {
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001cee:	2b60      	cmp	r3, #96	@ 0x60
 8001cf0:	d007      	beq.n	8001d02 <bmp280_read_fixed+0x28>
		if (humidity)
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d002      	beq.n	8001cfe <bmp280_read_fixed+0x24>
			*humidity = 0;
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	601a      	str	r2, [r3, #0]
		humidity = NULL;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	603b      	str	r3, [r7, #0]
	}

	// Need to read in one sequence to ensure they match.
	size_t size = humidity ? 8 : 6;
 8001d02:	683b      	ldr	r3, [r7, #0]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <bmp280_read_fixed+0x32>
 8001d08:	2308      	movs	r3, #8
 8001d0a:	e000      	b.n	8001d0e <bmp280_read_fixed+0x34>
 8001d0c:	2306      	movs	r3, #6
 8001d0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (read_data(dev, 0xf7, data, size)) {
 8001d10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f107 0218 	add.w	r2, r7, #24
 8001d18:	21f7      	movs	r1, #247	@ 0xf7
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f7ff faa6 	bl	800126c <read_data>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <bmp280_read_fixed+0x50>
		return false;
 8001d26:	2300      	movs	r3, #0
 8001d28:	e038      	b.n	8001d9c <bmp280_read_fixed+0xc2>
	}

	adc_pressure = data[0] << 12 | data[1] << 4 | data[2] >> 4;
 8001d2a:	7e3b      	ldrb	r3, [r7, #24]
 8001d2c:	031a      	lsls	r2, r3, #12
 8001d2e:	7e7b      	ldrb	r3, [r7, #25]
 8001d30:	011b      	lsls	r3, r3, #4
 8001d32:	4313      	orrs	r3, r2
 8001d34:	7eba      	ldrb	r2, [r7, #26]
 8001d36:	0912      	lsrs	r2, r2, #4
 8001d38:	b2d2      	uxtb	r2, r2
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	62bb      	str	r3, [r7, #40]	@ 0x28
	adc_temp = data[3] << 12 | data[4] << 4 | data[5] >> 4;
 8001d3e:	7efb      	ldrb	r3, [r7, #27]
 8001d40:	031a      	lsls	r2, r3, #12
 8001d42:	7f3b      	ldrb	r3, [r7, #28]
 8001d44:	011b      	lsls	r3, r3, #4
 8001d46:	4313      	orrs	r3, r2
 8001d48:	7f7a      	ldrb	r2, [r7, #29]
 8001d4a:	0912      	lsrs	r2, r2, #4
 8001d4c:	b2d2      	uxtb	r2, r2
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	627b      	str	r3, [r7, #36]	@ 0x24

	int32_t fine_temp;
	*temperature = compensate_temperature(dev, adc_temp, &fine_temp);
 8001d52:	f107 0314 	add.w	r3, r7, #20
 8001d56:	461a      	mov	r2, r3
 8001d58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d5a:	68f8      	ldr	r0, [r7, #12]
 8001d5c:	f7ff fc67 	bl	800162e <compensate_temperature>
 8001d60:	4602      	mov	r2, r0
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	601a      	str	r2, [r3, #0]
	*pressure = compensate_pressure(dev, adc_pressure, fine_temp);
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	461a      	mov	r2, r3
 8001d6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001d6c:	68f8      	ldr	r0, [r7, #12]
 8001d6e:	f7ff fc97 	bl	80016a0 <compensate_pressure>
 8001d72:	4602      	mov	r2, r0
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	601a      	str	r2, [r3, #0]

	if (humidity) {
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00d      	beq.n	8001d9a <bmp280_read_fixed+0xc0>
		int32_t adc_humidity = data[6] << 8 | data[7];
 8001d7e:	7fbb      	ldrb	r3, [r7, #30]
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	7ffa      	ldrb	r2, [r7, #31]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	623b      	str	r3, [r7, #32]
		*humidity = compensate_humidity(dev, adc_humidity, fine_temp);
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	461a      	mov	r2, r3
 8001d8c:	6a39      	ldr	r1, [r7, #32]
 8001d8e:	68f8      	ldr	r0, [r7, #12]
 8001d90:	f7ff ff44 	bl	8001c1c <compensate_humidity>
 8001d94:	4602      	mov	r2, r0
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	601a      	str	r2, [r3, #0]
	}

	return true;
 8001d9a:	2301      	movs	r3, #1
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3730      	adds	r7, #48	@ 0x30
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <bmp280_read_float>:

bool bmp280_read_float(BMP280_HandleTypedef *dev, float *temperature, float *pressure,
		float *humidity) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60f8      	str	r0, [r7, #12]
 8001dac:	60b9      	str	r1, [r7, #8]
 8001dae:	607a      	str	r2, [r7, #4]
 8001db0:	603b      	str	r3, [r7, #0]
	int32_t fixed_temperature;
	uint32_t fixed_pressure;
	uint32_t fixed_humidity;
	if (bmp280_read_fixed(dev, &fixed_temperature, &fixed_pressure,
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <bmp280_read_float+0x1a>
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	e000      	b.n	8001dc0 <bmp280_read_float+0x1c>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	f107 0218 	add.w	r2, r7, #24
 8001dc4:	f107 011c 	add.w	r1, r7, #28
 8001dc8:	68f8      	ldr	r0, [r7, #12]
 8001dca:	f7ff ff86 	bl	8001cda <bmp280_read_fixed>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d028      	beq.n	8001e26 <bmp280_read_float+0x82>
			humidity ? &fixed_humidity : NULL)) {
		*temperature = (float) fixed_temperature / 100;
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	ee07 3a90 	vmov	s15, r3
 8001dda:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dde:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8001e30 <bmp280_read_float+0x8c>
 8001de2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001de6:	68bb      	ldr	r3, [r7, #8]
 8001de8:	edc3 7a00 	vstr	s15, [r3]
		*pressure = (float) fixed_pressure / 256;
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	ee07 3a90 	vmov	s15, r3
 8001df2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001df6:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8001e34 <bmp280_read_float+0x90>
 8001dfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	edc3 7a00 	vstr	s15, [r3]
		if (humidity)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <bmp280_read_float+0x7e>
			*humidity = (float) fixed_humidity / 1024;
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	ee07 3a90 	vmov	s15, r3
 8001e10:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e14:	eddf 6a08 	vldr	s13, [pc, #32]	@ 8001e38 <bmp280_read_float+0x94>
 8001e18:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	edc3 7a00 	vstr	s15, [r3]
		return true;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e000      	b.n	8001e28 <bmp280_read_float+0x84>
	}

	return false;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3720      	adds	r7, #32
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	42c80000 	.word	0x42c80000
 8001e34:	43800000 	.word	0x43800000
 8001e38:	44800000 	.word	0x44800000

08001e3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e3c:	b5b0      	push	{r4, r5, r7, lr}
 8001e3e:	b084      	sub	sp, #16
 8001e40:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e42:	f000 fd13 	bl	800286c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e46:	f000 f94f 	bl	80020e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e4a:	f000 fa4f 	bl	80022ec <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001e4e:	f000 fa1d 	bl	800228c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001e52:	f000 f99b 	bl	800218c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001e56:	f000 f9d9 	bl	800220c <MX_I2C2_Init>
  /* USER CODE BEGIN 2 */
  /*OLED SSD1309*/
  ssd1306_Init();
 8001e5a:	f003 ff77 	bl	8005d4c <ssd1306_Init>
  //ssd1306_TestAll();

  /*AS7341 sensor*/
  //AS7341_Init();
  while (AS7341_Init()) {
 8001e5e:	e013      	b.n	8001e88 <main+0x4c>
	  size = sprintf((char *)Data, "No AS7341 found\n\r");
 8001e60:	498a      	ldr	r1, [pc, #552]	@ (800208c <main+0x250>)
 8001e62:	488b      	ldr	r0, [pc, #556]	@ (8002090 <main+0x254>)
 8001e64:	f005 f898 	bl	8006f98 <siprintf>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	b29a      	uxth	r2, r3
 8001e6c:	4b89      	ldr	r3, [pc, #548]	@ (8002094 <main+0x258>)
 8001e6e:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001e70:	4b88      	ldr	r3, [pc, #544]	@ (8002094 <main+0x258>)
 8001e72:	881a      	ldrh	r2, [r3, #0]
 8001e74:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e78:	4985      	ldr	r1, [pc, #532]	@ (8002090 <main+0x254>)
 8001e7a:	4887      	ldr	r0, [pc, #540]	@ (8002098 <main+0x25c>)
 8001e7c:	f003 f9d0 	bl	8005220 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8001e80:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001e84:	f000 fd6e 	bl	8002964 <HAL_Delay>
  while (AS7341_Init()) {
 8001e88:	f7ff f91a 	bl	80010c0 <AS7341_Init>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1e6      	bne.n	8001e60 <main+0x24>
  }
  size = sprintf((char *)Data, "Found AS7341\n\r");
 8001e92:	4982      	ldr	r1, [pc, #520]	@ (800209c <main+0x260>)
 8001e94:	487e      	ldr	r0, [pc, #504]	@ (8002090 <main+0x254>)
 8001e96:	f005 f87f 	bl	8006f98 <siprintf>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	b29a      	uxth	r2, r3
 8001e9e:	4b7d      	ldr	r3, [pc, #500]	@ (8002094 <main+0x258>)
 8001ea0:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001ea2:	4b7c      	ldr	r3, [pc, #496]	@ (8002094 <main+0x258>)
 8001ea4:	881a      	ldrh	r2, [r3, #0]
 8001ea6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eaa:	4979      	ldr	r1, [pc, #484]	@ (8002090 <main+0x254>)
 8001eac:	487a      	ldr	r0, [pc, #488]	@ (8002098 <main+0x25c>)
 8001eae:	f003 f9b7 	bl	8005220 <HAL_UART_Transmit>
  AS7341_Setup();
 8001eb2:	f7ff f925 	bl	8001100 <AS7341_Setup>

  /*BMP280*/
  bmp280_init_default_params(&bmp280.params);
 8001eb6:	487a      	ldr	r0, [pc, #488]	@ (80020a0 <main+0x264>)
 8001eb8:	f7ff f98c 	bl	80011d4 <bmp280_init_default_params>
  bmp280.addr = BMP280_I2C_ADDRESS_0;
 8001ebc:	4b79      	ldr	r3, [pc, #484]	@ (80020a4 <main+0x268>)
 8001ebe:	2276      	movs	r2, #118	@ 0x76
 8001ec0:	849a      	strh	r2, [r3, #36]	@ 0x24
  bmp280.i2c = &hi2c1;
 8001ec2:	4b78      	ldr	r3, [pc, #480]	@ (80020a4 <main+0x268>)
 8001ec4:	4a78      	ldr	r2, [pc, #480]	@ (80020a8 <main+0x26c>)
 8001ec6:	629a      	str	r2, [r3, #40]	@ 0x28

  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001ec8:	e013      	b.n	8001ef2 <main+0xb6>
  	size = sprintf((char *)Data, "BMP280 initialization failed\n\r");
 8001eca:	4978      	ldr	r1, [pc, #480]	@ (80020ac <main+0x270>)
 8001ecc:	4870      	ldr	r0, [pc, #448]	@ (8002090 <main+0x254>)
 8001ece:	f005 f863 	bl	8006f98 <siprintf>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	4b6f      	ldr	r3, [pc, #444]	@ (8002094 <main+0x258>)
 8001ed8:	801a      	strh	r2, [r3, #0]
  	HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001eda:	4b6e      	ldr	r3, [pc, #440]	@ (8002094 <main+0x258>)
 8001edc:	881a      	ldrh	r2, [r3, #0]
 8001ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ee2:	496b      	ldr	r1, [pc, #428]	@ (8002090 <main+0x254>)
 8001ee4:	486c      	ldr	r0, [pc, #432]	@ (8002098 <main+0x25c>)
 8001ee6:	f003 f99b 	bl	8005220 <HAL_UART_Transmit>
  	HAL_Delay(2000);
 8001eea:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001eee:	f000 fd39 	bl	8002964 <HAL_Delay>
  while (!bmp280_init(&bmp280, &bmp280.params)) {
 8001ef2:	496b      	ldr	r1, [pc, #428]	@ (80020a0 <main+0x264>)
 8001ef4:	486b      	ldr	r0, [pc, #428]	@ (80020a4 <main+0x268>)
 8001ef6:	f7ff fae9 	bl	80014cc <bmp280_init>
 8001efa:	4603      	mov	r3, r0
 8001efc:	f083 0301 	eor.w	r3, r3, #1
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d1e1      	bne.n	8001eca <main+0x8e>
  }
  bool bme280p = bmp280.id == BME280_CHIP_ID;
 8001f06:	4b67      	ldr	r3, [pc, #412]	@ (80020a4 <main+0x268>)
 8001f08:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8001f0c:	2b60      	cmp	r3, #96	@ 0x60
 8001f0e:	bf0c      	ite	eq
 8001f10:	2301      	moveq	r3, #1
 8001f12:	2300      	movne	r3, #0
 8001f14:	71fb      	strb	r3, [r7, #7]
  size = sprintf((char *)Data, "BMP280: found %s\n", bme280p ? "BME280" : "BMP280");
 8001f16:	79fb      	ldrb	r3, [r7, #7]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <main+0xe4>
 8001f1c:	4b64      	ldr	r3, [pc, #400]	@ (80020b0 <main+0x274>)
 8001f1e:	e000      	b.n	8001f22 <main+0xe6>
 8001f20:	4b64      	ldr	r3, [pc, #400]	@ (80020b4 <main+0x278>)
 8001f22:	461a      	mov	r2, r3
 8001f24:	4964      	ldr	r1, [pc, #400]	@ (80020b8 <main+0x27c>)
 8001f26:	485a      	ldr	r0, [pc, #360]	@ (8002090 <main+0x254>)
 8001f28:	f005 f836 	bl	8006f98 <siprintf>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	b29a      	uxth	r2, r3
 8001f30:	4b58      	ldr	r3, [pc, #352]	@ (8002094 <main+0x258>)
 8001f32:	801a      	strh	r2, [r3, #0]
  HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001f34:	4b57      	ldr	r3, [pc, #348]	@ (8002094 <main+0x258>)
 8001f36:	881a      	ldrh	r2, [r3, #0]
 8001f38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f3c:	4954      	ldr	r1, [pc, #336]	@ (8002090 <main+0x254>)
 8001f3e:	4856      	ldr	r0, [pc, #344]	@ (8002098 <main+0x25c>)
 8001f40:	f003 f96e 	bl	8005220 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_Delay(100);
 8001f44:	2064      	movs	r0, #100	@ 0x64
 8001f46:	f000 fd0d 	bl	8002964 <HAL_Delay>
	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001f4a:	e013      	b.n	8001f74 <main+0x138>
		size = sprintf((char *)Data,"Temperature/pressure reading failed\n");
 8001f4c:	495b      	ldr	r1, [pc, #364]	@ (80020bc <main+0x280>)
 8001f4e:	4850      	ldr	r0, [pc, #320]	@ (8002090 <main+0x254>)
 8001f50:	f005 f822 	bl	8006f98 <siprintf>
 8001f54:	4603      	mov	r3, r0
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b4e      	ldr	r3, [pc, #312]	@ (8002094 <main+0x258>)
 8001f5a:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001f5c:	4b4d      	ldr	r3, [pc, #308]	@ (8002094 <main+0x258>)
 8001f5e:	881a      	ldrh	r2, [r3, #0]
 8001f60:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f64:	494a      	ldr	r1, [pc, #296]	@ (8002090 <main+0x254>)
 8001f66:	484c      	ldr	r0, [pc, #304]	@ (8002098 <main+0x25c>)
 8001f68:	f003 f95a 	bl	8005220 <HAL_UART_Transmit>
		HAL_Delay(2000);
 8001f6c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001f70:	f000 fcf8 	bl	8002964 <HAL_Delay>
	while (!bmp280_read_float(&bmp280, &temperature, &pressure, &humidity)) {
 8001f74:	4b52      	ldr	r3, [pc, #328]	@ (80020c0 <main+0x284>)
 8001f76:	4a53      	ldr	r2, [pc, #332]	@ (80020c4 <main+0x288>)
 8001f78:	4953      	ldr	r1, [pc, #332]	@ (80020c8 <main+0x28c>)
 8001f7a:	484a      	ldr	r0, [pc, #296]	@ (80020a4 <main+0x268>)
 8001f7c:	f7ff ff12 	bl	8001da4 <bmp280_read_float>
 8001f80:	4603      	mov	r3, r0
 8001f82:	f083 0301 	eor.w	r3, r3, #1
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d1df      	bne.n	8001f4c <main+0x110>
	}

	size = sprintf((char *)Data,"Pressure: %f Pa, Temperature: %f C", pressure, temperature);
 8001f8c:	4b4d      	ldr	r3, [pc, #308]	@ (80020c4 <main+0x288>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4618      	mov	r0, r3
 8001f92:	f7fe fad9 	bl	8000548 <__aeabi_f2d>
 8001f96:	4604      	mov	r4, r0
 8001f98:	460d      	mov	r5, r1
 8001f9a:	4b4b      	ldr	r3, [pc, #300]	@ (80020c8 <main+0x28c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7fe fad2 	bl	8000548 <__aeabi_f2d>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	460b      	mov	r3, r1
 8001fa8:	e9cd 2300 	strd	r2, r3, [sp]
 8001fac:	4622      	mov	r2, r4
 8001fae:	462b      	mov	r3, r5
 8001fb0:	4946      	ldr	r1, [pc, #280]	@ (80020cc <main+0x290>)
 8001fb2:	4837      	ldr	r0, [pc, #220]	@ (8002090 <main+0x254>)
 8001fb4:	f004 fff0 	bl	8006f98 <siprintf>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	4b35      	ldr	r3, [pc, #212]	@ (8002094 <main+0x258>)
 8001fbe:	801a      	strh	r2, [r3, #0]
	HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001fc0:	4b34      	ldr	r3, [pc, #208]	@ (8002094 <main+0x258>)
 8001fc2:	881a      	ldrh	r2, [r3, #0]
 8001fc4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fc8:	4931      	ldr	r1, [pc, #196]	@ (8002090 <main+0x254>)
 8001fca:	4833      	ldr	r0, [pc, #204]	@ (8002098 <main+0x25c>)
 8001fcc:	f003 f928 	bl	8005220 <HAL_UART_Transmit>
	if (bme280p) {
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d017      	beq.n	8002006 <main+0x1ca>
		size = sprintf((char *)Data,", Humidity: %f\n\r", humidity);
 8001fd6:	4b3a      	ldr	r3, [pc, #232]	@ (80020c0 <main+0x284>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7fe fab4 	bl	8000548 <__aeabi_f2d>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	493a      	ldr	r1, [pc, #232]	@ (80020d0 <main+0x294>)
 8001fe6:	482a      	ldr	r0, [pc, #168]	@ (8002090 <main+0x254>)
 8001fe8:	f004 ffd6 	bl	8006f98 <siprintf>
 8001fec:	4603      	mov	r3, r0
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	4b28      	ldr	r3, [pc, #160]	@ (8002094 <main+0x258>)
 8001ff2:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Data, size, 1000);
 8001ff4:	4b27      	ldr	r3, [pc, #156]	@ (8002094 <main+0x258>)
 8001ff6:	881a      	ldrh	r2, [r3, #0]
 8001ff8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ffc:	4924      	ldr	r1, [pc, #144]	@ (8002090 <main+0x254>)
 8001ffe:	4826      	ldr	r0, [pc, #152]	@ (8002098 <main+0x25c>)
 8002000:	f003 f90e 	bl	8005220 <HAL_UART_Transmit>
 8002004:	e00f      	b.n	8002026 <main+0x1ea>
	}

	else {
		size = sprintf((char *)Data, "\n\r");
 8002006:	4933      	ldr	r1, [pc, #204]	@ (80020d4 <main+0x298>)
 8002008:	4821      	ldr	r0, [pc, #132]	@ (8002090 <main+0x254>)
 800200a:	f004 ffc5 	bl	8006f98 <siprintf>
 800200e:	4603      	mov	r3, r0
 8002010:	b29a      	uxth	r2, r3
 8002012:	4b20      	ldr	r3, [pc, #128]	@ (8002094 <main+0x258>)
 8002014:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, Data, size, 1000);
 8002016:	4b1f      	ldr	r3, [pc, #124]	@ (8002094 <main+0x258>)
 8002018:	881a      	ldrh	r2, [r3, #0]
 800201a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800201e:	491c      	ldr	r1, [pc, #112]	@ (8002090 <main+0x254>)
 8002020:	481d      	ldr	r0, [pc, #116]	@ (8002098 <main+0x25c>)
 8002022:	f003 f8fd 	bl	8005220 <HAL_UART_Transmit>
	}
	// OLED display
	ssd1306_SetCursor(5,5);
 8002026:	2105      	movs	r1, #5
 8002028:	2005      	movs	r0, #5
 800202a:	f004 f845 	bl	80060b8 <ssd1306_SetCursor>
	sprintf((char *)Data_OLED,"Pres: %.2f Pa", pressure);
 800202e:	4b25      	ldr	r3, [pc, #148]	@ (80020c4 <main+0x288>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7fe fa88 	bl	8000548 <__aeabi_f2d>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4926      	ldr	r1, [pc, #152]	@ (80020d8 <main+0x29c>)
 800203e:	4827      	ldr	r0, [pc, #156]	@ (80020dc <main+0x2a0>)
 8002040:	f004 ffaa 	bl	8006f98 <siprintf>
	ssd1306_WriteString(Data_OLED, Font_6x8, White);
 8002044:	4b26      	ldr	r3, [pc, #152]	@ (80020e0 <main+0x2a4>)
 8002046:	2201      	movs	r2, #1
 8002048:	9200      	str	r2, [sp, #0]
 800204a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800204c:	4823      	ldr	r0, [pc, #140]	@ (80020dc <main+0x2a0>)
 800204e:	f004 f80d 	bl	800606c <ssd1306_WriteString>
	ssd1306_SetCursor(5,20);
 8002052:	2114      	movs	r1, #20
 8002054:	2005      	movs	r0, #5
 8002056:	f004 f82f 	bl	80060b8 <ssd1306_SetCursor>
	sprintf((char *)Data_OLED,"Temp: %.2f Pa", temperature);
 800205a:	4b1b      	ldr	r3, [pc, #108]	@ (80020c8 <main+0x28c>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4618      	mov	r0, r3
 8002060:	f7fe fa72 	bl	8000548 <__aeabi_f2d>
 8002064:	4602      	mov	r2, r0
 8002066:	460b      	mov	r3, r1
 8002068:	491e      	ldr	r1, [pc, #120]	@ (80020e4 <main+0x2a8>)
 800206a:	481c      	ldr	r0, [pc, #112]	@ (80020dc <main+0x2a0>)
 800206c:	f004 ff94 	bl	8006f98 <siprintf>
	ssd1306_WriteString(Data_OLED, Font_6x8, White);
 8002070:	4b1b      	ldr	r3, [pc, #108]	@ (80020e0 <main+0x2a4>)
 8002072:	2201      	movs	r2, #1
 8002074:	9200      	str	r2, [sp, #0]
 8002076:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002078:	4818      	ldr	r0, [pc, #96]	@ (80020dc <main+0x2a0>)
 800207a:	f003 fff7 	bl	800606c <ssd1306_WriteString>

	ssd1306_UpdateScreen();
 800207e:	f003 fee7 	bl	8005e50 <ssd1306_UpdateScreen>
	//
	HAL_Delay(2000);
 8002082:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002086:	f000 fc6d 	bl	8002964 <HAL_Delay>
	HAL_Delay(100);
 800208a:	e75b      	b.n	8001f44 <main+0x108>
 800208c:	0800a830 	.word	0x0800a830
 8002090:	20000364 	.word	0x20000364
 8002094:	20000360 	.word	0x20000360
 8002098:	20000298 	.word	0x20000298
 800209c:	0800a844 	.word	0x0800a844
 80020a0:	2000034c 	.word	0x2000034c
 80020a4:	20000320 	.word	0x20000320
 80020a8:	200001f0 	.word	0x200001f0
 80020ac:	0800a854 	.word	0x0800a854
 80020b0:	0800a874 	.word	0x0800a874
 80020b4:	0800a87c 	.word	0x0800a87c
 80020b8:	0800a884 	.word	0x0800a884
 80020bc:	0800a898 	.word	0x0800a898
 80020c0:	2000035c 	.word	0x2000035c
 80020c4:	20000354 	.word	0x20000354
 80020c8:	20000358 	.word	0x20000358
 80020cc:	0800a8c0 	.word	0x0800a8c0
 80020d0:	0800a8e4 	.word	0x0800a8e4
 80020d4:	0800a8f8 	.word	0x0800a8f8
 80020d8:	0800a8fc 	.word	0x0800a8fc
 80020dc:	20000464 	.word	0x20000464
 80020e0:	0800af54 	.word	0x0800af54
 80020e4:	0800a90c 	.word	0x0800a90c

080020e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	b096      	sub	sp, #88	@ 0x58
 80020ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020ee:	f107 0314 	add.w	r3, r7, #20
 80020f2:	2244      	movs	r2, #68	@ 0x44
 80020f4:	2100      	movs	r1, #0
 80020f6:	4618      	mov	r0, r3
 80020f8:	f004 ffcd 	bl	8007096 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020fc:	463b      	mov	r3, r7
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800210a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800210e:	f001 fd27 	bl	8003b60 <HAL_PWREx_ControlVoltageScaling>
 8002112:	4603      	mov	r3, r0
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002118:	f000 f94e 	bl	80023b8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800211c:	2302      	movs	r3, #2
 800211e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002120:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002124:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002126:	2310      	movs	r3, #16
 8002128:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800212a:	2302      	movs	r3, #2
 800212c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800212e:	2302      	movs	r3, #2
 8002130:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002132:	2301      	movs	r3, #1
 8002134:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002136:	230a      	movs	r3, #10
 8002138:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800213a:	2307      	movs	r3, #7
 800213c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800213e:	2302      	movs	r3, #2
 8002140:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002142:	2302      	movs	r3, #2
 8002144:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4618      	mov	r0, r3
 800214c:	f001 fd5e 	bl	8003c0c <HAL_RCC_OscConfig>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <SystemClock_Config+0x72>
  {
    Error_Handler();
 8002156:	f000 f92f 	bl	80023b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800215a:	230f      	movs	r3, #15
 800215c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800215e:	2303      	movs	r3, #3
 8002160:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002162:	2300      	movs	r3, #0
 8002164:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002166:	2300      	movs	r3, #0
 8002168:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800216e:	463b      	mov	r3, r7
 8002170:	2104      	movs	r1, #4
 8002172:	4618      	mov	r0, r3
 8002174:	f002 f926 	bl	80043c4 <HAL_RCC_ClockConfig>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800217e:	f000 f91b 	bl	80023b8 <Error_Handler>
  }
}
 8002182:	bf00      	nop
 8002184:	3758      	adds	r7, #88	@ 0x58
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002190:	4b1b      	ldr	r3, [pc, #108]	@ (8002200 <MX_I2C1_Init+0x74>)
 8002192:	4a1c      	ldr	r2, [pc, #112]	@ (8002204 <MX_I2C1_Init+0x78>)
 8002194:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8002196:	4b1a      	ldr	r3, [pc, #104]	@ (8002200 <MX_I2C1_Init+0x74>)
 8002198:	4a1b      	ldr	r2, [pc, #108]	@ (8002208 <MX_I2C1_Init+0x7c>)
 800219a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800219c:	4b18      	ldr	r3, [pc, #96]	@ (8002200 <MX_I2C1_Init+0x74>)
 800219e:	2200      	movs	r2, #0
 80021a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80021a2:	4b17      	ldr	r3, [pc, #92]	@ (8002200 <MX_I2C1_Init+0x74>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80021a8:	4b15      	ldr	r3, [pc, #84]	@ (8002200 <MX_I2C1_Init+0x74>)
 80021aa:	2200      	movs	r2, #0
 80021ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80021ae:	4b14      	ldr	r3, [pc, #80]	@ (8002200 <MX_I2C1_Init+0x74>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80021b4:	4b12      	ldr	r3, [pc, #72]	@ (8002200 <MX_I2C1_Init+0x74>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80021ba:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <MX_I2C1_Init+0x74>)
 80021bc:	2200      	movs	r2, #0
 80021be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	@ (8002200 <MX_I2C1_Init+0x74>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80021c6:	480e      	ldr	r0, [pc, #56]	@ (8002200 <MX_I2C1_Init+0x74>)
 80021c8:	f000 fe98 	bl	8002efc <HAL_I2C_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80021d2:	f000 f8f1 	bl	80023b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80021d6:	2100      	movs	r1, #0
 80021d8:	4809      	ldr	r0, [pc, #36]	@ (8002200 <MX_I2C1_Init+0x74>)
 80021da:	f001 fc1b 	bl	8003a14 <HAL_I2CEx_ConfigAnalogFilter>
 80021de:	4603      	mov	r3, r0
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d001      	beq.n	80021e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80021e4:	f000 f8e8 	bl	80023b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80021e8:	2100      	movs	r1, #0
 80021ea:	4805      	ldr	r0, [pc, #20]	@ (8002200 <MX_I2C1_Init+0x74>)
 80021ec:	f001 fc5d 	bl	8003aaa <HAL_I2CEx_ConfigDigitalFilter>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80021f6:	f000 f8df 	bl	80023b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80021fa:	bf00      	nop
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200001f0 	.word	0x200001f0
 8002204:	40005400 	.word	0x40005400
 8002208:	10d19ce4 	.word	0x10d19ce4

0800220c <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <MX_I2C2_Init+0x74>)
 8002212:	4a1c      	ldr	r2, [pc, #112]	@ (8002284 <MX_I2C2_Init+0x78>)
 8002214:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8002216:	4b1a      	ldr	r3, [pc, #104]	@ (8002280 <MX_I2C2_Init+0x74>)
 8002218:	4a1b      	ldr	r2, [pc, #108]	@ (8002288 <MX_I2C2_Init+0x7c>)
 800221a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800221c:	4b18      	ldr	r3, [pc, #96]	@ (8002280 <MX_I2C2_Init+0x74>)
 800221e:	2200      	movs	r2, #0
 8002220:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002222:	4b17      	ldr	r3, [pc, #92]	@ (8002280 <MX_I2C2_Init+0x74>)
 8002224:	2201      	movs	r2, #1
 8002226:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002228:	4b15      	ldr	r3, [pc, #84]	@ (8002280 <MX_I2C2_Init+0x74>)
 800222a:	2200      	movs	r2, #0
 800222c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800222e:	4b14      	ldr	r3, [pc, #80]	@ (8002280 <MX_I2C2_Init+0x74>)
 8002230:	2200      	movs	r2, #0
 8002232:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002234:	4b12      	ldr	r3, [pc, #72]	@ (8002280 <MX_I2C2_Init+0x74>)
 8002236:	2200      	movs	r2, #0
 8002238:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800223a:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <MX_I2C2_Init+0x74>)
 800223c:	2200      	movs	r2, #0
 800223e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002240:	4b0f      	ldr	r3, [pc, #60]	@ (8002280 <MX_I2C2_Init+0x74>)
 8002242:	2200      	movs	r2, #0
 8002244:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002246:	480e      	ldr	r0, [pc, #56]	@ (8002280 <MX_I2C2_Init+0x74>)
 8002248:	f000 fe58 	bl	8002efc <HAL_I2C_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002252:	f000 f8b1 	bl	80023b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002256:	2100      	movs	r1, #0
 8002258:	4809      	ldr	r0, [pc, #36]	@ (8002280 <MX_I2C2_Init+0x74>)
 800225a:	f001 fbdb 	bl	8003a14 <HAL_I2CEx_ConfigAnalogFilter>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002264:	f000 f8a8 	bl	80023b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002268:	2100      	movs	r1, #0
 800226a:	4805      	ldr	r0, [pc, #20]	@ (8002280 <MX_I2C2_Init+0x74>)
 800226c:	f001 fc1d 	bl	8003aaa <HAL_I2CEx_ConfigDigitalFilter>
 8002270:	4603      	mov	r3, r0
 8002272:	2b00      	cmp	r3, #0
 8002274:	d001      	beq.n	800227a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002276:	f000 f89f 	bl	80023b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800227a:	bf00      	nop
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	20000244 	.word	0x20000244
 8002284:	40005800 	.word	0x40005800
 8002288:	10d19ce4 	.word	0x10d19ce4

0800228c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <MX_USART2_UART_Init+0x58>)
 8002292:	4a15      	ldr	r2, [pc, #84]	@ (80022e8 <MX_USART2_UART_Init+0x5c>)
 8002294:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002296:	4b13      	ldr	r3, [pc, #76]	@ (80022e4 <MX_USART2_UART_Init+0x58>)
 8002298:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800229c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800229e:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <MX_USART2_UART_Init+0x58>)
 80022a0:	2200      	movs	r2, #0
 80022a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022a4:	4b0f      	ldr	r3, [pc, #60]	@ (80022e4 <MX_USART2_UART_Init+0x58>)
 80022a6:	2200      	movs	r2, #0
 80022a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <MX_USART2_UART_Init+0x58>)
 80022ac:	2200      	movs	r2, #0
 80022ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b0:	4b0c      	ldr	r3, [pc, #48]	@ (80022e4 <MX_USART2_UART_Init+0x58>)
 80022b2:	220c      	movs	r2, #12
 80022b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022b6:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <MX_USART2_UART_Init+0x58>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022bc:	4b09      	ldr	r3, [pc, #36]	@ (80022e4 <MX_USART2_UART_Init+0x58>)
 80022be:	2200      	movs	r2, #0
 80022c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022c2:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <MX_USART2_UART_Init+0x58>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c8:	4b06      	ldr	r3, [pc, #24]	@ (80022e4 <MX_USART2_UART_Init+0x58>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022ce:	4805      	ldr	r0, [pc, #20]	@ (80022e4 <MX_USART2_UART_Init+0x58>)
 80022d0:	f002 ff58 	bl	8005184 <HAL_UART_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022da:	f000 f86d 	bl	80023b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	20000298 	.word	0x20000298
 80022e8:	40004400 	.word	0x40004400

080022ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b08a      	sub	sp, #40	@ 0x28
 80022f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f2:	f107 0314 	add.w	r3, r7, #20
 80022f6:	2200      	movs	r2, #0
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	605a      	str	r2, [r3, #4]
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	60da      	str	r2, [r3, #12]
 8002300:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	4b2b      	ldr	r3, [pc, #172]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002306:	4a2a      	ldr	r2, [pc, #168]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800230e:	4b28      	ldr	r3, [pc, #160]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	613b      	str	r3, [r7, #16]
 8002318:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800231a:	4b25      	ldr	r3, [pc, #148]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 800231c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800231e:	4a24      	ldr	r2, [pc, #144]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 8002320:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002324:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002326:	4b22      	ldr	r3, [pc, #136]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 8002328:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800232a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800232e:	60fb      	str	r3, [r7, #12]
 8002330:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002332:	4b1f      	ldr	r3, [pc, #124]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 8002334:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002336:	4a1e      	ldr	r2, [pc, #120]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 8002338:	f043 0301 	orr.w	r3, r3, #1
 800233c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800233e:	4b1c      	ldr	r3, [pc, #112]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 8002340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002342:	f003 0301 	and.w	r3, r3, #1
 8002346:	60bb      	str	r3, [r7, #8]
 8002348:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800234a:	4b19      	ldr	r3, [pc, #100]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 800234c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800234e:	4a18      	ldr	r2, [pc, #96]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 8002350:	f043 0302 	orr.w	r3, r3, #2
 8002354:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002356:	4b16      	ldr	r3, [pc, #88]	@ (80023b0 <MX_GPIO_Init+0xc4>)
 8002358:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	607b      	str	r3, [r7, #4]
 8002360:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	2120      	movs	r1, #32
 8002366:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800236a:	f000 fdaf 	bl	8002ecc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800236e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002372:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002374:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002378:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800237e:	f107 0314 	add.w	r3, r7, #20
 8002382:	4619      	mov	r1, r3
 8002384:	480b      	ldr	r0, [pc, #44]	@ (80023b4 <MX_GPIO_Init+0xc8>)
 8002386:	f000 fbf7 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800238a:	2320      	movs	r3, #32
 800238c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800238e:	2301      	movs	r3, #1
 8002390:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002392:	2300      	movs	r3, #0
 8002394:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002396:	2300      	movs	r3, #0
 8002398:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800239a:	f107 0314 	add.w	r3, r7, #20
 800239e:	4619      	mov	r1, r3
 80023a0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80023a4:	f000 fbe8 	bl	8002b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80023a8:	bf00      	nop
 80023aa:	3728      	adds	r7, #40	@ 0x28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000
 80023b4:	48000800 	.word	0x48000800

080023b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80023b8:	b480      	push	{r7}
 80023ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80023bc:	b672      	cpsid	i
}
 80023be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <Error_Handler+0x8>

080023c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ca:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <HAL_MspInit+0x44>)
 80023cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023ce:	4a0e      	ldr	r2, [pc, #56]	@ (8002408 <HAL_MspInit+0x44>)
 80023d0:	f043 0301 	orr.w	r3, r3, #1
 80023d4:	6613      	str	r3, [r2, #96]	@ 0x60
 80023d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002408 <HAL_MspInit+0x44>)
 80023d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	607b      	str	r3, [r7, #4]
 80023e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023e2:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_MspInit+0x44>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	4a08      	ldr	r2, [pc, #32]	@ (8002408 <HAL_MspInit+0x44>)
 80023e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_MspInit+0x44>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000

0800240c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b0ae      	sub	sp, #184	@ 0xb8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002424:	f107 031c 	add.w	r3, r7, #28
 8002428:	2288      	movs	r2, #136	@ 0x88
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f004 fe32 	bl	8007096 <memset>
  if(hi2c->Instance==I2C1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4a42      	ldr	r2, [pc, #264]	@ (8002540 <HAL_I2C_MspInit+0x134>)
 8002438:	4293      	cmp	r3, r2
 800243a:	d13b      	bne.n	80024b4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800243c:	2340      	movs	r3, #64	@ 0x40
 800243e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002440:	2300      	movs	r3, #0
 8002442:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002444:	f107 031c 	add.w	r3, r7, #28
 8002448:	4618      	mov	r0, r3
 800244a:	f002 f9df 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 800244e:	4603      	mov	r3, r0
 8002450:	2b00      	cmp	r3, #0
 8002452:	d001      	beq.n	8002458 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002454:	f7ff ffb0 	bl	80023b8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002458:	4b3a      	ldr	r3, [pc, #232]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 800245a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800245c:	4a39      	ldr	r2, [pc, #228]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 800245e:	f043 0302 	orr.w	r3, r3, #2
 8002462:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002464:	4b37      	ldr	r3, [pc, #220]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 8002466:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	61bb      	str	r3, [r7, #24]
 800246e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002470:	23c0      	movs	r3, #192	@ 0xc0
 8002472:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002476:	2312      	movs	r3, #18
 8002478:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002482:	2303      	movs	r3, #3
 8002484:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002488:	2304      	movs	r3, #4
 800248a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248e:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002492:	4619      	mov	r1, r3
 8002494:	482c      	ldr	r0, [pc, #176]	@ (8002548 <HAL_I2C_MspInit+0x13c>)
 8002496:	f000 fb6f 	bl	8002b78 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800249a:	4b2a      	ldr	r3, [pc, #168]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800249e:	4a29      	ldr	r2, [pc, #164]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 80024a0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80024a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80024a6:	4b27      	ldr	r3, [pc, #156]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 80024a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024aa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80024b2:	e040      	b.n	8002536 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a24      	ldr	r2, [pc, #144]	@ (800254c <HAL_I2C_MspInit+0x140>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d13b      	bne.n	8002536 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 80024be:	2380      	movs	r3, #128	@ 0x80
 80024c0:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 80024c2:	2300      	movs	r3, #0
 80024c4:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80024c6:	f107 031c 	add.w	r3, r7, #28
 80024ca:	4618      	mov	r0, r3
 80024cc:	f002 f99e 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d001      	beq.n	80024da <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80024d6:	f7ff ff6f 	bl	80023b8 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024da:	4b1a      	ldr	r3, [pc, #104]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 80024dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024de:	4a19      	ldr	r2, [pc, #100]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 80024e0:	f043 0302 	orr.w	r3, r3, #2
 80024e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024e6:	4b17      	ldr	r3, [pc, #92]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 80024e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	613b      	str	r3, [r7, #16]
 80024f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80024f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80024f6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024fa:	2312      	movs	r3, #18
 80024fc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002500:	2300      	movs	r3, #0
 8002502:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002506:	2303      	movs	r3, #3
 8002508:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800250c:	2304      	movs	r3, #4
 800250e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002512:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8002516:	4619      	mov	r1, r3
 8002518:	480b      	ldr	r0, [pc, #44]	@ (8002548 <HAL_I2C_MspInit+0x13c>)
 800251a:	f000 fb2d 	bl	8002b78 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800251e:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 8002520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002522:	4a08      	ldr	r2, [pc, #32]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 8002524:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002528:	6593      	str	r3, [r2, #88]	@ 0x58
 800252a:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <HAL_I2C_MspInit+0x138>)
 800252c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002532:	60fb      	str	r3, [r7, #12]
 8002534:	68fb      	ldr	r3, [r7, #12]
}
 8002536:	bf00      	nop
 8002538:	37b8      	adds	r7, #184	@ 0xb8
 800253a:	46bd      	mov	sp, r7
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40005400 	.word	0x40005400
 8002544:	40021000 	.word	0x40021000
 8002548:	48000400 	.word	0x48000400
 800254c:	40005800 	.word	0x40005800

08002550 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b0ac      	sub	sp, #176	@ 0xb0
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002558:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	605a      	str	r2, [r3, #4]
 8002562:	609a      	str	r2, [r3, #8]
 8002564:	60da      	str	r2, [r3, #12]
 8002566:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002568:	f107 0314 	add.w	r3, r7, #20
 800256c:	2288      	movs	r2, #136	@ 0x88
 800256e:	2100      	movs	r1, #0
 8002570:	4618      	mov	r0, r3
 8002572:	f004 fd90 	bl	8007096 <memset>
  if(huart->Instance==USART2)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a21      	ldr	r2, [pc, #132]	@ (8002600 <HAL_UART_MspInit+0xb0>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d13b      	bne.n	80025f8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002580:	2302      	movs	r3, #2
 8002582:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002584:	2300      	movs	r3, #0
 8002586:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4618      	mov	r0, r3
 800258e:	f002 f93d 	bl	800480c <HAL_RCCEx_PeriphCLKConfig>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002598:	f7ff ff0e 	bl	80023b8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HAL_UART_MspInit+0xb4>)
 800259e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025a0:	4a18      	ldr	r2, [pc, #96]	@ (8002604 <HAL_UART_MspInit+0xb4>)
 80025a2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a6:	6593      	str	r3, [r2, #88]	@ 0x58
 80025a8:	4b16      	ldr	r3, [pc, #88]	@ (8002604 <HAL_UART_MspInit+0xb4>)
 80025aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025b0:	613b      	str	r3, [r7, #16]
 80025b2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025b4:	4b13      	ldr	r3, [pc, #76]	@ (8002604 <HAL_UART_MspInit+0xb4>)
 80025b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025b8:	4a12      	ldr	r2, [pc, #72]	@ (8002604 <HAL_UART_MspInit+0xb4>)
 80025ba:	f043 0301 	orr.w	r3, r3, #1
 80025be:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80025c0:	4b10      	ldr	r3, [pc, #64]	@ (8002604 <HAL_UART_MspInit+0xb4>)
 80025c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80025cc:	230c      	movs	r3, #12
 80025ce:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025d2:	2302      	movs	r3, #2
 80025d4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d8:	2300      	movs	r3, #0
 80025da:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025de:	2303      	movs	r3, #3
 80025e0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80025e4:	2307      	movs	r3, #7
 80025e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025ea:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 80025ee:	4619      	mov	r1, r3
 80025f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80025f4:	f000 fac0 	bl	8002b78 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80025f8:	bf00      	nop
 80025fa:	37b0      	adds	r7, #176	@ 0xb0
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40004400 	.word	0x40004400
 8002604:	40021000 	.word	0x40021000

08002608 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002608:	b480      	push	{r7}
 800260a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800260c:	bf00      	nop
 800260e:	e7fd      	b.n	800260c <NMI_Handler+0x4>

08002610 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <HardFault_Handler+0x4>

08002618 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <MemManage_Handler+0x4>

08002620 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <BusFault_Handler+0x4>

08002628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <UsageFault_Handler+0x4>

08002630 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002634:	bf00      	nop
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr

0800263e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800263e:	b480      	push	{r7}
 8002640:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002642:	bf00      	nop
 8002644:	46bd      	mov	sp, r7
 8002646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264a:	4770      	bx	lr

0800264c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800265e:	f000 f961 	bl	8002924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002662:	bf00      	nop
 8002664:	bd80      	pop	{r7, pc}

08002666 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002666:	b480      	push	{r7}
 8002668:	af00      	add	r7, sp, #0
  return 1;
 800266a:	2301      	movs	r3, #1
}
 800266c:	4618      	mov	r0, r3
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr

08002676 <_kill>:

int _kill(int pid, int sig)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
 800267e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002680:	f004 fd5c 	bl	800713c <__errno>
 8002684:	4603      	mov	r3, r0
 8002686:	2216      	movs	r2, #22
 8002688:	601a      	str	r2, [r3, #0]
  return -1;
 800268a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800268e:	4618      	mov	r0, r3
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <_exit>:

void _exit (int status)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b082      	sub	sp, #8
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800269e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f7ff ffe7 	bl	8002676 <_kill>
  while (1) {}    /* Make sure we hang here */
 80026a8:	bf00      	nop
 80026aa:	e7fd      	b.n	80026a8 <_exit+0x12>

080026ac <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b086      	sub	sp, #24
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	60f8      	str	r0, [r7, #12]
 80026b4:	60b9      	str	r1, [r7, #8]
 80026b6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026b8:	2300      	movs	r3, #0
 80026ba:	617b      	str	r3, [r7, #20]
 80026bc:	e00a      	b.n	80026d4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026be:	f3af 8000 	nop.w
 80026c2:	4601      	mov	r1, r0
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	1c5a      	adds	r2, r3, #1
 80026c8:	60ba      	str	r2, [r7, #8]
 80026ca:	b2ca      	uxtb	r2, r1
 80026cc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	3301      	adds	r3, #1
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	697a      	ldr	r2, [r7, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	429a      	cmp	r2, r3
 80026da:	dbf0      	blt.n	80026be <_read+0x12>
  }

  return len;
 80026dc:	687b      	ldr	r3, [r7, #4]
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3718      	adds	r7, #24
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}

080026e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026e6:	b580      	push	{r7, lr}
 80026e8:	b086      	sub	sp, #24
 80026ea:	af00      	add	r7, sp, #0
 80026ec:	60f8      	str	r0, [r7, #12]
 80026ee:	60b9      	str	r1, [r7, #8]
 80026f0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	e009      	b.n	800270c <_write+0x26>
  {
    __io_putchar(*ptr++);
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	60ba      	str	r2, [r7, #8]
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	4618      	mov	r0, r3
 8002702:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	3301      	adds	r3, #1
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	697a      	ldr	r2, [r7, #20]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	429a      	cmp	r2, r3
 8002712:	dbf1      	blt.n	80026f8 <_write+0x12>
  }
  return len;
 8002714:	687b      	ldr	r3, [r7, #4]
}
 8002716:	4618      	mov	r0, r3
 8002718:	3718      	adds	r7, #24
 800271a:	46bd      	mov	sp, r7
 800271c:	bd80      	pop	{r7, pc}

0800271e <_close>:

int _close(int file)
{
 800271e:	b480      	push	{r7}
 8002720:	b083      	sub	sp, #12
 8002722:	af00      	add	r7, sp, #0
 8002724:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002726:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800272a:	4618      	mov	r0, r3
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002746:	605a      	str	r2, [r3, #4]
  return 0;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	370c      	adds	r7, #12
 800274e:	46bd      	mov	sp, r7
 8002750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002754:	4770      	bx	lr

08002756 <_isatty>:

int _isatty(int file)
{
 8002756:	b480      	push	{r7}
 8002758:	b083      	sub	sp, #12
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800275e:	2301      	movs	r3, #1
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	60b9      	str	r1, [r7, #8]
 8002776:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002778:	2300      	movs	r3, #0
}
 800277a:	4618      	mov	r0, r3
 800277c:	3714      	adds	r7, #20
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr
	...

08002788 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b086      	sub	sp, #24
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002790:	4a14      	ldr	r2, [pc, #80]	@ (80027e4 <_sbrk+0x5c>)
 8002792:	4b15      	ldr	r3, [pc, #84]	@ (80027e8 <_sbrk+0x60>)
 8002794:	1ad3      	subs	r3, r2, r3
 8002796:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800279c:	4b13      	ldr	r3, [pc, #76]	@ (80027ec <_sbrk+0x64>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d102      	bne.n	80027aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027a4:	4b11      	ldr	r3, [pc, #68]	@ (80027ec <_sbrk+0x64>)
 80027a6:	4a12      	ldr	r2, [pc, #72]	@ (80027f0 <_sbrk+0x68>)
 80027a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027aa:	4b10      	ldr	r3, [pc, #64]	@ (80027ec <_sbrk+0x64>)
 80027ac:	681a      	ldr	r2, [r3, #0]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	4413      	add	r3, r2
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d207      	bcs.n	80027c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027b8:	f004 fcc0 	bl	800713c <__errno>
 80027bc:	4603      	mov	r3, r0
 80027be:	220c      	movs	r2, #12
 80027c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027c6:	e009      	b.n	80027dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027c8:	4b08      	ldr	r3, [pc, #32]	@ (80027ec <_sbrk+0x64>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027ce:	4b07      	ldr	r3, [pc, #28]	@ (80027ec <_sbrk+0x64>)
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4413      	add	r3, r2
 80027d6:	4a05      	ldr	r2, [pc, #20]	@ (80027ec <_sbrk+0x64>)
 80027d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027da:	68fb      	ldr	r3, [r7, #12]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3718      	adds	r7, #24
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	20018000 	.word	0x20018000
 80027e8:	00000400 	.word	0x00000400
 80027ec:	20000474 	.word	0x20000474
 80027f0:	200009d0 	.word	0x200009d0

080027f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80027f4:	b480      	push	{r7}
 80027f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80027f8:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <SystemInit+0x20>)
 80027fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027fe:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <SystemInit+0x20>)
 8002800:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002804:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000ed00 	.word	0xe000ed00

08002818 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002818:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002850 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800281c:	f7ff ffea 	bl	80027f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002820:	480c      	ldr	r0, [pc, #48]	@ (8002854 <LoopForever+0x6>)
  ldr r1, =_edata
 8002822:	490d      	ldr	r1, [pc, #52]	@ (8002858 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002824:	4a0d      	ldr	r2, [pc, #52]	@ (800285c <LoopForever+0xe>)
  movs r3, #0
 8002826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002828:	e002      	b.n	8002830 <LoopCopyDataInit>

0800282a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800282a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800282c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800282e:	3304      	adds	r3, #4

08002830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002834:	d3f9      	bcc.n	800282a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002836:	4a0a      	ldr	r2, [pc, #40]	@ (8002860 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002838:	4c0a      	ldr	r4, [pc, #40]	@ (8002864 <LoopForever+0x16>)
  movs r3, #0
 800283a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800283c:	e001      	b.n	8002842 <LoopFillZerobss>

0800283e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800283e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002840:	3204      	adds	r2, #4

08002842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002844:	d3fb      	bcc.n	800283e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002846:	f004 fc7f 	bl	8007148 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800284a:	f7ff faf7 	bl	8001e3c <main>

0800284e <LoopForever>:

LoopForever:
    b LoopForever
 800284e:	e7fe      	b.n	800284e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002850:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002858:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 800285c:	0800b39c 	.word	0x0800b39c
  ldr r2, =_sbss
 8002860:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002864:	200009d0 	.word	0x200009d0

08002868 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002868:	e7fe      	b.n	8002868 <ADC1_2_IRQHandler>
	...

0800286c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b082      	sub	sp, #8
 8002870:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002872:	2300      	movs	r3, #0
 8002874:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002876:	4b0c      	ldr	r3, [pc, #48]	@ (80028a8 <HAL_Init+0x3c>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a0b      	ldr	r2, [pc, #44]	@ (80028a8 <HAL_Init+0x3c>)
 800287c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002880:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002882:	2003      	movs	r0, #3
 8002884:	f000 f944 	bl	8002b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002888:	2000      	movs	r0, #0
 800288a:	f000 f80f 	bl	80028ac <HAL_InitTick>
 800288e:	4603      	mov	r3, r0
 8002890:	2b00      	cmp	r3, #0
 8002892:	d002      	beq.n	800289a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	71fb      	strb	r3, [r7, #7]
 8002898:	e001      	b.n	800289e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800289a:	f7ff fd93 	bl	80023c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800289e:	79fb      	ldrb	r3, [r7, #7]
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3708      	adds	r7, #8
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40022000 	.word	0x40022000

080028ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80028b4:	2300      	movs	r3, #0
 80028b6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80028b8:	4b17      	ldr	r3, [pc, #92]	@ (8002918 <HAL_InitTick+0x6c>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d023      	beq.n	8002908 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80028c0:	4b16      	ldr	r3, [pc, #88]	@ (800291c <HAL_InitTick+0x70>)
 80028c2:	681a      	ldr	r2, [r3, #0]
 80028c4:	4b14      	ldr	r3, [pc, #80]	@ (8002918 <HAL_InitTick+0x6c>)
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	4619      	mov	r1, r3
 80028ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80028d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028d6:	4618      	mov	r0, r3
 80028d8:	f000 f941 	bl	8002b5e <HAL_SYSTICK_Config>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d10f      	bne.n	8002902 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	2b0f      	cmp	r3, #15
 80028e6:	d809      	bhi.n	80028fc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028e8:	2200      	movs	r2, #0
 80028ea:	6879      	ldr	r1, [r7, #4]
 80028ec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028f0:	f000 f919 	bl	8002b26 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002920 <HAL_InitTick+0x74>)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6013      	str	r3, [r2, #0]
 80028fa:	e007      	b.n	800290c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	73fb      	strb	r3, [r7, #15]
 8002900:	e004      	b.n	800290c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	73fb      	strb	r3, [r7, #15]
 8002906:	e001      	b.n	800290c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800290c:	7bfb      	ldrb	r3, [r7, #15]
}
 800290e:	4618      	mov	r0, r3
 8002910:	3710      	adds	r7, #16
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	20000008 	.word	0x20000008
 800291c:	20000000 	.word	0x20000000
 8002920:	20000004 	.word	0x20000004

08002924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002928:	4b06      	ldr	r3, [pc, #24]	@ (8002944 <HAL_IncTick+0x20>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	4b06      	ldr	r3, [pc, #24]	@ (8002948 <HAL_IncTick+0x24>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4413      	add	r3, r2
 8002934:	4a04      	ldr	r2, [pc, #16]	@ (8002948 <HAL_IncTick+0x24>)
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	20000008 	.word	0x20000008
 8002948:	20000478 	.word	0x20000478

0800294c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800294c:	b480      	push	{r7}
 800294e:	af00      	add	r7, sp, #0
  return uwTick;
 8002950:	4b03      	ldr	r3, [pc, #12]	@ (8002960 <HAL_GetTick+0x14>)
 8002952:	681b      	ldr	r3, [r3, #0]
}
 8002954:	4618      	mov	r0, r3
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop
 8002960:	20000478 	.word	0x20000478

08002964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800296c:	f7ff ffee 	bl	800294c <HAL_GetTick>
 8002970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800297c:	d005      	beq.n	800298a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800297e:	4b0a      	ldr	r3, [pc, #40]	@ (80029a8 <HAL_Delay+0x44>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	461a      	mov	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	4413      	add	r3, r2
 8002988:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800298a:	bf00      	nop
 800298c:	f7ff ffde 	bl	800294c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	429a      	cmp	r2, r3
 800299a:	d8f7      	bhi.n	800298c <HAL_Delay+0x28>
  {
  }
}
 800299c:	bf00      	nop
 800299e:	bf00      	nop
 80029a0:	3710      	adds	r7, #16
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000008 	.word	0x20000008

080029ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b085      	sub	sp, #20
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	f003 0307 	and.w	r3, r3, #7
 80029ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80029bc:	4b0c      	ldr	r3, [pc, #48]	@ (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80029c2:	68ba      	ldr	r2, [r7, #8]
 80029c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80029c8:	4013      	ands	r3, r2
 80029ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80029d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80029d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029de:	4a04      	ldr	r2, [pc, #16]	@ (80029f0 <__NVIC_SetPriorityGrouping+0x44>)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	60d3      	str	r3, [r2, #12]
}
 80029e4:	bf00      	nop
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	e000ed00 	.word	0xe000ed00

080029f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029f4:	b480      	push	{r7}
 80029f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029f8:	4b04      	ldr	r3, [pc, #16]	@ (8002a0c <__NVIC_GetPriorityGrouping+0x18>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	0a1b      	lsrs	r3, r3, #8
 80029fe:	f003 0307 	and.w	r3, r3, #7
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	db0a      	blt.n	8002a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	490c      	ldr	r1, [pc, #48]	@ (8002a5c <__NVIC_SetPriority+0x4c>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	0112      	lsls	r2, r2, #4
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	440b      	add	r3, r1
 8002a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a38:	e00a      	b.n	8002a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4908      	ldr	r1, [pc, #32]	@ (8002a60 <__NVIC_SetPriority+0x50>)
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	3b04      	subs	r3, #4
 8002a48:	0112      	lsls	r2, r2, #4
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	761a      	strb	r2, [r3, #24]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e100 	.word	0xe000e100
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	@ 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f1c3 0307 	rsb	r3, r3, #7
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	bf28      	it	cs
 8002a82:	2304      	movcs	r3, #4
 8002a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d902      	bls.n	8002a94 <NVIC_EncodePriority+0x30>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3b03      	subs	r3, #3
 8002a92:	e000      	b.n	8002a96 <NVIC_EncodePriority+0x32>
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	4313      	orrs	r3, r2
         );
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3724      	adds	r7, #36	@ 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002adc:	d301      	bcc.n	8002ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e00f      	b.n	8002b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	@ (8002b0c <SysTick_Config+0x40>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aea:	210f      	movs	r1, #15
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002af0:	f7ff ff8e 	bl	8002a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af4:	4b05      	ldr	r3, [pc, #20]	@ (8002b0c <SysTick_Config+0x40>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afa:	4b04      	ldr	r3, [pc, #16]	@ (8002b0c <SysTick_Config+0x40>)
 8002afc:	2207      	movs	r2, #7
 8002afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	e000e010 	.word	0xe000e010

08002b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff47 	bl	80029ac <__NVIC_SetPriorityGrouping>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002b38:	f7ff ff5c 	bl	80029f4 <__NVIC_GetPriorityGrouping>
 8002b3c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff ff8e 	bl	8002a64 <NVIC_EncodePriority>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff5d 	bl	8002a10 <__NVIC_SetPriority>
}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ffb0 	bl	8002acc <SysTick_Config>
 8002b6c:	4603      	mov	r3, r0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b86:	e17f      	b.n	8002e88 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	2101      	movs	r1, #1
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	fa01 f303 	lsl.w	r3, r1, r3
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f000 8171 	beq.w	8002e82 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f003 0303 	and.w	r3, r3, #3
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d005      	beq.n	8002bb8 <HAL_GPIO_Init+0x40>
 8002bac:	683b      	ldr	r3, [r7, #0]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f003 0303 	and.w	r3, r3, #3
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d130      	bne.n	8002c1a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc8:	43db      	mvns	r3, r3
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	68da      	ldr	r2, [r3, #12]
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	005b      	lsls	r3, r3, #1
 8002bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bdc:	693a      	ldr	r2, [r7, #16]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002bee:	2201      	movs	r2, #1
 8002bf0:	697b      	ldr	r3, [r7, #20]
 8002bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf6:	43db      	mvns	r3, r3
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	091b      	lsrs	r3, r3, #4
 8002c04:	f003 0201 	and.w	r2, r3, #1
 8002c08:	697b      	ldr	r3, [r7, #20]
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	693a      	ldr	r2, [r7, #16]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d118      	bne.n	8002c58 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c2a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	fa02 f303 	lsl.w	r3, r2, r3
 8002c34:	43db      	mvns	r3, r3
 8002c36:	693a      	ldr	r2, [r7, #16]
 8002c38:	4013      	ands	r3, r2
 8002c3a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	08db      	lsrs	r3, r3, #3
 8002c42:	f003 0201 	and.w	r2, r3, #1
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	693a      	ldr	r2, [r7, #16]
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f003 0303 	and.w	r3, r3, #3
 8002c60:	2b03      	cmp	r3, #3
 8002c62:	d017      	beq.n	8002c94 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	005b      	lsls	r3, r3, #1
 8002c6e:	2203      	movs	r2, #3
 8002c70:	fa02 f303 	lsl.w	r3, r2, r3
 8002c74:	43db      	mvns	r3, r3
 8002c76:	693a      	ldr	r2, [r7, #16]
 8002c78:	4013      	ands	r3, r2
 8002c7a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	689a      	ldr	r2, [r3, #8]
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	005b      	lsls	r3, r3, #1
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	693a      	ldr	r2, [r7, #16]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	693a      	ldr	r2, [r7, #16]
 8002c92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b02      	cmp	r3, #2
 8002c9e:	d123      	bne.n	8002ce8 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	08da      	lsrs	r2, r3, #3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	3208      	adds	r2, #8
 8002ca8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002cae:	697b      	ldr	r3, [r7, #20]
 8002cb0:	f003 0307 	and.w	r3, r3, #7
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	220f      	movs	r2, #15
 8002cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbc:	43db      	mvns	r3, r3
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	4013      	ands	r3, r2
 8002cc2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	691a      	ldr	r2, [r3, #16]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f003 0307 	and.w	r3, r3, #7
 8002cce:	009b      	lsls	r3, r3, #2
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	08da      	lsrs	r2, r3, #3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	3208      	adds	r2, #8
 8002ce2:	6939      	ldr	r1, [r7, #16]
 8002ce4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	2203      	movs	r2, #3
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	693a      	ldr	r2, [r7, #16]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f003 0203 	and.w	r2, r3, #3
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	005b      	lsls	r3, r3, #1
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	f000 80ac 	beq.w	8002e82 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d2a:	4b5f      	ldr	r3, [pc, #380]	@ (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2e:	4a5e      	ldr	r2, [pc, #376]	@ (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d30:	f043 0301 	orr.w	r3, r3, #1
 8002d34:	6613      	str	r3, [r2, #96]	@ 0x60
 8002d36:	4b5c      	ldr	r3, [pc, #368]	@ (8002ea8 <HAL_GPIO_Init+0x330>)
 8002d38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d3a:	f003 0301 	and.w	r3, r3, #1
 8002d3e:	60bb      	str	r3, [r7, #8]
 8002d40:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002d42:	4a5a      	ldr	r2, [pc, #360]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	089b      	lsrs	r3, r3, #2
 8002d48:	3302      	adds	r3, #2
 8002d4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	220f      	movs	r2, #15
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	43db      	mvns	r3, r3
 8002d60:	693a      	ldr	r2, [r7, #16]
 8002d62:	4013      	ands	r3, r2
 8002d64:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002d6c:	d025      	beq.n	8002dba <HAL_GPIO_Init+0x242>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4f      	ldr	r2, [pc, #316]	@ (8002eb0 <HAL_GPIO_Init+0x338>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d01f      	beq.n	8002db6 <HAL_GPIO_Init+0x23e>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4e      	ldr	r2, [pc, #312]	@ (8002eb4 <HAL_GPIO_Init+0x33c>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d019      	beq.n	8002db2 <HAL_GPIO_Init+0x23a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4d      	ldr	r2, [pc, #308]	@ (8002eb8 <HAL_GPIO_Init+0x340>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d013      	beq.n	8002dae <HAL_GPIO_Init+0x236>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4c      	ldr	r2, [pc, #304]	@ (8002ebc <HAL_GPIO_Init+0x344>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d00d      	beq.n	8002daa <HAL_GPIO_Init+0x232>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a4b      	ldr	r2, [pc, #300]	@ (8002ec0 <HAL_GPIO_Init+0x348>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d007      	beq.n	8002da6 <HAL_GPIO_Init+0x22e>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a4a      	ldr	r2, [pc, #296]	@ (8002ec4 <HAL_GPIO_Init+0x34c>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d101      	bne.n	8002da2 <HAL_GPIO_Init+0x22a>
 8002d9e:	2306      	movs	r3, #6
 8002da0:	e00c      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002da2:	2307      	movs	r3, #7
 8002da4:	e00a      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002da6:	2305      	movs	r3, #5
 8002da8:	e008      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e006      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002dae:	2303      	movs	r3, #3
 8002db0:	e004      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002db2:	2302      	movs	r3, #2
 8002db4:	e002      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002db6:	2301      	movs	r3, #1
 8002db8:	e000      	b.n	8002dbc <HAL_GPIO_Init+0x244>
 8002dba:	2300      	movs	r3, #0
 8002dbc:	697a      	ldr	r2, [r7, #20]
 8002dbe:	f002 0203 	and.w	r2, r2, #3
 8002dc2:	0092      	lsls	r2, r2, #2
 8002dc4:	4093      	lsls	r3, r2
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	4313      	orrs	r3, r2
 8002dca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002dcc:	4937      	ldr	r1, [pc, #220]	@ (8002eac <HAL_GPIO_Init+0x334>)
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	3302      	adds	r3, #2
 8002dd4:	693a      	ldr	r2, [r7, #16]
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002dda:	4b3b      	ldr	r3, [pc, #236]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	43db      	mvns	r3, r3
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	4013      	ands	r3, r2
 8002de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d003      	beq.n	8002dfe <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4313      	orrs	r3, r2
 8002dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8002dfe:	4a32      	ldr	r2, [pc, #200]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002e04:	4b30      	ldr	r3, [pc, #192]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	43db      	mvns	r3, r3
 8002e0e:	693a      	ldr	r2, [r7, #16]
 8002e10:	4013      	ands	r3, r2
 8002e12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d003      	beq.n	8002e28 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8002e20:	693a      	ldr	r2, [r7, #16]
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	4313      	orrs	r3, r2
 8002e26:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002e28:	4a27      	ldr	r2, [pc, #156]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8002e2e:	4b26      	ldr	r3, [pc, #152]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	43db      	mvns	r3, r3
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	4013      	ands	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d003      	beq.n	8002e52 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002e52:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8002e58:	4b1b      	ldr	r3, [pc, #108]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	43db      	mvns	r3, r3
 8002e62:	693a      	ldr	r2, [r7, #16]
 8002e64:	4013      	ands	r3, r2
 8002e66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d003      	beq.n	8002e7c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8002e7c:	4a12      	ldr	r2, [pc, #72]	@ (8002ec8 <HAL_GPIO_Init+0x350>)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	3301      	adds	r3, #1
 8002e86:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	681a      	ldr	r2, [r3, #0]
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	f47f ae78 	bne.w	8002b88 <HAL_GPIO_Init+0x10>
  }
}
 8002e98:	bf00      	nop
 8002e9a:	bf00      	nop
 8002e9c:	371c      	adds	r7, #28
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	40021000 	.word	0x40021000
 8002eac:	40010000 	.word	0x40010000
 8002eb0:	48000400 	.word	0x48000400
 8002eb4:	48000800 	.word	0x48000800
 8002eb8:	48000c00 	.word	0x48000c00
 8002ebc:	48001000 	.word	0x48001000
 8002ec0:	48001400 	.word	0x48001400
 8002ec4:	48001800 	.word	0x48001800
 8002ec8:	40010400 	.word	0x40010400

08002ecc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	807b      	strh	r3, [r7, #2]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002edc:	787b      	ldrb	r3, [r7, #1]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d003      	beq.n	8002eea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002ee2:	887a      	ldrh	r2, [r7, #2]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002eea:	887a      	ldrh	r2, [r7, #2]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr

08002efc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e08d      	b.n	800302a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7ff fa72 	bl	800240c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2224      	movs	r2, #36	@ 0x24
 8002f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f4c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	689a      	ldr	r2, [r3, #8]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f5c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d107      	bne.n	8002f76 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002f72:	609a      	str	r2, [r3, #8]
 8002f74:	e006      	b.n	8002f84 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8002f82:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	68db      	ldr	r3, [r3, #12]
 8002f88:	2b02      	cmp	r3, #2
 8002f8a:	d108      	bne.n	8002f9e <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	e007      	b.n	8002fae <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002fac:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	687a      	ldr	r2, [r7, #4]
 8002fb6:	6812      	ldr	r2, [r2, #0]
 8002fb8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002fbc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002fc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	68da      	ldr	r2, [r3, #12]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	691a      	ldr	r2, [r3, #16]
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	695b      	ldr	r3, [r3, #20]
 8002fda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	430a      	orrs	r2, r1
 8002fea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	69d9      	ldr	r1, [r3, #28]
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a1a      	ldr	r2, [r3, #32]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f042 0201 	orr.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	2200      	movs	r2, #0
 8003010:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	2220      	movs	r2, #32
 8003016:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
	...

08003034 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af02      	add	r7, sp, #8
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	4608      	mov	r0, r1
 800303e:	4611      	mov	r1, r2
 8003040:	461a      	mov	r2, r3
 8003042:	4603      	mov	r3, r0
 8003044:	817b      	strh	r3, [r7, #10]
 8003046:	460b      	mov	r3, r1
 8003048:	813b      	strh	r3, [r7, #8]
 800304a:	4613      	mov	r3, r2
 800304c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003054:	b2db      	uxtb	r3, r3
 8003056:	2b20      	cmp	r3, #32
 8003058:	f040 80f9 	bne.w	800324e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800305c:	6a3b      	ldr	r3, [r7, #32]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d002      	beq.n	8003068 <HAL_I2C_Mem_Write+0x34>
 8003062:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8003064:	2b00      	cmp	r3, #0
 8003066:	d105      	bne.n	8003074 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800306e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003070:	2301      	movs	r3, #1
 8003072:	e0ed      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800307a:	2b01      	cmp	r3, #1
 800307c:	d101      	bne.n	8003082 <HAL_I2C_Mem_Write+0x4e>
 800307e:	2302      	movs	r3, #2
 8003080:	e0e6      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2201      	movs	r2, #1
 8003086:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800308a:	f7ff fc5f 	bl	800294c <HAL_GetTick>
 800308e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003090:	697b      	ldr	r3, [r7, #20]
 8003092:	9300      	str	r3, [sp, #0]
 8003094:	2319      	movs	r3, #25
 8003096:	2201      	movs	r2, #1
 8003098:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800309c:	68f8      	ldr	r0, [r7, #12]
 800309e:	f000 fac3 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d001      	beq.n	80030ac <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e0d1      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	2221      	movs	r2, #33	@ 0x21
 80030b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2240      	movs	r2, #64	@ 0x40
 80030b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2200      	movs	r2, #0
 80030c0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	6a3a      	ldr	r2, [r7, #32]
 80030c6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80030cc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80030d4:	88f8      	ldrh	r0, [r7, #6]
 80030d6:	893a      	ldrh	r2, [r7, #8]
 80030d8:	8979      	ldrh	r1, [r7, #10]
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	9301      	str	r3, [sp, #4]
 80030de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80030e0:	9300      	str	r3, [sp, #0]
 80030e2:	4603      	mov	r3, r0
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 f9d3 	bl	8003490 <I2C_RequestMemoryWrite>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2200      	movs	r2, #0
 80030f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e0a9      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003100:	b29b      	uxth	r3, r3
 8003102:	2bff      	cmp	r3, #255	@ 0xff
 8003104:	d90e      	bls.n	8003124 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	22ff      	movs	r2, #255	@ 0xff
 800310a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003110:	b2da      	uxtb	r2, r3
 8003112:	8979      	ldrh	r1, [r7, #10]
 8003114:	2300      	movs	r3, #0
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 fc47 	bl	80039b0 <I2C_TransferConfig>
 8003122:	e00f      	b.n	8003144 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003132:	b2da      	uxtb	r2, r3
 8003134:	8979      	ldrh	r1, [r7, #10]
 8003136:	2300      	movs	r3, #0
 8003138:	9300      	str	r3, [sp, #0]
 800313a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800313e:	68f8      	ldr	r0, [r7, #12]
 8003140:	f000 fc36 	bl	80039b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003144:	697a      	ldr	r2, [r7, #20]
 8003146:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003148:	68f8      	ldr	r0, [r7, #12]
 800314a:	f000 fac6 	bl	80036da <I2C_WaitOnTXISFlagUntilTimeout>
 800314e:	4603      	mov	r3, r0
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e07b      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	781a      	ldrb	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003168:	1c5a      	adds	r2, r3, #1
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003172:	b29b      	uxth	r3, r3
 8003174:	3b01      	subs	r3, #1
 8003176:	b29a      	uxth	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003180:	3b01      	subs	r3, #1
 8003182:	b29a      	uxth	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d034      	beq.n	80031fc <HAL_I2C_Mem_Write+0x1c8>
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003196:	2b00      	cmp	r3, #0
 8003198:	d130      	bne.n	80031fc <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	9300      	str	r3, [sp, #0]
 800319e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031a0:	2200      	movs	r2, #0
 80031a2:	2180      	movs	r1, #128	@ 0x80
 80031a4:	68f8      	ldr	r0, [r7, #12]
 80031a6:	f000 fa3f 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e04d      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	2bff      	cmp	r3, #255	@ 0xff
 80031bc:	d90e      	bls.n	80031dc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	22ff      	movs	r2, #255	@ 0xff
 80031c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	8979      	ldrh	r1, [r7, #10]
 80031cc:	2300      	movs	r3, #0
 80031ce:	9300      	str	r3, [sp, #0]
 80031d0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80031d4:	68f8      	ldr	r0, [r7, #12]
 80031d6:	f000 fbeb 	bl	80039b0 <I2C_TransferConfig>
 80031da:	e00f      	b.n	80031fc <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80031e0:	b29a      	uxth	r2, r3
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	8979      	ldrh	r1, [r7, #10]
 80031ee:	2300      	movs	r3, #0
 80031f0:	9300      	str	r3, [sp, #0]
 80031f2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80031f6:	68f8      	ldr	r0, [r7, #12]
 80031f8:	f000 fbda 	bl	80039b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003200:	b29b      	uxth	r3, r3
 8003202:	2b00      	cmp	r3, #0
 8003204:	d19e      	bne.n	8003144 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800320a:	68f8      	ldr	r0, [r7, #12]
 800320c:	f000 faac 	bl	8003768 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8003216:	2301      	movs	r3, #1
 8003218:	e01a      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	2220      	movs	r2, #32
 8003220:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b0a      	ldr	r3, [pc, #40]	@ (8003258 <HAL_I2C_Mem_Write+0x224>)
 800322e:	400b      	ands	r3, r1
 8003230:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2220      	movs	r2, #32
 8003236:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3718      	adds	r7, #24
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}
 8003258:	fe00e800 	.word	0xfe00e800

0800325c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b088      	sub	sp, #32
 8003260:	af02      	add	r7, sp, #8
 8003262:	60f8      	str	r0, [r7, #12]
 8003264:	4608      	mov	r0, r1
 8003266:	4611      	mov	r1, r2
 8003268:	461a      	mov	r2, r3
 800326a:	4603      	mov	r3, r0
 800326c:	817b      	strh	r3, [r7, #10]
 800326e:	460b      	mov	r3, r1
 8003270:	813b      	strh	r3, [r7, #8]
 8003272:	4613      	mov	r3, r2
 8003274:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800327c:	b2db      	uxtb	r3, r3
 800327e:	2b20      	cmp	r3, #32
 8003280:	f040 80fd 	bne.w	800347e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d002      	beq.n	8003290 <HAL_I2C_Mem_Read+0x34>
 800328a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003296:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	e0f1      	b.n	8003480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032a2:	2b01      	cmp	r3, #1
 80032a4:	d101      	bne.n	80032aa <HAL_I2C_Mem_Read+0x4e>
 80032a6:	2302      	movs	r3, #2
 80032a8:	e0ea      	b.n	8003480 <HAL_I2C_Mem_Read+0x224>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2201      	movs	r2, #1
 80032ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80032b2:	f7ff fb4b 	bl	800294c <HAL_GetTick>
 80032b6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	9300      	str	r3, [sp, #0]
 80032bc:	2319      	movs	r3, #25
 80032be:	2201      	movs	r2, #1
 80032c0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80032c4:	68f8      	ldr	r0, [r7, #12]
 80032c6:	f000 f9af 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 80032ca:	4603      	mov	r3, r0
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d001      	beq.n	80032d4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0d5      	b.n	8003480 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	2222      	movs	r2, #34	@ 0x22
 80032d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	2240      	movs	r2, #64	@ 0x40
 80032e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	2200      	movs	r2, #0
 80032e8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	6a3a      	ldr	r2, [r7, #32]
 80032ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80032f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80032fc:	88f8      	ldrh	r0, [r7, #6]
 80032fe:	893a      	ldrh	r2, [r7, #8]
 8003300:	8979      	ldrh	r1, [r7, #10]
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	9301      	str	r3, [sp, #4]
 8003306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	4603      	mov	r3, r0
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f913 	bl	8003538 <I2C_RequestMemoryRead>
 8003312:	4603      	mov	r3, r0
 8003314:	2b00      	cmp	r3, #0
 8003316:	d005      	beq.n	8003324 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	2200      	movs	r2, #0
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0ad      	b.n	8003480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003328:	b29b      	uxth	r3, r3
 800332a:	2bff      	cmp	r3, #255	@ 0xff
 800332c:	d90e      	bls.n	800334c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2201      	movs	r2, #1
 8003332:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003338:	b2da      	uxtb	r2, r3
 800333a:	8979      	ldrh	r1, [r7, #10]
 800333c:	4b52      	ldr	r3, [pc, #328]	@ (8003488 <HAL_I2C_Mem_Read+0x22c>)
 800333e:	9300      	str	r3, [sp, #0]
 8003340:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f000 fb33 	bl	80039b0 <I2C_TransferConfig>
 800334a:	e00f      	b.n	800336c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800335a:	b2da      	uxtb	r2, r3
 800335c:	8979      	ldrh	r1, [r7, #10]
 800335e:	4b4a      	ldr	r3, [pc, #296]	@ (8003488 <HAL_I2C_Mem_Read+0x22c>)
 8003360:	9300      	str	r3, [sp, #0]
 8003362:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f000 fb22 	bl	80039b0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003372:	2200      	movs	r2, #0
 8003374:	2104      	movs	r1, #4
 8003376:	68f8      	ldr	r0, [r7, #12]
 8003378:	f000 f956 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e07c      	b.n	8003480 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003390:	b2d2      	uxtb	r2, r2
 8003392:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033a2:	3b01      	subs	r3, #1
 80033a4:	b29a      	uxth	r2, r3
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033ae:	b29b      	uxth	r3, r3
 80033b0:	3b01      	subs	r3, #1
 80033b2:	b29a      	uxth	r2, r3
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033bc:	b29b      	uxth	r3, r3
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d034      	beq.n	800342c <HAL_I2C_Mem_Read+0x1d0>
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d130      	bne.n	800342c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033d0:	2200      	movs	r2, #0
 80033d2:	2180      	movs	r1, #128	@ 0x80
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 f927 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e04d      	b.n	8003480 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033e8:	b29b      	uxth	r3, r3
 80033ea:	2bff      	cmp	r3, #255	@ 0xff
 80033ec:	d90e      	bls.n	800340c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	2201      	movs	r2, #1
 80033f2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	8979      	ldrh	r1, [r7, #10]
 80033fc:	2300      	movs	r3, #0
 80033fe:	9300      	str	r3, [sp, #0]
 8003400:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8003404:	68f8      	ldr	r0, [r7, #12]
 8003406:	f000 fad3 	bl	80039b0 <I2C_TransferConfig>
 800340a:	e00f      	b.n	800342c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003410:	b29a      	uxth	r2, r3
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341a:	b2da      	uxtb	r2, r3
 800341c:	8979      	ldrh	r1, [r7, #10]
 800341e:	2300      	movs	r3, #0
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003426:	68f8      	ldr	r0, [r7, #12]
 8003428:	f000 fac2 	bl	80039b0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003430:	b29b      	uxth	r3, r3
 8003432:	2b00      	cmp	r3, #0
 8003434:	d19a      	bne.n	800336c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003436:	697a      	ldr	r2, [r7, #20]
 8003438:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800343a:	68f8      	ldr	r0, [r7, #12]
 800343c:	f000 f994 	bl	8003768 <I2C_WaitOnSTOPFlagUntilTimeout>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	e01a      	b.n	8003480 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2220      	movs	r2, #32
 8003450:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	6859      	ldr	r1, [r3, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4b0b      	ldr	r3, [pc, #44]	@ (800348c <HAL_I2C_Mem_Read+0x230>)
 800345e:	400b      	ands	r3, r1
 8003460:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	2220      	movs	r2, #32
 8003466:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800347a:	2300      	movs	r3, #0
 800347c:	e000      	b.n	8003480 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800347e:	2302      	movs	r3, #2
  }
}
 8003480:	4618      	mov	r0, r3
 8003482:	3718      	adds	r7, #24
 8003484:	46bd      	mov	sp, r7
 8003486:	bd80      	pop	{r7, pc}
 8003488:	80002400 	.word	0x80002400
 800348c:	fe00e800 	.word	0xfe00e800

08003490 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	4608      	mov	r0, r1
 800349a:	4611      	mov	r1, r2
 800349c:	461a      	mov	r2, r3
 800349e:	4603      	mov	r3, r0
 80034a0:	817b      	strh	r3, [r7, #10]
 80034a2:	460b      	mov	r3, r1
 80034a4:	813b      	strh	r3, [r7, #8]
 80034a6:	4613      	mov	r3, r2
 80034a8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80034aa:	88fb      	ldrh	r3, [r7, #6]
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	8979      	ldrh	r1, [r7, #10]
 80034b0:	4b20      	ldr	r3, [pc, #128]	@ (8003534 <I2C_RequestMemoryWrite+0xa4>)
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 fa79 	bl	80039b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034be:	69fa      	ldr	r2, [r7, #28]
 80034c0:	69b9      	ldr	r1, [r7, #24]
 80034c2:	68f8      	ldr	r0, [r7, #12]
 80034c4:	f000 f909 	bl	80036da <I2C_WaitOnTXISFlagUntilTimeout>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d001      	beq.n	80034d2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e02c      	b.n	800352c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80034d2:	88fb      	ldrh	r3, [r7, #6]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d105      	bne.n	80034e4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80034d8:	893b      	ldrh	r3, [r7, #8]
 80034da:	b2da      	uxtb	r2, r3
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	629a      	str	r2, [r3, #40]	@ 0x28
 80034e2:	e015      	b.n	8003510 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80034e4:	893b      	ldrh	r3, [r7, #8]
 80034e6:	0a1b      	lsrs	r3, r3, #8
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	b2da      	uxtb	r2, r3
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80034f2:	69fa      	ldr	r2, [r7, #28]
 80034f4:	69b9      	ldr	r1, [r7, #24]
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f8ef 	bl	80036da <I2C_WaitOnTXISFlagUntilTimeout>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e012      	b.n	800352c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003506:	893b      	ldrh	r3, [r7, #8]
 8003508:	b2da      	uxtb	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	2200      	movs	r2, #0
 8003518:	2180      	movs	r1, #128	@ 0x80
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f000 f884 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e000      	b.n	800352c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	80002000 	.word	0x80002000

08003538 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b086      	sub	sp, #24
 800353c:	af02      	add	r7, sp, #8
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	4608      	mov	r0, r1
 8003542:	4611      	mov	r1, r2
 8003544:	461a      	mov	r2, r3
 8003546:	4603      	mov	r3, r0
 8003548:	817b      	strh	r3, [r7, #10]
 800354a:	460b      	mov	r3, r1
 800354c:	813b      	strh	r3, [r7, #8]
 800354e:	4613      	mov	r3, r2
 8003550:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003552:	88fb      	ldrh	r3, [r7, #6]
 8003554:	b2da      	uxtb	r2, r3
 8003556:	8979      	ldrh	r1, [r7, #10]
 8003558:	4b20      	ldr	r3, [pc, #128]	@ (80035dc <I2C_RequestMemoryRead+0xa4>)
 800355a:	9300      	str	r3, [sp, #0]
 800355c:	2300      	movs	r3, #0
 800355e:	68f8      	ldr	r0, [r7, #12]
 8003560:	f000 fa26 	bl	80039b0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	69b9      	ldr	r1, [r7, #24]
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f8b6 	bl	80036da <I2C_WaitOnTXISFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e02c      	b.n	80035d2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003578:	88fb      	ldrh	r3, [r7, #6]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d105      	bne.n	800358a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800357e:	893b      	ldrh	r3, [r7, #8]
 8003580:	b2da      	uxtb	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	629a      	str	r2, [r3, #40]	@ 0x28
 8003588:	e015      	b.n	80035b6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800358a:	893b      	ldrh	r3, [r7, #8]
 800358c:	0a1b      	lsrs	r3, r3, #8
 800358e:	b29b      	uxth	r3, r3
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003598:	69fa      	ldr	r2, [r7, #28]
 800359a:	69b9      	ldr	r1, [r7, #24]
 800359c:	68f8      	ldr	r0, [r7, #12]
 800359e:	f000 f89c 	bl	80036da <I2C_WaitOnTXISFlagUntilTimeout>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80035a8:	2301      	movs	r3, #1
 80035aa:	e012      	b.n	80035d2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80035ac:	893b      	ldrh	r3, [r7, #8]
 80035ae:	b2da      	uxtb	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80035b6:	69fb      	ldr	r3, [r7, #28]
 80035b8:	9300      	str	r3, [sp, #0]
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	2200      	movs	r2, #0
 80035be:	2140      	movs	r1, #64	@ 0x40
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f000 f831 	bl	8003628 <I2C_WaitOnFlagUntilTimeout>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e000      	b.n	80035d2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80035d0:	2300      	movs	r3, #0
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}
 80035da:	bf00      	nop
 80035dc:	80002000 	.word	0x80002000

080035e0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	f003 0302 	and.w	r3, r3, #2
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d103      	bne.n	80035fe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	2200      	movs	r2, #0
 80035fc:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	699b      	ldr	r3, [r3, #24]
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b01      	cmp	r3, #1
 800360a:	d007      	beq.n	800361c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	699a      	ldr	r2, [r3, #24]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	619a      	str	r2, [r3, #24]
  }
}
 800361c:	bf00      	nop
 800361e:	370c      	adds	r7, #12
 8003620:	46bd      	mov	sp, r7
 8003622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003626:	4770      	bx	lr

08003628 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b084      	sub	sp, #16
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	4613      	mov	r3, r2
 8003636:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003638:	e03b      	b.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800363a:	69ba      	ldr	r2, [r7, #24]
 800363c:	6839      	ldr	r1, [r7, #0]
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f8d6 	bl	80037f0 <I2C_IsErrorOccurred>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e041      	b.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003654:	d02d      	beq.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7ff f979 	bl	800294c <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnFlagUntilTimeout+0x44>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d122      	bne.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	68bb      	ldr	r3, [r7, #8]
 8003674:	4013      	ands	r3, r2
 8003676:	68ba      	ldr	r2, [r7, #8]
 8003678:	429a      	cmp	r2, r3
 800367a:	bf0c      	ite	eq
 800367c:	2301      	moveq	r3, #1
 800367e:	2300      	movne	r3, #0
 8003680:	b2db      	uxtb	r3, r3
 8003682:	461a      	mov	r2, r3
 8003684:	79fb      	ldrb	r3, [r7, #7]
 8003686:	429a      	cmp	r2, r3
 8003688:	d113      	bne.n	80036b2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800368e:	f043 0220 	orr.w	r2, r3, #32
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2220      	movs	r2, #32
 800369a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80036ae:	2301      	movs	r3, #1
 80036b0:	e00f      	b.n	80036d2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	699a      	ldr	r2, [r3, #24]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4013      	ands	r3, r2
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	429a      	cmp	r2, r3
 80036c0:	bf0c      	ite	eq
 80036c2:	2301      	moveq	r3, #1
 80036c4:	2300      	movne	r3, #0
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	461a      	mov	r2, r3
 80036ca:	79fb      	ldrb	r3, [r7, #7]
 80036cc:	429a      	cmp	r2, r3
 80036ce:	d0b4      	beq.n	800363a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036d0:	2300      	movs	r3, #0
}
 80036d2:	4618      	mov	r0, r3
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036da:	b580      	push	{r7, lr}
 80036dc:	b084      	sub	sp, #16
 80036de:	af00      	add	r7, sp, #0
 80036e0:	60f8      	str	r0, [r7, #12]
 80036e2:	60b9      	str	r1, [r7, #8]
 80036e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036e6:	e033      	b.n	8003750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036e8:	687a      	ldr	r2, [r7, #4]
 80036ea:	68b9      	ldr	r1, [r7, #8]
 80036ec:	68f8      	ldr	r0, [r7, #12]
 80036ee:	f000 f87f 	bl	80037f0 <I2C_IsErrorOccurred>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e031      	b.n	8003760 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003702:	d025      	beq.n	8003750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003704:	f7ff f922 	bl	800294c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	68ba      	ldr	r2, [r7, #8]
 8003710:	429a      	cmp	r2, r3
 8003712:	d302      	bcc.n	800371a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d11a      	bne.n	8003750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	699b      	ldr	r3, [r3, #24]
 8003720:	f003 0302 	and.w	r3, r3, #2
 8003724:	2b02      	cmp	r3, #2
 8003726:	d013      	beq.n	8003750 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800372c:	f043 0220 	orr.w	r2, r3, #32
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2220      	movs	r2, #32
 8003738:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800374c:	2301      	movs	r3, #1
 800374e:	e007      	b.n	8003760 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	699b      	ldr	r3, [r3, #24]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b02      	cmp	r3, #2
 800375c:	d1c4      	bne.n	80036e8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3710      	adds	r7, #16
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b084      	sub	sp, #16
 800376c:	af00      	add	r7, sp, #0
 800376e:	60f8      	str	r0, [r7, #12]
 8003770:	60b9      	str	r1, [r7, #8]
 8003772:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003774:	e02f      	b.n	80037d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	68b9      	ldr	r1, [r7, #8]
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f000 f838 	bl	80037f0 <I2C_IsErrorOccurred>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e02d      	b.n	80037e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800378a:	f7ff f8df 	bl	800294c <HAL_GetTick>
 800378e:	4602      	mov	r2, r0
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	1ad3      	subs	r3, r2, r3
 8003794:	68ba      	ldr	r2, [r7, #8]
 8003796:	429a      	cmp	r2, r3
 8003798:	d302      	bcc.n	80037a0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d11a      	bne.n	80037d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	699b      	ldr	r3, [r3, #24]
 80037a6:	f003 0320 	and.w	r3, r3, #32
 80037aa:	2b20      	cmp	r3, #32
 80037ac:	d013      	beq.n	80037d6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037b2:	f043 0220 	orr.w	r2, r3, #32
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2220      	movs	r2, #32
 80037be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e007      	b.n	80037e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	699b      	ldr	r3, [r3, #24]
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b20      	cmp	r3, #32
 80037e2:	d1c8      	bne.n	8003776 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80037e4:	2300      	movs	r3, #0
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3710      	adds	r7, #16
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
	...

080037f0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b08a      	sub	sp, #40	@ 0x28
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	60f8      	str	r0, [r7, #12]
 80037f8:	60b9      	str	r1, [r7, #8]
 80037fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80037fc:	2300      	movs	r3, #0
 80037fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	699b      	ldr	r3, [r3, #24]
 8003808:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800380a:	2300      	movs	r3, #0
 800380c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	d068      	beq.n	80038ee <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2210      	movs	r2, #16
 8003822:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003824:	e049      	b.n	80038ba <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800382c:	d045      	beq.n	80038ba <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800382e:	f7ff f88d 	bl	800294c <HAL_GetTick>
 8003832:	4602      	mov	r2, r0
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	1ad3      	subs	r3, r2, r3
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	429a      	cmp	r2, r3
 800383c:	d302      	bcc.n	8003844 <I2C_IsErrorOccurred+0x54>
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d13a      	bne.n	80038ba <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800384e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003856:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	699b      	ldr	r3, [r3, #24]
 800385e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003862:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003866:	d121      	bne.n	80038ac <I2C_IsErrorOccurred+0xbc>
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800386e:	d01d      	beq.n	80038ac <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003870:	7cfb      	ldrb	r3, [r7, #19]
 8003872:	2b20      	cmp	r3, #32
 8003874:	d01a      	beq.n	80038ac <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685a      	ldr	r2, [r3, #4]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003884:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003886:	f7ff f861 	bl	800294c <HAL_GetTick>
 800388a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800388c:	e00e      	b.n	80038ac <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800388e:	f7ff f85d 	bl	800294c <HAL_GetTick>
 8003892:	4602      	mov	r2, r0
 8003894:	69fb      	ldr	r3, [r7, #28]
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	2b19      	cmp	r3, #25
 800389a:	d907      	bls.n	80038ac <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800389c:	6a3b      	ldr	r3, [r7, #32]
 800389e:	f043 0320 	orr.w	r3, r3, #32
 80038a2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80038a4:	2301      	movs	r3, #1
 80038a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80038aa:	e006      	b.n	80038ba <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f003 0320 	and.w	r3, r3, #32
 80038b6:	2b20      	cmp	r3, #32
 80038b8:	d1e9      	bne.n	800388e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	699b      	ldr	r3, [r3, #24]
 80038c0:	f003 0320 	and.w	r3, r3, #32
 80038c4:	2b20      	cmp	r3, #32
 80038c6:	d003      	beq.n	80038d0 <I2C_IsErrorOccurred+0xe0>
 80038c8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0aa      	beq.n	8003826 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80038d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d103      	bne.n	80038e0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	2220      	movs	r2, #32
 80038de:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80038e0:	6a3b      	ldr	r3, [r7, #32]
 80038e2:	f043 0304 	orr.w	r3, r3, #4
 80038e6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	699b      	ldr	r3, [r3, #24]
 80038f4:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d00b      	beq.n	8003918 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003910:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003918:	69bb      	ldr	r3, [r7, #24]
 800391a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00b      	beq.n	800393a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003922:	6a3b      	ldr	r3, [r7, #32]
 8003924:	f043 0308 	orr.w	r3, r3, #8
 8003928:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003932:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003944:	6a3b      	ldr	r3, [r7, #32]
 8003946:	f043 0302 	orr.w	r3, r3, #2
 800394a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003954:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003956:	2301      	movs	r3, #1
 8003958:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800395c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8003960:	2b00      	cmp	r3, #0
 8003962:	d01c      	beq.n	800399e <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003964:	68f8      	ldr	r0, [r7, #12]
 8003966:	f7ff fe3b 	bl	80035e0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4b0d      	ldr	r3, [pc, #52]	@ (80039ac <I2C_IsErrorOccurred+0x1bc>)
 8003976:	400b      	ands	r3, r1
 8003978:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	431a      	orrs	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2220      	movs	r2, #32
 800398a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2200      	movs	r2, #0
 800399a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800399e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3728      	adds	r7, #40	@ 0x28
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	fe00e800 	.word	0xfe00e800

080039b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b087      	sub	sp, #28
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	607b      	str	r3, [r7, #4]
 80039ba:	460b      	mov	r3, r1
 80039bc:	817b      	strh	r3, [r7, #10]
 80039be:	4613      	mov	r3, r2
 80039c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039c2:	897b      	ldrh	r3, [r7, #10]
 80039c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039c8:	7a7b      	ldrb	r3, [r7, #9]
 80039ca:	041b      	lsls	r3, r3, #16
 80039cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80039d6:	6a3b      	ldr	r3, [r7, #32]
 80039d8:	4313      	orrs	r3, r2
 80039da:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80039de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685a      	ldr	r2, [r3, #4]
 80039e6:	6a3b      	ldr	r3, [r7, #32]
 80039e8:	0d5b      	lsrs	r3, r3, #21
 80039ea:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80039ee:	4b08      	ldr	r3, [pc, #32]	@ (8003a10 <I2C_TransferConfig+0x60>)
 80039f0:	430b      	orrs	r3, r1
 80039f2:	43db      	mvns	r3, r3
 80039f4:	ea02 0103 	and.w	r1, r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	430a      	orrs	r2, r1
 8003a00:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003a02:	bf00      	nop
 8003a04:	371c      	adds	r7, #28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
 8003a0e:	bf00      	nop
 8003a10:	03ff63ff 	.word	0x03ff63ff

08003a14 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
 8003a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	d138      	bne.n	8003a9c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003a30:	2b01      	cmp	r3, #1
 8003a32:	d101      	bne.n	8003a38 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003a34:	2302      	movs	r3, #2
 8003a36:	e032      	b.n	8003a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2224      	movs	r2, #36	@ 0x24
 8003a44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f022 0201 	bic.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681a      	ldr	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003a66:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6819      	ldr	r1, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	683a      	ldr	r2, [r7, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681a      	ldr	r2, [r3, #0]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f042 0201 	orr.w	r2, r2, #1
 8003a86:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2220      	movs	r2, #32
 8003a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	2200      	movs	r2, #0
 8003a94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	370c      	adds	r7, #12
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003aaa:	b480      	push	{r7}
 8003aac:	b085      	sub	sp, #20
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
 8003ab2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003aba:	b2db      	uxtb	r3, r3
 8003abc:	2b20      	cmp	r3, #32
 8003abe:	d139      	bne.n	8003b34 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003ac6:	2b01      	cmp	r3, #1
 8003ac8:	d101      	bne.n	8003ace <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003aca:	2302      	movs	r3, #2
 8003acc:	e033      	b.n	8003b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2224      	movs	r2, #36	@ 0x24
 8003ada:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0201 	bic.w	r2, r2, #1
 8003aec:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003afc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	021b      	lsls	r3, r3, #8
 8003b02:	68fa      	ldr	r2, [r7, #12]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68fa      	ldr	r2, [r7, #12]
 8003b0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f042 0201 	orr.w	r2, r2, #1
 8003b1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2220      	movs	r2, #32
 8003b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8003b30:	2300      	movs	r3, #0
 8003b32:	e000      	b.n	8003b36 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003b34:	2302      	movs	r3, #2
  }
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003b48:	4b04      	ldr	r3, [pc, #16]	@ (8003b5c <HAL_PWREx_GetVoltageRange+0x18>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8003b50:	4618      	mov	r0, r3
 8003b52:	46bd      	mov	sp, r7
 8003b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b58:	4770      	bx	lr
 8003b5a:	bf00      	nop
 8003b5c:	40007000 	.word	0x40007000

08003b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b60:	b480      	push	{r7}
 8003b62:	b085      	sub	sp, #20
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b6e:	d130      	bne.n	8003bd2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8003b70:	4b23      	ldr	r3, [pc, #140]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b7c:	d038      	beq.n	8003bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b7e:	4b20      	ldr	r3, [pc, #128]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b86:	4a1e      	ldr	r2, [pc, #120]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003b88:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b8c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8003c04 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2232      	movs	r2, #50	@ 0x32
 8003b94:	fb02 f303 	mul.w	r3, r2, r3
 8003b98:	4a1b      	ldr	r2, [pc, #108]	@ (8003c08 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b9e:	0c9b      	lsrs	r3, r3, #18
 8003ba0:	3301      	adds	r3, #1
 8003ba2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003ba4:	e002      	b.n	8003bac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	3b01      	subs	r3, #1
 8003baa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bac:	4b14      	ldr	r3, [pc, #80]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bb8:	d102      	bne.n	8003bc0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d1f2      	bne.n	8003ba6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bc8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bcc:	d110      	bne.n	8003bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8003bce:	2303      	movs	r3, #3
 8003bd0:	e00f      	b.n	8003bf2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bd2:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bde:	d007      	beq.n	8003bf0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003be0:	4b07      	ldr	r3, [pc, #28]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003be8:	4a05      	ldr	r2, [pc, #20]	@ (8003c00 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003bea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3714      	adds	r7, #20
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr
 8003bfe:	bf00      	nop
 8003c00:	40007000 	.word	0x40007000
 8003c04:	20000000 	.word	0x20000000
 8003c08:	431bde83 	.word	0x431bde83

08003c0c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b088      	sub	sp, #32
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d101      	bne.n	8003c1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e3ca      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003c1e:	4b97      	ldr	r3, [pc, #604]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003c20:	689b      	ldr	r3, [r3, #8]
 8003c22:	f003 030c 	and.w	r3, r3, #12
 8003c26:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003c28:	4b94      	ldr	r3, [pc, #592]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f003 0303 	and.w	r3, r3, #3
 8003c30:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0310 	and.w	r3, r3, #16
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	f000 80e4 	beq.w	8003e08 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d007      	beq.n	8003c56 <HAL_RCC_OscConfig+0x4a>
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	2b0c      	cmp	r3, #12
 8003c4a:	f040 808b 	bne.w	8003d64 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	f040 8087 	bne.w	8003d64 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003c56:	4b89      	ldr	r3, [pc, #548]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0302 	and.w	r3, r3, #2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d005      	beq.n	8003c6e <HAL_RCC_OscConfig+0x62>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d101      	bne.n	8003c6e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8003c6a:	2301      	movs	r3, #1
 8003c6c:	e3a2      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1a      	ldr	r2, [r3, #32]
 8003c72:	4b82      	ldr	r3, [pc, #520]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0308 	and.w	r3, r3, #8
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d004      	beq.n	8003c88 <HAL_RCC_OscConfig+0x7c>
 8003c7e:	4b7f      	ldr	r3, [pc, #508]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c86:	e005      	b.n	8003c94 <HAL_RCC_OscConfig+0x88>
 8003c88:	4b7c      	ldr	r3, [pc, #496]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8e:	091b      	lsrs	r3, r3, #4
 8003c90:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d223      	bcs.n	8003ce0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6a1b      	ldr	r3, [r3, #32]
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f000 fd55 	bl	800474c <RCC_SetFlashLatencyFromMSIRange>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d001      	beq.n	8003cac <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e383      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003cac:	4b73      	ldr	r3, [pc, #460]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a72      	ldr	r2, [pc, #456]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003cb2:	f043 0308 	orr.w	r3, r3, #8
 8003cb6:	6013      	str	r3, [r2, #0]
 8003cb8:	4b70      	ldr	r3, [pc, #448]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	496d      	ldr	r1, [pc, #436]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cca:	4b6c      	ldr	r3, [pc, #432]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	4968      	ldr	r1, [pc, #416]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	604b      	str	r3, [r1, #4]
 8003cde:	e025      	b.n	8003d2c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003ce0:	4b66      	ldr	r3, [pc, #408]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a65      	ldr	r2, [pc, #404]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003ce6:	f043 0308 	orr.w	r3, r3, #8
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	4b63      	ldr	r3, [pc, #396]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	4960      	ldr	r1, [pc, #384]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003cfa:	4313      	orrs	r3, r2
 8003cfc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003cfe:	4b5f      	ldr	r3, [pc, #380]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	021b      	lsls	r3, r3, #8
 8003d0c:	495b      	ldr	r1, [pc, #364]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d109      	bne.n	8003d2c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6a1b      	ldr	r3, [r3, #32]
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	f000 fd15 	bl	800474c <RCC_SetFlashLatencyFromMSIRange>
 8003d22:	4603      	mov	r3, r0
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d001      	beq.n	8003d2c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e343      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003d2c:	f000 fc4a 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 8003d30:	4602      	mov	r2, r0
 8003d32:	4b52      	ldr	r3, [pc, #328]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	091b      	lsrs	r3, r3, #4
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	4950      	ldr	r1, [pc, #320]	@ (8003e80 <HAL_RCC_OscConfig+0x274>)
 8003d3e:	5ccb      	ldrb	r3, [r1, r3]
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
 8003d48:	4a4e      	ldr	r2, [pc, #312]	@ (8003e84 <HAL_RCC_OscConfig+0x278>)
 8003d4a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003d4c:	4b4e      	ldr	r3, [pc, #312]	@ (8003e88 <HAL_RCC_OscConfig+0x27c>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4618      	mov	r0, r3
 8003d52:	f7fe fdab 	bl	80028ac <HAL_InitTick>
 8003d56:	4603      	mov	r3, r0
 8003d58:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003d5a:	7bfb      	ldrb	r3, [r7, #15]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d052      	beq.n	8003e06 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
 8003d62:	e327      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	699b      	ldr	r3, [r3, #24]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d032      	beq.n	8003dd2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003d6c:	4b43      	ldr	r3, [pc, #268]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a42      	ldr	r2, [pc, #264]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003d72:	f043 0301 	orr.w	r3, r3, #1
 8003d76:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003d78:	f7fe fde8 	bl	800294c <HAL_GetTick>
 8003d7c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d7e:	e008      	b.n	8003d92 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003d80:	f7fe fde4 	bl	800294c <HAL_GetTick>
 8003d84:	4602      	mov	r2, r0
 8003d86:	693b      	ldr	r3, [r7, #16]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	2b02      	cmp	r3, #2
 8003d8c:	d901      	bls.n	8003d92 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003d8e:	2303      	movs	r3, #3
 8003d90:	e310      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003d92:	4b3a      	ldr	r3, [pc, #232]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0302 	and.w	r3, r3, #2
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d0f0      	beq.n	8003d80 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003d9e:	4b37      	ldr	r3, [pc, #220]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	4a36      	ldr	r2, [pc, #216]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003da4:	f043 0308 	orr.w	r3, r3, #8
 8003da8:	6013      	str	r3, [r2, #0]
 8003daa:	4b34      	ldr	r3, [pc, #208]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	4931      	ldr	r1, [pc, #196]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003db8:	4313      	orrs	r3, r2
 8003dba:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003dbc:	4b2f      	ldr	r3, [pc, #188]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	492c      	ldr	r1, [pc, #176]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	604b      	str	r3, [r1, #4]
 8003dd0:	e01a      	b.n	8003e08 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003dd2:	4b2a      	ldr	r3, [pc, #168]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a29      	ldr	r2, [pc, #164]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003dd8:	f023 0301 	bic.w	r3, r3, #1
 8003ddc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003dde:	f7fe fdb5 	bl	800294c <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003de4:	e008      	b.n	8003df8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003de6:	f7fe fdb1 	bl	800294c <HAL_GetTick>
 8003dea:	4602      	mov	r2, r0
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	1ad3      	subs	r3, r2, r3
 8003df0:	2b02      	cmp	r3, #2
 8003df2:	d901      	bls.n	8003df8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003df4:	2303      	movs	r3, #3
 8003df6:	e2dd      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003df8:	4b20      	ldr	r3, [pc, #128]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0302 	and.w	r3, r3, #2
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d1f0      	bne.n	8003de6 <HAL_RCC_OscConfig+0x1da>
 8003e04:	e000      	b.n	8003e08 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003e06:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d074      	beq.n	8003efe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	2b08      	cmp	r3, #8
 8003e18:	d005      	beq.n	8003e26 <HAL_RCC_OscConfig+0x21a>
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	2b0c      	cmp	r3, #12
 8003e1e:	d10e      	bne.n	8003e3e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	2b03      	cmp	r3, #3
 8003e24:	d10b      	bne.n	8003e3e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e26:	4b15      	ldr	r3, [pc, #84]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d064      	beq.n	8003efc <HAL_RCC_OscConfig+0x2f0>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d160      	bne.n	8003efc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	e2ba      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e46:	d106      	bne.n	8003e56 <HAL_RCC_OscConfig+0x24a>
 8003e48:	4b0c      	ldr	r3, [pc, #48]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e52:	6013      	str	r3, [r2, #0]
 8003e54:	e026      	b.n	8003ea4 <HAL_RCC_OscConfig+0x298>
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e5e:	d115      	bne.n	8003e8c <HAL_RCC_OscConfig+0x280>
 8003e60:	4b06      	ldr	r3, [pc, #24]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a05      	ldr	r2, [pc, #20]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003e66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e6a:	6013      	str	r3, [r2, #0]
 8003e6c:	4b03      	ldr	r3, [pc, #12]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a02      	ldr	r2, [pc, #8]	@ (8003e7c <HAL_RCC_OscConfig+0x270>)
 8003e72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e76:	6013      	str	r3, [r2, #0]
 8003e78:	e014      	b.n	8003ea4 <HAL_RCC_OscConfig+0x298>
 8003e7a:	bf00      	nop
 8003e7c:	40021000 	.word	0x40021000
 8003e80:	0800a91c 	.word	0x0800a91c
 8003e84:	20000000 	.word	0x20000000
 8003e88:	20000004 	.word	0x20000004
 8003e8c:	4ba0      	ldr	r3, [pc, #640]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a9f      	ldr	r2, [pc, #636]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e96:	6013      	str	r3, [r2, #0]
 8003e98:	4b9d      	ldr	r3, [pc, #628]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4a9c      	ldr	r2, [pc, #624]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d013      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eac:	f7fe fd4e 	bl	800294c <HAL_GetTick>
 8003eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003eb2:	e008      	b.n	8003ec6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eb4:	f7fe fd4a 	bl	800294c <HAL_GetTick>
 8003eb8:	4602      	mov	r2, r0
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	2b64      	cmp	r3, #100	@ 0x64
 8003ec0:	d901      	bls.n	8003ec6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003ec2:	2303      	movs	r3, #3
 8003ec4:	e276      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ec6:	4b92      	ldr	r3, [pc, #584]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d0f0      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x2a8>
 8003ed2:	e014      	b.n	8003efe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe fd3a 	bl	800294c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003edc:	f7fe fd36 	bl	800294c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b64      	cmp	r3, #100	@ 0x64
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e262      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003eee:	4b88      	ldr	r3, [pc, #544]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x2d0>
 8003efa:	e000      	b.n	8003efe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0302 	and.w	r3, r3, #2
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d060      	beq.n	8003fcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003f0a:	69bb      	ldr	r3, [r7, #24]
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d005      	beq.n	8003f1c <HAL_RCC_OscConfig+0x310>
 8003f10:	69bb      	ldr	r3, [r7, #24]
 8003f12:	2b0c      	cmp	r3, #12
 8003f14:	d119      	bne.n	8003f4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d116      	bne.n	8003f4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f1c:	4b7c      	ldr	r3, [pc, #496]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d005      	beq.n	8003f34 <HAL_RCC_OscConfig+0x328>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d101      	bne.n	8003f34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003f30:	2301      	movs	r3, #1
 8003f32:	e23f      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f34:	4b76      	ldr	r3, [pc, #472]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	061b      	lsls	r3, r3, #24
 8003f42:	4973      	ldr	r1, [pc, #460]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003f44:	4313      	orrs	r3, r2
 8003f46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f48:	e040      	b.n	8003fcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	68db      	ldr	r3, [r3, #12]
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d023      	beq.n	8003f9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f52:	4b6f      	ldr	r3, [pc, #444]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a6e      	ldr	r2, [pc, #440]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003f58:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f5e:	f7fe fcf5 	bl	800294c <HAL_GetTick>
 8003f62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f64:	e008      	b.n	8003f78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f66:	f7fe fcf1 	bl	800294c <HAL_GetTick>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	1ad3      	subs	r3, r2, r3
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d901      	bls.n	8003f78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003f74:	2303      	movs	r3, #3
 8003f76:	e21d      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f78:	4b65      	ldr	r3, [pc, #404]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d0f0      	beq.n	8003f66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f84:	4b62      	ldr	r3, [pc, #392]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	691b      	ldr	r3, [r3, #16]
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	495f      	ldr	r1, [pc, #380]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
 8003f98:	e018      	b.n	8003fcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a5c      	ldr	r2, [pc, #368]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003fa0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003fa4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fa6:	f7fe fcd1 	bl	800294c <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fae:	f7fe fccd 	bl	800294c <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e1f9      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003fc0:	4b53      	ldr	r3, [pc, #332]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1f0      	bne.n	8003fae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f003 0308 	and.w	r3, r3, #8
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d03c      	beq.n	8004052 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	695b      	ldr	r3, [r3, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d01c      	beq.n	800401a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fe0:	4b4b      	ldr	r3, [pc, #300]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003fe2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe6:	4a4a      	ldr	r2, [pc, #296]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8003fe8:	f043 0301 	orr.w	r3, r3, #1
 8003fec:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fe fcac 	bl	800294c <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ff6:	e008      	b.n	800400a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ff8:	f7fe fca8 	bl	800294c <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	2b02      	cmp	r3, #2
 8004004:	d901      	bls.n	800400a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e1d4      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800400a:	4b41      	ldr	r3, [pc, #260]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 800400c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d0ef      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x3ec>
 8004018:	e01b      	b.n	8004052 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800401a:	4b3d      	ldr	r3, [pc, #244]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 800401c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004020:	4a3b      	ldr	r2, [pc, #236]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8004022:	f023 0301 	bic.w	r3, r3, #1
 8004026:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402a:	f7fe fc8f 	bl	800294c <HAL_GetTick>
 800402e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004030:	e008      	b.n	8004044 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004032:	f7fe fc8b 	bl	800294c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b02      	cmp	r3, #2
 800403e:	d901      	bls.n	8004044 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e1b7      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004044:	4b32      	ldr	r3, [pc, #200]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8004046:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800404a:	f003 0302 	and.w	r3, r3, #2
 800404e:	2b00      	cmp	r3, #0
 8004050:	d1ef      	bne.n	8004032 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0304 	and.w	r3, r3, #4
 800405a:	2b00      	cmp	r3, #0
 800405c:	f000 80a6 	beq.w	80041ac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004060:	2300      	movs	r3, #0
 8004062:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8004064:	4b2a      	ldr	r3, [pc, #168]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8004066:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004068:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d10d      	bne.n	800408c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004070:	4b27      	ldr	r3, [pc, #156]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8004072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004074:	4a26      	ldr	r2, [pc, #152]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8004076:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800407a:	6593      	str	r3, [r2, #88]	@ 0x58
 800407c:	4b24      	ldr	r3, [pc, #144]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 800407e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004080:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004088:	2301      	movs	r3, #1
 800408a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800408c:	4b21      	ldr	r3, [pc, #132]	@ (8004114 <HAL_RCC_OscConfig+0x508>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004094:	2b00      	cmp	r3, #0
 8004096:	d118      	bne.n	80040ca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004098:	4b1e      	ldr	r3, [pc, #120]	@ (8004114 <HAL_RCC_OscConfig+0x508>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a1d      	ldr	r2, [pc, #116]	@ (8004114 <HAL_RCC_OscConfig+0x508>)
 800409e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040a2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040a4:	f7fe fc52 	bl	800294c <HAL_GetTick>
 80040a8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040aa:	e008      	b.n	80040be <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040ac:	f7fe fc4e 	bl	800294c <HAL_GetTick>
 80040b0:	4602      	mov	r2, r0
 80040b2:	693b      	ldr	r3, [r7, #16]
 80040b4:	1ad3      	subs	r3, r2, r3
 80040b6:	2b02      	cmp	r3, #2
 80040b8:	d901      	bls.n	80040be <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80040ba:	2303      	movs	r3, #3
 80040bc:	e17a      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80040be:	4b15      	ldr	r3, [pc, #84]	@ (8004114 <HAL_RCC_OscConfig+0x508>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d0f0      	beq.n	80040ac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d108      	bne.n	80040e4 <HAL_RCC_OscConfig+0x4d8>
 80040d2:	4b0f      	ldr	r3, [pc, #60]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d8:	4a0d      	ldr	r2, [pc, #52]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 80040da:	f043 0301 	orr.w	r3, r3, #1
 80040de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040e2:	e029      	b.n	8004138 <HAL_RCC_OscConfig+0x52c>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b05      	cmp	r3, #5
 80040ea:	d115      	bne.n	8004118 <HAL_RCC_OscConfig+0x50c>
 80040ec:	4b08      	ldr	r3, [pc, #32]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 80040ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040f2:	4a07      	ldr	r2, [pc, #28]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 80040f4:	f043 0304 	orr.w	r3, r3, #4
 80040f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040fc:	4b04      	ldr	r3, [pc, #16]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 80040fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004102:	4a03      	ldr	r2, [pc, #12]	@ (8004110 <HAL_RCC_OscConfig+0x504>)
 8004104:	f043 0301 	orr.w	r3, r3, #1
 8004108:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800410c:	e014      	b.n	8004138 <HAL_RCC_OscConfig+0x52c>
 800410e:	bf00      	nop
 8004110:	40021000 	.word	0x40021000
 8004114:	40007000 	.word	0x40007000
 8004118:	4b9c      	ldr	r3, [pc, #624]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411e:	4a9b      	ldr	r2, [pc, #620]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8004128:	4b98      	ldr	r3, [pc, #608]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800412e:	4a97      	ldr	r2, [pc, #604]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 8004130:	f023 0304 	bic.w	r3, r3, #4
 8004134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d016      	beq.n	800416e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fe fc04 	bl	800294c <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004146:	e00a      	b.n	800415e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004148:	f7fe fc00 	bl	800294c <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004156:	4293      	cmp	r3, r2
 8004158:	d901      	bls.n	800415e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800415a:	2303      	movs	r3, #3
 800415c:	e12a      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800415e:	4b8b      	ldr	r3, [pc, #556]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 8004160:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0ed      	beq.n	8004148 <HAL_RCC_OscConfig+0x53c>
 800416c:	e015      	b.n	800419a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416e:	f7fe fbed 	bl	800294c <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004174:	e00a      	b.n	800418c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004176:	f7fe fbe9 	bl	800294c <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004184:	4293      	cmp	r3, r2
 8004186:	d901      	bls.n	800418c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8004188:	2303      	movs	r3, #3
 800418a:	e113      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800418c:	4b7f      	ldr	r3, [pc, #508]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 800418e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004192:	f003 0302 	and.w	r3, r3, #2
 8004196:	2b00      	cmp	r3, #0
 8004198:	d1ed      	bne.n	8004176 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800419a:	7ffb      	ldrb	r3, [r7, #31]
 800419c:	2b01      	cmp	r3, #1
 800419e:	d105      	bne.n	80041ac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041a0:	4b7a      	ldr	r3, [pc, #488]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 80041a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80041a4:	4a79      	ldr	r2, [pc, #484]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 80041a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80041aa:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	f000 80fe 	beq.w	80043b2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	f040 80d0 	bne.w	8004360 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80041c0:	4b72      	ldr	r3, [pc, #456]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 80041c2:	68db      	ldr	r3, [r3, #12]
 80041c4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	f003 0203 	and.w	r2, r3, #3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d130      	bne.n	8004236 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041de:	3b01      	subs	r3, #1
 80041e0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d127      	bne.n	8004236 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80041f0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d11f      	bne.n	8004236 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8004200:	2a07      	cmp	r2, #7
 8004202:	bf14      	ite	ne
 8004204:	2201      	movne	r2, #1
 8004206:	2200      	moveq	r2, #0
 8004208:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800420a:	4293      	cmp	r3, r2
 800420c:	d113      	bne.n	8004236 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004218:	085b      	lsrs	r3, r3, #1
 800421a:	3b01      	subs	r3, #1
 800421c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800421e:	429a      	cmp	r2, r3
 8004220:	d109      	bne.n	8004236 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800422c:	085b      	lsrs	r3, r3, #1
 800422e:	3b01      	subs	r3, #1
 8004230:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004232:	429a      	cmp	r2, r3
 8004234:	d06e      	beq.n	8004314 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004236:	69bb      	ldr	r3, [r7, #24]
 8004238:	2b0c      	cmp	r3, #12
 800423a:	d069      	beq.n	8004310 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800423c:	4b53      	ldr	r3, [pc, #332]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004244:	2b00      	cmp	r3, #0
 8004246:	d105      	bne.n	8004254 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8004248:	4b50      	ldr	r3, [pc, #320]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004250:	2b00      	cmp	r3, #0
 8004252:	d001      	beq.n	8004258 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8004254:	2301      	movs	r3, #1
 8004256:	e0ad      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8004258:	4b4c      	ldr	r3, [pc, #304]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	4a4b      	ldr	r2, [pc, #300]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 800425e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004262:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8004264:	f7fe fb72 	bl	800294c <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800426c:	f7fe fb6e 	bl	800294c <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b02      	cmp	r3, #2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e09a      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800427e:	4b43      	ldr	r3, [pc, #268]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1f0      	bne.n	800426c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800428a:	4b40      	ldr	r3, [pc, #256]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 800428c:	68da      	ldr	r2, [r3, #12]
 800428e:	4b40      	ldr	r3, [pc, #256]	@ (8004390 <HAL_RCC_OscConfig+0x784>)
 8004290:	4013      	ands	r3, r2
 8004292:	687a      	ldr	r2, [r7, #4]
 8004294:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8004296:	687a      	ldr	r2, [r7, #4]
 8004298:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800429a:	3a01      	subs	r2, #1
 800429c:	0112      	lsls	r2, r2, #4
 800429e:	4311      	orrs	r1, r2
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80042a4:	0212      	lsls	r2, r2, #8
 80042a6:	4311      	orrs	r1, r2
 80042a8:	687a      	ldr	r2, [r7, #4]
 80042aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80042ac:	0852      	lsrs	r2, r2, #1
 80042ae:	3a01      	subs	r2, #1
 80042b0:	0552      	lsls	r2, r2, #21
 80042b2:	4311      	orrs	r1, r2
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80042b8:	0852      	lsrs	r2, r2, #1
 80042ba:	3a01      	subs	r2, #1
 80042bc:	0652      	lsls	r2, r2, #25
 80042be:	4311      	orrs	r1, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80042c4:	0912      	lsrs	r2, r2, #4
 80042c6:	0452      	lsls	r2, r2, #17
 80042c8:	430a      	orrs	r2, r1
 80042ca:	4930      	ldr	r1, [pc, #192]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80042d0:	4b2e      	ldr	r3, [pc, #184]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a2d      	ldr	r2, [pc, #180]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 80042d6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80042dc:	4b2b      	ldr	r3, [pc, #172]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 80042de:	68db      	ldr	r3, [r3, #12]
 80042e0:	4a2a      	ldr	r2, [pc, #168]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 80042e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80042e8:	f7fe fb30 	bl	800294c <HAL_GetTick>
 80042ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ee:	e008      	b.n	8004302 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f0:	f7fe fb2c 	bl	800294c <HAL_GetTick>
 80042f4:	4602      	mov	r2, r0
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	1ad3      	subs	r3, r2, r3
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d901      	bls.n	8004302 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80042fe:	2303      	movs	r3, #3
 8004300:	e058      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004302:	4b22      	ldr	r3, [pc, #136]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0f0      	beq.n	80042f0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800430e:	e050      	b.n	80043b2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e04f      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004314:	4b1d      	ldr	r3, [pc, #116]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d148      	bne.n	80043b2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8004320:	4b1a      	ldr	r3, [pc, #104]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a19      	ldr	r2, [pc, #100]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800432a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800432c:	4b17      	ldr	r3, [pc, #92]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	4a16      	ldr	r2, [pc, #88]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 8004332:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004336:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8004338:	f7fe fb08 	bl	800294c <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004340:	f7fe fb04 	bl	800294c <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e030      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004352:	4b0e      	ldr	r3, [pc, #56]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d0f0      	beq.n	8004340 <HAL_RCC_OscConfig+0x734>
 800435e:	e028      	b.n	80043b2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	2b0c      	cmp	r3, #12
 8004364:	d023      	beq.n	80043ae <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004366:	4b09      	ldr	r3, [pc, #36]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a08      	ldr	r2, [pc, #32]	@ (800438c <HAL_RCC_OscConfig+0x780>)
 800436c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004370:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004372:	f7fe faeb 	bl	800294c <HAL_GetTick>
 8004376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004378:	e00c      	b.n	8004394 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800437a:	f7fe fae7 	bl	800294c <HAL_GetTick>
 800437e:	4602      	mov	r2, r0
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	1ad3      	subs	r3, r2, r3
 8004384:	2b02      	cmp	r3, #2
 8004386:	d905      	bls.n	8004394 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8004388:	2303      	movs	r3, #3
 800438a:	e013      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
 800438c:	40021000 	.word	0x40021000
 8004390:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004394:	4b09      	ldr	r3, [pc, #36]	@ (80043bc <HAL_RCC_OscConfig+0x7b0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800439c:	2b00      	cmp	r3, #0
 800439e:	d1ec      	bne.n	800437a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80043a0:	4b06      	ldr	r3, [pc, #24]	@ (80043bc <HAL_RCC_OscConfig+0x7b0>)
 80043a2:	68da      	ldr	r2, [r3, #12]
 80043a4:	4905      	ldr	r1, [pc, #20]	@ (80043bc <HAL_RCC_OscConfig+0x7b0>)
 80043a6:	4b06      	ldr	r3, [pc, #24]	@ (80043c0 <HAL_RCC_OscConfig+0x7b4>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	60cb      	str	r3, [r1, #12]
 80043ac:	e001      	b.n	80043b2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3720      	adds	r7, #32
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40021000 	.word	0x40021000
 80043c0:	feeefffc 	.word	0xfeeefffc

080043c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d101      	bne.n	80043d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e0e7      	b.n	80045a8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80043d8:	4b75      	ldr	r3, [pc, #468]	@ (80045b0 <HAL_RCC_ClockConfig+0x1ec>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0307 	and.w	r3, r3, #7
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d910      	bls.n	8004408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043e6:	4b72      	ldr	r3, [pc, #456]	@ (80045b0 <HAL_RCC_ClockConfig+0x1ec>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f023 0207 	bic.w	r2, r3, #7
 80043ee:	4970      	ldr	r1, [pc, #448]	@ (80045b0 <HAL_RCC_ClockConfig+0x1ec>)
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043f6:	4b6e      	ldr	r3, [pc, #440]	@ (80045b0 <HAL_RCC_ClockConfig+0x1ec>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 0307 	and.w	r3, r3, #7
 80043fe:	683a      	ldr	r2, [r7, #0]
 8004400:	429a      	cmp	r2, r3
 8004402:	d001      	beq.n	8004408 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8004404:	2301      	movs	r3, #1
 8004406:	e0cf      	b.n	80045a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b00      	cmp	r3, #0
 8004412:	d010      	beq.n	8004436 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	4b66      	ldr	r3, [pc, #408]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 800441a:	689b      	ldr	r3, [r3, #8]
 800441c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004420:	429a      	cmp	r2, r3
 8004422:	d908      	bls.n	8004436 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004424:	4b63      	ldr	r3, [pc, #396]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	689b      	ldr	r3, [r3, #8]
 8004430:	4960      	ldr	r1, [pc, #384]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 0301 	and.w	r3, r3, #1
 800443e:	2b00      	cmp	r3, #0
 8004440:	d04c      	beq.n	80044dc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	685b      	ldr	r3, [r3, #4]
 8004446:	2b03      	cmp	r3, #3
 8004448:	d107      	bne.n	800445a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800444a:	4b5a      	ldr	r3, [pc, #360]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004452:	2b00      	cmp	r3, #0
 8004454:	d121      	bne.n	800449a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8004456:	2301      	movs	r3, #1
 8004458:	e0a6      	b.n	80045a8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
 800445e:	2b02      	cmp	r3, #2
 8004460:	d107      	bne.n	8004472 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004462:	4b54      	ldr	r3, [pc, #336]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d115      	bne.n	800449a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800446e:	2301      	movs	r3, #1
 8004470:	e09a      	b.n	80045a8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d107      	bne.n	800448a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800447a:	4b4e      	ldr	r3, [pc, #312]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d109      	bne.n	800449a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e08e      	b.n	80045a8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800448a:	4b4a      	ldr	r3, [pc, #296]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004492:	2b00      	cmp	r3, #0
 8004494:	d101      	bne.n	800449a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	e086      	b.n	80045a8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800449a:	4b46      	ldr	r3, [pc, #280]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 800449c:	689b      	ldr	r3, [r3, #8]
 800449e:	f023 0203 	bic.w	r2, r3, #3
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	4943      	ldr	r1, [pc, #268]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 80044a8:	4313      	orrs	r3, r2
 80044aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044ac:	f7fe fa4e 	bl	800294c <HAL_GetTick>
 80044b0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b2:	e00a      	b.n	80044ca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b4:	f7fe fa4a 	bl	800294c <HAL_GetTick>
 80044b8:	4602      	mov	r2, r0
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad3      	subs	r3, r2, r3
 80044be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d901      	bls.n	80044ca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80044c6:	2303      	movs	r3, #3
 80044c8:	e06e      	b.n	80045a8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ca:	4b3a      	ldr	r3, [pc, #232]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 020c 	and.w	r2, r3, #12
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	009b      	lsls	r3, r3, #2
 80044d8:	429a      	cmp	r2, r3
 80044da:	d1eb      	bne.n	80044b4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d010      	beq.n	800450a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	689a      	ldr	r2, [r3, #8]
 80044ec:	4b31      	ldr	r3, [pc, #196]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d208      	bcs.n	800450a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044f8:	4b2e      	ldr	r3, [pc, #184]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	492b      	ldr	r1, [pc, #172]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004506:	4313      	orrs	r3, r2
 8004508:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800450a:	4b29      	ldr	r3, [pc, #164]	@ (80045b0 <HAL_RCC_ClockConfig+0x1ec>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 0307 	and.w	r3, r3, #7
 8004512:	683a      	ldr	r2, [r7, #0]
 8004514:	429a      	cmp	r2, r3
 8004516:	d210      	bcs.n	800453a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004518:	4b25      	ldr	r3, [pc, #148]	@ (80045b0 <HAL_RCC_ClockConfig+0x1ec>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f023 0207 	bic.w	r2, r3, #7
 8004520:	4923      	ldr	r1, [pc, #140]	@ (80045b0 <HAL_RCC_ClockConfig+0x1ec>)
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	4313      	orrs	r3, r2
 8004526:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004528:	4b21      	ldr	r3, [pc, #132]	@ (80045b0 <HAL_RCC_ClockConfig+0x1ec>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f003 0307 	and.w	r3, r3, #7
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d001      	beq.n	800453a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e036      	b.n	80045a8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b00      	cmp	r3, #0
 8004544:	d008      	beq.n	8004558 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004546:	4b1b      	ldr	r3, [pc, #108]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	68db      	ldr	r3, [r3, #12]
 8004552:	4918      	ldr	r1, [pc, #96]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004554:	4313      	orrs	r3, r2
 8004556:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0308 	and.w	r3, r3, #8
 8004560:	2b00      	cmp	r3, #0
 8004562:	d009      	beq.n	8004578 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004564:	4b13      	ldr	r3, [pc, #76]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	691b      	ldr	r3, [r3, #16]
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4910      	ldr	r1, [pc, #64]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004574:	4313      	orrs	r3, r2
 8004576:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004578:	f000 f824 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 800457c:	4602      	mov	r2, r0
 800457e:	4b0d      	ldr	r3, [pc, #52]	@ (80045b4 <HAL_RCC_ClockConfig+0x1f0>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	091b      	lsrs	r3, r3, #4
 8004584:	f003 030f 	and.w	r3, r3, #15
 8004588:	490b      	ldr	r1, [pc, #44]	@ (80045b8 <HAL_RCC_ClockConfig+0x1f4>)
 800458a:	5ccb      	ldrb	r3, [r1, r3]
 800458c:	f003 031f 	and.w	r3, r3, #31
 8004590:	fa22 f303 	lsr.w	r3, r2, r3
 8004594:	4a09      	ldr	r2, [pc, #36]	@ (80045bc <HAL_RCC_ClockConfig+0x1f8>)
 8004596:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004598:	4b09      	ldr	r3, [pc, #36]	@ (80045c0 <HAL_RCC_ClockConfig+0x1fc>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe f985 	bl	80028ac <HAL_InitTick>
 80045a2:	4603      	mov	r3, r0
 80045a4:	72fb      	strb	r3, [r7, #11]

  return status;
 80045a6:	7afb      	ldrb	r3, [r7, #11]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3710      	adds	r7, #16
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	40022000 	.word	0x40022000
 80045b4:	40021000 	.word	0x40021000
 80045b8:	0800a91c 	.word	0x0800a91c
 80045bc:	20000000 	.word	0x20000000
 80045c0:	20000004 	.word	0x20000004

080045c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b089      	sub	sp, #36	@ 0x24
 80045c8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
 80045ce:	2300      	movs	r3, #0
 80045d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80045d2:	4b3e      	ldr	r3, [pc, #248]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x108>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 030c 	and.w	r3, r3, #12
 80045da:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80045dc:	4b3b      	ldr	r3, [pc, #236]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x108>)
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f003 0303 	and.w	r3, r3, #3
 80045e4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d005      	beq.n	80045f8 <HAL_RCC_GetSysClockFreq+0x34>
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	2b0c      	cmp	r3, #12
 80045f0:	d121      	bne.n	8004636 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2b01      	cmp	r3, #1
 80045f6:	d11e      	bne.n	8004636 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80045f8:	4b34      	ldr	r3, [pc, #208]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x108>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	f003 0308 	and.w	r3, r3, #8
 8004600:	2b00      	cmp	r3, #0
 8004602:	d107      	bne.n	8004614 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004604:	4b31      	ldr	r3, [pc, #196]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004606:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800460a:	0a1b      	lsrs	r3, r3, #8
 800460c:	f003 030f 	and.w	r3, r3, #15
 8004610:	61fb      	str	r3, [r7, #28]
 8004612:	e005      	b.n	8004620 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8004614:	4b2d      	ldr	r3, [pc, #180]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8004620:	4a2b      	ldr	r2, [pc, #172]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8004622:	69fb      	ldr	r3, [r7, #28]
 8004624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004628:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d10d      	bne.n	800464c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004634:	e00a      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	2b04      	cmp	r3, #4
 800463a:	d102      	bne.n	8004642 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800463c:	4b25      	ldr	r3, [pc, #148]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800463e:	61bb      	str	r3, [r7, #24]
 8004640:	e004      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b08      	cmp	r3, #8
 8004646:	d101      	bne.n	800464c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004648:	4b23      	ldr	r3, [pc, #140]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x114>)
 800464a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800464c:	693b      	ldr	r3, [r7, #16]
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d134      	bne.n	80046bc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004652:	4b1e      	ldr	r3, [pc, #120]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x108>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b02      	cmp	r3, #2
 8004660:	d003      	beq.n	800466a <HAL_RCC_GetSysClockFreq+0xa6>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	2b03      	cmp	r3, #3
 8004666:	d003      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0xac>
 8004668:	e005      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800466a:	4b1a      	ldr	r3, [pc, #104]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0x110>)
 800466c:	617b      	str	r3, [r7, #20]
      break;
 800466e:	e005      	b.n	800467c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004670:	4b19      	ldr	r3, [pc, #100]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0x114>)
 8004672:	617b      	str	r3, [r7, #20]
      break;
 8004674:	e002      	b.n	800467c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	617b      	str	r3, [r7, #20]
      break;
 800467a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800467c:	4b13      	ldr	r3, [pc, #76]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x108>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 0307 	and.w	r3, r3, #7
 8004686:	3301      	adds	r3, #1
 8004688:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800468a:	4b10      	ldr	r3, [pc, #64]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x108>)
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	0a1b      	lsrs	r3, r3, #8
 8004690:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	fb03 f202 	mul.w	r2, r3, r2
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046a2:	4b0a      	ldr	r3, [pc, #40]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x108>)
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	0e5b      	lsrs	r3, r3, #25
 80046a8:	f003 0303 	and.w	r3, r3, #3
 80046ac:	3301      	adds	r3, #1
 80046ae:	005b      	lsls	r3, r3, #1
 80046b0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80046b2:	697a      	ldr	r2, [r7, #20]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80046bc:	69bb      	ldr	r3, [r7, #24]
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3724      	adds	r7, #36	@ 0x24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40021000 	.word	0x40021000
 80046d0:	0800a934 	.word	0x0800a934
 80046d4:	00f42400 	.word	0x00f42400
 80046d8:	007a1200 	.word	0x007a1200

080046dc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046dc:	b480      	push	{r7}
 80046de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e0:	4b03      	ldr	r3, [pc, #12]	@ (80046f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80046e2:	681b      	ldr	r3, [r3, #0]
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	46bd      	mov	sp, r7
 80046e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ec:	4770      	bx	lr
 80046ee:	bf00      	nop
 80046f0:	20000000 	.word	0x20000000

080046f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046f8:	f7ff fff0 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 80046fc:	4602      	mov	r2, r0
 80046fe:	4b06      	ldr	r3, [pc, #24]	@ (8004718 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	0a1b      	lsrs	r3, r3, #8
 8004704:	f003 0307 	and.w	r3, r3, #7
 8004708:	4904      	ldr	r1, [pc, #16]	@ (800471c <HAL_RCC_GetPCLK1Freq+0x28>)
 800470a:	5ccb      	ldrb	r3, [r1, r3]
 800470c:	f003 031f 	and.w	r3, r3, #31
 8004710:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004714:	4618      	mov	r0, r3
 8004716:	bd80      	pop	{r7, pc}
 8004718:	40021000 	.word	0x40021000
 800471c:	0800a92c 	.word	0x0800a92c

08004720 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004724:	f7ff ffda 	bl	80046dc <HAL_RCC_GetHCLKFreq>
 8004728:	4602      	mov	r2, r0
 800472a:	4b06      	ldr	r3, [pc, #24]	@ (8004744 <HAL_RCC_GetPCLK2Freq+0x24>)
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	0adb      	lsrs	r3, r3, #11
 8004730:	f003 0307 	and.w	r3, r3, #7
 8004734:	4904      	ldr	r1, [pc, #16]	@ (8004748 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004736:	5ccb      	ldrb	r3, [r1, r3]
 8004738:	f003 031f 	and.w	r3, r3, #31
 800473c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004740:	4618      	mov	r0, r3
 8004742:	bd80      	pop	{r7, pc}
 8004744:	40021000 	.word	0x40021000
 8004748:	0800a92c 	.word	0x0800a92c

0800474c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b086      	sub	sp, #24
 8004750:	af00      	add	r7, sp, #0
 8004752:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8004754:	2300      	movs	r3, #0
 8004756:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8004758:	4b2a      	ldr	r3, [pc, #168]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800475a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800475c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8004764:	f7ff f9ee 	bl	8003b44 <HAL_PWREx_GetVoltageRange>
 8004768:	6178      	str	r0, [r7, #20]
 800476a:	e014      	b.n	8004796 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800476c:	4b25      	ldr	r3, [pc, #148]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800476e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004770:	4a24      	ldr	r2, [pc, #144]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004776:	6593      	str	r3, [r2, #88]	@ 0x58
 8004778:	4b22      	ldr	r3, [pc, #136]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800477a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800477c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004780:	60fb      	str	r3, [r7, #12]
 8004782:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004784:	f7ff f9de 	bl	8003b44 <HAL_PWREx_GetVoltageRange>
 8004788:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800478a:	4b1e      	ldr	r3, [pc, #120]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800478c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800478e:	4a1d      	ldr	r2, [pc, #116]	@ (8004804 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004790:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004794:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800479c:	d10b      	bne.n	80047b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2b80      	cmp	r3, #128	@ 0x80
 80047a2:	d919      	bls.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2ba0      	cmp	r3, #160	@ 0xa0
 80047a8:	d902      	bls.n	80047b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047aa:	2302      	movs	r3, #2
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e013      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047b0:	2301      	movs	r3, #1
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	e010      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2b80      	cmp	r3, #128	@ 0x80
 80047ba:	d902      	bls.n	80047c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80047bc:	2303      	movs	r3, #3
 80047be:	613b      	str	r3, [r7, #16]
 80047c0:	e00a      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2b80      	cmp	r3, #128	@ 0x80
 80047c6:	d102      	bne.n	80047ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80047c8:	2302      	movs	r3, #2
 80047ca:	613b      	str	r3, [r7, #16]
 80047cc:	e004      	b.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2b70      	cmp	r3, #112	@ 0x70
 80047d2:	d101      	bne.n	80047d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80047d4:	2301      	movs	r3, #1
 80047d6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80047d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004808 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f023 0207 	bic.w	r2, r3, #7
 80047e0:	4909      	ldr	r1, [pc, #36]	@ (8004808 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80047e8:	4b07      	ldr	r3, [pc, #28]	@ (8004808 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 0307 	and.w	r3, r3, #7
 80047f0:	693a      	ldr	r2, [r7, #16]
 80047f2:	429a      	cmp	r2, r3
 80047f4:	d001      	beq.n	80047fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e000      	b.n	80047fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3718      	adds	r7, #24
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}
 8004804:	40021000 	.word	0x40021000
 8004808:	40022000 	.word	0x40022000

0800480c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004814:	2300      	movs	r3, #0
 8004816:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004818:	2300      	movs	r3, #0
 800481a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004824:	2b00      	cmp	r3, #0
 8004826:	d041      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800482c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004830:	d02a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8004832:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004836:	d824      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004838:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800483c:	d008      	beq.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800483e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004842:	d81e      	bhi.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8004844:	2b00      	cmp	r3, #0
 8004846:	d00a      	beq.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8004848:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800484c:	d010      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800484e:	e018      	b.n	8004882 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004850:	4b86      	ldr	r3, [pc, #536]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004852:	68db      	ldr	r3, [r3, #12]
 8004854:	4a85      	ldr	r2, [pc, #532]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004856:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800485a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800485c:	e015      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	3304      	adds	r3, #4
 8004862:	2100      	movs	r1, #0
 8004864:	4618      	mov	r0, r3
 8004866:	f000 fabb 	bl	8004de0 <RCCEx_PLLSAI1_Config>
 800486a:	4603      	mov	r3, r0
 800486c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800486e:	e00c      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	3320      	adds	r3, #32
 8004874:	2100      	movs	r1, #0
 8004876:	4618      	mov	r0, r3
 8004878:	f000 fba6 	bl	8004fc8 <RCCEx_PLLSAI2_Config>
 800487c:	4603      	mov	r3, r0
 800487e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004880:	e003      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004882:	2301      	movs	r3, #1
 8004884:	74fb      	strb	r3, [r7, #19]
      break;
 8004886:	e000      	b.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004888:	bf00      	nop
    }

    if(ret == HAL_OK)
 800488a:	7cfb      	ldrb	r3, [r7, #19]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10b      	bne.n	80048a8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004890:	4b76      	ldr	r3, [pc, #472]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004896:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800489e:	4973      	ldr	r1, [pc, #460]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048a0:	4313      	orrs	r3, r2
 80048a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80048a6:	e001      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a8:	7cfb      	ldrb	r3, [r7, #19]
 80048aa:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d041      	beq.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80048bc:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048c0:	d02a      	beq.n	8004918 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80048c2:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80048c6:	d824      	bhi.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048c8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048cc:	d008      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048ce:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80048d2:	d81e      	bhi.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80048d8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80048dc:	d010      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80048de:	e018      	b.n	8004912 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80048e0:	4b62      	ldr	r3, [pc, #392]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e2:	68db      	ldr	r3, [r3, #12]
 80048e4:	4a61      	ldr	r2, [pc, #388]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80048e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048ea:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048ec:	e015      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	3304      	adds	r3, #4
 80048f2:	2100      	movs	r1, #0
 80048f4:	4618      	mov	r0, r3
 80048f6:	f000 fa73 	bl	8004de0 <RCCEx_PLLSAI1_Config>
 80048fa:	4603      	mov	r3, r0
 80048fc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80048fe:	e00c      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	3320      	adds	r3, #32
 8004904:	2100      	movs	r1, #0
 8004906:	4618      	mov	r0, r3
 8004908:	f000 fb5e 	bl	8004fc8 <RCCEx_PLLSAI2_Config>
 800490c:	4603      	mov	r3, r0
 800490e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8004910:	e003      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	74fb      	strb	r3, [r7, #19]
      break;
 8004916:	e000      	b.n	800491a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8004918:	bf00      	nop
    }

    if(ret == HAL_OK)
 800491a:	7cfb      	ldrb	r3, [r7, #19]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d10b      	bne.n	8004938 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004920:	4b52      	ldr	r3, [pc, #328]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004922:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004926:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800492e:	494f      	ldr	r1, [pc, #316]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004930:	4313      	orrs	r3, r2
 8004932:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004936:	e001      	b.n	800493c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004938:	7cfb      	ldrb	r3, [r7, #19]
 800493a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004944:	2b00      	cmp	r3, #0
 8004946:	f000 80a0 	beq.w	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800494a:	2300      	movs	r3, #0
 800494c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800494e:	4b47      	ldr	r3, [pc, #284]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004950:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004952:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d101      	bne.n	800495e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800495e:	2300      	movs	r3, #0
 8004960:	2b00      	cmp	r3, #0
 8004962:	d00d      	beq.n	8004980 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004964:	4b41      	ldr	r3, [pc, #260]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004968:	4a40      	ldr	r2, [pc, #256]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800496a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800496e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004970:	4b3e      	ldr	r3, [pc, #248]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004978:	60bb      	str	r3, [r7, #8]
 800497a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800497c:	2301      	movs	r3, #1
 800497e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004980:	4b3b      	ldr	r3, [pc, #236]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a3a      	ldr	r2, [pc, #232]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800498a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800498c:	f7fd ffde 	bl	800294c <HAL_GetTick>
 8004990:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004992:	e009      	b.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004994:	f7fd ffda 	bl	800294c <HAL_GetTick>
 8004998:	4602      	mov	r2, r0
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	1ad3      	subs	r3, r2, r3
 800499e:	2b02      	cmp	r3, #2
 80049a0:	d902      	bls.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80049a2:	2303      	movs	r3, #3
 80049a4:	74fb      	strb	r3, [r7, #19]
        break;
 80049a6:	e005      	b.n	80049b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80049a8:	4b31      	ldr	r3, [pc, #196]	@ (8004a70 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d0ef      	beq.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80049b4:	7cfb      	ldrb	r3, [r7, #19]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d15c      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80049ba:	4b2c      	ldr	r3, [pc, #176]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049c0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049c4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d01f      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	429a      	cmp	r2, r3
 80049d6:	d019      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80049d8:	4b24      	ldr	r3, [pc, #144]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049e2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80049e4:	4b21      	ldr	r3, [pc, #132]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049ea:	4a20      	ldr	r2, [pc, #128]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80049f4:	4b1d      	ldr	r3, [pc, #116]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80049fa:	4a1c      	ldr	r2, [pc, #112]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80049fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004a04:	4a19      	ldr	r2, [pc, #100]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a16:	f7fd ff99 	bl	800294c <HAL_GetTick>
 8004a1a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a1c:	e00b      	b.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a1e:	f7fd ff95 	bl	800294c <HAL_GetTick>
 8004a22:	4602      	mov	r2, r0
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d902      	bls.n	8004a36 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	74fb      	strb	r3, [r7, #19]
            break;
 8004a34:	e006      	b.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004a36:	4b0d      	ldr	r3, [pc, #52]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a3c:	f003 0302 	and.w	r3, r3, #2
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d0ec      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8004a44:	7cfb      	ldrb	r3, [r7, #19]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d10c      	bne.n	8004a64 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a4a:	4b08      	ldr	r3, [pc, #32]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004a50:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004a5a:	4904      	ldr	r1, [pc, #16]	@ (8004a6c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004a62:	e009      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004a64:	7cfb      	ldrb	r3, [r7, #19]
 8004a66:	74bb      	strb	r3, [r7, #18]
 8004a68:	e006      	b.n	8004a78 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8004a6a:	bf00      	nop
 8004a6c:	40021000 	.word	0x40021000
 8004a70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a74:	7cfb      	ldrb	r3, [r7, #19]
 8004a76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a78:	7c7b      	ldrb	r3, [r7, #17]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d105      	bne.n	8004a8a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a7e:	4b9e      	ldr	r3, [pc, #632]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004a82:	4a9d      	ldr	r2, [pc, #628]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a84:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a88:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f003 0301 	and.w	r3, r3, #1
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00a      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004a96:	4b98      	ldr	r3, [pc, #608]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a9c:	f023 0203 	bic.w	r2, r3, #3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aa4:	4994      	ldr	r1, [pc, #592]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 0302 	and.w	r3, r3, #2
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d00a      	beq.n	8004ace <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004ab8:	4b8f      	ldr	r3, [pc, #572]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004abe:	f023 020c 	bic.w	r2, r3, #12
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ac6:	498c      	ldr	r1, [pc, #560]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 0304 	and.w	r3, r3, #4
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d00a      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004ada:	4b87      	ldr	r3, [pc, #540]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ae0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae8:	4983      	ldr	r1, [pc, #524]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d00a      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004afc:	4b7e      	ldr	r3, [pc, #504]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b02:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0a:	497b      	ldr	r1, [pc, #492]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0310 	and.w	r3, r3, #16
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00a      	beq.n	8004b34 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004b1e:	4b76      	ldr	r3, [pc, #472]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b24:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004b2c:	4972      	ldr	r1, [pc, #456]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b2e:	4313      	orrs	r3, r2
 8004b30:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0320 	and.w	r3, r3, #32
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d00a      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004b40:	4b6d      	ldr	r3, [pc, #436]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b46:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b4e:	496a      	ldr	r1, [pc, #424]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d00a      	beq.n	8004b78 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b62:	4b65      	ldr	r3, [pc, #404]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b68:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b70:	4961      	ldr	r1, [pc, #388]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b72:	4313      	orrs	r3, r2
 8004b74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00a      	beq.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004b84:	4b5c      	ldr	r3, [pc, #368]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b8a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b92:	4959      	ldr	r1, [pc, #356]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ba6:	4b54      	ldr	r3, [pc, #336]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bac:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bb4:	4950      	ldr	r1, [pc, #320]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bb6:	4313      	orrs	r3, r2
 8004bb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00a      	beq.n	8004bde <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004bc8:	4b4b      	ldr	r3, [pc, #300]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bce:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bd6:	4948      	ldr	r1, [pc, #288]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004bea:	4b43      	ldr	r3, [pc, #268]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bf0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf8:	493f      	ldr	r1, [pc, #252]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004bfa:	4313      	orrs	r3, r2
 8004bfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d028      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004c0c:	4b3a      	ldr	r3, [pc, #232]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c12:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c1a:	4937      	ldr	r1, [pc, #220]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c1c:	4313      	orrs	r3, r2
 8004c1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c26:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c2a:	d106      	bne.n	8004c3a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c2c:	4b32      	ldr	r3, [pc, #200]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c2e:	68db      	ldr	r3, [r3, #12]
 8004c30:	4a31      	ldr	r2, [pc, #196]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c32:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c36:	60d3      	str	r3, [r2, #12]
 8004c38:	e011      	b.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004c3e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004c42:	d10c      	bne.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	3304      	adds	r3, #4
 8004c48:	2101      	movs	r1, #1
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f000 f8c8 	bl	8004de0 <RCCEx_PLLSAI1_Config>
 8004c50:	4603      	mov	r3, r0
 8004c52:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8004c54:	7cfb      	ldrb	r3, [r7, #19]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8004c5a:	7cfb      	ldrb	r3, [r7, #19]
 8004c5c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d028      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004c6a:	4b23      	ldr	r3, [pc, #140]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c70:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c78:	491f      	ldr	r1, [pc, #124]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c84:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004c88:	d106      	bne.n	8004c98 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c8c:	68db      	ldr	r3, [r3, #12]
 8004c8e:	4a1a      	ldr	r2, [pc, #104]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004c90:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004c94:	60d3      	str	r3, [r2, #12]
 8004c96:	e011      	b.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004ca0:	d10c      	bne.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	3304      	adds	r3, #4
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f000 f899 	bl	8004de0 <RCCEx_PLLSAI1_Config>
 8004cae:	4603      	mov	r3, r0
 8004cb0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004cb2:	7cfb      	ldrb	r3, [r7, #19]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004cb8:	7cfb      	ldrb	r3, [r7, #19]
 8004cba:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d02b      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004cc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004cce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cd6:	4908      	ldr	r1, [pc, #32]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ce2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004ce6:	d109      	bne.n	8004cfc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ce8:	4b03      	ldr	r3, [pc, #12]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cea:	68db      	ldr	r3, [r3, #12]
 8004cec:	4a02      	ldr	r2, [pc, #8]	@ (8004cf8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004cee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004cf2:	60d3      	str	r3, [r2, #12]
 8004cf4:	e014      	b.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004cf6:	bf00      	nop
 8004cf8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d00:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	3304      	adds	r3, #4
 8004d0a:	2101      	movs	r1, #1
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	f000 f867 	bl	8004de0 <RCCEx_PLLSAI1_Config>
 8004d12:	4603      	mov	r3, r0
 8004d14:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d16:	7cfb      	ldrb	r3, [r7, #19]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8004d1c:	7cfb      	ldrb	r3, [r7, #19]
 8004d1e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d02f      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d2c:	4b2b      	ldr	r3, [pc, #172]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d32:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d3a:	4928      	ldr	r1, [pc, #160]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d46:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004d4a:	d10d      	bne.n	8004d68 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	3304      	adds	r3, #4
 8004d50:	2102      	movs	r1, #2
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 f844 	bl	8004de0 <RCCEx_PLLSAI1_Config>
 8004d58:	4603      	mov	r3, r0
 8004d5a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d5c:	7cfb      	ldrb	r3, [r7, #19]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d014      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d62:	7cfb      	ldrb	r3, [r7, #19]
 8004d64:	74bb      	strb	r3, [r7, #18]
 8004d66:	e011      	b.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004d70:	d10c      	bne.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	3320      	adds	r3, #32
 8004d76:	2102      	movs	r1, #2
 8004d78:	4618      	mov	r0, r3
 8004d7a:	f000 f925 	bl	8004fc8 <RCCEx_PLLSAI2_Config>
 8004d7e:	4603      	mov	r3, r0
 8004d80:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004d82:	7cfb      	ldrb	r3, [r7, #19]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004d88:	7cfb      	ldrb	r3, [r7, #19]
 8004d8a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d00a      	beq.n	8004dae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004d98:	4b10      	ldr	r3, [pc, #64]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d9e:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004da6:	490d      	ldr	r1, [pc, #52]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004da8:	4313      	orrs	r3, r2
 8004daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d00b      	beq.n	8004dd2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004dba:	4b08      	ldr	r3, [pc, #32]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dc0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dca:	4904      	ldr	r1, [pc, #16]	@ (8004ddc <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004dcc:	4313      	orrs	r3, r2
 8004dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004dd2:	7cbb      	ldrb	r3, [r7, #18]
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3718      	adds	r7, #24
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	40021000 	.word	0x40021000

08004de0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b084      	sub	sp, #16
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
 8004de8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004dea:	2300      	movs	r3, #0
 8004dec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004dee:	4b75      	ldr	r3, [pc, #468]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	f003 0303 	and.w	r3, r3, #3
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d018      	beq.n	8004e2c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004dfa:	4b72      	ldr	r3, [pc, #456]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004dfc:	68db      	ldr	r3, [r3, #12]
 8004dfe:	f003 0203 	and.w	r2, r3, #3
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d10d      	bne.n	8004e26 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
       ||
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d009      	beq.n	8004e26 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8004e12:	4b6c      	ldr	r3, [pc, #432]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	091b      	lsrs	r3, r3, #4
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	1c5a      	adds	r2, r3, #1
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	685b      	ldr	r3, [r3, #4]
       ||
 8004e22:	429a      	cmp	r2, r3
 8004e24:	d047      	beq.n	8004eb6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004e26:	2301      	movs	r3, #1
 8004e28:	73fb      	strb	r3, [r7, #15]
 8004e2a:	e044      	b.n	8004eb6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d018      	beq.n	8004e66 <RCCEx_PLLSAI1_Config+0x86>
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	d825      	bhi.n	8004e84 <RCCEx_PLLSAI1_Config+0xa4>
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	d002      	beq.n	8004e42 <RCCEx_PLLSAI1_Config+0x62>
 8004e3c:	2b02      	cmp	r3, #2
 8004e3e:	d009      	beq.n	8004e54 <RCCEx_PLLSAI1_Config+0x74>
 8004e40:	e020      	b.n	8004e84 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004e42:	4b60      	ldr	r3, [pc, #384]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f003 0302 	and.w	r3, r3, #2
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d11d      	bne.n	8004e8a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e52:	e01a      	b.n	8004e8a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004e54:	4b5b      	ldr	r3, [pc, #364]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d116      	bne.n	8004e8e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004e64:	e013      	b.n	8004e8e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004e66:	4b57      	ldr	r3, [pc, #348]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10f      	bne.n	8004e92 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004e72:	4b54      	ldr	r3, [pc, #336]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004e82:	e006      	b.n	8004e92 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	73fb      	strb	r3, [r7, #15]
      break;
 8004e88:	e004      	b.n	8004e94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e8a:	bf00      	nop
 8004e8c:	e002      	b.n	8004e94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e8e:	bf00      	nop
 8004e90:	e000      	b.n	8004e94 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004e92:	bf00      	nop
    }

    if(status == HAL_OK)
 8004e94:	7bfb      	ldrb	r3, [r7, #15]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d10d      	bne.n	8004eb6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	6819      	ldr	r1, [r3, #0]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	3b01      	subs	r3, #1
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	430b      	orrs	r3, r1
 8004eb0:	4944      	ldr	r1, [pc, #272]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004eb6:	7bfb      	ldrb	r3, [r7, #15]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d17d      	bne.n	8004fb8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004ebc:	4b41      	ldr	r3, [pc, #260]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a40      	ldr	r2, [pc, #256]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ec2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ec8:	f7fd fd40 	bl	800294c <HAL_GetTick>
 8004ecc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ece:	e009      	b.n	8004ee4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004ed0:	f7fd fd3c 	bl	800294c <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d902      	bls.n	8004ee4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	73fb      	strb	r3, [r7, #15]
        break;
 8004ee2:	e005      	b.n	8004ef0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004ee4:	4b37      	ldr	r3, [pc, #220]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1ef      	bne.n	8004ed0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004ef0:	7bfb      	ldrb	r3, [r7, #15]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d160      	bne.n	8004fb8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d111      	bne.n	8004f20 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004efc:	4b31      	ldr	r3, [pc, #196]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004f04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004f08:	687a      	ldr	r2, [r7, #4]
 8004f0a:	6892      	ldr	r2, [r2, #8]
 8004f0c:	0211      	lsls	r1, r2, #8
 8004f0e:	687a      	ldr	r2, [r7, #4]
 8004f10:	68d2      	ldr	r2, [r2, #12]
 8004f12:	0912      	lsrs	r2, r2, #4
 8004f14:	0452      	lsls	r2, r2, #17
 8004f16:	430a      	orrs	r2, r1
 8004f18:	492a      	ldr	r1, [pc, #168]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f1a:	4313      	orrs	r3, r2
 8004f1c:	610b      	str	r3, [r1, #16]
 8004f1e:	e027      	b.n	8004f70 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d112      	bne.n	8004f4c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f26:	4b27      	ldr	r3, [pc, #156]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8004f2e:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f32:	687a      	ldr	r2, [r7, #4]
 8004f34:	6892      	ldr	r2, [r2, #8]
 8004f36:	0211      	lsls	r1, r2, #8
 8004f38:	687a      	ldr	r2, [r7, #4]
 8004f3a:	6912      	ldr	r2, [r2, #16]
 8004f3c:	0852      	lsrs	r2, r2, #1
 8004f3e:	3a01      	subs	r2, #1
 8004f40:	0552      	lsls	r2, r2, #21
 8004f42:	430a      	orrs	r2, r1
 8004f44:	491f      	ldr	r1, [pc, #124]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f46:	4313      	orrs	r3, r2
 8004f48:	610b      	str	r3, [r1, #16]
 8004f4a:	e011      	b.n	8004f70 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004f4c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004f54:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004f58:	687a      	ldr	r2, [r7, #4]
 8004f5a:	6892      	ldr	r2, [r2, #8]
 8004f5c:	0211      	lsls	r1, r2, #8
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	6952      	ldr	r2, [r2, #20]
 8004f62:	0852      	lsrs	r2, r2, #1
 8004f64:	3a01      	subs	r2, #1
 8004f66:	0652      	lsls	r2, r2, #25
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	4916      	ldr	r1, [pc, #88]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004f70:	4b14      	ldr	r3, [pc, #80]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a13      	ldr	r2, [pc, #76]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004f7a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f7c:	f7fd fce6 	bl	800294c <HAL_GetTick>
 8004f80:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f82:	e009      	b.n	8004f98 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004f84:	f7fd fce2 	bl	800294c <HAL_GetTick>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	1ad3      	subs	r3, r2, r3
 8004f8e:	2b02      	cmp	r3, #2
 8004f90:	d902      	bls.n	8004f98 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004f92:	2303      	movs	r3, #3
 8004f94:	73fb      	strb	r3, [r7, #15]
          break;
 8004f96:	e005      	b.n	8004fa4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004f98:	4b0a      	ldr	r3, [pc, #40]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d0ef      	beq.n	8004f84 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004fa4:	7bfb      	ldrb	r3, [r7, #15]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d106      	bne.n	8004fb8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004faa:	4b06      	ldr	r3, [pc, #24]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fac:	691a      	ldr	r2, [r3, #16]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	699b      	ldr	r3, [r3, #24]
 8004fb2:	4904      	ldr	r1, [pc, #16]	@ (8004fc4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40021000 	.word	0x40021000

08004fc8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	f003 0303 	and.w	r3, r3, #3
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d018      	beq.n	8005014 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004fe2:	4b67      	ldr	r3, [pc, #412]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004fe4:	68db      	ldr	r3, [r3, #12]
 8004fe6:	f003 0203 	and.w	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d10d      	bne.n	800500e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
       ||
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d009      	beq.n	800500e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ffa:	4b61      	ldr	r3, [pc, #388]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	091b      	lsrs	r3, r3, #4
 8005000:	f003 0307 	and.w	r3, r3, #7
 8005004:	1c5a      	adds	r2, r3, #1
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	685b      	ldr	r3, [r3, #4]
       ||
 800500a:	429a      	cmp	r2, r3
 800500c:	d047      	beq.n	800509e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	73fb      	strb	r3, [r7, #15]
 8005012:	e044      	b.n	800509e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	2b03      	cmp	r3, #3
 800501a:	d018      	beq.n	800504e <RCCEx_PLLSAI2_Config+0x86>
 800501c:	2b03      	cmp	r3, #3
 800501e:	d825      	bhi.n	800506c <RCCEx_PLLSAI2_Config+0xa4>
 8005020:	2b01      	cmp	r3, #1
 8005022:	d002      	beq.n	800502a <RCCEx_PLLSAI2_Config+0x62>
 8005024:	2b02      	cmp	r3, #2
 8005026:	d009      	beq.n	800503c <RCCEx_PLLSAI2_Config+0x74>
 8005028:	e020      	b.n	800506c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800502a:	4b55      	ldr	r3, [pc, #340]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f003 0302 	and.w	r3, r3, #2
 8005032:	2b00      	cmp	r3, #0
 8005034:	d11d      	bne.n	8005072 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8005036:	2301      	movs	r3, #1
 8005038:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800503a:	e01a      	b.n	8005072 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800503c:	4b50      	ldr	r3, [pc, #320]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005044:	2b00      	cmp	r3, #0
 8005046:	d116      	bne.n	8005076 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800504c:	e013      	b.n	8005076 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800504e:	4b4c      	ldr	r3, [pc, #304]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10f      	bne.n	800507a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800505a:	4b49      	ldr	r3, [pc, #292]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8005066:	2301      	movs	r3, #1
 8005068:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800506a:	e006      	b.n	800507a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800506c:	2301      	movs	r3, #1
 800506e:	73fb      	strb	r3, [r7, #15]
      break;
 8005070:	e004      	b.n	800507c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005072:	bf00      	nop
 8005074:	e002      	b.n	800507c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8005076:	bf00      	nop
 8005078:	e000      	b.n	800507c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800507a:	bf00      	nop
    }

    if(status == HAL_OK)
 800507c:	7bfb      	ldrb	r3, [r7, #15]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10d      	bne.n	800509e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005082:	4b3f      	ldr	r3, [pc, #252]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005084:	68db      	ldr	r3, [r3, #12]
 8005086:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6819      	ldr	r1, [r3, #0]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	3b01      	subs	r3, #1
 8005094:	011b      	lsls	r3, r3, #4
 8005096:	430b      	orrs	r3, r1
 8005098:	4939      	ldr	r1, [pc, #228]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 800509a:	4313      	orrs	r3, r2
 800509c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800509e:	7bfb      	ldrb	r3, [r7, #15]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d167      	bne.n	8005174 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80050a4:	4b36      	ldr	r3, [pc, #216]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4a35      	ldr	r2, [pc, #212]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80050ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050b0:	f7fd fc4c 	bl	800294c <HAL_GetTick>
 80050b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050b6:	e009      	b.n	80050cc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80050b8:	f7fd fc48 	bl	800294c <HAL_GetTick>
 80050bc:	4602      	mov	r2, r0
 80050be:	68bb      	ldr	r3, [r7, #8]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	2b02      	cmp	r3, #2
 80050c4:	d902      	bls.n	80050cc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	73fb      	strb	r3, [r7, #15]
        break;
 80050ca:	e005      	b.n	80050d8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80050cc:	4b2c      	ldr	r3, [pc, #176]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1ef      	bne.n	80050b8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80050d8:	7bfb      	ldrb	r3, [r7, #15]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d14a      	bne.n	8005174 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d111      	bne.n	8005108 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80050e4:	4b26      	ldr	r3, [pc, #152]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80050ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80050f0:	687a      	ldr	r2, [r7, #4]
 80050f2:	6892      	ldr	r2, [r2, #8]
 80050f4:	0211      	lsls	r1, r2, #8
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	68d2      	ldr	r2, [r2, #12]
 80050fa:	0912      	lsrs	r2, r2, #4
 80050fc:	0452      	lsls	r2, r2, #17
 80050fe:	430a      	orrs	r2, r1
 8005100:	491f      	ldr	r1, [pc, #124]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005102:	4313      	orrs	r3, r2
 8005104:	614b      	str	r3, [r1, #20]
 8005106:	e011      	b.n	800512c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005108:	4b1d      	ldr	r3, [pc, #116]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 800510a:	695b      	ldr	r3, [r3, #20]
 800510c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8005110:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8005114:	687a      	ldr	r2, [r7, #4]
 8005116:	6892      	ldr	r2, [r2, #8]
 8005118:	0211      	lsls	r1, r2, #8
 800511a:	687a      	ldr	r2, [r7, #4]
 800511c:	6912      	ldr	r2, [r2, #16]
 800511e:	0852      	lsrs	r2, r2, #1
 8005120:	3a01      	subs	r2, #1
 8005122:	0652      	lsls	r2, r2, #25
 8005124:	430a      	orrs	r2, r1
 8005126:	4916      	ldr	r1, [pc, #88]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005128:	4313      	orrs	r3, r2
 800512a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800512c:	4b14      	ldr	r3, [pc, #80]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a13      	ldr	r2, [pc, #76]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005136:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005138:	f7fd fc08 	bl	800294c <HAL_GetTick>
 800513c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800513e:	e009      	b.n	8005154 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8005140:	f7fd fc04 	bl	800294c <HAL_GetTick>
 8005144:	4602      	mov	r2, r0
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	1ad3      	subs	r3, r2, r3
 800514a:	2b02      	cmp	r3, #2
 800514c:	d902      	bls.n	8005154 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800514e:	2303      	movs	r3, #3
 8005150:	73fb      	strb	r3, [r7, #15]
          break;
 8005152:	e005      	b.n	8005160 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8005154:	4b0a      	ldr	r3, [pc, #40]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0ef      	beq.n	8005140 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d106      	bne.n	8005174 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8005166:	4b06      	ldr	r3, [pc, #24]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005168:	695a      	ldr	r2, [r3, #20]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	695b      	ldr	r3, [r3, #20]
 800516e:	4904      	ldr	r1, [pc, #16]	@ (8005180 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005170:	4313      	orrs	r3, r2
 8005172:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8005174:	7bfb      	ldrb	r3, [r7, #15]
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	40021000 	.word	0x40021000

08005184 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d101      	bne.n	8005196 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e040      	b.n	8005218 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fd f9d2 	bl	8002550 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2224      	movs	r2, #36	@ 0x24
 80051b0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f022 0201 	bic.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d002      	beq.n	80051d0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 fb6a 	bl	80058a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f000 f8af 	bl	8005334 <UART_SetConfig>
 80051d6:	4603      	mov	r3, r0
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d101      	bne.n	80051e0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80051dc:	2301      	movs	r3, #1
 80051de:	e01b      	b.n	8005218 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685a      	ldr	r2, [r3, #4]
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80051ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	689a      	ldr	r2, [r3, #8]
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80051fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0201 	orr.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 fbe9 	bl	80059e8 <UART_CheckIdleState>
 8005216:	4603      	mov	r3, r0
}
 8005218:	4618      	mov	r0, r3
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}

08005220 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005220:	b580      	push	{r7, lr}
 8005222:	b08a      	sub	sp, #40	@ 0x28
 8005224:	af02      	add	r7, sp, #8
 8005226:	60f8      	str	r0, [r7, #12]
 8005228:	60b9      	str	r1, [r7, #8]
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	4613      	mov	r3, r2
 800522e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005234:	2b20      	cmp	r3, #32
 8005236:	d177      	bne.n	8005328 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005238:	68bb      	ldr	r3, [r7, #8]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d002      	beq.n	8005244 <HAL_UART_Transmit+0x24>
 800523e:	88fb      	ldrh	r3, [r7, #6]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005244:	2301      	movs	r3, #1
 8005246:	e070      	b.n	800532a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	2200      	movs	r2, #0
 800524c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2221      	movs	r2, #33	@ 0x21
 8005254:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005256:	f7fd fb79 	bl	800294c <HAL_GetTick>
 800525a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	88fa      	ldrh	r2, [r7, #6]
 8005260:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	88fa      	ldrh	r2, [r7, #6]
 8005268:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005274:	d108      	bne.n	8005288 <HAL_UART_Transmit+0x68>
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d104      	bne.n	8005288 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800527e:	2300      	movs	r3, #0
 8005280:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005282:	68bb      	ldr	r3, [r7, #8]
 8005284:	61bb      	str	r3, [r7, #24]
 8005286:	e003      	b.n	8005290 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005288:	68bb      	ldr	r3, [r7, #8]
 800528a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800528c:	2300      	movs	r3, #0
 800528e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005290:	e02f      	b.n	80052f2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	9300      	str	r3, [sp, #0]
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	2200      	movs	r2, #0
 800529a:	2180      	movs	r1, #128	@ 0x80
 800529c:	68f8      	ldr	r0, [r7, #12]
 800529e:	f000 fc4b 	bl	8005b38 <UART_WaitOnFlagUntilTimeout>
 80052a2:	4603      	mov	r3, r0
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d004      	beq.n	80052b2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2220      	movs	r2, #32
 80052ac:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80052ae:	2303      	movs	r3, #3
 80052b0:	e03b      	b.n	800532a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d10b      	bne.n	80052d0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	881a      	ldrh	r2, [r3, #0]
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052c4:	b292      	uxth	r2, r2
 80052c6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80052c8:	69bb      	ldr	r3, [r7, #24]
 80052ca:	3302      	adds	r3, #2
 80052cc:	61bb      	str	r3, [r7, #24]
 80052ce:	e007      	b.n	80052e0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	781a      	ldrb	r2, [r3, #0]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	3301      	adds	r3, #1
 80052de:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052e6:	b29b      	uxth	r3, r3
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d1c9      	bne.n	8005292 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	2200      	movs	r2, #0
 8005306:	2140      	movs	r1, #64	@ 0x40
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 fc15 	bl	8005b38 <UART_WaitOnFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d004      	beq.n	800531e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e005      	b.n	800532a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2220      	movs	r2, #32
 8005322:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005324:	2300      	movs	r3, #0
 8005326:	e000      	b.n	800532a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005328:	2302      	movs	r3, #2
  }
}
 800532a:	4618      	mov	r0, r3
 800532c:	3720      	adds	r7, #32
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
	...

08005334 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005334:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005338:	b08a      	sub	sp, #40	@ 0x28
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	689a      	ldr	r2, [r3, #8]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	691b      	ldr	r3, [r3, #16]
 800534c:	431a      	orrs	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	695b      	ldr	r3, [r3, #20]
 8005352:	431a      	orrs	r2, r3
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	69db      	ldr	r3, [r3, #28]
 8005358:	4313      	orrs	r3, r2
 800535a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4ba4      	ldr	r3, [pc, #656]	@ (80055f4 <UART_SetConfig+0x2c0>)
 8005364:	4013      	ands	r3, r2
 8005366:	68fa      	ldr	r2, [r7, #12]
 8005368:	6812      	ldr	r2, [r2, #0]
 800536a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800536c:	430b      	orrs	r3, r1
 800536e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	685b      	ldr	r3, [r3, #4]
 8005376:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	68da      	ldr	r2, [r3, #12]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	430a      	orrs	r2, r1
 8005384:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a99      	ldr	r2, [pc, #612]	@ (80055f8 <UART_SetConfig+0x2c4>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d004      	beq.n	80053a0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6a1b      	ldr	r3, [r3, #32]
 800539a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539c:	4313      	orrs	r3, r2
 800539e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b0:	430a      	orrs	r2, r1
 80053b2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a90      	ldr	r2, [pc, #576]	@ (80055fc <UART_SetConfig+0x2c8>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d126      	bne.n	800540c <UART_SetConfig+0xd8>
 80053be:	4b90      	ldr	r3, [pc, #576]	@ (8005600 <UART_SetConfig+0x2cc>)
 80053c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80053c4:	f003 0303 	and.w	r3, r3, #3
 80053c8:	2b03      	cmp	r3, #3
 80053ca:	d81b      	bhi.n	8005404 <UART_SetConfig+0xd0>
 80053cc:	a201      	add	r2, pc, #4	@ (adr r2, 80053d4 <UART_SetConfig+0xa0>)
 80053ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053d2:	bf00      	nop
 80053d4:	080053e5 	.word	0x080053e5
 80053d8:	080053f5 	.word	0x080053f5
 80053dc:	080053ed 	.word	0x080053ed
 80053e0:	080053fd 	.word	0x080053fd
 80053e4:	2301      	movs	r3, #1
 80053e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053ea:	e116      	b.n	800561a <UART_SetConfig+0x2e6>
 80053ec:	2302      	movs	r3, #2
 80053ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053f2:	e112      	b.n	800561a <UART_SetConfig+0x2e6>
 80053f4:	2304      	movs	r3, #4
 80053f6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80053fa:	e10e      	b.n	800561a <UART_SetConfig+0x2e6>
 80053fc:	2308      	movs	r3, #8
 80053fe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005402:	e10a      	b.n	800561a <UART_SetConfig+0x2e6>
 8005404:	2310      	movs	r3, #16
 8005406:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800540a:	e106      	b.n	800561a <UART_SetConfig+0x2e6>
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a7c      	ldr	r2, [pc, #496]	@ (8005604 <UART_SetConfig+0x2d0>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d138      	bne.n	8005488 <UART_SetConfig+0x154>
 8005416:	4b7a      	ldr	r3, [pc, #488]	@ (8005600 <UART_SetConfig+0x2cc>)
 8005418:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800541c:	f003 030c 	and.w	r3, r3, #12
 8005420:	2b0c      	cmp	r3, #12
 8005422:	d82d      	bhi.n	8005480 <UART_SetConfig+0x14c>
 8005424:	a201      	add	r2, pc, #4	@ (adr r2, 800542c <UART_SetConfig+0xf8>)
 8005426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800542a:	bf00      	nop
 800542c:	08005461 	.word	0x08005461
 8005430:	08005481 	.word	0x08005481
 8005434:	08005481 	.word	0x08005481
 8005438:	08005481 	.word	0x08005481
 800543c:	08005471 	.word	0x08005471
 8005440:	08005481 	.word	0x08005481
 8005444:	08005481 	.word	0x08005481
 8005448:	08005481 	.word	0x08005481
 800544c:	08005469 	.word	0x08005469
 8005450:	08005481 	.word	0x08005481
 8005454:	08005481 	.word	0x08005481
 8005458:	08005481 	.word	0x08005481
 800545c:	08005479 	.word	0x08005479
 8005460:	2300      	movs	r3, #0
 8005462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005466:	e0d8      	b.n	800561a <UART_SetConfig+0x2e6>
 8005468:	2302      	movs	r3, #2
 800546a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800546e:	e0d4      	b.n	800561a <UART_SetConfig+0x2e6>
 8005470:	2304      	movs	r3, #4
 8005472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005476:	e0d0      	b.n	800561a <UART_SetConfig+0x2e6>
 8005478:	2308      	movs	r3, #8
 800547a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800547e:	e0cc      	b.n	800561a <UART_SetConfig+0x2e6>
 8005480:	2310      	movs	r3, #16
 8005482:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005486:	e0c8      	b.n	800561a <UART_SetConfig+0x2e6>
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a5e      	ldr	r2, [pc, #376]	@ (8005608 <UART_SetConfig+0x2d4>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d125      	bne.n	80054de <UART_SetConfig+0x1aa>
 8005492:	4b5b      	ldr	r3, [pc, #364]	@ (8005600 <UART_SetConfig+0x2cc>)
 8005494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005498:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800549c:	2b30      	cmp	r3, #48	@ 0x30
 800549e:	d016      	beq.n	80054ce <UART_SetConfig+0x19a>
 80054a0:	2b30      	cmp	r3, #48	@ 0x30
 80054a2:	d818      	bhi.n	80054d6 <UART_SetConfig+0x1a2>
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d00a      	beq.n	80054be <UART_SetConfig+0x18a>
 80054a8:	2b20      	cmp	r3, #32
 80054aa:	d814      	bhi.n	80054d6 <UART_SetConfig+0x1a2>
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d002      	beq.n	80054b6 <UART_SetConfig+0x182>
 80054b0:	2b10      	cmp	r3, #16
 80054b2:	d008      	beq.n	80054c6 <UART_SetConfig+0x192>
 80054b4:	e00f      	b.n	80054d6 <UART_SetConfig+0x1a2>
 80054b6:	2300      	movs	r3, #0
 80054b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054bc:	e0ad      	b.n	800561a <UART_SetConfig+0x2e6>
 80054be:	2302      	movs	r3, #2
 80054c0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054c4:	e0a9      	b.n	800561a <UART_SetConfig+0x2e6>
 80054c6:	2304      	movs	r3, #4
 80054c8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054cc:	e0a5      	b.n	800561a <UART_SetConfig+0x2e6>
 80054ce:	2308      	movs	r3, #8
 80054d0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054d4:	e0a1      	b.n	800561a <UART_SetConfig+0x2e6>
 80054d6:	2310      	movs	r3, #16
 80054d8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80054dc:	e09d      	b.n	800561a <UART_SetConfig+0x2e6>
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	4a4a      	ldr	r2, [pc, #296]	@ (800560c <UART_SetConfig+0x2d8>)
 80054e4:	4293      	cmp	r3, r2
 80054e6:	d125      	bne.n	8005534 <UART_SetConfig+0x200>
 80054e8:	4b45      	ldr	r3, [pc, #276]	@ (8005600 <UART_SetConfig+0x2cc>)
 80054ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054ee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80054f2:	2bc0      	cmp	r3, #192	@ 0xc0
 80054f4:	d016      	beq.n	8005524 <UART_SetConfig+0x1f0>
 80054f6:	2bc0      	cmp	r3, #192	@ 0xc0
 80054f8:	d818      	bhi.n	800552c <UART_SetConfig+0x1f8>
 80054fa:	2b80      	cmp	r3, #128	@ 0x80
 80054fc:	d00a      	beq.n	8005514 <UART_SetConfig+0x1e0>
 80054fe:	2b80      	cmp	r3, #128	@ 0x80
 8005500:	d814      	bhi.n	800552c <UART_SetConfig+0x1f8>
 8005502:	2b00      	cmp	r3, #0
 8005504:	d002      	beq.n	800550c <UART_SetConfig+0x1d8>
 8005506:	2b40      	cmp	r3, #64	@ 0x40
 8005508:	d008      	beq.n	800551c <UART_SetConfig+0x1e8>
 800550a:	e00f      	b.n	800552c <UART_SetConfig+0x1f8>
 800550c:	2300      	movs	r3, #0
 800550e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005512:	e082      	b.n	800561a <UART_SetConfig+0x2e6>
 8005514:	2302      	movs	r3, #2
 8005516:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800551a:	e07e      	b.n	800561a <UART_SetConfig+0x2e6>
 800551c:	2304      	movs	r3, #4
 800551e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005522:	e07a      	b.n	800561a <UART_SetConfig+0x2e6>
 8005524:	2308      	movs	r3, #8
 8005526:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800552a:	e076      	b.n	800561a <UART_SetConfig+0x2e6>
 800552c:	2310      	movs	r3, #16
 800552e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005532:	e072      	b.n	800561a <UART_SetConfig+0x2e6>
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a35      	ldr	r2, [pc, #212]	@ (8005610 <UART_SetConfig+0x2dc>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d12a      	bne.n	8005594 <UART_SetConfig+0x260>
 800553e:	4b30      	ldr	r3, [pc, #192]	@ (8005600 <UART_SetConfig+0x2cc>)
 8005540:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005544:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005548:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800554c:	d01a      	beq.n	8005584 <UART_SetConfig+0x250>
 800554e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005552:	d81b      	bhi.n	800558c <UART_SetConfig+0x258>
 8005554:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005558:	d00c      	beq.n	8005574 <UART_SetConfig+0x240>
 800555a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800555e:	d815      	bhi.n	800558c <UART_SetConfig+0x258>
 8005560:	2b00      	cmp	r3, #0
 8005562:	d003      	beq.n	800556c <UART_SetConfig+0x238>
 8005564:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005568:	d008      	beq.n	800557c <UART_SetConfig+0x248>
 800556a:	e00f      	b.n	800558c <UART_SetConfig+0x258>
 800556c:	2300      	movs	r3, #0
 800556e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005572:	e052      	b.n	800561a <UART_SetConfig+0x2e6>
 8005574:	2302      	movs	r3, #2
 8005576:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800557a:	e04e      	b.n	800561a <UART_SetConfig+0x2e6>
 800557c:	2304      	movs	r3, #4
 800557e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005582:	e04a      	b.n	800561a <UART_SetConfig+0x2e6>
 8005584:	2308      	movs	r3, #8
 8005586:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800558a:	e046      	b.n	800561a <UART_SetConfig+0x2e6>
 800558c:	2310      	movs	r3, #16
 800558e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8005592:	e042      	b.n	800561a <UART_SetConfig+0x2e6>
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a17      	ldr	r2, [pc, #92]	@ (80055f8 <UART_SetConfig+0x2c4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d13a      	bne.n	8005614 <UART_SetConfig+0x2e0>
 800559e:	4b18      	ldr	r3, [pc, #96]	@ (8005600 <UART_SetConfig+0x2cc>)
 80055a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055a4:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80055a8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055ac:	d01a      	beq.n	80055e4 <UART_SetConfig+0x2b0>
 80055ae:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80055b2:	d81b      	bhi.n	80055ec <UART_SetConfig+0x2b8>
 80055b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b8:	d00c      	beq.n	80055d4 <UART_SetConfig+0x2a0>
 80055ba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055be:	d815      	bhi.n	80055ec <UART_SetConfig+0x2b8>
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <UART_SetConfig+0x298>
 80055c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c8:	d008      	beq.n	80055dc <UART_SetConfig+0x2a8>
 80055ca:	e00f      	b.n	80055ec <UART_SetConfig+0x2b8>
 80055cc:	2300      	movs	r3, #0
 80055ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055d2:	e022      	b.n	800561a <UART_SetConfig+0x2e6>
 80055d4:	2302      	movs	r3, #2
 80055d6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055da:	e01e      	b.n	800561a <UART_SetConfig+0x2e6>
 80055dc:	2304      	movs	r3, #4
 80055de:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055e2:	e01a      	b.n	800561a <UART_SetConfig+0x2e6>
 80055e4:	2308      	movs	r3, #8
 80055e6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055ea:	e016      	b.n	800561a <UART_SetConfig+0x2e6>
 80055ec:	2310      	movs	r3, #16
 80055ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80055f2:	e012      	b.n	800561a <UART_SetConfig+0x2e6>
 80055f4:	efff69f3 	.word	0xefff69f3
 80055f8:	40008000 	.word	0x40008000
 80055fc:	40013800 	.word	0x40013800
 8005600:	40021000 	.word	0x40021000
 8005604:	40004400 	.word	0x40004400
 8005608:	40004800 	.word	0x40004800
 800560c:	40004c00 	.word	0x40004c00
 8005610:	40005000 	.word	0x40005000
 8005614:	2310      	movs	r3, #16
 8005616:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4a9f      	ldr	r2, [pc, #636]	@ (800589c <UART_SetConfig+0x568>)
 8005620:	4293      	cmp	r3, r2
 8005622:	d17a      	bne.n	800571a <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005624:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005628:	2b08      	cmp	r3, #8
 800562a:	d824      	bhi.n	8005676 <UART_SetConfig+0x342>
 800562c:	a201      	add	r2, pc, #4	@ (adr r2, 8005634 <UART_SetConfig+0x300>)
 800562e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005632:	bf00      	nop
 8005634:	08005659 	.word	0x08005659
 8005638:	08005677 	.word	0x08005677
 800563c:	08005661 	.word	0x08005661
 8005640:	08005677 	.word	0x08005677
 8005644:	08005667 	.word	0x08005667
 8005648:	08005677 	.word	0x08005677
 800564c:	08005677 	.word	0x08005677
 8005650:	08005677 	.word	0x08005677
 8005654:	0800566f 	.word	0x0800566f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005658:	f7ff f84c 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 800565c:	61f8      	str	r0, [r7, #28]
        break;
 800565e:	e010      	b.n	8005682 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005660:	4b8f      	ldr	r3, [pc, #572]	@ (80058a0 <UART_SetConfig+0x56c>)
 8005662:	61fb      	str	r3, [r7, #28]
        break;
 8005664:	e00d      	b.n	8005682 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005666:	f7fe ffad 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 800566a:	61f8      	str	r0, [r7, #28]
        break;
 800566c:	e009      	b.n	8005682 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800566e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005672:	61fb      	str	r3, [r7, #28]
        break;
 8005674:	e005      	b.n	8005682 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8005676:	2300      	movs	r3, #0
 8005678:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005680:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8005682:	69fb      	ldr	r3, [r7, #28]
 8005684:	2b00      	cmp	r3, #0
 8005686:	f000 80fb 	beq.w	8005880 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	685a      	ldr	r2, [r3, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	4413      	add	r3, r2
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	429a      	cmp	r2, r3
 8005698:	d305      	bcc.n	80056a6 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80056a0:	69fa      	ldr	r2, [r7, #28]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d903      	bls.n	80056ae <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80056ac:	e0e8      	b.n	8005880 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80056ae:	69fb      	ldr	r3, [r7, #28]
 80056b0:	2200      	movs	r2, #0
 80056b2:	461c      	mov	r4, r3
 80056b4:	4615      	mov	r5, r2
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	022b      	lsls	r3, r5, #8
 80056c0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80056c4:	0222      	lsls	r2, r4, #8
 80056c6:	68f9      	ldr	r1, [r7, #12]
 80056c8:	6849      	ldr	r1, [r1, #4]
 80056ca:	0849      	lsrs	r1, r1, #1
 80056cc:	2000      	movs	r0, #0
 80056ce:	4688      	mov	r8, r1
 80056d0:	4681      	mov	r9, r0
 80056d2:	eb12 0a08 	adds.w	sl, r2, r8
 80056d6:	eb43 0b09 	adc.w	fp, r3, r9
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2200      	movs	r2, #0
 80056e0:	603b      	str	r3, [r7, #0]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80056e8:	4650      	mov	r0, sl
 80056ea:	4659      	mov	r1, fp
 80056ec:	f7fb fb1c 	bl	8000d28 <__aeabi_uldivmod>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4613      	mov	r3, r2
 80056f6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056fe:	d308      	bcc.n	8005712 <UART_SetConfig+0x3de>
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005706:	d204      	bcs.n	8005712 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	69ba      	ldr	r2, [r7, #24]
 800570e:	60da      	str	r2, [r3, #12]
 8005710:	e0b6      	b.n	8005880 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8005718:	e0b2      	b.n	8005880 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	69db      	ldr	r3, [r3, #28]
 800571e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005722:	d15e      	bne.n	80057e2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8005724:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005728:	2b08      	cmp	r3, #8
 800572a:	d828      	bhi.n	800577e <UART_SetConfig+0x44a>
 800572c:	a201      	add	r2, pc, #4	@ (adr r2, 8005734 <UART_SetConfig+0x400>)
 800572e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005732:	bf00      	nop
 8005734:	08005759 	.word	0x08005759
 8005738:	08005761 	.word	0x08005761
 800573c:	08005769 	.word	0x08005769
 8005740:	0800577f 	.word	0x0800577f
 8005744:	0800576f 	.word	0x0800576f
 8005748:	0800577f 	.word	0x0800577f
 800574c:	0800577f 	.word	0x0800577f
 8005750:	0800577f 	.word	0x0800577f
 8005754:	08005777 	.word	0x08005777
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005758:	f7fe ffcc 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 800575c:	61f8      	str	r0, [r7, #28]
        break;
 800575e:	e014      	b.n	800578a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005760:	f7fe ffde 	bl	8004720 <HAL_RCC_GetPCLK2Freq>
 8005764:	61f8      	str	r0, [r7, #28]
        break;
 8005766:	e010      	b.n	800578a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005768:	4b4d      	ldr	r3, [pc, #308]	@ (80058a0 <UART_SetConfig+0x56c>)
 800576a:	61fb      	str	r3, [r7, #28]
        break;
 800576c:	e00d      	b.n	800578a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800576e:	f7fe ff29 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 8005772:	61f8      	str	r0, [r7, #28]
        break;
 8005774:	e009      	b.n	800578a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005776:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800577a:	61fb      	str	r3, [r7, #28]
        break;
 800577c:	e005      	b.n	800578a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8005782:	2301      	movs	r3, #1
 8005784:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005788:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800578a:	69fb      	ldr	r3, [r7, #28]
 800578c:	2b00      	cmp	r3, #0
 800578e:	d077      	beq.n	8005880 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005790:	69fb      	ldr	r3, [r7, #28]
 8005792:	005a      	lsls	r2, r3, #1
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	085b      	lsrs	r3, r3, #1
 800579a:	441a      	add	r2, r3
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057a6:	69bb      	ldr	r3, [r7, #24]
 80057a8:	2b0f      	cmp	r3, #15
 80057aa:	d916      	bls.n	80057da <UART_SetConfig+0x4a6>
 80057ac:	69bb      	ldr	r3, [r7, #24]
 80057ae:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80057b2:	d212      	bcs.n	80057da <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057b4:	69bb      	ldr	r3, [r7, #24]
 80057b6:	b29b      	uxth	r3, r3
 80057b8:	f023 030f 	bic.w	r3, r3, #15
 80057bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057be:	69bb      	ldr	r3, [r7, #24]
 80057c0:	085b      	lsrs	r3, r3, #1
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	f003 0307 	and.w	r3, r3, #7
 80057c8:	b29a      	uxth	r2, r3
 80057ca:	8afb      	ldrh	r3, [r7, #22]
 80057cc:	4313      	orrs	r3, r2
 80057ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	8afa      	ldrh	r2, [r7, #22]
 80057d6:	60da      	str	r2, [r3, #12]
 80057d8:	e052      	b.n	8005880 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80057da:	2301      	movs	r3, #1
 80057dc:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80057e0:	e04e      	b.n	8005880 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80057e2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80057e6:	2b08      	cmp	r3, #8
 80057e8:	d827      	bhi.n	800583a <UART_SetConfig+0x506>
 80057ea:	a201      	add	r2, pc, #4	@ (adr r2, 80057f0 <UART_SetConfig+0x4bc>)
 80057ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f0:	08005815 	.word	0x08005815
 80057f4:	0800581d 	.word	0x0800581d
 80057f8:	08005825 	.word	0x08005825
 80057fc:	0800583b 	.word	0x0800583b
 8005800:	0800582b 	.word	0x0800582b
 8005804:	0800583b 	.word	0x0800583b
 8005808:	0800583b 	.word	0x0800583b
 800580c:	0800583b 	.word	0x0800583b
 8005810:	08005833 	.word	0x08005833
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005814:	f7fe ff6e 	bl	80046f4 <HAL_RCC_GetPCLK1Freq>
 8005818:	61f8      	str	r0, [r7, #28]
        break;
 800581a:	e014      	b.n	8005846 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800581c:	f7fe ff80 	bl	8004720 <HAL_RCC_GetPCLK2Freq>
 8005820:	61f8      	str	r0, [r7, #28]
        break;
 8005822:	e010      	b.n	8005846 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005824:	4b1e      	ldr	r3, [pc, #120]	@ (80058a0 <UART_SetConfig+0x56c>)
 8005826:	61fb      	str	r3, [r7, #28]
        break;
 8005828:	e00d      	b.n	8005846 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800582a:	f7fe fecb 	bl	80045c4 <HAL_RCC_GetSysClockFreq>
 800582e:	61f8      	str	r0, [r7, #28]
        break;
 8005830:	e009      	b.n	8005846 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005832:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005836:	61fb      	str	r3, [r7, #28]
        break;
 8005838:	e005      	b.n	8005846 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800583a:	2300      	movs	r3, #0
 800583c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800583e:	2301      	movs	r3, #1
 8005840:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8005844:	bf00      	nop
    }

    if (pclk != 0U)
 8005846:	69fb      	ldr	r3, [r7, #28]
 8005848:	2b00      	cmp	r3, #0
 800584a:	d019      	beq.n	8005880 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	085a      	lsrs	r2, r3, #1
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	441a      	add	r2, r3
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	fbb2 f3f3 	udiv	r3, r2, r3
 800585e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	2b0f      	cmp	r3, #15
 8005864:	d909      	bls.n	800587a <UART_SetConfig+0x546>
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800586c:	d205      	bcs.n	800587a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	b29a      	uxth	r2, r3
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60da      	str	r2, [r3, #12]
 8005878:	e002      	b.n	8005880 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800588c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8005890:	4618      	mov	r0, r3
 8005892:	3728      	adds	r7, #40	@ 0x28
 8005894:	46bd      	mov	sp, r7
 8005896:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800589a:	bf00      	nop
 800589c:	40008000 	.word	0x40008000
 80058a0:	00f42400 	.word	0x00f42400

080058a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058b0:	f003 0308 	and.w	r3, r3, #8
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d00a      	beq.n	80058ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	430a      	orrs	r2, r1
 80058cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d00a      	beq.n	80058f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	685b      	ldr	r3, [r3, #4]
 80058e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	430a      	orrs	r2, r1
 80058ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d00a      	beq.n	8005912 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	430a      	orrs	r2, r1
 8005910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005916:	f003 0304 	and.w	r3, r3, #4
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	430a      	orrs	r2, r1
 8005932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005938:	f003 0310 	and.w	r3, r3, #16
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00a      	beq.n	8005956 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	430a      	orrs	r2, r1
 8005954:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800595a:	f003 0320 	and.w	r3, r3, #32
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	689b      	ldr	r3, [r3, #8]
 8005968:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	430a      	orrs	r2, r1
 8005976:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800597c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d01a      	beq.n	80059ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	430a      	orrs	r2, r1
 8005998:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80059a2:	d10a      	bne.n	80059ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	430a      	orrs	r2, r1
 80059b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d00a      	beq.n	80059dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	685b      	ldr	r3, [r3, #4]
 80059cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	430a      	orrs	r2, r1
 80059da:	605a      	str	r2, [r3, #4]
  }
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b098      	sub	sp, #96	@ 0x60
 80059ec:	af02      	add	r7, sp, #8
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80059f8:	f7fc ffa8 	bl	800294c <HAL_GetTick>
 80059fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b08      	cmp	r3, #8
 8005a0a:	d12e      	bne.n	8005a6a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a14:	2200      	movs	r2, #0
 8005a16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f000 f88c 	bl	8005b38 <UART_WaitOnFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d021      	beq.n	8005a6a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a2e:	e853 3f00 	ldrex	r3, [r3]
 8005a32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	461a      	mov	r2, r3
 8005a42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005a44:	647b      	str	r3, [r7, #68]	@ 0x44
 8005a46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005a4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005a4c:	e841 2300 	strex	r3, r2, [r1]
 8005a50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005a52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d1e6      	bne.n	8005a26 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2220      	movs	r2, #32
 8005a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e062      	b.n	8005b30 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 0304 	and.w	r3, r3, #4
 8005a74:	2b04      	cmp	r3, #4
 8005a76:	d149      	bne.n	8005b0c <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005a78:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005a80:	2200      	movs	r2, #0
 8005a82:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 f856 	bl	8005b38 <UART_WaitOnFlagUntilTimeout>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d03c      	beq.n	8005b0c <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	623b      	str	r3, [r7, #32]
   return(result);
 8005aa0:	6a3b      	ldr	r3, [r7, #32]
 8005aa2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005aa6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	461a      	mov	r2, r3
 8005aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ab0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005ab2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005ab6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e6      	bne.n	8005a92 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3308      	adds	r3, #8
 8005aca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	e853 3f00 	ldrex	r3, [r3]
 8005ad2:	60fb      	str	r3, [r7, #12]
   return(result);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f023 0301 	bic.w	r3, r3, #1
 8005ada:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	3308      	adds	r3, #8
 8005ae2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005ae4:	61fa      	str	r2, [r7, #28]
 8005ae6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae8:	69b9      	ldr	r1, [r7, #24]
 8005aea:	69fa      	ldr	r2, [r7, #28]
 8005aec:	e841 2300 	strex	r3, r2, [r1]
 8005af0:	617b      	str	r3, [r7, #20]
   return(result);
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d1e5      	bne.n	8005ac4 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2220      	movs	r2, #32
 8005afc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2200      	movs	r2, #0
 8005b04:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e011      	b.n	8005b30 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2220      	movs	r2, #32
 8005b10:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2220      	movs	r2, #32
 8005b16:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005b2e:	2300      	movs	r3, #0
}
 8005b30:	4618      	mov	r0, r3
 8005b32:	3758      	adds	r7, #88	@ 0x58
 8005b34:	46bd      	mov	sp, r7
 8005b36:	bd80      	pop	{r7, pc}

08005b38 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	60f8      	str	r0, [r7, #12]
 8005b40:	60b9      	str	r1, [r7, #8]
 8005b42:	603b      	str	r3, [r7, #0]
 8005b44:	4613      	mov	r3, r2
 8005b46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b48:	e04f      	b.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005b50:	d04b      	beq.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b52:	f7fc fefb 	bl	800294c <HAL_GetTick>
 8005b56:	4602      	mov	r2, r0
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	69ba      	ldr	r2, [r7, #24]
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d302      	bcc.n	8005b68 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b62:	69bb      	ldr	r3, [r7, #24]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d101      	bne.n	8005b6c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b68:	2303      	movs	r3, #3
 8005b6a:	e04e      	b.n	8005c0a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	f003 0304 	and.w	r3, r3, #4
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d037      	beq.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b80      	cmp	r3, #128	@ 0x80
 8005b7e:	d034      	beq.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b40      	cmp	r3, #64	@ 0x40
 8005b84:	d031      	beq.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	f003 0308 	and.w	r3, r3, #8
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	d110      	bne.n	8005bb6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2208      	movs	r2, #8
 8005b9a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 f838 	bl	8005c12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2208      	movs	r2, #8
 8005ba6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	e029      	b.n	8005c0a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	69db      	ldr	r3, [r3, #28]
 8005bbc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005bc0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005bc4:	d111      	bne.n	8005bea <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005bce:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f81e 	bl	8005c12 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2220      	movs	r2, #32
 8005bda:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e00f      	b.n	8005c0a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	69da      	ldr	r2, [r3, #28]
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	4013      	ands	r3, r2
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	429a      	cmp	r2, r3
 8005bf8:	bf0c      	ite	eq
 8005bfa:	2301      	moveq	r3, #1
 8005bfc:	2300      	movne	r3, #0
 8005bfe:	b2db      	uxtb	r3, r3
 8005c00:	461a      	mov	r2, r3
 8005c02:	79fb      	ldrb	r3, [r7, #7]
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d0a0      	beq.n	8005b4a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3710      	adds	r7, #16
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c12:	b480      	push	{r7}
 8005c14:	b095      	sub	sp, #84	@ 0x54
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c22:	e853 3f00 	ldrex	r3, [r3]
 8005c26:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c2a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	461a      	mov	r2, r3
 8005c36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005c38:	643b      	str	r3, [r7, #64]	@ 0x40
 8005c3a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c3c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c3e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c40:	e841 2300 	strex	r3, r2, [r1]
 8005c44:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1e6      	bne.n	8005c1a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	3308      	adds	r3, #8
 8005c52:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c54:	6a3b      	ldr	r3, [r7, #32]
 8005c56:	e853 3f00 	ldrex	r3, [r3]
 8005c5a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c5c:	69fb      	ldr	r3, [r7, #28]
 8005c5e:	f023 0301 	bic.w	r3, r3, #1
 8005c62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	3308      	adds	r3, #8
 8005c6a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c6e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c70:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c72:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c74:	e841 2300 	strex	r3, r2, [r1]
 8005c78:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1e5      	bne.n	8005c4c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	d118      	bne.n	8005cba <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	e853 3f00 	ldrex	r3, [r3]
 8005c94:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	f023 0310 	bic.w	r3, r3, #16
 8005c9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005ca6:	61bb      	str	r3, [r7, #24]
 8005ca8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005caa:	6979      	ldr	r1, [r7, #20]
 8005cac:	69ba      	ldr	r2, [r7, #24]
 8005cae:	e841 2300 	strex	r3, r2, [r1]
 8005cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d1e6      	bne.n	8005c88 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2220      	movs	r2, #32
 8005cbe:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005cce:	bf00      	nop
 8005cd0:	3754      	adds	r7, #84	@ 0x54
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd8:	4770      	bx	lr

08005cda <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8005cda:	b480      	push	{r7}
 8005cdc:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8005cde:	bf00      	nop
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce6:	4770      	bx	lr

08005ce8 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af04      	add	r7, sp, #16
 8005cee:	4603      	mov	r3, r0
 8005cf0:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8005cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005cf6:	9302      	str	r3, [sp, #8]
 8005cf8:	2301      	movs	r3, #1
 8005cfa:	9301      	str	r3, [sp, #4]
 8005cfc:	1dfb      	adds	r3, r7, #7
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	2301      	movs	r3, #1
 8005d02:	2200      	movs	r2, #0
 8005d04:	2178      	movs	r1, #120	@ 0x78
 8005d06:	4803      	ldr	r0, [pc, #12]	@ (8005d14 <ssd1306_WriteCommand+0x2c>)
 8005d08:	f7fd f994 	bl	8003034 <HAL_I2C_Mem_Write>
}
 8005d0c:	bf00      	nop
 8005d0e:	3708      	adds	r7, #8
 8005d10:	46bd      	mov	sp, r7
 8005d12:	bd80      	pop	{r7, pc}
 8005d14:	20000244 	.word	0x20000244

08005d18 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b086      	sub	sp, #24
 8005d1c:	af04      	add	r7, sp, #16
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d2a:	9202      	str	r2, [sp, #8]
 8005d2c:	9301      	str	r3, [sp, #4]
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	9300      	str	r3, [sp, #0]
 8005d32:	2301      	movs	r3, #1
 8005d34:	2240      	movs	r2, #64	@ 0x40
 8005d36:	2178      	movs	r1, #120	@ 0x78
 8005d38:	4803      	ldr	r0, [pc, #12]	@ (8005d48 <ssd1306_WriteData+0x30>)
 8005d3a:	f7fd f97b 	bl	8003034 <HAL_I2C_Mem_Write>
}
 8005d3e:	bf00      	nop
 8005d40:	3708      	adds	r7, #8
 8005d42:	46bd      	mov	sp, r7
 8005d44:	bd80      	pop	{r7, pc}
 8005d46:	bf00      	nop
 8005d48:	20000244 	.word	0x20000244

08005d4c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8005d50:	f7ff ffc3 	bl	8005cda <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8005d54:	2064      	movs	r0, #100	@ 0x64
 8005d56:	f7fc fe05 	bl	8002964 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8005d5a:	2000      	movs	r0, #0
 8005d5c:	f000 f9d8 	bl	8006110 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8005d60:	2020      	movs	r0, #32
 8005d62:	f7ff ffc1 	bl	8005ce8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8005d66:	2000      	movs	r0, #0
 8005d68:	f7ff ffbe 	bl	8005ce8 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8005d6c:	20b0      	movs	r0, #176	@ 0xb0
 8005d6e:	f7ff ffbb 	bl	8005ce8 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8005d72:	20c8      	movs	r0, #200	@ 0xc8
 8005d74:	f7ff ffb8 	bl	8005ce8 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8005d78:	2000      	movs	r0, #0
 8005d7a:	f7ff ffb5 	bl	8005ce8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8005d7e:	2010      	movs	r0, #16
 8005d80:	f7ff ffb2 	bl	8005ce8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8005d84:	2040      	movs	r0, #64	@ 0x40
 8005d86:	f7ff ffaf 	bl	8005ce8 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8005d8a:	20ff      	movs	r0, #255	@ 0xff
 8005d8c:	f000 f9ac 	bl	80060e8 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8005d90:	20a1      	movs	r0, #161	@ 0xa1
 8005d92:	f7ff ffa9 	bl	8005ce8 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8005d96:	20a6      	movs	r0, #166	@ 0xa6
 8005d98:	f7ff ffa6 	bl	8005ce8 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005d9c:	20a8      	movs	r0, #168	@ 0xa8
 8005d9e:	f7ff ffa3 	bl	8005ce8 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8005da2:	203f      	movs	r0, #63	@ 0x3f
 8005da4:	f7ff ffa0 	bl	8005ce8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8005da8:	20a4      	movs	r0, #164	@ 0xa4
 8005daa:	f7ff ff9d 	bl	8005ce8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005dae:	20d3      	movs	r0, #211	@ 0xd3
 8005db0:	f7ff ff9a 	bl	8005ce8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005db4:	2000      	movs	r0, #0
 8005db6:	f7ff ff97 	bl	8005ce8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8005dba:	20d5      	movs	r0, #213	@ 0xd5
 8005dbc:	f7ff ff94 	bl	8005ce8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005dc0:	20f0      	movs	r0, #240	@ 0xf0
 8005dc2:	f7ff ff91 	bl	8005ce8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8005dc6:	20d9      	movs	r0, #217	@ 0xd9
 8005dc8:	f7ff ff8e 	bl	8005ce8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005dcc:	2022      	movs	r0, #34	@ 0x22
 8005dce:	f7ff ff8b 	bl	8005ce8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005dd2:	20da      	movs	r0, #218	@ 0xda
 8005dd4:	f7ff ff88 	bl	8005ce8 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8005dd8:	2012      	movs	r0, #18
 8005dda:	f7ff ff85 	bl	8005ce8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005dde:	20db      	movs	r0, #219	@ 0xdb
 8005de0:	f7ff ff82 	bl	8005ce8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005de4:	2020      	movs	r0, #32
 8005de6:	f7ff ff7f 	bl	8005ce8 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8005dea:	208d      	movs	r0, #141	@ 0x8d
 8005dec:	f7ff ff7c 	bl	8005ce8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005df0:	2014      	movs	r0, #20
 8005df2:	f7ff ff79 	bl	8005ce8 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8005df6:	2001      	movs	r0, #1
 8005df8:	f000 f98a 	bl	8006110 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005dfc:	2000      	movs	r0, #0
 8005dfe:	f000 f80f 	bl	8005e20 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005e02:	f000 f825 	bl	8005e50 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8005e06:	4b05      	ldr	r3, [pc, #20]	@ (8005e1c <ssd1306_Init+0xd0>)
 8005e08:	2200      	movs	r2, #0
 8005e0a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005e0c:	4b03      	ldr	r3, [pc, #12]	@ (8005e1c <ssd1306_Init+0xd0>)
 8005e0e:	2200      	movs	r2, #0
 8005e10:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005e12:	4b02      	ldr	r3, [pc, #8]	@ (8005e1c <ssd1306_Init+0xd0>)
 8005e14:	2201      	movs	r2, #1
 8005e16:	711a      	strb	r2, [r3, #4]
}
 8005e18:	bf00      	nop
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	2000087c 	.word	0x2000087c

08005e20 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	4603      	mov	r3, r0
 8005e28:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8005e2a:	79fb      	ldrb	r3, [r7, #7]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d101      	bne.n	8005e34 <ssd1306_Fill+0x14>
 8005e30:	2300      	movs	r3, #0
 8005e32:	e000      	b.n	8005e36 <ssd1306_Fill+0x16>
 8005e34:	23ff      	movs	r3, #255	@ 0xff
 8005e36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005e3a:	4619      	mov	r1, r3
 8005e3c:	4803      	ldr	r0, [pc, #12]	@ (8005e4c <ssd1306_Fill+0x2c>)
 8005e3e:	f001 f92a 	bl	8007096 <memset>
}
 8005e42:	bf00      	nop
 8005e44:	3708      	adds	r7, #8
 8005e46:	46bd      	mov	sp, r7
 8005e48:	bd80      	pop	{r7, pc}
 8005e4a:	bf00      	nop
 8005e4c:	2000047c 	.word	0x2000047c

08005e50 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b082      	sub	sp, #8
 8005e54:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005e56:	2300      	movs	r3, #0
 8005e58:	71fb      	strb	r3, [r7, #7]
 8005e5a:	e016      	b.n	8005e8a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8005e5c:	79fb      	ldrb	r3, [r7, #7]
 8005e5e:	3b50      	subs	r3, #80	@ 0x50
 8005e60:	b2db      	uxtb	r3, r3
 8005e62:	4618      	mov	r0, r3
 8005e64:	f7ff ff40 	bl	8005ce8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8005e68:	2000      	movs	r0, #0
 8005e6a:	f7ff ff3d 	bl	8005ce8 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8005e6e:	2010      	movs	r0, #16
 8005e70:	f7ff ff3a 	bl	8005ce8 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8005e74:	79fb      	ldrb	r3, [r7, #7]
 8005e76:	01db      	lsls	r3, r3, #7
 8005e78:	4a08      	ldr	r2, [pc, #32]	@ (8005e9c <ssd1306_UpdateScreen+0x4c>)
 8005e7a:	4413      	add	r3, r2
 8005e7c:	2180      	movs	r1, #128	@ 0x80
 8005e7e:	4618      	mov	r0, r3
 8005e80:	f7ff ff4a 	bl	8005d18 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8005e84:	79fb      	ldrb	r3, [r7, #7]
 8005e86:	3301      	adds	r3, #1
 8005e88:	71fb      	strb	r3, [r7, #7]
 8005e8a:	79fb      	ldrb	r3, [r7, #7]
 8005e8c:	2b07      	cmp	r3, #7
 8005e8e:	d9e5      	bls.n	8005e5c <ssd1306_UpdateScreen+0xc>
    }
}
 8005e90:	bf00      	nop
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	2000047c 	.word	0x2000047c

08005ea0 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	4603      	mov	r3, r0
 8005ea8:	71fb      	strb	r3, [r7, #7]
 8005eaa:	460b      	mov	r3, r1
 8005eac:	71bb      	strb	r3, [r7, #6]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	db3d      	blt.n	8005f36 <ssd1306_DrawPixel+0x96>
 8005eba:	79bb      	ldrb	r3, [r7, #6]
 8005ebc:	2b3f      	cmp	r3, #63	@ 0x3f
 8005ebe:	d83a      	bhi.n	8005f36 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005ec0:	797b      	ldrb	r3, [r7, #5]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d11a      	bne.n	8005efc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8005ec6:	79fa      	ldrb	r2, [r7, #7]
 8005ec8:	79bb      	ldrb	r3, [r7, #6]
 8005eca:	08db      	lsrs	r3, r3, #3
 8005ecc:	b2d8      	uxtb	r0, r3
 8005ece:	4603      	mov	r3, r0
 8005ed0:	01db      	lsls	r3, r3, #7
 8005ed2:	4413      	add	r3, r2
 8005ed4:	4a1b      	ldr	r2, [pc, #108]	@ (8005f44 <ssd1306_DrawPixel+0xa4>)
 8005ed6:	5cd3      	ldrb	r3, [r2, r3]
 8005ed8:	b25a      	sxtb	r2, r3
 8005eda:	79bb      	ldrb	r3, [r7, #6]
 8005edc:	f003 0307 	and.w	r3, r3, #7
 8005ee0:	2101      	movs	r1, #1
 8005ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8005ee6:	b25b      	sxtb	r3, r3
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	b259      	sxtb	r1, r3
 8005eec:	79fa      	ldrb	r2, [r7, #7]
 8005eee:	4603      	mov	r3, r0
 8005ef0:	01db      	lsls	r3, r3, #7
 8005ef2:	4413      	add	r3, r2
 8005ef4:	b2c9      	uxtb	r1, r1
 8005ef6:	4a13      	ldr	r2, [pc, #76]	@ (8005f44 <ssd1306_DrawPixel+0xa4>)
 8005ef8:	54d1      	strb	r1, [r2, r3]
 8005efa:	e01d      	b.n	8005f38 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005efc:	79fa      	ldrb	r2, [r7, #7]
 8005efe:	79bb      	ldrb	r3, [r7, #6]
 8005f00:	08db      	lsrs	r3, r3, #3
 8005f02:	b2d8      	uxtb	r0, r3
 8005f04:	4603      	mov	r3, r0
 8005f06:	01db      	lsls	r3, r3, #7
 8005f08:	4413      	add	r3, r2
 8005f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8005f44 <ssd1306_DrawPixel+0xa4>)
 8005f0c:	5cd3      	ldrb	r3, [r2, r3]
 8005f0e:	b25a      	sxtb	r2, r3
 8005f10:	79bb      	ldrb	r3, [r7, #6]
 8005f12:	f003 0307 	and.w	r3, r3, #7
 8005f16:	2101      	movs	r1, #1
 8005f18:	fa01 f303 	lsl.w	r3, r1, r3
 8005f1c:	b25b      	sxtb	r3, r3
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	b25b      	sxtb	r3, r3
 8005f22:	4013      	ands	r3, r2
 8005f24:	b259      	sxtb	r1, r3
 8005f26:	79fa      	ldrb	r2, [r7, #7]
 8005f28:	4603      	mov	r3, r0
 8005f2a:	01db      	lsls	r3, r3, #7
 8005f2c:	4413      	add	r3, r2
 8005f2e:	b2c9      	uxtb	r1, r1
 8005f30:	4a04      	ldr	r2, [pc, #16]	@ (8005f44 <ssd1306_DrawPixel+0xa4>)
 8005f32:	54d1      	strb	r1, [r2, r3]
 8005f34:	e000      	b.n	8005f38 <ssd1306_DrawPixel+0x98>
        return;
 8005f36:	bf00      	nop
    }
}
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr
 8005f42:	bf00      	nop
 8005f44:	2000047c 	.word	0x2000047c

08005f48 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8005f48:	b590      	push	{r4, r7, lr}
 8005f4a:	b089      	sub	sp, #36	@ 0x24
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	4604      	mov	r4, r0
 8005f50:	4638      	mov	r0, r7
 8005f52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8005f56:	4623      	mov	r3, r4
 8005f58:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8005f5a:	7bfb      	ldrb	r3, [r7, #15]
 8005f5c:	2b1f      	cmp	r3, #31
 8005f5e:	d902      	bls.n	8005f66 <ssd1306_WriteChar+0x1e>
 8005f60:	7bfb      	ldrb	r3, [r7, #15]
 8005f62:	2b7e      	cmp	r3, #126	@ 0x7e
 8005f64:	d901      	bls.n	8005f6a <ssd1306_WriteChar+0x22>
        return 0;
 8005f66:	2300      	movs	r3, #0
 8005f68:	e079      	b.n	800605e <ssd1306_WriteChar+0x116>
    
    // Char width is not equal to font width for proportional font
    const uint8_t char_width = Font.char_width ? Font.char_width[ch-32] : Font.width;
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d005      	beq.n	8005f7c <ssd1306_WriteChar+0x34>
 8005f70:	68ba      	ldr	r2, [r7, #8]
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	3b20      	subs	r3, #32
 8005f76:	4413      	add	r3, r2
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	e000      	b.n	8005f7e <ssd1306_WriteChar+0x36>
 8005f7c:	783b      	ldrb	r3, [r7, #0]
 8005f7e:	75fb      	strb	r3, [r7, #23]
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8005f80:	4b39      	ldr	r3, [pc, #228]	@ (8006068 <ssd1306_WriteChar+0x120>)
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	461a      	mov	r2, r3
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
 8005f88:	4413      	add	r3, r2
 8005f8a:	2b80      	cmp	r3, #128	@ 0x80
 8005f8c:	dc06      	bgt.n	8005f9c <ssd1306_WriteChar+0x54>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8005f8e:	4b36      	ldr	r3, [pc, #216]	@ (8006068 <ssd1306_WriteChar+0x120>)
 8005f90:	885b      	ldrh	r3, [r3, #2]
 8005f92:	461a      	mov	r2, r3
 8005f94:	787b      	ldrb	r3, [r7, #1]
 8005f96:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + char_width) ||
 8005f98:	2b40      	cmp	r3, #64	@ 0x40
 8005f9a:	dd01      	ble.n	8005fa0 <ssd1306_WriteChar+0x58>
    {
        // Not enough space on current line
        return 0;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e05e      	b.n	800605e <ssd1306_WriteChar+0x116>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	61fb      	str	r3, [r7, #28]
 8005fa4:	e04d      	b.n	8006042 <ssd1306_WriteChar+0xfa>
        b = Font.data[(ch - 32) * Font.height + i];
 8005fa6:	687a      	ldr	r2, [r7, #4]
 8005fa8:	7bfb      	ldrb	r3, [r7, #15]
 8005faa:	3b20      	subs	r3, #32
 8005fac:	7879      	ldrb	r1, [r7, #1]
 8005fae:	fb01 f303 	mul.w	r3, r1, r3
 8005fb2:	4619      	mov	r1, r3
 8005fb4:	69fb      	ldr	r3, [r7, #28]
 8005fb6:	440b      	add	r3, r1
 8005fb8:	005b      	lsls	r3, r3, #1
 8005fba:	4413      	add	r3, r2
 8005fbc:	881b      	ldrh	r3, [r3, #0]
 8005fbe:	613b      	str	r3, [r7, #16]
        for(j = 0; j < char_width; j++) {
 8005fc0:	2300      	movs	r3, #0
 8005fc2:	61bb      	str	r3, [r7, #24]
 8005fc4:	e036      	b.n	8006034 <ssd1306_WriteChar+0xec>
            if((b << j) & 0x8000)  {
 8005fc6:	693a      	ldr	r2, [r7, #16]
 8005fc8:	69bb      	ldr	r3, [r7, #24]
 8005fca:	fa02 f303 	lsl.w	r3, r2, r3
 8005fce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d013      	beq.n	8005ffe <ssd1306_WriteChar+0xb6>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005fd6:	4b24      	ldr	r3, [pc, #144]	@ (8006068 <ssd1306_WriteChar+0x120>)
 8005fd8:	881b      	ldrh	r3, [r3, #0]
 8005fda:	b2da      	uxtb	r2, r3
 8005fdc:	69bb      	ldr	r3, [r7, #24]
 8005fde:	b2db      	uxtb	r3, r3
 8005fe0:	4413      	add	r3, r2
 8005fe2:	b2d8      	uxtb	r0, r3
 8005fe4:	4b20      	ldr	r3, [pc, #128]	@ (8006068 <ssd1306_WriteChar+0x120>)
 8005fe6:	885b      	ldrh	r3, [r3, #2]
 8005fe8:	b2da      	uxtb	r2, r3
 8005fea:	69fb      	ldr	r3, [r7, #28]
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	4413      	add	r3, r2
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005ff6:	4619      	mov	r1, r3
 8005ff8:	f7ff ff52 	bl	8005ea0 <ssd1306_DrawPixel>
 8005ffc:	e017      	b.n	800602e <ssd1306_WriteChar+0xe6>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005ffe:	4b1a      	ldr	r3, [pc, #104]	@ (8006068 <ssd1306_WriteChar+0x120>)
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	b2da      	uxtb	r2, r3
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	b2db      	uxtb	r3, r3
 8006008:	4413      	add	r3, r2
 800600a:	b2d8      	uxtb	r0, r3
 800600c:	4b16      	ldr	r3, [pc, #88]	@ (8006068 <ssd1306_WriteChar+0x120>)
 800600e:	885b      	ldrh	r3, [r3, #2]
 8006010:	b2da      	uxtb	r2, r3
 8006012:	69fb      	ldr	r3, [r7, #28]
 8006014:	b2db      	uxtb	r3, r3
 8006016:	4413      	add	r3, r2
 8006018:	b2d9      	uxtb	r1, r3
 800601a:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800601e:	2b00      	cmp	r3, #0
 8006020:	bf0c      	ite	eq
 8006022:	2301      	moveq	r3, #1
 8006024:	2300      	movne	r3, #0
 8006026:	b2db      	uxtb	r3, r3
 8006028:	461a      	mov	r2, r3
 800602a:	f7ff ff39 	bl	8005ea0 <ssd1306_DrawPixel>
        for(j = 0; j < char_width; j++) {
 800602e:	69bb      	ldr	r3, [r7, #24]
 8006030:	3301      	adds	r3, #1
 8006032:	61bb      	str	r3, [r7, #24]
 8006034:	7dfb      	ldrb	r3, [r7, #23]
 8006036:	69ba      	ldr	r2, [r7, #24]
 8006038:	429a      	cmp	r2, r3
 800603a:	d3c4      	bcc.n	8005fc6 <ssd1306_WriteChar+0x7e>
    for(i = 0; i < Font.height; i++) {
 800603c:	69fb      	ldr	r3, [r7, #28]
 800603e:	3301      	adds	r3, #1
 8006040:	61fb      	str	r3, [r7, #28]
 8006042:	787b      	ldrb	r3, [r7, #1]
 8006044:	461a      	mov	r2, r3
 8006046:	69fb      	ldr	r3, [r7, #28]
 8006048:	4293      	cmp	r3, r2
 800604a:	d3ac      	bcc.n	8005fa6 <ssd1306_WriteChar+0x5e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += char_width;
 800604c:	4b06      	ldr	r3, [pc, #24]	@ (8006068 <ssd1306_WriteChar+0x120>)
 800604e:	881a      	ldrh	r2, [r3, #0]
 8006050:	7dfb      	ldrb	r3, [r7, #23]
 8006052:	b29b      	uxth	r3, r3
 8006054:	4413      	add	r3, r2
 8006056:	b29a      	uxth	r2, r3
 8006058:	4b03      	ldr	r3, [pc, #12]	@ (8006068 <ssd1306_WriteChar+0x120>)
 800605a:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800605c:	7bfb      	ldrb	r3, [r7, #15]
}
 800605e:	4618      	mov	r0, r3
 8006060:	3724      	adds	r7, #36	@ 0x24
 8006062:	46bd      	mov	sp, r7
 8006064:	bd90      	pop	{r4, r7, pc}
 8006066:	bf00      	nop
 8006068:	2000087c 	.word	0x2000087c

0800606c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 800606c:	b580      	push	{r7, lr}
 800606e:	b086      	sub	sp, #24
 8006070:	af02      	add	r7, sp, #8
 8006072:	60f8      	str	r0, [r7, #12]
 8006074:	4638      	mov	r0, r7
 8006076:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 800607a:	e013      	b.n	80060a4 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	7818      	ldrb	r0, [r3, #0]
 8006080:	7e3b      	ldrb	r3, [r7, #24]
 8006082:	9300      	str	r3, [sp, #0]
 8006084:	463b      	mov	r3, r7
 8006086:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006088:	f7ff ff5e 	bl	8005f48 <ssd1306_WriteChar>
 800608c:	4603      	mov	r3, r0
 800608e:	461a      	mov	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	429a      	cmp	r2, r3
 8006096:	d002      	beq.n	800609e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	e008      	b.n	80060b0 <ssd1306_WriteString+0x44>
        }
        str++;
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3301      	adds	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	781b      	ldrb	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d1e7      	bne.n	800607c <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	781b      	ldrb	r3, [r3, #0]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	4603      	mov	r3, r0
 80060c0:	460a      	mov	r2, r1
 80060c2:	71fb      	strb	r3, [r7, #7]
 80060c4:	4613      	mov	r3, r2
 80060c6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80060c8:	79fb      	ldrb	r3, [r7, #7]
 80060ca:	b29a      	uxth	r2, r3
 80060cc:	4b05      	ldr	r3, [pc, #20]	@ (80060e4 <ssd1306_SetCursor+0x2c>)
 80060ce:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80060d0:	79bb      	ldrb	r3, [r7, #6]
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	4b03      	ldr	r3, [pc, #12]	@ (80060e4 <ssd1306_SetCursor+0x2c>)
 80060d6:	805a      	strh	r2, [r3, #2]
}
 80060d8:	bf00      	nop
 80060da:	370c      	adds	r7, #12
 80060dc:	46bd      	mov	sp, r7
 80060de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e2:	4770      	bx	lr
 80060e4:	2000087c 	.word	0x2000087c

080060e8 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	4603      	mov	r3, r0
 80060f0:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80060f2:	2381      	movs	r3, #129	@ 0x81
 80060f4:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80060f6:	7bfb      	ldrb	r3, [r7, #15]
 80060f8:	4618      	mov	r0, r3
 80060fa:	f7ff fdf5 	bl	8005ce8 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80060fe:	79fb      	ldrb	r3, [r7, #7]
 8006100:	4618      	mov	r0, r3
 8006102:	f7ff fdf1 	bl	8005ce8 <ssd1306_WriteCommand>
}
 8006106:	bf00      	nop
 8006108:	3710      	adds	r7, #16
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	4603      	mov	r3, r0
 8006118:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800611a:	79fb      	ldrb	r3, [r7, #7]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d005      	beq.n	800612c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8006120:	23af      	movs	r3, #175	@ 0xaf
 8006122:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8006124:	4b08      	ldr	r3, [pc, #32]	@ (8006148 <ssd1306_SetDisplayOn+0x38>)
 8006126:	2201      	movs	r2, #1
 8006128:	715a      	strb	r2, [r3, #5]
 800612a:	e004      	b.n	8006136 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 800612c:	23ae      	movs	r3, #174	@ 0xae
 800612e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8006130:	4b05      	ldr	r3, [pc, #20]	@ (8006148 <ssd1306_SetDisplayOn+0x38>)
 8006132:	2200      	movs	r2, #0
 8006134:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8006136:	7bfb      	ldrb	r3, [r7, #15]
 8006138:	4618      	mov	r0, r3
 800613a:	f7ff fdd5 	bl	8005ce8 <ssd1306_WriteCommand>
}
 800613e:	bf00      	nop
 8006140:	3710      	adds	r7, #16
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	2000087c 	.word	0x2000087c

0800614c <__cvt>:
 800614c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006150:	ec57 6b10 	vmov	r6, r7, d0
 8006154:	2f00      	cmp	r7, #0
 8006156:	460c      	mov	r4, r1
 8006158:	4619      	mov	r1, r3
 800615a:	463b      	mov	r3, r7
 800615c:	bfbb      	ittet	lt
 800615e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006162:	461f      	movlt	r7, r3
 8006164:	2300      	movge	r3, #0
 8006166:	232d      	movlt	r3, #45	@ 0x2d
 8006168:	700b      	strb	r3, [r1, #0]
 800616a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800616c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006170:	4691      	mov	r9, r2
 8006172:	f023 0820 	bic.w	r8, r3, #32
 8006176:	bfbc      	itt	lt
 8006178:	4632      	movlt	r2, r6
 800617a:	4616      	movlt	r6, r2
 800617c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006180:	d005      	beq.n	800618e <__cvt+0x42>
 8006182:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006186:	d100      	bne.n	800618a <__cvt+0x3e>
 8006188:	3401      	adds	r4, #1
 800618a:	2102      	movs	r1, #2
 800618c:	e000      	b.n	8006190 <__cvt+0x44>
 800618e:	2103      	movs	r1, #3
 8006190:	ab03      	add	r3, sp, #12
 8006192:	9301      	str	r3, [sp, #4]
 8006194:	ab02      	add	r3, sp, #8
 8006196:	9300      	str	r3, [sp, #0]
 8006198:	ec47 6b10 	vmov	d0, r6, r7
 800619c:	4653      	mov	r3, sl
 800619e:	4622      	mov	r2, r4
 80061a0:	f001 f896 	bl	80072d0 <_dtoa_r>
 80061a4:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80061a8:	4605      	mov	r5, r0
 80061aa:	d119      	bne.n	80061e0 <__cvt+0x94>
 80061ac:	f019 0f01 	tst.w	r9, #1
 80061b0:	d00e      	beq.n	80061d0 <__cvt+0x84>
 80061b2:	eb00 0904 	add.w	r9, r0, r4
 80061b6:	2200      	movs	r2, #0
 80061b8:	2300      	movs	r3, #0
 80061ba:	4630      	mov	r0, r6
 80061bc:	4639      	mov	r1, r7
 80061be:	f7fa fc83 	bl	8000ac8 <__aeabi_dcmpeq>
 80061c2:	b108      	cbz	r0, 80061c8 <__cvt+0x7c>
 80061c4:	f8cd 900c 	str.w	r9, [sp, #12]
 80061c8:	2230      	movs	r2, #48	@ 0x30
 80061ca:	9b03      	ldr	r3, [sp, #12]
 80061cc:	454b      	cmp	r3, r9
 80061ce:	d31e      	bcc.n	800620e <__cvt+0xc2>
 80061d0:	9b03      	ldr	r3, [sp, #12]
 80061d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061d4:	1b5b      	subs	r3, r3, r5
 80061d6:	4628      	mov	r0, r5
 80061d8:	6013      	str	r3, [r2, #0]
 80061da:	b004      	add	sp, #16
 80061dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061e0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061e4:	eb00 0904 	add.w	r9, r0, r4
 80061e8:	d1e5      	bne.n	80061b6 <__cvt+0x6a>
 80061ea:	7803      	ldrb	r3, [r0, #0]
 80061ec:	2b30      	cmp	r3, #48	@ 0x30
 80061ee:	d10a      	bne.n	8006206 <__cvt+0xba>
 80061f0:	2200      	movs	r2, #0
 80061f2:	2300      	movs	r3, #0
 80061f4:	4630      	mov	r0, r6
 80061f6:	4639      	mov	r1, r7
 80061f8:	f7fa fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 80061fc:	b918      	cbnz	r0, 8006206 <__cvt+0xba>
 80061fe:	f1c4 0401 	rsb	r4, r4, #1
 8006202:	f8ca 4000 	str.w	r4, [sl]
 8006206:	f8da 3000 	ldr.w	r3, [sl]
 800620a:	4499      	add	r9, r3
 800620c:	e7d3      	b.n	80061b6 <__cvt+0x6a>
 800620e:	1c59      	adds	r1, r3, #1
 8006210:	9103      	str	r1, [sp, #12]
 8006212:	701a      	strb	r2, [r3, #0]
 8006214:	e7d9      	b.n	80061ca <__cvt+0x7e>

08006216 <__exponent>:
 8006216:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006218:	2900      	cmp	r1, #0
 800621a:	bfba      	itte	lt
 800621c:	4249      	neglt	r1, r1
 800621e:	232d      	movlt	r3, #45	@ 0x2d
 8006220:	232b      	movge	r3, #43	@ 0x2b
 8006222:	2909      	cmp	r1, #9
 8006224:	7002      	strb	r2, [r0, #0]
 8006226:	7043      	strb	r3, [r0, #1]
 8006228:	dd29      	ble.n	800627e <__exponent+0x68>
 800622a:	f10d 0307 	add.w	r3, sp, #7
 800622e:	461d      	mov	r5, r3
 8006230:	270a      	movs	r7, #10
 8006232:	461a      	mov	r2, r3
 8006234:	fbb1 f6f7 	udiv	r6, r1, r7
 8006238:	fb07 1416 	mls	r4, r7, r6, r1
 800623c:	3430      	adds	r4, #48	@ 0x30
 800623e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006242:	460c      	mov	r4, r1
 8006244:	2c63      	cmp	r4, #99	@ 0x63
 8006246:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800624a:	4631      	mov	r1, r6
 800624c:	dcf1      	bgt.n	8006232 <__exponent+0x1c>
 800624e:	3130      	adds	r1, #48	@ 0x30
 8006250:	1e94      	subs	r4, r2, #2
 8006252:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006256:	1c41      	adds	r1, r0, #1
 8006258:	4623      	mov	r3, r4
 800625a:	42ab      	cmp	r3, r5
 800625c:	d30a      	bcc.n	8006274 <__exponent+0x5e>
 800625e:	f10d 0309 	add.w	r3, sp, #9
 8006262:	1a9b      	subs	r3, r3, r2
 8006264:	42ac      	cmp	r4, r5
 8006266:	bf88      	it	hi
 8006268:	2300      	movhi	r3, #0
 800626a:	3302      	adds	r3, #2
 800626c:	4403      	add	r3, r0
 800626e:	1a18      	subs	r0, r3, r0
 8006270:	b003      	add	sp, #12
 8006272:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006274:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006278:	f801 6f01 	strb.w	r6, [r1, #1]!
 800627c:	e7ed      	b.n	800625a <__exponent+0x44>
 800627e:	2330      	movs	r3, #48	@ 0x30
 8006280:	3130      	adds	r1, #48	@ 0x30
 8006282:	7083      	strb	r3, [r0, #2]
 8006284:	70c1      	strb	r1, [r0, #3]
 8006286:	1d03      	adds	r3, r0, #4
 8006288:	e7f1      	b.n	800626e <__exponent+0x58>
	...

0800628c <_printf_float>:
 800628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006290:	b08d      	sub	sp, #52	@ 0x34
 8006292:	460c      	mov	r4, r1
 8006294:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006298:	4616      	mov	r6, r2
 800629a:	461f      	mov	r7, r3
 800629c:	4605      	mov	r5, r0
 800629e:	f000 ff03 	bl	80070a8 <_localeconv_r>
 80062a2:	6803      	ldr	r3, [r0, #0]
 80062a4:	9304      	str	r3, [sp, #16]
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7f9 ffe2 	bl	8000270 <strlen>
 80062ac:	2300      	movs	r3, #0
 80062ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80062b0:	f8d8 3000 	ldr.w	r3, [r8]
 80062b4:	9005      	str	r0, [sp, #20]
 80062b6:	3307      	adds	r3, #7
 80062b8:	f023 0307 	bic.w	r3, r3, #7
 80062bc:	f103 0208 	add.w	r2, r3, #8
 80062c0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062c4:	f8d4 b000 	ldr.w	fp, [r4]
 80062c8:	f8c8 2000 	str.w	r2, [r8]
 80062cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062d0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062d4:	9307      	str	r3, [sp, #28]
 80062d6:	f8cd 8018 	str.w	r8, [sp, #24]
 80062da:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062e2:	4b9c      	ldr	r3, [pc, #624]	@ (8006554 <_printf_float+0x2c8>)
 80062e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062e8:	f7fa fc20 	bl	8000b2c <__aeabi_dcmpun>
 80062ec:	bb70      	cbnz	r0, 800634c <_printf_float+0xc0>
 80062ee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062f2:	4b98      	ldr	r3, [pc, #608]	@ (8006554 <_printf_float+0x2c8>)
 80062f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062f8:	f7fa fbfa 	bl	8000af0 <__aeabi_dcmple>
 80062fc:	bb30      	cbnz	r0, 800634c <_printf_float+0xc0>
 80062fe:	2200      	movs	r2, #0
 8006300:	2300      	movs	r3, #0
 8006302:	4640      	mov	r0, r8
 8006304:	4649      	mov	r1, r9
 8006306:	f7fa fbe9 	bl	8000adc <__aeabi_dcmplt>
 800630a:	b110      	cbz	r0, 8006312 <_printf_float+0x86>
 800630c:	232d      	movs	r3, #45	@ 0x2d
 800630e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006312:	4a91      	ldr	r2, [pc, #580]	@ (8006558 <_printf_float+0x2cc>)
 8006314:	4b91      	ldr	r3, [pc, #580]	@ (800655c <_printf_float+0x2d0>)
 8006316:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800631a:	bf8c      	ite	hi
 800631c:	4690      	movhi	r8, r2
 800631e:	4698      	movls	r8, r3
 8006320:	2303      	movs	r3, #3
 8006322:	6123      	str	r3, [r4, #16]
 8006324:	f02b 0304 	bic.w	r3, fp, #4
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	f04f 0900 	mov.w	r9, #0
 800632e:	9700      	str	r7, [sp, #0]
 8006330:	4633      	mov	r3, r6
 8006332:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006334:	4621      	mov	r1, r4
 8006336:	4628      	mov	r0, r5
 8006338:	f000 f9d2 	bl	80066e0 <_printf_common>
 800633c:	3001      	adds	r0, #1
 800633e:	f040 808d 	bne.w	800645c <_printf_float+0x1d0>
 8006342:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006346:	b00d      	add	sp, #52	@ 0x34
 8006348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800634c:	4642      	mov	r2, r8
 800634e:	464b      	mov	r3, r9
 8006350:	4640      	mov	r0, r8
 8006352:	4649      	mov	r1, r9
 8006354:	f7fa fbea 	bl	8000b2c <__aeabi_dcmpun>
 8006358:	b140      	cbz	r0, 800636c <_printf_float+0xe0>
 800635a:	464b      	mov	r3, r9
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfbc      	itt	lt
 8006360:	232d      	movlt	r3, #45	@ 0x2d
 8006362:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006366:	4a7e      	ldr	r2, [pc, #504]	@ (8006560 <_printf_float+0x2d4>)
 8006368:	4b7e      	ldr	r3, [pc, #504]	@ (8006564 <_printf_float+0x2d8>)
 800636a:	e7d4      	b.n	8006316 <_printf_float+0x8a>
 800636c:	6863      	ldr	r3, [r4, #4]
 800636e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006372:	9206      	str	r2, [sp, #24]
 8006374:	1c5a      	adds	r2, r3, #1
 8006376:	d13b      	bne.n	80063f0 <_printf_float+0x164>
 8006378:	2306      	movs	r3, #6
 800637a:	6063      	str	r3, [r4, #4]
 800637c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006380:	2300      	movs	r3, #0
 8006382:	6022      	str	r2, [r4, #0]
 8006384:	9303      	str	r3, [sp, #12]
 8006386:	ab0a      	add	r3, sp, #40	@ 0x28
 8006388:	e9cd a301 	strd	sl, r3, [sp, #4]
 800638c:	ab09      	add	r3, sp, #36	@ 0x24
 800638e:	9300      	str	r3, [sp, #0]
 8006390:	6861      	ldr	r1, [r4, #4]
 8006392:	ec49 8b10 	vmov	d0, r8, r9
 8006396:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800639a:	4628      	mov	r0, r5
 800639c:	f7ff fed6 	bl	800614c <__cvt>
 80063a0:	9b06      	ldr	r3, [sp, #24]
 80063a2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063a4:	2b47      	cmp	r3, #71	@ 0x47
 80063a6:	4680      	mov	r8, r0
 80063a8:	d129      	bne.n	80063fe <_printf_float+0x172>
 80063aa:	1cc8      	adds	r0, r1, #3
 80063ac:	db02      	blt.n	80063b4 <_printf_float+0x128>
 80063ae:	6863      	ldr	r3, [r4, #4]
 80063b0:	4299      	cmp	r1, r3
 80063b2:	dd41      	ble.n	8006438 <_printf_float+0x1ac>
 80063b4:	f1aa 0a02 	sub.w	sl, sl, #2
 80063b8:	fa5f fa8a 	uxtb.w	sl, sl
 80063bc:	3901      	subs	r1, #1
 80063be:	4652      	mov	r2, sl
 80063c0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063c4:	9109      	str	r1, [sp, #36]	@ 0x24
 80063c6:	f7ff ff26 	bl	8006216 <__exponent>
 80063ca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063cc:	1813      	adds	r3, r2, r0
 80063ce:	2a01      	cmp	r2, #1
 80063d0:	4681      	mov	r9, r0
 80063d2:	6123      	str	r3, [r4, #16]
 80063d4:	dc02      	bgt.n	80063dc <_printf_float+0x150>
 80063d6:	6822      	ldr	r2, [r4, #0]
 80063d8:	07d2      	lsls	r2, r2, #31
 80063da:	d501      	bpl.n	80063e0 <_printf_float+0x154>
 80063dc:	3301      	adds	r3, #1
 80063de:	6123      	str	r3, [r4, #16]
 80063e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80063e4:	2b00      	cmp	r3, #0
 80063e6:	d0a2      	beq.n	800632e <_printf_float+0xa2>
 80063e8:	232d      	movs	r3, #45	@ 0x2d
 80063ea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063ee:	e79e      	b.n	800632e <_printf_float+0xa2>
 80063f0:	9a06      	ldr	r2, [sp, #24]
 80063f2:	2a47      	cmp	r2, #71	@ 0x47
 80063f4:	d1c2      	bne.n	800637c <_printf_float+0xf0>
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d1c0      	bne.n	800637c <_printf_float+0xf0>
 80063fa:	2301      	movs	r3, #1
 80063fc:	e7bd      	b.n	800637a <_printf_float+0xee>
 80063fe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006402:	d9db      	bls.n	80063bc <_printf_float+0x130>
 8006404:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006408:	d118      	bne.n	800643c <_printf_float+0x1b0>
 800640a:	2900      	cmp	r1, #0
 800640c:	6863      	ldr	r3, [r4, #4]
 800640e:	dd0b      	ble.n	8006428 <_printf_float+0x19c>
 8006410:	6121      	str	r1, [r4, #16]
 8006412:	b913      	cbnz	r3, 800641a <_printf_float+0x18e>
 8006414:	6822      	ldr	r2, [r4, #0]
 8006416:	07d0      	lsls	r0, r2, #31
 8006418:	d502      	bpl.n	8006420 <_printf_float+0x194>
 800641a:	3301      	adds	r3, #1
 800641c:	440b      	add	r3, r1
 800641e:	6123      	str	r3, [r4, #16]
 8006420:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006422:	f04f 0900 	mov.w	r9, #0
 8006426:	e7db      	b.n	80063e0 <_printf_float+0x154>
 8006428:	b913      	cbnz	r3, 8006430 <_printf_float+0x1a4>
 800642a:	6822      	ldr	r2, [r4, #0]
 800642c:	07d2      	lsls	r2, r2, #31
 800642e:	d501      	bpl.n	8006434 <_printf_float+0x1a8>
 8006430:	3302      	adds	r3, #2
 8006432:	e7f4      	b.n	800641e <_printf_float+0x192>
 8006434:	2301      	movs	r3, #1
 8006436:	e7f2      	b.n	800641e <_printf_float+0x192>
 8006438:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800643c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800643e:	4299      	cmp	r1, r3
 8006440:	db05      	blt.n	800644e <_printf_float+0x1c2>
 8006442:	6823      	ldr	r3, [r4, #0]
 8006444:	6121      	str	r1, [r4, #16]
 8006446:	07d8      	lsls	r0, r3, #31
 8006448:	d5ea      	bpl.n	8006420 <_printf_float+0x194>
 800644a:	1c4b      	adds	r3, r1, #1
 800644c:	e7e7      	b.n	800641e <_printf_float+0x192>
 800644e:	2900      	cmp	r1, #0
 8006450:	bfd4      	ite	le
 8006452:	f1c1 0202 	rsble	r2, r1, #2
 8006456:	2201      	movgt	r2, #1
 8006458:	4413      	add	r3, r2
 800645a:	e7e0      	b.n	800641e <_printf_float+0x192>
 800645c:	6823      	ldr	r3, [r4, #0]
 800645e:	055a      	lsls	r2, r3, #21
 8006460:	d407      	bmi.n	8006472 <_printf_float+0x1e6>
 8006462:	6923      	ldr	r3, [r4, #16]
 8006464:	4642      	mov	r2, r8
 8006466:	4631      	mov	r1, r6
 8006468:	4628      	mov	r0, r5
 800646a:	47b8      	blx	r7
 800646c:	3001      	adds	r0, #1
 800646e:	d12b      	bne.n	80064c8 <_printf_float+0x23c>
 8006470:	e767      	b.n	8006342 <_printf_float+0xb6>
 8006472:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006476:	f240 80dd 	bls.w	8006634 <_printf_float+0x3a8>
 800647a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800647e:	2200      	movs	r2, #0
 8006480:	2300      	movs	r3, #0
 8006482:	f7fa fb21 	bl	8000ac8 <__aeabi_dcmpeq>
 8006486:	2800      	cmp	r0, #0
 8006488:	d033      	beq.n	80064f2 <_printf_float+0x266>
 800648a:	4a37      	ldr	r2, [pc, #220]	@ (8006568 <_printf_float+0x2dc>)
 800648c:	2301      	movs	r3, #1
 800648e:	4631      	mov	r1, r6
 8006490:	4628      	mov	r0, r5
 8006492:	47b8      	blx	r7
 8006494:	3001      	adds	r0, #1
 8006496:	f43f af54 	beq.w	8006342 <_printf_float+0xb6>
 800649a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800649e:	4543      	cmp	r3, r8
 80064a0:	db02      	blt.n	80064a8 <_printf_float+0x21c>
 80064a2:	6823      	ldr	r3, [r4, #0]
 80064a4:	07d8      	lsls	r0, r3, #31
 80064a6:	d50f      	bpl.n	80064c8 <_printf_float+0x23c>
 80064a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064ac:	4631      	mov	r1, r6
 80064ae:	4628      	mov	r0, r5
 80064b0:	47b8      	blx	r7
 80064b2:	3001      	adds	r0, #1
 80064b4:	f43f af45 	beq.w	8006342 <_printf_float+0xb6>
 80064b8:	f04f 0900 	mov.w	r9, #0
 80064bc:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 80064c0:	f104 0a1a 	add.w	sl, r4, #26
 80064c4:	45c8      	cmp	r8, r9
 80064c6:	dc09      	bgt.n	80064dc <_printf_float+0x250>
 80064c8:	6823      	ldr	r3, [r4, #0]
 80064ca:	079b      	lsls	r3, r3, #30
 80064cc:	f100 8103 	bmi.w	80066d6 <_printf_float+0x44a>
 80064d0:	68e0      	ldr	r0, [r4, #12]
 80064d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064d4:	4298      	cmp	r0, r3
 80064d6:	bfb8      	it	lt
 80064d8:	4618      	movlt	r0, r3
 80064da:	e734      	b.n	8006346 <_printf_float+0xba>
 80064dc:	2301      	movs	r3, #1
 80064de:	4652      	mov	r2, sl
 80064e0:	4631      	mov	r1, r6
 80064e2:	4628      	mov	r0, r5
 80064e4:	47b8      	blx	r7
 80064e6:	3001      	adds	r0, #1
 80064e8:	f43f af2b 	beq.w	8006342 <_printf_float+0xb6>
 80064ec:	f109 0901 	add.w	r9, r9, #1
 80064f0:	e7e8      	b.n	80064c4 <_printf_float+0x238>
 80064f2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	dc39      	bgt.n	800656c <_printf_float+0x2e0>
 80064f8:	4a1b      	ldr	r2, [pc, #108]	@ (8006568 <_printf_float+0x2dc>)
 80064fa:	2301      	movs	r3, #1
 80064fc:	4631      	mov	r1, r6
 80064fe:	4628      	mov	r0, r5
 8006500:	47b8      	blx	r7
 8006502:	3001      	adds	r0, #1
 8006504:	f43f af1d 	beq.w	8006342 <_printf_float+0xb6>
 8006508:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800650c:	ea59 0303 	orrs.w	r3, r9, r3
 8006510:	d102      	bne.n	8006518 <_printf_float+0x28c>
 8006512:	6823      	ldr	r3, [r4, #0]
 8006514:	07d9      	lsls	r1, r3, #31
 8006516:	d5d7      	bpl.n	80064c8 <_printf_float+0x23c>
 8006518:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800651c:	4631      	mov	r1, r6
 800651e:	4628      	mov	r0, r5
 8006520:	47b8      	blx	r7
 8006522:	3001      	adds	r0, #1
 8006524:	f43f af0d 	beq.w	8006342 <_printf_float+0xb6>
 8006528:	f04f 0a00 	mov.w	sl, #0
 800652c:	f104 0b1a 	add.w	fp, r4, #26
 8006530:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006532:	425b      	negs	r3, r3
 8006534:	4553      	cmp	r3, sl
 8006536:	dc01      	bgt.n	800653c <_printf_float+0x2b0>
 8006538:	464b      	mov	r3, r9
 800653a:	e793      	b.n	8006464 <_printf_float+0x1d8>
 800653c:	2301      	movs	r3, #1
 800653e:	465a      	mov	r2, fp
 8006540:	4631      	mov	r1, r6
 8006542:	4628      	mov	r0, r5
 8006544:	47b8      	blx	r7
 8006546:	3001      	adds	r0, #1
 8006548:	f43f aefb 	beq.w	8006342 <_printf_float+0xb6>
 800654c:	f10a 0a01 	add.w	sl, sl, #1
 8006550:	e7ee      	b.n	8006530 <_printf_float+0x2a4>
 8006552:	bf00      	nop
 8006554:	7fefffff 	.word	0x7fefffff
 8006558:	0800af64 	.word	0x0800af64
 800655c:	0800af60 	.word	0x0800af60
 8006560:	0800af6c 	.word	0x0800af6c
 8006564:	0800af68 	.word	0x0800af68
 8006568:	0800af70 	.word	0x0800af70
 800656c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800656e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006572:	4553      	cmp	r3, sl
 8006574:	bfa8      	it	ge
 8006576:	4653      	movge	r3, sl
 8006578:	2b00      	cmp	r3, #0
 800657a:	4699      	mov	r9, r3
 800657c:	dc36      	bgt.n	80065ec <_printf_float+0x360>
 800657e:	f04f 0b00 	mov.w	fp, #0
 8006582:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006586:	f104 021a 	add.w	r2, r4, #26
 800658a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800658c:	9306      	str	r3, [sp, #24]
 800658e:	eba3 0309 	sub.w	r3, r3, r9
 8006592:	455b      	cmp	r3, fp
 8006594:	dc31      	bgt.n	80065fa <_printf_float+0x36e>
 8006596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006598:	459a      	cmp	sl, r3
 800659a:	dc3a      	bgt.n	8006612 <_printf_float+0x386>
 800659c:	6823      	ldr	r3, [r4, #0]
 800659e:	07da      	lsls	r2, r3, #31
 80065a0:	d437      	bmi.n	8006612 <_printf_float+0x386>
 80065a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065a4:	ebaa 0903 	sub.w	r9, sl, r3
 80065a8:	9b06      	ldr	r3, [sp, #24]
 80065aa:	ebaa 0303 	sub.w	r3, sl, r3
 80065ae:	4599      	cmp	r9, r3
 80065b0:	bfa8      	it	ge
 80065b2:	4699      	movge	r9, r3
 80065b4:	f1b9 0f00 	cmp.w	r9, #0
 80065b8:	dc33      	bgt.n	8006622 <_printf_float+0x396>
 80065ba:	f04f 0800 	mov.w	r8, #0
 80065be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065c2:	f104 0b1a 	add.w	fp, r4, #26
 80065c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065c8:	ebaa 0303 	sub.w	r3, sl, r3
 80065cc:	eba3 0309 	sub.w	r3, r3, r9
 80065d0:	4543      	cmp	r3, r8
 80065d2:	f77f af79 	ble.w	80064c8 <_printf_float+0x23c>
 80065d6:	2301      	movs	r3, #1
 80065d8:	465a      	mov	r2, fp
 80065da:	4631      	mov	r1, r6
 80065dc:	4628      	mov	r0, r5
 80065de:	47b8      	blx	r7
 80065e0:	3001      	adds	r0, #1
 80065e2:	f43f aeae 	beq.w	8006342 <_printf_float+0xb6>
 80065e6:	f108 0801 	add.w	r8, r8, #1
 80065ea:	e7ec      	b.n	80065c6 <_printf_float+0x33a>
 80065ec:	4642      	mov	r2, r8
 80065ee:	4631      	mov	r1, r6
 80065f0:	4628      	mov	r0, r5
 80065f2:	47b8      	blx	r7
 80065f4:	3001      	adds	r0, #1
 80065f6:	d1c2      	bne.n	800657e <_printf_float+0x2f2>
 80065f8:	e6a3      	b.n	8006342 <_printf_float+0xb6>
 80065fa:	2301      	movs	r3, #1
 80065fc:	4631      	mov	r1, r6
 80065fe:	4628      	mov	r0, r5
 8006600:	9206      	str	r2, [sp, #24]
 8006602:	47b8      	blx	r7
 8006604:	3001      	adds	r0, #1
 8006606:	f43f ae9c 	beq.w	8006342 <_printf_float+0xb6>
 800660a:	9a06      	ldr	r2, [sp, #24]
 800660c:	f10b 0b01 	add.w	fp, fp, #1
 8006610:	e7bb      	b.n	800658a <_printf_float+0x2fe>
 8006612:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006616:	4631      	mov	r1, r6
 8006618:	4628      	mov	r0, r5
 800661a:	47b8      	blx	r7
 800661c:	3001      	adds	r0, #1
 800661e:	d1c0      	bne.n	80065a2 <_printf_float+0x316>
 8006620:	e68f      	b.n	8006342 <_printf_float+0xb6>
 8006622:	9a06      	ldr	r2, [sp, #24]
 8006624:	464b      	mov	r3, r9
 8006626:	4442      	add	r2, r8
 8006628:	4631      	mov	r1, r6
 800662a:	4628      	mov	r0, r5
 800662c:	47b8      	blx	r7
 800662e:	3001      	adds	r0, #1
 8006630:	d1c3      	bne.n	80065ba <_printf_float+0x32e>
 8006632:	e686      	b.n	8006342 <_printf_float+0xb6>
 8006634:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006638:	f1ba 0f01 	cmp.w	sl, #1
 800663c:	dc01      	bgt.n	8006642 <_printf_float+0x3b6>
 800663e:	07db      	lsls	r3, r3, #31
 8006640:	d536      	bpl.n	80066b0 <_printf_float+0x424>
 8006642:	2301      	movs	r3, #1
 8006644:	4642      	mov	r2, r8
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	f43f ae78 	beq.w	8006342 <_printf_float+0xb6>
 8006652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006656:	4631      	mov	r1, r6
 8006658:	4628      	mov	r0, r5
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	f43f ae70 	beq.w	8006342 <_printf_float+0xb6>
 8006662:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006666:	2200      	movs	r2, #0
 8006668:	2300      	movs	r3, #0
 800666a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800666e:	f7fa fa2b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006672:	b9c0      	cbnz	r0, 80066a6 <_printf_float+0x41a>
 8006674:	4653      	mov	r3, sl
 8006676:	f108 0201 	add.w	r2, r8, #1
 800667a:	4631      	mov	r1, r6
 800667c:	4628      	mov	r0, r5
 800667e:	47b8      	blx	r7
 8006680:	3001      	adds	r0, #1
 8006682:	d10c      	bne.n	800669e <_printf_float+0x412>
 8006684:	e65d      	b.n	8006342 <_printf_float+0xb6>
 8006686:	2301      	movs	r3, #1
 8006688:	465a      	mov	r2, fp
 800668a:	4631      	mov	r1, r6
 800668c:	4628      	mov	r0, r5
 800668e:	47b8      	blx	r7
 8006690:	3001      	adds	r0, #1
 8006692:	f43f ae56 	beq.w	8006342 <_printf_float+0xb6>
 8006696:	f108 0801 	add.w	r8, r8, #1
 800669a:	45d0      	cmp	r8, sl
 800669c:	dbf3      	blt.n	8006686 <_printf_float+0x3fa>
 800669e:	464b      	mov	r3, r9
 80066a0:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80066a4:	e6df      	b.n	8006466 <_printf_float+0x1da>
 80066a6:	f04f 0800 	mov.w	r8, #0
 80066aa:	f104 0b1a 	add.w	fp, r4, #26
 80066ae:	e7f4      	b.n	800669a <_printf_float+0x40e>
 80066b0:	2301      	movs	r3, #1
 80066b2:	4642      	mov	r2, r8
 80066b4:	e7e1      	b.n	800667a <_printf_float+0x3ee>
 80066b6:	2301      	movs	r3, #1
 80066b8:	464a      	mov	r2, r9
 80066ba:	4631      	mov	r1, r6
 80066bc:	4628      	mov	r0, r5
 80066be:	47b8      	blx	r7
 80066c0:	3001      	adds	r0, #1
 80066c2:	f43f ae3e 	beq.w	8006342 <_printf_float+0xb6>
 80066c6:	f108 0801 	add.w	r8, r8, #1
 80066ca:	68e3      	ldr	r3, [r4, #12]
 80066cc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066ce:	1a5b      	subs	r3, r3, r1
 80066d0:	4543      	cmp	r3, r8
 80066d2:	dcf0      	bgt.n	80066b6 <_printf_float+0x42a>
 80066d4:	e6fc      	b.n	80064d0 <_printf_float+0x244>
 80066d6:	f04f 0800 	mov.w	r8, #0
 80066da:	f104 0919 	add.w	r9, r4, #25
 80066de:	e7f4      	b.n	80066ca <_printf_float+0x43e>

080066e0 <_printf_common>:
 80066e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066e4:	4616      	mov	r6, r2
 80066e6:	4698      	mov	r8, r3
 80066e8:	688a      	ldr	r2, [r1, #8]
 80066ea:	690b      	ldr	r3, [r1, #16]
 80066ec:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066f0:	4293      	cmp	r3, r2
 80066f2:	bfb8      	it	lt
 80066f4:	4613      	movlt	r3, r2
 80066f6:	6033      	str	r3, [r6, #0]
 80066f8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066fc:	4607      	mov	r7, r0
 80066fe:	460c      	mov	r4, r1
 8006700:	b10a      	cbz	r2, 8006706 <_printf_common+0x26>
 8006702:	3301      	adds	r3, #1
 8006704:	6033      	str	r3, [r6, #0]
 8006706:	6823      	ldr	r3, [r4, #0]
 8006708:	0699      	lsls	r1, r3, #26
 800670a:	bf42      	ittt	mi
 800670c:	6833      	ldrmi	r3, [r6, #0]
 800670e:	3302      	addmi	r3, #2
 8006710:	6033      	strmi	r3, [r6, #0]
 8006712:	6825      	ldr	r5, [r4, #0]
 8006714:	f015 0506 	ands.w	r5, r5, #6
 8006718:	d106      	bne.n	8006728 <_printf_common+0x48>
 800671a:	f104 0a19 	add.w	sl, r4, #25
 800671e:	68e3      	ldr	r3, [r4, #12]
 8006720:	6832      	ldr	r2, [r6, #0]
 8006722:	1a9b      	subs	r3, r3, r2
 8006724:	42ab      	cmp	r3, r5
 8006726:	dc26      	bgt.n	8006776 <_printf_common+0x96>
 8006728:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800672c:	6822      	ldr	r2, [r4, #0]
 800672e:	3b00      	subs	r3, #0
 8006730:	bf18      	it	ne
 8006732:	2301      	movne	r3, #1
 8006734:	0692      	lsls	r2, r2, #26
 8006736:	d42b      	bmi.n	8006790 <_printf_common+0xb0>
 8006738:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800673c:	4641      	mov	r1, r8
 800673e:	4638      	mov	r0, r7
 8006740:	47c8      	blx	r9
 8006742:	3001      	adds	r0, #1
 8006744:	d01e      	beq.n	8006784 <_printf_common+0xa4>
 8006746:	6823      	ldr	r3, [r4, #0]
 8006748:	6922      	ldr	r2, [r4, #16]
 800674a:	f003 0306 	and.w	r3, r3, #6
 800674e:	2b04      	cmp	r3, #4
 8006750:	bf02      	ittt	eq
 8006752:	68e5      	ldreq	r5, [r4, #12]
 8006754:	6833      	ldreq	r3, [r6, #0]
 8006756:	1aed      	subeq	r5, r5, r3
 8006758:	68a3      	ldr	r3, [r4, #8]
 800675a:	bf0c      	ite	eq
 800675c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006760:	2500      	movne	r5, #0
 8006762:	4293      	cmp	r3, r2
 8006764:	bfc4      	itt	gt
 8006766:	1a9b      	subgt	r3, r3, r2
 8006768:	18ed      	addgt	r5, r5, r3
 800676a:	2600      	movs	r6, #0
 800676c:	341a      	adds	r4, #26
 800676e:	42b5      	cmp	r5, r6
 8006770:	d11a      	bne.n	80067a8 <_printf_common+0xc8>
 8006772:	2000      	movs	r0, #0
 8006774:	e008      	b.n	8006788 <_printf_common+0xa8>
 8006776:	2301      	movs	r3, #1
 8006778:	4652      	mov	r2, sl
 800677a:	4641      	mov	r1, r8
 800677c:	4638      	mov	r0, r7
 800677e:	47c8      	blx	r9
 8006780:	3001      	adds	r0, #1
 8006782:	d103      	bne.n	800678c <_printf_common+0xac>
 8006784:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006788:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800678c:	3501      	adds	r5, #1
 800678e:	e7c6      	b.n	800671e <_printf_common+0x3e>
 8006790:	18e1      	adds	r1, r4, r3
 8006792:	1c5a      	adds	r2, r3, #1
 8006794:	2030      	movs	r0, #48	@ 0x30
 8006796:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800679a:	4422      	add	r2, r4
 800679c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067a0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067a4:	3302      	adds	r3, #2
 80067a6:	e7c7      	b.n	8006738 <_printf_common+0x58>
 80067a8:	2301      	movs	r3, #1
 80067aa:	4622      	mov	r2, r4
 80067ac:	4641      	mov	r1, r8
 80067ae:	4638      	mov	r0, r7
 80067b0:	47c8      	blx	r9
 80067b2:	3001      	adds	r0, #1
 80067b4:	d0e6      	beq.n	8006784 <_printf_common+0xa4>
 80067b6:	3601      	adds	r6, #1
 80067b8:	e7d9      	b.n	800676e <_printf_common+0x8e>
	...

080067bc <_printf_i>:
 80067bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067c0:	7e0f      	ldrb	r7, [r1, #24]
 80067c2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067c4:	2f78      	cmp	r7, #120	@ 0x78
 80067c6:	4691      	mov	r9, r2
 80067c8:	4680      	mov	r8, r0
 80067ca:	460c      	mov	r4, r1
 80067cc:	469a      	mov	sl, r3
 80067ce:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067d2:	d807      	bhi.n	80067e4 <_printf_i+0x28>
 80067d4:	2f62      	cmp	r7, #98	@ 0x62
 80067d6:	d80a      	bhi.n	80067ee <_printf_i+0x32>
 80067d8:	2f00      	cmp	r7, #0
 80067da:	f000 80d1 	beq.w	8006980 <_printf_i+0x1c4>
 80067de:	2f58      	cmp	r7, #88	@ 0x58
 80067e0:	f000 80b8 	beq.w	8006954 <_printf_i+0x198>
 80067e4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067e8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067ec:	e03a      	b.n	8006864 <_printf_i+0xa8>
 80067ee:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067f2:	2b15      	cmp	r3, #21
 80067f4:	d8f6      	bhi.n	80067e4 <_printf_i+0x28>
 80067f6:	a101      	add	r1, pc, #4	@ (adr r1, 80067fc <_printf_i+0x40>)
 80067f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067fc:	08006855 	.word	0x08006855
 8006800:	08006869 	.word	0x08006869
 8006804:	080067e5 	.word	0x080067e5
 8006808:	080067e5 	.word	0x080067e5
 800680c:	080067e5 	.word	0x080067e5
 8006810:	080067e5 	.word	0x080067e5
 8006814:	08006869 	.word	0x08006869
 8006818:	080067e5 	.word	0x080067e5
 800681c:	080067e5 	.word	0x080067e5
 8006820:	080067e5 	.word	0x080067e5
 8006824:	080067e5 	.word	0x080067e5
 8006828:	08006967 	.word	0x08006967
 800682c:	08006893 	.word	0x08006893
 8006830:	08006921 	.word	0x08006921
 8006834:	080067e5 	.word	0x080067e5
 8006838:	080067e5 	.word	0x080067e5
 800683c:	08006989 	.word	0x08006989
 8006840:	080067e5 	.word	0x080067e5
 8006844:	08006893 	.word	0x08006893
 8006848:	080067e5 	.word	0x080067e5
 800684c:	080067e5 	.word	0x080067e5
 8006850:	08006929 	.word	0x08006929
 8006854:	6833      	ldr	r3, [r6, #0]
 8006856:	1d1a      	adds	r2, r3, #4
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	6032      	str	r2, [r6, #0]
 800685c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006860:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006864:	2301      	movs	r3, #1
 8006866:	e09c      	b.n	80069a2 <_printf_i+0x1e6>
 8006868:	6833      	ldr	r3, [r6, #0]
 800686a:	6820      	ldr	r0, [r4, #0]
 800686c:	1d19      	adds	r1, r3, #4
 800686e:	6031      	str	r1, [r6, #0]
 8006870:	0606      	lsls	r6, r0, #24
 8006872:	d501      	bpl.n	8006878 <_printf_i+0xbc>
 8006874:	681d      	ldr	r5, [r3, #0]
 8006876:	e003      	b.n	8006880 <_printf_i+0xc4>
 8006878:	0645      	lsls	r5, r0, #25
 800687a:	d5fb      	bpl.n	8006874 <_printf_i+0xb8>
 800687c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006880:	2d00      	cmp	r5, #0
 8006882:	da03      	bge.n	800688c <_printf_i+0xd0>
 8006884:	232d      	movs	r3, #45	@ 0x2d
 8006886:	426d      	negs	r5, r5
 8006888:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800688c:	4858      	ldr	r0, [pc, #352]	@ (80069f0 <_printf_i+0x234>)
 800688e:	230a      	movs	r3, #10
 8006890:	e011      	b.n	80068b6 <_printf_i+0xfa>
 8006892:	6821      	ldr	r1, [r4, #0]
 8006894:	6833      	ldr	r3, [r6, #0]
 8006896:	0608      	lsls	r0, r1, #24
 8006898:	f853 5b04 	ldr.w	r5, [r3], #4
 800689c:	d402      	bmi.n	80068a4 <_printf_i+0xe8>
 800689e:	0649      	lsls	r1, r1, #25
 80068a0:	bf48      	it	mi
 80068a2:	b2ad      	uxthmi	r5, r5
 80068a4:	2f6f      	cmp	r7, #111	@ 0x6f
 80068a6:	4852      	ldr	r0, [pc, #328]	@ (80069f0 <_printf_i+0x234>)
 80068a8:	6033      	str	r3, [r6, #0]
 80068aa:	bf14      	ite	ne
 80068ac:	230a      	movne	r3, #10
 80068ae:	2308      	moveq	r3, #8
 80068b0:	2100      	movs	r1, #0
 80068b2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068b6:	6866      	ldr	r6, [r4, #4]
 80068b8:	60a6      	str	r6, [r4, #8]
 80068ba:	2e00      	cmp	r6, #0
 80068bc:	db05      	blt.n	80068ca <_printf_i+0x10e>
 80068be:	6821      	ldr	r1, [r4, #0]
 80068c0:	432e      	orrs	r6, r5
 80068c2:	f021 0104 	bic.w	r1, r1, #4
 80068c6:	6021      	str	r1, [r4, #0]
 80068c8:	d04b      	beq.n	8006962 <_printf_i+0x1a6>
 80068ca:	4616      	mov	r6, r2
 80068cc:	fbb5 f1f3 	udiv	r1, r5, r3
 80068d0:	fb03 5711 	mls	r7, r3, r1, r5
 80068d4:	5dc7      	ldrb	r7, [r0, r7]
 80068d6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068da:	462f      	mov	r7, r5
 80068dc:	42bb      	cmp	r3, r7
 80068de:	460d      	mov	r5, r1
 80068e0:	d9f4      	bls.n	80068cc <_printf_i+0x110>
 80068e2:	2b08      	cmp	r3, #8
 80068e4:	d10b      	bne.n	80068fe <_printf_i+0x142>
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	07df      	lsls	r7, r3, #31
 80068ea:	d508      	bpl.n	80068fe <_printf_i+0x142>
 80068ec:	6923      	ldr	r3, [r4, #16]
 80068ee:	6861      	ldr	r1, [r4, #4]
 80068f0:	4299      	cmp	r1, r3
 80068f2:	bfde      	ittt	le
 80068f4:	2330      	movle	r3, #48	@ 0x30
 80068f6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068fa:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80068fe:	1b92      	subs	r2, r2, r6
 8006900:	6122      	str	r2, [r4, #16]
 8006902:	f8cd a000 	str.w	sl, [sp]
 8006906:	464b      	mov	r3, r9
 8006908:	aa03      	add	r2, sp, #12
 800690a:	4621      	mov	r1, r4
 800690c:	4640      	mov	r0, r8
 800690e:	f7ff fee7 	bl	80066e0 <_printf_common>
 8006912:	3001      	adds	r0, #1
 8006914:	d14a      	bne.n	80069ac <_printf_i+0x1f0>
 8006916:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800691a:	b004      	add	sp, #16
 800691c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006920:	6823      	ldr	r3, [r4, #0]
 8006922:	f043 0320 	orr.w	r3, r3, #32
 8006926:	6023      	str	r3, [r4, #0]
 8006928:	4832      	ldr	r0, [pc, #200]	@ (80069f4 <_printf_i+0x238>)
 800692a:	2778      	movs	r7, #120	@ 0x78
 800692c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006930:	6823      	ldr	r3, [r4, #0]
 8006932:	6831      	ldr	r1, [r6, #0]
 8006934:	061f      	lsls	r7, r3, #24
 8006936:	f851 5b04 	ldr.w	r5, [r1], #4
 800693a:	d402      	bmi.n	8006942 <_printf_i+0x186>
 800693c:	065f      	lsls	r7, r3, #25
 800693e:	bf48      	it	mi
 8006940:	b2ad      	uxthmi	r5, r5
 8006942:	6031      	str	r1, [r6, #0]
 8006944:	07d9      	lsls	r1, r3, #31
 8006946:	bf44      	itt	mi
 8006948:	f043 0320 	orrmi.w	r3, r3, #32
 800694c:	6023      	strmi	r3, [r4, #0]
 800694e:	b11d      	cbz	r5, 8006958 <_printf_i+0x19c>
 8006950:	2310      	movs	r3, #16
 8006952:	e7ad      	b.n	80068b0 <_printf_i+0xf4>
 8006954:	4826      	ldr	r0, [pc, #152]	@ (80069f0 <_printf_i+0x234>)
 8006956:	e7e9      	b.n	800692c <_printf_i+0x170>
 8006958:	6823      	ldr	r3, [r4, #0]
 800695a:	f023 0320 	bic.w	r3, r3, #32
 800695e:	6023      	str	r3, [r4, #0]
 8006960:	e7f6      	b.n	8006950 <_printf_i+0x194>
 8006962:	4616      	mov	r6, r2
 8006964:	e7bd      	b.n	80068e2 <_printf_i+0x126>
 8006966:	6833      	ldr	r3, [r6, #0]
 8006968:	6825      	ldr	r5, [r4, #0]
 800696a:	6961      	ldr	r1, [r4, #20]
 800696c:	1d18      	adds	r0, r3, #4
 800696e:	6030      	str	r0, [r6, #0]
 8006970:	062e      	lsls	r6, r5, #24
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	d501      	bpl.n	800697a <_printf_i+0x1be>
 8006976:	6019      	str	r1, [r3, #0]
 8006978:	e002      	b.n	8006980 <_printf_i+0x1c4>
 800697a:	0668      	lsls	r0, r5, #25
 800697c:	d5fb      	bpl.n	8006976 <_printf_i+0x1ba>
 800697e:	8019      	strh	r1, [r3, #0]
 8006980:	2300      	movs	r3, #0
 8006982:	6123      	str	r3, [r4, #16]
 8006984:	4616      	mov	r6, r2
 8006986:	e7bc      	b.n	8006902 <_printf_i+0x146>
 8006988:	6833      	ldr	r3, [r6, #0]
 800698a:	1d1a      	adds	r2, r3, #4
 800698c:	6032      	str	r2, [r6, #0]
 800698e:	681e      	ldr	r6, [r3, #0]
 8006990:	6862      	ldr	r2, [r4, #4]
 8006992:	2100      	movs	r1, #0
 8006994:	4630      	mov	r0, r6
 8006996:	f7f9 fc1b 	bl	80001d0 <memchr>
 800699a:	b108      	cbz	r0, 80069a0 <_printf_i+0x1e4>
 800699c:	1b80      	subs	r0, r0, r6
 800699e:	6060      	str	r0, [r4, #4]
 80069a0:	6863      	ldr	r3, [r4, #4]
 80069a2:	6123      	str	r3, [r4, #16]
 80069a4:	2300      	movs	r3, #0
 80069a6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069aa:	e7aa      	b.n	8006902 <_printf_i+0x146>
 80069ac:	6923      	ldr	r3, [r4, #16]
 80069ae:	4632      	mov	r2, r6
 80069b0:	4649      	mov	r1, r9
 80069b2:	4640      	mov	r0, r8
 80069b4:	47d0      	blx	sl
 80069b6:	3001      	adds	r0, #1
 80069b8:	d0ad      	beq.n	8006916 <_printf_i+0x15a>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	079b      	lsls	r3, r3, #30
 80069be:	d413      	bmi.n	80069e8 <_printf_i+0x22c>
 80069c0:	68e0      	ldr	r0, [r4, #12]
 80069c2:	9b03      	ldr	r3, [sp, #12]
 80069c4:	4298      	cmp	r0, r3
 80069c6:	bfb8      	it	lt
 80069c8:	4618      	movlt	r0, r3
 80069ca:	e7a6      	b.n	800691a <_printf_i+0x15e>
 80069cc:	2301      	movs	r3, #1
 80069ce:	4632      	mov	r2, r6
 80069d0:	4649      	mov	r1, r9
 80069d2:	4640      	mov	r0, r8
 80069d4:	47d0      	blx	sl
 80069d6:	3001      	adds	r0, #1
 80069d8:	d09d      	beq.n	8006916 <_printf_i+0x15a>
 80069da:	3501      	adds	r5, #1
 80069dc:	68e3      	ldr	r3, [r4, #12]
 80069de:	9903      	ldr	r1, [sp, #12]
 80069e0:	1a5b      	subs	r3, r3, r1
 80069e2:	42ab      	cmp	r3, r5
 80069e4:	dcf2      	bgt.n	80069cc <_printf_i+0x210>
 80069e6:	e7eb      	b.n	80069c0 <_printf_i+0x204>
 80069e8:	2500      	movs	r5, #0
 80069ea:	f104 0619 	add.w	r6, r4, #25
 80069ee:	e7f5      	b.n	80069dc <_printf_i+0x220>
 80069f0:	0800af72 	.word	0x0800af72
 80069f4:	0800af83 	.word	0x0800af83

080069f8 <_scanf_float>:
 80069f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069fc:	b087      	sub	sp, #28
 80069fe:	4691      	mov	r9, r2
 8006a00:	9303      	str	r3, [sp, #12]
 8006a02:	688b      	ldr	r3, [r1, #8]
 8006a04:	1e5a      	subs	r2, r3, #1
 8006a06:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006a0a:	bf81      	itttt	hi
 8006a0c:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006a10:	eb03 0b05 	addhi.w	fp, r3, r5
 8006a14:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006a18:	608b      	strhi	r3, [r1, #8]
 8006a1a:	680b      	ldr	r3, [r1, #0]
 8006a1c:	460a      	mov	r2, r1
 8006a1e:	f04f 0500 	mov.w	r5, #0
 8006a22:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006a26:	f842 3b1c 	str.w	r3, [r2], #28
 8006a2a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006a2e:	4680      	mov	r8, r0
 8006a30:	460c      	mov	r4, r1
 8006a32:	bf98      	it	ls
 8006a34:	f04f 0b00 	movls.w	fp, #0
 8006a38:	9201      	str	r2, [sp, #4]
 8006a3a:	4616      	mov	r6, r2
 8006a3c:	46aa      	mov	sl, r5
 8006a3e:	462f      	mov	r7, r5
 8006a40:	9502      	str	r5, [sp, #8]
 8006a42:	68a2      	ldr	r2, [r4, #8]
 8006a44:	b15a      	cbz	r2, 8006a5e <_scanf_float+0x66>
 8006a46:	f8d9 3000 	ldr.w	r3, [r9]
 8006a4a:	781b      	ldrb	r3, [r3, #0]
 8006a4c:	2b4e      	cmp	r3, #78	@ 0x4e
 8006a4e:	d863      	bhi.n	8006b18 <_scanf_float+0x120>
 8006a50:	2b40      	cmp	r3, #64	@ 0x40
 8006a52:	d83b      	bhi.n	8006acc <_scanf_float+0xd4>
 8006a54:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006a58:	b2c8      	uxtb	r0, r1
 8006a5a:	280e      	cmp	r0, #14
 8006a5c:	d939      	bls.n	8006ad2 <_scanf_float+0xda>
 8006a5e:	b11f      	cbz	r7, 8006a68 <_scanf_float+0x70>
 8006a60:	6823      	ldr	r3, [r4, #0]
 8006a62:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006a6c:	f1ba 0f01 	cmp.w	sl, #1
 8006a70:	f200 8114 	bhi.w	8006c9c <_scanf_float+0x2a4>
 8006a74:	9b01      	ldr	r3, [sp, #4]
 8006a76:	429e      	cmp	r6, r3
 8006a78:	f200 8105 	bhi.w	8006c86 <_scanf_float+0x28e>
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	b007      	add	sp, #28
 8006a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a84:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006a88:	2a0d      	cmp	r2, #13
 8006a8a:	d8e8      	bhi.n	8006a5e <_scanf_float+0x66>
 8006a8c:	a101      	add	r1, pc, #4	@ (adr r1, 8006a94 <_scanf_float+0x9c>)
 8006a8e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006bdd 	.word	0x08006bdd
 8006a98:	08006a5f 	.word	0x08006a5f
 8006a9c:	08006a5f 	.word	0x08006a5f
 8006aa0:	08006a5f 	.word	0x08006a5f
 8006aa4:	08006c39 	.word	0x08006c39
 8006aa8:	08006c13 	.word	0x08006c13
 8006aac:	08006a5f 	.word	0x08006a5f
 8006ab0:	08006a5f 	.word	0x08006a5f
 8006ab4:	08006beb 	.word	0x08006beb
 8006ab8:	08006a5f 	.word	0x08006a5f
 8006abc:	08006a5f 	.word	0x08006a5f
 8006ac0:	08006a5f 	.word	0x08006a5f
 8006ac4:	08006a5f 	.word	0x08006a5f
 8006ac8:	08006ba7 	.word	0x08006ba7
 8006acc:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006ad0:	e7da      	b.n	8006a88 <_scanf_float+0x90>
 8006ad2:	290e      	cmp	r1, #14
 8006ad4:	d8c3      	bhi.n	8006a5e <_scanf_float+0x66>
 8006ad6:	a001      	add	r0, pc, #4	@ (adr r0, 8006adc <_scanf_float+0xe4>)
 8006ad8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006adc:	08006b97 	.word	0x08006b97
 8006ae0:	08006a5f 	.word	0x08006a5f
 8006ae4:	08006b97 	.word	0x08006b97
 8006ae8:	08006c27 	.word	0x08006c27
 8006aec:	08006a5f 	.word	0x08006a5f
 8006af0:	08006b39 	.word	0x08006b39
 8006af4:	08006b7d 	.word	0x08006b7d
 8006af8:	08006b7d 	.word	0x08006b7d
 8006afc:	08006b7d 	.word	0x08006b7d
 8006b00:	08006b7d 	.word	0x08006b7d
 8006b04:	08006b7d 	.word	0x08006b7d
 8006b08:	08006b7d 	.word	0x08006b7d
 8006b0c:	08006b7d 	.word	0x08006b7d
 8006b10:	08006b7d 	.word	0x08006b7d
 8006b14:	08006b7d 	.word	0x08006b7d
 8006b18:	2b6e      	cmp	r3, #110	@ 0x6e
 8006b1a:	d809      	bhi.n	8006b30 <_scanf_float+0x138>
 8006b1c:	2b60      	cmp	r3, #96	@ 0x60
 8006b1e:	d8b1      	bhi.n	8006a84 <_scanf_float+0x8c>
 8006b20:	2b54      	cmp	r3, #84	@ 0x54
 8006b22:	d07b      	beq.n	8006c1c <_scanf_float+0x224>
 8006b24:	2b59      	cmp	r3, #89	@ 0x59
 8006b26:	d19a      	bne.n	8006a5e <_scanf_float+0x66>
 8006b28:	2d07      	cmp	r5, #7
 8006b2a:	d198      	bne.n	8006a5e <_scanf_float+0x66>
 8006b2c:	2508      	movs	r5, #8
 8006b2e:	e02f      	b.n	8006b90 <_scanf_float+0x198>
 8006b30:	2b74      	cmp	r3, #116	@ 0x74
 8006b32:	d073      	beq.n	8006c1c <_scanf_float+0x224>
 8006b34:	2b79      	cmp	r3, #121	@ 0x79
 8006b36:	e7f6      	b.n	8006b26 <_scanf_float+0x12e>
 8006b38:	6821      	ldr	r1, [r4, #0]
 8006b3a:	05c8      	lsls	r0, r1, #23
 8006b3c:	d51e      	bpl.n	8006b7c <_scanf_float+0x184>
 8006b3e:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006b42:	6021      	str	r1, [r4, #0]
 8006b44:	3701      	adds	r7, #1
 8006b46:	f1bb 0f00 	cmp.w	fp, #0
 8006b4a:	d003      	beq.n	8006b54 <_scanf_float+0x15c>
 8006b4c:	3201      	adds	r2, #1
 8006b4e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8006b52:	60a2      	str	r2, [r4, #8]
 8006b54:	68a3      	ldr	r3, [r4, #8]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	60a3      	str	r3, [r4, #8]
 8006b5a:	6923      	ldr	r3, [r4, #16]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	6123      	str	r3, [r4, #16]
 8006b60:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006b64:	3b01      	subs	r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	f8c9 3004 	str.w	r3, [r9, #4]
 8006b6c:	f340 8082 	ble.w	8006c74 <_scanf_float+0x27c>
 8006b70:	f8d9 3000 	ldr.w	r3, [r9]
 8006b74:	3301      	adds	r3, #1
 8006b76:	f8c9 3000 	str.w	r3, [r9]
 8006b7a:	e762      	b.n	8006a42 <_scanf_float+0x4a>
 8006b7c:	eb1a 0105 	adds.w	r1, sl, r5
 8006b80:	f47f af6d 	bne.w	8006a5e <_scanf_float+0x66>
 8006b84:	6822      	ldr	r2, [r4, #0]
 8006b86:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006b8a:	6022      	str	r2, [r4, #0]
 8006b8c:	460d      	mov	r5, r1
 8006b8e:	468a      	mov	sl, r1
 8006b90:	f806 3b01 	strb.w	r3, [r6], #1
 8006b94:	e7de      	b.n	8006b54 <_scanf_float+0x15c>
 8006b96:	6822      	ldr	r2, [r4, #0]
 8006b98:	0610      	lsls	r0, r2, #24
 8006b9a:	f57f af60 	bpl.w	8006a5e <_scanf_float+0x66>
 8006b9e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006ba2:	6022      	str	r2, [r4, #0]
 8006ba4:	e7f4      	b.n	8006b90 <_scanf_float+0x198>
 8006ba6:	f1ba 0f00 	cmp.w	sl, #0
 8006baa:	d10c      	bne.n	8006bc6 <_scanf_float+0x1ce>
 8006bac:	b977      	cbnz	r7, 8006bcc <_scanf_float+0x1d4>
 8006bae:	6822      	ldr	r2, [r4, #0]
 8006bb0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006bb4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006bb8:	d108      	bne.n	8006bcc <_scanf_float+0x1d4>
 8006bba:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006bbe:	6022      	str	r2, [r4, #0]
 8006bc0:	f04f 0a01 	mov.w	sl, #1
 8006bc4:	e7e4      	b.n	8006b90 <_scanf_float+0x198>
 8006bc6:	f1ba 0f02 	cmp.w	sl, #2
 8006bca:	d050      	beq.n	8006c6e <_scanf_float+0x276>
 8006bcc:	2d01      	cmp	r5, #1
 8006bce:	d002      	beq.n	8006bd6 <_scanf_float+0x1de>
 8006bd0:	2d04      	cmp	r5, #4
 8006bd2:	f47f af44 	bne.w	8006a5e <_scanf_float+0x66>
 8006bd6:	3501      	adds	r5, #1
 8006bd8:	b2ed      	uxtb	r5, r5
 8006bda:	e7d9      	b.n	8006b90 <_scanf_float+0x198>
 8006bdc:	f1ba 0f01 	cmp.w	sl, #1
 8006be0:	f47f af3d 	bne.w	8006a5e <_scanf_float+0x66>
 8006be4:	f04f 0a02 	mov.w	sl, #2
 8006be8:	e7d2      	b.n	8006b90 <_scanf_float+0x198>
 8006bea:	b975      	cbnz	r5, 8006c0a <_scanf_float+0x212>
 8006bec:	2f00      	cmp	r7, #0
 8006bee:	f47f af37 	bne.w	8006a60 <_scanf_float+0x68>
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006bf8:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006bfc:	f040 8103 	bne.w	8006e06 <_scanf_float+0x40e>
 8006c00:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c04:	6022      	str	r2, [r4, #0]
 8006c06:	2501      	movs	r5, #1
 8006c08:	e7c2      	b.n	8006b90 <_scanf_float+0x198>
 8006c0a:	2d03      	cmp	r5, #3
 8006c0c:	d0e3      	beq.n	8006bd6 <_scanf_float+0x1de>
 8006c0e:	2d05      	cmp	r5, #5
 8006c10:	e7df      	b.n	8006bd2 <_scanf_float+0x1da>
 8006c12:	2d02      	cmp	r5, #2
 8006c14:	f47f af23 	bne.w	8006a5e <_scanf_float+0x66>
 8006c18:	2503      	movs	r5, #3
 8006c1a:	e7b9      	b.n	8006b90 <_scanf_float+0x198>
 8006c1c:	2d06      	cmp	r5, #6
 8006c1e:	f47f af1e 	bne.w	8006a5e <_scanf_float+0x66>
 8006c22:	2507      	movs	r5, #7
 8006c24:	e7b4      	b.n	8006b90 <_scanf_float+0x198>
 8006c26:	6822      	ldr	r2, [r4, #0]
 8006c28:	0591      	lsls	r1, r2, #22
 8006c2a:	f57f af18 	bpl.w	8006a5e <_scanf_float+0x66>
 8006c2e:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006c32:	6022      	str	r2, [r4, #0]
 8006c34:	9702      	str	r7, [sp, #8]
 8006c36:	e7ab      	b.n	8006b90 <_scanf_float+0x198>
 8006c38:	6822      	ldr	r2, [r4, #0]
 8006c3a:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006c3e:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006c42:	d005      	beq.n	8006c50 <_scanf_float+0x258>
 8006c44:	0550      	lsls	r0, r2, #21
 8006c46:	f57f af0a 	bpl.w	8006a5e <_scanf_float+0x66>
 8006c4a:	2f00      	cmp	r7, #0
 8006c4c:	f000 80db 	beq.w	8006e06 <_scanf_float+0x40e>
 8006c50:	0591      	lsls	r1, r2, #22
 8006c52:	bf58      	it	pl
 8006c54:	9902      	ldrpl	r1, [sp, #8]
 8006c56:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006c5a:	bf58      	it	pl
 8006c5c:	1a79      	subpl	r1, r7, r1
 8006c5e:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006c62:	bf58      	it	pl
 8006c64:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006c68:	6022      	str	r2, [r4, #0]
 8006c6a:	2700      	movs	r7, #0
 8006c6c:	e790      	b.n	8006b90 <_scanf_float+0x198>
 8006c6e:	f04f 0a03 	mov.w	sl, #3
 8006c72:	e78d      	b.n	8006b90 <_scanf_float+0x198>
 8006c74:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006c78:	4649      	mov	r1, r9
 8006c7a:	4640      	mov	r0, r8
 8006c7c:	4798      	blx	r3
 8006c7e:	2800      	cmp	r0, #0
 8006c80:	f43f aedf 	beq.w	8006a42 <_scanf_float+0x4a>
 8006c84:	e6eb      	b.n	8006a5e <_scanf_float+0x66>
 8006c86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c8e:	464a      	mov	r2, r9
 8006c90:	4640      	mov	r0, r8
 8006c92:	4798      	blx	r3
 8006c94:	6923      	ldr	r3, [r4, #16]
 8006c96:	3b01      	subs	r3, #1
 8006c98:	6123      	str	r3, [r4, #16]
 8006c9a:	e6eb      	b.n	8006a74 <_scanf_float+0x7c>
 8006c9c:	1e6b      	subs	r3, r5, #1
 8006c9e:	2b06      	cmp	r3, #6
 8006ca0:	d824      	bhi.n	8006cec <_scanf_float+0x2f4>
 8006ca2:	2d02      	cmp	r5, #2
 8006ca4:	d836      	bhi.n	8006d14 <_scanf_float+0x31c>
 8006ca6:	9b01      	ldr	r3, [sp, #4]
 8006ca8:	429e      	cmp	r6, r3
 8006caa:	f67f aee7 	bls.w	8006a7c <_scanf_float+0x84>
 8006cae:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cb2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006cb6:	464a      	mov	r2, r9
 8006cb8:	4640      	mov	r0, r8
 8006cba:	4798      	blx	r3
 8006cbc:	6923      	ldr	r3, [r4, #16]
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	6123      	str	r3, [r4, #16]
 8006cc2:	e7f0      	b.n	8006ca6 <_scanf_float+0x2ae>
 8006cc4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006cc8:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006ccc:	464a      	mov	r2, r9
 8006cce:	4640      	mov	r0, r8
 8006cd0:	4798      	blx	r3
 8006cd2:	6923      	ldr	r3, [r4, #16]
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	6123      	str	r3, [r4, #16]
 8006cd8:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8006cdc:	fa5f fa8a 	uxtb.w	sl, sl
 8006ce0:	f1ba 0f02 	cmp.w	sl, #2
 8006ce4:	d1ee      	bne.n	8006cc4 <_scanf_float+0x2cc>
 8006ce6:	3d03      	subs	r5, #3
 8006ce8:	b2ed      	uxtb	r5, r5
 8006cea:	1b76      	subs	r6, r6, r5
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	05da      	lsls	r2, r3, #23
 8006cf0:	d530      	bpl.n	8006d54 <_scanf_float+0x35c>
 8006cf2:	055b      	lsls	r3, r3, #21
 8006cf4:	d511      	bpl.n	8006d1a <_scanf_float+0x322>
 8006cf6:	9b01      	ldr	r3, [sp, #4]
 8006cf8:	429e      	cmp	r6, r3
 8006cfa:	f67f aebf 	bls.w	8006a7c <_scanf_float+0x84>
 8006cfe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d02:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006d06:	464a      	mov	r2, r9
 8006d08:	4640      	mov	r0, r8
 8006d0a:	4798      	blx	r3
 8006d0c:	6923      	ldr	r3, [r4, #16]
 8006d0e:	3b01      	subs	r3, #1
 8006d10:	6123      	str	r3, [r4, #16]
 8006d12:	e7f0      	b.n	8006cf6 <_scanf_float+0x2fe>
 8006d14:	46aa      	mov	sl, r5
 8006d16:	46b3      	mov	fp, r6
 8006d18:	e7de      	b.n	8006cd8 <_scanf_float+0x2e0>
 8006d1a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006d1e:	6923      	ldr	r3, [r4, #16]
 8006d20:	2965      	cmp	r1, #101	@ 0x65
 8006d22:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8006d26:	f106 35ff 	add.w	r5, r6, #4294967295	@ 0xffffffff
 8006d2a:	6123      	str	r3, [r4, #16]
 8006d2c:	d00c      	beq.n	8006d48 <_scanf_float+0x350>
 8006d2e:	2945      	cmp	r1, #69	@ 0x45
 8006d30:	d00a      	beq.n	8006d48 <_scanf_float+0x350>
 8006d32:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d36:	464a      	mov	r2, r9
 8006d38:	4640      	mov	r0, r8
 8006d3a:	4798      	blx	r3
 8006d3c:	6923      	ldr	r3, [r4, #16]
 8006d3e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006d42:	3b01      	subs	r3, #1
 8006d44:	1eb5      	subs	r5, r6, #2
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006d4c:	464a      	mov	r2, r9
 8006d4e:	4640      	mov	r0, r8
 8006d50:	4798      	blx	r3
 8006d52:	462e      	mov	r6, r5
 8006d54:	6822      	ldr	r2, [r4, #0]
 8006d56:	f012 0210 	ands.w	r2, r2, #16
 8006d5a:	d001      	beq.n	8006d60 <_scanf_float+0x368>
 8006d5c:	2000      	movs	r0, #0
 8006d5e:	e68e      	b.n	8006a7e <_scanf_float+0x86>
 8006d60:	7032      	strb	r2, [r6, #0]
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d6c:	d125      	bne.n	8006dba <_scanf_float+0x3c2>
 8006d6e:	9b02      	ldr	r3, [sp, #8]
 8006d70:	429f      	cmp	r7, r3
 8006d72:	d00a      	beq.n	8006d8a <_scanf_float+0x392>
 8006d74:	1bda      	subs	r2, r3, r7
 8006d76:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006d7a:	429e      	cmp	r6, r3
 8006d7c:	bf28      	it	cs
 8006d7e:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006d82:	4922      	ldr	r1, [pc, #136]	@ (8006e0c <_scanf_float+0x414>)
 8006d84:	4630      	mov	r0, r6
 8006d86:	f000 f907 	bl	8006f98 <siprintf>
 8006d8a:	9901      	ldr	r1, [sp, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	4640      	mov	r0, r8
 8006d90:	f002 fc1a 	bl	80095c8 <_strtod_r>
 8006d94:	9b03      	ldr	r3, [sp, #12]
 8006d96:	6821      	ldr	r1, [r4, #0]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f011 0f02 	tst.w	r1, #2
 8006d9e:	ec57 6b10 	vmov	r6, r7, d0
 8006da2:	f103 0204 	add.w	r2, r3, #4
 8006da6:	d015      	beq.n	8006dd4 <_scanf_float+0x3dc>
 8006da8:	9903      	ldr	r1, [sp, #12]
 8006daa:	600a      	str	r2, [r1, #0]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	e9c3 6700 	strd	r6, r7, [r3]
 8006db2:	68e3      	ldr	r3, [r4, #12]
 8006db4:	3301      	adds	r3, #1
 8006db6:	60e3      	str	r3, [r4, #12]
 8006db8:	e7d0      	b.n	8006d5c <_scanf_float+0x364>
 8006dba:	9b04      	ldr	r3, [sp, #16]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d0e4      	beq.n	8006d8a <_scanf_float+0x392>
 8006dc0:	9905      	ldr	r1, [sp, #20]
 8006dc2:	230a      	movs	r3, #10
 8006dc4:	3101      	adds	r1, #1
 8006dc6:	4640      	mov	r0, r8
 8006dc8:	f002 fc7e 	bl	80096c8 <_strtol_r>
 8006dcc:	9b04      	ldr	r3, [sp, #16]
 8006dce:	9e05      	ldr	r6, [sp, #20]
 8006dd0:	1ac2      	subs	r2, r0, r3
 8006dd2:	e7d0      	b.n	8006d76 <_scanf_float+0x37e>
 8006dd4:	f011 0f04 	tst.w	r1, #4
 8006dd8:	9903      	ldr	r1, [sp, #12]
 8006dda:	600a      	str	r2, [r1, #0]
 8006ddc:	d1e6      	bne.n	8006dac <_scanf_float+0x3b4>
 8006dde:	681d      	ldr	r5, [r3, #0]
 8006de0:	4632      	mov	r2, r6
 8006de2:	463b      	mov	r3, r7
 8006de4:	4630      	mov	r0, r6
 8006de6:	4639      	mov	r1, r7
 8006de8:	f7f9 fea0 	bl	8000b2c <__aeabi_dcmpun>
 8006dec:	b128      	cbz	r0, 8006dfa <_scanf_float+0x402>
 8006dee:	4808      	ldr	r0, [pc, #32]	@ (8006e10 <_scanf_float+0x418>)
 8006df0:	f000 f9e0 	bl	80071b4 <nanf>
 8006df4:	ed85 0a00 	vstr	s0, [r5]
 8006df8:	e7db      	b.n	8006db2 <_scanf_float+0x3ba>
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	4639      	mov	r1, r7
 8006dfe:	f7f9 fef3 	bl	8000be8 <__aeabi_d2f>
 8006e02:	6028      	str	r0, [r5, #0]
 8006e04:	e7d5      	b.n	8006db2 <_scanf_float+0x3ba>
 8006e06:	2700      	movs	r7, #0
 8006e08:	e62e      	b.n	8006a68 <_scanf_float+0x70>
 8006e0a:	bf00      	nop
 8006e0c:	0800af94 	.word	0x0800af94
 8006e10:	0800b0d5 	.word	0x0800b0d5

08006e14 <std>:
 8006e14:	2300      	movs	r3, #0
 8006e16:	b510      	push	{r4, lr}
 8006e18:	4604      	mov	r4, r0
 8006e1a:	e9c0 3300 	strd	r3, r3, [r0]
 8006e1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e22:	6083      	str	r3, [r0, #8]
 8006e24:	8181      	strh	r1, [r0, #12]
 8006e26:	6643      	str	r3, [r0, #100]	@ 0x64
 8006e28:	81c2      	strh	r2, [r0, #14]
 8006e2a:	6183      	str	r3, [r0, #24]
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	2208      	movs	r2, #8
 8006e30:	305c      	adds	r0, #92	@ 0x5c
 8006e32:	f000 f930 	bl	8007096 <memset>
 8006e36:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <std+0x58>)
 8006e38:	6263      	str	r3, [r4, #36]	@ 0x24
 8006e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006e70 <std+0x5c>)
 8006e3c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006e74 <std+0x60>)
 8006e40:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006e42:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <std+0x64>)
 8006e44:	6323      	str	r3, [r4, #48]	@ 0x30
 8006e46:	4b0d      	ldr	r3, [pc, #52]	@ (8006e7c <std+0x68>)
 8006e48:	6224      	str	r4, [r4, #32]
 8006e4a:	429c      	cmp	r4, r3
 8006e4c:	d006      	beq.n	8006e5c <std+0x48>
 8006e4e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006e52:	4294      	cmp	r4, r2
 8006e54:	d002      	beq.n	8006e5c <std+0x48>
 8006e56:	33d0      	adds	r3, #208	@ 0xd0
 8006e58:	429c      	cmp	r4, r3
 8006e5a:	d105      	bne.n	8006e68 <std+0x54>
 8006e5c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006e60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e64:	f000 b994 	b.w	8007190 <__retarget_lock_init_recursive>
 8006e68:	bd10      	pop	{r4, pc}
 8006e6a:	bf00      	nop
 8006e6c:	08006fdd 	.word	0x08006fdd
 8006e70:	08006fff 	.word	0x08006fff
 8006e74:	08007037 	.word	0x08007037
 8006e78:	0800705b 	.word	0x0800705b
 8006e7c:	20000884 	.word	0x20000884

08006e80 <stdio_exit_handler>:
 8006e80:	4a02      	ldr	r2, [pc, #8]	@ (8006e8c <stdio_exit_handler+0xc>)
 8006e82:	4903      	ldr	r1, [pc, #12]	@ (8006e90 <stdio_exit_handler+0x10>)
 8006e84:	4803      	ldr	r0, [pc, #12]	@ (8006e94 <stdio_exit_handler+0x14>)
 8006e86:	f000 b869 	b.w	8006f5c <_fwalk_sglue>
 8006e8a:	bf00      	nop
 8006e8c:	2000000c 	.word	0x2000000c
 8006e90:	08009a85 	.word	0x08009a85
 8006e94:	2000001c 	.word	0x2000001c

08006e98 <cleanup_stdio>:
 8006e98:	6841      	ldr	r1, [r0, #4]
 8006e9a:	4b0c      	ldr	r3, [pc, #48]	@ (8006ecc <cleanup_stdio+0x34>)
 8006e9c:	4299      	cmp	r1, r3
 8006e9e:	b510      	push	{r4, lr}
 8006ea0:	4604      	mov	r4, r0
 8006ea2:	d001      	beq.n	8006ea8 <cleanup_stdio+0x10>
 8006ea4:	f002 fdee 	bl	8009a84 <_fflush_r>
 8006ea8:	68a1      	ldr	r1, [r4, #8]
 8006eaa:	4b09      	ldr	r3, [pc, #36]	@ (8006ed0 <cleanup_stdio+0x38>)
 8006eac:	4299      	cmp	r1, r3
 8006eae:	d002      	beq.n	8006eb6 <cleanup_stdio+0x1e>
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f002 fde7 	bl	8009a84 <_fflush_r>
 8006eb6:	68e1      	ldr	r1, [r4, #12]
 8006eb8:	4b06      	ldr	r3, [pc, #24]	@ (8006ed4 <cleanup_stdio+0x3c>)
 8006eba:	4299      	cmp	r1, r3
 8006ebc:	d004      	beq.n	8006ec8 <cleanup_stdio+0x30>
 8006ebe:	4620      	mov	r0, r4
 8006ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ec4:	f002 bdde 	b.w	8009a84 <_fflush_r>
 8006ec8:	bd10      	pop	{r4, pc}
 8006eca:	bf00      	nop
 8006ecc:	20000884 	.word	0x20000884
 8006ed0:	200008ec 	.word	0x200008ec
 8006ed4:	20000954 	.word	0x20000954

08006ed8 <global_stdio_init.part.0>:
 8006ed8:	b510      	push	{r4, lr}
 8006eda:	4b0b      	ldr	r3, [pc, #44]	@ (8006f08 <global_stdio_init.part.0+0x30>)
 8006edc:	4c0b      	ldr	r4, [pc, #44]	@ (8006f0c <global_stdio_init.part.0+0x34>)
 8006ede:	4a0c      	ldr	r2, [pc, #48]	@ (8006f10 <global_stdio_init.part.0+0x38>)
 8006ee0:	601a      	str	r2, [r3, #0]
 8006ee2:	4620      	mov	r0, r4
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	2104      	movs	r1, #4
 8006ee8:	f7ff ff94 	bl	8006e14 <std>
 8006eec:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	2109      	movs	r1, #9
 8006ef4:	f7ff ff8e 	bl	8006e14 <std>
 8006ef8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006efc:	2202      	movs	r2, #2
 8006efe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f02:	2112      	movs	r1, #18
 8006f04:	f7ff bf86 	b.w	8006e14 <std>
 8006f08:	200009bc 	.word	0x200009bc
 8006f0c:	20000884 	.word	0x20000884
 8006f10:	08006e81 	.word	0x08006e81

08006f14 <__sfp_lock_acquire>:
 8006f14:	4801      	ldr	r0, [pc, #4]	@ (8006f1c <__sfp_lock_acquire+0x8>)
 8006f16:	f000 b93c 	b.w	8007192 <__retarget_lock_acquire_recursive>
 8006f1a:	bf00      	nop
 8006f1c:	200009c5 	.word	0x200009c5

08006f20 <__sfp_lock_release>:
 8006f20:	4801      	ldr	r0, [pc, #4]	@ (8006f28 <__sfp_lock_release+0x8>)
 8006f22:	f000 b937 	b.w	8007194 <__retarget_lock_release_recursive>
 8006f26:	bf00      	nop
 8006f28:	200009c5 	.word	0x200009c5

08006f2c <__sinit>:
 8006f2c:	b510      	push	{r4, lr}
 8006f2e:	4604      	mov	r4, r0
 8006f30:	f7ff fff0 	bl	8006f14 <__sfp_lock_acquire>
 8006f34:	6a23      	ldr	r3, [r4, #32]
 8006f36:	b11b      	cbz	r3, 8006f40 <__sinit+0x14>
 8006f38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006f3c:	f7ff bff0 	b.w	8006f20 <__sfp_lock_release>
 8006f40:	4b04      	ldr	r3, [pc, #16]	@ (8006f54 <__sinit+0x28>)
 8006f42:	6223      	str	r3, [r4, #32]
 8006f44:	4b04      	ldr	r3, [pc, #16]	@ (8006f58 <__sinit+0x2c>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d1f5      	bne.n	8006f38 <__sinit+0xc>
 8006f4c:	f7ff ffc4 	bl	8006ed8 <global_stdio_init.part.0>
 8006f50:	e7f2      	b.n	8006f38 <__sinit+0xc>
 8006f52:	bf00      	nop
 8006f54:	08006e99 	.word	0x08006e99
 8006f58:	200009bc 	.word	0x200009bc

08006f5c <_fwalk_sglue>:
 8006f5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f60:	4607      	mov	r7, r0
 8006f62:	4688      	mov	r8, r1
 8006f64:	4614      	mov	r4, r2
 8006f66:	2600      	movs	r6, #0
 8006f68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006f6c:	f1b9 0901 	subs.w	r9, r9, #1
 8006f70:	d505      	bpl.n	8006f7e <_fwalk_sglue+0x22>
 8006f72:	6824      	ldr	r4, [r4, #0]
 8006f74:	2c00      	cmp	r4, #0
 8006f76:	d1f7      	bne.n	8006f68 <_fwalk_sglue+0xc>
 8006f78:	4630      	mov	r0, r6
 8006f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f7e:	89ab      	ldrh	r3, [r5, #12]
 8006f80:	2b01      	cmp	r3, #1
 8006f82:	d907      	bls.n	8006f94 <_fwalk_sglue+0x38>
 8006f84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f88:	3301      	adds	r3, #1
 8006f8a:	d003      	beq.n	8006f94 <_fwalk_sglue+0x38>
 8006f8c:	4629      	mov	r1, r5
 8006f8e:	4638      	mov	r0, r7
 8006f90:	47c0      	blx	r8
 8006f92:	4306      	orrs	r6, r0
 8006f94:	3568      	adds	r5, #104	@ 0x68
 8006f96:	e7e9      	b.n	8006f6c <_fwalk_sglue+0x10>

08006f98 <siprintf>:
 8006f98:	b40e      	push	{r1, r2, r3}
 8006f9a:	b510      	push	{r4, lr}
 8006f9c:	b09d      	sub	sp, #116	@ 0x74
 8006f9e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006fa0:	9002      	str	r0, [sp, #8]
 8006fa2:	9006      	str	r0, [sp, #24]
 8006fa4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006fa8:	480a      	ldr	r0, [pc, #40]	@ (8006fd4 <siprintf+0x3c>)
 8006faa:	9107      	str	r1, [sp, #28]
 8006fac:	9104      	str	r1, [sp, #16]
 8006fae:	490a      	ldr	r1, [pc, #40]	@ (8006fd8 <siprintf+0x40>)
 8006fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fb4:	9105      	str	r1, [sp, #20]
 8006fb6:	2400      	movs	r4, #0
 8006fb8:	a902      	add	r1, sp, #8
 8006fba:	6800      	ldr	r0, [r0, #0]
 8006fbc:	9301      	str	r3, [sp, #4]
 8006fbe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006fc0:	f002 fbe0 	bl	8009784 <_svfiprintf_r>
 8006fc4:	9b02      	ldr	r3, [sp, #8]
 8006fc6:	701c      	strb	r4, [r3, #0]
 8006fc8:	b01d      	add	sp, #116	@ 0x74
 8006fca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006fce:	b003      	add	sp, #12
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	20000018 	.word	0x20000018
 8006fd8:	ffff0208 	.word	0xffff0208

08006fdc <__sread>:
 8006fdc:	b510      	push	{r4, lr}
 8006fde:	460c      	mov	r4, r1
 8006fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fe4:	f000 f886 	bl	80070f4 <_read_r>
 8006fe8:	2800      	cmp	r0, #0
 8006fea:	bfab      	itete	ge
 8006fec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006fee:	89a3      	ldrhlt	r3, [r4, #12]
 8006ff0:	181b      	addge	r3, r3, r0
 8006ff2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006ff6:	bfac      	ite	ge
 8006ff8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006ffa:	81a3      	strhlt	r3, [r4, #12]
 8006ffc:	bd10      	pop	{r4, pc}

08006ffe <__swrite>:
 8006ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007002:	461f      	mov	r7, r3
 8007004:	898b      	ldrh	r3, [r1, #12]
 8007006:	05db      	lsls	r3, r3, #23
 8007008:	4605      	mov	r5, r0
 800700a:	460c      	mov	r4, r1
 800700c:	4616      	mov	r6, r2
 800700e:	d505      	bpl.n	800701c <__swrite+0x1e>
 8007010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007014:	2302      	movs	r3, #2
 8007016:	2200      	movs	r2, #0
 8007018:	f000 f85a 	bl	80070d0 <_lseek_r>
 800701c:	89a3      	ldrh	r3, [r4, #12]
 800701e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007022:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007026:	81a3      	strh	r3, [r4, #12]
 8007028:	4632      	mov	r2, r6
 800702a:	463b      	mov	r3, r7
 800702c:	4628      	mov	r0, r5
 800702e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007032:	f000 b871 	b.w	8007118 <_write_r>

08007036 <__sseek>:
 8007036:	b510      	push	{r4, lr}
 8007038:	460c      	mov	r4, r1
 800703a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800703e:	f000 f847 	bl	80070d0 <_lseek_r>
 8007042:	1c43      	adds	r3, r0, #1
 8007044:	89a3      	ldrh	r3, [r4, #12]
 8007046:	bf15      	itete	ne
 8007048:	6560      	strne	r0, [r4, #84]	@ 0x54
 800704a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800704e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007052:	81a3      	strheq	r3, [r4, #12]
 8007054:	bf18      	it	ne
 8007056:	81a3      	strhne	r3, [r4, #12]
 8007058:	bd10      	pop	{r4, pc}

0800705a <__sclose>:
 800705a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800705e:	f000 b827 	b.w	80070b0 <_close_r>

08007062 <memmove>:
 8007062:	4288      	cmp	r0, r1
 8007064:	b510      	push	{r4, lr}
 8007066:	eb01 0402 	add.w	r4, r1, r2
 800706a:	d902      	bls.n	8007072 <memmove+0x10>
 800706c:	4284      	cmp	r4, r0
 800706e:	4623      	mov	r3, r4
 8007070:	d807      	bhi.n	8007082 <memmove+0x20>
 8007072:	1e43      	subs	r3, r0, #1
 8007074:	42a1      	cmp	r1, r4
 8007076:	d008      	beq.n	800708a <memmove+0x28>
 8007078:	f811 2b01 	ldrb.w	r2, [r1], #1
 800707c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007080:	e7f8      	b.n	8007074 <memmove+0x12>
 8007082:	4402      	add	r2, r0
 8007084:	4601      	mov	r1, r0
 8007086:	428a      	cmp	r2, r1
 8007088:	d100      	bne.n	800708c <memmove+0x2a>
 800708a:	bd10      	pop	{r4, pc}
 800708c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007090:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007094:	e7f7      	b.n	8007086 <memmove+0x24>

08007096 <memset>:
 8007096:	4402      	add	r2, r0
 8007098:	4603      	mov	r3, r0
 800709a:	4293      	cmp	r3, r2
 800709c:	d100      	bne.n	80070a0 <memset+0xa>
 800709e:	4770      	bx	lr
 80070a0:	f803 1b01 	strb.w	r1, [r3], #1
 80070a4:	e7f9      	b.n	800709a <memset+0x4>
	...

080070a8 <_localeconv_r>:
 80070a8:	4800      	ldr	r0, [pc, #0]	@ (80070ac <_localeconv_r+0x4>)
 80070aa:	4770      	bx	lr
 80070ac:	20000158 	.word	0x20000158

080070b0 <_close_r>:
 80070b0:	b538      	push	{r3, r4, r5, lr}
 80070b2:	4d06      	ldr	r5, [pc, #24]	@ (80070cc <_close_r+0x1c>)
 80070b4:	2300      	movs	r3, #0
 80070b6:	4604      	mov	r4, r0
 80070b8:	4608      	mov	r0, r1
 80070ba:	602b      	str	r3, [r5, #0]
 80070bc:	f7fb fb2f 	bl	800271e <_close>
 80070c0:	1c43      	adds	r3, r0, #1
 80070c2:	d102      	bne.n	80070ca <_close_r+0x1a>
 80070c4:	682b      	ldr	r3, [r5, #0]
 80070c6:	b103      	cbz	r3, 80070ca <_close_r+0x1a>
 80070c8:	6023      	str	r3, [r4, #0]
 80070ca:	bd38      	pop	{r3, r4, r5, pc}
 80070cc:	200009c0 	.word	0x200009c0

080070d0 <_lseek_r>:
 80070d0:	b538      	push	{r3, r4, r5, lr}
 80070d2:	4d07      	ldr	r5, [pc, #28]	@ (80070f0 <_lseek_r+0x20>)
 80070d4:	4604      	mov	r4, r0
 80070d6:	4608      	mov	r0, r1
 80070d8:	4611      	mov	r1, r2
 80070da:	2200      	movs	r2, #0
 80070dc:	602a      	str	r2, [r5, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	f7fb fb44 	bl	800276c <_lseek>
 80070e4:	1c43      	adds	r3, r0, #1
 80070e6:	d102      	bne.n	80070ee <_lseek_r+0x1e>
 80070e8:	682b      	ldr	r3, [r5, #0]
 80070ea:	b103      	cbz	r3, 80070ee <_lseek_r+0x1e>
 80070ec:	6023      	str	r3, [r4, #0]
 80070ee:	bd38      	pop	{r3, r4, r5, pc}
 80070f0:	200009c0 	.word	0x200009c0

080070f4 <_read_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4d07      	ldr	r5, [pc, #28]	@ (8007114 <_read_r+0x20>)
 80070f8:	4604      	mov	r4, r0
 80070fa:	4608      	mov	r0, r1
 80070fc:	4611      	mov	r1, r2
 80070fe:	2200      	movs	r2, #0
 8007100:	602a      	str	r2, [r5, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	f7fb fad2 	bl	80026ac <_read>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d102      	bne.n	8007112 <_read_r+0x1e>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	b103      	cbz	r3, 8007112 <_read_r+0x1e>
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	200009c0 	.word	0x200009c0

08007118 <_write_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	4d07      	ldr	r5, [pc, #28]	@ (8007138 <_write_r+0x20>)
 800711c:	4604      	mov	r4, r0
 800711e:	4608      	mov	r0, r1
 8007120:	4611      	mov	r1, r2
 8007122:	2200      	movs	r2, #0
 8007124:	602a      	str	r2, [r5, #0]
 8007126:	461a      	mov	r2, r3
 8007128:	f7fb fadd 	bl	80026e6 <_write>
 800712c:	1c43      	adds	r3, r0, #1
 800712e:	d102      	bne.n	8007136 <_write_r+0x1e>
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	b103      	cbz	r3, 8007136 <_write_r+0x1e>
 8007134:	6023      	str	r3, [r4, #0]
 8007136:	bd38      	pop	{r3, r4, r5, pc}
 8007138:	200009c0 	.word	0x200009c0

0800713c <__errno>:
 800713c:	4b01      	ldr	r3, [pc, #4]	@ (8007144 <__errno+0x8>)
 800713e:	6818      	ldr	r0, [r3, #0]
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	20000018 	.word	0x20000018

08007148 <__libc_init_array>:
 8007148:	b570      	push	{r4, r5, r6, lr}
 800714a:	4d0d      	ldr	r5, [pc, #52]	@ (8007180 <__libc_init_array+0x38>)
 800714c:	4c0d      	ldr	r4, [pc, #52]	@ (8007184 <__libc_init_array+0x3c>)
 800714e:	1b64      	subs	r4, r4, r5
 8007150:	10a4      	asrs	r4, r4, #2
 8007152:	2600      	movs	r6, #0
 8007154:	42a6      	cmp	r6, r4
 8007156:	d109      	bne.n	800716c <__libc_init_array+0x24>
 8007158:	4d0b      	ldr	r5, [pc, #44]	@ (8007188 <__libc_init_array+0x40>)
 800715a:	4c0c      	ldr	r4, [pc, #48]	@ (800718c <__libc_init_array+0x44>)
 800715c:	f003 fb5a 	bl	800a814 <_init>
 8007160:	1b64      	subs	r4, r4, r5
 8007162:	10a4      	asrs	r4, r4, #2
 8007164:	2600      	movs	r6, #0
 8007166:	42a6      	cmp	r6, r4
 8007168:	d105      	bne.n	8007176 <__libc_init_array+0x2e>
 800716a:	bd70      	pop	{r4, r5, r6, pc}
 800716c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007170:	4798      	blx	r3
 8007172:	3601      	adds	r6, #1
 8007174:	e7ee      	b.n	8007154 <__libc_init_array+0xc>
 8007176:	f855 3b04 	ldr.w	r3, [r5], #4
 800717a:	4798      	blx	r3
 800717c:	3601      	adds	r6, #1
 800717e:	e7f2      	b.n	8007166 <__libc_init_array+0x1e>
 8007180:	0800b394 	.word	0x0800b394
 8007184:	0800b394 	.word	0x0800b394
 8007188:	0800b394 	.word	0x0800b394
 800718c:	0800b398 	.word	0x0800b398

08007190 <__retarget_lock_init_recursive>:
 8007190:	4770      	bx	lr

08007192 <__retarget_lock_acquire_recursive>:
 8007192:	4770      	bx	lr

08007194 <__retarget_lock_release_recursive>:
 8007194:	4770      	bx	lr

08007196 <memcpy>:
 8007196:	440a      	add	r2, r1
 8007198:	4291      	cmp	r1, r2
 800719a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800719e:	d100      	bne.n	80071a2 <memcpy+0xc>
 80071a0:	4770      	bx	lr
 80071a2:	b510      	push	{r4, lr}
 80071a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071ac:	4291      	cmp	r1, r2
 80071ae:	d1f9      	bne.n	80071a4 <memcpy+0xe>
 80071b0:	bd10      	pop	{r4, pc}
	...

080071b4 <nanf>:
 80071b4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80071bc <nanf+0x8>
 80071b8:	4770      	bx	lr
 80071ba:	bf00      	nop
 80071bc:	7fc00000 	.word	0x7fc00000

080071c0 <quorem>:
 80071c0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071c4:	6903      	ldr	r3, [r0, #16]
 80071c6:	690c      	ldr	r4, [r1, #16]
 80071c8:	42a3      	cmp	r3, r4
 80071ca:	4607      	mov	r7, r0
 80071cc:	db7e      	blt.n	80072cc <quorem+0x10c>
 80071ce:	3c01      	subs	r4, #1
 80071d0:	f101 0814 	add.w	r8, r1, #20
 80071d4:	00a3      	lsls	r3, r4, #2
 80071d6:	f100 0514 	add.w	r5, r0, #20
 80071da:	9300      	str	r3, [sp, #0]
 80071dc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071e0:	9301      	str	r3, [sp, #4]
 80071e2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80071e6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071ea:	3301      	adds	r3, #1
 80071ec:	429a      	cmp	r2, r3
 80071ee:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80071f2:	fbb2 f6f3 	udiv	r6, r2, r3
 80071f6:	d32e      	bcc.n	8007256 <quorem+0x96>
 80071f8:	f04f 0a00 	mov.w	sl, #0
 80071fc:	46c4      	mov	ip, r8
 80071fe:	46ae      	mov	lr, r5
 8007200:	46d3      	mov	fp, sl
 8007202:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007206:	b298      	uxth	r0, r3
 8007208:	fb06 a000 	mla	r0, r6, r0, sl
 800720c:	0c02      	lsrs	r2, r0, #16
 800720e:	0c1b      	lsrs	r3, r3, #16
 8007210:	fb06 2303 	mla	r3, r6, r3, r2
 8007214:	f8de 2000 	ldr.w	r2, [lr]
 8007218:	b280      	uxth	r0, r0
 800721a:	b292      	uxth	r2, r2
 800721c:	1a12      	subs	r2, r2, r0
 800721e:	445a      	add	r2, fp
 8007220:	f8de 0000 	ldr.w	r0, [lr]
 8007224:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007228:	b29b      	uxth	r3, r3
 800722a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800722e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007232:	b292      	uxth	r2, r2
 8007234:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007238:	45e1      	cmp	r9, ip
 800723a:	f84e 2b04 	str.w	r2, [lr], #4
 800723e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007242:	d2de      	bcs.n	8007202 <quorem+0x42>
 8007244:	9b00      	ldr	r3, [sp, #0]
 8007246:	58eb      	ldr	r3, [r5, r3]
 8007248:	b92b      	cbnz	r3, 8007256 <quorem+0x96>
 800724a:	9b01      	ldr	r3, [sp, #4]
 800724c:	3b04      	subs	r3, #4
 800724e:	429d      	cmp	r5, r3
 8007250:	461a      	mov	r2, r3
 8007252:	d32f      	bcc.n	80072b4 <quorem+0xf4>
 8007254:	613c      	str	r4, [r7, #16]
 8007256:	4638      	mov	r0, r7
 8007258:	f001 f9c6 	bl	80085e8 <__mcmp>
 800725c:	2800      	cmp	r0, #0
 800725e:	db25      	blt.n	80072ac <quorem+0xec>
 8007260:	4629      	mov	r1, r5
 8007262:	2000      	movs	r0, #0
 8007264:	f858 2b04 	ldr.w	r2, [r8], #4
 8007268:	f8d1 c000 	ldr.w	ip, [r1]
 800726c:	fa1f fe82 	uxth.w	lr, r2
 8007270:	fa1f f38c 	uxth.w	r3, ip
 8007274:	eba3 030e 	sub.w	r3, r3, lr
 8007278:	4403      	add	r3, r0
 800727a:	0c12      	lsrs	r2, r2, #16
 800727c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007280:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007284:	b29b      	uxth	r3, r3
 8007286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800728a:	45c1      	cmp	r9, r8
 800728c:	f841 3b04 	str.w	r3, [r1], #4
 8007290:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007294:	d2e6      	bcs.n	8007264 <quorem+0xa4>
 8007296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800729a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800729e:	b922      	cbnz	r2, 80072aa <quorem+0xea>
 80072a0:	3b04      	subs	r3, #4
 80072a2:	429d      	cmp	r5, r3
 80072a4:	461a      	mov	r2, r3
 80072a6:	d30b      	bcc.n	80072c0 <quorem+0x100>
 80072a8:	613c      	str	r4, [r7, #16]
 80072aa:	3601      	adds	r6, #1
 80072ac:	4630      	mov	r0, r6
 80072ae:	b003      	add	sp, #12
 80072b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	3b04      	subs	r3, #4
 80072b8:	2a00      	cmp	r2, #0
 80072ba:	d1cb      	bne.n	8007254 <quorem+0x94>
 80072bc:	3c01      	subs	r4, #1
 80072be:	e7c6      	b.n	800724e <quorem+0x8e>
 80072c0:	6812      	ldr	r2, [r2, #0]
 80072c2:	3b04      	subs	r3, #4
 80072c4:	2a00      	cmp	r2, #0
 80072c6:	d1ef      	bne.n	80072a8 <quorem+0xe8>
 80072c8:	3c01      	subs	r4, #1
 80072ca:	e7ea      	b.n	80072a2 <quorem+0xe2>
 80072cc:	2000      	movs	r0, #0
 80072ce:	e7ee      	b.n	80072ae <quorem+0xee>

080072d0 <_dtoa_r>:
 80072d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072d4:	69c7      	ldr	r7, [r0, #28]
 80072d6:	b097      	sub	sp, #92	@ 0x5c
 80072d8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80072dc:	ec55 4b10 	vmov	r4, r5, d0
 80072e0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80072e2:	9107      	str	r1, [sp, #28]
 80072e4:	4681      	mov	r9, r0
 80072e6:	920c      	str	r2, [sp, #48]	@ 0x30
 80072e8:	9311      	str	r3, [sp, #68]	@ 0x44
 80072ea:	b97f      	cbnz	r7, 800730c <_dtoa_r+0x3c>
 80072ec:	2010      	movs	r0, #16
 80072ee:	f000 fe09 	bl	8007f04 <malloc>
 80072f2:	4602      	mov	r2, r0
 80072f4:	f8c9 001c 	str.w	r0, [r9, #28]
 80072f8:	b920      	cbnz	r0, 8007304 <_dtoa_r+0x34>
 80072fa:	4ba9      	ldr	r3, [pc, #676]	@ (80075a0 <_dtoa_r+0x2d0>)
 80072fc:	21ef      	movs	r1, #239	@ 0xef
 80072fe:	48a9      	ldr	r0, [pc, #676]	@ (80075a4 <_dtoa_r+0x2d4>)
 8007300:	f002 fc12 	bl	8009b28 <__assert_func>
 8007304:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007308:	6007      	str	r7, [r0, #0]
 800730a:	60c7      	str	r7, [r0, #12]
 800730c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007310:	6819      	ldr	r1, [r3, #0]
 8007312:	b159      	cbz	r1, 800732c <_dtoa_r+0x5c>
 8007314:	685a      	ldr	r2, [r3, #4]
 8007316:	604a      	str	r2, [r1, #4]
 8007318:	2301      	movs	r3, #1
 800731a:	4093      	lsls	r3, r2
 800731c:	608b      	str	r3, [r1, #8]
 800731e:	4648      	mov	r0, r9
 8007320:	f000 fee6 	bl	80080f0 <_Bfree>
 8007324:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]
 800732c:	1e2b      	subs	r3, r5, #0
 800732e:	bfb9      	ittee	lt
 8007330:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007334:	9305      	strlt	r3, [sp, #20]
 8007336:	2300      	movge	r3, #0
 8007338:	6033      	strge	r3, [r6, #0]
 800733a:	9f05      	ldr	r7, [sp, #20]
 800733c:	4b9a      	ldr	r3, [pc, #616]	@ (80075a8 <_dtoa_r+0x2d8>)
 800733e:	bfbc      	itt	lt
 8007340:	2201      	movlt	r2, #1
 8007342:	6032      	strlt	r2, [r6, #0]
 8007344:	43bb      	bics	r3, r7
 8007346:	d112      	bne.n	800736e <_dtoa_r+0x9e>
 8007348:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800734a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007354:	4323      	orrs	r3, r4
 8007356:	f000 855a 	beq.w	8007e0e <_dtoa_r+0xb3e>
 800735a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800735c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80075bc <_dtoa_r+0x2ec>
 8007360:	2b00      	cmp	r3, #0
 8007362:	f000 855c 	beq.w	8007e1e <_dtoa_r+0xb4e>
 8007366:	f10a 0303 	add.w	r3, sl, #3
 800736a:	f000 bd56 	b.w	8007e1a <_dtoa_r+0xb4a>
 800736e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007372:	2200      	movs	r2, #0
 8007374:	ec51 0b17 	vmov	r0, r1, d7
 8007378:	2300      	movs	r3, #0
 800737a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800737e:	f7f9 fba3 	bl	8000ac8 <__aeabi_dcmpeq>
 8007382:	4680      	mov	r8, r0
 8007384:	b158      	cbz	r0, 800739e <_dtoa_r+0xce>
 8007386:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007388:	2301      	movs	r3, #1
 800738a:	6013      	str	r3, [r2, #0]
 800738c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800738e:	b113      	cbz	r3, 8007396 <_dtoa_r+0xc6>
 8007390:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007392:	4b86      	ldr	r3, [pc, #536]	@ (80075ac <_dtoa_r+0x2dc>)
 8007394:	6013      	str	r3, [r2, #0]
 8007396:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80075c0 <_dtoa_r+0x2f0>
 800739a:	f000 bd40 	b.w	8007e1e <_dtoa_r+0xb4e>
 800739e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80073a2:	aa14      	add	r2, sp, #80	@ 0x50
 80073a4:	a915      	add	r1, sp, #84	@ 0x54
 80073a6:	4648      	mov	r0, r9
 80073a8:	f001 fa3e 	bl	8008828 <__d2b>
 80073ac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80073b0:	9002      	str	r0, [sp, #8]
 80073b2:	2e00      	cmp	r6, #0
 80073b4:	d078      	beq.n	80074a8 <_dtoa_r+0x1d8>
 80073b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073b8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80073bc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80073c0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073c4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80073c8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80073cc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80073d0:	4619      	mov	r1, r3
 80073d2:	2200      	movs	r2, #0
 80073d4:	4b76      	ldr	r3, [pc, #472]	@ (80075b0 <_dtoa_r+0x2e0>)
 80073d6:	f7f8 ff57 	bl	8000288 <__aeabi_dsub>
 80073da:	a36b      	add	r3, pc, #428	@ (adr r3, 8007588 <_dtoa_r+0x2b8>)
 80073dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073e0:	f7f9 f90a 	bl	80005f8 <__aeabi_dmul>
 80073e4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007590 <_dtoa_r+0x2c0>)
 80073e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073ea:	f7f8 ff4f 	bl	800028c <__adddf3>
 80073ee:	4604      	mov	r4, r0
 80073f0:	4630      	mov	r0, r6
 80073f2:	460d      	mov	r5, r1
 80073f4:	f7f9 f896 	bl	8000524 <__aeabi_i2d>
 80073f8:	a367      	add	r3, pc, #412	@ (adr r3, 8007598 <_dtoa_r+0x2c8>)
 80073fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073fe:	f7f9 f8fb 	bl	80005f8 <__aeabi_dmul>
 8007402:	4602      	mov	r2, r0
 8007404:	460b      	mov	r3, r1
 8007406:	4620      	mov	r0, r4
 8007408:	4629      	mov	r1, r5
 800740a:	f7f8 ff3f 	bl	800028c <__adddf3>
 800740e:	4604      	mov	r4, r0
 8007410:	460d      	mov	r5, r1
 8007412:	f7f9 fba1 	bl	8000b58 <__aeabi_d2iz>
 8007416:	2200      	movs	r2, #0
 8007418:	4607      	mov	r7, r0
 800741a:	2300      	movs	r3, #0
 800741c:	4620      	mov	r0, r4
 800741e:	4629      	mov	r1, r5
 8007420:	f7f9 fb5c 	bl	8000adc <__aeabi_dcmplt>
 8007424:	b140      	cbz	r0, 8007438 <_dtoa_r+0x168>
 8007426:	4638      	mov	r0, r7
 8007428:	f7f9 f87c 	bl	8000524 <__aeabi_i2d>
 800742c:	4622      	mov	r2, r4
 800742e:	462b      	mov	r3, r5
 8007430:	f7f9 fb4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007434:	b900      	cbnz	r0, 8007438 <_dtoa_r+0x168>
 8007436:	3f01      	subs	r7, #1
 8007438:	2f16      	cmp	r7, #22
 800743a:	d852      	bhi.n	80074e2 <_dtoa_r+0x212>
 800743c:	4b5d      	ldr	r3, [pc, #372]	@ (80075b4 <_dtoa_r+0x2e4>)
 800743e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007446:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800744a:	f7f9 fb47 	bl	8000adc <__aeabi_dcmplt>
 800744e:	2800      	cmp	r0, #0
 8007450:	d049      	beq.n	80074e6 <_dtoa_r+0x216>
 8007452:	3f01      	subs	r7, #1
 8007454:	2300      	movs	r3, #0
 8007456:	9310      	str	r3, [sp, #64]	@ 0x40
 8007458:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800745a:	1b9b      	subs	r3, r3, r6
 800745c:	1e5a      	subs	r2, r3, #1
 800745e:	bf45      	ittet	mi
 8007460:	f1c3 0301 	rsbmi	r3, r3, #1
 8007464:	9300      	strmi	r3, [sp, #0]
 8007466:	2300      	movpl	r3, #0
 8007468:	2300      	movmi	r3, #0
 800746a:	9206      	str	r2, [sp, #24]
 800746c:	bf54      	ite	pl
 800746e:	9300      	strpl	r3, [sp, #0]
 8007470:	9306      	strmi	r3, [sp, #24]
 8007472:	2f00      	cmp	r7, #0
 8007474:	db39      	blt.n	80074ea <_dtoa_r+0x21a>
 8007476:	9b06      	ldr	r3, [sp, #24]
 8007478:	970d      	str	r7, [sp, #52]	@ 0x34
 800747a:	443b      	add	r3, r7
 800747c:	9306      	str	r3, [sp, #24]
 800747e:	2300      	movs	r3, #0
 8007480:	9308      	str	r3, [sp, #32]
 8007482:	9b07      	ldr	r3, [sp, #28]
 8007484:	2b09      	cmp	r3, #9
 8007486:	d863      	bhi.n	8007550 <_dtoa_r+0x280>
 8007488:	2b05      	cmp	r3, #5
 800748a:	bfc4      	itt	gt
 800748c:	3b04      	subgt	r3, #4
 800748e:	9307      	strgt	r3, [sp, #28]
 8007490:	9b07      	ldr	r3, [sp, #28]
 8007492:	f1a3 0302 	sub.w	r3, r3, #2
 8007496:	bfcc      	ite	gt
 8007498:	2400      	movgt	r4, #0
 800749a:	2401      	movle	r4, #1
 800749c:	2b03      	cmp	r3, #3
 800749e:	d863      	bhi.n	8007568 <_dtoa_r+0x298>
 80074a0:	e8df f003 	tbb	[pc, r3]
 80074a4:	2b375452 	.word	0x2b375452
 80074a8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80074ac:	441e      	add	r6, r3
 80074ae:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80074b2:	2b20      	cmp	r3, #32
 80074b4:	bfc1      	itttt	gt
 80074b6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80074ba:	409f      	lslgt	r7, r3
 80074bc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80074c0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80074c4:	bfd6      	itet	le
 80074c6:	f1c3 0320 	rsble	r3, r3, #32
 80074ca:	ea47 0003 	orrgt.w	r0, r7, r3
 80074ce:	fa04 f003 	lslle.w	r0, r4, r3
 80074d2:	f7f9 f817 	bl	8000504 <__aeabi_ui2d>
 80074d6:	2201      	movs	r2, #1
 80074d8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80074dc:	3e01      	subs	r6, #1
 80074de:	9212      	str	r2, [sp, #72]	@ 0x48
 80074e0:	e776      	b.n	80073d0 <_dtoa_r+0x100>
 80074e2:	2301      	movs	r3, #1
 80074e4:	e7b7      	b.n	8007456 <_dtoa_r+0x186>
 80074e6:	9010      	str	r0, [sp, #64]	@ 0x40
 80074e8:	e7b6      	b.n	8007458 <_dtoa_r+0x188>
 80074ea:	9b00      	ldr	r3, [sp, #0]
 80074ec:	1bdb      	subs	r3, r3, r7
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	427b      	negs	r3, r7
 80074f2:	9308      	str	r3, [sp, #32]
 80074f4:	2300      	movs	r3, #0
 80074f6:	930d      	str	r3, [sp, #52]	@ 0x34
 80074f8:	e7c3      	b.n	8007482 <_dtoa_r+0x1b2>
 80074fa:	2301      	movs	r3, #1
 80074fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80074fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007500:	eb07 0b03 	add.w	fp, r7, r3
 8007504:	f10b 0301 	add.w	r3, fp, #1
 8007508:	2b01      	cmp	r3, #1
 800750a:	9303      	str	r3, [sp, #12]
 800750c:	bfb8      	it	lt
 800750e:	2301      	movlt	r3, #1
 8007510:	e006      	b.n	8007520 <_dtoa_r+0x250>
 8007512:	2301      	movs	r3, #1
 8007514:	9309      	str	r3, [sp, #36]	@ 0x24
 8007516:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007518:	2b00      	cmp	r3, #0
 800751a:	dd28      	ble.n	800756e <_dtoa_r+0x29e>
 800751c:	469b      	mov	fp, r3
 800751e:	9303      	str	r3, [sp, #12]
 8007520:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007524:	2100      	movs	r1, #0
 8007526:	2204      	movs	r2, #4
 8007528:	f102 0514 	add.w	r5, r2, #20
 800752c:	429d      	cmp	r5, r3
 800752e:	d926      	bls.n	800757e <_dtoa_r+0x2ae>
 8007530:	6041      	str	r1, [r0, #4]
 8007532:	4648      	mov	r0, r9
 8007534:	f000 fd9c 	bl	8008070 <_Balloc>
 8007538:	4682      	mov	sl, r0
 800753a:	2800      	cmp	r0, #0
 800753c:	d142      	bne.n	80075c4 <_dtoa_r+0x2f4>
 800753e:	4b1e      	ldr	r3, [pc, #120]	@ (80075b8 <_dtoa_r+0x2e8>)
 8007540:	4602      	mov	r2, r0
 8007542:	f240 11af 	movw	r1, #431	@ 0x1af
 8007546:	e6da      	b.n	80072fe <_dtoa_r+0x2e>
 8007548:	2300      	movs	r3, #0
 800754a:	e7e3      	b.n	8007514 <_dtoa_r+0x244>
 800754c:	2300      	movs	r3, #0
 800754e:	e7d5      	b.n	80074fc <_dtoa_r+0x22c>
 8007550:	2401      	movs	r4, #1
 8007552:	2300      	movs	r3, #0
 8007554:	9307      	str	r3, [sp, #28]
 8007556:	9409      	str	r4, [sp, #36]	@ 0x24
 8007558:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800755c:	2200      	movs	r2, #0
 800755e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007562:	2312      	movs	r3, #18
 8007564:	920c      	str	r2, [sp, #48]	@ 0x30
 8007566:	e7db      	b.n	8007520 <_dtoa_r+0x250>
 8007568:	2301      	movs	r3, #1
 800756a:	9309      	str	r3, [sp, #36]	@ 0x24
 800756c:	e7f4      	b.n	8007558 <_dtoa_r+0x288>
 800756e:	f04f 0b01 	mov.w	fp, #1
 8007572:	f8cd b00c 	str.w	fp, [sp, #12]
 8007576:	465b      	mov	r3, fp
 8007578:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800757c:	e7d0      	b.n	8007520 <_dtoa_r+0x250>
 800757e:	3101      	adds	r1, #1
 8007580:	0052      	lsls	r2, r2, #1
 8007582:	e7d1      	b.n	8007528 <_dtoa_r+0x258>
 8007584:	f3af 8000 	nop.w
 8007588:	636f4361 	.word	0x636f4361
 800758c:	3fd287a7 	.word	0x3fd287a7
 8007590:	8b60c8b3 	.word	0x8b60c8b3
 8007594:	3fc68a28 	.word	0x3fc68a28
 8007598:	509f79fb 	.word	0x509f79fb
 800759c:	3fd34413 	.word	0x3fd34413
 80075a0:	0800afa6 	.word	0x0800afa6
 80075a4:	0800afbd 	.word	0x0800afbd
 80075a8:	7ff00000 	.word	0x7ff00000
 80075ac:	0800af71 	.word	0x0800af71
 80075b0:	3ff80000 	.word	0x3ff80000
 80075b4:	0800b170 	.word	0x0800b170
 80075b8:	0800b015 	.word	0x0800b015
 80075bc:	0800afa2 	.word	0x0800afa2
 80075c0:	0800af70 	.word	0x0800af70
 80075c4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80075c8:	6018      	str	r0, [r3, #0]
 80075ca:	9b03      	ldr	r3, [sp, #12]
 80075cc:	2b0e      	cmp	r3, #14
 80075ce:	f200 80a1 	bhi.w	8007714 <_dtoa_r+0x444>
 80075d2:	2c00      	cmp	r4, #0
 80075d4:	f000 809e 	beq.w	8007714 <_dtoa_r+0x444>
 80075d8:	2f00      	cmp	r7, #0
 80075da:	dd33      	ble.n	8007644 <_dtoa_r+0x374>
 80075dc:	4b9c      	ldr	r3, [pc, #624]	@ (8007850 <_dtoa_r+0x580>)
 80075de:	f007 020f 	and.w	r2, r7, #15
 80075e2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80075e6:	ed93 7b00 	vldr	d7, [r3]
 80075ea:	05f8      	lsls	r0, r7, #23
 80075ec:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80075f0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80075f4:	d516      	bpl.n	8007624 <_dtoa_r+0x354>
 80075f6:	4b97      	ldr	r3, [pc, #604]	@ (8007854 <_dtoa_r+0x584>)
 80075f8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80075fc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007600:	f7f9 f924 	bl	800084c <__aeabi_ddiv>
 8007604:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007608:	f004 040f 	and.w	r4, r4, #15
 800760c:	2603      	movs	r6, #3
 800760e:	4d91      	ldr	r5, [pc, #580]	@ (8007854 <_dtoa_r+0x584>)
 8007610:	b954      	cbnz	r4, 8007628 <_dtoa_r+0x358>
 8007612:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007616:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800761a:	f7f9 f917 	bl	800084c <__aeabi_ddiv>
 800761e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007622:	e028      	b.n	8007676 <_dtoa_r+0x3a6>
 8007624:	2602      	movs	r6, #2
 8007626:	e7f2      	b.n	800760e <_dtoa_r+0x33e>
 8007628:	07e1      	lsls	r1, r4, #31
 800762a:	d508      	bpl.n	800763e <_dtoa_r+0x36e>
 800762c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007630:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007634:	f7f8 ffe0 	bl	80005f8 <__aeabi_dmul>
 8007638:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800763c:	3601      	adds	r6, #1
 800763e:	1064      	asrs	r4, r4, #1
 8007640:	3508      	adds	r5, #8
 8007642:	e7e5      	b.n	8007610 <_dtoa_r+0x340>
 8007644:	f000 80af 	beq.w	80077a6 <_dtoa_r+0x4d6>
 8007648:	427c      	negs	r4, r7
 800764a:	4b81      	ldr	r3, [pc, #516]	@ (8007850 <_dtoa_r+0x580>)
 800764c:	4d81      	ldr	r5, [pc, #516]	@ (8007854 <_dtoa_r+0x584>)
 800764e:	f004 020f 	and.w	r2, r4, #15
 8007652:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007656:	e9d3 2300 	ldrd	r2, r3, [r3]
 800765a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800765e:	f7f8 ffcb 	bl	80005f8 <__aeabi_dmul>
 8007662:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007666:	1124      	asrs	r4, r4, #4
 8007668:	2300      	movs	r3, #0
 800766a:	2602      	movs	r6, #2
 800766c:	2c00      	cmp	r4, #0
 800766e:	f040 808f 	bne.w	8007790 <_dtoa_r+0x4c0>
 8007672:	2b00      	cmp	r3, #0
 8007674:	d1d3      	bne.n	800761e <_dtoa_r+0x34e>
 8007676:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007678:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800767c:	2b00      	cmp	r3, #0
 800767e:	f000 8094 	beq.w	80077aa <_dtoa_r+0x4da>
 8007682:	4b75      	ldr	r3, [pc, #468]	@ (8007858 <_dtoa_r+0x588>)
 8007684:	2200      	movs	r2, #0
 8007686:	4620      	mov	r0, r4
 8007688:	4629      	mov	r1, r5
 800768a:	f7f9 fa27 	bl	8000adc <__aeabi_dcmplt>
 800768e:	2800      	cmp	r0, #0
 8007690:	f000 808b 	beq.w	80077aa <_dtoa_r+0x4da>
 8007694:	9b03      	ldr	r3, [sp, #12]
 8007696:	2b00      	cmp	r3, #0
 8007698:	f000 8087 	beq.w	80077aa <_dtoa_r+0x4da>
 800769c:	f1bb 0f00 	cmp.w	fp, #0
 80076a0:	dd34      	ble.n	800770c <_dtoa_r+0x43c>
 80076a2:	4620      	mov	r0, r4
 80076a4:	4b6d      	ldr	r3, [pc, #436]	@ (800785c <_dtoa_r+0x58c>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	4629      	mov	r1, r5
 80076aa:	f7f8 ffa5 	bl	80005f8 <__aeabi_dmul>
 80076ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076b2:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80076b6:	3601      	adds	r6, #1
 80076b8:	465c      	mov	r4, fp
 80076ba:	4630      	mov	r0, r6
 80076bc:	f7f8 ff32 	bl	8000524 <__aeabi_i2d>
 80076c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80076c4:	f7f8 ff98 	bl	80005f8 <__aeabi_dmul>
 80076c8:	4b65      	ldr	r3, [pc, #404]	@ (8007860 <_dtoa_r+0x590>)
 80076ca:	2200      	movs	r2, #0
 80076cc:	f7f8 fdde 	bl	800028c <__adddf3>
 80076d0:	4605      	mov	r5, r0
 80076d2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80076d6:	2c00      	cmp	r4, #0
 80076d8:	d16a      	bne.n	80077b0 <_dtoa_r+0x4e0>
 80076da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076de:	4b61      	ldr	r3, [pc, #388]	@ (8007864 <_dtoa_r+0x594>)
 80076e0:	2200      	movs	r2, #0
 80076e2:	f7f8 fdd1 	bl	8000288 <__aeabi_dsub>
 80076e6:	4602      	mov	r2, r0
 80076e8:	460b      	mov	r3, r1
 80076ea:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80076ee:	462a      	mov	r2, r5
 80076f0:	4633      	mov	r3, r6
 80076f2:	f7f9 fa11 	bl	8000b18 <__aeabi_dcmpgt>
 80076f6:	2800      	cmp	r0, #0
 80076f8:	f040 8298 	bne.w	8007c2c <_dtoa_r+0x95c>
 80076fc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007700:	462a      	mov	r2, r5
 8007702:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007706:	f7f9 f9e9 	bl	8000adc <__aeabi_dcmplt>
 800770a:	bb38      	cbnz	r0, 800775c <_dtoa_r+0x48c>
 800770c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007710:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007714:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007716:	2b00      	cmp	r3, #0
 8007718:	f2c0 8157 	blt.w	80079ca <_dtoa_r+0x6fa>
 800771c:	2f0e      	cmp	r7, #14
 800771e:	f300 8154 	bgt.w	80079ca <_dtoa_r+0x6fa>
 8007722:	4b4b      	ldr	r3, [pc, #300]	@ (8007850 <_dtoa_r+0x580>)
 8007724:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007728:	ed93 7b00 	vldr	d7, [r3]
 800772c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800772e:	2b00      	cmp	r3, #0
 8007730:	ed8d 7b00 	vstr	d7, [sp]
 8007734:	f280 80e5 	bge.w	8007902 <_dtoa_r+0x632>
 8007738:	9b03      	ldr	r3, [sp, #12]
 800773a:	2b00      	cmp	r3, #0
 800773c:	f300 80e1 	bgt.w	8007902 <_dtoa_r+0x632>
 8007740:	d10c      	bne.n	800775c <_dtoa_r+0x48c>
 8007742:	4b48      	ldr	r3, [pc, #288]	@ (8007864 <_dtoa_r+0x594>)
 8007744:	2200      	movs	r2, #0
 8007746:	ec51 0b17 	vmov	r0, r1, d7
 800774a:	f7f8 ff55 	bl	80005f8 <__aeabi_dmul>
 800774e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007752:	f7f9 f9d7 	bl	8000b04 <__aeabi_dcmpge>
 8007756:	2800      	cmp	r0, #0
 8007758:	f000 8266 	beq.w	8007c28 <_dtoa_r+0x958>
 800775c:	2400      	movs	r4, #0
 800775e:	4625      	mov	r5, r4
 8007760:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007762:	4656      	mov	r6, sl
 8007764:	ea6f 0803 	mvn.w	r8, r3
 8007768:	2700      	movs	r7, #0
 800776a:	4621      	mov	r1, r4
 800776c:	4648      	mov	r0, r9
 800776e:	f000 fcbf 	bl	80080f0 <_Bfree>
 8007772:	2d00      	cmp	r5, #0
 8007774:	f000 80bd 	beq.w	80078f2 <_dtoa_r+0x622>
 8007778:	b12f      	cbz	r7, 8007786 <_dtoa_r+0x4b6>
 800777a:	42af      	cmp	r7, r5
 800777c:	d003      	beq.n	8007786 <_dtoa_r+0x4b6>
 800777e:	4639      	mov	r1, r7
 8007780:	4648      	mov	r0, r9
 8007782:	f000 fcb5 	bl	80080f0 <_Bfree>
 8007786:	4629      	mov	r1, r5
 8007788:	4648      	mov	r0, r9
 800778a:	f000 fcb1 	bl	80080f0 <_Bfree>
 800778e:	e0b0      	b.n	80078f2 <_dtoa_r+0x622>
 8007790:	07e2      	lsls	r2, r4, #31
 8007792:	d505      	bpl.n	80077a0 <_dtoa_r+0x4d0>
 8007794:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007798:	f7f8 ff2e 	bl	80005f8 <__aeabi_dmul>
 800779c:	3601      	adds	r6, #1
 800779e:	2301      	movs	r3, #1
 80077a0:	1064      	asrs	r4, r4, #1
 80077a2:	3508      	adds	r5, #8
 80077a4:	e762      	b.n	800766c <_dtoa_r+0x39c>
 80077a6:	2602      	movs	r6, #2
 80077a8:	e765      	b.n	8007676 <_dtoa_r+0x3a6>
 80077aa:	9c03      	ldr	r4, [sp, #12]
 80077ac:	46b8      	mov	r8, r7
 80077ae:	e784      	b.n	80076ba <_dtoa_r+0x3ea>
 80077b0:	4b27      	ldr	r3, [pc, #156]	@ (8007850 <_dtoa_r+0x580>)
 80077b2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077b4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80077b8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80077bc:	4454      	add	r4, sl
 80077be:	2900      	cmp	r1, #0
 80077c0:	d054      	beq.n	800786c <_dtoa_r+0x59c>
 80077c2:	4929      	ldr	r1, [pc, #164]	@ (8007868 <_dtoa_r+0x598>)
 80077c4:	2000      	movs	r0, #0
 80077c6:	f7f9 f841 	bl	800084c <__aeabi_ddiv>
 80077ca:	4633      	mov	r3, r6
 80077cc:	462a      	mov	r2, r5
 80077ce:	f7f8 fd5b 	bl	8000288 <__aeabi_dsub>
 80077d2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80077d6:	4656      	mov	r6, sl
 80077d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077dc:	f7f9 f9bc 	bl	8000b58 <__aeabi_d2iz>
 80077e0:	4605      	mov	r5, r0
 80077e2:	f7f8 fe9f 	bl	8000524 <__aeabi_i2d>
 80077e6:	4602      	mov	r2, r0
 80077e8:	460b      	mov	r3, r1
 80077ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ee:	f7f8 fd4b 	bl	8000288 <__aeabi_dsub>
 80077f2:	3530      	adds	r5, #48	@ 0x30
 80077f4:	4602      	mov	r2, r0
 80077f6:	460b      	mov	r3, r1
 80077f8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077fc:	f806 5b01 	strb.w	r5, [r6], #1
 8007800:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007804:	f7f9 f96a 	bl	8000adc <__aeabi_dcmplt>
 8007808:	2800      	cmp	r0, #0
 800780a:	d172      	bne.n	80078f2 <_dtoa_r+0x622>
 800780c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007810:	4911      	ldr	r1, [pc, #68]	@ (8007858 <_dtoa_r+0x588>)
 8007812:	2000      	movs	r0, #0
 8007814:	f7f8 fd38 	bl	8000288 <__aeabi_dsub>
 8007818:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800781c:	f7f9 f95e 	bl	8000adc <__aeabi_dcmplt>
 8007820:	2800      	cmp	r0, #0
 8007822:	f040 80b4 	bne.w	800798e <_dtoa_r+0x6be>
 8007826:	42a6      	cmp	r6, r4
 8007828:	f43f af70 	beq.w	800770c <_dtoa_r+0x43c>
 800782c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007830:	4b0a      	ldr	r3, [pc, #40]	@ (800785c <_dtoa_r+0x58c>)
 8007832:	2200      	movs	r2, #0
 8007834:	f7f8 fee0 	bl	80005f8 <__aeabi_dmul>
 8007838:	4b08      	ldr	r3, [pc, #32]	@ (800785c <_dtoa_r+0x58c>)
 800783a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800783e:	2200      	movs	r2, #0
 8007840:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007844:	f7f8 fed8 	bl	80005f8 <__aeabi_dmul>
 8007848:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800784c:	e7c4      	b.n	80077d8 <_dtoa_r+0x508>
 800784e:	bf00      	nop
 8007850:	0800b170 	.word	0x0800b170
 8007854:	0800b148 	.word	0x0800b148
 8007858:	3ff00000 	.word	0x3ff00000
 800785c:	40240000 	.word	0x40240000
 8007860:	401c0000 	.word	0x401c0000
 8007864:	40140000 	.word	0x40140000
 8007868:	3fe00000 	.word	0x3fe00000
 800786c:	4631      	mov	r1, r6
 800786e:	4628      	mov	r0, r5
 8007870:	f7f8 fec2 	bl	80005f8 <__aeabi_dmul>
 8007874:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007878:	9413      	str	r4, [sp, #76]	@ 0x4c
 800787a:	4656      	mov	r6, sl
 800787c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007880:	f7f9 f96a 	bl	8000b58 <__aeabi_d2iz>
 8007884:	4605      	mov	r5, r0
 8007886:	f7f8 fe4d 	bl	8000524 <__aeabi_i2d>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007892:	f7f8 fcf9 	bl	8000288 <__aeabi_dsub>
 8007896:	3530      	adds	r5, #48	@ 0x30
 8007898:	f806 5b01 	strb.w	r5, [r6], #1
 800789c:	4602      	mov	r2, r0
 800789e:	460b      	mov	r3, r1
 80078a0:	42a6      	cmp	r6, r4
 80078a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80078a6:	f04f 0200 	mov.w	r2, #0
 80078aa:	d124      	bne.n	80078f6 <_dtoa_r+0x626>
 80078ac:	4baf      	ldr	r3, [pc, #700]	@ (8007b6c <_dtoa_r+0x89c>)
 80078ae:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80078b2:	f7f8 fceb 	bl	800028c <__adddf3>
 80078b6:	4602      	mov	r2, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078be:	f7f9 f92b 	bl	8000b18 <__aeabi_dcmpgt>
 80078c2:	2800      	cmp	r0, #0
 80078c4:	d163      	bne.n	800798e <_dtoa_r+0x6be>
 80078c6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80078ca:	49a8      	ldr	r1, [pc, #672]	@ (8007b6c <_dtoa_r+0x89c>)
 80078cc:	2000      	movs	r0, #0
 80078ce:	f7f8 fcdb 	bl	8000288 <__aeabi_dsub>
 80078d2:	4602      	mov	r2, r0
 80078d4:	460b      	mov	r3, r1
 80078d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80078da:	f7f9 f8ff 	bl	8000adc <__aeabi_dcmplt>
 80078de:	2800      	cmp	r0, #0
 80078e0:	f43f af14 	beq.w	800770c <_dtoa_r+0x43c>
 80078e4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80078e6:	1e73      	subs	r3, r6, #1
 80078e8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80078ea:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80078ee:	2b30      	cmp	r3, #48	@ 0x30
 80078f0:	d0f8      	beq.n	80078e4 <_dtoa_r+0x614>
 80078f2:	4647      	mov	r7, r8
 80078f4:	e03b      	b.n	800796e <_dtoa_r+0x69e>
 80078f6:	4b9e      	ldr	r3, [pc, #632]	@ (8007b70 <_dtoa_r+0x8a0>)
 80078f8:	f7f8 fe7e 	bl	80005f8 <__aeabi_dmul>
 80078fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007900:	e7bc      	b.n	800787c <_dtoa_r+0x5ac>
 8007902:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007906:	4656      	mov	r6, sl
 8007908:	e9dd 2300 	ldrd	r2, r3, [sp]
 800790c:	4620      	mov	r0, r4
 800790e:	4629      	mov	r1, r5
 8007910:	f7f8 ff9c 	bl	800084c <__aeabi_ddiv>
 8007914:	f7f9 f920 	bl	8000b58 <__aeabi_d2iz>
 8007918:	4680      	mov	r8, r0
 800791a:	f7f8 fe03 	bl	8000524 <__aeabi_i2d>
 800791e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007922:	f7f8 fe69 	bl	80005f8 <__aeabi_dmul>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4620      	mov	r0, r4
 800792c:	4629      	mov	r1, r5
 800792e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007932:	f7f8 fca9 	bl	8000288 <__aeabi_dsub>
 8007936:	f806 4b01 	strb.w	r4, [r6], #1
 800793a:	9d03      	ldr	r5, [sp, #12]
 800793c:	eba6 040a 	sub.w	r4, r6, sl
 8007940:	42a5      	cmp	r5, r4
 8007942:	4602      	mov	r2, r0
 8007944:	460b      	mov	r3, r1
 8007946:	d133      	bne.n	80079b0 <_dtoa_r+0x6e0>
 8007948:	f7f8 fca0 	bl	800028c <__adddf3>
 800794c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007950:	4604      	mov	r4, r0
 8007952:	460d      	mov	r5, r1
 8007954:	f7f9 f8e0 	bl	8000b18 <__aeabi_dcmpgt>
 8007958:	b9c0      	cbnz	r0, 800798c <_dtoa_r+0x6bc>
 800795a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800795e:	4620      	mov	r0, r4
 8007960:	4629      	mov	r1, r5
 8007962:	f7f9 f8b1 	bl	8000ac8 <__aeabi_dcmpeq>
 8007966:	b110      	cbz	r0, 800796e <_dtoa_r+0x69e>
 8007968:	f018 0f01 	tst.w	r8, #1
 800796c:	d10e      	bne.n	800798c <_dtoa_r+0x6bc>
 800796e:	9902      	ldr	r1, [sp, #8]
 8007970:	4648      	mov	r0, r9
 8007972:	f000 fbbd 	bl	80080f0 <_Bfree>
 8007976:	2300      	movs	r3, #0
 8007978:	7033      	strb	r3, [r6, #0]
 800797a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800797c:	3701      	adds	r7, #1
 800797e:	601f      	str	r7, [r3, #0]
 8007980:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007982:	2b00      	cmp	r3, #0
 8007984:	f000 824b 	beq.w	8007e1e <_dtoa_r+0xb4e>
 8007988:	601e      	str	r6, [r3, #0]
 800798a:	e248      	b.n	8007e1e <_dtoa_r+0xb4e>
 800798c:	46b8      	mov	r8, r7
 800798e:	4633      	mov	r3, r6
 8007990:	461e      	mov	r6, r3
 8007992:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007996:	2a39      	cmp	r2, #57	@ 0x39
 8007998:	d106      	bne.n	80079a8 <_dtoa_r+0x6d8>
 800799a:	459a      	cmp	sl, r3
 800799c:	d1f8      	bne.n	8007990 <_dtoa_r+0x6c0>
 800799e:	2230      	movs	r2, #48	@ 0x30
 80079a0:	f108 0801 	add.w	r8, r8, #1
 80079a4:	f88a 2000 	strb.w	r2, [sl]
 80079a8:	781a      	ldrb	r2, [r3, #0]
 80079aa:	3201      	adds	r2, #1
 80079ac:	701a      	strb	r2, [r3, #0]
 80079ae:	e7a0      	b.n	80078f2 <_dtoa_r+0x622>
 80079b0:	4b6f      	ldr	r3, [pc, #444]	@ (8007b70 <_dtoa_r+0x8a0>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	f7f8 fe20 	bl	80005f8 <__aeabi_dmul>
 80079b8:	2200      	movs	r2, #0
 80079ba:	2300      	movs	r3, #0
 80079bc:	4604      	mov	r4, r0
 80079be:	460d      	mov	r5, r1
 80079c0:	f7f9 f882 	bl	8000ac8 <__aeabi_dcmpeq>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d09f      	beq.n	8007908 <_dtoa_r+0x638>
 80079c8:	e7d1      	b.n	800796e <_dtoa_r+0x69e>
 80079ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80079cc:	2a00      	cmp	r2, #0
 80079ce:	f000 80ea 	beq.w	8007ba6 <_dtoa_r+0x8d6>
 80079d2:	9a07      	ldr	r2, [sp, #28]
 80079d4:	2a01      	cmp	r2, #1
 80079d6:	f300 80cd 	bgt.w	8007b74 <_dtoa_r+0x8a4>
 80079da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80079dc:	2a00      	cmp	r2, #0
 80079de:	f000 80c1 	beq.w	8007b64 <_dtoa_r+0x894>
 80079e2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80079e6:	9c08      	ldr	r4, [sp, #32]
 80079e8:	9e00      	ldr	r6, [sp, #0]
 80079ea:	9a00      	ldr	r2, [sp, #0]
 80079ec:	441a      	add	r2, r3
 80079ee:	9200      	str	r2, [sp, #0]
 80079f0:	9a06      	ldr	r2, [sp, #24]
 80079f2:	2101      	movs	r1, #1
 80079f4:	441a      	add	r2, r3
 80079f6:	4648      	mov	r0, r9
 80079f8:	9206      	str	r2, [sp, #24]
 80079fa:	f000 fc77 	bl	80082ec <__i2b>
 80079fe:	4605      	mov	r5, r0
 8007a00:	b166      	cbz	r6, 8007a1c <_dtoa_r+0x74c>
 8007a02:	9b06      	ldr	r3, [sp, #24]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	dd09      	ble.n	8007a1c <_dtoa_r+0x74c>
 8007a08:	42b3      	cmp	r3, r6
 8007a0a:	9a00      	ldr	r2, [sp, #0]
 8007a0c:	bfa8      	it	ge
 8007a0e:	4633      	movge	r3, r6
 8007a10:	1ad2      	subs	r2, r2, r3
 8007a12:	9200      	str	r2, [sp, #0]
 8007a14:	9a06      	ldr	r2, [sp, #24]
 8007a16:	1af6      	subs	r6, r6, r3
 8007a18:	1ad3      	subs	r3, r2, r3
 8007a1a:	9306      	str	r3, [sp, #24]
 8007a1c:	9b08      	ldr	r3, [sp, #32]
 8007a1e:	b30b      	cbz	r3, 8007a64 <_dtoa_r+0x794>
 8007a20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	f000 80c6 	beq.w	8007bb4 <_dtoa_r+0x8e4>
 8007a28:	2c00      	cmp	r4, #0
 8007a2a:	f000 80c0 	beq.w	8007bae <_dtoa_r+0x8de>
 8007a2e:	4629      	mov	r1, r5
 8007a30:	4622      	mov	r2, r4
 8007a32:	4648      	mov	r0, r9
 8007a34:	f000 fd12 	bl	800845c <__pow5mult>
 8007a38:	9a02      	ldr	r2, [sp, #8]
 8007a3a:	4601      	mov	r1, r0
 8007a3c:	4605      	mov	r5, r0
 8007a3e:	4648      	mov	r0, r9
 8007a40:	f000 fc6a 	bl	8008318 <__multiply>
 8007a44:	9902      	ldr	r1, [sp, #8]
 8007a46:	4680      	mov	r8, r0
 8007a48:	4648      	mov	r0, r9
 8007a4a:	f000 fb51 	bl	80080f0 <_Bfree>
 8007a4e:	9b08      	ldr	r3, [sp, #32]
 8007a50:	1b1b      	subs	r3, r3, r4
 8007a52:	9308      	str	r3, [sp, #32]
 8007a54:	f000 80b1 	beq.w	8007bba <_dtoa_r+0x8ea>
 8007a58:	9a08      	ldr	r2, [sp, #32]
 8007a5a:	4641      	mov	r1, r8
 8007a5c:	4648      	mov	r0, r9
 8007a5e:	f000 fcfd 	bl	800845c <__pow5mult>
 8007a62:	9002      	str	r0, [sp, #8]
 8007a64:	2101      	movs	r1, #1
 8007a66:	4648      	mov	r0, r9
 8007a68:	f000 fc40 	bl	80082ec <__i2b>
 8007a6c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a6e:	4604      	mov	r4, r0
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	f000 81d8 	beq.w	8007e26 <_dtoa_r+0xb56>
 8007a76:	461a      	mov	r2, r3
 8007a78:	4601      	mov	r1, r0
 8007a7a:	4648      	mov	r0, r9
 8007a7c:	f000 fcee 	bl	800845c <__pow5mult>
 8007a80:	9b07      	ldr	r3, [sp, #28]
 8007a82:	2b01      	cmp	r3, #1
 8007a84:	4604      	mov	r4, r0
 8007a86:	f300 809f 	bgt.w	8007bc8 <_dtoa_r+0x8f8>
 8007a8a:	9b04      	ldr	r3, [sp, #16]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	f040 8097 	bne.w	8007bc0 <_dtoa_r+0x8f0>
 8007a92:	9b05      	ldr	r3, [sp, #20]
 8007a94:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f040 8093 	bne.w	8007bc4 <_dtoa_r+0x8f4>
 8007a9e:	9b05      	ldr	r3, [sp, #20]
 8007aa0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007aa4:	0d1b      	lsrs	r3, r3, #20
 8007aa6:	051b      	lsls	r3, r3, #20
 8007aa8:	b133      	cbz	r3, 8007ab8 <_dtoa_r+0x7e8>
 8007aaa:	9b00      	ldr	r3, [sp, #0]
 8007aac:	3301      	adds	r3, #1
 8007aae:	9300      	str	r3, [sp, #0]
 8007ab0:	9b06      	ldr	r3, [sp, #24]
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	9306      	str	r3, [sp, #24]
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	9308      	str	r3, [sp, #32]
 8007aba:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f000 81b8 	beq.w	8007e32 <_dtoa_r+0xb62>
 8007ac2:	6923      	ldr	r3, [r4, #16]
 8007ac4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007ac8:	6918      	ldr	r0, [r3, #16]
 8007aca:	f000 fbc3 	bl	8008254 <__hi0bits>
 8007ace:	f1c0 0020 	rsb	r0, r0, #32
 8007ad2:	9b06      	ldr	r3, [sp, #24]
 8007ad4:	4418      	add	r0, r3
 8007ad6:	f010 001f 	ands.w	r0, r0, #31
 8007ada:	f000 8082 	beq.w	8007be2 <_dtoa_r+0x912>
 8007ade:	f1c0 0320 	rsb	r3, r0, #32
 8007ae2:	2b04      	cmp	r3, #4
 8007ae4:	dd73      	ble.n	8007bce <_dtoa_r+0x8fe>
 8007ae6:	9b00      	ldr	r3, [sp, #0]
 8007ae8:	f1c0 001c 	rsb	r0, r0, #28
 8007aec:	4403      	add	r3, r0
 8007aee:	9300      	str	r3, [sp, #0]
 8007af0:	9b06      	ldr	r3, [sp, #24]
 8007af2:	4403      	add	r3, r0
 8007af4:	4406      	add	r6, r0
 8007af6:	9306      	str	r3, [sp, #24]
 8007af8:	9b00      	ldr	r3, [sp, #0]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	dd05      	ble.n	8007b0a <_dtoa_r+0x83a>
 8007afe:	9902      	ldr	r1, [sp, #8]
 8007b00:	461a      	mov	r2, r3
 8007b02:	4648      	mov	r0, r9
 8007b04:	f000 fd04 	bl	8008510 <__lshift>
 8007b08:	9002      	str	r0, [sp, #8]
 8007b0a:	9b06      	ldr	r3, [sp, #24]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	dd05      	ble.n	8007b1c <_dtoa_r+0x84c>
 8007b10:	4621      	mov	r1, r4
 8007b12:	461a      	mov	r2, r3
 8007b14:	4648      	mov	r0, r9
 8007b16:	f000 fcfb 	bl	8008510 <__lshift>
 8007b1a:	4604      	mov	r4, r0
 8007b1c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d061      	beq.n	8007be6 <_dtoa_r+0x916>
 8007b22:	9802      	ldr	r0, [sp, #8]
 8007b24:	4621      	mov	r1, r4
 8007b26:	f000 fd5f 	bl	80085e8 <__mcmp>
 8007b2a:	2800      	cmp	r0, #0
 8007b2c:	da5b      	bge.n	8007be6 <_dtoa_r+0x916>
 8007b2e:	2300      	movs	r3, #0
 8007b30:	9902      	ldr	r1, [sp, #8]
 8007b32:	220a      	movs	r2, #10
 8007b34:	4648      	mov	r0, r9
 8007b36:	f000 fafd 	bl	8008134 <__multadd>
 8007b3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b3c:	9002      	str	r0, [sp, #8]
 8007b3e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	f000 8177 	beq.w	8007e36 <_dtoa_r+0xb66>
 8007b48:	4629      	mov	r1, r5
 8007b4a:	2300      	movs	r3, #0
 8007b4c:	220a      	movs	r2, #10
 8007b4e:	4648      	mov	r0, r9
 8007b50:	f000 faf0 	bl	8008134 <__multadd>
 8007b54:	f1bb 0f00 	cmp.w	fp, #0
 8007b58:	4605      	mov	r5, r0
 8007b5a:	dc6f      	bgt.n	8007c3c <_dtoa_r+0x96c>
 8007b5c:	9b07      	ldr	r3, [sp, #28]
 8007b5e:	2b02      	cmp	r3, #2
 8007b60:	dc49      	bgt.n	8007bf6 <_dtoa_r+0x926>
 8007b62:	e06b      	b.n	8007c3c <_dtoa_r+0x96c>
 8007b64:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007b66:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007b6a:	e73c      	b.n	80079e6 <_dtoa_r+0x716>
 8007b6c:	3fe00000 	.word	0x3fe00000
 8007b70:	40240000 	.word	0x40240000
 8007b74:	9b03      	ldr	r3, [sp, #12]
 8007b76:	1e5c      	subs	r4, r3, #1
 8007b78:	9b08      	ldr	r3, [sp, #32]
 8007b7a:	42a3      	cmp	r3, r4
 8007b7c:	db09      	blt.n	8007b92 <_dtoa_r+0x8c2>
 8007b7e:	1b1c      	subs	r4, r3, r4
 8007b80:	9b03      	ldr	r3, [sp, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	f6bf af30 	bge.w	80079e8 <_dtoa_r+0x718>
 8007b88:	9b00      	ldr	r3, [sp, #0]
 8007b8a:	9a03      	ldr	r2, [sp, #12]
 8007b8c:	1a9e      	subs	r6, r3, r2
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e72b      	b.n	80079ea <_dtoa_r+0x71a>
 8007b92:	9b08      	ldr	r3, [sp, #32]
 8007b94:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007b96:	9408      	str	r4, [sp, #32]
 8007b98:	1ae3      	subs	r3, r4, r3
 8007b9a:	441a      	add	r2, r3
 8007b9c:	9e00      	ldr	r6, [sp, #0]
 8007b9e:	9b03      	ldr	r3, [sp, #12]
 8007ba0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007ba2:	2400      	movs	r4, #0
 8007ba4:	e721      	b.n	80079ea <_dtoa_r+0x71a>
 8007ba6:	9c08      	ldr	r4, [sp, #32]
 8007ba8:	9e00      	ldr	r6, [sp, #0]
 8007baa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007bac:	e728      	b.n	8007a00 <_dtoa_r+0x730>
 8007bae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007bb2:	e751      	b.n	8007a58 <_dtoa_r+0x788>
 8007bb4:	9a08      	ldr	r2, [sp, #32]
 8007bb6:	9902      	ldr	r1, [sp, #8]
 8007bb8:	e750      	b.n	8007a5c <_dtoa_r+0x78c>
 8007bba:	f8cd 8008 	str.w	r8, [sp, #8]
 8007bbe:	e751      	b.n	8007a64 <_dtoa_r+0x794>
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	e779      	b.n	8007ab8 <_dtoa_r+0x7e8>
 8007bc4:	9b04      	ldr	r3, [sp, #16]
 8007bc6:	e777      	b.n	8007ab8 <_dtoa_r+0x7e8>
 8007bc8:	2300      	movs	r3, #0
 8007bca:	9308      	str	r3, [sp, #32]
 8007bcc:	e779      	b.n	8007ac2 <_dtoa_r+0x7f2>
 8007bce:	d093      	beq.n	8007af8 <_dtoa_r+0x828>
 8007bd0:	9a00      	ldr	r2, [sp, #0]
 8007bd2:	331c      	adds	r3, #28
 8007bd4:	441a      	add	r2, r3
 8007bd6:	9200      	str	r2, [sp, #0]
 8007bd8:	9a06      	ldr	r2, [sp, #24]
 8007bda:	441a      	add	r2, r3
 8007bdc:	441e      	add	r6, r3
 8007bde:	9206      	str	r2, [sp, #24]
 8007be0:	e78a      	b.n	8007af8 <_dtoa_r+0x828>
 8007be2:	4603      	mov	r3, r0
 8007be4:	e7f4      	b.n	8007bd0 <_dtoa_r+0x900>
 8007be6:	9b03      	ldr	r3, [sp, #12]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	46b8      	mov	r8, r7
 8007bec:	dc20      	bgt.n	8007c30 <_dtoa_r+0x960>
 8007bee:	469b      	mov	fp, r3
 8007bf0:	9b07      	ldr	r3, [sp, #28]
 8007bf2:	2b02      	cmp	r3, #2
 8007bf4:	dd1e      	ble.n	8007c34 <_dtoa_r+0x964>
 8007bf6:	f1bb 0f00 	cmp.w	fp, #0
 8007bfa:	f47f adb1 	bne.w	8007760 <_dtoa_r+0x490>
 8007bfe:	4621      	mov	r1, r4
 8007c00:	465b      	mov	r3, fp
 8007c02:	2205      	movs	r2, #5
 8007c04:	4648      	mov	r0, r9
 8007c06:	f000 fa95 	bl	8008134 <__multadd>
 8007c0a:	4601      	mov	r1, r0
 8007c0c:	4604      	mov	r4, r0
 8007c0e:	9802      	ldr	r0, [sp, #8]
 8007c10:	f000 fcea 	bl	80085e8 <__mcmp>
 8007c14:	2800      	cmp	r0, #0
 8007c16:	f77f ada3 	ble.w	8007760 <_dtoa_r+0x490>
 8007c1a:	4656      	mov	r6, sl
 8007c1c:	2331      	movs	r3, #49	@ 0x31
 8007c1e:	f806 3b01 	strb.w	r3, [r6], #1
 8007c22:	f108 0801 	add.w	r8, r8, #1
 8007c26:	e59f      	b.n	8007768 <_dtoa_r+0x498>
 8007c28:	9c03      	ldr	r4, [sp, #12]
 8007c2a:	46b8      	mov	r8, r7
 8007c2c:	4625      	mov	r5, r4
 8007c2e:	e7f4      	b.n	8007c1a <_dtoa_r+0x94a>
 8007c30:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007c34:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f000 8101 	beq.w	8007e3e <_dtoa_r+0xb6e>
 8007c3c:	2e00      	cmp	r6, #0
 8007c3e:	dd05      	ble.n	8007c4c <_dtoa_r+0x97c>
 8007c40:	4629      	mov	r1, r5
 8007c42:	4632      	mov	r2, r6
 8007c44:	4648      	mov	r0, r9
 8007c46:	f000 fc63 	bl	8008510 <__lshift>
 8007c4a:	4605      	mov	r5, r0
 8007c4c:	9b08      	ldr	r3, [sp, #32]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d05c      	beq.n	8007d0c <_dtoa_r+0xa3c>
 8007c52:	6869      	ldr	r1, [r5, #4]
 8007c54:	4648      	mov	r0, r9
 8007c56:	f000 fa0b 	bl	8008070 <_Balloc>
 8007c5a:	4606      	mov	r6, r0
 8007c5c:	b928      	cbnz	r0, 8007c6a <_dtoa_r+0x99a>
 8007c5e:	4b82      	ldr	r3, [pc, #520]	@ (8007e68 <_dtoa_r+0xb98>)
 8007c60:	4602      	mov	r2, r0
 8007c62:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007c66:	f7ff bb4a 	b.w	80072fe <_dtoa_r+0x2e>
 8007c6a:	692a      	ldr	r2, [r5, #16]
 8007c6c:	3202      	adds	r2, #2
 8007c6e:	0092      	lsls	r2, r2, #2
 8007c70:	f105 010c 	add.w	r1, r5, #12
 8007c74:	300c      	adds	r0, #12
 8007c76:	f7ff fa8e 	bl	8007196 <memcpy>
 8007c7a:	2201      	movs	r2, #1
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4648      	mov	r0, r9
 8007c80:	f000 fc46 	bl	8008510 <__lshift>
 8007c84:	f10a 0301 	add.w	r3, sl, #1
 8007c88:	9300      	str	r3, [sp, #0]
 8007c8a:	eb0a 030b 	add.w	r3, sl, fp
 8007c8e:	9308      	str	r3, [sp, #32]
 8007c90:	9b04      	ldr	r3, [sp, #16]
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	462f      	mov	r7, r5
 8007c98:	9306      	str	r3, [sp, #24]
 8007c9a:	4605      	mov	r5, r0
 8007c9c:	9b00      	ldr	r3, [sp, #0]
 8007c9e:	9802      	ldr	r0, [sp, #8]
 8007ca0:	4621      	mov	r1, r4
 8007ca2:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8007ca6:	f7ff fa8b 	bl	80071c0 <quorem>
 8007caa:	4603      	mov	r3, r0
 8007cac:	3330      	adds	r3, #48	@ 0x30
 8007cae:	9003      	str	r0, [sp, #12]
 8007cb0:	4639      	mov	r1, r7
 8007cb2:	9802      	ldr	r0, [sp, #8]
 8007cb4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cb6:	f000 fc97 	bl	80085e8 <__mcmp>
 8007cba:	462a      	mov	r2, r5
 8007cbc:	9004      	str	r0, [sp, #16]
 8007cbe:	4621      	mov	r1, r4
 8007cc0:	4648      	mov	r0, r9
 8007cc2:	f000 fcad 	bl	8008620 <__mdiff>
 8007cc6:	68c2      	ldr	r2, [r0, #12]
 8007cc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cca:	4606      	mov	r6, r0
 8007ccc:	bb02      	cbnz	r2, 8007d10 <_dtoa_r+0xa40>
 8007cce:	4601      	mov	r1, r0
 8007cd0:	9802      	ldr	r0, [sp, #8]
 8007cd2:	f000 fc89 	bl	80085e8 <__mcmp>
 8007cd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cd8:	4602      	mov	r2, r0
 8007cda:	4631      	mov	r1, r6
 8007cdc:	4648      	mov	r0, r9
 8007cde:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ce0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ce2:	f000 fa05 	bl	80080f0 <_Bfree>
 8007ce6:	9b07      	ldr	r3, [sp, #28]
 8007ce8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007cea:	9e00      	ldr	r6, [sp, #0]
 8007cec:	ea42 0103 	orr.w	r1, r2, r3
 8007cf0:	9b06      	ldr	r3, [sp, #24]
 8007cf2:	4319      	orrs	r1, r3
 8007cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cf6:	d10d      	bne.n	8007d14 <_dtoa_r+0xa44>
 8007cf8:	2b39      	cmp	r3, #57	@ 0x39
 8007cfa:	d027      	beq.n	8007d4c <_dtoa_r+0xa7c>
 8007cfc:	9a04      	ldr	r2, [sp, #16]
 8007cfe:	2a00      	cmp	r2, #0
 8007d00:	dd01      	ble.n	8007d06 <_dtoa_r+0xa36>
 8007d02:	9b03      	ldr	r3, [sp, #12]
 8007d04:	3331      	adds	r3, #49	@ 0x31
 8007d06:	f88b 3000 	strb.w	r3, [fp]
 8007d0a:	e52e      	b.n	800776a <_dtoa_r+0x49a>
 8007d0c:	4628      	mov	r0, r5
 8007d0e:	e7b9      	b.n	8007c84 <_dtoa_r+0x9b4>
 8007d10:	2201      	movs	r2, #1
 8007d12:	e7e2      	b.n	8007cda <_dtoa_r+0xa0a>
 8007d14:	9904      	ldr	r1, [sp, #16]
 8007d16:	2900      	cmp	r1, #0
 8007d18:	db04      	blt.n	8007d24 <_dtoa_r+0xa54>
 8007d1a:	9807      	ldr	r0, [sp, #28]
 8007d1c:	4301      	orrs	r1, r0
 8007d1e:	9806      	ldr	r0, [sp, #24]
 8007d20:	4301      	orrs	r1, r0
 8007d22:	d120      	bne.n	8007d66 <_dtoa_r+0xa96>
 8007d24:	2a00      	cmp	r2, #0
 8007d26:	ddee      	ble.n	8007d06 <_dtoa_r+0xa36>
 8007d28:	9902      	ldr	r1, [sp, #8]
 8007d2a:	9300      	str	r3, [sp, #0]
 8007d2c:	2201      	movs	r2, #1
 8007d2e:	4648      	mov	r0, r9
 8007d30:	f000 fbee 	bl	8008510 <__lshift>
 8007d34:	4621      	mov	r1, r4
 8007d36:	9002      	str	r0, [sp, #8]
 8007d38:	f000 fc56 	bl	80085e8 <__mcmp>
 8007d3c:	2800      	cmp	r0, #0
 8007d3e:	9b00      	ldr	r3, [sp, #0]
 8007d40:	dc02      	bgt.n	8007d48 <_dtoa_r+0xa78>
 8007d42:	d1e0      	bne.n	8007d06 <_dtoa_r+0xa36>
 8007d44:	07da      	lsls	r2, r3, #31
 8007d46:	d5de      	bpl.n	8007d06 <_dtoa_r+0xa36>
 8007d48:	2b39      	cmp	r3, #57	@ 0x39
 8007d4a:	d1da      	bne.n	8007d02 <_dtoa_r+0xa32>
 8007d4c:	2339      	movs	r3, #57	@ 0x39
 8007d4e:	f88b 3000 	strb.w	r3, [fp]
 8007d52:	4633      	mov	r3, r6
 8007d54:	461e      	mov	r6, r3
 8007d56:	3b01      	subs	r3, #1
 8007d58:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007d5c:	2a39      	cmp	r2, #57	@ 0x39
 8007d5e:	d04e      	beq.n	8007dfe <_dtoa_r+0xb2e>
 8007d60:	3201      	adds	r2, #1
 8007d62:	701a      	strb	r2, [r3, #0]
 8007d64:	e501      	b.n	800776a <_dtoa_r+0x49a>
 8007d66:	2a00      	cmp	r2, #0
 8007d68:	dd03      	ble.n	8007d72 <_dtoa_r+0xaa2>
 8007d6a:	2b39      	cmp	r3, #57	@ 0x39
 8007d6c:	d0ee      	beq.n	8007d4c <_dtoa_r+0xa7c>
 8007d6e:	3301      	adds	r3, #1
 8007d70:	e7c9      	b.n	8007d06 <_dtoa_r+0xa36>
 8007d72:	9a00      	ldr	r2, [sp, #0]
 8007d74:	9908      	ldr	r1, [sp, #32]
 8007d76:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007d7a:	428a      	cmp	r2, r1
 8007d7c:	d028      	beq.n	8007dd0 <_dtoa_r+0xb00>
 8007d7e:	9902      	ldr	r1, [sp, #8]
 8007d80:	2300      	movs	r3, #0
 8007d82:	220a      	movs	r2, #10
 8007d84:	4648      	mov	r0, r9
 8007d86:	f000 f9d5 	bl	8008134 <__multadd>
 8007d8a:	42af      	cmp	r7, r5
 8007d8c:	9002      	str	r0, [sp, #8]
 8007d8e:	f04f 0300 	mov.w	r3, #0
 8007d92:	f04f 020a 	mov.w	r2, #10
 8007d96:	4639      	mov	r1, r7
 8007d98:	4648      	mov	r0, r9
 8007d9a:	d107      	bne.n	8007dac <_dtoa_r+0xadc>
 8007d9c:	f000 f9ca 	bl	8008134 <__multadd>
 8007da0:	4607      	mov	r7, r0
 8007da2:	4605      	mov	r5, r0
 8007da4:	9b00      	ldr	r3, [sp, #0]
 8007da6:	3301      	adds	r3, #1
 8007da8:	9300      	str	r3, [sp, #0]
 8007daa:	e777      	b.n	8007c9c <_dtoa_r+0x9cc>
 8007dac:	f000 f9c2 	bl	8008134 <__multadd>
 8007db0:	4629      	mov	r1, r5
 8007db2:	4607      	mov	r7, r0
 8007db4:	2300      	movs	r3, #0
 8007db6:	220a      	movs	r2, #10
 8007db8:	4648      	mov	r0, r9
 8007dba:	f000 f9bb 	bl	8008134 <__multadd>
 8007dbe:	4605      	mov	r5, r0
 8007dc0:	e7f0      	b.n	8007da4 <_dtoa_r+0xad4>
 8007dc2:	f1bb 0f00 	cmp.w	fp, #0
 8007dc6:	bfcc      	ite	gt
 8007dc8:	465e      	movgt	r6, fp
 8007dca:	2601      	movle	r6, #1
 8007dcc:	4456      	add	r6, sl
 8007dce:	2700      	movs	r7, #0
 8007dd0:	9902      	ldr	r1, [sp, #8]
 8007dd2:	9300      	str	r3, [sp, #0]
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	4648      	mov	r0, r9
 8007dd8:	f000 fb9a 	bl	8008510 <__lshift>
 8007ddc:	4621      	mov	r1, r4
 8007dde:	9002      	str	r0, [sp, #8]
 8007de0:	f000 fc02 	bl	80085e8 <__mcmp>
 8007de4:	2800      	cmp	r0, #0
 8007de6:	dcb4      	bgt.n	8007d52 <_dtoa_r+0xa82>
 8007de8:	d102      	bne.n	8007df0 <_dtoa_r+0xb20>
 8007dea:	9b00      	ldr	r3, [sp, #0]
 8007dec:	07db      	lsls	r3, r3, #31
 8007dee:	d4b0      	bmi.n	8007d52 <_dtoa_r+0xa82>
 8007df0:	4633      	mov	r3, r6
 8007df2:	461e      	mov	r6, r3
 8007df4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007df8:	2a30      	cmp	r2, #48	@ 0x30
 8007dfa:	d0fa      	beq.n	8007df2 <_dtoa_r+0xb22>
 8007dfc:	e4b5      	b.n	800776a <_dtoa_r+0x49a>
 8007dfe:	459a      	cmp	sl, r3
 8007e00:	d1a8      	bne.n	8007d54 <_dtoa_r+0xa84>
 8007e02:	2331      	movs	r3, #49	@ 0x31
 8007e04:	f108 0801 	add.w	r8, r8, #1
 8007e08:	f88a 3000 	strb.w	r3, [sl]
 8007e0c:	e4ad      	b.n	800776a <_dtoa_r+0x49a>
 8007e0e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007e10:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007e6c <_dtoa_r+0xb9c>
 8007e14:	b11b      	cbz	r3, 8007e1e <_dtoa_r+0xb4e>
 8007e16:	f10a 0308 	add.w	r3, sl, #8
 8007e1a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007e1c:	6013      	str	r3, [r2, #0]
 8007e1e:	4650      	mov	r0, sl
 8007e20:	b017      	add	sp, #92	@ 0x5c
 8007e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e26:	9b07      	ldr	r3, [sp, #28]
 8007e28:	2b01      	cmp	r3, #1
 8007e2a:	f77f ae2e 	ble.w	8007a8a <_dtoa_r+0x7ba>
 8007e2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e30:	9308      	str	r3, [sp, #32]
 8007e32:	2001      	movs	r0, #1
 8007e34:	e64d      	b.n	8007ad2 <_dtoa_r+0x802>
 8007e36:	f1bb 0f00 	cmp.w	fp, #0
 8007e3a:	f77f aed9 	ble.w	8007bf0 <_dtoa_r+0x920>
 8007e3e:	4656      	mov	r6, sl
 8007e40:	9802      	ldr	r0, [sp, #8]
 8007e42:	4621      	mov	r1, r4
 8007e44:	f7ff f9bc 	bl	80071c0 <quorem>
 8007e48:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007e4c:	f806 3b01 	strb.w	r3, [r6], #1
 8007e50:	eba6 020a 	sub.w	r2, r6, sl
 8007e54:	4593      	cmp	fp, r2
 8007e56:	ddb4      	ble.n	8007dc2 <_dtoa_r+0xaf2>
 8007e58:	9902      	ldr	r1, [sp, #8]
 8007e5a:	2300      	movs	r3, #0
 8007e5c:	220a      	movs	r2, #10
 8007e5e:	4648      	mov	r0, r9
 8007e60:	f000 f968 	bl	8008134 <__multadd>
 8007e64:	9002      	str	r0, [sp, #8]
 8007e66:	e7eb      	b.n	8007e40 <_dtoa_r+0xb70>
 8007e68:	0800b015 	.word	0x0800b015
 8007e6c:	0800af99 	.word	0x0800af99

08007e70 <_free_r>:
 8007e70:	b538      	push	{r3, r4, r5, lr}
 8007e72:	4605      	mov	r5, r0
 8007e74:	2900      	cmp	r1, #0
 8007e76:	d041      	beq.n	8007efc <_free_r+0x8c>
 8007e78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e7c:	1f0c      	subs	r4, r1, #4
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	bfb8      	it	lt
 8007e82:	18e4      	addlt	r4, r4, r3
 8007e84:	f000 f8e8 	bl	8008058 <__malloc_lock>
 8007e88:	4a1d      	ldr	r2, [pc, #116]	@ (8007f00 <_free_r+0x90>)
 8007e8a:	6813      	ldr	r3, [r2, #0]
 8007e8c:	b933      	cbnz	r3, 8007e9c <_free_r+0x2c>
 8007e8e:	6063      	str	r3, [r4, #4]
 8007e90:	6014      	str	r4, [r2, #0]
 8007e92:	4628      	mov	r0, r5
 8007e94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007e98:	f000 b8e4 	b.w	8008064 <__malloc_unlock>
 8007e9c:	42a3      	cmp	r3, r4
 8007e9e:	d908      	bls.n	8007eb2 <_free_r+0x42>
 8007ea0:	6820      	ldr	r0, [r4, #0]
 8007ea2:	1821      	adds	r1, r4, r0
 8007ea4:	428b      	cmp	r3, r1
 8007ea6:	bf01      	itttt	eq
 8007ea8:	6819      	ldreq	r1, [r3, #0]
 8007eaa:	685b      	ldreq	r3, [r3, #4]
 8007eac:	1809      	addeq	r1, r1, r0
 8007eae:	6021      	streq	r1, [r4, #0]
 8007eb0:	e7ed      	b.n	8007e8e <_free_r+0x1e>
 8007eb2:	461a      	mov	r2, r3
 8007eb4:	685b      	ldr	r3, [r3, #4]
 8007eb6:	b10b      	cbz	r3, 8007ebc <_free_r+0x4c>
 8007eb8:	42a3      	cmp	r3, r4
 8007eba:	d9fa      	bls.n	8007eb2 <_free_r+0x42>
 8007ebc:	6811      	ldr	r1, [r2, #0]
 8007ebe:	1850      	adds	r0, r2, r1
 8007ec0:	42a0      	cmp	r0, r4
 8007ec2:	d10b      	bne.n	8007edc <_free_r+0x6c>
 8007ec4:	6820      	ldr	r0, [r4, #0]
 8007ec6:	4401      	add	r1, r0
 8007ec8:	1850      	adds	r0, r2, r1
 8007eca:	4283      	cmp	r3, r0
 8007ecc:	6011      	str	r1, [r2, #0]
 8007ece:	d1e0      	bne.n	8007e92 <_free_r+0x22>
 8007ed0:	6818      	ldr	r0, [r3, #0]
 8007ed2:	685b      	ldr	r3, [r3, #4]
 8007ed4:	6053      	str	r3, [r2, #4]
 8007ed6:	4408      	add	r0, r1
 8007ed8:	6010      	str	r0, [r2, #0]
 8007eda:	e7da      	b.n	8007e92 <_free_r+0x22>
 8007edc:	d902      	bls.n	8007ee4 <_free_r+0x74>
 8007ede:	230c      	movs	r3, #12
 8007ee0:	602b      	str	r3, [r5, #0]
 8007ee2:	e7d6      	b.n	8007e92 <_free_r+0x22>
 8007ee4:	6820      	ldr	r0, [r4, #0]
 8007ee6:	1821      	adds	r1, r4, r0
 8007ee8:	428b      	cmp	r3, r1
 8007eea:	bf04      	itt	eq
 8007eec:	6819      	ldreq	r1, [r3, #0]
 8007eee:	685b      	ldreq	r3, [r3, #4]
 8007ef0:	6063      	str	r3, [r4, #4]
 8007ef2:	bf04      	itt	eq
 8007ef4:	1809      	addeq	r1, r1, r0
 8007ef6:	6021      	streq	r1, [r4, #0]
 8007ef8:	6054      	str	r4, [r2, #4]
 8007efa:	e7ca      	b.n	8007e92 <_free_r+0x22>
 8007efc:	bd38      	pop	{r3, r4, r5, pc}
 8007efe:	bf00      	nop
 8007f00:	200009cc 	.word	0x200009cc

08007f04 <malloc>:
 8007f04:	4b02      	ldr	r3, [pc, #8]	@ (8007f10 <malloc+0xc>)
 8007f06:	4601      	mov	r1, r0
 8007f08:	6818      	ldr	r0, [r3, #0]
 8007f0a:	f000 b825 	b.w	8007f58 <_malloc_r>
 8007f0e:	bf00      	nop
 8007f10:	20000018 	.word	0x20000018

08007f14 <sbrk_aligned>:
 8007f14:	b570      	push	{r4, r5, r6, lr}
 8007f16:	4e0f      	ldr	r6, [pc, #60]	@ (8007f54 <sbrk_aligned+0x40>)
 8007f18:	460c      	mov	r4, r1
 8007f1a:	6831      	ldr	r1, [r6, #0]
 8007f1c:	4605      	mov	r5, r0
 8007f1e:	b911      	cbnz	r1, 8007f26 <sbrk_aligned+0x12>
 8007f20:	f001 fdea 	bl	8009af8 <_sbrk_r>
 8007f24:	6030      	str	r0, [r6, #0]
 8007f26:	4621      	mov	r1, r4
 8007f28:	4628      	mov	r0, r5
 8007f2a:	f001 fde5 	bl	8009af8 <_sbrk_r>
 8007f2e:	1c43      	adds	r3, r0, #1
 8007f30:	d103      	bne.n	8007f3a <sbrk_aligned+0x26>
 8007f32:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8007f36:	4620      	mov	r0, r4
 8007f38:	bd70      	pop	{r4, r5, r6, pc}
 8007f3a:	1cc4      	adds	r4, r0, #3
 8007f3c:	f024 0403 	bic.w	r4, r4, #3
 8007f40:	42a0      	cmp	r0, r4
 8007f42:	d0f8      	beq.n	8007f36 <sbrk_aligned+0x22>
 8007f44:	1a21      	subs	r1, r4, r0
 8007f46:	4628      	mov	r0, r5
 8007f48:	f001 fdd6 	bl	8009af8 <_sbrk_r>
 8007f4c:	3001      	adds	r0, #1
 8007f4e:	d1f2      	bne.n	8007f36 <sbrk_aligned+0x22>
 8007f50:	e7ef      	b.n	8007f32 <sbrk_aligned+0x1e>
 8007f52:	bf00      	nop
 8007f54:	200009c8 	.word	0x200009c8

08007f58 <_malloc_r>:
 8007f58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f5c:	1ccd      	adds	r5, r1, #3
 8007f5e:	f025 0503 	bic.w	r5, r5, #3
 8007f62:	3508      	adds	r5, #8
 8007f64:	2d0c      	cmp	r5, #12
 8007f66:	bf38      	it	cc
 8007f68:	250c      	movcc	r5, #12
 8007f6a:	2d00      	cmp	r5, #0
 8007f6c:	4606      	mov	r6, r0
 8007f6e:	db01      	blt.n	8007f74 <_malloc_r+0x1c>
 8007f70:	42a9      	cmp	r1, r5
 8007f72:	d904      	bls.n	8007f7e <_malloc_r+0x26>
 8007f74:	230c      	movs	r3, #12
 8007f76:	6033      	str	r3, [r6, #0]
 8007f78:	2000      	movs	r0, #0
 8007f7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008054 <_malloc_r+0xfc>
 8007f82:	f000 f869 	bl	8008058 <__malloc_lock>
 8007f86:	f8d8 3000 	ldr.w	r3, [r8]
 8007f8a:	461c      	mov	r4, r3
 8007f8c:	bb44      	cbnz	r4, 8007fe0 <_malloc_r+0x88>
 8007f8e:	4629      	mov	r1, r5
 8007f90:	4630      	mov	r0, r6
 8007f92:	f7ff ffbf 	bl	8007f14 <sbrk_aligned>
 8007f96:	1c43      	adds	r3, r0, #1
 8007f98:	4604      	mov	r4, r0
 8007f9a:	d158      	bne.n	800804e <_malloc_r+0xf6>
 8007f9c:	f8d8 4000 	ldr.w	r4, [r8]
 8007fa0:	4627      	mov	r7, r4
 8007fa2:	2f00      	cmp	r7, #0
 8007fa4:	d143      	bne.n	800802e <_malloc_r+0xd6>
 8007fa6:	2c00      	cmp	r4, #0
 8007fa8:	d04b      	beq.n	8008042 <_malloc_r+0xea>
 8007faa:	6823      	ldr	r3, [r4, #0]
 8007fac:	4639      	mov	r1, r7
 8007fae:	4630      	mov	r0, r6
 8007fb0:	eb04 0903 	add.w	r9, r4, r3
 8007fb4:	f001 fda0 	bl	8009af8 <_sbrk_r>
 8007fb8:	4581      	cmp	r9, r0
 8007fba:	d142      	bne.n	8008042 <_malloc_r+0xea>
 8007fbc:	6821      	ldr	r1, [r4, #0]
 8007fbe:	1a6d      	subs	r5, r5, r1
 8007fc0:	4629      	mov	r1, r5
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	f7ff ffa6 	bl	8007f14 <sbrk_aligned>
 8007fc8:	3001      	adds	r0, #1
 8007fca:	d03a      	beq.n	8008042 <_malloc_r+0xea>
 8007fcc:	6823      	ldr	r3, [r4, #0]
 8007fce:	442b      	add	r3, r5
 8007fd0:	6023      	str	r3, [r4, #0]
 8007fd2:	f8d8 3000 	ldr.w	r3, [r8]
 8007fd6:	685a      	ldr	r2, [r3, #4]
 8007fd8:	bb62      	cbnz	r2, 8008034 <_malloc_r+0xdc>
 8007fda:	f8c8 7000 	str.w	r7, [r8]
 8007fde:	e00f      	b.n	8008000 <_malloc_r+0xa8>
 8007fe0:	6822      	ldr	r2, [r4, #0]
 8007fe2:	1b52      	subs	r2, r2, r5
 8007fe4:	d420      	bmi.n	8008028 <_malloc_r+0xd0>
 8007fe6:	2a0b      	cmp	r2, #11
 8007fe8:	d917      	bls.n	800801a <_malloc_r+0xc2>
 8007fea:	1961      	adds	r1, r4, r5
 8007fec:	42a3      	cmp	r3, r4
 8007fee:	6025      	str	r5, [r4, #0]
 8007ff0:	bf18      	it	ne
 8007ff2:	6059      	strne	r1, [r3, #4]
 8007ff4:	6863      	ldr	r3, [r4, #4]
 8007ff6:	bf08      	it	eq
 8007ff8:	f8c8 1000 	streq.w	r1, [r8]
 8007ffc:	5162      	str	r2, [r4, r5]
 8007ffe:	604b      	str	r3, [r1, #4]
 8008000:	4630      	mov	r0, r6
 8008002:	f000 f82f 	bl	8008064 <__malloc_unlock>
 8008006:	f104 000b 	add.w	r0, r4, #11
 800800a:	1d23      	adds	r3, r4, #4
 800800c:	f020 0007 	bic.w	r0, r0, #7
 8008010:	1ac2      	subs	r2, r0, r3
 8008012:	bf1c      	itt	ne
 8008014:	1a1b      	subne	r3, r3, r0
 8008016:	50a3      	strne	r3, [r4, r2]
 8008018:	e7af      	b.n	8007f7a <_malloc_r+0x22>
 800801a:	6862      	ldr	r2, [r4, #4]
 800801c:	42a3      	cmp	r3, r4
 800801e:	bf0c      	ite	eq
 8008020:	f8c8 2000 	streq.w	r2, [r8]
 8008024:	605a      	strne	r2, [r3, #4]
 8008026:	e7eb      	b.n	8008000 <_malloc_r+0xa8>
 8008028:	4623      	mov	r3, r4
 800802a:	6864      	ldr	r4, [r4, #4]
 800802c:	e7ae      	b.n	8007f8c <_malloc_r+0x34>
 800802e:	463c      	mov	r4, r7
 8008030:	687f      	ldr	r7, [r7, #4]
 8008032:	e7b6      	b.n	8007fa2 <_malloc_r+0x4a>
 8008034:	461a      	mov	r2, r3
 8008036:	685b      	ldr	r3, [r3, #4]
 8008038:	42a3      	cmp	r3, r4
 800803a:	d1fb      	bne.n	8008034 <_malloc_r+0xdc>
 800803c:	2300      	movs	r3, #0
 800803e:	6053      	str	r3, [r2, #4]
 8008040:	e7de      	b.n	8008000 <_malloc_r+0xa8>
 8008042:	230c      	movs	r3, #12
 8008044:	6033      	str	r3, [r6, #0]
 8008046:	4630      	mov	r0, r6
 8008048:	f000 f80c 	bl	8008064 <__malloc_unlock>
 800804c:	e794      	b.n	8007f78 <_malloc_r+0x20>
 800804e:	6005      	str	r5, [r0, #0]
 8008050:	e7d6      	b.n	8008000 <_malloc_r+0xa8>
 8008052:	bf00      	nop
 8008054:	200009cc 	.word	0x200009cc

08008058 <__malloc_lock>:
 8008058:	4801      	ldr	r0, [pc, #4]	@ (8008060 <__malloc_lock+0x8>)
 800805a:	f7ff b89a 	b.w	8007192 <__retarget_lock_acquire_recursive>
 800805e:	bf00      	nop
 8008060:	200009c4 	.word	0x200009c4

08008064 <__malloc_unlock>:
 8008064:	4801      	ldr	r0, [pc, #4]	@ (800806c <__malloc_unlock+0x8>)
 8008066:	f7ff b895 	b.w	8007194 <__retarget_lock_release_recursive>
 800806a:	bf00      	nop
 800806c:	200009c4 	.word	0x200009c4

08008070 <_Balloc>:
 8008070:	b570      	push	{r4, r5, r6, lr}
 8008072:	69c6      	ldr	r6, [r0, #28]
 8008074:	4604      	mov	r4, r0
 8008076:	460d      	mov	r5, r1
 8008078:	b976      	cbnz	r6, 8008098 <_Balloc+0x28>
 800807a:	2010      	movs	r0, #16
 800807c:	f7ff ff42 	bl	8007f04 <malloc>
 8008080:	4602      	mov	r2, r0
 8008082:	61e0      	str	r0, [r4, #28]
 8008084:	b920      	cbnz	r0, 8008090 <_Balloc+0x20>
 8008086:	4b18      	ldr	r3, [pc, #96]	@ (80080e8 <_Balloc+0x78>)
 8008088:	4818      	ldr	r0, [pc, #96]	@ (80080ec <_Balloc+0x7c>)
 800808a:	216b      	movs	r1, #107	@ 0x6b
 800808c:	f001 fd4c 	bl	8009b28 <__assert_func>
 8008090:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008094:	6006      	str	r6, [r0, #0]
 8008096:	60c6      	str	r6, [r0, #12]
 8008098:	69e6      	ldr	r6, [r4, #28]
 800809a:	68f3      	ldr	r3, [r6, #12]
 800809c:	b183      	cbz	r3, 80080c0 <_Balloc+0x50>
 800809e:	69e3      	ldr	r3, [r4, #28]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80080a6:	b9b8      	cbnz	r0, 80080d8 <_Balloc+0x68>
 80080a8:	2101      	movs	r1, #1
 80080aa:	fa01 f605 	lsl.w	r6, r1, r5
 80080ae:	1d72      	adds	r2, r6, #5
 80080b0:	0092      	lsls	r2, r2, #2
 80080b2:	4620      	mov	r0, r4
 80080b4:	f001 fd56 	bl	8009b64 <_calloc_r>
 80080b8:	b160      	cbz	r0, 80080d4 <_Balloc+0x64>
 80080ba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80080be:	e00e      	b.n	80080de <_Balloc+0x6e>
 80080c0:	2221      	movs	r2, #33	@ 0x21
 80080c2:	2104      	movs	r1, #4
 80080c4:	4620      	mov	r0, r4
 80080c6:	f001 fd4d 	bl	8009b64 <_calloc_r>
 80080ca:	69e3      	ldr	r3, [r4, #28]
 80080cc:	60f0      	str	r0, [r6, #12]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d1e4      	bne.n	800809e <_Balloc+0x2e>
 80080d4:	2000      	movs	r0, #0
 80080d6:	bd70      	pop	{r4, r5, r6, pc}
 80080d8:	6802      	ldr	r2, [r0, #0]
 80080da:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80080de:	2300      	movs	r3, #0
 80080e0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80080e4:	e7f7      	b.n	80080d6 <_Balloc+0x66>
 80080e6:	bf00      	nop
 80080e8:	0800afa6 	.word	0x0800afa6
 80080ec:	0800b026 	.word	0x0800b026

080080f0 <_Bfree>:
 80080f0:	b570      	push	{r4, r5, r6, lr}
 80080f2:	69c6      	ldr	r6, [r0, #28]
 80080f4:	4605      	mov	r5, r0
 80080f6:	460c      	mov	r4, r1
 80080f8:	b976      	cbnz	r6, 8008118 <_Bfree+0x28>
 80080fa:	2010      	movs	r0, #16
 80080fc:	f7ff ff02 	bl	8007f04 <malloc>
 8008100:	4602      	mov	r2, r0
 8008102:	61e8      	str	r0, [r5, #28]
 8008104:	b920      	cbnz	r0, 8008110 <_Bfree+0x20>
 8008106:	4b09      	ldr	r3, [pc, #36]	@ (800812c <_Bfree+0x3c>)
 8008108:	4809      	ldr	r0, [pc, #36]	@ (8008130 <_Bfree+0x40>)
 800810a:	218f      	movs	r1, #143	@ 0x8f
 800810c:	f001 fd0c 	bl	8009b28 <__assert_func>
 8008110:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008114:	6006      	str	r6, [r0, #0]
 8008116:	60c6      	str	r6, [r0, #12]
 8008118:	b13c      	cbz	r4, 800812a <_Bfree+0x3a>
 800811a:	69eb      	ldr	r3, [r5, #28]
 800811c:	6862      	ldr	r2, [r4, #4]
 800811e:	68db      	ldr	r3, [r3, #12]
 8008120:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008124:	6021      	str	r1, [r4, #0]
 8008126:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800812a:	bd70      	pop	{r4, r5, r6, pc}
 800812c:	0800afa6 	.word	0x0800afa6
 8008130:	0800b026 	.word	0x0800b026

08008134 <__multadd>:
 8008134:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008138:	690d      	ldr	r5, [r1, #16]
 800813a:	4607      	mov	r7, r0
 800813c:	460c      	mov	r4, r1
 800813e:	461e      	mov	r6, r3
 8008140:	f101 0c14 	add.w	ip, r1, #20
 8008144:	2000      	movs	r0, #0
 8008146:	f8dc 3000 	ldr.w	r3, [ip]
 800814a:	b299      	uxth	r1, r3
 800814c:	fb02 6101 	mla	r1, r2, r1, r6
 8008150:	0c1e      	lsrs	r6, r3, #16
 8008152:	0c0b      	lsrs	r3, r1, #16
 8008154:	fb02 3306 	mla	r3, r2, r6, r3
 8008158:	b289      	uxth	r1, r1
 800815a:	3001      	adds	r0, #1
 800815c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008160:	4285      	cmp	r5, r0
 8008162:	f84c 1b04 	str.w	r1, [ip], #4
 8008166:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800816a:	dcec      	bgt.n	8008146 <__multadd+0x12>
 800816c:	b30e      	cbz	r6, 80081b2 <__multadd+0x7e>
 800816e:	68a3      	ldr	r3, [r4, #8]
 8008170:	42ab      	cmp	r3, r5
 8008172:	dc19      	bgt.n	80081a8 <__multadd+0x74>
 8008174:	6861      	ldr	r1, [r4, #4]
 8008176:	4638      	mov	r0, r7
 8008178:	3101      	adds	r1, #1
 800817a:	f7ff ff79 	bl	8008070 <_Balloc>
 800817e:	4680      	mov	r8, r0
 8008180:	b928      	cbnz	r0, 800818e <__multadd+0x5a>
 8008182:	4602      	mov	r2, r0
 8008184:	4b0c      	ldr	r3, [pc, #48]	@ (80081b8 <__multadd+0x84>)
 8008186:	480d      	ldr	r0, [pc, #52]	@ (80081bc <__multadd+0x88>)
 8008188:	21ba      	movs	r1, #186	@ 0xba
 800818a:	f001 fccd 	bl	8009b28 <__assert_func>
 800818e:	6922      	ldr	r2, [r4, #16]
 8008190:	3202      	adds	r2, #2
 8008192:	f104 010c 	add.w	r1, r4, #12
 8008196:	0092      	lsls	r2, r2, #2
 8008198:	300c      	adds	r0, #12
 800819a:	f7fe fffc 	bl	8007196 <memcpy>
 800819e:	4621      	mov	r1, r4
 80081a0:	4638      	mov	r0, r7
 80081a2:	f7ff ffa5 	bl	80080f0 <_Bfree>
 80081a6:	4644      	mov	r4, r8
 80081a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80081ac:	3501      	adds	r5, #1
 80081ae:	615e      	str	r6, [r3, #20]
 80081b0:	6125      	str	r5, [r4, #16]
 80081b2:	4620      	mov	r0, r4
 80081b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80081b8:	0800b015 	.word	0x0800b015
 80081bc:	0800b026 	.word	0x0800b026

080081c0 <__s2b>:
 80081c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081c4:	460c      	mov	r4, r1
 80081c6:	4615      	mov	r5, r2
 80081c8:	461f      	mov	r7, r3
 80081ca:	2209      	movs	r2, #9
 80081cc:	3308      	adds	r3, #8
 80081ce:	4606      	mov	r6, r0
 80081d0:	fb93 f3f2 	sdiv	r3, r3, r2
 80081d4:	2100      	movs	r1, #0
 80081d6:	2201      	movs	r2, #1
 80081d8:	429a      	cmp	r2, r3
 80081da:	db09      	blt.n	80081f0 <__s2b+0x30>
 80081dc:	4630      	mov	r0, r6
 80081de:	f7ff ff47 	bl	8008070 <_Balloc>
 80081e2:	b940      	cbnz	r0, 80081f6 <__s2b+0x36>
 80081e4:	4602      	mov	r2, r0
 80081e6:	4b19      	ldr	r3, [pc, #100]	@ (800824c <__s2b+0x8c>)
 80081e8:	4819      	ldr	r0, [pc, #100]	@ (8008250 <__s2b+0x90>)
 80081ea:	21d3      	movs	r1, #211	@ 0xd3
 80081ec:	f001 fc9c 	bl	8009b28 <__assert_func>
 80081f0:	0052      	lsls	r2, r2, #1
 80081f2:	3101      	adds	r1, #1
 80081f4:	e7f0      	b.n	80081d8 <__s2b+0x18>
 80081f6:	9b08      	ldr	r3, [sp, #32]
 80081f8:	6143      	str	r3, [r0, #20]
 80081fa:	2d09      	cmp	r5, #9
 80081fc:	f04f 0301 	mov.w	r3, #1
 8008200:	6103      	str	r3, [r0, #16]
 8008202:	dd16      	ble.n	8008232 <__s2b+0x72>
 8008204:	f104 0909 	add.w	r9, r4, #9
 8008208:	46c8      	mov	r8, r9
 800820a:	442c      	add	r4, r5
 800820c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008210:	4601      	mov	r1, r0
 8008212:	3b30      	subs	r3, #48	@ 0x30
 8008214:	220a      	movs	r2, #10
 8008216:	4630      	mov	r0, r6
 8008218:	f7ff ff8c 	bl	8008134 <__multadd>
 800821c:	45a0      	cmp	r8, r4
 800821e:	d1f5      	bne.n	800820c <__s2b+0x4c>
 8008220:	f1a5 0408 	sub.w	r4, r5, #8
 8008224:	444c      	add	r4, r9
 8008226:	1b2d      	subs	r5, r5, r4
 8008228:	1963      	adds	r3, r4, r5
 800822a:	42bb      	cmp	r3, r7
 800822c:	db04      	blt.n	8008238 <__s2b+0x78>
 800822e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008232:	340a      	adds	r4, #10
 8008234:	2509      	movs	r5, #9
 8008236:	e7f6      	b.n	8008226 <__s2b+0x66>
 8008238:	f814 3b01 	ldrb.w	r3, [r4], #1
 800823c:	4601      	mov	r1, r0
 800823e:	3b30      	subs	r3, #48	@ 0x30
 8008240:	220a      	movs	r2, #10
 8008242:	4630      	mov	r0, r6
 8008244:	f7ff ff76 	bl	8008134 <__multadd>
 8008248:	e7ee      	b.n	8008228 <__s2b+0x68>
 800824a:	bf00      	nop
 800824c:	0800b015 	.word	0x0800b015
 8008250:	0800b026 	.word	0x0800b026

08008254 <__hi0bits>:
 8008254:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008258:	4603      	mov	r3, r0
 800825a:	bf36      	itet	cc
 800825c:	0403      	lslcc	r3, r0, #16
 800825e:	2000      	movcs	r0, #0
 8008260:	2010      	movcc	r0, #16
 8008262:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008266:	bf3c      	itt	cc
 8008268:	021b      	lslcc	r3, r3, #8
 800826a:	3008      	addcc	r0, #8
 800826c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008270:	bf3c      	itt	cc
 8008272:	011b      	lslcc	r3, r3, #4
 8008274:	3004      	addcc	r0, #4
 8008276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800827a:	bf3c      	itt	cc
 800827c:	009b      	lslcc	r3, r3, #2
 800827e:	3002      	addcc	r0, #2
 8008280:	2b00      	cmp	r3, #0
 8008282:	db05      	blt.n	8008290 <__hi0bits+0x3c>
 8008284:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008288:	f100 0001 	add.w	r0, r0, #1
 800828c:	bf08      	it	eq
 800828e:	2020      	moveq	r0, #32
 8008290:	4770      	bx	lr

08008292 <__lo0bits>:
 8008292:	6803      	ldr	r3, [r0, #0]
 8008294:	4602      	mov	r2, r0
 8008296:	f013 0007 	ands.w	r0, r3, #7
 800829a:	d00b      	beq.n	80082b4 <__lo0bits+0x22>
 800829c:	07d9      	lsls	r1, r3, #31
 800829e:	d421      	bmi.n	80082e4 <__lo0bits+0x52>
 80082a0:	0798      	lsls	r0, r3, #30
 80082a2:	bf49      	itett	mi
 80082a4:	085b      	lsrmi	r3, r3, #1
 80082a6:	089b      	lsrpl	r3, r3, #2
 80082a8:	2001      	movmi	r0, #1
 80082aa:	6013      	strmi	r3, [r2, #0]
 80082ac:	bf5c      	itt	pl
 80082ae:	6013      	strpl	r3, [r2, #0]
 80082b0:	2002      	movpl	r0, #2
 80082b2:	4770      	bx	lr
 80082b4:	b299      	uxth	r1, r3
 80082b6:	b909      	cbnz	r1, 80082bc <__lo0bits+0x2a>
 80082b8:	0c1b      	lsrs	r3, r3, #16
 80082ba:	2010      	movs	r0, #16
 80082bc:	b2d9      	uxtb	r1, r3
 80082be:	b909      	cbnz	r1, 80082c4 <__lo0bits+0x32>
 80082c0:	3008      	adds	r0, #8
 80082c2:	0a1b      	lsrs	r3, r3, #8
 80082c4:	0719      	lsls	r1, r3, #28
 80082c6:	bf04      	itt	eq
 80082c8:	091b      	lsreq	r3, r3, #4
 80082ca:	3004      	addeq	r0, #4
 80082cc:	0799      	lsls	r1, r3, #30
 80082ce:	bf04      	itt	eq
 80082d0:	089b      	lsreq	r3, r3, #2
 80082d2:	3002      	addeq	r0, #2
 80082d4:	07d9      	lsls	r1, r3, #31
 80082d6:	d403      	bmi.n	80082e0 <__lo0bits+0x4e>
 80082d8:	085b      	lsrs	r3, r3, #1
 80082da:	f100 0001 	add.w	r0, r0, #1
 80082de:	d003      	beq.n	80082e8 <__lo0bits+0x56>
 80082e0:	6013      	str	r3, [r2, #0]
 80082e2:	4770      	bx	lr
 80082e4:	2000      	movs	r0, #0
 80082e6:	4770      	bx	lr
 80082e8:	2020      	movs	r0, #32
 80082ea:	4770      	bx	lr

080082ec <__i2b>:
 80082ec:	b510      	push	{r4, lr}
 80082ee:	460c      	mov	r4, r1
 80082f0:	2101      	movs	r1, #1
 80082f2:	f7ff febd 	bl	8008070 <_Balloc>
 80082f6:	4602      	mov	r2, r0
 80082f8:	b928      	cbnz	r0, 8008306 <__i2b+0x1a>
 80082fa:	4b05      	ldr	r3, [pc, #20]	@ (8008310 <__i2b+0x24>)
 80082fc:	4805      	ldr	r0, [pc, #20]	@ (8008314 <__i2b+0x28>)
 80082fe:	f240 1145 	movw	r1, #325	@ 0x145
 8008302:	f001 fc11 	bl	8009b28 <__assert_func>
 8008306:	2301      	movs	r3, #1
 8008308:	6144      	str	r4, [r0, #20]
 800830a:	6103      	str	r3, [r0, #16]
 800830c:	bd10      	pop	{r4, pc}
 800830e:	bf00      	nop
 8008310:	0800b015 	.word	0x0800b015
 8008314:	0800b026 	.word	0x0800b026

08008318 <__multiply>:
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	4617      	mov	r7, r2
 800831e:	690a      	ldr	r2, [r1, #16]
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	429a      	cmp	r2, r3
 8008324:	bfa8      	it	ge
 8008326:	463b      	movge	r3, r7
 8008328:	4689      	mov	r9, r1
 800832a:	bfa4      	itt	ge
 800832c:	460f      	movge	r7, r1
 800832e:	4699      	movge	r9, r3
 8008330:	693d      	ldr	r5, [r7, #16]
 8008332:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6879      	ldr	r1, [r7, #4]
 800833a:	eb05 060a 	add.w	r6, r5, sl
 800833e:	42b3      	cmp	r3, r6
 8008340:	b085      	sub	sp, #20
 8008342:	bfb8      	it	lt
 8008344:	3101      	addlt	r1, #1
 8008346:	f7ff fe93 	bl	8008070 <_Balloc>
 800834a:	b930      	cbnz	r0, 800835a <__multiply+0x42>
 800834c:	4602      	mov	r2, r0
 800834e:	4b41      	ldr	r3, [pc, #260]	@ (8008454 <__multiply+0x13c>)
 8008350:	4841      	ldr	r0, [pc, #260]	@ (8008458 <__multiply+0x140>)
 8008352:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008356:	f001 fbe7 	bl	8009b28 <__assert_func>
 800835a:	f100 0414 	add.w	r4, r0, #20
 800835e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008362:	4623      	mov	r3, r4
 8008364:	2200      	movs	r2, #0
 8008366:	4573      	cmp	r3, lr
 8008368:	d320      	bcc.n	80083ac <__multiply+0x94>
 800836a:	f107 0814 	add.w	r8, r7, #20
 800836e:	f109 0114 	add.w	r1, r9, #20
 8008372:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008376:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800837a:	9302      	str	r3, [sp, #8]
 800837c:	1beb      	subs	r3, r5, r7
 800837e:	3b15      	subs	r3, #21
 8008380:	f023 0303 	bic.w	r3, r3, #3
 8008384:	3304      	adds	r3, #4
 8008386:	3715      	adds	r7, #21
 8008388:	42bd      	cmp	r5, r7
 800838a:	bf38      	it	cc
 800838c:	2304      	movcc	r3, #4
 800838e:	9301      	str	r3, [sp, #4]
 8008390:	9b02      	ldr	r3, [sp, #8]
 8008392:	9103      	str	r1, [sp, #12]
 8008394:	428b      	cmp	r3, r1
 8008396:	d80c      	bhi.n	80083b2 <__multiply+0x9a>
 8008398:	2e00      	cmp	r6, #0
 800839a:	dd03      	ble.n	80083a4 <__multiply+0x8c>
 800839c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d055      	beq.n	8008450 <__multiply+0x138>
 80083a4:	6106      	str	r6, [r0, #16]
 80083a6:	b005      	add	sp, #20
 80083a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083ac:	f843 2b04 	str.w	r2, [r3], #4
 80083b0:	e7d9      	b.n	8008366 <__multiply+0x4e>
 80083b2:	f8b1 a000 	ldrh.w	sl, [r1]
 80083b6:	f1ba 0f00 	cmp.w	sl, #0
 80083ba:	d01f      	beq.n	80083fc <__multiply+0xe4>
 80083bc:	46c4      	mov	ip, r8
 80083be:	46a1      	mov	r9, r4
 80083c0:	2700      	movs	r7, #0
 80083c2:	f85c 2b04 	ldr.w	r2, [ip], #4
 80083c6:	f8d9 3000 	ldr.w	r3, [r9]
 80083ca:	fa1f fb82 	uxth.w	fp, r2
 80083ce:	b29b      	uxth	r3, r3
 80083d0:	fb0a 330b 	mla	r3, sl, fp, r3
 80083d4:	443b      	add	r3, r7
 80083d6:	f8d9 7000 	ldr.w	r7, [r9]
 80083da:	0c12      	lsrs	r2, r2, #16
 80083dc:	0c3f      	lsrs	r7, r7, #16
 80083de:	fb0a 7202 	mla	r2, sl, r2, r7
 80083e2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80083e6:	b29b      	uxth	r3, r3
 80083e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80083ec:	4565      	cmp	r5, ip
 80083ee:	f849 3b04 	str.w	r3, [r9], #4
 80083f2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80083f6:	d8e4      	bhi.n	80083c2 <__multiply+0xaa>
 80083f8:	9b01      	ldr	r3, [sp, #4]
 80083fa:	50e7      	str	r7, [r4, r3]
 80083fc:	9b03      	ldr	r3, [sp, #12]
 80083fe:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8008402:	3104      	adds	r1, #4
 8008404:	f1b9 0f00 	cmp.w	r9, #0
 8008408:	d020      	beq.n	800844c <__multiply+0x134>
 800840a:	6823      	ldr	r3, [r4, #0]
 800840c:	4647      	mov	r7, r8
 800840e:	46a4      	mov	ip, r4
 8008410:	f04f 0a00 	mov.w	sl, #0
 8008414:	f8b7 b000 	ldrh.w	fp, [r7]
 8008418:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800841c:	fb09 220b 	mla	r2, r9, fp, r2
 8008420:	4452      	add	r2, sl
 8008422:	b29b      	uxth	r3, r3
 8008424:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008428:	f84c 3b04 	str.w	r3, [ip], #4
 800842c:	f857 3b04 	ldr.w	r3, [r7], #4
 8008430:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008434:	f8bc 3000 	ldrh.w	r3, [ip]
 8008438:	fb09 330a 	mla	r3, r9, sl, r3
 800843c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008440:	42bd      	cmp	r5, r7
 8008442:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008446:	d8e5      	bhi.n	8008414 <__multiply+0xfc>
 8008448:	9a01      	ldr	r2, [sp, #4]
 800844a:	50a3      	str	r3, [r4, r2]
 800844c:	3404      	adds	r4, #4
 800844e:	e79f      	b.n	8008390 <__multiply+0x78>
 8008450:	3e01      	subs	r6, #1
 8008452:	e7a1      	b.n	8008398 <__multiply+0x80>
 8008454:	0800b015 	.word	0x0800b015
 8008458:	0800b026 	.word	0x0800b026

0800845c <__pow5mult>:
 800845c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008460:	4615      	mov	r5, r2
 8008462:	f012 0203 	ands.w	r2, r2, #3
 8008466:	4607      	mov	r7, r0
 8008468:	460e      	mov	r6, r1
 800846a:	d007      	beq.n	800847c <__pow5mult+0x20>
 800846c:	4c25      	ldr	r4, [pc, #148]	@ (8008504 <__pow5mult+0xa8>)
 800846e:	3a01      	subs	r2, #1
 8008470:	2300      	movs	r3, #0
 8008472:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008476:	f7ff fe5d 	bl	8008134 <__multadd>
 800847a:	4606      	mov	r6, r0
 800847c:	10ad      	asrs	r5, r5, #2
 800847e:	d03d      	beq.n	80084fc <__pow5mult+0xa0>
 8008480:	69fc      	ldr	r4, [r7, #28]
 8008482:	b97c      	cbnz	r4, 80084a4 <__pow5mult+0x48>
 8008484:	2010      	movs	r0, #16
 8008486:	f7ff fd3d 	bl	8007f04 <malloc>
 800848a:	4602      	mov	r2, r0
 800848c:	61f8      	str	r0, [r7, #28]
 800848e:	b928      	cbnz	r0, 800849c <__pow5mult+0x40>
 8008490:	4b1d      	ldr	r3, [pc, #116]	@ (8008508 <__pow5mult+0xac>)
 8008492:	481e      	ldr	r0, [pc, #120]	@ (800850c <__pow5mult+0xb0>)
 8008494:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008498:	f001 fb46 	bl	8009b28 <__assert_func>
 800849c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80084a0:	6004      	str	r4, [r0, #0]
 80084a2:	60c4      	str	r4, [r0, #12]
 80084a4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80084a8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80084ac:	b94c      	cbnz	r4, 80084c2 <__pow5mult+0x66>
 80084ae:	f240 2171 	movw	r1, #625	@ 0x271
 80084b2:	4638      	mov	r0, r7
 80084b4:	f7ff ff1a 	bl	80082ec <__i2b>
 80084b8:	2300      	movs	r3, #0
 80084ba:	f8c8 0008 	str.w	r0, [r8, #8]
 80084be:	4604      	mov	r4, r0
 80084c0:	6003      	str	r3, [r0, #0]
 80084c2:	f04f 0900 	mov.w	r9, #0
 80084c6:	07eb      	lsls	r3, r5, #31
 80084c8:	d50a      	bpl.n	80084e0 <__pow5mult+0x84>
 80084ca:	4631      	mov	r1, r6
 80084cc:	4622      	mov	r2, r4
 80084ce:	4638      	mov	r0, r7
 80084d0:	f7ff ff22 	bl	8008318 <__multiply>
 80084d4:	4631      	mov	r1, r6
 80084d6:	4680      	mov	r8, r0
 80084d8:	4638      	mov	r0, r7
 80084da:	f7ff fe09 	bl	80080f0 <_Bfree>
 80084de:	4646      	mov	r6, r8
 80084e0:	106d      	asrs	r5, r5, #1
 80084e2:	d00b      	beq.n	80084fc <__pow5mult+0xa0>
 80084e4:	6820      	ldr	r0, [r4, #0]
 80084e6:	b938      	cbnz	r0, 80084f8 <__pow5mult+0x9c>
 80084e8:	4622      	mov	r2, r4
 80084ea:	4621      	mov	r1, r4
 80084ec:	4638      	mov	r0, r7
 80084ee:	f7ff ff13 	bl	8008318 <__multiply>
 80084f2:	6020      	str	r0, [r4, #0]
 80084f4:	f8c0 9000 	str.w	r9, [r0]
 80084f8:	4604      	mov	r4, r0
 80084fa:	e7e4      	b.n	80084c6 <__pow5mult+0x6a>
 80084fc:	4630      	mov	r0, r6
 80084fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008502:	bf00      	nop
 8008504:	0800b138 	.word	0x0800b138
 8008508:	0800afa6 	.word	0x0800afa6
 800850c:	0800b026 	.word	0x0800b026

08008510 <__lshift>:
 8008510:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008514:	460c      	mov	r4, r1
 8008516:	6849      	ldr	r1, [r1, #4]
 8008518:	6923      	ldr	r3, [r4, #16]
 800851a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800851e:	68a3      	ldr	r3, [r4, #8]
 8008520:	4607      	mov	r7, r0
 8008522:	4691      	mov	r9, r2
 8008524:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008528:	f108 0601 	add.w	r6, r8, #1
 800852c:	42b3      	cmp	r3, r6
 800852e:	db0b      	blt.n	8008548 <__lshift+0x38>
 8008530:	4638      	mov	r0, r7
 8008532:	f7ff fd9d 	bl	8008070 <_Balloc>
 8008536:	4605      	mov	r5, r0
 8008538:	b948      	cbnz	r0, 800854e <__lshift+0x3e>
 800853a:	4602      	mov	r2, r0
 800853c:	4b28      	ldr	r3, [pc, #160]	@ (80085e0 <__lshift+0xd0>)
 800853e:	4829      	ldr	r0, [pc, #164]	@ (80085e4 <__lshift+0xd4>)
 8008540:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008544:	f001 faf0 	bl	8009b28 <__assert_func>
 8008548:	3101      	adds	r1, #1
 800854a:	005b      	lsls	r3, r3, #1
 800854c:	e7ee      	b.n	800852c <__lshift+0x1c>
 800854e:	2300      	movs	r3, #0
 8008550:	f100 0114 	add.w	r1, r0, #20
 8008554:	f100 0210 	add.w	r2, r0, #16
 8008558:	4618      	mov	r0, r3
 800855a:	4553      	cmp	r3, sl
 800855c:	db33      	blt.n	80085c6 <__lshift+0xb6>
 800855e:	6920      	ldr	r0, [r4, #16]
 8008560:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008564:	f104 0314 	add.w	r3, r4, #20
 8008568:	f019 091f 	ands.w	r9, r9, #31
 800856c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008570:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008574:	d02b      	beq.n	80085ce <__lshift+0xbe>
 8008576:	f1c9 0e20 	rsb	lr, r9, #32
 800857a:	468a      	mov	sl, r1
 800857c:	2200      	movs	r2, #0
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	fa00 f009 	lsl.w	r0, r0, r9
 8008584:	4310      	orrs	r0, r2
 8008586:	f84a 0b04 	str.w	r0, [sl], #4
 800858a:	f853 2b04 	ldr.w	r2, [r3], #4
 800858e:	459c      	cmp	ip, r3
 8008590:	fa22 f20e 	lsr.w	r2, r2, lr
 8008594:	d8f3      	bhi.n	800857e <__lshift+0x6e>
 8008596:	ebac 0304 	sub.w	r3, ip, r4
 800859a:	3b15      	subs	r3, #21
 800859c:	f023 0303 	bic.w	r3, r3, #3
 80085a0:	3304      	adds	r3, #4
 80085a2:	f104 0015 	add.w	r0, r4, #21
 80085a6:	4560      	cmp	r0, ip
 80085a8:	bf88      	it	hi
 80085aa:	2304      	movhi	r3, #4
 80085ac:	50ca      	str	r2, [r1, r3]
 80085ae:	b10a      	cbz	r2, 80085b4 <__lshift+0xa4>
 80085b0:	f108 0602 	add.w	r6, r8, #2
 80085b4:	3e01      	subs	r6, #1
 80085b6:	4638      	mov	r0, r7
 80085b8:	612e      	str	r6, [r5, #16]
 80085ba:	4621      	mov	r1, r4
 80085bc:	f7ff fd98 	bl	80080f0 <_Bfree>
 80085c0:	4628      	mov	r0, r5
 80085c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c6:	f842 0f04 	str.w	r0, [r2, #4]!
 80085ca:	3301      	adds	r3, #1
 80085cc:	e7c5      	b.n	800855a <__lshift+0x4a>
 80085ce:	3904      	subs	r1, #4
 80085d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80085d4:	f841 2f04 	str.w	r2, [r1, #4]!
 80085d8:	459c      	cmp	ip, r3
 80085da:	d8f9      	bhi.n	80085d0 <__lshift+0xc0>
 80085dc:	e7ea      	b.n	80085b4 <__lshift+0xa4>
 80085de:	bf00      	nop
 80085e0:	0800b015 	.word	0x0800b015
 80085e4:	0800b026 	.word	0x0800b026

080085e8 <__mcmp>:
 80085e8:	690a      	ldr	r2, [r1, #16]
 80085ea:	4603      	mov	r3, r0
 80085ec:	6900      	ldr	r0, [r0, #16]
 80085ee:	1a80      	subs	r0, r0, r2
 80085f0:	b530      	push	{r4, r5, lr}
 80085f2:	d10e      	bne.n	8008612 <__mcmp+0x2a>
 80085f4:	3314      	adds	r3, #20
 80085f6:	3114      	adds	r1, #20
 80085f8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80085fc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008600:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008604:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008608:	4295      	cmp	r5, r2
 800860a:	d003      	beq.n	8008614 <__mcmp+0x2c>
 800860c:	d205      	bcs.n	800861a <__mcmp+0x32>
 800860e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008612:	bd30      	pop	{r4, r5, pc}
 8008614:	42a3      	cmp	r3, r4
 8008616:	d3f3      	bcc.n	8008600 <__mcmp+0x18>
 8008618:	e7fb      	b.n	8008612 <__mcmp+0x2a>
 800861a:	2001      	movs	r0, #1
 800861c:	e7f9      	b.n	8008612 <__mcmp+0x2a>
	...

08008620 <__mdiff>:
 8008620:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008624:	4689      	mov	r9, r1
 8008626:	4606      	mov	r6, r0
 8008628:	4611      	mov	r1, r2
 800862a:	4648      	mov	r0, r9
 800862c:	4614      	mov	r4, r2
 800862e:	f7ff ffdb 	bl	80085e8 <__mcmp>
 8008632:	1e05      	subs	r5, r0, #0
 8008634:	d112      	bne.n	800865c <__mdiff+0x3c>
 8008636:	4629      	mov	r1, r5
 8008638:	4630      	mov	r0, r6
 800863a:	f7ff fd19 	bl	8008070 <_Balloc>
 800863e:	4602      	mov	r2, r0
 8008640:	b928      	cbnz	r0, 800864e <__mdiff+0x2e>
 8008642:	4b3f      	ldr	r3, [pc, #252]	@ (8008740 <__mdiff+0x120>)
 8008644:	f240 2137 	movw	r1, #567	@ 0x237
 8008648:	483e      	ldr	r0, [pc, #248]	@ (8008744 <__mdiff+0x124>)
 800864a:	f001 fa6d 	bl	8009b28 <__assert_func>
 800864e:	2301      	movs	r3, #1
 8008650:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008654:	4610      	mov	r0, r2
 8008656:	b003      	add	sp, #12
 8008658:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800865c:	bfbc      	itt	lt
 800865e:	464b      	movlt	r3, r9
 8008660:	46a1      	movlt	r9, r4
 8008662:	4630      	mov	r0, r6
 8008664:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008668:	bfba      	itte	lt
 800866a:	461c      	movlt	r4, r3
 800866c:	2501      	movlt	r5, #1
 800866e:	2500      	movge	r5, #0
 8008670:	f7ff fcfe 	bl	8008070 <_Balloc>
 8008674:	4602      	mov	r2, r0
 8008676:	b918      	cbnz	r0, 8008680 <__mdiff+0x60>
 8008678:	4b31      	ldr	r3, [pc, #196]	@ (8008740 <__mdiff+0x120>)
 800867a:	f240 2145 	movw	r1, #581	@ 0x245
 800867e:	e7e3      	b.n	8008648 <__mdiff+0x28>
 8008680:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008684:	6926      	ldr	r6, [r4, #16]
 8008686:	60c5      	str	r5, [r0, #12]
 8008688:	f109 0310 	add.w	r3, r9, #16
 800868c:	f109 0514 	add.w	r5, r9, #20
 8008690:	f104 0e14 	add.w	lr, r4, #20
 8008694:	f100 0b14 	add.w	fp, r0, #20
 8008698:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800869c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	46d9      	mov	r9, fp
 80086a4:	f04f 0c00 	mov.w	ip, #0
 80086a8:	9b01      	ldr	r3, [sp, #4]
 80086aa:	f85e 0b04 	ldr.w	r0, [lr], #4
 80086ae:	f853 af04 	ldr.w	sl, [r3, #4]!
 80086b2:	9301      	str	r3, [sp, #4]
 80086b4:	fa1f f38a 	uxth.w	r3, sl
 80086b8:	4619      	mov	r1, r3
 80086ba:	b283      	uxth	r3, r0
 80086bc:	1acb      	subs	r3, r1, r3
 80086be:	0c00      	lsrs	r0, r0, #16
 80086c0:	4463      	add	r3, ip
 80086c2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80086c6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80086ca:	b29b      	uxth	r3, r3
 80086cc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80086d0:	4576      	cmp	r6, lr
 80086d2:	f849 3b04 	str.w	r3, [r9], #4
 80086d6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80086da:	d8e5      	bhi.n	80086a8 <__mdiff+0x88>
 80086dc:	1b33      	subs	r3, r6, r4
 80086de:	3b15      	subs	r3, #21
 80086e0:	f023 0303 	bic.w	r3, r3, #3
 80086e4:	3415      	adds	r4, #21
 80086e6:	3304      	adds	r3, #4
 80086e8:	42a6      	cmp	r6, r4
 80086ea:	bf38      	it	cc
 80086ec:	2304      	movcc	r3, #4
 80086ee:	441d      	add	r5, r3
 80086f0:	445b      	add	r3, fp
 80086f2:	461e      	mov	r6, r3
 80086f4:	462c      	mov	r4, r5
 80086f6:	4544      	cmp	r4, r8
 80086f8:	d30e      	bcc.n	8008718 <__mdiff+0xf8>
 80086fa:	f108 0103 	add.w	r1, r8, #3
 80086fe:	1b49      	subs	r1, r1, r5
 8008700:	f021 0103 	bic.w	r1, r1, #3
 8008704:	3d03      	subs	r5, #3
 8008706:	45a8      	cmp	r8, r5
 8008708:	bf38      	it	cc
 800870a:	2100      	movcc	r1, #0
 800870c:	440b      	add	r3, r1
 800870e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008712:	b191      	cbz	r1, 800873a <__mdiff+0x11a>
 8008714:	6117      	str	r7, [r2, #16]
 8008716:	e79d      	b.n	8008654 <__mdiff+0x34>
 8008718:	f854 1b04 	ldr.w	r1, [r4], #4
 800871c:	46e6      	mov	lr, ip
 800871e:	0c08      	lsrs	r0, r1, #16
 8008720:	fa1c fc81 	uxtah	ip, ip, r1
 8008724:	4471      	add	r1, lr
 8008726:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800872a:	b289      	uxth	r1, r1
 800872c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008730:	f846 1b04 	str.w	r1, [r6], #4
 8008734:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008738:	e7dd      	b.n	80086f6 <__mdiff+0xd6>
 800873a:	3f01      	subs	r7, #1
 800873c:	e7e7      	b.n	800870e <__mdiff+0xee>
 800873e:	bf00      	nop
 8008740:	0800b015 	.word	0x0800b015
 8008744:	0800b026 	.word	0x0800b026

08008748 <__ulp>:
 8008748:	b082      	sub	sp, #8
 800874a:	ed8d 0b00 	vstr	d0, [sp]
 800874e:	9a01      	ldr	r2, [sp, #4]
 8008750:	4b0f      	ldr	r3, [pc, #60]	@ (8008790 <__ulp+0x48>)
 8008752:	4013      	ands	r3, r2
 8008754:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008758:	2b00      	cmp	r3, #0
 800875a:	dc08      	bgt.n	800876e <__ulp+0x26>
 800875c:	425b      	negs	r3, r3
 800875e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008762:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008766:	da04      	bge.n	8008772 <__ulp+0x2a>
 8008768:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800876c:	4113      	asrs	r3, r2
 800876e:	2200      	movs	r2, #0
 8008770:	e008      	b.n	8008784 <__ulp+0x3c>
 8008772:	f1a2 0314 	sub.w	r3, r2, #20
 8008776:	2b1e      	cmp	r3, #30
 8008778:	bfda      	itte	le
 800877a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800877e:	40da      	lsrle	r2, r3
 8008780:	2201      	movgt	r2, #1
 8008782:	2300      	movs	r3, #0
 8008784:	4619      	mov	r1, r3
 8008786:	4610      	mov	r0, r2
 8008788:	ec41 0b10 	vmov	d0, r0, r1
 800878c:	b002      	add	sp, #8
 800878e:	4770      	bx	lr
 8008790:	7ff00000 	.word	0x7ff00000

08008794 <__b2d>:
 8008794:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008798:	6906      	ldr	r6, [r0, #16]
 800879a:	f100 0814 	add.w	r8, r0, #20
 800879e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80087a2:	1f37      	subs	r7, r6, #4
 80087a4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80087a8:	4610      	mov	r0, r2
 80087aa:	f7ff fd53 	bl	8008254 <__hi0bits>
 80087ae:	f1c0 0320 	rsb	r3, r0, #32
 80087b2:	280a      	cmp	r0, #10
 80087b4:	600b      	str	r3, [r1, #0]
 80087b6:	491b      	ldr	r1, [pc, #108]	@ (8008824 <__b2d+0x90>)
 80087b8:	dc15      	bgt.n	80087e6 <__b2d+0x52>
 80087ba:	f1c0 0c0b 	rsb	ip, r0, #11
 80087be:	fa22 f30c 	lsr.w	r3, r2, ip
 80087c2:	45b8      	cmp	r8, r7
 80087c4:	ea43 0501 	orr.w	r5, r3, r1
 80087c8:	bf34      	ite	cc
 80087ca:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80087ce:	2300      	movcs	r3, #0
 80087d0:	3015      	adds	r0, #21
 80087d2:	fa02 f000 	lsl.w	r0, r2, r0
 80087d6:	fa23 f30c 	lsr.w	r3, r3, ip
 80087da:	4303      	orrs	r3, r0
 80087dc:	461c      	mov	r4, r3
 80087de:	ec45 4b10 	vmov	d0, r4, r5
 80087e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087e6:	45b8      	cmp	r8, r7
 80087e8:	bf3a      	itte	cc
 80087ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80087ee:	f1a6 0708 	subcc.w	r7, r6, #8
 80087f2:	2300      	movcs	r3, #0
 80087f4:	380b      	subs	r0, #11
 80087f6:	d012      	beq.n	800881e <__b2d+0x8a>
 80087f8:	f1c0 0120 	rsb	r1, r0, #32
 80087fc:	fa23 f401 	lsr.w	r4, r3, r1
 8008800:	4082      	lsls	r2, r0
 8008802:	4322      	orrs	r2, r4
 8008804:	4547      	cmp	r7, r8
 8008806:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800880a:	bf8c      	ite	hi
 800880c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008810:	2200      	movls	r2, #0
 8008812:	4083      	lsls	r3, r0
 8008814:	40ca      	lsrs	r2, r1
 8008816:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800881a:	4313      	orrs	r3, r2
 800881c:	e7de      	b.n	80087dc <__b2d+0x48>
 800881e:	ea42 0501 	orr.w	r5, r2, r1
 8008822:	e7db      	b.n	80087dc <__b2d+0x48>
 8008824:	3ff00000 	.word	0x3ff00000

08008828 <__d2b>:
 8008828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800882c:	460f      	mov	r7, r1
 800882e:	2101      	movs	r1, #1
 8008830:	ec59 8b10 	vmov	r8, r9, d0
 8008834:	4616      	mov	r6, r2
 8008836:	f7ff fc1b 	bl	8008070 <_Balloc>
 800883a:	4604      	mov	r4, r0
 800883c:	b930      	cbnz	r0, 800884c <__d2b+0x24>
 800883e:	4602      	mov	r2, r0
 8008840:	4b23      	ldr	r3, [pc, #140]	@ (80088d0 <__d2b+0xa8>)
 8008842:	4824      	ldr	r0, [pc, #144]	@ (80088d4 <__d2b+0xac>)
 8008844:	f240 310f 	movw	r1, #783	@ 0x30f
 8008848:	f001 f96e 	bl	8009b28 <__assert_func>
 800884c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008850:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008854:	b10d      	cbz	r5, 800885a <__d2b+0x32>
 8008856:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800885a:	9301      	str	r3, [sp, #4]
 800885c:	f1b8 0300 	subs.w	r3, r8, #0
 8008860:	d023      	beq.n	80088aa <__d2b+0x82>
 8008862:	4668      	mov	r0, sp
 8008864:	9300      	str	r3, [sp, #0]
 8008866:	f7ff fd14 	bl	8008292 <__lo0bits>
 800886a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800886e:	b1d0      	cbz	r0, 80088a6 <__d2b+0x7e>
 8008870:	f1c0 0320 	rsb	r3, r0, #32
 8008874:	fa02 f303 	lsl.w	r3, r2, r3
 8008878:	430b      	orrs	r3, r1
 800887a:	40c2      	lsrs	r2, r0
 800887c:	6163      	str	r3, [r4, #20]
 800887e:	9201      	str	r2, [sp, #4]
 8008880:	9b01      	ldr	r3, [sp, #4]
 8008882:	61a3      	str	r3, [r4, #24]
 8008884:	2b00      	cmp	r3, #0
 8008886:	bf0c      	ite	eq
 8008888:	2201      	moveq	r2, #1
 800888a:	2202      	movne	r2, #2
 800888c:	6122      	str	r2, [r4, #16]
 800888e:	b1a5      	cbz	r5, 80088ba <__d2b+0x92>
 8008890:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008894:	4405      	add	r5, r0
 8008896:	603d      	str	r5, [r7, #0]
 8008898:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800889c:	6030      	str	r0, [r6, #0]
 800889e:	4620      	mov	r0, r4
 80088a0:	b003      	add	sp, #12
 80088a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80088a6:	6161      	str	r1, [r4, #20]
 80088a8:	e7ea      	b.n	8008880 <__d2b+0x58>
 80088aa:	a801      	add	r0, sp, #4
 80088ac:	f7ff fcf1 	bl	8008292 <__lo0bits>
 80088b0:	9b01      	ldr	r3, [sp, #4]
 80088b2:	6163      	str	r3, [r4, #20]
 80088b4:	3020      	adds	r0, #32
 80088b6:	2201      	movs	r2, #1
 80088b8:	e7e8      	b.n	800888c <__d2b+0x64>
 80088ba:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80088be:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80088c2:	6038      	str	r0, [r7, #0]
 80088c4:	6918      	ldr	r0, [r3, #16]
 80088c6:	f7ff fcc5 	bl	8008254 <__hi0bits>
 80088ca:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088ce:	e7e5      	b.n	800889c <__d2b+0x74>
 80088d0:	0800b015 	.word	0x0800b015
 80088d4:	0800b026 	.word	0x0800b026

080088d8 <__ratio>:
 80088d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088dc:	b085      	sub	sp, #20
 80088de:	e9cd 1000 	strd	r1, r0, [sp]
 80088e2:	a902      	add	r1, sp, #8
 80088e4:	f7ff ff56 	bl	8008794 <__b2d>
 80088e8:	9800      	ldr	r0, [sp, #0]
 80088ea:	a903      	add	r1, sp, #12
 80088ec:	ec55 4b10 	vmov	r4, r5, d0
 80088f0:	f7ff ff50 	bl	8008794 <__b2d>
 80088f4:	9b01      	ldr	r3, [sp, #4]
 80088f6:	6919      	ldr	r1, [r3, #16]
 80088f8:	9b00      	ldr	r3, [sp, #0]
 80088fa:	691b      	ldr	r3, [r3, #16]
 80088fc:	1ac9      	subs	r1, r1, r3
 80088fe:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008902:	1a9b      	subs	r3, r3, r2
 8008904:	ec5b ab10 	vmov	sl, fp, d0
 8008908:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800890c:	2b00      	cmp	r3, #0
 800890e:	bfce      	itee	gt
 8008910:	462a      	movgt	r2, r5
 8008912:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008916:	465a      	movle	r2, fp
 8008918:	462f      	mov	r7, r5
 800891a:	46d9      	mov	r9, fp
 800891c:	bfcc      	ite	gt
 800891e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008922:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008926:	464b      	mov	r3, r9
 8008928:	4652      	mov	r2, sl
 800892a:	4620      	mov	r0, r4
 800892c:	4639      	mov	r1, r7
 800892e:	f7f7 ff8d 	bl	800084c <__aeabi_ddiv>
 8008932:	ec41 0b10 	vmov	d0, r0, r1
 8008936:	b005      	add	sp, #20
 8008938:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800893c <__copybits>:
 800893c:	3901      	subs	r1, #1
 800893e:	b570      	push	{r4, r5, r6, lr}
 8008940:	1149      	asrs	r1, r1, #5
 8008942:	6914      	ldr	r4, [r2, #16]
 8008944:	3101      	adds	r1, #1
 8008946:	f102 0314 	add.w	r3, r2, #20
 800894a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800894e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008952:	1f05      	subs	r5, r0, #4
 8008954:	42a3      	cmp	r3, r4
 8008956:	d30c      	bcc.n	8008972 <__copybits+0x36>
 8008958:	1aa3      	subs	r3, r4, r2
 800895a:	3b11      	subs	r3, #17
 800895c:	f023 0303 	bic.w	r3, r3, #3
 8008960:	3211      	adds	r2, #17
 8008962:	42a2      	cmp	r2, r4
 8008964:	bf88      	it	hi
 8008966:	2300      	movhi	r3, #0
 8008968:	4418      	add	r0, r3
 800896a:	2300      	movs	r3, #0
 800896c:	4288      	cmp	r0, r1
 800896e:	d305      	bcc.n	800897c <__copybits+0x40>
 8008970:	bd70      	pop	{r4, r5, r6, pc}
 8008972:	f853 6b04 	ldr.w	r6, [r3], #4
 8008976:	f845 6f04 	str.w	r6, [r5, #4]!
 800897a:	e7eb      	b.n	8008954 <__copybits+0x18>
 800897c:	f840 3b04 	str.w	r3, [r0], #4
 8008980:	e7f4      	b.n	800896c <__copybits+0x30>

08008982 <__any_on>:
 8008982:	f100 0214 	add.w	r2, r0, #20
 8008986:	6900      	ldr	r0, [r0, #16]
 8008988:	114b      	asrs	r3, r1, #5
 800898a:	4298      	cmp	r0, r3
 800898c:	b510      	push	{r4, lr}
 800898e:	db11      	blt.n	80089b4 <__any_on+0x32>
 8008990:	dd0a      	ble.n	80089a8 <__any_on+0x26>
 8008992:	f011 011f 	ands.w	r1, r1, #31
 8008996:	d007      	beq.n	80089a8 <__any_on+0x26>
 8008998:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800899c:	fa24 f001 	lsr.w	r0, r4, r1
 80089a0:	fa00 f101 	lsl.w	r1, r0, r1
 80089a4:	428c      	cmp	r4, r1
 80089a6:	d10b      	bne.n	80089c0 <__any_on+0x3e>
 80089a8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80089ac:	4293      	cmp	r3, r2
 80089ae:	d803      	bhi.n	80089b8 <__any_on+0x36>
 80089b0:	2000      	movs	r0, #0
 80089b2:	bd10      	pop	{r4, pc}
 80089b4:	4603      	mov	r3, r0
 80089b6:	e7f7      	b.n	80089a8 <__any_on+0x26>
 80089b8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80089bc:	2900      	cmp	r1, #0
 80089be:	d0f5      	beq.n	80089ac <__any_on+0x2a>
 80089c0:	2001      	movs	r0, #1
 80089c2:	e7f6      	b.n	80089b2 <__any_on+0x30>

080089c4 <sulp>:
 80089c4:	b570      	push	{r4, r5, r6, lr}
 80089c6:	4604      	mov	r4, r0
 80089c8:	460d      	mov	r5, r1
 80089ca:	ec45 4b10 	vmov	d0, r4, r5
 80089ce:	4616      	mov	r6, r2
 80089d0:	f7ff feba 	bl	8008748 <__ulp>
 80089d4:	ec51 0b10 	vmov	r0, r1, d0
 80089d8:	b17e      	cbz	r6, 80089fa <sulp+0x36>
 80089da:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80089de:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80089e2:	2b00      	cmp	r3, #0
 80089e4:	dd09      	ble.n	80089fa <sulp+0x36>
 80089e6:	051b      	lsls	r3, r3, #20
 80089e8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80089ec:	2400      	movs	r4, #0
 80089ee:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80089f2:	4622      	mov	r2, r4
 80089f4:	462b      	mov	r3, r5
 80089f6:	f7f7 fdff 	bl	80005f8 <__aeabi_dmul>
 80089fa:	ec41 0b10 	vmov	d0, r0, r1
 80089fe:	bd70      	pop	{r4, r5, r6, pc}

08008a00 <_strtod_l>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	b09f      	sub	sp, #124	@ 0x7c
 8008a06:	460c      	mov	r4, r1
 8008a08:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	921a      	str	r2, [sp, #104]	@ 0x68
 8008a0e:	9005      	str	r0, [sp, #20]
 8008a10:	f04f 0a00 	mov.w	sl, #0
 8008a14:	f04f 0b00 	mov.w	fp, #0
 8008a18:	460a      	mov	r2, r1
 8008a1a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008a1c:	7811      	ldrb	r1, [r2, #0]
 8008a1e:	292b      	cmp	r1, #43	@ 0x2b
 8008a20:	d04a      	beq.n	8008ab8 <_strtod_l+0xb8>
 8008a22:	d838      	bhi.n	8008a96 <_strtod_l+0x96>
 8008a24:	290d      	cmp	r1, #13
 8008a26:	d832      	bhi.n	8008a8e <_strtod_l+0x8e>
 8008a28:	2908      	cmp	r1, #8
 8008a2a:	d832      	bhi.n	8008a92 <_strtod_l+0x92>
 8008a2c:	2900      	cmp	r1, #0
 8008a2e:	d03b      	beq.n	8008aa8 <_strtod_l+0xa8>
 8008a30:	2200      	movs	r2, #0
 8008a32:	920e      	str	r2, [sp, #56]	@ 0x38
 8008a34:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8008a36:	782a      	ldrb	r2, [r5, #0]
 8008a38:	2a30      	cmp	r2, #48	@ 0x30
 8008a3a:	f040 80b2 	bne.w	8008ba2 <_strtod_l+0x1a2>
 8008a3e:	786a      	ldrb	r2, [r5, #1]
 8008a40:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008a44:	2a58      	cmp	r2, #88	@ 0x58
 8008a46:	d16e      	bne.n	8008b26 <_strtod_l+0x126>
 8008a48:	9302      	str	r3, [sp, #8]
 8008a4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a4c:	9301      	str	r3, [sp, #4]
 8008a4e:	ab1a      	add	r3, sp, #104	@ 0x68
 8008a50:	9300      	str	r3, [sp, #0]
 8008a52:	4a8f      	ldr	r2, [pc, #572]	@ (8008c90 <_strtod_l+0x290>)
 8008a54:	9805      	ldr	r0, [sp, #20]
 8008a56:	ab1b      	add	r3, sp, #108	@ 0x6c
 8008a58:	a919      	add	r1, sp, #100	@ 0x64
 8008a5a:	f001 f8ff 	bl	8009c5c <__gethex>
 8008a5e:	f010 060f 	ands.w	r6, r0, #15
 8008a62:	4604      	mov	r4, r0
 8008a64:	d005      	beq.n	8008a72 <_strtod_l+0x72>
 8008a66:	2e06      	cmp	r6, #6
 8008a68:	d128      	bne.n	8008abc <_strtod_l+0xbc>
 8008a6a:	3501      	adds	r5, #1
 8008a6c:	2300      	movs	r3, #0
 8008a6e:	9519      	str	r5, [sp, #100]	@ 0x64
 8008a70:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a72:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f040 858e 	bne.w	8009596 <_strtod_l+0xb96>
 8008a7a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a7c:	b1cb      	cbz	r3, 8008ab2 <_strtod_l+0xb2>
 8008a7e:	4652      	mov	r2, sl
 8008a80:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8008a84:	ec43 2b10 	vmov	d0, r2, r3
 8008a88:	b01f      	add	sp, #124	@ 0x7c
 8008a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a8e:	2920      	cmp	r1, #32
 8008a90:	d1ce      	bne.n	8008a30 <_strtod_l+0x30>
 8008a92:	3201      	adds	r2, #1
 8008a94:	e7c1      	b.n	8008a1a <_strtod_l+0x1a>
 8008a96:	292d      	cmp	r1, #45	@ 0x2d
 8008a98:	d1ca      	bne.n	8008a30 <_strtod_l+0x30>
 8008a9a:	2101      	movs	r1, #1
 8008a9c:	910e      	str	r1, [sp, #56]	@ 0x38
 8008a9e:	1c51      	adds	r1, r2, #1
 8008aa0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008aa2:	7852      	ldrb	r2, [r2, #1]
 8008aa4:	2a00      	cmp	r2, #0
 8008aa6:	d1c5      	bne.n	8008a34 <_strtod_l+0x34>
 8008aa8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008aaa:	9419      	str	r4, [sp, #100]	@ 0x64
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f040 8570 	bne.w	8009592 <_strtod_l+0xb92>
 8008ab2:	4652      	mov	r2, sl
 8008ab4:	465b      	mov	r3, fp
 8008ab6:	e7e5      	b.n	8008a84 <_strtod_l+0x84>
 8008ab8:	2100      	movs	r1, #0
 8008aba:	e7ef      	b.n	8008a9c <_strtod_l+0x9c>
 8008abc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008abe:	b13a      	cbz	r2, 8008ad0 <_strtod_l+0xd0>
 8008ac0:	2135      	movs	r1, #53	@ 0x35
 8008ac2:	a81c      	add	r0, sp, #112	@ 0x70
 8008ac4:	f7ff ff3a 	bl	800893c <__copybits>
 8008ac8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008aca:	9805      	ldr	r0, [sp, #20]
 8008acc:	f7ff fb10 	bl	80080f0 <_Bfree>
 8008ad0:	3e01      	subs	r6, #1
 8008ad2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8008ad4:	2e04      	cmp	r6, #4
 8008ad6:	d806      	bhi.n	8008ae6 <_strtod_l+0xe6>
 8008ad8:	e8df f006 	tbb	[pc, r6]
 8008adc:	201d0314 	.word	0x201d0314
 8008ae0:	14          	.byte	0x14
 8008ae1:	00          	.byte	0x00
 8008ae2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8008ae6:	05e1      	lsls	r1, r4, #23
 8008ae8:	bf48      	it	mi
 8008aea:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8008aee:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8008af2:	0d1b      	lsrs	r3, r3, #20
 8008af4:	051b      	lsls	r3, r3, #20
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1bb      	bne.n	8008a72 <_strtod_l+0x72>
 8008afa:	f7fe fb1f 	bl	800713c <__errno>
 8008afe:	2322      	movs	r3, #34	@ 0x22
 8008b00:	6003      	str	r3, [r0, #0]
 8008b02:	e7b6      	b.n	8008a72 <_strtod_l+0x72>
 8008b04:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8008b08:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8008b0c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8008b10:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008b14:	e7e7      	b.n	8008ae6 <_strtod_l+0xe6>
 8008b16:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8008c98 <_strtod_l+0x298>
 8008b1a:	e7e4      	b.n	8008ae6 <_strtod_l+0xe6>
 8008b1c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8008b20:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 8008b24:	e7df      	b.n	8008ae6 <_strtod_l+0xe6>
 8008b26:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b28:	1c5a      	adds	r2, r3, #1
 8008b2a:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b2c:	785b      	ldrb	r3, [r3, #1]
 8008b2e:	2b30      	cmp	r3, #48	@ 0x30
 8008b30:	d0f9      	beq.n	8008b26 <_strtod_l+0x126>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d09d      	beq.n	8008a72 <_strtod_l+0x72>
 8008b36:	2301      	movs	r3, #1
 8008b38:	2700      	movs	r7, #0
 8008b3a:	9308      	str	r3, [sp, #32]
 8008b3c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008b3e:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b40:	970b      	str	r7, [sp, #44]	@ 0x2c
 8008b42:	46b9      	mov	r9, r7
 8008b44:	220a      	movs	r2, #10
 8008b46:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8008b48:	7805      	ldrb	r5, [r0, #0]
 8008b4a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8008b4e:	b2d9      	uxtb	r1, r3
 8008b50:	2909      	cmp	r1, #9
 8008b52:	d928      	bls.n	8008ba6 <_strtod_l+0x1a6>
 8008b54:	494f      	ldr	r1, [pc, #316]	@ (8008c94 <_strtod_l+0x294>)
 8008b56:	2201      	movs	r2, #1
 8008b58:	f000 ffbc 	bl	8009ad4 <strncmp>
 8008b5c:	2800      	cmp	r0, #0
 8008b5e:	d032      	beq.n	8008bc6 <_strtod_l+0x1c6>
 8008b60:	2000      	movs	r0, #0
 8008b62:	462a      	mov	r2, r5
 8008b64:	900a      	str	r0, [sp, #40]	@ 0x28
 8008b66:	464d      	mov	r5, r9
 8008b68:	4603      	mov	r3, r0
 8008b6a:	2a65      	cmp	r2, #101	@ 0x65
 8008b6c:	d001      	beq.n	8008b72 <_strtod_l+0x172>
 8008b6e:	2a45      	cmp	r2, #69	@ 0x45
 8008b70:	d114      	bne.n	8008b9c <_strtod_l+0x19c>
 8008b72:	b91d      	cbnz	r5, 8008b7c <_strtod_l+0x17c>
 8008b74:	9a08      	ldr	r2, [sp, #32]
 8008b76:	4302      	orrs	r2, r0
 8008b78:	d096      	beq.n	8008aa8 <_strtod_l+0xa8>
 8008b7a:	2500      	movs	r5, #0
 8008b7c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8008b7e:	1c62      	adds	r2, r4, #1
 8008b80:	9219      	str	r2, [sp, #100]	@ 0x64
 8008b82:	7862      	ldrb	r2, [r4, #1]
 8008b84:	2a2b      	cmp	r2, #43	@ 0x2b
 8008b86:	d07a      	beq.n	8008c7e <_strtod_l+0x27e>
 8008b88:	2a2d      	cmp	r2, #45	@ 0x2d
 8008b8a:	d07e      	beq.n	8008c8a <_strtod_l+0x28a>
 8008b8c:	f04f 0c00 	mov.w	ip, #0
 8008b90:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8008b94:	2909      	cmp	r1, #9
 8008b96:	f240 8085 	bls.w	8008ca4 <_strtod_l+0x2a4>
 8008b9a:	9419      	str	r4, [sp, #100]	@ 0x64
 8008b9c:	f04f 0800 	mov.w	r8, #0
 8008ba0:	e0a5      	b.n	8008cee <_strtod_l+0x2ee>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	e7c8      	b.n	8008b38 <_strtod_l+0x138>
 8008ba6:	f1b9 0f08 	cmp.w	r9, #8
 8008baa:	bfd8      	it	le
 8008bac:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8008bae:	f100 0001 	add.w	r0, r0, #1
 8008bb2:	bfda      	itte	le
 8008bb4:	fb02 3301 	mlale	r3, r2, r1, r3
 8008bb8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8008bba:	fb02 3707 	mlagt	r7, r2, r7, r3
 8008bbe:	f109 0901 	add.w	r9, r9, #1
 8008bc2:	9019      	str	r0, [sp, #100]	@ 0x64
 8008bc4:	e7bf      	b.n	8008b46 <_strtod_l+0x146>
 8008bc6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bc8:	1c5a      	adds	r2, r3, #1
 8008bca:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bcc:	785a      	ldrb	r2, [r3, #1]
 8008bce:	f1b9 0f00 	cmp.w	r9, #0
 8008bd2:	d03b      	beq.n	8008c4c <_strtod_l+0x24c>
 8008bd4:	900a      	str	r0, [sp, #40]	@ 0x28
 8008bd6:	464d      	mov	r5, r9
 8008bd8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8008bdc:	2b09      	cmp	r3, #9
 8008bde:	d912      	bls.n	8008c06 <_strtod_l+0x206>
 8008be0:	2301      	movs	r3, #1
 8008be2:	e7c2      	b.n	8008b6a <_strtod_l+0x16a>
 8008be4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008be6:	1c5a      	adds	r2, r3, #1
 8008be8:	9219      	str	r2, [sp, #100]	@ 0x64
 8008bea:	785a      	ldrb	r2, [r3, #1]
 8008bec:	3001      	adds	r0, #1
 8008bee:	2a30      	cmp	r2, #48	@ 0x30
 8008bf0:	d0f8      	beq.n	8008be4 <_strtod_l+0x1e4>
 8008bf2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8008bf6:	2b08      	cmp	r3, #8
 8008bf8:	f200 84d2 	bhi.w	80095a0 <_strtod_l+0xba0>
 8008bfc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008bfe:	900a      	str	r0, [sp, #40]	@ 0x28
 8008c00:	2000      	movs	r0, #0
 8008c02:	930c      	str	r3, [sp, #48]	@ 0x30
 8008c04:	4605      	mov	r5, r0
 8008c06:	3a30      	subs	r2, #48	@ 0x30
 8008c08:	f100 0301 	add.w	r3, r0, #1
 8008c0c:	d018      	beq.n	8008c40 <_strtod_l+0x240>
 8008c0e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008c10:	4419      	add	r1, r3
 8008c12:	910a      	str	r1, [sp, #40]	@ 0x28
 8008c14:	462e      	mov	r6, r5
 8008c16:	f04f 0e0a 	mov.w	lr, #10
 8008c1a:	1c71      	adds	r1, r6, #1
 8008c1c:	eba1 0c05 	sub.w	ip, r1, r5
 8008c20:	4563      	cmp	r3, ip
 8008c22:	dc15      	bgt.n	8008c50 <_strtod_l+0x250>
 8008c24:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8008c28:	182b      	adds	r3, r5, r0
 8008c2a:	2b08      	cmp	r3, #8
 8008c2c:	f105 0501 	add.w	r5, r5, #1
 8008c30:	4405      	add	r5, r0
 8008c32:	dc1a      	bgt.n	8008c6a <_strtod_l+0x26a>
 8008c34:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c36:	230a      	movs	r3, #10
 8008c38:	fb03 2301 	mla	r3, r3, r1, r2
 8008c3c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008c3e:	2300      	movs	r3, #0
 8008c40:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c42:	1c51      	adds	r1, r2, #1
 8008c44:	9119      	str	r1, [sp, #100]	@ 0x64
 8008c46:	7852      	ldrb	r2, [r2, #1]
 8008c48:	4618      	mov	r0, r3
 8008c4a:	e7c5      	b.n	8008bd8 <_strtod_l+0x1d8>
 8008c4c:	4648      	mov	r0, r9
 8008c4e:	e7ce      	b.n	8008bee <_strtod_l+0x1ee>
 8008c50:	2e08      	cmp	r6, #8
 8008c52:	dc05      	bgt.n	8008c60 <_strtod_l+0x260>
 8008c54:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8008c56:	fb0e f606 	mul.w	r6, lr, r6
 8008c5a:	960b      	str	r6, [sp, #44]	@ 0x2c
 8008c5c:	460e      	mov	r6, r1
 8008c5e:	e7dc      	b.n	8008c1a <_strtod_l+0x21a>
 8008c60:	2910      	cmp	r1, #16
 8008c62:	bfd8      	it	le
 8008c64:	fb0e f707 	mulle.w	r7, lr, r7
 8008c68:	e7f8      	b.n	8008c5c <_strtod_l+0x25c>
 8008c6a:	2b0f      	cmp	r3, #15
 8008c6c:	bfdc      	itt	le
 8008c6e:	230a      	movle	r3, #10
 8008c70:	fb03 2707 	mlale	r7, r3, r7, r2
 8008c74:	e7e3      	b.n	8008c3e <_strtod_l+0x23e>
 8008c76:	2300      	movs	r3, #0
 8008c78:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e77a      	b.n	8008b74 <_strtod_l+0x174>
 8008c7e:	f04f 0c00 	mov.w	ip, #0
 8008c82:	1ca2      	adds	r2, r4, #2
 8008c84:	9219      	str	r2, [sp, #100]	@ 0x64
 8008c86:	78a2      	ldrb	r2, [r4, #2]
 8008c88:	e782      	b.n	8008b90 <_strtod_l+0x190>
 8008c8a:	f04f 0c01 	mov.w	ip, #1
 8008c8e:	e7f8      	b.n	8008c82 <_strtod_l+0x282>
 8008c90:	0800b24c 	.word	0x0800b24c
 8008c94:	0800b07f 	.word	0x0800b07f
 8008c98:	7ff00000 	.word	0x7ff00000
 8008c9c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008c9e:	1c51      	adds	r1, r2, #1
 8008ca0:	9119      	str	r1, [sp, #100]	@ 0x64
 8008ca2:	7852      	ldrb	r2, [r2, #1]
 8008ca4:	2a30      	cmp	r2, #48	@ 0x30
 8008ca6:	d0f9      	beq.n	8008c9c <_strtod_l+0x29c>
 8008ca8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8008cac:	2908      	cmp	r1, #8
 8008cae:	f63f af75 	bhi.w	8008b9c <_strtod_l+0x19c>
 8008cb2:	3a30      	subs	r2, #48	@ 0x30
 8008cb4:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cb8:	920f      	str	r2, [sp, #60]	@ 0x3c
 8008cba:	f04f 080a 	mov.w	r8, #10
 8008cbe:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8008cc0:	1c56      	adds	r6, r2, #1
 8008cc2:	9619      	str	r6, [sp, #100]	@ 0x64
 8008cc4:	7852      	ldrb	r2, [r2, #1]
 8008cc6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8008cca:	f1be 0f09 	cmp.w	lr, #9
 8008cce:	d939      	bls.n	8008d44 <_strtod_l+0x344>
 8008cd0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8008cd2:	1a76      	subs	r6, r6, r1
 8008cd4:	2e08      	cmp	r6, #8
 8008cd6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8008cda:	dc03      	bgt.n	8008ce4 <_strtod_l+0x2e4>
 8008cdc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008cde:	4588      	cmp	r8, r1
 8008ce0:	bfa8      	it	ge
 8008ce2:	4688      	movge	r8, r1
 8008ce4:	f1bc 0f00 	cmp.w	ip, #0
 8008ce8:	d001      	beq.n	8008cee <_strtod_l+0x2ee>
 8008cea:	f1c8 0800 	rsb	r8, r8, #0
 8008cee:	2d00      	cmp	r5, #0
 8008cf0:	d14e      	bne.n	8008d90 <_strtod_l+0x390>
 8008cf2:	9908      	ldr	r1, [sp, #32]
 8008cf4:	4308      	orrs	r0, r1
 8008cf6:	f47f aebc 	bne.w	8008a72 <_strtod_l+0x72>
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	f47f aed4 	bne.w	8008aa8 <_strtod_l+0xa8>
 8008d00:	2a69      	cmp	r2, #105	@ 0x69
 8008d02:	d028      	beq.n	8008d56 <_strtod_l+0x356>
 8008d04:	dc25      	bgt.n	8008d52 <_strtod_l+0x352>
 8008d06:	2a49      	cmp	r2, #73	@ 0x49
 8008d08:	d025      	beq.n	8008d56 <_strtod_l+0x356>
 8008d0a:	2a4e      	cmp	r2, #78	@ 0x4e
 8008d0c:	f47f aecc 	bne.w	8008aa8 <_strtod_l+0xa8>
 8008d10:	499a      	ldr	r1, [pc, #616]	@ (8008f7c <_strtod_l+0x57c>)
 8008d12:	a819      	add	r0, sp, #100	@ 0x64
 8008d14:	f001 f9c4 	bl	800a0a0 <__match>
 8008d18:	2800      	cmp	r0, #0
 8008d1a:	f43f aec5 	beq.w	8008aa8 <_strtod_l+0xa8>
 8008d1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d20:	781b      	ldrb	r3, [r3, #0]
 8008d22:	2b28      	cmp	r3, #40	@ 0x28
 8008d24:	d12e      	bne.n	8008d84 <_strtod_l+0x384>
 8008d26:	4996      	ldr	r1, [pc, #600]	@ (8008f80 <_strtod_l+0x580>)
 8008d28:	aa1c      	add	r2, sp, #112	@ 0x70
 8008d2a:	a819      	add	r0, sp, #100	@ 0x64
 8008d2c:	f001 f9cc 	bl	800a0c8 <__hexnan>
 8008d30:	2805      	cmp	r0, #5
 8008d32:	d127      	bne.n	8008d84 <_strtod_l+0x384>
 8008d34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8008d36:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8008d3a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8008d3e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8008d42:	e696      	b.n	8008a72 <_strtod_l+0x72>
 8008d44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d46:	fb08 2101 	mla	r1, r8, r1, r2
 8008d4a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8008d4e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008d50:	e7b5      	b.n	8008cbe <_strtod_l+0x2be>
 8008d52:	2a6e      	cmp	r2, #110	@ 0x6e
 8008d54:	e7da      	b.n	8008d0c <_strtod_l+0x30c>
 8008d56:	498b      	ldr	r1, [pc, #556]	@ (8008f84 <_strtod_l+0x584>)
 8008d58:	a819      	add	r0, sp, #100	@ 0x64
 8008d5a:	f001 f9a1 	bl	800a0a0 <__match>
 8008d5e:	2800      	cmp	r0, #0
 8008d60:	f43f aea2 	beq.w	8008aa8 <_strtod_l+0xa8>
 8008d64:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d66:	4988      	ldr	r1, [pc, #544]	@ (8008f88 <_strtod_l+0x588>)
 8008d68:	3b01      	subs	r3, #1
 8008d6a:	a819      	add	r0, sp, #100	@ 0x64
 8008d6c:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d6e:	f001 f997 	bl	800a0a0 <__match>
 8008d72:	b910      	cbnz	r0, 8008d7a <_strtod_l+0x37a>
 8008d74:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008d76:	3301      	adds	r3, #1
 8008d78:	9319      	str	r3, [sp, #100]	@ 0x64
 8008d7a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8008f98 <_strtod_l+0x598>
 8008d7e:	f04f 0a00 	mov.w	sl, #0
 8008d82:	e676      	b.n	8008a72 <_strtod_l+0x72>
 8008d84:	4881      	ldr	r0, [pc, #516]	@ (8008f8c <_strtod_l+0x58c>)
 8008d86:	f000 fec7 	bl	8009b18 <nan>
 8008d8a:	ec5b ab10 	vmov	sl, fp, d0
 8008d8e:	e670      	b.n	8008a72 <_strtod_l+0x72>
 8008d90:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008d92:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8008d94:	eba8 0303 	sub.w	r3, r8, r3
 8008d98:	f1b9 0f00 	cmp.w	r9, #0
 8008d9c:	bf08      	it	eq
 8008d9e:	46a9      	moveq	r9, r5
 8008da0:	2d10      	cmp	r5, #16
 8008da2:	9309      	str	r3, [sp, #36]	@ 0x24
 8008da4:	462c      	mov	r4, r5
 8008da6:	bfa8      	it	ge
 8008da8:	2410      	movge	r4, #16
 8008daa:	f7f7 fbab 	bl	8000504 <__aeabi_ui2d>
 8008dae:	2d09      	cmp	r5, #9
 8008db0:	4682      	mov	sl, r0
 8008db2:	468b      	mov	fp, r1
 8008db4:	dc13      	bgt.n	8008dde <_strtod_l+0x3de>
 8008db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	f43f ae5a 	beq.w	8008a72 <_strtod_l+0x72>
 8008dbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008dc0:	dd78      	ble.n	8008eb4 <_strtod_l+0x4b4>
 8008dc2:	2b16      	cmp	r3, #22
 8008dc4:	dc5f      	bgt.n	8008e86 <_strtod_l+0x486>
 8008dc6:	4972      	ldr	r1, [pc, #456]	@ (8008f90 <_strtod_l+0x590>)
 8008dc8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008dcc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008dd0:	4652      	mov	r2, sl
 8008dd2:	465b      	mov	r3, fp
 8008dd4:	f7f7 fc10 	bl	80005f8 <__aeabi_dmul>
 8008dd8:	4682      	mov	sl, r0
 8008dda:	468b      	mov	fp, r1
 8008ddc:	e649      	b.n	8008a72 <_strtod_l+0x72>
 8008dde:	4b6c      	ldr	r3, [pc, #432]	@ (8008f90 <_strtod_l+0x590>)
 8008de0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008de4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8008de8:	f7f7 fc06 	bl	80005f8 <__aeabi_dmul>
 8008dec:	4682      	mov	sl, r0
 8008dee:	4638      	mov	r0, r7
 8008df0:	468b      	mov	fp, r1
 8008df2:	f7f7 fb87 	bl	8000504 <__aeabi_ui2d>
 8008df6:	4602      	mov	r2, r0
 8008df8:	460b      	mov	r3, r1
 8008dfa:	4650      	mov	r0, sl
 8008dfc:	4659      	mov	r1, fp
 8008dfe:	f7f7 fa45 	bl	800028c <__adddf3>
 8008e02:	2d0f      	cmp	r5, #15
 8008e04:	4682      	mov	sl, r0
 8008e06:	468b      	mov	fp, r1
 8008e08:	ddd5      	ble.n	8008db6 <_strtod_l+0x3b6>
 8008e0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e0c:	1b2c      	subs	r4, r5, r4
 8008e0e:	441c      	add	r4, r3
 8008e10:	2c00      	cmp	r4, #0
 8008e12:	f340 8093 	ble.w	8008f3c <_strtod_l+0x53c>
 8008e16:	f014 030f 	ands.w	r3, r4, #15
 8008e1a:	d00a      	beq.n	8008e32 <_strtod_l+0x432>
 8008e1c:	495c      	ldr	r1, [pc, #368]	@ (8008f90 <_strtod_l+0x590>)
 8008e1e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008e22:	4652      	mov	r2, sl
 8008e24:	465b      	mov	r3, fp
 8008e26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e2a:	f7f7 fbe5 	bl	80005f8 <__aeabi_dmul>
 8008e2e:	4682      	mov	sl, r0
 8008e30:	468b      	mov	fp, r1
 8008e32:	f034 040f 	bics.w	r4, r4, #15
 8008e36:	d073      	beq.n	8008f20 <_strtod_l+0x520>
 8008e38:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8008e3c:	dd49      	ble.n	8008ed2 <_strtod_l+0x4d2>
 8008e3e:	2400      	movs	r4, #0
 8008e40:	46a0      	mov	r8, r4
 8008e42:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008e44:	46a1      	mov	r9, r4
 8008e46:	9a05      	ldr	r2, [sp, #20]
 8008e48:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8008f98 <_strtod_l+0x598>
 8008e4c:	2322      	movs	r3, #34	@ 0x22
 8008e4e:	6013      	str	r3, [r2, #0]
 8008e50:	f04f 0a00 	mov.w	sl, #0
 8008e54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f43f ae0b 	beq.w	8008a72 <_strtod_l+0x72>
 8008e5c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8008e5e:	9805      	ldr	r0, [sp, #20]
 8008e60:	f7ff f946 	bl	80080f0 <_Bfree>
 8008e64:	9805      	ldr	r0, [sp, #20]
 8008e66:	4649      	mov	r1, r9
 8008e68:	f7ff f942 	bl	80080f0 <_Bfree>
 8008e6c:	9805      	ldr	r0, [sp, #20]
 8008e6e:	4641      	mov	r1, r8
 8008e70:	f7ff f93e 	bl	80080f0 <_Bfree>
 8008e74:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008e76:	9805      	ldr	r0, [sp, #20]
 8008e78:	f7ff f93a 	bl	80080f0 <_Bfree>
 8008e7c:	9805      	ldr	r0, [sp, #20]
 8008e7e:	4621      	mov	r1, r4
 8008e80:	f7ff f936 	bl	80080f0 <_Bfree>
 8008e84:	e5f5      	b.n	8008a72 <_strtod_l+0x72>
 8008e86:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e88:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8008e8c:	4293      	cmp	r3, r2
 8008e8e:	dbbc      	blt.n	8008e0a <_strtod_l+0x40a>
 8008e90:	4c3f      	ldr	r4, [pc, #252]	@ (8008f90 <_strtod_l+0x590>)
 8008e92:	f1c5 050f 	rsb	r5, r5, #15
 8008e96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008e9a:	4652      	mov	r2, sl
 8008e9c:	465b      	mov	r3, fp
 8008e9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ea2:	f7f7 fba9 	bl	80005f8 <__aeabi_dmul>
 8008ea6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ea8:	1b5d      	subs	r5, r3, r5
 8008eaa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008eae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008eb2:	e78f      	b.n	8008dd4 <_strtod_l+0x3d4>
 8008eb4:	3316      	adds	r3, #22
 8008eb6:	dba8      	blt.n	8008e0a <_strtod_l+0x40a>
 8008eb8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008eba:	eba3 0808 	sub.w	r8, r3, r8
 8008ebe:	4b34      	ldr	r3, [pc, #208]	@ (8008f90 <_strtod_l+0x590>)
 8008ec0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8008ec4:	e9d8 2300 	ldrd	r2, r3, [r8]
 8008ec8:	4650      	mov	r0, sl
 8008eca:	4659      	mov	r1, fp
 8008ecc:	f7f7 fcbe 	bl	800084c <__aeabi_ddiv>
 8008ed0:	e782      	b.n	8008dd8 <_strtod_l+0x3d8>
 8008ed2:	2300      	movs	r3, #0
 8008ed4:	4f2f      	ldr	r7, [pc, #188]	@ (8008f94 <_strtod_l+0x594>)
 8008ed6:	1124      	asrs	r4, r4, #4
 8008ed8:	4650      	mov	r0, sl
 8008eda:	4659      	mov	r1, fp
 8008edc:	461e      	mov	r6, r3
 8008ede:	2c01      	cmp	r4, #1
 8008ee0:	dc21      	bgt.n	8008f26 <_strtod_l+0x526>
 8008ee2:	b10b      	cbz	r3, 8008ee8 <_strtod_l+0x4e8>
 8008ee4:	4682      	mov	sl, r0
 8008ee6:	468b      	mov	fp, r1
 8008ee8:	492a      	ldr	r1, [pc, #168]	@ (8008f94 <_strtod_l+0x594>)
 8008eea:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8008eee:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8008ef2:	4652      	mov	r2, sl
 8008ef4:	465b      	mov	r3, fp
 8008ef6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008efa:	f7f7 fb7d 	bl	80005f8 <__aeabi_dmul>
 8008efe:	4b26      	ldr	r3, [pc, #152]	@ (8008f98 <_strtod_l+0x598>)
 8008f00:	460a      	mov	r2, r1
 8008f02:	400b      	ands	r3, r1
 8008f04:	4925      	ldr	r1, [pc, #148]	@ (8008f9c <_strtod_l+0x59c>)
 8008f06:	428b      	cmp	r3, r1
 8008f08:	4682      	mov	sl, r0
 8008f0a:	d898      	bhi.n	8008e3e <_strtod_l+0x43e>
 8008f0c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8008f10:	428b      	cmp	r3, r1
 8008f12:	bf86      	itte	hi
 8008f14:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8008fa0 <_strtod_l+0x5a0>
 8008f18:	f04f 3aff 	movhi.w	sl, #4294967295	@ 0xffffffff
 8008f1c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8008f20:	2300      	movs	r3, #0
 8008f22:	9308      	str	r3, [sp, #32]
 8008f24:	e076      	b.n	8009014 <_strtod_l+0x614>
 8008f26:	07e2      	lsls	r2, r4, #31
 8008f28:	d504      	bpl.n	8008f34 <_strtod_l+0x534>
 8008f2a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f2e:	f7f7 fb63 	bl	80005f8 <__aeabi_dmul>
 8008f32:	2301      	movs	r3, #1
 8008f34:	3601      	adds	r6, #1
 8008f36:	1064      	asrs	r4, r4, #1
 8008f38:	3708      	adds	r7, #8
 8008f3a:	e7d0      	b.n	8008ede <_strtod_l+0x4de>
 8008f3c:	d0f0      	beq.n	8008f20 <_strtod_l+0x520>
 8008f3e:	4264      	negs	r4, r4
 8008f40:	f014 020f 	ands.w	r2, r4, #15
 8008f44:	d00a      	beq.n	8008f5c <_strtod_l+0x55c>
 8008f46:	4b12      	ldr	r3, [pc, #72]	@ (8008f90 <_strtod_l+0x590>)
 8008f48:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008f4c:	4650      	mov	r0, sl
 8008f4e:	4659      	mov	r1, fp
 8008f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f54:	f7f7 fc7a 	bl	800084c <__aeabi_ddiv>
 8008f58:	4682      	mov	sl, r0
 8008f5a:	468b      	mov	fp, r1
 8008f5c:	1124      	asrs	r4, r4, #4
 8008f5e:	d0df      	beq.n	8008f20 <_strtod_l+0x520>
 8008f60:	2c1f      	cmp	r4, #31
 8008f62:	dd1f      	ble.n	8008fa4 <_strtod_l+0x5a4>
 8008f64:	2400      	movs	r4, #0
 8008f66:	46a0      	mov	r8, r4
 8008f68:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008f6a:	46a1      	mov	r9, r4
 8008f6c:	9a05      	ldr	r2, [sp, #20]
 8008f6e:	2322      	movs	r3, #34	@ 0x22
 8008f70:	f04f 0a00 	mov.w	sl, #0
 8008f74:	f04f 0b00 	mov.w	fp, #0
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	e76b      	b.n	8008e54 <_strtod_l+0x454>
 8008f7c:	0800af6d 	.word	0x0800af6d
 8008f80:	0800b238 	.word	0x0800b238
 8008f84:	0800af65 	.word	0x0800af65
 8008f88:	0800af9c 	.word	0x0800af9c
 8008f8c:	0800b0d5 	.word	0x0800b0d5
 8008f90:	0800b170 	.word	0x0800b170
 8008f94:	0800b148 	.word	0x0800b148
 8008f98:	7ff00000 	.word	0x7ff00000
 8008f9c:	7ca00000 	.word	0x7ca00000
 8008fa0:	7fefffff 	.word	0x7fefffff
 8008fa4:	f014 0310 	ands.w	r3, r4, #16
 8008fa8:	bf18      	it	ne
 8008faa:	236a      	movne	r3, #106	@ 0x6a
 8008fac:	4ea9      	ldr	r6, [pc, #676]	@ (8009254 <_strtod_l+0x854>)
 8008fae:	9308      	str	r3, [sp, #32]
 8008fb0:	4650      	mov	r0, sl
 8008fb2:	4659      	mov	r1, fp
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	07e7      	lsls	r7, r4, #31
 8008fb8:	d504      	bpl.n	8008fc4 <_strtod_l+0x5c4>
 8008fba:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008fbe:	f7f7 fb1b 	bl	80005f8 <__aeabi_dmul>
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	1064      	asrs	r4, r4, #1
 8008fc6:	f106 0608 	add.w	r6, r6, #8
 8008fca:	d1f4      	bne.n	8008fb6 <_strtod_l+0x5b6>
 8008fcc:	b10b      	cbz	r3, 8008fd2 <_strtod_l+0x5d2>
 8008fce:	4682      	mov	sl, r0
 8008fd0:	468b      	mov	fp, r1
 8008fd2:	9b08      	ldr	r3, [sp, #32]
 8008fd4:	b1b3      	cbz	r3, 8009004 <_strtod_l+0x604>
 8008fd6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008fda:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	4659      	mov	r1, fp
 8008fe2:	dd0f      	ble.n	8009004 <_strtod_l+0x604>
 8008fe4:	2b1f      	cmp	r3, #31
 8008fe6:	dd56      	ble.n	8009096 <_strtod_l+0x696>
 8008fe8:	2b34      	cmp	r3, #52	@ 0x34
 8008fea:	bfde      	ittt	le
 8008fec:	f04f 33ff 	movle.w	r3, #4294967295	@ 0xffffffff
 8008ff0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8008ff4:	4093      	lslle	r3, r2
 8008ff6:	f04f 0a00 	mov.w	sl, #0
 8008ffa:	bfcc      	ite	gt
 8008ffc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009000:	ea03 0b01 	andle.w	fp, r3, r1
 8009004:	2200      	movs	r2, #0
 8009006:	2300      	movs	r3, #0
 8009008:	4650      	mov	r0, sl
 800900a:	4659      	mov	r1, fp
 800900c:	f7f7 fd5c 	bl	8000ac8 <__aeabi_dcmpeq>
 8009010:	2800      	cmp	r0, #0
 8009012:	d1a7      	bne.n	8008f64 <_strtod_l+0x564>
 8009014:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009016:	9300      	str	r3, [sp, #0]
 8009018:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800901a:	9805      	ldr	r0, [sp, #20]
 800901c:	462b      	mov	r3, r5
 800901e:	464a      	mov	r2, r9
 8009020:	f7ff f8ce 	bl	80081c0 <__s2b>
 8009024:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009026:	2800      	cmp	r0, #0
 8009028:	f43f af09 	beq.w	8008e3e <_strtod_l+0x43e>
 800902c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800902e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009030:	2a00      	cmp	r2, #0
 8009032:	eba3 0308 	sub.w	r3, r3, r8
 8009036:	bfa8      	it	ge
 8009038:	2300      	movge	r3, #0
 800903a:	9312      	str	r3, [sp, #72]	@ 0x48
 800903c:	2400      	movs	r4, #0
 800903e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009042:	9316      	str	r3, [sp, #88]	@ 0x58
 8009044:	46a0      	mov	r8, r4
 8009046:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009048:	9805      	ldr	r0, [sp, #20]
 800904a:	6859      	ldr	r1, [r3, #4]
 800904c:	f7ff f810 	bl	8008070 <_Balloc>
 8009050:	4681      	mov	r9, r0
 8009052:	2800      	cmp	r0, #0
 8009054:	f43f aef7 	beq.w	8008e46 <_strtod_l+0x446>
 8009058:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800905a:	691a      	ldr	r2, [r3, #16]
 800905c:	3202      	adds	r2, #2
 800905e:	f103 010c 	add.w	r1, r3, #12
 8009062:	0092      	lsls	r2, r2, #2
 8009064:	300c      	adds	r0, #12
 8009066:	f7fe f896 	bl	8007196 <memcpy>
 800906a:	ec4b ab10 	vmov	d0, sl, fp
 800906e:	9805      	ldr	r0, [sp, #20]
 8009070:	aa1c      	add	r2, sp, #112	@ 0x70
 8009072:	a91b      	add	r1, sp, #108	@ 0x6c
 8009074:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009078:	f7ff fbd6 	bl	8008828 <__d2b>
 800907c:	901a      	str	r0, [sp, #104]	@ 0x68
 800907e:	2800      	cmp	r0, #0
 8009080:	f43f aee1 	beq.w	8008e46 <_strtod_l+0x446>
 8009084:	9805      	ldr	r0, [sp, #20]
 8009086:	2101      	movs	r1, #1
 8009088:	f7ff f930 	bl	80082ec <__i2b>
 800908c:	4680      	mov	r8, r0
 800908e:	b948      	cbnz	r0, 80090a4 <_strtod_l+0x6a4>
 8009090:	f04f 0800 	mov.w	r8, #0
 8009094:	e6d7      	b.n	8008e46 <_strtod_l+0x446>
 8009096:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800909a:	fa02 f303 	lsl.w	r3, r2, r3
 800909e:	ea03 0a0a 	and.w	sl, r3, sl
 80090a2:	e7af      	b.n	8009004 <_strtod_l+0x604>
 80090a4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80090a6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80090a8:	2d00      	cmp	r5, #0
 80090aa:	bfab      	itete	ge
 80090ac:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80090ae:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80090b0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80090b2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80090b4:	bfac      	ite	ge
 80090b6:	18ef      	addge	r7, r5, r3
 80090b8:	1b5e      	sublt	r6, r3, r5
 80090ba:	9b08      	ldr	r3, [sp, #32]
 80090bc:	1aed      	subs	r5, r5, r3
 80090be:	4415      	add	r5, r2
 80090c0:	4b65      	ldr	r3, [pc, #404]	@ (8009258 <_strtod_l+0x858>)
 80090c2:	3d01      	subs	r5, #1
 80090c4:	429d      	cmp	r5, r3
 80090c6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80090ca:	da50      	bge.n	800916e <_strtod_l+0x76e>
 80090cc:	1b5b      	subs	r3, r3, r5
 80090ce:	2b1f      	cmp	r3, #31
 80090d0:	eba2 0203 	sub.w	r2, r2, r3
 80090d4:	f04f 0101 	mov.w	r1, #1
 80090d8:	dc3d      	bgt.n	8009156 <_strtod_l+0x756>
 80090da:	fa01 f303 	lsl.w	r3, r1, r3
 80090de:	9313      	str	r3, [sp, #76]	@ 0x4c
 80090e0:	2300      	movs	r3, #0
 80090e2:	9310      	str	r3, [sp, #64]	@ 0x40
 80090e4:	18bd      	adds	r5, r7, r2
 80090e6:	9b08      	ldr	r3, [sp, #32]
 80090e8:	42af      	cmp	r7, r5
 80090ea:	4416      	add	r6, r2
 80090ec:	441e      	add	r6, r3
 80090ee:	463b      	mov	r3, r7
 80090f0:	bfa8      	it	ge
 80090f2:	462b      	movge	r3, r5
 80090f4:	42b3      	cmp	r3, r6
 80090f6:	bfa8      	it	ge
 80090f8:	4633      	movge	r3, r6
 80090fa:	2b00      	cmp	r3, #0
 80090fc:	bfc2      	ittt	gt
 80090fe:	1aed      	subgt	r5, r5, r3
 8009100:	1af6      	subgt	r6, r6, r3
 8009102:	1aff      	subgt	r7, r7, r3
 8009104:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009106:	2b00      	cmp	r3, #0
 8009108:	dd16      	ble.n	8009138 <_strtod_l+0x738>
 800910a:	4641      	mov	r1, r8
 800910c:	9805      	ldr	r0, [sp, #20]
 800910e:	461a      	mov	r2, r3
 8009110:	f7ff f9a4 	bl	800845c <__pow5mult>
 8009114:	4680      	mov	r8, r0
 8009116:	2800      	cmp	r0, #0
 8009118:	d0ba      	beq.n	8009090 <_strtod_l+0x690>
 800911a:	4601      	mov	r1, r0
 800911c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800911e:	9805      	ldr	r0, [sp, #20]
 8009120:	f7ff f8fa 	bl	8008318 <__multiply>
 8009124:	900a      	str	r0, [sp, #40]	@ 0x28
 8009126:	2800      	cmp	r0, #0
 8009128:	f43f ae8d 	beq.w	8008e46 <_strtod_l+0x446>
 800912c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800912e:	9805      	ldr	r0, [sp, #20]
 8009130:	f7fe ffde 	bl	80080f0 <_Bfree>
 8009134:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009136:	931a      	str	r3, [sp, #104]	@ 0x68
 8009138:	2d00      	cmp	r5, #0
 800913a:	dc1d      	bgt.n	8009178 <_strtod_l+0x778>
 800913c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800913e:	2b00      	cmp	r3, #0
 8009140:	dd23      	ble.n	800918a <_strtod_l+0x78a>
 8009142:	4649      	mov	r1, r9
 8009144:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009146:	9805      	ldr	r0, [sp, #20]
 8009148:	f7ff f988 	bl	800845c <__pow5mult>
 800914c:	4681      	mov	r9, r0
 800914e:	b9e0      	cbnz	r0, 800918a <_strtod_l+0x78a>
 8009150:	f04f 0900 	mov.w	r9, #0
 8009154:	e677      	b.n	8008e46 <_strtod_l+0x446>
 8009156:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800915a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800915e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009162:	35e2      	adds	r5, #226	@ 0xe2
 8009164:	fa01 f305 	lsl.w	r3, r1, r5
 8009168:	9310      	str	r3, [sp, #64]	@ 0x40
 800916a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800916c:	e7ba      	b.n	80090e4 <_strtod_l+0x6e4>
 800916e:	2300      	movs	r3, #0
 8009170:	9310      	str	r3, [sp, #64]	@ 0x40
 8009172:	2301      	movs	r3, #1
 8009174:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009176:	e7b5      	b.n	80090e4 <_strtod_l+0x6e4>
 8009178:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800917a:	9805      	ldr	r0, [sp, #20]
 800917c:	462a      	mov	r2, r5
 800917e:	f7ff f9c7 	bl	8008510 <__lshift>
 8009182:	901a      	str	r0, [sp, #104]	@ 0x68
 8009184:	2800      	cmp	r0, #0
 8009186:	d1d9      	bne.n	800913c <_strtod_l+0x73c>
 8009188:	e65d      	b.n	8008e46 <_strtod_l+0x446>
 800918a:	2e00      	cmp	r6, #0
 800918c:	dd07      	ble.n	800919e <_strtod_l+0x79e>
 800918e:	4649      	mov	r1, r9
 8009190:	9805      	ldr	r0, [sp, #20]
 8009192:	4632      	mov	r2, r6
 8009194:	f7ff f9bc 	bl	8008510 <__lshift>
 8009198:	4681      	mov	r9, r0
 800919a:	2800      	cmp	r0, #0
 800919c:	d0d8      	beq.n	8009150 <_strtod_l+0x750>
 800919e:	2f00      	cmp	r7, #0
 80091a0:	dd08      	ble.n	80091b4 <_strtod_l+0x7b4>
 80091a2:	4641      	mov	r1, r8
 80091a4:	9805      	ldr	r0, [sp, #20]
 80091a6:	463a      	mov	r2, r7
 80091a8:	f7ff f9b2 	bl	8008510 <__lshift>
 80091ac:	4680      	mov	r8, r0
 80091ae:	2800      	cmp	r0, #0
 80091b0:	f43f ae49 	beq.w	8008e46 <_strtod_l+0x446>
 80091b4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80091b6:	9805      	ldr	r0, [sp, #20]
 80091b8:	464a      	mov	r2, r9
 80091ba:	f7ff fa31 	bl	8008620 <__mdiff>
 80091be:	4604      	mov	r4, r0
 80091c0:	2800      	cmp	r0, #0
 80091c2:	f43f ae40 	beq.w	8008e46 <_strtod_l+0x446>
 80091c6:	68c3      	ldr	r3, [r0, #12]
 80091c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80091ca:	2300      	movs	r3, #0
 80091cc:	60c3      	str	r3, [r0, #12]
 80091ce:	4641      	mov	r1, r8
 80091d0:	f7ff fa0a 	bl	80085e8 <__mcmp>
 80091d4:	2800      	cmp	r0, #0
 80091d6:	da45      	bge.n	8009264 <_strtod_l+0x864>
 80091d8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80091da:	ea53 030a 	orrs.w	r3, r3, sl
 80091de:	d16b      	bne.n	80092b8 <_strtod_l+0x8b8>
 80091e0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d167      	bne.n	80092b8 <_strtod_l+0x8b8>
 80091e8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80091ec:	0d1b      	lsrs	r3, r3, #20
 80091ee:	051b      	lsls	r3, r3, #20
 80091f0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80091f4:	d960      	bls.n	80092b8 <_strtod_l+0x8b8>
 80091f6:	6963      	ldr	r3, [r4, #20]
 80091f8:	b913      	cbnz	r3, 8009200 <_strtod_l+0x800>
 80091fa:	6923      	ldr	r3, [r4, #16]
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	dd5b      	ble.n	80092b8 <_strtod_l+0x8b8>
 8009200:	4621      	mov	r1, r4
 8009202:	2201      	movs	r2, #1
 8009204:	9805      	ldr	r0, [sp, #20]
 8009206:	f7ff f983 	bl	8008510 <__lshift>
 800920a:	4641      	mov	r1, r8
 800920c:	4604      	mov	r4, r0
 800920e:	f7ff f9eb 	bl	80085e8 <__mcmp>
 8009212:	2800      	cmp	r0, #0
 8009214:	dd50      	ble.n	80092b8 <_strtod_l+0x8b8>
 8009216:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800921a:	9a08      	ldr	r2, [sp, #32]
 800921c:	0d1b      	lsrs	r3, r3, #20
 800921e:	051b      	lsls	r3, r3, #20
 8009220:	2a00      	cmp	r2, #0
 8009222:	d06a      	beq.n	80092fa <_strtod_l+0x8fa>
 8009224:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8009228:	d867      	bhi.n	80092fa <_strtod_l+0x8fa>
 800922a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800922e:	f67f ae9d 	bls.w	8008f6c <_strtod_l+0x56c>
 8009232:	4b0a      	ldr	r3, [pc, #40]	@ (800925c <_strtod_l+0x85c>)
 8009234:	4650      	mov	r0, sl
 8009236:	4659      	mov	r1, fp
 8009238:	2200      	movs	r2, #0
 800923a:	f7f7 f9dd 	bl	80005f8 <__aeabi_dmul>
 800923e:	4b08      	ldr	r3, [pc, #32]	@ (8009260 <_strtod_l+0x860>)
 8009240:	400b      	ands	r3, r1
 8009242:	4682      	mov	sl, r0
 8009244:	468b      	mov	fp, r1
 8009246:	2b00      	cmp	r3, #0
 8009248:	f47f ae08 	bne.w	8008e5c <_strtod_l+0x45c>
 800924c:	9a05      	ldr	r2, [sp, #20]
 800924e:	2322      	movs	r3, #34	@ 0x22
 8009250:	6013      	str	r3, [r2, #0]
 8009252:	e603      	b.n	8008e5c <_strtod_l+0x45c>
 8009254:	0800b260 	.word	0x0800b260
 8009258:	fffffc02 	.word	0xfffffc02
 800925c:	39500000 	.word	0x39500000
 8009260:	7ff00000 	.word	0x7ff00000
 8009264:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009268:	d165      	bne.n	8009336 <_strtod_l+0x936>
 800926a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800926c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009270:	b35a      	cbz	r2, 80092ca <_strtod_l+0x8ca>
 8009272:	4a9f      	ldr	r2, [pc, #636]	@ (80094f0 <_strtod_l+0xaf0>)
 8009274:	4293      	cmp	r3, r2
 8009276:	d12b      	bne.n	80092d0 <_strtod_l+0x8d0>
 8009278:	9b08      	ldr	r3, [sp, #32]
 800927a:	4651      	mov	r1, sl
 800927c:	b303      	cbz	r3, 80092c0 <_strtod_l+0x8c0>
 800927e:	4b9d      	ldr	r3, [pc, #628]	@ (80094f4 <_strtod_l+0xaf4>)
 8009280:	465a      	mov	r2, fp
 8009282:	4013      	ands	r3, r2
 8009284:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009288:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800928c:	d81b      	bhi.n	80092c6 <_strtod_l+0x8c6>
 800928e:	0d1b      	lsrs	r3, r3, #20
 8009290:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009294:	fa02 f303 	lsl.w	r3, r2, r3
 8009298:	4299      	cmp	r1, r3
 800929a:	d119      	bne.n	80092d0 <_strtod_l+0x8d0>
 800929c:	4b96      	ldr	r3, [pc, #600]	@ (80094f8 <_strtod_l+0xaf8>)
 800929e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092a0:	429a      	cmp	r2, r3
 80092a2:	d102      	bne.n	80092aa <_strtod_l+0x8aa>
 80092a4:	3101      	adds	r1, #1
 80092a6:	f43f adce 	beq.w	8008e46 <_strtod_l+0x446>
 80092aa:	4b92      	ldr	r3, [pc, #584]	@ (80094f4 <_strtod_l+0xaf4>)
 80092ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092ae:	401a      	ands	r2, r3
 80092b0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80092b4:	f04f 0a00 	mov.w	sl, #0
 80092b8:	9b08      	ldr	r3, [sp, #32]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d1b9      	bne.n	8009232 <_strtod_l+0x832>
 80092be:	e5cd      	b.n	8008e5c <_strtod_l+0x45c>
 80092c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092c4:	e7e8      	b.n	8009298 <_strtod_l+0x898>
 80092c6:	4613      	mov	r3, r2
 80092c8:	e7e6      	b.n	8009298 <_strtod_l+0x898>
 80092ca:	ea53 030a 	orrs.w	r3, r3, sl
 80092ce:	d0a2      	beq.n	8009216 <_strtod_l+0x816>
 80092d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80092d2:	b1db      	cbz	r3, 800930c <_strtod_l+0x90c>
 80092d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80092d6:	4213      	tst	r3, r2
 80092d8:	d0ee      	beq.n	80092b8 <_strtod_l+0x8b8>
 80092da:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80092dc:	9a08      	ldr	r2, [sp, #32]
 80092de:	4650      	mov	r0, sl
 80092e0:	4659      	mov	r1, fp
 80092e2:	b1bb      	cbz	r3, 8009314 <_strtod_l+0x914>
 80092e4:	f7ff fb6e 	bl	80089c4 <sulp>
 80092e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80092ec:	ec53 2b10 	vmov	r2, r3, d0
 80092f0:	f7f6 ffcc 	bl	800028c <__adddf3>
 80092f4:	4682      	mov	sl, r0
 80092f6:	468b      	mov	fp, r1
 80092f8:	e7de      	b.n	80092b8 <_strtod_l+0x8b8>
 80092fa:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80092fe:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009302:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009306:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800930a:	e7d5      	b.n	80092b8 <_strtod_l+0x8b8>
 800930c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800930e:	ea13 0f0a 	tst.w	r3, sl
 8009312:	e7e1      	b.n	80092d8 <_strtod_l+0x8d8>
 8009314:	f7ff fb56 	bl	80089c4 <sulp>
 8009318:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800931c:	ec53 2b10 	vmov	r2, r3, d0
 8009320:	f7f6 ffb2 	bl	8000288 <__aeabi_dsub>
 8009324:	2200      	movs	r2, #0
 8009326:	2300      	movs	r3, #0
 8009328:	4682      	mov	sl, r0
 800932a:	468b      	mov	fp, r1
 800932c:	f7f7 fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009330:	2800      	cmp	r0, #0
 8009332:	d0c1      	beq.n	80092b8 <_strtod_l+0x8b8>
 8009334:	e61a      	b.n	8008f6c <_strtod_l+0x56c>
 8009336:	4641      	mov	r1, r8
 8009338:	4620      	mov	r0, r4
 800933a:	f7ff facd 	bl	80088d8 <__ratio>
 800933e:	ec57 6b10 	vmov	r6, r7, d0
 8009342:	2200      	movs	r2, #0
 8009344:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009348:	4630      	mov	r0, r6
 800934a:	4639      	mov	r1, r7
 800934c:	f7f7 fbd0 	bl	8000af0 <__aeabi_dcmple>
 8009350:	2800      	cmp	r0, #0
 8009352:	d06f      	beq.n	8009434 <_strtod_l+0xa34>
 8009354:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009356:	2b00      	cmp	r3, #0
 8009358:	d17a      	bne.n	8009450 <_strtod_l+0xa50>
 800935a:	f1ba 0f00 	cmp.w	sl, #0
 800935e:	d158      	bne.n	8009412 <_strtod_l+0xa12>
 8009360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009362:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009366:	2b00      	cmp	r3, #0
 8009368:	d15a      	bne.n	8009420 <_strtod_l+0xa20>
 800936a:	4b64      	ldr	r3, [pc, #400]	@ (80094fc <_strtod_l+0xafc>)
 800936c:	2200      	movs	r2, #0
 800936e:	4630      	mov	r0, r6
 8009370:	4639      	mov	r1, r7
 8009372:	f7f7 fbb3 	bl	8000adc <__aeabi_dcmplt>
 8009376:	2800      	cmp	r0, #0
 8009378:	d159      	bne.n	800942e <_strtod_l+0xa2e>
 800937a:	4630      	mov	r0, r6
 800937c:	4639      	mov	r1, r7
 800937e:	4b60      	ldr	r3, [pc, #384]	@ (8009500 <_strtod_l+0xb00>)
 8009380:	2200      	movs	r2, #0
 8009382:	f7f7 f939 	bl	80005f8 <__aeabi_dmul>
 8009386:	4606      	mov	r6, r0
 8009388:	460f      	mov	r7, r1
 800938a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800938e:	9606      	str	r6, [sp, #24]
 8009390:	9307      	str	r3, [sp, #28]
 8009392:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009396:	4d57      	ldr	r5, [pc, #348]	@ (80094f4 <_strtod_l+0xaf4>)
 8009398:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800939c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800939e:	401d      	ands	r5, r3
 80093a0:	4b58      	ldr	r3, [pc, #352]	@ (8009504 <_strtod_l+0xb04>)
 80093a2:	429d      	cmp	r5, r3
 80093a4:	f040 80b2 	bne.w	800950c <_strtod_l+0xb0c>
 80093a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80093aa:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80093ae:	ec4b ab10 	vmov	d0, sl, fp
 80093b2:	f7ff f9c9 	bl	8008748 <__ulp>
 80093b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80093ba:	ec51 0b10 	vmov	r0, r1, d0
 80093be:	f7f7 f91b 	bl	80005f8 <__aeabi_dmul>
 80093c2:	4652      	mov	r2, sl
 80093c4:	465b      	mov	r3, fp
 80093c6:	f7f6 ff61 	bl	800028c <__adddf3>
 80093ca:	460b      	mov	r3, r1
 80093cc:	4949      	ldr	r1, [pc, #292]	@ (80094f4 <_strtod_l+0xaf4>)
 80093ce:	4a4e      	ldr	r2, [pc, #312]	@ (8009508 <_strtod_l+0xb08>)
 80093d0:	4019      	ands	r1, r3
 80093d2:	4291      	cmp	r1, r2
 80093d4:	4682      	mov	sl, r0
 80093d6:	d942      	bls.n	800945e <_strtod_l+0xa5e>
 80093d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80093da:	4b47      	ldr	r3, [pc, #284]	@ (80094f8 <_strtod_l+0xaf8>)
 80093dc:	429a      	cmp	r2, r3
 80093de:	d103      	bne.n	80093e8 <_strtod_l+0x9e8>
 80093e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80093e2:	3301      	adds	r3, #1
 80093e4:	f43f ad2f 	beq.w	8008e46 <_strtod_l+0x446>
 80093e8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 80094f8 <_strtod_l+0xaf8>
 80093ec:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 80093f0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80093f2:	9805      	ldr	r0, [sp, #20]
 80093f4:	f7fe fe7c 	bl	80080f0 <_Bfree>
 80093f8:	9805      	ldr	r0, [sp, #20]
 80093fa:	4649      	mov	r1, r9
 80093fc:	f7fe fe78 	bl	80080f0 <_Bfree>
 8009400:	9805      	ldr	r0, [sp, #20]
 8009402:	4641      	mov	r1, r8
 8009404:	f7fe fe74 	bl	80080f0 <_Bfree>
 8009408:	9805      	ldr	r0, [sp, #20]
 800940a:	4621      	mov	r1, r4
 800940c:	f7fe fe70 	bl	80080f0 <_Bfree>
 8009410:	e619      	b.n	8009046 <_strtod_l+0x646>
 8009412:	f1ba 0f01 	cmp.w	sl, #1
 8009416:	d103      	bne.n	8009420 <_strtod_l+0xa20>
 8009418:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800941a:	2b00      	cmp	r3, #0
 800941c:	f43f ada6 	beq.w	8008f6c <_strtod_l+0x56c>
 8009420:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80094d0 <_strtod_l+0xad0>
 8009424:	4f35      	ldr	r7, [pc, #212]	@ (80094fc <_strtod_l+0xafc>)
 8009426:	ed8d 7b06 	vstr	d7, [sp, #24]
 800942a:	2600      	movs	r6, #0
 800942c:	e7b1      	b.n	8009392 <_strtod_l+0x992>
 800942e:	4f34      	ldr	r7, [pc, #208]	@ (8009500 <_strtod_l+0xb00>)
 8009430:	2600      	movs	r6, #0
 8009432:	e7aa      	b.n	800938a <_strtod_l+0x98a>
 8009434:	4b32      	ldr	r3, [pc, #200]	@ (8009500 <_strtod_l+0xb00>)
 8009436:	4630      	mov	r0, r6
 8009438:	4639      	mov	r1, r7
 800943a:	2200      	movs	r2, #0
 800943c:	f7f7 f8dc 	bl	80005f8 <__aeabi_dmul>
 8009440:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009442:	4606      	mov	r6, r0
 8009444:	460f      	mov	r7, r1
 8009446:	2b00      	cmp	r3, #0
 8009448:	d09f      	beq.n	800938a <_strtod_l+0x98a>
 800944a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800944e:	e7a0      	b.n	8009392 <_strtod_l+0x992>
 8009450:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80094d8 <_strtod_l+0xad8>
 8009454:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009458:	ec57 6b17 	vmov	r6, r7, d7
 800945c:	e799      	b.n	8009392 <_strtod_l+0x992>
 800945e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009462:	9b08      	ldr	r3, [sp, #32]
 8009464:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009468:	2b00      	cmp	r3, #0
 800946a:	d1c1      	bne.n	80093f0 <_strtod_l+0x9f0>
 800946c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009470:	0d1b      	lsrs	r3, r3, #20
 8009472:	051b      	lsls	r3, r3, #20
 8009474:	429d      	cmp	r5, r3
 8009476:	d1bb      	bne.n	80093f0 <_strtod_l+0x9f0>
 8009478:	4630      	mov	r0, r6
 800947a:	4639      	mov	r1, r7
 800947c:	f7f7 fc6c 	bl	8000d58 <__aeabi_d2lz>
 8009480:	f7f7 f88c 	bl	800059c <__aeabi_l2d>
 8009484:	4602      	mov	r2, r0
 8009486:	460b      	mov	r3, r1
 8009488:	4630      	mov	r0, r6
 800948a:	4639      	mov	r1, r7
 800948c:	f7f6 fefc 	bl	8000288 <__aeabi_dsub>
 8009490:	460b      	mov	r3, r1
 8009492:	4602      	mov	r2, r0
 8009494:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009498:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800949c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800949e:	ea46 060a 	orr.w	r6, r6, sl
 80094a2:	431e      	orrs	r6, r3
 80094a4:	d06f      	beq.n	8009586 <_strtod_l+0xb86>
 80094a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80094e0 <_strtod_l+0xae0>)
 80094a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ac:	f7f7 fb16 	bl	8000adc <__aeabi_dcmplt>
 80094b0:	2800      	cmp	r0, #0
 80094b2:	f47f acd3 	bne.w	8008e5c <_strtod_l+0x45c>
 80094b6:	a30c      	add	r3, pc, #48	@ (adr r3, 80094e8 <_strtod_l+0xae8>)
 80094b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80094c0:	f7f7 fb2a 	bl	8000b18 <__aeabi_dcmpgt>
 80094c4:	2800      	cmp	r0, #0
 80094c6:	d093      	beq.n	80093f0 <_strtod_l+0x9f0>
 80094c8:	e4c8      	b.n	8008e5c <_strtod_l+0x45c>
 80094ca:	bf00      	nop
 80094cc:	f3af 8000 	nop.w
 80094d0:	00000000 	.word	0x00000000
 80094d4:	bff00000 	.word	0xbff00000
 80094d8:	00000000 	.word	0x00000000
 80094dc:	3ff00000 	.word	0x3ff00000
 80094e0:	94a03595 	.word	0x94a03595
 80094e4:	3fdfffff 	.word	0x3fdfffff
 80094e8:	35afe535 	.word	0x35afe535
 80094ec:	3fe00000 	.word	0x3fe00000
 80094f0:	000fffff 	.word	0x000fffff
 80094f4:	7ff00000 	.word	0x7ff00000
 80094f8:	7fefffff 	.word	0x7fefffff
 80094fc:	3ff00000 	.word	0x3ff00000
 8009500:	3fe00000 	.word	0x3fe00000
 8009504:	7fe00000 	.word	0x7fe00000
 8009508:	7c9fffff 	.word	0x7c9fffff
 800950c:	9b08      	ldr	r3, [sp, #32]
 800950e:	b323      	cbz	r3, 800955a <_strtod_l+0xb5a>
 8009510:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009514:	d821      	bhi.n	800955a <_strtod_l+0xb5a>
 8009516:	a328      	add	r3, pc, #160	@ (adr r3, 80095b8 <_strtod_l+0xbb8>)
 8009518:	e9d3 2300 	ldrd	r2, r3, [r3]
 800951c:	4630      	mov	r0, r6
 800951e:	4639      	mov	r1, r7
 8009520:	f7f7 fae6 	bl	8000af0 <__aeabi_dcmple>
 8009524:	b1a0      	cbz	r0, 8009550 <_strtod_l+0xb50>
 8009526:	4639      	mov	r1, r7
 8009528:	4630      	mov	r0, r6
 800952a:	f7f7 fb3d 	bl	8000ba8 <__aeabi_d2uiz>
 800952e:	2801      	cmp	r0, #1
 8009530:	bf38      	it	cc
 8009532:	2001      	movcc	r0, #1
 8009534:	f7f6 ffe6 	bl	8000504 <__aeabi_ui2d>
 8009538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800953a:	4606      	mov	r6, r0
 800953c:	460f      	mov	r7, r1
 800953e:	b9fb      	cbnz	r3, 8009580 <_strtod_l+0xb80>
 8009540:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009544:	9014      	str	r0, [sp, #80]	@ 0x50
 8009546:	9315      	str	r3, [sp, #84]	@ 0x54
 8009548:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800954c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009550:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009552:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009556:	1b5b      	subs	r3, r3, r5
 8009558:	9311      	str	r3, [sp, #68]	@ 0x44
 800955a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800955e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009562:	f7ff f8f1 	bl	8008748 <__ulp>
 8009566:	4650      	mov	r0, sl
 8009568:	ec53 2b10 	vmov	r2, r3, d0
 800956c:	4659      	mov	r1, fp
 800956e:	f7f7 f843 	bl	80005f8 <__aeabi_dmul>
 8009572:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009576:	f7f6 fe89 	bl	800028c <__adddf3>
 800957a:	4682      	mov	sl, r0
 800957c:	468b      	mov	fp, r1
 800957e:	e770      	b.n	8009462 <_strtod_l+0xa62>
 8009580:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009584:	e7e0      	b.n	8009548 <_strtod_l+0xb48>
 8009586:	a30e      	add	r3, pc, #56	@ (adr r3, 80095c0 <_strtod_l+0xbc0>)
 8009588:	e9d3 2300 	ldrd	r2, r3, [r3]
 800958c:	f7f7 faa6 	bl	8000adc <__aeabi_dcmplt>
 8009590:	e798      	b.n	80094c4 <_strtod_l+0xac4>
 8009592:	2300      	movs	r3, #0
 8009594:	930e      	str	r3, [sp, #56]	@ 0x38
 8009596:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009598:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800959a:	6013      	str	r3, [r2, #0]
 800959c:	f7ff ba6d 	b.w	8008a7a <_strtod_l+0x7a>
 80095a0:	2a65      	cmp	r2, #101	@ 0x65
 80095a2:	f43f ab68 	beq.w	8008c76 <_strtod_l+0x276>
 80095a6:	2a45      	cmp	r2, #69	@ 0x45
 80095a8:	f43f ab65 	beq.w	8008c76 <_strtod_l+0x276>
 80095ac:	2301      	movs	r3, #1
 80095ae:	f7ff bba0 	b.w	8008cf2 <_strtod_l+0x2f2>
 80095b2:	bf00      	nop
 80095b4:	f3af 8000 	nop.w
 80095b8:	ffc00000 	.word	0xffc00000
 80095bc:	41dfffff 	.word	0x41dfffff
 80095c0:	94a03595 	.word	0x94a03595
 80095c4:	3fcfffff 	.word	0x3fcfffff

080095c8 <_strtod_r>:
 80095c8:	4b01      	ldr	r3, [pc, #4]	@ (80095d0 <_strtod_r+0x8>)
 80095ca:	f7ff ba19 	b.w	8008a00 <_strtod_l>
 80095ce:	bf00      	nop
 80095d0:	20000068 	.word	0x20000068

080095d4 <_strtol_l.isra.0>:
 80095d4:	2b24      	cmp	r3, #36	@ 0x24
 80095d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095da:	4686      	mov	lr, r0
 80095dc:	4690      	mov	r8, r2
 80095de:	d801      	bhi.n	80095e4 <_strtol_l.isra.0+0x10>
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d106      	bne.n	80095f2 <_strtol_l.isra.0+0x1e>
 80095e4:	f7fd fdaa 	bl	800713c <__errno>
 80095e8:	2316      	movs	r3, #22
 80095ea:	6003      	str	r3, [r0, #0]
 80095ec:	2000      	movs	r0, #0
 80095ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095f2:	4834      	ldr	r0, [pc, #208]	@ (80096c4 <_strtol_l.isra.0+0xf0>)
 80095f4:	460d      	mov	r5, r1
 80095f6:	462a      	mov	r2, r5
 80095f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80095fc:	5d06      	ldrb	r6, [r0, r4]
 80095fe:	f016 0608 	ands.w	r6, r6, #8
 8009602:	d1f8      	bne.n	80095f6 <_strtol_l.isra.0+0x22>
 8009604:	2c2d      	cmp	r4, #45	@ 0x2d
 8009606:	d110      	bne.n	800962a <_strtol_l.isra.0+0x56>
 8009608:	782c      	ldrb	r4, [r5, #0]
 800960a:	2601      	movs	r6, #1
 800960c:	1c95      	adds	r5, r2, #2
 800960e:	f033 0210 	bics.w	r2, r3, #16
 8009612:	d115      	bne.n	8009640 <_strtol_l.isra.0+0x6c>
 8009614:	2c30      	cmp	r4, #48	@ 0x30
 8009616:	d10d      	bne.n	8009634 <_strtol_l.isra.0+0x60>
 8009618:	782a      	ldrb	r2, [r5, #0]
 800961a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800961e:	2a58      	cmp	r2, #88	@ 0x58
 8009620:	d108      	bne.n	8009634 <_strtol_l.isra.0+0x60>
 8009622:	786c      	ldrb	r4, [r5, #1]
 8009624:	3502      	adds	r5, #2
 8009626:	2310      	movs	r3, #16
 8009628:	e00a      	b.n	8009640 <_strtol_l.isra.0+0x6c>
 800962a:	2c2b      	cmp	r4, #43	@ 0x2b
 800962c:	bf04      	itt	eq
 800962e:	782c      	ldrbeq	r4, [r5, #0]
 8009630:	1c95      	addeq	r5, r2, #2
 8009632:	e7ec      	b.n	800960e <_strtol_l.isra.0+0x3a>
 8009634:	2b00      	cmp	r3, #0
 8009636:	d1f6      	bne.n	8009626 <_strtol_l.isra.0+0x52>
 8009638:	2c30      	cmp	r4, #48	@ 0x30
 800963a:	bf14      	ite	ne
 800963c:	230a      	movne	r3, #10
 800963e:	2308      	moveq	r3, #8
 8009640:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009644:	f10c 3cff 	add.w	ip, ip, #4294967295	@ 0xffffffff
 8009648:	2200      	movs	r2, #0
 800964a:	fbbc f9f3 	udiv	r9, ip, r3
 800964e:	4610      	mov	r0, r2
 8009650:	fb03 ca19 	mls	sl, r3, r9, ip
 8009654:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009658:	2f09      	cmp	r7, #9
 800965a:	d80f      	bhi.n	800967c <_strtol_l.isra.0+0xa8>
 800965c:	463c      	mov	r4, r7
 800965e:	42a3      	cmp	r3, r4
 8009660:	dd1b      	ble.n	800969a <_strtol_l.isra.0+0xc6>
 8009662:	1c57      	adds	r7, r2, #1
 8009664:	d007      	beq.n	8009676 <_strtol_l.isra.0+0xa2>
 8009666:	4581      	cmp	r9, r0
 8009668:	d314      	bcc.n	8009694 <_strtol_l.isra.0+0xc0>
 800966a:	d101      	bne.n	8009670 <_strtol_l.isra.0+0x9c>
 800966c:	45a2      	cmp	sl, r4
 800966e:	db11      	blt.n	8009694 <_strtol_l.isra.0+0xc0>
 8009670:	fb00 4003 	mla	r0, r0, r3, r4
 8009674:	2201      	movs	r2, #1
 8009676:	f815 4b01 	ldrb.w	r4, [r5], #1
 800967a:	e7eb      	b.n	8009654 <_strtol_l.isra.0+0x80>
 800967c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009680:	2f19      	cmp	r7, #25
 8009682:	d801      	bhi.n	8009688 <_strtol_l.isra.0+0xb4>
 8009684:	3c37      	subs	r4, #55	@ 0x37
 8009686:	e7ea      	b.n	800965e <_strtol_l.isra.0+0x8a>
 8009688:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800968c:	2f19      	cmp	r7, #25
 800968e:	d804      	bhi.n	800969a <_strtol_l.isra.0+0xc6>
 8009690:	3c57      	subs	r4, #87	@ 0x57
 8009692:	e7e4      	b.n	800965e <_strtol_l.isra.0+0x8a>
 8009694:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009698:	e7ed      	b.n	8009676 <_strtol_l.isra.0+0xa2>
 800969a:	1c53      	adds	r3, r2, #1
 800969c:	d108      	bne.n	80096b0 <_strtol_l.isra.0+0xdc>
 800969e:	2322      	movs	r3, #34	@ 0x22
 80096a0:	f8ce 3000 	str.w	r3, [lr]
 80096a4:	4660      	mov	r0, ip
 80096a6:	f1b8 0f00 	cmp.w	r8, #0
 80096aa:	d0a0      	beq.n	80095ee <_strtol_l.isra.0+0x1a>
 80096ac:	1e69      	subs	r1, r5, #1
 80096ae:	e006      	b.n	80096be <_strtol_l.isra.0+0xea>
 80096b0:	b106      	cbz	r6, 80096b4 <_strtol_l.isra.0+0xe0>
 80096b2:	4240      	negs	r0, r0
 80096b4:	f1b8 0f00 	cmp.w	r8, #0
 80096b8:	d099      	beq.n	80095ee <_strtol_l.isra.0+0x1a>
 80096ba:	2a00      	cmp	r2, #0
 80096bc:	d1f6      	bne.n	80096ac <_strtol_l.isra.0+0xd8>
 80096be:	f8c8 1000 	str.w	r1, [r8]
 80096c2:	e794      	b.n	80095ee <_strtol_l.isra.0+0x1a>
 80096c4:	0800b289 	.word	0x0800b289

080096c8 <_strtol_r>:
 80096c8:	f7ff bf84 	b.w	80095d4 <_strtol_l.isra.0>

080096cc <__ssputs_r>:
 80096cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096d0:	688e      	ldr	r6, [r1, #8]
 80096d2:	461f      	mov	r7, r3
 80096d4:	42be      	cmp	r6, r7
 80096d6:	680b      	ldr	r3, [r1, #0]
 80096d8:	4682      	mov	sl, r0
 80096da:	460c      	mov	r4, r1
 80096dc:	4690      	mov	r8, r2
 80096de:	d82d      	bhi.n	800973c <__ssputs_r+0x70>
 80096e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80096e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80096e8:	d026      	beq.n	8009738 <__ssputs_r+0x6c>
 80096ea:	6965      	ldr	r5, [r4, #20]
 80096ec:	6909      	ldr	r1, [r1, #16]
 80096ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80096f2:	eba3 0901 	sub.w	r9, r3, r1
 80096f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80096fa:	1c7b      	adds	r3, r7, #1
 80096fc:	444b      	add	r3, r9
 80096fe:	106d      	asrs	r5, r5, #1
 8009700:	429d      	cmp	r5, r3
 8009702:	bf38      	it	cc
 8009704:	461d      	movcc	r5, r3
 8009706:	0553      	lsls	r3, r2, #21
 8009708:	d527      	bpl.n	800975a <__ssputs_r+0x8e>
 800970a:	4629      	mov	r1, r5
 800970c:	f7fe fc24 	bl	8007f58 <_malloc_r>
 8009710:	4606      	mov	r6, r0
 8009712:	b360      	cbz	r0, 800976e <__ssputs_r+0xa2>
 8009714:	6921      	ldr	r1, [r4, #16]
 8009716:	464a      	mov	r2, r9
 8009718:	f7fd fd3d 	bl	8007196 <memcpy>
 800971c:	89a3      	ldrh	r3, [r4, #12]
 800971e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009722:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009726:	81a3      	strh	r3, [r4, #12]
 8009728:	6126      	str	r6, [r4, #16]
 800972a:	6165      	str	r5, [r4, #20]
 800972c:	444e      	add	r6, r9
 800972e:	eba5 0509 	sub.w	r5, r5, r9
 8009732:	6026      	str	r6, [r4, #0]
 8009734:	60a5      	str	r5, [r4, #8]
 8009736:	463e      	mov	r6, r7
 8009738:	42be      	cmp	r6, r7
 800973a:	d900      	bls.n	800973e <__ssputs_r+0x72>
 800973c:	463e      	mov	r6, r7
 800973e:	6820      	ldr	r0, [r4, #0]
 8009740:	4632      	mov	r2, r6
 8009742:	4641      	mov	r1, r8
 8009744:	f7fd fc8d 	bl	8007062 <memmove>
 8009748:	68a3      	ldr	r3, [r4, #8]
 800974a:	1b9b      	subs	r3, r3, r6
 800974c:	60a3      	str	r3, [r4, #8]
 800974e:	6823      	ldr	r3, [r4, #0]
 8009750:	4433      	add	r3, r6
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	2000      	movs	r0, #0
 8009756:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800975a:	462a      	mov	r2, r5
 800975c:	f000 fd61 	bl	800a222 <_realloc_r>
 8009760:	4606      	mov	r6, r0
 8009762:	2800      	cmp	r0, #0
 8009764:	d1e0      	bne.n	8009728 <__ssputs_r+0x5c>
 8009766:	6921      	ldr	r1, [r4, #16]
 8009768:	4650      	mov	r0, sl
 800976a:	f7fe fb81 	bl	8007e70 <_free_r>
 800976e:	230c      	movs	r3, #12
 8009770:	f8ca 3000 	str.w	r3, [sl]
 8009774:	89a3      	ldrh	r3, [r4, #12]
 8009776:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800977a:	81a3      	strh	r3, [r4, #12]
 800977c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009780:	e7e9      	b.n	8009756 <__ssputs_r+0x8a>
	...

08009784 <_svfiprintf_r>:
 8009784:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009788:	4698      	mov	r8, r3
 800978a:	898b      	ldrh	r3, [r1, #12]
 800978c:	061b      	lsls	r3, r3, #24
 800978e:	b09d      	sub	sp, #116	@ 0x74
 8009790:	4607      	mov	r7, r0
 8009792:	460d      	mov	r5, r1
 8009794:	4614      	mov	r4, r2
 8009796:	d510      	bpl.n	80097ba <_svfiprintf_r+0x36>
 8009798:	690b      	ldr	r3, [r1, #16]
 800979a:	b973      	cbnz	r3, 80097ba <_svfiprintf_r+0x36>
 800979c:	2140      	movs	r1, #64	@ 0x40
 800979e:	f7fe fbdb 	bl	8007f58 <_malloc_r>
 80097a2:	6028      	str	r0, [r5, #0]
 80097a4:	6128      	str	r0, [r5, #16]
 80097a6:	b930      	cbnz	r0, 80097b6 <_svfiprintf_r+0x32>
 80097a8:	230c      	movs	r3, #12
 80097aa:	603b      	str	r3, [r7, #0]
 80097ac:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097b0:	b01d      	add	sp, #116	@ 0x74
 80097b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097b6:	2340      	movs	r3, #64	@ 0x40
 80097b8:	616b      	str	r3, [r5, #20]
 80097ba:	2300      	movs	r3, #0
 80097bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80097be:	2320      	movs	r3, #32
 80097c0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80097c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80097c8:	2330      	movs	r3, #48	@ 0x30
 80097ca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009968 <_svfiprintf_r+0x1e4>
 80097ce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80097d2:	f04f 0901 	mov.w	r9, #1
 80097d6:	4623      	mov	r3, r4
 80097d8:	469a      	mov	sl, r3
 80097da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80097de:	b10a      	cbz	r2, 80097e4 <_svfiprintf_r+0x60>
 80097e0:	2a25      	cmp	r2, #37	@ 0x25
 80097e2:	d1f9      	bne.n	80097d8 <_svfiprintf_r+0x54>
 80097e4:	ebba 0b04 	subs.w	fp, sl, r4
 80097e8:	d00b      	beq.n	8009802 <_svfiprintf_r+0x7e>
 80097ea:	465b      	mov	r3, fp
 80097ec:	4622      	mov	r2, r4
 80097ee:	4629      	mov	r1, r5
 80097f0:	4638      	mov	r0, r7
 80097f2:	f7ff ff6b 	bl	80096cc <__ssputs_r>
 80097f6:	3001      	adds	r0, #1
 80097f8:	f000 80a7 	beq.w	800994a <_svfiprintf_r+0x1c6>
 80097fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80097fe:	445a      	add	r2, fp
 8009800:	9209      	str	r2, [sp, #36]	@ 0x24
 8009802:	f89a 3000 	ldrb.w	r3, [sl]
 8009806:	2b00      	cmp	r3, #0
 8009808:	f000 809f 	beq.w	800994a <_svfiprintf_r+0x1c6>
 800980c:	2300      	movs	r3, #0
 800980e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009812:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009816:	f10a 0a01 	add.w	sl, sl, #1
 800981a:	9304      	str	r3, [sp, #16]
 800981c:	9307      	str	r3, [sp, #28]
 800981e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009822:	931a      	str	r3, [sp, #104]	@ 0x68
 8009824:	4654      	mov	r4, sl
 8009826:	2205      	movs	r2, #5
 8009828:	f814 1b01 	ldrb.w	r1, [r4], #1
 800982c:	484e      	ldr	r0, [pc, #312]	@ (8009968 <_svfiprintf_r+0x1e4>)
 800982e:	f7f6 fccf 	bl	80001d0 <memchr>
 8009832:	9a04      	ldr	r2, [sp, #16]
 8009834:	b9d8      	cbnz	r0, 800986e <_svfiprintf_r+0xea>
 8009836:	06d0      	lsls	r0, r2, #27
 8009838:	bf44      	itt	mi
 800983a:	2320      	movmi	r3, #32
 800983c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009840:	0711      	lsls	r1, r2, #28
 8009842:	bf44      	itt	mi
 8009844:	232b      	movmi	r3, #43	@ 0x2b
 8009846:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800984a:	f89a 3000 	ldrb.w	r3, [sl]
 800984e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009850:	d015      	beq.n	800987e <_svfiprintf_r+0xfa>
 8009852:	9a07      	ldr	r2, [sp, #28]
 8009854:	4654      	mov	r4, sl
 8009856:	2000      	movs	r0, #0
 8009858:	f04f 0c0a 	mov.w	ip, #10
 800985c:	4621      	mov	r1, r4
 800985e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009862:	3b30      	subs	r3, #48	@ 0x30
 8009864:	2b09      	cmp	r3, #9
 8009866:	d94b      	bls.n	8009900 <_svfiprintf_r+0x17c>
 8009868:	b1b0      	cbz	r0, 8009898 <_svfiprintf_r+0x114>
 800986a:	9207      	str	r2, [sp, #28]
 800986c:	e014      	b.n	8009898 <_svfiprintf_r+0x114>
 800986e:	eba0 0308 	sub.w	r3, r0, r8
 8009872:	fa09 f303 	lsl.w	r3, r9, r3
 8009876:	4313      	orrs	r3, r2
 8009878:	9304      	str	r3, [sp, #16]
 800987a:	46a2      	mov	sl, r4
 800987c:	e7d2      	b.n	8009824 <_svfiprintf_r+0xa0>
 800987e:	9b03      	ldr	r3, [sp, #12]
 8009880:	1d19      	adds	r1, r3, #4
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	9103      	str	r1, [sp, #12]
 8009886:	2b00      	cmp	r3, #0
 8009888:	bfbb      	ittet	lt
 800988a:	425b      	neglt	r3, r3
 800988c:	f042 0202 	orrlt.w	r2, r2, #2
 8009890:	9307      	strge	r3, [sp, #28]
 8009892:	9307      	strlt	r3, [sp, #28]
 8009894:	bfb8      	it	lt
 8009896:	9204      	strlt	r2, [sp, #16]
 8009898:	7823      	ldrb	r3, [r4, #0]
 800989a:	2b2e      	cmp	r3, #46	@ 0x2e
 800989c:	d10a      	bne.n	80098b4 <_svfiprintf_r+0x130>
 800989e:	7863      	ldrb	r3, [r4, #1]
 80098a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80098a2:	d132      	bne.n	800990a <_svfiprintf_r+0x186>
 80098a4:	9b03      	ldr	r3, [sp, #12]
 80098a6:	1d1a      	adds	r2, r3, #4
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	9203      	str	r2, [sp, #12]
 80098ac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80098b0:	3402      	adds	r4, #2
 80098b2:	9305      	str	r3, [sp, #20]
 80098b4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009978 <_svfiprintf_r+0x1f4>
 80098b8:	7821      	ldrb	r1, [r4, #0]
 80098ba:	2203      	movs	r2, #3
 80098bc:	4650      	mov	r0, sl
 80098be:	f7f6 fc87 	bl	80001d0 <memchr>
 80098c2:	b138      	cbz	r0, 80098d4 <_svfiprintf_r+0x150>
 80098c4:	9b04      	ldr	r3, [sp, #16]
 80098c6:	eba0 000a 	sub.w	r0, r0, sl
 80098ca:	2240      	movs	r2, #64	@ 0x40
 80098cc:	4082      	lsls	r2, r0
 80098ce:	4313      	orrs	r3, r2
 80098d0:	3401      	adds	r4, #1
 80098d2:	9304      	str	r3, [sp, #16]
 80098d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d8:	4824      	ldr	r0, [pc, #144]	@ (800996c <_svfiprintf_r+0x1e8>)
 80098da:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80098de:	2206      	movs	r2, #6
 80098e0:	f7f6 fc76 	bl	80001d0 <memchr>
 80098e4:	2800      	cmp	r0, #0
 80098e6:	d036      	beq.n	8009956 <_svfiprintf_r+0x1d2>
 80098e8:	4b21      	ldr	r3, [pc, #132]	@ (8009970 <_svfiprintf_r+0x1ec>)
 80098ea:	bb1b      	cbnz	r3, 8009934 <_svfiprintf_r+0x1b0>
 80098ec:	9b03      	ldr	r3, [sp, #12]
 80098ee:	3307      	adds	r3, #7
 80098f0:	f023 0307 	bic.w	r3, r3, #7
 80098f4:	3308      	adds	r3, #8
 80098f6:	9303      	str	r3, [sp, #12]
 80098f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098fa:	4433      	add	r3, r6
 80098fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80098fe:	e76a      	b.n	80097d6 <_svfiprintf_r+0x52>
 8009900:	fb0c 3202 	mla	r2, ip, r2, r3
 8009904:	460c      	mov	r4, r1
 8009906:	2001      	movs	r0, #1
 8009908:	e7a8      	b.n	800985c <_svfiprintf_r+0xd8>
 800990a:	2300      	movs	r3, #0
 800990c:	3401      	adds	r4, #1
 800990e:	9305      	str	r3, [sp, #20]
 8009910:	4619      	mov	r1, r3
 8009912:	f04f 0c0a 	mov.w	ip, #10
 8009916:	4620      	mov	r0, r4
 8009918:	f810 2b01 	ldrb.w	r2, [r0], #1
 800991c:	3a30      	subs	r2, #48	@ 0x30
 800991e:	2a09      	cmp	r2, #9
 8009920:	d903      	bls.n	800992a <_svfiprintf_r+0x1a6>
 8009922:	2b00      	cmp	r3, #0
 8009924:	d0c6      	beq.n	80098b4 <_svfiprintf_r+0x130>
 8009926:	9105      	str	r1, [sp, #20]
 8009928:	e7c4      	b.n	80098b4 <_svfiprintf_r+0x130>
 800992a:	fb0c 2101 	mla	r1, ip, r1, r2
 800992e:	4604      	mov	r4, r0
 8009930:	2301      	movs	r3, #1
 8009932:	e7f0      	b.n	8009916 <_svfiprintf_r+0x192>
 8009934:	ab03      	add	r3, sp, #12
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	462a      	mov	r2, r5
 800993a:	4b0e      	ldr	r3, [pc, #56]	@ (8009974 <_svfiprintf_r+0x1f0>)
 800993c:	a904      	add	r1, sp, #16
 800993e:	4638      	mov	r0, r7
 8009940:	f7fc fca4 	bl	800628c <_printf_float>
 8009944:	1c42      	adds	r2, r0, #1
 8009946:	4606      	mov	r6, r0
 8009948:	d1d6      	bne.n	80098f8 <_svfiprintf_r+0x174>
 800994a:	89ab      	ldrh	r3, [r5, #12]
 800994c:	065b      	lsls	r3, r3, #25
 800994e:	f53f af2d 	bmi.w	80097ac <_svfiprintf_r+0x28>
 8009952:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009954:	e72c      	b.n	80097b0 <_svfiprintf_r+0x2c>
 8009956:	ab03      	add	r3, sp, #12
 8009958:	9300      	str	r3, [sp, #0]
 800995a:	462a      	mov	r2, r5
 800995c:	4b05      	ldr	r3, [pc, #20]	@ (8009974 <_svfiprintf_r+0x1f0>)
 800995e:	a904      	add	r1, sp, #16
 8009960:	4638      	mov	r0, r7
 8009962:	f7fc ff2b 	bl	80067bc <_printf_i>
 8009966:	e7ed      	b.n	8009944 <_svfiprintf_r+0x1c0>
 8009968:	0800b081 	.word	0x0800b081
 800996c:	0800b08b 	.word	0x0800b08b
 8009970:	0800628d 	.word	0x0800628d
 8009974:	080096cd 	.word	0x080096cd
 8009978:	0800b087 	.word	0x0800b087

0800997c <__sflush_r>:
 800997c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009980:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009984:	0716      	lsls	r6, r2, #28
 8009986:	4605      	mov	r5, r0
 8009988:	460c      	mov	r4, r1
 800998a:	d454      	bmi.n	8009a36 <__sflush_r+0xba>
 800998c:	684b      	ldr	r3, [r1, #4]
 800998e:	2b00      	cmp	r3, #0
 8009990:	dc02      	bgt.n	8009998 <__sflush_r+0x1c>
 8009992:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009994:	2b00      	cmp	r3, #0
 8009996:	dd48      	ble.n	8009a2a <__sflush_r+0xae>
 8009998:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800999a:	2e00      	cmp	r6, #0
 800999c:	d045      	beq.n	8009a2a <__sflush_r+0xae>
 800999e:	2300      	movs	r3, #0
 80099a0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80099a4:	682f      	ldr	r7, [r5, #0]
 80099a6:	6a21      	ldr	r1, [r4, #32]
 80099a8:	602b      	str	r3, [r5, #0]
 80099aa:	d030      	beq.n	8009a0e <__sflush_r+0x92>
 80099ac:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80099ae:	89a3      	ldrh	r3, [r4, #12]
 80099b0:	0759      	lsls	r1, r3, #29
 80099b2:	d505      	bpl.n	80099c0 <__sflush_r+0x44>
 80099b4:	6863      	ldr	r3, [r4, #4]
 80099b6:	1ad2      	subs	r2, r2, r3
 80099b8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80099ba:	b10b      	cbz	r3, 80099c0 <__sflush_r+0x44>
 80099bc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80099be:	1ad2      	subs	r2, r2, r3
 80099c0:	2300      	movs	r3, #0
 80099c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80099c4:	6a21      	ldr	r1, [r4, #32]
 80099c6:	4628      	mov	r0, r5
 80099c8:	47b0      	blx	r6
 80099ca:	1c43      	adds	r3, r0, #1
 80099cc:	89a3      	ldrh	r3, [r4, #12]
 80099ce:	d106      	bne.n	80099de <__sflush_r+0x62>
 80099d0:	6829      	ldr	r1, [r5, #0]
 80099d2:	291d      	cmp	r1, #29
 80099d4:	d82b      	bhi.n	8009a2e <__sflush_r+0xb2>
 80099d6:	4a2a      	ldr	r2, [pc, #168]	@ (8009a80 <__sflush_r+0x104>)
 80099d8:	40ca      	lsrs	r2, r1
 80099da:	07d6      	lsls	r6, r2, #31
 80099dc:	d527      	bpl.n	8009a2e <__sflush_r+0xb2>
 80099de:	2200      	movs	r2, #0
 80099e0:	6062      	str	r2, [r4, #4]
 80099e2:	04d9      	lsls	r1, r3, #19
 80099e4:	6922      	ldr	r2, [r4, #16]
 80099e6:	6022      	str	r2, [r4, #0]
 80099e8:	d504      	bpl.n	80099f4 <__sflush_r+0x78>
 80099ea:	1c42      	adds	r2, r0, #1
 80099ec:	d101      	bne.n	80099f2 <__sflush_r+0x76>
 80099ee:	682b      	ldr	r3, [r5, #0]
 80099f0:	b903      	cbnz	r3, 80099f4 <__sflush_r+0x78>
 80099f2:	6560      	str	r0, [r4, #84]	@ 0x54
 80099f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80099f6:	602f      	str	r7, [r5, #0]
 80099f8:	b1b9      	cbz	r1, 8009a2a <__sflush_r+0xae>
 80099fa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80099fe:	4299      	cmp	r1, r3
 8009a00:	d002      	beq.n	8009a08 <__sflush_r+0x8c>
 8009a02:	4628      	mov	r0, r5
 8009a04:	f7fe fa34 	bl	8007e70 <_free_r>
 8009a08:	2300      	movs	r3, #0
 8009a0a:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a0c:	e00d      	b.n	8009a2a <__sflush_r+0xae>
 8009a0e:	2301      	movs	r3, #1
 8009a10:	4628      	mov	r0, r5
 8009a12:	47b0      	blx	r6
 8009a14:	4602      	mov	r2, r0
 8009a16:	1c50      	adds	r0, r2, #1
 8009a18:	d1c9      	bne.n	80099ae <__sflush_r+0x32>
 8009a1a:	682b      	ldr	r3, [r5, #0]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d0c6      	beq.n	80099ae <__sflush_r+0x32>
 8009a20:	2b1d      	cmp	r3, #29
 8009a22:	d001      	beq.n	8009a28 <__sflush_r+0xac>
 8009a24:	2b16      	cmp	r3, #22
 8009a26:	d11e      	bne.n	8009a66 <__sflush_r+0xea>
 8009a28:	602f      	str	r7, [r5, #0]
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	e022      	b.n	8009a74 <__sflush_r+0xf8>
 8009a2e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a32:	b21b      	sxth	r3, r3
 8009a34:	e01b      	b.n	8009a6e <__sflush_r+0xf2>
 8009a36:	690f      	ldr	r7, [r1, #16]
 8009a38:	2f00      	cmp	r7, #0
 8009a3a:	d0f6      	beq.n	8009a2a <__sflush_r+0xae>
 8009a3c:	0793      	lsls	r3, r2, #30
 8009a3e:	680e      	ldr	r6, [r1, #0]
 8009a40:	bf08      	it	eq
 8009a42:	694b      	ldreq	r3, [r1, #20]
 8009a44:	600f      	str	r7, [r1, #0]
 8009a46:	bf18      	it	ne
 8009a48:	2300      	movne	r3, #0
 8009a4a:	eba6 0807 	sub.w	r8, r6, r7
 8009a4e:	608b      	str	r3, [r1, #8]
 8009a50:	f1b8 0f00 	cmp.w	r8, #0
 8009a54:	dde9      	ble.n	8009a2a <__sflush_r+0xae>
 8009a56:	6a21      	ldr	r1, [r4, #32]
 8009a58:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009a5a:	4643      	mov	r3, r8
 8009a5c:	463a      	mov	r2, r7
 8009a5e:	4628      	mov	r0, r5
 8009a60:	47b0      	blx	r6
 8009a62:	2800      	cmp	r0, #0
 8009a64:	dc08      	bgt.n	8009a78 <__sflush_r+0xfc>
 8009a66:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a6e:	81a3      	strh	r3, [r4, #12]
 8009a70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009a78:	4407      	add	r7, r0
 8009a7a:	eba8 0800 	sub.w	r8, r8, r0
 8009a7e:	e7e7      	b.n	8009a50 <__sflush_r+0xd4>
 8009a80:	20400001 	.word	0x20400001

08009a84 <_fflush_r>:
 8009a84:	b538      	push	{r3, r4, r5, lr}
 8009a86:	690b      	ldr	r3, [r1, #16]
 8009a88:	4605      	mov	r5, r0
 8009a8a:	460c      	mov	r4, r1
 8009a8c:	b913      	cbnz	r3, 8009a94 <_fflush_r+0x10>
 8009a8e:	2500      	movs	r5, #0
 8009a90:	4628      	mov	r0, r5
 8009a92:	bd38      	pop	{r3, r4, r5, pc}
 8009a94:	b118      	cbz	r0, 8009a9e <_fflush_r+0x1a>
 8009a96:	6a03      	ldr	r3, [r0, #32]
 8009a98:	b90b      	cbnz	r3, 8009a9e <_fflush_r+0x1a>
 8009a9a:	f7fd fa47 	bl	8006f2c <__sinit>
 8009a9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d0f3      	beq.n	8009a8e <_fflush_r+0xa>
 8009aa6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009aa8:	07d0      	lsls	r0, r2, #31
 8009aaa:	d404      	bmi.n	8009ab6 <_fflush_r+0x32>
 8009aac:	0599      	lsls	r1, r3, #22
 8009aae:	d402      	bmi.n	8009ab6 <_fflush_r+0x32>
 8009ab0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ab2:	f7fd fb6e 	bl	8007192 <__retarget_lock_acquire_recursive>
 8009ab6:	4628      	mov	r0, r5
 8009ab8:	4621      	mov	r1, r4
 8009aba:	f7ff ff5f 	bl	800997c <__sflush_r>
 8009abe:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009ac0:	07da      	lsls	r2, r3, #31
 8009ac2:	4605      	mov	r5, r0
 8009ac4:	d4e4      	bmi.n	8009a90 <_fflush_r+0xc>
 8009ac6:	89a3      	ldrh	r3, [r4, #12]
 8009ac8:	059b      	lsls	r3, r3, #22
 8009aca:	d4e1      	bmi.n	8009a90 <_fflush_r+0xc>
 8009acc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009ace:	f7fd fb61 	bl	8007194 <__retarget_lock_release_recursive>
 8009ad2:	e7dd      	b.n	8009a90 <_fflush_r+0xc>

08009ad4 <strncmp>:
 8009ad4:	b510      	push	{r4, lr}
 8009ad6:	b16a      	cbz	r2, 8009af4 <strncmp+0x20>
 8009ad8:	3901      	subs	r1, #1
 8009ada:	1884      	adds	r4, r0, r2
 8009adc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ae0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8009ae4:	429a      	cmp	r2, r3
 8009ae6:	d103      	bne.n	8009af0 <strncmp+0x1c>
 8009ae8:	42a0      	cmp	r0, r4
 8009aea:	d001      	beq.n	8009af0 <strncmp+0x1c>
 8009aec:	2a00      	cmp	r2, #0
 8009aee:	d1f5      	bne.n	8009adc <strncmp+0x8>
 8009af0:	1ad0      	subs	r0, r2, r3
 8009af2:	bd10      	pop	{r4, pc}
 8009af4:	4610      	mov	r0, r2
 8009af6:	e7fc      	b.n	8009af2 <strncmp+0x1e>

08009af8 <_sbrk_r>:
 8009af8:	b538      	push	{r3, r4, r5, lr}
 8009afa:	4d06      	ldr	r5, [pc, #24]	@ (8009b14 <_sbrk_r+0x1c>)
 8009afc:	2300      	movs	r3, #0
 8009afe:	4604      	mov	r4, r0
 8009b00:	4608      	mov	r0, r1
 8009b02:	602b      	str	r3, [r5, #0]
 8009b04:	f7f8 fe40 	bl	8002788 <_sbrk>
 8009b08:	1c43      	adds	r3, r0, #1
 8009b0a:	d102      	bne.n	8009b12 <_sbrk_r+0x1a>
 8009b0c:	682b      	ldr	r3, [r5, #0]
 8009b0e:	b103      	cbz	r3, 8009b12 <_sbrk_r+0x1a>
 8009b10:	6023      	str	r3, [r4, #0]
 8009b12:	bd38      	pop	{r3, r4, r5, pc}
 8009b14:	200009c0 	.word	0x200009c0

08009b18 <nan>:
 8009b18:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009b20 <nan+0x8>
 8009b1c:	4770      	bx	lr
 8009b1e:	bf00      	nop
 8009b20:	00000000 	.word	0x00000000
 8009b24:	7ff80000 	.word	0x7ff80000

08009b28 <__assert_func>:
 8009b28:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b2a:	4614      	mov	r4, r2
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	4b09      	ldr	r3, [pc, #36]	@ (8009b54 <__assert_func+0x2c>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	4605      	mov	r5, r0
 8009b34:	68d8      	ldr	r0, [r3, #12]
 8009b36:	b14c      	cbz	r4, 8009b4c <__assert_func+0x24>
 8009b38:	4b07      	ldr	r3, [pc, #28]	@ (8009b58 <__assert_func+0x30>)
 8009b3a:	9100      	str	r1, [sp, #0]
 8009b3c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b40:	4906      	ldr	r1, [pc, #24]	@ (8009b5c <__assert_func+0x34>)
 8009b42:	462b      	mov	r3, r5
 8009b44:	f000 fba8 	bl	800a298 <fiprintf>
 8009b48:	f000 fbb8 	bl	800a2bc <abort>
 8009b4c:	4b04      	ldr	r3, [pc, #16]	@ (8009b60 <__assert_func+0x38>)
 8009b4e:	461c      	mov	r4, r3
 8009b50:	e7f3      	b.n	8009b3a <__assert_func+0x12>
 8009b52:	bf00      	nop
 8009b54:	20000018 	.word	0x20000018
 8009b58:	0800b09a 	.word	0x0800b09a
 8009b5c:	0800b0a7 	.word	0x0800b0a7
 8009b60:	0800b0d5 	.word	0x0800b0d5

08009b64 <_calloc_r>:
 8009b64:	b570      	push	{r4, r5, r6, lr}
 8009b66:	fba1 5402 	umull	r5, r4, r1, r2
 8009b6a:	b934      	cbnz	r4, 8009b7a <_calloc_r+0x16>
 8009b6c:	4629      	mov	r1, r5
 8009b6e:	f7fe f9f3 	bl	8007f58 <_malloc_r>
 8009b72:	4606      	mov	r6, r0
 8009b74:	b928      	cbnz	r0, 8009b82 <_calloc_r+0x1e>
 8009b76:	4630      	mov	r0, r6
 8009b78:	bd70      	pop	{r4, r5, r6, pc}
 8009b7a:	220c      	movs	r2, #12
 8009b7c:	6002      	str	r2, [r0, #0]
 8009b7e:	2600      	movs	r6, #0
 8009b80:	e7f9      	b.n	8009b76 <_calloc_r+0x12>
 8009b82:	462a      	mov	r2, r5
 8009b84:	4621      	mov	r1, r4
 8009b86:	f7fd fa86 	bl	8007096 <memset>
 8009b8a:	e7f4      	b.n	8009b76 <_calloc_r+0x12>

08009b8c <rshift>:
 8009b8c:	6903      	ldr	r3, [r0, #16]
 8009b8e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009b92:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009b96:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009b9a:	f100 0414 	add.w	r4, r0, #20
 8009b9e:	dd45      	ble.n	8009c2c <rshift+0xa0>
 8009ba0:	f011 011f 	ands.w	r1, r1, #31
 8009ba4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009ba8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009bac:	d10c      	bne.n	8009bc8 <rshift+0x3c>
 8009bae:	f100 0710 	add.w	r7, r0, #16
 8009bb2:	4629      	mov	r1, r5
 8009bb4:	42b1      	cmp	r1, r6
 8009bb6:	d334      	bcc.n	8009c22 <rshift+0x96>
 8009bb8:	1a9b      	subs	r3, r3, r2
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	1eea      	subs	r2, r5, #3
 8009bbe:	4296      	cmp	r6, r2
 8009bc0:	bf38      	it	cc
 8009bc2:	2300      	movcc	r3, #0
 8009bc4:	4423      	add	r3, r4
 8009bc6:	e015      	b.n	8009bf4 <rshift+0x68>
 8009bc8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009bcc:	f1c1 0820 	rsb	r8, r1, #32
 8009bd0:	40cf      	lsrs	r7, r1
 8009bd2:	f105 0e04 	add.w	lr, r5, #4
 8009bd6:	46a1      	mov	r9, r4
 8009bd8:	4576      	cmp	r6, lr
 8009bda:	46f4      	mov	ip, lr
 8009bdc:	d815      	bhi.n	8009c0a <rshift+0x7e>
 8009bde:	1a9a      	subs	r2, r3, r2
 8009be0:	0092      	lsls	r2, r2, #2
 8009be2:	3a04      	subs	r2, #4
 8009be4:	3501      	adds	r5, #1
 8009be6:	42ae      	cmp	r6, r5
 8009be8:	bf38      	it	cc
 8009bea:	2200      	movcc	r2, #0
 8009bec:	18a3      	adds	r3, r4, r2
 8009bee:	50a7      	str	r7, [r4, r2]
 8009bf0:	b107      	cbz	r7, 8009bf4 <rshift+0x68>
 8009bf2:	3304      	adds	r3, #4
 8009bf4:	1b1a      	subs	r2, r3, r4
 8009bf6:	42a3      	cmp	r3, r4
 8009bf8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009bfc:	bf08      	it	eq
 8009bfe:	2300      	moveq	r3, #0
 8009c00:	6102      	str	r2, [r0, #16]
 8009c02:	bf08      	it	eq
 8009c04:	6143      	streq	r3, [r0, #20]
 8009c06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009c0a:	f8dc c000 	ldr.w	ip, [ip]
 8009c0e:	fa0c fc08 	lsl.w	ip, ip, r8
 8009c12:	ea4c 0707 	orr.w	r7, ip, r7
 8009c16:	f849 7b04 	str.w	r7, [r9], #4
 8009c1a:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009c1e:	40cf      	lsrs	r7, r1
 8009c20:	e7da      	b.n	8009bd8 <rshift+0x4c>
 8009c22:	f851 cb04 	ldr.w	ip, [r1], #4
 8009c26:	f847 cf04 	str.w	ip, [r7, #4]!
 8009c2a:	e7c3      	b.n	8009bb4 <rshift+0x28>
 8009c2c:	4623      	mov	r3, r4
 8009c2e:	e7e1      	b.n	8009bf4 <rshift+0x68>

08009c30 <__hexdig_fun>:
 8009c30:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8009c34:	2b09      	cmp	r3, #9
 8009c36:	d802      	bhi.n	8009c3e <__hexdig_fun+0xe>
 8009c38:	3820      	subs	r0, #32
 8009c3a:	b2c0      	uxtb	r0, r0
 8009c3c:	4770      	bx	lr
 8009c3e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8009c42:	2b05      	cmp	r3, #5
 8009c44:	d801      	bhi.n	8009c4a <__hexdig_fun+0x1a>
 8009c46:	3847      	subs	r0, #71	@ 0x47
 8009c48:	e7f7      	b.n	8009c3a <__hexdig_fun+0xa>
 8009c4a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8009c4e:	2b05      	cmp	r3, #5
 8009c50:	d801      	bhi.n	8009c56 <__hexdig_fun+0x26>
 8009c52:	3827      	subs	r0, #39	@ 0x27
 8009c54:	e7f1      	b.n	8009c3a <__hexdig_fun+0xa>
 8009c56:	2000      	movs	r0, #0
 8009c58:	4770      	bx	lr
	...

08009c5c <__gethex>:
 8009c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c60:	b085      	sub	sp, #20
 8009c62:	468a      	mov	sl, r1
 8009c64:	9302      	str	r3, [sp, #8]
 8009c66:	680b      	ldr	r3, [r1, #0]
 8009c68:	9001      	str	r0, [sp, #4]
 8009c6a:	4690      	mov	r8, r2
 8009c6c:	1c9c      	adds	r4, r3, #2
 8009c6e:	46a1      	mov	r9, r4
 8009c70:	f814 0b01 	ldrb.w	r0, [r4], #1
 8009c74:	2830      	cmp	r0, #48	@ 0x30
 8009c76:	d0fa      	beq.n	8009c6e <__gethex+0x12>
 8009c78:	eba9 0303 	sub.w	r3, r9, r3
 8009c7c:	f1a3 0b02 	sub.w	fp, r3, #2
 8009c80:	f7ff ffd6 	bl	8009c30 <__hexdig_fun>
 8009c84:	4605      	mov	r5, r0
 8009c86:	2800      	cmp	r0, #0
 8009c88:	d168      	bne.n	8009d5c <__gethex+0x100>
 8009c8a:	49a0      	ldr	r1, [pc, #640]	@ (8009f0c <__gethex+0x2b0>)
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	4648      	mov	r0, r9
 8009c90:	f7ff ff20 	bl	8009ad4 <strncmp>
 8009c94:	4607      	mov	r7, r0
 8009c96:	2800      	cmp	r0, #0
 8009c98:	d167      	bne.n	8009d6a <__gethex+0x10e>
 8009c9a:	f899 0001 	ldrb.w	r0, [r9, #1]
 8009c9e:	4626      	mov	r6, r4
 8009ca0:	f7ff ffc6 	bl	8009c30 <__hexdig_fun>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	d062      	beq.n	8009d6e <__gethex+0x112>
 8009ca8:	4623      	mov	r3, r4
 8009caa:	7818      	ldrb	r0, [r3, #0]
 8009cac:	2830      	cmp	r0, #48	@ 0x30
 8009cae:	4699      	mov	r9, r3
 8009cb0:	f103 0301 	add.w	r3, r3, #1
 8009cb4:	d0f9      	beq.n	8009caa <__gethex+0x4e>
 8009cb6:	f7ff ffbb 	bl	8009c30 <__hexdig_fun>
 8009cba:	fab0 f580 	clz	r5, r0
 8009cbe:	096d      	lsrs	r5, r5, #5
 8009cc0:	f04f 0b01 	mov.w	fp, #1
 8009cc4:	464a      	mov	r2, r9
 8009cc6:	4616      	mov	r6, r2
 8009cc8:	3201      	adds	r2, #1
 8009cca:	7830      	ldrb	r0, [r6, #0]
 8009ccc:	f7ff ffb0 	bl	8009c30 <__hexdig_fun>
 8009cd0:	2800      	cmp	r0, #0
 8009cd2:	d1f8      	bne.n	8009cc6 <__gethex+0x6a>
 8009cd4:	498d      	ldr	r1, [pc, #564]	@ (8009f0c <__gethex+0x2b0>)
 8009cd6:	2201      	movs	r2, #1
 8009cd8:	4630      	mov	r0, r6
 8009cda:	f7ff fefb 	bl	8009ad4 <strncmp>
 8009cde:	2800      	cmp	r0, #0
 8009ce0:	d13f      	bne.n	8009d62 <__gethex+0x106>
 8009ce2:	b944      	cbnz	r4, 8009cf6 <__gethex+0x9a>
 8009ce4:	1c74      	adds	r4, r6, #1
 8009ce6:	4622      	mov	r2, r4
 8009ce8:	4616      	mov	r6, r2
 8009cea:	3201      	adds	r2, #1
 8009cec:	7830      	ldrb	r0, [r6, #0]
 8009cee:	f7ff ff9f 	bl	8009c30 <__hexdig_fun>
 8009cf2:	2800      	cmp	r0, #0
 8009cf4:	d1f8      	bne.n	8009ce8 <__gethex+0x8c>
 8009cf6:	1ba4      	subs	r4, r4, r6
 8009cf8:	00a7      	lsls	r7, r4, #2
 8009cfa:	7833      	ldrb	r3, [r6, #0]
 8009cfc:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8009d00:	2b50      	cmp	r3, #80	@ 0x50
 8009d02:	d13e      	bne.n	8009d82 <__gethex+0x126>
 8009d04:	7873      	ldrb	r3, [r6, #1]
 8009d06:	2b2b      	cmp	r3, #43	@ 0x2b
 8009d08:	d033      	beq.n	8009d72 <__gethex+0x116>
 8009d0a:	2b2d      	cmp	r3, #45	@ 0x2d
 8009d0c:	d034      	beq.n	8009d78 <__gethex+0x11c>
 8009d0e:	1c71      	adds	r1, r6, #1
 8009d10:	2400      	movs	r4, #0
 8009d12:	7808      	ldrb	r0, [r1, #0]
 8009d14:	f7ff ff8c 	bl	8009c30 <__hexdig_fun>
 8009d18:	1e43      	subs	r3, r0, #1
 8009d1a:	b2db      	uxtb	r3, r3
 8009d1c:	2b18      	cmp	r3, #24
 8009d1e:	d830      	bhi.n	8009d82 <__gethex+0x126>
 8009d20:	f1a0 0210 	sub.w	r2, r0, #16
 8009d24:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009d28:	f7ff ff82 	bl	8009c30 <__hexdig_fun>
 8009d2c:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8009d30:	fa5f fc8c 	uxtb.w	ip, ip
 8009d34:	f1bc 0f18 	cmp.w	ip, #24
 8009d38:	f04f 030a 	mov.w	r3, #10
 8009d3c:	d91e      	bls.n	8009d7c <__gethex+0x120>
 8009d3e:	b104      	cbz	r4, 8009d42 <__gethex+0xe6>
 8009d40:	4252      	negs	r2, r2
 8009d42:	4417      	add	r7, r2
 8009d44:	f8ca 1000 	str.w	r1, [sl]
 8009d48:	b1ed      	cbz	r5, 8009d86 <__gethex+0x12a>
 8009d4a:	f1bb 0f00 	cmp.w	fp, #0
 8009d4e:	bf0c      	ite	eq
 8009d50:	2506      	moveq	r5, #6
 8009d52:	2500      	movne	r5, #0
 8009d54:	4628      	mov	r0, r5
 8009d56:	b005      	add	sp, #20
 8009d58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d5c:	2500      	movs	r5, #0
 8009d5e:	462c      	mov	r4, r5
 8009d60:	e7b0      	b.n	8009cc4 <__gethex+0x68>
 8009d62:	2c00      	cmp	r4, #0
 8009d64:	d1c7      	bne.n	8009cf6 <__gethex+0x9a>
 8009d66:	4627      	mov	r7, r4
 8009d68:	e7c7      	b.n	8009cfa <__gethex+0x9e>
 8009d6a:	464e      	mov	r6, r9
 8009d6c:	462f      	mov	r7, r5
 8009d6e:	2501      	movs	r5, #1
 8009d70:	e7c3      	b.n	8009cfa <__gethex+0x9e>
 8009d72:	2400      	movs	r4, #0
 8009d74:	1cb1      	adds	r1, r6, #2
 8009d76:	e7cc      	b.n	8009d12 <__gethex+0xb6>
 8009d78:	2401      	movs	r4, #1
 8009d7a:	e7fb      	b.n	8009d74 <__gethex+0x118>
 8009d7c:	fb03 0002 	mla	r0, r3, r2, r0
 8009d80:	e7ce      	b.n	8009d20 <__gethex+0xc4>
 8009d82:	4631      	mov	r1, r6
 8009d84:	e7de      	b.n	8009d44 <__gethex+0xe8>
 8009d86:	eba6 0309 	sub.w	r3, r6, r9
 8009d8a:	3b01      	subs	r3, #1
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	2b07      	cmp	r3, #7
 8009d90:	dc0a      	bgt.n	8009da8 <__gethex+0x14c>
 8009d92:	9801      	ldr	r0, [sp, #4]
 8009d94:	f7fe f96c 	bl	8008070 <_Balloc>
 8009d98:	4604      	mov	r4, r0
 8009d9a:	b940      	cbnz	r0, 8009dae <__gethex+0x152>
 8009d9c:	4b5c      	ldr	r3, [pc, #368]	@ (8009f10 <__gethex+0x2b4>)
 8009d9e:	4602      	mov	r2, r0
 8009da0:	21e4      	movs	r1, #228	@ 0xe4
 8009da2:	485c      	ldr	r0, [pc, #368]	@ (8009f14 <__gethex+0x2b8>)
 8009da4:	f7ff fec0 	bl	8009b28 <__assert_func>
 8009da8:	3101      	adds	r1, #1
 8009daa:	105b      	asrs	r3, r3, #1
 8009dac:	e7ef      	b.n	8009d8e <__gethex+0x132>
 8009dae:	f100 0a14 	add.w	sl, r0, #20
 8009db2:	2300      	movs	r3, #0
 8009db4:	4655      	mov	r5, sl
 8009db6:	469b      	mov	fp, r3
 8009db8:	45b1      	cmp	r9, r6
 8009dba:	d337      	bcc.n	8009e2c <__gethex+0x1d0>
 8009dbc:	f845 bb04 	str.w	fp, [r5], #4
 8009dc0:	eba5 050a 	sub.w	r5, r5, sl
 8009dc4:	10ad      	asrs	r5, r5, #2
 8009dc6:	6125      	str	r5, [r4, #16]
 8009dc8:	4658      	mov	r0, fp
 8009dca:	f7fe fa43 	bl	8008254 <__hi0bits>
 8009dce:	016d      	lsls	r5, r5, #5
 8009dd0:	f8d8 6000 	ldr.w	r6, [r8]
 8009dd4:	1a2d      	subs	r5, r5, r0
 8009dd6:	42b5      	cmp	r5, r6
 8009dd8:	dd54      	ble.n	8009e84 <__gethex+0x228>
 8009dda:	1bad      	subs	r5, r5, r6
 8009ddc:	4629      	mov	r1, r5
 8009dde:	4620      	mov	r0, r4
 8009de0:	f7fe fdcf 	bl	8008982 <__any_on>
 8009de4:	4681      	mov	r9, r0
 8009de6:	b178      	cbz	r0, 8009e08 <__gethex+0x1ac>
 8009de8:	1e6b      	subs	r3, r5, #1
 8009dea:	1159      	asrs	r1, r3, #5
 8009dec:	f003 021f 	and.w	r2, r3, #31
 8009df0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8009df4:	f04f 0901 	mov.w	r9, #1
 8009df8:	fa09 f202 	lsl.w	r2, r9, r2
 8009dfc:	420a      	tst	r2, r1
 8009dfe:	d003      	beq.n	8009e08 <__gethex+0x1ac>
 8009e00:	454b      	cmp	r3, r9
 8009e02:	dc36      	bgt.n	8009e72 <__gethex+0x216>
 8009e04:	f04f 0902 	mov.w	r9, #2
 8009e08:	4629      	mov	r1, r5
 8009e0a:	4620      	mov	r0, r4
 8009e0c:	f7ff febe 	bl	8009b8c <rshift>
 8009e10:	442f      	add	r7, r5
 8009e12:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009e16:	42bb      	cmp	r3, r7
 8009e18:	da42      	bge.n	8009ea0 <__gethex+0x244>
 8009e1a:	9801      	ldr	r0, [sp, #4]
 8009e1c:	4621      	mov	r1, r4
 8009e1e:	f7fe f967 	bl	80080f0 <_Bfree>
 8009e22:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009e24:	2300      	movs	r3, #0
 8009e26:	6013      	str	r3, [r2, #0]
 8009e28:	25a3      	movs	r5, #163	@ 0xa3
 8009e2a:	e793      	b.n	8009d54 <__gethex+0xf8>
 8009e2c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 8009e30:	2a2e      	cmp	r2, #46	@ 0x2e
 8009e32:	d012      	beq.n	8009e5a <__gethex+0x1fe>
 8009e34:	2b20      	cmp	r3, #32
 8009e36:	d104      	bne.n	8009e42 <__gethex+0x1e6>
 8009e38:	f845 bb04 	str.w	fp, [r5], #4
 8009e3c:	f04f 0b00 	mov.w	fp, #0
 8009e40:	465b      	mov	r3, fp
 8009e42:	7830      	ldrb	r0, [r6, #0]
 8009e44:	9303      	str	r3, [sp, #12]
 8009e46:	f7ff fef3 	bl	8009c30 <__hexdig_fun>
 8009e4a:	9b03      	ldr	r3, [sp, #12]
 8009e4c:	f000 000f 	and.w	r0, r0, #15
 8009e50:	4098      	lsls	r0, r3
 8009e52:	ea4b 0b00 	orr.w	fp, fp, r0
 8009e56:	3304      	adds	r3, #4
 8009e58:	e7ae      	b.n	8009db8 <__gethex+0x15c>
 8009e5a:	45b1      	cmp	r9, r6
 8009e5c:	d8ea      	bhi.n	8009e34 <__gethex+0x1d8>
 8009e5e:	492b      	ldr	r1, [pc, #172]	@ (8009f0c <__gethex+0x2b0>)
 8009e60:	9303      	str	r3, [sp, #12]
 8009e62:	2201      	movs	r2, #1
 8009e64:	4630      	mov	r0, r6
 8009e66:	f7ff fe35 	bl	8009ad4 <strncmp>
 8009e6a:	9b03      	ldr	r3, [sp, #12]
 8009e6c:	2800      	cmp	r0, #0
 8009e6e:	d1e1      	bne.n	8009e34 <__gethex+0x1d8>
 8009e70:	e7a2      	b.n	8009db8 <__gethex+0x15c>
 8009e72:	1ea9      	subs	r1, r5, #2
 8009e74:	4620      	mov	r0, r4
 8009e76:	f7fe fd84 	bl	8008982 <__any_on>
 8009e7a:	2800      	cmp	r0, #0
 8009e7c:	d0c2      	beq.n	8009e04 <__gethex+0x1a8>
 8009e7e:	f04f 0903 	mov.w	r9, #3
 8009e82:	e7c1      	b.n	8009e08 <__gethex+0x1ac>
 8009e84:	da09      	bge.n	8009e9a <__gethex+0x23e>
 8009e86:	1b75      	subs	r5, r6, r5
 8009e88:	4621      	mov	r1, r4
 8009e8a:	9801      	ldr	r0, [sp, #4]
 8009e8c:	462a      	mov	r2, r5
 8009e8e:	f7fe fb3f 	bl	8008510 <__lshift>
 8009e92:	1b7f      	subs	r7, r7, r5
 8009e94:	4604      	mov	r4, r0
 8009e96:	f100 0a14 	add.w	sl, r0, #20
 8009e9a:	f04f 0900 	mov.w	r9, #0
 8009e9e:	e7b8      	b.n	8009e12 <__gethex+0x1b6>
 8009ea0:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009ea4:	42bd      	cmp	r5, r7
 8009ea6:	dd6f      	ble.n	8009f88 <__gethex+0x32c>
 8009ea8:	1bed      	subs	r5, r5, r7
 8009eaa:	42ae      	cmp	r6, r5
 8009eac:	dc34      	bgt.n	8009f18 <__gethex+0x2bc>
 8009eae:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009eb2:	2b02      	cmp	r3, #2
 8009eb4:	d022      	beq.n	8009efc <__gethex+0x2a0>
 8009eb6:	2b03      	cmp	r3, #3
 8009eb8:	d024      	beq.n	8009f04 <__gethex+0x2a8>
 8009eba:	2b01      	cmp	r3, #1
 8009ebc:	d115      	bne.n	8009eea <__gethex+0x28e>
 8009ebe:	42ae      	cmp	r6, r5
 8009ec0:	d113      	bne.n	8009eea <__gethex+0x28e>
 8009ec2:	2e01      	cmp	r6, #1
 8009ec4:	d10b      	bne.n	8009ede <__gethex+0x282>
 8009ec6:	9a02      	ldr	r2, [sp, #8]
 8009ec8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009ecc:	6013      	str	r3, [r2, #0]
 8009ece:	2301      	movs	r3, #1
 8009ed0:	6123      	str	r3, [r4, #16]
 8009ed2:	f8ca 3000 	str.w	r3, [sl]
 8009ed6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ed8:	2562      	movs	r5, #98	@ 0x62
 8009eda:	601c      	str	r4, [r3, #0]
 8009edc:	e73a      	b.n	8009d54 <__gethex+0xf8>
 8009ede:	1e71      	subs	r1, r6, #1
 8009ee0:	4620      	mov	r0, r4
 8009ee2:	f7fe fd4e 	bl	8008982 <__any_on>
 8009ee6:	2800      	cmp	r0, #0
 8009ee8:	d1ed      	bne.n	8009ec6 <__gethex+0x26a>
 8009eea:	9801      	ldr	r0, [sp, #4]
 8009eec:	4621      	mov	r1, r4
 8009eee:	f7fe f8ff 	bl	80080f0 <_Bfree>
 8009ef2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009ef4:	2300      	movs	r3, #0
 8009ef6:	6013      	str	r3, [r2, #0]
 8009ef8:	2550      	movs	r5, #80	@ 0x50
 8009efa:	e72b      	b.n	8009d54 <__gethex+0xf8>
 8009efc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d1f3      	bne.n	8009eea <__gethex+0x28e>
 8009f02:	e7e0      	b.n	8009ec6 <__gethex+0x26a>
 8009f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d1dd      	bne.n	8009ec6 <__gethex+0x26a>
 8009f0a:	e7ee      	b.n	8009eea <__gethex+0x28e>
 8009f0c:	0800b07f 	.word	0x0800b07f
 8009f10:	0800b015 	.word	0x0800b015
 8009f14:	0800b0d6 	.word	0x0800b0d6
 8009f18:	1e6f      	subs	r7, r5, #1
 8009f1a:	f1b9 0f00 	cmp.w	r9, #0
 8009f1e:	d130      	bne.n	8009f82 <__gethex+0x326>
 8009f20:	b127      	cbz	r7, 8009f2c <__gethex+0x2d0>
 8009f22:	4639      	mov	r1, r7
 8009f24:	4620      	mov	r0, r4
 8009f26:	f7fe fd2c 	bl	8008982 <__any_on>
 8009f2a:	4681      	mov	r9, r0
 8009f2c:	117a      	asrs	r2, r7, #5
 8009f2e:	2301      	movs	r3, #1
 8009f30:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8009f34:	f007 071f 	and.w	r7, r7, #31
 8009f38:	40bb      	lsls	r3, r7
 8009f3a:	4213      	tst	r3, r2
 8009f3c:	4629      	mov	r1, r5
 8009f3e:	4620      	mov	r0, r4
 8009f40:	bf18      	it	ne
 8009f42:	f049 0902 	orrne.w	r9, r9, #2
 8009f46:	f7ff fe21 	bl	8009b8c <rshift>
 8009f4a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 8009f4e:	1b76      	subs	r6, r6, r5
 8009f50:	2502      	movs	r5, #2
 8009f52:	f1b9 0f00 	cmp.w	r9, #0
 8009f56:	d047      	beq.n	8009fe8 <__gethex+0x38c>
 8009f58:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009f5c:	2b02      	cmp	r3, #2
 8009f5e:	d015      	beq.n	8009f8c <__gethex+0x330>
 8009f60:	2b03      	cmp	r3, #3
 8009f62:	d017      	beq.n	8009f94 <__gethex+0x338>
 8009f64:	2b01      	cmp	r3, #1
 8009f66:	d109      	bne.n	8009f7c <__gethex+0x320>
 8009f68:	f019 0f02 	tst.w	r9, #2
 8009f6c:	d006      	beq.n	8009f7c <__gethex+0x320>
 8009f6e:	f8da 3000 	ldr.w	r3, [sl]
 8009f72:	ea49 0903 	orr.w	r9, r9, r3
 8009f76:	f019 0f01 	tst.w	r9, #1
 8009f7a:	d10e      	bne.n	8009f9a <__gethex+0x33e>
 8009f7c:	f045 0510 	orr.w	r5, r5, #16
 8009f80:	e032      	b.n	8009fe8 <__gethex+0x38c>
 8009f82:	f04f 0901 	mov.w	r9, #1
 8009f86:	e7d1      	b.n	8009f2c <__gethex+0x2d0>
 8009f88:	2501      	movs	r5, #1
 8009f8a:	e7e2      	b.n	8009f52 <__gethex+0x2f6>
 8009f8c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f8e:	f1c3 0301 	rsb	r3, r3, #1
 8009f92:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009f94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	d0f0      	beq.n	8009f7c <__gethex+0x320>
 8009f9a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009f9e:	f104 0314 	add.w	r3, r4, #20
 8009fa2:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009fa6:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009faa:	f04f 0c00 	mov.w	ip, #0
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009fb4:	f1b2 3fff 	cmp.w	r2, #4294967295	@ 0xffffffff
 8009fb8:	d01b      	beq.n	8009ff2 <__gethex+0x396>
 8009fba:	3201      	adds	r2, #1
 8009fbc:	6002      	str	r2, [r0, #0]
 8009fbe:	2d02      	cmp	r5, #2
 8009fc0:	f104 0314 	add.w	r3, r4, #20
 8009fc4:	d13c      	bne.n	800a040 <__gethex+0x3e4>
 8009fc6:	f8d8 2000 	ldr.w	r2, [r8]
 8009fca:	3a01      	subs	r2, #1
 8009fcc:	42b2      	cmp	r2, r6
 8009fce:	d109      	bne.n	8009fe4 <__gethex+0x388>
 8009fd0:	1171      	asrs	r1, r6, #5
 8009fd2:	2201      	movs	r2, #1
 8009fd4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009fd8:	f006 061f 	and.w	r6, r6, #31
 8009fdc:	fa02 f606 	lsl.w	r6, r2, r6
 8009fe0:	421e      	tst	r6, r3
 8009fe2:	d13a      	bne.n	800a05a <__gethex+0x3fe>
 8009fe4:	f045 0520 	orr.w	r5, r5, #32
 8009fe8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009fea:	601c      	str	r4, [r3, #0]
 8009fec:	9b02      	ldr	r3, [sp, #8]
 8009fee:	601f      	str	r7, [r3, #0]
 8009ff0:	e6b0      	b.n	8009d54 <__gethex+0xf8>
 8009ff2:	4299      	cmp	r1, r3
 8009ff4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ff8:	d8d9      	bhi.n	8009fae <__gethex+0x352>
 8009ffa:	68a3      	ldr	r3, [r4, #8]
 8009ffc:	459b      	cmp	fp, r3
 8009ffe:	db17      	blt.n	800a030 <__gethex+0x3d4>
 800a000:	6861      	ldr	r1, [r4, #4]
 800a002:	9801      	ldr	r0, [sp, #4]
 800a004:	3101      	adds	r1, #1
 800a006:	f7fe f833 	bl	8008070 <_Balloc>
 800a00a:	4681      	mov	r9, r0
 800a00c:	b918      	cbnz	r0, 800a016 <__gethex+0x3ba>
 800a00e:	4b1a      	ldr	r3, [pc, #104]	@ (800a078 <__gethex+0x41c>)
 800a010:	4602      	mov	r2, r0
 800a012:	2184      	movs	r1, #132	@ 0x84
 800a014:	e6c5      	b.n	8009da2 <__gethex+0x146>
 800a016:	6922      	ldr	r2, [r4, #16]
 800a018:	3202      	adds	r2, #2
 800a01a:	f104 010c 	add.w	r1, r4, #12
 800a01e:	0092      	lsls	r2, r2, #2
 800a020:	300c      	adds	r0, #12
 800a022:	f7fd f8b8 	bl	8007196 <memcpy>
 800a026:	4621      	mov	r1, r4
 800a028:	9801      	ldr	r0, [sp, #4]
 800a02a:	f7fe f861 	bl	80080f0 <_Bfree>
 800a02e:	464c      	mov	r4, r9
 800a030:	6923      	ldr	r3, [r4, #16]
 800a032:	1c5a      	adds	r2, r3, #1
 800a034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a038:	6122      	str	r2, [r4, #16]
 800a03a:	2201      	movs	r2, #1
 800a03c:	615a      	str	r2, [r3, #20]
 800a03e:	e7be      	b.n	8009fbe <__gethex+0x362>
 800a040:	6922      	ldr	r2, [r4, #16]
 800a042:	455a      	cmp	r2, fp
 800a044:	dd0b      	ble.n	800a05e <__gethex+0x402>
 800a046:	2101      	movs	r1, #1
 800a048:	4620      	mov	r0, r4
 800a04a:	f7ff fd9f 	bl	8009b8c <rshift>
 800a04e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a052:	3701      	adds	r7, #1
 800a054:	42bb      	cmp	r3, r7
 800a056:	f6ff aee0 	blt.w	8009e1a <__gethex+0x1be>
 800a05a:	2501      	movs	r5, #1
 800a05c:	e7c2      	b.n	8009fe4 <__gethex+0x388>
 800a05e:	f016 061f 	ands.w	r6, r6, #31
 800a062:	d0fa      	beq.n	800a05a <__gethex+0x3fe>
 800a064:	4453      	add	r3, sl
 800a066:	f1c6 0620 	rsb	r6, r6, #32
 800a06a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a06e:	f7fe f8f1 	bl	8008254 <__hi0bits>
 800a072:	42b0      	cmp	r0, r6
 800a074:	dbe7      	blt.n	800a046 <__gethex+0x3ea>
 800a076:	e7f0      	b.n	800a05a <__gethex+0x3fe>
 800a078:	0800b015 	.word	0x0800b015

0800a07c <L_shift>:
 800a07c:	f1c2 0208 	rsb	r2, r2, #8
 800a080:	0092      	lsls	r2, r2, #2
 800a082:	b570      	push	{r4, r5, r6, lr}
 800a084:	f1c2 0620 	rsb	r6, r2, #32
 800a088:	6843      	ldr	r3, [r0, #4]
 800a08a:	6804      	ldr	r4, [r0, #0]
 800a08c:	fa03 f506 	lsl.w	r5, r3, r6
 800a090:	432c      	orrs	r4, r5
 800a092:	40d3      	lsrs	r3, r2
 800a094:	6004      	str	r4, [r0, #0]
 800a096:	f840 3f04 	str.w	r3, [r0, #4]!
 800a09a:	4288      	cmp	r0, r1
 800a09c:	d3f4      	bcc.n	800a088 <L_shift+0xc>
 800a09e:	bd70      	pop	{r4, r5, r6, pc}

0800a0a0 <__match>:
 800a0a0:	b530      	push	{r4, r5, lr}
 800a0a2:	6803      	ldr	r3, [r0, #0]
 800a0a4:	3301      	adds	r3, #1
 800a0a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a0aa:	b914      	cbnz	r4, 800a0b2 <__match+0x12>
 800a0ac:	6003      	str	r3, [r0, #0]
 800a0ae:	2001      	movs	r0, #1
 800a0b0:	bd30      	pop	{r4, r5, pc}
 800a0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800a0ba:	2d19      	cmp	r5, #25
 800a0bc:	bf98      	it	ls
 800a0be:	3220      	addls	r2, #32
 800a0c0:	42a2      	cmp	r2, r4
 800a0c2:	d0f0      	beq.n	800a0a6 <__match+0x6>
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	e7f3      	b.n	800a0b0 <__match+0x10>

0800a0c8 <__hexnan>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	680b      	ldr	r3, [r1, #0]
 800a0ce:	6801      	ldr	r1, [r0, #0]
 800a0d0:	115e      	asrs	r6, r3, #5
 800a0d2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a0d6:	f013 031f 	ands.w	r3, r3, #31
 800a0da:	b087      	sub	sp, #28
 800a0dc:	bf18      	it	ne
 800a0de:	3604      	addne	r6, #4
 800a0e0:	2500      	movs	r5, #0
 800a0e2:	1f37      	subs	r7, r6, #4
 800a0e4:	4682      	mov	sl, r0
 800a0e6:	4690      	mov	r8, r2
 800a0e8:	9301      	str	r3, [sp, #4]
 800a0ea:	f846 5c04 	str.w	r5, [r6, #-4]
 800a0ee:	46b9      	mov	r9, r7
 800a0f0:	463c      	mov	r4, r7
 800a0f2:	9502      	str	r5, [sp, #8]
 800a0f4:	46ab      	mov	fp, r5
 800a0f6:	784a      	ldrb	r2, [r1, #1]
 800a0f8:	1c4b      	adds	r3, r1, #1
 800a0fa:	9303      	str	r3, [sp, #12]
 800a0fc:	b342      	cbz	r2, 800a150 <__hexnan+0x88>
 800a0fe:	4610      	mov	r0, r2
 800a100:	9105      	str	r1, [sp, #20]
 800a102:	9204      	str	r2, [sp, #16]
 800a104:	f7ff fd94 	bl	8009c30 <__hexdig_fun>
 800a108:	2800      	cmp	r0, #0
 800a10a:	d151      	bne.n	800a1b0 <__hexnan+0xe8>
 800a10c:	9a04      	ldr	r2, [sp, #16]
 800a10e:	9905      	ldr	r1, [sp, #20]
 800a110:	2a20      	cmp	r2, #32
 800a112:	d818      	bhi.n	800a146 <__hexnan+0x7e>
 800a114:	9b02      	ldr	r3, [sp, #8]
 800a116:	459b      	cmp	fp, r3
 800a118:	dd13      	ble.n	800a142 <__hexnan+0x7a>
 800a11a:	454c      	cmp	r4, r9
 800a11c:	d206      	bcs.n	800a12c <__hexnan+0x64>
 800a11e:	2d07      	cmp	r5, #7
 800a120:	dc04      	bgt.n	800a12c <__hexnan+0x64>
 800a122:	462a      	mov	r2, r5
 800a124:	4649      	mov	r1, r9
 800a126:	4620      	mov	r0, r4
 800a128:	f7ff ffa8 	bl	800a07c <L_shift>
 800a12c:	4544      	cmp	r4, r8
 800a12e:	d952      	bls.n	800a1d6 <__hexnan+0x10e>
 800a130:	2300      	movs	r3, #0
 800a132:	f1a4 0904 	sub.w	r9, r4, #4
 800a136:	f844 3c04 	str.w	r3, [r4, #-4]
 800a13a:	f8cd b008 	str.w	fp, [sp, #8]
 800a13e:	464c      	mov	r4, r9
 800a140:	461d      	mov	r5, r3
 800a142:	9903      	ldr	r1, [sp, #12]
 800a144:	e7d7      	b.n	800a0f6 <__hexnan+0x2e>
 800a146:	2a29      	cmp	r2, #41	@ 0x29
 800a148:	d157      	bne.n	800a1fa <__hexnan+0x132>
 800a14a:	3102      	adds	r1, #2
 800a14c:	f8ca 1000 	str.w	r1, [sl]
 800a150:	f1bb 0f00 	cmp.w	fp, #0
 800a154:	d051      	beq.n	800a1fa <__hexnan+0x132>
 800a156:	454c      	cmp	r4, r9
 800a158:	d206      	bcs.n	800a168 <__hexnan+0xa0>
 800a15a:	2d07      	cmp	r5, #7
 800a15c:	dc04      	bgt.n	800a168 <__hexnan+0xa0>
 800a15e:	462a      	mov	r2, r5
 800a160:	4649      	mov	r1, r9
 800a162:	4620      	mov	r0, r4
 800a164:	f7ff ff8a 	bl	800a07c <L_shift>
 800a168:	4544      	cmp	r4, r8
 800a16a:	d936      	bls.n	800a1da <__hexnan+0x112>
 800a16c:	f1a8 0204 	sub.w	r2, r8, #4
 800a170:	4623      	mov	r3, r4
 800a172:	f853 1b04 	ldr.w	r1, [r3], #4
 800a176:	f842 1f04 	str.w	r1, [r2, #4]!
 800a17a:	429f      	cmp	r7, r3
 800a17c:	d2f9      	bcs.n	800a172 <__hexnan+0xaa>
 800a17e:	1b3b      	subs	r3, r7, r4
 800a180:	f023 0303 	bic.w	r3, r3, #3
 800a184:	3304      	adds	r3, #4
 800a186:	3401      	adds	r4, #1
 800a188:	3e03      	subs	r6, #3
 800a18a:	42b4      	cmp	r4, r6
 800a18c:	bf88      	it	hi
 800a18e:	2304      	movhi	r3, #4
 800a190:	4443      	add	r3, r8
 800a192:	2200      	movs	r2, #0
 800a194:	f843 2b04 	str.w	r2, [r3], #4
 800a198:	429f      	cmp	r7, r3
 800a19a:	d2fb      	bcs.n	800a194 <__hexnan+0xcc>
 800a19c:	683b      	ldr	r3, [r7, #0]
 800a19e:	b91b      	cbnz	r3, 800a1a8 <__hexnan+0xe0>
 800a1a0:	4547      	cmp	r7, r8
 800a1a2:	d128      	bne.n	800a1f6 <__hexnan+0x12e>
 800a1a4:	2301      	movs	r3, #1
 800a1a6:	603b      	str	r3, [r7, #0]
 800a1a8:	2005      	movs	r0, #5
 800a1aa:	b007      	add	sp, #28
 800a1ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1b0:	3501      	adds	r5, #1
 800a1b2:	2d08      	cmp	r5, #8
 800a1b4:	f10b 0b01 	add.w	fp, fp, #1
 800a1b8:	dd06      	ble.n	800a1c8 <__hexnan+0x100>
 800a1ba:	4544      	cmp	r4, r8
 800a1bc:	d9c1      	bls.n	800a142 <__hexnan+0x7a>
 800a1be:	2300      	movs	r3, #0
 800a1c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800a1c4:	2501      	movs	r5, #1
 800a1c6:	3c04      	subs	r4, #4
 800a1c8:	6822      	ldr	r2, [r4, #0]
 800a1ca:	f000 000f 	and.w	r0, r0, #15
 800a1ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800a1d2:	6020      	str	r0, [r4, #0]
 800a1d4:	e7b5      	b.n	800a142 <__hexnan+0x7a>
 800a1d6:	2508      	movs	r5, #8
 800a1d8:	e7b3      	b.n	800a142 <__hexnan+0x7a>
 800a1da:	9b01      	ldr	r3, [sp, #4]
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d0dd      	beq.n	800a19c <__hexnan+0xd4>
 800a1e0:	f1c3 0320 	rsb	r3, r3, #32
 800a1e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a1e8:	40da      	lsrs	r2, r3
 800a1ea:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800a1ee:	4013      	ands	r3, r2
 800a1f0:	f846 3c04 	str.w	r3, [r6, #-4]
 800a1f4:	e7d2      	b.n	800a19c <__hexnan+0xd4>
 800a1f6:	3f04      	subs	r7, #4
 800a1f8:	e7d0      	b.n	800a19c <__hexnan+0xd4>
 800a1fa:	2004      	movs	r0, #4
 800a1fc:	e7d5      	b.n	800a1aa <__hexnan+0xe2>

0800a1fe <__ascii_mbtowc>:
 800a1fe:	b082      	sub	sp, #8
 800a200:	b901      	cbnz	r1, 800a204 <__ascii_mbtowc+0x6>
 800a202:	a901      	add	r1, sp, #4
 800a204:	b142      	cbz	r2, 800a218 <__ascii_mbtowc+0x1a>
 800a206:	b14b      	cbz	r3, 800a21c <__ascii_mbtowc+0x1e>
 800a208:	7813      	ldrb	r3, [r2, #0]
 800a20a:	600b      	str	r3, [r1, #0]
 800a20c:	7812      	ldrb	r2, [r2, #0]
 800a20e:	1e10      	subs	r0, r2, #0
 800a210:	bf18      	it	ne
 800a212:	2001      	movne	r0, #1
 800a214:	b002      	add	sp, #8
 800a216:	4770      	bx	lr
 800a218:	4610      	mov	r0, r2
 800a21a:	e7fb      	b.n	800a214 <__ascii_mbtowc+0x16>
 800a21c:	f06f 0001 	mvn.w	r0, #1
 800a220:	e7f8      	b.n	800a214 <__ascii_mbtowc+0x16>

0800a222 <_realloc_r>:
 800a222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a226:	4607      	mov	r7, r0
 800a228:	4614      	mov	r4, r2
 800a22a:	460d      	mov	r5, r1
 800a22c:	b921      	cbnz	r1, 800a238 <_realloc_r+0x16>
 800a22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a232:	4611      	mov	r1, r2
 800a234:	f7fd be90 	b.w	8007f58 <_malloc_r>
 800a238:	b92a      	cbnz	r2, 800a246 <_realloc_r+0x24>
 800a23a:	f7fd fe19 	bl	8007e70 <_free_r>
 800a23e:	4625      	mov	r5, r4
 800a240:	4628      	mov	r0, r5
 800a242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a246:	f000 f840 	bl	800a2ca <_malloc_usable_size_r>
 800a24a:	4284      	cmp	r4, r0
 800a24c:	4606      	mov	r6, r0
 800a24e:	d802      	bhi.n	800a256 <_realloc_r+0x34>
 800a250:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a254:	d8f4      	bhi.n	800a240 <_realloc_r+0x1e>
 800a256:	4621      	mov	r1, r4
 800a258:	4638      	mov	r0, r7
 800a25a:	f7fd fe7d 	bl	8007f58 <_malloc_r>
 800a25e:	4680      	mov	r8, r0
 800a260:	b908      	cbnz	r0, 800a266 <_realloc_r+0x44>
 800a262:	4645      	mov	r5, r8
 800a264:	e7ec      	b.n	800a240 <_realloc_r+0x1e>
 800a266:	42b4      	cmp	r4, r6
 800a268:	4622      	mov	r2, r4
 800a26a:	4629      	mov	r1, r5
 800a26c:	bf28      	it	cs
 800a26e:	4632      	movcs	r2, r6
 800a270:	f7fc ff91 	bl	8007196 <memcpy>
 800a274:	4629      	mov	r1, r5
 800a276:	4638      	mov	r0, r7
 800a278:	f7fd fdfa 	bl	8007e70 <_free_r>
 800a27c:	e7f1      	b.n	800a262 <_realloc_r+0x40>

0800a27e <__ascii_wctomb>:
 800a27e:	4603      	mov	r3, r0
 800a280:	4608      	mov	r0, r1
 800a282:	b141      	cbz	r1, 800a296 <__ascii_wctomb+0x18>
 800a284:	2aff      	cmp	r2, #255	@ 0xff
 800a286:	d904      	bls.n	800a292 <__ascii_wctomb+0x14>
 800a288:	228a      	movs	r2, #138	@ 0x8a
 800a28a:	601a      	str	r2, [r3, #0]
 800a28c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a290:	4770      	bx	lr
 800a292:	700a      	strb	r2, [r1, #0]
 800a294:	2001      	movs	r0, #1
 800a296:	4770      	bx	lr

0800a298 <fiprintf>:
 800a298:	b40e      	push	{r1, r2, r3}
 800a29a:	b503      	push	{r0, r1, lr}
 800a29c:	4601      	mov	r1, r0
 800a29e:	ab03      	add	r3, sp, #12
 800a2a0:	4805      	ldr	r0, [pc, #20]	@ (800a2b8 <fiprintf+0x20>)
 800a2a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a6:	6800      	ldr	r0, [r0, #0]
 800a2a8:	9301      	str	r3, [sp, #4]
 800a2aa:	f000 f83f 	bl	800a32c <_vfiprintf_r>
 800a2ae:	b002      	add	sp, #8
 800a2b0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2b4:	b003      	add	sp, #12
 800a2b6:	4770      	bx	lr
 800a2b8:	20000018 	.word	0x20000018

0800a2bc <abort>:
 800a2bc:	b508      	push	{r3, lr}
 800a2be:	2006      	movs	r0, #6
 800a2c0:	f000 fa08 	bl	800a6d4 <raise>
 800a2c4:	2001      	movs	r0, #1
 800a2c6:	f7f8 f9e6 	bl	8002696 <_exit>

0800a2ca <_malloc_usable_size_r>:
 800a2ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a2ce:	1f18      	subs	r0, r3, #4
 800a2d0:	2b00      	cmp	r3, #0
 800a2d2:	bfbc      	itt	lt
 800a2d4:	580b      	ldrlt	r3, [r1, r0]
 800a2d6:	18c0      	addlt	r0, r0, r3
 800a2d8:	4770      	bx	lr

0800a2da <__sfputc_r>:
 800a2da:	6893      	ldr	r3, [r2, #8]
 800a2dc:	3b01      	subs	r3, #1
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	b410      	push	{r4}
 800a2e2:	6093      	str	r3, [r2, #8]
 800a2e4:	da08      	bge.n	800a2f8 <__sfputc_r+0x1e>
 800a2e6:	6994      	ldr	r4, [r2, #24]
 800a2e8:	42a3      	cmp	r3, r4
 800a2ea:	db01      	blt.n	800a2f0 <__sfputc_r+0x16>
 800a2ec:	290a      	cmp	r1, #10
 800a2ee:	d103      	bne.n	800a2f8 <__sfputc_r+0x1e>
 800a2f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a2f4:	f000 b932 	b.w	800a55c <__swbuf_r>
 800a2f8:	6813      	ldr	r3, [r2, #0]
 800a2fa:	1c58      	adds	r0, r3, #1
 800a2fc:	6010      	str	r0, [r2, #0]
 800a2fe:	7019      	strb	r1, [r3, #0]
 800a300:	4608      	mov	r0, r1
 800a302:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <__sfputs_r>:
 800a308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a30a:	4606      	mov	r6, r0
 800a30c:	460f      	mov	r7, r1
 800a30e:	4614      	mov	r4, r2
 800a310:	18d5      	adds	r5, r2, r3
 800a312:	42ac      	cmp	r4, r5
 800a314:	d101      	bne.n	800a31a <__sfputs_r+0x12>
 800a316:	2000      	movs	r0, #0
 800a318:	e007      	b.n	800a32a <__sfputs_r+0x22>
 800a31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a31e:	463a      	mov	r2, r7
 800a320:	4630      	mov	r0, r6
 800a322:	f7ff ffda 	bl	800a2da <__sfputc_r>
 800a326:	1c43      	adds	r3, r0, #1
 800a328:	d1f3      	bne.n	800a312 <__sfputs_r+0xa>
 800a32a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a32c <_vfiprintf_r>:
 800a32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a330:	460d      	mov	r5, r1
 800a332:	b09d      	sub	sp, #116	@ 0x74
 800a334:	4614      	mov	r4, r2
 800a336:	4698      	mov	r8, r3
 800a338:	4606      	mov	r6, r0
 800a33a:	b118      	cbz	r0, 800a344 <_vfiprintf_r+0x18>
 800a33c:	6a03      	ldr	r3, [r0, #32]
 800a33e:	b90b      	cbnz	r3, 800a344 <_vfiprintf_r+0x18>
 800a340:	f7fc fdf4 	bl	8006f2c <__sinit>
 800a344:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a346:	07d9      	lsls	r1, r3, #31
 800a348:	d405      	bmi.n	800a356 <_vfiprintf_r+0x2a>
 800a34a:	89ab      	ldrh	r3, [r5, #12]
 800a34c:	059a      	lsls	r2, r3, #22
 800a34e:	d402      	bmi.n	800a356 <_vfiprintf_r+0x2a>
 800a350:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a352:	f7fc ff1e 	bl	8007192 <__retarget_lock_acquire_recursive>
 800a356:	89ab      	ldrh	r3, [r5, #12]
 800a358:	071b      	lsls	r3, r3, #28
 800a35a:	d501      	bpl.n	800a360 <_vfiprintf_r+0x34>
 800a35c:	692b      	ldr	r3, [r5, #16]
 800a35e:	b99b      	cbnz	r3, 800a388 <_vfiprintf_r+0x5c>
 800a360:	4629      	mov	r1, r5
 800a362:	4630      	mov	r0, r6
 800a364:	f000 f938 	bl	800a5d8 <__swsetup_r>
 800a368:	b170      	cbz	r0, 800a388 <_vfiprintf_r+0x5c>
 800a36a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a36c:	07dc      	lsls	r4, r3, #31
 800a36e:	d504      	bpl.n	800a37a <_vfiprintf_r+0x4e>
 800a370:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a374:	b01d      	add	sp, #116	@ 0x74
 800a376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37a:	89ab      	ldrh	r3, [r5, #12]
 800a37c:	0598      	lsls	r0, r3, #22
 800a37e:	d4f7      	bmi.n	800a370 <_vfiprintf_r+0x44>
 800a380:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a382:	f7fc ff07 	bl	8007194 <__retarget_lock_release_recursive>
 800a386:	e7f3      	b.n	800a370 <_vfiprintf_r+0x44>
 800a388:	2300      	movs	r3, #0
 800a38a:	9309      	str	r3, [sp, #36]	@ 0x24
 800a38c:	2320      	movs	r3, #32
 800a38e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a392:	f8cd 800c 	str.w	r8, [sp, #12]
 800a396:	2330      	movs	r3, #48	@ 0x30
 800a398:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a548 <_vfiprintf_r+0x21c>
 800a39c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a3a0:	f04f 0901 	mov.w	r9, #1
 800a3a4:	4623      	mov	r3, r4
 800a3a6:	469a      	mov	sl, r3
 800a3a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a3ac:	b10a      	cbz	r2, 800a3b2 <_vfiprintf_r+0x86>
 800a3ae:	2a25      	cmp	r2, #37	@ 0x25
 800a3b0:	d1f9      	bne.n	800a3a6 <_vfiprintf_r+0x7a>
 800a3b2:	ebba 0b04 	subs.w	fp, sl, r4
 800a3b6:	d00b      	beq.n	800a3d0 <_vfiprintf_r+0xa4>
 800a3b8:	465b      	mov	r3, fp
 800a3ba:	4622      	mov	r2, r4
 800a3bc:	4629      	mov	r1, r5
 800a3be:	4630      	mov	r0, r6
 800a3c0:	f7ff ffa2 	bl	800a308 <__sfputs_r>
 800a3c4:	3001      	adds	r0, #1
 800a3c6:	f000 80a7 	beq.w	800a518 <_vfiprintf_r+0x1ec>
 800a3ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a3cc:	445a      	add	r2, fp
 800a3ce:	9209      	str	r2, [sp, #36]	@ 0x24
 800a3d0:	f89a 3000 	ldrb.w	r3, [sl]
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f000 809f 	beq.w	800a518 <_vfiprintf_r+0x1ec>
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a3e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a3e4:	f10a 0a01 	add.w	sl, sl, #1
 800a3e8:	9304      	str	r3, [sp, #16]
 800a3ea:	9307      	str	r3, [sp, #28]
 800a3ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a3f0:	931a      	str	r3, [sp, #104]	@ 0x68
 800a3f2:	4654      	mov	r4, sl
 800a3f4:	2205      	movs	r2, #5
 800a3f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a3fa:	4853      	ldr	r0, [pc, #332]	@ (800a548 <_vfiprintf_r+0x21c>)
 800a3fc:	f7f5 fee8 	bl	80001d0 <memchr>
 800a400:	9a04      	ldr	r2, [sp, #16]
 800a402:	b9d8      	cbnz	r0, 800a43c <_vfiprintf_r+0x110>
 800a404:	06d1      	lsls	r1, r2, #27
 800a406:	bf44      	itt	mi
 800a408:	2320      	movmi	r3, #32
 800a40a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a40e:	0713      	lsls	r3, r2, #28
 800a410:	bf44      	itt	mi
 800a412:	232b      	movmi	r3, #43	@ 0x2b
 800a414:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a418:	f89a 3000 	ldrb.w	r3, [sl]
 800a41c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a41e:	d015      	beq.n	800a44c <_vfiprintf_r+0x120>
 800a420:	9a07      	ldr	r2, [sp, #28]
 800a422:	4654      	mov	r4, sl
 800a424:	2000      	movs	r0, #0
 800a426:	f04f 0c0a 	mov.w	ip, #10
 800a42a:	4621      	mov	r1, r4
 800a42c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a430:	3b30      	subs	r3, #48	@ 0x30
 800a432:	2b09      	cmp	r3, #9
 800a434:	d94b      	bls.n	800a4ce <_vfiprintf_r+0x1a2>
 800a436:	b1b0      	cbz	r0, 800a466 <_vfiprintf_r+0x13a>
 800a438:	9207      	str	r2, [sp, #28]
 800a43a:	e014      	b.n	800a466 <_vfiprintf_r+0x13a>
 800a43c:	eba0 0308 	sub.w	r3, r0, r8
 800a440:	fa09 f303 	lsl.w	r3, r9, r3
 800a444:	4313      	orrs	r3, r2
 800a446:	9304      	str	r3, [sp, #16]
 800a448:	46a2      	mov	sl, r4
 800a44a:	e7d2      	b.n	800a3f2 <_vfiprintf_r+0xc6>
 800a44c:	9b03      	ldr	r3, [sp, #12]
 800a44e:	1d19      	adds	r1, r3, #4
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	9103      	str	r1, [sp, #12]
 800a454:	2b00      	cmp	r3, #0
 800a456:	bfbb      	ittet	lt
 800a458:	425b      	neglt	r3, r3
 800a45a:	f042 0202 	orrlt.w	r2, r2, #2
 800a45e:	9307      	strge	r3, [sp, #28]
 800a460:	9307      	strlt	r3, [sp, #28]
 800a462:	bfb8      	it	lt
 800a464:	9204      	strlt	r2, [sp, #16]
 800a466:	7823      	ldrb	r3, [r4, #0]
 800a468:	2b2e      	cmp	r3, #46	@ 0x2e
 800a46a:	d10a      	bne.n	800a482 <_vfiprintf_r+0x156>
 800a46c:	7863      	ldrb	r3, [r4, #1]
 800a46e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a470:	d132      	bne.n	800a4d8 <_vfiprintf_r+0x1ac>
 800a472:	9b03      	ldr	r3, [sp, #12]
 800a474:	1d1a      	adds	r2, r3, #4
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	9203      	str	r2, [sp, #12]
 800a47a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a47e:	3402      	adds	r4, #2
 800a480:	9305      	str	r3, [sp, #20]
 800a482:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a558 <_vfiprintf_r+0x22c>
 800a486:	7821      	ldrb	r1, [r4, #0]
 800a488:	2203      	movs	r2, #3
 800a48a:	4650      	mov	r0, sl
 800a48c:	f7f5 fea0 	bl	80001d0 <memchr>
 800a490:	b138      	cbz	r0, 800a4a2 <_vfiprintf_r+0x176>
 800a492:	9b04      	ldr	r3, [sp, #16]
 800a494:	eba0 000a 	sub.w	r0, r0, sl
 800a498:	2240      	movs	r2, #64	@ 0x40
 800a49a:	4082      	lsls	r2, r0
 800a49c:	4313      	orrs	r3, r2
 800a49e:	3401      	adds	r4, #1
 800a4a0:	9304      	str	r3, [sp, #16]
 800a4a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4a6:	4829      	ldr	r0, [pc, #164]	@ (800a54c <_vfiprintf_r+0x220>)
 800a4a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a4ac:	2206      	movs	r2, #6
 800a4ae:	f7f5 fe8f 	bl	80001d0 <memchr>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	d03f      	beq.n	800a536 <_vfiprintf_r+0x20a>
 800a4b6:	4b26      	ldr	r3, [pc, #152]	@ (800a550 <_vfiprintf_r+0x224>)
 800a4b8:	bb1b      	cbnz	r3, 800a502 <_vfiprintf_r+0x1d6>
 800a4ba:	9b03      	ldr	r3, [sp, #12]
 800a4bc:	3307      	adds	r3, #7
 800a4be:	f023 0307 	bic.w	r3, r3, #7
 800a4c2:	3308      	adds	r3, #8
 800a4c4:	9303      	str	r3, [sp, #12]
 800a4c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a4c8:	443b      	add	r3, r7
 800a4ca:	9309      	str	r3, [sp, #36]	@ 0x24
 800a4cc:	e76a      	b.n	800a3a4 <_vfiprintf_r+0x78>
 800a4ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	2001      	movs	r0, #1
 800a4d6:	e7a8      	b.n	800a42a <_vfiprintf_r+0xfe>
 800a4d8:	2300      	movs	r3, #0
 800a4da:	3401      	adds	r4, #1
 800a4dc:	9305      	str	r3, [sp, #20]
 800a4de:	4619      	mov	r1, r3
 800a4e0:	f04f 0c0a 	mov.w	ip, #10
 800a4e4:	4620      	mov	r0, r4
 800a4e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a4ea:	3a30      	subs	r2, #48	@ 0x30
 800a4ec:	2a09      	cmp	r2, #9
 800a4ee:	d903      	bls.n	800a4f8 <_vfiprintf_r+0x1cc>
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d0c6      	beq.n	800a482 <_vfiprintf_r+0x156>
 800a4f4:	9105      	str	r1, [sp, #20]
 800a4f6:	e7c4      	b.n	800a482 <_vfiprintf_r+0x156>
 800a4f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800a4fc:	4604      	mov	r4, r0
 800a4fe:	2301      	movs	r3, #1
 800a500:	e7f0      	b.n	800a4e4 <_vfiprintf_r+0x1b8>
 800a502:	ab03      	add	r3, sp, #12
 800a504:	9300      	str	r3, [sp, #0]
 800a506:	462a      	mov	r2, r5
 800a508:	4b12      	ldr	r3, [pc, #72]	@ (800a554 <_vfiprintf_r+0x228>)
 800a50a:	a904      	add	r1, sp, #16
 800a50c:	4630      	mov	r0, r6
 800a50e:	f7fb febd 	bl	800628c <_printf_float>
 800a512:	4607      	mov	r7, r0
 800a514:	1c78      	adds	r0, r7, #1
 800a516:	d1d6      	bne.n	800a4c6 <_vfiprintf_r+0x19a>
 800a518:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a51a:	07d9      	lsls	r1, r3, #31
 800a51c:	d405      	bmi.n	800a52a <_vfiprintf_r+0x1fe>
 800a51e:	89ab      	ldrh	r3, [r5, #12]
 800a520:	059a      	lsls	r2, r3, #22
 800a522:	d402      	bmi.n	800a52a <_vfiprintf_r+0x1fe>
 800a524:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a526:	f7fc fe35 	bl	8007194 <__retarget_lock_release_recursive>
 800a52a:	89ab      	ldrh	r3, [r5, #12]
 800a52c:	065b      	lsls	r3, r3, #25
 800a52e:	f53f af1f 	bmi.w	800a370 <_vfiprintf_r+0x44>
 800a532:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a534:	e71e      	b.n	800a374 <_vfiprintf_r+0x48>
 800a536:	ab03      	add	r3, sp, #12
 800a538:	9300      	str	r3, [sp, #0]
 800a53a:	462a      	mov	r2, r5
 800a53c:	4b05      	ldr	r3, [pc, #20]	@ (800a554 <_vfiprintf_r+0x228>)
 800a53e:	a904      	add	r1, sp, #16
 800a540:	4630      	mov	r0, r6
 800a542:	f7fc f93b 	bl	80067bc <_printf_i>
 800a546:	e7e4      	b.n	800a512 <_vfiprintf_r+0x1e6>
 800a548:	0800b081 	.word	0x0800b081
 800a54c:	0800b08b 	.word	0x0800b08b
 800a550:	0800628d 	.word	0x0800628d
 800a554:	0800a309 	.word	0x0800a309
 800a558:	0800b087 	.word	0x0800b087

0800a55c <__swbuf_r>:
 800a55c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a55e:	460e      	mov	r6, r1
 800a560:	4614      	mov	r4, r2
 800a562:	4605      	mov	r5, r0
 800a564:	b118      	cbz	r0, 800a56e <__swbuf_r+0x12>
 800a566:	6a03      	ldr	r3, [r0, #32]
 800a568:	b90b      	cbnz	r3, 800a56e <__swbuf_r+0x12>
 800a56a:	f7fc fcdf 	bl	8006f2c <__sinit>
 800a56e:	69a3      	ldr	r3, [r4, #24]
 800a570:	60a3      	str	r3, [r4, #8]
 800a572:	89a3      	ldrh	r3, [r4, #12]
 800a574:	071a      	lsls	r2, r3, #28
 800a576:	d501      	bpl.n	800a57c <__swbuf_r+0x20>
 800a578:	6923      	ldr	r3, [r4, #16]
 800a57a:	b943      	cbnz	r3, 800a58e <__swbuf_r+0x32>
 800a57c:	4621      	mov	r1, r4
 800a57e:	4628      	mov	r0, r5
 800a580:	f000 f82a 	bl	800a5d8 <__swsetup_r>
 800a584:	b118      	cbz	r0, 800a58e <__swbuf_r+0x32>
 800a586:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a58a:	4638      	mov	r0, r7
 800a58c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a58e:	6823      	ldr	r3, [r4, #0]
 800a590:	6922      	ldr	r2, [r4, #16]
 800a592:	1a98      	subs	r0, r3, r2
 800a594:	6963      	ldr	r3, [r4, #20]
 800a596:	b2f6      	uxtb	r6, r6
 800a598:	4283      	cmp	r3, r0
 800a59a:	4637      	mov	r7, r6
 800a59c:	dc05      	bgt.n	800a5aa <__swbuf_r+0x4e>
 800a59e:	4621      	mov	r1, r4
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	f7ff fa6f 	bl	8009a84 <_fflush_r>
 800a5a6:	2800      	cmp	r0, #0
 800a5a8:	d1ed      	bne.n	800a586 <__swbuf_r+0x2a>
 800a5aa:	68a3      	ldr	r3, [r4, #8]
 800a5ac:	3b01      	subs	r3, #1
 800a5ae:	60a3      	str	r3, [r4, #8]
 800a5b0:	6823      	ldr	r3, [r4, #0]
 800a5b2:	1c5a      	adds	r2, r3, #1
 800a5b4:	6022      	str	r2, [r4, #0]
 800a5b6:	701e      	strb	r6, [r3, #0]
 800a5b8:	6962      	ldr	r2, [r4, #20]
 800a5ba:	1c43      	adds	r3, r0, #1
 800a5bc:	429a      	cmp	r2, r3
 800a5be:	d004      	beq.n	800a5ca <__swbuf_r+0x6e>
 800a5c0:	89a3      	ldrh	r3, [r4, #12]
 800a5c2:	07db      	lsls	r3, r3, #31
 800a5c4:	d5e1      	bpl.n	800a58a <__swbuf_r+0x2e>
 800a5c6:	2e0a      	cmp	r6, #10
 800a5c8:	d1df      	bne.n	800a58a <__swbuf_r+0x2e>
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	4628      	mov	r0, r5
 800a5ce:	f7ff fa59 	bl	8009a84 <_fflush_r>
 800a5d2:	2800      	cmp	r0, #0
 800a5d4:	d0d9      	beq.n	800a58a <__swbuf_r+0x2e>
 800a5d6:	e7d6      	b.n	800a586 <__swbuf_r+0x2a>

0800a5d8 <__swsetup_r>:
 800a5d8:	b538      	push	{r3, r4, r5, lr}
 800a5da:	4b29      	ldr	r3, [pc, #164]	@ (800a680 <__swsetup_r+0xa8>)
 800a5dc:	4605      	mov	r5, r0
 800a5de:	6818      	ldr	r0, [r3, #0]
 800a5e0:	460c      	mov	r4, r1
 800a5e2:	b118      	cbz	r0, 800a5ec <__swsetup_r+0x14>
 800a5e4:	6a03      	ldr	r3, [r0, #32]
 800a5e6:	b90b      	cbnz	r3, 800a5ec <__swsetup_r+0x14>
 800a5e8:	f7fc fca0 	bl	8006f2c <__sinit>
 800a5ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5f0:	0719      	lsls	r1, r3, #28
 800a5f2:	d422      	bmi.n	800a63a <__swsetup_r+0x62>
 800a5f4:	06da      	lsls	r2, r3, #27
 800a5f6:	d407      	bmi.n	800a608 <__swsetup_r+0x30>
 800a5f8:	2209      	movs	r2, #9
 800a5fa:	602a      	str	r2, [r5, #0]
 800a5fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a600:	81a3      	strh	r3, [r4, #12]
 800a602:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a606:	e033      	b.n	800a670 <__swsetup_r+0x98>
 800a608:	0758      	lsls	r0, r3, #29
 800a60a:	d512      	bpl.n	800a632 <__swsetup_r+0x5a>
 800a60c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a60e:	b141      	cbz	r1, 800a622 <__swsetup_r+0x4a>
 800a610:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a614:	4299      	cmp	r1, r3
 800a616:	d002      	beq.n	800a61e <__swsetup_r+0x46>
 800a618:	4628      	mov	r0, r5
 800a61a:	f7fd fc29 	bl	8007e70 <_free_r>
 800a61e:	2300      	movs	r3, #0
 800a620:	6363      	str	r3, [r4, #52]	@ 0x34
 800a622:	89a3      	ldrh	r3, [r4, #12]
 800a624:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a628:	81a3      	strh	r3, [r4, #12]
 800a62a:	2300      	movs	r3, #0
 800a62c:	6063      	str	r3, [r4, #4]
 800a62e:	6923      	ldr	r3, [r4, #16]
 800a630:	6023      	str	r3, [r4, #0]
 800a632:	89a3      	ldrh	r3, [r4, #12]
 800a634:	f043 0308 	orr.w	r3, r3, #8
 800a638:	81a3      	strh	r3, [r4, #12]
 800a63a:	6923      	ldr	r3, [r4, #16]
 800a63c:	b94b      	cbnz	r3, 800a652 <__swsetup_r+0x7a>
 800a63e:	89a3      	ldrh	r3, [r4, #12]
 800a640:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a644:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a648:	d003      	beq.n	800a652 <__swsetup_r+0x7a>
 800a64a:	4621      	mov	r1, r4
 800a64c:	4628      	mov	r0, r5
 800a64e:	f000 f883 	bl	800a758 <__smakebuf_r>
 800a652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a656:	f013 0201 	ands.w	r2, r3, #1
 800a65a:	d00a      	beq.n	800a672 <__swsetup_r+0x9a>
 800a65c:	2200      	movs	r2, #0
 800a65e:	60a2      	str	r2, [r4, #8]
 800a660:	6962      	ldr	r2, [r4, #20]
 800a662:	4252      	negs	r2, r2
 800a664:	61a2      	str	r2, [r4, #24]
 800a666:	6922      	ldr	r2, [r4, #16]
 800a668:	b942      	cbnz	r2, 800a67c <__swsetup_r+0xa4>
 800a66a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a66e:	d1c5      	bne.n	800a5fc <__swsetup_r+0x24>
 800a670:	bd38      	pop	{r3, r4, r5, pc}
 800a672:	0799      	lsls	r1, r3, #30
 800a674:	bf58      	it	pl
 800a676:	6962      	ldrpl	r2, [r4, #20]
 800a678:	60a2      	str	r2, [r4, #8]
 800a67a:	e7f4      	b.n	800a666 <__swsetup_r+0x8e>
 800a67c:	2000      	movs	r0, #0
 800a67e:	e7f7      	b.n	800a670 <__swsetup_r+0x98>
 800a680:	20000018 	.word	0x20000018

0800a684 <_raise_r>:
 800a684:	291f      	cmp	r1, #31
 800a686:	b538      	push	{r3, r4, r5, lr}
 800a688:	4605      	mov	r5, r0
 800a68a:	460c      	mov	r4, r1
 800a68c:	d904      	bls.n	800a698 <_raise_r+0x14>
 800a68e:	2316      	movs	r3, #22
 800a690:	6003      	str	r3, [r0, #0]
 800a692:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a696:	bd38      	pop	{r3, r4, r5, pc}
 800a698:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a69a:	b112      	cbz	r2, 800a6a2 <_raise_r+0x1e>
 800a69c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a6a0:	b94b      	cbnz	r3, 800a6b6 <_raise_r+0x32>
 800a6a2:	4628      	mov	r0, r5
 800a6a4:	f000 f830 	bl	800a708 <_getpid_r>
 800a6a8:	4622      	mov	r2, r4
 800a6aa:	4601      	mov	r1, r0
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a6b2:	f000 b817 	b.w	800a6e4 <_kill_r>
 800a6b6:	2b01      	cmp	r3, #1
 800a6b8:	d00a      	beq.n	800a6d0 <_raise_r+0x4c>
 800a6ba:	1c59      	adds	r1, r3, #1
 800a6bc:	d103      	bne.n	800a6c6 <_raise_r+0x42>
 800a6be:	2316      	movs	r3, #22
 800a6c0:	6003      	str	r3, [r0, #0]
 800a6c2:	2001      	movs	r0, #1
 800a6c4:	e7e7      	b.n	800a696 <_raise_r+0x12>
 800a6c6:	2100      	movs	r1, #0
 800a6c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a6cc:	4620      	mov	r0, r4
 800a6ce:	4798      	blx	r3
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	e7e0      	b.n	800a696 <_raise_r+0x12>

0800a6d4 <raise>:
 800a6d4:	4b02      	ldr	r3, [pc, #8]	@ (800a6e0 <raise+0xc>)
 800a6d6:	4601      	mov	r1, r0
 800a6d8:	6818      	ldr	r0, [r3, #0]
 800a6da:	f7ff bfd3 	b.w	800a684 <_raise_r>
 800a6de:	bf00      	nop
 800a6e0:	20000018 	.word	0x20000018

0800a6e4 <_kill_r>:
 800a6e4:	b538      	push	{r3, r4, r5, lr}
 800a6e6:	4d07      	ldr	r5, [pc, #28]	@ (800a704 <_kill_r+0x20>)
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	4608      	mov	r0, r1
 800a6ee:	4611      	mov	r1, r2
 800a6f0:	602b      	str	r3, [r5, #0]
 800a6f2:	f7f7 ffc0 	bl	8002676 <_kill>
 800a6f6:	1c43      	adds	r3, r0, #1
 800a6f8:	d102      	bne.n	800a700 <_kill_r+0x1c>
 800a6fa:	682b      	ldr	r3, [r5, #0]
 800a6fc:	b103      	cbz	r3, 800a700 <_kill_r+0x1c>
 800a6fe:	6023      	str	r3, [r4, #0]
 800a700:	bd38      	pop	{r3, r4, r5, pc}
 800a702:	bf00      	nop
 800a704:	200009c0 	.word	0x200009c0

0800a708 <_getpid_r>:
 800a708:	f7f7 bfad 	b.w	8002666 <_getpid>

0800a70c <__swhatbuf_r>:
 800a70c:	b570      	push	{r4, r5, r6, lr}
 800a70e:	460c      	mov	r4, r1
 800a710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a714:	2900      	cmp	r1, #0
 800a716:	b096      	sub	sp, #88	@ 0x58
 800a718:	4615      	mov	r5, r2
 800a71a:	461e      	mov	r6, r3
 800a71c:	da0d      	bge.n	800a73a <__swhatbuf_r+0x2e>
 800a71e:	89a3      	ldrh	r3, [r4, #12]
 800a720:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a724:	f04f 0100 	mov.w	r1, #0
 800a728:	bf14      	ite	ne
 800a72a:	2340      	movne	r3, #64	@ 0x40
 800a72c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a730:	2000      	movs	r0, #0
 800a732:	6031      	str	r1, [r6, #0]
 800a734:	602b      	str	r3, [r5, #0]
 800a736:	b016      	add	sp, #88	@ 0x58
 800a738:	bd70      	pop	{r4, r5, r6, pc}
 800a73a:	466a      	mov	r2, sp
 800a73c:	f000 f848 	bl	800a7d0 <_fstat_r>
 800a740:	2800      	cmp	r0, #0
 800a742:	dbec      	blt.n	800a71e <__swhatbuf_r+0x12>
 800a744:	9901      	ldr	r1, [sp, #4]
 800a746:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a74a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a74e:	4259      	negs	r1, r3
 800a750:	4159      	adcs	r1, r3
 800a752:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a756:	e7eb      	b.n	800a730 <__swhatbuf_r+0x24>

0800a758 <__smakebuf_r>:
 800a758:	898b      	ldrh	r3, [r1, #12]
 800a75a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a75c:	079d      	lsls	r5, r3, #30
 800a75e:	4606      	mov	r6, r0
 800a760:	460c      	mov	r4, r1
 800a762:	d507      	bpl.n	800a774 <__smakebuf_r+0x1c>
 800a764:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a768:	6023      	str	r3, [r4, #0]
 800a76a:	6123      	str	r3, [r4, #16]
 800a76c:	2301      	movs	r3, #1
 800a76e:	6163      	str	r3, [r4, #20]
 800a770:	b003      	add	sp, #12
 800a772:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a774:	ab01      	add	r3, sp, #4
 800a776:	466a      	mov	r2, sp
 800a778:	f7ff ffc8 	bl	800a70c <__swhatbuf_r>
 800a77c:	9f00      	ldr	r7, [sp, #0]
 800a77e:	4605      	mov	r5, r0
 800a780:	4639      	mov	r1, r7
 800a782:	4630      	mov	r0, r6
 800a784:	f7fd fbe8 	bl	8007f58 <_malloc_r>
 800a788:	b948      	cbnz	r0, 800a79e <__smakebuf_r+0x46>
 800a78a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a78e:	059a      	lsls	r2, r3, #22
 800a790:	d4ee      	bmi.n	800a770 <__smakebuf_r+0x18>
 800a792:	f023 0303 	bic.w	r3, r3, #3
 800a796:	f043 0302 	orr.w	r3, r3, #2
 800a79a:	81a3      	strh	r3, [r4, #12]
 800a79c:	e7e2      	b.n	800a764 <__smakebuf_r+0xc>
 800a79e:	89a3      	ldrh	r3, [r4, #12]
 800a7a0:	6020      	str	r0, [r4, #0]
 800a7a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a7a6:	81a3      	strh	r3, [r4, #12]
 800a7a8:	9b01      	ldr	r3, [sp, #4]
 800a7aa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a7ae:	b15b      	cbz	r3, 800a7c8 <__smakebuf_r+0x70>
 800a7b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a7b4:	4630      	mov	r0, r6
 800a7b6:	f000 f81d 	bl	800a7f4 <_isatty_r>
 800a7ba:	b128      	cbz	r0, 800a7c8 <__smakebuf_r+0x70>
 800a7bc:	89a3      	ldrh	r3, [r4, #12]
 800a7be:	f023 0303 	bic.w	r3, r3, #3
 800a7c2:	f043 0301 	orr.w	r3, r3, #1
 800a7c6:	81a3      	strh	r3, [r4, #12]
 800a7c8:	89a3      	ldrh	r3, [r4, #12]
 800a7ca:	431d      	orrs	r5, r3
 800a7cc:	81a5      	strh	r5, [r4, #12]
 800a7ce:	e7cf      	b.n	800a770 <__smakebuf_r+0x18>

0800a7d0 <_fstat_r>:
 800a7d0:	b538      	push	{r3, r4, r5, lr}
 800a7d2:	4d07      	ldr	r5, [pc, #28]	@ (800a7f0 <_fstat_r+0x20>)
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	4604      	mov	r4, r0
 800a7d8:	4608      	mov	r0, r1
 800a7da:	4611      	mov	r1, r2
 800a7dc:	602b      	str	r3, [r5, #0]
 800a7de:	f7f7 ffaa 	bl	8002736 <_fstat>
 800a7e2:	1c43      	adds	r3, r0, #1
 800a7e4:	d102      	bne.n	800a7ec <_fstat_r+0x1c>
 800a7e6:	682b      	ldr	r3, [r5, #0]
 800a7e8:	b103      	cbz	r3, 800a7ec <_fstat_r+0x1c>
 800a7ea:	6023      	str	r3, [r4, #0]
 800a7ec:	bd38      	pop	{r3, r4, r5, pc}
 800a7ee:	bf00      	nop
 800a7f0:	200009c0 	.word	0x200009c0

0800a7f4 <_isatty_r>:
 800a7f4:	b538      	push	{r3, r4, r5, lr}
 800a7f6:	4d06      	ldr	r5, [pc, #24]	@ (800a810 <_isatty_r+0x1c>)
 800a7f8:	2300      	movs	r3, #0
 800a7fa:	4604      	mov	r4, r0
 800a7fc:	4608      	mov	r0, r1
 800a7fe:	602b      	str	r3, [r5, #0]
 800a800:	f7f7 ffa9 	bl	8002756 <_isatty>
 800a804:	1c43      	adds	r3, r0, #1
 800a806:	d102      	bne.n	800a80e <_isatty_r+0x1a>
 800a808:	682b      	ldr	r3, [r5, #0]
 800a80a:	b103      	cbz	r3, 800a80e <_isatty_r+0x1a>
 800a80c:	6023      	str	r3, [r4, #0]
 800a80e:	bd38      	pop	{r3, r4, r5, pc}
 800a810:	200009c0 	.word	0x200009c0

0800a814 <_init>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	bf00      	nop
 800a818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81a:	bc08      	pop	{r3}
 800a81c:	469e      	mov	lr, r3
 800a81e:	4770      	bx	lr

0800a820 <_fini>:
 800a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a822:	bf00      	nop
 800a824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a826:	bc08      	pop	{r3}
 800a828:	469e      	mov	lr, r3
 800a82a:	4770      	bx	lr
